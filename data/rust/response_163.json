[{"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 2028, "user_id": 394331, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/30FMc.jpg?s=128&g=1", "display_name": "peterdn", "link": "https://stackoverflow.com/users/394331/peterdn"}, "is_accepted": true, "score": 2, "last_activity_date": 1519259625, "creation_date": 1519259625, "answer_id": 48917792, "question_id": 48913089, "link": "https://stackoverflow.com/questions/48913089/rust-borrow-semantics-string/48917792#48917792", "title": "Rust Borrow Semantics String", "body": "<p>It looks like <code>room_id</code> is a double reference of type <code>&amp;&amp;T</code>. This means that in <code>Some(room_id.clone())</code>, you are <em>cloning a borrowed reference to data</em> that <code>self.planning_pokers</code> owns, rather than cloning the underlying data itself. Because you then assign it to the variable <code>current_room</code> in the outer scope, <code>self.planning_pokers</code> remains borrowed throughout.  It might help to see that in this case, <code>current_room</code> is of type <code>Option&lt;&amp;T&gt;</code>.</p>\n\n<p><code>Some(room_id.to_string())</code> instead creates a copy of the underlying data which is moved into <code>current_room</code>. In this case <code>current_room</code> is of type <code>Option&lt;T&gt;</code>.</p>\n\n<p>The difference is (I believe) due to Rust's <a href=\"https://stackoverflow.com/a/28552082/394331\">auto-dereferencing behaviour</a>. Immutable references implement <code>Clone</code>, and so Rust calls the method on <code>&amp;T</code>. However, they do not implement <code>ToString</code>, so Rust dereferences all the way down to <code>T</code>.</p>\n\n<hr>\n\n<p>Note: <a href=\"https://github.com/rust-lang-nursery/rust-clippy\" rel=\"nofollow noreferrer\">rust-clippy</a> warns about this very issue. From the <a href=\"https://github.com/rust-lang-nursery/rust-clippy/wiki#clone_double_ref\" rel=\"nofollow noreferrer\">wiki</a>:</p>\n\n<h2>clone_double_ref</h2>\n\n<p><strong>What it does:</strong> Checks for usage of .clone() on an &amp;&amp;T.</p>\n\n<p><strong>Why is this bad?</strong> Cloning an &amp;&amp;T copies the inner &amp;T, instead of cloning the underlying T.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>fn main() {\n   let x = vec![1];\n   let y = &amp;&amp;x;\n   let z = y.clone();\n   println!(\"{:p} {:p}\",*y, z); // prints out the same pointer\n}\n</code></pre>\n"}], "owner": {"reputation": 519, "user_id": 3683364, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7df5f1423eea036cded324d60017070a?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel", "link": "https://stackoverflow.com/users/3683364/daniel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 48917792, "answer_count": 1, "score": 1, "last_activity_date": 1519262898, "creation_date": 1519238040, "last_edit_date": 1519262898, "question_id": 48913089, "link": "https://stackoverflow.com/questions/48913089/rust-borrow-semantics-string", "title": "Rust Borrow Semantics String", "body": "<p>I have a block of code</p>\n\n<pre><code>let mut current_room = None;\n\nfor (ref room_id, ref poker_room) in &amp;self.planning_pokers {\n    if poker_room.has_player(user_id.clone()) {\n        current_room = Some(room_id.clone());\n        break\n    }\n}\n\nmatch current_room {\n    Some(room_id) =&gt; {\n        self.planning_pokers.get_mut(&amp;room_id.clone()).unwrap().remove_player(user_id.clone());\n        if self.planning_pokers.is_empty() {\n            self.planning_pokers.remove(&amp;room_id.clone());\n        }\n    },\n    None =&gt; (),\n    _ =&gt; ()\n}\n\nprintln!(\"Player {} joined room {}\", join_room.room_id.clone(), user_id.clone());\nif self.planning_pokers.contains_key(&amp;join_room.room_id.clone()) {\n\n}\n</code></pre>\n\n<p>This fails to compile due to a mutable and immutable borrow conflict. The conflict in question pertains to me setting the value of <code>current_room</code> to <code>Some(room_id.clone())</code>. If I instead do <code>Some(room_id.clone().to_string())</code> everything works as expected. Why is this the case? And why does the rust compiler give me an error that is seemingly unrelated?</p>\n\n<p>For reference this is the error: </p>\n\n<blockquote>\n  <p>cannot borrow <code>self.planning_pokers</code> as mutable because it is also borrowed as immutable</p>\n</blockquote>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1239, "user_id": 2460186, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8747fc137293393313f951ddfc83d2c9?s=128&d=identicon&r=PG", "display_name": "bioball", "link": "https://stackoverflow.com/users/2460186/bioball"}, "edited": false, "score": 0, "creation_date": 1519231358, "post_id": 48910750, "comment_id": 84828456, "body": "So, I tried changing my implementation to: <code>self.storage.into_iter()</code>, but I&#39;m still seeing the same error message. That should return an iterator of values, rather than references right?"}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "reply_to_user": {"reputation": 1239, "user_id": 2460186, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8747fc137293393313f951ddfc83d2c9?s=128&d=identicon&r=PG", "display_name": "bioball", "link": "https://stackoverflow.com/users/2460186/bioball"}, "edited": false, "score": 0, "creation_date": 1519241429, "post_id": 48910750, "comment_id": 84834187, "body": "@bioball your <code>self.storage</code> is a mutable reference to data, a slice of some data owned elsewhere. Calling <code>into_iter</code> on an <code>&amp;mut [T]</code> isn&#39;t going to give you an iterator of owned values because you don&#39;t own the data to begin with."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 2, "last_activity_date": 1519230243, "creation_date": 1519230243, "answer_id": 48910750, "question_id": 48910588, "link": "https://stackoverflow.com/questions/48910588/cannot-resolve-coresliceiter-as-coreiteriterator/48910750#48910750", "title": "Cannot resolve core::slice::Iter as core::iter::Iterator?", "body": "<blockquote>\n  <p>For one, it seems like Rust isn't able to resolve a core::slice::Iter as core::iter::Iterator. But, core::slice::Iter is an iterator, right? Why aren't these types matching up?</p>\n</blockquote>\n\n<p>You're missing the crucial part of the message:</p>\n\n<blockquote>\n  <p>type mismatch resolving <code>&lt;std::slice::Iter&lt;'_, T&gt; as std::iter::Iterator&gt;::Item == T</code></p>\n</blockquote>\n\n<p>It can't resolve it *as an iterator with the <code>Item</code> type as <code>T</code>. </p>\n\n<p>This is because <code>slice::Iter</code> is an iterator over references, not values.</p>\n"}, {"comments": [{"owner": {"reputation": 1239, "user_id": 2460186, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8747fc137293393313f951ddfc83d2c9?s=128&d=identicon&r=PG", "display_name": "bioball", "link": "https://stackoverflow.com/users/2460186/bioball"}, "edited": false, "score": 0, "creation_date": 1519241587, "post_id": 48913509, "comment_id": 84834273, "body": "Ah! Thanks for the help! This totally makes sense now."}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 7, "last_activity_date": 1519239656, "creation_date": 1519239656, "answer_id": 48913509, "question_id": 48910588, "link": "https://stackoverflow.com/questions/48910588/cannot-resolve-coresliceiter-as-coreiteriterator/48913509#48913509", "title": "Cannot resolve core::slice::Iter as core::iter::Iterator?", "body": "<blockquote>\n  <p>There's a couple things that are confusing about this error message.</p>\n</blockquote>\n\n<p>You're dead right, it's quite a hard message to parse.</p>\n\n<blockquote>\n  <p>it seems like Rust isn't able to resolve a <code>core::slice::Iter</code> as <code>core::iter::Iterator</code></p>\n</blockquote>\n\n<p>You're dead wrong: you mis-parsed the message by missing some angle brackets. (I said it was hard to parse!) Let's look at the message, with some crucial bracketing highlighted:</p>\n\n<pre><code>type mismatch resolving `&lt;core::slice::Iter&lt;'_, T&gt; as core::iter::Iterator&gt;::Item == T`\n                         (________________________________________________)\n</code></pre>\n\n<p>The problem isn't resolving <code>core::slice::Iter&lt;'_, T&gt;</code> as <code>core::iter::Iterator</code>, it's resolving the equality, where the whole expression <code>&lt;core::slice::Iter&lt;'_, T&gt; as core::iter::Iterator&gt;::Item</code> is the left-hand side. That whole mess names a single type: it's the type you get by using the <code>as</code> operator to upcast <code>core::slice::Iter&lt;'_, T&gt;</code> to <code>core::iter::Iterator</code>, and then take the <code>Item</code> member of it.</p>\n\n<p>The trait <code>IntoIterator</code> is defined as follows:</p>\n\n<pre><code>pub trait IntoIterator where\n    &lt;Self::IntoIter as Iterator&gt;::Item == Self::Item\n</code></pre>\n\n<p>That is, to implement the trait, you need to satisfy the requirement given. This is the requirement the compiler is complaining about. You've defined <code>Item</code> as <code>T</code>, and <code>IntoIter</code> as <code>core::slice::Iter&lt;'_, T&gt;</code>, but putting those two definitions in doesn't satisfy the equality.</p>\n\n<p>Put another way, to implement <code>IntoIterator</code>, you need to define an <code>Item</code> type, it needs to be the same as your underlying iterator's <code>Item</code> type. <code>core::slice::Iter&lt;'a, T&gt;</code> defines its <code>Item</code> type like this:</p>\n\n<pre><code>type Item = &amp;'a T\n</code></pre>\n\n<p>so you need the same definition in your <code>impl</code> block.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ef85938e853a8d0977683e3488ad0bc6&amp;version=stable\" rel=\"noreferrer\">Here's a Playground with your definition fixed</a>, and an empty <code>main()</code> so it'll compile.</p>\n"}], "owner": {"reputation": 1239, "user_id": 2460186, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/8747fc137293393313f951ddfc83d2c9?s=128&d=identicon&r=PG", "display_name": "bioball", "link": "https://stackoverflow.com/users/2460186/bioball"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 565, "favorite_count": 0, "accepted_answer_id": 48913509, "answer_count": 2, "score": 5, "last_activity_date": 1519239656, "creation_date": 1519229782, "question_id": 48910588, "link": "https://stackoverflow.com/questions/48910588/cannot-resolve-coresliceiter-as-coreiteriterator", "title": "Cannot resolve core::slice::Iter as core::iter::Iterator?", "body": "<p>I'm trying to write a simple iterator in Rust:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\npub struct StackVec&lt;'a, T: 'a&gt; {\n    storage: &amp;'a mut [T],\n    len: usize,\n    _head: usize,\n}\n\nimpl&lt;'a, T&gt; IntoIterator for StackVec&lt;'a, T&gt; {\n    type Item = T;\n    type IntoIter = core::slice::Iter&lt;'a, T&gt;;\n\n    fn into_iter(self) -&gt; core::slice::Iter&lt;'a, T&gt; {\n        self.storage.iter()\n    }\n}\n</code></pre>\n\n<p>However, when trying to compile it, I'm getting this error:</p>\n\n<pre><code>error[E0271]: type mismatch resolving `&lt;core::slice::Iter&lt;'_, T&gt; as core::iter::Iterator&gt;::Item == T`\n   --&gt; src/lib.rs:135:13\n    |\n135 | impl&lt;'a, T&gt; IntoIterator for StackVec&lt;'a, T&gt; {\n    |             ^^^^^^^^^^^^ expected reference, found type parameter\n    |\n    = note: expected type `&amp;T`\n               found type `T`\n\nerror: aborting due to previous error\n\nerror: Could not compile `stack-vec`.\n</code></pre>\n\n<p>There's a couple things that are confusing about this error message. For one, it seems like Rust isn't able to resolve a <code>core::slice::Iter</code> as <code>core::iter::Iterator</code>. But, <code>core::slice::Iter</code> <em>is</em> an iterator, right? Why aren't these types matching up?</p>\n\n<p>Secondly, I'm seeing an error around expecting <code>IntoIterator</code> to be a reference rather than a type parameter. However, it's <em>not</em> a type parameter to begin with. What's that about?</p>\n\n<p>What am I doing wrong here? What's Rust trying to tell me about my code?</p>\n"}, {"tags": ["tree", "rust", "a-star"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1519228181, "post_id": 48909675, "comment_id": 84826124, "body": "Use interior mutability (<code>Cell</code>)"}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1519242459, "post_id": 48909675, "comment_id": 84834764, "body": "Or some kind of indirection, like an index."}, {"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 1, "creation_date": 1519281364, "post_id": 48909675, "comment_id": 84848317, "body": "It is often possible to remove the need of mutable references. Can you elaborate more on why you need the mutable reference for the search?"}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user7383906"}, "is_accepted": true, "score": 1, "last_activity_date": 1519287606, "creation_date": 1519287606, "answer_id": 48922562, "question_id": 48909675, "link": "https://stackoverflow.com/questions/48909675/a-open-and-close-lists-in-rust/48922562#48922562", "title": "A*: open and close lists in Rust", "body": "<p>After some research about interior mutability, threads and a few other things for the project, I found a more elegant solution.</p>\n\n<p>The goal of the algorithm is to compute childs until you find the target, then you go back all your graph by a system of parents and track all the moves you did from the beginning. I found a way to do it without having a graph representation but only openlist and closelist. <strong>No need for multiple mutable references in this case.</strong> If, in each child, you store the index of its parent in the close list, which won't change, you can go back to beginning without mutability.</p>\n\n<p><a href=\"https://i.stack.imgur.com/KjnRQ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/KjnRQ.png\" alt=\"enter image description here\"></a></p>\n\n<p>The answer I asked is not solving my problem, I did research on the algorithm again and did everything again. Anyway, thank you for your answers, I learned new things about Rust.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user7383906"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "closed_date": 1519495481, "accepted_answer_id": 48922562, "answer_count": 1, "score": 1, "last_activity_date": 1519290930, "creation_date": 1519227082, "last_edit_date": 1519290930, "question_id": 48909675, "link": "https://stackoverflow.com/questions/48909675/a-open-and-close-lists-in-rust", "closed_reason": "Needs more focus", "title": "A*: open and close lists in Rust", "body": "<p>I'm learning Rust and I have troubles figuring out what structure I should use for a N-Puzzle solver using A*.</p>\n\n<p>In this project I use a tree to compute and choose the best way to solve a N-Puzzle. A typical tree looks like this :\n<a href=\"https://i.stack.imgur.com/qQPnH.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qQPnH.png\" alt=\"enter image description here\"></a>\nThe number in each node is the computed f score, it represents the minimum number of move we can hope to do before getting to the final state.\nGrey nodes are already explored nodes, they are in the \"close set\".\nGreen nodes are potential steps to the solution, it's the \"open set\".</p>\n\n<p>At each iteration we explore the green node with the lowest f score. To optimise the search of this node in the open set, I need to store a mutable reference of all the green nodes in a vector/list/array..</p>\n\n<p><strong>What is the best way to have both a tree and a list of the same mutable nodes ?</strong></p>\n\n<p>Please notice that I would like to use multiple threads later.</p>\n"}, {"tags": ["types", "casting", "rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 3, "creation_date": 1519217981, "post_id": 48906432, "comment_id": 84818774, "body": "<a href=\"https://doc.rust-lang.org/reference/tokens.html#integer-literals\" rel=\"nofollow noreferrer\">doc.rust-lang.org/reference/tokens.html#integer-literals</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1519218013, "post_id": 48906432, "comment_id": 84818796, "body": "@Stefan: I see no mention <a href=\"https://doc.rust-lang.org/book/first-edition/primitive-types.html\" rel=\"nofollow noreferrer\">in the book</a> though :x"}, {"owner": {"reputation": 733, "user_id": 2859912, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/3d28ff00239f1a3a9007bee2bbe06aa7?s=128&d=identicon&r=PG&f=1", "display_name": "Dimebag", "link": "https://stackoverflow.com/users/2859912/dimebag"}, "edited": false, "score": 0, "creation_date": 1519235362, "post_id": 48906432, "comment_id": 84831022, "body": "TIL they&#39;re called literals. I wonder if anything would make this question <i>not</i> deserve downvotes."}], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 3, "creation_date": 1519218647, "post_id": 48906464, "comment_id": 84819236, "body": "Why someone put -1? This is the right answer. I prefer typing <code>5_i16</code> to distinguish the number and the type personally."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 6, "last_activity_date": 1519217635, "creation_date": 1519217635, "answer_id": 48906464, "question_id": 48906432, "link": "https://stackoverflow.com/questions/48906432/giving-an-explicit-type-to-a-number/48906464#48906464", "title": "Giving an explicit type to a number", "body": "<pre><code>5i16\n</code></pre>\n\n<p>Rust's integer suffixes are just the primitive type name.</p>\n"}], "owner": {"reputation": 733, "user_id": 2859912, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/3d28ff00239f1a3a9007bee2bbe06aa7?s=128&d=identicon&r=PG&f=1", "display_name": "Dimebag", "link": "https://stackoverflow.com/users/2859912/dimebag"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 48906464, "answer_count": 1, "score": 1, "last_activity_date": 1519224682, "creation_date": 1519217520, "last_edit_date": 1519224682, "question_id": 48906432, "link": "https://stackoverflow.com/questions/48906432/giving-an-explicit-type-to-a-number", "title": "Giving an explicit type to a number", "body": "<p>Typing a number in Rust code, e.g.</p>\n\n<pre><code>a = 12\n</code></pre>\n\n<p>interprets the number as an i32. Is there any way to write that number as an i16 for example? </p>\n\n<p>I'm looking for something such as adding an L to the number, e.g. <code>12L</code>, to 'make' it a <code>long</code> type, such as is done in C.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1519206470, "post_id": 48898749, "comment_id": 84810573, "body": "Yep, seems typical RAII behavior to me: to ensure that the temporary directory (a resource) is cleaned-up, its lifetime is tied to that of a variable in the program. Of course, it&#39;s not 100% guarantee (you can use <code>mem::forget</code>...), but it&#39;s really helpful to avoid running out of file-descriptors in general."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1519191067, "creation_date": 1519191067, "answer_id": 48898749, "question_id": 48898458, "link": "https://stackoverflow.com/questions/48898458/inconsistent-behavior-of-mktemp-crate-in-rust/48898749#48898749", "title": "Inconsistent behavior of `mktemp` crate in Rust", "body": "<p>I don't know, but I wonder if there's something in <a href=\"https://docs.rs/mktemp/0.3.1/mktemp/\" rel=\"noreferrer\">the <code>mktemp</code> documentation</a> about this...</p>\n\n<blockquote>\n  <p>Once the variable goes out of scope, the underlying file system resource is removed.</p>\n</blockquote>\n\n<p>You're not storing the <code>Temp</code> in a variable, so it goes out of scope immediately.  It's creating the directory and then immediately destroying it.</p>\n"}], "owner": {"reputation": 2658, "user_id": 1616210, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/pKBwj.jpg?s=128&g=1", "display_name": "qweruiop", "link": "https://stackoverflow.com/users/1616210/qweruiop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 124, "favorite_count": 0, "accepted_answer_id": 48898749, "answer_count": 1, "score": 3, "last_activity_date": 1519191067, "creation_date": 1519189228, "question_id": 48898458, "link": "https://stackoverflow.com/questions/48898458/inconsistent-behavior-of-mktemp-crate-in-rust", "title": "Inconsistent behavior of `mktemp` crate in Rust", "body": "<p>If I call <code>.to_path_buf()</code> immediately after <code>expect</code>, the temporary directory will not be created. Is this a bug or a Rust feature?</p>\n\n<pre><code>extern crate mktemp;                                                                                                                                                                                        \n\nuse std::path::Path;                                                                                                                                                                                        \n\nfn main() {                                                                                                                                                                                                 \n    let temp_dir = mktemp::Temp::new_dir().expect(\"Failed to create a temp directory\");                                                                                                                     \n    let temp_dir_path = temp_dir.to_path_buf();                                                                                                                                                             \n    println!(\"tmp path exists: {}\", Path::exists(&amp;temp_dir_path));                                                                                                                                          \n\n    let temp_dir_path = mktemp::Temp::new_dir().expect(\"Failed to create a temp directory\").to_path_buf();                                                                                                  \n    println!(\"tmp path exists: {}\", Path::exists(&amp;temp_dir_path));                                                                                                                                          \n}\n</code></pre>\n\n<p>Which outputs:</p>\n\n<pre><code>tmp path exists: true\ntmp path exists: false\n</code></pre>\n"}, {"tags": ["rust", "content-type"], "answers": [{"tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": false, "score": 4, "last_activity_date": 1519166795, "creation_date": 1519166795, "answer_id": 48895460, "question_id": 48895167, "link": "https://stackoverflow.com/questions/48895167/rocket-not-setting-content-type-text-html/48895460#48895460", "title": "Rocket not setting content-type text/html", "body": "<p>By default, Rocket will respond with text/plain so you have to override it using the content module it provides.</p>\n\n<p>You can use the <a href=\"https://api.rocket.rs/rocket/response/content/struct.Html.html\" rel=\"nofollow noreferrer\">Html</a> responder as such:</p>\n\n<pre><code>use rocket::response::content;\n\n#[get(\"/\")]\nfn page_index() -&gt; content::Html&lt;&amp;'static str&gt; {\n    content::Html(r#\"\n        &lt;title&gt;GCD Calculator&lt;/title&gt;\n        &lt;form action=\"/gcd\" method=\"post\"&gt;\n            &lt;input type=\"text\" name=\"n\" /&gt;\n            &lt;input type=\"text\" name=\"n\" /&gt;\n            &lt;button type=\"submit\"&gt;Compute GCD&lt;/button&gt;\n        &lt;/form&gt;\n    \"#)\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2443, "user_id": 1180612, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8ed52dc06b74c82eff0d315a60e6d574?s=128&d=identicon&r=PG", "display_name": "Hendrik Jan", "link": "https://stackoverflow.com/users/1180612/hendrik-jan"}, "edited": false, "score": 1, "creation_date": 1519217506, "post_id": 48895463, "comment_id": 84818448, "body": "<code>use rocket::response::content::Html;</code> works great. I am still wondering why the Rocket console tells me <code>&quot;GET &#47; text&#47;html&quot;</code> but sends me <code>&quot;text&#47;plain&quot;</code>."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "reply_to_user": {"reputation": 2443, "user_id": 1180612, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8ed52dc06b74c82eff0d315a60e6d574?s=128&d=identicon&r=PG", "display_name": "Hendrik Jan", "link": "https://stackoverflow.com/users/1180612/hendrik-jan"}, "edited": false, "score": 4, "creation_date": 1519219078, "post_id": 48895463, "comment_id": 84819522, "body": "Oh, that &quot;text/html&quot; comes from the Accept header in the request, indicating what type the browser expects. It only affects what actually gets sent if you use <a href=\"https://rocket.rs/guide/requests/#format\" rel=\"nofollow noreferrer\">content negotiation</a>."}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 12, "last_activity_date": 1519166812, "creation_date": 1519166812, "answer_id": 48895463, "question_id": 48895167, "link": "https://stackoverflow.com/questions/48895167/rocket-not-setting-content-type-text-html/48895463#48895463", "title": "Rocket not setting content-type text/html", "body": "<p>The <a href=\"https://rocket.rs/guide/responses/#wrapping\" rel=\"noreferrer\">guide about <em>responders</em></a> explains how to set the Content-Type of your response. In particular, you need <a href=\"https://api.rocket.rs/rocket/response/content/struct.Html.html\" rel=\"noreferrer\"><code>rocket::response::content::Html</code></a>:</p>\n\n<pre><code>use rocket::response::content::Html;\n#[get(\"/\")]\nfn page_index() -&gt; Html&lt;&amp;'static str&gt; {\n    Html(r\"&lt;html&gt;...&lt;/html&gt;\")\n}\n</code></pre>\n\n<p>Note that you actually have to return an HTML document if you're going to set the Content-Type to \"text/html\". What you've posted in your example code is just a fragment of HTML. In practice, it's much easier to either put your HTML into a static <code>foo.html</code> file and use <a href=\"https://api.rocket.rs/rocket/response/struct.NamedFile.html\" rel=\"noreferrer\"><code>NamedFile</code></a> to serve it directly (which automatically sets the Content-Type), or <a href=\"https://rocket.rs/guide/responses/#templates\" rel=\"noreferrer\">use templates</a>.</p>\n"}], "owner": {"reputation": 2443, "user_id": 1180612, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8ed52dc06b74c82eff0d315a60e6d574?s=128&d=identicon&r=PG", "display_name": "Hendrik Jan", "link": "https://stackoverflow.com/users/1180612/hendrik-jan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1092, "favorite_count": 0, "accepted_answer_id": 48895463, "answer_count": 2, "score": 11, "last_activity_date": 1519217334, "creation_date": 1519165125, "last_edit_date": 1519217334, "question_id": 48895167, "link": "https://stackoverflow.com/questions/48895167/rocket-not-setting-content-type-text-html", "title": "Rocket not setting content-type text/html", "body": "<p>I am using the Rust Rocket framework for generating a simple webpage.</p>\n\n<p>When go the the index page \"/\":</p>\n\n<pre><code>#[get(\"/\")]\nfn page_index() -&gt; &amp;'static str {\n    r#\"\n        &lt;title&gt;GCD Calculator&lt;/title&gt;\n        &lt;form action=\"/gcd\" method=\"post\"&gt;\n            &lt;input type=\"text\" name=\"n\" /&gt;\n            &lt;input type=\"text\" name=\"n\" /&gt;\n            &lt;button type=\"submit\"&gt;Compute GCD&lt;/button&gt;\n        &lt;/form&gt;\n    \"#\n}\n</code></pre>\n\n<p>The server console tells me</p>\n\n<pre><code>GET / text/html:\n=&gt; Matched: GET /\n=&gt; Outcome: Success\n=&gt; Response succeeded.\n</code></pre>\n\n<p>But my browser tells me the Content-Type is <strong>text/plain</strong>.</p>\n\n<p>How do I get Rocket to correctly respond with <strong>text/html</strong>. Am I doing anything wrong or does Rocket?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1519162679, "post_id": 48893989, "comment_id": 84795073, "body": "Well yes, same way as before 1.7 - with <a href=\"https://doc.rust-lang.org/stable/std/char/fn.from_digit.html\" rel=\"nofollow noreferrer\">char::from_digit</a>."}, {"owner": {"reputation": 2655, "user_id": 184700, "user_type": "registered", "accept_rate": 33, "profile_image": "https://i.stack.imgur.com/ffsUU.jpg?s=128&g=1", "display_name": "Jess Bowers", "link": "https://stackoverflow.com/users/184700/jess-bowers"}, "edited": false, "score": 1, "creation_date": 1519229956, "post_id": 48893989, "comment_id": 84827454, "body": "suggest adding code to the question to make it better/easier to answer."}], "owner": {"reputation": 29, "user_id": 9251393, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80eabf6c2231e92526e9d93f80ae147b?s=128&d=identicon&r=PG&f=1", "display_name": "bitick", "link": "https://stackoverflow.com/users/9251393/bitick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 505, "favorite_count": 0, "closed_date": 1525974674, "answer_count": 0, "score": 2, "last_activity_date": 1527770380, "creation_date": 1519159810, "last_edit_date": 1525968963, "question_id": 48893989, "link": "https://stackoverflow.com/questions/48893989/how-to-convert-an-integer-to-a-string-in-base-36-in-rust", "closed_reason": "Duplicate", "title": "How to convert an integer to a string in base 36 in Rust?", "body": "<p>I need to convert an unsigned integer to a string representation with base 36. Before Rust 1.7, it was possible with <a href=\"https://doc.rust-lang.org/1.6.0/std/fmt/struct.Radix.html\" rel=\"nofollow noreferrer\"><code>std::fmt::Radix</code></a>. Is there a way to do that in stable Rust?</p>\n"}, {"tags": ["gcc", "rust", "address-sanitizer"], "comments": [{"owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 2, "creation_date": 1519158528, "post_id": 48893656, "comment_id": 84793005, "body": "From that linked article: &quot;On average, the instrumentation increases processing time by about 73% and memory usage by 340%.&quot; Which seems like enough reason to not use it by default."}], "answers": [{"tags": [], "owner": {"reputation": 642, "user_id": 4203744, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b4b8ec66122aa4930cf806cea6b3cd3f?s=128&d=identicon&r=PG", "display_name": "Matthew Curry", "link": "https://stackoverflow.com/users/4203744/matthew-curry"}, "is_accepted": false, "score": -1, "last_activity_date": 1519165502, "creation_date": 1519165502, "answer_id": 48895231, "question_id": 48893656, "link": "https://stackoverflow.com/questions/48893656/can-gccs-asan-provide-the-same-memory-safety-as-rust/48895231#48895231", "title": "Can GCC&#39;s ASAN provide the same memory safety as Rust?", "body": "<p>Haven\u2019t heard of this option, but it sounds like it modifies the output program.  In other words, it checks while the program runs. </p>\n\n<p>Rust, on the other hand, checks when the program is created (or compiled in programmer speak), so there isn\u2019t these memory safety bugs in the first place. </p>\n\n<p>The linked article mentions it only covers one case anyway, use after return. </p>\n"}, {"comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1519213244, "post_id": 48895673, "comment_id": 84815488, "body": "I don&#39;t see how memory leaks are harder to write in Rust than in C++. Both use the same RAII and smartpointer concepts."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1519213427, "post_id": 48895673, "comment_id": 84815621, "body": "@CodesInChaos If you&#39;re disciplined in C++ and always use smart pointers, it&#39;s hard to write memory leaks - but even today, many shops still rely on getting <code>new</code> and <code>delete</code> right. The Rust equivalent of smart pointers are the default, and you really have to go out of your way to get <code>new</code> and <code>delete</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519293377, "post_id": 48895673, "comment_id": 84854973, "body": "@DanHulme: It&#39;s very easy to get memory leaks in Rust. A simple cycle of reference-counted pointers, an ill-timed use of <code>mem::forget</code> (which is <b>safe</b> following the Leakpocalypse). Rust considers resource leaks safe (memory, file handles, etc...), although it tries its best to help avoid them as they are annoying."}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": false, "score": 3, "last_activity_date": 1519168039, "creation_date": 1519168039, "answer_id": 48895673, "question_id": 48893656, "link": "https://stackoverflow.com/questions/48893656/can-gccs-asan-provide-the-same-memory-safety-as-rust/48895673#48895673", "title": "Can GCC&#39;s ASAN provide the same memory safety as Rust?", "body": "<p>No, the two features are not comparable.</p>\n\n<p>Address sanitization is not a security feature, nor does it provide memory-safety: it's a debugging tool. Programmers already have tools to detect that the code they've written has memory problems, such as use-after-free or memory leaks. Valgrind is probably the best-known example. This gcc feature provides (some of) the same functionality: the only new thing is that it's integrated with the compiler, so it's easier to use.</p>\n\n<p>You wouldn't have this feature turned on in production: it's for debugging only. You compile your tests with this flag, and automatically they detect memory errors that are triggered by the test. If your tests aren't sufficient to trigger the problem, then you still have the problem, and it'll still cause the same security flaws in production.</p>\n\n<p>Rust's ownership model prevents these defects by making programs that contain such defects invalid: the compiler will not compile them. You don't have to worry about your tests not triggering the problem, because if the code compiles, there cannot be a problem.</p>\n\n<p>The two features are for different sets of problems. One feature of address sanitization is to detect memory leaks (allocating memory and neglecting to free it later). Rust makes it harder to write memory leaks than in C or C++, but it's still possible (if you have circular references). Rust's ownership model prevents data races in sequential and multi-threaded situations (see below). Address sanitization doesn't aim to detect either of those cases.</p>\n\n<p>An example of a data race in sequential code is if you're iterating over a collection of objects, while also adding or removing elements. In C++, changing most collections will <em>invalidate</em> any iterators, but it's up to the programmer to realise this has happened: it's not detected (though some collections have extra checks in debug builds). In Rust, it's not possible to mutate the collection while an iterator on it exists, because the ownership model prevents this.</p>\n\n<p>An example of a data race in multithreaded code is having two threads that share an object, with access protected by a mutex. In C++, it's possible for the programmer to forget to lock the mutex while changing the object. In Rust, the mutex itself <em>owns</em> the object it protects, so it's not possible to access it unsafely. (There are many other kinds of concurrency bugs, though, so don't get carried away!)</p>\n"}, {"comments": [{"owner": {"reputation": 14722, "user_id": 823738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a13a6ed05bdce33d6bf0f01496b9a044?s=128&d=identicon&r=PG", "display_name": "Zaffy", "link": "https://stackoverflow.com/users/823738/zaffy"}, "edited": false, "score": 0, "creation_date": 1550762584, "post_id": 48902567, "comment_id": 96397777, "body": "Undefined behavior is not necessary a memory-safety bug, is it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 14722, "user_id": 823738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a13a6ed05bdce33d6bf0f01496b9a044?s=128&d=identicon&r=PG", "display_name": "Zaffy", "link": "https://stackoverflow.com/users/823738/zaffy"}, "edited": false, "score": 0, "creation_date": 1550763493, "post_id": 48902567, "comment_id": 96398421, "body": "@Zaffy: No indeed. In general, memory-safety bugs are generally a consequence of Undefined Behavior. For example, if due to Undefined Behavior a check that a pointer is not NULL is elided, then the program may try to access memory at an offset from NULL which is a memory-safety bug."}, {"owner": {"reputation": 14722, "user_id": 823738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a13a6ed05bdce33d6bf0f01496b9a044?s=128&d=identicon&r=PG", "display_name": "Zaffy", "link": "https://stackoverflow.com/users/823738/zaffy"}, "edited": false, "score": 0, "creation_date": 1550765509, "post_id": 48902567, "comment_id": 96399792, "body": "I think your example is incorrect. Compiler always assumes UB doesn&#39;t occur. So the checks for NULL are optimized away only if the pointer was already dereferenced before, hence if it must not be NULL, otherwise there would&#39;ve been UB."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 14722, "user_id": 823738, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a13a6ed05bdce33d6bf0f01496b9a044?s=128&d=identicon&r=PG", "display_name": "Zaffy", "link": "https://stackoverflow.com/users/823738/zaffy"}, "edited": false, "score": 0, "creation_date": 1550769007, "post_id": 48902567, "comment_id": 96401959, "body": "@Zaffy: Actually, it could also be dereference <i>after</i> the test, in a portion of the code not covered by the test. In any case, my point is that a memory-safety issue is first and foremost a <b>symptom</b> and the cause may not be obviously linked. Another example would be an unaligned pointer causing the compiler to overwrite a couple more bytes than expected, etc..."}, {"owner": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554678668, "post_id": 48902567, "comment_id": 97828614, "body": "Actually advanced static analyzers such as PVS Studio and SonarSource detect most of CWE that are not detected by sanitizers that come up with LLVM or GCC."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554706176, "post_id": 48902567, "comment_id": 97834327, "body": "@Kais: That&#39;s a fairly strong claim, especially given the difficulties inherent to static analysis for inter-procedural issues. I&#39;ve read quite a few reports of PVS Studio analyzing open source projects, and the issues highlighted seemed mostly centered on small linting things (detecting copy/paste) and a few data-flow analyses (pointer dereferenced before NULL-check); I cannot remember anything inter-procedural."}, {"owner": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554710991, "post_id": 48902567, "comment_id": 97836721, "body": "@MatthieuM. What do you mean by inter-procedural?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554711103, "post_id": 48902567, "comment_id": 97836774, "body": "@Kais: Inter-procedural is a term of art meaning &quot;across function boundaries&quot;. In general, reasoning within a function (intra-procedural) is much easier than reasoning across function boundaries (inter-procedural); this affects both optimizers and static analyzers."}, {"owner": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554711338, "post_id": 48902567, "comment_id": 97836903, "body": "@MatthieuM. You mean the possible UB caused by the misuse of pointers shared between functions?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 1, "creation_date": 1554711662, "post_id": 48902567, "comment_id": 97837069, "body": "@Kais: Or in general any lifetime analysis, to prevent use-after-free, double-free, etc..."}, {"owner": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554714053, "post_id": 48902567, "comment_id": 97838388, "body": "@MatthieuM. I see, thanks for the clarification. But AFAIK, PVS Studio detects these types of CWE, more specifically in CWE-416 and CWE-415: You can find the rest of supported CWE there: <a href=\"https://www.viva64.com/en/b/0514/\" rel=\"nofollow noreferrer\">viva64.com/en/b/0514</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2347, "user_id": 6039980, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b0b2c9fe841b1965d6bdcdd50c300c63?s=128&d=identicon&r=PG&f=1", "display_name": "user6039980", "link": "https://stackoverflow.com/users/6039980/user6039980"}, "edited": false, "score": 0, "creation_date": 1554720531, "post_id": 48902567, "comment_id": 97842088, "body": "Let us <a href=\"https://chat.stackoverflow.com/rooms/191444/discussion-between-matthieu-m-and-kais\">continue this discussion in chat</a>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 17, "last_activity_date": 1530082167, "last_edit_date": 1530082167, "creation_date": 1519206026, "answer_id": 48902567, "question_id": 48893656, "link": "https://stackoverflow.com/questions/48893656/can-gccs-asan-provide-the-same-memory-safety-as-rust/48902567#48902567", "title": "Can GCC&#39;s ASAN provide the same memory safety as Rust?", "body": "<p><strong>The sanitizers</strong></p>\n\n<p>Both GCC and Clang have a <em>suite</em> of sanitizers; up until now, they were developed in Clang and then ported to GCC, so Clang has the most advanced versions:</p>\n\n<ul>\n<li><a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\" rel=\"noreferrer\">Address Sanitizer</a> (ASan): detects out-of-bounds access, use-after-free, use-after-scope, double-free/invalid-free and is adding support for memory leaks (expected memory overhead 3x),</li>\n<li><a href=\"https://clang.llvm.org/docs/MemorySanitizer.html\" rel=\"noreferrer\">Memory Sanitizer</a> (MemSan): detects uninitialized reads (expected slow-down 3x),</li>\n<li><a href=\"https://clang.llvm.org/docs/ThreadSanitizer.html\" rel=\"noreferrer\">Thread Sanitizer</a> (TSan): detects data-races (expected slow-down 5x-15x, memory overhead 5x-10x),</li>\n<li><a href=\"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html\" rel=\"noreferrer\">Undefined Behavior Sanitizer</a> (UBSan): various local undefined behaviors such as unaligned pointers, integral/floating point overflows, etc... (minimal slow-down, slight code size increase).</li>\n</ul>\n\n<p>There is also work ongoing on a <a href=\"https://reviews.llvm.org/D32199\" rel=\"noreferrer\">Type Sanitizer</a>.</p>\n\n<hr>\n\n<p><strong>Sanitizers vs Rust</strong></p>\n\n<p>Unfortunately, bringing C++ up to Rust's level of safety with sanitizers is not possible; even combining all existing sanitizers would still leave gaps, they are known to be incomplete.</p>\n\n<p>You can see John Regher's presentation on Undefined Behavior at <a href=\"https://www.youtube.com/watch?v=v1COuU2vU_w\" rel=\"noreferrer\">CppCon 2017</a>, the slides <a href=\"https://github.com/CppCon/CppCon2017/blob/master/Presentations/Undefined%20Behavior%20in%202017/Undefined%20Behavior%20in%202017%20-%20John%20Regehr%20-%20CppCon%202017.pdf\" rel=\"noreferrer\">can be found on github</a>, from which we get the current coverage:</p>\n\n<p><a href=\"https://i.stack.imgur.com/l5O7e.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/l5O7e.png\" alt=\"enter image description here\"></a></p>\n\n<p>And that is not accounting for the fact that <strong>sanitizers are incompatible with each others</strong>. That is, even if you were willing to accept the combined slow-down (15x-45x?) and memory overhead (15x-30x?), you would still NOT manage for a C++ program to be as safe as a Rust one.</p>\n\n<hr>\n\n<p><strong>Hardening vs Debugging</strong></p>\n\n<p>The reason sanitizers are so CPU/memory hungry is because they are debugging tools; they attempt to give developers as precise a diagnostic as possible, so as to be most useful for debugging.</p>\n\n<p>For running code in production, what you are looking for is <strong>hardening</strong>. Hardening is about eliminating Undefined Behavior with as low an overhead as possible. Clang, for example, supports multiple ways to harden a binary:</p>\n\n<ul>\n<li><a href=\"https://clang.llvm.org/docs/ControlFlowIntegrity.html\" rel=\"noreferrer\">Control Flow Integrity</a> (CFI): protects against control-flow hi-jacking (virtual calls, indirect calls, ...),</li>\n<li><a href=\"https://clang.llvm.org/docs/SafeStack.html\" rel=\"noreferrer\">Safe Stack</a>: protects against stack buffer overflows, aka <a href=\"https://en.wikipedia.org/wiki/Return-oriented_programming\" rel=\"noreferrer\">Return Oriented Programming</a>,</li>\n<li>Undefined Behavior Sanitizer.</li>\n</ul>\n\n<p>Those tools can be combined and have minimal (&lt; 1%) performance impact. They cover much less ground than sanitizers, unfortunately, and most notably do not attempt to cover use-after-free/use-after-scope or data-races which are frequent targets of attacks.</p>\n\n<hr>\n\n<p><strong>Conclusion</strong></p>\n\n<p>I do not see any way to bring C++ up to the level of safety that Rust combines, without either:</p>\n\n<ul>\n<li>very serious restrictions on the language: see MISRA/JSF guidelines,</li>\n<li>very serious loss of performance: sanitizers, disabling optimizations, ...</li>\n<li>a complete overhaul of the standard library and coding practices, of which the <a href=\"https://github.com/isocpp/CppCoreGuidelines\" rel=\"noreferrer\">Core Guidelines</a> are a <strong>start</strong>.</li>\n</ul>\n\n<p>On the other hand, it is worth noting that Rust itself uses <code>unsafe</code> code; and its <code>unsafe</code> code also needs to be vetted (see <a href=\"https://plv.mpi-sws.org/rustbelt/\" rel=\"noreferrer\">Rust Belt project</a>) and would benefit from all the above sanitizers/hardening instrumentation passes.</p>\n"}], "owner": {"reputation": 287, "user_id": 9318873, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dcd87fbb144123c95c613bce1d76998?s=128&d=identicon&r=PG&f=1", "display_name": "Hessnov", "link": "https://stackoverflow.com/users/9318873/hessnov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1122, "favorite_count": 4, "accepted_answer_id": 48902567, "answer_count": 3, "score": 10, "last_activity_date": 1554679062, "creation_date": 1519158383, "last_edit_date": 1530111786, "question_id": 48893656, "link": "https://stackoverflow.com/questions/48893656/can-gccs-asan-provide-the-same-memory-safety-as-rust", "title": "Can GCC&#39;s ASAN provide the same memory safety as Rust?", "body": "<p>Rust is known as a memory-safe language, but there is a security feature in GCC called <a href=\"https://en.wikipedia.org/wiki/AddressSanitizer\" rel=\"noreferrer\">AddressSanitizer</a> (ASAN): </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>./configure CFLAGS=\"-fsanitize=address -g\" CXXFLAGS=\"-fsanitize=address -g\" LDFLAGS=\"-fsanitize=address\"\nmake\nmake check\n</code></pre>\n\n<p>Could ASAN provide the same memory safety as Rust, or does Rust have more tricks? Is it even possible to compare the two? </p>\n\n<p>Disclaimer: I am not a programmer. </p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 53905, "user_id": 2864740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/e7a05a144f218bde07b659bc98e1ca7d?s=128&d=identicon&r=PG&f=1", "display_name": "user2864740", "link": "https://stackoverflow.com/users/2864740/user2864740"}, "edited": false, "score": 0, "creation_date": 1519155884, "post_id": 48893006, "comment_id": 84791633, "body": "&quot;..it dies <i>at the end of</i> create_ui..&quot;"}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 1, "creation_date": 1519168454, "post_id": 48893006, "comment_id": 84797226, "body": "&quot;What am I doing wrong ?&quot; You&#39;re complaining about an error without giving the text of the error message. We can&#39;t help without all the information"}], "answers": [{"tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": true, "score": 2, "last_activity_date": 1519169420, "creation_date": 1519169420, "answer_id": 48895880, "question_id": 48893006, "link": "https://stackoverflow.com/questions/48893006/rust-lifetimes-static-reference-lives-to-short-to-be-fed-into-a-function/48895880#48895880", "title": "Rust lifetimes :&#160;Static reference lives to short to be fed into a function?", "body": "<p>Without knowing the exact error, it's hard to be sure, but my guess is this:</p>\n\n<pre><code>fn create_ui(data: &amp;'static str) -&gt; Result&lt;Ui&lt;&amp;'static str&gt;, nwg::Error&gt;\n</code></pre>\n\n<p>The parameter <code>data</code> will borrow a string of static lifetime. That is, the thing it points to (the string data) has static lifetime, but the reference itself has the lifetime of the function. Now let's look at the function in the <code>native_windows_gui</code> crate:</p>\n\n<pre><code>fn pack_value&lt;T: Into&lt;Box&lt;T&gt;&gt; + 'static&gt;(&amp;self, id: &amp;ID, value: T)\n</code></pre>\n\n<p>The parameter <code>value</code> has to have static lifetime. There are some other requirements too, but they're not relevant. Now back to your code:</p>\n\n<pre><code>app.pack_value(&amp;\"Data\", &amp;data);\n</code></pre>\n\n<p>You're passing <code>pack_value</code> <strong>a reference to</strong> <code>data</code>, which was already a reference. That is, the argument you're passing has type <code>&amp;&amp;'static str</code>. The outer reference (the one you're passing) <strong>doesn't</strong> have static lifetime: it lives only as long as your function.</p>\n\n<p>The equivalent in C++ would be something like</p>\n\n<pre><code>result_type create_ui(static char *str) {\n    Ui app = ...;\n    app.pack_value(&amp;\"Data\", &amp;str);\n}\n</code></pre>\n\n<p>This would compile fine in C++, but you're not passing the string, you're passing the address of the argument. This would compile fine but the behaviour would be undefined, and it would depend on what else is on the stack when that pointer is dereferenced. In Rust, instead of a hard-to-debug question, the compiler tells you what's wrong.</p>\n\n<p>The solution is the same as it would be for C++: you need to remove the extra <code>&amp;</code>, and pass the same reference you received:</p>\n\n<pre><code>app.pack_value(&amp;\"Data\", data);\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 9387561, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e09027e53aaa35f9def330103f3e49e8?s=128&d=identicon&r=PG&f=1", "display_name": "Shcak", "link": "https://stackoverflow.com/users/9387561/shcak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 853, "favorite_count": 0, "accepted_answer_id": 48895880, "answer_count": 1, "score": 2, "last_activity_date": 1519169420, "creation_date": 1519155647, "question_id": 48893006, "link": "https://stackoverflow.com/questions/48893006/rust-lifetimes-static-reference-lives-to-short-to-be-fed-into-a-function", "title": "Rust lifetimes :&#160;Static reference lives to short to be fed into a function?", "body": "<p>I'm discovering rust and have a hard time with lifetimes.</p>\n\n<p>For example, I am experimenting with GUIs a little :</p>\n\n<pre><code>#[macro_use]extern crate native_windows_gui as nwg;\n\nuse nwg::{Ui, Event, EventArgs};\n\nnwg_template!(\n    head: setup_ui&lt;&amp;'static str&gt;,\n    controls: [\n        (\"MainWindow\", nwg_window!(title=\"Test1\"; size=(180,50))),\n        (\"SetButton\", nwg_button!(parent=\"MainWindow\"; visible=false)),\n        (\"BackButton\", nwg_button!(parent=\"MainWindow\"; text=\"&lt;\"; position=(10,10); size=(30,30))),\n        (\"Text\", nwg_textbox!(parent=\"MainWindow\"; readonly=true; position=(40,10); size=(100,30))),\n        (\"NextButton\", nwg_button!(parent=\"MainWindow\"; text=\"&gt;\"; position=(140,10); size=(30,30)))\n    ];\n    events: [\n        (\"SetButton\", \"Set\", Event::Click, |app,_,_,_| {\n            let display = nwg_get_mut!(app; (\"Text\", nwg::TextBox));\n            let index = nwg_get!(app; (\"Index\", &amp;str));\n            display.set_text(**index);\n        }),\n        (\"BackButton\", \"Back\", Event::Click, |_,_,_,_| {}),\n        (\"NextButton\", \"Next\", Event::Click, |_,_,_,_| {})\n    ];\n    resources: [];\n    values: [\n        (\"Index\", \"Test\")\n    ]\n);\n\nfn create_ui(data: &amp;'static str) -&gt; Result&lt;Ui&lt;&amp;'static str&gt;, nwg::Error&gt; {\n   let app: Ui&lt;&amp;'static str&gt;;\n\n    match Ui::new() {\n        Ok(ui) =&gt; { app = ui; },\n        Err(e) =&gt; { return Err(e) }\n    }\n\n    if let Err(e) = setup_ui(&amp;app) {\n        return Err(e);\n    }\n\n    app.pack_value(&amp;\"Data\", &amp;data);\n    app.trigger(&amp;\"SetButton\", Event::Click, EventArgs::None);\n\n    if let Err(e) =app.commit() {\n        Err(e)\n    } else {\n        Ok(app)\n    }\n}\n\nfn main() {\n    let data = \"Foo\";\n    let _ui = create_ui(data).expect(\"Oups\");\n    nwg::dispatch_events();\n}\n</code></pre>\n\n<p>I don't understand why in the function <code>create_ui</code>, <code>data</code> doesn't live long enough to be fed in <code>app.pack_value()</code>.</p>\n\n<p>It seems to me that the <code>'static</code> lifetime would make it survive long enough.</p>\n\n<p>But the compiler insits it dies at the end of <code>create_ui</code> and therefore cannot be used as <code>app.pack_value(\"Data\", &amp;data);</code></p>\n\n<p>What am I\u00a0doing wrong ?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1519150986, "post_id": 48889779, "comment_id": 84789104, "body": "Do the destructured fields have to be owned, or are references sufficient?"}, {"owner": {"reputation": 929, "user_id": 2826188, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a7803e8c40bb2c200c6a3271d6c45ff8?s=128&d=identicon&r=PG", "display_name": "JackW", "link": "https://stackoverflow.com/users/2826188/jackw"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1519161999, "post_id": 48889779, "comment_id": 84794795, "body": "They have to be owned (for example, to allow <code>s.into_bytes()</code> in the example above)"}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 2, "creation_date": 1519169587, "post_id": 48889779, "comment_id": 84797562, "body": "Owning the parts that come out of the destructuring means that the original object no longer exists. You can&#39;t have both."}, {"owner": {"reputation": 210, "user_id": 3177936, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2afdc0a98e17854a19e04f41ef94e079?s=128&d=identicon&r=PG", "display_name": "rubdos", "link": "https://stackoverflow.com/users/3177936/rubdos"}, "edited": false, "score": 0, "creation_date": 1519205254, "post_id": 48889779, "comment_id": 84809730, "body": "Wouldn&#39;t <code>as_bytes()</code> suffice? If not, you&#39;ll have to clone <code>b</code>."}, {"owner": {"reputation": 929, "user_id": 2826188, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a7803e8c40bb2c200c6a3271d6c45ff8?s=128&d=identicon&r=PG", "display_name": "JackW", "link": "https://stackoverflow.com/users/2826188/jackw"}, "edited": false, "score": 0, "creation_date": 1519226744, "post_id": 48889779, "comment_id": 84825128, "body": "<code>into_bytes</code> was just an example, the actual functions being used to need ownership. I guess it makes sense that it can&#39;t be done, though it is slightly annoying. Cloning won&#39;t work for me because I can&#39;t duplicate the actual data stored. Thanks though."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1519496731, "creation_date": 1519496731, "answer_id": 48966210, "question_id": 48889779, "link": "https://stackoverflow.com/questions/48889779/match-an-owned-variable-then-get-access-to-the-variable-again/48966210#48966210", "title": "Match an owned variable, then get access to the variable again", "body": "<p>No, you (almost literally) cannot have your cake and eat it too. Once you have destructured the value, the value no longer exists.</p>\n\n<hr>\n\n<p>When non-lexical lifetimes happens, you can use a combination of NLL and match guards to prevent taking ownership in the first place:</p>\n\n<pre><code>#![feature(nll)]\n\nenum A {\n    Type1 { s: String },\n}\n\nimpl A {\n    fn consume(self) {\n        println!(\"Consumed!\");\n    }\n}\n\nfn main() {\n    let b = A::Type1 {\n        s: String::from(\"Arbitrary string\"),\n    };\n\n    match b {\n        A::Type1 { ref s } if s.len() &lt;= 3 =&gt; {\n            b.consume();\n        }\n        A::Type1 { s } =&gt; {\n            s.into_bytes();\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 929, "user_id": 2826188, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a7803e8c40bb2c200c6a3271d6c45ff8?s=128&d=identicon&r=PG", "display_name": "JackW", "link": "https://stackoverflow.com/users/2826188/jackw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 75, "favorite_count": 1, "accepted_answer_id": 48966210, "answer_count": 1, "score": 3, "last_activity_date": 1519496731, "creation_date": 1519143886, "last_edit_date": 1519144240, "question_id": 48889779, "link": "https://stackoverflow.com/questions/48889779/match-an-owned-variable-then-get-access-to-the-variable-again", "title": "Match an owned variable, then get access to the variable again", "body": "<p>I want to do something along the lines of</p>\n\n<pre><code>enum A {\n    Type1 {\n        s: String\n        // ... some more fields\n    }\n    // ... some more variants\n}\n\nimpl A {\n    fn consume(self) { println!(\"Consumed!\"); }\n}\n\nfn fails() {\n    let b = A::Type1 { s: String::from(\"Arbitrary string\") };\n\n    match b {\n        A::Type1 {\n            s, // (value moved here)\n            // ... more fields\n        } =&gt; {\n            let l = s.len(); // Something using the field from the enum\n            if l &gt; 3 {\n                s.into_bytes(); // do something that requires ownership of s\n            } else {\n                b.consume(); // Value used here after move\n           }\n        }\n        // ... more cases\n    }\n}\n</code></pre>\n\n<p>However, because I destructure <code>b</code> in the match case, I don't have access to it within the body of the match.</p>\n\n<p>I can reconstruct <code>b</code> from the fields, but when <code>b</code> has lots of fields this is obviously not ideal. Is there any way to get around this issue without having to rebuild <code>b</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1519137202, "post_id": 48887413, "comment_id": 84780033, "body": "I think that is what <code>Borrow</code> is for. I&#39;m not totally sure of the difference between <code>AsRef</code> and <code>Borrow</code> but the latter is implemented for <code>&amp;T</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1519137425, "post_id": 48887413, "comment_id": 84780188, "body": "@rodrigo Oh, ok. Can you post it as an answer?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1519137639, "post_id": 48887413, "comment_id": 84780354, "body": "@rodrigo <code>AsRef</code> seems to be the more appropriate one here, as the second example includes conversion."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1519137684, "post_id": 48887413, "comment_id": 84780388, "body": "@ljedrz Sorry it was not the goal, I will change my question."}], "answers": [{"tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 2, "last_activity_date": 1519138148, "last_edit_date": 1519138148, "creation_date": 1519137695, "answer_id": 48887786, "question_id": 48887413, "link": "https://stackoverflow.com/questions/48887413/why-does-t-not-implement-asreft/48887786#48887786", "title": "Why does T not implement AsRef&lt;T&gt;?", "body": "<p>I think that is one of the differences of <code>AsRef</code> and <code>Borrow</code>.</p>\n\n<p>That is, <code>Borrow&lt;T&gt;</code> is implemented directly for <code>&amp;T</code>, while <code>AsRef&lt;T&gt;</code> is not implemented for <code>&amp;T</code>.</p>\n\n<p>Funny thing is that <code>AsRef&lt;U&gt;</code> is implemented for <code>&amp;T</code> if T implements <code>AsRef&lt;U&gt;</code>. That is, if you can use <code>AsRef</code> with a type, you can use it with a reference to the same time.</p>\n\n<p>And another funny thing is that <code>Borrow&lt;T&gt;</code> is implemented for <code>&amp;T</code> but also for <code>T</code>!</p>\n"}, {"comments": [{"owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 1, "creation_date": 1519138891, "post_id": 48887885, "comment_id": 84781263, "body": "But the question is rather not <i>why is not <code>AsRef</code> implemented between different integral types?</i> but <i>why is not <code>AsRef&lt;T&gt;</code> implemented for <code>&amp;T</code></i>?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "edited": false, "score": 0, "creation_date": 1519138995, "post_id": 48887885, "comment_id": 84781339, "body": "@rodrigo true - I&#39;m just referring to the original state of the question, which is IMO an interesting twist on this issue."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519141795, "post_id": 48887885, "comment_id": 84783278, "body": "@ljedrz: How could you implement <code>AsRef</code> between integral? To return a <code>&amp;i64</code> you need a <code>i64</code> stored somewhere, and you cannot summon it out of the ether when all you have is a <code>i32</code> :x"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519147969, "post_id": 48887885, "comment_id": 84787374, "body": "@MatthieuM. I was thinking of cases where the size is the same, e.g. obtaining a <code>&amp;i32</code> from an <code>u32</code>; you&#39;re right about different sizes, of course."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 5, "last_activity_date": 1519138002, "creation_date": 1519138002, "answer_id": 48887885, "question_id": 48887413, "link": "https://stackoverflow.com/questions/48887413/why-does-t-not-implement-asreft/48887885#48887885", "title": "Why does T not implement AsRef&lt;T&gt;?", "body": "<p><code>AsRef</code> and <code>Borrow</code> are pretty similar at first glance, but they are used for different things. <a href=\"https://doc.rust-lang.org/stable/book/first-edition/borrow-and-asref.html#which-should-i-use\" rel=\"noreferrer\">The Book</a> describes the difference between them pretty well:</p>\n\n<blockquote>\n  <p>Choose <code>Borrow</code> when you want to abstract over different kinds of\n  borrowing, or when you\u2019re building a data structure that treats owned\n  and borrowed values in equivalent ways, such as hashing and\n  comparison.</p>\n  \n  <p>Choose <code>AsRef</code> when you want to convert something to a reference\n  directly, and you\u2019re writing generic code.</p>\n</blockquote>\n\n<p>In your case <code>Borrow</code> is a more reasonable choice because there is no conversion involved.</p>\n\n<p>As for the question of why <code>AsRef</code> is not implemented between different integral types, I guess this would go against the intent of Rust to be expressive about casts; I think it's similar to the question <a href=\"https://stackoverflow.com/questions/48225587/why-cant-i-compare-two-integers-of-different-types\">Why can't I compare two integers of different types?</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 1936422, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cf25cfbc3dab1101c8473e8e89a6a689?s=128&d=identicon&r=PG", "display_name": "matklad", "link": "https://stackoverflow.com/users/1936422/matklad"}, "is_accepted": false, "score": 5, "last_activity_date": 1554295071, "last_edit_date": 1554295071, "creation_date": 1554281496, "answer_id": 55490938, "question_id": 48887413, "link": "https://stackoverflow.com/questions/48887413/why-does-t-not-implement-asreft/55490938#55490938", "title": "Why does T not implement AsRef&lt;T&gt;?", "body": "<p>Here's an <a href=\"https://github.com/rust-lang/rust/issues/24140\" rel=\"nofollow noreferrer\">authoritative answer by Aaron Turon</a>:</p>\n\n<blockquote>\n  <p><code>Borrow</code> provides a blanket implementation <code>T: Borrow&lt;T&gt;</code>, which is <em>essential</em> for making the above collections work well. <code>AsRef</code> provides a different blanket implementation, basically <code>&amp;T: AsRef&lt;U&gt;</code> whenever <code>T: AsRef&lt;U&gt;</code>, which is important for APIs like <code>fs::open</code> that can use a simpler and more flexible signature as a result. You can't have both blanket implementations due to coherence, so each trait is making the choice that's appropriate for its use case.</p>\n</blockquote>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 762, "favorite_count": 1, "accepted_answer_id": 48887885, "answer_count": 3, "score": 9, "last_activity_date": 1554295071, "creation_date": 1519136641, "last_edit_date": 1519138915, "question_id": 48887413, "link": "https://stackoverflow.com/questions/48887413/why-does-t-not-implement-asreft", "title": "Why does T not implement AsRef&lt;T&gt;?", "body": "<p>This code does not compile:</p>\n\n<pre><code>fn ref_on_int&lt;T&gt;(_: T) where T: AsRef&lt;i32&gt; {}\n\nfn main() {\n    ref_on_int(&amp;0_i32)\n}\n</code></pre>\n\n<p>because</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `i32: std::convert::AsRef&lt;i32&gt;` is not satisfied\n</code></pre>\n\n<p>Why is it so?</p>\n\n<p>This could be useful for example with a newtype like</p>\n\n<pre><code>struct MyInt(i32);\n\nimpl AsRef&lt;i32&gt; for MyInt {\n    /* etc. */\n}\n</code></pre>\n\n<p>then you could indifferently pass a reference on an <code>i32</code> or a reference on a <code>MyInt</code>, because in the memory we have in both cases an <code>i32</code>.</p>\n"}, {"tags": ["rust", "atomic"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1519121994, "post_id": 48882678, "comment_id": 84769823, "body": "Have you benchmarked the overhead of <code>Relaxed</code> ordering? (and which platform are you targeting?)"}, {"owner": {"reputation": 7133, "user_id": 27074, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/d787ce9740a19eac110217bc8af43cbe?s=128&d=identicon&r=PG", "display_name": "Chris Jefferson", "link": "https://stackoverflow.com/users/27074/chris-jefferson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519122285, "post_id": 48882678, "comment_id": 84770049, "body": "Mostly x86. I&#39;m coming from a C++ background, where I did find a (small) difference between Relaxed and Unordered. Without being able to try unordered in Rust, I&#39;m not really sure what to compare against? I suppose no locking at all?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519131152, "post_id": 48882678, "comment_id": 84776013, "body": "Yes, I would benchmark single-thread performance with relaxed atomics vs raw integrals and check how big the gap is. If it&#39;s small enough, maybe it doesn&#39;t matter? The use of atomics should disable certain compiler optimizations (two subsequence reads may return different results), but maybe the algorithm can be tweaked to limit access to the array (caching reads in local variables) to recover most of the loss performance?"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1519131688, "creation_date": 1519131688, "answer_id": 48885893, "question_id": 48882678, "link": "https://stackoverflow.com/questions/48882678/getting-unordered-semantics-in-rust/48885893#48885893", "title": "Getting &#39;unordered&#39; semantics in Rust", "body": "<p>rustc exposes a fair number of LLVM intrinsics through the <code>std::intrinsics</code> module, which is permanently unstable.</p>\n\n<p>Still, it is available in Nightly, and there you can find:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/intrinsics/fn.atomic_load_unordered.html\" rel=\"nofollow noreferrer\"><code>atomic_load_unordered</code></a>,</li>\n<li><a href=\"https://doc.rust-lang.org/std/intrinsics/fn.atomic_store_unordered.html\" rel=\"nofollow noreferrer\"><code>atomic_store_unordered</code></a>.</li>\n</ul>\n\n<p>With those at hand, you can use <code>UnsafeCell</code> as a basic building block to build your own <code>UnorderedAtomicXXX</code>.</p>\n\n<p>You can follow the <a href=\"https://doc.rust-lang.org/src/core/sync/atomic.rs.html#966-968\" rel=\"nofollow noreferrer\"><code>std</code> atomics</a> to help with your implementation. The basics should look like:</p>\n\n<pre><code>pub struct UnorderedAtomic(UnsafeCell&lt;i32&gt;);\n\nimpl UnorderedAtomic {\n    pub fn new() -&gt; Self {\n        UnorderedAtomic(Default::default())\n    }\n\n    pub fn load(&amp;self) -&gt; i32 {\n        unsafe { atomic_load_unordered(self.0.get()) }\n    }\n\n    pub fn store(&amp;self, i: i32) {\n        unsafe { atomic_store_unordered(self.0.get(), i) }\n    }\n\n    unsafe fn raw(&amp;self) -&gt; *mut i32 { self.0.get() }\n}\n</code></pre>\n\n<p>It's unclear whether you can get unordered compare/exchange or fetch/add.</p>\n"}], "owner": {"reputation": 7133, "user_id": 27074, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/d787ce9740a19eac110217bc8af43cbe?s=128&d=identicon&r=PG", "display_name": "Chris Jefferson", "link": "https://stackoverflow.com/users/27074/chris-jefferson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "accepted_answer_id": 48885893, "answer_count": 1, "score": 1, "last_activity_date": 1519131688, "creation_date": 1519121417, "question_id": 48882678, "link": "https://stackoverflow.com/questions/48882678/getting-unordered-semantics-in-rust", "title": "Getting &#39;unordered&#39; semantics in Rust", "body": "<p>How do I create a fixed length list of integers <code>V</code> with the \"unordered\" semantics of LLVM (see <a href=\"https://llvm.org/docs/Atomics.html\" rel=\"nofollow noreferrer\">https://llvm.org/docs/Atomics.html</a>).</p>\n\n<p>The \"unordered\" semantics means if you read a location in the thread, you will get a previously written value (not necessarily the most recent one, as the optimisers is allowed to rearrange / cache values from the array). This can be viewed as the \"natural\" behaviour of reading and writing the raw memory, as long as values are only written and read in a single CPU instruction (so other threads never see \"half a written value\").</p>\n\n<p>It is important to me this is as close to the performance of a single-threaded array of integers as possible, because writes are extremely rare, and I am happy for them to be lost.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519122221, "post_id": 48882391, "comment_id": 84769994, "body": "Oh! I like this question!"}], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1519124503, "post_id": 48883613, "comment_id": 84771758, "body": "I especially like the interpretation of &quot;dereferencing raw pointer temporarily forms a reference&quot;."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 19, "last_activity_date": 1519124077, "creation_date": 1519124077, "answer_id": 48883613, "question_id": 48882391, "link": "https://stackoverflow.com/questions/48882391/what-are-the-semantics-for-dereferencing-raw-pointers/48883613#48883613", "title": "What are the semantics for dereferencing raw pointers?", "body": "<p><strong>No awkward strict-aliasing here</strong></p>\n\n<p>C++ strict-aliasing is a patch on a wooden leg. C++ does not have any aliasing information, and the absence of aliasing information prevents a number of optimizations (as you noted here), therefore to regain some performance strict-aliasing was patched on...</p>\n\n<p>Unfortunately, strict-aliasing is awkward in a systems language, because reinterpreting raw-memory is the essence of what systems language are designed to do.</p>\n\n<p>And doubly unfortunately it does not enable that many optimizations. For example, copying from one array to another must assume that the arrays may overlap.</p>\n\n<p><code>restrict</code> (from C) is a bit more helpful, although it only applies to one level at a time.</p>\n\n<hr>\n\n<p><strong>Instead, we have scope-based aliasing analysis</strong></p>\n\n<p>The essence of the aliasing analysis in Rust is based on <em>lexical scopes</em> (barring threads).</p>\n\n<p>The beginner level explanation that you probably know is:</p>\n\n<ul>\n<li>if you have a <code>&amp;T</code>, then there is no <code>&amp;mut T</code> to the same instance,</li>\n<li>if you have a <code>&amp;mut T</code>, then there is no <code>&amp;T</code> or <code>&amp;mut T</code> to the same instance.</li>\n</ul>\n\n<p>As suited to a beginner, it is a slightly abbreviated version. For example:</p>\n\n<pre><code>fn main() {\n    let mut i = 32;\n    let mut_ref = &amp;mut i;\n    let x: &amp;i32 = mut_ref;\n\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>is perfectly fine, even though both a <code>&amp;mut i32</code> (<code>mut_ref</code>) and a <code>&amp;i32</code> (<code>x</code>) point to the same instance!</p>\n\n<p>If you try to access <code>mut_ref</code> after forming <code>x</code>, however, the truth is unveiled:</p>\n\n<pre><code>fn main() {\n    let mut i = 32;\n    let mut_ref = &amp;mut i;\n    let x: &amp;i32 = mut_ref;\n    *mut_ref = 2;\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<blockquote>\n<pre><code>error[E0506]: cannot assign to `*mut_ref` because it is borrowed\n  |\n4 |         let x: &amp;i32 = mut_ref;\n  |                       ------- borrow of `*mut_ref` occurs here\n5 |         *mut_ref = 2;\n  |         ^^^^^^^^^^^^ assignment to borrowed `*mut_ref` occurs here\n</code></pre>\n</blockquote>\n\n<p>So, it is <strong>fine</strong> to have both <code>&amp;mut T</code> and <code>&amp;T</code> pointing to the same memory location at the same time; however mutating through the <code>&amp;mut T</code> will be disabled for as long as the <code>&amp;T</code> exists.</p>\n\n<p>In a sense, the <code>&amp;mut T</code> is <em>temporarily</em> downgraded to a <code>&amp;T</code>.</p>\n\n<hr>\n\n<p><strong>So, what of pointers?</strong></p>\n\n<p>First of all, let's review <a href=\"https://doc.rust-lang.org/book/first-edition/raw-pointers.html\" rel=\"noreferrer\">the reference</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>are not guaranteed to point to valid memory and are not even guaranteed to be non-NULL (unlike both <code>Box</code> and <code>&amp;</code>);</li>\n  <li>do not have any automatic clean-up, unlike <code>Box</code>, and so require manual resource management;</li>\n  <li>are plain-old-data, that is, they don't move ownership, again unlike <code>Box</code>, hence the Rust compiler cannot protect against bugs like use-after-free;</li>\n  <li>lack any form of lifetimes, unlike <code>&amp;</code>, and so the compiler cannot reason about dangling pointers; and</li>\n  <li>have no guarantees about aliasing or mutability other than mutation not being allowed directly through a <code>*const T</code>.</li>\n  </ul>\n</blockquote>\n\n<p>Conspicuously absent is any rule forbidding from casting a <code>*const T</code> to a <code>*mut T</code>. That's normal, <em>it's allowed</em>, and therefore the last point is really more of a <em>lint</em>, since it can be so easily worked around.</p>\n\n<p><strong>Nomicon</strong></p>\n\n<p>A discussion of unsafe Rust would not be complete without <a href=\"https://doc.rust-lang.org/nomicon/aliasing.html\" rel=\"noreferrer\">pointing to the Nomicon</a>.</p>\n\n<p>Essentially, the rules of unsafe Rust are rather simple: uphold whatever guarantee the compiler would have if it was safe Rust.</p>\n\n<p>This is not as helpful as it could be, since those rules are not set in stone yet; sorry.</p>\n\n<p><em>Then, what are the semantics for dereferencing raw pointers?</em></p>\n\n<p><strong>As far as I know</strong><sup>1</sup>:</p>\n\n<ul>\n<li>if you form a reference from the raw pointer (<code>&amp;T</code> or <code>&amp;mut T</code>) then you must ensure that the aliasing rules these references obey are upheld,</li>\n<li>if you immediately read/write, this temporarily forms a reference.</li>\n</ul>\n\n<p>That is, providing that the caller had mutable access to the location:</p>\n\n<pre><code>pub unsafe fn run_ptr_direct(a: *const i32, b: *mut f32) -&gt; (i32, i32) {\n    let x = *a;\n    *b = 1.0;\n    let y = *a;\n    (x, y)\n}\n</code></pre>\n\n<p>should be valid, because <code>*a</code> has type <code>i32</code>, so there is no overlap of lifetime in references.</p>\n\n<p>However, I would expect:</p>\n\n<pre><code>pub unsafe fn run_ptr_modified(a: *const i32, b: *mut f32) -&gt; (i32, i32) {\n    let x = &amp;*a;\n    *b = 1.0;\n    let y = *a;\n    (*x, y)\n}\n</code></pre>\n\n<p>To be undefined behavior, because <code>x</code> would be live while <code>*b</code> is used to modify its memory.</p>\n\n<p>Note how subtle the change is. It's easy to break invariants in <code>unsafe</code> code.</p>\n\n<p><sup>1</sup> <em>And I might be wrong right now, or I may become wrong in the future</em></p>\n"}], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3081, "favorite_count": 5, "accepted_answer_id": 48883613, "answer_count": 1, "score": 15, "last_activity_date": 1519124563, "creation_date": 1519120626, "last_edit_date": 1519124563, "question_id": 48882391, "link": "https://stackoverflow.com/questions/48882391/what-are-the-semantics-for-dereferencing-raw-pointers", "title": "What are the semantics for dereferencing raw pointers?", "body": "<p>For shared references and mutable references the semantics are clear: as\nlong as you have a shared reference to a value, nothing else must have\nmutable access, and a mutable reference can't be shared.</p>\n\n<p>So this code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub extern fn run_ref(a: &amp;i32, b: &amp;mut i32) -&gt; (i32, i32) {\n    let x = *a;\n    *b = 1;\n    let y = *a;\n    (x, y)\n}\n</code></pre>\n\n<p>compiles (on x86_64) to:</p>\n\n<pre><code>run_ref:\n    movl    (%rdi), %ecx\n    movl    $1, (%rsi)\n    movq    %rcx, %rax\n    shlq    $32, %rax\n    orq     %rcx, %rax\n    retq\n</code></pre>\n\n<p>Note that the memory <code>a</code> points to is only read once, because the\ncompiler knows the write to <code>b</code> must not have modified the memory at\n<code>a</code>.</p>\n\n<p>Raw pointer are more complicated.  Raw pointer arithmetic and casts are\n\"safe\", but dereferencing them is not.</p>\n\n<p>We can convert raw pointers back to shared and mutable references, and\nthen use them; this will certainly imply the usual reference semantics,\nand the compiler can optimize accordingly.</p>\n\n<p>But what are the semantics if we use raw pointers directly?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[no_mangle]\npub unsafe extern fn run_ptr_direct(a: *const i32, b: *mut f32) -&gt; (i32, i32) {\n    let x = *a;\n    *b = 1.0;\n    let y = *a;\n    (x, y)\n}\n</code></pre>\n\n<p>compiles to:</p>\n\n<pre><code>run_ptr_direct:\n    movl    (%rdi), %ecx\n    movl    $1065353216, (%rsi)\n    movl    (%rdi), %eax\n    shlq    $32, %rax\n    orq     %rcx, %rax\n    retq\n</code></pre>\n\n<p>Although we write a value of different type, the second read still goes\nto memory - it seems to be allowed to call this function with the same\n(or overlapping) memory location for both arguments.  In other words, a\n<code>const</code> raw pointer does not forbid a coexisting <code>mut</code> raw pointer; and\nits probably fine to have two <code>mut</code> raw pointers (of possibly different\ntypes) to the same (or overlapping) memory location too.</p>\n\n<p>Note that a normal optimizing C/C++-compiler would eliminate the second\nread (due to the \"strict aliasing\" rule: modfying/reading the same\nmemory location through pointers of different (\"incompatible\") types is\nUB in most cases):</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>struct tuple { int x; int y; };\n\nextern \"C\" tuple run_ptr(int const* a, float* b) {\n    int const x = *a;\n    *b = 1.0;\n    int const y = *a;\n    return tuple{x, y};\n}\n</code></pre>\n\n<p>compiles to:</p>\n\n<pre><code>run_ptr:\n    movl    (%rdi), %eax\n    movl    $0x3f800000, (%rsi)\n    movq    %rax, %rdx\n    salq    $32, %rdx\n    orq     %rdx, %rax\n    ret\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d30dbb4ad3f72afcd72dab4dbd26c084&amp;mode=release\" rel=\"noreferrer\">Playground with Rust code examples</a></p>\n\n<p><a href=\"https://godbolt.org/g/djELrE\" rel=\"noreferrer\">godbolt Compiler Explorer with C example</a></p>\n\n<p>So: What are the semantics if we use raw pointers directly: is it ok for\nreferenced data to overlap?</p>\n\n<p>This should have direct implications on whether the compiler is allowed\nto reorder memory access through raw pointers.</p>\n"}, {"tags": ["rust", "rust-rocket"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1519119716, "post_id": 48881461, "comment_id": 84768310, "body": "IIRC, the plugin declaration must be in the main"}], "answers": [{"tags": [], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "is_accepted": true, "score": 5, "last_activity_date": 1519135140, "last_edit_date": 1519135140, "creation_date": 1519133450, "answer_id": 48886457, "question_id": 48881461, "link": "https://stackoverflow.com/questions/48881461/i-want-to-start-rocket-in-a-module-out-of-main-but-failed/48886457#48886457", "title": "I want to start Rocket in a module out of `main()` but failed", "body": "<p>I achieved. My project's crate is <code>rocket_demo</code></p>\n\n<p>main.rs</p>\n\n<pre><code>extern crate rocket_demo; \n\nuse rocket_demo::my_rocket;\n\nfn main() {\n    my_rocket::startup();\n}\n</code></pre>\n\n<p>lib.rs</p>\n\n<pre><code>#![feature(plugin)]\n#![plugin(rocket_codegen)]\nextern crate rocket;\n\npub mod my_rocket;\n</code></pre>\n\n<p>The first three lines can't be in my_rocket/mod.rs, otherwise <code>routes!</code> will not find!</p>\n\n<p>my_rocket/mod.rs</p>\n\n<pre><code>#[get(\"/\")]\nfn index() -&gt; &amp;'static str {\n    \"Hello, world!\"\n}\n\npub fn startup() {\n    ::rocket::ignite().mount(\"/\", routes![index]).launch();\n}\n</code></pre>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 777, "favorite_count": 0, "accepted_answer_id": 48886457, "answer_count": 1, "score": 4, "last_activity_date": 1520111215, "creation_date": 1519117811, "last_edit_date": 1520111215, "question_id": 48881461, "link": "https://stackoverflow.com/questions/48881461/i-want-to-start-rocket-in-a-module-out-of-main-but-failed", "title": "I want to start Rocket in a module out of `main()` but failed", "body": "<p>I want to start Rocket in a module out of <code>main()</code>, thus can simplify <code>main()</code> but I failed. I modified the <a href=\"https://rocket.rs/guide/getting-started/\" rel=\"nofollow noreferrer\">Quicktart</a> from rocket</p>\n\n<p>The code:</p>\n\n<pre><code>mod myRocket {\n    #![feature(plugin)]\n    #![plugin(rocket_codegen)]\n    extern crate rocket;\n\n    #[get(\"/\")]\n    fn index() -&gt; &amp;'static str {\n        \"Hello, world!\"\n    }\n\n    pub fn startup() {\n        rocket::ignite().mount(\"/\", routes![index]).launch();\n    }\n}\n\n\nfn main() {\n    myRocket::startup();\n}\n</code></pre>\n\n<p>The error:</p>\n\n<pre><code>error: cannot find macro `routes!` in this scope\n--&gt; src\\main.rs:12:37\n|\n12 |         rocket::ignite().mount(\"/\", routes![index]).launch();\n|\n</code></pre>\n\n<p>I don't know how to fix it.</p>\n"}, {"tags": ["macos", "segmentation-fault", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1519114645, "post_id": 48880421, "comment_id": 84765115, "body": "Are you sure that arbitrary types can be passed through the <code>extern &quot;C&quot;</code> ABI? Have you read the <a href=\"https://doc.rust-lang.org/beta/nomicon/ffi.html\" rel=\"nofollow noreferrer\">FFI Chapter</a> of the Rust book or the <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\">FFI Omnibus</a>?"}, {"owner": {"reputation": 43, "user_id": 9198969, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-C0T1Ge4Ngf0/AAAAAAAAAAI/AAAAAAAAAdM/nDAUeCjwljs/photo.jpg?sz=128", "display_name": "Marco Napetti", "link": "https://stackoverflow.com/users/9198969/marco-napetti"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1519115217, "post_id": 48880421, "comment_id": 84765429, "body": "I&#39;m using <code>extern &quot;C&quot;</code> because <code>extern &quot;Rust&quot;</code> isn&#39;t working, I hope that a rust-on-rust call would work"}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1519117575, "post_id": 48880421, "comment_id": 84766821, "body": "Do you link the standard library dynamically (in all your libraries, including the application)?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1519118012, "post_id": 48880421, "comment_id": 84767106, "body": "In all ABI questions, there are two sides: the side defining the symbol and the side using the symbol. Could you also include the code of the <i>defining</i> side?"}, {"owner": {"reputation": 43, "user_id": 9198969, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-C0T1Ge4Ngf0/AAAAAAAAAAI/AAAAAAAAAdM/nDAUeCjwljs/photo.jpg?sz=128", "display_name": "Marco Napetti", "link": "https://stackoverflow.com/users/9198969/marco-napetti"}, "edited": false, "score": 0, "creation_date": 1519120522, "post_id": 48880421, "comment_id": 84768849, "body": "Solved, thanks everybody"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1519146304, "post_id": 48880421, "comment_id": 84786365, "body": "@MarcoNapetti Since you have a solution, you can write it as answer. Don&#39;t write it at the bottom of the question, otherwise this just sits around looking unanswered."}], "answers": [{"tags": [], "owner": {"reputation": 43, "user_id": 9198969, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-C0T1Ge4Ngf0/AAAAAAAAAAI/AAAAAAAAAdM/nDAUeCjwljs/photo.jpg?sz=128", "display_name": "Marco Napetti", "link": "https://stackoverflow.com/users/9198969/marco-napetti"}, "is_accepted": true, "score": 0, "last_activity_date": 1519497149, "last_edit_date": 1519497149, "creation_date": 1519226523, "answer_id": 48909483, "question_id": 48880421, "link": "https://stackoverflow.com/questions/48880421/segmentation-fault-on-macos-when-returning-from-dylib/48909483#48909483", "title": "Segmentation fault on macOS when returning from dylib", "body": "<p>As pointed out by Matthieu M., I wasn't dereferencing correctly.</p>\n\n<p>On lib side:</p>\n\n<pre><code>pub extern fn init_bot(ptr_config: *const TomlValue, secret: &amp;str, ptr_body: *const JsonValue) -&gt; Result&lt;JsonValue, String&gt;\n</code></pre>\n\n<p>On application side:</p>\n\n<pre><code>let f: Symbol&lt;extern \"C\" fn(config: *const TomlValue, secret: &amp;str, body: *const JsonValue) -&gt; Result&lt;JsonValue, String&gt;&gt; = temp;\nf(Box::into_raw(Box::new(self.config.clone())), &amp;secret, Box::into_raw(Box::new(body)))\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 9198969, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-C0T1Ge4Ngf0/AAAAAAAAAAI/AAAAAAAAAdM/nDAUeCjwljs/photo.jpg?sz=128", "display_name": "Marco Napetti", "link": "https://stackoverflow.com/users/9198969/marco-napetti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 48909483, "answer_count": 1, "score": 0, "last_activity_date": 1519497149, "creation_date": 1519114140, "last_edit_date": 1519497115, "question_id": 48880421, "link": "https://stackoverflow.com/questions/48880421/segmentation-fault-on-macos-when-returning-from-dylib", "title": "Segmentation fault on macOS when returning from dylib", "body": "<p>My Rust program loads Rust written dylibs to improve modularity. It runs smoothly on Linux, but on macOS it gets a segmentation fault when returning for the third time.</p>\n\n<p>Yesterday the problem was way worse that this, on macOS it was going like this at first call:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustegram(4467,0x7fffad81d340) malloc: *** error for object 0x106817040: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\nAbort trap: 6\n</code></pre>\n\n<p>During debugging, I found that the problem was with using objects as  function call parameters. They were all <code>String</code>, so converting them to <code>&amp;str</code> solved the problem.</p>\n\n<p>Now I need to pass complex values <code>like serde_json::value::Value</code> and <code>toml::Value</code>.</p>\n\n<pre><code>pub struct Plugin {\n    name: String,\n    config: TomlValue,\n    plugins: Vec&lt;Arc&lt;Lib&gt;&gt;,\n}\n\nimpl Plugin {\n    pub fn run(&amp;self, secret: String, body: JsonValue) -&gt; Result&lt;JsonValue, String&gt; {\n        if self.plugins.len() &gt; 0 {\n            // In a real program you want to cache the symbol and not do it every time if your\n            // application is performance critical\n            match unsafe { self.plugins[0].lib.get(b\"init_bot\\0\") } {\n                Ok(temp) =&gt; {\n                    let f: Symbol&lt;extern \"C\" fn(config: &amp;TomlValue, secret: &amp;str, body: &amp;JsonValue) -&gt; Result&lt;JsonValue, String&gt;&gt; = temp;\n                    //on mac it goes \"segmentation fault\" returning from the third call\n                    println!(\"DEBUG: before\");\n                    let res = f(&amp;self.config.clone(), &amp;secret.clone(), &amp;body.clone());\n                    println!(\"DEBUG: after\");\n                    res\n                },\n                Err(e) =&gt; Err(format!(\"Error getting Symbol for {}: {}\", self.name, e)),\n            }\n        }\n        else {\n            Err(format!(\"Lib {} not loaded\", self.name))\n        }\n    }\n}\n</code></pre>\n\n<p>Inside the called method, I've put three debugging <code>println!</code> \"A\" \"B\" and \"C\", one before every operation. The output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DEBUG: before\nA\nB\nC\nDEBUG: after\nDEBUG: before\nA\nB\nC\nDEBUG: after\nDEBUG: before\nA\nB\nC\nSegmentation fault: 11\n</code></pre>\n\n<p>Sometimes, instead of segmentation fault, it gives \"Illegal instruction: 4\".</p>\n\n<p>For the full code, you can look at <a href=\"https://github.com/nappa85/Rustegram/blob/master/src/webserver/registry.rs\" rel=\"nofollow noreferrer\">my GitHub project</a>.</p>\n"}, {"tags": ["rust", "lalr"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1519111298, "post_id": 48876967, "comment_id": 84763533, "body": "<a href=\"https://www.red-bean.com/sgf/sgf4.html#text\" rel=\"nofollow noreferrer\">red-bean.com/sgf/sgf4.html#text</a> suggests you need to handle escaping in the <code>PropValue</code>."}], "answers": [{"tags": [], "owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "is_accepted": true, "score": 1, "last_activity_date": 1519116077, "last_edit_date": 1519116077, "creation_date": 1519095858, "answer_id": 48877234, "question_id": 48876967, "link": "https://stackoverflow.com/questions/48876967/rust-lalrpop-lexing-ambiguity-non-greedy-matching-inside-of-brackets/48877234#48877234", "title": "rust lalrpop lexing ambiguity: non-greedy matching inside of brackets", "body": "<p>Here's one answer that I came up with. I dropped the multiple individual terminals and combined them all into one big terminal using the <code>[^\\]]</code> trick. </p>\n\n<pre><code>Property: (String, String) = {\n    &lt;r\"[A-Z]+\\[[^\\]]*\\]\"&gt; =&gt; {\n        lazy_static! {\n            static ref RE : regex::Regex = regex::Regex::new(r\"([A-Z]+)\\[([^\\]]*)\\]\").unwrap();\n        }\n\n        let cap = RE.captures(&lt;&gt;).unwrap();\n\n        let k = &amp;cap[1];\n        let v = &amp;cap[2];\n        (k.to_string(), v.to_string())\n    }\n};\n</code></pre>\n\n<p>Not going to accept this answer yet because I'm not sure that this is the most elegant solution given the available tools, and I'm also wondering if it's possible to create a rule that parses </p>\n\n<pre><code>`;HA[My Text]]QB[[Nested]]`\n</code></pre>\n\n<p>As two properties with\n<code>(\"HA\", \"My Text]\")</code> and <code>(\"QB\", \"[Nested]\")</code> as the outcomes, or if this kind of expression is impossible to parse with a lalr(1) parser.</p>\n\n<p>Edit: even though Stefan points out that valid SGF 4 files will have their close brackets escaped, I just want to know if this is possible. I'm beginning to doubt that it is, since once can never know whether a bracket is part of the text or the end of a property without looking past that property to the next thing.</p>\n"}], "owner": {"reputation": 7260, "user_id": 86432, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/ac0f5806a57ad801fec9f5619763f667?s=128&d=identicon&r=PG", "display_name": "masonk", "link": "https://stackoverflow.com/users/86432/masonk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 466, "favorite_count": 1, "accepted_answer_id": 48877234, "answer_count": 1, "score": 1, "last_activity_date": 1519116077, "creation_date": 1519093422, "last_edit_date": 1519093768, "question_id": 48876967, "link": "https://stackoverflow.com/questions/48876967/rust-lalrpop-lexing-ambiguity-non-greedy-matching-inside-of-brackets", "title": "rust lalrpop lexing ambiguity: non-greedy matching inside of brackets", "body": "<p>I'm trying to parse the SGF format, which has this BNF:</p>\n\n<pre><code>  Collection = GameTree { GameTree }\n  GameTree   = \"(\" Sequence { GameTree } \")\"\n  Sequence   = Node { Node }\n  Node       = \";\" { Property }\n  Property   = PropIdent PropValue { PropValue }\n  PropIdent  = UcLetter { UcLetter }\n  PropValue  = \"[\" CValueType \"]\"\n  CValueType = (ValueType | Compose)\n  ValueType  = (None | Number | Real | Double | Color | SimpleText |\n        Text | Point  | Move | Stone)\n</code></pre>\n\n<p>I'm not trying to parse <code>ValueType</code> into distinct types using lalrpop. I just want the raw textual contents of the properties.</p>\n\n<p>I'm having a problem with my <code>Property</code> rule. Specifically I have this line in a test file</p>\n\n<p><code>;AB[dp];AB[pp]HA[6]</code></p>\n\n<p>which is two nodes. The first node has  a single <code>Property</code> and the second has two. The contents of the brackets need to be <code>.*</code> because anything can go in there. Arbitrary free text is a valid value for some properties.</p>\n\n<p>Using lalrpop</p>\n\n<p><code>PropValue = r\"\\[\" &lt;r\".*\"&gt; r\"\\]\";</code></p>\n\n<p>fails as rule because it matches <code>pp]HA[6</code> when of course it needs to match only <code>pp</code>.</p>\n\n<p>Reasonably, (because I have no idea how this could have been implemented), </p>\n\n<p><code>PropValue = r\"\\[\" &lt;r\".*?\"&gt; r\"\\]\";</code></p>\n\n<p>also fails, with an excellent error message:</p>\n\n<pre><code>/mnt/c/Users/mason_000/wsl/dev/rust/seraph/gosgf/src/parse_sgf.lalrpop:18:5: 18:10 error: \"non-greedy\" repetitions (`*?` or `+?`) are not supported in regular expressions\n</code></pre>\n\n<p>Yet now I am in a bind, because I need non-greedy matches here.</p>\n\n<p>One thing I could do is match everything that's not a close bracket. I'm not sure if that's the intended way to resolve this particular kind of ambiguity (first time using a lalr parser). I'm also not sure if <code>;HA[My free text ]]]]</code> is a valid file that should have contents of <code>My free text ]]]</code>. But if it <em>were</em> a valid file, this workaround wouldn't work.</p>\n\n<p>And also, that didn't seem to work:</p>\n\n<p><code>PropValue = r\"\\[\" &lt;r\"[^\\]]\"&gt; r\"\\]\";</code></p>\n\n<p>Fails to parse and I can't decipher exactly where.</p>\n\n<pre><code>        thread 'core::sgf_replays::game189_has_6_handicap' panicked at 'called `Result::unwrap()` on an `Err` value: UnrecognizedToken { token: Some((7, Token(0, \"9\"), 8)), expected: [\"r#\\\"\\\\\\\\]\\\"#\"] }', libcore/result.rs:945:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1: std::sys_common::backtrace::print\n             at libstd/sys_common/backtrace.rs:71\n             at libstd/sys_common/backtrace.rs:59\n   2: std::panicking::default_hook::{{closure}}\n             at libstd/panicking.rs:380\n   3: std::panicking::default_hook\n             at libstd/panicking.rs:390\n   4: std::panicking::rust_panic_with_hook\n             at libstd/panicking.rs:576\n   5: std::panicking::begin_panic\n             at libstd/panicking.rs:537\n   6: std::panicking::begin_panic_fmt\n             at libstd/panicking.rs:521\n   7: rust_begin_unwind\n             at libstd/panicking.rs:497\n   8: core::panicking::panic_fmt\n             at libcore/panicking.rs:71\n   9: core::result::unwrap_failed\n             at /checkout/src/libcore/macros.rs:23\n  10: &lt;core::result::Result&lt;T, E&gt;&gt;::unwrap\n             at /checkout/src/libcore/result.rs:782\n  11: seraph::core::sgf_replays::game189_has_6_handicap\n             at src/core/mod.rs:612\n  12: &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box\n             at libtest/lib.rs:1453\n             at /checkout/src/libcore/ops/function.rs:223\n             at /checkout/src/liballoc/boxed.rs:788\n  13: __rust_maybe_catch_panic\n             at libpanic_unwind/lib.rs:102\n</code></pre>\n\n<p>And for completeness, here is the .lalrpop</p>\n\n<pre><code>use std::str::FromStr;\nuse gosgf::*;\nuse std::collections::HashMap;\ngrammar;\n\npub Collection: GoCollection = &lt;GameTree*&gt;;\n\nmatch {\n    r\"\\(\",\n     r\"\\)\",\n     r\";\" ,\n     r\"\\[\",\n     r\"\\]\",\n    r\"[A-Z]+\",\n}\nelse {\n    r\"[^\\]]\",\n}\nGameTree: GameTree = {\n    r\"\\(\" &lt;sequence: Sequence&gt; &lt;children: GameTree*&gt; r\"\\)\" =&gt; {\n\n        let komi = f64::from_str(sequence[0].properties.get(\"KM\").unwrap_or(&amp;\"0.0\".to_owned())).unwrap();\n        let size = usize::from_str(sequence[0].properties.get(\"SZ\").unwrap_or(&amp;\"19\".to_owned())).unwrap();\n\n        let handicap;\n        {\n            let mut handistr = String::from(\"0\");\n            for node in &amp;sequence {\n                if let Some(ha) = node.properties.get(\"HA\") {\n                    handistr = ha.to_string();\n                    break;\n                }\n            }\n\n            handicap =  usize::from_str(&amp;handistr).unwrap();\n        }\n\n        GameTree {\n            komi,\n            size,\n            handicap,\n            sequence,\n            children,\n        }\n    }\n};\n\nSequence = &lt;Node+&gt;;\n\nNode: Node  = {\n    r\";\" &lt;pairs: Property+&gt; =&gt; {\n        let mut properties : HashMap&lt;String, String&gt; = HashMap::new();\n        for (k, v) in pairs {\n            properties.insert(k, v);\n        }\n        Node { properties }\n    } \n};\n\nProperty: (String, String) = {\n    &lt;k: PropIdent&gt; &lt;v: PropValue&gt; =&gt; (k.to_string(), v.to_string())\n};\nPropIdent = &lt;r\"[A-Z]+\"&gt;;\nPropValue = r\"\\[\" &lt;r\".*\"&gt; r\"\\]\";\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519495925, "post_id": 48876320, "comment_id": 84937753, "body": "<code>fn main() { let name = String::new(); }</code> \u2014 <code>name</code> is also &quot;stored in the process&#39; address space&quot;. Perhaps you mean something else?"}], "answers": [{"comments": [{"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1519090748, "post_id": 48876553, "comment_id": 84757422, "body": "So the standard C main function <code>int main(int argc, charg**argv)</code> doesn&#39;t work on Windows?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 4, "creation_date": 1519090868, "post_id": 48876553, "comment_id": 84757455, "body": "It does, but it works by the C runtime parsing the command-line before invoking <code>main</code>.  It&#39;s a compatibility shim, not how it works natively from the OS&#39;s perspective."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1519089585, "creation_date": 1519089585, "answer_id": 48876553, "question_id": 48876320, "link": "https://stackoverflow.com/questions/48876320/why-does-stdenvargs-return-an-iterator-of-string-instead-of-static-st/48876553#48876553", "title": "Why does `std::env::args` return an iterator of `String` instead of `&amp;&#39;static str`?", "body": "<blockquote>\n  <p>[...] at least in the OS we were working on [...]</p>\n</blockquote>\n\n<p>That's your answer.  Just because one OS stores command-line arguments literally in memory, doesn't mean they <em>all</em> do.  More than that, what's to say they store them in the exact same format that <code>str</code> expects?</p>\n\n<p>The trivial example of this is Windows, where the command-line is a single potentially invalid UTF-16 string returned from a function call: there is <em>no way</em> to turn this into a <code>&amp;'static str</code>.</p>\n\n<p>So, the API is designed to return an owned string on the basis that it has to be consistent across platforms, and it doesn't know what it might have to do to get the command-line arguments into a usable format.</p>\n"}], "owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 343, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1519495839, "creation_date": 1519087526, "last_edit_date": 1519495839, "question_id": 48876320, "link": "https://stackoverflow.com/questions/48876320/why-does-stdenvargs-return-an-iterator-of-string-instead-of-static-st", "title": "Why does `std::env::args` return an iterator of `String` instead of `&amp;&#39;static str`?", "body": "<p>What I remember from my operating systems class is that, at least in the OS we were working on, command-line arguments are stored somewhere in the process' address space. If that is the case, then couldn't <code>std::env::Args</code> be an iterator over <code>&amp;'static str</code>? Or if the encoding of the strings is not necessarily UTF-8 and is operating-system dependent, couldn't <code>std::env::ArgsOs</code> be an iterator over <code>&amp;'static OsStr</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 4, "creation_date": 1519080456, "post_id": 48875251, "comment_id": 84754623, "body": "I don&#39;t have enough time to properly answer this, but consider the question of what would happen if you wanted to get a pointer or reference to an element in your boolean array."}, {"owner": {"reputation": 9980, "user_id": 1944004, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/60f3cc97f94fa3690ba406f8c1a7fc4f?s=128&d=identicon&r=PG", "display_name": "Henri Menke", "link": "https://stackoverflow.com/users/1944004/henri-menke"}, "edited": false, "score": 4, "creation_date": 1519080620, "post_id": 48875251, "comment_id": 84754682, "body": "Alignment.  Use <a href=\"https://crates.io/crates/bitflags\" rel=\"nofollow noreferrer\">bitflags</a> instead."}, {"owner": {"reputation": 10129, "user_id": 95396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3fafc0390e40bf6e659c54dd968b3713?s=128&d=identicon&r=PG", "display_name": "andy boot", "link": "https://stackoverflow.com/users/95396/andy-boot"}, "edited": false, "score": 0, "creation_date": 1519082800, "post_id": 48875251, "comment_id": 84755321, "body": "Right, we can&#39;t point to anything smaller than a byte. And we don&#39;t want the complexity of trying to cram 8 booleans into a byte. If you really need that kind of control use a library like bitflags."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 3, "creation_date": 1519146671, "post_id": 48875251, "comment_id": 84786580, "body": "C++ famously made that design mistake for <code>vector&lt;bool&gt;</code>"}, {"owner": {"reputation": 210, "user_id": 3177936, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2afdc0a98e17854a19e04f41ef94e079?s=128&d=identicon&r=PG", "display_name": "rubdos", "link": "https://stackoverflow.com/users/3177936/rubdos"}, "edited": false, "score": 1, "creation_date": 1519205595, "post_id": 48875251, "comment_id": 84809941, "body": "<a href=\"https://stackoverflow.com/questions/17794569/why-is-vectorbool-not-a-stl-container\">C++ version of this question, for reference</a>. I wonder though why this question is being downvoted to the depths."}], "answers": [{"comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 1, "creation_date": 1519146817, "post_id": 48882542, "comment_id": 84786688, "body": "Another assumption Rust makes is that two adjacent items in a slice can be modified from different thread without causing a race condition. Which would require use of atomic instructions whenever you access such a bit-packed element."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1519150846, "post_id": 48882542, "comment_id": 84789011, "body": "&quot;unless this element is zero-sized&quot; <a href=\"http://play.integer32.com/?gist=81232bb27617cee4f8f08544039a12ee&amp;version=stable\" rel=\"nofollow noreferrer\">Really?</a>. You definitely can take the address of a 0 sized-type. Although, the address would not be unique, eg. in the case of an array, all elements would have the same address."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1519155422, "last_edit_date": 1519155422, "creation_date": 1519121057, "answer_id": 48882542, "question_id": 48875251, "link": "https://stackoverflow.com/questions/48875251/rust-seems-to-allocate-the-same-space-in-memory-for-an-array-of-booleans-as-an-a/48882542#48882542", "title": "Rust seems to allocate the same space in memory for an array of booleans as an array of 8 bit integers", "body": "<p><strong>Pointers and references</strong>.</p>\n\n<ol>\n<li>There is an assumption that you can always take a reference to an item of a slice, a field of a struct, etc...</li>\n<li>There is an assumption in the language that any reference to an instance of a statically sized type can transmuted to a type-erased pointer <code>*mut ()</code>.</li>\n</ol>\n\n<p>Those two assumptions together mean that:</p>\n\n<ul>\n<li>due to (2), it is not possible to create a \"bit-reference\" which would allow sub-byte addressing,</li>\n<li>due to (1), it is not possible not to have references.</li>\n</ul>\n\n<p>This essentially means that any type must have a minimum alignment of one byte.</p>\n\n<hr>\n\n<p>Note that this is not necessarily an issue. Opting in to a 128 bytes representation should be done cautiously, as it implies trading off speed (and convenience) for memory. It's not a pure win.</p>\n\n<p>Prior art (in the name of <code>std::vector&lt;bool&gt;</code> in C++) is widely considered a mistake in hindsight.</p>\n"}], "owner": {"reputation": 10129, "user_id": 95396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3fafc0390e40bf6e659c54dd968b3713?s=128&d=identicon&r=PG", "display_name": "andy boot", "link": "https://stackoverflow.com/users/95396/andy-boot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1109, "favorite_count": 0, "accepted_answer_id": 48882542, "answer_count": 1, "score": 2, "last_activity_date": 1519155422, "creation_date": 1519080009, "question_id": 48875251, "link": "https://stackoverflow.com/questions/48875251/rust-seems-to-allocate-the-same-space-in-memory-for-an-array-of-booleans-as-an-a", "title": "Rust seems to allocate the same space in memory for an array of booleans as an array of 8 bit integers", "body": "<p>Running <a href=\"https://play.rust-lang.org/?gist=3499c903459f003599a6cf8afe1aff59&amp;version=nightly\" rel=\"nofollow noreferrer\">this code in rust</a>:</p>\n\n<pre><code>fn main() {\n    println!(\"{:?}\", std::mem::size_of::&lt;[u8; 1024]&gt;());\n    println!(\"{:?}\", std::mem::size_of::&lt;[bool; 1024]&gt;());\n}\n</code></pre>\n\n<blockquote>\n  <p>1024 </p>\n  \n  <p>1024</p>\n</blockquote>\n\n<p>This is not what I expected. So I compiled and ran in release mode. But I got the same answer.</p>\n\n<p>Why does the rust compiler seemingly allocate a whole byte for each single boolean? To me it seems to be a simple optimization to only allocate 128 bytes instead. <a href=\"https://github.com/contain-rs/bit-vec\" rel=\"nofollow noreferrer\">This project</a> implies I'm not the first to think this.</p>\n\n<p>Is this a case of compilers being way harder than the seem? Or is this not optimized because it isn't a realistic scenario? Or am I not understanding something here?</p>\n"}, {"tags": ["winapi", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519074376, "post_id": 48873354, "comment_id": 84752180, "body": "<i>is it worth it to prevent unsafe from bubbling up in my programs</i> \u2014 yes. That&#39;s kind of the entire point of Rust, to me: providing safe abstractions. Without that firewall, you might as well write C which &quot;automatically adds <code>unsafe</code>&quot; to every function and statement."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519075343, "post_id": 48873354, "comment_id": 84752586, "body": "<i>makes guarantees related to preventing race conditions</i> \u2014 not in the most general sense, it doesn&#39;t. It only cares about <i>data races</i>, not logical race conditions."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1519075589, "post_id": 48874328, "comment_id": 84752684, "body": "While this answer points out logical issues with the OPs code, it doesn&#39;t address the question that the OP asked (&quot;is it safe&quot;). &quot;Safety&quot; has <a href=\"https://doc.rust-lang.org/reference/unsafety.html\" rel=\"nofollow noreferrer\">a very specific meaning in Rust</a>, which this answer doesn&#39;t address. It&#39;s probable that the OP doesn&#39;t even intend to ask about this specific meaning of safety (or has misunderstood what it means). The answer to OPs question, as far as I can tell, is <b>yes</b>."}, {"owner": {"reputation": 82917, "user_id": 3501, "user_type": "registered", "accept_rate": 30, "profile_image": "https://www.gravatar.com/avatar/1fd5f5cc203c393634379a3b3b7e7a87?s=128&d=identicon&r=PG", "display_name": "Anders", "link": "https://stackoverflow.com/users/3501/anders"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519077104, "post_id": 48874328, "comment_id": 84753338, "body": "/libstd/sys/windows/process.rs puts its WinAPI calls in unsafe blocks but I don&#39;t know Rust well enough to know what the semantics of a handle is supposed to be. That code also has a process struct that uses a process handle, not a process id and you should be using that struct when possible."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519077378, "post_id": 48874328, "comment_id": 84753445, "body": "Calling <i>any</i> FFI function has to be in an unsafe block because the compiler doesn&#39;t know what it might do. By building an abstraction around the FFI functions, the standard library makes spawning a process a safe operation."}, {"owner": {"reputation": 677, "user_id": 2948173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0688f525f1bc8e15c870d6a6ac0926ae?s=128&d=identicon&r=PG&f=1", "display_name": "Ethan McCue", "link": "https://stackoverflow.com/users/2948173/ethan-mccue"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519080839, "post_id": 48874328, "comment_id": 84754756, "body": "@Shepmaster I did intend to ask about rust&#39;s specific meaning of safety, though I guess I did not get that across."}, {"owner": {"reputation": 677, "user_id": 2948173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0688f525f1bc8e15c870d6a6ac0926ae?s=128&d=identicon&r=PG&f=1", "display_name": "Ethan McCue", "link": "https://stackoverflow.com/users/2948173/ethan-mccue"}, "edited": false, "score": 0, "creation_date": 1519081329, "post_id": 48874328, "comment_id": 84754885, "body": "@Anders I&#39;m not creating child processes in the application as a whole, I am reading into the memory of a separate process. I don&#39;t know if that informs your answer or not."}, {"owner": {"reputation": 570607, "user_id": 505088, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/3c0aac2191718ef0309dbc034d9b9961?s=128&d=identicon&r=PG", "display_name": "David Heffernan", "link": "https://stackoverflow.com/users/505088/david-heffernan"}, "edited": false, "score": 0, "creation_date": 1519110384, "post_id": 48874328, "comment_id": 84763123, "body": "Why did you accept an answer that doesn&#39;t speak to Rust safety? That was quite clear from the question. Anyone who knows Rust would recognise that clearly."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1519110663, "post_id": 48874328, "comment_id": 84763238, "body": "<a href=\"https://superuser.com/questions/636497/does-windows-7-reuse-process-ids\" title=\"does windows 7 reuse process ids\">superuser.com/questions/636497/does-windows-7-reuse-process-&zwnj;&#8203;ids</a> suggests process id collisions are actually a real problem, so this answer adds something useful. Still, the function is safe regarding rust expectations."}, {"owner": {"reputation": 570607, "user_id": 505088, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/3c0aac2191718ef0309dbc034d9b9961?s=128&d=identicon&r=PG", "display_name": "David Heffernan", "link": "https://stackoverflow.com/users/505088/david-heffernan"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1519113314, "post_id": 48874328, "comment_id": 84764514, "body": "@Stefan Who said anything about adding something useful. I&#39;m talking about how SO works where answers must address the question asked. If you want to add asides, then that&#39;s for comments."}], "tags": [], "owner": {"reputation": 82917, "user_id": 3501, "user_type": "registered", "accept_rate": 30, "profile_image": "https://www.gravatar.com/avatar/1fd5f5cc203c393634379a3b3b7e7a87?s=128&d=identicon&r=PG", "display_name": "Anders", "link": "https://stackoverflow.com/users/3501/anders"}, "is_accepted": false, "score": 2, "last_activity_date": 1519075176, "creation_date": 1519075176, "answer_id": 48874328, "question_id": 48873354, "link": "https://stackoverflow.com/questions/48873354/is-this-rust-code-that-uses-the-windows-api-safe/48874328#48874328", "title": "Is this Rust code that uses the Windows API &quot;safe&quot;?", "body": "<p>There is a race on the process id. To be race free you would have to verify that the pid matches the expected process start time (the restart manager uses <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa373677(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>RM_UNIQUE_PROCESS</code></a> for this). Ideally you would keep the handle from your created child processes instead, a process id cannot be reused as long as somebody has a open handle to the process.</p>\n\n<p>If it is not your child process and you don't have a handle then you have to get the system time before finding the process id and calling <code>get_process_full_access</code>, then call <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms683223(v=vs.85).aspx\" rel=\"nofollow noreferrer\"><code>GetProcessTimes</code></a> on the process handle and verify that the creation time is older than the time you read <strong>before finding the process id</strong> and opening the process.</p>\n"}, {"tags": [], "owner": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "is_accepted": false, "score": 0, "last_activity_date": 1591263413, "last_edit_date": 1591263413, "creation_date": 1591262349, "answer_id": 62191081, "question_id": 48873354, "link": "https://stackoverflow.com/questions/48873354/is-this-rust-code-that-uses-the-windows-api-safe/62191081#62191081", "title": "Is this Rust code that uses the Windows API &quot;safe&quot;?", "body": "<p>In general, the Windows API implements the basic exception guarantee: A function either runs to completion, or returns an error. In either case, no invariants are violated. Regarding the <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess\" rel=\"nofollow noreferrer\">OpenProcess</a> API, there are only two outcomes:</p>\n\n<ul>\n<li>The function fails (signaled by a return value of <code>NULL</code>).</li>\n<li>The function succeeds and returns a <code>HANDLE</code> that remains valid until <code>CloseHandle</code> is called on it.</li>\n</ul>\n\n<p>The implementation of <code>get_process_full_access</code> accounts for all outcomes, and propagates the results accordingly. As such, it is safe and need not be marked <code>unsafe</code>.</p>\n\n<p>Yet, the <em>interface</em> still isn't safe: It returns a raw <code>HANDLE</code> value, that doesn't release its referenced resources when it gets dropped. This would need to be wrapped in a struct, that implements - at the very least - the <a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\" rel=\"nofollow noreferrer\">Drop</a> trait (though <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\">Clone</a> wouldn't hurt either):</p>\n\n<pre><code>pub struct KernelObj {\n    handle: HANDLE,\n}\n\nimpl Drop for KernelObj {\n    fn drop(&amp;mut self) {\n        unsafe { CloseHandle( self.handle ) };\n    }\n}\n</code></pre>\n\n<p>The implementation would need to be updated like so:</p>\n\n<pre><code>pub fn get_process_full_access(process_id: DWORD) -&gt; Result&lt;KernelObj, DWORD&gt; {\n    unsafe {\n        let process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process_id);\n        if process == NULL {\n            Err(GetLastError())\n        } else {\n            Ok(KernelObj{ handle: process })\n        }\n    }\n}\n</code></pre>\n\n<p><code>clone()</code> would have to call <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-duplicatehandle\" rel=\"nofollow noreferrer\">DuplicateHandle</a>. Again, optionally, you could implement the <a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow noreferrer\">Sync</a> and <a href=\"https://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"nofollow noreferrer\">Send</a> marker traits, as both concurrent shared access, as well as transfer to arbitrary threads are safe operations.</p>\n"}], "owner": {"reputation": 677, "user_id": 2948173, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0688f525f1bc8e15c870d6a6ac0926ae?s=128&d=identicon&r=PG&f=1", "display_name": "Ethan McCue", "link": "https://stackoverflow.com/users/2948173/ethan-mccue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 869, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1591263413, "creation_date": 1519070492, "last_edit_date": 1519074229, "question_id": 48873354, "link": "https://stackoverflow.com/questions/48873354/is-this-rust-code-that-uses-the-windows-api-safe", "title": "Is this Rust code that uses the Windows API &quot;safe&quot;?", "body": "<pre><code>use winapi::um::processthreadsapi::OpenProcess;\nuse winapi::shared::minwindef::{DWORD, FALSE};\nuse winapi::shared::ntdef::NULL;\nuse winapi::um::winnt::{HANDLE, PROCESS_ALL_ACCESS};\nuse winapi::um::errhandlingapi::GetLastError;\n\npub fn get_process_full_access(process_id: DWORD) -&gt; Result&lt;HANDLE, DWORD&gt; {\n    unsafe {\n        let process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, process_id);\n        if process == NULL {\n            Err(GetLastError())\n        } else {\n            Ok(process)\n        }\n    }\n}\n</code></pre>\n\n<p>I wrote this function using Rust's bindings to the Windows API and I <em>think</em> that I covered at least the documented error cases for the <code>OpenProcess</code> function, but I am still very unsure about the actual safety of my code.</p>\n\n<p>I know Rust makes guarantees related to preventing race conditions, but I don't really know what to look for to make sure that my code makes those same guarantees. In situations like this should I just make the wrapping function unsafe as well, or is it worth it to prevent unsafe from bubbling up in my programs?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1519066737, "post_id": 48872003, "comment_id": 84748929, "body": "Diesel already supports <a href=\"https://github.com/diesel-rs/diesel/blob/4b7fbbfed377dfba4f8e259b6c600b62b5dad256/diesel/Cargo.toml#L17\" rel=\"nofollow noreferrer\"><code>chrono</code> as a feature</a>. So you don&#39;t actually need to do that for this particular type. Of course, the question you are asking might still be worth answering. I <i>think</i> I have seen a similar question here before... but not quite sure."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1519110555, "post_id": 48872003, "comment_id": 84763186, "body": "@LukasKalbertodt diesel does not support <code>chrono::Duration</code> and never will."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1519118826, "post_id": 48872003, "comment_id": 84767707, "body": "Oh sorry, my bad."}], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519132135, "post_id": 48886002, "comment_id": 84776694, "body": "So, do you think that it was good that I implemented both of these traits?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519135692, "post_id": 48886002, "comment_id": 84779004, "body": "@VictorPolevoy I do not think so. There are both useless in your case. But your question will make me ask another one."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519136665, "post_id": 48886002, "comment_id": 84779681, "body": "@VictorPolevoy Related: <a href=\"https://stackoverflow.com/questions/48887413/why-does-not-t-implement-asreft\" title=\"why does not t implement asreft\">stackoverflow.com/questions/48887413/&hellip;</a>"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519138956, "post_id": 48886002, "comment_id": 84781306, "body": "Why useless? The user may pass my proxy type as <code>chrono::Duration</code> reference to a function - this already eases pain of introduction a proxy type."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519140301, "post_id": 48886002, "comment_id": 84782240, "body": "@VictorPolevoy My answer is now complete. I will remove my comments because they are not useful anymore."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519141253, "post_id": 48886002, "comment_id": 84782900, "body": "Then another problem: I don&#39;t quite understand the difference between <code>AsRef</code> and <code>Borrow</code>..."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1519141371, "post_id": 48886002, "comment_id": 84782985, "body": "@VictorPolevoy I have already linked a question about this in the TL;DR"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 0, "last_activity_date": 1519140243, "last_edit_date": 1519140243, "creation_date": 1519132023, "answer_id": 48886002, "question_id": 48872003, "link": "https://stackoverflow.com/questions/48872003/how-can-i-make-the-proxy-type-just-for-implementing-some-trait-for-it/48886002#48886002", "title": "How can I make the proxy type just for implementing some trait for it?", "body": "<p><strong>TL;DR</strong>: they are opposite things. <code>Deref&lt;T&gt;</code> explains how to derefence a type (<code>*T</code>), <code>AsRef&lt;T&gt;</code> explains what is a <code>&amp;T</code>. In your case, you want to use <code>Borrow</code> trait (and not <code>AsRef</code>), as explained in the answers on <a href=\"https://stackoverflow.com/questions/48887413/why-does-t-not-implement-asreft/48887786\">this question</a>.</p>\n\n<hr>\n\n<p><code>Deref</code> tells to the compiler what is the result when you dereference your type (your type is like a smart pointer in this case):</p>\n\n<pre><code>struct UIntRef&lt;'a&gt;(&amp;'a u32);\n\nimpl&lt;'a&gt; std::ops::Deref for UIntRef&lt;'a&gt; {\n    type Target = u32;\n\n    fn deref(&amp;self) -&gt; &amp;u32 {\n        &amp;self.0\n    }\n}\n\nfn get_u32(_: u32) {}\n\nfn main() {\n    let u = UIntRef(&amp;42);\n\n    get_u32(*u); // I get an u32 when I deref an UIntRef\n}\n</code></pre>\n\n<p><code>AsRef</code> is a useful abstraction when a thing has a meaning as a \"view\" on the memory. For example, a <code>Vec</code> or an array are collections of things contiguous in memory. When you only need to <strong>read</strong> those things, you use a slice (<code>AsRef&lt;[T]&gt;</code> is a slice) that is a <strong>view</strong> on the memory. So, an array and a <code>Vec</code> can both be seen as views on the memory when you take their reference. Thus you can write:</p>\n\n<pre><code>fn get_view_on_things&lt;T&gt;(_: T)\nwhere T: AsRef&lt;[i32]&gt; {}\n\nfn main() {\n    get_view_on_things(&amp;vec![1, 2, 3]);\n    get_view_on_things(&amp;[1, 2, 3]);\n}\n</code></pre>\n\n<hr>\n\n<p>To answer your underlying question, you cannot make things totally transparent for the user, and that is a good thing. Newtypes are made to add meaning, not to be transparent:</p>\n\n<pre><code>struct Miles(f32);\nstruct Kms(f32);\n\nfn take_a_distance(_: Miles) {}\n\nfn main() {\n    take_a_distance(1.23);\n    // Cannot compile: What does the use wants ?\n\n    take_a_distance(Miles(1.23));\n    // Oh, now that's clear\n}\n</code></pre>\n\n<p><strong>However</strong>, because in the both case you can get a reference on the same type, you can implement <code>Borrow</code> for your newtype, as in this example:</p>\n\n<pre><code>extern crate chrono;\n\nuse std::borrow::Borrow;\n\nstruct ChronoDurationProxy(chrono::Duration);\n\nimpl Borrow&lt;chrono::Duration&gt; for ChronoDurationProxy {\n    fn borrow(&amp;self) -&gt; &amp;chrono::Duration {\n        &amp;self.0\n    }\n}\n\nfn take_a_duration&lt;T&gt;(dur: T) where T: Borrow&lt;chrono::Duration&gt; {\n    let dur = dur.borrow(); // here we get a `&amp;chrono::Duration`\n    println!(\"{:?}\", dur)\n}\n\nfn main() {\n    let dur_1 = chrono::Duration::days(1);\n    let dur_2 = ChronoDurationProxy(dur_1);\n\n    take_a_duration(dur_1);\n    take_a_duration(dur_2);\n}\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 396, "favorite_count": 1, "accepted_answer_id": 48886002, "answer_count": 1, "score": 1, "last_activity_date": 1519140243, "creation_date": 1519064342, "last_edit_date": 1519065614, "question_id": 48872003, "link": "https://stackoverflow.com/questions/48872003/how-can-i-make-the-proxy-type-just-for-implementing-some-trait-for-it", "title": "How can I make the proxy type just for implementing some trait for it?", "body": "<p>I want to implement some foreign traits (<code>ToSql</code> and <code>FromSql</code> from <code>diesel</code> crate) for the foreign types (<code>chrono::Duration</code> from <code>chrono</code> crate). I did this:</p>\n\n<pre><code>pub struct ChronoDurationProxy(pub chrono::Duration);\n</code></pre>\n\n<p>Then I implemented needed traits for this <code>ChronoDurationProxy</code> type. However,\nI'd like the user not to care much about the proxy type. So, the only thing I knew from what I could do in such situation was implementing traits for <code>deref</code>. But I am stuck because, I don't quite understand the difference between <code>Deref</code> and <code>AsRef</code>. So, I implemented both of them, but don't really know, should I do that or not:</p>\n\n<pre><code>impl AsRef&lt;chrono::Duration&gt; for ChronoDurationProxy {\n    fn as_ref(&amp;self) -&gt; &amp;chrono::Duration {\n        &amp;self.0\n    }\n}\n\nimpl std::ops::Deref for ChronoDurationProxy {\n    type Target = chrono::Duration;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.0\n    }\n}\n</code></pre>\n\n<p>Neither I know any other ways of providing the most transparent way of such types proxying, hence the question.</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 69, "user_id": 2607390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83cda35e876676d9f4fe1ab49749ef50?s=128&d=identicon&r=PG", "display_name": "kilian", "link": "https://stackoverflow.com/users/2607390/kilian"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1519041497, "post_id": 48864308, "comment_id": 84734423, "body": "I added a complete, minimal, running example. With that said: it must be possible to write such an iterator in rust, because iter_mut() of std::vec::Vec ist exactly such. I saw other libraries, like ndarray, which also provide such an iterator. So it must be possible to implement one. Unfortunately the source code of these libraries is not easy to understand."}, {"owner": {"reputation": 69, "user_id": 2607390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83cda35e876676d9f4fe1ab49749ef50?s=128&d=identicon&r=PG", "display_name": "kilian", "link": "https://stackoverflow.com/users/2607390/kilian"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1519044534, "post_id": 48864308, "comment_id": 84736266, "body": "This should not be a duplicate, as totally other things go on (also the error is completely different). The guy in the other thread wants to change to signature of iterators, which I do not do. I simply &quot;wrap&quot; std::vec::Vec&#39;s iter_mut"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1519047113, "post_id": 48864308, "comment_id": 84737815, "body": "<a href=\"https://play.rust-lang.org/?gist=4c51594fb1b0cb182a4df61e61103db8&amp;version=stable\" rel=\"nofollow noreferrer\">Here is the solution</a> from the duplicate applied to your case. You can return the internal collection&#39;s iterator type."}, {"owner": {"reputation": 69, "user_id": 2607390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83cda35e876676d9f4fe1ab49749ef50?s=128&d=identicon&r=PG", "display_name": "kilian", "link": "https://stackoverflow.com/users/2607390/kilian"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1519055834, "post_id": 48864308, "comment_id": 84743221, "body": "Yeah. That seems more likely. As the original thread is from 2014 and Rust at 2014 has not much to do with Rust 2017, this question is still worth asking. Also this strides::MutIter library mentioned is not actively maintained anymore."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1519057418, "post_id": 48864308, "comment_id": 84744171, "body": "If you check the review dates, you will see that the question has been kept up to date. Yes, Rust brought new features to the table in 3 years, but that has not changed how the borrow checker works in this situation. Didn&#39;t the solution as presented on the playground solve the problem? I do not believe is not worth replicating the same solution here."}, {"owner": {"reputation": 69, "user_id": 2607390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83cda35e876676d9f4fe1ab49749ef50?s=128&d=identicon&r=PG", "display_name": "kilian", "link": "https://stackoverflow.com/users/2607390/kilian"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1519116545, "post_id": 48864308, "comment_id": 84766207, "body": "Sorry: 1. the &quot;solution&quot; of the other thread does not help. I need a two dimensional iterator. Exposing the inner iter_mut() does not help here at all, because I need my own iterator, which I cannot build using rust. 2. A safe solution using &quot;unsafe&quot; would be cool too  I guess I stripped my example too much down. It was enough stripped to show what the compiler error is, but too much stripped to actually show what I want. Exposing the inner iter_mut(), is, of course, not what I want."}], "owner": {"reputation": 69, "user_id": 2607390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83cda35e876676d9f4fe1ab49749ef50?s=128&d=identicon&r=PG", "display_name": "kilian", "link": "https://stackoverflow.com/users/2607390/kilian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 106, "favorite_count": 0, "closed_date": 1519061763, "answer_count": 0, "score": 2, "last_activity_date": 1519120037, "creation_date": 1519036848, "last_edit_date": 1519120037, "question_id": 48864308, "link": "https://stackoverflow.com/questions/48864308/borrow-checker-yoga-wrapping-stdvecvec-inside-own-type-and-adapt-iter-mut", "closed_reason": "Duplicate", "title": "Borrow checker yoga: Wrapping std::vec::Vec inside own type and adapt iter_mut", "body": "<p>To implement a two dimensional vector type, I tried to wrap <code>std::vec::Vec</code> inside my own struct and implement a two dimensional mutable iterator. I know, that this is not possible in safe Rust due to <a href=\"https://stackoverflow.com/questions/25730586/how-can-i-create-my-own-data-structure-with-an-iterator-that-returns-mutable-ref\">this</a>.</p>\n\n<p>How to implement this in unsafe rust, safely?</p>\n\n<p>The following example is the basic minimal example:</p>\n\n<pre><code>struct TwoDimVector&lt;T&gt; where T : Default + Clone {\n    vector : std::vec::Vec&lt;T&gt;,\n    x_dim : u32,\n    y_dim : u32\n} \n\nimpl&lt;T&gt; TwoDimVector&lt;T&gt; where T : Default + Clone {\n    fn new(x_dim : u32, y_dim : u32) -&gt; TwoDimVector&lt;T&gt; {\n       let vector = std::vec::Vec::new();\n       vector.resize((x_dim * y_dim) as usize, T::default());\n       TwoDimVector { vector, x_dim, y_dim } \n    }\n    fn get_mut(&amp;mut self, (x,y) : (u32, u32)) -&gt; Option&lt;&amp;mut T&gt; { \n        self.vector.get_mut((y * self.x_dim + x) as usize) \n    } \n    fn iter_mut&lt;'a&gt;(&amp;'a mut self, start : (u32, u32), end : (u32, u32)) -&gt; \n        TwoDimVectorIterMut&lt;'a, T&gt; {\n        TwoDimVectorIterMut::new(self, start, end, self.x_dim, self.y_dim)\n    } \n} \n\npub struct TwoDimVectorIterMut&lt;'a, T : 'a&gt; where T : Default + Clone {\n    vector : &amp;'a mut TwoDimVector&lt;T&gt;,\n    start : (u32, u32),\n    end : (u32, u32),\n    current : (u32, u32),\n    invalid : bool\n}  \n\nimpl&lt;'a, T&gt; TwoDimVectorIterMut&lt;'a, T&gt; where T : 'a + Default + Clone {\n    fn new(vector : &amp;'a mut TwoDimVector&lt;T&gt;, start : (u32, u32), end : (u32, \n        u32), x_dim : u32, y_dim : u32) -&gt; TwoDimVectorIterMut&lt;'a, T&gt; {\n        use std::cmp::{min, max};\n        let start : (u32, u32) = start.into();\n        let end : (u32, u32) = end.into();\n        TwoDimVectorIterMut { \n            start : (min(start.0, max(x_dim, 1) - 1), \n                     min(start.1, max(y_dim, 1) - 1)), \n            end :  (min(end.0, max(x_dim, 1) - 1), \n                    min(end.1, max(y_dim, 1) - 1)),\n            current : (start.0, start.1 ),  \n            invalid : x_dim == 0 || y_dim == 0,\n            vector : vector\n        }\n    }\n    fn advance(&amp;mut self) -&gt; Option&lt;(u32, u32)&gt; {\n        let current = self.current;\n        if self.invalid || current.0 &gt; self.end.0 || current.1 &gt; self.end.1 {\n            return None\n        }\n        if self.current.0 == self.end.0 {\n            self.current.0 = self.start.0;\n            self.current.1 += 1; \n        } else {\n            self.current.0 += 1;\n        }    \n        return Some(current);\n    } \n}\n\nimpl&lt;'a, T&gt; Iterator for TwoDimVectorIterMut&lt;'a, T&gt; where T : Default + Clone \n{\n    type Item = &amp;'a mut T;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let point = self.advance();\n        if let Some(point) = point {\n            unsafe {\n              self.vector.get_mut(point) // what to write here??\n            }\n        } else {\n            None\n        }\n    }\n}    \n</code></pre>\n\n<p>Link to <a href=\"https://play.rust-lang.org/?gist=9a72da1f9ee3c09a1a8ecc63cd3a5dbf&amp;version=stable\" rel=\"nofollow noreferrer\">Rust playground</a></p>\n"}, {"tags": ["rust", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 1350, "user_id": 3220468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8bcd5a0e9fc3018d76dd96371281a891?s=128&d=identicon&r=PG", "display_name": "Tom&#225;\u0161 Dvo\u0159&#225;k", "link": "https://stackoverflow.com/users/3220468/tom%c3%a1%c5%a1-dvo%c5%99%c3%a1k"}, "edited": false, "score": 0, "creation_date": 1519046634, "post_id": 48864369, "comment_id": 84737479, "body": "Aha, I was missing the <code>as Box&lt;FooTrait&gt;</code> implicitly happenning behind the scenes, and the (in retrospect obvious) fact that the <code>as</code> is <i>NOT</i> a no-op, creating a trait object is not just a play with type ascriptions, but an actual operation. If I want to use <code>.map</code>, I can explicitily <code>let maybe_trait = maybe_struct.map(|x| Box::new(x) as Box&lt;FooTrait&gt;);</code>. I&#39;ll yet have to fully digest coerctions, <code>Unsize</code> and friends. Thanks."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 1350, "user_id": 3220468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8bcd5a0e9fc3018d76dd96371281a891?s=128&d=identicon&r=PG", "display_name": "Tom&#225;\u0161 Dvo\u0159&#225;k", "link": "https://stackoverflow.com/users/3220468/tom%c3%a1%c5%a1-dvo%c5%99%c3%a1k"}, "edited": false, "score": 0, "creation_date": 1519049609, "post_id": 48864369, "comment_id": 84739479, "body": "@Tom&#225;\u0161Dvo\u0159&#225;k Btw: you can often omit the target type in <code>as</code>-expressions like this: <code>|x| Box::new(x) as _</code>."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 6, "last_activity_date": 1519037047, "creation_date": 1519037047, "answer_id": 48864369, "question_id": 48864045, "link": "https://stackoverflow.com/questions/48864045/why-does-using-optionmap-to-boxnew-a-trait-object-not-work/48864369#48864369", "title": "Why does using Option::map to Box::new a trait object not work?", "body": "<p><code>Box::new</code> only works with sized types; that is, it takes a value of a sized type <code>T</code> and returns <code>Box&lt;T&gt;</code>.  In certain places a <code>Box&lt;T&gt;</code> can be <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"noreferrer\">coerced</a> into a <code>Box&lt;U&gt;</code> (if <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#impl-CoerceUnsized%3CBox%3CU%3E%3E\" rel=\"noreferrer\"><code>T: Unsize&lt;U&gt;</code></a>).</p>\n\n<p>Such coercion does not happen in <code>.map(Box::new)</code>, but does in <code>Some(Box::new(s))</code>; the latter is basically the same as <code>Some(Box::new(s) as Box&lt;FooTrait&gt;)</code>.</p>\n\n<p>You could create (in nightly) your own box constructor that returns boxes of unsized types like this:</p>\n\n<pre><code>#![feature(unsize)]\n\nfn box_new_unsized&lt;T, U&gt;(v: T) -&gt; Box&lt;U&gt;\nwhere\n    T: ::std::marker::Unsize&lt;U&gt;,\n    U: ?Sized,\n{\n    Box::&lt;T&gt;::new(v)\n}\n</code></pre>\n\n<p>and use it like <code>.map(box_new_unsized)</code>.  See <a href=\"https://play.rust-lang.org/?gist=9632f5644444c3f969f3818e63030e67&amp;version=nightly\" rel=\"noreferrer\">Playground</a>.</p>\n"}], "owner": {"reputation": 1350, "user_id": 3220468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8bcd5a0e9fc3018d76dd96371281a891?s=128&d=identicon&r=PG", "display_name": "Tom&#225;\u0161 Dvo\u0159&#225;k", "link": "https://stackoverflow.com/users/3220468/tom%c3%a1%c5%a1-dvo%c5%99%c3%a1k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 397, "favorite_count": 0, "accepted_answer_id": 48864369, "answer_count": 1, "score": 6, "last_activity_date": 1603212953, "creation_date": 1519035941, "last_edit_date": 1603212953, "question_id": 48864045, "link": "https://stackoverflow.com/questions/48864045/why-does-using-optionmap-to-boxnew-a-trait-object-not-work", "title": "Why does using Option::map to Box::new a trait object not work?", "body": "<pre class=\"lang-rust prettyprint-override\"><code>trait FooTrait {}\n\nstruct FooStruct;\n\nimpl FooTrait for FooStruct {}\n\nfn main() {\n    let maybe_struct: Option&lt;dyn FooStruct&gt; = None;\n\n    //  Does not compile\n    let maybe_trait: Option&lt;Box&lt;dyn FooTrait&gt;&gt; = maybe_struct.map(Box::new);\n\n    // Compiles fine\n    let maybe_trait: Option&lt;Box&lt;dyn FooTrait&gt;&gt; = match maybe_struct {\n        Some(s) =&gt; Some(Box::new(s)),\n        None =&gt; None,\n    };\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found struct `FooStruct`\n --&gt; src/main.rs:9:34\n  |\n9 |     let maybe_struct: Option&lt;dyn FooStruct&gt; = None;\n  |                                  ^^^^^^^^^ not a trait\n</code></pre>\n<p>Rustc 1.23.0. Why doesn't the first approach compile? Am I missing something obvious, or... huh?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1519029222, "post_id": 48861713, "comment_id": 84727187, "body": "The error message is straightforward: you got a <code>Option::None</code> from your function. Find why by reading your backtrace."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1519029571, "post_id": 48861713, "comment_id": 84727365, "body": "The three places that can spawn an unwrappable value are <code>CombinedLogger::init</code>, <code>TermLogger::new</code>, and <code>File::create</code>. Of those three, the only one that returns an <code>Option</code> is <code>TermLogger::new</code>; the rest return <code>Result</code>s. Something is wrong with your <code>TermLogger::new</code> arguments, I&#39;d assume."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1519030406, "post_id": 48861713, "comment_id": 84727773, "body": "OP, please add the backtrace in your question!"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1519031482, "post_id": 48861713, "comment_id": 84728372, "body": "Ditto what @Boiethios said. While in this case it was trivial to discover where (we <i>think</i>) the error came from, in the future a backtrace will make it clearer whether the error is from the posted code or something less obvious."}], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1519030899, "post_id": 48862478, "comment_id": 84728017, "body": "I was in the middle of constructing a response in this vein; couldn&#39;t it fail due to <code>term::stderr()</code> as well?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1519030968, "post_id": 48862478, "comment_id": 84728061, "body": "@BHustus Sure, I will add it."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1519032810, "post_id": 48862478, "comment_id": 84729182, "body": "I believe it&#39;s worth mentioning this issue at <a href=\"https://github.com/Drakulix/simplelog.rs\" rel=\"nofollow noreferrer\"><code>simplelog</code>&#39;s repository</a>."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 2, "last_activity_date": 1519031082, "last_edit_date": 1519031082, "creation_date": 1519030750, "answer_id": 48862478, "question_id": 48861713, "link": "https://stackoverflow.com/questions/48861713/simplelogcombinedlogger-panicking-at-runtime/48862478#48862478", "title": "simplelog::CombinedLogger panicking at runtime", "body": "<p>The documentation of <a href=\"https://docs.rs/simplelog/0.4.2/simplelog/struct.TermLogger.html#method.new\" rel=\"nofollow noreferrer\"><code>TermLogger::new</code></a> is not good, because it does not explain why it returns an <code>Option</code>.</p>\n\n<p>I read <a href=\"https://github.com/Drakulix/simplelog.rs/blob/master/src/loggers/termlog.rs#L105\" rel=\"nofollow noreferrer\">the code</a>: the function can fail because of <a href=\"https://stebalien.github.io/doc/term/term/fn.stdout.html\" rel=\"nofollow noreferrer\"><code>term::stdout()</code></a> or <a href=\"https://stebalien.github.io/doc/term/term/fn.stderr.html\" rel=\"nofollow noreferrer\"><code>term::stderr()</code></a>. Reading the documentation, your code fails because <em>a terminal couldn't be opened</em>.</p>\n"}], "owner": {"reputation": 1, "user_id": 9376613, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/312754538b2ab36da03cda6284e2dc31?s=128&d=identicon&r=PG&f=1", "display_name": "Vano", "link": "https://stackoverflow.com/users/9376613/vano"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 0, "answer_count": 1, "score": -2, "last_activity_date": 1608760114, "creation_date": 1519027271, "last_edit_date": 1608760114, "question_id": 48861713, "link": "https://stackoverflow.com/questions/48861713/simplelogcombinedlogger-panicking-at-runtime", "title": "simplelog::CombinedLogger panicking at runtime", "body": "<p>I'm using the log and simplelog crates. Previously this code worked:</p>\n<pre><code>use simplelog::*;\n\nCombinedLogger::init(\n    vec![\n        TermLogger::new(LevelFilter::Warn, Config::default()).unwrap(),\n        WriteLogger::new(LevelFilter::Info, Config::default(), File::create(&quot;main.log&quot;).unwrap()),\n    ]\n).unwrap();\n</code></pre>\n<p>But now it throws this error at runtime:</p>\n<pre><code>thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', /checkout/src/libcore/option.rs:335:21\nstack backtrace:\n</code></pre>\n<p>Cargo.toml dependencies:</p>\n<pre><code>log = &quot;0.4.1&quot;\nsimplelog = &quot;0.5.0&quot;\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1519037514, "post_id": 48861247, "comment_id": 84732150, "body": "The closure captures reference to <code>self</code> which lives less than <code>DAO</code> reference in <code>self</code>. It can be mitigated by passing only the <code>DAO</code> reference into the closure. <a href=\"https://play.rust-lang.org/?gist=9ab0447a9c2b267a226d43faa72c609b&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>. Lines 30 and 33 are important."}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1519063718, "post_id": 48861247, "comment_id": 84747417, "body": "@red75prime Do you mind if I write your suggestion as an answer and explain further why the lifetimes are this way?"}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1519090967, "post_id": 48861247, "comment_id": 84757485, "body": "Great! @red75prime ,If the compiler could give this advice. it will make rust easy to use!  I think the lifetime is one of the most obstacle in rust."}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1519092523, "post_id": 48861247, "comment_id": 84757807, "body": "@red75prime I think it is a important thing for rust to make smaller the variable scope  to capture in closure,  it could avoid some queer compile errors"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1519094674, "post_id": 48861247, "comment_id": 84758234, "body": "@DanHulme, sure."}], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1519092905, "post_id": 48861836, "comment_id": 84757891, "body": "<a href=\"https://stackoverflow.com/users/2731452/red75prime\">red75prime</a> gave an elegant solution."}], "tags": [], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "is_accepted": false, "score": 0, "last_activity_date": 1519028290, "last_edit_date": 1519028290, "creation_date": 1519027834, "answer_id": 48861836, "question_id": 48861247, "link": "https://stackoverflow.com/questions/48861247/how-to-reduce-lifetime-conflicts/48861836#48861836", "title": "How to reduce lifetime conflicts?", "body": "<p>I found a way, but I think it's ugly.</p>\n\n<p>Remove <code>dao</code> property from <code>HelloWorld</code>; add <code>Sync</code> to trait <code>Dao</code>; move out <code>DAO</code> to upper scope; invoke <code>DAO</code> directly from <code>fn call</code>.</p>\n\n<p>Code : <a href=\"https://play.rust-lang.org/?gist=1db88b5cbae4c9ad094294aff34679b0&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1519176807, "post_id": 48891047, "comment_id": 84799420, "body": "Thanks for @Dan&#39;s elaborate explanation. I think I learned much about lifetime from you/!"}], "tags": [], "owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "is_accepted": false, "score": 1, "last_activity_date": 1519147859, "creation_date": 1519147859, "answer_id": 48891047, "question_id": 48861247, "link": "https://stackoverflow.com/questions/48861247/how-to-reduce-lifetime-conflicts/48891047#48891047", "title": "How to reduce lifetime conflicts?", "body": "<p>There's a couple of things going on with lifetimes in this code, and the error message is not that great.</p>\n\n<p>The first thing is that your <code>call</code> function returns a <em>trait object</em>; that is, <code>Box&lt;T&gt;</code> where <code>T</code> is a <em>trait</em> instead of a concrete type. The default lifetime for a trait object is <code>'static</code>, so <code>Box&lt;Future&gt;</code> is equivalent to <code>Box&lt;Future + 'static&gt;</code>. That explains where this line of the message comes from:</p>\n\n<pre><code>note: ...so that expression is assignable (expected std::boxed::Box&lt;futures::Future&lt;Error=hyper::Error, Item=hyper::Response&gt; + 'static&gt;, found std::boxed::Box&lt;futures::Future&lt;Error=hyper::Error, Item=hyper::Response&gt;&gt;)\n</code></pre>\n\n<p>In this case, you don't need your returned <code>Future</code> to have the <code>'static</code> lifetime. Instead, you want it to have the same lifetime as <code>self.dao</code>, so change your type alias as follows:</p>\n\n<pre><code>type Future = Box&lt;'a + Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n</code></pre>\n\n<p>The second thing is what variables your closure <em>captures</em>. Your closure refers to <code>self</code>, so it needs to save away that reference. This means the closure can't live past the end of the method - but you've already specified it will live as long as <code>'a</code>; that is, it will live at least as long as <code>self.dao</code>.</p>\n\n<p>Note that <code>self</code> in this method does <em>not</em> have the lifetime <code>'a</code>. The instance of <code>HelloWorld</code> might have a shorter lifetime than the <code>dao</code> it has a reference to.</p>\n\n<p>To fix this half of the problem, you need to allow the closure to capture <em>only</em> <code>self.dao</code> without capturing <code>self</code>. So you have to add </p>\n\n<pre><code>let dao = self.dao;\n</code></pre>\n\n<p>before the closure, and then refer to <code>dao</code> instead of <code>self.dao</code> inside the closure, so that it won't capture <code>self</code>. You also need to make the closure a <code>move</code> closure, otherwise it ends up capturing a reference to the reference, which still ties the lifetime to the scope of the function.</p>\n\n<p>User <a href=\"https://stackoverflow.com/users/2731452/red75prime\">red75prime</a>, who originally posted this suggestion in a comment, made <a href=\"https://play.rust-lang.org/?gist=9ab0447a9c2b267a226d43faa72c609b&amp;version=stable\" rel=\"nofollow noreferrer\">a playground with these changes</a>. Lines 30, 33, and 34 are the important ones.</p>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 274, "favorite_count": 0, "answer_count": 2, "score": -1, "last_activity_date": 1519147859, "creation_date": 1519024885, "last_edit_date": 1519093786, "question_id": 48861247, "link": "https://stackoverflow.com/questions/48861247/how-to-reduce-lifetime-conflicts", "title": "How to reduce lifetime conflicts?", "body": "<p>I'm fear about lifetime question. I searched and got so many relative results. I feel so different between of them, and I think it is difficult to get the spirit from them. so I decide to ask.</p>\n\n<p>The error occurred when invoking <code>dao</code>'s method inside a Hyper service's call, and I can't fix it!</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\n\nuse futures::future::Future;\nuse futures::Stream;\nuse hyper::server::{Http, Request, Response, Service};\nuse hyper::StatusCode;\nuse std::net::SocketAddr;\n\ntrait Dao {\n    fn input_data(&amp;self, data: &amp;str) -&gt; bool;\n}\n\nstruct MysqlDao;\n\nimpl Dao for MysqlDao {\n    fn input_data(&amp;self, data: &amp;str) -&gt; bool {\n        unimplemented!()\n    }\n}\n\nstruct HelloWorld&lt;'a&gt; {\n    dao: &amp;'a Dao,\n}\n\nimpl&lt;'a&gt; Service for HelloWorld&lt;'a&gt; {\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, req: Request) -&gt; Self::Future {\n        Box::new(req.body().concat2().map(|b| {\n            let rtn = self.dao.input_data(std::str::from_utf8(b.as_ref()).unwrap());\n            let rtn = true; // line 35 this is ok\n            match rtn {\n                true =&gt; {\n                    return Response::new()\n                        .with_status(StatusCode::Ok)\n                        .with_body(String::from(\"ok\"));\n                }\n                false =&gt; {\n                    return Response::new()\n                        .with_status(StatusCode::UnprocessableEntity)\n                        .with_body(String::from(\"error\"));\n                }\n            }\n        }))\n    }\n}\n\nfn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    static DAO: MysqlDao = MysqlDao;\n    web_startup(&amp;addr, &amp;DAO);\n}\n\nfn web_startup&lt;T: Dao&gt;(addr: &amp;SocketAddr, dao: &amp;'static T) {\n    let server = Http::new()\n        .bind(addr, move || Ok(HelloWorld { dao }))\n        .unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a5e515f48518bfba5f1341a5aff4626b&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:33:9\n   |\n33 | /         Box::new(req.body().concat2().map(|b| {\n34 | |             let rtn = self.dao.input_data(std::str::from_utf8(b.as_ref()).unwrap());\n35 | |             let rtn = true; // line 35 this is ok\n36 | |             match rtn {\n...  |\n47 | |             }\n48 | |         }))\n   | |___________^\n   |\nnote: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 26:1...\n  --&gt; src/main.rs:26:1\n   |\n26 | / impl&lt;'a&gt; Service for HelloWorld&lt;'a&gt; {\n27 | |     type Request = Request;\n28 | |     type Response = Response;\n29 | |     type Error = hyper::Error;\n...  |\n49 | |     }\n50 | | }\n   | |_^\nnote: ...so that the type `futures::Map&lt;futures::stream::Concat2&lt;hyper::Body&gt;, [closure@src/main.rs:33:43: 48:10 self:&amp;&amp;HelloWorld&lt;'a&gt;]&gt;` will meet its required lifetime bounds\n  --&gt; src/main.rs:33:9\n   |\n33 | /         Box::new(req.body().concat2().map(|b| {\n34 | |             let rtn = self.dao.input_data(std::str::from_utf8(b.as_ref()).unwrap());\n35 | |             let rtn = true; // line 35 this is ok\n36 | |             match rtn {\n...  |\n47 | |             }\n48 | |         }))\n   | |___________^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that expression is assignable (expected std::boxed::Box&lt;futures::Future&lt;Error=hyper::Error, Item=hyper::Response&gt; + 'static&gt;, found std::boxed::Box&lt;futures::Future&lt;Error=hyper::Error, Item=hyper::Response&gt;&gt;)\n  --&gt; src/main.rs:33:9\n   |\n33 | /         Box::new(req.body().concat2().map(|b| {\n34 | |             let rtn = self.dao.input_data(std::str::from_utf8(b.as_ref()).unwrap());\n35 | |             let rtn = true; // line 35 this is ok\n36 | |             match rtn {\n...  |\n47 | |             }\n48 | |         }))\n   | |___________^\n</code></pre>\n\n<p>The problem line is 34. When I replace line 34 with line 35, it works.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518989858, "post_id": 48856777, "comment_id": 84717238, "body": "Would you accept an answer that used <a href=\"https://docs.rs/itertools/0.7.6/itertools/trait.Itertools.html#method.cartesian_product\" rel=\"nofollow noreferrer\">docs.rs/itertools/0.7.6/itertools/&hellip;</a> ?"}, {"owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518990168, "post_id": 48856777, "comment_id": 84717323, "body": "I would prefer a solution reliant on the std lib only. But knowing  how itertools can achieve this would be beneficial too. Maybe a playground link?"}], "answers": [{"comments": [{"owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "edited": false, "score": 0, "creation_date": 1519034401, "post_id": 48860435, "comment_id": 84730228, "body": "Thanks a lot! @EvilTak"}], "tags": [], "owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "is_accepted": true, "score": 8, "last_activity_date": 1519020883, "creation_date": 1519020883, "answer_id": 48860435, "question_id": 48856777, "link": "https://stackoverflow.com/questions/48856777/simplifying-rust-macro-rules-for-nested-looping/48860435#48860435", "title": "Simplifying Rust macro rules for nested looping", "body": "<p>You can use a <a href=\"https://danielkeep.github.io/tlborm/book/pat-incremental-tt-munchers.html\" rel=\"noreferrer\">recursive TT (token tree) munching macro</a>:</p>\n\n<pre><code>macro_rules! c {\n    (@loop $v:ident, $exp:expr, for $i:ident in $iter:expr) =&gt; (\n        for $i in $iter {\n            $v.push($exp);\n        }\n    );\n\n    (@loop $v:ident, $exp:expr, for $i:ident in $iter:expr, $($tail:tt)*) =&gt; (\n        for $i in $iter {\n            c!(@loop $v, $exp, $($tail)*);\n        }\n    );\n\n    ($exp:expr, $(for $i:ident in $iter:expr),*) =&gt; (\n        {\n            let mut r = vec![];\n            c!(@loop r, $exp, $(for $i in $iter),*);\n            r\n        }\n    );\n}\n</code></pre>\n\n<p>The rules labelled with <code>@loop</code> do all the work.</p>\n\n<p>A TT munching recursive macro is very similar to a recursive function. At every invocation, it processes (munches) only a portion of the input, generates intermediate output, and sends the remaining \"unmunched\" input tail to another macro invocation. Eventually, the input is small enough to not require any more macro invocations and reaches the base case at which the recursion is terminated.</p>\n\n<p>Here, the recursive <code>@loop</code> rule captures a <em>single</em> token tree matching to <code>for $i:ident in $iter:expr</code>, and stores the remaining input (other such <code>for $i in $iter</code> expressions) in a <code>$($tail:tt)*</code>. The macro rule then generates the loop for the captured <code>for $i in $iter</code> expression and generates the loop body by invoking the <em>same</em> rule with the unmunched input (<code>$($tail)*</code>).</p>\n\n<p>Eventually, <code>$($tail)*</code> contains only <em>one</em> token tree that can be matched to <code>for $i:ident in $iter:expr</code>. In that case, the base case <code>@loop</code> rule is called, generating the innermost loop which pushes the expression onto the <code>Vec</code>.</p>\n\n<p>This macro should work for an arbitrary number of <code>for $i in $iter</code> expressions as long as it stays within the macro recursion limit. If you do find yourself up against the recursion limit, the number of recursive invocations can be reduced by processing <em>two</em> <code>for $i:ident in $iter:expr</code> expressions at once in the recursive <code>@loop</code> rule.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4ff333720e99f78cb4bd2612046b6685&amp;version=stable\" rel=\"noreferrer\">Rust Playground</a></p>\n"}], "owner": {"reputation": 987, "user_id": 3078304, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/bAVgP.jpg?s=128&g=1", "display_name": "mattgathu", "link": "https://stackoverflow.com/users/3078304/mattgathu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1990, "favorite_count": 0, "accepted_answer_id": 48860435, "answer_count": 1, "score": 4, "last_activity_date": 1519020883, "creation_date": 1518989263, "last_edit_date": 1518989540, "question_id": 48856777, "link": "https://stackoverflow.com/questions/48856777/simplifying-rust-macro-rules-for-nested-looping", "title": "Simplifying Rust macro rules for nested looping", "body": "<p>I have a simple macro with three very similar rules:</p>\n\n<pre><code>macro_rules! c {\n\n($exp:expr, for $i:ident in $iter:expr) =&gt; (\n    {\n        let mut r = vec![];\n        for $i in $iter {\n            r.push($exp);\n        }\n        r\n    }\n);\n\n($exp:expr, for $i:ident in $iter:expr, for $i2:ident in $iter2:expr) =&gt; (\n    {\n        let mut r = vec![];\n        for $i2 in $iter2 {\n            for $i in $iter {\n                r.push($exp);\n            }\n        }\n        r\n    }\n);\n\n($exp:expr, for $i:ident in $iter:expr, for $i2:ident in $iter2:expr, for $i3:ident in $iter3:expr) =&gt; (\n    {\n        let mut r = vec![];\n        for $i in $iter {\n            for $i2 in $iter2 {\n                for $i3 in $iter3 {\n                    r.push($exp);\n                }\n            }\n        }\n        r\n    }\n);\n\n}\n</code></pre>\n\n<p>Each rule differs from the others by the number of <code>for $i:ident in $iter:exp</code> patterns being matched. The logic is similarly the same.</p>\n\n<p>Is there a way to simplify these rules into one using repetition patterns such as <code>$(...)*</code> or <code>$(...)+</code> and still be able to express the nested looping in the macro logic?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=35269df7238544214582f713d3b85ede&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}, {"tags": ["generics", "rust", "operator-overloading", "traits"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1518986213, "post_id": 48855862, "comment_id": 84716026, "body": "Note that you can implement <code>impl&lt;T: Copy + Mul&lt;Output = T&gt;&gt; Mul&lt;T&gt; for Vec2&lt;T&gt;</code> as a workaround."}, {"owner": {"reputation": 7915, "user_id": 1563039, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xmppU.png?s=128&g=1", "display_name": "Joseph Thomson", "link": "https://stackoverflow.com/users/1563039/joseph-thomson"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1518986451, "post_id": 48855862, "comment_id": 84716098, "body": "@Boiethios Yep, I&#39;ve already implemented that. Just can&#39;t figure out how to do it the other way around."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1518986928, "post_id": 48855862, "comment_id": 84716270, "body": "I think that this is not possible. Look at what they did <a href=\"https://docs.rs/cgmath/0.16.0/cgmath/struct.Vector2.html\" rel=\"nofollow noreferrer\">at cgmath</a>. They implemented it in one way only (as you did). I find this interdiction strange since you can do that for every type you do not own: <code>impl Mul&lt;Vec2&lt;f32&gt;&gt; for f32</code> works."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1518987846, "post_id": 48855862, "comment_id": 84716606, "body": "I don&#39;t think that is currently possible, as the orphan rule in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\" rel=\"nofollow noreferrer\">RFC1023</a> forbids it. It would be nice of there were some workaround, for example Python has <code>__rmul__</code> for this purpose."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518989039, "post_id": 48855862, "comment_id": 84716988, "body": "By saying <code>for T</code>, you are attempting to <a href=\"https://stackoverflow.com/q/25413201/155423\">implement a trait you don&#39;t own for a type you don&#39;t own</a>. If <b>another</b> crate uses your <code>Vec2</code> <b>and</b> implements <code>Mul</code> for its own type, you&#39;d have massive conflicts. This is not allowed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518989122, "post_id": 48855862, "comment_id": 84717009, "body": "See also <a href=\"https://stackoverflow.com/q/45507028/155423\">How do I overload an operator for all types that implement my trait?</a>."}, {"owner": {"reputation": 7915, "user_id": 1563039, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xmppU.png?s=128&g=1", "display_name": "Joseph Thomson", "link": "https://stackoverflow.com/users/1563039/joseph-thomson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518990105, "post_id": 48855862, "comment_id": 84717300, "body": "@Shepmaster I wasn&#39;t asking why I get that error message. I was asking how to overload an operator where the right-hand operand is of my type. I included the example to show that I had already tried to solve my problem before asking. If it isn&#39;t currently possible, then there should be a direct answer to my question stating as much. This is not a duplicate question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518990565, "post_id": 48855862, "comment_id": 84717443, "body": "Ok, then I&#39;ve updated the first duplicate to <a href=\"https://stackoverflow.com/q/25413201/155423\">How do I implement a trait I don&#39;t own (<code>Mul</code>) for a type I don&#39;t own (<code>T</code>)?</a>. On Stack Overflow, the focus is not on that the <i>questions</i> are duplicates, it&#39;s on that the answers are duplicates."}], "owner": {"reputation": 7915, "user_id": 1563039, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xmppU.png?s=128&g=1", "display_name": "Joseph Thomson", "link": "https://stackoverflow.com/users/1563039/joseph-thomson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 432, "favorite_count": 0, "closed_date": 1518988937, "answer_count": 0, "score": 8, "last_activity_date": 1519042532, "creation_date": 1518983236, "last_edit_date": 1519042532, "question_id": 48855862, "link": "https://stackoverflow.com/questions/48855862/how-to-overload-an-operator-for-a-generic-right-hand-operand", "closed_reason": "Duplicate", "title": "How to overload an operator for a generic right-hand operand?", "body": "<p>I have a generic type, <code>Vec2&lt;T&gt;</code>, for which I would like to implement the following operation:</p>\n\n<p><code>Vec2&lt;T&gt; = T * Vec2&lt;T&gt;</code></p>\n\n<p>I have tried this:</p>\n\n<pre><code>impl&lt;T: Copy + Mul&lt;Output = T&gt;&gt; Mul&lt;Vec2&lt;T&gt;&gt; for T {\n    type Output = Vec2&lt;T&gt;;\n\n    fn mul(self, rhs: Vec2&lt;T&gt;) -&gt; Vec2&lt;T&gt; {\n        Vec2 {\n            x: self * rhs.x,\n            y: self * rhs.y,\n        }\n    }\n}\n</code></pre>\n\n<p>But I get this error:</p>\n\n<blockquote>\n  <p>type parameter <code>T</code> must be used as the type parameter for some local\n  type (e.g. <code>MyStruct&lt;T&gt;</code>); only traits defined in the current crate\n  can be implemented for a type parameter</p>\n</blockquote>\n\n<p>What is the standard way to overload an operator with your own type as the right-hand operand?</p>\n\n<p>[EDIT]</p>\n\n<p>Apparently the answer is that you can't currently do this. There are some answers to related questions in the \"duplicates\". I await an update to the language so that this question can be reopened, and an actual answer can be given.</p>\n"}, {"tags": ["sockets", "tcp", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1518966996, "last_edit_date": 1518966996, "creation_date": 1518965726, "answer_id": 48853005, "question_id": 48852831, "link": "https://stackoverflow.com/questions/48852831/how-do-you-read-data-from-a-socket-into-an-offset-of-an-existing-buffer/48853005#48853005", "title": "How do you read data from a socket into an offset of an existing buffer?", "body": "<blockquote>\n  <p>The fact that I can't find any offset parameter leads me to believe that I am missing something important </p>\n</blockquote>\n\n<p>Yes, but it has nothing to do with sockets specifically. Rust has <em>slices</em>, a more general solution. To get a subset of your buffer, take a slice starting at the desired offset. The data will be read into the beginning of the slice which is the same as the offset of the original buffer:</p>\n\n<pre><code>socket.read(&amp;mut buffer[offset..])\n</code></pre>\n\n<p>When you are done reading, you can take a slice to prevent looking at non-useful trailing data in the buffer:</p>\n\n<pre><code>let my_data = &amp;buffer[..total_read_bytes];\n// do something with my_data\n</code></pre>\n\n<p>A complete example:</p>\n\n<pre><code>use std::io::prelude::*;\n\nconst MAX_LEN: usize = 64;\n\nfn main() {\n    let dummy_data = b\"this is a very long bit of data\";\n    let mut dummy_data = &amp;dummy_data[..];\n\n    let mut buffer = [0; MAX_LEN];\n\n    let mut offset = 0;\n    offset += dummy_data\n        .by_ref()\n        .take(4)\n        .read(&amp;mut buffer[offset..])\n        .unwrap();\n    offset += dummy_data\n        .by_ref()\n        .take(4)\n        .read(&amp;mut buffer[offset..])\n        .unwrap();\n\n    let final_data = &amp;buffer[..offset];\n\n    let s = std::str::from_utf8(final_data);\n    println!(\"{:?}\", s);\n    assert_eq!(s, Ok(\"this is \"));\n}\n</code></pre>\n\n<hr>\n\n<p>You may also be interested in <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\" rel=\"nofollow noreferrer\"><code>Read::read_exact</code></a>:</p>\n\n<blockquote>\n  <p>This function reads as many bytes as necessary to completely fill the specified buffer <code>buf</code>.</p>\n</blockquote>\n"}], "owner": {"reputation": 461, "user_id": 2715982, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1303a32ea5bdfdeb1e32200f7d9c1d2b?s=128&d=identicon&r=PG", "display_name": "Dooskington", "link": "https://stackoverflow.com/users/2715982/dooskington"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 653, "favorite_count": 0, "accepted_answer_id": 48853005, "answer_count": 1, "score": 1, "last_activity_date": 1518966996, "creation_date": 1518964646, "last_edit_date": 1518965789, "question_id": 48852831, "link": "https://stackoverflow.com/questions/48852831/how-do-you-read-data-from-a-socket-into-an-offset-of-an-existing-buffer", "title": "How do you read data from a socket into an offset of an existing buffer?", "body": "<p>As per my understanding of TCP, if I send X bytes to a socket, it is pretty much guaranteed that it will get there, although it is possible that the payload may split and arrive in two separate parts (So if I am waiting for a 25 byte packet I may get 20 bytes, then an additional 5 on the next read). I have never seen this happen, but I want to be covered when it does.</p>\n\n<p>In the past I have usually designed my socket reads to account for this - reading incoming bytes into a buffer, and then continuously checking the size of the buffer. If there is enough data for an entire packet, handle that packet, remove the bytes from the front of the buffer, and continue.</p>\n\n<p>I am now trying to program a similar system in Rust, using <code>mio</code> for TCP sockets. My buffer is just an array: <code>[u8; MAX_BUFFER_SIZE]</code> and here's my socket read code:</p>\n\n<pre><code>loop {\n    // Read until there are no more incoming bytes\n    match socket.read(&amp;mut buffer) {\n        Ok(0) =&gt; {\n            // Socket is closed, Client has disconnected!\n            // (perform disconnection here)\n            break;\n        },\n        Ok(read_bytes) =&gt; {\n            println!(\"Read {} bytes from client\", read_bytes);\n        },\n        Err(e) =&gt; {\n            if e.kind() == io::ErrorKind::WouldBlock {\n                // Socket is not ready anymore, stop reading\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This does not support reading any split data, because the <code>read</code> function just overwrites the data at the beginning of the buffer, instead of appending each subsequent call to the end. In C# and C++ there is an offset parameter you can supply to the equivalent call to allow this behavior, but I cannot figure out how to do that with <code>mio</code>. The fact that I can't find any offset parameter leads me to believe that I am missing something important in my understanding of the <code>read</code> function.</p>\n\n<p>How would I program socket reading that accounts for this?</p>\n"}, {"tags": ["loops", "vector", "functional-programming", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 13, "user_id": 9376973, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b0ebc7c6a3830b7ab5a2dba88354a04f?s=128&d=identicon&r=PG&f=1", "display_name": "Yee", "link": "https://stackoverflow.com/users/9376973/yee"}, "edited": false, "score": 0, "creation_date": 1518967406, "post_id": 48852582, "comment_id": 84709929, "body": "@Yee You&#39;re welcome. Don&#39;t hesitate to read the whole documentation of iterator (and slice), you&#39;ll see a ton of usefull methods ;)"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 6, "last_activity_date": 1537346370, "last_edit_date": 1537346370, "creation_date": 1518962979, "answer_id": 48852582, "question_id": 48852454, "link": "https://stackoverflow.com/questions/48852454/how-can-i-iterate-over-a-2d-vector-in-functional-style/48852582#48852582", "title": "How can I iterate over a 2D vector in functional style?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flatten\" rel=\"nofollow noreferrer\"><code>flatten</code></a>:</p>\n\n<pre><code>fn main() {\n    let v = vec![vec![1, 2], vec![3, 4], vec![5, 6]];\n\n    for i in v.iter().flatten() {\n        println!(\"{}\", i); // 1 2 3 4 5 6\n    }\n}\n</code></pre>\n\n<p><code>flatten</code> transforms nested iterators into one iterator.</p>\n"}], "owner": {"reputation": 13, "user_id": 9376973, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b0ebc7c6a3830b7ab5a2dba88354a04f?s=128&d=identicon&r=PG&f=1", "display_name": "Yee", "link": "https://stackoverflow.com/users/9376973/yee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1349, "favorite_count": 0, "accepted_answer_id": 48852582, "answer_count": 1, "score": 1, "last_activity_date": 1537346370, "creation_date": 1518962169, "last_edit_date": 1518964487, "question_id": 48852454, "link": "https://stackoverflow.com/questions/48852454/how-can-i-iterate-over-a-2d-vector-in-functional-style", "title": "How can I iterate over a 2D vector in functional style?", "body": "<p>The following doesn't work, unfortunately:</p>\n\n<pre><code>let vecs: Vec&lt;Vec&lt;i32&gt;&gt; = get_vectors();\n\nlet result = vecs\n    .iter()\n    .iter()\n    .do_something()\n    .do_something_else() // etc\n</code></pre>\n\n<p>Compiles with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `iter` found for type`std::slice::Iter&lt;'_, std::vec::Vec&lt;i32&gt;&gt;` in the current scope\n  --&gt; src/main.rs:49:10\n   |\n49 |         .iter()\n   | \n</code></pre>\n\n<p>I can avoid it with</p>\n\n<pre><code>for row in vecs.iter() {\n    for column in row.iter() {\n        // do something\n    }\n}\n</code></pre>\n\n<p>I'd really prefer the <code>.iter()</code> method. How could I achieve that?</p>\n"}, {"tags": ["rust", "clippy"], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 6, "last_activity_date": 1518958307, "creation_date": 1518958307, "answer_id": 48851876, "question_id": 48851650, "link": "https://stackoverflow.com/questions/48851650/how-to-pass-a-arc-with-a-trait-as-a-reference/48851876#48851876", "title": "How to pass a Arc with a trait as a reference?", "body": "<p>You can pass a reference to an <code>Arc</code>'s content instead.</p>\n\n<pre><code>fn ss(a: &amp;A) {\n    a.send();\n}\n\nfn main() {\n    let a = Arc::new(B);\n    ss(&amp;*a);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518977502, "post_id": 48852158, "comment_id": 84713296, "body": "I&#39;d add to that next-to-last paragraph -- if <code>ss</code> <i>always</i> needs to clone the <code>Arc</code>, it should probably just take <code>Arc&lt;A&gt;</code> by value and let the caller decide whether a clone is necessary or not."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1518960137, "creation_date": 1518960137, "answer_id": 48852158, "question_id": 48851650, "link": "https://stackoverflow.com/questions/48851650/how-to-pass-a-arc-with-a-trait-as-a-reference/48852158#48852158", "title": "How to pass a Arc with a trait as a reference?", "body": "<p>Well, the simplest fix is to <em>just ignore Clippy</em>.  Many of the lints in Clippy aren't in the base compiler specifically because they can be wrong or inapplicable.  Besides which, an <code>Arc</code> is already a kind of reference, and taking an <code>&amp;Arc&lt;_&gt;</code> (or <code>&amp;Rc&lt;_&gt;</code>) rarely makes much sense.</p>\n\n<p>Secondly, as red75prime noted, you can change the function to take <code>&amp;A</code> instead.</p>\n\n<p>Finally, if you really want to appease Clippy, you could just do what it says:</p>\n\n<pre><code>fn main() {\n    let a = Arc::new(B);\n    { let a: Arc&lt;A&gt; = a.clone(); ss(&amp;a); }\n}\n</code></pre>\n\n<p>The reason you have to do it this way is that you can only coerce the \"outermost\" layer of indirection.  The <code>let</code> coerces the <code>Arc&lt;B&gt;</code> into an <code>Arc&lt;A&gt;</code>, then creates a pointer to it.</p>\n\n<p>If there's some reason <code>ss</code> <em>needs</em> its argument to be an <code>Arc</code> (such as cloning it), just ignore Clippy or disable that lint.  If there's no reason <code>ss</code> <em>needs</em> its argument to be an <code>Arc</code> (you just need what's inside it), change <code>ss</code> to take <code>&amp;A</code> instead.</p>\n\n<p>That last one is mostly just for completeness.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1273, "favorite_count": 0, "accepted_answer_id": 48852158, "answer_count": 2, "score": 0, "last_activity_date": 1518964660, "creation_date": 1518956776, "last_edit_date": 1518964660, "question_id": 48851650, "link": "https://stackoverflow.com/questions/48851650/how-to-pass-a-arc-with-a-trait-as-a-reference", "title": "How to pass a Arc with a trait as a reference?", "body": "<p>How can I pass a reference to <code>Arc&lt;A&gt;</code> so that the following code compiles successfully?</p>\n\n<pre><code>use std::sync::Arc;\n\ntrait A {\n    fn send(&amp;self);\n}\n\nstruct B;\nimpl A for B {\n    fn send(&amp;self) {\n        println!(\"SENT\");\n    }\n}\n\nfn ss(a: &amp;Arc&lt;A&gt;) {\n    let aa = a.clone();\n    aa.send();\n}\n\nfn main() {\n    let a = Arc::new(B);\n    ss(&amp;a);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=66edb1a002ecfbad5ef8ab9ad89708c1&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>If I omit the reference, it compiles okay, but Clippy warns me that in such situation in makes no sense.</p>\n\n<p>Clippy error on the <a href=\"https://play.rust-lang.org/?gist=d6afa260fbc924c1c1583e3fb8f233d0&amp;version=stable\" rel=\"nofollow noreferrer\">code without reference</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  Compiling playground v0.0.1 (file:///playground)\nwarning: this argument is passed by value, but not consumed in the function body\n  --&gt; src/main.rs:13:10\n   |\n13 | fn ss(a: Arc&lt;A&gt;) {\n   |          ^^^^^^ help: consider taking a reference instead: `&amp;Arc&lt;A&gt;`\n   |\n   = note: #[warn(needless_pass_by_value)] on by default\n   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.186/index.html#needless_pass_by_value\n</code></pre>\n"}, {"tags": ["rust", "closures", "lifetime"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1518959171, "post_id": 48850807, "comment_id": 84707302, "body": "Useful question <a href=\"https://stackoverflow.com/q/32300132/2731452\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1518962160, "post_id": 48850807, "comment_id": 84708208, "body": "This question could be helpful too: <a href=\"https://stackoverflow.com/q/34747464/2731452\">Implement graph-like datastructure in Rust</a>"}, {"owner": {"reputation": 31, "user_id": 6995777, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-9UGpZ29Cvzw/AAAAAAAAAAI/AAAAAAAAAVg/hsGOVRyw60M/photo.jpg?sz=128", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0421\u0443\u043b\u043e\u0445\u0438\u043d", "link": "https://stackoverflow.com/users/6995777/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a1%d1%83%d0%bb%d0%be%d1%85%d0%b8%d0%bd"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1518963631, "post_id": 48850807, "comment_id": 84708719, "body": "@red75prime Second link is very helpful, thank you for help"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518970999, "post_id": 48850807, "comment_id": 84711107, "body": "This was <a href=\"https://users.rust-lang.org/t/rust-lifetime-in-closure-environment/15717?u=shepmaster\" rel=\"nofollow noreferrer\">cross-posted to the Rust user&#39;s forum</a>."}], "answers": [{"comments": [{"owner": {"reputation": 305, "user_id": 2378484, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/cb2904a2cd257d7fb1e2d08be3fcd742?s=128&d=identicon&r=PG", "display_name": "zsf222", "link": "https://stackoverflow.com/users/2378484/zsf222"}, "edited": false, "score": 0, "creation_date": 1614749158, "post_id": 48889236, "comment_id": 117476882, "body": "This is interesting: why the element type of Vec could change the borrow behavior of the Vec itself?"}], "tags": [], "owner": {"reputation": 31, "user_id": 6995777, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-9UGpZ29Cvzw/AAAAAAAAAAI/AAAAAAAAAVg/hsGOVRyw60M/photo.jpg?sz=128", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0421\u0443\u043b\u043e\u0445\u0438\u043d", "link": "https://stackoverflow.com/users/6995777/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a1%d1%83%d0%bb%d0%be%d1%85%d0%b8%d0%bd"}, "is_accepted": true, "score": 0, "last_activity_date": 1519142116, "creation_date": 1519142116, "answer_id": 48889236, "question_id": 48850807, "link": "https://stackoverflow.com/questions/48850807/rust-lifetime-in-closure-environment/48889236#48889236", "title": "Rust lifetime in closure environment", "body": "<p>After some research, I found this article's: <a href=\"https://doc.rust-lang.org/book/second-edition/ch15-00-smart-pointers.html\" rel=\"nofollow noreferrer\">Rust doc. Smart pointers</a>, <a href=\"https://users.rust-lang.org/t/basic-question-about-closures-move-vec-t/10951/8\" rel=\"nofollow noreferrer\">Users Rust Lang</a>, and I understood my mistakes.\nThe first one: I remove lifetime parameters from structs definitions.</p>\n\n<pre><code>use std::rc::Rc;\n#[derive(Debug)]\npub struct Graph {\n    pub nodes: Vec&lt;Rc&lt;Node&gt;&gt;,\n    pub edges: Vec&lt;Edge&gt;\n}\n#[derive(Debug)]\npub struct Node {\n    pub id: String,\n    pub label: String\n}\n#[derive(Debug)]\npub struct Edge {\n    pub source: Rc&lt;Node&gt;,\n    pub target: Rc&lt;Node&gt;\n}\n</code></pre>\n\n<p>Second thing: I rewrote the code of <code>from_json</code> function for using <code>Rc&lt;T&gt;</code> instead of raw references. </p>\n\n<pre><code>impl Graph {\n    pub fn from_json(json: &amp; String) -&gt; Graph {\n        if let json::JsonValue::Object(deserialized) = json::parse(json.as_ref()).unwrap() {\n            let nodes : Vec&lt;Rc&lt;Node&gt;&gt; = deserialized.get(\"nodes\").unwrap().members()\n                .map(|v| {\n                    if let json::JsonValue::Object(ref val) = *v {\n                        return Rc::new(Node {\n                            id: val.get(\"id\").unwrap().to_string(),\n                            label: val.get(\"label\").unwrap().to_string()\n                        });\n                    }\n                    panic!(\"Invalid structure of json graph body.\")\n            }).collect::&lt;Vec&lt;Rc&lt;Node&gt;&gt;&gt;();\n            let edges : Vec&lt;Edge&gt; = deserialized.get(\"edges\").unwrap().members()\n                .map(|v| {\n                    if let json::JsonValue::Object(ref val) = *v {\n                        let source = nodes.iter().find(|&amp;v| v.id ==  val.get(\"source\").unwrap().to_string()).unwrap();\n                        let target = nodes.iter().find(|&amp;v| v.id ==  val.get(\"target\").unwrap().to_string()).unwrap();\n                        return Edge {\n                            source: Rc::clone(&amp;source),\n                            target: Rc::clone(&amp;target)\n                        };\n                    }\n                    panic!(\"Invalid structure of json graph body.\")\n                }).collect::&lt;Vec&lt;Edge&gt;&gt;();\n            return Graph {\n                nodes,\n                edges\n            }\n        }\n        panic!(\"Incorrect struct of json contains!\");\n    }\n}\n</code></pre>\n\n<p>Now it works. Thanks for sharing useful links. I found a lot of helpful information about building graph structs in <code>Rust</code> such as: <a href=\"https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/\" rel=\"nofollow noreferrer\">Graph structure in Rust</a></p>\n"}], "owner": {"reputation": 31, "user_id": 6995777, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-9UGpZ29Cvzw/AAAAAAAAAAI/AAAAAAAAAVg/hsGOVRyw60M/photo.jpg?sz=128", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0421\u0443\u043b\u043e\u0445\u0438\u043d", "link": "https://stackoverflow.com/users/6995777/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a1%d1%83%d0%bb%d0%be%d1%85%d0%b8%d0%bd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 532, "favorite_count": 0, "accepted_answer_id": 48889236, "answer_count": 1, "score": 2, "last_activity_date": 1519142116, "creation_date": 1518950944, "last_edit_date": 1518964368, "question_id": 48850807, "link": "https://stackoverflow.com/questions/48850807/rust-lifetime-in-closure-environment", "title": "Rust lifetime in closure environment", "body": "<p>I want to implement a graph structure in Rust. For this goal, I wrote simple abstractions:</p>\n\n<pre><code>pub struct Graph&lt;'a&gt; {\n    pub nodes: Vec&lt;Node&gt;,\n    pub edges: Vec&lt;Edge&lt;'a&gt;&gt;,\n}\n\n#[derive(Debug)]\npub struct Node {\n    pub id: String,\n    pub label: String,\n}\n\npub struct Edge&lt;'a&gt; {\n    pub source: &amp;'a Node,\n    pub target: &amp;'a Node,\n}\n</code></pre>\n\n<p><code>Graph</code> contains vectors of <code>Nodes</code> and <code>Edges</code>. Every <code>Edge</code> has a ref to a <code>Node</code> in the same <code>Graph</code>. </p>\n\n<p>I don't know it's a possible write something like this.</p>\n\n<p>I tried to write a static method that builds a new <code>Graph</code> instance from a JSON representation:</p>\n\n<pre><code>impl&lt;'a&gt; Graph&lt;'a&gt; {\n    pub fn from_json(json: &amp;String) -&gt; Graph {\n        if let json::JsonValue::Object(deserialized) = json::parse(json.as_ref()).unwrap() {\n            let nodes: Vec&lt;Node&gt; = deserialized\n                .get(\"nodes\")\n                .unwrap()\n                .members()\n                .map(|v| {\n                    if let json::JsonValue::Object(ref val) = *v {\n                        return Node {\n                            id: val.get(\"id\").unwrap().to_string(),\n                            label: val.get(\"label\").unwrap().to_string(),\n                        };\n                    }\n                    panic!(\"Invalid structure of json graph body.\")\n                })\n                .collect::&lt;Vec&lt;Node&gt;&gt;();\n            let edges: Vec&lt;Edge&gt; = deserialized\n                .get(\"edges\")\n                .unwrap()\n                .members()\n                .map(|v| {\n                    if let json::JsonValue::Object(ref val) = *v {\n                        let source = (*nodes)\n                            .iter()\n                            .find(|&amp;v| v.id == val.get(\"source\").unwrap().to_string())\n                            .unwrap();\n                        let target = (*nodes)\n                            .iter()\n                            .find(|&amp;v| v.id == val.get(\"target\").unwrap().to_string())\n                            .unwrap();\n                        return Edge { source, target };\n                    }\n                    panic!(\"Invalid structure of json graph body.\")\n                })\n                .collect::&lt;Vec&lt;Edge&gt;&gt;();\n            return Graph { nodes, edges };\n        }\n        panic!(\"Incorrect struct of json contains!\");\n    }\n}\n</code></pre>\n\n<p>When I compile, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0373]: closure may outlive the current function, but it borrows `nodes`, which is owned by the current function\n  --&gt; src/graph.rs:30:22\n   |\n30 |                 .map(|v| {\n   |                      ^^^ may outlive borrowed value `nodes`\n31 |                     if let json::JsonValue::Object(ref val) = *v {\n32 |                         let source = (*nodes).iter().find(|&amp;v| v.id ==  val.get(\"source\").unwrap().to_string()).unwrap();\n   |                                        ----- `nodes` is borrowed here\n   |\nhelp: to force the closure to take ownership of `nodes` (and any other referenced variables), use the `move` keyword\n   |\n30 |                 .map(move |v| {\n   |                      ^^^^^^^^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>A possible solution to this problem is to add <code>move</code> before the closure parameters, but I need the <code>nodes</code> vector to build the <code>Graph</code> instance.</p>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["logging", "rust", "timestamp", "format"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518968769, "post_id": 48851456, "comment_id": 84710364, "body": "I wonder if the precision format modifiers (<code>format!(&quot;{:.3}&quot;, time)</code>) could be used to opt into more precision in this case, or if that&#39;s too strange..."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 3, "last_activity_date": 1518968676, "last_edit_date": 1518968676, "creation_date": 1518955552, "answer_id": 48851456, "question_id": 48850403, "link": "https://stackoverflow.com/questions/48850403/change-timestamp-format-used-by-env-logger/48851456#48851456", "title": "Change timestamp format used by env_logger", "body": "<p>This is not currently possible\u00b9.</p>\n\n<p>While it is possible to use <a href=\"https://docs.rs/env_logger/0.5.3/env_logger/fmt/struct.Formatter.html\" rel=\"nofollow noreferrer\"><code>Formatter</code></a> to change the format of the logged message, this formatter gives you the timestamp of the log message as a <a href=\"https://docs.rs/env_logger/0.5.3/env_logger/fmt/struct.Timestamp.html\" rel=\"nofollow noreferrer\"><code>Timestamp</code></a>. <code>Timestamp</code> only implements <code>Debug</code> and <code>Display</code>, with no extra methods. The documentation mentions no way to configure the way the date is displayed. It only mentions that the the class represents \"An <a href=\"https://www.ietf.org/rfc/rfc3339.txt\" rel=\"nofollow noreferrer\">RFC3339</a> formatted timestamp\". This RFC defines the way to display a date. The format you want is not compatible with the RFC (most importantly, it's missing the timezone, please, <em>do not ever log datetimes without a timezone</em>, please).</p>\n\n<p>The RFC does allow for more precision that what the crate currently uses. This feature was removed in a recent pull request titled <a href=\"https://github.com/sebasmagri/env_logger/issues/36\" rel=\"nofollow noreferrer\">\"Make the timestamp format more compact\"</a>. In my opinion having more precision is sometimes useful and you could open an issue to ask for the <code>Timestamp</code> to allow that option. The RFC also does not allow the <code>T</code> between the date and the time to be omitted.</p>\n\n<p>Looking at the implementation of the two traits (<a href=\"https://docs.rs/env_logger/0.5.3/src/env_logger/fmt.rs.html#506-519\" rel=\"nofollow noreferrer\"><code>Debug</code></a> and <a href=\"https://docs.rs/env_logger/0.5.3/src/env_logger/fmt.rs.html#573-597\" rel=\"nofollow noreferrer\"><code>Display</code></a>) shows that the representation is indeed fixed.</p>\n\n<hr>\n\n<p>1: Well, you could just ignore the date from <code>env_logger</code>, and get your own if you really wanted to. I'm not sure how bad that would be.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1598374321, "post_id": 63582968, "comment_id": 112436128, "body": "This seems like it&#39;s already covered by the other answer: <i>Well, you could just ignore the date from env_logger, and get your own if you really wanted to</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1598374352, "post_id": 63582968, "comment_id": 112436149, "body": "<i>Tested on stable channel 1.45.2</i> \u2014 this isn&#39;t the important piece of information. What would be more useful is what version of <code>env_logger</code> you are using."}], "tags": [], "owner": {"reputation": 581, "user_id": 3550735, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c846e896692faeefb33db83af736fc6e?s=128&d=identicon&r=PG&f=1", "display_name": "Nima", "link": "https://stackoverflow.com/users/3550735/nima"}, "is_accepted": false, "score": 0, "last_activity_date": 1598374390, "last_edit_date": 1598374390, "creation_date": 1598371881, "answer_id": 63582968, "question_id": 48850403, "link": "https://stackoverflow.com/questions/48850403/change-timestamp-format-used-by-env-logger/63582968#63582968", "title": "Change timestamp format used by env_logger", "body": "<p>This is possible in Rust 1.45.2:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use chrono::Local;\nuse env_logger::Builder;\nuse log::LevelFilter;\nuse std::io::Write;\n\nfn main() {\n    Builder::new()\n        .format(|buf, record| {\n            writeln!(\n                buf,\n                &quot;{} {}: {}&quot;,\n                record.level(),\n                //Format like you want to: &lt;-----------------\n                Local::now().format(&quot;%Y-%m-%d %H:%M:%S%.3f&quot;),\n                record.args()\n            )\n        })\n        .filter(None, LevelFilter::Info)\n        .init();\n\n    log::warn!(&quot;warn&quot;);\n    log::info!(&quot;info&quot;);\n    log::debug!(&quot;debug&quot;);\n}\n</code></pre>\n<p>More information: <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/development_tools/debugging/config_log.html#include-timestamp-in-log-messages\" rel=\"nofollow noreferrer\">Include timestamp in log messages</a></p>\n"}], "owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 533, "favorite_count": 0, "accepted_answer_id": 48851456, "answer_count": 2, "score": 1, "last_activity_date": 1598374390, "creation_date": 1518947855, "last_edit_date": 1518968524, "question_id": 48850403, "link": "https://stackoverflow.com/questions/48850403/change-timestamp-format-used-by-env-logger", "title": "Change timestamp format used by env_logger", "body": "<p>The following minimal example</p>\n\n<pre><code>#[macro_use]\nextern crate log;\nextern crate env_logger;\n\nfn main() {\n    std::env::set_var(\"MY_LOG_LEVEL\", \"info\");\n    env_logger::init_from_env(\"MY_LOG_LEVEL\");\n    info!(\"hi\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3ca25a6aa9b279abef5c8de477c9b2e7&amp;version=stable\" rel=\"nofollow noreferrer\">outputs</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>INFO 2018-02-18T09:59:20Z: playground: hi\n</code></pre>\n\n<p>I would like to use a different format (<code>\"%Y-%m-%d %H:%M:%S%.3f\"</code>):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>INFO 2018-02-18 09:59:20.123: playground: hi\n</code></pre>\n\n<p>How can I achieve this?</p>\n"}, {"tags": ["rust", "synchronization", "thread-safety", "lazy-initialization"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1518946084, "post_id": 48848612, "comment_id": 84703874, "body": "Try <code>Lazy&lt;RwLock&lt;T&gt;&gt;</code>."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1519027460, "last_edit_date": 1519027460, "creation_date": 1518955094, "answer_id": 48851383, "question_id": 48848612, "link": "https://stackoverflow.com/questions/48848612/whats-the-right-way-to-have-a-thread-safe-lazy-initialized-possibly-mutable-val/48851383#48851383", "title": "What&#39;s the right way to have a thread-safe lazy-initialized possibly mutable value in Rust?", "body": "<p>The simplest solution is <code>RwLock&lt;Option&lt;T&gt;&gt;</code>.</p>\n\n<blockquote>\n  <p>However, I'm not quite sure what to do with both in place. <code>RwLock</code> seems relevant, but it appears that there is considerable trickiness to thread-safe lazy initialization given what I've seen of <code>lazy-init</code>'s source, so I am hesitant to roll my own solution based on it.</p>\n</blockquote>\n\n<p><code>lazy-init</code> uses tricky code because it guarantees lock-free access after creation. Lock-free is always a bit trickier.</p>\n\n<p>Note that in Rust it's easy to tell whether something is tricky or not: tricky means using an <code>unsafe</code> block. Since you can use <code>RwLock&lt;Option&lt;T&gt;&gt;</code> without any unsafe block there is nothing for you to worry about.</p>\n\n<hr>\n\n<p>A variant to <code>RwLock&lt;Option&lt;T&gt;&gt;</code> may be necessary if you want to capture a closure for initialization <em>once</em>, rather than have to pass it at each potential initialization call-site.</p>\n\n<p>In this case, you'll need something like <code>RwLock&lt;SimpleLazy&lt;T&gt;&gt;</code> where:</p>\n\n<pre><code>enum SimpleLazy&lt;T&gt; {\n    Initialized(T),\n    Uninitialized(Box&lt;FnOnce() -&gt; T&gt;),\n}\n</code></pre>\n\n<p>You don't have to worry about making <code>SimpleLazy&lt;T&gt;</code> <code>Sync</code> as <code>RwLock</code> will take care of that for you.</p>\n"}], "owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 822, "favorite_count": 0, "accepted_answer_id": 48851383, "answer_count": 1, "score": 2, "last_activity_date": 1519027460, "creation_date": 1518930058, "question_id": 48848612, "link": "https://stackoverflow.com/questions/48848612/whats-the-right-way-to-have-a-thread-safe-lazy-initialized-possibly-mutable-val", "title": "What&#39;s the right way to have a thread-safe lazy-initialized possibly mutable value in Rust?", "body": "<p>I have a struct that contains a field that is rather expensive to initialize, so I want to be able to do so lazily. However, this may be necessary in a method that takes <code>&amp;self</code>. The field also needs to be able to modified once it is initialized, but this will only occur in methods that take <code>&amp;mut self</code>. </p>\n\n<p>What is the correct (as in idiomatic, as well as in thread-safe) way to do this in Rust? It seems to me that it would be trivial with either of the two constraints:</p>\n\n<ul>\n<li>If it only needed to be lazily initialized, and not mutated, I could simply use <a href=\"https://github.com/khuey/lazy-init\" rel=\"nofollow noreferrer\"><code>lazy-init</code></a>'s <code>Lazy&lt;T&gt;</code> type.</li>\n<li>If it only needed to be mutable and not lazy, then I could just use a normal field (obviously).</li>\n</ul>\n\n<p>However, I'm not quite sure what to do with both in place. <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"nofollow noreferrer\"><code>RwLock</code></a> seems relevant, but it appears that there is considerable trickiness to thread-safe lazy initialization given what I've seen of <code>lazy-init</code>'s source, so I am hesitant to roll my own solution based on it.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518926589, "post_id": 48848248, "comment_id": 84700488, "body": "What <i>exactly</i> is the question you want to ask? It seems like you&#39;ve solved your problem. Note that you should be able to put your question as the title of your post \u2014 that&#39;s a good sign that your question is focused enough to be worth answering."}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518927353, "post_id": 48848248, "comment_id": 84700586, "body": "@Shepmaster The question is the last line &quot;The compiler couldn&#39;t infer it or am I thinking about things incorrectly?&quot;. I think I should not explicit to indicate the static key word if the Compile be smart enough when I start server out of main().  BTW, I  can&#39;t think out a simple title to match what i expressed."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518968293, "post_id": 48848248, "comment_id": 84710222, "body": "Then it&#39;s probably a duplicate of <a href=\"https://stackoverflow.com/q/31609137/155423\">Why are explicit lifetimes needed in Rust?</a>."}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519004109, "post_id": 48848248, "comment_id": 84720384, "body": "I know what <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">Lifetime Elision</a> said, so I add lifetime to function <code>web_startup</code>. But it also need an explicit static <code>MysqlDao</code>. this is what I confused.  @Shepmaster thanks for the title changed, but I think it deviate from the meaning."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519060066, "post_id": 48848248, "comment_id": 84745611, "body": "Please feel free to change the title back if it&#39;s not accurate. Sorry that I don&#39;t understand what you are asking."}], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1519115542, "post_id": 48880004, "comment_id": 84765628, "body": "Thanks <a href=\"https://stackoverflow.com/users/1901658/fredrick-brennan\">Fredrick</a>.  I think <code>MysqlDao</code> instance should be used only once (by <code>web_startup</code>) in <code>main()</code>,  there is no chance to be misused. If the compiler see the <code>web_startup</code> method need a <code>&#39;static</code> reference,  I think it can guarantee  the <code>MysqlDao</code> instance to be static."}, {"owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "reply_to_user": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1519131460, "post_id": 48880004, "comment_id": 84776224, "body": "@llxxbb No. Being <code>static</code> is not the same as not being <code>mut</code>. A <code>static mut</code> is possible. Being <code>static</code> only means it won&#39;t be dropped for the duration of the program execution. It&#39;s a guarantee that it won&#39;t be dropped, because it isn&#39;t dropped until the end of main, which represents the end of program execution. That&#39;s why your program knows that <code>dao</code> is static."}], "tags": [], "owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "is_accepted": true, "score": 1, "last_activity_date": 1519112222, "creation_date": 1519112222, "answer_id": 48880004, "question_id": 48848248, "link": "https://stackoverflow.com/questions/48848248/why-need-static-variable-delivery-between-method-but-need-not-in-same-one-method/48880004#48880004", "title": "Why need static variable delivery between method but need not in same one method?", "body": "<p>The reason the compiler cannot infer that the only time the <code>web_startup</code> function will be called it's called with a <code>'static</code> is because that's not guaranteed. What if the function were public and it was called by a third-party module? The compiler would have to tell the end-user to use a <code>'static</code> on a function that doesn't <em>seem to</em> require one. What if some time in the future <code>eval()</code> is added to Rust (e.g. for a REPL), so that even your private function could be called with unexpected function parameters?</p>\n\n<p>You're asking for an inference that should not happen.</p>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 48880004, "answer_count": 1, "score": 1, "last_activity_date": 1556680669, "creation_date": 1518925665, "last_edit_date": 1556680669, "question_id": 48848248, "link": "https://stackoverflow.com/questions/48848248/why-need-static-variable-delivery-between-method-but-need-not-in-same-one-method", "title": "Why need static variable delivery between method but need not in same one method?", "body": "<p>I want to start a Hyper server in a function with <code>port</code> and <code>dao</code> parameters provided by <code>main()</code>, but the function only works after I explicitly indicate the <code>'static</code> lifetime. This confused me a lot.</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\n\nuse futures::future::Future;\nuse hyper::header::ContentLength;\nuse hyper::server::{Http, Request, Response, Service};\nuse std::net::SocketAddr;\n\ntrait Dao {}\n\nstruct MysqlDao;\n\nimpl Dao for MysqlDao {}\n\nstruct HelloWorld&lt;'a&gt; {\n    dao: &amp;'a Dao,\n}\n\nconst PHRASE: &amp;'static str = \"Hello, World!\";\n\nimpl&lt;'a&gt; Service for HelloWorld&lt;'a&gt; {\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    type Future = Box&lt;Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, _req: Request) -&gt; Self::Future {\n        Box::new(futures::future::ok(\n            Response::new()\n                .with_header(ContentLength(PHRASE.len() as u64))\n                .with_body(PHRASE),\n        ))\n    }\n}\n\nfn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    let dao = MysqlDao;\n    let server = Http::new()\n        .bind(&amp;addr, move || Ok(HelloWorld { dao: &amp;dao }))\n        .unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p>The <code>Http::new().bind</code> API documententation said it needs a <code>NewService + 'static</code>, so I think the compiler would infer the <code>dao</code> variant is <code>'static</code>, but when I move the last three statements out of main, it can't infer!</p>\n\n<pre><code>fn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    let dao: MysqlDao = MysqlDao;\n    web_startup(&amp;addr, &amp;dao);\n}\n\nfn web_startup&lt;T: Dao&gt;(addr: &amp;SocketAddr, dao: &amp;T) {\n    let server = Http::new()\n        .bind(addr, move || Ok(HelloWorld { dao }))\n        .unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0477]: the type `[closure@src/main.rs:44:21: 44:51 dao:&amp;T]` does not fulfill the required lifetime\n  --&gt; src/main.rs:44:10\n   |\n44 |         .bind(addr, move || Ok(HelloWorld { dao }))\n   |          ^^^^\n   |\n   = note: type must satisfy the static lifetime\n</code></pre>\n\n<p>So I fixed it:</p>\n\n<pre><code>fn main() {\n    let addr = \"127.0.0.1:3000\".parse().unwrap();\n    static DAO: MysqlDao = MysqlDao;\n    web_startup(&amp;addr, &amp;DAO);\n}\n\nfn web_startup&lt;T: Dao&gt;(addr: &amp;SocketAddr, dao: &amp;'static T) {\n    let server = Http::new()\n        .bind(addr, move || Ok(HelloWorld { dao }))\n        .unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p>I don't understand why I should use the <code>static</code> keyword for <code>static DAO: MysqlDao = MysqlDao;</code> statement but need not before change the code. The compiler couldn't infer it or am I thinking about things incorrectly?</p>\n"}, {"tags": ["random", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518914275, "post_id": 48847207, "comment_id": 84698748, "body": "Can you expand on what you don&#39;t understand from <a href=\"https://doc.rust-lang.org/rand/rand/distributions/trait.IndependentSample.html\" rel=\"nofollow noreferrer\">the documentation</a>? <i>Samples that do not require keeping track of state. Since no state is recorded, each sample is (statistically) independent of all others, assuming the <code>Rng</code> used has this property.</i> Have you read <a href=\"https://en.wikipedia.org/wiki/Independence_(probability_theory)\" rel=\"nofollow noreferrer\">the Wikipedia page on &quot;independence&quot;</a>?"}], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 2, "last_activity_date": 1518914487, "last_edit_date": 1518914487, "creation_date": 1518914411, "answer_id": 48847339, "question_id": 48847207, "link": "https://stackoverflow.com/questions/48847207/what-is-the-difference-between-rands-sample-and-independentsample-traits/48847339#48847339", "title": "What is the difference between rand&#39;s Sample and IndependentSample traits?", "body": "<p>The only difference between these two traits is that <code>Sample</code> takes a <code>&amp;mut self</code> whereas <code>IndependentSample</code> takes a <code>&amp;self</code>.\nThis means that <code>Sample</code> could store a state, but not <code>IndependentSample</code>.</p>\n\n<p>The naming choice is described in <code>IndependentSample</code> documentation:</p>\n\n<blockquote>\n  <p>Since no state is recorded, each sample is (statistically) independent of all others, assuming the <code>Rng</code> used has this property.</p>\n</blockquote>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user8370684"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1518914487, "creation_date": 1518912866, "last_edit_date": 1518914411, "question_id": 48847207, "link": "https://stackoverflow.com/questions/48847207/what-is-the-difference-between-rands-sample-and-independentsample-traits", "title": "What is the difference between rand&#39;s Sample and IndependentSample traits?", "body": "<p>The <a href=\"https://doc.rust-lang.org/rand/rand/index.html\" rel=\"nofollow noreferrer\"><code>rand</code></a> crate has a <a href=\"https://doc.rust-lang.org/rand/rand/distributions/trait.Sample.html\" rel=\"nofollow noreferrer\"><code>Sample</code></a> trait and an <a href=\"https://doc.rust-lang.org/rand/rand/distributions/trait.IndependentSample.html\" rel=\"nofollow noreferrer\"><code>IndependentSample</code></a> trait.</p>\n\n<p>Obviously, \"Independent\" is the difference between the two, but what does this mean semantically in the numbers generated? In the non-independent case, how are samples possibly dependent on one another?</p>\n"}, {"tags": ["rust", "rust-chrono"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518912597, "post_id": 48847109, "comment_id": 84698414, "body": "And when <a href=\"https://github.com/rust-lang/rust/issues/32311\" rel=\"nofollow noreferrer\">issue 32311</a> is completed, it will be even prettier."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518913039, "post_id": 48847109, "comment_id": 84698507, "body": "@Shepmaster - I suppose you mean there&#39;ll be a <code>TimeRange</code> struct with a <code>.contains</code> method for this kind of problem?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1518914171, "post_id": 48847109, "comment_id": 84698726, "body": "I mean that <a href=\"https://play.rust-lang.org/?gist=cc7c00d1bbba2d82fd9c3159bdee632f&amp;version=nightly\" rel=\"nofollow noreferrer\">you&#39;ll be able to replace your method with the existing <code>Range</code> struct</a>. That&#39;s the beauty of generics and composability ;-)."}], "tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 3, "last_activity_date": 1518911901, "creation_date": 1518911901, "answer_id": 48847109, "question_id": 48846670, "link": "https://stackoverflow.com/questions/48846670/how-can-i-test-if-a-chronodatetimelocal-falls-within-certain-times-of-day/48847109#48847109", "title": "How can I test if a chrono::DateTime&lt;Local&gt; falls within certain times of day?", "body": "<p><code>DateTime</code> objects have a function called <a href=\"https://docs.rs/chrono/0.4.0/chrono/struct.DateTime.html#method.time\" rel=\"nofollow noreferrer\"><code>time()</code></a>, which returns a <a href=\"https://docs.rs/chrono/0.4.0/chrono/naive/struct.NaiveTime.html\" rel=\"nofollow noreferrer\"><code>NaiveTime</code></a> object representing the time of day. <code>NaiveTime</code> implements <code>PartialOrd</code>, and has a factory function <a href=\"https://docs.rs/chrono/0.4.0/chrono/naive/struct.NaiveTime.html#method.from_hms\" rel=\"nofollow noreferrer\"><code>from_hms(hour, min, sec)</code></a>. Using <code>from_hms</code>, you can create an upper bound and lower bound <code>NaiveTime</code>, and then compare using standard operators.</p>\n\n<pre><code>let low = NaiveTime::from_hms(6, 12, 0);\nlet high = NaiveTime::from_hms(23, 15, 0);\nlet time_of_day = Local::now().time();\n\nif (time_of_day &gt; low) &amp;&amp; (time_of_day &lt; high) {\n    // do stuff...\n} else {\n    // do something else...\n};\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=60860ef62dc030c006b24e521f82fac7&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link for completeness.</a></p>\n"}], "owner": {"reputation": 3185, "user_id": 114887, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6b0c7e3c2d9ff81adf7470e066e4a705?s=128&d=identicon&r=PG&f=1", "display_name": "Matthew Piziak", "link": "https://stackoverflow.com/users/114887/matthew-piziak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1185, "favorite_count": 0, "accepted_answer_id": 48847109, "answer_count": 1, "score": 3, "last_activity_date": 1518911901, "creation_date": 1518907531, "last_edit_date": 1518907822, "question_id": 48846670, "link": "https://stackoverflow.com/questions/48846670/how-can-i-test-if-a-chronodatetimelocal-falls-within-certain-times-of-day", "title": "How can I test if a chrono::DateTime&lt;Local&gt; falls within certain times of day?", "body": "<p>I want to compare the current local time to a constant time range, but my current solution seems more difficult than I'd expect.</p>\n\n<p>I can construct a <code>chrono::DateTime&lt;Local&gt;</code> with <code>Local::now()</code>. I can then laboriously find out if <code>now</code> lies in a particular time range like so:</p>\n\n<pre><code>let current_hour = now.hour();\nlet current_minute = now.minute();\n\n// see if `now` lies between 06:00 and 23:00\ncurrent_hour &gt;= 6 &amp;&amp; current_hour &lt; 23\n\n// note the inelegance of the syntax and the potential for fencepost errors\n</code></pre>\n\n<p>If I want to check the range from 06:12\u201323:15, the problem becomes much worse because I have to check if the hour is equal to 6 and then if the minutes are greater than 12 and then check \u2014 zzzzz...</p>\n\n<p>That's boring. I can try string representations with <code>parse_from_rfc2822</code>, but then I have to first emit the current date and then edit in the time of day and then check for parsing errors and now I'm sleeping again.</p>\n\n<p>I imagine I'm just reading the <a href=\"https://docs.rs/chrono/0.4.0/chrono/struct.DateTime.html\" rel=\"nofollow noreferrer\">chrono documentation</a> wrong. If I were to implement the library, I would try to build a <code>TimeOfDay&lt;Local&gt;</code> datatype which implements <code>Ord</code>, thereby allowing idiomatic range checking. I figure it's already there somewhere and I'm just missing it.</p>\n"}, {"tags": ["performance", "rust", "benchmarking"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518878012, "post_id": 48842252, "comment_id": 84688838, "body": "<code>0 ns&#47;iter</code> means that the optimizer has removed your entire code and you are benchmarking &quot;nothing&quot;. It&#39;s not actually faster."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518878986, "post_id": 48842252, "comment_id": 84689160, "body": "<code>mul0</code> is optimized to a multiplication (<code>imul</code>), a move to put the result in <code>eax</code>, and a return."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 2, "creation_date": 1518879000, "post_id": 48842252, "comment_id": 84689165, "body": "Obviously none of these methods are fast compared to what&#39;s built-in to modern x86 hardware: 3-cycle latency even for 64-bit integer multiply, with 1 per clock throughput.  (And using only a single uop, so it can execute in parallel with ~3 other instructions.)  <a href=\"http://agner.org/optimize/\" rel=\"nofollow noreferrer\">agner.org/optimize</a>.  These software implementations would be interesting on a CPU without hardware multiply, but even for extended-precision, building a wider multiply out of narrower multiply instructions is better than a shift / add bit loop like this."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1518879278, "post_id": 48842252, "comment_id": 84689250, "body": "@FrancisGagn&#233;: But then after inlining, the whole loop optimizes away, otherwise it would measure at least a <code>ns</code> per iteration or so.  (<code>call</code> / <code>imul</code> / <code>ret</code> + <code>add</code> + loop overhead would take more than 1 cycle per iteration, at least 3 for 3 taken branches (call/ret/ loop-branch) .  A clock cycle on a 3GHz CPU is 0.33 ns, so we should see at least 1ns.  Exactly 0 is much more easily explained by the whole loop optimizing away."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 2, "creation_date": 1518879390, "post_id": 48842252, "comment_id": 84689279, "body": "@PeterCordes You&#39;re right. When I wrap the call to <code>mul0</code> in <code>black_box</code>, I get times like <code>274 ns&#47;iter (+&#47;- 8)</code>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1518879718, "post_id": 48842252, "comment_id": 84689374, "body": "@lwi You seem to have messed up the order of the parameters when calling <code>mul_acc4</code> in <code>mul2</code> and <code>mul4</code> (the fact that you changed the order and names of the parameters compared to the book makes this less obvious); you flipped <code>a</code> and <code>b</code>. I get much lower times if I change the calls to <code>mul_acc4(a - 1, b, b)</code> and <code>mul_acc4(half(a - 1), b + b, b)</code>, respectively, and <code>mul4</code> is now faster than <code>mul2</code>, as expected."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1518879802, "post_id": 48842252, "comment_id": 84689398, "body": "@FrancisGagn&#233;: Nice test.  Oh, I see <code>b.iter</code> itself contains a loop, so the &quot;per iter&quot; numbers aren&#39;t per multiplication, they&#39;re per 1000 multiplies.  So 0.274 ns per multiply tells me I was wrong about call/ret overhead: it&#39;s getting inlined, and you&#39;re probably bottlenecking on 1 per clock <code>imul</code> throughput, and your CPU averaged ~3.65GHz while running that benchmark.  If my other guesses are correct, like no more-aggressive optimizations like auto-vectorization :P"}, {"owner": {"reputation": 1622, "user_id": 1563394, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/67835df71913e21410945dfa8c33d70f?s=128&d=identicon&r=PG", "display_name": "lwi", "link": "https://stackoverflow.com/users/1563394/lwi"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1518885802, "post_id": 48842252, "comment_id": 84691305, "body": "You guys are amazing (@FrancisGagn&#233; , @PeterCordes )! Learned alot from your discussion and fixed the parameter order. Thank you."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 1, "creation_date": 1518887391, "post_id": 48842252, "comment_id": 84691883, "body": "@PeterCordes pedantically, it&#39;s only 999 iterations; <code>1..1000</code> is an exclusive range (1, 2, ..., 998, 999)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518887736, "post_id": 48842252, "comment_id": 84692002, "body": "@lwi For what it&#39;s worth, <a href=\"https://play.rust-lang.org/?gist=282fc1bb64291eca1690126a3170c418&amp;version=stable\" rel=\"nofollow noreferrer\">here&#39;s a more idiomatic version of your code</a>"}], "owner": {"reputation": 1622, "user_id": 1563394, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/67835df71913e21410945dfa8c33d70f?s=128&d=identicon&r=PG", "display_name": "lwi", "link": "https://stackoverflow.com/users/1563394/lwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1518877981, "answer_count": 0, "score": 0, "last_activity_date": 1518878058, "creation_date": 1518877017, "last_edit_date": 1518878058, "question_id": 48842252, "link": "https://stackoverflow.com/questions/48842252/multiplication-algorithm-slower-than-expected", "closed_reason": "Duplicate", "title": "Multiplication algorithm slower than expected", "body": "<p>I am playing around with Rust while reading <em>From Mathematics To Generic Programming</em> by Stepanov &amp; Rose.</p>\n\n<p>In the first chapter of the book the authors optimize integer multiplication algorithms starting with a trivial approach and ending with a highly optimized one (<code>mul0</code> to <code>mul4</code>).</p>\n\n<p>I implemented the discussed algorithms in Rust and benchmarked them with <code>cargo bench</code>. To my surprise, the fastest in algorithm from the book is by far the slowest in the benchmark and I have no idea how this can be. The usual suspect is compiler optimization but I do not have enough assembly skills to check the binary by hand.</p>\n\n<p>Why is this the case? </p>\n\n<pre><code>#![feature(test)]\n\nextern crate test;\n\nfn mul_acc4(a: i32, b: i32, r: i32) -&gt; i32 {\n    let mut r = r;\n    let mut a = a;\n    let mut b = b;\n\n    loop {\n        if odd(a) {\n            r = r + b;\n\n            if a == 1 {\n                return r;\n            }\n        }\n\n        a = half(a);\n        b = b + b;\n    }\n}\n\nfn mul0(a: i32, b: i32) -&gt; i32 {\n    if a == 1 {\n        return b;\n    }\n\n    return mul0(a - 1, b) + b;\n}\n\nfn mul2(a: i32, b: i32) -&gt; i32 {\n    if a == 1 {\n        return b;\n    }\n\n    return mul_acc4(b, a - 1, b);\n}\n\nfn mul4(a: i32, b: i32) -&gt; i32 {\n    let mut a = a;\n    let mut b = b;\n\n    while !odd(a) {\n        b = b + b;\n        a = half(a);\n    }\n\n    if a == 1 {\n        return b;\n    }\n\n    return mul_acc4(b + b, half(a - 1), b);\n}\n\nfn half(a: i32) -&gt; i32 {\n    a &gt;&gt; 1\n}\n\nfn odd(a: i32) -&gt; bool {\n    a &amp; 0x1 == 1\n}\n\n#[cfg(test)]\nmod tests {\n\n    use super::*;\n    use test::{black_box, Bencher};\n\n    #[bench]\n    fn bench_mul0(b: &amp;mut Bencher) {\n        b.iter(|| {\n            let arg = 42000;\n            let mut acc = 0;\n\n            for i in 1..1000 {\n                acc += mul0(arg, i);\n            }\n\n            return acc;\n        });\n    }\n\n    #[bench]\n    fn bench_mul2(b: &amp;mut Bencher) {\n        b.iter(|| {\n            let arg = 42000;\n            let mut acc = 0;\n            for i in 1..1000 {\n                acc += mul2(arg, i);\n            }\n\n            return acc;\n        });\n    }\n\n    #[bench]\n    fn bench_mul4(b: &amp;mut Bencher) {\n        b.iter(|| {\n            let arg = 42000;\n            let mut acc = 0;\n            for i in 1..1000 {\n                acc += mul4(arg, i);\n            }\n\n            return acc;\n        });\n    }\n}\n</code></pre>\n\n<p><strong>Benchmark Results</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>tests::bench_mul0 ... bench:           0 ns/iter (+/- 0) test\ntests::bench_mul2 ... bench:      15,535 ns/iter (+/- 6,887) test\ntests::bench_mul4 ... bench:      29,015 ns/iter (+/- 9,168)\n</code></pre>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 2, "creation_date": 1518874824, "post_id": 48841367, "comment_id": 84687747, "body": "if you&#39;d like it to stop on the first error, what should be a result? error or something else?"}, {"owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "reply_to_user": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 0, "creation_date": 1518876001, "post_id": 48841367, "comment_id": 84688117, "body": "@AndriyTylychko, you are right, I somehow botched the example; now fixed. I would like to get an error immediately once the first error is encountered."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518878955, "post_id": 48842280, "comment_id": 84689145, "body": "<a href=\"https://docs.rs/itertools/0.7.6/itertools/trait.Itertools.html#method.fold_results\" rel=\"nofollow noreferrer\">docs.rs/itertools/0.7.6/itertools/&hellip;</a>"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 5, "last_activity_date": 1552350367, "last_edit_date": 1552350367, "creation_date": 1518877180, "answer_id": 48842280, "question_id": 48841367, "link": "https://stackoverflow.com/questions/48841367/how-do-i-perform-iterator-computations-over-iterators-of-results-without-collect/48842280#48842280", "title": "How do I perform iterator computations over iterators of Results without collecting to a temporary vector?", "body": "<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold\" rel=\"nofollow noreferrer\"><code>Iterator::try_fold</code></a> provides the framework for what you need, and it's available since Rust 1.27 (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5f00f0c10a2fa8421ba989d6a10b8852\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>fn fold_ok&lt;I, T, E, F&gt;(mut iter: I, f: F) -&gt; Result&lt;Option&lt;T&gt;, E&gt;\nwhere\n    I: Iterator&lt;Item = Result&lt;T, E&gt;&gt;,\n    T: Ord,\n    F: Fn(T, T) -&gt; T,\n{\n    iter.try_fold(None, |r, i| {\n        let i = i?;\n        Ok(Some(if let Some(r) = r { f(r, i) } else { i }))\n    })\n}\n\nfn main() {\n    let without_errors = vec![Ok(1), Ok(2), Ok(3)];\n    let with_errors = vec![Ok(1), Err(\"error\"), Ok(2)];\n\n    fn doit&lt;'r, T&gt;(name: &amp;str, iter: T)\n    where\n        T: Iterator&lt;Item = &amp;'r Result&lt;i32, &amp;'static str&gt;&gt; + Clone,\n    {\n        println!(\"{}: {:?}\", name, fold_ok(iter.cloned(), ::std::cmp::min));\n    }\n\n    doit(\"without errors\", without_errors.iter());\n    doit(\"with errors\", with_errors.iter());\n}\n</code></pre>\n\n<p>Before that, I think your only option is manually iterating (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=adee97e5da75e9d06d6ace628ba38b18\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<pre><code>fn fold_ok&lt;I, T, E, F&gt;(mut iter: I, f: F) -&gt; Result&lt;Option&lt;T&gt;, E&gt;\nwhere\n    I: Iterator&lt;Item = Result&lt;T, E&gt;&gt;,\n    T: Ord,\n    F: Fn(T, T) -&gt; T,\n{\n    let mut result = match iter.next() {\n        None =&gt; return Ok(None),\n        Some(r) =&gt; r?,\n    };\n\n    for item in iter {\n        result = f(result, item?);\n    }\n\n    Ok(Some(result))\n}\n\nfn main() {\n    let without_errors = vec![Ok(1), Ok(2), Ok(3)];\n    let with_errors = vec![Ok(1), Err(\"error\"), Ok(2)];\n\n    fn doit&lt;'r, T&gt;(name: &amp;str, iter: T)\n    where\n        T: Iterator&lt;Item = &amp;'r Result&lt;i32, &amp;'static str&gt;&gt; + Clone,\n    {\n        println!(\n            \"{}: {:?}\",\n            name,\n            fold_ok(iter.clone().cloned(), ::std::cmp::min)\n        );\n    }\n\n    doit(\"without errors\", without_errors.iter());\n    doit(\"with errors\", with_errors.iter());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1552415482, "last_edit_date": 1552415482, "creation_date": 1518878923, "answer_id": 48842550, "question_id": 48841367, "link": "https://stackoverflow.com/questions/48841367/how-do-i-perform-iterator-computations-over-iterators-of-results-without-collect/48842550#48842550", "title": "How do I perform iterator computations over iterators of Results without collecting to a temporary vector?", "body": "<p>\"Lifting\" a function to handle an iterator of results is a fairly common pattern and, as usual, itertools has a solution \u2014\u00a0<a href=\"https://docs.rs/itertools/0.8.0/itertools/fn.process_results.html\" rel=\"nofollow noreferrer\"><code>process_results</code></a>: </p>\n\n<pre><code>use itertools; // 0.8.0\n\nfn doit(name: &amp;str, iter: impl Iterator&lt;Item = Result&lt;i32, &amp;'static str&gt;&gt;) {\n    let min = itertools::process_results(iter, |i| i.min());\n    println!(\"{}: {:?}\", name, min);\n}\n</code></pre>\n\n<hr>\n\n<p>This code began life as <a href=\"https://github.com/rust-lang/rust/blob/1.33.0/src/libcore/iter/traits.rs#L907-L915\" rel=\"nofollow noreferrer\"><code>ResultShunt</code> in the standard library</a> before being extracted to itertools. It's what underlies the implementation of <code>sum</code> and <code>product</code> for iterators of <code>Result</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": false, "score": 0, "last_activity_date": 1518892610, "last_edit_date": 1518892610, "creation_date": 1518890417, "answer_id": 48844284, "question_id": 48841367, "link": "https://stackoverflow.com/questions/48841367/how-do-i-perform-iterator-computations-over-iterators-of-results-without-collect/48844284#48844284", "title": "How do I perform iterator computations over iterators of Results without collecting to a temporary vector?", "body": "<p>It's possible to abuse <code>collect()</code> for this:</p>\n\n<pre><code>pub struct Min&lt;T&gt; {\n    value: Option&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Min&lt;T&gt; {\n    pub fn value(self) -&gt; Option&lt;T&gt; {\n        self.value\n    }\n}\n\nimpl&lt;T&gt; std::iter::FromIterator&lt;T&gt; for Min&lt;T&gt;\nwhere\n    T: Ord,\n{\n    fn from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; Self {\n        let mut iter = iter.into_iter();\n        match iter.next() {\n            None =&gt; Min { value: None },\n            Some(mut value) =&gt; {\n                for i in iter {\n                    value = std::cmp::min(value, i);\n                }\n                Min { value: Some(value) }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This can be used via <code>iter.collect::&lt;Min&lt;_&gt;&gt;().value()</code>. This is a lot of machinery, and I don't see a way to abstract over it (so that you only need to supply <code>std::cmp::min</code> or some other semigroup operation).</p>\n\n<p>I didn't look in the direction of <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold\" rel=\"nofollow noreferrer\"><code>Iterator::try_fold</code></a>, which provides most of the machinery.</p>\n"}], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1336, "favorite_count": 0, "accepted_answer_id": 48842280, "answer_count": 3, "score": 5, "last_activity_date": 1552415482, "creation_date": 1518871096, "last_edit_date": 1518879062, "question_id": 48841367, "link": "https://stackoverflow.com/questions/48841367/how-do-i-perform-iterator-computations-over-iterators-of-results-without-collect", "title": "How do I perform iterator computations over iterators of Results without collecting to a temporary vector?", "body": "<p>I'm looking for a way to eliminate the temporary vector allocation in this example:</p>\n\n<pre><code>fn doit&lt;T: Iterator&lt;Item = Result&lt;i32, &amp;'static str&gt;&gt;&gt;(name: &amp;str, iter: T) {\n    println!(\n        \"{}: {:?}\",\n        name,\n        iter.collect::&lt;Result&lt;Vec&lt;_&gt;, _&gt;&gt;()\n            .map(|v| v.into_iter().min())\n    );\n}\n\nfn main() {\n    let without_errors = vec![Ok(1), Ok(2), Ok(3)];\n    let with_errors = vec![Ok(1), Err(\"error\"), Ok(2)];\n\n    doit(\"without errors\", without_errors.into_iter());\n    doit(\"with errors\", with_errors.into_iter());\n}\n</code></pre>\n\n<p>This is a variation of the <em>iterator with error handling</em> theme, except that I don't want to create a collection (so <code>collect()</code> doesn't quite do the job), but I want to perform further operations on the elements being iterated over.</p>\n\n<p>Note that this gives the wrong result because <code>Ok</code> is less than <code>Err</code>:</p>\n\n<pre><code>fn doit&lt;T: Iterator&lt;Item = Result&lt;i32, &amp;'static str&gt;&gt;&gt;(name: &amp;str, iter: T) {\n    println!(\"{}: {:?}\", name, iter.min());\n}\n</code></pre>\n\n<p>It would give the right result for <code>max()</code> by accident, but it would not stop iterating on the first error.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518880331, "post_id": 48838446, "comment_id": 84689556, "body": "<i>It basically says that the <code>text</code> field should live at least as long as the <code>Parameters</code> itself.</i> \u2014 that is not what the lifetime means, although it is true that the reference has to outlive the struct."}], "answers": [{"comments": [{"owner": {"reputation": 407, "user_id": 4983862, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eb45b27e9338e3e971cd860f4372ff35?s=128&d=identicon&r=PG&f=1", "display_name": "hweom", "link": "https://stackoverflow.com/users/4983862/hweom"}, "edited": false, "score": 0, "creation_date": 1518851873, "post_id": 48838830, "comment_id": 84682143, "body": "Thanks for the explanation! What you said makes sense, although I wish it could have been handled by Rust in a less verbose way. I just started learning Rust, and the farther I go, the more I feel that Rust&#39;s explicit handling of lifetimes via generics is a drawback, not an advantage. It takes just too much effort to state the obvious."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1518850627, "creation_date": 1518850627, "answer_id": 48838830, "question_id": 48838446, "link": "https://stackoverflow.com/questions/48838446/what-do-i-use-for-the-lifetime-of-a-parameter-of-an-fnmut-field-inside-a-struct/48838830#48838830", "title": "What do I use for the lifetime of a parameter of an FnMut field inside a struct?", "body": "<p><code>for&lt;'a&gt;</code> can only be used in trait bounds and trait objects; <code>Parameters&lt;'a&gt;</code> is not a trait.</p>\n\n<p>The solution is a feature that is currently in development: <em>generic associated types</em>. Generic associated types can be thought of as functions operating on types (i.e. given one or many types/lifetimes, produce another type). Your program would look like this:</p>\n\n<pre><code>#![feature(generic_associated_types)]\n\ntrait CallableParameterFamily {\n    type Type&lt;'a&gt;;\n}\n\nstruct Callable&lt;P&gt;\nwhere\n    P: CallableParameterFamily,\n{\n    callable: Box&lt;for&lt;'a&gt; FnMut(&amp;P::Type&lt;'a&gt;)&gt;,\n}\n\nstruct Parameters&lt;'a&gt; {\n    text: &amp;'a str,\n}\n\nenum ParametersFamily {}\nimpl CallableParameterFamily for ParametersFamily {\n    type Type&lt;'a&gt; = Parameters&lt;'a&gt;; // given 'a, produce Parameters&lt;'a&gt;\n}\n\nstruct Context {\n    call: Callable&lt;ParametersFamily&gt;,\n}\n</code></pre>\n\n<p>(As of Rust 1.25.0-nightly (2018-02-14 <code>3ec5a99aaa0084d97a9e845b34fdf03d1462c475</code>), the feature appears to be partially implemented, and the code above doesn't work, so I can't verify if it's correct or if I made a mistake here.)</p>\n\n<p>The key here is that we don't want a <code>Callable&lt;Parameters&lt;'a&gt;&gt;</code> with a specific lifetime <code>'a</code>, because we might want to call the closure with different lifetimes for <code>'a</code> each time. We can't pass a type constructor (such as <code>Parameters</code>) as a type parameter to a generic type (such as <code>P</code> on <code>Callable</code>).</p>\n\n<p>Generic associated types will allow that, in an indirect way: we have to define a trait with a generic associated type (here, <code>CallableParameterFamily</code> with the GAT <code>Type</code>) along with a type that implements that trait (here, <code>ParametersFamily</code>). Notice that <code>ParametersFamily</code> has no lifetime parameter. We then use <code>Callable&lt;ParametersFamily&gt;</code> as the type for the <code>call</code> field in <code>Context</code>; <code>Context</code> no longer needs a lifetime parameter. Then, in <code>Callable</code>, instead of using <code>P</code> directly, we use <code>P::Type&lt;'a&gt;</code> after introducing <code>'a</code> using <code>for&lt;'a&gt;</code>. When instantiated as <code>Callable&lt;ParametersFamily&gt;</code>, <code>P::Type&lt;'a&gt;</code> will expand to <code>Parameters&lt;'a&gt;</code>, which is what we wanted.</p>\n"}], "owner": {"reputation": 407, "user_id": 4983862, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eb45b27e9338e3e971cd860f4372ff35?s=128&d=identicon&r=PG&f=1", "display_name": "hweom", "link": "https://stackoverflow.com/users/4983862/hweom"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 71, "favorite_count": 0, "accepted_answer_id": 48838830, "answer_count": 1, "score": 0, "last_activity_date": 1518880060, "creation_date": 1518847540, "last_edit_date": 1518880060, "question_id": 48838446, "link": "https://stackoverflow.com/questions/48838446/what-do-i-use-for-the-lifetime-of-a-parameter-of-an-fnmut-field-inside-a-struct", "title": "What do I use for the lifetime of a parameter of an FnMut field inside a struct?", "body": "<p>I have the following code:</p>\n\n<pre><code>struct Callable&lt;P&gt; {\n    callable: Box&lt;FnMut(&amp;P)&gt;,\n}\n\nstruct Parameters&lt;'a&gt; {\n    text: &amp;'a str,\n}\n\nstruct Context&lt;'a&gt; {\n    call: Callable&lt;Parameters&lt;'a&gt;&gt;,\n}\n</code></pre>\n\n<p><code>Callable</code> is something that can be called with a reference to a parameter of type <code>P</code>. </p>\n\n<p><code>Parameters</code> contains a reference to a string, so it makes total sense that it has a generic lifetime parameter. It basically says that the <code>text</code> field should live at least as long as the <code>Parameters</code> itself.</p>\n\n<p>I have to add a generic lifetime parameter for <code>Context</code> too, otherwise there is nothing I can use for the <code>call</code> member type. This doesn't make any sense to me, as the <code>'a</code> parameter has nothing to do with the lifetime of <code>Context</code>.</p>\n\n<p>I suspect that the <code>for &lt;'a&gt;</code> construct can be used somehow, I just can't figure out where to put it.</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1518845640, "post_id": 48838148, "comment_id": 84680973, "body": "Relevant answer: <a href=\"https://stackoverflow.com/a/41650879/2731452\">stackoverflow.com/a/41650879/2731452</a>"}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1518876364, "post_id": 48838218, "comment_id": 84688254, "body": "Since <code>mem::uninitialized</code> is <code>unsafe</code>, you also have to wrap it in an <code>unsafe</code> block, which isn&#39;t necessary with <code>= [0; 512]</code>. (I figure you already know this, but it would be good to add to the answer for future readers.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518878340, "post_id": 48838218, "comment_id": 84688935, "body": "<i>but you should think carefully if you really need it</i> \u2014 you should also <i>benchmark</i> and <i>profile</i>, as it may not even make a difference to start with."}, {"owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1519114706, "post_id": 48838218, "comment_id": 84765138, "body": "@trentcl, sure, this piece of code is a part of relatively huge uninitialized block already :)"}, {"owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1519114978, "post_id": 48838218, "comment_id": 84765287, "body": "@Shepmaster, You are right! This is a first thing one should do when going to optimizing something. And as I mentioned in the question I just wonder if leaving something uninitialized is possible."}], "tags": [], "owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "is_accepted": true, "score": 2, "last_activity_date": 1518878305, "last_edit_date": 1518878305, "creation_date": 1518845672, "answer_id": 48838218, "question_id": 48838148, "link": "https://stackoverflow.com/questions/48838148/how-to-leave-a-fixed-size-array-uninitalized/48838218#48838218", "title": "How to leave a fixed size array uninitalized?", "body": "<p>I found <a href=\"https://doc.rust-lang.org/std/mem/fn.uninitialized.html\" rel=\"nofollow noreferrer\"><code>mem::uninitialized</code></a>:</p>\n\n<pre><code>let mut log: [c_char; 512];\nlog = ::std::mem::uninitialized();\n</code></pre>\n\n<p>That will prevent the compiler from complaining, but you  should think carefully if you really need it. Use it only if you know exactly what you're doing (as I do). </p>\n"}], "owner": {"reputation": 71, "user_id": 9372436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ef5182cc59c4ce0cf65541ad56a43995?s=128&d=identicon&r=PG&f=1", "display_name": "The John", "link": "https://stackoverflow.com/users/9372436/the-john"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "closed_date": 1518878168, "accepted_answer_id": 48838218, "answer_count": 1, "score": 1, "last_activity_date": 1518878305, "creation_date": 1518844872, "last_edit_date": 1518878282, "question_id": 48838148, "link": "https://stackoverflow.com/questions/48838148/how-to-leave-a-fixed-size-array-uninitalized", "closed_reason": "Duplicate", "title": "How to leave a fixed size array uninitalized?", "body": "<p>I'm writing bindings to an external C library and there's a function which gets a mutable <code>char</code> pointer to a buffer and fills it with some null-terminated log information. This information is always less than 512 bytes so I can safely write something like this:</p>\n\n<pre><code>let mut log: [c_char; 512];\nmyfunc(log.as_mut_ptr());\n</code></pre>\n\n<p>It doesn't work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0381]: use of possibly uninitialized variable: `log`\n  --&gt; src/a.rs:63:60\n   |\n63 |             myfunc(log.as_mut_ptr());\n   |                               ^^^ use of possibly uninitialized `log`\n</code></pre>\n\n<p>I could do like this:</p>\n\n<pre><code>let log: [c_char; 512] = [0; 512];\n</code></pre>\n\n<p>I don't need to fill the buffer, it will be filled on the next line, so it's just a waste of time (not a lot, consider it as a challenge rather that a real performance boost).</p>\n\n<p>Is it possible to say \"hey compiler, this time it's okay to have uninitialized variable!\" somehow?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 9372417, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-_p74TrRe7d4/AAAAAAAAAAI/AAAAAAAAJo0/RWIB9zy_j04/photo.jpg?sz=128", "display_name": "pradeep", "link": "https://stackoverflow.com/users/9372417/pradeep"}, "edited": false, "score": 0, "creation_date": 1518847386, "post_id": 48838220, "comment_id": 84681238, "body": "Thanks Francis, this makes things more clear for me."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1518879806, "last_edit_date": 1518879806, "creation_date": 1518845687, "answer_id": 48838220, "question_id": 48838013, "link": "https://stackoverflow.com/questions/48838013/how-do-i-get-a-reference-stored-in-a-struct-with-the-references-original-lifeti/48838220#48838220", "title": "How do I get a reference stored in a struct with the reference&#39;s original lifetime?", "body": "<p>All you have to do is change the signature of <code>inner</code> so that the return type matches the type of the <code>Wrapper</code>'s field:</p>\n\n<pre><code>impl&lt;'a&gt; Wrapper&lt;'a&gt; {\n    fn inner(&amp;self) -&gt; &amp;'a str {\n        //              ^^ 'a added here\n        self.0\n    }\n}\n</code></pre>\n\n<p>When you initialize the variable <code>wrapper</code> with <code>Wrapper(&amp;x)</code>, the compiler infers that its type is <code>Wrapper&lt;'static&gt;</code>, because <code>x</code> has the <code>'static</code> lifetime (all literal strings have the <code>'static</code> lifetime). Thus, when you call <code>inner</code> on a <code>Wrapper&lt;'static&gt;</code>, the return type is <code>&amp;'static str</code>.</p>\n\n<p>If we don't add <code>'a</code> to the signature, then the lifetime of the returned value is the lifetime of the <code>Wrapper</code> itself. This is more apparent if we write out the lifetimes in full:</p>\n\n<pre><code>impl&lt;'a&gt; Wrapper&lt;'a&gt; {\n    fn inner&lt;'b&gt;(&amp;'b self) -&gt; &amp;'b str {\n        self.0\n    }\n}\n</code></pre>\n\n<p>Your <code>Wrapper</code> doesn't have the <code>'static</code> lifetime because it lives in a local variable; its life will end when the function returns \u2014 <code>main</code> isn't special when it comes to lifetimes. Therefore, the returned string slice doesn't have the <code>'static</code> lifetime either.</p>\n\n<p>Now, maybe you're wondering, <em>\"If the original string has the <code>'static</code> lifetime, why is it valid to return it with a different lifetime?\"</em>. It's important to understand that lifetimes don't have to be exact; they can be shortened if necessary. The goal of lifetimes is to ensure you don't use a reference after its referent has been dropped; if you claim that a value has a lifetime shorter than it's actually is, it's totally safe, it just (perhaps unnecessarily) restricts how long the reference can be used.</p>\n"}], "owner": {"reputation": 11, "user_id": 9372417, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-_p74TrRe7d4/AAAAAAAAAAI/AAAAAAAAJo0/RWIB9zy_j04/photo.jpg?sz=128", "display_name": "pradeep", "link": "https://stackoverflow.com/users/9372417/pradeep"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1518879806, "creation_date": 1518843556, "last_edit_date": 1518879347, "question_id": 48838013, "link": "https://stackoverflow.com/questions/48838013/how-do-i-get-a-reference-stored-in-a-struct-with-the-references-original-lifeti", "title": "How do I get a reference stored in a struct with the reference&#39;s original lifetime?", "body": "<p>I am trying to run the following code. It was straightforward to understand that the lifetime of the returned value of <code>inner()</code> was not compatible with the <code>'static</code> lifetime, but how can I make this work without changing the <code>main()</code> function?</p>\n\n<pre><code>struct Wrapper&lt;'a&gt;(&amp;'a str);\n\nimpl&lt;'a&gt; Wrapper&lt;'a&gt; {\n    fn inner(&amp;self) -&gt; &amp;str {\n        self.0\n    }\n}\n\npub fn main() {\n    let x = \"hello\";\n    let wrapper = Wrapper(&amp;x);\n    let _: &amp;'static str = wrapper.inner();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `wrapper` does not live long enough\n  --&gt; src/main.rs:12:27\n   |\n12 |     let _: &amp;'static str = wrapper.inner();\n   |                           ^^^^^^^ borrowed value does not live long enough\n13 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I came across this as a example from a course I am following but I am kind of stuck with understanding how to make this work.</p>\n"}, {"tags": ["rust", "hyper"], "answers": [{"tags": [], "owner": {"reputation": 969, "user_id": 204052, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e3c791e8e5da39bf88b09dfb089de01b?s=128&d=identicon&r=PG", "display_name": "Colin Dean", "link": "https://stackoverflow.com/users/204052/colin-dean"}, "is_accepted": true, "score": 3, "last_activity_date": 1518815687, "last_edit_date": 1518815687, "creation_date": 1518811662, "answer_id": 48834123, "question_id": 48834122, "link": "https://stackoverflow.com/questions/48834122/how-can-i-implement-a-custom-typed-header-for-use-with-hyper/48834123#48834123", "title": "How can I implement a custom typed header for use with Hyper?", "body": "<p>Digging through the <code>hyper::header::Headers</code> source code, I found that there is a neat macro for generating the code: <a href=\"https://docs.rs/hyper/0.11.18/hyper/macro.header.html\" rel=\"nofollow noreferrer\"><code>header!</code></a>. You will need some incantation to make it useful, though:</p>\n\n<pre><code>#[macro_use]\nextern crate hyper;\n\nuse hyper::{Body, Method, Request, Response};\nuse std::fmt::{self, Display};\nuse std::str::FromStr;\nuse std::num::ParseIntError;\n\n// For a header that looks like this:\n//    x-arbitrary-header-with-an-integer: 8\n\n#[derive(Clone, Debug, Eq, PartialEq)]\npub struct ArbitraryNumber(i8);\n\nimpl Display for ArbitraryNumber {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Arbitrary Protocol v{}\", self.0)\n    }\n}\n\nimpl FromStr for ArbitraryNumber {\n    type Err = ParseIntError;\n\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        s.parse::&lt;i8&gt;().map(|int| ArbitraryNumber(int))\n    }\n}\n\n//impl Header for ArbitraryNumberHeader\nheader! { (ArbitraryNumberHeader, \"x-arbitrary-header-with-an-integer\") =&gt; [ArbitraryNumber] }\n</code></pre>\n\n<p>Once you've got a <code>Response</code> named <code>res</code> in scope, you can access this header like so:</p>\n\n<pre><code>let arbitrary_header: AribitraryNumber = res.headers().get::&lt;ArbitraryNumberHeader&gt;().unwrap();\n</code></pre>\n"}], "owner": {"reputation": 969, "user_id": 204052, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e3c791e8e5da39bf88b09dfb089de01b?s=128&d=identicon&r=PG", "display_name": "Colin Dean", "link": "https://stackoverflow.com/users/204052/colin-dean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 317, "favorite_count": 0, "accepted_answer_id": 48834123, "answer_count": 1, "score": 2, "last_activity_date": 1518815687, "creation_date": 1518811662, "last_edit_date": 1518815121, "question_id": 48834122, "link": "https://stackoverflow.com/questions/48834122/how-can-i-implement-a-custom-typed-header-for-use-with-hyper", "title": "How can I implement a custom typed header for use with Hyper?", "body": "<p>I'd prefer to take advantage of the type safety of Hyper's <a href=\"https://docs.rs/hyper/0.11.18/hyper/header/struct.Headers.html#method.get\" rel=\"nofollow noreferrer\"><code>hyper::header::Headers#get</code></a> method instead of using <a href=\"https://docs.rs/hyper/0.11.18/hyper/header/struct.Headers.html#method.get_raw\" rel=\"nofollow noreferrer\"><code>get_raw</code></a> with a <code>&amp;str</code>.</p>\n\n<p>What is the best way to accomplish this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518807219, "post_id": 48833009, "comment_id": 84670631, "body": "Why did you decide to use a trait object in the first place?"}, {"owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518807414, "post_id": 48833009, "comment_id": 84670721, "body": "@Shepmaster I thought it was good idea to have a factory method that could create a list from any iterator because I only need argument to be foldable. Are there any reasons not to make my code that generic?"}], "answers": [{"comments": [{"owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 0, "creation_date": 1518808040, "post_id": 48833279, "comment_id": 84671022, "body": "Thank you. BTW how do you manage to get &quot;use <code>&amp;mut Iterator&lt;Item = T&gt;</code> here to make mutable&quot; message out of your compiler? This one is way more clear because I&#39;ve totally missed the point that fold actually mutates iterator."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 1, "creation_date": 1518808316, "post_id": 48833279, "comment_id": 84671145, "body": "@YuryTarabanko well, the original form of your code <i>doesn&#39;t</i> have that error message, that&#39;s why it&#39;s tougher to figure out. I encourage you <a href=\"https://github.com/rust-lang/rust/\" rel=\"nofollow noreferrer\">to file an issue on the Rust repository</a> with your original case, the error message and how it could be improved; the Rust team is always looking to improve documentation and errors. Otherwise, I just took the code and compiled it in the playground / with <code>cargo run</code>."}, {"owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 1, "creation_date": 1518808611, "post_id": 48833279, "comment_id": 84671279, "body": "I see. Someone has already filed one. <a href=\"https://github.com/rust-lang/rust/issues/37914\" rel=\"nofollow noreferrer\">Opened issue</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 1, "creation_date": 1518810178, "post_id": 48833279, "comment_id": 84671961, "body": "@turbulencetoo yes, there&#39;s a blanket <code>impl&lt;&#39;a, I&gt; Iterator for &amp;&#39;a mut I where I: Iterator + ?Sized</code>. Move semantics apply equally to value types (<code>T</code>) and references (<code>&amp;T</code> / <code>&amp;mut T</code>)."}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1518810851, "post_id": 48833279, "comment_id": 84672245, "body": "Thanks. Bjorn3, in the issue linked above by Yuri also helped: &quot;If you have a non mutable reference rustc will deref the reference to get something it can call [method] on. However if you have a mutable reference rustc knows that there is a implementation of Iterator for it without having to dereference it&quot;"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1559916301, "last_edit_date": 1559916301, "creation_date": 1518807723, "answer_id": 48833279, "question_id": 48833009, "link": "https://stackoverflow.com/questions/48833009/the-fold-method-cannot-be-invoked-on-a-trait-object/48833279#48833279", "title": "The `fold` method cannot be invoked on a trait object", "body": "<p>You have a larger problem. You have accepted a reference to a trait object that is immutable. This means that you cannot call <code>Iterator::next</code>, the most primitive operation on an iterator:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt;\nwhere\n    T: Debug,\n{\n    fn from_iterable(iterator: &amp;dyn Iterator&lt;Item = T&gt;) -&gt; Self {\n        iterator.next();\n        panic!();\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `*iterator` as mutable, as it is behind a `&amp;` reference\n  --&gt; src/main.rs:16:9\n   |\n15 |     fn from_iterable(iterator: &amp;dyn Iterator&lt;Item = T&gt;) -&gt; Self {\n   |                                ----------------------- help: consider changing this to be a mutable reference: `&amp;mut dyn std::iter::Iterator&lt;Item = T&gt;`\n16 |         iterator.next();\n   |         ^^^^^^^^ `iterator` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n</code></pre>\n\n<p>If you follow this error suggestion and update the call site to pass in a mutable reference, your code works:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt;\nwhere\n    T: Debug,\n{\n    fn from_iterable(iterator: &amp;mut dyn Iterator&lt;Item = T&gt;) -&gt; Self {\n        iterator.fold(List::Nil, |acc, value| List::Cons(value, Box::new(acc)))\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", List::from_iterable(&amp;mut (1..10)));\n}\n</code></pre>\n\n<p>However, it's <strong>not</strong> common to use trait objects for this type of problem, as they involve dynamic dispatch and some (small) amount of runtime overhead. Instead, it's far more common to use static dispatch with generics:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt;\nwhere\n    T: Debug,\n{\n    fn from_iterable(iterator: impl IntoIterator&lt;Item = T&gt;) -&gt; Self {\n        iterator\n            .into_iter()\n            .fold(List::Nil, |acc, value| List::Cons(value, Box::new(acc)))\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", List::from_iterable(1..10));\n}\n</code></pre>\n\n<p>I also switched to <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> as it's a bit more ergonomic for callers.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/book/ch10-00-generics.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em>, chapter 10: generics</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em>, chapter 17: trait objects</a></li>\n<li><a href=\"https://stackoverflow.com/q/50650070/155423\">What does &quot;dyn&quot; mean in a type?</a></li>\n</ul>\n"}], "owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4364, "favorite_count": 1, "accepted_answer_id": 48833279, "answer_count": 1, "score": 7, "last_activity_date": 1559916301, "creation_date": 1518806500, "last_edit_date": 1518807120, "question_id": 48833009, "link": "https://stackoverflow.com/questions/48833009/the-fold-method-cannot-be-invoked-on-a-trait-object", "title": "The `fold` method cannot be invoked on a trait object", "body": "<p>I'm trying to implement a generic Cons List, one somewhat more advanced than the one used in chapter 15 of the book:</p>\n\n<pre><code>use std::fmt::Debug;\n\n#[derive(Debug)]\nenum List&lt;T&gt; {\n    Nil,\n    Cons(T, Box&lt;List&lt;T&gt;&gt;),\n}\n\nimpl&lt;T&gt; List&lt;T&gt;\nwhere\n    T: Debug,\n{\n    fn from_iterable(iterator: &amp;Iterator&lt;Item = T&gt;) -&gt; Self {\n        iterator.fold(List::Nil, |acc, value| List::Cons(value, Box::new(acc)))\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", List::from_iterable(&amp;(1..10)));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=009fe5eec55052bc832b6f2152f82c16&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>My code does not compile and it has a really confusing message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the `fold` method cannot be invoked on a trait object\n  --&gt; src/main.rs:14:18\n   |\n14 |         iterator.fold(List::Nil, |acc, value| List::Cons(value, Box::new(acc)))\n   |                  ^^^^\n</code></pre>\n\n<p>What does this message mean? </p>\n\n<p>I have seen this somehow related <a href=\"https://stackoverflow.com/questions/27535289/what-is-the-correct-way-to-return-an-iterator-or-any-other-trait\">question</a>, but even if this one is a duplicate my current knowledge is too limited to connect the dots.</p>\n"}, {"tags": ["rust", "documentation"], "answers": [{"tags": [], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "is_accepted": true, "score": 1, "last_activity_date": 1518795814, "creation_date": 1518795814, "answer_id": 48830214, "question_id": 48830213, "link": "https://stackoverflow.com/questions/48830213/how-to-doctest-a-function-that-uses-a-trait-from-a-crate/48830214#48830214", "title": "How to doctest a function that uses a trait from a crate?", "body": "<p>As described in <a href=\"https://github.com/rust-lang/cargo/issues/960\" rel=\"nofollow noreferrer\">this issue</a>, rustdoc wraps all tests in a <code>fn main() {... }</code> wrapper. You can circumvent this by explicitly defining a main function. To do this add a <code>#</code> to the line that should stand 'outside' of the main test code. For the example in the question, the solution looks as follows:</p>\n\n<pre><code>/// Test\n/// ```\n/// # extern crate sysinfo;\n/// # extern crate sysinfo_error;  // The name of my crate\n/// # fn main() {\n///     assert_eq!(16317367, sysinfo_error::read_sysinfo());\n/// # }\n/// ```\npub fn read_sysinfo() {\n    ...\n}\n</code></pre>\n"}], "owner": {"reputation": 4924, "user_id": 2862719, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yzhk5.png?s=128&g=1", "display_name": "m00am", "link": "https://stackoverflow.com/users/2862719/m00am"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "accepted_answer_id": 48830214, "answer_count": 1, "score": 1, "last_activity_date": 1520187973, "creation_date": 1518795814, "last_edit_date": 1520187973, "question_id": 48830213, "link": "https://stackoverflow.com/questions/48830213/how-to-doctest-a-function-that-uses-a-trait-from-a-crate", "title": "How to doctest a function that uses a trait from a crate?", "body": "<p>I tried to write a doctest for a function that uses the <code>sysinfo</code> crate. While the code works perfectly fine, I cannot compile the doctest. A minimal example look like this:</p>\n\nlib.rs\n\n<pre><code>extern crate sysinfo;\n\nuse sysinfo::SystemExt;\n\n/// Test\n///\n/// ```\n/// sysinfo_error::read_sysinfo()\n/// ```\npub fn read_sysinfo() {\n    let mut system = sysinfo::System::new();\n}\n</code></pre>\n\n<p>When run, this code works as intended (compiles and does nothing), but when I run <code>cargo test</code> the following error occurs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>running 1 test\ntest src/lib.rs - read_sysinfo (line 7) ... FAILED\n\nfailures:\n\n---- src/lib.rs - read_sysinfo (line 7) stdout ----\n        error: linking with `cc` failed: exit code: 1\n  |\n  = note: \"cc\" \"-Wl,--as-needed\" \"-Wl,-z,noexecstack\" \"-m64\" \"-L\" \"/home/me/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"/tmp/rustdoctest.mkPht54FLMyA/rust_out.rust_out0.rcgu.o\" \"-o\" \"/tmp/rustdoctest.mkPht54FLMyA/rust_out\" \"/tmp/rustdoctest.mkPht54FLMyA/rust_out.crate.allocator.rcgu.o\" \"-Wl,--gc-sections\" \"-pie\" \"-Wl,-z,relro,-z,now\" \"-nodefaultlibs\" \"-L\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps\" \"-L\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps\" \"-L\" \"/home/me/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-Wl,-Bstatic\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps/libsysinfo_error-ad346d9cb3d265cb.rlib\" \"-L\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps\" \"-Wl,-Bdynamic\" \"-l\" \"sysinfo-bde19d7fa61f93a0\" \"-Wl,-Bstatic\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps/libcfg_if-34509d450d3a6e7b.rlib\" \"/home/me/repos/rust_book/sysinfo_error/target/debug/deps/liblibc-b1ca85687f9f2272.rlib\" \"-L\" \"/home/me/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib\" \"-Wl,-Bdynamic\" \"-l\" \"std-58a9e2944951d97f\" \"-Wl,-Bstatic\" \"/home/me/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-a6b6fad6cc543169.rlib\" \"-Wl,-Bdynamic\" \"-l\" \"util\" \"-l\" \"util\" \"-l\" \"dl\" \"-l\" \"rt\" \"-l\" \"pthread\" \"-l\" \"pthread\" \"-l\" \"gcc_s\" \"-l\" \"c\" \"-l\" \"m\" \"-l\" \"rt\" \"-l\" \"pthread\" \"-l\" \"util\" \"-l\" \"util\"\n  = note: /home/me/repos/rust_book/sysinfo_error/target/debug/deps/libsysinfo_error-ad346d9cb3d265cb.rlib(sysinfo_error-ad346d9cb3d265cb.sysinfo_error15.rcgu.o): In function `sysinfo_error::read_sysinfo':\n          /home/me/repos/rust_book/sysinfo_error/src/lib.rs:11: undefined reference to `_$LT$sysinfo..linux..system..System$u20$as$u20$sysinfo..traits..SystemExt$GT$::new::h2ef0fda9b3bb905d'\n          collect2: error: ld returned 1 exit status\n\n\nerror: aborting due to previous error\n\nthread 'rustc' panicked at 'Box&lt;Any&gt;', /checkout/src/librustc_errors/lib.rs:504:8\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nthread 'rustc' panicked at 'couldn't compile the test', /checkout/src/librustdoc/test.rs:288:12\n\n\nfailures:\n    src/lib.rs - read_sysinfo (line 7)\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n\nerror: test failed, to rerun pass '--doc'\n</code></pre>\n\n<p>The trait <code>SystemExt</code> is missing. I tried to import the crate in the doctest as follows</p>\n\n<pre><code>/// Test\n///\n/// ```\n/// extern crate sysinfo;\n/// use sysinfo::SystemExt;\n/// assert_eq!(16317367, sysinfo_error::read_sysinfo());\n/// ```\npub fn read_sysinfo() {\n    ...\n}\n</code></pre>\n\n<p>but this did not solve the problem, as the crate is still not found:</p>\n\n<pre><code>---- src/lib.rs - read_sysinfo (line 8) stdout ----\n        error[E0432]: unresolved import `sysinfo`\n --&gt; src/lib.rs:4:5\n  |\n4 | use sysinfo::SystemExt;\n  |     ^^^^^^^ Maybe a missing `extern crate sysinfo;`?\n[...]\n</code></pre>\n\n<p>Is there a way to import traits from a crate during doctests?</p>\n"}, {"tags": ["sqlite", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518793891, "post_id": 48829416, "comment_id": 84663126, "body": "Based on your original error message style, you <i>really</i> should upgrade your version of Rust. Rust has new releases every 6 weeks, and Rust 1.24.0 is the most recent."}, {"owner": {"reputation": 1983, "user_id": 939280, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/luAYh.jpg?s=128&g=1", "display_name": "Ka\u011fan Kayal", "link": "https://stackoverflow.com/users/939280/ka%c4%9fan-kayal"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518794467, "post_id": 48829416, "comment_id": 84663504, "body": "@Shepmaster: Actually, I use a fairly new version, which is 1.22.1. On the console, I get much more verbose error messages. But, I use sublime text 3 as my editor and the rust enhanced package. I copied my error messages from there. I guess that the rust enhanced package simplifies the error message on its output window. It does properly highlight the problematic parts though, so that I actually don&#39;t lose the additional information."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1518793957, "last_edit_date": 1518793957, "creation_date": 1518793649, "answer_id": 48829580, "question_id": 48829416, "link": "https://stackoverflow.com/questions/48829416/how-to-open-a-connection-with-flags-using-the-rusqlite-crate/48829580#48829580", "title": "How to open a connection with flags using the rusqlite crate?", "body": "<blockquote>\n  <p>is equivalent to <code>Connection::open_with_flags</code></p>\n</blockquote>\n\n<p>You should look at the <a href=\"https://docs.rs/rusqlite/0.13.0/rusqlite/struct.Connection.html#method.open_with_flags\" rel=\"nofollow noreferrer\"><code>open_with_flags</code> documentation</a>:</p>\n\n<pre><code>fn open_with_flags&lt;P: AsRef&lt;Path&gt;&gt;(\n    path: P, \n    flags: OpenFlags\n) -&gt; Result&lt;Connection&gt;\n</code></pre>\n\n<p>Then click through to <a href=\"https://docs.rs/rusqlite/0.13.0/rusqlite/struct.OpenFlags.html\" rel=\"nofollow noreferrer\"><code>OpenFlags</code></a>. This defines <a href=\"https://docs.rs/rusqlite/0.13.0/rusqlite/struct.OpenFlags.html#associatedconstant.SQLITE_OPEN_READ_ONLY\" rel=\"nofollow noreferrer\">your flag</a> as an <em>associated constant</em>:</p>\n\n<pre><code>const SQLITE_OPEN_READ_ONLY: OpenFlags\n</code></pre>\n\n<p>All together:</p>\n\n<pre><code>extern crate rusqlite;\n\nuse rusqlite::{Connection, OpenFlags};\n\nfn main() {\n    let path = \"/usr/local/data/mydb.sqlite\";\n    let conn = Connection::open_with_flags(path, OpenFlags::SQLITE_OPEN_READ_ONLY);\n}\n</code></pre>\n"}], "owner": {"reputation": 1983, "user_id": 939280, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/luAYh.jpg?s=128&g=1", "display_name": "Ka\u011fan Kayal", "link": "https://stackoverflow.com/users/939280/ka%c4%9fan-kayal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 363, "favorite_count": 0, "accepted_answer_id": 48829580, "answer_count": 1, "score": 2, "last_activity_date": 1518793957, "creation_date": 1518793145, "last_edit_date": 1518793837, "question_id": 48829416, "link": "https://stackoverflow.com/questions/48829416/how-to-open-a-connection-with-flags-using-the-rusqlite-crate", "title": "How to open a connection with flags using the rusqlite crate?", "body": "<p>I read the following in the <a href=\"https://docs.rs/rusqlite/0.13.0/rusqlite/struct.Connection.html\" rel=\"nofollow noreferrer\">rusqlite</a> documentation:</p>\n\n<blockquote>\n  <p><code>Connection::open(path)</code> is equivalent to <code>Connection::open_with_flags(path, SQLITE_OPEN_READ_WRITE | SQLITE_OPEN_CREATE)</code>.</p>\n</blockquote>\n\n<p>I copied that into the the following simple code:</p>\n\n<pre><code>extern crate rusqlite;\nuse rusqlite::Connection;\n\nfn main() {\n    let path = \"/usr/local/data/mydb.sqlite\";\n    let conn = Connection::open_with_flags(path, SQLITE_OPEN_READ_WRITE | SQLITE_OPEN_CREATE);\n}\n</code></pre>\n\n<p>I actually want to replace those flags with <code>SQLITE_OPEN_READ_ONLY</code>, but figured this was a good place to start.</p>\n\n<p>I get the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0425]: cannot find value `SQLITE_OPEN_READ_WRITE` in this scope\n --&gt; src/main.rs:6:50\n  |\n6 |     let conn = Connection::open_with_flags(path, SQLITE_OPEN_READ_WRITE | SQLITE_OPEN_CREATE);\n  |                                                  ^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `SQLITE_OPEN_CREATE` in this scope\n --&gt; src/main.rs:6:75\n  |\n6 |     let conn = Connection::open_with_flags(path, SQLITE_OPEN_READ_WRITE | SQLITE_OPEN_CREATE);\n  |                                                                           ^^^^^^^^^^^^^^^^^^ not found in this scope\n</code></pre>\n\n<p>It seems I'm missing something like <code>use rusqlite::Something;</code>, but what is that something? I was unable to figure out.</p>\n\n<p>I have the following in my <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies.rusqlite]\nversion = \"0.13.0\"\nfeatures = [\"bundled\"]\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1518767450, "post_id": 48819445, "comment_id": 84647735, "body": "Congrats on reaching 100k :)"}], "answers": [{"tags": [], "owner": {"reputation": 130791, "user_id": 266795, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/3b59ae9a92deace346db01f415789f20?s=128&d=identicon&r=PG", "display_name": "Peter Lyons", "link": "https://stackoverflow.com/users/266795/peter-lyons"}, "is_accepted": true, "score": 2, "last_activity_date": 1518750604, "creation_date": 1518750604, "answer_id": 48819541, "question_id": 48819445, "link": "https://stackoverflow.com/questions/48819445/how-to-resolve-unused-parentheses-warnings-in-an-external-crate/48819541#48819541", "title": "How to resolve unused parentheses warnings in an external crate?", "body": "<p>Upgrading to <code>cargo 0.26.0-nightly (1d6dfea44 2018-01-26)</code> and <code>rustc 1.25.0-nightly (3ec5a99aa 2018-02-14)</code> seems to have removed these warnings.</p>\n"}], "owner": {"reputation": 130791, "user_id": 266795, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/3b59ae9a92deace346db01f415789f20?s=128&d=identicon&r=PG", "display_name": "Peter Lyons", "link": "https://stackoverflow.com/users/266795/peter-lyons"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 48819541, "answer_count": 1, "score": 1, "last_activity_date": 1518750685, "creation_date": 1518749804, "last_edit_date": 1518750685, "question_id": 48819445, "link": "https://stackoverflow.com/questions/48819445/how-to-resolve-unused-parentheses-warnings-in-an-external-crate", "title": "How to resolve unused parentheses warnings in an external crate?", "body": "<p><code>cargo build</code> is throwing warnings about unused parentheses in an external crate. I'd like to either</p>\n\n<ol>\n<li>send a PR to that crate to actually fix them or</li>\n<li>disable the warnings.</li>\n</ol>\n\n<p>I can't figure out how to use the <code>external-macro-backtrace</code> flag to pinpoint exactly what this warning is complaining about. The macros in play come from the <code>der_parser</code> crate.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  --&gt; src/private_key.rs:24:11\n   |\n24 |       match parse_der_sequence_defined!(\n   |  ___________^\n25 | |         input,\n26 | |         parse_der_integer, // version\n27 | |         parse_der_integer, // p\n...  |\n31 | |         parse_der_integer, // private_key\n32 | |     ) {\n   | |_____^ help: remove these parentheses\n   |\n   = note: #[warn(unused_parens)] on by default\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n\n<p>Note these warnings are printed on every build and my actual errors are a mile above them.</p>\n\n<p>I am using </p>\n\n<ul>\n<li>rustc 1.25.0-nightly (616b66dca 2018-02-02)</li>\n<li>cargo 0.26.0-nightly (1d6dfea44 2018-01-26)</li>\n</ul>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1518733659, "post_id": 48817194, "comment_id": 84638622, "body": "You haven&#39;t described what is <i>wrong</i> with the code you have. It would also be polite to <a href=\"https://stackoverflow.com/posts/48817194/edit\">edit</a> your question to provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> so that every possible answerer didn&#39;t have to divine what <code>url_serde</code> does (or decide if it&#39;s even needed to solve the core problem)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518734223, "post_id": 48817194, "comment_id": 84638844, "body": "The <a href=\"https://play.rust-lang.org/?gist=cbfadccf2dc1a3b4b4eb2279be2a4535&amp;version=stable\" rel=\"nofollow noreferrer\">duplicates applied to your example</a>. TL;DR: implement <code>serde::Deserialize</code> for your type, deserialize a <code>Url</code> (a.k.a. <code>String</code>) inside that implementation, then construct a new value of your type with an appropriate <code>PhantomData</code>."}], "owner": {"reputation": 388, "user_id": 3549270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1a4f7b5ad4e34ec42f3dfeb6961f911a?s=128&d=identicon&r=PG&f=1", "display_name": "konstin", "link": "https://stackoverflow.com/users/3549270/konstin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 504, "favorite_count": 0, "closed_date": 1518734140, "answer_count": 0, "score": 0, "last_activity_date": 1518734209, "creation_date": 1518732964, "last_edit_date": 1518734090, "question_id": 48817194, "link": "https://stackoverflow.com/questions/48817194/how-can-i-deserialize-a-value-into-a-struct-with-that-value-and-a-phantomdata-in", "closed_reason": "Duplicate", "title": "How can I deserialize a value into a struct with that value and a PhantomData in Serde?", "body": "<p>I need some extra type information on a URL, so I've created a <code>UrlWithPhantomdata</code> struct with a value field for the URL and a <code>PhantomData</code> field. How can I deserialize a string into this struct with Serde?</p>\n\n<p>More specifically, given this JSON object:</p>\n\n<pre><code>{\n  \"url\": \"https://example.com\"\n}\n</code></pre>\n\n<p>How can I deserialize it into the following <code>ApiData</code> struct?</p>\n\n<pre><code>#[derive(Deserialize)]\npub struct ApiData {\n    url: UrlWithPhantomdata&lt;i32&gt;\n}\n\n#[derive(Deserialize)]\npub struct UrlWithPhantomdata&lt;T&gt; {\n    #[serde(with = \"url_serde\")]\n    url_value: Url,\n    #[serde(skip)]\n    url_type: PhantomData&lt;T&gt;\n}\n</code></pre>\n\n<p>The more general problem is addressed in <a href=\"https://github.com/serde-rs/serde/issues/1048\" rel=\"nofollow noreferrer\">serde-rs/serde#1048</a>, but I'm looking for a solution that works until that bug is fixed.</p>\n"}, {"tags": ["reference", "rust", "closures"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1518705098, "post_id": 48809407, "comment_id": 84622491, "body": "Given your specific problem you could use <a href=\"https://doc.rust-lang.org/std/string/struct.String.html?search=#method.make_ascii_uppercase\" rel=\"nofollow noreferrer\"><code>String::make_ascii_uppercase</code></a> to implement <code>shout</code>"}], "answers": [{"comments": [{"owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "edited": false, "score": 0, "creation_date": 1518708151, "post_id": 48809617, "comment_id": 84624620, "body": "Cool, thanks. I just upvoted your old post. ;) Yes, I would like to avoid the closure, but it&#39;s not always <code>String</code> in my code, but also <code>json::JsonValue</code> and <code>std::str::Utf8Error</code>, so <code>map_err(String::as_str)</code> does not solve all my cases. Is there a possibility to create a generic higher-order function one could use as an adapter, like <code>res.map_err(adapt(shout)).unwrap_err()</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "edited": false, "score": 0, "creation_date": 1518708559, "post_id": 48809617, "comment_id": 84624883, "body": "@TobiasHermann I&#39;m not sure I&#39;m following you. You&#39;d like a function that takes both a <code>json::JsonValue</code> and a <code>std::str::Utf8Error</code>, converts them to a reference (to what, exactly? a <code>&amp;str</code>?) and then passes that to <code>shout</code>?"}, {"owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "edited": false, "score": 0, "creation_date": 1518709979, "post_id": 48809617, "comment_id": 84625836, "body": "Sorry, the <code>shout</code> function was just an example.  I&#39;d like to have a function <code>adapt</code> that takes one function <code>f : &amp;T -&gt; U</code> and returns a new function <code>g : T -&gt; U</code>. So <code>adapt : (&amp;T -&gt; U) -&gt; (T -&gt; U)</code>. This way we could solve <a href=\"https://play.rust-lang.org/?gist=9a8196c1a8a8b779992d4ad8d0b38456&amp;version=stable\" rel=\"nofollow noreferrer\">this</a> by doing something like <a href=\"https://play.rust-lang.org/?gist=601d74d350d55d21bcaff57b7190d510&amp;version=stable\" rel=\"nofollow noreferrer\">that</a>."}, {"owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "edited": false, "score": 0, "creation_date": 1518763698, "post_id": 48809617, "comment_id": 84646203, "body": "Nice, thanks. After <a href=\"https://play.rust-lang.org/?gist=5c799344eeaa6259ed2f7f2626b33a8a&amp;version=nightly\" rel=\"nofollow noreferrer\">implementing some traits</a>, is really works. However since this is for production code, I would like to use <code>stable</code>, and thus will go with the <a href=\"https://play.rust-lang.org/?gist=2a98f75adc5ad567a2938ba8d8947536&amp;version=stable\" rel=\"nofollow noreferrer\">closure solution</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1518724122, "last_edit_date": 1518724122, "creation_date": 1518705027, "answer_id": 48809617, "question_id": 48809407, "link": "https://stackoverflow.com/questions/48809407/how-can-i-use-a-function-as-a-closure-when-the-function-needs-to-take-a-referenc/48809617#48809617", "title": "How can I use a function as a closure when the function needs to take a reference to the closures argument?", "body": "<p>The best you can do is use a full closure:</p>\n\n<pre><code>res.map_err(|x| shout(&amp;x)).unwrap_err()\n</code></pre>\n\n<p>Your original form has two steps needed to be able to work:</p>\n\n<ol>\n<li>It needs to take the argument to the closure and convert it to a reference.</li>\n<li>It needs to convert the <code>&amp;String</code> to a <code>&amp;str</code>.</li>\n</ol>\n\n<p>Additionally, it needs to do both of those while the value is in scope, so that it doesn't end up with a dangling reference. Neither of these are things the \"short\" form of closures handles right now \u2014 the types must match exactly.</p>\n\n<p>If you <em>really</em> wanted to avoid the closure, you can for this specific case:</p>\n\n<pre><code>res.as_ref().map_err(String::as_str).map_err(shout).unwrap_err()\n//  ^~~~~~           ^~~~~~~~~~~~~~\n//  |                |\n//  |                |- Convert `&amp;String` to `&amp;str`\n//  |   \n//  |- Get a reference (`&amp;String`)   \n</code></pre>\n\n<p>I actually <a href=\"https://internals.rust-lang.org/t/ergonomics-initiative-discussion-allowing-owned-values-where-references-are-expected/5161/2\" rel=\"nofollow noreferrer\">argued for the ability for your original code to work</a> as part of the ergonomics initiative, but it did not seem to gain traction.</p>\n\n<hr>\n\n<p>Like many problems in programming, you can \"solve\" this by adding more abstraction. Here, we introduce a trait to embody the concept of \"an error that can be shouted\":</p>\n\n<pre><code>fn main() {\n    let e1 = Err::&lt;(), _&gt;(String::from(\"hi\"));\n    println!(\"{}\", e1.map_err(ShoutyError::shout).unwrap_err());\n\n    let e2 = Err::&lt;(), _&gt;(42);\n    println!(\"{}\", e2.map_err(ShoutyError::shout).unwrap_err());\n}\n\ntrait ShoutyError {\n    fn shout(self) -&gt; String;\n}\n\nimpl ShoutyError for String {\n    fn shout(self) -&gt; String {\n        self.to_ascii_uppercase()\n    }\n}\n\nimpl ShoutyError for i32 {\n    fn shout(self) -&gt; String {\n        format!(\"I YELL {}\", self)\n    }\n}\n</code></pre>\n\n<p>If you felt like you needed it, you could also have a wrapper function to keep the exact initial code:</p>\n\n<pre><code>fn shout&lt;E: ShoutyError&gt;(e: E) -&gt; String {\n    e.shout()\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>I'd like to have a function <code>adapt</code> that takes one function <code>f : &amp;T -&gt; U</code> and returns a new function <code>g : T -&gt; U</code>.</p>\n</blockquote>\n\n<p>This is possible, but only in nightly Rust:</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\n\nfn adapt&lt;F, T, U&gt;(f: F) -&gt; impl Fn(T) -&gt; U\nwhere\n    F: Fn(&amp;T) -&gt; U,\n{\n    move |arg| f(&amp;arg)\n}\n</code></pre>\n\n<p>Unfortunately, it doesn't solve your problem because <code>shout</code> doesn't accept a <code>&amp;String</code> and this would require <code>str</code> to be a <code>Sized</code> type.</p>\n\n<p>The more verbose solution involves <code>AsRef</code>:</p>\n\n<pre><code>#![feature(conservative_impl_trait)]\n\nfn adapt&lt;F, T1, T2, U&gt;(f: F) -&gt; impl Fn(T1) -&gt; U\nwhere\n    F: Fn(&amp;T2) -&gt; U,\n    T1: AsRef&lt;T2&gt;,\n    T2: ?Sized,\n{\n    move |arg| f(arg.as_ref())\n}\n</code></pre>\n"}], "owner": {"reputation": 7542, "user_id": 1866775, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/4K99R.jpg?s=128&g=1", "display_name": "Tobias Hermann", "link": "https://stackoverflow.com/users/1866775/tobias-hermann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 275, "favorite_count": 0, "accepted_answer_id": 48809617, "answer_count": 1, "score": 2, "last_activity_date": 1518724122, "creation_date": 1518704291, "last_edit_date": 1518704831, "question_id": 48809407, "link": "https://stackoverflow.com/questions/48809407/how-can-i-use-a-function-as-a-closure-when-the-function-needs-to-take-a-referenc", "title": "How can I use a function as a closure when the function needs to take a reference to the closures argument?", "body": "<p>The following code works (<code>cargo +nightly run</code>) fine:</p>\n\n<pre><code>fn main() {\n    let res: Result&lt;(), String&gt; = Err(String::from(\"hi\"));\n    println!(\"{}\", res.map_err(shout).unwrap_err())\n}\n\nfn shout(s: String) -&gt; String {\n    s.to_ascii_uppercase()\n}\n</code></pre>\n\n<p>Clippy (<code>cargo +nightly clippy</code>) spits out a (justified) warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: this argument is passed by value, but not consumed in the function body\n --&gt; src/main.rs:6:13\n  |\n6 | fn shout(s: String) -&gt; String {\n  |             ^^^^^^ help: consider changing the type to: `&amp;str`\n</code></pre>\n\n<p>Changing the code to the suggested version</p>\n\n<pre><code>fn shout(s: &amp;str) -&gt; String {\n    s.to_ascii_uppercase()\n}\n</code></pre>\n\n<p>results in a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0631]: type mismatch in function arguments\n --&gt; src/main.rs:3:24\n  |\n3 |     println!(\"{}\", res.map_err(shout).unwrap_err())\n  |                        ^^^^^^^ expected signature of `fn(std::string::String) -&gt; _`\n...\n6 | fn shout(s: &amp;str) -&gt; String {\n  | --------------------------- found signature of `for&lt;'r&gt; fn(&amp;'r str) -&gt; _`\n</code></pre>\n\n<p>What is the right way to react? Sure, I could simply do <code>#![cfg_attr(feature=\"clippy\", allow(needless_pass_by_value))]</code> but this feels wrong to me. Is there a way to use <code>map_err</code> with the version of <code>shout</code> taking a reference?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1518689546, "post_id": 48803558, "comment_id": 84611963, "body": "Do you have a reference for &quot;translates them directly to low-level operations&quot;? You could say it&#39;s obvious, as the trait implementations for the primitive types use the operators, and it would loop otherwise...)"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1518690106, "post_id": 48803558, "comment_id": 84612341, "body": "@Stefan <a href=\"https://doc.rust-lang.org/src/core/ops/arith.rs.html#92-98\" rel=\"nofollow noreferrer\">Here</a> is where Add is implemented for the primitive types. Note that the <i>definition</i> of <code>add</code> for those is <code>self + other</code>! Clearly, this <code>impl</code> isn&#39;t ever actually used by the compiler."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 8, "last_activity_date": 1518705929, "last_edit_date": 1518705929, "creation_date": 1518686082, "answer_id": 48803558, "question_id": 48803064, "link": "https://stackoverflow.com/questions/48803064/how-is-it-possible-that-ops-traits-are-not-in-scope/48803558#48803558", "title": "How is it possible that ops traits are not in scope?", "body": "<p>Your assumption is wrong. The compiler translates the operators to calls to the trait functions (except for primitives, where it translates them directly to low-level operations <sup>1</sup>), but the traits need not be in scope for that.</p>\n\n<p>Or, if you will, you can think of it that the compiler translates the operators to fully-qualified calls, i.e. <code>!some_condition</code> becomes <code>::std::ops::Not::not(some_condition)</code>, which obviously doesn't care about whether any use directives are in scope or not.</p>\n\n<hr>\n\n<p><strong>1.</strong> <a href=\"https://github.com/rust-lang/rust/blob/1.23.0/src/libcore/ops/arith.rs#L89-L102\" rel=\"nofollow noreferrer\">Here</a> is where <code>Add</code> is implemented for the primitive types. Note that the definition of <code>add</code> for those is <code>self + other</code>! Clearly, this impl isn't ever actually used by the compiler. </p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 48803558, "answer_count": 1, "score": 3, "last_activity_date": 1518705929, "creation_date": 1518684190, "question_id": 48803064, "link": "https://stackoverflow.com/questions/48803064/how-is-it-possible-that-ops-traits-are-not-in-scope", "title": "How is it possible that ops traits are not in scope?", "body": "<p>I personally dislike the lack of readability of <code>!</code> operator, so I prefer to use <code>.not()</code>.</p>\n\n<p>While (obviously) one can write something like this:</p>\n\n<pre><code>fn main() {\n    let some_condition = false;\n\n    if !some_condition {\n        println!(\"condition is false\");\n    }\n}\n</code></pre>\n\n<p>This does not work with <code>some_condition.not()</code> unless I import <code>std::ops::Not</code>. Why is it so? I thought that one can use operators in Rust because their trait are in scope. <code>!</code> is a shortcut to call the <code>not</code> method, is not it?</p>\n"}, {"tags": ["math", "rust", "calculus"], "comments": [{"owner": {"reputation": 45920, "user_id": 4996248, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/IUaWZ.jpg?s=128&g=1", "display_name": "John Coleman", "link": "https://stackoverflow.com/users/4996248/john-coleman"}, "edited": false, "score": 2, "creation_date": 1518659109, "post_id": 48798401, "comment_id": 84600561, "body": "If by <code>x</code> you mean the function <code>f(x) = x</code> then your output doesn&#39;t make sense. For one thing the trapezoidal error should be 0 for all delta since the area in question <i>is</i> the area of a trapezoid. Furthermore, with all of these functions, the Simpson error should be going to zero much, much faster than this. Whatever you have done with your implementation of those two methods, it doesn&#39;t work. I don&#39;t know enough Rust to say more. Why not see if you can reproduce the output of calculations that you do by hand? Floating point error doesn&#39;t explain this. You have a bug."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1518661276, "post_id": 48798401, "comment_id": 84601021, "body": "FWIW, you forgot to add back <code>a</code> in all three versions. Not sure what your real problem is, though -- why don&#39;t you try to make a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>?"}, {"owner": {"reputation": 302, "user_id": 3200443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d347baa5fe89b400ca0ccd60728c889?s=128&d=identicon&r=PG&f=1", "display_name": "Adam Gausmann", "link": "https://stackoverflow.com/users/3200443/adam-gausmann"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518662939, "post_id": 48798401, "comment_id": 84601391, "body": "@trentcl Could you elaborate on what &quot;add back <code>a</code>&quot; means? I&#39;ve never heard of that part of that formula. Also, thank you for the suggestion; I&#39;m working on an MCVE now."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1518678588, "post_id": 48798401, "comment_id": 84605848, "body": "Maybe take a look at my <code>FloatIterator</code>: <a href=\"https://stackoverflow.com/a/47869373/1478356\">stackoverflow.com/a/47869373/1478356</a>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518696052, "post_id": 48798401, "comment_id": 84616198, "body": "Yeah, I didn&#39;t express that very well.  Shepmaster&#39;s answer elaborates, but if you try integrating from 1.0 to 2.0 (or any interval that doesn&#39;t start at 0) it will do the wrong interval."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518697522, "post_id": 48798401, "comment_id": 84617170, "body": "Note that you&#39;re applying Simpson&#39;s rule with an interval twice as large as either of the other approximations, so you can&#39;t expect it to converge as quickly as if you were doing the textbook version."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1518665235, "post_id": 48799505, "comment_id": 84601893, "body": "I don&#39;t understand what&#39;s going on at <code>delta = 0.00001000</code>. My first guess is some floating point edge case, but I&#39;m still digging."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1518675383, "post_id": 48799505, "comment_id": 84604586, "body": "In floating point arithmetic (1-0)/0.00001 = 99999.99999999999, apparently. It is better to go from a number of intervals to a delta."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1518678537, "post_id": 48799505, "comment_id": 84605820, "body": "<code>let pos = (i as f64) &#47; (n as f64); let x = (1. - pos) * a + pos + b;</code> is probably more stable."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1518697092, "post_id": 48799505, "comment_id": 84616874, "body": "I think you&#39;ve <i>over</i>corrected the Riemann sum algorithm, because you&#39;re adding up <code>n + 1</code> things but only dividing by <code>n</code>. That one really should be <code>0..n</code>."}, {"owner": {"reputation": 302, "user_id": 3200443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d347baa5fe89b400ca0ccd60728c889?s=128&d=identicon&r=PG&f=1", "display_name": "Adam Gausmann", "link": "https://stackoverflow.com/users/3200443/adam-gausmann"}, "edited": false, "score": 0, "creation_date": 1518716612, "post_id": 48799505, "comment_id": 84630069, "body": "@Shepmaster I&#39;ve been having glitches at <code>delta = 0.00001</code> as well across several different functions, so I&#39;m inclined to believe that may be some kind of weird floating point thing. By instead stepping by powers of two, I have had no issues like that."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1518666521, "last_edit_date": 1518666521, "creation_date": 1518665002, "answer_id": 48799505, "question_id": 48798401, "link": "https://stackoverflow.com/questions/48798401/riemann-sums-are-converging-more-quickly-than-higher-order-polynomial-approximat/48799505#48799505", "title": "Riemann sums are converging more quickly than higher-order polynomial approximations", "body": "<p>Think <em>fencepost error</em>:</p>\n\n<pre><code>fn main() {\n    for i in 0..2 {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>0\n1\n</code></pre>\n\n<p>You are never evaluating the last delta, therefore you always have a missing chunk.</p>\n\n<p><a href=\"https://stackoverflow.com/q/43698191/155423\">The inclusive range operator in Rust is <code>..=</code>, but it's currently unstable</a>.</p>\n\n<p>Additionally, <a href=\"https://stackoverflow.com/questions/48798401/riemann-sums-are-converging-more-quickly-than-higher-order-polynomial-approximat/48799505#comment84601021_48798401\">as trentcl points out</a>, your functions never \"shift back\" to account for <code>a</code>. This doesn't matter in your case because <code>a</code> is always zero, but it's still incorrect:</p>\n\n<pre><code>pub fn sample_points(a: f64, b: f64, delta: f64) {\n    let n = ((b - a) / delta) as usize;\n\n    for i in (0..n).map(|i| (i as f64) * delta) {\n        println!(\"{}\", i);\n    }\n}\n\nfn main() {\n    sample_points(10.0, 11.0, 0.5);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>0\n0.5\n</code></pre>\n\n<hr>\n\n<p>Here's the code fixing the range syntax, adding the <code>a</code> back into the sampling points, and avoiding the need to collect into a temporary vector:</p>\n\n<pre><code>#![feature(inclusive_range_syntax)]\n\nextern crate itertools;\nuse itertools::Itertools;\n\npub fn riemann_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..=n)\n        .map(|i| a + (i as f64) * delta)\n        .map(f)\n        .sum::&lt;f64&gt;() / (n as f64)\n}\n\npub fn trapezoidal_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..=n)\n        .map(|i| a + (i as f64) * delta)\n        .map(f)\n        .tuple_windows()\n        .map(|(a, b)| a + b)\n        .sum::&lt;f64&gt;() / (2.0 * (n as f64))\n}\n\npub fn simpson_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..=n)\n        .map(|i| a + (i as f64) * delta)\n        .map(f)\n        .tuple_windows()\n        .map(|(a, m, b)| a + 4.0 * m + b)\n        .sum::&lt;f64&gt;() / (6.0 * (n as f64))\n}\n\nfn main() {\n    let start = 0.;\n    let end = 1.;\n    let f = |x| x;\n    let correct = 0.5;\n\n    for d in 0..=7 {\n        let delta = 10.0f64.powi(-d);\n        let r = riemann_avg(start, end, delta, &amp;f);\n        let t = trapezoidal_avg(start, end, delta, &amp;f);\n        let s = simpson_avg(start, end, delta, &amp;f);\n\n        println!(\n            \"{:+0.8} {:+0.8} {:+0.8} {:+0.8}\",\n            delta,\n            correct - r,\n            correct - t,\n            correct - s\n        );\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>+1.00000000 -0.50000000 +0.00000000 +0.50000000\n+0.10000000 -0.05000000 -0.00000000 +0.05000000\n+0.01000000 -0.00500000 +0.00000000 +0.00500000\n+0.00100000 -0.00050000 -0.00000000 +0.00050000\n+0.00010000 -0.00005000 -0.00000000 +0.00005000\n+0.00001000 +0.00000000 +0.00000500 +0.00001000\n+0.00000100 -0.00000050 -0.00000000 +0.00000050\n+0.00000010 -0.00000005 +0.00000000 +0.00000005\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1518699306, "post_id": 48802939, "comment_id": 84618399, "body": "You don&#39;t need the fake point if you swap <code>.tuples()</code> and <code>.tuple_windows()</code>. Then your closure argument becomes <code>((a, m), (m, b))</code>. On the other hand, perhaps <code>.tuple_windows().step(2).map(|(a, m, b)| ...)</code> would be even better."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1518700187, "post_id": 48802939, "comment_id": 84619006, "body": "@trentcl right, leads to even better results (I suspect <code>b + delta</code> was the problem)."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 6, "last_activity_date": 1518700353, "last_edit_date": 1518700353, "creation_date": 1518683672, "answer_id": 48802939, "question_id": 48798401, "link": "https://stackoverflow.com/questions/48798401/riemann-sums-are-converging-more-quickly-than-higher-order-polynomial-approximat/48802939#48802939", "title": "Riemann sums are converging more quickly than higher-order polynomial approximations", "body": "<p>As Shepmaster pointed out you need to take a close look how far your iterator walks.</p>\n\n<p><code>riemann_avg</code> needs to iterator over all <code>x</code> in <code>a ..= b</code>, but then uses the average between two points (dividing the sum of <code>n+1</code> elements by <code>n</code> would be wrong too)! (so basically <code>sum [ f(a+0.5*delta), f(a+1.5*delta), ..., f(b-delta/2) ]</code>)</p>\n\n<p><code>trapezoidal_avg</code> only needed to include the end point, otherwise fine.</p>\n\n<p><code>simpson_avg</code> was wrong on many levels.  According to <a href=\"https://en.wikipedia.org/wiki/Simpson%27s_rule#Composite_Simpson%27s_rule\" rel=\"nofollow noreferrer\">wikipedia: Composite Simpson's rule</a> you must not use all 3-tuple windows, only every second one; so you need an odd number of points, and at least 3.</p>\n\n<p>Also used my <code>FloatIterator</code> from <a href=\"https://stackoverflow.com/a/47869373/1478356\">https://stackoverflow.com/a/47869373/1478356</a>.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a71bd9862e38d09ed1bdf6c6c1ce93f1&amp;version=stable&amp;mode=release\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre><code>extern crate itertools;\nuse itertools::Itertools;\n\n/// produces: [ linear_interpol(start, end, i/steps) | i &lt;- 0..steps ]\n///\n/// linear_interpol(a, b, p) = (1 - p) * a + p * b\npub struct FloatIterator {\n    current: u64,\n    current_back: u64,\n    steps: u64,\n    start: f64,\n    end: f64,\n}\n\nimpl FloatIterator {\n    /// results in `steps` items\n    pub fn new(start: f64, end: f64, steps: u64) -&gt; Self {\n        FloatIterator {\n            current: 0,\n            current_back: steps,\n            steps: steps,\n            start: start,\n            end: end,\n        }\n    }\n\n    /// results in `length` items. To use the same delta as `new` increment\n    /// `length` by 1.\n    pub fn new_with_end(start: f64, end: f64, length: u64) -&gt; Self {\n        FloatIterator {\n            current: 0,\n            current_back: length,\n            steps: length - 1,\n            start: start,\n            end: end,\n        }\n    }\n\n    /// calculates number of steps from (end - start) / step\n    pub fn new_with_step(start: f64, end: f64, step: f64) -&gt; Self {\n        let steps = ((end - start) / step).abs().round() as u64;\n        Self::new(start, end, steps)\n    }\n\n    pub fn length(&amp;self) -&gt; u64 {\n        self.current_back - self.current\n    }\n\n    fn at(&amp;self, pos: u64) -&gt; f64 {\n        let f_pos = pos as f64 / self.steps as f64;\n        (1. - f_pos) * self.start + f_pos * self.end\n    }\n\n    /// panics (in debug) when len doesn't fit in usize\n    fn usize_len(&amp;self) -&gt; usize {\n        let l = self.length();\n        debug_assert!(l &lt;= ::std::usize::MAX as u64);\n        l as usize\n    }\n}\n\nimpl Iterator for FloatIterator {\n    type Item = f64;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.current &gt;= self.current_back {\n            return None;\n        }\n        let result = self.at(self.current);\n        self.current += 1;\n        Some(result)\n    }\n\n    fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;) {\n        let l = self.usize_len();\n        (l, Some(l))\n    }\n\n    fn count(self) -&gt; usize {\n        self.usize_len()\n    }\n}\n\nimpl DoubleEndedIterator for FloatIterator {\n    fn next_back(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.current &gt;= self.current_back {\n            return None;\n        }\n        self.current_back -= 1;\n        let result = self.at(self.current_back);\n        Some(result)\n    }\n}\n\nimpl ExactSizeIterator for FloatIterator {\n    fn len(&amp;self) -&gt; usize {\n        self.usize_len()\n    }\n}\n\npub fn riemann_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n    let n = n.max(1);\n\n    // start with:\n    // [a, a+delta, ..., b-delta, b]\n    // then for all neighbors (x, y) sum up f((x+y)/2)\n\n    FloatIterator::new_with_end(a, b, n as u64 + 1)\n        .tuple_windows()\n        .map(|(a, b)| 0.5 * (a + b))\n        .map(f)\n        .sum::&lt;f64&gt;() / (n as f64)\n}\n\npub fn trapezoidal_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n    let n = n.max(1);\n\n    // start with:\n    // [a, a+delta, ..., b-delta, b]\n    // then for all neighbors (x, y) sum up f((x+y)/2)\n\n    FloatIterator::new_with_end(a, b, n as u64 + 1)\n        .map(f)\n        .tuple_windows()\n        .map(|(a, b)| a + b)\n        .sum::&lt;f64&gt;() / (2.0 * (n as f64))\n}\n\npub fn simpson_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64,\n{\n    let n = ((b - a) / delta) as usize;\n    let n = n.max(2); // need at least 3 points in the iterator\n    let n = n + (n % 2); // need odd number of points in iterator\n\n    FloatIterator::new_with_end(a, b, n as u64 + 1)\n        .map(f)\n        .tuple_windows()\n        .step(2)\n        .map(|(a, m, b)| a + 4.0 * m + b)\n        .sum::&lt;f64&gt;() / (3.0 * (n as f64))\n}\n\nfn compare&lt;F, G&gt;(a: f64, b: f64, f: F, g: G)\nwhere\n    F: Fn(f64) -&gt; f64,\n    G: Fn(f64) -&gt; f64,\n{\n    let correct = g(b) - g(a);\n    println!(\"Expected result: {:0.10}\", correct);\n    println!(\n        \"{:13} {:13} {:13} {:13}\",\n        \"delta\", \"riemann_err\", \"trapez_err\", \"simpson_err\"\n    );\n    for d in 0..8 {\n        let delta = 10.0f64.powi(-d);\n        let r = riemann_avg(a, b, delta, &amp;f);\n        let t = trapezoidal_avg(a, b, delta, &amp;f);\n        let s = simpson_avg(a, b, delta, &amp;f);\n\n        println!(\n            \"{:+0.10} {:+0.10} {:+0.10} {:+0.10}\",\n            delta,\n            correct - r,\n            correct - t,\n            correct - s,\n        );\n    }\n}\n\nfn main() {\n    let start = 0.;\n    let end = 1.;\n\n    println!(\"f(x) = atan(x)\");\n    compare(\n        start,\n        end,\n        |x| x.atan(),\n        |x| x * x.atan() - 0.5 * (1. + x * x).ln(),\n    );\n\n    println!(\"\");\n\n    println!(\"f(x) = x^4\");\n    compare(start, end, |x| x.powi(4), |x| 0.2 * x.powi(5));\n\n    println!(\"\");\n\n    println!(\"f(x) = x\");\n    compare(start, end, |x| x, |x| 0.5 * x * x);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>f(x) = atan(x)\nExpected result: 0.4388245731\ndelta         riemann_err   trapez_err    simpson_err  \n+1.0000000000 -0.0248230359 +0.0461254914 -0.0011735268\n+0.1000000000 -0.0002086380 +0.0004170148 -0.0000014072\n+0.0100000000 -0.0000020834 +0.0000041667 -0.0000000001\n+0.0010000000 -0.0000000208 +0.0000000417 -0.0000000000\n+0.0001000000 -0.0000000002 +0.0000000004 +0.0000000000\n+0.0000100000 -0.0000000000 +0.0000000000 -0.0000000000\n+0.0000010000 -0.0000000000 +0.0000000000 -0.0000000000\n+0.0000001000 +0.0000000000 +0.0000000000 -0.0000000000\n\nf(x) = x^4\nExpected result: 0.2000000000\ndelta         riemann_err   trapez_err    simpson_err  \n+1.0000000000 +0.1375000000 -0.3000000000 -0.0083333333\n+0.1000000000 +0.0016637500 -0.0033300000 -0.0000133333\n+0.0100000000 +0.0000166664 -0.0000333330 -0.0000000013\n+0.0010000000 +0.0000001667 -0.0000003333 -0.0000000000\n+0.0001000000 +0.0000000017 -0.0000000033 +0.0000000000\n+0.0000100000 +0.0000000000 -0.0000000000 -0.0000000000\n+0.0000010000 +0.0000000000 -0.0000000000 -0.0000000000\n+0.0000001000 +0.0000000000 +0.0000000000 +0.0000000000\n\nf(x) = x\nExpected result: 0.5000000000\ndelta         riemann_err   trapez_err    simpson_err  \n+1.0000000000 +0.0000000000 +0.0000000000 +0.0000000000\n+0.1000000000 -0.0000000000 -0.0000000000 -0.0000000000\n+0.0100000000 +0.0000000000 +0.0000000000 +0.0000000000\n+0.0010000000 +0.0000000000 +0.0000000000 +0.0000000000\n+0.0001000000 -0.0000000000 -0.0000000000 +0.0000000000\n+0.0000100000 -0.0000000000 -0.0000000000 +0.0000000000\n+0.0000010000 -0.0000000000 -0.0000000000 +0.0000000000\n+0.0000001000 +0.0000000000 +0.0000000000 -0.0000000000\n</code></pre>\n"}], "owner": {"reputation": 302, "user_id": 3200443, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4d347baa5fe89b400ca0ccd60728c889?s=128&d=identicon&r=PG&f=1", "display_name": "Adam Gausmann", "link": "https://stackoverflow.com/users/3200443/adam-gausmann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 0, "accepted_answer_id": 48802939, "answer_count": 2, "score": 7, "last_activity_date": 1518700353, "creation_date": 1518654482, "last_edit_date": 1518662859, "question_id": 48798401, "link": "https://stackoverflow.com/questions/48798401/riemann-sums-are-converging-more-quickly-than-higher-order-polynomial-approximat", "title": "Riemann sums are converging more quickly than higher-order polynomial approximations", "body": "<p>I'm having some issues with the experimental results of my function implementations, and I would like others to verify that the functions that I'm using are logically sound.</p>\n\n<p><strong>Context:</strong> For a certain programming/math problem, I need to calculate an average across a continuous interval to a given precision of 10 decimal places. The function is rather complicated and involves two dimensions, so I would prefer performing a sum approximation over calculating a continuous average (and therefore having to integrate the function in both dimensions) myself.</p>\n\n<p>To help me out, I have been working on a set of approximation functions in Rust. They compute discrete averages of the function <code>f</code> across an interval <code>a..b</code> with a fixed increment <code>delta</code> using Riemann sums, the trapezoidal rule, or Simpson's rule, depending on the implementation:</p>\n\n<pre><code>pub fn riemann_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..n)\n        .map(|i| (i as f64) * delta)\n        .map(f)\n        .sum::&lt;f64&gt;() / (n as f64)\n}\n\n\npub fn trapezoidal_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..n)\n        .map(|i| (i as f64) * delta)\n        .map(f)\n        .collect::&lt;Vec&lt;f64&gt;&gt;()\n        .windows(2)\n        .map(|xs| xs[0] + xs[1])\n        .sum::&lt;f64&gt;() / (2.0 * (n as f64))\n}\n\n\npub fn simpson_avg&lt;F&gt;(a: f64, b: f64, delta: f64, f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64\n{\n    let n = ((b - a) / delta) as usize;\n\n    (0..n)\n        .map(|i| (i as f64) * delta)\n        .map(f)\n        .collect::&lt;Vec&lt;f64&gt;&gt;()\n        .windows(3)\n        .map(|xs| xs[0] + 4.0 * xs[1] + xs[2])\n        .sum::&lt;f64&gt;() / (6.0 * (n as f64))\n}\n</code></pre>\n\n<p>(Side note: The <code>simpson_avg</code> function I've written above is actually an average over two offset applications of Simpson's rule, since it makes the program less complex. Currently, I don't believe that this is a part of the issue.)</p>\n\n<p>I tested each method's error convergence as I brought <code>delta</code> closer to zero, using several functions <code>x.atan()</code>, <code>x.powi(4)</code>, <code>x</code> with the bounds of integration set from 0.0 to 1.0.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>delta        riemann_err  trap_err     simpson_err\n             (smaller is better)\n\nx.atan():\n0.1000000000 0.0396869230 0.0763276780 0.1136616747\n0.0100000000 0.0039311575 0.0078330229 0.0117430951\n0.0010000000 0.0003927407 0.0007851897 0.0011777219\n0.0001000000 0.0000392703 0.0000785377 0.0001178060\n0.0000100000 0.0000073928 0.0000113197 0.0000152467\n0.0000010000 0.0000003927 0.0000007854 0.0000011781\n0.0000001000 0.0000000393 0.0000000785 0.0000001178\n\nx.powi(4):\n0.1000000000 0.0466700000 0.0794750000 0.1081733333\n0.0100000000 0.0049666670 0.0097696470 0.0145089140\n0.0010000000 0.0004996667 0.0009976697 0.0014950090\n0.0001000000 0.0000499967 0.0000999767 0.0001499500\n0.0000100000 0.0000129997 0.0000179993 0.0000229989\n0.0000010000 0.0000005000 0.0000010000 0.0000015000\n0.0000001000 0.0000000500 0.0000001000 0.0000001500\n\nx:\n0.1000000000 0.0500000000 0.0950000000 0.1400000000\n0.0100000000 0.0050000000 0.0099500000 0.0149000000\n0.0010000000 0.0005000000 0.0009995000 0.0014990000\n0.0001000000 0.0000500000 0.0000999950 0.0001499900\n0.0000100000 0.0000100000 0.0000149999 0.0000199999\n0.0000010000 0.0000005000 0.0000010000 0.0000015000\n0.0000001000 0.0000000500 0.0000001000 0.0000001500\n</code></pre>\n\n<p>I expected Simpson's rule to converge the fastest out of all of these functions, but as you can see, it had the worst convergence rate, with Riemann sums performing the best.</p>\n\n<p>To me, this makes no sense, especially with the simple polynomial examples where Simpson's rule clearly would provide a better (or at least equivalent) approximation. I'm guessing this means that there is either a very subtle problem with my function logic/formula, or I'm running into a floating-point precision error. I would love some help in diagnosing this problem.</p>\n"}]