[{"tags": ["arrays", "vector", "iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 11, "last_activity_date": 1437001422, "creation_date": 1437001422, "answer_id": 31442714, "question_id": 31442254, "link": "https://stackoverflow.com/questions/31442254/take-an-iterator-instead-of-vec-when-possible/31442714#31442714", "title": "Take an `Iterator` instead of `Vec` when possible?", "body": "<p>Such a function as you describe should typically generically take an <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html\"><code>IntoIterator&lt;Item = T&gt;</code></a>; thus it can accept both <code>Iterator&lt;T&gt;</code> and <code>Vec&lt;T&gt;</code> as input.</p>\n\n<p>This can be combined with other techniques, too; for example, this method <code>concat</code> will accept a <code>&amp;[&amp;str]</code> (and thus <code>&amp;Vec&lt;&amp;str&gt;</code> by auto deref/ref coercion), <code>&amp;[String]</code> (and thus <code>&amp;Vec&lt;String&gt;</code>), a <code>&amp;str</code> iterator, a <code>String</code> iterator, <em>et cetera</em>:</p>\n\n<pre><code>use std::borrow::Borrow;\n\nfn concat&lt;T: Borrow&lt;str&gt;, Iter: IntoIterator&lt;Item = T&gt;&gt;(iter: Iter) -&gt; String {\n    iter.into_iter()  // -&gt; impl Iterator&lt;Item = T&gt;\n        .map(|s| s.borrow()) // -&gt; impl Iterator&lt;Item = &amp;str&gt;\n        .collect()  // -&gt; String\n}\n</code></pre>\n\n<p>(This specific example would actually typically be better suited to <a href=\"http://doc.rust-lang.org/std/slice/trait.SliceConcatExt.html\"><code>SliceConcatExt</code></a>, because it\u2019s able to calculate how long the final result will be up front and thus allocate the right length string all at once. But it\u2019s just a proof of the concept and how multiple fancy techniques can be combined.)</p>\n"}], "owner": {"reputation": 2376, "user_id": 2979958, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/0837352343df3dd5f20807418f7321ef?s=128&d=identicon&r=PG&f=1", "display_name": "Kapichu", "link": "https://stackoverflow.com/users/2979958/kapichu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 94, "favorite_count": 0, "answer_count": 1, "score": 10, "last_activity_date": 1437001422, "creation_date": 1436999008, "question_id": 31442254, "link": "https://stackoverflow.com/questions/31442254/take-an-iterator-instead-of-vec-when-possible", "title": "Take an `Iterator` instead of `Vec` when possible?", "body": "<p>When a function takes a series of values as a parameter, is it considered good style to accept an <code>Iterator&lt;T&gt;</code> instead of <code>Vec&lt;T&gt;</code>?  </p>\n\n<p>This way, the caller can decide on their own how the series is stored (inside a <code>Vec</code>, a <code>[T; N]</code> or anything else, actually an <code>Option&lt;T&gt;</code> should be possible!). Also, this eliminates the need to convert the whatever you have into a <code>Vec</code>, and also, after applying some Iterator modifiers, no <code>.collect()</code> is needed! So it should also be faster!</p>\n\n<p>Am I missing something or is this the way it should be done?</p>\n"}, {"tags": ["compilation", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1436990660, "creation_date": 1436990660, "answer_id": 31439979, "question_id": 31439800, "link": "https://stackoverflow.com/questions/31439800/why-does-rust-hello-world-try-to-read-proc-and-sys/31439979#31439979", "title": "Why does Rust hello world try to read /proc and /sys", "body": "<p>I believe this is a <a href=\"https://github.com/rust-lang/rust/issues/22642\" rel=\"nofollow\">known issue</a>. According to Alex Crichton:</p>\n\n<blockquote>\n  <p>it looks like <a href=\"https://github.com/rust-lang/rust/blob/f0f7ca27de6b4e03f30012656dad270cda55a363/src/libstd/sys/unix/thread.rs#L89\" rel=\"nofollow\">the failure in question</a> is our detection of the stack start of the main thread in setting up the first guard page. I forget how reliable it is that linux sets up a guard page for us, and it would be tough to remove for now at least.</p>\n</blockquote>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 322, "favorite_count": 0, "accepted_answer_id": 31439979, "answer_count": 1, "score": 4, "last_activity_date": 1436990660, "creation_date": 1436990016, "question_id": 31439800, "link": "https://stackoverflow.com/questions/31439800/why-does-rust-hello-world-try-to-read-proc-and-sys", "title": "Why does Rust hello world try to read /proc and /sys", "body": "<p>I have the need of running a Rust executable (made with <code>cargo build --release</code>) inside a chroot. Normally, I just copy the files reported by ldd</p>\n\n<pre><code>$ldd hello_world_rust\nlinux-vdso.so.1 (0x00007ffef48c6000)\nlibdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007f3224c3e000)\nlibpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007f3224a21000)\nlibrt.so.1 =&gt; /usr/lib/librt.so.1 (0x00007f3224819000)\nlibgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f3224603000)\nlibc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f3224261000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f3224e42000)\nlibm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f3223f5d000)\n</code></pre>\n\n<p>But my Rust programs crashes when run inside the jail</p>\n\n<pre><code>thread '&lt;unnamed&gt;' panicked at 'assertion failed: `(left == right)` (left: `2`, right: `0`)', /build/rust/src/rustc-1.1.0/src/libstd/sys/unix/thread.rs:204\nfatal runtime error: Could not unwind stack, error = 5\nIllegal instruction (core dumped)\n</code></pre>\n\n<p>When checking things with strace (inside the jail) I noticed the following </p>\n\n<pre><code>strace -e file hello_world_rust\n.... 14 lines of loading dynlibs cut\nreadlink(\"/etc/je_malloc.conf\", 0x7fff7c2ed380, 4096) = -1 ENOENT (No such file or directory)\nopen(\"/sys/devices/system/cpu/online\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/proc/stat\", O_RDONLY|O_CLOEXEC)  = -1 ENOENT (No such file or directory)\nopen(\"/proc/cpuinfo\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nopen(\"/proc/self/maps\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n</code></pre>\n\n<p>I believe the crash occurs because there are no /proc and /sys inside the chroot.</p>\n\n<p>Is my belief correct? If so, why are they necessary? Is there a way I can compile my rust program so that it does not need /sys and /proc?</p>\n"}, {"tags": ["types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 9, "last_activity_date": 1436964301, "creation_date": 1436964301, "answer_id": 31430776, "question_id": 31430067, "link": "https://stackoverflow.com/questions/31430067/how-to-write-a-function-generic-over-pointer-type/31430776#31430776", "title": "How to write a function generic over pointer type?", "body": "<p>Both <code>&amp;T</code> and <code>P&lt;T&gt;</code> implement <code>Deref&lt;Target = T&gt;</code>, so you could use that in your bounds:</p>\n\n<pre><code>use std::ops::Deref;\n\nfn over&lt;X, F, X1, X2&gt;(left: &amp;[X1], right: &amp;[X2], mut eq_fn: F) -&gt; bool \n        where X1: Deref&lt;Target = X&gt;,\n              X2: Deref&lt;Target = X&gt;,\n              F: FnMut(&amp;X, &amp;X) -&gt; bool {\n    left.len() == right.len() &amp;&amp; left.iter().zip(right).all(|(x, y)| \n        eq_fn(x, y))\n}\n</code></pre>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 391, "favorite_count": 0, "accepted_answer_id": 31430776, "answer_count": 1, "score": 5, "last_activity_date": 1436965862, "creation_date": 1436962277, "last_edit_date": 1436965862, "question_id": 31430067, "link": "https://stackoverflow.com/questions/31430067/how-to-write-a-function-generic-over-pointer-type", "title": "How to write a function generic over pointer type?", "body": "<p>In <a href=\"https://github.com/Manishearth/rust-clippy\" rel=\"nofollow\">rust-clippy</a>, we have the <a href=\"https://github.com/Manishearth/rust-clippy/blob/a24475093954141168d30ef510f20171db4843ac/src/eq_op.rs#L241\" rel=\"nofollow\">following</a> function:</p>\n\n<pre><code>fn over&lt;X, F&gt;(left: &amp;[X], right: &amp;[X], mut eq_fn: F) -&gt; bool \n        where F: FnMut(&amp;X, &amp;X) -&gt; bool {\n    left.len() == right.len() &amp;&amp; left.iter().zip(right).all(|(x, y)| \n        eq_fn(x, y))\n}\n</code></pre>\n\n<p>As it happens, <code>rustc</code>'s AST representation uses a lot of <code>syntax::ptr::P&lt;T&gt;</code> pointers. Those dereference to T, and so autoderef implicitly coerces them to <code>&amp;T</code> if we use a closure. If we try to use a plain <code>fn</code> however, we get a type mismatch:</p>\n\n<p><code>error: type mismatch: the type `fn(&amp;syntax::ast::Expr, &amp;syntax::ast::Expr) -&gt; bool {eq_op::is_exp_equal}` implements the trait `for&lt;'r, 'r&gt; core::ops::FnMut&lt;(&amp;'r syntax::ast::Expr, &amp;'r syntax::ast::Expr)&gt;`, but the trait `for&lt;'r, 'r&gt; core::ops::FnMut&lt;(&amp;'r syntax::ptr::P&lt;syntax::ast::Expr&gt;, &amp;'r syntax::ptr::P&lt;syntax::ast::Expr&gt;)&gt;` is required (expected struct `syntax::ptr::P`, found struct `syntax::ast::Expr`) [E0281]</code></p>\n\n<p>Can I change the above function to accept both <code>&amp;[&amp;T]</code> and <code>&amp;[P&lt;T&gt;]</code> and automatically coerce <code>P&lt;Expr&gt;</code> into <code>&amp;Expr</code>? If so, how?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436947305, "post_id": 31424361, "comment_id": 50820945, "body": "<code>Box</code> doesn&#39;t implement the <code>Fn</code> trait, that might be the reason"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436947561, "post_id": 31424361, "comment_id": 50821100, "body": "you can fix the <code>apply</code> function by requiring <code>Deref&lt;Fn(I) -&gt; i32&gt;</code>: <a href=\"http://is.gd/SRDLx7\" rel=\"nofollow noreferrer\">is.gd/SRDLx7</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436947701, "post_id": 31424361, "comment_id": 50821182, "body": "@ker, that&#39;s strange, aren&#39;t trait objects automatically implement the trait they are formed from? I thought that was one of the main reasons for making <code>Self</code> unsized by default. The variant with <code>Deref</code> is really nice anyway."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1436948931, "post_id": 31424361, "comment_id": 50821873, "body": "yea I think the only &quot;real&quot; trait objects left in Rust are <code>&amp;Trait</code>"}, {"owner": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "edited": false, "score": 0, "creation_date": 1437017621, "post_id": 31424361, "comment_id": 50858706, "body": "Thanks for the wisdom, guys. The use of Deref is pretty slick, although you still need 2 impl&#39;s for apply, right (one with Deref for Boxed closures, one without for normal functions which do not impl Deref)? I say this as just <a href=\"http://is.gd/yMEDDp\" rel=\"nofollow noreferrer\">a Deref impl</a> doesn&#39;t seem to work. Unless I&#39;m thinking about this wrong."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "edited": false, "score": 0, "creation_date": 1437023890, "post_id": 31424361, "comment_id": 50860404, "body": "@AlexOzdemir, hm, indeed, looks like it. This whole thing seems very strange to me anyway, I have expected that your original apply would work for trait objects as well. Maybe it is worth to open a ticket in Rust issue tracker,"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1436950497, "last_edit_date": 1436950497, "creation_date": 1436946271, "answer_id": 31424361, "question_id": 31423526, "link": "https://stackoverflow.com/questions/31423526/generic-specific-functions-in-structures/31424361#31424361", "title": "Generic &amp; Specific Functions in Structures", "body": "<p>Unboxed closures in Rust are implemented as anonymous types implementing certain traits. \"Anonymous\" means, naturally, that they can't be named - and so it is impossible (<a href=\"https://github.com/rust-lang/rfcs/issues/518\" rel=\"nofollow\">at least now</a>) to return unboxed closures by value from functions.</p>\n\n<p>There are two ways for you to solve this particular problem. First, because your closure in <code>mini()</code> does not capture anything, you can use regular functions:</p>\n\n<pre><code>impl Apply&lt;fn(i32) -&gt; i32, i32&gt; {\n    fn mini1(i: i32) -&gt; Apply&lt;fn(i32) -&gt; i32, i32&gt; {\n        fn add_one(x: i32) -&gt; i32 { x + 1 }\n        Apply::new(add_one, i)\n    }\n}\n</code></pre>\n\n<p>Second, if you do need to use capturing closures, you have to use <code>Box</code>:</p>\n\n<pre><code>impl Apply&lt;Box&lt;Fn(i32) -&gt; i32&gt;, i32&gt; {\n    fn mini2(i: i32) -&gt; Apply&lt;Box&lt;Fn(i32) -&gt; i32&gt;, i32&gt; {\n        Apply::new(Box::new(|x| x + 1), i)\n    }\n}\n</code></pre>\n\n<p>I'm not sure why, but for this to work I had to implement <code>apply2()</code> method specifically for boxes (which really looks like a bug to me):</p>\n\n<pre><code>impl&lt;I&gt; Apply&lt;Box&lt;Fn(I) -&gt; i32&gt;, I&gt; {\n    fn apply2(self) -&gt; i32 {\n        (self.f)(self.i)\n    }\n}\n</code></pre>\n\n<p>(try it all <a href=\"https://play.rust-lang.org/?gist=f71ed2eb58dd0b658e19&amp;version=stable\" rel=\"nofollow\">here</a>)</p>\n\n<p><strong>Update:</strong> <a href=\"http://is.gd/SRDLx7\" rel=\"nofollow\">here</a> is a link to code by @ker which doesn't require the second <code>apply</code> method. It uses a nice trick with <code>Deref</code> to allow <code>apply()</code> to be used with boxed trait objects.</p>\n"}], "owner": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 31424361, "answer_count": 1, "score": 0, "last_activity_date": 1437014102, "creation_date": 1436943645, "last_edit_date": 1437014102, "question_id": 31423526, "link": "https://stackoverflow.com/questions/31423526/generic-specific-functions-in-structures", "title": "Generic &amp; Specific Functions in Structures", "body": "<p>I've been struggling with building a class which holds a user inputted function. While I can actually get that to work on its own, the trouble arises when I try to provide a creation method which uses a default function. A toy example illustrating the problem is shown below, and can be found at this <a href=\"http://is.gd/rOa00B\" rel=\"nofollow\" title=\"Playground Link\">Playground Link</a></p>\n\n<pre><code>fn main() {\n    let a = Apply::mini(2);\n    println!(\"{}\", a.apply());\n}`\n\nstruct Apply&lt;F, I&gt; {\n    f: F,\n    i: I,\n}\n\nimpl&lt;F, I&gt; Apply&lt;F, I&gt; {\n    fn new(f: F, i: I) -&gt; Apply&lt;F, I&gt; {\n        Apply{ f: f, i: i }\n    }\n}\n\nimpl&lt;F, I&gt; Apply&lt;F, I&gt; where F: Fn(I) -&gt; i32 {\n    fn apply(self) -&gt; i32 {\n        (self.f)(self.i)\n    }\n}\n\nimpl Apply&lt;Fn(i32) -&gt; i32, i32&gt; {\n    fn mini(i: i32) -&gt; Apply&lt;Fn(i32) -&gt; i32, i32&gt; {\n        Apply::new(|x| x + 1, i)\n    }\n}\n</code></pre>\n\n<p>This implementation rightfully complains that a Fn(i32) -> i32 is unsized. The only way I can think of to circumvent that is to pull it out as a type parameter, but that doesn't seem to work either.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436966065, "post_id": 31423174, "comment_id": 50833218, "body": "Why should this question not be marked as a duplicate of <a href=\"http://stackoverflow.com/q/21152429/155423\">this one</a>, <a href=\"http://stackoverflow.com/q/30441456/155423\">this one</a>, <a href=\"http://stackoverflow.com/q/22268861/155423\">this one</a>, <a href=\"http://stackoverflow.com/q/27750985/155423\">this one</a>, or <a href=\"http://stackoverflow.com/q/26434364/155423\">this one</a>?"}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436956238, "post_id": 31424407, "comment_id": 50826478, "body": "Pointers in a linked list are \u201cbounds checked\u201d by <i>is it None</i>, indexes bounds checked by <code>&lt; v.len()</code>, so either is just one operation. I can see that the null check is simpler though."}, {"owner": {"reputation": 1000, "user_id": 2976057, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f806a0bb679720c8c0844bbffef18b06?s=128&d=identicon&r=PG&f=1", "display_name": "degs", "link": "https://stackoverflow.com/users/2976057/degs"}, "edited": false, "score": 0, "creation_date": 1437009219, "post_id": 31424407, "comment_id": 50856549, "body": "Excellent answer, thanks. Regarding the ownership issue: my understanding of my original code was that root would become the owner of the very first node, with prev being a mutable reference (a borrow) of that node. Subsequent iterations would have prev.next becoming the owner of the newly-created node, with prev again being a mutable reference (a borrow) to that node. Where have I gone wrong?"}, {"owner": {"reputation": 1000, "user_id": 2976057, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f806a0bb679720c8c0844bbffef18b06?s=128&d=identicon&r=PG&f=1", "display_name": "degs", "link": "https://stackoverflow.com/users/2976057/degs"}, "edited": false, "score": 0, "creation_date": 1437011089, "post_id": 31424407, "comment_id": 50857098, "body": "Ah, I see my problem. &#39;next&#39; is &lt;Option&lt;&amp;mut Box&lt;Node&gt;&gt; - i.e. an optional mutable reference to a boxed Node. This means a) there&#39;s no owner for it and b) every &amp;mut reference to it will try to mutably borrow a mutable borrow (bad!). What I wanted was an optional ownership of a boxed Node - so, &lt;Option&lt;Box&lt;Node&gt;&gt;. Then I can mutably borrow a reference to it as I need."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1436946433, "creation_date": 1436946433, "answer_id": 31424407, "question_id": 31423174, "link": "https://stackoverflow.com/questions/31423174/creating-a-simple-linked-list/31424407#31424407", "title": "Creating a simple linked list", "body": "<p>First of all, you should probably make sure you've read and understood the Rust Book chapters on <a href=\"http://doc.rust-lang.org/book/ownership.html\">Ownership</a> and <a href=\"http://doc.rust-lang.org/book/references-and-borrowing.html\">References and Borrowing</a>.  Your immediate problem is that you're borrowing things that aren't <em>owned</em> by anything, and will thus just disappear.  You also have other problems like trying to mutate through an immutable pointer.</p>\n\n<p>Let's get something that does, at least, work:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let v = vec![1,5,3,8,12,56,1230,2,1];\n    let mut root: Option&lt;Box&lt;Node&gt;&gt; = None;\n\n    for i in v.into_iter().rev() {\n        root = Some(Box::new(Node { value: i, next: root }));\n    }\n\n    println!(\"root: {}\",\n        root.map(|n| n.to_string()).unwrap_or(String::from(\"None\")));\n}\n\nstruct Node {\n    value: i32,\n    next: Option&lt;Box&lt;Node&gt;&gt;,\n}\n\nimpl std::fmt::Display for Node {\n    fn fmt(&amp;self, fmt: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n        let mut cur = Some(self);\n        let mut first = true;\n        try!(write!(fmt, \"[\"));\n        while let Some(node) = cur {\n            if !first { try!(write!(fmt, \", \")); }\n            first = false;\n            try!(write!(fmt, \"{}\", node.value));\n            cur = node.next.as_ref().map(|n| &amp;**n);\n        }\n        try!(write!(fmt, \"]\"));\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>This constructs a list and shows how you can iteratively display it.  Note the complete lack of borrows in the construction code.</p>\n\n<p>I <em>have</em> cheated somewhat, in that I've iterated the vector backwards to construct the list.</p>\n\n<p>The problem with the original code is that, even if you strip out everything that isn't necessary, down to something like this:</p>\n\n<pre><code>let v = vec![1,5,3,8,12,56,1230,2,1];\nlet mut v = v.into_iter();\n\nlet mut root: Option&lt;Box&lt;Node&gt;&gt; = None;\nif let Some(i) = v.next() {\n    root = Some(Box::new(Node { value: i, next: None }));\n    let mut prev: &amp;mut Box&lt;Node&gt; = root.as_mut().unwrap();\n\n    for i in v {\n        let curr = Some(Box::new(Node { value: i, next: None }));\n        prev.next = curr;\n        prev = prev.next.as_mut().unwrap();\n    }\n}\n</code></pre>\n\n<p>You still end up in a situation where the compiler sees you mutating a thing you've borrowed by a second path.  It's not quite smart enough to realise that re-assigning <code>prev</code> doesn't <em>actually</em> create any aliases.  On the other hand, if you break the loop into an <em>equivalent</em> recursion:</p>\n\n<pre><code>if let Some(i) = v.next() {\n    root = Some(Box::new(Node { value: i, next: None }));\n\n    fn step&lt;It&gt;(prev: &amp;mut Box&lt;Node&gt;, mut v: It) where It: Iterator&lt;Item=i32&gt; {\n        if let Some(i) = v.next() {\n            let curr = Some(Box::new(Node { value: i, next: None }));\n            prev.next = curr;\n            step(prev.next.as_mut().unwrap(), v)\n        }\n    }\n\n    step(root.as_mut().unwrap(), v);\n}\n</code></pre>\n\n<p>Then it's totally fine with it.  Sadly, even with optimisations turned on, Rust doesn't perform tail call elimination in this case.  So between borrow checker limitations and a lack of guaranteed tail call elimination, this design might be impossible to do in safe code.</p>\n\n<p>I've run into this problem myself; loops and <code>&amp;mut</code> pointers don't always play nicely with one another.  You can work around this by switching to <code>RefCell</code>, with its associated runtime cost, although this then complicates iterating over such a list in a loop.  Another alternative is to use <code>usize</code>s instead of pointers, and have all the nodes allocated into a <code>Vec</code> somewhere, although that introduces bounds checking overhead.</p>\n\n<p>Failing all that, there's <code>unsafe</code> code, which lets you write more or less exactly what you would write in another language like C or C++, but without Rust's usual safety guarantees.</p>\n\n<p>At the end of the day, writing data structures that <em>are not</em> just wrappers around an existing data structure in safe Rust without overhead is borderline impossible.  It's why the fundamental data structures in Rust are all written using some amount of unsafe code.</p>\n"}], "owner": {"reputation": 1000, "user_id": 2976057, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f806a0bb679720c8c0844bbffef18b06?s=128&d=identicon&r=PG&f=1", "display_name": "degs", "link": "https://stackoverflow.com/users/2976057/degs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 312, "favorite_count": 0, "accepted_answer_id": 31424407, "answer_count": 1, "score": 3, "last_activity_date": 1436966149, "creation_date": 1436942470, "last_edit_date": 1436966149, "question_id": 31423174, "link": "https://stackoverflow.com/questions/31423174/creating-a-simple-linked-list", "title": "Creating a simple linked list", "body": "<p>I'm having difficulty getting the borrow checker working for a simple iterative linked list builder.</p>\n\n<pre><code>fn main() {                                                        \n    let v = vec![1,5,3,8,12,56,1230,2,1];                          \n    let nodes = Vec::&lt;Node&gt;::with_capacity(v.len());               \n    let mut root: Option&lt;&amp;mut Box&lt;Node&gt;&gt; = None;                   \n    let mut prev: &amp;Option&lt;&amp;mut Box&lt;Node&gt;&gt; = &amp;None;                 \n\n    for i in v {                                                   \n        let curr = Some(&amp;mut Box::new(Node { value: i, next: None }));\n        match *prev {                                              \n            Some(ref mut p) =&gt; {                                   \n                p.next = curr;                                        \n                prev = &amp;mut p.next;                                \n            },                                                     \n            None =&gt; {                                              \n                root = curr;                                          \n                prev = &amp;mut root;                                  \n            }                                                      \n        }                                                          \n    }                                                              \n}                                                                  \n\nstruct Node&lt;'a&gt; {                                                  \n    value: i32,                                                    \n    next: Option&lt;&amp;'a mut Box&lt;Node&lt;'a&gt;&gt;&gt;,                           \n}                         \n</code></pre>\n\n<p>The errors I'm receiving when I try to compile:</p>\n\n<pre><code>linked_list.rs:8:30: 8:69 error: borrowed value does not live long enough\nlinked_list.rs:8         let curr = Some(&amp;mut Box::new(Node { value: i, next: None }));\n                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:4:49: 20:2 note: reference must be valid for the block suffix following statement 2 at 4:48...\nlinked_list.rs:4     let mut root: Option&lt;&amp;mut Box&lt;Node&gt;&gt; = None;\nlinked_list.rs:5     let mut prev: &amp;Option&lt;&amp;mut Box&lt;Node&gt;&gt; = &amp;None;\nlinked_list.rs:6 \nlinked_list.rs:7     for i in v {\nlinked_list.rs:8         let curr = Some(&amp;mut Box::new(Node { value: i, next: None }));\nlinked_list.rs:9         match *prev {\n                 ...\nlinked_list.rs:8:9: 8:71 note: ...but borrowed value is only valid for the statement at 8:8\nlinked_list.rs:8         let curr = Some(&amp;mut Box::new(Node { value: i, next: None }));\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlinked_list.rs:8:9: 8:71 help: consider using a `let` binding to increase its lifetime\nlinked_list.rs:8         let curr = Some(&amp;mut Box::new(Node { value: i, next: None }));\n                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlinked_list.rs:10:18: 10:27 error: cannot borrow immutable anonymous field `(prev:core::option::Some).0` as mutable\nlinked_list.rs:10             Some(ref mut p) =&gt; {\n                                   ^~~~~~~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:15:17: 15:28 error: cannot assign to `root` because it is borrowed\nlinked_list.rs:15                 root = curr;\n                                  ^~~~~~~~~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:16:29: 16:33 note: borrow of `root` occurs here\nlinked_list.rs:16                 prev = &amp;mut root;\n                                              ^~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:16:29: 16:33 error: cannot borrow `root` as mutable more than once at a time\nlinked_list.rs:16                 prev = &amp;mut root;\n                                              ^~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:16:29: 16:33 note: previous borrow of `root` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `root` until the borrow ends\nlinked_list.rs:16                 prev = &amp;mut root;\n                                              ^~~~\nnote: in expansion of for loop expansion\nlinked_list.rs:7:5: 19:6 note: expansion site\nlinked_list.rs:20:2: 20:2 note: previous borrow ends here\nlinked_list.rs:1 fn main() {\n...\nlinked_list.rs:20 }\n                  ^\nerror: aborting due to 4 previous errors\n</code></pre>\n\n<p>What I'm trying to go for is fairly simple. We iterate through a Vec, creating a new node on each iteration. If prev is None this must be the start, so we make the root variable take ownership of that first node. If it's not, we update the previous node's next value to point to this node.</p>\n\n<p>I'm new to Rust so I'm not sure where I'm going wrong. My interpretation is that the borrow checker isn't handling this well. It can't infer that the None branch in the match, containing the 'root' assignment, will only ever be called once, causing the two errors about root being borrowed twice. Am I correct?</p>\n\n<p>Is this approach possible in Rust? Is there a more idiomatic way to do this sort of thing?</p>\n\n<p>(A recursive approach is probably much easier but I'd like to complete an iterative one as a learning exercise.)</p>\n"}, {"tags": ["generics", "floating-point", "rust"], "answers": [{"comments": [{"owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "edited": false, "score": 0, "creation_date": 1436912276, "post_id": 31418017, "comment_id": 50809188, "body": "Trait <code>Float</code> is in the <code>num</code> crate at crates.io but not in <code>std::num</code>. Should I prefer the crates.io libraries over the <code>std::</code> libraries when they have the same name?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1436912358, "post_id": 31418017, "comment_id": 50809226, "body": "You don&#39;t have to compare them -- they are not the same thing. Use crate <code>num</code> for this."}, {"owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "edited": false, "score": 0, "creation_date": 1436916547, "post_id": 31418017, "comment_id": 50810636, "body": "There seems to still be an issue with this. When I call <code>std::iter::Iterator::sum</code> Rust complains that <code>core::num::Zero</code> is not implemented by type <code>T: num::Float</code>."}, {"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 1, "creation_date": 1436949966, "post_id": 31418017, "comment_id": 50822510, "body": "Ouch, that&#39;s unfortunate. This is because <code>num::traits::Float</code> implements <code>num::traits::Zero</code>, not <code>std::num::Zero</code>. You can fall back on <code>Iterator::fold</code> with the addition operation and 0 for <code>init</code>."}, {"owner": {"reputation": 1400, "user_id": 164958, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e798788a1233311f5eeec06bb37442a0?s=128&d=identicon&r=PG", "display_name": "Syndog", "link": "https://stackoverflow.com/users/164958/syndog"}, "edited": false, "score": 0, "creation_date": 1583321811, "post_id": 31418017, "comment_id": 107074602, "body": "The link at the top of this answer is broken.  Anyone looking for the num crate can find it at <a href=\"https://crates.io/crates/num\" rel=\"nofollow noreferrer\">crates.io/crates/num</a>"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 6, "last_activity_date": 1436911006, "last_edit_date": 1436911006, "creation_date": 1436910664, "answer_id": 31418017, "question_id": 31417422, "link": "https://stackoverflow.com/questions/31417422/writing-generic-floating-point-code-without-a-lot-of-boilerplate-type-constraint/31418017#31418017", "title": "Writing generic floating point code without a lot of boilerplate type constraints", "body": "<p>You want <a href=\"http://doc.rust-lang.org/num/num/traits/trait.Float.html\" rel=\"noreferrer\"><code>num::traits::Float</code></a>, available in crate <code>num</code>.</p>\n\n<p>Every type satisfying <code>Float</code> is guaranteed to be <code>Num + Copy + NumCast + PartialOrd + Neg&lt;Output=Self&gt;</code>. In turn, <code>PartialEq + Zero + One + Add + Sub + Mul + Div + Rem</code> are required for <code>Num</code>. This answer your first requests for basic arithmetic. Other operations like <code>sin()</code>, <code>cos()</code> are available as member functions in <code>Float</code>.</p>\n\n<p>Finally, <code>f32</code> and <code>f64</code> are supplied out-of-the-box as implementors of <code>Float</code>.</p>\n"}], "owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 427, "favorite_count": 0, "accepted_answer_id": 31418017, "answer_count": 1, "score": 4, "last_activity_date": 1436914665, "creation_date": 1436908076, "last_edit_date": 1436914665, "question_id": 31417422, "link": "https://stackoverflow.com/questions/31417422/writing-generic-floating-point-code-without-a-lot-of-boilerplate-type-constraint", "title": "Writing generic floating point code without a lot of boilerplate type constraints", "body": "<p>Is there a way to specify that the generic type <code>T</code> can only be either <code>f32</code> or <code>f64</code>? Otherwise I end up imposing a lot of boilerplate type constraints: <code>Copy</code>, <code>Add&lt;Output=T&gt;</code>, <code>Sub&lt;Output=T&gt;</code>, <code>Mul</code>..., <code>Div</code>..., <code>Zero</code>, <code>One</code>, etc., which gets tedious after a while. Also I am afraid this list will grow to include <code>Sin</code>, <code>Cos</code>, <code>Tan</code>, etc. in the future.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1436879693, "post_id": 31407211, "comment_id": 50788924, "body": "This makes sense. I guess the compiler complained, if I would violate the bound on the struct definition."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1485109898, "post_id": 31407211, "comment_id": 70777387, "body": "It would be inconsistent with trait bounds. If you have <code>struct Foo&lt;T: Clone&gt;(T);</code> you can&#39;t write <code>impl&lt;T&gt; Foo&lt;T&gt; {}</code>: it will complain about the trait bound not being satisfied. <a href=\"https://play.rust-lang.org/?gist=c3eadc6db98c82d3e125813c21235485&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 2, "last_activity_date": 1436878496, "creation_date": 1436878496, "answer_id": 31407211, "question_id": 31406840, "link": "https://stackoverflow.com/questions/31406840/lifetime-bound-on-generic-parameter-not-required-on-impl-block/31407211#31407211", "title": "Lifetime bound on generic parameter not required on impl block", "body": "<p>I would suggest that defining </p>\n\n<pre><code>struct SliceWrapper&lt;'a, T: 'a&gt;\n</code></pre>\n\n<p>would implicitly force the bound <code>T: 'a</code> wherever you use <code>SliceWrapper</code>. So both are equivalent:</p>\n\n<pre><code> impl&lt;'a, T&gt;     SliceWrapper&lt;'a, T&gt; // T: 'a is \"contained\" in SliceWrapper definition\n impl&lt;'a, T: 'a&gt; SliceWrapper&lt;'a, T&gt; // but it doesn't harm to say it again\n</code></pre>\n\n<p>This is just a feeling, not a well-proven assertion (I didn't check RFCs or compiler code). It would be consistent with what happens with type inference: you usually have to supply the type once, and can be implicit in most other places.</p>\n"}], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 126, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1436878496, "creation_date": 1436877547, "question_id": 31406840, "link": "https://stackoverflow.com/questions/31406840/lifetime-bound-on-generic-parameter-not-required-on-impl-block", "title": "Lifetime bound on generic parameter not required on impl block", "body": "<p>I have a simple Wrapper that holds a reference to a slice of type <code>T</code>. My first attempt looked like this:</p>\n\n<pre><code>struct SliceWrapper&lt;'a, T&gt; {\n    a: &amp;'a [T],\n}\n</code></pre>\n\n<p>Now the compiler rightly complains that <code>T</code> may not live long enough. So I do what it suggests and add a lifetime bound to <code>T</code>. Thereby telling the compiler that all borrowed content within <code>T</code> outlives <code>'a</code>.</p>\n\n<p>This is how my <a href=\"https://play.rust-lang.org/?gist=1252f206bbb2375fe804&amp;version=nightly\" rel=\"nofollow\">final attempt</a> looks:</p>\n\n<pre><code>#[derive(Debug)]\nstruct SliceWrapper&lt;'a, T: 'a&gt; {\n    a: &amp;'a [T],\n}\n\nimpl&lt;'a, T&gt; SliceWrapper&lt;'a, T&gt; {\n    fn new(n: &amp;'a [T]) -&gt; SliceWrapper&lt;'a, T&gt; {\n        SliceWrapper { a: n }\n    }\n}\n\nfn main() {\n    let array = [1, 2, 3, 4, 5];\n\n    let aw = SliceWrapper::new(&amp;array[..2]);\n\n    println!(\"{:?}\", aw);\n}\n</code></pre>\n\n<p>This works. But, if I changed the impl to</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; SliceWrapper&lt;'a, T&gt; {\n    fn new(n: &amp;'a [T]) -&gt; SliceWrapper&lt;'a, T&gt; {\n        SliceWrapper { a: n }\n    }\n}\n</code></pre>\n\n<p>it also works. Why don't I have to also specify the lifetime bound on the impl block? What is different from my first successful attempt where I omitted it on the impl block?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436875430, "post_id": 31405953, "comment_id": 50785676, "body": "Do you know if there is a bug filed about this issue, the fact that the compiler complains about internal types is a paper cut: had the compiler complained about <code>std::num::ParseIntError</code> then the OP would have implemented the correct solution directly. (And I do know it&#39;s probably far from simple)"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436875754, "post_id": 31405953, "comment_id": 50785891, "body": "@MatthieuM. There are few issues that are at least related, e.g. <a href=\"https://github.com/rust-lang/rust/issues/23355\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/23355</a> . I couldn&#39;t find one for this exact problem, but in general this is a known problem."}, {"owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "edited": false, "score": 0, "creation_date": 1436876334, "post_id": 31405953, "comment_id": 50786314, "body": "Interestingly enough this works on my toy problem, but in my real code I get &quot;error: failed to resolve. Use of undeclared type or module <code>std::num</code>&quot; and error: use of undeclared type name <code>std::num::ParseIntError</code>"}, {"owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "edited": false, "score": 0, "creation_date": 1436876364, "post_id": 31405953, "comment_id": 50786341, "body": "I actually had tried std in my complete code... Any idea what the problem is when that error pops up?"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "edited": false, "score": 2, "creation_date": 1436876785, "post_id": 31405953, "comment_id": 50786630, "body": "@PeterSmit Try using <code>::std::num::ParseIntError</code> (note the <code>::</code> prefix)."}, {"owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "edited": false, "score": 0, "creation_date": 1436877039, "post_id": 31405953, "comment_id": 50786824, "body": "@fjh Thanks, that did the trick. It seems std is not present in sub-modules"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1436878258, "post_id": 31405953, "comment_id": 50787799, "body": "That&#39;s correct, std is imported as a crate and added to the root of the module hierarchy. Just like an <code>extern crate std;</code> line at your own crate&#39;s root."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 4, "last_activity_date": 1436875131, "creation_date": 1436875131, "answer_id": 31405953, "question_id": 31405277, "link": "https://stackoverflow.com/questions/31405277/implementing-the-from-trait-for-a-parseinterror/31405953#31405953", "title": "Implementing the From trait for a ParseIntError", "body": "<p>The modules from <code>core</code> are reexported by <code>std</code>. You can fix your error by just replacing <code>core</code> by <code>std</code> in your code:</p>\n\n<pre><code>impl From&lt;std::num::ParseIntError&gt; for ParserError {\n    fn from(_: std::num::ParseIntError) -&gt; ParserError {\n        ParserError{message: \"Invalid data type\".to_string()}\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1282, "favorite_count": 0, "accepted_answer_id": 31405953, "answer_count": 1, "score": 2, "last_activity_date": 1436875131, "creation_date": 1436873158, "last_edit_date": 1436875121, "question_id": 31405277, "link": "https://stackoverflow.com/questions/31405277/implementing-the-from-trait-for-a-parseinterror", "title": "Implementing the From trait for a ParseIntError", "body": "<p>When using the try! macro, it uses the From trait to transform an error into the desired error.</p>\n\n<p>I would like to transform some errors into my own type. This goes great for e.g. io::Error, but I can't get it to work for an error type from core.</p>\n\n<pre><code>use std::io;\n\npub struct ParserError {\n    pub message: String,\n}\n\nimpl From&lt;io::Error&gt; for ParserError {\n    fn from(e: io::Error) -&gt; ParserError {\n        ParserError{message: format!(\"Generic IO error: {}\", e.description())}\n    }\n}\n</code></pre>\n\n<p>This works well for doing try! on anything io. But now for parsing:</p>\n\n<pre><code>fn parse_string(s: &amp;str) -&gt; Result&lt;u64, ParserError&gt; {\n    let i = try!(s.parse::&lt;u64&gt;());\n    return Ok(i);\n}\n</code></pre>\n\n<p>My error says:</p>\n\n<p>error: the trait <code>core::convert::From&lt;parser::ParserError&gt;</code> is not implemented for the type `core::num::ParseIntError</p>\n\n<p>I tried to implement this From:</p>\n\n<pre><code>impl From&lt;core::num::ParseIntError&gt; for ParserError {\n    fn from(_: core::num::ParseIntError) -&gt; ParserError {\n        ParserError{message: \"Invalid data type\".to_string()}\n    }\n}\n</code></pre>\n\n<p>But I can't get core imported. How to do this?</p>\n"}, {"tags": ["closures", "rust", "lifetime"], "comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1436870449, "post_id": 31403723, "comment_id": 50782321, "body": "Can&#39;t manage it either. Of course writing the <code>fn</code> works <code>fn nt&lt;&#39;a&gt;(t : &amp;&#39;a mut SplitWhitespace, line_number: usize) -&gt; Result&lt;&amp;&#39;a str,ParserError&gt; {         t.next().ok_or(missing_token(line_number))     }</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436871913, "post_id": 31403723, "comment_id": 50783264, "body": "related: <a href=\"http://stackoverflow.com/questions/29714934/how-can-i-specify-a-lifetime-for-closure-arguments\" title=\"how can i specify a lifetime for closure arguments\">stackoverflow.com/questions/29714934/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436871143, "post_id": 31404569, "comment_id": 50782758, "body": "this answers the problem, not the question ;), but @PeterSmit is probably suffering from the <a href=\"http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY-Problem</a>"}, {"owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1436872567, "post_id": 31404569, "comment_id": 50783706, "body": "@ker Maybe a bit. I both want a good and idiomatic solution and understand why certain constructs work or not. For me it seems at the moment that if there is a choice between using explicit lifetimes or not (e.g. scopes), it is most of the time best to use the version without explicit lifetimes"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 8, "last_activity_date": 1436872127, "last_edit_date": 1436872127, "creation_date": 1436871098, "answer_id": 31404569, "question_id": 31403723, "link": "https://stackoverflow.com/questions/31403723/how-to-declare-a-lifetime-for-a-closure-argument/31404569#31404569", "title": "How to declare a lifetime for a closure argument?", "body": "<p>I don't know how to answer your question, but there are two ways to solve the problem:</p>\n\n<p>The easiest one is to let the closure reference the iterator directly.</p>\n\n<pre><code>{\n    let mut nt = || tokens.next().ok_or(missing_token(line_number));\n    // call the closure as many times as you need to\n}\n    // At this point `tokens` will be usable again.\n</code></pre>\n\n<p>If you don't actually need do anything else with <code>tokens</code> afterwards, just do:</p>\n\n<pre><code>let mut nt = || tokens.next().ok_or(missing_token(line_number)); \n</code></pre>\n\n<p>The other solution is to write a function that emulates what the closure is doing and call that instead.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 12, "last_activity_date": 1436871337, "last_edit_date": 1495541676, "creation_date": 1436871337, "answer_id": 31404657, "question_id": 31403723, "link": "https://stackoverflow.com/questions/31403723/how-to-declare-a-lifetime-for-a-closure-argument/31404657#31404657", "title": "How to declare a lifetime for a closure argument?", "body": "<p>The <code>&amp;mut SplitWhitespace</code> is actually a <code>&amp;'b mut SplitWhitespace&lt;'a&gt;</code>. The relevant lifetime here is the <code>'a</code>, as it specifies how long the string slices that <code>next</code> returns live. Since you applied the <code>split_whitespace</code> function on your <code>line</code> argument, you need to set <code>'a</code> to the same lifetime that the <code>line</code> argument has.</p>\n\n<p>So as a first step you add a lifetime to <code>line</code>:</p>\n\n<pre><code>fn process_string&lt;'a&gt;(line: &amp;'a str, line_number: usize) -&gt; Result&lt;(), ParserError&gt; {\n</code></pre>\n\n<p>and then you add the lifetime to the type in your closure:</p>\n\n<pre><code>let nt = |t: &amp;mut SplitWhitespace&lt;'a&gt;| t.next().ok_or(missing_token(line_number));\n</code></pre>\n\n<p>Note that while this answers your question, the correct solution to your Problem is <a href=\"https://stackoverflow.com/a/31404569/1103681\">@A.B.'s solution</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1550088213, "last_edit_date": 1550088213, "creation_date": 1505309251, "answer_id": 46198877, "question_id": 31403723, "link": "https://stackoverflow.com/questions/31403723/how-to-declare-a-lifetime-for-a-closure-argument/46198877#46198877", "title": "How to declare a lifetime for a closure argument?", "body": "<p>As originally <a href=\"https://stackoverflow.com/a/31365625/155423\">pointed out by DK.</a>, you can use a function to apply extra constraints to a closure's arguments and return values:</p>\n\n<pre><code>fn constrain&lt;F&gt;(f: F) -&gt; F\nwhere\n    F: for&lt;'a&gt; Fn(&amp;'a mut SplitWhitespace) -&gt; Result&lt;&amp;'a str, ParserError&gt;,\n{\n    f\n}\n</code></pre>\n\n<p>This gives you the full abilities of the <code>where</code> clause; in this case you can use <em>higher-ranked trait bounds</em> (<code>for &lt;...&gt;</code>) to say that the closure must return a reference of the same lifetime as the argument.</p>\n\n<pre><code>let nt = constrain(|t| t.next().ok_or(missing_token(line_number)));\n</code></pre>\n\n<p>Ultimately, this is caused due to <a href=\"https://github.com/rust-lang/rust/issues/41078\" rel=\"noreferrer\">limitations in Rust's type inference</a>. Specifically, if a closure is passed immediately to a function that uses it, the compiler can infer what the argument and return types are. Unfortunately, when it is stored in a variable before being used, the compiler does not perform the same level of inference.</p>\n\n<p>This workaround works because it immediately passes the closure to a function, nailing down the types and lifetime references.</p>\n"}], "owner": {"reputation": 24298, "user_id": 85514, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/56586328ab69d46520cf729d2c46c58b?s=128&d=identicon&r=PG", "display_name": "Peter Smit", "link": "https://stackoverflow.com/users/85514/peter-smit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9267, "favorite_count": 3, "accepted_answer_id": 31404657, "answer_count": 3, "score": 21, "last_activity_date": 1550088213, "creation_date": 1436868726, "last_edit_date": 1550088105, "question_id": 31403723, "link": "https://stackoverflow.com/questions/31403723/how-to-declare-a-lifetime-for-a-closure-argument", "title": "How to declare a lifetime for a closure argument?", "body": "<p>I would like to declare a lifetime for a closure in Rust, but I can't find a way to add a lifetime declaration.</p>\n\n<pre><code>use std::str::SplitWhitespace;\n\npub struct ParserError {\n    pub message: String,\n}\n\nfn missing_token(line_no: usize) -&gt; ParserError {\n    ParserError {\n        message: format!(\"Missing token on line {}\", line_no),\n    }\n}\n\nfn process_string(line: &amp;str, line_number: usize) -&gt; Result&lt;(), ParserError&gt; {\n    let mut tokens = line.split_whitespace();\n\n    match try!(tokens.next().ok_or(missing_token(line_number))) {\n        \"hi\" =&gt; println!(\"hi\"),\n        _ =&gt; println!(\"Something else\"),\n    }\n\n    // The following code gives \"cannot infer appropriate lifetime.....\n    // let nt = |t: &amp;mut SplitWhitespace| t.next().ok_or(missing_token(line_number));\n    // match try!(nt(&amp;mut tokens)) {\n    //     \"there\" =&gt; println!(\"there\"),\n    //     _ =&gt; println!(\"_\"),\n    // }\n\n    // Where should I declare the lifetime 'a?\n    // let nt = |t: &amp;'a mut SplitWhitespace| t.next().ok_or(missing_token(line_number));\n    // match try!(nt(&amp;mut tokens)) {\n    //     \"there\" =&gt; println!(\"there\"),\n    //     _ =&gt; println!(\"_\"),\n    // }\n\n    return Ok(());\n}\n\nfn main() {\n    process_string(\"Hi there\", 5).ok().expect(\"Error!!!\");\n    process_string(\"\", 5).ok().expect(\"Error!!! 2\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=c9d5e696950e4cc306467f296b70aedd\" rel=\"noreferrer\">Complete sample code on the playground</a>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n  --&gt; src/main.rs:22:42\n   |\n22 |     let nt = |t: &amp;mut SplitWhitespace| t.next().ok_or(missing_token(line_number));\n   |                                          ^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 22:14...\n  --&gt; src/main.rs:22:14\n   |\n22 |     let nt = |t: &amp;mut SplitWhitespace| t.next().ok_or(missing_token(line_number));\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: ...so that the types are compatible:\n           expected std::iter::Iterator\n              found std::iter::Iterator\nnote: but, the lifetime must be valid for the call at 23:16...\n  --&gt; src/main.rs:23:16\n   |\n23 |     match try!(nt(&amp;mut tokens)) {\n   |                ^^^^^^^^^^^^^^^\nnote: ...so type `std::result::Result&lt;&amp;str, ParserError&gt;` of expression is valid during the expression\n  --&gt; src/main.rs:23:16\n   |\n23 |     match try!(nt(&amp;mut tokens)) {\n   |                ^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>How can I declare the lifetime <code>'a</code> for this closure?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1436873383, "post_id": 31403430, "comment_id": 50784270, "body": "Though not a perfect answer to your question,  there is something like <code>cfg(debug_assertions)</code> used in the source code of <code>debug_assert</code> macro that does conditional compilation based on debug and release modes. I&#39;d used it sometime back after reading the post here <a href=\"https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/conditional-compilation-for-debug-rele&zwnj;&#8203;ase/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436883204, "post_id": 31403430, "comment_id": 50791625, "body": "This sounds like a bad idea... Why would you not want to release the same code you test?"}, {"owner": {"reputation": 166, "user_id": 1869151, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8b7b0a0a33dca2135e2f860487987e08?s=128&d=identicon&r=PG", "display_name": "Krishna", "link": "https://stackoverflow.com/users/1869151/krishna"}, "edited": false, "score": 0, "creation_date": 1436950215, "post_id": 31403430, "comment_id": 50822675, "body": "I use a crate which does some decentralised network operation. So when we develop I use the mock network feature of the library for development and testing. And then connect to the actual network for final testing and release"}, {"owner": {"reputation": 126, "user_id": 3281907, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/167b5d70056ea34fa24058a251d63964?s=128&d=identicon&r=PG", "display_name": "kbknapp", "link": "https://stackoverflow.com/users/3281907/kbknapp"}, "edited": false, "score": 1, "creation_date": 1437834787, "post_id": 31403430, "comment_id": 51202389, "body": "Although it&#39;s not exactly what you&#39;re looking for, why not just do <code>default-features = [&quot;my_feature&quot;]</code> and while developing using <code>cargo</code>s flag <code>--no-default-features</code>?"}, {"owner": {"reputation": 520, "user_id": 884498, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88109a4658cfee0b9d680f48f073d9d4?s=128&d=identicon&r=PG", "display_name": "Nathan Fox", "link": "https://stackoverflow.com/users/884498/nathan-fox"}, "edited": false, "score": 0, "creation_date": 1602380244, "post_id": 31403430, "comment_id": 113701373, "body": "A good example is the <code>no-slow-safety-checks</code> feature of Amethyst (technically Rendy). It would be nice to enable this feature for release builds, but not for debug builds <a href=\"https://book.amethyst.rs/stable/appendices/c_feature_gates.html\" rel=\"nofollow noreferrer\">book.amethyst.rs/stable/appendices/c_feature_gates.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 3558, "user_id": 1732563, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b51d68c0232ecc9de87719a203ccb428?s=128&d=identicon&r=PG", "display_name": "Sean Perry", "link": "https://stackoverflow.com/users/1732563/sean-perry"}, "is_accepted": false, "score": 2, "last_activity_date": 1440612455, "creation_date": 1440612455, "answer_id": 32233684, "question_id": 31403430, "link": "https://stackoverflow.com/questions/31403430/how-to-switch-dependencies-based-on-build-profile/32233684#32233684", "title": "How to switch dependencies based on build profile", "body": "<p><code>cargo</code> does not support what you want directly. I see two options.</p>\n\n<p>A. Use <code>dev-dependencies</code> which allow for tests to have different depends\n   than debug/release. <a href=\"http://doc.crates.io/manifest.html#the-[dev-dependencies.*]-sections\" rel=\"nofollow\">dev-dependencies described</a></p>\n\n<p>B. Have a Cargo-mock.toml and a Cargo-release.toml. Switch between them using <code>cargo build --manifest-path ./Cargo-&lt;type&gt;.toml</code>.</p>\n"}], "owner": {"reputation": 166, "user_id": 1869151, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8b7b0a0a33dca2135e2f860487987e08?s=128&d=identicon&r=PG", "display_name": "Krishna", "link": "https://stackoverflow.com/users/1869151/krishna"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1037, "favorite_count": 0, "answer_count": 1, "score": 9, "last_activity_date": 1440612455, "creation_date": 1436867908, "last_edit_date": 1436883186, "question_id": 31403430, "link": "https://stackoverflow.com/questions/31403430/how-to-switch-dependencies-based-on-build-profile", "title": "How to switch dependencies based on build profile", "body": "<p>I want to use a feature from a dependency when I build in release profile and I don't want to use any feature while testing/development.</p>\n\n<p>For example, the dependency is normally defined as:</p>\n\n<pre><code>[depenencies.my_dep]\nversion = \"*\"\n</code></pre>\n\n<p>But when I build in release profile, I want it to be</p>\n\n<pre><code>[depenencies.my_dep]\nversion = \"*\"\nfeatures = [my_feature]\n</code></pre>\n\n<p>From the cargo documentation I can make out that this can be achieved only for platform targets. Is there a way to do it for profile based configuration?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1436830440, "post_id": 31395094, "comment_id": 50766526, "body": "There are <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+cannot+move+out+of+borrowed+content\">quite a few duplicates of this</a>. In such cases as these, please do search for the error messages\u2014there answers will often already be on Stack Overflow."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1436830529, "post_id": 31395094, "comment_id": 50766551, "body": "As for the second matter, generic code is monomorphised as part of compilation, so it\u2019s equivalent."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1436834534, "post_id": 31395094, "comment_id": 50767580, "body": "@ChrisMorgan I&#39;m missing what this has to do with &quot;moving out of borrowed content&quot; \u2014 the code compiles without any error. This seems to be a request for code review, which would be better suited at <a href=\"http://codereview.stackexchange.com/\">codereview.stackexchange.com</a> (with the caveat it should fit the requirements there)."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436876725, "post_id": 31395094, "comment_id": 50786580, "body": "@Shepmaster: <a href=\"http://stackoverflow.com/posts/31395094/revisions\">the code was changed</a> six minutes after I closed it, changing the effect of the question completely."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436876750, "post_id": 31395094, "comment_id": 50786604, "body": "user72961: please don\u2019t do things like that, especially not after it\u2019s been closed; create a new question instead. And as @Shepmaster says, codereview.stackexchange.com is a better fit for that sort of a question."}, {"owner": {"reputation": 1502, "user_id": 1014587, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/990x8.jpg?s=128&g=1", "display_name": "Mast", "link": "https://stackoverflow.com/users/1014587/mast"}, "edited": false, "score": 0, "creation_date": 1436876803, "post_id": 31395094, "comment_id": 50786639, "body": "Wouldn&#39;t re-opening be more appropriate than asking a new question?"}], "owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 59, "favorite_count": 0, "closed_date": 1436830482, "answer_count": 0, "score": 0, "last_activity_date": 1436830843, "creation_date": 1436829571, "last_edit_date": 1436830843, "question_id": 31395094, "link": "https://stackoverflow.com/questions/31395094/generic-arithmetic-in-rust", "closed_reason": "Duplicate", "title": "Generic arithmetic in Rust", "body": "<p>I am trying to implement a generic routine to compute the square of the Euclidean distance between two vectors. This compiles on nightly.</p>\n\n<ol>\n<li>Is this the Rustacean way to do this?</li>\n<li>Will this generic code be fast as the monomorphic code for T=f32?</li>\n</ol>\n\n\n\n<pre><code>#![feature(zero_one)]\n#![feature(iter_arith)]\nuse std::ops::{Add, Sub, Mul};\nuse std::num::Zero;\n\npub fn distance2&lt;T&gt;(x: &amp;[T], y: &amp;[T]) -&gt; T\n    where T: Copy + Add&lt;Output = T&gt; + Mul&lt;Output = T&gt; + Sub&lt;Output = T&gt; + Zero\n{\n    x.iter().zip(y.iter())\n        .map(|(xi, yi)| { let d = *xi - *yi; d * d })\n        .sum()\n}\n</code></pre>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1436827164, "post_id": 31393611, "comment_id": 50765552, "body": "Creating a dangling raw pointer is safe in rust -- dereferencing it or calling ffi is not. This conspires to have forced you use <code>unsafe</code> at least once to produce memory unsafe code, like in the example."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436827228, "post_id": 31393611, "comment_id": 50765571, "body": "Yep, and the &quot;unsafe&quot; code might just be the big chunk of C code that you pass that raw pointer to! :-)"}], "owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 61, "favorite_count": 0, "closed_date": 1436827008, "answer_count": 0, "score": 0, "last_activity_date": 1436822023, "creation_date": 1436822023, "question_id": 31393611, "link": "https://stackoverflow.com/questions/31393611/how-do-i-convert-a-rust-string-to-a-c-string", "closed_reason": "Duplicate", "title": "How do I convert a Rust string to a C string?", "body": "<p>I'm using Rust's FFI to call LLVM. Here's a minimal working example, based on the <a href=\"https://bitbucket.org/tari/llvm-sys.rs/src/d36872052b73ab5e2f99eec09f82b1fc1c4f0c71/examples/nop-function.rs?at=default\" rel=\"nofollow\">example provided with the library</a>.</p>\n\n<pre><code>extern crate llvm_sys as llvm;\n\nfn main() {\n    unsafe {\n        let module = llvm::core::LLVMModuleCreateWithName(b\"nop\\0\".as_ptr() as *const _);\n        llvm::core::LLVMDumpModule(module);\n        llvm::core::LLVMDisposeModule(module);\n    }\n}\n</code></pre>\n\n<p>This works, and valgrind reports no errors. However, I want to use Rust strings in my code, so I wrote this:</p>\n\n<pre><code>extern crate llvm_sys as llvm;\nuse std::ffi::CString;\n\n/// Convert a Rust string to a C char pointer.\nfn cstr(s: &amp;str) -&gt; *const i8 {\n    let cstring = CString::new(s).unwrap();\n    cstring.to_bytes_with_nul().as_ptr() as *const _\n}\n\nfn main() {\n    unsafe {\n        let module = llvm::core::LLVMModuleCreateWithName(cstr(\"nop\"));\n        llvm::core::LLVMDumpModule(module);\n        llvm::core::LLVMDisposeModule(module);\n    }\n}\n</code></pre>\n\n<p>However, valgrind now reports:</p>\n\n<pre><code>==7147== ERROR SUMMARY: 6 errors from 4 contexts (suppressed: 0 from 0)\n</code></pre>\n\n<p>Is this because <code>cstring</code> is being dropped when <code>cstr</code> returns? Since <code>cstr</code> is safe, why does the compiler not complain about <code>cstr</code>? What's the correct way to pass arbitrary Rust strings to C libraries?</p>\n"}, {"tags": ["rust", "channel"], "comments": [{"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 1, "creation_date": 1436815763, "post_id": 31391791, "comment_id": 50760161, "body": "Do you have any code that represents what you&#39;re trying to do?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 0, "creation_date": 1436816227, "post_id": 31391791, "comment_id": 50760431, "body": "@tadman [A rather silly] Example added"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1436816785, "post_id": 31391791, "comment_id": 50760730, "body": "the docs already answer this imo: <a href=\"https://doc.rust-lang.org/nightly/std/sync/mpsc/struct.Sender.html#method.send\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/sync/mpsc/&hellip;</a> Dropping the <code>tx</code> (as it happens after the for loop since the scope ends) will cause the <code>rx</code> to return an <code>Err</code> instead of an <code>Ok</code> on the next <code>recv</code>. Then you can pattern match on the result of <code>recv</code> to check for <code>Ok</code> or <code>Err</code>."}], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1436841020, "post_id": 31392115, "comment_id": 50769053, "body": "Exactly what I needed! Here is a simplified working example on the playground: <a href=\"http://is.gd/jfSQD2\" rel=\"nofollow noreferrer\">is.gd/jfSQD2</a>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1436868344, "post_id": 31392115, "comment_id": 50781063, "body": "That&#39;s cool but an incredibly wasteful way to iterate (it&#39;s an OS thread too), so I haven&#39;t seen that much in Rust."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 2, "creation_date": 1436880728, "post_id": 31392115, "comment_id": 50789795, "body": "It&#39;s definitely wasteful in this case - just an example. Depending on the resource inside the thread, it could be different?"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 23, "last_activity_date": 1436817998, "last_edit_date": 1436817998, "creation_date": 1436816793, "answer_id": 31392115, "question_id": 31391791, "link": "https://stackoverflow.com/questions/31391791/closing-a-channel-like-in-go/31392115#31392115", "title": "Closing a Channel, like in Go", "body": "<p>The channel is closed when all Senders have dropped. In your code you clone and give one each to each thread, these drop as they should when the threads end. The last sender is in the main thread, and you should drop it as soon as all the threads have been spawned: <code>drop(tx)</code>.</p>\n\n<p>Finally, the easiest way to receive is this, <em>after</em> the <code>drop(tx)</code>.</p>\n\n\n\n<pre><code>for elt in rx {\n    /* */\n}\n</code></pre>\n\n<p>This loop ends when the channel is closed.</p>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2738, "favorite_count": 1, "accepted_answer_id": 31392115, "answer_count": 1, "score": 10, "last_activity_date": 1436817998, "creation_date": 1436815639, "last_edit_date": 1436816217, "question_id": 31391791, "link": "https://stackoverflow.com/questions/31391791/closing-a-channel-like-in-go", "title": "Closing a Channel, like in Go", "body": "<p>Does Rust have a way of \"closing\" a channel, <a href=\"http://golang.org/ref/spec#Close\" rel=\"noreferrer\">similar to what is available in Go</a>?</p>\n\n<p>The idea is to iterate over the channel (receive continually) until the channel indicates that it will not produce any more values.</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let data = Arc::new(Mutex::new(0u32));\n    let (tx, rx) = mpsc::channel::&lt;u32&gt;();\n    {\n        let (data, tx) = (data.clone(), tx.clone());\n        thread::spawn(move || {\n            for _ in 0..10 {\n                let mut data = data.lock().unwrap();\n                *data += 1;\n                tx.send(*data).unwrap();\n            }\n            // *** How could I close the channel here, to signal the work is done?\n        });\n    }\n\n    // *** How can I detect a closed channel here? Pattern matching?\n    for _ in 0..10 {\n        let x = rx.recv().unwrap();\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n"}, {"tags": ["struct", "rust", "ownership"], "answers": [{"comments": [{"owner": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "edited": false, "score": 0, "creation_date": 1436816998, "post_id": 31392046, "comment_id": 50760848, "body": "Thanks! This indeed works :) Why would Box work that way, though? Is there a reasonable explanation?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "edited": false, "score": 1, "creation_date": 1436854056, "post_id": 31392046, "comment_id": 50772727, "body": "I&#39;m pretty sure it has to do with the fact that the unboxing deref is some compiler magic."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1436875213, "last_edit_date": 1436875213, "creation_date": 1436816562, "answer_id": 31392046, "question_id": 31391581, "link": "https://stackoverflow.com/questions/31391581/how-to-bind-multiple-fields-of-a-boxed-struct-without-getting-use-moved-value/31392046#31392046", "title": "How to bind multiple fields of a boxed struct without getting &quot;use moved value&quot; error?", "body": "<p>There's some weird interaction with <code>Box</code> going on. You need to add an intermediate let statement that unwraps the box.</p>\n\n<pre><code>List(Some(node)) =&gt; {\n    let node = *node; // this moves the value from the heap to the stack\n    let ListNode { val, tail } = node; // now this works as it should\n    List(Some(Box::new(ListNode { val: val, tail: tail.append(value) })))\n}\n</code></pre>\n\n<p>Note that I renamed your function argument to <code>value</code>, so I could write the destructuring in the short form without renaming.</p>\n\n<p><a href=\"http://is.gd/EhaBHK\" rel=\"nofollow\">Try it out in the playground.</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1544826973, "last_edit_date": 1544826973, "creation_date": 1529530798, "answer_id": 50957445, "question_id": 31391581, "link": "https://stackoverflow.com/questions/31391581/how-to-bind-multiple-fields-of-a-boxed-struct-without-getting-use-moved-value/50957445#50957445", "title": "How to bind multiple fields of a boxed struct without getting &quot;use moved value&quot; error?", "body": "<p><a href=\"https://stackoverflow.com/q/50251487/155423\">Non-lexical lifetimes</a>, availing starting in Rust 2018, allows your original code to compile as-is:</p>\n\n<pre><code>struct ListNode&lt;T&gt; {\n    val: T,\n    tail: List&lt;T&gt;\n}\n\nstruct List&lt;T&gt;(Option&lt;Box&lt;ListNode&lt;T&gt;&gt;&gt;);\n\nimpl&lt;T&gt; List&lt;T&gt; {\n    fn append(self, val: T) -&gt; List&lt;T&gt; {\n        match self {\n            List(None) =&gt; List(Some(Box::new(ListNode {\n                val: val,\n                tail: List(None),\n            }))),\n            List(Some(node)) =&gt; List(Some(Box::new(ListNode {\n                val: node.val,\n                tail: node.tail.append(val),\n            }))),\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 260, "user_id": 3216180, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d2a3c45b3213fccec32c5034a80f04d?s=128&d=identicon&r=PG", "display_name": "ebvalaim", "link": "https://stackoverflow.com/users/3216180/ebvalaim"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 560, "favorite_count": 0, "accepted_answer_id": 31392046, "answer_count": 2, "score": 7, "last_activity_date": 1544826973, "creation_date": 1436814882, "last_edit_date": 1529531945, "question_id": 31391581, "link": "https://stackoverflow.com/questions/31391581/how-to-bind-multiple-fields-of-a-boxed-struct-without-getting-use-moved-value", "title": "How to bind multiple fields of a boxed struct without getting &quot;use moved value&quot; error?", "body": "<p>I'm trying to code a generic recursive data structure. As it turns out, I can't as I'm hitting a wall when I want to access more than one field of an owned struct value.</p>\n\n<p>I define a struct that will hold a list:</p>\n\n<pre><code>struct ListNode&lt;T&gt; {\n    val: T,\n    tail: List&lt;T&gt;\n}\n\nstruct List&lt;T&gt;(Option&lt;Box&lt;ListNode&lt;T&gt;&gt;&gt;);\n</code></pre>\n\n<p>The empty list is represented by <code>List(None)</code>.</p>\n\n<p>I want to be able to append to a list:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt; {\n    fn append(self, val: T) -&gt; List&lt;T&gt; {\n        match self {\n            List(None) =&gt; List(Some(Box::new(ListNode {\n                val: val,\n                tail: List(None),\n            }))),\n            List(Some(node)) =&gt; List(Some(Box::new(ListNode {\n                val: node.val,\n                tail: node.tail.append(val),\n            }))),\n        }\n    }\n}\n</code></pre>\n\n<p>This fails with an understandable error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `node`\n  --&gt; src/main.rs:17:23\n   |\n16 |                 val: node.val,\n   |                      -------- value moved here\n17 |                 tail: node.tail.append(val),\n   |                       ^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `node.val` has type `T`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I looked for ways to use more than one field of a struct and I found\n<a href=\"https://mail.mozilla.org/pipermail/rust-dev/2014-January/008216.html\" rel=\"nofollow noreferrer\">Avoiding partially moved values error when consuming a struct with multiple fields</a>, so I'll do that:</p>\n\n<pre><code>List(Some(node)) =&gt; {\n    let ListNode {\n        val: nval,\n        tail: ntail,\n    } = *node;\n    List(Some(Box::new(ListNode {\n        val: nval,\n        tail: ntail.append(val),\n    })))\n}\n</code></pre>\n\n<p>Well, nope, still the same error. Apparently this doesn't work like in the link anymore.</p>\n\n<p>I've also tried using refs:</p>\n\n<pre><code>List(Some(node)) =&gt; {\n    let ListNode {\n        val: ref nval,\n        tail: ref ntail,\n    } = *node;\n    List(Some(Box::new(ListNode {\n        val: *nval,\n        tail: (*ntail).append(val),\n    })))\n}\n</code></pre>\n\n<p>This time the deconstruction passes, but the creation of the new node fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:21:26\n   |\n21 |                     val: *nval,\n   |                          ^^^^^ cannot move out of borrowed content\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:22:27\n   |\n22 |                     tail: (*ntail).append(val),\n   |                           ^^^^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>Am I missing something obvious here? If not, what is the proper way to access multiple fields of a struct that is not passed by reference? I'm using Rust 1.1.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 16224, "user_id": 2351099, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/178b1acb2ebd59939788cd25b19cf191?s=128&d=identicon&r=PG", "display_name": "Max Galkin", "link": "https://stackoverflow.com/users/2351099/max-galkin"}, "edited": false, "score": 0, "creation_date": 1436805459, "post_id": 31388745, "comment_id": 50754303, "body": "Duh! I was writing <code>mut</code> before <code>T</code>, thought it is similar to how a mutable ref type signature looks... Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16224, "user_id": 2351099, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/178b1acb2ebd59939788cd25b19cf191?s=128&d=identicon&r=PG", "display_name": "Max Galkin", "link": "https://stackoverflow.com/users/2351099/max-galkin"}, "edited": false, "score": 0, "creation_date": 1436805540, "post_id": 31388745, "comment_id": 50754355, "body": "@MaxGalkin yup, it mirrors how a mutable variable binding is declared in other places \u2014 <code>let mut foo: u8 = 42</code>."}, {"owner": {"reputation": 16224, "user_id": 2351099, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/178b1acb2ebd59939788cd25b19cf191?s=128&d=identicon&r=PG", "display_name": "Max Galkin", "link": "https://stackoverflow.com/users/2351099/max-galkin"}, "edited": false, "score": 0, "creation_date": 1436805848, "post_id": 31388745, "comment_id": 50754506, "body": "I was looking at examples with <code>a : &amp;mut T</code>, where <code>mut</code> is next to the type and I thought it just stays next to the type :)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 5, "creation_date": 1436806973, "post_id": 31388745, "comment_id": 50755158, "body": "<code>mut a: T</code> is rendered as just <code>a: T</code> in rustdoc, so it&#39;s handled as the internal detail it is. It indeed has no effect on the function signature."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1617991585, "last_edit_date": 1617991585, "creation_date": 1436805268, "answer_id": 31388745, "question_id": 31388644, "link": "https://stackoverflow.com/questions/31388644/whats-the-idiomatic-way-to-pass-by-mutable-value/31388745#31388745", "title": "What&#39;s the idiomatic way to pass by mutable value?", "body": "<p>It's certainly possible to say that an argument will be mutable:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use num::Zero; // 0.4.0\nuse std::ops::Rem;\n\npub fn gcd&lt;T&gt;(mut a: T, mut b: T) -&gt; T\nwhere\n    T: Copy + Zero + PartialOrd + Rem&lt;Output = T&gt;,\n{\n    while b &gt; T::zero() {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n\n    a\n}\n</code></pre>\n<blockquote>\n<p>Is [declaring a mutable copy of the argument] idiomatic/efficient?</p>\n</blockquote>\n<p>It should be fine from an efficiency perspective. The optimizer will see that they are the same and not do any extraneous copying.</p>\n<p>As for idiomatic, I'm not so sure. I originally started by not putting <code>mut</code> in my function argument list as I felt that it was oversharing details about the implementation. Nowadays, I go ahead and put it in there.</p>\n"}], "owner": {"reputation": 16224, "user_id": 2351099, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/178b1acb2ebd59939788cd25b19cf191?s=128&d=identicon&r=PG", "display_name": "Max Galkin", "link": "https://stackoverflow.com/users/2351099/max-galkin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 937, "favorite_count": 0, "accepted_answer_id": 31388745, "answer_count": 1, "score": 5, "last_activity_date": 1617991585, "creation_date": 1436804937, "last_edit_date": 1436805137, "question_id": 31388644, "link": "https://stackoverflow.com/questions/31388644/whats-the-idiomatic-way-to-pass-by-mutable-value", "title": "What&#39;s the idiomatic way to pass by mutable value?", "body": "<p>Am I missing something, or are mutable non-reference arguments not supported in Rust?</p>\n\n<p>To give an example, I was playing with Rust and tried to implement <a href=\"https://en.wikipedia.org/wiki/Euclidean_algorithm\" rel=\"noreferrer\">Euclid's algorithm</a> generic for all numeric types, and ideally I just wanted to pass arguments by value and have them mutable, but adding keyword <code>mut</code> to the argument type is rejected by compiler. So I have to declare a mutable copy of the argument as the function prologue. Is this idiomatic/efficent?</p>\n\n<pre><code>use std::ops::Rem;\n\nextern crate num;\nuse self::num::Zero;\n\npub fn gcd&lt;T: Copy + Zero + PartialOrd + Rem&lt;Output=T&gt;&gt;(a : T, b : T) -&gt; T\n{\n   let mut aa = a;\n   let mut bb = b;\n\n   while bb &gt; T::zero() {\n      let t = bb;\n      bb = aa % bb; \n      aa = t;\n   }\n\n   aa\n}\n</code></pre>\n"}, {"tags": ["rust", "internals"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436790625, "post_id": 31383321, "comment_id": 50744120, "body": "Ah, I thought that it was due to the current solution being good enough. Still it seemed a bit off, as in many places the language was reduced by moving constructs into std, that&#39;s why I asked."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 1, "creation_date": 1436800806, "post_id": 31383321, "comment_id": 50751150, "body": "See <a href=\"https://github.com/rust-lang/rust/issues/19036\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/19036</a> and <a href=\"https://github.com/rust-lang/rust/pull/19612\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/19612</a>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436805093, "post_id": 31383321, "comment_id": 50754080, "body": "String literals <i>and</i> pattern matching!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 11, "last_activity_date": 1436790184, "creation_date": 1436790184, "answer_id": 31383321, "question_id": 31382990, "link": "https://stackoverflow.com/questions/31382990/why-is-str-a-primitive-type/31383321#31383321", "title": "Why is `str` a primitive type?", "body": "<p>Once dynamically sized types came along, there no longer remained any good reason for <code>str</code> to be a primitive type; it could entirely reasonably have become a structure as you indicate, with a lang item for the benefit of string literals. But there didn\u2019t seem any especially good reason to change it either (though the possibility was discussed a few times), and so the status quo remained.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 0, "accepted_answer_id": 31383321, "answer_count": 1, "score": 10, "last_activity_date": 1436790184, "creation_date": 1436789316, "question_id": 31382990, "link": "https://stackoverflow.com/questions/31382990/why-is-str-a-primitive-type", "title": "Why is `str` a primitive type?", "body": "<p>Looking at both the docs and the code, it appears that <code>str</code> is a primitive type, while <code>String</code> is a <code>struct { Vec&lt;u8&gt; }</code>. Now as <code>str</code> is to a <code>[u8]</code> what <code>String</code> is to a <code>Vec&lt;u8&gt;</code>, couldn't <code>str</code> have been defined as</p>\n\n<pre><code>struct str { slice: [u8]; }\n</code></pre>\n\n<p>similar to how AsciiStr is defined? Why was/is it (still?) defined as primitive?</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "edited": false, "score": 0, "creation_date": 1436751083, "post_id": 31374259, "comment_id": 50727614, "body": "Thanks. But <code>Vec&lt;Vec&lt;T&gt;&gt;</code> would be stored as a <code>Vec</code> of pointers right?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1436756677, "post_id": 31374259, "comment_id": 50728682, "body": "A <code>Vec&lt;Vec&lt;T&gt;&gt;</code> would have a series of tightly packed 3-word structs. One of those words would be a pointer. The other two are the capacity and length."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1436773345, "post_id": 31374259, "comment_id": 50734121, "body": "What about alignment? How big is the heap for <code>Vec&lt;bool&gt;</code>, <code>Vec&lt;u8&gt;</code> (is it equal to capacity), <code>Vec&lt;(u8, u8)&gt;</code>, <code>Vec&lt;[u8; 3]&gt;</code>?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1436784032, "post_id": 31374259, "comment_id": 50740098, "body": "@ArtemGr: what I said is precise."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1436789328, "post_id": 31374259, "comment_id": 50743291, "body": "@ChrisMorgan Precise, but not reduntant. For the point to properly come across it have to be enlarged with examples and rehashings, sometimes. So, no alignment for the members I take it? (p.s. example of a similar explanation for C++: <a href=\"http://stackoverflow.com/a/13284631/257568\">stackoverflow.com/a/13284631/257568</a>). Still, the structs seem to be padded (<a href=\"http://is.gd/YbS3Nj\" rel=\"nofollow noreferrer\">is.gd/YbS3Nj</a>) so sometimes the members of a <code>Vec&lt;Struct&gt;</code> will appear to be aligned."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1436800610, "post_id": 31374259, "comment_id": 50751010, "body": "@ChrisMorgan Why <code>Vec</code> cares about <a href=\"http://doc.rust-lang.org/std/mem/fn.min_align_of.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/mem/fn.min_align_of.html</a> there <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.map_in_place\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/vec/struct.Vec.html#method.map_in_plac&zwnj;&#8203;e</a>?"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 10, "last_activity_date": 1436750729, "creation_date": 1436750729, "answer_id": 31374259, "question_id": 31374179, "link": "https://stackoverflow.com/questions/31374179/what-is-the-memory-layout-of-a-vector-of-arrays/31374259#31374259", "title": "What is the memory layout of a vector of arrays?", "body": "<p>The contents of a <code>Vec&lt;T&gt;</code> is, regardless of <code>T</code>, a single heap allocation, of <code>self.capacity() * std::mem::size_of::&lt;T&gt;()</code> bytes. (<code>Vec</code> overallocates\u2014that\u2019s the whole point of <code>Vec&lt;T&gt;</code> instead of <code>Box&lt;[T]&gt;</code>\u2014so it\u2019s the capacity, not the length, that matter in this calculation.) The actual <code>Vec&lt;T&gt;</code> itself takes three words (<a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20std%3A%3Amem%3A%3Asize_of%3A%3A%3CVec%3C%5Bf32%3B%205%5D%3E%3E())%3B%0A%7D&amp;version=stable\" rel=\"noreferrer\">24 bytes</a> on a 64-bit machine).</p>\n\n<p><code>[f32; 5]</code> is just a chunk of memory containing five 32-bit floating-point numbers, with no indirection; this comes to twenty bytes (hence <a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%7D%22%2C%20std%3A%3Amem%3A%3Asize_of%3A%3A%3C%5Bf32%3B%205%5D%3E())%3B%0A%7D&amp;version=stable\" rel=\"noreferrer\"><code>std::mem::size_of::&lt;[f32; 5]&gt;() == 20</code></a>).</p>\n"}], "owner": {"reputation": 123, "user_id": 5108841, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/825e1f7356a8531c1aea4d7494334691?s=128&d=identicon&r=PG", "display_name": "user72961", "link": "https://stackoverflow.com/users/5108841/user72961"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2384, "favorite_count": 0, "answer_count": 1, "score": 8, "last_activity_date": 1436750729, "creation_date": 1436749781, "last_edit_date": 1436749905, "question_id": 31374179, "link": "https://stackoverflow.com/questions/31374179/what-is-the-memory-layout-of-a-vector-of-arrays", "title": "What is the memory layout of a vector of arrays?", "body": "<p>Are variables of type <code>Vec&lt;[f3; 5]&gt;</code> stored as one contiguous array (of <code>Vec::len() * 5 * sizeof(f32)</code> bytes) or is it stored as a <code>Vec</code> of pointers?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1606922597, "post_id": 31374079, "comment_id": 115110637, "body": "Is there a syntax sugar to <code>by_ref</code>?  This API isn&#39;t very friendly."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 1, "creation_date": 1606922981, "post_id": 31374079, "comment_id": 115110844, "body": "@MaximilianBurszley I&#39;d say that <i>is</i> the nice form. You can also do <code>(&amp;mut i1).take_while(...)</code>"}, {"owner": {"reputation": 14946, "user_id": 8188846, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/85a7614508b329eb4a495c59ccf64ac7?s=128&d=identicon&r=PG", "display_name": "Maximilian Burszley", "link": "https://stackoverflow.com/users/8188846/maximilian-burszley"}, "edited": false, "score": 0, "creation_date": 1606923145, "post_id": 31374079, "comment_id": 115110929, "body": "Eh, better.  The documentation wasn&#39;t super clear about the ownership part (probably just inexperience speaking here), so this answer and response are appreciated."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 32, "last_activity_date": 1606924201, "last_edit_date": 1606924201, "creation_date": 1436748815, "answer_id": 31374079, "question_id": 31374051, "link": "https://stackoverflow.com/questions/31374051/why-does-iteratortake-while-take-ownership-of-the-iterator/31374079#31374079", "title": "Why does Iterator::take_while take ownership of the iterator?", "body": "<p>All the iterator adapters take the original iterator by value for efficiency's sake. Additionally, taking ownership of the original iterator avoids having to deal with lifetimes when it isn't necessary.</p>\n<p>If you wish to retain access to the original iterator, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>by_ref</code></a>. This introduces one level of indirection, but the programmer chooses to opt into the extra work when the feature is needed:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let v = [1, 2, 3, 4, 5, 6, 7, 8];\n    let mut i1 = v.iter();\n    for z in i1.by_ref().take_while(|&amp;&amp;v| v &lt; 4) {\n        //     ^^^^^^^^^\n        println!(&quot;Take While: {}&quot;, z);\n    }\n\n    for z in i1 {\n        println!(&quot;Rest: {}&quot;, z);\n    }\n}\n</code></pre>\n<p>Has the output</p>\n<pre class=\"lang-none prettyprint-override\"><code>Take While: 1\nTake While: 2\nTake While: 3\nRest: 5\nRest: 6\nRest: 7\nRest: 8\n</code></pre>\n<p><code>Iterator::by_ref</code> works because there's an implementation of <code>Iterator</code> for any mutable reference to an iterator:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'_, I&gt; Iterator for &amp;'_ mut I\nwhere\n    I: Iterator + ?Sized, \n</code></pre>\n<p>This means that you can also take a mutable reference. The parenthesis are needed for precedence:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>for z in (&amp;mut i1).take_while(|&amp;&amp;v| v &lt; 4)\n</code></pre>\n<hr />\n<p>Did you note that <code>4</code> was missing? That's because once <code>take_while</code> picks a value and decides to not use it, there's nowhere for it to &quot;put it back&quot;. Putting it back would require opting into <em>more</em> storage and slowness than is always needed.</p>\n<p>I've used the <a href=\"https://docs.rs/itertools/*/itertools/\" rel=\"nofollow noreferrer\">itertools crate</a> to handle cases like this, specifically <a href=\"https://docs.rs/itertools/*/itertools/trait.Itertools.html#method.take_while_ref\" rel=\"nofollow noreferrer\"><code>take_while_ref</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use itertools::Itertools; // 0.9.0\n\nfn main() {\n    let v = [1, 2, 3, 4, 5, 6, 7, 8];\n    let mut i1 = v.iter();\n    for z in i1.take_while_ref(|&amp;&amp;v| v &lt; 4) {\n        //     ^^^^^^^^^^^^^^^\n        println!(&quot;Take While: {}&quot;, z);\n    }\n\n    for z in i1 {\n        println!(&quot;Rest: {}&quot;, z);\n    }\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>Take While: 1\nTake While: 2\nTake While: 3\nRest: 4\nRest: 5\nRest: 6\nRest: 7\nRest: 8\n</code></pre>\n"}], "owner": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3258, "favorite_count": 2, "accepted_answer_id": 31374079, "answer_count": 1, "score": 16, "last_activity_date": 1606924201, "creation_date": 1436748530, "last_edit_date": 1496411043, "question_id": 31374051, "link": "https://stackoverflow.com/questions/31374051/why-does-iteratortake-while-take-ownership-of-the-iterator", "title": "Why does Iterator::take_while take ownership of the iterator?", "body": "<p>I find it odd that <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take_while\" rel=\"noreferrer\"><code>Iterator::take_while</code></a> takes ownership of the iterator. It seems like a useful feature to be able to take the first <em>x</em> elements which satisfy some function but still leave the rest of the elements available in the original iterator.</p>\n\n<p>I understand that this is incompatible with a lazy implementation of <code>take_while</code>, but still feels useful. Was this just judged not useful enough to include in the standard library, or is there some other problem I'm not seeing?</p>\n"}, {"tags": ["rust", "sublimetext3", "sublimelinter"], "comments": [{"owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "edited": false, "score": 1, "creation_date": 1438540989, "post_id": 31373720, "comment_id": 51480814, "body": "Interesting, I was having this issue too but enabling <code>use-cargo</code> fixed it for me. Have you tried setting the crate root and the use-crate-root settings?"}], "answers": [{"comments": [{"owner": {"reputation": 3026, "user_id": 814454, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8114cadb5e4a681e7074640d3b53b6ac?s=128&d=identicon&r=PG", "display_name": "Daryl", "link": "https://stackoverflow.com/users/814454/daryl"}, "edited": false, "score": 1, "creation_date": 1438547450, "post_id": 31727512, "comment_id": 51482619, "body": "Thanks! Turns out I didn&#39;t enable &quot;use-cargo&quot; setting properly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1438268965, "creation_date": 1438268965, "answer_id": 31727512, "question_id": 31373720, "link": "https://stackoverflow.com/questions/31373720/how-do-i-configure-sublimelinter-contrib-rustc-to-find-the-piston-crate/31727512#31727512", "title": "How do I configure SublimeLinter-contrib-rustc to find the &quot;piston&quot; crate?", "body": "<p>I have not been able to reproduce your error. However, I'll list what I did that seemed to work. Perhaps you will see a step where we diverged, and that will give you a hint of where to look.</p>\n\n<p>I installed Sublime Text 3. I chose the stable channel, build 3083. I <a href=\"https://packagecontrol.io/installation\" rel=\"nofollow\">installed Package Control</a>, and then three packages:</p>\n\n<ol>\n<li>SublimeLinter (3.5.1)</li>\n<li>Sublime\u200bLinter-contrib-rustc (1.3.5)</li>\n<li>Rust (2015.05.28.16.43.21)</li>\n</ol>\n\n<p>I restarted Sublime Text and opened a project of mine that uses Cargo and depends on other packages. I opened the console (<kbd>ctrl</kbd>-<kbd>`</kbd>) and <a href=\"http://sublimelinter.readthedocs.org/en/latest/troubleshooting.html#debug-mode\" rel=\"nofollow\">enabled debug mode</a>, which takes effect at the next Sublime restart.</p>\n\n<p>Because I have non-standard install of Rust, I saw that Sublime was unable to run <code>rustc</code> due to missing dynamic libraries. I then closed Sublime, and opened it from my terminal: <code>open /Applications/Sublime\\ Text.app/Contents/MacOS/Sublime\\ Text</code>. This uses my environment variables set by my shell.</p>\n\n<p>I saw that the linter was complaining that my library had no <code>main</code> method, so I <a href=\"https://github.com/oschwald/SublimeLinter-contrib-rustc#settings\" rel=\"nofollow\">enabled the <code>use-cargo</code> option</a>.</p>\n\n<pre><code>SublimeLinter: rust output:\nerror: main function not found\nerror: aborting due to previous error \n</code></pre>\n\n<p>After changing the <code>use-cargo</code> setting, I caused a deliberate syntax error in my code and saw that it was highlighted. I then misnamed the crate in the <code>extern crate</code> line, and saw it was highlighted.</p>\n\n<p>At no point did there seem to be a problem with finding crates. I could tell that <code>cargo</code> was being used via the console:</p>\n\n<pre><code>SublimeLinter: rust output:\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n Downloading rand v0.3.9\n...\n</code></pre>\n"}], "owner": {"reputation": 3026, "user_id": 814454, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/8114cadb5e4a681e7074640d3b53b6ac?s=128&d=identicon&r=PG", "display_name": "Daryl", "link": "https://stackoverflow.com/users/814454/daryl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 692, "favorite_count": 0, "accepted_answer_id": 31727512, "answer_count": 1, "score": 11, "last_activity_date": 1438547354, "creation_date": 1436745219, "last_edit_date": 1438547354, "question_id": 31373720, "link": "https://stackoverflow.com/questions/31373720/how-do-i-configure-sublimelinter-contrib-rustc-to-find-the-piston-crate", "title": "How do I configure SublimeLinter-contrib-rustc to find the &quot;piston&quot; crate?", "body": "<p>I'm building a Rust game with Piston and I'm trying to use the <a href=\"https://github.com/oschwald/SublimeLinter-contrib-rustc\">SublimeLinter Rust package</a>. When I open my .rs game files, I get this linter error:</p>\n\n<pre><code>extern crate piston; // linter error: \"can't find crate for 'piston'\"\n</code></pre>\n\n<p>If I check the Sublime console, I can see that the linter is finding rustc:</p>\n\n<pre><code>SublimeLinter: rust activated: /usr/local/bin/rustc\n</code></pre>\n\n<p>I don't see any obvious error messages in the console. I have piston listed as a dependency in my Cargo.toml and I'm able to <code>cargo run</code> successfully.</p>\n\n<p>I'm a complete Rust &amp; SublimeLinter newbie.</p>\n\n<p>I get a similar error for whichever import I put first; for example if I move <code>extern crate graphics;</code> to be the first line in the file I get the error \"can't find crate for 'graphics'\".</p>\n\n<p><strong>EDIT</strong>: turns out enabling the \"use-cargo\" setting fixed the issue. I added a \".sublimelinterrc\" file to my project root with these contents:</p>\n\n<pre><code>{\n  \"linters\": {\n    \"rust\": {\n      \"use-crate-root\": true,\n      \"use-cargo\": true\n    }\n  }\n}\n</code></pre>\n"}, {"tags": ["multithreading", "concurrency", "rust", "reference-counting"], "answers": [{"comments": [{"owner": {"reputation": 567, "user_id": 726172, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/e72WZ.png?s=128&g=1", "display_name": "Razican", "link": "https://stackoverflow.com/users/726172/razican"}, "edited": false, "score": 0, "creation_date": 1436742021, "post_id": 31373349, "comment_id": 50725877, "body": "It seems to work perfectly! but two questions, how can I use shared_stats after the for? (I&#39;m talking about the Stats object). It seems that the shared_stats cannot be easily converted to Stats. Moreover, it says that there is no multithreading. Why?"}, {"owner": {"reputation": 26908, "user_id": 1192728, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/481baa815383ed3970e726842195f73f?s=128&d=identicon&r=PG", "display_name": "hqt", "link": "https://stackoverflow.com/users/1192728/hqt"}, "edited": false, "score": 0, "creation_date": 1610298470, "post_id": 31373349, "comment_id": 116082750, "body": "One question is: How does Arc implement to make sure this behavior? I feel amazed with its and I believe this belongs to standard libraries rather than core language features."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 26908, "user_id": 1192728, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/481baa815383ed3970e726842195f73f?s=128&d=identicon&r=PG", "display_name": "hqt", "link": "https://stackoverflow.com/users/1192728/hqt"}, "edited": false, "score": 0, "creation_date": 1610374126, "post_id": 31373349, "comment_id": 116104908, "body": "@hqt the <a href=\"https://github.com/rust-lang/rust/blob/1.49.0/library/alloc/src/sync.rs\" rel=\"nofollow noreferrer\">source code for <code>Arc</code></a> is available and readable. There&#39;s an atomic integer that is incremented on clone and decremented on drop. When it hits zero, the data itself is dropped."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 24, "last_activity_date": 1565721429, "last_edit_date": 1565721429, "creation_date": 1436741385, "answer_id": 31373349, "question_id": 31373255, "link": "https://stackoverflow.com/questions/31373255/how-do-i-share-a-mutable-object-between-threads-using-arc/31373349#31373349", "title": "How do I share a mutable object between threads using Arc?", "body": "<p><a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a>'s documentation says:</p>\n\n<blockquote>\n  <p>Shared references in Rust disallow mutation by default, and <code>Arc</code> is no exception: you cannot generally obtain a mutable reference to something inside an <code>Arc</code>. If you need to mutate through an <code>Arc</code>, use <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a>, <a href=\"https://doc.rust-lang.org/std/sync/struct.RwLock.html\" rel=\"noreferrer\"><code>RwLock</code></a>, or one of the <a href=\"https://doc.rust-lang.org/std/sync/atomic/index.html\" rel=\"noreferrer\"><code>Atomic</code></a> types.</p>\n</blockquote>\n\n<p>You will likely want a <code>Mutex</code> combined with an <code>Arc</code>:</p>\n\n<pre><code>use std::{\n    sync::{Arc, Mutex},\n    thread,\n};\n\nstruct Stats;\n\nimpl Stats {\n    fn add_stats(&amp;mut self, _other: &amp;Stats) {}\n}\n\nfn main() {\n    let shared_stats = Arc::new(Mutex::new(Stats));\n\n    let threads = 5;\n    for _ in 0..threads {\n        let my_stats = shared_stats.clone();\n        thread::spawn(move || {\n            let mut shared = my_stats.lock().unwrap();\n            shared.add_stats(&amp;Stats);\n        });\n        // Note: Immediately joining, no multithreading happening!\n        // THIS WAS A LIE, see below\n    }\n}\n</code></pre>\n\n<p>This is largely cribbed from the <code>Mutex</code> documentation.</p>\n\n<blockquote>\n  <p>How can I use shared_stats after the for? (I'm talking about the Stats object). It seems that the shared_stats cannot be easily converted to Stats.</p>\n</blockquote>\n\n<p>As of Rust 1.15, <a href=\"https://stackoverflow.com/a/42195774/155423\">it's possible to get the value back</a>. See my additional answer for another solution as well.</p>\n\n<blockquote>\n  <p>[A comment in the example] says that there is no multithreading. Why?</p>\n</blockquote>\n\n<p>Because I got confused! :-)</p>\n\n<p>In the example code, the result of <code>thread::spawn</code> (a <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinHandle.html\" rel=\"noreferrer\"><code>JoinHandle</code></a>) is immediately dropped because it's not stored anywhere. When the handle is dropped, the thread is <em>detached</em> and may or may not ever finish. I was confusing it with <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinGuard.html\" rel=\"noreferrer\"><code>JoinGuard</code></a>, a old, removed API that <em>joined</em> when it is dropped. Sorry for the confusion!</p>\n\n<hr>\n\n<p>For a bit of editorial, I suggest avoiding mutability completely:</p>\n\n<pre><code>use std::{ops::Add, thread};\n\n#[derive(Debug)]\nstruct Stats(u64);\n\n// Implement addition on our type\nimpl Add for Stats {\n    type Output = Stats;\n    fn add(self, other: Stats) -&gt; Stats {\n        Stats(self.0 + other.0)\n    }\n}\n\nfn main() {\n    let threads = 5;\n\n    // Start threads to do computation\n    let threads: Vec&lt;_&gt; = (0..threads).map(|_| thread::spawn(|| Stats(4))).collect();\n\n    // Join all the threads, fail if any of them failed\n    let result: Result&lt;Vec&lt;_&gt;, _&gt; = threads.into_iter().map(|t| t.join()).collect();\n    let result = result.unwrap();\n\n    // Add up all the results\n    let sum = result.into_iter().fold(Stats(0), |i, sum| sum + i);\n    println!(\"{:?}\", sum);\n}\n</code></pre>\n\n<p>Here, we keep a reference to the <code>JoinHandle</code> and then wait for all the threads to finish. We then collect the results and add them all up. This is the common <em>map-reduce</em> pattern. Note that no thread needs any mutability, it all happens in the master thread.</p>\n"}], "owner": {"reputation": 567, "user_id": 726172, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/e72WZ.png?s=128&g=1", "display_name": "Razican", "link": "https://stackoverflow.com/users/726172/razican"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5857, "favorite_count": 2, "accepted_answer_id": 31373349, "answer_count": 1, "score": 16, "last_activity_date": 1565721429, "creation_date": 1436740517, "last_edit_date": 1565721096, "question_id": 31373255, "link": "https://stackoverflow.com/questions/31373255/how-do-i-share-a-mutable-object-between-threads-using-arc", "title": "How do I share a mutable object between threads using Arc?", "body": "<p>I'm trying to share a mutable object between threads in Rust using <code>Arc</code>, but I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow data in a `&amp;` reference as mutable\n  --&gt; src/main.rs:11:13\n   |\n11 |             shared_stats_clone.add_stats();\n   |             ^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n</code></pre>\n\n<p>This is the sample code:</p>\n\n<pre><code>use std::{sync::Arc, thread};\n\nfn main() {\n    let total_stats = Stats::new();\n    let shared_stats = Arc::new(total_stats);\n\n    let threads = 5;\n    for _ in 0..threads {\n        let mut shared_stats_clone = shared_stats.clone();\n        thread::spawn(move || {\n            shared_stats_clone.add_stats();\n        });\n    }\n}\n\nstruct Stats {\n    hello: u32,\n}\n\nimpl Stats {\n    pub fn new() -&gt; Stats {\n        Stats { hello: 0 }\n    }\n\n    pub fn add_stats(&amp;mut self) {\n        self.hello += 1;\n    }\n}\n</code></pre>\n\n<p>What can I do?</p>\n"}, {"tags": ["io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1471348976, "last_edit_date": 1471348976, "creation_date": 1436762644, "answer_id": 31375537, "question_id": 31373055, "link": "https://stackoverflow.com/questions/31373055/what-is-an-idiomatic-way-to-fill-a-user-supplied-buffer-when-reading-bytes/31375537#31375537", "title": "What is an idiomatic way to fill a user-supplied buffer when reading bytes?", "body": "<blockquote>\n  <p>This answer applies to versions of Rust before 1.6.0</p>\n</blockquote>\n\n<p>Not as far as I know.</p>\n\n<p>Looking at the <a href=\"https://crates.io/crates/byteorder\" rel=\"nofollow\"><code>byteorder</code></a> <a href=\"http://burntsushi.net/rustdoc/src/byteorder/new.rs.html#196-207\" rel=\"nofollow\">crate's source</a>, there's a <code>read_all</code> method defined there, too:</p>\n\n<pre><code>fn read_full&lt;R: io::Read + ?Sized&gt;(rdr: &amp;mut R, buf: &amp;mut [u8]) -&gt; Result&lt;()&gt; {\n    let mut nread = 0usize;\n    while nread &lt; buf.len() {\n        match rdr.read(&amp;mut buf[nread..]) {\n            Ok(0) =&gt; return Err(Error::UnexpectedEOF),\n            Ok(n) =&gt; nread += n,\n            Err(ref e) if e.kind() == io::ErrorKind::Interrupted =&gt; {},\n            Err(e) =&gt; return Err(From::from(e))\n        }\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>Note that this deals with interrupted IO operations.</p>\n\n<p>There's also a <a href=\"https://github.com/rust-lang/rfcs/pull/980\" rel=\"nofollow\">proposed RFC</a>, that was submitted several months ago, went to final comment period, then changed enough that it was taken <em>out</em> of final comment period and is waiting for another go-around.</p>\n\n<p>It turns out that this is unexpectedly complicated.  :P</p>\n"}, {"tags": [], "owner": {"reputation": 48, "user_id": 2750624, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6ab127efe3c0d1c484d83eb956713fda?s=128&d=identicon&r=PG", "display_name": "Sergey Bugaev", "link": "https://stackoverflow.com/users/2750624/sergey-bugaev"}, "is_accepted": true, "score": 3, "last_activity_date": 1489419227, "last_edit_date": 1489419227, "creation_date": 1471327319, "answer_id": 38967604, "question_id": 31373055, "link": "https://stackoverflow.com/questions/31373055/what-is-an-idiomatic-way-to-fill-a-user-supplied-buffer-when-reading-bytes/38967604#38967604", "title": "What is an idiomatic way to fill a user-supplied buffer when reading bytes?", "body": "<p>Since the <a href=\"https://github.com/rust-lang/rfcs/pull/980\" rel=\"nofollow noreferrer\">RFC</a> mentioned in the other answer is accepted, implemented, and available in Rust 1.6.0, you can just use the <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\" rel=\"nofollow noreferrer\"><code>Reader::read_exact()</code></a> method:</p>\n\n<pre><code>try!(r.read_exact(&amp;mut buf))\n</code></pre>\n\n<p>Or, using the <code>?</code> operator <a href=\"https://blog.rust-lang.org/2016/11/10/Rust-1.13.html\" rel=\"nofollow noreferrer\">introduced in Rust 1.13.0</a>:</p>\n\n<pre><code>r.read_exact(&amp;mut buf)?\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 209, "favorite_count": 1, "accepted_answer_id": 38967604, "answer_count": 2, "score": 7, "last_activity_date": 1489419227, "creation_date": 1436738882, "question_id": 31373055, "link": "https://stackoverflow.com/questions/31373055/what-is-an-idiomatic-way-to-fill-a-user-supplied-buffer-when-reading-bytes", "title": "What is an idiomatic way to fill a user-supplied buffer when reading bytes?", "body": "<p><a href=\"http://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\"><code>Read::read</code></a> returns the number of bytes that it actually read, which can be less than the requested buffer. In many cases, it is acceptable to make multiple calls to <code>read</code> in order to completely fill the buffer.</p>\n\n<p>I have this code, but it seems pretty ungainly:</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn read_complete&lt;R&gt;(mut rdr: R, buf: &amp;mut [u8]) -&gt; io::Result&lt;()&gt;\n    where R: Read\n{\n    let mut total_read = 0;\n\n    loop {\n        let window = &amp;mut buf[total_read..];\n        let bytes_read = try!(rdr.read(window));\n\n        // Completely filled the buffer\n        if window.len() == bytes_read {\n            return Ok(());\n        }\n\n        // Unable to read anything\n        if bytes_read == 0 {\n            return Err(io::Error::new(io::ErrorKind::Other, \"Unable to read complete buffer\"));\n        }\n\n        // Partial read, continue\n        total_read += bytes_read;\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Is there a function in the standard library that will abstract this work away for me?</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436728650, "post_id": 31371478, "comment_id": 50722350, "body": "I edited your title to clarify that you are looking for a solution that applies to <b>stable</b> Rust, as otherwise this would <a href=\"http://stackoverflow.com/q/27893223/155423\">be a dupe</a>."}, {"owner": {"reputation": 4690, "user_id": 2019549, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/900a3735d55a0473c975ba9266bf0c68?s=128&d=identicon&r=PG", "display_name": "cambunctious", "link": "https://stackoverflow.com/users/2019549/cambunctious"}, "edited": false, "score": 0, "creation_date": 1491625006, "post_id": 31371478, "comment_id": 73647761, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/27893223/how-do-i-iterate-over-a-range-with-a-custom-step\">How do I iterate over a range with a custom step?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1513, "user_id": 3316716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afbe3fa1baa8a749dd66449baeb9a837?s=128&d=identicon&r=PG", "display_name": "Sosdoc", "link": "https://stackoverflow.com/users/3316716/sosdoc"}, "edited": false, "score": 1, "creation_date": 1436730210, "post_id": 31371617, "comment_id": 50722846, "body": "I was hoping for a more &quot;elegant&quot; and built-in solution but I guess that&#39;s what happens with new(ish) languages. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1513, "user_id": 3316716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afbe3fa1baa8a749dd66449baeb9a837?s=128&d=identicon&r=PG", "display_name": "Sosdoc", "link": "https://stackoverflow.com/users/3316716/sosdoc"}, "edited": false, "score": 1, "creation_date": 1436731052, "post_id": 31371617, "comment_id": 50723108, "body": "@Sosdoc stepping by an increment is a highly anticipated addition! It just turns out to be complicated. What do you do for edge cases like exceeding the bounds of your type in either direction? Or handling stepping by zero? It&#39;s surprising the little details that are possible. Note that my solution has nothing to prevent you from misusing it. :-)"}, {"owner": {"reputation": 1513, "user_id": 3316716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afbe3fa1baa8a749dd66449baeb9a837?s=128&d=identicon&r=PG", "display_name": "Sosdoc", "link": "https://stackoverflow.com/users/3316716/sosdoc"}, "edited": false, "score": 1, "creation_date": 1436732161, "post_id": 31371617, "comment_id": 50723402, "body": "I know, I was just a bit perplexed that I couldn&#39;t find something I had been used to since I was fiddling with C."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 1, "creation_date": 1436732859, "post_id": 31371617, "comment_id": 50723589, "body": "You can always use <code>for i in 0..(n&#47;2) { let i = i * 2; \u2026 }</code>"}, {"owner": {"reputation": 15918, "user_id": 1115577, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/97919207da718e7edf547da40719ee10?s=128&d=identicon&r=PG", "display_name": "simonzack", "link": "https://stackoverflow.com/users/1115577/simonzack"}, "edited": false, "score": 0, "creation_date": 1599753479, "post_id": 31371617, "comment_id": 112878384, "body": "Still very useful, as <code>Iterator::step_by</code> forces us to use 64 bits, this is faster when we&#39;re sure we can stick with 32 bits."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 18, "last_activity_date": 1533225348, "last_edit_date": 1533225348, "creation_date": 1436728836, "answer_id": 31371617, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/31371617#31371617", "title": "What is a stable way to iterate on a range with custom step?", "body": "<h3>Rust 1.28+</h3>\n\n<p><a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by\" rel=\"noreferrer\"><code>Iterator::step_by</code></a> is now stable:</p>\n\n<pre><code>fn main() {\n    for i in (0..100).step_by(2) {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<h3>Rust 1.1+</h3>\n\n<p>You can always write it out the old-fashioned way:</p>\n\n<pre><code>fn main() {\n    let mut i = 0;\n    while i &lt; 100 {\n        println!(\"i: {}\", i);\n        i += 2;\n    }\n}\n</code></pre>\n\n<p>Which can then be abstracted:</p>\n\n<pre><code>use std::ops::Add;\n\nfn step_by&lt;T, F&gt;(start: T, end_exclusive: T, step: T, mut body: F)\nwhere\n    T: Add&lt;Output = T&gt; + PartialOrd + Copy,\n    F: FnMut(T),\n{\n    let mut i = start;\n    while i &lt; end_exclusive {\n        body(i);\n        i = i + step;\n    }\n}\n\nfn main() {\n    step_by(0, 100, 2, |i| {\n        println!(\"i: {}\", i);\n    })\n}\n</code></pre>\n\n<p>Interesting historical side note, I believe that originally all the looping was done with closures like this, before iterators became extremely prevalent.</p>\n\n<p>You can then take this and make it into an iterator:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct StepBy&lt;T&gt; {\n    start: T,\n    end_exclusive: T,\n    step: T,\n}\n\nimpl&lt;T&gt; StepBy&lt;T&gt; {\n    fn new(start: T, end_exclusive: T, step: T) -&gt; Self {\n        Self {\n            start,\n            end_exclusive,\n            step,\n        }\n    }\n}\n\nimpl&lt;T&gt; Iterator for StepBy&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + PartialOrd + Copy,\n{\n    type Item = T;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.start &lt; self.end_exclusive {\n            let v = self.start;\n            self.start = self.start + self.step;\n            Some(v)\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    for i in StepBy::new(0, 100, 2) {\n        println!(\"i: {}\", i);\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30540766/155423\">How can I add new methods to Iterator?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 156, "user_id": 3601912, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79ebb29f2ff2185bb8d4e34451a5a3a6?s=128&d=identicon&r=PG&f=1", "display_name": "coconaut", "link": "https://stackoverflow.com/users/3601912/coconaut"}, "edited": false, "score": 2, "creation_date": 1436739682, "post_id": 31372259, "comment_id": 50725310, "body": "I think this will short you the last index if n is odd due to rounding. If n = 5, (n / 2) = 2, so you&#39;ll have i in 0..2, and the iterator is not inclusive. This will only provide i = 0, i = 2 in the inner loop, you&#39;ll be missing i = 4 as the C style loop would have provided."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 156, "user_id": 3601912, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/79ebb29f2ff2185bb8d4e34451a5a3a6?s=128&d=identicon&r=PG&f=1", "display_name": "coconaut", "link": "https://stackoverflow.com/users/3601912/coconaut"}, "edited": false, "score": 1, "creation_date": 1436739870, "post_id": 31372259, "comment_id": 50725361, "body": "In that case use <code>(n + 1) &#47; 2</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436793442, "post_id": 31372259, "comment_id": 50745991, "body": "@hauleth: Please edit this in the answer, otherwise it&#39;s nigh invisible! (and don&#39;t worry about rot26&#39;s comment or this one becoming obsolete, comments are meant to become obsolete)"}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 5, "last_activity_date": 1436802754, "last_edit_date": 1436802754, "creation_date": 1436733018, "answer_id": 31372259, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/31372259#31372259", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>There is way using <code>let</code> \"redefinition\":</p>\n\n<pre><code>for i in 0..((n + 1) / 2) {\n    let i = i * 2;\n    // \u2026\n}\n</code></pre>\n\n<p>Or use <code>Iterator::map</code>:</p>\n\n<pre><code>for i in (0..((n + 1) / 2)).map(|i| i * 2) {\n    // \u2026\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 3, "last_activity_date": 1436756813, "creation_date": 1436756813, "answer_id": 31374865, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/31374865#31374865", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>I think i'll stick to a while loop. But if you really want an iterator based method you could try this</p>\n\n<pre><code>fn main(){\n    let (start, step, end) = (1, 2, 20);\n    for i in (0..).map(|x| start+step*x)\n                  .take_while(|&amp;x| x&lt;end){\n        println!(\"{:?}\", i);\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 3, "last_activity_date": 1436803025, "creation_date": 1436803025, "answer_id": 31388047, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/31388047#31388047", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>Use the <a href=\"https://crates.io/crates/num\" rel=\"nofollow\">crate <code>num</code></a></p>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[dependencies.num]\nversion = \"0.1.25\"\ndefault-features = false\n</code></pre>\n\n<p>Since you only need the crate's basics, use <code>default-features = false</code>.</p>\n\n<p>Rust:</p>\n\n<pre><code>extern crate num;\n\nuse num::range_step;\n\nfor i in range_step(0, 10, 2) {\n    /*    */\n}\n</code></pre>\n\n<p><code>range_step</code> is generic over rust's integer types.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511028233, "post_id": 47369128, "comment_id": 81691052, "body": "Features are expressly <b>not allowed</b> in stable Rust, which this question is about."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1511028551, "post_id": 47369128, "comment_id": 81691190, "body": "Fair enough. I just added a filter-based approach."}], "tags": [], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "is_accepted": false, "score": -1, "last_activity_date": 1511028525, "last_edit_date": 1511028525, "creation_date": 1511026999, "answer_id": 47369128, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/47369128#47369128", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>You can use the <code>iterator_step_by</code> feature.</p>\n\n<p>Here is an example of two threads running, one of them printing out odd numbers and the other even ones: </p>\n\n<pre><code>#![feature(iterator_step_by)]\nextern crate thebook;\n\nuse std::thread;\nuse std::time::Duration;\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in (1..1000).step_by(2) {\n            println!(\"{}\", i);\n        }\n    });\n    for i in (2..1000).step_by(2) {\n        println!(\"{}\", i);\n    }\n    handle.join();\n}\n</code></pre>\n\n<p>Without this feature, you can also use a filter on the range:</p>\n\n<pre><code>use std::thread;\nuse std::time::Duration;\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in (1..1000).filter(|x| x % 2 != 0) {\n            println!(\"{}\", i);\n        }\n    });\n    for i in (2..1000).filter(|x| x % 2 == 0) {\n        println!(\"{}\", i);\n    }\n    handle.join();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1533031246, "creation_date": 1533031246, "answer_id": 51610696, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step/51610696#51610696", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>Since this question was asked, the <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow noreferrer\"><code>itertools</code> crate</a>, has become fairly standard as a dependency. You can do what you want very simply with the <a href=\"https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#method.step\" rel=\"nofollow noreferrer\"><code>step()</code></a> method:</p>\n\n<pre><code>extern crate itertools; // 0.7.8\nuse itertools::Itertools;\n\nfn main() {\n    for i in (0..=10).step(2) {\n        println!(\"i = {}\", i);\n    }\n}\n</code></pre>\n\n<p>In your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nitertools = \"0.7.8\"\n</code></pre>\n"}], "owner": {"reputation": 1513, "user_id": 3316716, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afbe3fa1baa8a749dd66449baeb9a837?s=128&d=identicon&r=PG", "display_name": "Sosdoc", "link": "https://stackoverflow.com/users/3316716/sosdoc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4405, "favorite_count": 3, "accepted_answer_id": 31371617, "answer_count": 6, "score": 16, "last_activity_date": 1533225348, "creation_date": 1436727845, "last_edit_date": 1511028223, "question_id": 31371478, "link": "https://stackoverflow.com/questions/31371478/what-is-a-stable-way-to-iterate-on-a-range-with-custom-step", "title": "What is a stable way to iterate on a range with custom step?", "body": "<p>How should I go if I want to iterate with a custom step in stable Rust? Essentially something like the C/C++</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>for (int i = 0; i &lt; n; i += 2) {\n\n}\n</code></pre>\n\n<p>I've already tried using <code>range_step_inclusive</code> and the solutions in <a href=\"https://stackoverflow.com/q/27893223/155423\">How do I iterate over a range with a custom step?</a>:</p>\n\n<pre><code>use std::iter::range_step_inclusive;\nfor i in range_step_inclusive(0, n, 2) {\n    println!(\"i: {}\", i);\n}\n</code></pre>\n\n<p>But it seems like it isn't available in Rust 1.1:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: unresolved import `std::iter::range_step_inclusive`. There is no `range_step_inclusive` in `std::iter`\n</code></pre>\n\n<p>What would be an alternative? Possibly the idiomatic way for creating custom ranges.</p>\n"}, {"tags": ["types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 321, "user_id": 2066979, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d78c0a8848e14c11daba95b044323438?s=128&d=identicon&r=PG", "display_name": "NuclearAlchemist", "link": "https://stackoverflow.com/users/2066979/nuclearalchemist"}, "edited": false, "score": 0, "creation_date": 1436748728, "post_id": 31371117, "comment_id": 50727176, "body": "Perfect, thanks!  I was just trying to get the syntax right.  Now I&#39;m having a document test error, but I am pretty hopeful that I can figure that one out myself."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 321, "user_id": 2066979, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d78c0a8848e14c11daba95b044323438?s=128&d=identicon&r=PG", "display_name": "NuclearAlchemist", "link": "https://stackoverflow.com/users/2066979/nuclearalchemist"}, "edited": false, "score": 0, "creation_date": 1436749036, "post_id": 31371117, "comment_id": 50727240, "body": "@NuclearAlchemist feel free to come back and search for / ask another question if you get stumped on anything!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1436725626, "creation_date": 1436725626, "answer_id": 31371117, "question_id": 31371032, "link": "https://stackoverflow.com/questions/31371032/use-of-undeclared-type-name-when-using-generic-types/31371117#31371117", "title": "&quot;use of undeclared type name&quot; when using generic types", "body": "<p>You need to declare any generic types you use:</p>\n\n<pre><code>impl&lt;K, V&gt; Default for ConcurrentDictionary&lt;K, V&gt; {\n</code></pre>\n\n<p>After that, you run into issues that <code>K</code> and <code>V</code> are <em>too</em> generic, and you need to restrict them to types that implement <code>Eq</code> and <code>Hash</code>:</p>\n\n<pre><code>impl&lt;K, V&gt; Default for ConcurrentDictionary&lt;K, V&gt;\n    where K: std::cmp::Eq + std::hash::Hash\n</code></pre>\n\n<p>And you need to apply the same restriction to the calling function.</p>\n"}], "owner": {"reputation": 321, "user_id": 2066979, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/d78c0a8848e14c11daba95b044323438?s=128&d=identicon&r=PG", "display_name": "NuclearAlchemist", "link": "https://stackoverflow.com/users/2066979/nuclearalchemist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 482, "favorite_count": 1, "accepted_answer_id": 31371117, "answer_count": 1, "score": 1, "last_activity_date": 1436725686, "creation_date": 1436725044, "last_edit_date": 1436725686, "question_id": 31371032, "link": "https://stackoverflow.com/questions/31371032/use-of-undeclared-type-name-when-using-generic-types", "title": "&quot;use of undeclared type name&quot; when using generic types", "body": "<p>I am writing the basic structure of a concurrent dictionary in Rust, starting with simply wrapping the existing HashMap in an <code>Arc::new(Mutex::new(hash_map_placeholder))</code>.  However, almost as soon as I start, things begin to go awry.  I am having issues with passing the <code>&lt;K, V&gt;</code> values down into a normal HashMap, so I can't really even start on the wrapped version.  I currently get the following error:</p>\n\n<pre><code>concurrent_dictionary.rs:11:39: 11:40 error: use of undeclared type name `K`\nconcurrent_dictionary.rs:11 impl Default for ConcurrentDictionary&lt;K, V&gt; {\n                                                              ^\nconcurrent_dictionary.rs:11:42: 11:43 error: use of undeclared type name `V`\nconcurrent_dictionary.rs:11 impl Default for ConcurrentDictionary&lt;K, V&gt; {\n</code></pre>\n\n<p>Which I know is related to the type names not being passed through correctly.  How does one do this?  Even if I get rid of the default impl, I would still have to write the same thing for <code>ConcurrentDictionary::new()</code>.  Here is the code:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::default::Default;\n\n#[derive(Clone)]\npub struct ConcurrentDictionary&lt;K, V&gt; {\n    data: HashMap&lt;K, V&gt;, \n}\n\nimpl Default for ConcurrentDictionary&lt;K, V&gt; {\n    #[inline]\n    fn default() -&gt; ConcurrentDictionary&lt;K, V&gt; {\n        ConcurrentDictionary {\n            data: HashMap::&lt;K, V&gt;::new(),\n        }   \n    }   \n}\n\nimpl&lt;K, V&gt; ConcurrentDictionary&lt;K, V&gt; {\n    #[inline]\n    pub fn new() -&gt; ConcurrentDictionary&lt;K, V&gt; {\n        Default::default()\n    }   \n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436792264, "post_id": 31371094, "comment_id": 50745138, "body": "I have the same impression as well, as far as I know <code>derive</code> used on generics only attempts to implement the trait based on whether the generic parameters themselves already implement it. I suspect the underlying issue is that deciding whether implementing the trait is possible or not is actually quite complicated and therefore it just implements a best effort at the moment; note that you can easily move to a manual implementation when <code>derive</code> fails."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1436802616, "post_id": 31371094, "comment_id": 50752454, "body": "This is surprising: All of <code>Val</code>&#39;s fields are guaranteed to implement <code>Copy</code>, regardless of the type of <code>T</code> because <code>PhantomData</code> always implements <code>Copy</code>. Equally strange (but consistent with your remarks) is that <code>impl&lt;T&gt; Copy for Val&lt;T&gt;</code> fails because the compiler can&#39;t guarantee that <code>T</code> implements <code>Copy</code>. It seems like that shouldn&#39;t matter: The <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\">docs</a> say that &quot;A type can implement <code>Copy</code> if all of its components implement <code>Copy</code>.&quot; The docs don&#39;t say that all the <i>type parameters</i> must also implement <code>Copy</code>."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1436809511, "post_id": 31371094, "comment_id": 50756690, "body": "@rlkw1024 Yeah, the whole situation is not ideal. There are fixmes like <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcollections/linked_list.rs#L66\" rel=\"nofollow noreferrer\">this one</a> throughout the standard library. I&#39;m not sure if this is an actual practical problem for you, but I&#39;ve updated my answer to show how you can manually implement <code>Copy</code> for your type."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1436815267, "post_id": 31371094, "comment_id": 50759879, "body": "It has nothing to do with <code>PhantomData</code>, a field with type <code>&amp;&#39;a T</code> would fail the same way. It&#39;s about how deriving handles type parameters."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 5, "last_activity_date": 1436809299, "last_edit_date": 1436809299, "creation_date": 1436725496, "answer_id": 31371094, "question_id": 31371027, "link": "https://stackoverflow.com/questions/31371027/copy-trait-and-phantomdata-should-this-really-move/31371094#31371094", "title": "Copy trait and PhantomData: Should this really move?", "body": "<blockquote>\n  <p>I'd thought that deriving Copy for <code>Val&lt;Meters&gt;</code> would give <code>Val&lt;Meters&gt;</code> copy semantics.</p>\n</blockquote>\n\n<p>But <code>Copy</code> isn't being derived for <code>Val&lt;Meters&gt;</code>, just for all <code>Val&lt;T&gt;</code> where <code>T</code> itself is <code>Copy</code>.</p>\n\n<p>There are several open issues on Github for this, e.g. <a href=\"https://github.com/rust-lang/rust/issues/26925\" rel=\"nofollow\">this one</a>. My impression is that this is not intentional, but just a limitation of the way <code>derive</code> currently works.</p>\n\n<p>You can work around this by manually writing a blanket impl for <code>Clone</code> and <code>Copy</code>:</p>\n\n<pre><code>impl &lt;T&gt; Clone for Val&lt;T&gt; {\n    fn clone(&amp;self) -&gt; Val&lt;T&gt; {\n        Val {v: PhantomData}\n    }\n}\n\nimpl &lt;T&gt; Copy for Val&lt;T&gt; {}\n</code></pre>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1436809299, "creation_date": 1436725011, "question_id": 31371027, "link": "https://stackoverflow.com/questions/31371027/copy-trait-and-phantomdata-should-this-really-move", "title": "Copy trait and PhantomData: Should this really move?", "body": "<p><code>PhantomData</code> interacts with <code>Copy</code> in a surprising way:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::marker::PhantomData;\n\n#[derive(Copy, Clone)]\npub struct Seconds;\n\npub struct Meters;\n\n#[derive(Copy, Clone)]\npub struct Val&lt;T&gt; {\n    pub v: PhantomData&lt;T&gt;\n}\n\nfn main() {\n    let v1: Val&lt;Seconds&gt; = Val {v: PhantomData};\n    let v2 = v1;\n    let v3 = v1;\n\n    let v4: Val&lt;Meters&gt; = Val {v: PhantomData};\n    let v5 = v4;\n    let v6 = v4;\n}\n</code></pre>\n\n<p>This fails as follows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:20:13: 20:15 error: use of moved value: `v4` [E0382]\nsrc/main.rs:20         let v6 = v4;\n                           ^~\nsrc/main.rs:19:13: 19:15 note: `v4` moved here because it has type `Val&lt;Meters&gt;`, which is moved by default\nsrc/main.rs:19         let v5 = v4;\n</code></pre>\n\n<p>I'd thought that deriving <code>Copy</code> for <code>Val&lt;Meters&gt;</code> would give <code>Val&lt;Meters&gt;</code> copy semantics. But apparently, that's true only where <code>Val</code>'s type parameter <code>T</code> also implements <code>Copy</code>. I don't understand why.</p>\n\n<p><code>PhantomData</code> always implements <code>Copy</code>, <a href=\"http://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"noreferrer\">regardless of whether its type parameter does</a>. And anyhow, if <code>PhantomData&lt;Meters&gt;</code> didn't implement <code>Copy</code>, I'd expect the compiler to complain that it couldn't derive <code>Copy</code> for <code>Val&lt;Meters&gt;</code>. Instead, the compiler happily derives <code>Copy</code> for <code>Val&lt;Meters&gt;</code>, yet it applies move semantics.</p>\n\n<p>Is this behavior intentional? If so, why?</p>\n"}, {"tags": ["gtk", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436713671, "post_id": 31365351, "comment_id": 50717759, "body": "Please include what version of the crates you are using. If I try to compile your example with <code>gtk 0.0.2</code>, I get 3 unrelated errors."}], "answers": [{"comments": [{"owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "edited": false, "score": 0, "creation_date": 1436788814, "post_id": 31369508, "comment_id": 50743015, "body": "Honestly, I&#39;ve read the error message but thought that I forgot to include some traits etc. It often happens when I use rust. But now I understood that it is a bug and as you say I can try to fix library code. Thank you for answer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "edited": false, "score": 1, "creation_date": 1436792086, "post_id": 31369508, "comment_id": 50745017, "body": "@Lodin: I am in your boat, the error messages related to absent methods are not crystal clear; many times the compiler has recommended me to &quot;use the trait&quot; when it was already used and the issue was not satisfying the bounds..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1436715349, "creation_date": 1436715349, "answer_id": 31369508, "question_id": 31365351, "link": "https://stackoverflow.com/questions/31365351/no-method-named-connect-activate-when-using-the-gtk-crate/31369508#31369508", "title": "no method named `connect_activate` when using the gtk crate", "body": "<blockquote>\n  <p>Am I doing something wrong?</p>\n</blockquote>\n\n<p>Yep! You aren't reading and addressing the error message:</p>\n\n<blockquote>\n  <p>the method <code>connect_activate</code> exists but the following trait bounds were not satisfied: <code>gtk::widgets::menu_item::MenuItem : gtk::traits::button::ButtonTrait</code></p>\n</blockquote>\n\n<p>Granted, this error message is worded in an obtuse manner. It's saying that the type <code>MenuItem</code> does not implement the trait <code>ButtonTrait</code>. To be honest, this is the first time I've see this particular wording of the error message, so I might be a bit wrong. If you check out the documentation(1) for <code>MenuItem</code> though, you can see that it does not implement <code>ButtonTrait</code>. This precludes you from calling the method.</p>\n\n<p>I don't know what a suitable workaround is. I don't see any <a href=\"https://github.com/rust-gnome/examples\" rel=\"nofollow\">examples that use <code>MenuItem</code></a>. The 3 linked example projects don't use it either. It's entirely possible that it simply hasn't had all of the appropriate traits implemented yet. Perhaps this would be a good chance for you to get some commits into an up-and-coming project! ^_^</p>\n\n<p>I also couldn't find any fallback methods or traits that would allow you to call <code>connect</code> directly.</p>\n\n<p>(1): I wish I could link to the docs, but there are no officially-hosted versions I can find.</p>\n"}], "owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 765, "favorite_count": 0, "accepted_answer_id": 31369508, "answer_count": 1, "score": 2, "last_activity_date": 1436715349, "creation_date": 1436685289, "last_edit_date": 1436712840, "question_id": 31365351, "link": "https://stackoverflow.com/questions/31365351/no-method-named-connect-activate-when-using-the-gtk-crate", "title": "no method named `connect_activate` when using the gtk crate", "body": "<p>I am trying to write simple GTK application in Rust, but faced with problem that I cannot add signal to menu item. There is simplified code to reproduce problem: </p>\n\n<p>Glade file (\"interface.glade\"):\n</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!-- Generated with glade 3.16.1 --&gt;\n&lt;interface&gt;\n  &lt;requires lib=\"gtk+\" version=\"3.10\"/&gt;\n  &lt;object class=\"GtkWindow\" id=\"window1\"&gt;\n    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n    &lt;child&gt;\n      &lt;object class=\"GtkBox\" id=\"box1\"&gt;\n        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n        &lt;property name=\"orientation\"&gt;vertical&lt;/property&gt;\n        &lt;child&gt;\n          &lt;object class=\"GtkMenuBar\" id=\"menubar1\"&gt;\n            &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n            &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n            &lt;child&gt;\n              &lt;object class=\"GtkMenuItem\" id=\"menuitem1\"&gt;\n                &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n                &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n                &lt;property name=\"label\" translatable=\"yes\"&gt;File&lt;/property&gt;\n                &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n                &lt;child type=\"submenu\"&gt;\n                  &lt;object class=\"GtkMenu\" id=\"menu1\"&gt;\n                    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n                    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n                    &lt;child&gt;\n                      &lt;object class=\"GtkImageMenuItem\" id=\"FileMenu\"&gt;\n                        &lt;property name=\"label\"&gt;gtk-new&lt;/property&gt;\n                        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n                        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n                        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n                        &lt;property name=\"use_stock\"&gt;True&lt;/property&gt;\n                      &lt;/object&gt;\n                    &lt;/child&gt;\n                  &lt;/object&gt;\n                &lt;/child&gt;\n              &lt;/object&gt;\n            &lt;/child&gt;\n          &lt;/object&gt;\n          &lt;packing&gt;\n            &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n            &lt;property name=\"fill\"&gt;True&lt;/property&gt;\n            &lt;property name=\"position\"&gt;0&lt;/property&gt;\n          &lt;/packing&gt;\n        &lt;/child&gt;\n        &lt;child&gt;\n          &lt;placeholder/&gt;\n        &lt;/child&gt;\n      &lt;/object&gt;\n    &lt;/child&gt;\n  &lt;/object&gt;\n&lt;/interface&gt;\n</code></pre>\n\n<p>Rust code (\"main.rs\"):\n</p>\n\n<pre><code>extern crate gtk;\n\nmod example {\n    use gtk;\n    use gtk::traits::*;\n    use gtk::signal::Inhibit;\n    use gtk::widgets::{\n        Builder,\n        MenuItem\n    };\n    use gtk::Window;\n\n    pub fn main() {\n        gtk::init().unwrap_or_else(|_| panic!(\"Failed to initialize GTK.\"));\n        let builder = Builder::new_from_file(\"./interface.glade\").unwrap();\n        let window: Window = builder.get_object(\"window1\").unwrap();\n\n        window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(true)\n        });\n\n        let file_menu: MenuItem = builder.get_object(\"FileMenu\").unwrap();\n        file_menu.connect_activate(|_| {\n            println!(\"Activated\");\n        });\n\n        window.show_all();\n        gtk::main();\n    }\n}\n\nfn main() {\n    example::main()\n}\n</code></pre>\n\n<p>And when I try to compile it, I get an error:\n</p>\n\n<pre><code>src/main.rs:24:19: 26:11 error: no method named `connect_activate` found for type `gtk::widgets::menu_item::MenuItem` in the current scope\nsrc/main.rs:24         file_menu.connect_activate(|_| {\nsrc/main.rs:25             println!(\"Activated\");\nsrc/main.rs:26         });\nsrc/main.rs:24:19: 26:11 note: the method `connect_activate` exists but the following trait bounds were not satisfied: `gtk::widgets::menu_item::MenuItem : gtk::traits::button::ButtonTrait`\n</code></pre>\n\n<p>Am I doing something wrong?</p>\n"}, {"tags": ["eclipse", "eclipse-plugin", "rust"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436678064, "post_id": 31363064, "comment_id": 50709566, "body": "What system are you using? What eclipse, Rust and GDB version are you using?"}, {"owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436678931, "post_id": 31363064, "comment_id": 50709685, "body": "Windows 7. Eclipse 4.5, Rust 1.1. GDB that comes with MinGW-w64 (not sure how to know which version of GDB it is."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436687706, "post_id": 31363064, "comment_id": 50711266, "body": "Just type <code>gdb</code> (assuming you have it on the PATH), it will print out version information. Does the Eclipse error log show something? Can you try to debug your rust program using gdb manually?"}, {"owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436715542, "post_id": 31363064, "comment_id": 50718320, "body": "GDB version is 7.9.1. I&#39;m not familiar with GDB. How can I use it to debug the rust program manually?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436791860, "post_id": 31363064, "comment_id": 50744880, "body": "@Jouan: On SO, comments are meant to be deleted, on top of not being easily parsed (by eye); please edit the relevant details in the question itself, you&#39;ll do future readers (and potential answerers) a favor."}], "answers": [{"comments": [{"owner": {"reputation": 1357, "user_id": 393898, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89b55a355cb66fff949fe85c45ea4897?s=128&d=identicon&r=PG", "display_name": "BrunoMedeiros", "link": "https://stackoverflow.com/users/393898/brunomedeiros"}, "edited": false, "score": 1, "creation_date": 1436810087, "post_id": 31384768, "comment_id": 50757038, "body": "It should be fixed on this release: <a href=\"https://github.com/RustDT/RustDT/releases/tag/v0.2.2\" rel=\"nofollow noreferrer\">github.com/RustDT/RustDT/releases/tag/v0.2.2</a>"}], "tags": [], "owner": {"reputation": 1357, "user_id": 393898, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/89b55a355cb66fff949fe85c45ea4897?s=128&d=identicon&r=PG", "display_name": "BrunoMedeiros", "link": "https://stackoverflow.com/users/393898/brunomedeiros"}, "is_accepted": true, "score": 1, "last_activity_date": 1436794237, "creation_date": 1436794237, "answer_id": 31384768, "question_id": 31363064, "link": "https://stackoverflow.com/questions/31363064/failing-to-start-debugging-services-with-rustdt/31384768#31384768", "title": "Failing to start debugging services with RustDT", "body": "<p>You didnt' anything wrong, there is a problem with RustDT 0.2.1 and the version of CDT that comes with Eclipse 4.5 (CDT 8.7). Use CDT 8.6 (Eclipse 4.4) and it should work fine. (<a href=\"https://github.com/RustDT/RustDT/issues/44\" rel=\"nofollow\">Issue #44</a>)</p>\n\n<p>The next RustDT release will have this fixed.</p>\n"}], "owner": {"reputation": 166, "user_id": 3042749, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a059c80ee1852c0245cde6777a941bb8?s=128&d=identicon&r=PG&f=1", "display_name": "Jouan", "link": "https://stackoverflow.com/users/3042749/jouan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 399, "favorite_count": 0, "accepted_answer_id": 31384768, "answer_count": 1, "score": 2, "last_activity_date": 1436822474, "creation_date": 1436659534, "last_edit_date": 1436822474, "question_id": 31363064, "link": "https://stackoverflow.com/questions/31363064/failing-to-start-debugging-services-with-rustdt", "title": "Failing to start debugging services with RustDT", "body": "<p>I have followed the instructions in the <a href=\"https://github.com/RustDT/RustDT/blob/latest/documentation/UserGuide.md#user-guide\" rel=\"nofollow\">RustDT user guide</a>, but when starting to debug, Eclipse stays stuck at \"Initializing debugger services\".</p>\n\n<p>Am I missing something?</p>\n\n<p>I'm using Windows 7, Eclipse 4.5, Rust 1.1 and GDB 7.9.1.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1436658564, "post_id": 31362206, "comment_id": 50706528, "body": "Slow today, guys, uh? :) I am also still clueless but I found <a href=\"https://github.com/rust-lang/rust/issues/26937\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26937</a> and to my not expert eyes, this looks as if it might be related."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436659833, "post_id": 31362206, "comment_id": 50706701, "body": "Try annotating the closure like this: <code>|tag,wire_type,source: &amp;_ ,position|</code>  (you could also use the full type, but let&#39;s be ~~as cryptic~~ as lazy as possible.. full type is <code>&amp;Vec&lt;u8&gt;</code>.)"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436662902, "post_id": 31362206, "comment_id": 50707218, "body": "Looks better but I still get: src\\main.rs:89:9: 89:36 error: the trait <code>for&lt;&#39;r&gt; core::ops::Fn&lt;(u32, gpb::definitions::WireType, &amp;&#39;r collections::vec::Vec&lt;u8&gt;, usize)&gt;</code> is not implemented for the type <code>[closure src\\main.rs:75:33: 88:10]</code> [E0277] src\\main.rs:89         gpb::decoding::read_message( source, field_handler );"}], "answers": [{"comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1436688023, "post_id": 31365625, "comment_id": 50711332, "body": "on my read_message() I gave <code>where F: Fn(u32, WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize</code> why does it  need even more nailing down?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1436690128, "post_id": 31365625, "comment_id": 50711767, "body": "@BitTickler I can&#39;t give you a good explanation, because I don&#39;t understand it completely myself.  I believe the issue is that closure inference is more complicated than regular inference, due to capturing, multiple <code>Fn*</code> traits, and higher-ranked lifetimes.  This is the part that has (to date) never been fully implemented; it was implemented in argument position because it <i>had</i> to be in order for closures to be useful <i>at all</i>, but never went beyond that.  For a better answer, you&#39;ll need to find someone who is familiar with the relevant part of the compiler."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1436728961, "post_id": 31365625, "comment_id": 50722452, "body": "The signature of the function is given in the verbatim. So it need not infer the types of the closure parameters as they are given (RUST has no implicit coercion,right?). What it needs to infer is the captures from the context used. And... in my code if I place the closure into the call to <code>read_message</code> it does NOT work - I get new errors such as <code>cannot borrow data mutably in a captured outer variable in an `Fn` closure</code>. For now, I assume closures are broken in RUST and my humble opinion is they should not have used traits to implement them. (They would better be first class citizens)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1436761726, "post_id": 31365625, "comment_id": 50729678, "body": "@BitTickler: Actually, your <i>new</i> problem is because you specified a <code>Fn</code> closure when you want a <code>FnMut</code> closure.  I missed that because I simplified the code a little too aggressively trying to get something that would compile.  Closures aren&#39;t broken, they just aren&#39;t quite as flexible as they could be."}, {"owner": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 0, "creation_date": 1453823344, "post_id": 31365625, "comment_id": 57762581, "body": "@DK. thanks a million, I never would&#39;ve figured that out. Moving my closure definition from its own line to inside the call that was using it fixed my problem, just like you suggested. What I&#39;m wondering now is, is there any way to accomplish the same thing with explicit type annotation? Like <code>let my_closure: [SOMETHING] = |...| {...};</code>? Or is putting the definition in a function call the only way?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 7971, "user_id": 823869, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/0e7b6173470ead2fe170d55b317a9b1d?s=128&d=identicon&r=PG", "display_name": "Jack O&#39;Connor", "link": "https://stackoverflow.com/users/823869/jack-oconnor"}, "edited": false, "score": 1, "creation_date": 1453860603, "post_id": 31365625, "comment_id": 57781519, "body": "@JackO&#39;Connor No, type annotations cannot help you here, because you need to constrain to a trait, not a type.  The syntax for that doesn&#39;t exist."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1557627290, "last_edit_date": 1557627290, "creation_date": 1436687352, "answer_id": 31365625, "question_id": 31362206, "link": "https://stackoverflow.com/questions/31362206/expected-bound-lifetime-parameter-found-concrete-lifetime-e0271/31365625#31365625", "title": "Expected bound lifetime parameter, found concrete lifetime [E0271]", "body": "<p>First thing's first, if you want a quick answer, you should put some effort into writing a minimal, compilable example so that people don't have to guess whether or not a potential solution is going to work or not.  Like this:</p>\n\n<pre><code>enum WireType {}\n\nfn from_gpb(source: &amp;Vec&lt;u8&gt;) {\n    let mut field_handler = |tag, wire_type, source, position| -&gt; usize {\n        let tag: u32 = tag;\n        let wire_type: WireType = wire_type;\n        let source: &amp;Vec&lt;u8&gt; = source;\n        let position: usize = position;\n        panic!();\n    };\n    read_message(source, field_handler);\n}\n\nfn read_message&lt;F&gt;(source: &amp;Vec&lt;u8&gt;, field_handler: F)\nwhere\n    F: Fn(u32, WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize,\n{\n    panic!();\n}\n</code></pre>\n\n<p>The rest of this answer is based on the above which <em>appears</em> to replicate your problem:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0631]: type mismatch in closure arguments\n  --&gt; src/lib.rs:11:5\n   |\n4  |     let mut field_handler = |tag, wire_type, source, position| -&gt; usize {\n   |                             ------------------------------------------- found signature of `fn(u32, WireType, &amp;std::vec::Vec&lt;u8&gt;, usize) -&gt; _`\n...\n11 |     read_message(source, field_handler);\n   |     ^^^^^^^^^^^^ expected signature of `for&lt;'r&gt; fn(u32, WireType, &amp;'r std::vec::Vec&lt;u8&gt;, usize) -&gt; _`\n   |\nnote: required by `read_message`\n  --&gt; src/lib.rs:14:1\n   |\n14 | / fn read_message&lt;F&gt;(source: &amp;Vec&lt;u8&gt;, field_handler: F)\n15 | | where\n16 | |     F: Fn(u32, WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize,\n17 | | {\n18 | |     panic!();\n19 | | }\n   | |_^\n\nerror[E0271]: type mismatch resolving `for&lt;'r&gt; &lt;[closure@src/lib.rs:4:29: 10:6] as std::ops::FnOnce&lt;(u32, WireType, &amp;'r std::vec::Vec&lt;u8&gt;, usize)&gt;&gt;::Output == usize`\n  --&gt; src/lib.rs:11:5\n   |\n11 |     read_message(source, field_handler);\n   |     ^^^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n   |\nnote: required by `read_message`\n  --&gt; src/lib.rs:14:1\n   |\n14 | / fn read_message&lt;F&gt;(source: &amp;Vec&lt;u8&gt;, field_handler: F)\n15 | | where\n16 | |     F: Fn(u32, WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize,\n17 | | {\n18 | |     panic!();\n19 | | }\n   | |_^\n</code></pre>\n\n<p>The simplest thing to do is to allow the compiler to properly infer the closure type:</p>\n\n<pre><code>fn from_gpb_closure_inference(source: &amp;Vec&lt;u8&gt;) {\n    read_message(source, |tag, wire_type, source, position| -&gt; usize {\n        let tag: u32 = tag;\n        let wire_type: WireType = wire_type;\n        let source: &amp;Vec&lt;u8&gt; = source;\n        let position: usize = position;\n        panic!();\n    });\n}\n</code></pre>\n\n<p>Closure inference only really works properly when the closure is provided directly as an argument to a function.  In theory, the two <em>should</em> be equivalent, but they <em>aren't</em>.</p>\n\n<p>The other thing you can do is kind-of trick the compiler into doing the inference without <em>actually</em> using the closure:</p>\n\n<pre><code>fn constrain_handler&lt;F&gt;(f: F) -&gt; F\nwhere\n    F: Fn(u32, WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize,\n{\n    f\n}\n\nfn from_gpb_constrain(source: &amp;Vec&lt;u8&gt;) {\n    let mut field_handler = constrain_handler(|tag, wire_type, source, position| -&gt; usize {\n        let tag: u32 = tag;\n        let wire_type: WireType = wire_type;\n        let source: &amp;Vec&lt;u8&gt; = source;\n        let position: usize = position;\n        panic!();\n    });\n    read_message(source, field_handler);\n}\n</code></pre>\n\n<p>In this case, the <code>constrain_handler</code> function is <em>just</em> getting the compiler to nail down the type of the closure, allowing it to be used (or not) later on.</p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1343, "favorite_count": 0, "accepted_answer_id": 31365625, "answer_count": 1, "score": 1, "last_activity_date": 1557627290, "creation_date": 1436651576, "last_edit_date": 1436712087, "question_id": 31362206, "link": "https://stackoverflow.com/questions/31362206/expected-bound-lifetime-parameter-found-concrete-lifetime-e0271", "title": "Expected bound lifetime parameter, found concrete lifetime [E0271]", "body": "<p>While the code below is an early prototype and not to be taken too seriously concerning how I implement protocol buffers at this stage, I fail to understand what the error message rust compilers blesses me with refers to.</p>\n\n<blockquote>\n  <p>src\\main.rs:89:9: 89:36 error: type mismatch resolving <code>for&lt;'r&gt; &lt;[closure src\\ma\n  in.rs:75:33: 88:10] as core::ops::FnOnce&lt;(u32, gpb::definitions::WireType, &amp;'r collections::vec::Vec&lt;u8&gt;, usize)&gt;&gt;::Output == usize</code>:\n   expected bound lifetime parameter ,\n      found concrete lifetime [E0271]\n  src\\main.rs:89         gpb::decoding::read_message( source, field_handler );</p>\n</blockquote>\n\n<p>Even after reading the 3 documentation chapters on lifetimes et. al. I did not come across the term \"concrete lifetime\" and thus have trouble figuring out what code this error relates to. The closure itself, one or multiple arguments, the return code? The passing of the closure to  <code>read_message()</code>? ...</p>\n\n<p><em>main.rs snippet</em></p>\n\n<pre><code>fn from_gpb( source : &amp;Vec&lt;u8&gt;) -&gt; TimeMessage {\n    fn init_vec_u64( count : usize, init_value : u64) -&gt; Vec&lt;u64&gt; {\n        let mut result = Vec::&lt;u64&gt;::with_capacity(count);\n        for i in 0..count {\n            result.push(init_value);\n        }\n        result\n    }\n    let mut message_id : u32 = 0;\n    let mut times_sec  = init_vec_u64(4,0u64);\n    let mut times_usec = init_vec_u64(4,0u64);\n    let mut max_time_index = 0;\n    let mut time_index = | index | { if max_time_index &lt; index { max_time_index = index;}};\n    let mut field_handler = |tag,wire_type,source,position| -&gt; usize {\n        match (tag,wire_type) {\n            (1u32,gpb::definitions::WireType::Varint) =&gt; {let (v,p) = gpb::decoding::read_varint32(source,position); message_id = v; p},\n            (2u32,gpb::definitions::WireType::Fixed64) =&gt; {let (sec,p) = gpb::decoding::read_fixed64(source,position); times_sec[0] = sec; time_index(0); p},\n            (3u32,gpb::definitions::WireType::Fixed64) =&gt; {let (usec,p) = gpb::decoding::read_fixed64(source,position); times_usec[0] = usec; time_index(0); p},\n            (4u32,gpb::definitions::WireType::Fixed64) =&gt; {let (sec,p) = gpb::decoding::read_fixed64(source,position); times_sec[1] = sec; time_index(1);p},\n            (5u32,gpb::definitions::WireType::Fixed64) =&gt; {let (usec,p) = gpb::decoding::read_fixed64(source,position); times_usec[1] = usec; time_index(1);p},\n            (6u32,gpb::definitions::WireType::Fixed64) =&gt; {let (sec,p) = gpb::decoding::read_fixed64(source,position); times_sec[2] = sec; time_index(2);p},\n            (7u32,gpb::definitions::WireType::Fixed64) =&gt; {let (usec,p) = gpb::decoding::read_fixed64(source,position); times_usec[2] = usec; time_index(2); p},\n            (8u32,gpb::definitions::WireType::Fixed64) =&gt; {let (sec,p) = gpb::decoding::read_fixed64(source,position); times_sec[3] = sec; time_index(3); p},\n            (9u32,gpb::definitions::WireType::Fixed64) =&gt; {let (usec,p) = gpb::decoding::read_fixed64(source,position); times_usec[3] = usec; time_index(3); p},\n            (_,_) =&gt; panic!(\"Invalid field tag/wire_type combination!\") // TODO: change the panic to a gpb::decoding::skip(..) call.\n        }\n    };\n    gpb::decoding::read_message( source, field_handler );\n    let mut make_times = || -&gt; Vec&lt;prectime::PrecTime&gt; {\n        let time_count = max_time_index+1;\n        let mut times = Vec::&lt;prectime::PrecTime&gt;::with_capacity(time_count);\n        times_sec.truncate(time_count);\n        times_usec.truncate(time_count);\n        for i in 0..time_count {\n            times.push(prectime::PrecTime { sec : times_sec[i], usec : times_usec[i]});\n        }\n        times               \n    };\n    TimeMessage { id : message_id, times : make_times() }    \n}\n</code></pre>\n\n<p><em>gpb.rs snippet</em></p>\n\n<pre><code>pub fn read_message&lt;F&gt;( source : &amp;Vec&lt;u8&gt;, field_handler : F) where F: Fn(u32,super::definitions::WireType, &amp;Vec&lt;u8&gt;, usize) -&gt; usize {\n    let mut cursor = 0;\n    while cursor &lt; source.len() {\n        let (tag_and_wire_type, position) = read_varint32( source, cursor );\n        let wt = super::definitions::wire_type_from_value( tag_and_wire_type &amp; 0x07u32 );\n        let tag = (tag_and_wire_type &gt;&gt; 3);\n        let new_pos = field_handler(tag,wt, source,position);\n        cursor = new_pos;\n    }\n}\n</code></pre>\n\n<p>Summary of what the code does:</p>\n\n<ul>\n<li>define field_handler function  </li>\n<li>read_message(data,field_handler) -> calls n times: field_handler</li>\n<li>exit scope.</li>\n</ul>\n\n<p>As anything (the closure, the calls, the vectors, the field_handler writes in <code>from_gpb()</code> context,...) is defined inside <code>from_gpb()</code> function, I simply do not understand how the lifetime could become an issue. All information about lifetimes should be available to the compiler.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 1, "creation_date": 1436648931, "post_id": 31361851, "comment_id": 50704468, "body": "How about if my members are module private? Do I just need to create multiple methods like <code>new</code> and <code>new_default</code>? There&#39;s no function overloading either right? EDIT: or I could make the current member mandatory as opposed to two functions I guess"}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "reply_to_user": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "edited": false, "score": 1, "creation_date": 1436649076, "post_id": 31361851, "comment_id": 50704508, "body": "There is no function overloading because Rust use function names to derive types (function overloading requires the opposite)."}, {"owner": {"reputation": 2878, "user_id": 3087441, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/zIs67.jpg?s=128&g=1", "display_name": "kopiczko", "link": "https://stackoverflow.com/users/3087441/kopiczko"}, "edited": false, "score": 0, "creation_date": 1436693245, "post_id": 31361851, "comment_id": 50712409, "body": "Also notice that you can set <code>Sample</code> fields to an <a href=\"https://doc.rust-lang.org/std/option/\" rel=\"nofollow noreferrer\">Option</a> type."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436715463, "post_id": 31361851, "comment_id": 50718295, "body": "This is a great answer, and I encourage you to cross-post it to the linked duplicate!"}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 5, "last_activity_date": 1436648966, "last_edit_date": 1436648966, "creation_date": 1436648778, "answer_id": 31361851, "question_id": 31361678, "link": "https://stackoverflow.com/questions/31361678/creating-default-function-parameters/31361851#31361851", "title": "Creating default function parameters", "body": "<p>No, Rust doesn't support default function arguments. You have to define different methods, or in case of struct initialization (your example) you can use the struct update syntax like this:</p>\n\n<pre><code>use std::default::Default;\n\n#[derive(Debug)]\npub struct Sample {\n    a: u32,\n    b: u32,\n    c: u32,\n}\n\nimpl Default for Sample {\n    fn default() -&gt; Self {\n        Sample { a: 2, b: 4, c: 6}\n    }\n}\n\nfn main() {\n    let s = Sample { c: 23, .. Sample::default() };\n    println!(\"{:?}\", s);\n}\n</code></pre>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1349, "favorite_count": 0, "closed_date": 1436715430, "answer_count": 1, "score": 2, "last_activity_date": 1436648966, "creation_date": 1436647657, "question_id": 31361678, "link": "https://stackoverflow.com/questions/31361678/creating-default-function-parameters", "closed_reason": "Duplicate", "title": "Creating default function parameters", "body": "<p>Is there a way to create <em>pseudo</em> default function parameters in rust? I'd like to do something like</p>\n\n<pre><code>pub struct Circular&lt;T&gt; {\n    raw: Vec&lt;T&gt;,\n    current: u64\n}\n\nimpl&lt;T&gt; Circular&lt;T&gt; {\n    pub fn new(t_raw: Vec&lt;T&gt;, t_current=0: u64) -&gt; Circular&lt;T&gt; {\n        return Circular { raw: t_raw, current: t_current };\n    }\n</code></pre>\n\n<p>I'd like to have the option of settings the <code>current</code> variable, but it won't always be needed to be set. Is this a possible thing to do in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1436650587, "post_id": 31361334, "comment_id": 50704891, "body": "It&#39;s a very good MVCE. Not an answer, but still a little something I usually do: <a href=\"http://is.gd/PZKWz0\" rel=\"nofollow noreferrer\">is.gd/PZKWz0</a>"}, {"owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "edited": false, "score": 0, "creation_date": 1436652226, "post_id": 31361334, "comment_id": 50705295, "body": "You can resolve even with value.push_str(&amp;&amp;try!(foo()));"}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436713698, "post_id": 31361334, "comment_id": 50717769, "body": "Thanks, @Shepmaster. You&#39;re totally right."}], "answers": [{"tags": [], "owner": {"reputation": 176, "user_id": 1142466, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5ac2faf5e420284a21baae8cb4996d4f?s=128&d=identicon&r=PG", "display_name": "Barosl Lee", "link": "https://stackoverflow.com/users/1142466/barosl-lee"}, "is_accepted": true, "score": 13, "last_activity_date": 1436654824, "last_edit_date": 1436654824, "creation_date": 1436654111, "answer_id": 31362511, "question_id": 31361334, "link": "https://stackoverflow.com/questions/31361334/why-cant-i-take-the-reference-of-the-result-of-try-with/31362511#31362511", "title": "Why can&#39;t I take the reference of the result of try! with &amp;?", "body": "<p>It seems that the compiler handles the coercion of a block differently. <code>try!()</code> is expanded to a <code>match</code> block, and the compiler fails to auto-deref it. Your problem can be abbreviated like below:</p>\n\n<pre><code>fn f(_: &amp;str) {}\n\nfn main() {\n    let x = \"Akemi Homura\".to_owned();\n\n    f(&amp;x); // OK\n    f(&amp;(x)); // OK\n    f(&amp;{x}); // Error\n}\n</code></pre>\n\n<p>I think this is a bug of the compiler. As stated in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\">RFC 401</a>, the compiler should be able to coerce blocks with appropriate types.</p>\n\n<blockquote>\n  <p>blocks, if a block has type <code>U</code>, then the last expression in the block (if it\n  is not semicolon-terminated) is a coercion site to <code>U</code>. This includes blocks\n  which are part of control flow statements, such as <code>if</code>/<code>else</code>, if the block\n  has a known type.</p>\n</blockquote>\n\n<p>As a workaround, I recommend you to convert <code>String</code> into <code>&amp;str</code> directly, using <code>&amp;*try()</code> or <code>&amp;try()[..]</code>. Both have the same meaning, although I prefer the former slightly.</p>\n\n<p>I opened an issue to track this. <a href=\"https://github.com/rust-lang/rust/issues/26978\">https://github.com/rust-lang/rust/issues/26978</a></p>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 329, "favorite_count": 0, "accepted_answer_id": 31362511, "answer_count": 1, "score": 10, "last_activity_date": 1436713015, "creation_date": 1436645332, "last_edit_date": 1436713015, "question_id": 31361334, "link": "https://stackoverflow.com/questions/31361334/why-cant-i-take-the-reference-of-the-result-of-try-with", "title": "Why can&#39;t I take the reference of the result of try! with &amp;?", "body": "<p>It's not exactly an idiomatic MVCE, but it should illustrate the question. Given the following code:</p>\n\n<pre><code>fn foo() -&gt; Result&lt;String, i32&gt; {\n    return Ok(\"world\".to_string());\n}\n\nfn bar() -&gt; Result&lt;String, i32&gt; {\n    let mut value = String::new();\n    value.push_str(&amp;try!(foo())); // this line here\n\n    return Ok(\"Hello \".to_string() + &amp;value);\n}\n\nfn main() {\n    match bar() {\n        Ok(message) =&gt; println!(\"{}\", message),\n        _ =&gt; return,\n    }\n}\n</code></pre>\n\n<p>Rust returns the error:</p>\n\n<blockquote>\n  <p><code>&lt;std macros&gt;:3:43: 3:46</code> error: mismatched types:<br>\n  expected <code>str</code>,<br>\n  found <code>collections::string::String</code><br>\n  (expected <code>str</code>,<br>\n  found struct <code>collections::string::String</code>) [E0308]<br>\n  <code>&lt;std macros&gt;:3 $ crate:: result:: Result:: Ok ( val ) =&gt; val , $ crate:: result:: Result::</code><br>\n  <code>&lt;std macros&gt;:1:1: 6:48</code> note: in expansion of <code>try!</code><br>\n  <code>&lt;std macros&gt;:3:43: 3:46</code> help: run <code>rustc --explain E0308</code> to see a detailed explanation<br>\n  error: aborting due to previous error</p>\n</blockquote>\n\n<p>If I instead capture the result of <code>try!</code> and separately apply <code>&amp;</code> to the result, it works (and prints out <code>Hello world</code>):</p>\n\n<pre><code>fn foo() -&gt; Result&lt;String, i32&gt; {\n    return Ok(\"world\".to_string());\n}\n\nfn bar() -&gt; Result&lt;String, i32&gt; {\n    let mut value = String::new();\n    let foo_result = try!(foo()); // capture the result of try!\n    value.push_str(&amp;foo_result); // now use the result with &amp;\n\n    return Ok(\"Hello \".to_string() + &amp;value);\n}\n\nfn main() {\n    match bar() {\n        Ok(message) =&gt; println!(\"{}\", message),\n        _ =&gt; return,\n    }\n}\n</code></pre>\n\n<p>Why does <code>let foo_result = try!(foo()); value.push_str(&amp;foo_result);</code> work but <code>value.push_str(&amp;try!(foo()));</code> not? From my naive perspective, they appear to be equivalent, so I'm not sure what key part of Rust I'm not understanding.</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1436712444, "post_id": 31360993, "comment_id": 50717376, "body": "<i>Rust does not seem to call this by default</i> \u2014 that is correct. The <code>Default</code> trait is not used by the compiler in any special way. It&#39;s only use is for the programmer."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1436791350, "post_id": 31361031, "comment_id": 50744581, "body": "@A.B.: Why is the first solution inefficient? (naive question, I really have no idea...)"}, {"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 1, "creation_date": 1436791951, "post_id": 31361031, "comment_id": 50744931, "body": "It&#39;s inefficient in cases where you need to construct an array in which the elements differ from each other, say set of poker cards. In a standard 52 card set you&#39;d end up doing 51 unnecessary copies."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 6, "creation_date": 1436796295, "post_id": 31361031, "comment_id": 50747911, "body": "If you have any chance of panic between the call to <code>mem::uninitialized()</code> and the point where the array is fully initialized, then this code is broken and not panic safe. If Foo is a &quot;POD&quot; type then it&#39;s fine, though. Note that as soon as you introduce generics (and call to trait methods in the initialization loop), then you probably have no way of guaranteeing lack of panic anymore."}, {"owner": {"reputation": 2715, "user_id": 612512, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bb7101e3af8cd635dbbb891055675534?s=128&d=identicon&r=PG", "display_name": "Christopher Stevenson", "link": "https://stackoverflow.com/users/612512/christopher-stevenson"}, "edited": false, "score": 1, "creation_date": 1438497692, "post_id": 31361031, "comment_id": 51469883, "body": "In the safe version: since the initialized value  is never read from, is the copy be optimized away by the compiler? (Or could it?)"}, {"owner": {"reputation": 1606, "user_id": 1461154, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/82d0e33bd5d4989410c7e67cefdf056c?s=128&d=identicon&r=PG", "display_name": "James M. Lay", "link": "https://stackoverflow.com/users/1461154/james-m-lay"}, "edited": false, "score": 0, "creation_date": 1520749805, "post_id": 31361031, "comment_id": 85438561, "body": "Version 1 won&#39;t work if <code>Foo</code> has a <code>String</code>, and it&#39;s impractical if <code>Foo</code> has 1000 members.  Version 2 might as well be written in C.  There has to be a better way, right?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1521231253, "post_id": 31361031, "comment_id": 85659586, "body": "Is &quot;it might as well be C&quot; so bad? The rest of the program is &quot;still Rust&quot;. Of course safe implementations are great when we have them."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1577453610, "post_id": 31361031, "comment_id": 105175319, "body": "Simple things done complicated - that is the Rust way. Seriously, I wonder how many gave up on Rust after stumbling into seemingly easy (easy in other languages) situations, where they get stuck and waste their time. I still return to Rust once in a while, but I am still not over the fact, that I could not make a compile time lookup table with enum values in it, just because Rust thought it is a good idea to move them on access."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 29, "last_activity_date": 1577453187, "last_edit_date": 1577453187, "creation_date": 1436643312, "answer_id": 31361031, "question_id": 31360993, "link": "https://stackoverflow.com/questions/31360993/what-is-the-proper-way-to-initialize-a-fixed-length-array/31361031#31361031", "title": "What is the proper way to initialize a fixed length array?", "body": "<p>The safe but <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f05ae2ebcc6acaaaa7efc0f9a81c7ea9\" rel=\"noreferrer\">somewhat inefficient solution</a>:</p>\n\n<pre><code>#[derive(Copy, Clone, Debug)]\nstruct Foo {\n    a: u32,\n    b: u32,\n}\n\nfn main() {\n    let mut foo_array = [Foo { a: 10, b: 10 }; 10];\n}\n</code></pre>\n\n<p>Since you're specifically asking for <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0421fd615358d11008e6f34e33c7ce5e\" rel=\"noreferrer\">a solution without copies</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem::MaybeUninit;\n\n#[derive(Debug)]\nstruct Foo {\n    a: u32,\n    b: u32,\n}\n\n// We're just implementing Drop to prove there are no unnecessary copies.\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"Destructor running for a Foo\");\n    }\n}\n\npub fn main() {\n    let array = {\n        // Create an array of uninitialized values.\n        let mut array: [MaybeUninit&lt;Foo&gt;; 10] = unsafe { MaybeUninit::uninit().assume_init() };\n\n        for (i, element) in array.iter_mut().enumerate() {\n            let foo = Foo { a: i as u32, b: 0 };\n            *element = MaybeUninit::new(foo);\n        }\n\n        unsafe { std::mem::transmute::&lt;_, [Foo; 10]&gt;(array) }\n    };\n\n    for element in array.iter() {\n        println!(\"{:?}\", element);\n    }\n}\n</code></pre>\n\n<p>This is recommended by <a href=\"https://doc.rust-lang.org/core/mem/union.MaybeUninit.html#initializing-an-array-element-by-element\" rel=\"noreferrer\">the documentation of <code>MaybeUninit</code></a>.</p>\n"}, {"tags": [], "owner": {"reputation": 2105, "user_id": 870079, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/58fd7fa8ab09a8a4c7b204f67e3f818e?s=128&d=identicon&r=PG", "display_name": "heinrich5991", "link": "https://stackoverflow.com/users/870079/heinrich5991"}, "is_accepted": false, "score": 8, "last_activity_date": 1552491478, "last_edit_date": 1552491478, "creation_date": 1484141260, "answer_id": 41592218, "question_id": 31360993, "link": "https://stackoverflow.com/questions/31360993/what-is-the-proper-way-to-initialize-a-fixed-length-array/41592218#41592218", "title": "What is the proper way to initialize a fixed length array?", "body": "<p>You can use the <a href=\"https://docs.rs/arrayvec/0.4.10/arrayvec/index.html\" rel=\"noreferrer\"><code>arrayvec</code> crate</a>:</p>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"initialize_array\"\nversion = \"0.1.0\"\nauthors = [\"author\"]\nedition = \"2018\"\n\n[dependencies]\narrayvec = \"0.4.10\"\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>use arrayvec::ArrayVec; \nuse std::iter;\n\n#[derive(Clone)]\nstruct Foo {\n    a: u32,\n    b: u32,\n}\n\nfn main() {\n    let foo_array: [Foo; 10] = iter::repeat(Foo { a: 10, b: 10 })\n        .collect::&lt;ArrayVec&lt;_&gt;&gt;()\n        .into_inner()\n        .unwrap_or_else(|_| unreachable!());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "is_accepted": false, "score": 0, "last_activity_date": 1618937675, "last_edit_date": 1618937675, "creation_date": 1618928797, "answer_id": 67180898, "question_id": 31360993, "link": "https://stackoverflow.com/questions/31360993/what-is-the-proper-way-to-initialize-a-fixed-length-array/67180898#67180898", "title": "What is the proper way to initialize a fixed length array?", "body": "<p>The easiest way is to derive <code>Copy</code> on your type and initialize the array with that, copying the element <code>N</code> times:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Copy)]\nstruct Foo {\n    a: u32,\n    b: u32,\n}\n\nlet mut foo_array = [Foo { a: 1, b: 2 }; 10];\n</code></pre>\n<p>If you want to avoid copying, there are a couple options. You can use the <code>Default</code> trait:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let mut foo_array: [Foo; 10] = Default::default();\n</code></pre>\n<p>However, this is limited to arrays up to 32 elements. With const generics, it is now possible for the standard library to provide <code>Default</code> for <em>all</em> arrays. However, this would be a backward incompatible change for subtle reasons that are being worked on.</p>\n<p>For now, you can take advantage of the fact that <code>const</code> values are also allowed in array repetition expressions:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>const FOO: Foo = Foo { a: 1, b: 2 };\n\nlet mut foo_array = [FOO; 10];\n</code></pre>\n<p>If you're on nightly, you can use <code>array::map</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(array_map)]\n\nlet mut foo_array = [(); 10].map(|_| Foo::default())\n</code></pre>\n"}], "owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 23440, "favorite_count": 8, "accepted_answer_id": 31361031, "answer_count": 3, "score": 26, "last_activity_date": 1618937675, "creation_date": 1436643108, "last_edit_date": 1515555552, "question_id": 31360993, "link": "https://stackoverflow.com/questions/31360993/what-is-the-proper-way-to-initialize-a-fixed-length-array", "title": "What is the proper way to initialize a fixed length array?", "body": "<p>I'm having trouble initializing a fixed length array.  <a href=\"https://play.rust-lang.org/?gist=856973d22eaa99630b62f0ecafa7ee92&amp;version=nightly\" rel=\"noreferrer\">My attempts so far all result in the same \"use of possibly uninitialized variable: <code>foo_array</code>\" error</a>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Foo { a: u32, b: u32 }\n\nimpl Default for Foo {\n    fn default() -&gt; Foo { Foo{a:1, b:2} }\n}\n\npub fn main() {\n    let mut foo_array: [Foo; 10];\n\n    // Do something here to in-place initialize foo_array?\n\n    for f in foo_array.iter() {\n        println!(\"{:?}\", f);\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0381]: use of possibly uninitialized variable: `foo_array`\n  --&gt; src/main.rs:13:14\n   |\n13 |     for f in foo_array.iter() {\n   |              ^^^^^^^^^ use of possibly uninitialized `foo_array`\n</code></pre>\n\n<p>I implemented the <code>Default</code> trait, but Rust does not seem to call this by default akin to a C++ constructor.</p>\n\n<p>What is the proper way to initialize a fixed length array?  I'd like to do an efficient in-place initialization rather than some sort of copy.</p>\n\n<p>Related: <a href=\"https://stackoverflow.com/questions/27876588/why-is-the-copy-trait-needed-for-default-struct-valued-array-initialization\">Why is the Copy trait needed for default (struct valued) array initialization?</a></p>\n\n<p>Related: <a href=\"https://stackoverflow.com/questions/26185618/is-there-a-way-to-not-have-to-initialize-arrays-twice\">Is there a way to not have to initialize arrays twice?</a></p>\n"}, {"tags": ["rust", "closures"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 21, "last_activity_date": 1537719240, "last_edit_date": 1537719240, "creation_date": 1436640112, "answer_id": 31360554, "question_id": 31360003, "link": "https://stackoverflow.com/questions/31360003/is-there-another-option-to-share-an-arc-in-multiple-closures-besides-cloning-it/31360554#31360554", "title": "Is there another option to share an Arc in multiple closures besides cloning it before each closure?", "body": "<p>There is no way around it. You should clone the <code>Arc</code> before it is used in a closure. The common pattern is to re-bind the cloned <code>Arc</code> to the same name in a nested scope:</p>\n\n<pre><code>use std::sync::Arc;\n\nfn main() {    \n    let arc = Arc::new(42);\n    {\n        let arc = arc.clone();\n        move || { /* do something with arc */ };\n    }\n    {\n        let arc = arc.clone();\n        move || { /* do something else with arc */ };\n    }\n}\n</code></pre>\n\n<p>This is usually done together with <code>thread::spawn()</code>:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nconst NUM_THREADS: usize = 4;\n\nfn main() {\n    let arc = Arc::new(Mutex::new(42));\n    for _ in 0..NUM_THREADS {\n        let arc = arc.clone();\n        thread::spawn(move || {\n            let mut shared_data = arc.lock().unwrap();\n            *shared_data += 1;\n        });\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1538413699, "creation_date": 1538413699, "answer_id": 52595764, "question_id": 31360003, "link": "https://stackoverflow.com/questions/31360003/is-there-another-option-to-share-an-arc-in-multiple-closures-besides-cloning-it/52595764#52595764", "title": "Is there another option to share an Arc in multiple closures besides cloning it before each closure?", "body": "<blockquote>\n  <p>is there another option?</p>\n</blockquote>\n\n<p>Because this pattern of cloning things before defining a closure is somewhat common, some people have <a href=\"https://github.com/rust-lang/rfcs/issues/2407\" rel=\"nofollow noreferrer\">proposed adding something like <code>clone ||</code> as an analog to <code>move ||</code></a>. I wouldn't hold out hope for this happening, but a number of comments there point out that macros can solve the case fairly well.</p>\n\n<p>Several crates provide some form of this macro:</p>\n\n<ul>\n<li><a href=\"https://crates.io/crates/closet\" rel=\"nofollow noreferrer\">closet</a></li>\n<li><a href=\"https://crates.io/crates/capture\" rel=\"nofollow noreferrer\">capture</a></li>\n<li><a href=\"https://crates.io/crates/clone_all\" rel=\"nofollow noreferrer\">clone_all</a></li>\n</ul>\n\n<p>It's likely that many projects define their own macro to do something similar. For example, the <a href=\"https://github.com/rust-webplatform/rust-todomvc/blob/51cbd62e906a6274d951fd7a8f5a6c33fcf8e7ea/src/main.rs#L34-L41\" rel=\"nofollow noreferrer\">WASM example rust-todomvc</a> defines:</p>\n\n<pre><code>macro_rules! enclose {\n    ( ($( $x:ident ),*) $y:expr ) =&gt; {\n        {\n            $(let $x = $x.clone();)*\n            $y\n        }\n    };\n}\n</code></pre>\n\n<p>Which can be used as:</p>\n\n<pre><code>fn main() {\n    let arc = Arc::new(42);\n    enclose! { (arc) move || arc };\n    enclose! { (arc) move || arc };\n}\n</code></pre>\n"}], "owner": {"reputation": 189, "user_id": 1433492, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/a8381d78a59d66af376f0c1a8ececdae?s=128&d=identicon&r=PG", "display_name": "Tomer", "link": "https://stackoverflow.com/users/1433492/tomer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2294, "favorite_count": 5, "accepted_answer_id": 31360554, "answer_count": 2, "score": 15, "last_activity_date": 1538413807, "creation_date": 1436636616, "last_edit_date": 1538413807, "question_id": 31360003, "link": "https://stackoverflow.com/questions/31360003/is-there-another-option-to-share-an-arc-in-multiple-closures-besides-cloning-it", "title": "Is there another option to share an Arc in multiple closures besides cloning it before each closure?", "body": "<p>I have something like this:</p>\n\n<pre><code>use std::sync::Arc;\n\nfn main() {\n    let arc = Arc::new(42);\n    move || { arc.clone() };\n    move || { arc.clone() };\n}\n</code></pre>\n\n<p>I am getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: capture of moved value: `arc`\n --&gt; src/main.rs:6:19\n  |\n5 |         move || { arc.clone() };\n  |         ------- value moved (into closure) here\n6 |         move || { arc.clone() };\n  |                   ^^^ value captured here after move\n  |\n  = note: move occurs because `arc` has type `std::sync::Arc&lt;i32&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I understand why I am getting this: the <code>clone</code> isn't called before <code>arc</code> is passed to the closure. I can fix this by defining each closure in a function and clone the <code>Arc</code> before passing it to the closure, but is there another option?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4454, "user_id": 272427, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/10f0f1452979307efc4583ba099ba801?s=128&d=identicon&r=PG", "display_name": "dubiousjim", "link": "https://stackoverflow.com/users/272427/dubiousjim"}, "edited": false, "score": 0, "creation_date": 1611299441, "post_id": 31359044, "comment_id": 116411088, "body": "Expanding on this, without <code>Copy</code> the <code>*foo</code> is interpreted as moving the pointed-to value out of the shared reference passed to <code>f</code>."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 45, "last_activity_date": 1520306108, "last_edit_date": 1520306108, "creation_date": 1436630565, "answer_id": 31359044, "question_id": 31358826, "link": "https://stackoverflow.com/questions/31358826/how-do-i-convert-an-enum-reference-to-a-number/31359044#31359044", "title": "How do I convert an enum reference to a number?", "body": "<p><code>*foo as u8</code> is correct, but you have to implement <code>Copy</code> because otherwise you would leave behind an invalid reference.</p>\n\n<pre><code>#[derive(Copy, Clone)]\nenum Foo {\n    Bar = 1,\n}\n\nfn f(foo: &amp;Foo) -&gt; u8 {\n    *foo as u8\n}\n</code></pre>\n\n<p>Since your enum will be a very lightweight object you should pass it around by value anyway, for which you would need <code>Copy</code> as well.</p>\n"}], "owner": {"reputation": 8699, "user_id": 74235, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/996b64c2708771eb4f0c479e0d3a0646?s=128&d=identicon&r=PG", "display_name": "Vitaly Kushner", "link": "https://stackoverflow.com/users/74235/vitaly-kushner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 17295, "favorite_count": 3, "accepted_answer_id": 31359044, "answer_count": 1, "score": 37, "last_activity_date": 1520306108, "creation_date": 1436629088, "last_edit_date": 1520306062, "question_id": 31358826, "link": "https://stackoverflow.com/questions/31358826/how-do-i-convert-an-enum-reference-to-a-number", "title": "How do I convert an enum reference to a number?", "body": "<p>I have an enum:</p>\n\n<pre><code>enum Foo {\n    Bar = 1,\n}\n</code></pre>\n\n<p>How do I convert a reference to this enum into an integer to be used in math?</p>\n\n<pre><code>fn f(foo: &amp;Foo) {\n    let f = foo as u8;  // error[E0606]: casting `&amp;Foo` as `u8` is invalid\n    let f = foo as &amp;u8; // error[E0605]: non-primitive cast: `&amp;Foo` as `&amp;u8`\n    let f = *foo as u8; // error[E0507]: cannot move out of borrowed content\n}\n</code></pre>\n"}, {"tags": ["mysql", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436712612, "post_id": 31356518, "comment_id": 50717430, "body": "Did you look at the <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+%22does+not+live+long+enough%22\"><b>37</b> other questions</a> that mention <i>&quot;does not live long enough&quot;</i>? How does this question differ from them?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436855519, "post_id": 31356518, "comment_id": 50773452, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/27841657/how-to-return-a-pointer-to-owned-value-that-does-not-live-long-enough\">How to return a pointer to owned value that &quot;does not live long enough&quot;?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 19, "user_id": 5105699, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb980f4585431cb4e2fdf4bb310f7996?s=128&d=identicon&r=PG&f=1", "display_name": "MattWalton122", "link": "https://stackoverflow.com/users/5105699/mattwalton122"}, "edited": false, "score": 0, "creation_date": 1436622437, "post_id": 31356607, "comment_id": 50697010, "body": "Thank you so much, this has helped a lot. Is there any other material you&#39;d recommend me reading apart from the docs on the website?"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 2, "last_activity_date": 1436613776, "last_edit_date": 1436613776, "creation_date": 1436613439, "answer_id": 31356607, "question_id": 31356518, "link": "https://stackoverflow.com/questions/31356518/returning-a-reference-does-not-live-long-enough/31356607#31356607", "title": "Returning a reference does not live long enough", "body": "<p>You don't want to return a reference to an account, but you want to <em>pass ownership</em> to the caller after retrieving from the db.</p>\n\n<p>Thus, change the signature to:</p>\n\n<pre><code>fn load(db: &amp;MyPool, id: i32) -&gt; Account\n</code></pre>\n\n<p>Now the idea would be to return the object by value, not by reference:</p>\n\n<pre><code>accounts[0]\n</code></pre>\n\n<p>However doing so will fail with an <code>error: cannot move out of indexed content</code>. A better approach would be to avoid collecting in a vector altogether, and use <a href=\"http://doc.rust-lang.org/nightly/std/iter/trait.Iterator.html#tymethod.next\" rel=\"nofollow\"><code>Iterator::next(&amp;self)</code></a> to take the first element. This would look like:</p>\n\n<pre><code>fn load(db: &amp;MyPool, id: i32) -&gt; Account{\n    let account: Account = db.prepare(\"SELECT id, balance, name FROM `accounts` WHERE `id`=?\")\n    .and_then(|mut stmt| {\n        stmt.execute(&amp;[&amp;id]).map(|result| {\n            result.map(|x| x.unwrap()).map(|row| {\n                Account{\n                    id: from_value(&amp;row[0]), \n                    balance: from_value(&amp;row[1]), \n                    name: from_value(&amp;row[2])\n                }\n            }).next().unwrap() // &lt;- next() takes the first elt of the iterator\n        })\n    }).unwrap();\n\n    account // &lt;- return by value, pass ownership to caller\n}\n</code></pre>\n\n<p>(Untested as I couldn't reproduce your dev environment.)</p>\n\n<p>Kind of unrelated, but it is worth noting that those multiple <code>unwrap()</code> calls render your function extremely brittle as any failure will crash your whole program with a panic. Fortunately the answer to this bad smell is easy: you want to return <code>Option&lt;Account&gt;</code> rather than <code>Account</code>. Then remove all calls to <code>unwrap()</code> and let the <code>Option&lt;Account&gt;</code> propagate throughout calls (your use of <code>map()</code> is good because it says \"return <code>None</code> if you find <code>None</code> and return <code>Some(f(a))</code> if you find <code>Some(a)</code>\".)</p>\n"}], "owner": {"reputation": 19, "user_id": 5105699, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb980f4585431cb4e2fdf4bb310f7996?s=128&d=identicon&r=PG&f=1", "display_name": "MattWalton122", "link": "https://stackoverflow.com/users/5105699/mattwalton122"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 90, "favorite_count": 0, "accepted_answer_id": 31356607, "answer_count": 1, "score": 0, "last_activity_date": 1436716234, "creation_date": 1436612743, "last_edit_date": 1436716234, "question_id": 31356518, "link": "https://stackoverflow.com/questions/31356518/returning-a-reference-does-not-live-long-enough", "title": "Returning a reference does not live long enough", "body": "<p>I've just started learning Rust, and have come from a mainly JavaScript background so I'm a bit stumped when it comes to the whole borrowing system and memory management. </p>\n\n<p>I have the following code:</p>\n\n<pre><code>fn load(db: &amp;MyPool, id: i32) -&gt; &amp;Account{\n    let accounts: Vec&lt;Account&gt; = db.prepare(\"SELECT id, balance, name FROM `accounts` WHERE `id`=?\")\n    .and_then(|mut stmt| {\n        stmt.execute(&amp;[&amp;id]).map(|result| {\n            result.map(|x| x.unwrap()).map(|row| {\n                Account{\n                    id: from_value(&amp;row[0]), \n                    balance: from_value(&amp;row[1]), \n                    name: from_value(&amp;row[2])\n                }\n            }).collect()\n        })\n    }).unwrap();\n\n    &amp;accounts[0]\n\n}\n</code></pre>\n\n<p>And I've managed to fix all the errors the compiler throws out apart from\n<code>/main.rs:42:4: 42:12 error: 'accounts' does not live long enough</code></p>\n\n<p>Is this the best way to get one result from the MySQL query, or have I been going at it completely wrong?</p>\n"}, {"tags": ["templates", "generics", "call", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436618578, "post_id": 31354984, "comment_id": 50696023, "body": "Is there a rust bug for this misleading error message? I couldn&#39;t find anything by a naive search,"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1436620169, "post_id": 31354984, "comment_id": 50696461, "body": "I haven&#39;t found one either, so I guess it makes sense to create one."}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1436622427, "post_id": 31354984, "comment_id": 50697006, "body": "What does FnOnce(T, U) -&gt; V mean?  I can&#39;t find a description of this syntax.  Is Output a special keyword?"}, {"owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1436625744, "post_id": 31354984, "comment_id": 50697856, "body": "Oh, I see now.  You&#39;re not actually using FnOnce(T,U) -&gt; V in the place I thought you were.  That&#39;s just the type of the resulting function."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "edited": false, "score": 0, "creation_date": 1436637114, "post_id": 31354984, "comment_id": 50701227, "body": "@dspyz, <code>FnOnce(T, U) -&gt; V</code> is a syntax for closure trait bounds, it is described in the book in the <a href=\"http://doc.rust-lang.org/book/closures.html\" rel=\"nofollow noreferrer\">chapter on closures</a>. <code>Output</code> in <code>FnOnce&lt;(T, U), Output=V&gt;</code> is a syntax for specifying associated types in trait bounds, and it is also described <a href=\"http://doc.rust-lang.org/book/associated-types.html\" rel=\"nofollow noreferrer\">in the book</a>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1436604118, "last_edit_date": 1436604118, "creation_date": 1436602360, "answer_id": 31354984, "question_id": 31353960, "link": "https://stackoverflow.com/questions/31353960/how-to-use-parentheses-for-generics/31354984#31354984", "title": "How to use parentheses for generics?", "body": "<p>There are several problems with your code.</p>\n\n<p>First of all, you cannot use <code>Fn*</code> traits directly in stable Rust. This includes 1) using angle-brackets notation, and 2) implementing these traits. It is possible to enable a feature flag for both of these things in unstable Rust though.</p>\n\n<p>Second, if you do use angle brackets for closure traits, you have to use tuples for arguments, even if there is only one argument:</p>\n\n<pre><code>FnOnce&lt;(A,)&gt;\n</code></pre>\n\n<p>Third, the error message is that instead of <code>FnOnce&lt;(T, U), Output=V&gt;</code> you should write <code>FnOnce(T, U) -&gt; V</code>. That's what is meant under \"using parentheses\" message. I agree that this message is misleading here because you can't implement <code>Fn</code> when it is written like this because of associated types. I guess the error about implementing <code>Fn</code> types should take precedence over this error.</p>\n\n<p>Fourth, you won't be able to do what you want (a memoizing function backed by a hash map) when you use <code>&amp;'a MemoedFun&lt;A, R&gt;</code> because you need a mutable pointer to update the map. You need to implement <code>FnOnce</code> for <code>&amp;'a mut MemoedFun&lt;A, R&gt;</code>:</p>\n\n<pre><code>impl&lt;'a, A: Eq + Hash, R&gt; FnOnce&lt;(A,)&gt; for &amp;'a mut MemoedFun&lt;A, R&gt; {\n    type Output = &amp;'a R;\n\n    extern \"rust-call\" fn call_once(self, (arg,): (A,)) -&gt; &amp;'a R {\n        if self.map.contains_key(&amp;arg) {\n            &amp;self.map[&amp;arg]\n        } else {\n            let r = (self.fun)(&amp;arg);\n            self.map.entry(arg).or_insert(r)\n        }\n    }\n}\n</code></pre>\n\n<p>And finally, the resulting code you would have to write to use this memoizer isn't pretty. You can't use function syntax on your \"function\" for some reason, so you would need to use <code>call_once()</code> directly:</p>\n\n<pre><code>fn computer(x: &amp;i32) -&gt; i32 {\n    println!(\"Computing for {}\", x);\n    -*x\n}\n\nlet mut f = memoize(computer);\n\nprintln!(\"f(10): {}\", (&amp;mut f).call_once((10,)));\nprintln!(\"f(10): {}\", (&amp;mut f).call_once((10,)));\nprintln!(\"f(42): {}\", (&amp;mut f).call_once((42,)));\n</code></pre>\n\n<p>(try it <a href=\"https://play.rust-lang.org/?gist=df3ab940742a120f06cf&amp;version=nightly\">here</a>)</p>\n\n<p>There is a reason why <code>Fn*</code> traits manual implementation is not stabilized, after all.</p>\n"}], "owner": {"reputation": 4870, "user_id": 403875, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/439b8283080e4e2255205993da9de9ca?s=128&d=identicon&r=PG", "display_name": "dspyz", "link": "https://stackoverflow.com/users/403875/dspyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 677, "favorite_count": 0, "accepted_answer_id": 31354984, "answer_count": 1, "score": 6, "last_activity_date": 1436604118, "creation_date": 1436594433, "question_id": 31353960, "link": "https://stackoverflow.com/questions/31353960/how-to-use-parentheses-for-generics", "title": "How to use parentheses for generics?", "body": "<p>I'm getting the compile error:</p>\n\n<p>angle-bracket notation is not stable when used with the <code>Fn</code> family of traits, use parentheses [E0215]</p>\n\n<p>What does this mean?  How do I \"use parentheses\"?</p>\n\n<pre><code>use std::hash::Hash;\nuse std::collections::HashMap;\n\nstruct MemoedFun&lt;A, R&gt; {\n    fun: fn(&amp;A) -&gt; R,\n    map: HashMap&lt;A, R&gt;,\n}\n\nfn memoize&lt;A: Eq + Hash, R&gt;(fun: fn(&amp;A) -&gt; R) -&gt; MemoedFun&lt;A, R&gt; {\n    MemoedFun {\n        fun: fun,\n        map: HashMap::new(),\n    }\n}\n\nimpl&lt;'a, A, R&gt; FnOnce&lt;A&gt; for &amp;'a MemoedFun&lt;A, R&gt; {\n    type Output=&amp;'a R;\n}\n</code></pre>\n"}, {"tags": ["debugging", "multidimensional-array", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1436624253, "post_id": 31353422, "comment_id": 50697457, "body": "Look like my Rust is a bit rusty. I was under the impression that a &amp;Trait can only be constructed with an explicit cast."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1436589028, "creation_date": 1436589028, "answer_id": 31353422, "question_id": 31348281, "link": "https://stackoverflow.com/questions/31348281/using-formatterdebug-list-to-implement-debug-for-a-two-dimensional-array/31353422#31353422", "title": "Using Formatter::debug_list to implement Debug for a two-dimensional array", "body": "<p><code>entry()</code> is defined thus:</p>\n\n<pre><code>pub fn entry(&amp;mut self, entry: &amp;fmt::Debug) -&gt; &amp;mut DebugList&lt;'a, 'b&gt;;\n</code></pre>\n\n<p>It takes a <code>fmt::Debug</code> <em>trait object</em>. Thus when you pass it a <code>&amp;[T]</code>, it wants to cast it implicitly to <code>&amp;fmt::Debug</code>. This, however, cannot be done, for trait objects can only be constructed of sized objects. The solution is to make a trait object of the sized slice; that is, pass something of type <code>&amp;&amp;[T]</code> which can then be implicitly converted to <code>&amp;fmt::Debug</code>, containing the type <code>&amp;[T]</code>. That is, <code>b.entry(&amp;e)</code> instead of <code>b.entry(e)</code>.</p>\n\n<p>Your <code>builder</code> line is unnecessary too and actually introduces lifetime problems; you should declare it as part of the <code>fold</code> call for convenience.</p>\n\n<p>This leaves you with this as your final result:</p>\n\n<pre><code>impl&lt;T: fmt::Debug&gt; fmt::Debug for Array2&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        self.rows().fold(&amp;mut f.debug_list(), |b, e| b.entry(&amp;e)).finish()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "accepted_answer_id": 31353422, "answer_count": 1, "score": 4, "last_activity_date": 1436589028, "creation_date": 1436554481, "last_edit_date": 1436556229, "question_id": 31348281, "link": "https://stackoverflow.com/questions/31348281/using-formatterdebug-list-to-implement-debug-for-a-two-dimensional-array", "title": "Using Formatter::debug_list to implement Debug for a two-dimensional array", "body": "<p>I'm wondering if it's possible to get this to compile.</p>\n\n<pre><code>impl&lt;T: fmt::Debug&gt; fmt::Debug for Array2&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let ref mut builder = f.debug_list();\n        self.rows().fold(builder, |b, e| b.entry(e)).finish()\n    }\n}\n</code></pre>\n\n<p><code>self.rows</code> is an iterator that yields <code>&amp;[T]</code>.</p>\n\n<p>The error here is that Sized is not implement for <code>[T]</code> in the context of <code>b.entry(e)</code>, which is bizarre because the iterator yields <code>&amp;[T]</code> as mentioned before.</p>\n\n<p>I'm not able to figure this out, in part because I can't make sense of the function signatures involved here. </p>\n\n<pre><code>fn entry(self, entry: &amp;Debug) -&gt; DebugList&lt;'a, 'b&gt;\n</code></pre>\n\n<p>Note the <code>&amp;Debug</code>.</p>\n\n<p>Yet the relevant documentation example is passing references <code>&amp;i32</code> to the builder.</p>\n\n<pre><code>struct Foo(Vec&lt;i32&gt;);\n\nimpl fmt::Debug for Foo {\n    fn fmt(&amp;self, fmt: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        self.0.iter().fold(fmt.debug_list(), |b, e| b.entry(e)).finish()\n    }\n}\n</code></pre>\n\n<p>With this much confusion there has to be something interesting to learn.</p>\n\n<p>The desired output would be something like <code>[[1, 2], [3, 4]]</code>.</p>\n\n<p>A similar example that anyone can compile:</p>\n\n<pre><code>use std::fmt;\n\nfn fmt&lt;T: fmt::Debug&gt;(vec: &amp;Vec&lt;T&gt;, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    let ref mut builder = f.debug_list();\n    vec.chunks(4).fold(builder, |b, e| b.entry(e)).finish()\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1436543736, "post_id": 31345001, "comment_id": 50674198, "body": "you should always first search on crates.io when you are looking for a library <a href=\"https://crates.io/crates/chan\" rel=\"nofollow noreferrer\">crates.io/crates/chan</a>"}, {"owner": {"reputation": 491, "user_id": 1391518, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e4c48b4adba29570d445ba1d181951c?s=128&d=identicon&r=PG", "display_name": "hnakamur", "link": "https://stackoverflow.com/users/1391518/hnakamur"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1436544668, "post_id": 31345001, "comment_id": 50674752, "body": "Thanks. I&#39;ll take a look."}, {"owner": {"reputation": 2590, "user_id": 1479360, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f3ddfbe76c5687a5ead4d06dfbb12dc2?s=128&d=identicon&r=PG", "display_name": "abject_error", "link": "https://stackoverflow.com/users/1479360/abject-error"}, "edited": false, "score": 0, "creation_date": 1436578837, "post_id": 31345001, "comment_id": 50687809, "body": "There&#39;s also <a href=\"https://github.com/mahkoh/comm\" rel=\"nofollow noreferrer\">github.com/mahkoh/comm</a>"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "edited": false, "score": 1, "creation_date": 1516730181, "post_id": 31345001, "comment_id": 83805033, "body": "<a href=\"https://github.com/crossbeam-rs/crossbeam-channel\" rel=\"nofollow noreferrer\">github.com/crossbeam-rs/crossbeam-channel</a>"}], "answers": [{"tags": [], "owner": {"reputation": 491, "user_id": 1391518, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e4c48b4adba29570d445ba1d181951c?s=128&d=identicon&r=PG", "display_name": "hnakamur", "link": "https://stackoverflow.com/users/1391518/hnakamur"}, "is_accepted": false, "score": 2, "last_activity_date": 1436544581, "creation_date": 1436544581, "answer_id": 31345508, "question_id": 31345001, "link": "https://stackoverflow.com/questions/31345001/is-there-a-library-for-single-producer-multiple-consumers-channel/31345508#31345508", "title": "Is there a library for single producer multiple consumers channel?", "body": "<p>I found <a href=\"https://github.com/viperscape/oyashio\" rel=\"nofollow\">viperscape/oyashio</a> in reddit threads below:</p>\n\n<ul>\n<li><a href=\"https://www.reddit.com/r/rust/comments/39hg6p/rust_pipelining_patterns/\" rel=\"nofollow\">Rust Pipelining Patterns : rust</a></li>\n<li><a href=\"http://www.reddit.com/r/rust/comments/39toz3/first_steps_for_a_pipeline_model_in_rust/\" rel=\"nofollow\">First steps for a pipeline model in Rust : rust</a></li>\n</ul>\n"}], "owner": {"reputation": 491, "user_id": 1391518, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e4c48b4adba29570d445ba1d181951c?s=128&d=identicon&r=PG", "display_name": "hnakamur", "link": "https://stackoverflow.com/users/1391518/hnakamur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2930, "favorite_count": 0, "closed_date": 1436546132, "answer_count": 1, "score": 5, "last_activity_date": 1436544581, "creation_date": 1436543074, "question_id": 31345001, "link": "https://stackoverflow.com/questions/31345001/is-there-a-library-for-single-producer-multiple-consumers-channel", "closed_reason": "Not suitable for this site", "title": "Is there a library for single producer multiple consumers channel?", "body": "<p>The channel for multiple producers and single consumer is in the rust standard library: <a href=\"https://doc.rust-lang.org/nightly/std/sync/mpsc/index.html\" rel=\"noreferrer\">std::sync::mpsc - Rust</a></p>\n\n<p>Is there a library for single producer multiple consumers channel somewhere?</p>\n\n<p>Thanks!</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 555, "user_id": 4637817, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/849a2d4951995c9fcb2b9aec36faaf2c?s=128&d=identicon&r=PG&f=1", "display_name": "Remagpie", "link": "https://stackoverflow.com/users/4637817/remagpie"}, "edited": false, "score": 0, "creation_date": 1436530795, "post_id": 31339851, "comment_id": 50665153, "body": "I already installed CSFML library, but in different directory. More explanation is on edited question."}], "tags": [], "owner": {"reputation": 3181, "user_id": 4998184, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/29c803cb4341d0ff630cb3ca04ab7251?s=128&d=identicon&r=PG", "display_name": "eulerdisk", "link": "https://stackoverflow.com/users/4998184/eulerdisk"}, "is_accepted": false, "score": 3, "last_activity_date": 1436538880, "last_edit_date": 1436538880, "creation_date": 1436528423, "answer_id": 31339851, "question_id": 31338945, "link": "https://stackoverflow.com/questions/31338945/how-can-i-pass-parameters-to-gcc-in-rust-with-cargo/31339851#31339851", "title": "How can I pass parameters to gcc in Rust with Cargo?", "body": "<p>You have probably have to install the SFML C libraries before trying to compile the Rust bindings. rust-sfml is only the Rust binding, it does not install SFML itself.</p>\n"}, {"tags": [], "owner": {"reputation": 151, "user_id": 561310, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3cc88ff0bf6742d8dde1740c716e3eae?s=128&d=identicon&r=PG", "display_name": "pgvoorhees", "link": "https://stackoverflow.com/users/561310/pgvoorhees"}, "is_accepted": false, "score": 0, "last_activity_date": 1512743152, "creation_date": 1512743152, "answer_id": 47716307, "question_id": 31338945, "link": "https://stackoverflow.com/questions/31338945/how-can-i-pass-parameters-to-gcc-in-rust-with-cargo/47716307#47716307", "title": "How can I pass parameters to gcc in Rust with Cargo?", "body": "<p>Set an environment variable LIBRARY_PATH which contains the directory you're trying to reference.</p>\n"}], "owner": {"reputation": 555, "user_id": 4637817, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/849a2d4951995c9fcb2b9aec36faaf2c?s=128&d=identicon&r=PG&f=1", "display_name": "Remagpie", "link": "https://stackoverflow.com/users/4637817/remagpie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 638, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1512744556, "creation_date": 1436525470, "last_edit_date": 1512744556, "question_id": 31338945, "link": "https://stackoverflow.com/questions/31338945/how-can-i-pass-parameters-to-gcc-in-rust-with-cargo", "title": "How can I pass parameters to gcc in Rust with Cargo?", "body": "<p>I'm trying to build <a href=\"https://github.com/jeremyletang/rust-sfml\" rel=\"nofollow noreferrer\">rust-sfml</a> with cargo, but my gcc fails to find required libraries.</p>\n\n<p>I want to solve this by passing -L options to gcc, but I can't find any convenient way for doing it.</p>\n\n<p>Is there any possible simple solutions except using a build script?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run\n   Compiling sfml v0.9.3 (https://github.com/jeremyletang/rust-sfml#358f076a)\nerror: linking with `gcc` failed: exit code: 1\nnote: \"gcc\" \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\" \"-Wl,--nxcompat\" \"-static-libgcc\" \"-m64\" \"-L\" \"C:\\Program Files\\Rust stable 1.1\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\" \"-o\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\\sfml-4cd3c268d09fd120.dll\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\\sfml-4cd3c268d09fd120.o\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\\sfml-4cd3c268d09fd120.metadata.o\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\\libbitflags-ab4a647a363172d8.rlib\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\\liblibc-2eda841eb12a3090.rlib\" \"-L\" \"C:\\Program Files\\Rust stable 1.1\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\" \"-lstd-7d23ff90\" \"-L\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\" \"-L\" \"D:\\Programming\\Rust\\test_proj\\target\\debug\\deps\" \"-L\" \"C:\\Program Files\\Rust stable 1.1\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\" \"-L\" \"D:\\Programming\\Rust\\test_proj\\.rust\\bin\\x86_64-pc-windows-gnu\" \"-L\" \"D:\\Programming\\Rust\\test_proj\\bin\\x86_64-pc-windows-gnu\" \"-Wl,--whole-archive\" \"-Wl,-Bstatic\" \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\" \"-lcsfml-system\" \"-lcsfml-window\" \"-lcsfml-audio\" \"-lcsfml-graphics\" \"-lcsfml-network\" \"-lws2_32\" \"-luserenv\" \"-shared\" \"-lcompiler-rt\"\nnote: ld: cannot find -lcsfml-system\nld: cannot find -lcsfml-window\nld: cannot find -lcsfml-audio\nld: cannot find -lcsfml-graphics\nld: cannot find -lcsfml-network\n</code></pre>\n"}, {"tags": ["audio", "static", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1436527866, "post_id": 31334356, "comment_id": 50663349, "body": "A <i>newbie in low level programming</i> who uses valgrind, understands its report and tracked down the memory leak? I tip my hat to you sir!"}, {"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436570739, "post_id": 31334356, "comment_id": 50686414, "body": "@Shepmaster: Thanks, I didn&#39;t see that, it is indeed the same problem. I tried ker&#39;s answer and it works perfectly, so maybe we can adapt ker&#39;s answer to the original question and delete this one?"}, {"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436572159, "post_id": 31334356, "comment_id": 50686682, "body": "@MatthieuM.: Well, I had to write a ~1000 line Fortran program once for work, and had to use valgrind there...I guess compared to most people here I&#39;m still quite a newbie:)"}], "answers": [{"comments": [{"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 0, "creation_date": 1436571534, "post_id": 31334998, "comment_id": 50686560, "body": "Excellent, I tried and the valgrind message disappeared. Thanks! I should point out for people interested in lv2, that there must be <i>no</i> newline &#39;\\n&#39; in the amp_uri string. My mistake."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1436513475, "creation_date": 1436513475, "answer_id": 31334998, "question_id": 31334356, "link": "https://stackoverflow.com/questions/31334356/static-struct-with-c-strings-for-lv2-plugin/31334998#31334998", "title": "static struct with C strings for lv2 plugin", "body": "<p>The short answer is, you don't for now. Future Rust will probably gain this ability.</p>\n\n<p>What you can do, is statically allocate a struct that contains null pointers, and set those null pointers to something useful when you call the function. Rust has <code>static mut</code>. It requires <strong>unsafe code</strong>, is <strong>not threadsafe</strong> at all and is (to the best of my knowledge) considered a <strong>code smell</strong>.</p>\n\n<p>Right here I consider it a workaround to the fact that there is no way to turn a <code>&amp;[T]</code> into a <code>*const T</code> in a static.</p>\n\n<pre><code>static S: &amp;'static [u8] = b\"http://example.org/eg-amp_rust\\n\\0\";\nstatic mut desc: LV2Descriptor = LV2Descriptor {\n    amp_uri: 0 as *const libc::c_char, // ptr::null() isn't const fn (yet)\n};\n\n#[no_mangle]\npub extern fn lv2_descriptor(index: i32) -&gt; *const LV2Descriptor {\n     let ptr = S.as_ptr() as *const libc::c_char;\n     unsafe {\n        desc.amp_uri = ptr;\n        &amp;desc as *const LV2Descriptor\n     }\n}\n</code></pre>\n"}], "owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 165, "favorite_count": 1, "closed_date": 1436539104, "accepted_answer_id": 31334998, "answer_count": 1, "score": 6, "last_activity_date": 1436513517, "creation_date": 1436511369, "last_edit_date": 1436513517, "question_id": 31334356, "link": "https://stackoverflow.com/questions/31334356/static-struct-with-c-strings-for-lv2-plugin", "closed_reason": "Duplicate", "title": "static struct with C strings for lv2 plugin", "body": "<p>I'm trying to learn Rust (newbie in low level programming), and want to translate a tiny lv2 amplifier (audio) plugin \"amp.c\" (<a href=\"http://lv2plug.in/git/cgit.cgi/lv2.git/tree/plugins/eg-amp.lv2/amp.c\" rel=\"noreferrer\">C-code</a>) from C to Rust. I actually got it working (<a href=\"https://github.com/poidl/eg-amp_rust/blob/master/src/lib.rs\" rel=\"noreferrer\">here</a>), but when the host terminates, valgrind says that \"\n64 bytes in 1 blocks are definitely lost\". I think I know why this happens, but I don't know how to fix it.</p>\n\n<p>Before you get tired of reading, here is the final question:</p>\n\n<p>How do I statically allocate a struct that contains a C string?</p>\n\n<p>And here is the introduction:</p>\n\n<p><strong>Why it happens (I think):</strong>\nHost loads the library and calls lv2_descriptor()</p>\n\n<pre><code>const LV2_Descriptor*\nlv2_descriptor()\n{\n    return &amp;descriptor;\n}\n</code></pre>\n\n<p>which returns a pointer to a STATICALLY allocated struct of type LV2_Descriptor,</p>\n\n<pre><code>static const LV2_Descriptor descriptor = {\n    AMP_URI,\n    ...\n};\n</code></pre>\n\n<p>which is defined as</p>\n\n<pre><code>typedef struct _LV2_Descriptor {\n    const char * URI;\n    ...\n} LV2_Descriptor;\n</code></pre>\n\n<p>Why is it statically allocated? In the amp.c it says: </p>\n\n<blockquote>\n  <p>It is best to define descriptors statically to avoid leaking memory\n  and non-portable shared library constructors and destructors to clean\n  up properly.</p>\n</blockquote>\n\n<p>However, I translated lv2_descriptor() to Rust as:</p>\n\n<pre><code>#[no_mangle]\npub extern fn lv2_descriptor(index:i32) -&gt; *const LV2Descriptor {\n     let s = \"http://example.org/eg-amp_rust\";\n     let cstr = CString::new(s).unwrap();\n     let ptr = cstr.as_ptr();\n     mem::forget(cstr);\n\n     let mybox = Box::new(LV2Descriptor{amp_uri: ptr}, ...);\n     let bxptr = &amp;*mybox as *const LV2Descriptor; \n     mem::forget(mybox);\n     return  bxptr\n     }\n</code></pre>\n\n<p>So it's not statically allocated and I never free it, that's I guess why valgrind complains?</p>\n\n<p><strong>How am I trying to solve it?</strong>\nI'm trying to do the same thing in Rust as the C-code does, i.e. statically allocate the struct (<em>outside</em> of lv2_descriptor()). The goal is to be fully compatible to the lv2 library, i.e \"...to avoid leaking memory...\" etc., as it says in the quote, right? So I tried something like:</p>\n\n<pre><code>static ptr1: *const u8 = (b\"example.org/eg-amp_rust\\n\\0\").as_ptr();\nstatic ptr2: *const libc::c_char = ptr1 as *const libc::c_char;\nstatic desc: LV2Descriptor = LV2Descriptor{amp_uri: ptr2, ...};\n</code></pre>\n\n<p>But this does not compile, there are error messages like</p>\n\n<pre><code>src/lib.rs:184:26: 184:72 error: the trait `core::marker::Sync` is not implemented for the type `*const u8` [E0277]\nsrc/lib.rs:184 static ptr1: *const u8 = b\"http://example.org/eg-amp_rust\\n\\0\".as_ptr();\n                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/lib.rs:184:26: 184:72 note: `*const u8` cannot be shared between threads safely\nsrc/lib.rs:184 static ptr1: *const u8 = b\"http://example.org/eg-amp_rust\\n\\0\".as_ptr();\n                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/lib.rs:184:26: 184:72 error: static contains unimplemented expression type [E0019]\nsrc/lib.rs:184 static ptr1: *const u8 = b\"http://example.org/eg-amp_rust\\n\\0\".as_ptr();\n</code></pre>\n\n<p><strong>Specific problem/question:</strong></p>\n\n<p>How do I statically allocate a struct that contains a C string?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1436512723, "post_id": 31331811, "comment_id": 50654101, "body": "<code>to_string</code> is still used by default, even if it&#39;s technically a bit slower. With specialization it won&#39;t be, though."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1436513648, "post_id": 31331811, "comment_id": 50654667, "body": "according to alex crichton, <code>to_string</code> is the idiomatic way to convert a <code>str</code> to a <code>String</code>: <a href=\"https://github.com/rust-lang/rust/pull/26176\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/26176</a>"}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "reply_to_user": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1436528711, "post_id": 31331811, "comment_id": 50663831, "body": "@steveklabnik at that GitHub link, you said that &quot;<code>to_owned()</code> is better for generic code.&quot; Why is that?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1436538745, "post_id": 31331811, "comment_id": 50670793, "body": "<code>to_string</code> is definitely the <b>idiomatic</b> choice \u2014 it&#39;s just not currently the performant choice. I <a href=\"https://github.com/rust-lang/rust/pull/19708#issuecomment-66930515\" rel=\"nofollow noreferrer\">made a comment</a> about six months ago where replacing <code>to_string</code> made my code take 87% of the previous time."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1436545012, "post_id": 31331811, "comment_id": 50674951, "body": "thirtythreeforty, because it&#39;s a generic way of turning a borrowed value into an owned one."}, {"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 0, "creation_date": 1519563181, "post_id": 31331811, "comment_id": 84952103, "body": "&quot;Using <code>to_owned()</code> fully captures the reason that a conversion is required at a particular spot in our code.&quot; <a href=\"https://users.rust-lang.org/t/to-string-vs-to-owned-for-string-literals/1441/6?u=rofrol\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/to-string-vs-to-owned-for-string-liter&zwnj;&#8203;als/&hellip;</a>"}], "tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": false, "score": 13, "last_activity_date": 1460925982, "last_edit_date": 1460925982, "creation_date": 1436497670, "answer_id": 31331811, "question_id": 31331356, "link": "https://stackoverflow.com/questions/31331356/how-to-create-a-string-directly/31331811#31331811", "title": "How to create a String directly?", "body": "<p>No, the <code>str::to_string()</code> method is the canonical way of creating a <code>String</code> from an <code>&amp;'static str</code> (a string literal).  I even like it for the reason you dislike it: it's a little verbose.  Because it involves a heap allocation, you should think twice before invoking it in cases such as these.  Also note that since <a href=\"https://github.com/rust-lang/rfcs/pull/1210\" rel=\"nofollow\">Rust gained impl specialization</a>, <code>str::to_string</code> is no slower than <code>str::to_owned</code> or its ilk.</p>\n\n<p>However, what you really want here is a <code>func1</code> that can easily be passed any string, be it a <code>&amp;str</code> or a <code>String</code>.  Because a <code>String</code> will <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow\">Deref</a> to a <code>&amp;str</code>, you can have <code>func1</code> accept an <code>&amp;str</code>, thereby avoiding the String allocation altogether.  See this example (<a href=\"https://play.rust-lang.org/?code=fn%20func1%28s%3A%20%26str%29%20%7B%0A%20%20%20%20println!%28%22%7B%7D%22%2C%20s%29%3B%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20let%20allocated_string%3A%20String%20%3D%20%22owned%20string%22.to_string%28%29%3B%0A%20%20%20func1%28%22static%20string%22%29%3B%0A%20%20%20func1%28%26allocated_string%29%3B%0A%7D&amp;version=stable\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>fn func1(s: &amp;str) {\n    println!(\"{}\", s);\n}\n\nfn main() {\n   let allocated_string: String = \"owned string\".to_string();\n   func1(\"static string\");\n   func1(&amp;allocated_string);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 15, "last_activity_date": 1481206725, "last_edit_date": 1495535413, "creation_date": 1436508750, "answer_id": 31333653, "question_id": 31331356, "link": "https://stackoverflow.com/questions/31331356/how-to-create-a-string-directly/31333653#31333653", "title": "How to create a String directly?", "body": "<p>TL;DR:</p>\n\n<p>As of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-190-2016-05-26\" rel=\"noreferrer\">Rust 1.9</a>, <code>str::to_string</code>, <code>str::to_owned</code>, <code>String::from</code>, <code>str::into</code> all have the same performance characteristics. Use whichever you prefer.</p>\n\n<hr>\n\n<p>The most obvious and idiomatic way to convert a string slice (<code>&amp;str</code>) to an owned string (<code>String</code>) is to use <a href=\"http://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"noreferrer\"><code>ToString::to_string</code></a>. This works for any type that implements <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code></a>. This includes string slices, but also integers, IP addresses, paths, errors, and so on. </p>\n\n<p>Before Rust 1.9, the <code>str</code> implementation of <code>to_string</code> leveraged the <a href=\"https://github.com/rust-lang/rust/blob/1.1.0/src/libcollections/string.rs#L1047\" rel=\"noreferrer\">formatting infrastructure</a>. While it worked, it was overkill and not the most performant path.</p>\n\n<p>A lighter solution was to use <a href=\"http://doc.rust-lang.org/std/borrow/trait.ToOwned.html#tymethod.to_owned\" rel=\"noreferrer\"><code>ToOwned::to_owned</code></a>, which is implemented for types that have a \"borrowed\" and an \"owned\" pair. It is <a href=\"https://github.com/rust-lang/rust/blob/1.1.0/src/libcollections/str.rs#L404-L411\" rel=\"noreferrer\">implemented in an efficient manner</a>.</p>\n\n<p>Another lightweight solution is to use <a href=\"http://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into\" rel=\"noreferrer\"><code>Into::into</code></a> which leverages <a href=\"http://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from\" rel=\"noreferrer\"><code>From::from</code></a>. This is also <a href=\"https://github.com/rust-lang/rust/blob/1.1.0/src/libcollections/string.rs#L1074\" rel=\"noreferrer\">implemented efficiently</a>.</p>\n\n<hr>\n\n<p>For your <em>specific</em> case, the best thing to do is to accept a <code>&amp;str</code>, as <a href=\"https://stackoverflow.com/a/31331811/155423\">thirtythreeforty answered</a>. Then you need to do <strong>zero allocations</strong>, which is the best outcome.</p>\n\n<p>In general, I will probably use <code>into</code> if I need to make an allocated string \u2014 it's only 4 letters long ^_^. When answering questions on Stack Overflow, I'll use <code>to_owned</code> as it's much more obvious what is happening.</p>\n"}, {"comments": [{"owner": {"reputation": 305833, "user_id": 68587, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7d9fd158e03cbde94f7e0b33b78222af?s=128&d=identicon&r=PG", "display_name": "John Kugelman", "link": "https://stackoverflow.com/users/68587/john-kugelman"}, "edited": false, "score": 0, "creation_date": 1617908987, "post_id": 48973674, "comment_id": 118448752, "body": "Did you mean to include vitalyd&#39;s comment?"}], "tags": [], "owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "is_accepted": false, "score": 3, "last_activity_date": 1617908850, "last_edit_date": 1617908850, "creation_date": 1519563437, "answer_id": 48973674, "question_id": 31331356, "link": "https://stackoverflow.com/questions/31331356/how-to-create-a-string-directly/48973674#48973674", "title": "How to create a String directly?", "body": "<p><a href=\"https://users.rust-lang.org/t/to-string-vs-to-owned-for-string-literals/1441/6?u=rofrol\" rel=\"nofollow noreferrer\">dtolnay</a>:</p>\n<blockquote>\n<p>I now strongly prefer <code>to_owned()</code> for string literals over either of <code>to_string()</code> or <code>into()</code>.</p>\n<p>What is the difference between <code>String</code> and <code>&amp;str</code>? An unsatisfactory answer is \u201cone is a string and the other is not a string\u201d because obviously both are strings. Taking something that is a string and converting it to a string using <code>to_string()</code> seems like it misses the point of why we are doing this in the first place, and more importantly misses the opportunity to document this to our readers.</p>\n<p>The difference between String and &amp;str is that one is owned and one is not owned. Using <code>to_owned()</code> fully captures the reason that a conversion is required at a particular spot in our code.</p>\n<pre><code>struct Wrapper {\n    s: String\n}\n   \n// I have a string and I need a string. Why am I doing this again?\nWrapper { s: &quot;s&quot;.to_string() }\n   \n// I have a borrowed string but I need it to be owned.\nWrapper { s: &quot;s&quot;.to_owned() }\n</code></pre>\n</blockquote>\n<p><a href=\"https://users.rust-lang.org/t/to-string-vs-to-owned-for-string-literals/1441/7\" rel=\"nofollow noreferrer\">vitalyd</a>:</p>\n<blockquote>\n<p>Not if you mentally read <code>to_string</code> as <code>to_String</code></p>\n</blockquote>\n"}], "owner": {"reputation": 421, "user_id": 5098834, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/3a721c50859c0fd9002ea36f878338c9?s=128&d=identicon&r=PG&f=1", "display_name": "imatahi", "link": "https://stackoverflow.com/users/5098834/imatahi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1583, "favorite_count": 0, "accepted_answer_id": 31333653, "answer_count": 3, "score": 14, "last_activity_date": 1617908850, "creation_date": 1436494119, "last_edit_date": 1481206427, "question_id": 31331356, "link": "https://stackoverflow.com/questions/31331356/how-to-create-a-string-directly", "title": "How to create a String directly?", "body": "<p>Is there any way to avoid calling <code>.to_string()</code> when I need a string? For example:</p>\n\n<pre><code>fn func1(aaa: String) -&gt; ....\n</code></pre>\n\n<p>And instead of</p>\n\n<pre><code>func1(\"fdsfdsfd\".to_string())\n</code></pre>\n\n<p>can I do something like this:</p>\n\n<pre><code>func1(s\"fdsfdsfd\")\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436526726, "post_id": 31331308, "comment_id": 50662649, "body": "Minor point: knowing whether something is last or not is generally more complicated than knowing whether something is first or not; so I would encourage taking the habit of predicating on &quot;is first&quot; rather than &quot;is last&quot;."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436531103, "post_id": 31331308, "comment_id": 50665355, "body": "How are you calling <code>precTimeToJSON</code>? Just in a loop?"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436597361, "post_id": 31331308, "comment_id": 50690821, "body": "@MatthieuM. All but the last one get a trailing comma :) So it is the special case. But I still wait for a PHD thesis on the topic showing that something like map or fold can be used without the index to produce output where the last item has no item separator lol"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436611950, "post_id": 31331308, "comment_id": 50694310, "body": "@BitTickler: Actually, it&#39;s a common &quot;mistake&quot; to think that the behavior is inextricably tied to the last one; however you can reformulate it as &quot;all but the first one get a leading comma&quot;, in which case you move from special behavior on last to special behavior on first, and the latter works as is with streams of unknown length :)"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 6, "creation_date": 1436527056, "post_id": 31331648, "comment_id": 50662872, "body": "An excellent answer, however given the use of <code>push_str</code> and the presence of <code>isLast</code> parameter I suspect that the OP is accumulating values from a loop into a single <code>String</code>. In this case, it would be more efficient in the loop body to use the <code>write!</code> macro which appends to the writer rather than repeatedly creating a <code>String</code> with <code>format!</code> only to copy its bits into <code>s</code> and discard it."}, {"owner": {"reputation": 9735, "user_id": 112053, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/lObNt.jpg?s=128&g=1", "display_name": "barjak", "link": "https://stackoverflow.com/users/112053/barjak"}, "edited": false, "score": 0, "creation_date": 1436595685, "post_id": 31331648, "comment_id": 50690498, "body": "You can also use raw strings to avoid escaping the double quotes."}], "tags": [], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "is_accepted": true, "score": 21, "last_activity_date": 1436496776, "last_edit_date": 1495542322, "creation_date": 1436496345, "answer_id": 31331648, "question_id": 31331308, "link": "https://stackoverflow.com/questions/31331308/what-is-the-standard-way-to-concatenate-strings/31331648#31331648", "title": "What is the &quot;standard&quot; way to concatenate strings?", "body": "<p>The Rust compiler is right (of course): there's no <code>+</code> operator for string literals.</p>\n\n<p>I believe the <a href=\"https://doc.rust-lang.org/std/macro.format!.html\" rel=\"nofollow noreferrer\"><code>format!()</code> macro</a> is the idiomatic way to do what you're trying to do.  It uses the <a href=\"https://doc.rust-lang.org/std/fmt/index.html\" rel=\"nofollow noreferrer\"><code>std::fmt</code> syntax</a>, which essentially consists of a formatting string and the arguments to format (<em>a la</em> C's <code>printf</code>).  For your example, it would look something like this:</p>\n\n<pre><code>let mut s: String = String::new();\nlet precTimeToJSON = | pt : prectime::PrecTime, isLast : bool | {\n    s = format!(\"{{ \\\"sec\\\": {} \\\"usec\\\": {} }}{}\",\n        pt.sec,\n        pt.usec,\n        if isLast { \"\" } else { \",\" }\n    )\n};\n</code></pre>\n\n<p>Because it's a macro, you can intermix types in the argument list freely, so long as the type implements the <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"nofollow noreferrer\"><code>std::fmt::Display</code> trait</a> (which is true for all built-in types).  Also, you must <a href=\"https://stackoverflow.com/a/25570140/1830736\">escape</a> literal <code>{</code> and <code>}</code> as <code>{{</code> and <code>}}</code>, respectively.  Last, note that the format string must be a string literal, because the macro parses it and the expanded code looks nothing like the original <code>format!</code> expression.</p>\n\n<p>Here's a <a href=\"http://is.gd/q1vbP1\" rel=\"nofollow noreferrer\">playground link</a> to the above example.</p>\n\n<p>Two more points for you.  First, if you're reading and writing JSON, have a look at a library such as <a href=\"https://crates.io/crates/rustc-serialize\" rel=\"nofollow noreferrer\">rustc-serialize</a>.  It's much less painful!</p>\n\n<p>Second, if you just want to concatenate <code>&amp;'static str</code> strings (that is, string literals), you can do that with zero run-time cost with the <a href=\"https://doc.rust-lang.org/std/macro.concat!.html\" rel=\"nofollow noreferrer\"><code>concat!()</code> macro</a>.  It won't help you in your case above, but it might with other similar ones.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1436526818, "post_id": 31338955, "comment_id": 50662707, "body": "I would not that this is quite inefficient all things told, as it creates 3 intermediary <code>String</code> objects (which allocate memory) only to discard them immediately."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1436528174, "post_id": 31338955, "comment_id": 50663524, "body": "I think the closure reference must be <code>mut</code> because it mutates its captures."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1436529962, "post_id": 31338955, "comment_id": 50664581, "body": "Ah that makes sense. @MatthieuM. Yeah I meantioned that in the last sentence."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1436595874, "post_id": 31338955, "comment_id": 50690523, "body": "I also wondered now a few times why i have to make closures mutable. Right from the stomach I would smell foul if that is really &quot;by design&quot;. Should the captures not be a run-time initialization when the closure is being invoked rather than &quot;stateful&quot; as to the closure instance? Hm... maybe picking wrong words for it.  But a function is not mutable - so why would closures be?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1436607959, "post_id": 31338955, "comment_id": 50693289, "body": "If you can mutate the captures, the closure needs to be be mutable. That applies even if you capture by reference. A closure is both the function and the state it <i>closes</i> over, so that&#39;s where the need comes from."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436618778, "post_id": 31338955, "comment_id": 50696068, "body": "@bluss Maybe this is why they called it &quot;closure&quot; and not &quot;lambda&quot;."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436619327, "post_id": 31338955, "comment_id": 50696227, "body": "The Rust reference says <code>|x| x + 1</code> is a lambda expression and it produces a closure value of an anonymous closure type. Oh and you only have to make it mutable if the closure needs it, rust has inference for the kind of closure."}], "tags": [], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "is_accepted": false, "score": 2, "last_activity_date": 1436525496, "creation_date": 1436525496, "answer_id": 31338955, "question_id": 31331308, "link": "https://stackoverflow.com/questions/31331308/what-is-the-standard-way-to-concatenate-strings/31338955#31338955", "title": "What is the &quot;standard&quot; way to concatenate strings?", "body": "<p>You can also do this madness:</p>\n\n<pre><code>fn main() {\n    let mut s = std::string::String::with_capacity(200);\n\n    // Have to put this in a block so precTimeToJSON is dropped, see https://doc.rust-lang.org/book/closures.html\n    {\n        // I have no idea why this has to be mut...\n        let mut precTimeToJSON = |sec: u64, usec: u64, isLast: bool| {\n            s.push_str(&amp;( // Coerce String to str. See https://doc.rust-lang.org/book/deref-coercions.html\n                \"{ \\\"sec\\\": \".to_string()      // String \n                + &amp;sec.to_string()             // + &amp;str    (&amp; coerces a String to a &amp;str).\n                + \" \\\"usec\\\": \"                // + &amp;str\n                + &amp;usec.to_string()            // + &amp;str\n                + if isLast {\"}\"} else {\"},\"}  // + &amp;str\n            ));\n        };\n        precTimeToJSON(30, 20, false);\n    }\n    println!(\"{}\", &amp;s);\n}\n</code></pre>\n\n<p>Basically the operator <code>String + &amp;str -&gt; String</code> <em>is</em> defined, so you can do <code>String + &amp;str + &amp;str + &amp;str + &amp;str</code>. That gives you a <code>String</code> which you have to coerce back to a <code>&amp;str</code> using <code>&amp;</code>. I think this way is probably quite inefficient though as it will (possibly) allocate loads of <code>String</code>s.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 4, "last_activity_date": 1436796438, "last_edit_date": 1436796438, "creation_date": 1436608754, "answer_id": 31355913, "question_id": 31331308, "link": "https://stackoverflow.com/questions/31331308/what-is-the-standard-way-to-concatenate-strings/31355913#31355913", "title": "What is the &quot;standard&quot; way to concatenate strings?", "body": "<p><a href=\"http://bluss.github.io/rust-itertools/doc/itertools/trait.Itertools.html#method.format\" rel=\"nofollow\"><code>Itertools::format</code></a> can help you write this as a single expression if you really want to.</p>\n\n\n\n<pre><code>let times: Vec&lt;PrecTime&gt;; // iterable of PrecTime\nlet s = format!(\"{}\", times.iter().format(\",\", |pt, f|\n    f(&amp;format_args!(r#\"{{ \"sec\": {}, \"usec\": {} }}\"#, pt.sec, pt.usec))\n));\n</code></pre>\n\n<p><code>format()</code> uses a separator, so just specify <code>\",\"</code> there (or <code>\"\"</code> if you need no separator). It's a bit involved so that the formatting can be completely lazy and composable. You <em>receive</em> a callback <code>f</code> that you call back with a <code>&amp;Display</code> value (anything that can be Display formatted).</p>\n\n<p>Here we demonstrate this great trick of using <code>&amp;format_args!()</code> to construct a displayable value. This is something that comes in handy if you use the <a href=\"http://doc.rust-lang.org/nightly/std/fmt/struct.Formatter.html#method.debug_struct\" rel=\"nofollow\">debug builder API</a> as well.</p>\n\n<p>Finally, use a raw string so that we don't need to escape the inner <code>\"</code> in the format: <code>r#\"{{ \"sec\": {} \"usec\": {} }}\"#</code>. Raw strings are delimited by <code>r#\"</code> and <code>\"#</code>  (free choice of number of <code>#</code>).</p>\n\n<p><code>Itertools::format()</code> uses no intermediate allocations, it is all directly passed on to the underlying formatter object.</p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6043, "favorite_count": 0, "accepted_answer_id": 31331648, "answer_count": 3, "score": 16, "last_activity_date": 1436796438, "creation_date": 1436493779, "last_edit_date": 1436508907, "question_id": 31331308, "link": "https://stackoverflow.com/questions/31331308/what-is-the-standard-way-to-concatenate-strings", "title": "What is the &quot;standard&quot; way to concatenate strings?", "body": "<p>While I understand basically what <code>str</code> and <code>std::string::String</code> are and how they relate to each other, I find it a bit cumbersome to compose strings out of various parts without spending too much time and thought on it. So as usual I suspect I did not see the proper way to do it yet, which makes it intuitive and a breeze.</p>\n\n<pre><code>let mut s = std::string::String::with_capacity(200);\nlet precTimeToJSON = | pt : prectime::PrecTime, isLast : bool | {\n    s.push_str(\n        \"{ \\\"sec\\\": \" \n       + &amp;(pt.sec.to_string()) \n       + \" \\\"usec\\\": \" \n       + &amp;(pt.usec.to_string()) \n       + if isLast {\"}\"} else {\"},\"})\n    };    \n</code></pre>\n\n<p>The code above is honored by the compiler with error messages like:</p>\n\n<blockquote>\n  <p>src\\main.rs:25:20: 25:33 error: binary operation <code>+</code> cannot be applied to type <code>&amp;'static str</code> [E0369]</p>\n</blockquote>\n\n<p>And even after half an hours worth of fiddling and randomly adding <code>&amp;</code>, I could not make this compilable. So, here my questions:</p>\n\n<ul>\n<li>What do I have to write to achieve the obvious?</li>\n<li>What is the \"standard\" way to do this in Rust?</li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 9, "last_activity_date": 1436490631, "creation_date": 1436490631, "answer_id": 31330882, "question_id": 31330767, "link": "https://stackoverflow.com/questions/31330767/unresolved-import-from-str/31330882#31330882", "title": "Unresolved import from_str", "body": "<p><a href=\"http://doc.rust-lang.org/std/index.html?search=from_str\">Use the docs to search for <code>from_str</code>.</a> They show that the <code>FromStr</code> trait is in <code>std::str</code> now, not <code>std::from_str</code>. (April 2014 is a <em>long</em> time ago in Rust terms, being well before Rust 1.0.0.)</p>\n\n<p><code>FromStr</code> should not be used directly in general anyway; you should use <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.parse\"><code>str.parse</code> method</a> instead: <code>my_str.parse::&lt;u32&gt;()</code>. Remember that it returns a <code>Result</code>, because the string might just not contain a number.</p>\n"}], "owner": {"reputation": 15257, "user_id": 1409312, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/4TCzB.jpg?s=128&g=1", "display_name": "Syntactic Fructose", "link": "https://stackoverflow.com/users/1409312/syntactic-fructose"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 986, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1436508796, "creation_date": 1436489714, "last_edit_date": 1495541678, "question_id": 31330767, "link": "https://stackoverflow.com/questions/31330767/unresolved-import-from-str", "title": "Unresolved import from_str", "body": "<p>How do I use <code>from_str</code> ? I have the snippet</p>\n\n<pre><code>let base: u32 = from_str::&lt;u32&gt;(&amp;var)\n</code></pre>\n\n<p>and get the error</p>\n\n<pre><code>Error: unresolved name from_str\n</code></pre>\n\n<p>So I googled this error and found <a href=\"https://stackoverflow.com/questions/23391440/in-rust-how-do-i-use-implemented-trait-fromstr-on-bigint\">this</a>, so I tried adding the following</p>\n\n<pre><code>use std::u32;\nuse std::from_str::FromStr\n</code></pre>\n\n<p>But now I get</p>\n\n<pre><code>Error: unresolved import `std::from_str::FromStr` could not from `from_str` in `std` \n</code></pre>\n\n<p>According to <a href=\"https://github.com/rust-lang/rust/issues/20525\" rel=\"nofollow noreferrer\">this</a> github issue, I need to include this yet rust can't find it. What's going on? Here's a <strong>super</strong> simple program which gives me those errors</p>\n\n<pre><code>use std::u32;\nuse std::from_str::FromStr;\n\nfn main() {\n\n    let my_str = \"String\".to_string();\n    let base: u32 = from_str(&amp;my_str);\n}\n</code></pre>\n\n<p>This is such a trivial issue and yet these resources are only showing me how to get more errors.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1436486353, "post_id": 31329532, "comment_id": 50646277, "body": "Based on your example, it appears that the transfer of ownership of <code>f</code> happens before <code>f.val</code> is evaluated. It seems like you have answered your own question. What more information would you like to see?"}, {"owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436487108, "post_id": 31329532, "comment_id": 50646482, "body": "@Shepmaster, f.val has to be evaluated before the transfer of ownership, since before such time, the destination doesn&#39;t exist, may be out of bounds, etc."}, {"owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1436488318, "post_id": 31329532, "comment_id": 50646716, "body": "@Shepmaster, On second thought, if the assignment operator is not a sequence point in Rust, then the compiler&#39;s complaint is fair.  I suppose this is like the foo() = bar() ambiguity in C++."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1436512847, "creation_date": 1436512847, "answer_id": 31334796, "question_id": 31329532, "link": "https://stackoverflow.com/questions/31329532/is-the-order-of-evaluation-considered-when-analyzing-ownership-in-an-expression/31334796#31334796", "title": "Is the order of evaluation considered when analyzing ownership in an expression?", "body": "<p>This kind of thing is not well-defined at the language level, though obviously the compiler has to do <em>something</em>.</p>\n"}, {"comments": [{"owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "edited": false, "score": 0, "creation_date": 1436640510, "post_id": 31360510, "comment_id": 50702204, "body": "the struct is only small for the purpose of creating an MWE."}, {"owner": {"reputation": 317, "user_id": 4491989, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh6.googleusercontent.com/-Njq06U36KfI/AAAAAAAAAAI/AAAAAAAAACI/LDsRnAz9u_c/photo.jpg?sz=128", "display_name": "faiface", "link": "https://stackoverflow.com/users/4491989/faiface"}, "reply_to_user": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "edited": false, "score": 0, "creation_date": 1436646455, "post_id": 31360510, "comment_id": 50703800, "body": "I updated the answer according to the struct not being so small in reality."}], "tags": [], "owner": {"reputation": 317, "user_id": 4491989, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh6.googleusercontent.com/-Njq06U36KfI/AAAAAAAAAAI/AAAAAAAAACI/LDsRnAz9u_c/photo.jpg?sz=128", "display_name": "faiface", "link": "https://stackoverflow.com/users/4491989/faiface"}, "is_accepted": false, "score": 1, "last_activity_date": 1436646387, "last_edit_date": 1436646387, "creation_date": 1436639832, "answer_id": 31360510, "question_id": 31329532, "link": "https://stackoverflow.com/questions/31329532/is-the-order-of-evaluation-considered-when-analyzing-ownership-in-an-expression/31360510#31360510", "title": "Is the order of evaluation considered when analyzing ownership in an expression?", "body": "<p>I'd suggest you derive <code>Clone</code> and <code>Copy</code> for your struct, after that the value will not move, but it will be just copied, which solves your problem (the value will no longer be moved) and is effective as well, since the struct is quite small.</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct Foo { val: usize }\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>In case you don't want to derive <code>Copy</code> you can easily overcome this issue by copying the index first and only do the assignment after:</p>\n\n<pre><code>let index = f.val; // usize is copyable, so no moves here\nv[index] = f;\n</code></pre>\n\n<p>This obviously forces the order of evaluation.</p>\n"}], "owner": {"reputation": 3932, "user_id": 233981, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/26b77ef1ab3e3df3df030435aea70568?s=128&d=identicon&r=PG", "display_name": "srking", "link": "https://stackoverflow.com/users/233981/srking"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 123, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1436646387, "creation_date": 1436481723, "last_edit_date": 1436486232, "question_id": 31329532, "link": "https://stackoverflow.com/questions/31329532/is-the-order-of-evaluation-considered-when-analyzing-ownership-in-an-expression", "title": "Is the order of evaluation considered when analyzing ownership in an expression?", "body": "<p>In Rust 1.0, does the compiler consider order of evaluation when analyzing ownership in an expression?  For example:</p>\n\n<pre><code>struct Foo { val:usize }\n\nfn main() {\n    let mut v:Vec&lt;Foo&gt; = Vec::with_capacity(1);\n    v.push(Foo{val:0});\n\n    let f = Foo{val:0};\n    v[f.val] = f; // error: use of moved value\n}\n</code></pre>\n\n<p>Fails to compile because the index into the array is <code>f.val</code>, while <code>f</code> is being moved into the array.  I do not see why using <code>f.val</code> as an index on the LHS can be in conflict with the transfer of ownership of 'f' on the RHS.</p>\n"}, {"tags": ["serialization", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1436433282, "last_edit_date": 1436433282, "creation_date": 1436429558, "answer_id": 31311752, "question_id": 31311559, "link": "https://stackoverflow.com/questions/31311559/json-serialization-feature-of-chrono-crate/31311752#31311752", "title": "Json Serialization feature of chrono crate", "body": "<p>Add the feature to your dependency in the <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies.chrono]\nversion = \"*\"\nfeatures = [\"rustc-serialize\"]\n</code></pre>\n\n<p>The relevant Documentation can be found <a href=\"http://doc.crates.io/manifest.html#the-[features]-section\" rel=\"noreferrer\">here</a></p>\n"}], "owner": {"reputation": 1264, "user_id": 898347, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/9lyb7.png?s=128&g=1", "display_name": "Chathurika Sandarenu", "link": "https://stackoverflow.com/users/898347/chathurika-sandarenu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 863, "favorite_count": 0, "accepted_answer_id": 31311752, "answer_count": 1, "score": 8, "last_activity_date": 1436451120, "creation_date": 1436429055, "last_edit_date": 1495542760, "question_id": 31311559, "link": "https://stackoverflow.com/questions/31311559/json-serialization-feature-of-chrono-crate", "title": "Json Serialization feature of chrono crate", "body": "<p>I'm trying to use DateTime from rust-chrono crate to my own trait. </p>\n\n<pre><code>#[derive(Debug, RustcEncodable, RustcDecodable)]\npub struct Accomplishment {\n  name: String,\n  accomplishment_type: String,\n  date: DateTime&lt;UTC&gt;\n}\n</code></pre>\n\n<p>When I try to compile this it complains that </p>\n\n<pre><code>src/lib.rs:11:33: 11:47 error: the trait `rustc_serialize::serialize::Decodable` is not implemented for the type `chrono::datetime::DateTime&lt;chrono::offset::utc::UTC&gt;` [E0277]\nsrc/lib.rs:11 #[derive(Debug, RustcEncodable, RustcDecodable)]\n</code></pre>\n\n<p>When I checked the <a href=\"https://github.com/lifthrasiir/rust-chrono\" rel=\"nofollow noreferrer\">github repo of chrono</a> it had the rustc_serialize support implemented. But it is as a feature. In <a href=\"https://github.com/lifthrasiir/rust-chrono/commit/b5281af9f3014c4ef50212d282bca6de6d50a22c\" rel=\"nofollow noreferrer\">commit log</a> it has </p>\n\n<pre><code>cargo test -v --features rustc-serialize\n</code></pre>\n\n<p>I'm not sure how to have this feature for my project. Can someone help me on how to use chrono with rustc-serialize?</p>\n\n<p>There is a <a href=\"https://stackoverflow.com/questions/30793710/add-serialize-attribute-to-type-from-third-party-lib\">similar question</a> regarding this. But what I wanted is to use the serialization support available in chrono in my project without implementing a wrapper trait.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 570, "user_id": 3256073, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0f9a1e93018776d149054dc2ccbe57f?s=128&d=identicon&r=PG&f=1", "display_name": "hsandt", "link": "https://stackoverflow.com/users/3256073/hsandt"}, "edited": false, "score": 0, "creation_date": 1563047282, "post_id": 31307680, "comment_id": 100575001, "body": "This won&#39;t technically move the member value, but if you&#39;re OK to change your structure a bit, but you can wrap the headers by changing the type of <code>response.headers</code> to <code>Option&lt;Headers&gt;</code> and <code>take()</code> its value. This will reset the value to None, which is useful if you&#39;re unable to find a good default value for your type (e.g. a <code>thread</code>). This is done in <a href=\"https://doc.rust-lang.org/stable/book/ch17-03-oo-design-patterns.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/ch17-03-oo-design-patterns.htm&zwnj;&#8203;l</a> and <a href=\"https://doc.rust-lang.org/stable/book/ch20-03-graceful-shutdown-and-cleanup.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1436418144, "post_id": 31308299, "comment_id": 50605785, "body": "It might be worth nothing that <code>std::mem::replace</code> in Rust is <i>more or less</i> what <code>std::move</code> is in C++.  Because the source and destination must be valid to destruct both before <i>and after</i> a move, C++ doesn&#39;t really move, it swaps."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1436418335, "post_id": 31308299, "comment_id": 50605837, "body": "Indeed, with the difference that in C++, it is the class that decides how to implement the move (in the move constructor or move assignment operator), whereas <code>std::mem::replace</code> requires the caller to provide a suitable value. In fact, <code>std::mem::replace</code> is implemented in terms of <a href=\"http://doc.rust-lang.org/stable/std/mem/fn.swap.html\" rel=\"nofollow noreferrer\"><code>std::mem::swap</code></a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1436429064, "post_id": 31308299, "comment_id": 50611356, "body": "You might wish to note that Rust also places on emphasis on extremely efficient &quot;default constructs&quot;, for example neither <code>String::new()</code> nor <code>Vec::new()</code> allocate memory, which is what makes this replace as efficient as the C++ move on top of being safer."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1436433529, "post_id": 31308299, "comment_id": 50614237, "body": "@FrancisGagn&#233; and to finish that thought, Rust types don&#39;t define how they swap either, their byte representations are simply swapped."}, {"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 1, "creation_date": 1436444869, "post_id": 31308299, "comment_id": 50622102, "body": "Thanks! Is using <code>std::mem::replace</code> for this use case idiomatic? (Is what I&#39;m trying to do \u2014 to force a <i>move</i> instead of a <i>copy</i> \u2014 idiomatic?) I ask because the call to <code>std::mem::replace</code> seems like a lot of typing to do something that could be a common use case."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1436485352, "post_id": 31308299, "comment_id": 50646010, "body": "<code>std::mem::replace</code> seems to be the most suitable tool to use to take ownership of a value you can&#39;t take ownership of with Rust&#39;s standard ownership rules. Don&#39;t forget you can use <code>use</code> declarations to make names shorter, e.g. <code>use std::mem;</code>, then <code>mem::replace</code>, or <code>use std::mem::replace</code>, then <code>replace</code>. The preferred style is to use functions qualified on the module (<code>mem::replace</code>), but types unqualified (<code>Headers</code>)."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 29, "last_activity_date": 1436417092, "creation_date": 1436417092, "answer_id": 31308299, "question_id": 31307680, "link": "https://stackoverflow.com/questions/31307680/how-to-move-one-field-out-of-a-struct-that-implements-drop-trait/31308299#31308299", "title": "How to move one field out of a struct that implements Drop trait?", "body": "<p>You can use <a href=\"http://doc.rust-lang.org/stable/std/mem/fn.replace.html\"><code>std::mem::replace()</code></a> to swap the field with a new blank value in order to transfer ownership to you:</p>\n\n<pre><code>extern crate hyper;\n\nfn just_the_headers() -&gt; Result&lt;hyper::header::Headers, hyper::error::Error&gt; {\n    let c = hyper::client::Client::new();\n    let result = c.get(\"http://www.example.com\").send();\n    match result {\n        Err(e) =&gt; Err(e),\n        Ok(mut response) =&gt; Ok(std::mem::replace(&amp;mut response.headers, hyper::header::Headers::new())),\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", just_the_headers());\n}\n</code></pre>\n\n<p>Here, we're replacing <code>response.headers</code> with a new empty set of headers. <code>replace()</code> returns the value that was stored in the field before we replaced it.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6848, "favorite_count": 5, "accepted_answer_id": 31308299, "answer_count": 1, "score": 26, "last_activity_date": 1527275956, "creation_date": 1436413008, "last_edit_date": 1527275956, "question_id": 31307680, "link": "https://stackoverflow.com/questions/31307680/how-to-move-one-field-out-of-a-struct-that-implements-drop-trait", "title": "How to move one field out of a struct that implements Drop trait?", "body": "<p>Here's an invalid Rust program (Rust version 1.1) with a function that does an HTTP client request and returns only the headers, dropping all other fields in the response.</p>\n\n<pre><code>extern crate hyper;\n\nfn just_the_headers() -&gt; Result&lt;hyper::header::Headers, hyper::error::Error&gt; {\n    let c = hyper::client::Client::new();\n    let result = c.get(\"http://www.example.com\").send();\n    match result {\n        Err(e) =&gt; Err(e),\n        Ok(response) =&gt; Ok(response.headers),\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", just_the_headers());\n}\n</code></pre>\n\n<p>Here are the compiler errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>main.rs:8:28: 8:44 error: cannot move out of type `hyper::client::response::Response`, which defines the `Drop` trait\nmain.rs:8         Ok(response) =&gt; Ok(response.headers),\n                                 ^~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>I understand <em>why</em> the borrow checker doesn't accept this program\u2014i.e., that the <code>drop</code> function will use the <code>response</code> after it has had its <code>headers</code> member moved.</p>\n\n<p>My question is: How can I get around this and still have good safe Rust code? I know I can do a <em>copy</em>, via <code>clone()</code>, like so:</p>\n\n<pre><code>Ok(response) =&gt; Ok(response.headers.clone()),\n</code></pre>\n\n<p>But, coming from C++, that seems inefficient. Why <em>copy</em> when a <em>move</em> should suffice? I envision in C++ doing something like the following to force a call to a move constructor, if available:</p>\n\n<pre><code>headers_to_return = std::move(response.headers);\n</code></pre>\n\n<p>Is there any way to forgo the <em>copy</em> in Rust and instead force a <em>move</em>, similar to C++?</p>\n"}, {"tags": ["segmentation-fault", "rust"], "comments": [{"owner": {"reputation": 5668, "user_id": 712526, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/06e3c4065e9d08da698b4f4de3959294?s=128&d=identicon&r=PG", "display_name": "jpaugh", "link": "https://stackoverflow.com/users/712526/jpaugh"}, "edited": false, "score": 3, "creation_date": 1436412220, "post_id": 31307454, "comment_id": 50604190, "body": "I&#39;d guess it&#39;s due to an implementation detail concerning <code>z..set_len</code>. Once you use unsafe semantics (in any language), all bets are off. It would probably crash later, when you tried to access whatever is stored at the location that assignment to <code>z[0]</code> overwrote, if any."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 7, "last_activity_date": 1436416899, "creation_date": 1436416899, "answer_id": 31308265, "question_id": 31307454, "link": "https://stackoverflow.com/questions/31307454/why-doesnt-this-rust-program-crash/31308265#31308265", "title": "Why doesn&#39;t this Rust program crash?", "body": "<p>While the memory in the Vec\u2019s heap allocation is uninitialised, it will most commonly be filled with zeros, and a zeroed <code>Vec</code> is an empty <code>Vec</code> (<code>String</code> and <code>Vec</code> have cheap constructors because they don\u2019t make an allocation for an empty array). There is thus no allocation to free, and so it doesn\u2019t crash in this particular case. Very slight modifications, or running it on a machine with slightly different uninitialised memory semantics, could easily cause it to crash (which would be a good thing\u2014crashes are typically easier to debug than subtle errors).</p>\n\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20z%3A%20Vec%3CVec%3C(bool%2Cf64)%3E%3E%20%3D%20Vec%3A%3Awith_capacity(10)%3B%0A%20%20%20%20unsafe%20%7B%20z.set_len(10)%3B%20%7D%0A%0A%20%20%20%20%2F%2F%20(Just%20confirming%20that%20Vec%20is%20three%20words.)%0A%20%20%20%20assert_eq!(std%3A%3Amem%3A%3Asize_of%3A%3A%3CVec%3C(bool%2C%20f64)%3E%3E()%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20std%3A%3Amem%3A%3Asize_of%3A%3A%3C%5Busize%3B%203%5D%3E())%3B%0A%0A%20%20%20%20let%20raw%3A%20%5Busize%3B%203%5D%20%3D%20unsafe%20%7B%20std%3A%3Aptr%3A%3Aread(std%3A%3Amem%3A%3Atransmute(%26z%5B0%5D))%20%7D%3B%0A%20%20%20%20println!(%22Raw%20words%20of%20z%5B0%5D%3A%20%7B%3A%3F%7D%22%2C%20raw)%3B%0A%20%20%20%20z%5B0%5D%20%3D%20vec!((true%2C1.))%3B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20z%5B0%5D)%3B%0A%7D&amp;version=stable\" rel=\"noreferrer\">This diagnosis can be seen to be the case.</a></p>\n"}], "owner": {"reputation": 3333, "user_id": 3859566, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a7c4c1c9ad9bd41f49004d32884bc680?s=128&d=identicon&r=PG&f=1", "display_name": "yong", "link": "https://stackoverflow.com/users/3859566/yong"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 755, "favorite_count": 0, "accepted_answer_id": 31308265, "answer_count": 1, "score": 5, "last_activity_date": 1436416899, "creation_date": 1436411471, "question_id": 31307454, "link": "https://stackoverflow.com/questions/31307454/why-doesnt-this-rust-program-crash", "title": "Why doesn&#39;t this Rust program crash?", "body": "<p>Consider this Rust program:</p>\n\n<pre><code>fn main() {\n    let mut z : Vec&lt;Vec&lt;(bool,f64)&gt;&gt; = Vec::with_capacity(10);\n    unsafe { z.set_len(10); }\n    z[0] = vec!((true,1.));\n    println!(\"{:?}\", z[0]);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ccf387ed66a0d8b832ed&amp;version=stable\" rel=\"noreferrer\">https://play.rust-lang.org/?gist=ccf387ed66a0d8b832ed&amp;version=stable</a></p>\n\n<p>Rust should attempt to drop <code>z[0]</code> when we set it, and since <code>z[0]</code> is uninitialized it should crash the program. However, it runs fine. Why?  </p>\n"}]