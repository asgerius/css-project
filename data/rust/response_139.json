[{"tags": ["rust"], "comments": [{"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "edited": false, "score": 0, "creation_date": 1504735374, "post_id": 46084968, "comment_id": 79132036, "body": "And I bet that this is a duplicate, but I couldn&#39;t find a similar question."}, {"owner": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 1, "creation_date": 1504735690, "post_id": 46084968, "comment_id": 79132134, "body": "Aside: In the land of C, printing a <code>float</code> to a string with enough, but not too many digits is accomplished with <code>sprintf(buf, sizeof buf, &quot;%.*e&quot;, FLT_DECIMAL_DIG - 1, some_float);</code>.  May provide some ideas for you."}, {"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "reply_to_user": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1504735820, "post_id": 46084968, "comment_id": 79132174, "body": "I actually didn&#39;t know about C&#39;s <code>FLT_DECIMAL</code>, so thanks for that. C++ has it even nicer with <code>std::to_string</code>; I am looking for something similar to this in rust."}, {"owner": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1504736153, "post_id": 46084968, "comment_id": 79132274, "body": "Note that <code>std::to_string</code> uses a fixed (non-exponential notation) that tends to convert a small <code>float</code> to &quot;0.000000&quot;  and very large values with excessive digits.  I wonder if <code>.to_string()</code> does the same?"}, {"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "reply_to_user": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1504736401, "post_id": 46084968, "comment_id": 79132353, "body": "It actually does, at least there at lot of excessive digits; figuring out how to format this will be the next step."}, {"owner": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1504737205, "post_id": 46084968, "comment_id": 79132580, "body": "Converting a <code>float</code> to a string (in any language) and retain info about the value  is best done with <a href=\"https://en.wikipedia.org/wiki/Scientific_notation\" rel=\"nofollow noreferrer\">exponential notation</a>, else code is attempting to defeat the  &quot;floating&quot; in &quot;floating point&quot;."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1504737367, "post_id": 46084968, "comment_id": 79132636, "body": "I added examples to my answer on how to format using a fixed number of digits after the decimal point as well as how to format using exponential notation."}, {"owner": {"reputation": 112912, "user_id": 2410359, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/pIl9T.png?s=128&g=1", "display_name": "chux - Reinstate Monica", "link": "https://stackoverflow.com/users/2410359/chux-reinstate-monica"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1504737759, "post_id": 46084968, "comment_id": 79132745, "body": "@LukasKalbertodt The <code>&quot;3.1415926e6&quot;</code> does not show how to print pi with an expected value of about <code>3.1415926e0</code>.  The other trick is how many digits should be shown to present all <code>float</code> uniquely, yet without excessive decimal digits?  Is 8 the right amount - as in your answer?  (it is usually about 9 total digits in C)  I know <a href=\"https://stackoverflow.com/a/19897395/2410359\">how in C</a>, though unfamiliar in Rust, yet the principles are the same."}], "answers": [{"comments": [{"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "edited": false, "score": 0, "creation_date": 1504735990, "post_id": 46085066, "comment_id": 79132227, "body": "Thanks, I will accept your answer as soon as I can. Why is this not in the documentation for <code>f32</code>? <a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.f32.html</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "edited": false, "score": 1, "creation_date": 1504736475, "post_id": 46085066, "comment_id": 79132377, "body": "@PhilippLudwig I added a bunch of explanation. I hope this clarifies things :)"}, {"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "edited": false, "score": 0, "creation_date": 1504736527, "post_id": 46085066, "comment_id": 79132392, "body": "That actually does clarify the situation. Thank you very much for your effort!"}, {"owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "edited": false, "score": 0, "creation_date": 1579343962, "post_id": 46085066, "comment_id": 105740253, "body": "<i>Sometimes, the answer is easy</i>. Well, but the output of e.g. <code>(1e-300).to_string()</code> is quite unexpected and different from how stringifying floats works in many other languages. Obtaining a human friendly string actually <a href=\"https://stackoverflow.com/q/59794031/1804173\">does not seem to be straighforward</a>."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 30, "last_activity_date": 1504737296, "last_edit_date": 1504737296, "creation_date": 1504735921, "answer_id": 46085066, "question_id": 46084968, "link": "https://stackoverflow.com/questions/46084968/how-can-i-convert-a-float-to-string/46085066#46085066", "title": "How can I convert a float to string?", "body": "<p>Sometimes, the answer is easy: <a href=\"https://doc.rust-lang.org/stable/std/string/trait.ToString.html#tymethod.to_string\" rel=\"noreferrer\"><strong><code>to_string()</code></strong></a>.</p>\n\n<pre><code>let pi = 3.1415926;\nlet s = pi.to_string();  // : String\n</code></pre>\n\n<hr>\n\n<h3>Background</h3>\n\n<p>The foundation for \"creating a readable string representation of something\" is in the <a href=\"https://doc.rust-lang.org/stable/std/fmt/index.html\" rel=\"noreferrer\"><code>fmt</code> module</a>. Probably the most important trait in this module is <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code></a>. <code>Display</code> is an abstraction over types that can be formatted as a user-facing string (pretty much exactly what you want). Usually the <code>Display</code> trait is used by <code>println!()</code> and friends. So you can already convert your float to string with the <code>format!()</code> macro:</p>\n\n<pre><code>let s = format!(\"{}\", pi);\n</code></pre>\n\n<p>But there is something else: the <a href=\"https://doc.rust-lang.org/stable/std/string/trait.ToString.html\" rel=\"noreferrer\"><code>ToString</code> trait</a>. This trait talks about types that can be converted to a <code>String</code>. And now, there is a magic implementation:</p>\n\n<pre><code>impl&lt;T&gt; ToString for T \n    where T: Display + ?Sized\n</code></pre>\n\n<p>This means: every type which implements <code>Display</code> also automatically implements <code>ToString</code>! So instead of writing <code>format!(\"{}\", your_value)</code> you can simply write <code>your_value.to_string()</code>!</p>\n\n<p>While these wildcard implementations are extremely useful and versatile, they have one disadvantage: finding methods is much harder. As you point out, <a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noreferrer\">the documentation of <code>f32</code></a> doesn't mention <code>to_string()</code> at all. This is not very good, but it is a known issue. We're trying to improve this situation!</p>\n\n<h3>Advanced formatting</h3>\n\n<p>The <code>to_string()</code> method uses the default formatting options, so it's equivalent to <code>format!(\"{}\", my_value)</code>. But sometimes, you want to tweak how the value is converted into a string. To do that, you have to use <code>format!()</code> and the full power of the <code>fmt</code> format specifier. You can read about those in the <a href=\"https://doc.rust-lang.org/stable/std/fmt/index.html\" rel=\"noreferrer\"><code>module documentation</code></a>. One example:</p>\n\n<pre><code>let s = format!(\"{:.2}\", pi);\n</code></pre>\n\n<p>This will result in a string with exactly <strong>two digits after the decimal point</strong> (<code>\"3.14\"</code>).</p>\n\n<p>If you want to convert your float into a string using <strong>scientific notation</strong>, you can use the <code>{:e}</code> (or <code>{:E}</code>) format specifier which corresponds to the <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.LowerExp.html\" rel=\"noreferrer\"><code>LowerExp</code></a> (or <a href=\"https://doc.rust-lang.org/stable/std/fmt/trait.UpperExp.html\" rel=\"noreferrer\"><code>UpperExp</code></a>) trait.</p>\n\n<pre><code>let s = format!(\"{:e}\", pi * 1_000_000.0);\n</code></pre>\n\n<p>This will result in <code>\"3.1415926e6\"</code>.</p>\n"}], "owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6293, "favorite_count": 1, "accepted_answer_id": 46085066, "answer_count": 1, "score": 13, "last_activity_date": 1504737296, "creation_date": 1504735355, "question_id": 46084968, "link": "https://stackoverflow.com/questions/46084968/how-can-i-convert-a-float-to-string", "title": "How can I convert a float to string?", "body": "<p>How can a float value be converted to a String? For whatever reason, the documentation and all online sources I can find are only concerned with the other way around.</p>\n\n<pre><code>let value: f32 = 17.65;\nlet value_as_str: String = ..... \n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 0, "creation_date": 1504800671, "post_id": 46085602, "comment_id": 79164361, "body": "If it&#39;s safe to have a dangling pointer with a raw pointer, why does this exhibit the same behavior as the OP&#39;s code (e.g fails in Debug, &quot;works&quot; in Release) <a href=\"https://play.rust-lang.org/?gist=23baa08f2c83609e002f33b3e2852543&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "edited": false, "score": 1, "creation_date": 1504802177, "post_id": 46085602, "comment_id": 79165139, "body": "@Timidger Because you dereference the pointer in that second line. Dereferencing a dangling pointer is, of course, not allowed. So you can&#39;t get the pointer to the field with the <code>.</code> operator. To be honest, I don&#39;t know what the best way to obtain such a pointer to a field is. Better ask another question! :)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 9, "last_activity_date": 1504742716, "last_edit_date": 1504742716, "creation_date": 1504739698, "answer_id": 46085602, "question_id": 46084797, "link": "https://stackoverflow.com/questions/46084797/why-is-pointer-arithmetic-the-cause-of-a-segfault/46085602#46085602", "title": "Why is pointer arithmetic the cause of a segfault?", "body": "<p>In Rust, <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\" rel=\"noreferrer\"><strong>merely creating a dangling reference is undefined behavior</strong></a>! This allows the compiler to perform some aggressive optimizations around references, that wouldn't be possible otherwise.</p>\n\n<p>In this particular case, the compiler generates <a href=\"https://godbolt.org/g/EChH1g\" rel=\"noreferrer\">code which calculates the offset for the field by using the <code>align</code> value in the vtable</a>. So it tries to dereference the vptr which causes the segfault.</p>\n\n<hr>\n\n<p>To have dangling pointer, you shouldn't use a <em>reference</em>, but a <a href=\"https://doc.rust-lang.org/stable/std/primitive.pointer.html\" rel=\"noreferrer\"><em>raw pointer</em></a>. You can have dangling raw pointers without a problem!</p>\n\n<pre><code>let fake: *const Bar&lt;T&gt; = std::ptr::null();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1504741453, "post_id": 46085688, "comment_id": 79133661, "body": "Arguably, if the the program compiled in debug mode segfaults in case of undefined behaviour, that makes it certainly not that stupid. :P In Rust, obtaining a reference to invalid content is just as illegal as directly accessing that content, so a segfault is one of the &quot;best&quot; consequences we could wish for."}], "tags": [], "owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "is_accepted": false, "score": 1, "last_activity_date": 1504740286, "creation_date": 1504740286, "answer_id": 46085688, "question_id": 46084797, "link": "https://stackoverflow.com/questions/46084797/why-is-pointer-arithmetic-the-cause-of-a-segfault/46085688#46085688", "title": "Why is pointer arithmetic the cause of a segfault?", "body": "<p>You are dereferencing a null pointer on the line you indicated. You are correct that you are taking a reference to that value, but the code that rustc outputs for LLVM is very stupid in debug mode. Try running this in release mode, and you'll see that <em>probably</em> the optimizer will be kind to you and this will no longer segfault.</p>\n\n<p>Since this is UB, please don't depend on this for real code.</p>\n"}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 461, "favorite_count": 0, "accepted_answer_id": 46085602, "answer_count": 2, "score": 7, "last_activity_date": 1504742716, "creation_date": 1504734277, "last_edit_date": 1504740101, "question_id": 46084797, "link": "https://stackoverflow.com/questions/46084797/why-is-pointer-arithmetic-the-cause-of-a-segfault", "title": "Why is pointer arithmetic the cause of a segfault?", "body": "<p>Why is this pointer arithmetic (without reading or writing data behind these pointers) the cause of a segfault?</p>\n\n<pre><code>#![allow(dead_code,unused_variables)]\nuse std::cell::Cell;\n\nstruct Bar&lt;T: ?Sized&gt; {\n    a: Cell&lt;usize&gt;,\n    value: T,\n}\n\nunsafe fn foo&lt;T: ?Sized&gt;(v: &amp;T) {\n    let fake: &amp;Bar&lt;T&gt; = std::mem::zeroed();\n\n    // segfault on this line\n    // we are not reading or writing uninitialized data behind the reference, \n    // but only doing pointer arithmetic. We are not reading or writing \n    // uninitialized vtable, but only copy the vtable pointer.\n    let fake_val = &amp;fake.value;\n}\n\n\nfn main() {\n    use std::any::Any;\n\n    let some_ref: &amp;Any = &amp;42 as &amp;Any;\n    unsafe { foo(some_ref) };\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=61e79fc78c62b286f27d869060965b4a&amp;version=nightly\" rel=\"noreferrer\">On Playground</a>)</p>\n\n<p>Output: <code>Segmentation fault</code></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1504769393, "post_id": 46083342, "comment_id": 79142396, "body": "Regarding returning <code>impl Iterator</code>... is storing <code>impl Iterator</code> in a structure possible? If it is not, it would not be an improvement."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 6, "creation_date": 1504770419, "post_id": 46083342, "comment_id": 79143041, "body": "I&#39;m voting to close this question as off-topic because it&#39;s about language and API design. I think it would be better suited to the <a href=\"https://internals.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust internals forum</a>. I&#39;d like to see an answer too, by the way... :)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 1, "creation_date": 1504793584, "post_id": 46083342, "comment_id": 79159257, "body": "@PaoloFalabella I just <a href=\"https://internals.rust-lang.org/t/evolving-the-standard-library-through-what/5874\" rel=\"nofollow noreferrer\">asked in the internals forum</a>. However, I disagree with the close votes. While in the internals forum my question is more of a discussion-nature, my question here on SO just asks about the current state of things; about facts. I didn&#39;t want to discuss here. I just wanted an answer like &quot;yeah there are already ideas how to break <code>std</code>, see here&quot; or &quot;no, no one thought about it yet&quot;. Maybe the result of the internals discussion can serve as a basis for an answer here on SO."}, {"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1504796718, "post_id": 46083342, "comment_id": 79161652, "body": "New traits can be added to existing types without breaking backwards compatibility so I don&#39;t see why <code>std</code> would need to be changed to have collection traits. Additionally, I&#39;m not seeing why returning <code>impl Iterator</code> is an improvement over <code>Map</code>. Sure, it seems conceptually cleaner, but I don&#39;t see a practical benefit.   As others have mentioned, this seems like a better fit for the internals form than SO."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1504875944, "post_id": 46083342, "comment_id": 79196613, "body": "@LukasKalbertodt having read through <a href=\"https://stackoverflow.com/help/on-topic\">stackoverflow&#39;s help</a>, some threads on meta and <a href=\"https://stackoverflow.blog/2010/09/29/good-subjective-bad-subjective/\">&quot;Good subjective, Bad Subjective&quot;</a> I&#39;m not so sure any more that your question is off topic. I still fear it might be devolve into opinion-based discussion, but what if a plan does exist or someone can point out to one of the RFCs for a relevant discussion on this? In doubt, I apologize with you and vote to reopen."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1504986809, "post_id": 46083342, "comment_id": 79231280, "body": "@PaoloFalabella Thanks for doing a lot of research on SO-policy for this question! But don&#39;t worry; let&#39;s see how the discussion on the internals forum evolves. If anything specific comes out of that discussion, we can still reopen this ;-)"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 154, "favorite_count": 1, "closed_date": 1504796736, "answer_count": 0, "score": 3, "last_activity_date": 1504731567, "creation_date": 1504727647, "last_edit_date": 1504731567, "question_id": 46083342, "link": "https://stackoverflow.com/questions/46083342/how-if-at-all-is-the-standard-librarys-api-changed-to-use-new-language-featur", "closed_reason": "Not suitable for this site", "title": "How (if at all) is the standard library&#39;s API changed to use new language features?", "body": "<p>Rust is very actively developed and the language itself is extended regularly through the RFC process. Some of these changes, such as the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\">Generic Associated Types RFC</a>, have a strong impact on API-design, because new, better APIs suddenly become possible, where they weren't before.</p>\n\n<p>As example, consider the mentioned GATs RFC: with this feature, we could have collection traits and could write a better version of some traits, e.g. <code>Deref</code>. Or take <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\" rel=\"nofollow noreferrer\">the <code>impl Trait</code> RFC</a>: with that, it would be desirable to change the <code>Iterator</code> trait such that methods like <code>map()</code> would return <code>impl Iterator</code> instead of <code>Map</code>.</p>\n\n<p>This is a conflict: we could improve <code>std</code>, but not in a backwards-compatible manner. I heard something about \"Rust Epochs\" (<a href=\"https://github.com/rust-lang/rfcs/pull/2052\" rel=\"nofollow noreferrer\">discussed here</a>) and I think they would allow for backwards-incompatible changes.</p>\n\n<p>My question is: <strong>Are there already plans on how to change the standard library's API in order to use new language features? Is a new design considered for the Rust 2019 Epoch?</strong></p>\n"}, {"tags": ["rust", "rust-macros"], "comments": [{"owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 1, "creation_date": 1504726498, "post_id": 46082874, "comment_id": 79127969, "body": "The <code>write!</code> macro requires a buffer to write to. In your case, such a buffer is provided by the formatter. So, the correct invocation would be <code>write!(f, &quot;...&quot;)</code>."}, {"owner": {"reputation": 14666, "user_id": 12637, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/2f3ca6058f9534dfed473cf31341c644?s=128&d=identicon&r=PG", "display_name": "Omar Abid", "link": "https://stackoverflow.com/users/12637/omar-abid"}, "reply_to_user": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 0, "creation_date": 1504727068, "post_id": 46082874, "comment_id": 79128271, "body": "I don&#39;t know but I think the error message is not quite informative."}], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 1, "last_activity_date": 1504726513, "creation_date": 1504726513, "answer_id": 46083057, "question_id": 46082874, "link": "https://stackoverflow.com/questions/46082874/unexpected-end-of-macro-invocation-in-rust/46083057#46083057", "title": "Unexpected end of macro invocation in Rust", "body": "<p><a href=\"https://doc.rust-lang.org/1.11.0/std/macro.write!.html\" rel=\"nofollow noreferrer\"><code>write!</code></a> expects the output buffer as its first argument:</p>\n\n<pre><code>write!(f, \"Nothing seriously\")\n</code></pre>\n"}], "owner": {"reputation": 14666, "user_id": 12637, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/2f3ca6058f9534dfed473cf31341c644?s=128&d=identicon&r=PG", "display_name": "Omar Abid", "link": "https://stackoverflow.com/users/12637/omar-abid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 842, "favorite_count": 0, "accepted_answer_id": 46083057, "answer_count": 1, "score": 0, "last_activity_date": 1504726513, "creation_date": 1504725749, "question_id": 46082874, "link": "https://stackoverflow.com/questions/46082874/unexpected-end-of-macro-invocation-in-rust", "title": "Unexpected end of macro invocation in Rust", "body": "<p>I have the following code in Rust</p>\n\n<pre><code>use std::fmt;\n\npub struct MyRange&lt;Idx&gt; {\n    pub start: Idx,\n    pub end: Idx,\n}\n\nimpl fmt::Debug for MyRange&lt;f32&gt;  {\n    fn fmt( &amp;self, f: &amp;mut fmt::Formatter ) -&gt; fmt::Result {\n        write!( \"Nothing seriously\" )\n    }\n}\n\nfn main() {\n    let start:f32= 1.2;\n    let end:f32 = 5.;\n    let rng2 = MyRange { start: start, end: end};\n    println!( \"{:?}\", rng2 ); \n}\n</code></pre>\n\n<p>At Compile, I'm getting the following error</p>\n\n<pre><code>error: unexpected end of macro invocation\n  --&gt; src/main.rs:10:17\n   |\n10 |         write!( \"Nothing seriously\" )\n   |                 ^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I'm not exactly certain what the problem is.</p>\n\n<p>Edit: I'm using the latest Rust version (Stable 1.20)</p>\n"}, {"tags": ["rust", "dereference"], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504723642, "post_id": 46082153, "comment_id": 79126482, "body": "I don&#39;t see how HKT/ATC is going to solve it in the future?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504725146, "post_id": 46082153, "comment_id": 79127284, "body": "@kennytm I edited my answer to explain that remark. I hope that makes it way clearer."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504728604, "post_id": 46082153, "comment_id": 79129037, "body": "I see. Although what this produced is still <code>(&amp;T, &amp;T)</code>, not <code>&amp;(T, T)</code>."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 1, "creation_date": 1504737540, "post_id": 46082153, "comment_id": 79132686, "body": "I&#39;m not sure whether <code>&amp;(T, T)</code> would be possible unless the compiler uses the same layout for the tuple and the struct. Which would be sensible, but idk if it&#39;s guaranteed by the language semantics."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 1, "last_activity_date": 1504725127, "last_edit_date": 1504725127, "creation_date": 1504722872, "answer_id": 46082153, "question_id": 46081831, "link": "https://stackoverflow.com/questions/46081831/deref-struct-to-tuple-requires-move/46082153#46082153", "title": "Deref struct to tuple requires move", "body": "<h3>Summary</h3>\n\n<p>Right now, <strong>there is no way to do that!</strong> At least not without using <code>unsafe</code>.</p>\n\n<hr>\n\n<h3>Why?</h3>\n\n<p>Consider the return type <code>-&gt; &amp;Foo</code>. It means that the function returns a reference to a <code>Foo</code> that already lives somewhere. In particular, if you have <code>fn deref(&amp;self) -&gt; &amp;Foo</code> it means that the <code>Foo</code> lives at least as long as <code>self</code>, because lifetime elision kicks in and converts it to <code>fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Foo</code>. </p>\n\n<p>Now, <code>(T, T)</code> is a type just like <code>Foo</code>. So <code>fn deref(&amp;self) -&gt; &amp;(T, T)</code> means that you return a reference to a tuple of <code>T</code>s which already lives somewhere. But there is no such tuple! You could create a tuple in the function, but that won't live long enough. Similarly, if you say <code>-&gt; &amp;(&amp;T, &amp;T)</code> you say that you return a reference to a tuple of (reference to <code>T</code>) which already lives somewhere. But again: you don't have a tuple already living somewhere.</p>\n\n<p>So the trait <code>Deref</code> requires you to return a reference to something which already lives exactly like that in <code>self</code>. So with this, it's impossible to do what you want. </p>\n\n<h3>Unsafe</h3>\n\n<p>You could use the unsafe function <code>mem::transmute()</code>. After all, a struct like yours and a tuple should have exactly the same memory layout, right?</p>\n\n<p>Yes and no. It is probably the case that both memory layouts are the same, but Rust doesn't guarantee it! Rust is free to reorder fields and add padding bytes. And while I suspect that the memory layout for structs, tuple structs and tuples are exactly the same, I can't find a source on that. So without that information in the specification, transmuting is technically not safe.</p>\n\n<h3>The future</h3>\n\n<p>In the future, HKTs or more rather Generic Associated Types could solve this problem. That is, they wouldn't solve your problem directly, but with GATs, as defined in <a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"nofollow noreferrer\">this RFC</a>, one could redefine the <code>Deref</code> trait. That is:</p>\n\n<pre><code>trait Deref {\n    type Target&lt;'a&gt;;\n    fn deref(&amp;self) -&gt; Self::Target&lt;'a&gt;;\n}\n</code></pre>\n\n<p>Right now we are forced to put the lifetime \"at the outermost level\". With this, we can let the type implementing <code>Deref</code> decide. In that case you could write:</p>\n\n<pre><code>impl&lt;T&gt; Deref for Vec2&lt;T&gt; {\n    type Target&lt;'a&gt; = (&amp;'a T, &amp;'a T);\n\n    fn deref(&amp;self) -&gt; Self::Target {\n        (&amp;self.x, &amp;self.y)\n    }\n}\n</code></pre>\n\n<p>This way the lifetime is \"on the inside\".</p>\n\n<p>But GATs are not even implemented yet, so it will still take some time. Additionally, it's unclear when/how/if the standard library is changed in a backward-incompatible manner which would allow to change <code>Deref</code>.</p>\n"}], "owner": {"reputation": 23, "user_id": 5243042, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/832b89dca6e163cebdd60a5c12432e26?s=128&d=identicon&r=PG&f=1", "display_name": "Lord Sentox", "link": "https://stackoverflow.com/users/5243042/lord-sentox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 596, "favorite_count": 1, "accepted_answer_id": 46082153, "answer_count": 1, "score": 1, "last_activity_date": 1504725127, "creation_date": 1504721633, "question_id": 46081831, "link": "https://stackoverflow.com/questions/46081831/deref-struct-to-tuple-requires-move", "title": "Deref struct to tuple requires move", "body": "<p>I was writing a Vector class just for fun in rust and thought it would be nice to be able to implement Deref for it, accessing it just like a tuple reference.\nFor instance, a <code>Vec2&lt;f32&gt;</code> could be dereferenced as <code>&amp;(f32, f32)</code>.\nI came up with this:</p>\n\n<pre><code>pub struct Vec2&lt;T&gt; {\n    pub x: T,\n    pub y: T\n}\n\nimpl&lt;T&gt; Deref for Vec2&lt;T&gt; {\n    type Target = (T, T);\n\n    fn deref(&amp;self) -&gt; &amp;(T, T) {\n        &amp;(self.x, self.y)\n    }\n}\n</code></pre>\n\n<p>However, since the compiler wants to create the tuple and then reference it, it tries to\nmove out of the struct.\nIf I were to use <code>type Target = (&amp;T, &amp;T)</code> to then return a <code>&amp;(&amp;T, &amp;T)</code> I wold have to use explicit lifetime specifiers, which I don't have because I cannot access the self lifetime.</p>\n\n<p>Now my question is: Is there a way to do this without copying the values? Since I'm often using small types I will probably not really be using Deref anyway, but DerefMut could become useful, I'd imagine.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1504716815, "post_id": 46079916, "comment_id": 79122756, "body": "Note that this happens to several other automatically derivable traits, including <code>Debug</code>,  <code>Default</code>, <code>Clone</code>, and possibly more. The derived implementations require that all type parameters also implement them."}], "answers": [{"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 1, "last_activity_date": 1504720937, "last_edit_date": 1504720937, "creation_date": 1504715743, "answer_id": 46080328, "question_id": 46079916, "link": "https://stackoverflow.com/questions/46079916/possible-bug-in-generic-implementation-of-default/46080328#46080328", "title": "Possible bug in generic implementation of Default?", "body": "<p>This is a known issue, and it's hard to fix. <a href=\"https://github.com/rust-lang/rust/issues/26925\" rel=\"nofollow noreferrer\">Issue #26925</a></p>\n\n<p>In short, <code>#[derive]</code> uses incorrect bounds: it assumes that in order to implement <code>Default</code> for <code>Foo&lt;T&gt;</code>, <code>T</code> must be <code>Default</code>, when in reality <code>Option&lt;T&gt;: Default</code> is sufficient.</p>\n\n<p>The problem with fixing it is that it's possible to have struct members of private types, and using <code>#[derive]</code> on a public generic struct that has private members could partially expose that private interface. For example,</p>\n\n<pre><code>trait MyTrait {}\n\nstruct MyType&lt;T&gt; {}\n\nimpl&lt;T&gt; Default for MyType&lt;T&gt; where T: MyTrait {}\n\n#[derive(Default)]\npub struct PubType&lt;T&gt; {\n    member: MyType&lt;T&gt;,\n}\n</code></pre>\n\n<p>If <code>#[derive(Default)]</code> does the right thing, you effectively have this <code>impl</code> block for a public type that exposes a private trait:</p>\n\n<pre><code>impl Default for PubType&lt;T&gt;\n    where T: MyTrait\n{ ... }\n</code></pre>\n\n<p>Probably the best way to get around this right now is to avoid using <code>#[derive]</code> in this case and write the <code>impl</code> yourself.</p>\n"}], "owner": {"reputation": 129, "user_id": 6037727, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cca27c93999c1377e690482c67e2cc5a?s=128&d=identicon&r=PG&f=1", "display_name": "Brian", "link": "https://stackoverflow.com/users/6037727/brian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 233, "favorite_count": 0, "closed_date": 1504718091, "accepted_answer_id": 46080328, "answer_count": 1, "score": 2, "last_activity_date": 1504720937, "creation_date": 1504714240, "question_id": 46079916, "link": "https://stackoverflow.com/questions/46079916/possible-bug-in-generic-implementation-of-default", "closed_reason": "Duplicate", "title": "Possible bug in generic implementation of Default?", "body": "<p>Given the following struct <code>Foo&lt;T&gt;</code> that derives <code>Default</code>:</p>\n\n<pre><code>#[derive(Default)]\nstruct Foo&lt;T&gt; {\n    bar: Option&lt;T&gt;,\n}\n</code></pre>\n\n<p>Why does this compile</p>\n\n<pre><code>fn create&lt;T&gt;() -&gt; Foo&lt;T&gt; {\n    Foo {\n        bar: Option::default(),\n    }\n}\n</code></pre>\n\n<p>but this doesn't?</p>\n\n<pre><code>fn create_alt&lt;T&gt;() -&gt; Foo&lt;T&gt; {\n    Foo::default()\n}\n</code></pre>\n\n<p>In my mind they are both doing the exact same thing--it shouldn't matter if <code>T</code> implements <code>Default</code> (which is what the compiler wants me to specify) because <code>Option&lt;T&gt;</code> implements <code>Default</code>. </p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=14b323bc3c528f8285082f1bd07e64dd&amp;version=stable\" rel=\"nofollow noreferrer\">Here</a> is a link to the Rust Playground with this example.</p>\n"}, {"tags": ["json", "rust", "serde", "hyper", "serde-json"], "comments": [{"owner": {"reputation": 1339, "user_id": 682485, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ea1e106f2d083f0624c0c4f48ae1c18b?s=128&d=identicon&r=PG", "display_name": "Malice", "link": "https://stackoverflow.com/users/682485/malice"}, "edited": false, "score": 1, "creation_date": 1504698978, "post_id": 46074324, "comment_id": 79109880, "body": "Looks like your <code>json</code> is an object inside an object ...."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1504700052, "post_id": 46074324, "comment_id": 79110646, "body": "I cannot test my intuition now, but I think you should try to rename your <code>Currency</code> asset field to <code>BCH</code>."}, {"owner": {"reputation": 3215, "user_id": 855474, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/8JCP8.png?s=128&g=1", "display_name": "BalaB", "link": "https://stackoverflow.com/users/855474/balab"}, "edited": false, "score": 0, "creation_date": 1504700300, "post_id": 46074324, "comment_id": 79110862, "body": "BCH is not static"}], "answers": [{"tags": [], "owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "is_accepted": true, "score": 7, "last_activity_date": 1504702115, "creation_date": 1504702115, "answer_id": 46075699, "question_id": 46074324, "link": "https://stackoverflow.com/questions/46074324/parsing-an-object-inside-an-object-with-serde-json/46075699#46075699", "title": "Parsing an object inside an object with serde_json", "body": "<p>I think you want a HashMap.</p>\n\n<pre><code>#[macro_use] extern crate serde;\nextern crate serde_json;\n\nuse std::collections::HashMap;\n\nstatic VALUE: &amp;str = r#\"{\n   \"BCH\": {\n      \"aclass\": \"currency\",\n      \"altname\": \"BCH\",\n      \"decimals\": 10,\n      \"display_decimals\": 5\n   }\n}\"#;\n\n#[derive(Deserialize, Debug)]\nstruct Assets {  \n    aclass: String,\n    altname: String,\n    decimals: u8,\n    display_decimals: u8,\n}\n\nfn main() {\n    let serde_value: HashMap&lt;String, Assets&gt; = serde_json::from_str(VALUE).unwrap();\n\n    println!(\"{:?}\", serde_value);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=214cd875a36ae21d623812f36817b0ce&amp;version=stable\" rel=\"noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 3215, "user_id": 855474, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/8JCP8.png?s=128&g=1", "display_name": "BalaB", "link": "https://stackoverflow.com/users/855474/balab"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 703, "favorite_count": 0, "accepted_answer_id": 46075699, "answer_count": 1, "score": 4, "last_activity_date": 1538856474, "creation_date": 1504698242, "last_edit_date": 1538856474, "question_id": 46074324, "link": "https://stackoverflow.com/questions/46074324/parsing-an-object-inside-an-object-with-serde-json", "title": "Parsing an object inside an object with serde_json", "body": "<p>I am stuck, below is the JSON which I am receiving:</p>\n\n<pre><code>{\n   \"BCH\": {\n      \"aclass\": \"currency\",\n      \"altname\": \"BCH\",\n      \"decimals\": 10,\n      \"display_decimals\": 5\n   }\n}\n</code></pre>\n\n<p>I am bit confused on how my struct should look like to parse the attributes using the<code>serde_json</code> crate. Below is what I currently have:</p>\n\n<pre><code>#[derive(Deserialize, Debug)]\nstruct Assets  {  \n    aclass: String,\n    altname: String,\n    decimals: u8,\n    display_decimals: u8,\n}\n\n#[derive(Deserialize, Debug)]\nstruct Currency {\n    assest: Assets,\n}\n\n\nfn to_assets_type(value: serde_json::Value) -&gt; Currency {\n serde_json::from_value(value).unwrap()\n}\n</code></pre>\n\n<p>I am getting an error message:</p>\n\n<blockquote>\n  <p>thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code>\n  value: ErrorImpl { code: Message(\"missing field <code>assest</code>\"), line: 0,\n  column: 0 }', src/libcore/result.rs:860:4</p>\n</blockquote>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1504684596, "post_id": 46065487, "comment_id": 79099981, "body": "You are using <code>Some</code> instead of <code>Some(pattern)</code>. If you don&#39;t care about the contents, use <code>self.$name.is_some()</code> in an if condition instead of using a match."}], "answers": [{"comments": [{"owner": {"reputation": 1907, "user_id": 995935, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/uO0in.gif?s=128&g=1", "display_name": "Mutant Bob", "link": "https://stackoverflow.com/users/995935/mutant-bob"}, "edited": false, "score": 0, "creation_date": 1562167023, "post_id": 46080964, "comment_id": 100295170, "body": "This bit me on using an <code>Ok</code> for a <code>Result&lt;(), Error&gt;</code>.  I thought it a bit odd to need a <code>_</code> for a <code>()</code>, but I am lazy."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 7, "last_activity_date": 1504790007, "last_edit_date": 1504790007, "creation_date": 1504718129, "answer_id": 46080964, "question_id": 46065487, "link": "https://stackoverflow.com/questions/46065487/what-does-the-error-cannot-be-named-the-same-as-a-tuple-variant-mean/46080964#46080964", "title": "What does the error `cannot be named the same as a tuple variant` mean?", "body": "<p>The syntax <code>self.$name</code> is correct to access the member variable. As @oli_obk-ker said in the question's comment, the error is due to using <code>Some</code> instead of <code>Some(pattern)</code>.</p>\n\n<pre><code>         match self.$name {\n             Some(_) =&gt; num_fields += 1,\n//               ^~~\n             None =&gt; {}\n         };\n//\n// even better, use `if self.$name.is_some() { num_fields += 1; }`.\n</code></pre>\n\n<p>However, you don't even need to write your own <code>serialize</code>. You could use the <a href=\"https://serde.rs/field-attrs.html\" rel=\"noreferrer\"><code>#[serde(skip_serializing_if = \"f\")</code> attribute</a> on a field, which causes the generated code avoid writing it out if <code>f(&amp;self.field)</code> returns true.</p>\n\n<pre><code>($($name:ident : $component:ty,)*) =&gt; {\n    /// A collection of pointers to components\n    #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]\n    pub struct Entity {\n        $(\n          #[serde(skip_serializing_if = \"Option::is_none\")]  // &lt;-- add this\n          pub $name: Option&lt;($component)&gt;,\n        )*\n        children: Vec&lt;Entity&gt;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 186, "user_id": 4139221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/1223ab4e0173931a8a9d424705916c2a?s=128&d=identicon&r=PG&f=1", "display_name": "thelearnerofcode", "link": "https://stackoverflow.com/users/4139221/thelearnerofcode"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1015, "favorite_count": 0, "accepted_answer_id": 46080964, "answer_count": 1, "score": 3, "last_activity_date": 1504790075, "creation_date": 1504661543, "last_edit_date": 1504790075, "question_id": 46065487, "link": "https://stackoverflow.com/questions/46065487/what-does-the-error-cannot-be-named-the-same-as-a-tuple-variant-mean", "title": "What does the error `cannot be named the same as a tuple variant` mean?", "body": "<p>So I am making a ECS based on <a href=\"https://github.com/kvark/simplecs\" rel=\"nofollow noreferrer\">simplecs</a>.</p>\n\n<p>I have a macro that generates a entity struct that looks like this:</p>\n\n<pre><code>($($name:ident : $component:ty,)*) =&gt; {\n        /// A collection of pointers to components\n        #[derive(Clone, Debug, Deserialize, PartialEq)]\n        pub struct Entity {\n            $(\n            pub $name: Option&lt;($component)&gt;,\n            )*\n            children: Vec&lt;Entity&gt;\n        }\n}\n</code></pre>\n\n<p>It is my goal to use serde to serialize the entity, but that left a bunch of ugly None values where the component should be. So I tried to implement a custom serializer that looks like this:</p>\n\n<pre><code>impl Serialize for Entity {\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n        where S: Serializer\n    {\n        let mut num_fields = 0;\n         $(\n             match self.$name {\n                 Some =&gt; num_fields += 1,\n                 None =&gt; {}\n             };\n          )*\n          let mut state = serializer.serialize_struct(\"Entity\", num_fields)?;\n          // do serialize\n          state.end()\n    }\n}\n</code></pre>\n\n<p>The serializer tries to access a field via a name supplied as a macro argument (<code>$name</code>), but when I go to compile this, I get this error</p>\n\n<pre><code>error[E0530]: match bindings cannot shadow tuple variants\n  |\n  |         Some =&gt; {}\n  |         ^^^^ cannot be named the same as a tuple variant\n</code></pre>\n"}, {"tags": ["linux", "rust", "libc"], "comments": [{"owner": {"reputation": 11342, "user_id": 1144157, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/d05077a347e63679d43bfbdaf5e7b9ab?s=128&d=identicon&r=PG", "display_name": "Steephen", "link": "https://stackoverflow.com/users/1144157/steephen"}, "edited": false, "score": 0, "creation_date": 1504660590, "post_id": 46065346, "comment_id": 79091473, "body": "Refer here : <a href=\"http://beej.us/guide/bgnet/output/html/singlepage/bgnet.html\" rel=\"nofollow noreferrer\">beej.us/guide/bgnet/output/html/singlepage/bgnet.html</a>"}, {"owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "reply_to_user": {"reputation": 11342, "user_id": 1144157, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/d05077a347e63679d43bfbdaf5e7b9ab?s=128&d=identicon&r=PG", "display_name": "Steephen", "link": "https://stackoverflow.com/users/1144157/steephen"}, "edited": false, "score": 0, "creation_date": 1504661639, "post_id": 46065346, "comment_id": 79091686, "body": "Got it. Thank you.  For those, what order are the bytes in? E.g. in sockaddr_in there&#39;s a u32 address field; is that platform order or network order?"}], "owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 85, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1504660288, "creation_date": 1504660288, "question_id": 46065346, "link": "https://stackoverflow.com/questions/46065346/how-can-the-bytes-in-libcsockaddr-sa-data-be-interpreted-as-an-ip-address", "title": "How can the bytes in libc::sockaddr.sa_data be interpreted as an IP address?", "body": "<p>How can I interpret the bytes in the <code>sa_data: [c_char; 14]</code> field of <code>libc::sockaddr</code>?</p>\n\n<p>I would like to interpret the <code>sockaddr</code> as a <code>std::net::IpAddr</code> but I can't find documentation about which of those bytes mean what.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504658580, "post_id": 46065104, "comment_id": 79091062, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/38159771/why-can-a-trait-not-construct-itself\">Why can a trait not construct itself?</a> There may be better duplicates, but similar."}, {"owner": {"reputation": 55, "user_id": 6693053, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-z3JBiR4TsCU/AAAAAAAAAAI/AAAAAAAADzo/jrDqmQjDeWM/photo.jpg?sz=128", "display_name": "Timothy Bess", "link": "https://stackoverflow.com/users/6693053/timothy-bess"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504659193, "post_id": 46065104, "comment_id": 79091183, "body": "@loganfsmyth That&#39;s not what I&#39;m trying to do. I&#39;ve read through most of the examples that are similar to this and have gotten them to work by using Vec&lt;Box&lt;Trait&gt;&gt;. But when I use a trait that has a generic type like Vec&lt;Box&lt;Trait&lt;M&gt;&gt;&gt;, suddenly I get this error."}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504660956, "post_id": 46065104, "comment_id": 79091539, "body": "What are you expecting <code>get_ncollide_shape</code> to do? The error is because <code>Box&lt;Collidable&lt;P, M&gt;&gt;</code> means that essentially you&#39;ve erased all data about an object except that it implements a trait. In that context, <code>fn get_ncollide_shape&lt;T: Shape&lt;P, M&gt;&gt;(&amp;self) -&gt; Box&lt;T&gt;;</code> does not make sense, because there would be no way to call it. There are an infinite number of versions of that function because it is parametric on <code>T</code>, so there&#39;s no way to use that function, because it needs to decide at runtime which version to call, and the options are known."}, {"owner": {"reputation": 55, "user_id": 6693053, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-z3JBiR4TsCU/AAAAAAAAAAI/AAAAAAAADzo/jrDqmQjDeWM/photo.jpg?sz=128", "display_name": "Timothy Bess", "link": "https://stackoverflow.com/users/6693053/timothy-bess"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504663589, "post_id": 46065104, "comment_id": 79092170, "body": "@loganfsmyth I&#39;m not sure what you mean really. That part just returns any object implementing the Shape trait. That part of the code compiles and seems fine so far. In the error message, it references line 19 (in the struct definition) as the problem. Have any ideas about that part?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504664127, "post_id": 46065104, "comment_id": 79092313, "body": "The error is on line 19 because that is where you declare a boxed version of the trait. The error says &quot;note: method <code>get_ncollide_shape</code> has generic type parameters&quot; because generic parameters like <code>get_ncollide_shape&lt;T: Shape&lt;P, M&gt;&gt;</code> are not allowed on traits that will be boxed. Rust is a compiled language, so it needs to be able to create code to do what you&#39;re asking, and it can&#39;t do what you&#39;re asking."}], "answers": [{"tags": [], "owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "is_accepted": true, "score": 3, "last_activity_date": 1504681339, "last_edit_date": 1504681339, "creation_date": 1504665598, "answer_id": 46065956, "question_id": 46065104, "link": "https://stackoverflow.com/questions/46065104/use-trait-as-vec-type/46065956#46065956", "title": "Use Trait as Vec Type", "body": "<p>Rust is a compiled language, so when it compiles your code, it needs to know all of the information it might need to generate machine code.</p>\n\n<p>When you say</p>\n\n<pre><code>trait MyTrait {\n  fn do_thing() -&gt; Box&lt;u32&gt;;\n}\n\nstruct Foo {\n   field: Box&lt;MyTrait&gt;\n}\n</code></pre>\n\n<p>you are telling Rust that <code>Foo</code> will contain a <code>box</code> containing anything implementing <code>MyTrait</code>. By boxing the type, the compiler will erase any additional data about the data type that isn't covered by the trait. These <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html\" rel=\"nofollow noreferrer\">trait objects</a> are implemented as a set of data fields and a table of functions (called a <code>vtable</code>) that contains the functions exposed by the trait, so they can be called.</p>\n\n<p>When you change</p>\n\n<pre><code>fn do_thing() -&gt; Box&lt;u32&gt;;\n</code></pre>\n\n<p>to</p>\n\n<pre><code>fn do_thing&lt;T&gt;() -&gt; Box&lt;T&gt;;\n</code></pre>\n\n<p>it may look similar, but the behavior is much different. Let's take a normal function example</p>\n\n<pre><code>fn do_thing&lt;T&gt;(val: T) { }\n\nfn main() {\n  do_thing(true);\n  do_thing(45 as u32);\n}\n</code></pre>\n\n<p>the compiler performs what is a called <code>monomorphization</code>, which means your code in the compiler becomes essentially</p>\n\n<pre><code>fn do_thing_bool(val: bool) { }\nfn do_thing_num(val: u32) { }\n\nfn main() {\n  do_thing_bool(true);\n  do_thing_num(45 as u32);\n}\n</code></pre>\n\n<p>The key thing to realize is that you are asking it to do the same thing for your trait. The problem is that the compiler can't do it. The example above relies on knowing ahead of time that <code>do_thing</code> is called with a number in one case and a boolean in another, and it can know with 100% certainty that those are the only two ways the function is used.</p>\n\n<p>With your code</p>\n\n<pre><code>trait MyTrait {\n  fn do_thing&lt;T&gt;() -&gt; Box&lt;T&gt;;\n}\n</code></pre>\n\n<p>the compiler does not know what types <code>do_thing</code> will be called with, so it has no way to generate functions you'd need to call. To do that, wherever you convert the struct implementing <code>Collidable</code> into a boxed object it would have to know every possible return type <code>get_ncollide_shape</code> could have, and that is not supported.</p>\n\n<p>Other links for this:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44096235/understanding-traits-and-object-safety\">Understanding Traits and Object Safety</a></li>\n<li><a href=\"https://www.reddit.com/r/rust/comments/3an132/how_to_wrap_a_trait_object_that_has_generic/\" rel=\"nofollow noreferrer\">https://www.reddit.com/r/rust/comments/3an132/how_to_wrap_a_trait_object_that_has_generic/</a></li>\n</ul>\n"}], "owner": {"reputation": 55, "user_id": 6693053, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-z3JBiR4TsCU/AAAAAAAAAAI/AAAAAAAADzo/jrDqmQjDeWM/photo.jpg?sz=128", "display_name": "Timothy Bess", "link": "https://stackoverflow.com/users/6693053/timothy-bess"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 629, "favorite_count": 0, "accepted_answer_id": 46065956, "answer_count": 1, "score": 2, "last_activity_date": 1504681339, "creation_date": 1504657995, "last_edit_date": 1504659050, "question_id": 46065104, "link": "https://stackoverflow.com/questions/46065104/use-trait-as-vec-type", "title": "Use Trait as Vec Type", "body": "<p>I'm new to Rust and have seen some examples of people using Box to allow pushing many types that implement a certain Trait onto a Vec. When using a Trait with Generics, I have run into an issue.</p>\n\n<pre><code>error[E0038]: the trait `collision::collision_detection::Collidable` cannot be made into an object\n  --&gt; src/collision/collision_detection.rs:19:5\n   |\n19 |     collidables: Vec&lt;Box&lt;Collidable&lt;P, M&gt;&gt;&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `collision::collision_detection::Collidable` cannot be made into an object\n   |\n   = note: method `get_ncollide_shape` has generic type parameters\n\nerror: aborting due to previous error\n\nerror: Could not compile `game_proto`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>Here is my code</p>\n\n<pre><code>extern crate ncollide;\nextern crate nalgebra as na;\n\nuse self::ncollide::shape::Shape;\nuse self::ncollide::math::Point;\nuse self::ncollide::math::Isometry;\nuse self::na::Isometry2;\n\npub trait Collidable&lt;P: Point, M&gt; {\n    fn get_ncollide_shape&lt;T: Shape&lt;P, M&gt;&gt;(&amp;self) -&gt; Box&lt;T&gt;;\n    fn get_isometry(&amp;self) -&gt; Isometry2&lt;f64&gt;;\n}\n\npub struct CollisionRegistry&lt;P, M&gt;\nwhere\n    P: Point,\n    M: Isometry&lt;P&gt;,\n{\n    collidables: Vec&lt;Box&lt;Collidable&lt;P, M&gt;&gt;&gt;,\n}\n\nimpl&lt;P: Point, M: Isometry&lt;P&gt;&gt; CollisionRegistry&lt;P, M&gt; {\n    pub fn new() -&gt; Self {\n        let objs: Vec&lt;Box&lt;Collidable&lt;P, M&gt;&gt;&gt; = Vec::new();\n        CollisionRegistry { collidables: objs }\n    }\n\n    pub fn register&lt;D&gt;(&amp;mut self, obj: Box&lt;D&gt;)\n    where\n        D: Collidable&lt;P, M&gt;,\n    {\n        self.collidables.push(obj);\n    }\n}\n</code></pre>\n\n<p>I'm trying to use collidables as a list of heterogenous game objects that will give me ncollide compatible Shapes back to feed into the collision detection engine.</p>\n\n<p>EDIT:\nTo clear up some confusion. I'm not trying to construct and return an instance of a Trait. I'm just trying to create a Vec that will allow any instance of the Collidable trait to be pushed onto it.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 8, "last_activity_date": 1546011313, "last_edit_date": 1546011313, "creation_date": 1504643251, "answer_id": 46062884, "question_id": 46061641, "link": "https://stackoverflow.com/questions/46061641/impl-trait-for-multiple-errors-handling/46062884#46062884", "title": "impl trait for multiple errors handling", "body": "<p>There are two issues here:</p>\n\n<ol>\n<li><p><code>impl Traits</code> are resolved to a concrete type statically, at compile-time. Here you are trying to return two different types which implement <code>Error</code>: <code>std::io::Error</code> and <code>std::num::ParseIntError</code>. Since the <code>impl Trait</code> has to be resolved to only one type during compilation, there is no way this can be done.</p></li>\n<li><p>The <code>?</code> operator calls <code>From::from</code> to convert between error types, which means it is flexible with regard to the target type. Here, the target type is an <code>impl Trait</code>, so the compiler does not have enough information to know which exact type to choose.</p></li>\n</ol>\n\n<p>For these reasons, <code>impl Traits</code> are not really the right tool to use here. You can solve this by one of:</p>\n\n<ul>\n<li>Use <code>Box&lt;dyn Error&gt;</code> as the return type. This implements <code>From&lt;E&gt;</code> for <code>Error</code> types so the conversion will work automatically. But it will require a dynamic allocation.</li>\n<li>Implement a new error type as an enum which can contain any of the error types returned by the function, and implement <code>From&lt;ErrType&gt;</code> for each of those types.</li>\n</ul>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 0, "accepted_answer_id": 46062884, "answer_count": 1, "score": 4, "last_activity_date": 1546011313, "creation_date": 1504637828, "last_edit_date": 1532621609, "question_id": 46061641, "link": "https://stackoverflow.com/questions/46061641/impl-trait-for-multiple-errors-handling", "title": "impl trait for multiple errors handling", "body": "<p>Is it possible to do something like this? If not why?</p>\n\n<pre><code>use std::error::Error;\nuse std::io::{self, Read};\n\nfn main() {\n    if let Err(e) = foo() {\n        println!(\"Error: {}\", e);\n    }\n}\n\nfn foo() -&gt; Result&lt;(), impl Error&gt; {\n    let mut buffer = String::new();\n    io::stdin().read_to_string(&amp;mut buffer)?;\n    let _: i32 = buffer.parse()?;\n    Ok(())\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n  --&gt; src/main.rs:10:24\n   |\n10 | fn foo() -&gt; Result&lt;(), impl Error&gt; {\n   |                        ^^^^^^^^^^ cannot infer type for `_`\n</code></pre>\n"}, {"tags": ["rust", "closures", "traits"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504644052, "post_id": 46061570, "comment_id": 79086824, "body": "You haven&#39;t shown us the type signature for any of the <code>prob_X</code> functions, so there is no way to reproduce your issue or answer this."}, {"owner": {"reputation": 4877, "user_id": 1924257, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/31d8a68147c1d5a6b07b9c0743903ea2?s=128&d=identicon&r=PG", "display_name": "wegry", "link": "https://stackoverflow.com/users/1924257/wegry"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1504682266, "post_id": 46061570, "comment_id": 79098571, "body": "@loganfsmyth prob_1 is u32 -&gt; u32, prob_3 is u64 -&gt; u64. The timer function&#39;s type works for individual calls with each of the various problem call closures, it&#39;s the collection of closures and type checker I seem to be hung up on now."}], "answers": [{"tags": [], "owner": {"reputation": 1109, "user_id": 1772476, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/bc3dd034928abd20bb22de44a4846c93?s=128&d=identicon&r=PG", "display_name": "Timidger", "link": "https://stackoverflow.com/users/1772476/timidger"}, "is_accepted": true, "score": 1, "last_activity_date": 1504650281, "creation_date": 1504650281, "answer_id": 46064148, "question_id": 46061570, "link": "https://stackoverflow.com/questions/46061570/iterating-over-a-vector-of-functions-that-return-objects-sharing-the-same-trait/46064148#46064148", "title": "Iterating over a vector of functions that return objects sharing the same trait", "body": "<p>Well first things first, you're going to get lifetime errors with your current setup, so lets switch to using something other than references to closures that immediately go out of scope...</p>\n\n<pre><code>let problems: Vec&lt;fn() -&gt; T&gt; = vec![\n        || prob_1(1000),\n        || prob_2(4_000_000),\n        || prob_3(600_851_475_143),\n        || prob_4(3),\n        || prob_5(20),\n        || prob_6(100),\n        || prob_7(10_000)\n    ];\n</code></pre>\n\n<p>Now this error is happening because your functions return a concrete type (namely <code>u32</code> or <code>u64</code>). These are not implicitly cast to <code>T</code>, you have to do that manually. I suggest looking up the <code>From</code> trait and implementing that so that you can do the conversion. Otherwise, use concrete types everywhere.</p>\n"}], "owner": {"reputation": 4877, "user_id": 1924257, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/31d8a68147c1d5a6b07b9c0743903ea2?s=128&d=identicon&r=PG", "display_name": "wegry", "link": "https://stackoverflow.com/users/1924257/wegry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "accepted_answer_id": 46064148, "answer_count": 1, "score": 0, "last_activity_date": 1504650281, "creation_date": 1504637537, "question_id": 46061570, "link": "https://stackoverflow.com/questions/46061570/iterating-over-a-vector-of-functions-that-return-objects-sharing-the-same-trait", "title": "Iterating over a vector of functions that return objects sharing the same trait", "body": "<p>Very similarly to <a href=\"https://stackoverflow.com/questions/27312069/iterate-over-vector-of-functions\">Iterate over vector of functions</a>, I'd like to iterate over a vec of functions. The difference being, I'd like to call each function and return a object that has the trait <code>std::fmt::Display</code>.</p>\n\n<pre><code>use std::time::Instant;\nuse std::fmt;\n\nfn timer&lt;T: fmt::Display&gt; (msg: &amp;str, x: &amp;Fn() -&gt; T) -&gt; T {\n    let now = Instant::now();\n    let val = x();\n    println!(\"({}) took {} ms\\n\\tResult: {}\", \n        msg,\n        now.elapsed().subsec_nanos() / 1000,\n        val\n    );\n    val\n}\n\nfn run_all&lt;T: fmt::Display&gt; () {\n    let problems: Vec&lt;&amp;Fn() -&gt; T&gt; = vec![\n        &amp;|| prob_1(1000),\n        &amp;|| prob_2(4_000_000),\n        &amp;|| prob_3(600_851_475_143),\n        &amp;|| prob_4(3),\n        &amp;|| prob_5(20),\n        &amp;|| prob_6(100),\n        &amp;|| prob_7(10_000)\n    ];\n\n    for (i, func) in problems.iter().enumerate() {\n        let problem_num: &amp;str = ((i as u64) + 55).to_string().as_str();\n        timer(i, &amp;func);\n    }\n}\n</code></pre>\n\n<p>One of the seven compiler errors cranked out looks like </p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; euler.rs:17:13\n   |\n17 |         &amp;|| prob_1(1000),\n   |             ^^^^^^^^^^^^ expected type parameter, found u32\n   |\n   = note: expected type `T`\n              found type `u32`\n</code></pre>\n\n<p>Each of these functions returns a <code>u32</code> or <code>u64</code> as of yet (they're Project Euler problems), but I'd like, if possible to have this generalized across all types sharing the trait.</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1504599368, "post_id": 46048995, "comment_id": 79059605, "body": "I cannot see the interest of your function. This method already exists."}], "answers": [{"tags": [], "owner": {"reputation": 838, "user_id": 3613212, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NfaGR.png?s=128&g=1", "display_name": "Gr&#233;gory OBANOS", "link": "https://stackoverflow.com/users/3613212/gr%c3%a9gory-obanos"}, "is_accepted": false, "score": 1, "last_activity_date": 1504599594, "creation_date": 1504599594, "answer_id": 46050169, "question_id": 46048995, "link": "https://stackoverflow.com/questions/46048995/expected-type-parameter-found-a-expected-a/46050169#46050169", "title": "Expected type parameter, found &amp;A expected A", "body": "<p>First of all, there is a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\">map adaptor for iterators</a>.</p>\n\n<p>Your problem here is that mapFn expect a owned value, but iterate over a slice (&amp;[A]) gives you refs.</p>\n\n<p>You can take a Vec as parameter or make fnMap accept &amp;A to solve your problem.</p>\n\n<p>Finally, returning a ref is not what you want here, you can just return the plain Vec.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 3, "last_activity_date": 1504602522, "last_edit_date": 1504602522, "creation_date": 1504601585, "answer_id": 46050828, "question_id": 46048995, "link": "https://stackoverflow.com/questions/46048995/expected-type-parameter-found-a-expected-a/46050828#46050828", "title": "Expected type parameter, found &amp;A expected A", "body": "<p>There are a few issues with your code. Rust's ownership model is tough but fair...</p>\n\n<hr>\n\n<p>The main one (not directly causing your error) is this: </p>\n\n<pre><code>let mut list = vec![]; // allocate in a function\n// [cut] \n&amp;list[..] // return a reference to memory allocated in the function\n          // ... which gets freed at the end of the function\n          // (if this compiled you'd have a dangling reference)\n</code></pre>\n\n<p><strong>Fix</strong> Return the <code>Vec</code> directly </p>\n\n<hr>\n\n<p>Second one (this one directly addresses your error): you're trying to take elements out of a slice (<code>vect</code>), put them into a new vector (<code>list</code>) and return the new vector. A slice like <code>vect</code> does not own its elements, so all it can give you are references, but <code>list</code> is a <code>Vec</code>, so it wants to own its elements.</p>\n\n<p><strong>Fix</strong> In order to have an owned version of the original elements, you have to either:</p>\n\n<ol>\n<li>Have <code>vect</code> contain items that you can <code>Clone</code> (so you can store a copy of them in the new vector). This restricts the genericity of your function (not all types are <code>Clone</code>-able). You can achieve it by adding a <code>A: Clone</code> bound to your function's signature and calling <code>mapFn(v.clone())</code></li>\n<li>Give the function full ownership of the data to begin with, i.e. make the input parameter a <code>vect: Vec&lt;A&gt;</code>. The drawback of this is that when you move the elements from <code>vect</code> to <code>list</code>, <code>vect</code> is no longer usable.</li>\n</ol>\n\n<p><a href=\"https://play.rust-lang.org/?gist=efbe3e0dcc8898f2cb110ee1d7ec2f49&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<hr>\n\n<p>Note that the Rust standard library defines <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\">map on iterators</a>, which is a more flexible approach. It applies the function in place, element by element while iterating the input, so it does not require to own or clone the elements.</p>\n"}], "owner": {"reputation": 13358, "user_id": 3878940, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/v1J2L.jpg?s=128&g=1", "display_name": "Aditya Singh", "link": "https://stackoverflow.com/users/3878940/aditya-singh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1130, "favorite_count": 0, "closed_date": 1504626422, "accepted_answer_id": 46050828, "answer_count": 2, "score": 1, "last_activity_date": 1504626566, "creation_date": 1504595620, "last_edit_date": 1504626393, "question_id": 46048995, "link": "https://stackoverflow.com/questions/46048995/expected-type-parameter-found-a-expected-a", "closed_reason": "Duplicate", "title": "Expected type parameter, found &amp;A expected A", "body": "<p>I have written a function to map over vectors. The method definition expects 3 generic parameters and defines over a input vector and function:</p>\n\n<pre><code>pub fn map&lt;F, A, B&gt;(mapFn: F, vect: &amp;[A]) -&gt; &amp;[B]\nwhere\n    F: Fn(A) -&gt; B,\n{\n    let mut list = vec![];\n\n    for v in vect {\n        let mut value = mapFn(v);\n        list.push(value);\n    }\n\n    &amp;list[..]\n}\n</code></pre>\n\n<p>I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:8:31\n  |\n8 |         let mut value = mapFn(v); // &lt;------ This is where I get the error\n  |                               ^ expected type parameter, found &amp;A\n  |\n  = note: expected type `A`\n             found type `&amp;A`\n</code></pre>\n\n<p>I also checked <a href=\"https://stackoverflow.com/questions/31060851/generics-error-expected-type-parameter-found-struct\">Generics Error: expected type parameter, found struct</a>, but it did not seem to be about the same problem.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1504615857, "post_id": 46045826, "comment_id": 79070307, "body": "It&#39;s also worth mentioning that <code>downcast_ref()</code> <b>can&#39;t</b> be part of the trait: it is generic and generic methods on traits make the trait <i>not object safe</i>. This means that we couldn&#39;t create trait objects of <code>Any</code> if <code>downcast_ref()</code> were part of the trait. And that would pretty much destroy the whole purpose of <code>Any</code> ;-)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 9, "last_activity_date": 1504575065, "creation_date": 1504575065, "answer_id": 46045826, "question_id": 46045298, "link": "https://stackoverflow.com/questions/46045298/why-do-i-have-to-explicitly-cast-to-a-constrained-type/46045826#46045826", "title": "Why do I have to explicitly cast to a constrained type?", "body": "<p>That's because <a href=\"https://doc.rust-lang.org/stable/std/any/trait.Any.html#method.downcast_ref\" rel=\"noreferrer\"><code>downcast_ref</code></a> is not part of the trait itself. If we look at the trait's definition <a href=\"https://doc.rust-lang.org/stable/std/any/trait.Any.html\" rel=\"noreferrer\">in the documentation</a>:</p>\n\n<pre><code>pub trait Any: 'static {\n    fn get_type_id(&amp;self) -&gt; TypeId;\n}\n</code></pre>\n\n<p>we can see that <code>downcast_ref</code> is not there. Only methods defined as members of a trait are made available on types that implements that trait.</p>\n\n<p>Rather, <code>downcast_ref</code> is in an <code>impl Any + 'static</code> block<sup>1</sup>. Since the method takes <code>&amp;self</code>, it means the method is only available on values of type <code>&amp;(Any + 'static)</code> (<code>&amp;Any</code> with no lifetime specified is equivalent to <code>&amp;(Any + 'static)</code>). <code>&amp;Any</code> and <code>&amp;T</code> (where <code>T</code> is a type parameter) are not the same type; <code>&amp;Any</code> is a trait object (which is a fat pointer), while <code>&amp;T</code> is just a normal reference (which is a thin pointer).</p>\n\n<hr>\n\n<p><sup>1</sup> It's also defined in an <code>impl Any + 'static + Send</code> block, so the method is also available on values of type <code>&amp;(Any + 'static + Send)</code>.</p>\n"}], "owner": {"reputation": 384, "user_id": 2223436, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/6a57064dd49b113f94f7325c0be57b27?s=128&d=identicon&r=PG", "display_name": "Josh Burkart", "link": "https://stackoverflow.com/users/2223436/josh-burkart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 259, "favorite_count": 0, "accepted_answer_id": 46045826, "answer_count": 1, "score": 9, "last_activity_date": 1504575065, "creation_date": 1504569884, "last_edit_date": 1504572629, "question_id": 46045298, "link": "https://stackoverflow.com/questions/46045298/why-do-i-have-to-explicitly-cast-to-a-constrained-type", "title": "Why do I have to explicitly cast to a constrained type?", "body": "<p>Why doesn't the commented-out <code>bar</code> code below compile, even though <code>foo</code> and <code>baz</code> do?</p>\n\n<pre><code>use std::any::Any;\nuse std::fmt::Display;\n\n// `value` implements `Clone`, so I can call `.clone()`.\nfn foo&lt;T: Display + Clone&gt;(value: &amp;T) {\n    println!(\"{}\", value.clone());\n}\n\n// `value` implements `Any`, so I should be able to call `.downcast_ref`...\n// But this doesn't compile!\n//\n// fn bar&lt;T: Display + Any&gt;(value: &amp;T) {\n//     println!(\"{}\", value.downcast_ref::&lt;i32&gt;());\n// }\n\n// For some reason I have to do an explicit cast to `&amp;Any`...\nfn baz&lt;T: Display + Any&gt;(value: &amp;T) {\n    let value = value as &amp;Any;\n    println!(\"{}\", value.downcast_ref::&lt;i32&gt;().unwrap());\n}\n\nfn main() {\n    foo(&amp;7);\n    // bar(&amp;8);\n    baz(&amp;9);\n}\n</code></pre>\n\n<p>Trying to compile <code>bar</code> yields the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `downcast_ref` found for type `&amp;T` in the current scope\n  --&gt; src/main.rs:13:30\n   |\n13 |         println!(\"{}\", value.downcast_ref::&lt;i32&gt;());\n   |                              ^^^^^^^^^^^^\n</code></pre>\n\n<p>I already spelled out the constraint that <code>value</code> must implement <code>Any</code> so why do I have to do an explicit cast?</p>\n"}, {"tags": ["rust", "future", "rust-tokio"], "owner": {"reputation": 41, "user_id": 7169705, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/200e1db4c64ff2cd15548a2a84aaf057?s=128&d=identicon&r=PG&f=1", "display_name": "twissel", "link": "https://stackoverflow.com/users/7169705/twissel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 471, "favorite_count": 1, "answer_count": 0, "score": 4, "last_activity_date": 1504569795, "creation_date": 1504542907, "last_edit_date": 1504569795, "question_id": 46041185, "link": "https://stackoverflow.com/questions/46041185/how-do-i-append-futures-to-a-bufferunordered-stream", "title": "How do I append futures to a BufferUnordered stream?", "body": "<p>I'm trying to append futures to the underlying stream of <code>BufferUnordered</code>. At the moment I'm pushing them directly into the underlying stream, the <code>Fuse</code> stream of <code>BufferUnordered</code> is empty, so pushing to it has no effect and the loop below does not receive the 3rd response. Changing the definition of <code>next</code> (1) to <code>stream.buffer_unordered(1)</code> seems to make it work because the underlying stream is not empty/finished.</p>\n\n<pre><code>extern crate url;\nextern crate futures;\nextern crate tokio_core;\nextern crate reqwest;\n\nuse url::Url;\nuse futures::*;\nuse tokio_core::reactor::Core;\nuse reqwest::unstable::async::{Client, Response, Decoder};\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let client = Client::new(&amp;core.handle()).unwrap();\n    let hyper = client.get(\"https://hyper.rs\").unwrap().send();\n    let google = client.get(\"https://google.com\").unwrap().send();\n    let stream = stream::futures_unordered(vec![future::ok(hyper), future::ok(google)]);\n\n    let mut next = stream.buffer_unordered(5).into_future(); // (1)\n    loop {\n        match core.run(next) {\n\n            Ok((None, _something)) =&gt; {\n                println!(\"finished\");\n                break;\n            },\n            Ok((Some(response), mut next_requests)) =&gt; {\n                {\n                    let inner = next_requests.get_mut();\n                    println!(\"{}\", inner.is_empty());\n                    println!(\"{}\", response.status());\n                    let yahoo = client.get(\"https://yahoo.com\").unwrap().send();\n                    inner.push(future::ok(yahoo)); // no effect here\n                }\n                next = next_requests.into_future();\n            }\n            Err((error, next_requests)) =&gt; {\n                next = next_requests.into_future();\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>How do I add more futures to <code>BufferUnordered</code>? Do I actually have to chain it or do something along these lines?</p>\n"}, {"tags": ["rust", "gtk", "gtk-rs"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1504537020, "post_id": 46039441, "comment_id": 79039632, "body": "<a href=\"https://docs.rs/gtk/0.2.0/gtk/trait.ButtonExt.html#tymethod.connect_clicked\" rel=\"nofollow noreferrer\"><code>ButtonExt::connect_clicked</code></a> does require a function with the <code>&#39;static</code> lifetime. Related (around threads, but the error is the same): <a href=\"https://stackoverflow.com/a/28661524/1233251\">stackoverflow.com/a/28661524/1233251</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1462, "user_id": 1322168, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Nizxt.jpg?s=128&g=1", "display_name": "skhalymon", "link": "https://stackoverflow.com/users/1322168/skhalymon"}, "edited": false, "score": 1, "creation_date": 1504539006, "post_id": 46039641, "comment_id": 79040766, "body": "An example of implementation <a href=\"https://github.com/hfiguiere/gpsami/blob/f4e612dcaa35648d033846027e74903cdf62b7a4/src/mgapplication.rs#L96\" rel=\"nofollow noreferrer\">github.com/hfiguiere/gpsami/blob/&hellip;</a>"}], "tags": [], "owner": {"reputation": 1771, "user_id": 3040948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e165e48a46079440f8ae438b0a3ed88?s=128&d=identicon&r=PG", "display_name": "Sebastian Dr&#246;ge", "link": "https://stackoverflow.com/users/3040948/sebastian-dr%c3%b6ge"}, "is_accepted": true, "score": 7, "last_activity_date": 1504570022, "last_edit_date": 1504570022, "creation_date": 1504536891, "answer_id": 46039641, "question_id": 46039441, "link": "https://stackoverflow.com/questions/46039441/type-must-satisfy-the-static-lifetime/46039641#46039641", "title": "Type must satisfy the static lifetime", "body": "<p>You can't move non-static references into GTK callbacks. You need something static or something heap allocated (e.g. in a <code>Box</code>/<code>RefCell</code>/<code>Rc</code>/etc.).</p>\n\n<p>Callbacks are not called from the scope where you connect to the signal, but at some later point from the main loop. It is required that whatever you pass into the closure is still alive then, which would be anything <code>'static</code>, heap-allocated or allocated on the stack between main and where the main loop runs. The last part can't currently be nicely expressed with Rust/GTK-rs.</p>\n\n<p>See <a href=\"http://gtk-rs.org/tuto/closures\" rel=\"nofollow noreferrer\">the example at the bottom in the gtk-rs docs for an example</a>. It uses an <code>Rc&lt;RefCell&lt;_&gt;&gt;</code>.</p>\n"}], "owner": {"reputation": 1462, "user_id": 1322168, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Nizxt.jpg?s=128&g=1", "display_name": "skhalymon", "link": "https://stackoverflow.com/users/1322168/skhalymon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1884, "favorite_count": 0, "accepted_answer_id": 46039641, "answer_count": 1, "score": 5, "last_activity_date": 1504570022, "creation_date": 1504536177, "last_edit_date": 1504569944, "question_id": 46039441, "link": "https://stackoverflow.com/questions/46039441/type-must-satisfy-the-static-lifetime", "title": "Type must satisfy the static lifetime", "body": "<p>I'm trying to increase the structure of a Rust and GTK-RS application, but I cannot figure out how to deal with event connections. I see that the problem is in wrong lifetime, but I do not really understand how it could be fixed.</p>\n\n<pre><code>#[derive(Debug)]\nstruct CreatingProfileUI {\n    window: gtk::MessageDialog,\n    profile_name_entry: gtk::Entry,\n    add_btn: gtk::Button,\n    cancel_btn: gtk::Button,\n}\n\n#[derive(Debug)]\nstruct UI {\n    window: gtk::Window,\n\n    // Header\n    url_entry: gtk::Entry,\n    open_btn: gtk::Button,\n\n    // Body\n    add_profile_btn: gtk::Button,\n    remove_profile_btn: gtk::Button,\n    profiles_textview: gtk::TextView,\n\n    // Creating profile\n    creating_profile: CreatingProfileUI,\n\n    // Statusbar\n    statusbar: gtk::Statusbar,\n}\n\nimpl UI {\n    fn init(&amp;self) {\n        self.add_profile_btn\n            .connect_clicked(move |_| { &amp;self.creating_profile.window.run(); });\n    }\n}\n</code></pre>\n\n<p>And I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0477]: the type `[closure@src/main.rs:109:46: 111:6 self:&amp;UI]` does not fulfill the required lifetime\n   --&gt; src/main.rs:109:30\n    |\n109 |         self.add_profile_btn.connect_clicked(move |_| {\n    |                              ^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1504527705, "post_id": 46036703, "comment_id": 79034017, "body": "The error message is very clear."}, {"owner": {"reputation": 91, "user_id": 869927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CLYPD.jpg?s=128&g=1", "display_name": "smolkaj", "link": "https://stackoverflow.com/users/869927/smolkaj"}, "edited": false, "score": 0, "creation_date": 1504528544, "post_id": 46036703, "comment_id": 79034479, "body": "But <code>bind</code> <i>does</i> return <code>Result</code>, see <a href=\"https://doc.rust-lang.org/std/net/struct.TcpListener.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/net/struct.TcpListener.html</a>"}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1504529066, "post_id": 46036703, "comment_id": 79034819, "body": "Yes, but <i><code>main</code> itself</i> doesn&#39;t. Using <code>?</code> is functionally equivalent to adding a match statement that, in the <code>Err</code> case, makes the enclosing function return the error - therefore, using it inside a function that isn&#39;t marked as returning <code>Result</code> is a type error."}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1504529244, "post_id": 46036703, "comment_id": 79034941, "body": "Until the relevant RFC gets implemented, the solution I&#39;ve tended to use is the one displayed in <a href=\"https://stackoverflow.com/a/30556164/5436257\">this answer</a> - all <code>main</code> does is handle the printing of the successful result/error, delegating to another function that returns <code>Result</code> for the actual logic."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1504530621, "post_id": 46036703, "comment_id": 79035790, "body": "@smolkaj <i>in</i> =/= <i>on</i>; but maybe they should have written: <code>the `?` operator can only be used inside a function that returns `Result` </code>"}], "owner": {"reputation": 91, "user_id": 869927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CLYPD.jpg?s=128&g=1", "display_name": "smolkaj", "link": "https://stackoverflow.com/users/869927/smolkaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 52, "favorite_count": 0, "closed_date": 1504535207, "answer_count": 0, "score": 0, "last_activity_date": 1504529248, "creation_date": 1504526771, "last_edit_date": 1504529248, "question_id": 46036703, "link": "https://stackoverflow.com/questions/46036703/rust-how-to-best-chain-methods-returning-optionals-results", "closed_reason": "Duplicate", "title": "Rust: how to best chain methods returning optionals/results?", "body": "<p>Consider the following code that uses <code>and_then</code> to chain together two methods returning outputs wrapped up as <code>Result</code>s:</p>\n\n<pre><code>use std::net::TcpListener;\n\nfn main() {\n    match TcpListener::bind(\"127.0.0.1:2000\").and_then(|s| s.accept()) {\n        Ok((stream, addr)) =&gt; ...,\n        Err(e) =&gt; ...,\n    }\n}\n</code></pre>\n\n<p>Is there a more elegant way to chain together <code>bind</code> and <code>accept</code>? This seems like a common pattern. <del>I was hoping that maybe <code>?</code> could help:</del></p>\n\n<pre><code>match TcpListener::bind(\"127.0.0.1:2000\")?.accept()\n</code></pre>\n\n<p>But this won't compile:</p>\n\n<pre><code>error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n  --&gt; src/main.rs:21:11\n   |\n21 |     match TcpListener::bind(socket)?.accept() {\n   |           --------------------------\n   |           |\n   |           the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n   |           in this macro invocation\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n</code></pre>\n\n<p>(I'm running <code>rustc 1.20.0 (f3d6973f4 2017-08-27)</code>.)</p>\n\n<p>EDIT: <code>?</code> does not seem to have the semantics I have in mind, which also explains the error, see <a href=\"https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-main%20%22%22\">1</a> (thanks, @Joe Clay). I am looking for the same behavior I get with <code>and_then</code>, but with a more elegant syntax.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1504527208, "post_id": 46036038, "comment_id": 79033701, "body": "The problem is that the macro accepts one or more expressions, but it only uses <i>one</i>.  What is it supposed to do?  Should the block expand once for each input expression and return only the last?  Or should it return all of them?  Timed together or independently?  And just to add: you <i>can</i> do this easily with a regular function; is there some reason you aren&#39;t?"}, {"owner": {"reputation": 4877, "user_id": 1924257, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/31d8a68147c1d5a6b07b9c0743903ea2?s=128&d=identicon&r=PG", "display_name": "wegry", "link": "https://stackoverflow.com/users/1924257/wegry"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1504533963, "post_id": 46036038, "comment_id": 79037833, "body": "@DK. My understanding of the macro syntax is that it must be zero or one to many repetitions (I&#39;d prefer to just match and evaluate one expression though). As far as why I&#39;m not using a regualar function for timing, I was just trying to get a feel for macros in the language. It&#39;s potentially(?) a bad fit."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1504534423, "creation_date": 1504534423, "answer_id": 46038933, "question_id": 46036038, "link": "https://stackoverflow.com/questions/46036038/error-variable-x-is-still-repeating-at-this-depth/46038933#46038933", "title": "error: variable &#39;x&#39; is still repeating at this depth", "body": "<p>The most immediate problem is that you're asking the macro to parse a sequence of one or more expressions, when the expansion is only capable of dealing with one.  So just <em>ask</em> for one.</p>\n\n<p>Secondly, you want the expansion to result in an expression, but you've written it to expand to several statements.  To fix that, expand to a block.</p>\n\n<p>Fixing those gives:</p>\n\n<pre><code>macro_rules! timer {\n    ($x: expr) =&gt; {\n        {\n            let now = SystemTime::now();\n            let val = $x;\n\n            match now.elapsed() {\n                Ok(elapsed) =&gt; {\n                    // This should include a message at some point alongside the timing\n                    println!(\"{}\", elapsed.as_secs());\n                }\n                Err(e) =&gt; {\n                    println!(\"{:?}\", e);\n                }\n            }\n            val\n        }\n    } \n}\n</code></pre>\n"}], "owner": {"reputation": 4877, "user_id": 1924257, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/31d8a68147c1d5a6b07b9c0743903ea2?s=128&d=identicon&r=PG", "display_name": "wegry", "link": "https://stackoverflow.com/users/1924257/wegry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2209, "favorite_count": 3, "accepted_answer_id": 46038933, "answer_count": 1, "score": 9, "last_activity_date": 1504534423, "creation_date": 1504524450, "question_id": 46036038, "link": "https://stackoverflow.com/questions/46036038/error-variable-x-is-still-repeating-at-this-depth", "title": "error: variable &#39;x&#39; is still repeating at this depth", "body": "<p>I'm trying to write a macro to time how long various functions are executing.</p>\n\n<pre><code>macro_rules! timer {\n    ($( $x: expr ),+ ) =&gt; {\n        let now = SystemTime::now();\n        let val = $x;\n\n        match now.elapsed() {\n            Ok(elapsed) =&gt; {\n                // This should include a message at some point alongside the timing\n                println!(\"{}\", elapsed.as_secs());\n            }\n            Err(e) =&gt; {\n                println!(\"{:?}\", e);\n            }\n        }\n        val\n    } \n}\n</code></pre>\n\n<p>but the compiler throws out a <code>error: variable 'x' is still repeating at this depth</code>.</p>\n\n<p>In another statically typed language I've tried this in (F#), using closures was the approach that was the simplest. Is it not possible to have a generic macro like this in Rust?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "edited": false, "score": 1, "creation_date": 1565186862, "post_id": 46033739, "comment_id": 101274358, "body": "This olny works if the items from the vector don&#39;t need to be mutated. If mutation is required, then one can use the (currently unstable) Vec::drain_filter method."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 15, "last_activity_date": 1504515957, "creation_date": 1504515957, "answer_id": 46033739, "question_id": 46033562, "link": "https://stackoverflow.com/questions/46033562/remove-an-element-while-iterationg-over-it/46033739#46033739", "title": "Remove an element while iterationg over it", "body": "<p>You probably want to use <a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.retain\" rel=\"noreferrer\"><code>Vec::retain()</code></a>. It allows you to decide for each element whether or not to keep it. So in your case that would look like this:</p>\n\n<pre><code>particles.retain(|particle| {\n    let delete = {\n        // Do stuff ...\n    };\n    !delete\n})\n</code></pre>\n\n<p>You have to return a <code>bool</code> from the closure. If you return <code>true</code>, the element is not removed; if you return <code>false</code>, it is removed.</p>\n\n<p>If you need to somehow compare one element to all other elements in the vector, then <code>retain()</code> is not sufficient anymore. For this case, you can find an awesome answer <a href=\"https://stackoverflow.com/questions/37906012/best-way-to-remove-elements-of-vec-depending-on-other-elements-of-the-same-vec\">here</a>.</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6869, "favorite_count": 1, "closed_date": 1504516039, "accepted_answer_id": 46033739, "answer_count": 1, "score": 6, "last_activity_date": 1504515957, "creation_date": 1504515360, "question_id": 46033562, "link": "https://stackoverflow.com/questions/46033562/remove-an-element-while-iterationg-over-it", "closed_reason": "Duplicate", "title": "Remove an element while iterationg over it", "body": "<p>Is there a way to remove an element while iterationg over it? Here is a code example:</p>\n\n<pre><code>for particle in &amp;mut particles {\n\n    let mut delete = false;\n    // Do stuff...\n\n    if delete {\n        // Remove element from particles vector &lt;-- THIS\n    }\n\n}\n</code></pre>\n\n<p>I think it's not possible with this <em>(dirty)</em> design. What's the common (elegant?) pattern to remove some elements in a vector assuming I need to iterate in order to know what element I need to remove? Feel free to close if duplicate.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504514708, "post_id": 46032713, "comment_id": 79026512, "body": "You can use <a href=\"https://doc.rust-lang.org/std/macro.include_bytes.html\" rel=\"nofollow noreferrer\"><code>include_bytes!</code></a> macro, then create dll file from the data. Duplicate of <a href=\"https://stackoverflow.com/q/27140634/2731452\">this question</a>"}, {"owner": {"reputation": 89, "user_id": 4557927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lvdt2.jpg?s=128&g=1", "display_name": "solideo", "link": "https://stackoverflow.com/users/4557927/solideo"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504581335, "post_id": 46032713, "comment_id": 79052614, "body": "@red75prime Thanks, I search much demo, They use <code>include_bytes!</code> load such <code>hosts</code> file, convert <code>&amp;static [u8]</code> data to <code>&amp;static str</code> and output text, I notice that <code>Library::new()</code> need <code>AsRef&lt;OsStr&gt;</code> parameter, but I don&#39;t how to convert <code>&amp;static [u8]</code> to <code>AsRef&lt;OsStr&gt;</code>.  I try to use <code>str::from_utf8</code> to convert <code>&amp;static [u8]</code> to <code>&amp;static str</code>, and <code>&amp;static str</code> to <code>OsStr</code>, but there is something wrong when <code>&amp;[u8]</code> to <code>&amp;str</code> (thread &#39;main&#39; panicked at &#39;Invalid UTF-8 sequence: invalid utf-8 sequence of 1 bytes from index 2&#39;)"}, {"owner": {"reputation": 89, "user_id": 4557927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lvdt2.jpg?s=128&g=1", "display_name": "solideo", "link": "https://stackoverflow.com/users/4557927/solideo"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504581635, "post_id": 46032713, "comment_id": 79052670, "body": "I thought maybe DLL file can&#39;t convert to utf-8, then how should I do to use the dll when load with <code>include_bytes!</code>"}], "owner": {"reputation": 89, "user_id": 4557927, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lvdt2.jpg?s=128&g=1", "display_name": "solideo", "link": "https://stackoverflow.com/users/4557927/solideo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 594, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1504553627, "creation_date": 1504512210, "last_edit_date": 1504553627, "question_id": 46032713, "link": "https://stackoverflow.com/questions/46032713/is-there-some-way-that-rust-cargo-put-dll-file-into-exe-program", "title": "Is there some way that rust-cargo put DLL file into exe program?", "body": "<p>I write a tool, It can get device id through the dll, and copy the id to clipboard.</p>\n\n<pre><code>extern crate clipboard;\nuse clipboard::ClipboardProvider;\nuse clipboard::ClipboardContext;\n\nextern crate libloading;\nuse libloading::{Library, Symbol};\n\nuse std::ffi::CStr;\nuse std::str;\n\ntype GetHylinkDeviceId = unsafe fn() -&gt; *const i8;\n\nfn copy_to_clipboard(x3id: String) {\n    let mut ctx: ClipboardContext = ClipboardProvider::new().unwrap();\n    println!(\"{:?}\", ctx.get_contents());\n    ctx.set_contents(x3id);\n}\n\nfn get_x3id() -&gt; String {\n\n    let library_path = \"PcInfo.dll\";\n    println!(\"Loading add() from {:?}\", library_path);\n\n    let lib = Library::new(library_path).unwrap();\n\n    let x3id = unsafe {\n\n        let func: Symbol&lt;GetHylinkDeviceId&gt; = lib.get(b\"GetHylinkDeviceId\").unwrap();\n\n        let c_buf: *const i8 = func();\n        let c_str: &amp;CStr = unsafe { CStr::from_ptr(c_buf) };\n        let str_slice: &amp;str = c_str.to_str().unwrap();\n        let str_buf: String = str_slice.to_owned();\n        str_buf\n\n    };\n    x3id\n}\n\nfn main() {\n\n    let x3id: String = get_x3id();\n    println!(\"{:?}\", x3id);\n\n    copy_to_clipboard(x3id)\n\n}\n</code></pre>\n\n<p>It works well, I use cargo build it, auto generate an executable. I need to put dll file and exe in the same dir when run it.  </p>\n\n<p>I want to know if there is anyway to pack dll file into the exe by cargo?</p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 524, "user_id": 1837031, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/342ab25f1c934b457446e658134d93eb?s=128&d=identicon&r=PG", "display_name": "chrxr", "link": "https://stackoverflow.com/users/1837031/chrxr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504529371, "post_id": 46029822, "comment_id": 79035008, "body": "Thanks @Shepmaster. I have updated with as minimal a version of the whole script as possible. I have also included the whole error message block. My understanding of the error is limited, so I&#39;m not sure how best to create a more minimal representation."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504536178, "post_id": 46029822, "comment_id": 79039139, "body": "You&#39;ve said that your error type is one type (<code>type Error = hyper::Error</code>) but then tried to return a different error type (<code>std::string::FromUtf8Error</code>). Unify them."}, {"owner": {"reputation": 524, "user_id": 1837031, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/342ab25f1c934b457446e658134d93eb?s=128&d=identicon&r=PG", "display_name": "chrxr", "link": "https://stackoverflow.com/users/1837031/chrxr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504541112, "post_id": 46029822, "comment_id": 79041849, "body": "Thanks @Shepmaster I&#39;ve got around the error, returning <code>Ok::&lt;_, Self::Error&gt;(stringify)</code> from the <code>and_then</code> connector. However, I&#39;m now just returning an empty string. I&#39;ve added a couple of print statements in to see if anything is there. But the print statement in the <code>.fold</code> method doesn&#39;t seem to trigger. Here&#39;s the current script <a href=\"https://gist.github.com/chrxr/045e54d5135ea9b427912ea4783b291b\" rel=\"nofollow noreferrer\">gist.github.com/chrxr/045e54d5135ea9b427912ea4783b291b</a>. Do you think this warrants a new, separate question?"}, {"owner": {"reputation": 524, "user_id": 1837031, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/342ab25f1c934b457446e658134d93eb?s=128&d=identicon&r=PG", "display_name": "chrxr", "link": "https://stackoverflow.com/users/1837031/chrxr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504541204, "post_id": 46029822, "comment_id": 79041892, "body": "FYI I know the <code>request.Body()</code> has contents. I&#39;m sending a string from an HTML form, and I have managed to return that string to the client using the basic Hyper Echo server tutorial."}], "owner": {"reputation": 524, "user_id": 1837031, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/342ab25f1c934b457446e658134d93eb?s=128&d=identicon&r=PG", "display_name": "chrxr", "link": "https://stackoverflow.com/users/1837031/chrxr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 700, "favorite_count": 0, "closed_date": 1546917902, "answer_count": 0, "score": 3, "last_activity_date": 1504535317, "creation_date": 1504494752, "last_edit_date": 1504535317, "question_id": 46029822, "link": "https://stackoverflow.com/questions/46029822/extracting-body-from-hyper-request-as-a-string", "closed_reason": "Duplicate", "title": "Extracting body from Hyper request as a string", "body": "<p>I'm trying to create a simple web server in Rust using Hyper, and I'm getting stuck trying to convert the <code>request.body()</code> <code>Stream</code> to a <code>String</code>.</p>\n\n<p>I'm running rustc 1.21.0-nightly</p>\n\n<p>So far I have this:</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\nextern crate unicase;\n\nuse hyper::server::{Http, Request, Response, Service};\nuse hyper::Body;\nuse hyper::Chunk;\nuse futures::Stream;\nuse futures::future::*;\nuse futures::stream::Map;\nuse std::ascii::AsciiExt;\nuse unicase::Ascii;\n\nstruct WebService;\n\nimpl Service for WebService {\n    type Request = Request;\n    type Response = Response;\n    type Error = hyper::Error;\n    type Future = Box&lt;futures::Future&lt;Item = Self::Response, Error = Self::Error&gt;&gt;;\n\n    fn call(&amp;self, req: Request) -&gt; Self::Future {\n        let mut response = Response::new();\n\n        let body = req.body()\n            .fold(Vec::new(), |mut acc, chunk| {\n                acc.extend_from_slice(&amp;*chunk);\n                futures::future::ok::&lt;_, Self::Error&gt;(acc)\n            })\n            .and_then(|v| String::from_utf8(v));\n        println!(\"Body: \\n{}\", body.wait().unwrap());\n\n        let future = futures::future::ok(response);\n        Box::new(future)\n    }\n}\n\nfn main() {\n    let addr = \"0.0.0.0:3000\".parse().unwrap();\n    let server = Http::new().bind(&amp;addr, || Ok(WebService)).unwrap();\n    server.run().unwrap();\n}\n</code></pre>\n\n<p>This results in the following error messages:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::result::Result&lt;std::string::String, std::string::FromUtf8Error&gt; as futures::IntoFuture&gt;::Error == hyper::Error`\n  --&gt; src/main.rs:30:14\n   |\n30 |             .and_then(|v| String::from_utf8(v));\n   |              ^^^^^^^^ expected struct `std::string::FromUtf8Error`, found enum `hyper::Error`\n   |\n   = note: expected type `std::string::FromUtf8Error`\n              found type `hyper::Error`\n\nerror[E0599]: no method named `wait` found for type `futures::AndThen&lt;futures::stream::Fold&lt;hyper::Body, [closure@src/main.rs:26:31: 29:14], futures::FutureResult&lt;std::vec::Vec&lt;u8&gt;, hyper::Error&gt;, std::vec::Vec&lt;u8&gt;&gt;, std::result::Result&lt;std::string::String, std::string::FromUtf8Error&gt;, [closure@src/main.rs:30:23: 30:47]&gt;` in the current scope\n  --&gt; src/main.rs:31:37\n   |\n31 |         println!(\"Body: \\n{}\", body.wait().unwrap());\n   |                                     ^^^^\n   |\n   = note: the method `wait` exists but the following trait bounds were not satisfied:\n           `futures::AndThen&lt;futures::stream::Fold&lt;hyper::Body, [closure@src/main.rs:26:31: 29:14], futures::FutureResult&lt;std::vec::Vec&lt;u8&gt;, hyper::Error&gt;, std::vec::Vec&lt;u8&gt;&gt;, std::result::Result&lt;std::string::String, std::string::FromUtf8Error&gt;, [closure@src/main.rs:30:23: 30:47]&gt; : futures::Stream`\n           `futures::AndThen&lt;futures::stream::Fold&lt;hyper::Body, [closure@src/main.rs:26:31: 29:14], futures::FutureResult&lt;std::vec::Vec&lt;u8&gt;, hyper::Error&gt;, std::vec::Vec&lt;u8&gt;&gt;, std::result::Result&lt;std::string::String, std::string::FromUtf8Error&gt;, [closure@src/main.rs:30:23: 30:47]&gt; : futures::Future`\n</code></pre>\n\n<p>I think that I'm returning a future from the the <code>fold</code> method, the result of which is being piped into the <code>and_then</code> method, which I'm hoping will assign a <code>String</code> version of the <code>request.body</code> to the <code>body</code> variable.</p>\n\n<p>I'm pretty new to Rust, but to me the error seems to suggest that the <code>and_then</code> connector is only receiving the <code>Error</code> value of the future, and not the <code>Ok</code> value...</p>\n\n<p>Is this a correct interpretation? How would I resolve this error?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504488515, "post_id": 46028917, "comment_id": 79018447, "body": "It is <b>highly suggested</b> that you read the <b>excellent</b> <a href=\"https://doc.rust-lang.org/stable/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> which covers a lot of these introductory questions. This is covered in the <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-02-traits.html\" rel=\"nofollow noreferrer\">traits chapter</a>."}, {"owner": {"reputation": 100, "user_id": 1725472, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94d7af433c2fde5d985d9a53c88ca940?s=128&d=identicon&r=PG", "display_name": "Matt Bettcher", "link": "https://stackoverflow.com/users/1725472/matt-bettcher"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504528896, "post_id": 46028917, "comment_id": 79034707, "body": "I have read the first edition of the book, didn&#39;t realize there was a 2nd edition, I&#39;ll have to read it as Rust has changed a bit since I last used it. I guess my main issue is with switching from inheritance based languages to Rust&#39;s composition based design."}], "answers": [{"comments": [{"owner": {"reputation": 100, "user_id": 1725472, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94d7af433c2fde5d985d9a53c88ca940?s=128&d=identicon&r=PG", "display_name": "Matt Bettcher", "link": "https://stackoverflow.com/users/1725472/matt-bettcher"}, "edited": false, "score": 0, "creation_date": 1504486040, "post_id": 46028985, "comment_id": 79018094, "body": "Thanks! I took a break from Rust and was having trouble with this. This works perfectly."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1504485431, "creation_date": 1504485431, "answer_id": 46028985, "question_id": 46028917, "link": "https://stackoverflow.com/questions/46028917/using-trait-methods-from-a-structure-implementation/46028985#46028985", "title": "Using trait methods from a structure implementation", "body": "<p>Trait implementations are always in their own <code>impl</code> block.</p>\n\n<pre><code>impl Bus for CPU {\n    fn read(&amp;self, address: u32) -&gt; u32 { unimplemented!() }\n    fn write(&amp;self, address: u32, data: u32) -&gt; u32 { unimplemented!() }\n}\n</code></pre>\n\n<p>A little known trick is that <code>impl</code> blocks can be written in any module in your crate, so long as both the trait and the type are visible to that module (the module that contains the <code>impl</code> doesn't have to be public). If the implementation is going in a submodule under the module that defines <code>Bus</code> and <code>CPU</code>, then the submodule will automatically have access to both types. Otherwise, you'll need to add <code>pub(crate)</code> (or some other form of <code>pub</code> that works for you) on either or both declarations. Naturally, you may need to <code>use</code> the trait and the type to bring them in the scope of the module that contains the <code>impl</code>, or use qualified paths.</p>\n\n<p>For example, if you want to put the <code>impl</code> in a submodule, you could write either:</p>\n\n<pre><code>use super::Bus;\nuse super::CPU;    \n\nimpl Bus for CPU {\n    fn read(&amp;self, address: u32) -&gt; u32 { unimplemented!() }\n    fn write(&amp;self, address: u32, data: u32) -&gt; u32 { unimplemented!() }\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>impl super::Bus for super::CPU {\n    fn read(&amp;self, address: u32) -&gt; u32 { unimplemented!() }\n    fn write(&amp;self, address: u32, data: u32) -&gt; u32 { unimplemented!() }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 100, "user_id": 1725472, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94d7af433c2fde5d985d9a53c88ca940?s=128&d=identicon&r=PG", "display_name": "Matt Bettcher", "link": "https://stackoverflow.com/users/1725472/matt-bettcher"}, "is_accepted": false, "score": 0, "last_activity_date": 1504573965, "creation_date": 1504573965, "answer_id": 46045701, "question_id": 46028917, "link": "https://stackoverflow.com/questions/46028917/using-trait-methods-from-a-structure-implementation/46045701#46045701", "title": "Using trait methods from a structure implementation", "body": "<p>Ok so here is what I was trying to do.</p>\n\n<pre><code>// bus controls reads and writes to/from emulated cpu\n// a trait allows me to define the interface the cpu expects\npub trait Bus {   \n  fn read(&amp;self, size: Size, address: u32) -&gt; u32;\n  fn write(&amp;self, size: Size, address: u32, data: u32);\n}\n\n// must have an object to implement the bus on\npub struct Mem {}  // this can be filled out later\n\n// implement Bus trait for our Mem\nimpl Bus for Mem {\n  fn read(&amp;self, size: Size, address: u32) -&gt; u32 { unimplemented!() }\n  fn write(&amp;self, size: Size, address: u32, data: u32) { unimplemented!() }\n}\n\n// here is our cpu struct with a generic Bus trait object in it\npub struct M68K&lt;A: Bus&gt; {\n  pub d: [u32; 8],\n  pub a: [u32; 8],\n\n  pub x: bool,  // extend\n  pub n: bool,  // negative\n  pub z: bool,  // zero\n  pub v: bool,  // overflow\n  pub c: bool,  // carry\n\n  pub bus: A    // here is the Bus trait object\n}\n\n// when we implement our cpu we can use the Bus trait methods, this allows\n// multiple cpu's to be created with the same or different Bus objects. \n// possibly connect 2 cpu's to the same Bus object?\nimpl M68K&lt;Mem&gt; {\n   pub fn step(&amp;self, cycles: u32) {\n     let x = self.bus.read(Size::Byte, 0xffff);\n  }\n}\n</code></pre>\n\n<p>This code is not finished. My main goal is to create an easy to use 68k cpu emulator for my own projects. Here I show everything in one file, but in reality the entire cpu emulator can now be written without any knowledge of our the Bus is implemented. I hope this makes sense, it does to me and I'm enjoying Rust again!</p>\n"}], "owner": {"reputation": 100, "user_id": 1725472, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/94d7af433c2fde5d985d9a53c88ca940?s=128&d=identicon&r=PG", "display_name": "Matt Bettcher", "link": "https://stackoverflow.com/users/1725472/matt-bettcher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 397, "favorite_count": 0, "accepted_answer_id": 46028985, "answer_count": 2, "score": 1, "last_activity_date": 1504573965, "creation_date": 1504484358, "last_edit_date": 1504488430, "question_id": 46028917, "link": "https://stackoverflow.com/questions/46028917/using-trait-methods-from-a-structure-implementation", "title": "Using trait methods from a structure implementation", "body": "<p>I want to use a trait in Rust like an interface. </p>\n\n<pre><code>struct CPU {\n    r: u32,\n    pc: u32\n}\n\ntrait Bus {\n    fn read(&amp;self, address: u32) -&gt; u32;\n    fn write(&amp;self, address: u32, data: u32) -&gt; u32;\n}\n\nimpl CPU {\n    fn step() {\n        let opcode = self.read(0xffff);   // use Bus trait method here\n    }\n}\n</code></pre>\n\n<p>I need to know how to use the trait methods within my implementation of CPU without implementing read or write inside my CPU implementation. I'd like to have those in another file as they will define the memory map. I feel like this is a simple problem, I just can't find the answer that works for me.</p>\n"}, {"tags": ["rust", "embedded", "memory-address"], "answers": [{"comments": [{"owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "edited": false, "score": 0, "creation_date": 1504506302, "post_id": 46028161, "comment_id": 79022456, "body": "thanks thats totaly right, but I&#39;m wondering where you found ` each character is 16-bits (2 bytes)` ?"}, {"owner": {"reputation": 416, "user_id": 1082652, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=128&d=identicon&r=PG", "display_name": "marcianx", "link": "https://stackoverflow.com/users/1082652/marcianx"}, "reply_to_user": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "edited": false, "score": 0, "creation_date": 1504507267, "post_id": 46028161, "comment_id": 79022864, "body": "In the tutorial I linked, see &quot;The VGA Text Buffer&quot; section for what bits 0-15 stand for."}], "tags": [], "owner": {"reputation": 416, "user_id": 1082652, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=128&d=identicon&r=PG", "display_name": "marcianx", "link": "https://stackoverflow.com/users/1082652/marcianx"}, "is_accepted": true, "score": 1, "last_activity_date": 1504507894, "last_edit_date": 1504507894, "creation_date": 1504475790, "answer_id": 46028161, "question_id": 46027903, "link": "https://stackoverflow.com/questions/46027903/position-char-at-a-specific-memory-address/46028161#46028161", "title": "Position char at a specific memory address", "body": "<p>As explained in <a href=\"https://os.phil-opp.com/printing-to-screen/\" rel=\"nofollow noreferrer\">Phil Opp's tutorial</a>, each character is 16-bits (2 bytes), which includes both the character and the color code.</p>\n\n<p>Offset the buffer pointer by 2 bytes for each additional character you wish to output.</p>\n\n<pre><code>let buff: *mut u8 = (0xb8000 + 1988) as *mut _;\n\nunsafe {\n    ptr::write(buff, (b'f'));\n    ptr::write(buff.offset(2), (b'o'));\n    ptr::write(buff.offset(4), (b'o'));\n}\n</code></pre>\n\n<p>I haven't tested out this myself.</p>\n"}], "owner": {"reputation": 329, "user_id": 6557347, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/bf5777750fd1ea3661085e7764c9d582?s=128&d=identicon&r=PG&f=1", "display_name": "abdoe", "link": "https://stackoverflow.com/users/6557347/abdoe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 184, "favorite_count": 0, "accepted_answer_id": 46028161, "answer_count": 1, "score": 0, "last_activity_date": 1504507894, "creation_date": 1504473402, "last_edit_date": 1504488299, "question_id": 46027903, "link": "https://stackoverflow.com/questions/46027903/position-char-at-a-specific-memory-address", "title": "Position char at a specific memory address", "body": "<p>I'm using Rust to write to VGA output. I'm absolutely new to this embedded field and I guess this is not only a Rust but also a general question.</p>\n\n<p>I want to write different chars to the output screen:</p>\n\n<pre><code>let buff: *mut u8 = (0xb8000 + 1988) as *mut _;\n\nunsafe {\n    ptr::write(buff, (b'f'));\n    ptr::write(buff, (b'o'));\n    ptr::write(buff, (b'o'));\n}\n</code></pre>\n\n<p>Doing this, I'm just seeing the last character (<code>o</code>) on the screen, since they are not written to another position.</p>\n\n<p>How can I determine the position of the character when writing directly to a memory address?</p>\n\n<p>I know of <a href=\"https://os.phil-opp.com/printing-to-screen/\" rel=\"nofollow noreferrer\">Phil Opp's tutorial</a> but I want to go on with my own solution, since it is a learning project.</p>\n"}, {"tags": ["methods", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1504490565, "post_id": 46028612, "comment_id": 79018802, "body": "Completing the thought, the compiler cannot guarantee that <code>func</code> won&#39;t <i>change</i> <code>self</code> such that it becomes invalidated, such as by clearing the hash map."}], "tags": [], "owner": {"reputation": 46, "user_id": 8556227, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fc9f663401ac79cfe7e2cf450527e33?s=128&d=identicon&r=PG&f=1", "display_name": "doctor_stopsign", "link": "https://stackoverflow.com/users/8556227/doctor-stopsign"}, "is_accepted": true, "score": 2, "last_activity_date": 1504480639, "creation_date": 1504480639, "answer_id": 46028612, "question_id": 46027701, "link": "https://stackoverflow.com/questions/46027701/how-to-store-method-pointers-in-a-hashmap-and-call-them/46028612#46028612", "title": "How to store method pointers in a HashMap and call them", "body": "<p>A <code>HashMap</code> in Rust owns everything inside of it. In order to get your function pointer you are borrowing it with <code>let func = self.jump_table.get(&amp;key);</code>. So now, <code>func</code> is <em>immutably borrowing</em> <code>self.jump_table</code> (which is an element of <code>self</code>). </p>\n\n<p>The issue is that you are then trying to pass all of <code>self</code> into <code>func</code>. This would be fine if you were passing in <code>self</code> immutably, as you can borrow <code>self</code> immutably as many times as you want. However, since you are trying to mutably borrow <code>self</code> the compiler will not allow you to do so since you have just immutably borrowed a <em>portion</em> of <code>self</code> (specifically <code>self.jump_table</code>).</p>\n\n<p>One way to fix this is to split up your <code>Chip8</code> struct into smaller structs, such that you can pass all of the necessary information into <code>func</code> without also passing in <code>jump_table</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1504490856, "creation_date": 1504490856, "answer_id": 46029445, "question_id": 46027701, "link": "https://stackoverflow.com/questions/46027701/how-to-store-method-pointers-in-a-hashmap-and-call-them/46029445#46029445", "title": "How to store method pointers in a HashMap and call them", "body": "<p>There's no reason to <code>Box</code> the function pointers in the <code>HashMap</code>, that only introduces unneeded indirection. </p>\n\n<p>As has <a href=\"https://stackoverflow.com/a/46028612/155423\">already been mentioned</a>, you are borrowing the function pointer. The thing is, there's no reason to. You can just copy the function pointer to disassociate it from the <code>HashMap</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Chip8 {\n    jump_table: HashMap&lt;u16, fn(&amp;mut Chip8)&gt;,\n}\n\nimpl Chip8 {\n    fn execute_decoded(&amp;mut self, key: u16) {\n        let func = self.jump_table.get(&amp;key).map(|x| *x);\n\n        match func {\n            Some(func) =&gt; func(self),\n            None =&gt; {\n                println!(\"invalid op\");\n            }\n        };\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 1622, "user_id": 1563394, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/67835df71913e21410945dfa8c33d70f?s=128&d=identicon&r=PG", "display_name": "lwi", "link": "https://stackoverflow.com/users/1563394/lwi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1600, "favorite_count": 1, "accepted_answer_id": 46028612, "answer_count": 2, "score": 2, "last_activity_date": 1504490856, "creation_date": 1504471631, "last_edit_date": 1504488772, "question_id": 46027701, "link": "https://stackoverflow.com/questions/46027701/how-to-store-method-pointers-in-a-hashmap-and-call-them", "title": "How to store method pointers in a HashMap and call them", "body": "<p>I am trying to write a chip8 emulator and the borrow checker is giving me a hard time. </p>\n\n<p>The idea is to decode an opcode through looking up a method pointer inside a <code>HashMap</code> and then executing this method pointer but I cannot get the mutable method pointers to work correctly:</p>\n\n<pre><code>struct Chip8 {\n    opcode: u16,\n    //... other fields\n    jump_table: HashMap&lt;u16, Box&lt;fn(&amp;mut Chip8)&gt;&gt;,\n}\n</code></pre>\n\n<p>Function using the pointers:</p>\n\n<pre><code>fn execute_decoded(&amp;mut self, key: u16) {\n    let func = self.jump_table.get(&amp;key);\n\n    match func {\n        Some(func) =&gt; func(self),\n        None =&gt; {\n            println!(\"invalid op: {}\", self.opcode);\n            sleep(Duration::from_millis(10000));\n            return;\n        }\n    }();\n\n    self.program_counter = self.program_counter + 2;\n}\n</code></pre>\n\n<p>The checker complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> cannot borrow `*self` as mutable because `self.jump_table` is also borrowed as immutable\n   --&gt; main.rs:168:36\n    |\n165 |             let func = self.jump_table.get(&amp;key);\n    |                        --------------- immutable borrow occurs here\n...\n168 |                 Some(func) =&gt; func(self),\n    |                                    ^^^^ mutable borrow occurs here\n...\n178 |     }\n    |     - immutable borrow ends here\n</code></pre>\n\n<p>I do not understand why this error is happening.</p>\n\n<p>Why is <code>self.jump_table.get(&amp;key)</code> borrowing at all? Based on the signature of <code>execute_decoded</code>, I was assuming that it works on a mutable borrowed version of <code>self</code> and no additional borrowing is needed.</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1504441432, "post_id": 46021547, "comment_id": 79006043, "body": "Why not depend on the traits you actually need, in addition to perhaps the <code>Copy</code> trait? That will cover numbers and number-like objects devised in the future (think complex numbers or with non-standard sizes)."}], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 2481107, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/t7HcJ.jpg?s=128&g=1", "display_name": "Midas", "link": "https://stackoverflow.com/users/2481107/midas"}, "edited": false, "score": 0, "creation_date": 1504429942, "post_id": 46021575, "comment_id": 79003160, "body": "Thanks, that sounds promising. However, there must be a way in the Rust language itself to implement this right? In C# for example you have the where keyword that constrains the accepted types. The crate itself must have been using some language feature to do this."}, {"owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "reply_to_user": {"reputation": 423, "user_id": 2481107, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/t7HcJ.jpg?s=128&g=1", "display_name": "Midas", "link": "https://stackoverflow.com/users/2481107/midas"}, "edited": false, "score": 1, "creation_date": 1504430075, "post_id": 46021575, "comment_id": 79003183, "body": "@Midas They defined the trait <code>Num</code> and implemented it for all the standard numeric types. You could make your own trait <code>Num</code> and implement it for all numeric types, but you may as well use the crate."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 4, "creation_date": 1504443519, "post_id": 46021575, "comment_id": 79006654, "body": "Just look at what the crate does, they&#39;re only cooking with water"}], "tags": [], "owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "is_accepted": false, "score": 7, "last_activity_date": 1504444497, "last_edit_date": 1504444497, "creation_date": 1504427133, "answer_id": 46021575, "question_id": 46021547, "link": "https://stackoverflow.com/questions/46021547/how-can-i-constrain-t-in-rust-to-accept-only-numeric-types/46021575#46021575", "title": "How can I constrain T in Rust to accept only numeric types?", "body": "<p>This is what the <a href=\"https://crates.io/crates/num-traits\" rel=\"noreferrer\">num-traits crate</a> can be used for. The <a href=\"http://rust-num.github.io/num/num_traits/trait.Num.html\" rel=\"noreferrer\"><code>Num</code> trait</a> is implemented for all numeric types.</p>\n\n<p>This ensures your generic type <code>T</code> has all of the expected numeric operators, <code>Add</code>, <code>Sub</code>, <code>Mul</code>, <code>Div</code>, <code>Rem</code>, can be partially equality checked via <code>PartialEq</code>, it also exposes a value for <code>1</code> and <code>0</code> for <code>T</code>.</p>\n\n<p>You can see how the crate implements the trait <a href=\"https://github.com/rust-num/num/blob/e7df30bac45795d144e8b33c6bbc97c22c949731/traits/src/lib.rs#L129-L142\" rel=\"noreferrer\">here</a>:</p>\n\n<pre><code>int_trait_impl!(Num for usize u8 u16 u32 u64 isize i8 i16 i32 i64);\n</code></pre>\n"}], "owner": {"reputation": 423, "user_id": 2481107, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/t7HcJ.jpg?s=128&g=1", "display_name": "Midas", "link": "https://stackoverflow.com/users/2481107/midas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2834, "favorite_count": 1, "closed_date": 1504488109, "answer_count": 1, "score": 2, "last_activity_date": 1504444497, "creation_date": 1504426945, "question_id": 46021547, "link": "https://stackoverflow.com/questions/46021547/how-can-i-constrain-t-in-rust-to-accept-only-numeric-types", "closed_reason": "Duplicate", "title": "How can I constrain T in Rust to accept only numeric types?", "body": "<p>I want to create some structs that have a property of a generic type T. This generic type will be used for calculations, so I want T to be all kind of numeric types such as i32, u32, f32, uf32, i64 etc. How can I achieve that?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 105, "user_id": 7022146, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-lZnS7dDQwUk/AAAAAAAAAAI/AAAAAAAAKl8/eU3SeFebjxk/photo.jpg?sz=128", "display_name": "Jang Whe-moon", "link": "https://stackoverflow.com/users/7022146/jang-whe-moon"}, "edited": false, "score": 0, "creation_date": 1504424289, "post_id": 46020788, "comment_id": 79001940, "body": "I haven&#39;t catched that try statement in rust returns Result! Thanks!"}], "tags": [], "owner": {"reputation": 168655, "user_id": 582, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ev49G.png?s=128&g=1", "display_name": "Lily Ballard", "link": "https://stackoverflow.com/users/582/lily-ballard"}, "is_accepted": true, "score": 7, "last_activity_date": 1504418944, "creation_date": 1504418944, "answer_id": 46020788, "question_id": 46020608, "link": "https://stackoverflow.com/questions/46020608/rust-error-with-question-mark-operator-the-trait-bound-is-not-satisfied/46020788#46020788", "title": "rust error with question mark operator &quot;the trait bound is not satisfied&quot;", "body": "<p>What the error message is actually telling you is you're using the <code>?</code> operator inside of a function that returns <code>()</code> (this being the <code>main</code> function). The <code>?</code> operator propagates errors upwards, but it can only do that if the function it's used in actually has a compatible return type that can represent that error.</p>\n\n<p>Or in other words, you can only use it in a function that itself is returning a <code>Result</code> (with a compatible error type). Your <code>main</code> does not return a <code>Result</code>, so you cannot use the <code>?</code> operator inside of it.</p>\n\n<p>You may also be interested in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1937-ques-in-main.md\" rel=\"noreferrer\">RFC 1937</a>, which would allow the use of <code>?</code> in <code>main</code> (by allowing you to declare that <code>main</code> returns a <code>Result</code>).</p>\n"}], "owner": {"reputation": 105, "user_id": 7022146, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-lZnS7dDQwUk/AAAAAAAAAAI/AAAAAAAAKl8/eU3SeFebjxk/photo.jpg?sz=128", "display_name": "Jang Whe-moon", "link": "https://stackoverflow.com/users/7022146/jang-whe-moon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1117, "favorite_count": 0, "closed_date": 1504424036, "accepted_answer_id": 46020788, "answer_count": 1, "score": 1, "last_activity_date": 1504418944, "creation_date": 1504416824, "question_id": 46020608, "link": "https://stackoverflow.com/questions/46020608/rust-error-with-question-mark-operator-the-trait-bound-is-not-satisfied", "closed_reason": "Duplicate", "title": "rust error with question mark operator &quot;the trait bound is not satisfied&quot;", "body": "<pre><code>use std::io;\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() {\n    let mut csv = File::open(\"Item.csv\")?;\n}\n</code></pre>\n\n<p>this is some part of my code, and I've got error: </p>\n\n<pre><code>   Compiling eracsv v0.1.0 (file:///C:/Users/jwm/Project/eracsv)\nerror[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n --&gt; src\\main.rs:\n  |\n  |     let mut csv = File::open(\"Item.csv\")?;\n  |                   -----------------------\n  |                   |\n  |                   the `?` operator can only be used in a function that returns `Result` (or another type that implements `std::ops::Try`)\n  |                   in this macro invocation\n  |\n  = help: the trait `std::ops::Try` is not implemented for `()`\n  = note: required by `std::ops::Try::from_error`\n</code></pre>\n\n<p>I have deal with both rustc 1.19 stable and 1.22 nightly and both discharging same error. </p>\n\n<p>but, this is exactly same code as <a href=\"https://doc.rust-lang.org/std/io/#read-and-write\" rel=\"nofollow noreferrer\">rust doc</a>, isn't it? It is explicitly mentioned that File::open() function returns result .</p>\n\n<p>I am curious why ? operator makes compile error while unwrap() doesn't.</p>\n"}, {"tags": ["enums", "websocket", "rust", "fibonacci"], "answers": [{"tags": [], "owner": {"reputation": 416, "user_id": 1082652, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d327df22609ef9b93f9ff1cdc3596452?s=128&d=identicon&r=PG", "display_name": "marcianx", "link": "https://stackoverflow.com/users/1082652/marcianx"}, "is_accepted": true, "score": 1, "last_activity_date": 1504421041, "last_edit_date": 1504421041, "creation_date": 1504420296, "answer_id": 46020898, "question_id": 46018866, "link": "https://stackoverflow.com/questions/46018866/ws-rs-e0271r-expected-found-enum-stdresultresult/46020898#46020898", "title": "ws-rs: E0271r: expected (), found enum `std::result::Result`", "body": "\n\n<p>Wow, that was a <em>very</em> confusing compiler error. Consider filing a bug. ;)\nPlease see my comments describing the fix.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    listen(\"0.0.0.0:8080\", |conn| {\n        // Needs to return a `Result` on all code paths.\n        // You were missing an `else`.\n        move |msg: ws::Message| {\n            // Need to extract text before parsing.\n            let text = msg.into_text().unwrap();\n            // Don't need regex -- parse and check success.\n            match text.parse() {\n                Ok(num) =&gt; conn.send(ws::Message::Text(fib(num).to_string())),\n                Err(err) =&gt; Ok(()), // Or return an error if you prefer.\n            }\n        }\n    }).unwrap();\n}\n</code></pre>\n\n<p>Further details:</p>\n\n<ul>\n<li><a href=\"https://docs.rs/ws/0.7.3/ws/fn.listen.html\" rel=\"nofollow noreferrer\">listen()</a> must return something that implements <code>Handler</code>.</li>\n<li><a href=\"https://docs.rs/ws/0.7.3/ws/trait.Handler.html\" rel=\"nofollow noreferrer\">Handler</a> is implemented for  all <code>F: Fn(Message) -&gt; Result&lt;()&gt;</code>. So your method needs to return a <code>Result&lt;()&gt;</code> on all code paths.</li>\n<li>Conceptually, <code>Handler</code> could be implemented for something else as well. The compiler is not able to infer the type of <code>msg</code> as it's not being directly passed into a method with a known type signature; so the compiler can't infer its type and we need to provide it explicitly.</li>\n</ul>\n"}], "owner": {"reputation": 837, "user_id": 5330189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6b2c5e4f7773a21c5d11b01a37175e82?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Richardson", "link": "https://stackoverflow.com/users/5330189/eli-richardson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 702, "favorite_count": 0, "accepted_answer_id": 46020898, "answer_count": 1, "score": 0, "last_activity_date": 1504421041, "creation_date": 1504392416, "last_edit_date": 1504393271, "question_id": 46018866, "link": "https://stackoverflow.com/questions/46018866/ws-rs-e0271r-expected-found-enum-stdresultresult", "title": "ws-rs: E0271r: expected (), found enum `std::result::Result`", "body": "<p>I'm learning Rust, and I'm attempting to make a WebSocket server that calculates the Fibonacci for n and sends the result back. I'm getting the error:</p>\n\n<pre><code> expected (), found enum `std::result::Result`\n</code></pre>\n\n<p>Here is my code (with comments):</p>\n\n<pre><code>extern crate ws;// add websocket crate\nextern crate num;// add num crate (to handle big numbers)\nextern crate regex;// regex crate\n\nuse ws::listen;\nuse num::bigint::BigUint;\nuse num::traits::{Zero, One};\nuse std::env;\nuse std::mem::replace;// used to swap variables\n\nfn main() {\n    let re = regex::Regex::new(\"[0-9]+\").unwrap();// regex to check if msg is a number.\n    listen(\"0.0.0.0:8080\", |conn| {// this is where the arrows in the error message points to\n        move |msg| {\n            if re.is_match(msg) {// check if message matches the regex\n                let num: i64 = msg.parse().unwrap();// set num to the msg as an integer\n                conn.send(ws::Message::Text(fib(num).to_string()));// create a new ws message with the Fib of num\n            }\n        }\n    }).unwrap();\n}\n\nfn fib(n: i64) -&gt; BigUint {// fibonacci function\n    let mut f0 = Zero::zero();\n    let mut f1 = One::one();\n    for _ in 0..n {\n        let f2 = f0 + &amp;f1;\n        f0 = replace(&amp;mut f1, f2);\n    }\n    f0\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "edited": false, "score": 0, "creation_date": 1504384781, "post_id": 46017963, "comment_id": 78995726, "body": "Perfect, that&#39;s exactly what I was looking for. Thanks!"}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 4, "last_activity_date": 1504488055, "last_edit_date": 1504488055, "creation_date": 1504384618, "answer_id": 46017963, "question_id": 46017779, "link": "https://stackoverflow.com/questions/46017779/how-can-the-result-of-collect-be-limited-to-a-certain-number-of-items/46017963#46017963", "title": "How can the result of collect() be limited to a certain number of items?", "body": "<p>You could use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take\" rel=\"nofollow noreferrer\"><code>Iterator::take</code></a>:</p>\n\n<pre><code>fn main() {\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let even = input\n        .iter()\n        .filter(|&amp;x| x % 2 == 0)\n        .take(3)\n        .collect::&lt;Vec&lt;&amp;i32&gt;&gt;();\n\n    for x in &amp;even {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 46017963, "answer_count": 1, "score": 2, "last_activity_date": 1504488055, "creation_date": 1504383213, "question_id": 46017779, "link": "https://stackoverflow.com/questions/46017779/how-can-the-result-of-collect-be-limited-to-a-certain-number-of-items", "title": "How can the result of collect() be limited to a certain number of items?", "body": "<p>Consider the following:</p>\n\n<pre><code>fn main() {\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    let even = input.iter().filter(|&amp;x| x % 2 == 0).collect::&lt;Vec&lt;&amp;i32&gt;&gt;();\n\n    for x in &amp;even {\n        println!(\"{}\", x);\n    }\n}\n</code></pre>\n\n<p>This outputs <code>2 4 6 8 10</code> (as expected). However, what if I only wanted the first 3 items? Is it possible to limit the return value of <code>collect</code> somehow, without collecting everything first and throwing away some of the items afterwards?</p>\n"}, {"tags": ["json", "rust", "serde", "rust-rocket"], "answers": [{"tags": [], "owner": {"reputation": 446, "user_id": 621099, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/28b8eb0c993ddcb69176403078531219?s=128&d=identicon&r=PG", "display_name": "nsg", "link": "https://stackoverflow.com/users/621099/nsg"}, "is_accepted": false, "score": 1, "last_activity_date": 1504387373, "creation_date": 1504387373, "answer_id": 46018312, "question_id": 46017492, "link": "https://stackoverflow.com/questions/46017492/how-do-i-respond-from-a-rocket-handler-with-content-type-application-haljson/46018312#46018312", "title": "How do I respond from a Rocket handler with content type application/hal+json?", "body": "<p>I got some help over at the projects chat and the solution was:</p>\n\n<pre><code>#[get(\"/foo\")]\nfn foo() -&gt; Content&lt;Json&gt; {\n    let r = json!({\n        \"foo\": 1\n    })\n    Content(ContentType::new(\"application\", \"hal+json\"), Json(r))\n}\n</code></pre>\n"}], "owner": {"reputation": 446, "user_id": 621099, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/28b8eb0c993ddcb69176403078531219?s=128&d=identicon&r=PG", "display_name": "nsg", "link": "https://stackoverflow.com/users/621099/nsg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 514, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1506694154, "creation_date": 1504380983, "last_edit_date": 1506694154, "question_id": 46017492, "link": "https://stackoverflow.com/questions/46017492/how-do-i-respond-from-a-rocket-handler-with-content-type-application-haljson", "title": "How do I respond from a Rocket handler with content type application/hal+json?", "body": "<p>I have a project written in <a href=\"http://rocket.rs\" rel=\"nofollow noreferrer\">Rocket</a> with the endpoint <code>/foo</code> that returns data in <code>application/json</code>. I'm using rocket, rocket_codegen, serde, and serde_json.</p>\n\n<pre><code>#[get(\"/foo\")]\nfn foo() -&gt; Json {\n    Json(json!({\n        \"foo\": 1\n    }))\n}\n</code></pre>\n\n<p>This works nicely, but I need to respond with <code>application/hal+json</code> so I guess I need to write my own response, and I have failed. How do I return my JSON with the Content-Type <code>application/hal+json</code>?</p>\n"}, {"tags": ["rust", "closures", "lifetime", "borrow-checker", "ownership-semantics"], "answers": [{"comments": [{"owner": {"reputation": 124, "user_id": 859918, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/accc4f95cc2f30d8cadc14c4282b5a86?s=128&d=identicon&r=PG", "display_name": "Chris", "link": "https://stackoverflow.com/users/859918/chris"}, "edited": false, "score": 0, "creation_date": 1504376889, "post_id": 46016619, "comment_id": 78993694, "body": "Ah that did it! Somewhere in the tutorials I missed that unwrap was a <i>move</i>. Thanks!"}], "tags": [], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "is_accepted": true, "score": 1, "last_activity_date": 1504374861, "creation_date": 1504374861, "answer_id": 46016619, "question_id": 46015933, "link": "https://stackoverflow.com/questions/46015933/returning-reference-to-generic-type-with-generic-fn-trait-value/46016619#46016619", "title": "Returning reference to generic type with generic Fn trait/value", "body": "<blockquote>\n  <p>and unwrap doesn't seem to work...</p>\n</blockquote>\n\n<p>The problem is that <code>unwrap</code> takes it's argument by value, so it becomes moved. </p>\n\n<p>Something like <code>self.value.as_ref().unwrap()</code> should do the trick.</p>\n"}], "owner": {"reputation": 124, "user_id": 859918, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/accc4f95cc2f30d8cadc14c4282b5a86?s=128&d=identicon&r=PG", "display_name": "Chris", "link": "https://stackoverflow.com/users/859918/chris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 180, "favorite_count": 0, "closed_date": 1504489249, "accepted_answer_id": 46016619, "answer_count": 1, "score": 0, "last_activity_date": 1504489299, "creation_date": 1504370187, "question_id": 46015933, "link": "https://stackoverflow.com/questions/46015933/returning-reference-to-generic-type-with-generic-fn-trait-value", "closed_reason": "Duplicate", "title": "Returning reference to generic type with generic Fn trait/value", "body": "<p>I'm just starting to learn Rust and working through the Rust book. One of the chapters leads through a few examples and ends with a \"try to make this generic\" type of suggested exercises. I've been totally banging my head on this. The semi-generic type you start with is this:</p>\n\n<pre><code>struct Cacher&lt;T&gt;\n    where T: Fn(i32) -&gt; i32\n{\n    value: Option&lt;i32&gt;,\n    // leaving out rest for brevity\n</code></pre>\n\n<p>Then I get to work converting this so that the Fn trait is also generic, which also directly impacts the \"value.\" So here is what I came up with:</p>\n\n<pre><code>struct Cacher&lt;T, U&gt;\n    where T: Fn(U) -&gt; U\n{\n    calculation: T,\n    value: Option&lt;U&gt;,\n}\n\nimpl&lt;T, U&gt; Cacher&lt;T, U&gt;\n    where T: Fn(U) -&gt; U\n{\n    fn new(calculation: T) -&gt; Cacher&lt;T, U&gt; {\n        Cacher {\n            calculation,\n            value: Option::None,\n        }\n    }\n\n    fn value(&amp;mut self, arg: U) -&gt; &amp;U {\n        match self.value {\n            Some(ref v) =&gt; v,\n            None =&gt; {\n              let v = (self.calculation)(arg);\n              self.value = Some(v);\n              // problem is returning reference to value that was in\n              // v which is now moved, and unwrap doesn't seem to work...\n            },\n        }\n    }\n}\n</code></pre>\n\n<p>All my issues are in the fn value getter. I'm not sure if I'm <em>close</em> or I simply went down the completely wrong path. So where am I going off the rails?</p>\n"}, {"tags": ["rust", "self"], "comments": [{"owner": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 1, "creation_date": 1504360112, "post_id": 46014421, "comment_id": 78988945, "body": "Looks like a bug to me. Rust won&#39;t accept that, doesn&#39;t seem to be a clear reason why not. Addtionally, if you try to use a type alias (<code>type Flag = MyLongNamedSpecialFlag;</code>, it will give the same error: <code>did you mean </code>Flag { /* fields */ }<code>?</code>."}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 2, "creation_date": 1504360321, "post_id": 46014421, "comment_id": 78989006, "body": "For some reason, you can initialize normal structs (<code>struct A {...}</code>) with type aliases (including <code>Self</code>), but it doesn&#39;t work with tuple structs. This is not specific to associated const."}], "answers": [{"tags": [], "owner": {"reputation": 1127, "user_id": 8171453, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d3ac080ba0604191f0653a8880a21cdd?s=128&d=identicon&r=PG&f=1", "display_name": "Emoun", "link": "https://stackoverflow.com/users/8171453/emoun"}, "is_accepted": false, "score": 0, "last_activity_date": 1588063212, "creation_date": 1588063212, "answer_id": 61476030, "question_id": 46014421, "link": "https://stackoverflow.com/questions/46014421/is-it-possible-to-avoid-repeating-the-type-multiple-times-by-using-self-to-defin/61476030#61476030", "title": "Is it possible to avoid repeating the type multiple times by using Self to define associated constants?", "body": "<p>Even though it wasn't designed for this, <a href=\"https://crates.io/crates/duplicate\" rel=\"nofollow noreferrer\">the <code>duplicate</code> crate</a> can be used to achieve a little bit of what you are looking for:</p>\n\n<pre><code>use duplicate::duplicate;\npub struct MyLongNamedSpecialFlag(pub u32);\n\n#[duplicate(name; [MyLongNamedSpecialFlag])]\nimpl name{\n    pub const SOME_CONST: name= name(1234);\n    pub const ANOTHER_CONST: name= name(4321);\n}\n</code></pre>\n\n<p>This will expand to your exact implementation. Why?</p>\n\n<p><code>duplicate</code> is designed to duplicate whatever item it is applied to and substitutes the identifiers it is given with various code for each duplicate. In my example, it will substitute any <code>struct_name</code> with <code>MyLongNamedSpecialFlag</code>. Had we given the macro another <code>[...]</code> block, it would have made 2 copies of the whole implement. However, since we just gave it 1 substitution it simply acts as a way to reuse <code>MyLongNamedSpecialFlag</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1588078013, "creation_date": 1588078013, "answer_id": 61480534, "question_id": 46014421, "link": "https://stackoverflow.com/questions/46014421/is-it-possible-to-avoid-repeating-the-type-multiple-times-by-using-self-to-defin/61480534#61480534", "title": "Is it possible to avoid repeating the type multiple times by using Self to define associated constants?", "body": "<p>Your code works as-is <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1320-2019-01-17\" rel=\"nofollow noreferrer\">since Rust 1.32</a>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyLongNamedSpecialFlag(u32);\n\nimpl MyLongNamedSpecialFlag {\n    const SOME_CONST: Self = Self(1234);\n    const ANOTHER_CONST: Self = Self(4321);\n}\n\nfn main() {\n    println!(\"{:?}\", MyLongNamedSpecialFlag::SOME_CONST);\n    println!(\"{:?}\", MyLongNamedSpecialFlag::ANOTHER_CONST);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 110, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1588078013, "creation_date": 1504359747, "last_edit_date": 1504489477, "question_id": 46014421, "link": "https://stackoverflow.com/questions/46014421/is-it-possible-to-avoid-repeating-the-type-multiple-times-by-using-self-to-defin", "title": "Is it possible to avoid repeating the type multiple times by using Self to define associated constants?", "body": "<p>Using associated constants in Rust, is it possible to avoid repeating the type multiple times in the </p>\n\n<pre><code>pub struct MyLongNamedSpecialFlag(pub u32);\nimpl MyLongNamedSpecialFlag {\n    pub const SOME_CONST: MyLongNamedSpecialFlag = MyLongNamedSpecialFlag(1234);\n    pub const ANOTHER_CONST: MyLongNamedSpecialFlag = MyLongNamedSpecialFlag(4321);\n}\n</code></pre>\n\n<p>To avoid tedious repetition, Is it possible to do something like this?</p>\n\n<pre><code>pub struct MyLongNamedSpecialFlag(pub u32);\nimpl MyLongNamedSpecialFlag {\n    pub const SOME_CONST: Self = Self(1234);\n    pub const ANOTHER_CONST: Self = Self(4321);\n}\n</code></pre>\n\n<hr>\n\n<p>Trying this I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0423]: expected function, found self type `Self`\n --&gt; src/main.rs:3:34\n  |\n3 |     pub const SOME_CONST: Self = Self(1234);\n  |                                  ^^^^ did you mean `Self { /* fields */ }`?\n\nerror[E0423]: expected function, found self type `Self`\n --&gt; src/main.rs:4:37\n  |\n4 |     pub const ANOTHER_CONST: Self = Self(4321);\n  |                                     ^^^^ did you mean `Self { /* fields */ }`?\n</code></pre>\n"}, {"tags": ["recursion", "rust", "callstack"], "answers": [{"comments": [{"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "edited": false, "score": 0, "creation_date": 1504366771, "post_id": 46013190, "comment_id": 78990768, "body": "I have a few concerns about the crate&#39;s health given the severity of the sole open issue on github, but it does seem to provide what I need. Hope this functionality gets merged into the stdlib like glibc."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "edited": false, "score": 1, "creation_date": 1504372055, "post_id": 46013190, "comment_id": 78992201, "body": "According to <a href=\"https://github.com/rust-lang/rfcs/issues/1488#issuecomment-179334635\" rel=\"nofollow noreferrer\">this comment by the crates&#39;s owner and one of the main rustc&#39;s dev</a> this wouldn&#39;t be moved to the standard library. However, <a href=\"https://github.com/rust-lang/rust/issues/41884\" rel=\"nofollow noreferrer\">this issue</a> indicates this crate has a good future ahead."}, {"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "edited": false, "score": 0, "creation_date": 1504413751, "post_id": 46013190, "comment_id": 79000307, "body": "I certainly hope so given how critical this issue is for reliable system software. Thanks for the info."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 2, "last_activity_date": 1504487922, "last_edit_date": 1504487922, "creation_date": 1504350852, "answer_id": 46013190, "question_id": 46011459, "link": "https://stackoverflow.com/questions/46011459/does-rust-expose-call-stack-depth/46013190#46013190", "title": "Does Rust expose call stack depth?", "body": "<p>The <a href=\"https://crates.io/crates/stacker/\" rel=\"nofollow noreferrer\">stacker</a> crate seems to provide the functionality you seek:</p>\n\n<ul>\n<li>A function to guarantee the amount of available stack</li>\n<li>A function to query the amount of remaining stack, which you could use to bail before the program actually stack-overflows</li>\n</ul>\n\n<p>The library supports the Linux, Windows and macOS targets.</p>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 604, "favorite_count": 0, "accepted_answer_id": 46013190, "answer_count": 1, "score": 4, "last_activity_date": 1504487922, "creation_date": 1504336778, "last_edit_date": 1504351471, "question_id": 46011459, "link": "https://stackoverflow.com/questions/46011459/does-rust-expose-call-stack-depth", "title": "Does Rust expose call stack depth?", "body": "<p>Background information: I have a function that calls itself both directly and indirectly through other functions, and would like a cheap way to fail gracefully should the program run out of call stack. I could count calls manually, but I would like a more elegant and robust way of achieving this.  </p>\n\n<p>Is it possible to determine current call stack depth using stable Rust? </p>\n\n<p>The only options I could find are:</p>\n\n<ol>\n<li>Following the stack in ASM, but it requires unstable and is not portable.</li>\n<li>Using a GNU libc extension (backtrace). However, backtrace is too wasteful and also not standard. </li>\n</ol>\n"}, {"tags": ["rust", "traits", "associated-types", "rust-diesel"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504490402, "post_id": 46010141, "comment_id": 79018772, "body": "<i>I only want id to be a value not a reference type.</i> \u2014 <b>why</b>? It basically shouldn&#39;t matter to you if <code>Id</code> resolves to a <code>u8</code> or a <code>String</code> or a <code>&amp;str</code>."}, {"owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504495262, "post_id": 46010141, "comment_id": 79019670, "body": "But <code>Id</code> in my case in not a <code>String</code> but an <code>i32</code>. Writing <code>&amp;num</code> for the <code>find</code> is just not worth it. I have to dereference it again within the method  to use it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504497574, "post_id": 46010141, "comment_id": 79020090, "body": "Please create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. As it stands, your question isn&#39;t understandable or is missing important information. If there&#39;s an implementation of <code>Identifiable</code> where <code>Type</code> is <code>i32</code>, then it doesn&#39;t matter that you are taking <code>&lt;&amp;&#39;a Self as Identifiable&gt;::Id</code>; it will <b>be</b> an <code>i32</code> \u2014 you don&#39;t have a reference. If you are making it generic, you can&#39;t avoid it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504536023, "post_id": 46010141, "comment_id": 79039060, "body": "<i>the <code>impl &lt;&amp;&#39;a Self as Identifiable&gt;::Id</code> would refer to the id as <code>&amp;i32</code></i> \u2014 <a href=\"https://play.rust-lang.org/?gist=adb17ce2557323abd9ae80ebb0850f19&amp;version=nightly\" rel=\"nofollow noreferrer\">no, it wouldn&#39;t</a>. It will still be whatever type <code>Id</code> is. <b>Please</b> create a MCVE that shows the problem you are having. Don&#39;t have &quot;...&quot; pieces, make it <b>complete</b>. Show the <b>full</b> error message you are getting."}, {"owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504595209, "post_id": 46010141, "comment_id": 79057138, "body": "Sorry for not clarifying the whole problem. Should have put the error message from the beginning. The example you wrote worked for me as expected. Has the <code>Id</code> been derived as a reference from the beginning in diesel?"}], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 135, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1504595094, "creation_date": 1504322263, "last_edit_date": 1504595094, "question_id": 46010141, "link": "https://stackoverflow.com/questions/46010141/associated-references-types-as-value-types", "title": "Associated References types as Value Types", "body": "<p>This is a <a href=\"https://docs.rs/diesel/0.16.0/diesel/associations/trait.Identifiable.html\" rel=\"nofollow noreferrer\">trait found in Diesel</a>.</p>\n\n<pre><code>trait Identifiable {\n    type Id;\n    ...\n}\n</code></pre>\n\n<p>This is a User model with derived impl of <code>Identifiable</code>.</p>\n\n<pre><code>#[derive(Identifiable)]\npub struct User {\n    id: i32,\n    first_name: String,\n    last_name: String,\n}\n</code></pre>\n\n<p>As per the docs, implementation of Identifiable is derived on the reference of the struct i.e. on <code>&amp;User</code>. \nThis is a trait to <code>find</code> with <code>id</code> defined on the <code>Identifiable</code>. The implementation on a User would be as follows.</p>\n\n<pre><code>trait Find&lt;'a&gt;: Sized where\n    &amp;'a Self: Identifiable,\n    Self: 'a,\n{\n    fn find(id: &lt;&amp;'a Self as Identifiable&gt;::Id) -&gt; Result&lt;Self, MyError&gt;;\n}\n</code></pre>\n\n<p>The impl of <code>Find</code> on a <code>User</code>. </p>\n\n<pre><code>impl&lt;'a&gt; Find&lt;'a&gt; for User {\n    fn find(id: i32) -&gt; Result&lt;User, MyError&gt; {\n        let conn = ::establish_conn()?;\n        Ok(users::table.find(id).get_result(&amp;conn)?)\n    }\n} \n</code></pre>\n\n<p>The error on compilation:</p>\n\n<pre><code>    fn find(id: i32) -&gt; Result&lt;Self&gt; {\n                ^^^ expected &amp;i32, found i32\n</code></pre>\n\n<p>As I would like to find a user with an <code>i32</code>, the impl <code>&lt;&amp;'a Self as Identifiable&gt;::Id</code> would refer to the id as <code>&amp;i32</code>.\nI only want <code>id</code> to be a value not a reference type.</p>\n\n<p>How can I define the type of <code>id</code> on <code>find</code> to be a value type when <code>Identifiable</code> is applied for reference type <code>&amp;User</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 1, "creation_date": 1504299115, "post_id": 46007782, "comment_id": 78976605, "body": "I don&#39;t think attaching attributes to expressions (or sub expression parts) currently does anything in Rust. Have you tried attaching the <code>#[allow(deprecated)]</code> attribute to the function instead?"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 0, "creation_date": 1504300212, "post_id": 46007782, "comment_id": 78976987, "body": "@WesleyWiser It works, but real function use code from other crates, is it suppress warnings from them about deprecation?"}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1504352366, "post_id": 46008261, "comment_id": 78986787, "body": "But what about dependicies of my crate? If I use in <code>fn new</code> functionality from other crates, is this suppress warning about other, not only <code>FooParams::Old</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1504489911, "post_id": 46008261, "comment_id": 79018690, "body": "@user1244932 I don&#39;t think I&#39;m fully understanding your question. The attribute only prevents the warning message for the <i>single</i> expression that it&#39;s on. People using your crate will never get a deprecation warning from calling <i>your</i> usage of a deprecated function."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1504301875, "creation_date": 1504301875, "answer_id": 46008261, "question_id": 46007782, "link": "https://stackoverflow.com/questions/46007782/deprecate-for-external-users-but-allow-for-me/46008261#46008261", "title": "Deprecate for external users, but allow for me?", "body": "<p>You can move the attribute to the match statement:</p>\n\n<pre><code>impl Foo {\n    pub fn new(p: FooParams) -&gt; Foo {\n        #[allow(deprecated)]\n        match p {\n            FooParams::Old =&gt; {}\n            FooParams::New =&gt; {}\n        }\n    }\n}\n</code></pre>\n\n<p>Other usages of <code>Old</code> in your crate will continue to have the warning.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 110, "favorite_count": 0, "accepted_answer_id": 46008261, "answer_count": 1, "score": 2, "last_activity_date": 1504301875, "creation_date": 1504298820, "last_edit_date": 1504299576, "question_id": 46007782, "link": "https://stackoverflow.com/questions/46007782/deprecate-for-external-users-but-allow-for-me", "title": "Deprecate for external users, but allow for me?", "body": "<p>I found <a href=\"https://stackoverflow.com/questions/30757914/can-i-mark-a-function-as-deprecated\">Can I mark a function as deprecated?</a> and use it in my own crate:</p>\n\n<pre><code>pub enum FooParams {\n    #[deprecated(since = \"0.0.1\", note = \"use `FooParams::New` instead\")]\n    Old,\n    New,\n}\n\npub struct Foo;\n\nimpl Foo {\n    pub fn new(p: FooParams) -&gt; Foo {\n        match p {\n            FooParams::Old =&gt; {}\n            FooParams::New =&gt; {}\n        }\n        Foo\n    }\n}\n</code></pre>\n\n<p>This works for external crates and warns them to not use <code>FooParams::Old</code>.\nIt also applies to my crate, generating annoying warnings. Is there any way to disable this warning?</p>\n\n<p>I tried this but the warning is still present:</p>\n\n<pre><code>#[allow(deprecated)]\nFooParams::Old =&gt; {}\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1504297853, "post_id": 46007475, "comment_id": 78976116, "body": "<i>A temporary value is created and dropped in the map</i>; yes, that&#39;s right... so <b>don&#39;t do that</b>. <code>.map(|f| f.metadata().unwrap())</code> instead. If you <i>truly</i> need a <code>Vec[&amp;Metadata]</code>, you will need to build it based on the intermediate <code>Vec&lt;Metadata&gt;</code>. Otherwise, you&#39;d have references to invalid memory."}, {"owner": {"reputation": 348, "user_id": 5086919, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wlVbd.jpg?s=128&g=1", "display_name": "Teo", "link": "https://stackoverflow.com/users/5086919/teo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1504298430, "post_id": 46007475, "comment_id": 78976351, "body": "@Shepmaster Thanks, that allowed me to fix it"}], "owner": {"reputation": 348, "user_id": 5086919, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wlVbd.jpg?s=128&g=1", "display_name": "Teo", "link": "https://stackoverflow.com/users/5086919/teo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 344, "favorite_count": 0, "closed_date": 1504297669, "answer_count": 0, "score": 2, "last_activity_date": 1504297915, "creation_date": 1504297126, "last_edit_date": 1504297915, "question_id": 46007475, "link": "https://stackoverflow.com/questions/46007475/returning-a-value-borrowed-from-inside-a-closure", "closed_reason": "Duplicate", "title": "Returning a value borrowed from inside a closure", "body": "<p>I'm looking to get a <code>Vec&lt;&amp;Metadata&gt;</code> from <code>files</code>:</p>\n\n<pre><code>use std::fs::File;\n\nfn example(files: Vec&lt;&amp;File&gt;) {\n    let files_metadata: Vec&lt;_&gt; = files\n        .iter()\n        .map(|f| &amp;f.metadata().unwrap())\n        .collect();\n}\n</code></pre>\n\n<p>A temporary value is created and dropped in the <code>map</code>, it needs to live as long as <code>files_metadata</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n --&gt; src/main.rs:6:39\n  |\n6 |         .map(|f| &amp;f.metadata().unwrap())\n  |                   --------------------^\n  |                   |                   |\n  |                   |                   temporary value dropped here while still borrowed\n  |                   temporary value created here\n7 |         .collect();\n8 | }\n  | - temporary value needs to live until here\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1504284907, "post_id": 46004643, "comment_id": 78970615, "body": "Why not just do <code>c_func(x, p as c_uint)</code> ?"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504285425, "post_id": 46004643, "comment_id": 78970880, "body": "@Shepmaster because of size of p may be bigger that <code>c_uint</code> in this case I not need this conversation, and actually this conversation create bug in this case."}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1504296958, "post_id": 46005933, "comment_id": 78975771, "body": "The problem that I know nothing about <code>unsigned int</code> or <code>c_uint</code>, C standard says  nothing about it, like at least <code>2^16</code> values and that&#39;s all. According to <a href=\"https://en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/64-bit_computing#64-bit_data_models</a> your code with <code>#[cfg(target_pointer_width = &quot;64&quot;)]</code> <code>for u64</code> may truncate result removing high 32 bit value or work in right way."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1504289875, "creation_date": 1504289875, "answer_id": 46005933, "question_id": 46004643, "link": "https://stackoverflow.com/questions/46004643/how-to-determine-size-of-c-uint-at-build-rs-time-for-the-target-platform-not-hos/46005933#46005933", "title": "How to determine size of c_uint at build.rs time for the target platform not host platform?", "body": "<p>I do not believe there's any way of accessing that information in the build script.</p>\n\n<blockquote>\n  <p>where the <code>promote</code> function is part of some magic trait that promotes to the suitable type?</p>\n</blockquote>\n\n<p>That sounds like a workable solution. You can implement this trait for various types depending on the target platform:</p>\n\n<pre><code>extern crate libc;\n\ntrait Promote {\n    type Output;\n\n    fn promote(self) -&gt; Self::Output;\n}\n\n// This can be made into a macro for all the \"easy\" cases\nimpl Promote for u8 {\n    type Output = libc::c_uint;\n\n    fn promote(self) -&gt; Self::Output {\n        self as Self::Output\n    }\n}\n\n#[cfg(target_pointer_width = \"32\")]\nimpl Promote for u64 {\n    type Output = libc::uint64_t;\n\n    fn promote(self) -&gt; Self::Output {\n        self as Self::Output\n    }\n}\n\n#[cfg(target_pointer_width = \"64\")]\nimpl Promote for u64 {\n    type Output = libc::c_uint;\n\n    fn promote(self) -&gt; Self::Output {\n        self as Self::Output\n    }\n}\n\nextern \"C\" {\n    fn foo(a: u8, ...);\n}\n\nfn main() {\n    unsafe {\n        foo(1, 1u8.promote(), 1u64.promote());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 93, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1504289875, "creation_date": 1504284019, "last_edit_date": 1504287900, "question_id": 46004643, "link": "https://stackoverflow.com/questions/46004643/how-to-determine-size-of-c-uint-at-build-rs-time-for-the-target-platform-not-hos", "title": "How to determine size of c_uint at build.rs time for the target platform not host platform?", "body": "<p>During <code>build.rs</code> time, I'm generating Rust code that calls a C function with a variable number of arguments:</p>\n\n<pre><code>//build.rs\nfn generate_code(param_name: &amp;str, param_type: &amp;str);\n</code></pre>\n\n<p>This generates:</p>\n\n<pre><code>c_func(x, {param_name});\n</code></pre>\n\n<p>where <code>param_type</code> is any integer type.</p>\n\n<p>The problem is with \"integer promotions\". For example, this code gives a compile-time error because <code>p</code> should be promoted to a <code>c_uint</code> by the C calling conventions for variadics and Rust does not do it implicitly:</p>\n\n<pre><code>use std::os::raw::c_uint;\n\nextern \"C\" {\n    fn c_func(x: c_uint, ...);\n}\n\nfn main() {\n    let x: c_uint = 1;\n    let p: u8 = 2;\n    c_func(x, p);\n}\n</code></pre>\n\n<p>To promote the integer, I need to know the size of <code>c_uint</code> on the target platform to convert integer types with size &lt;= <code>c_uint</code> to <code>c_uint</code> (and signed types to <code>c_int</code>),</p>\n\n<p>Maybe there is some kind of trick I can do with the help of generated code (\nlike <code>c_func(x, p.promote());</code>), where the <code>promote</code> function is part of some magic <code>trait</code> that promotes to the suitable type?</p>\n"}, {"tags": ["gcc", "rust", "blas", "openblas"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504282513, "post_id": 46004194, "comment_id": 78969448, "body": "Does this help? <a href=\"https://stackoverflow.com/a/40286757/\">stackoverflow.com/a/40286757</a>"}, {"owner": {"reputation": 8409, "user_id": 2001017, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/H0Z0x.jpg?s=128&g=1", "display_name": "Picaud Vincent", "link": "https://stackoverflow.com/users/2001017/picaud-vincent"}, "edited": false, "score": 0, "creation_date": 1504282531, "post_id": 46004194, "comment_id": 78969456, "body": "Maybe off topic, but each time that I had to provide a soft running under windows I have cross-compiled it from Linux to Windows using <a href=\"http://mxe.cc/\" rel=\"nofollow noreferrer\">mxe.cc</a> . It has always worked like a charm even for Qt apps. There you have blas, cblas and lapack for windows without pain."}, {"owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504284010, "post_id": 46004194, "comment_id": 78970164, "body": "@kennytm, no, it doesn&#39;t help. as far as i understand rust has its own gcc compiler with all dependencies in ~/.cargo/.... folder"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1504290386, "post_id": 46004194, "comment_id": 78973063, "body": "@StepanYakovenko No, <code>rustc</code> uses LLVM, but doesn&#39;t ship its own GCC compiler."}, {"owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "edited": false, "score": 0, "creation_date": 1504296428, "post_id": 46004194, "comment_id": 78975570, "body": "I mean this: .rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib\\rustlib\\&zwnj;&#8203;x86_64-pc-windows-gn&zwnj;&#8203;u\\bin\\gcc.exe"}], "owner": {"reputation": 6067, "user_id": 517073, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/917ead48eb4ab8bcedbb454977143e60?s=128&d=identicon&r=PG", "display_name": "Stepan Yakovenko", "link": "https://stackoverflow.com/users/517073/stepan-yakovenko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 264, "favorite_count": 0, "answer_count": 0, "score": 11, "last_activity_date": 1504526429, "creation_date": 1504282136, "last_edit_date": 1504282840, "question_id": 46004194, "link": "https://stackoverflow.com/questions/46004194/how-can-i-use-blas-on-windows-with-the-gnu-toolchain", "title": "How can I use BLAS on Windows with the GNU toolchain?", "body": "<p>I have this dependency:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>blas = \"0.18.1\"\n</code></pre>\n\n<p>During building this simple program (no types used de facto in the program):</p>\n\n<pre><code>extern crate blas;\nuse blas::c::*;\n</code></pre>\n\n<p>I get these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: linking with `gcc` failed: exit code: 1\n  |\n  = note: \"gcc\" \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\" \"-Wl,--nxcompat\" \"-nostdlib\" \"-m64\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\crt2.o\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\rsbegin.o\" \"-L\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\rpolysolve-88ff07ef5c6657b1.0.o\" \"-o\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\rpolysolve-88ff07ef5c6657b1.exe\" \"-Wl,--gc-sections\" \"-nodefaultlibs\" \"-L\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\" \"-L\" \"C:/Users/steve/Dropbox/Projects/rpolysolve/target/debug/build/openblas-src-d878051769a2d73f/out\\\\opt/OpenBLAS/lib\" \"-L\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\" \"-Wl,-Bstatic\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\libblas-b4aae95537d012fb.rlib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\libblas_sys-e0d39b2df28e83ce.rlib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\libopenblas_src-f69049297a7464c8.rlib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\libnum_complex-f6dcb9467a42a2a8.rlib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\liblibc-c8ae433ae4a960ed.rlib\" \"C:\\\\Users\\\\steve\\\\Dropbox\\\\Projects\\\\rpolysolve\\\\target\\\\debug\\\\deps\\\\libnum_traits-f34085513d19d5a6.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libstd-5a958d157a8d8d98.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libpanic_unwind-14e8bb7ca07ebf2c.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libunwind-a4bc20050f473f79.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\liblibc-892bd58ec617c3bd.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\librand-ce86047000b56785.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libcollections-b8b9a576d130e244.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\liballoc-b9c9173c47c20c41.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\liballoc_system-141f235246f01712.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libstd_unicode-9fbe5d3bbc85c563.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libcore-3a6338503b91076c.rlib\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libcompiler_builtins-e9e280acad4314a4.rlib\" \"-Wl,-Bdynamic\" \"-l\" \"gfortran\" \"-l\" \"openblas\" \"-l\" \"advapi32\" \"-l\" \"ws2_32\" \"-l\" \"userenv\" \"-l\" \"shell32\" \"-Wl,-Bstatic\" \"-l\" \"gcc_eh\" \"-l\" \"pthread\" \"-Wl,-Bdynamic\" \"-lmingwex\" \"-lmingw32\" \"-lgcc\" \"-lmsvcrt\" \"-luser32\" \"-lkernel32\" \"C:\\\\Users\\\\steve\\\\.rustup\\\\toolchains\\\\stable-x86_64-pc-windows-gnu\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\rsend.o\"\n  = note: ld: cannot find -lgfortran\n          C:/Users/steve/Dropbox/Projects/rpolysolve/target/debug/build/openblas-src-d878051769a2d73f/out\\opt/OpenBLAS/lib/libopenblas.a: file not recognized: File format not recognized\n</code></pre>\n\n<p>My active toolchain is stable-x86_64-pc-windows-gnu. I want to keep it because this is the only approach I've found for debugging; The MSVC toolchain doesn't allow to run dgb and thus debug in CLion. </p>\n\n<p>What can I do? Are there any other connectors between Rust and BLAS? More specifically, I need to call <code>dsyev_</code>. Are there any other known <strong>stable</strong> methods of calculating real eigenvalues in Rust?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1504278945, "post_id": 46003212, "comment_id": 78967407, "body": "You can&#39;t do this with iterators. I&#39;d just use index based iteration (<code>for i in 0..elements.len()</code>)"}], "answers": [{"comments": [{"owner": {"reputation": 593, "user_id": 4603464, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/005c861dbdaee0ac0ed7a05065c1a426?s=128&d=identicon&r=PG&f=1", "display_name": "Tuupertunut", "link": "https://stackoverflow.com/users/4603464/tuupertunut"}, "edited": false, "score": 0, "creation_date": 1563933403, "post_id": 46003537, "comment_id": 100861013, "body": "<i>Your method doesn&#39;t require mutable references at all</i> What if it&#39;s actually <code>fn doSomething(&amp;mut self, e: &amp;mut Element) {}</code> and mutates both e and f."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 593, "user_id": 4603464, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/005c861dbdaee0ac0ed7a05065c1a426?s=128&d=identicon&r=PG&f=1", "display_name": "Tuupertunut", "link": "https://stackoverflow.com/users/4603464/tuupertunut"}, "edited": false, "score": 0, "creation_date": 1563933586, "post_id": 46003537, "comment_id": 100861049, "body": "@Tuupertunut that&#39;s what <i>You cannot do this, period</i> refers to, as does the section about the rules of references. Rust disallows two mutable references to the same item."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1563934111, "last_edit_date": 1563934111, "creation_date": 1504279699, "answer_id": 46003537, "question_id": 46003212, "link": "https://stackoverflow.com/questions/46003212/how-to-iterate-over-mutable-elements-inside-another-mutable-iteration-over-the-s/46003537#46003537", "title": "How to iterate over mutable elements inside another mutable iteration over the same elements?", "body": "<p>You cannot do this, period. <a href=\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"nofollow noreferrer\">The rules of references</a> state, emphasis mine:</p>\n\n<blockquote>\n  <p>At any given time, you can have either <strong>one mutable reference</strong> or any number of immutable references</p>\n</blockquote>\n\n<p>On the very first iteration, you are trying to get <strong>two</strong> mutable references to the first element in the array. This must be disallowed.</p>\n\n<hr>\n\n<p>Your method doesn't require mutable references at all (<code>fn do_something(&amp;self, e: &amp;Element) {}</code>), so the simplest thing is to just switch to immutable iterators:</p>\n\n<pre><code>for e in &amp;elements {\n    for f in &amp;elements {\n        e.doSomething(f);\n    }\n}\n</code></pre>\n\n<p>If you truly do need to perform mutation inside the loop, you will also need to switch to <a href=\"https://doc.rust-lang.org/stable/std/cell/\" rel=\"nofollow noreferrer\"><em>interior mutability</em></a>. This shifts the enforcement of the rules from compile time to run time, so you will now get a panic when you try to get two mutable references to the same item at the same time:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Element;\n\nimpl Element {\n    fn do_something(&amp;mut self, _e: &amp;mut Element) {}\n}\n\nfn main() {\n    let mut elements = [\n        RefCell::new(Element),\n        RefCell::new(Element),\n        RefCell::new(Element),\n        RefCell::new(Element),\n    ];\n\n    for e in &amp;elements {\n        for f in &amp;elements {\n            // Note that this will panic as both `e` and `f` \n            // are the same value to start with\n            let mut e = e.borrow_mut();\n            let mut f = f.borrow_mut();\n            e.do_something(&amp;mut f);\n        }\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1504281294, "post_id": 46003746, "comment_id": 78968801, "body": "Note that this solution is subtly different from the OP&#39;s code, in the fact that <code>doSomething</code> will never be called with the same two values. The other answer describes why."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1563933879, "last_edit_date": 1563933879, "creation_date": 1504280432, "answer_id": 46003746, "question_id": 46003212, "link": "https://stackoverflow.com/questions/46003212/how-to-iterate-over-mutable-elements-inside-another-mutable-iteration-over-the-s/46003746#46003746", "title": "How to iterate over mutable elements inside another mutable iteration over the same elements?", "body": "<p>You can use indexed iteration instead of iterating with iterators. Then, inside the inner loop, you can use <code>split_at_mut</code> to obtain two mutable references into the same slice.</p>\n\n<pre><code>for i in 0..elements.len() {\n    for j in 0..elements.len() {\n        let (e, f) = if i &lt; j {\n            // `i` is in the left half\n            let (left, right) = elements.split_at_mut(j);\n            (&amp;mut left[i], &amp;mut right[0])\n        } else if i == j {\n            // cannot obtain two mutable references to the\n            // same element\n            continue;\n        } else {\n            // `i` is in the right half\n            let (left, right) = elements.split_at_mut(i);\n            (&amp;mut right[0], &amp;mut left[j])\n        };\n        e.do_something(f);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1065, "favorite_count": 1, "accepted_answer_id": 46003746, "answer_count": 2, "score": 4, "last_activity_date": 1563934111, "creation_date": 1504278572, "last_edit_date": 1563933834, "question_id": 46003212, "link": "https://stackoverflow.com/questions/46003212/how-to-iterate-over-mutable-elements-inside-another-mutable-iteration-over-the-s", "title": "How to iterate over mutable elements inside another mutable iteration over the same elements?", "body": "<p>I have an array of <code>Element</code>s and I want to iterate over it to do some stuff, then iterate over all <code>Element</code>s inside the loop to do something. There is a relation between elements so I want to iterate to all other elements to check something. The elements are mutable references for reasons. It's a bit broad, but I'm trying to be general (maybe I should not). </p>\n\n<pre><code>struct Element;\n\nimpl Element {\n    fn do_something(&amp;self, _e: &amp;Element) {}\n}\n\nfn main() {\n    let mut elements = [Element, Element, Element, Element];\n\n    for e in &amp;mut elements {\n        // Do stuff...\n\n        for f in &amp;mut elements {\n            e.do_something(f);\n        }\n    }\n}\n</code></pre>\n\n<p>As expected, I got this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `elements` as mutable more than once at a time\n  --&gt; src/main.rs:13:18\n   |\n10 |     for e in &amp;mut elements {\n   |              -------------\n   |              |\n   |              first mutable borrow occurs here\n   |              first borrow later used here\n...\n13 |         for f in &amp;mut elements {\n   |                  ^^^^^^^^^^^^^ second mutable borrow occurs here\n</code></pre>\n\n<p>I know it's <a href=\"https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#mutable-references\" rel=\"nofollow noreferrer\">a normal behavior in Rust</a>, but what's the recommended way to avoid this error? Should I copy the elements first? Forget about loops and iterate in a different way? Learn about code design?</p>\n\n<p>Is there a Rusty way to do this?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 6, "last_activity_date": 1504281131, "last_edit_date": 1504281131, "creation_date": 1504280776, "answer_id": 46003826, "question_id": 46002861, "link": "https://stackoverflow.com/questions/46002861/how-do-i-generate-quotetokens-from-both-a-constant-value-and-a-collection-of/46003826#46003826", "title": "How do I generate `quote::Tokens` from both a constant value and a collection of values?", "body": "<p>When you have an iterator of tokens <code>xs = [x1, x2, \u2026, xN]</code>, you can use the <strong>repetition</strong> syntax <code>#( #xs &amp; stuff );*</code> to expand it into <code>x1 &amp; stuff; x2 &amp; stuff; \u2026; xN &amp; stuff</code> inside the <code>quote!</code> macro. </p>\n\n<p>Likewise, you could repeat multiple iterators in parallel, e.g. <code>#(#ks =&gt; #vs,)*</code> would become <code>k1 =&gt; v1, k2 =&gt; v2, \u2026, kN =&gt; vN,</code>.</p>\n\n<p>The repetition syntax of <a href=\"https://docs.rs/quote/0.3.15/quote/\" rel=\"noreferrer\"><code>quote</code></a> is similar to that of <a href=\"https://doc.rust-lang.org/book/first-edition/macros.html#repetition\" rel=\"noreferrer\">Rust's own macro system</a>, only changing the <code>$</code> to <code>#</code>. Ideally, you should be able to write:</p>\n\n<pre><code>Body::Enum(ref e) =&gt; {\n    let enum_name = &amp;ast.ident;\n    let variant_names = e.iter().map(|variant| &amp;variant.ident);\n\n    quote! {\n        impl FullName for #name {\n            fn full_name(&amp;self) -&gt; &amp;'static str {\n                match *self {\n                    #(#enum_name::#variant_names =&gt; \"dummy\",)*\n//                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>However, currently <code>quote</code> requires every variable inside <code>#(\u2026)*</code> be an iterator: compiling the above will cause the E0599 method-not-found error. <a href=\"https://github.com/dtolnay/quote/issues/7\" rel=\"noreferrer\">This is a known bug of the <code>quote</code> crate</a>. As explained the bug report, this can be worked around by creating an iterator that repeats <code>enum_name</code> forever using <a href=\"https://doc.rust-lang.org/std/iter/fn.repeat.html\" rel=\"noreferrer\"><code>std::iter::repeat()</code></a>:</p>\n\n<pre><code>Body::Enum(ref e) =&gt; {\n    use std::iter::repeat;\n\n    let enum_names = repeat(&amp;ast.ident);\n    //               ^~~~~~~~~~~~~~~~~~ \n    //                creates the iterator [Example, Example, Example, Example, \u2026]\n    let variant_names = e.iter().map(|variant| &amp;variant.ident);\n\n    quote! {\n        impl FullName for #name {\n            fn full_name(&amp;self) -&gt; &amp;'static str {\n                match *self {\n                    #(#enum_names::#variant_names =&gt; \"dummy\",)*\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This would generate </p>\n\n<pre><code>impl FullName for Example {\n    fn full_name(&amp;self) -&gt; &amp;'static str {\n        match *self {\n            Example::One =&gt; \"dummy\",\n            Example::Two =&gt; \"dummy\",\n            Example::Three =&gt; \"dummy\",\n        }\n    }\n}\n</code></pre>\n\n<p>in the final output.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1080, "favorite_count": 0, "accepted_answer_id": 46003826, "answer_count": 1, "score": 7, "last_activity_date": 1525050249, "creation_date": 1504277406, "last_edit_date": 1525050249, "question_id": 46002861, "link": "https://stackoverflow.com/questions/46002861/how-do-i-generate-quotetokens-from-both-a-constant-value-and-a-collection-of", "title": "How do I generate `quote::Tokens` from both a constant value and a collection of values?", "body": "<p>I'm creating a <a href=\"https://doc.rust-lang.org/stable/book/first-edition/procedural-macros.html\" rel=\"nofollow noreferrer\">custom derive</a> that operates on an enum. I'd like to generate code like</p>\n\n<pre><code>match *enum_instance {\n    EnumName::VariantName1 =&gt; \"dummy\",\n    EnumName::VariantName2 =&gt; \"dummy\",\n    EnumName::VariantName3 =&gt; \"dummy\",\n}\n</code></pre>\n\n<p>I've been able to get this to work using code like this:</p>\n\n<pre><code>let enum_name = &amp;ast.ident;\nlet mut q = quote! {};\n\nq.append_all(e.iter().map(|variant| {\n    let variant_name = &amp;variant.ident;\n    quote! { #enum_name::#variant_name =&gt; \"dummy\", }\n}));\n\nquote! {\n    impl FullName for #name {\n        fn full_name(&amp;self) -&gt; &amp;'static str {\n            match *self {\n                #q\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Requiring the temporary variable and performing the <code>append_all</code> feels very inelegant. Is there a cleaner solution?</p>\n\n<h3>Code to build the MCVE</h3>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>#[macro_use]\nextern crate my_derive;\n\n#[derive(FullName)]\nenum Example {\n    One,\n    Two,\n    Three,\n}\n\ntrait FullName {\n    fn full_name(&amp;self) -&gt; &amp;'static str;\n}\n\nfn main() {\n    assert_eq!(Example::One.full_name(), \"dummy\");\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"example\"\nversion = \"0.0.0\"\n\n[dependencies]\nmy-derive = { path = \"my-derive\" }\n</code></pre>\n\n<p><strong>my-derive/Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"my-derive\"\nversion = \"0.0.0\"\n\n[lib]\nproc-macro = true\n\n[dependencies]\nquote = \"0.3.12\"\nsyn = \"0.11.10\"\n</code></pre>\n\n<p><strong>my-derive/src/lib.rs</strong></p>\n\n<pre><code>extern crate proc_macro;\nextern crate syn;\n#[macro_use]\nextern crate quote;\n\nuse proc_macro::TokenStream;\n\n#[proc_macro_derive(FullName)]\npub fn has_extent_derive(input: TokenStream) -&gt; TokenStream {\n    let s = input.to_string();\n    let ast = syn::parse_macro_input(&amp;s).expect(\"Unable to parse input\");\n    let gen = impl_full_name(&amp;ast);\n    gen.parse().expect(\"Unable to generate\")\n}\n\nfn impl_full_name(ast: &amp;syn::MacroInput) -&gt; quote::Tokens {\n    use syn::Body;\n\n    let name = &amp;ast.ident;\n\n    match ast.body {\n        Body::Enum(ref e) =&gt; {\n            let enum_name = &amp;ast.ident;\n            let mut q = quote! {};\n\n            q.append_all(e.iter().map(|variant| {\n                let variant_name = &amp;variant.ident;\n                quote! { #enum_name::#variant_name =&gt; \"dummy\", }\n            }));\n\n            quote! {\n                impl FullName for #name {\n                    fn full_name(&amp;self) -&gt; &amp;'static str {\n                        match *self {\n                            #q\n                        }\n                    }\n                }\n            }\n        }\n        _ =&gt; {\n            panic!(\"Only implemented for enums\");\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1504275141, "post_id": 46001885, "comment_id": 78964874, "body": "This is a variant of &quot;There&#39;s one specific case where you can create a type with a reference to itself&quot; in <a href=\"https://stackoverflow.com/q/32300132/155423\">stackoverflow.com/q/32300132/155423</a>. The problem is that you can&#39;t add values to the <code>Vec</code> or even move the value once you&#39;ve indexed it. Here&#39;s <a href=\"https://play.rust-lang.org/?gist=70d44b2827c750df80c2b943dac320ed&amp;version=stable\" rel=\"nofollow noreferrer\">a &quot;solution&quot;</a> that compiles, but is very unlikely to do what you want."}], "owner": {"reputation": 313, "user_id": 2196132, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bec46b0a5fc1900117cdc454b07a50f7?s=128&d=identicon&r=PG", "display_name": "Antigo", "link": "https://stackoverflow.com/users/2196132/antigo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 816, "favorite_count": 2, "closed_date": 1504274907, "answer_count": 0, "score": 2, "last_activity_date": 1504274874, "creation_date": 1504274404, "last_edit_date": 1504274874, "question_id": 46001885, "link": "https://stackoverflow.com/questions/46001885/indexing-a-struct-member-vec-with-a-member-hashmap-in-rust", "closed_reason": "Duplicate", "title": "Indexing a struct member Vec with a member HashMap in Rust", "body": "<p>I want to store some objects in a <code>Vec</code> and efficiently retrieve them by the value of a field. In practice I want to index it by multiple fields, otherwise I could just use a <code>HashMap</code>. Neither the <code>Vec</code> nor the object fields will be changed later on.</p>\n\n<pre><code>use std::collections::HashMap;\n\npub struct Data {\n    attribute1: i64,\n    attribute2: String,\n}\n\npub struct IndexedVector&lt;'a&gt; {\n    data: Vec&lt;Data&gt;,\n    by_attribute1: HashMap&lt;i64, &amp;'a Data&gt;,\n}\n\nimpl&lt;'a&gt; IndexedVector&lt;'a&gt; {\n    pub fn new() -&gt; Self {\n        let mut res = Self {\n            data: vec![\n                Data {\n                    attribute1: 1,\n                    attribute2: \"foo\".into(),\n                },\n            ],\n            by_attribute1: HashMap::new(),\n        };\n        res.build_index();\n        res\n    }\n\n    fn build_index(&amp;mut self) {\n        for d in &amp;self.data {\n            self.by_attribute1.insert(d.attribute1, &amp;d);\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>It should be possible to do something like this, because the data array lives as as long as the references in the hash map. However, when trying to iterate over the objects in the data array I get the following error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for borrow expression due to conflicting requirements\n  --&gt; src/main.rs:29:18\n   |\n29 |         for d in &amp;self.data {\n   |                  ^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 28:5...\n  --&gt; src/main.rs:28:5\n   |\n28 | /     fn build_index(&amp;mut self) {\n29 | |         for d in &amp;self.data {\n30 | |             self.by_attribute1.insert(d.attribute1, &amp;d);\n31 | |         }\n32 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:29:18\n   |\n29 |         for d in &amp;self.data {\n   |                  ^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 13:1...\n  --&gt; src/main.rs:13:1\n   |\n13 | / impl&lt;'a&gt; IndexedVector&lt;'a&gt; {\n14 | |     pub fn new() -&gt; Self {\n15 | |         let mut res = Self {\n16 | |             data: vec![\n...  |\n32 | |     }\n33 | | }\n   | |_^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:30:53\n   |\n30 |             self.by_attribute1.insert(d.attribute1, &amp;d);\n   |                                                     ^^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 2, "creation_date": 1504271077, "post_id": 46000441, "comment_id": 78962160, "body": "How would you combine the <code>else</code> clauses in another language?"}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1504271333, "post_id": 46000441, "comment_id": 78962326, "body": "@kazemakase Instead of the if statement evaluating, it would be inside a function that returns something. The inner <code>if</code> clause would end with <code>return x;</code> and there would be no inner <code>else</code> clause."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504279764, "post_id": 46000441, "comment_id": 78967930, "body": "@yinnonsanders you know Rust has functions too right?"}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504279998, "post_id": 46000441, "comment_id": 78968040, "body": "@mcarton I do. Putting it in a function would not allow the if statement to use local variables in its environment, so that would change what the if statement can do."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1504280433, "post_id": 46000441, "comment_id": 78968313, "body": "You said that in another language, you would use a function. What feature of a fully imperative other languages Rust does not have that prevents you to do exactly the same?"}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504281004, "post_id": 46000441, "comment_id": 78968645, "body": "@mcarton I could, but I wanted to see if there&#39;s some way to not define a function for the reason I just mentioned."}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504281374, "post_id": 46000441, "comment_id": 78968847, "body": "@mcarton Python, for example, can capture variables from the environment in a function."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1504284396, "post_id": 46000441, "comment_id": 78970353, "body": "@yinnonsanders, your example for &quot;fully imperative language&quot; is a valid Rust code."}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1504284679, "post_id": 46000441, "comment_id": 78970507, "body": "@red75prime That&#39;s correct, but that would only work inside a function, not in an assignment to a variable"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504291505, "post_id": 46000441, "comment_id": 78973576, "body": "Also, anonymous functions with captures are not a feature of &quot;fully imperative language&quot;, but one of functionnal languages."}, {"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1504294035, "post_id": 46000441, "comment_id": 78974622, "body": "@mcarton That&#39;s a good point, what I&#39;m trying to do here is something that wouldn&#39;t really be possible in either a functional or an imperative language, but I was curious if there was some way to do so with Rust, since it has significant parts of both. It looks like it is."}], "answers": [{"comments": [{"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "edited": false, "score": 0, "creation_date": 1504285279, "post_id": 46004858, "comment_id": 78970803, "body": "Thank you! Although it could be even better to enclose it in parentheses and add <code>()</code> at the end so it evaluates immediately and the result is stored in <code>z</code>"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "reply_to_user": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "edited": false, "score": 0, "creation_date": 1504285703, "post_id": 46004858, "comment_id": 78971013, "body": "Thanks, fixed that."}], "tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1504291149, "last_edit_date": 1504291149, "creation_date": 1504284866, "answer_id": 46004858, "question_id": 46000441, "link": "https://stackoverflow.com/questions/46000441/combining-else-clauses-in-nested-if-statements-in-rust/46004858#46004858", "title": "Combining else clauses in nested if statements in Rust", "body": "<p>You can use a closure</p>\n\n<pre><code>let z = (|| {\n    if condition1 {\n        do_something();\n        if condition2 {\n            return x;\n        }\n    };\n    y \n})();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "edited": false, "score": 0, "creation_date": 1504294612, "post_id": 46006236, "comment_id": 78974825, "body": "Thanks for pointing me to the RFC! A lot of interesting use cases"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 3, "last_activity_date": 1504291962, "last_edit_date": 1504291962, "creation_date": 1504291135, "answer_id": 46006236, "question_id": 46000441, "link": "https://stackoverflow.com/questions/46000441/combining-else-clauses-in-nested-if-statements-in-rust/46006236#46006236", "title": "Combining else clauses in nested if statements in Rust", "body": "<p>You could use a <code>loop</code> with a <code>break</code> value:</p>\n\n<pre><code>let z = loop {\n    if condition1 {\n        do_something();\n        if condition2 {\n            break x;\n        }\n    }\n\n    break y;\n};\n</code></pre>\n\n<p>There is an <a href=\"https://github.com/rust-lang/rfcs/pull/2046\" rel=\"nofollow noreferrer\">RFC open now</a> about allowing regular blocks to do that to avoid this kind of never looping loop.</p>\n"}], "owner": {"reputation": 1611, "user_id": 8132795, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/872a2440abf9ac210274ed3d78c40a3b?s=128&d=identicon&r=PG&f=1", "display_name": "yinnonsanders", "link": "https://stackoverflow.com/users/8132795/yinnonsanders"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 636, "favorite_count": 0, "accepted_answer_id": 46004858, "answer_count": 2, "score": 2, "last_activity_date": 1504292496, "creation_date": 1504269441, "last_edit_date": 1504284850, "question_id": 46000441, "link": "https://stackoverflow.com/questions/46000441/combining-else-clauses-in-nested-if-statements-in-rust", "title": "Combining else clauses in nested if statements in Rust", "body": "<p>Is there an idiomatic way in Rust to do the following:</p>\n\n<pre><code>let z =\n    if (condition1) {\n        do_something();\n        if (condition2) {\n            x\n        } else {\n            y\n        }\n    } else {\n        y\n    }\n</code></pre>\n\n<p>Alternatively:</p>\n\n<pre><code>let z =\n    if (condition1 &amp;&amp; condition2) {\n        do_something();\n        x\n    } else if (condition1) {\n        do_something();\n        y\n    } else {\n        y\n    }\n</code></pre>\n\n<p>Of course, if this was a fully imperative language (and this was in a function), I could combine the two <code>else</code> clauses:</p>\n\n<pre><code>if (condition1) {\n    do_something();\n    if (condition2) {\n        return x;\n    }\n}\n\nreturn y;\n</code></pre>\n\n<p>But I cannot use:</p>\n\n<pre><code>let z =\n{\n    if (condition1) {\n        do_something();\n        if (condition2) {\n            return x;\n        }\n    }\n\n    return y;\n}\n</code></pre>\n\n<p>But since both the inner and the outer if statement (for the first example) must evaluate to an object of whatever type <code>T</code> is and cannot evaluate to <code>()</code>, that doesn't seem possible to use in all cases, for example, when you are defining a variable by the evaluation of the if-statement. Is there a better way?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1504258478, "post_id": 45997194, "comment_id": 78954426, "body": "Wasn&#39;t finished with my big answer, and it contains much the same content, so I will just add that one solution to the problem is to give <code>foo</code> a <code>Sized</code> constraint: <code>fn foo(&amp;self) where Self: Sized</code>. This means you can no longer call <code>foo</code> on a trait object reference, though."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1504258581, "post_id": 45997194, "comment_id": 78954496, "body": "I cut that from mine since the question wasn&#39;t &quot;how&quot;, but &quot;why&quot;.  But might as well."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504260589, "post_id": 45997194, "comment_id": 78955776, "body": "Ah didn&#39;t know that detail about thin and fat ptrs - i was thinking of C++ kind of layout. Makes sense now - Thanks ! Btw are these layouts (although they are compiler specific and not std in C++ as well but still would help visualise these kind of stuffs) and under the hood stuff detailed/documented somewhere ? Would love to read them."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 1, "creation_date": 1504260966, "post_id": 45997194, "comment_id": 78956010, "body": "@ustulation: Best bet would be to check <a href=\"https://doc.rust-lang.org/nomicon/\" rel=\"nofollow noreferrer\">The Rustonomicon</a>."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504281566, "post_id": 45997194, "comment_id": 78968963, "body": "@DK. Why is <code>self</code> inside the trait function <code>::foo</code> not a trait object ? How will dynamic dispatch be possible without it ? So say <code>::foo</code> called <code>self.bar()</code> inside it. Without <code>self</code> being a trait object (like <code>&amp;A</code>) how would the runtime know which <code>::bar</code> to call, the one with the default impl or the one that is overridden by the type implementing the trait ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504281725, "post_id": 45997194, "comment_id": 78969070, "body": "@ustulation: Assuming you mean <code>A::foo</code>, not <code>::foo</code>: because Rust <i>doesn&#39;t use</i> dynamic dispatch in that case.  Rust doesn&#39;t have inheritance, and the code actually implementing <code>A</code> knows what type <code>self</code> is, so there&#39;s no <i>need</i> for dynamic dispatch."}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504282377, "post_id": 45997194, "comment_id": 78969379, "body": "@DK. yes i meant <code>A::</code>, sorry. Ah so you mean the functions with default implementations defined in the trait have no physical existence and every impl of that trait by a concrete type will get separate copies of those (at different mem addresses) ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1504322202, "post_id": 45997194, "comment_id": 78980899, "body": "@ustulation: Yes.  Default implementations are copy+pasted into each concrete implementation."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 9, "last_activity_date": 1504258530, "last_edit_date": 1504258530, "creation_date": 1504258333, "answer_id": 45997194, "question_id": 45996828, "link": "https://stackoverflow.com/questions/45996828/why-does-self-require-a-constant-size-at-compile-time-for-calling-a-free-funct/45997194#45997194", "title": "Why does `Self` require a constant size at compile time for calling a free function but the equivalent trait function does not?", "body": "<p>Because the two want totally different things.</p>\n\n<p>The type of <code>self</code> inside of <code>A::foo</code> is <code>&amp;Self</code>, <strong>not</strong> <code>&amp;A</code>.  That is, it's a pointer to the implementing type, not a pointer to a trait object.  Calling <code>A::bar</code> is fine because it's just passing said pointer along, no extra work necessary.</p>\n\n<p>Calling <code>::bar</code> is a whole different cooking vessel of marine life.</p>\n\n<p>The problem boils down to how the compiler represents things.  Let's first consider the case where <code>Self</code> is a <code>Sized</code> type like <code>i32</code>.  This means <code>self</code> is a <code>&amp;i32</code>.  Recall that <code>&amp;A</code> is a trait object, and thus <em>effectively</em> has the following layout:</p>\n\n<pre><code>struct ATraitObject {\n    ptr: *const (),\n    vtable: *const AVtable,\n}\n</code></pre>\n\n<p><code>ATraitObject.ptr</code> needs to point to the actual value itself, and <code>ATraitObject.vtable</code> to the implementation of the trait for that type.  The compiler can fill this out with <code>ptr</code> being the existing <code>self</code> pointer, and <code>vtable</code> is filled with a pointer to wherever the <code>impl A for i32</code> vtable lives in memory.  With that, it can call <code>::bar</code>.</p>\n\n<p>Now consider the case where <code>Self</code> is <em>not</em> <code>Sized</code>, like <code>str</code>.  This means <code>self</code> is a \"fat\" pointer, and contains two pointer's worth of information: a pointer to the underlying data <em>and</em> the length of the string.  When the compiler goes to create the <code>ATraitObject</code>, it can set <code>ptr</code> to <code>self.as_ptr()</code>, and it can set <code>vtable</code>... but there's nowhere for it to store the string's length!</p>\n\n<p>All non-<code>Sized</code> types have this problem, as they all have extra information carried around in their pointers.  Incidentally, this <em>includes</em> trait objects like <code>&amp;A</code>, meaning that you also can't turn a trait object into <em>another</em> trait object, since you'd now need two vtables.</p>\n\n<p>That's the problem: the compiler simply has <em>no way</em> of turning <code>&amp;Self</code> where <code>Self: !Sized</code> into an <code>&amp;A</code>.  There's too much information contained in <code>self</code> and not enough space to store it in an <code>&amp;A</code>.</p>\n\n<hr>\n\n<p>To get the method to compile, add a <code>where Self: Sized</code> clause to the method definition.  This guarantees to the compiler that the method will never be called on non-<code>Sized</code> types, and thus it's free to assume the conversion from <code>&amp;Self</code> to <code>&amp;A</code> is always possible.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 827, "favorite_count": 1, "accepted_answer_id": 45997194, "answer_count": 1, "score": 5, "last_activity_date": 1504272999, "creation_date": 1504257130, "last_edit_date": 1504272999, "question_id": 45996828, "link": "https://stackoverflow.com/questions/45996828/why-does-self-require-a-constant-size-at-compile-time-for-calling-a-free-funct", "title": "Why does `Self` require a constant size at compile time for calling a free function but the equivalent trait function does not?", "body": "<p>These two functions, one trait and one free, seem to be similar but calling one of them (the trait function) is allowed while calling the other isn't:</p>\n\n<pre><code>trait A {\n    fn foo(&amp;self) {\n        bar(self);    // 1. Error: `Self` does not have a constant size known at compile-time\n        A::bar(self); // 2. This works\n    }\n\n    fn bar(&amp;self) {}\n}\n\nfn bar(_a: &amp;A) {}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=63a2b600173571118e34edec120ebd7f&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link for above</a>)</p>\n\n<p>I would have thought in both cases I'm accessing via a pointer whose size <em>is</em> known at compile time, so what is the difference and the explanation for this behaviour ?</p>\n\n<p>(Rust 1.19 stable)</p>\n"}, {"tags": ["go", "rust", "gtk3"], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 3, "last_activity_date": 1504255463, "creation_date": 1504255463, "answer_id": 45996360, "question_id": 45996219, "link": "https://stackoverflow.com/questions/45996219/does-it-matter-what-language-i-use-for-normal-gtk3-apps-will-a-user-notice-the/45996360#45996360", "title": "Does it matter what language I use for normal GTK3 apps? Will a user notice the difference?", "body": "<blockquote>\n  <p>Will gotk3 be fast enough for a good user experience?</p>\n</blockquote>\n\n<p>Yes. Unless you write a very specific program like for low latency trading, the language in which you write your app does not matter.</p>\n\n<p>Just pick up the language you prefer: Go, Rust, C, Python, D, etc. they are all used in various GNOME application without trouble.</p>\n\n<p>The thing that matters is the algorithm you use. If you use an O(n\u00b2) instead of an O(log n) algorithm for example, it will be bad in C, Rust and Go.</p>\n"}], "owner": {"reputation": 4893, "user_id": 899227, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/WHwW6.png?s=128&g=1", "display_name": "roeland", "link": "https://stackoverflow.com/users/899227/roeland"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "closed_date": 1504258257, "accepted_answer_id": 45996360, "answer_count": 1, "score": 0, "last_activity_date": 1504259145, "creation_date": 1504254952, "last_edit_date": 1504259145, "question_id": 45996219, "link": "https://stackoverflow.com/questions/45996219/does-it-matter-what-language-i-use-for-normal-gtk3-apps-will-a-user-notice-the", "closed_reason": "Needs more focus", "title": "Does it matter what language I use for normal GTK3 apps? Will a user notice the difference?", "body": "<p>I want to make an application with GTK3.\nThis will be an application to manage files (copy, move, ...) but mostly some windows with settings. (normal tabs, checkbox, selects, inputs, ...)\nI may also need some custom drawn widgets.</p>\n\n<p>As a language I would like to use Go because it is fast an simple to use. I tried the gotk3 library and the example seem to work fine on my macbook.</p>\n\n<p>But I'm a bit worried about performance. Because cgo is used to use the gtk libraries, will this make the application slow? Or is this still fast enough for normal applications.</p>\n\n<p>An alternative would be to use Rust. gtk-rs seems better then gotk3 because using c libraries in Rust is easier.</p>\n\n<p>(I have no experience with GTK, C, Rust)</p>\n\n<p>Will gotk3 be fast enough for a good user experience?<br>\nWill I notice a difference between gotk3 / gtk-rs / gtk in plain C ?</p>\n"}, {"tags": ["mongodb", "rust"], "answers": [{"comments": [{"owner": {"reputation": 115, "user_id": 4457879, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/0ePIB.png?s=128&g=1", "display_name": "dmnte", "link": "https://stackoverflow.com/users/4457879/dmnte"}, "edited": false, "score": 0, "creation_date": 1504232739, "post_id": 45992399, "comment_id": 78944926, "body": "ive tried enclosing the set in quotes and a bunch of other stuff and it still wont work, im starting to think its just broken. ive started trying to use the C wrapper but they havent got any examples and im still quite new to this."}, {"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "reply_to_user": {"reputation": 115, "user_id": 4457879, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/0ePIB.png?s=128&g=1", "display_name": "dmnte", "link": "https://stackoverflow.com/users/4457879/dmnte"}, "edited": false, "score": 0, "creation_date": 1504232964, "post_id": 45992399, "comment_id": 78944962, "body": "The code I pasted above compiles and runs on Rustc 1.19."}, {"owner": {"reputation": 115, "user_id": 4457879, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/0ePIB.png?s=128&g=1", "display_name": "dmnte", "link": "https://stackoverflow.com/users/4457879/dmnte"}, "edited": false, "score": 0, "creation_date": 1504234018, "post_id": 45992399, "comment_id": 78945142, "body": "the code compiles and runs for me also, but doesnt change the field, in the code im using &quot;1&quot; but in the db its just 1. does this matter ?"}, {"owner": {"reputation": 115, "user_id": 4457879, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/0ePIB.png?s=128&g=1", "display_name": "dmnte", "link": "https://stackoverflow.com/users/4457879/dmnte"}, "edited": false, "score": 0, "creation_date": 1504234723, "post_id": 45992399, "comment_id": 78945271, "body": "it works thanks for your help, that took so much longer than it should have."}], "tags": [], "owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "is_accepted": true, "score": 3, "last_activity_date": 1504273074, "last_edit_date": 1504273074, "creation_date": 1504231361, "answer_id": 45992399, "question_id": 45991698, "link": "https://stackoverflow.com/questions/45991698/updating-data-in-mongodb-with-rust/45992399#45992399", "title": "Updating data in MongoDB with Rust", "body": "<p>You're pretty much there. The following compiles and runs for me when I try your example (hint: You haven't enclosed \"$set\" in quotes):</p>\n\n<pre><code>#[macro_use(bson, doc)]\nextern crate bson;\nextern crate mongodb;\n\nuse mongodb::{Client, ThreadedClient};\nuse mongodb::db::ThreadedDatabase;\n\nfn main() {\n    let client = Client::connect(\"localhost\", 27017).unwrap();\n\n    let coll = client.db(\"tmp\").collection(\"tmp\");\n    let filter = doc!{\"DEVID\"=&gt;\"1\"};\n    let update = doc!{\"$set\" =&gt; {\"temp\"=&gt;\"5\"}};\n\n    coll.update_one(filter, update, None).unwrap();\n}\n</code></pre>\n\n<p>Another piece of advice: Using <code>unwrap</code> rather than <code>expect</code> might give you more precise errors.</p>\n\n<p>As for using the mongodb-library, I've stayed away from that as the authors explicitly say it's <a href=\"https://github.com/mongodb-labs/mongo-rust-driver-prototype#mongodb-rust-driver-prototype\" rel=\"nofollow noreferrer\">not production ready</a> and even the <code>update_one</code> example in their documentation is broken.</p>\n\n<p>Instead I've used the <a href=\"https://github.com/thijsc/mongo-rust-driver\" rel=\"nofollow noreferrer\">wrapper over the battle-tested C-library</a> with good results.</p>\n"}, {"tags": [], "owner": {"reputation": 316, "user_id": 4172752, "user_type": "registered", "accept_rate": 0, "profile_image": "https://graph.facebook.com/1379590286/picture?type=large", "display_name": "moy2010", "link": "https://stackoverflow.com/users/4172752/moy2010"}, "is_accepted": false, "score": 1, "last_activity_date": 1612719413, "creation_date": 1612719413, "answer_id": 66091038, "question_id": 45991698, "link": "https://stackoverflow.com/questions/45991698/updating-data-in-mongodb-with-rust/66091038#66091038", "title": "Updating data in MongoDB with Rust", "body": "<p>If someone is looking for the answer for a newer version of the driver, here it is based on @PureW's answer in an async version:</p>\n<pre><code>use mongodb::{Client, ThreadedClient, bson::doc};\nuse mongodb::db::ThreadedDatabase;\n\nasync fn main() {\n  let client = Client::connect(&quot;localhost&quot;, 27017).unwrap();\n\n  let coll = client.db(&quot;tmp&quot;).collection(&quot;tmp&quot;);\n  let filter = doc!{&quot;DEVID&quot;:&quot;1&quot;};\n  let update = doc!{&quot;$set&quot;: {&quot;temp&quot;:&quot;5&quot;}};\n\n  coll.update_one(filter, update, None).await.unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 115, "user_id": 4457879, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/0ePIB.png?s=128&g=1", "display_name": "dmnte", "link": "https://stackoverflow.com/users/4457879/dmnte"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1101, "favorite_count": 0, "accepted_answer_id": 45992399, "answer_count": 2, "score": 3, "last_activity_date": 1612719413, "creation_date": 1504224600, "last_edit_date": 1504229113, "question_id": 45991698, "link": "https://stackoverflow.com/questions/45991698/updating-data-in-mongodb-with-rust", "title": "Updating data in MongoDB with Rust", "body": "<p>I'm trying to update a field in a collection of a MongoDB database using Rust. I was using this code:</p>\n\n<pre><code>extern crate mongodb;\n\nuse mongodb::{Client, ThreadedClient};\nuse mongodb::db::ThreadedDatabase;\n\nfn main() {\n    let client = Client::connect(\"ipaddress\", 27017);\n\n    let coll = client.db(\"DEV\").collection(\"DEV\");\n    let film_a = doc!{\"DEVID\"=&gt;\"1\"};\n    let filter = film_a.clone();\n    let update = doc!{\"temp\"=&gt;\"5\"};\n\n    coll.update_one(filter, update, None).expect(\"failed\");\n}\n</code></pre>\n\n<p>This gives me an error saying update only works with the <code>$</code> operator, which after some searching seems to mean I should use <code>$set</code>. I've been trying different versions of this but only get mismatched type errors and such. </p>\n\n<pre><code>coll.update_one({\"DEVID\": \"1\"},{$set:{\"temp\" =&gt; \"5\"}},None).expect(\"failed\");\n</code></pre>\n\n<p>Where am I going wrong?</p>\n\n<p>The DB looks like this.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>db.DEVICES.find()\n\n{ \"_id\" : ObjectId(\"59a7bb747a1a650f1814ef85\"), \"DEVID\" : 1, \"temp\" : 0, \n\"room_temp\" : 0 }\n\n{ \"_id\" : ObjectId(\"59a7bb827a1a650f1814ef86\"), \"DEVID\" : 2, \"temp\" : 0, \n\"room_temp\" : 0 }\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "edited": false, "score": 0, "creation_date": 1504217941, "post_id": 45986049, "comment_id": 78941937, "body": "&quot;You may wish to add a new enum variant that represents the state when everything&#39;s been moved out but nothing has been moved back in yet.&quot; This was the part I needed to hear. Thank you!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1504197415, "last_edit_date": 1504197415, "creation_date": 1504196397, "answer_id": 45986049, "question_id": 45985827, "link": "https://stackoverflow.com/questions/45985827/how-can-i-replace-the-value-inside-a-mutex/45986049#45986049", "title": "How can I replace the value inside a Mutex?", "body": "<p>The question you are asking and the real inner problem have nothing intrinsically to do with a <code>Mutex</code>, once you have locked it and have a mutable reference or a type that implements <code>DerefMut</code>. </p>\n\n<p>You can assign a new value to the reference using the dereference operator <code>*</code>. If you need the previous value, you can use <a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"noreferrer\"><code>std::mem::replace</code></a>.</p>\n\n<pre><code>use std::sync::Mutex;\nuse std::mem;\n\nfn example_not_using_old_value(state: &amp;Mutex&lt;String&gt;) {\n    let mut state = state.lock().expect(\"Could not lock mutex\");\n    *state = String::from(\"dereferenced\");\n}\n\nfn example_using_old_value(state: &amp;Mutex&lt;String&gt;) -&gt; String {\n    let mut state = state.lock().expect(\"Could not lock mutex\");\n    mem::replace(&amp;mut *state, String::from(\"replaced\"))\n}\n\nfn main() {\n    let state = Mutex::new(\"original\".into());\n    example_not_using_old_value(&amp;state);\n    let was = example_using_old_value(&amp;state);\n\n    println!(\"Is now {:?}\", state);\n    println!(\"Was {:?}\", was);\n}    \n</code></pre>\n\n<p>We dereference the <code>MutexGuard&lt;T&gt;</code> to get a <code>T</code>, and take a mutable reference to that, yielding a <code>&amp;mut T</code> that we can call <code>mem::replace</code> with.</p>\n\n<hr>\n\n<p>Your broader problem is because you can't move out of borrowed content (see the <a href=\"https://stackoverflow.com/search?q=%5Brust%5D+is%3Aq+%22cannot+move+out+of+borrowed+content%22\">numerous Q&amp;A for that</a>). See these directly relevant Q&amp;A: </p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/36557412/155423\">Change enum variant while moving the field to the new variant</a></li>\n<li><a href=\"https://stackoverflow.com/q/42431973/155423\">Is it possible to switch variants in the value of a mutable reference to an enum?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29570781/155423\">Temporarily move out of borrowed content</a></li>\n</ul>\n\n<p>You may wish to add a new enum variant that represents the state when everything's been moved out but nothing has been moved back in yet. Then you can replace your value with that dummy and take ownership of the old value, performing your operations, then putting the new value back.</p>\n"}], "owner": {"reputation": 1087, "user_id": 3484614, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/PkfbT.jpg?s=128&g=1", "display_name": "Ben S", "link": "https://stackoverflow.com/users/3484614/ben-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4663, "favorite_count": 0, "accepted_answer_id": 45986049, "answer_count": 1, "score": 8, "last_activity_date": 1504197415, "creation_date": 1504195549, "last_edit_date": 1504195766, "question_id": 45985827, "link": "https://stackoverflow.com/questions/45985827/how-can-i-replace-the-value-inside-a-mutex", "title": "How can I replace the value inside a Mutex?", "body": "<p>I have a Git repository hidden behind a <code>Mutex</code>:</p>\n\n<pre><code>pub struct GitRepo {\n    contents: Mutex&lt;GitContents&gt;,\n    workdir: PathBuf,\n}\n</code></pre>\n\n<p>I want to query it, but only a maximum of once: after it's been queried, I want to just use the results we got the first time. A repository has either a <a href=\"https://docs.rs/git2/0.6.7/git2/struct.Repository.html\" rel=\"noreferrer\"><code>git2::Repository</code></a>, or a vector of results. A <code>Repository</code> is <code>Send</code> but not <code>Sync</code>.</p>\n\n<pre><code>enum GitContents {\n    Before { repo: git2::Repository },\n    After { statuses: Git },\n}\n\nstruct Git {\n    statuses: Vec&lt;(PathBuf, git2::Status)&gt;,\n}\n</code></pre>\n\n<p>The <code>GitContents</code> enum reflects the fact that we either have the repository to query, or the results of querying it, but never both.</p>\n\n<p>I'm trying to get Rust to enforce this property by having the function that turns a repository into statuses <em>consume</em> the repository as it produces the status vector:</p>\n\n<pre><code>fn repo_to_statuses(repo: git2::Repository, workdir: &amp;Path) -&gt; Git {\n    // Assume this does something useful...\n    Git { statuses: Vec::new() }\n}\n</code></pre>\n\n<p>However, I can't get the <code>Mutex</code> to play nice with this. Here is my attempt so far to write a function that queries a <code>GitRepo</code> with a predicate <code>P</code>, replacing the value inside the <code>Mutex</code> if it hasn't been queried yet:</p>\n\n<pre><code>impl GitRepo {\n    fn search&lt;P: Fn(&amp;Git) -&gt; bool&gt;(&amp;self, p: P) -&gt; bool {\n        use std::mem::replace;\n        // Make this thread wait until the mutex becomes available.\n        // If it's locked, it's because another thread is running repo_to_statuses\n        let mut contents = self.contents.lock().unwrap();\n        match *contents {\n            // If the repository has been queried then just use the existing results\n            GitContents::After { ref statuses } =&gt; p(statuses),\n            // If it hasn't, then replace it with some results, then use them.\n            GitContents::Before { ref repo } =&gt; {\n                let statuses = repo_to_statuses(*repo, &amp;self.workdir);\n                let result = p(&amp;statuses);\n                replace(&amp;mut *contents, GitContents::After { statuses });\n                result\n            },\n        }\n    }\n}\n</code></pre>\n\n<p>Although there is mutation involved, this method only takes <code>&amp;self</code> rather than <code>&amp;mut self</code> because it returns the same result regardless of whether the repository is being queried for the first or second time, even though there's more work being done on the first. But Rust complains:</p>\n\n<ul>\n<li>It refuses to move the <code>repo</code> out of the contents I've borrowed in <code>repo_to_statuses(*repo, &amp;self.workdir)</code>, even though I know the value should get replaced immediately afterwards. (\"cannot move out of borrowed content\")</li>\n<li>It doesn't like me <code>replace</code>-ing <code>&amp;mut *contents</code> either, because I'm borrowing the contents immutably as the value being <code>match</code>-ed. (\"cannot borrow 'contents' as mutable because it is also borrowed as immutable\")</li>\n</ul>\n\n<p>Is there any way to convince the borrow checker of my intentions?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1504184651, "creation_date": 1504184651, "answer_id": 45982149, "question_id": 45972772, "link": "https://stackoverflow.com/questions/45972772/how-can-i-generate-a-link-to-a-particular-route-in-iron/45982149#45982149", "title": "How can I generate a link to a particular route in Iron?", "body": "<p>Iron's <a href=\"https://crates.io/crates/router\" rel=\"nofollow noreferrer\">router</a> has two macros that work together.</p>\n\n<p><a href=\"https://docs.rs/router/0.5.1/router/macro.router.html\" rel=\"nofollow noreferrer\"><code>router!</code></a> allows you to define routes with a key:</p>\n\n<pre><code>let router = router!(index: get  \"/\"       =&gt; index,\n                     query: get  \"/:query\" =&gt; queryHandler,\n                     post:  post \"/\"       =&gt; postHandler);\n</code></pre>\n\n<p><a href=\"https://docs.rs/router/0.5.1/router/macro.url_for.html\" rel=\"nofollow noreferrer\"><code>url_for!</code></a> allows you to generate a URL for a key:</p>\n\n<pre><code>url_for!(request, \"foo\",\n         \"query\" =&gt; \"test\",\n         \"extraparam\" =&gt; \"foo\")\n</code></pre>\n"}], "owner": {"reputation": 15, "user_id": 8519547, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/9ff264e548e49ee351f7adbe7565fd8c?s=128&d=identicon&r=PG&f=1", "display_name": "Quma", "link": "https://stackoverflow.com/users/8519547/quma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1504184651, "creation_date": 1504150322, "question_id": 45972772, "link": "https://stackoverflow.com/questions/45972772/how-can-i-generate-a-link-to-a-particular-route-in-iron", "title": "How can I generate a link to a particular route in Iron?", "body": "<p>There's a table with a list of user on an html page. How can I generate a link to a page where I show an information about a single user?\n\"/users/:user_name\" ?</p>\n\n<p>I can hard-code it, of course. But I want to be safer by generating with help of Iron.</p>\n"}]