[{"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1472687181, "post_id": 39260533, "comment_id": 65857186, "body": "This question might be downvoted and/or closed: you are asking about a very fundamental feature of Rust, namely the <code>Option&lt;T&gt;</code> type. However, I couldn&#39;t find a question like this on SO, so it&#39;s not a duplicate (to my knowledge). So this question might be valid and worth answering. Then, however, you provided way too much (irrelevant) information. So you should simplify your example a whole lot."}], "answers": [{"comments": [{"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "edited": false, "score": 0, "creation_date": 1472688206, "post_id": 39260620, "comment_id": 65857460, "body": "thanks for answering. however why I still get this error. bear with me pls as Im just newbie in Rust no method named <code>add</code> found for type `std::option::Option&lt;Calculator_1&gt;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "edited": false, "score": 0, "creation_date": 1472688529, "post_id": 39260620, "comment_id": 65857537, "body": "@Omar How do you &quot;add&quot; using something that might be not present? Did you read <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html#composing-optiont-values\" rel=\"nofollow noreferrer\">the suggested chapter of the book</a>? You may also want to <a href=\"https://doc.rust-lang.org/stable/book/enums.html\" rel=\"nofollow noreferrer\">read up on enums</a>."}, {"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "edited": false, "score": 0, "creation_date": 1472688793, "post_id": 39260620, "comment_id": 65857608, "body": "Well my basic understanding is that the Option will either return Calculator_1 or wont return anything. if it returns Calculator_1, I have defined a method called add in it. So I thought I can just directly access it .."}, {"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "edited": false, "score": 1, "creation_date": 1472689048, "post_id": 39260620, "comment_id": 65857656, "body": "I have got it to work :) ,, thanks ... matched my result in enum :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1472686823, "creation_date": 1472686823, "answer_id": 39260620, "question_id": 39260533, "link": "https://stackoverflow.com/questions/39260533/is-it-possible-to-return-something-or-nothing/39260620#39260620", "title": "Is it possible to return something or nothing?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html\"><code>Option&lt;T&gt;</code></a>. An <code>Option&lt;T&gt;</code> can either hold <code>Some(T)</code> (some value of type <code>T</code>, where <code>T</code> is a generic type parameter) or <code>None</code> (no value).</p>\n\n<pre><code>fn login(self, username: Username, password: Password) -&gt; Option&lt;Calculator_1&gt; {\n    match self.ch.send(username.to_string()).send(password.to_string()).offer() {\n        Left(ch) =&gt; Some(Calculator_1::new(ch)),\n        Right(ch) =&gt; { ch.close(); None }\n    }        \n}\n</code></pre>\n\n<p>For more information, read the <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\"><em>Error Handling</em></a> chapter in <em>The Rust Programming Language</em>.</p>\n"}], "owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 578, "favorite_count": 0, "accepted_answer_id": 39260620, "answer_count": 1, "score": -1, "last_activity_date": 1472687723, "creation_date": 1472686120, "last_edit_date": 1472687723, "question_id": 39260533, "link": "https://stackoverflow.com/questions/39260533/is-it-possible-to-return-something-or-nothing", "title": "Is it possible to return something or nothing?", "body": "<p>Is it possible in Rust to make a function return either an object or nothing according to a condition defined within it? </p>\n\n<p>For example:</p>\n\n<pre><code>fn login(self, username: Username, password: Password) -&gt; Calculator_1 {\n        let ch = match self.ch.send(username.to_string()).send(password.to_string()).offer() {\n            Left(ch) =&gt; ch,\n            Right(ch) =&gt; { ch.close(); return }\n        };\n        Calculator_1::new(ch)\n    }\n</code></pre>\n\n<p>I'm using the session-types library in Rust, so I want the object to be returned only if the username and password are verified, which should go to the <code>Left</code> arm. If it's not verified, then it should go to the <code>Right</code> arm and close the program. I cannot really get this to work in terms of returning or not returning something.</p>\n"}, {"tags": ["c", "memory-management", "rust", "allocation"], "comments": [{"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1472649673, "post_id": 39250335, "comment_id": 65837339, "body": "<a href=\"https://www.reddit.com/r/rust/comments/2eqdg2/allocate_a_vec_on_cs_heap/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/2eqdg2/allocate_a_vec_on_cs_heap</a>  There are some thoughts on a similar topic, although the allocations lifetime management may be tricky."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1472651607, "post_id": 39250335, "comment_id": 65838804, "body": "As you point out, that topic is about making Rust use the same allocator as C. That&#39;s possible with <a href=\"https://doc.rust-lang.org/stable/book/custom-allocators.html\" rel=\"nofollow noreferrer\">custom allocators</a>."}], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1472650859, "post_id": 39250805, "comment_id": 65838200, "body": "You could in principle also store the allocation sizes in a <code>HashMap</code> or similar. I&#39;m not sure you&#39;d gain anything over overallocating and storing in the allocation, though (except for a better chance of detecting a bad <code>free</code> from the C side)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1472651493, "post_id": 39250805, "comment_id": 65838707, "body": "@ChrisEmerson good point! However, when I&#39;ve tried similar things in the past, I&#39;ve experienced abnormally poor performance. Without knowing exactly why, I think it has to do with poor cache locality. Multiple threads is also more painful with a shared collection."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1472998941, "post_id": 39250805, "comment_id": 65967807, "body": "UPD: Here is where I faced the C&#39;s unsafety. The called library code was using my <b>free_ext</b> implementation with a null pointer, so I had to add its check explicitly:      <code>if old.is_null() {      \tprintln!(&quot;no dealloc for empty pointer&quot;);     \treturn;     }     </code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1473014808, "post_id": 39250805, "comment_id": 65972712, "body": "@snuk182 I actually edited that in a few days ago ;-)"}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 1, "creation_date": 1473015639, "post_id": 39250805, "comment_id": 65972938, "body": "Btw, <a href=\"http://github.com/rust-lang/rust/issues/27700#issuecomment-16901471%E2%80%8C%E2%80%8B3\" rel=\"nofollow noreferrer\">Vec as allocator</a> approach also works. May be useful to the ones who don&#39;t want or cannot use unstable API."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 1, "creation_date": 1506611906, "post_id": 39250805, "comment_id": 79900495, "body": "Also, as <a href=\"https://github.com/rust-lang/rust/issues/32838\" rel=\"nofollow noreferrer\">new allocator API</a> has been introduced, the answer is also <a href=\"https://github.com/snuk182/nuklear-rust/commit/ca24f6ab463650f092ad98e5c8d7ae142d5dd8fd\" rel=\"nofollow noreferrer\">modified a bit</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1472662683, "last_edit_date": 1472662683, "creation_date": 1472649626, "answer_id": 39250805, "question_id": 39250335, "link": "https://stackoverflow.com/questions/39250335/how-do-i-use-the-rust-memory-allocator-for-a-c-library-that-can-be-provided-an-a/39250805#39250805", "title": "How do I use the Rust memory allocator for a C library that can be provided an allocator?", "body": "<p>It's not as easy as you might like.</p>\n\n<p>The allocation methods are exposed in the <a href=\"https://doc.rust-lang.org/alloc/heap/index.html\" rel=\"nofollow\"><code>heap</code> module of the <code>alloc</code> crate</a>.</p>\n\n<p>Creating some wrapper methods and populating the struct is straight-forward, but we quickly run into an issue:</p>\n\n<pre><code>#![feature(heap_api)]\n\nextern crate libc;\nextern crate alloc;\n\nuse libc::{c_void, c_uint};\nuse alloc::heap;\n\n#[repr(C)]\n#[derive(Copy, Clone, Debug, PartialEq)]\npub struct Allocator {\n    alloc: Option&lt;extern \"C\" fn(*mut c_void, c_uint) -&gt; *mut c_void&gt;,\n    free: Option&lt;extern \"C\" fn(*mut c_void)&gt;,\n}\n\n\nextern \"C\" fn alloc_ext(old: *mut c_void, size: c_uint) -&gt; *mut c_void {\n    if old.is_null() {\n        heap::allocate(size as usize, align) as *mut c_void\n    } else {\n        heap::reallocate(old as *mut u8, old_size, size as usize, align) as *mut c_void\n    }\n}\n\nextern \"C\" fn free_ext(old: *mut c_void) {\n    heap::deallocate(old as *mut u8, old_size, align);\n}\n\nfn main() {\n    Allocator {\n        alloc: Some(alloc_ext),\n        free: Some(free_ext),\n    };\n}\n</code></pre>\n\n<p>The Rust allocator expects to be told the size of any previous allocation as well as the desired alignment. The API you are matching doesn't have any way of passing that along.</p>\n\n<p>Alignment <em>should</em> (I'm not an expert) be OK to hardcode at some value, say 16 bytes. The size is trickier. You will likely need to steal some old C tricks and allocate a little bit extra space to store the size in. You can then store the size and return a pointer just past that.</p>\n\n<p>A <strong>completely untested</strong> example:</p>\n\n<pre><code>#![feature(alloc, heap_api)]\n\nextern crate libc;\nextern crate alloc;\n\nuse libc::{c_void, c_uint};\nuse alloc::heap;\nuse std::{mem, ptr};\n\n#[repr(C)]\n#[derive(Copy, Clone, Debug, PartialEq)]\npub struct Allocator {\n    alloc: Option&lt;extern \"C\" fn(*mut c_void, c_uint) -&gt; *mut c_void&gt;,\n    free: Option&lt;extern \"C\" fn(*mut c_void)&gt;,\n}\n\nconst ALIGNMENT: usize = 16;\n\nextern \"C\" fn alloc_ext(old: *mut c_void, size: c_uint) -&gt; *mut c_void {\n    unsafe {\n        // Should check for integer overflow\n        let size_size = mem::size_of::&lt;usize&gt;();\n        let size = size as usize + size_size;\n\n        let memory = if old.is_null() {\n            heap::allocate(size, ALIGNMENT)\n        } else {\n            let old = old as *mut u8;\n            let old = old.offset(-(size_size as isize));\n            let old_size = *(old as *const usize);\n            heap::reallocate(old, old_size, size, ALIGNMENT)\n        };\n\n        *(memory as *mut usize) = size;\n        memory.offset(size_size as isize) as *mut c_void\n    }\n}\n\nextern \"C\" fn free_ext(old: *mut c_void) {\n    if old.is_null() { return }\n\n    unsafe {\n        let size_size = mem::size_of::&lt;usize&gt;();\n\n        let old = old as *mut u8;\n        let old = old.offset(-(size_size as isize));\n        let old_size = *(old as *const usize);\n\n        heap::deallocate(old as *mut u8, old_size, ALIGNMENT);\n    }\n}\n\nfn main() {\n    Allocator {\n        alloc: Some(alloc_ext),\n        free: Some(free_ext),\n    };\n\n    let pointer = alloc_ext(ptr::null_mut(), 54);\n    let pointer = alloc_ext(pointer, 105);\n    free_ext(pointer);\n}\n</code></pre>\n\n<blockquote>\n  <p>Isn't [... <a href=\"http://github.com/rust-lang/rust/issues/27700#issuecomment-16901471%E2%80%8C%E2%80%8B3\" rel=\"nofollow\">using <code>Vec</code> as an allocator</a> ...] the more high-level solution? </p>\n</blockquote>\n\n<p>That's certainly possible, but I'm not completely sure how it would work with reallocation. You'd also have to keep track of the size and capacity of the <code>Vec</code> in order to reconstitute it to reallocate / drop it.</p>\n"}], "owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1019, "favorite_count": 0, "accepted_answer_id": 39250805, "answer_count": 1, "score": 6, "last_activity_date": 1472662683, "creation_date": 1472648293, "last_edit_date": 1472648813, "question_id": 39250335, "link": "https://stackoverflow.com/questions/39250335/how-do-i-use-the-rust-memory-allocator-for-a-c-library-that-can-be-provided-an-a", "title": "How do I use the Rust memory allocator for a C library that can be provided an allocator?", "body": "<p>I'm writing Rust bindings to a C library which has the option to use a third-party memory allocator. Its interface looks like this:</p>\n\n<pre><code>struct allocator {\n    void*(*alloc)(void *old, uint);\n    void(*free)(void*);\n};\n</code></pre>\n\n<p>The corresponding Rust struct is, I guess, the following:</p>\n\n<pre><code>#[repr(C)]\n#[derive(Copy, Clone, Debug, PartialEq)]\npub struct Allocator {\n    alloc: Option&lt;extern \"C\" fn(*mut c_void, c_uint) -&gt; *mut c_void&gt;,\n    free: Option&lt;extern \"C\" fn(*mut c_void)&gt;,\n}\n</code></pre>\n\n<p>How can I implement these two extern functions that should mimic the allocator? I did not find anything really looking like the allocator API in Rust (I understand why however), so I'm curious if it is possible.</p>\n"}, {"tags": ["sorting", "rust", "heapsort"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472648985, "post_id": 39250465, "comment_id": 65836856, "body": "I know about <code>slice::sort</code>. I just wanted to implement a heapsort (not necessarily from square one) and when I found <code>BinaryHeap</code> I thought I would give it a try. I was surprised that I couldn&#39;t make it work even though the docs state that &quot;converting a vector to a binary heap can be done in-place&quot;. I though I was missing something."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472735398, "post_id": 39250465, "comment_id": 65879385, "body": "@ljedrz: The &quot;in-place&quot; in this context refers to the buffer for the <code>Vec</code>&#39;s elements. The <code>BinaryHeap</code> just takes ownership of the <code>Vec</code> and modifies it to have the heap structure."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1472735997, "post_id": 39250465, "comment_id": 65879839, "body": "Thanks @sellibitze; I though in-place implied I could do it directly on a mutable reference."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1472650287, "last_edit_date": 1472650287, "creation_date": 1472648623, "answer_id": 39250465, "question_id": 39250324, "link": "https://stackoverflow.com/questions/39250324/in-place-heapsort-using-stdcollectionsbinaryheap/39250465#39250465", "title": "In-place heapsort using std::collections::BinaryHeap", "body": "<blockquote>\n  <p>I am having trouble creating one that works on a reference and can do it in-place</p>\n</blockquote>\n\n<p><code>BinaryHeap</code> <a href=\"https://github.com/rust-lang/rust/blob/1.11.0/src/libcollections/binary_heap.rs#L218-L220\" rel=\"nofollow\">is built on top of <code>Vec</code></a>. When you create a new heap from a <code>Vec</code>, you have to give it complete ownership. It will then ensure that the vector is in a good state to act as a heap.</p>\n\n<p>Since a <code>BinaryHeap</code> is not built on top of a <code>&amp;mut Vec</code> (which would mostly have horrible ergonomics), you cannot do that.</p>\n\n<p>It's unclear why you don't just use <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort\" rel=\"nofollow\"><code>slice::sort</code></a> on the vector.</p>\n\n<blockquote>\n  <p>the docs state that \"converting a vector to a binary heap can be done in-place\"</p>\n</blockquote>\n\n<p>To clarify, the documentation is correct - there's <a href=\"https://github.com/rust-lang/rust/blob/1.11.0/src/libcollections/binary_heap.rs#L1050-L1056\" rel=\"nofollow\">no extra memory allocation needed</a>, thus it is in-place. The important aspect is that the <code>BinaryHeap</code> <strong>owns</strong> its data and doesn't expose all the internals out to the world.</p>\n\n<p>What you are asking for is the ability to call <code>rebuild</code> on a user-supplied vector. To me, this has dubious usefulness, but you could always submit an RFC to expose it.</p>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472735917, "post_id": 39272377, "comment_id": 65879792, "body": "Is it preferable to do this instead of just <code>mem::swap(&amp;mut list, &amp;mut heap)</code> after creating the <code>BinaryHeap</code> (if <code>heapsort</code> consumed the <code>list</code>)?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472802627, "post_id": 39272377, "comment_id": 65908059, "body": "@ljedrz: You mean compared to the assignment <code>*list = ...</code>? Well, you could do <code>mem::swap(list, &amp;mut heap.into_sorted_vec())</code>. But why so complicated? The assignment is just fine. You could also do <code>mem::replace(list, heap.into_sorted_vec())</code> to &quot;replace it back&quot;. But that&#39;s not going to be different from the assignment in the end since we don&#39;t care about the return value of this last replace."}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 3, "last_activity_date": 1473257882, "last_edit_date": 1473257882, "creation_date": 1472735272, "answer_id": 39272377, "question_id": 39250324, "link": "https://stackoverflow.com/questions/39250324/in-place-heapsort-using-stdcollectionsbinaryheap/39272377#39272377", "title": "In-place heapsort using std::collections::BinaryHeap", "body": "<p>You can use <code>mem::replace</code> for \"moving\" something out from behind a <code>&amp;mut</code> reference:</p>\n\n<pre><code>use std::collections::BinaryHeap;\nuse std::mem;\n\nfn heapsort&lt;T: Ord&gt;(list: &amp;mut Vec&lt;T&gt;) {\n    let tmp = mem::replace(list, Vec::new());\n    let heap = BinaryHeap::from(tmp);\n    *list = heap.into_sorted_vec();\n}\n</code></pre>\n\n<p>So, for a short while <code>*list</code> is made equal to an empty vector. In this case it's ok because creating and dropping empty <code>Vec</code>s is very cheap.</p>\n\n<p>IIRC there is even a crate out there that helps borrowing some <code>*mutref</code> by value, without using a dummy value in-place during the borrow. But I can't find it right now. It would look something like this:</p>\n\n<pre><code>fn heapsort&lt;T: Ord&gt;(list: &amp;mut Vec&lt;T&gt;) {\n    borrow_by_value(list, |tmp| {\n        BinaryHeap::from(tmp).into_sorted_vec()\n    });\n}\n</code></pre>\n\n<p>where <code>borrow_by_value</code> uses some unsafe code (probably <code>ptr::read</code>) to give you the <code>Vec</code> by value and will put a <code>Vec</code> back to <code>*list</code> with some more unsafe code (probably <code>ptr::write</code>). The actual implementation might be a little more complicated to protect you from panics somehow. I don't know. And if not, you should probably avoid using it after all.</p>\n\n<p>Edit: The crate I was talking about is <a href=\"https://crates.io/crates/take_mut\" rel=\"nofollow\">take_mut</a>. There is even an <a href=\"https://github.com/ticki/rfcs/blob/replace_with/text/0000-mem-replace-with.md\" rel=\"nofollow\">RFC</a> to add something like this to <code>std::mem</code>.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 39250465, "answer_count": 2, "score": 0, "last_activity_date": 1473257882, "creation_date": 1472648274, "question_id": 39250324, "link": "https://stackoverflow.com/questions/39250324/in-place-heapsort-using-stdcollectionsbinaryheap", "title": "In-place heapsort using std::collections::BinaryHeap", "body": "<p>I'd like to create an in-place heapsort function in Rust. In the standard library I found <code>std::collections::BinaryHeap</code> that looked promising. I am able to use it to create a function consuming its argument:</p>\n\n<pre><code>use std::collections::BinaryHeap;\n\nfn heapsort&lt;T: Ord&gt;(list: Vec&lt;T&gt;) -&gt; Vec&lt;T&gt; {\n    let heap = BinaryHeap::from(list);\n    heap.into_sorted_vec()\n}\n</code></pre>\n\n<p>The docs state that \"converting a vector to a binary heap can be done in-place\", but I am having trouble creating one that works on a reference and can do it in-place (<code>heapsort&lt;T: Ord&gt;(list: &amp;mut Vec&lt;T&gt;)</code>). Can I achieve it using only <code>std::collections::BinaryHeap</code>?</p>\n"}, {"tags": ["rust", "mutex"], "comments": [{"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1472647370, "post_id": 39246458, "comment_id": 65835687, "body": "You could also use <code>mem::replace(&amp;mut *lines_result, Vec::new())</code> to move out the vector from behind a <code>&amp;mut</code> and replace it with an empty one."}], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 10, "last_activity_date": 1472638884, "creation_date": 1472638884, "answer_id": 39246962, "question_id": 39246458, "link": "https://stackoverflow.com/questions/39246458/unable-to-append-a-vector-in-a-mutex-to-another-vector/39246962#39246962", "title": "Unable to append a vector in a mutex to another vector", "body": "<p>You could <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\">use <code>Vec::drain()</code></a> to move out all its content into an iterator, so you could use it in <code>.extend()</code> and at the same time clearing the original vector.</p>\n\n<pre><code>move || {\n    let mut lines_result = lines_clone.lock().unwrap();\n    store.lines.extend(lines_result.drain(..));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 7, "last_activity_date": 1472639290, "creation_date": 1472639290, "answer_id": 39247109, "question_id": 39246458, "link": "https://stackoverflow.com/questions/39246458/unable-to-append-a-vector-in-a-mutex-to-another-vector/39247109#39247109", "title": "Unable to append a vector in a mutex to another vector", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.append\" rel=\"noreferrer\"><code>Vec::append()</code></a> to move all elements from one vector onto the end of another.</p>\n\n<pre><code>store.lines.append(&amp;mut lines_clone.lock().unwrap());\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 3, "last_activity_date": 1472648075, "last_edit_date": 1472648075, "creation_date": 1472642566, "answer_id": 39248288, "question_id": 39246458, "link": "https://stackoverflow.com/questions/39246458/unable-to-append-a-vector-in-a-mutex-to-another-vector/39248288#39248288", "title": "Unable to append a vector in a mutex to another vector", "body": "<p>Looking at the error you get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::sync::MutexGuard&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt;: std::iter::Iterator` is not satisfied [--explain E0277]\n  --&gt; &lt;anon&gt;:20:21\n   |&gt;\n20 |&gt;         store.lines.extend(lines_result); // This will not work\n   |&gt;                     ^^^^^^\nnote: `std::sync::MutexGuard&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt;` is not an iterator; maybe try calling `.iter()` or a similar method\nnote: required because of the requirements on the impl of `std::iter::IntoIterator` for `std::sync::MutexGuard&lt;'_, std::vec::Vec&lt;std::string::String&gt;&gt;`\n</code></pre>\n\n<p>So as you say, <code>MutexGuard</code> isn't an <code>Iterator</code>.  Much of the time, i.e. when you're calling a method on it, you can use a <code>MutexGuard&lt;T&gt;</code> in place of a <code>T</code> because it implements <code>Deref&lt;T&gt;</code> and the compiler will automatically dereference when needed.</p>\n\n<p>So one option is to explicitly dereference:</p>\n\n<pre><code>store.lines.extend(&amp;*lines_result);\n</code></pre>\n\n<p>This (partly) works because <code>&amp;*lines_result</code> is a reference to the underlying <code>Vec</code>, which implements <code>IntoIterator</code>.  However, I think it's more idiomatic and clear to call the <code>iter</code> method (which is effectively what the compiler will do with <code>IntoIterator</code>:</p>\n\n<pre><code>store.lines.extend(lines_result.iter());\n</code></pre>\n\n<p>However, this still doesn't compile as this iterator returns references to the contents, not the actual <code>String</code>s.  So we could work around this by asking for them to be cloned too:</p>\n\n<pre><code>store.lines.extend(lines_result.iter().cloned());\n</code></pre>\n\n<p>And this works, but is inefficient - it's allocating a new copy of each <code>String</code> in the <code>Vec</code>, just before discarding the originals anyway.  This is (as another answer has said) exactly what <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"nofollow\"><code>Vec::drain()</code></a> is for; it <em>moves</em> some or all of the items of the <code>Vec</code> into a new iterator which yields the values (not references).  <code>v.drain(..)</code> (using the <code>..</code> full range) takes all of them in one go, giving the final:</p>\n\n<pre><code>store.lines.extend(lines_result.drain(..));\n</code></pre>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1464, "favorite_count": 0, "accepted_answer_id": 39246962, "answer_count": 3, "score": 3, "last_activity_date": 1472648075, "creation_date": 1472637504, "last_edit_date": 1472647798, "question_id": 39246458, "link": "https://stackoverflow.com/questions/39246458/unable-to-append-a-vector-in-a-mutex-to-another-vector", "title": "Unable to append a vector in a mutex to another vector", "body": "<p>I have a <code>Vec&lt;String&gt;</code> object that's being shared between threads via an <code>Arc&lt;Mutex&gt;</code>. I want to take its current value and append it to another vector elsewhere and then clear it:</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Arc, Mutex};\n\nstruct Store {\n    lines: Vec&lt;String&gt;\n}\n\nfn main() {\n    let mut store = Store { lines: vec![] };\n\n    let lines = Arc::new(Mutex::new(vec![\"Initial value\".to_string()]));\n    let lines_clone = lines.clone();\n\n    let t2 = thread::spawn(move || {\n        // populate lines\n    });\n\n    let t1 = thread::spawn(move || {\n        let mut lines_result = lines_clone.lock().unwrap();\n        store.lines.extend(lines_result); // This will not work\n        lines_result.clear();\n    });\n\n    let _ = t1.join();\n    let _ = t2.join();\n}\n</code></pre>\n\n<p><code>extend</code> won't work because <code>lines_result</code> is actually a <code>MutexGuard</code> object. I can iterate over the object and append each element, but considering I'm clearing its values before it goes out of scope, is there a more efficient way?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1472634268, "post_id": 39244983, "comment_id": 65826419, "body": "@kennytm Actually I am insteresting what is going on if <code>extern crate</code> inside the function, because of I didn&#39;t meet such construction before."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1472641509, "post_id": 39244983, "comment_id": 65831609, "body": "Do you get two different versions of <code>syntex</code> in the <code>Cargo.lock</code> file?"}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1472643799, "post_id": 39244983, "comment_id": 65833134, "body": "@ChrisEmerson Yes, two versions of syntex and <code>syntex_something</code>"}], "answers": [{"comments": [{"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1472645214, "post_id": 39248815, "comment_id": 65834096, "body": "Sorry for not clear question. I know how to fix problem. What I do not know, what is going on from language point of view. How extern crate inside function pollete name space, what rules to assign names to the same types with different version?"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 0, "creation_date": 1472652650, "post_id": 39248815, "comment_id": 65839563, "body": "I&#39;ve made an edit which I hope will help.  The types are different because they&#39;re from different versions/instances of the same crate - nothing to do with &quot;extern crate&quot; being in main."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1472652560, "last_edit_date": 1472652560, "creation_date": 1472644069, "answer_id": 39248815, "question_id": 39244983, "link": "https://stackoverflow.com/questions/39244983/extern-crate-inside-main-method-moduletype-vs-mainmoduletype/39248815#39248815", "title": "Extern crate inside main method; module::Type vs main::module::Type", "body": "<p>As I understand it, Cargo allows several versions of a crate in the same project, which can happen if different dependencies require different versions.  If so, they will be treated as separate sets of modules and types - otherwise common versions use the same instance.</p>\n\n<p>At time of writing, diesel_codegen_syntex seems to want version syntex 0.42.0, where the build.rs is asking for version 0.38.0.  This means that the registry instantiated in build.rs's <code>main()</code> is <em>not</em> compatible with the type expected by <code>diesel_codegen_syntex::register()</code>.</p>\n\n<p>The fact that one is <code>main::syntex::Registry</code> is because the crate is imported into <code>main</code>'s scope rather than the global module/crate root; it's scoped like <code>use</code> or <code>let</code>.  If you move the <code>extern crate syntex;</code> to the top level outside main the types are still different, but confusingly the visible names are the same; the error then says:</p>\n\n<pre><code>build.rs:12:37: 12:50 note: expected type `&amp;mut syntex::Registry`\nbuild.rs:12:37: 12:50 note:    found type `&amp;mut syntex::Registry`\n</code></pre>\n\n<p>You can get around this problem by changing the version in the <code>[build-dependencies]</code> section of Cargo.toml to match; change:</p>\n\n<pre><code>syntex = { version = \"0.38.0\", optional = true }\n</code></pre>\n\n<p>to:</p>\n\n<pre><code>syntex = { version = \"0.42.0\", optional = true }\n</code></pre>\n\n<p>That gets <code>build.rs</code> to compile for me (it doesn't get as far as linking because I don't have the postgres libraries installed, though, so I can't guarantee there aren't futher issues).</p>\n"}], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 182, "favorite_count": 0, "accepted_answer_id": 39248815, "answer_count": 1, "score": 0, "last_activity_date": 1475347297, "creation_date": 1472633565, "last_edit_date": 1475347297, "question_id": 39244983, "link": "https://stackoverflow.com/questions/39244983/extern-crate-inside-main-method-moduletype-vs-mainmoduletype", "title": "Extern crate inside main method; module::Type vs main::module::Type", "body": "<p>I'm trying to build <a href=\"https://github.com/sgrif/diesel_demo\" rel=\"nofollow\">diesel_demo</a> with a stable compiler, not a nightly. Part of the <code>build.rs</code>, modified by me, is:</p>\n\n<pre><code>fn main() {\n    extern crate syntex;\n    extern crate diesel_codegen_syntex;\n    extern crate dotenv_codegen;\n\n    use std::env;\n    use std::path::Path;\n\n    let out_dir = env::var_os(\"OUT_DIR\").unwrap();\n    let mut registry = syntex::Registry::new();\n    diesel_codegen_syntex::register(&amp;mut registry);\n    dotenv_codegen::register(&amp;mut registry);\n\n    let src = Path::new(\"src/lib.in.rs\");\n    let dst = Path::new(&amp;out_dir).join(\"lib.rs\");\n\n    registry.expand(\"\", &amp;src, &amp;dst).unwrap();\n}\n</code></pre>\n\n<p>When building with Rust 1.11, I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [E0308]\n    diesel_codegen_syntex::register(&amp;mut registry);\n                                    ^~~~~~~~~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `&amp;mut syntex::Registry`\nnote:    found type `&amp;mut main::syntex::Registry`\nerror: mismatched types [E0308]\n    dotenv_codegen::register(&amp;mut registry);\n                             ^~~~~~~~~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `&amp;mut syntex::Registry`\nnote:    found type `&amp;mut main::syntex::Registry`\n</code></pre>\n\n<p>What is the <code>main::syntex::Registry</code> type, where did the compiler get it and why it is not the same thing as <code>syntex::Registry</code>? </p>\n\n<p>To reproduce this issue you need change <code>Cargo.toml</code> of <code>disel_demo</code>:</p>\n\n<pre><code>-default = [\"nightly\"]\n+default = [\"with-syntex\"]\n</code></pre>\n\n<p>and replace <code>diesel_codegen</code> with <code>diesel_codegen_syntex</code> in <code>build.rs</code></p>\n\n<p>It looks like there are two <code>syntex::Registry</code> types. I have no idea why, but because <code>diesel_codegen_syntex</code> depends on <code>syntex</code>, there may be two different versions of <code>syntex</code>?</p>\n"}, {"tags": ["types", "rust", "linear-algebra"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472619011, "post_id": 39240489, "comment_id": 65818545, "body": "<code>struct Vector3D(pub [f64; 3]);</code>, this seems to be a good start, however getting even basic traits like <code>Index</code> back isn&#39;t really obvious since it can&#39;t be derived."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1472615831, "creation_date": 1472615831, "answer_id": 39240489, "question_id": 39240360, "link": "https://stackoverflow.com/questions/39240360/idiomatic-way-to-declare-2d-3d-vector-types-in-rust/39240489#39240489", "title": "Idiomatic way to declare 2D, 3D vector types in Rust?", "body": "<p>I would recommend defining a <em>newtype</em>, i.e. a tuple struct with a single member.</p>\n\n<pre><code>struct Vector3D([f64; 3]); // wraps an array\nstruct Vector3D((f64, f64, f64)); // wraps a 3-tuple\n</code></pre>\n\n<p>The fields of a tuple struct can be accessed by using their position (starting from zero) as the name of the field. For example, if you have a variable <code>v</code> of type <code>Vector3D</code>, <code>v.0</code> would evaluate to the inner field. You can choose to make this field public or not; to make it public, add the keyword <code>pub</code> just before the name of the field's type.</p>\n\n<pre><code>struct Vector3D(pub [f64; 3]);\n</code></pre>\n\n<p>Note that this new <code>Vector3D</code> doesn't inherit any methods or traits from the wrapped type; it's up to you to provide whatever API you like on this type.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472619354, "post_id": 39240745, "comment_id": 65818642, "body": "Can you define operators such as <code>Add</code>, <code>Sub</code> on these types?, was part of the question, and attempting to do so gives errors."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472620710, "post_id": 39240745, "comment_id": 65819137, "body": "Simple impls work for me; can you show me the code that fails?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472622775, "post_id": 39240745, "comment_id": 65819914, "body": "Maybe worth including simple example in answer? - this is an example that fails. <a href=\"https://play.rust-lang.org/?gist=1cc78c4daff5e810e39beebc9bc20154&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472623368, "post_id": 39240745, "comment_id": 65820170, "body": "It&#39;s because the std::ops::Add trait is defined in a different crate; if you were to introduce your own trait in the same crate as Vector, it would work. This should not be a problem with a wrapper type, though."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472626620, "post_id": 39240745, "comment_id": 65821821, "body": "In addition, your example has one other error; you can see the isolated E0117 issue here: <a href=\"https://play.rust-lang.org/?gist=9f70f8b7fbeac99cc177ef918d53b07f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1472617702, "creation_date": 1472617702, "answer_id": 39240745, "question_id": 39240360, "link": "https://stackoverflow.com/questions/39240360/idiomatic-way-to-declare-2d-3d-vector-types-in-rust/39240745#39240745", "title": "Idiomatic way to declare 2D, 3D vector types in Rust?", "body": "<p>Like Francis said, you can use a wrapper type, but if you don't need it to be truly distinct from the other types and to be able take advantage of an existing type's methods, you can use a type alias:</p>\n\n<pre><code>type Vector3D = (f64, f64, f64);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>type Vector3D = [f64; 3];\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472625560, "post_id": 39242375, "comment_id": 65821184, "body": "Should I mentioned that I&#39;m <i>not</i> a developer or maintainer of <code>cgmath</code>? :P"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472625810, "post_id": 39242375, "comment_id": 65821335, "body": "Updated question to reference points <i>or</i> directions in space. Mainly because for the purpose of this question is not an important difference (even if they end up being two different types)."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1472647168, "last_edit_date": 1492085955, "creation_date": 1472625464, "answer_id": 39242375, "question_id": 39240360, "link": "https://stackoverflow.com/questions/39240360/idiomatic-way-to-declare-2d-3d-vector-types-in-rust/39242375#39242375", "title": "Idiomatic way to declare 2D, 3D vector types in Rust?", "body": "<p>This question is pretty <em>broad</em> and there isn't a clear best way to express what you want. It depends a lot on what you are planning to do with it.</p>\n\n<p>I would propose a slightly different solution compared to the other answers: use a struct with <code>x, y, z</code> components and use <strong>strong typing</strong> to the full extent.</p>\n\n<hr>\n\n<p>Vectors can be used to represent many things (points, colors, ...); you are talking about 2D and 3D points in space. The first thing to be aware of is the difference between point and direction vectors. <a href=\"https://math.stackexchange.com/a/645827/340615\">Here</a> is a great answer on math.stackexchange that explains the topic really well. </p>\n\n<p>This difference can be reflected in the type system to catch logic errors. That's exactly what <a href=\"https://crates.io/crates/cgmath\" rel=\"nofollow noreferrer\"><code>cgmath</code></a> is doing. So I'd say that you actually want <strong>two types</strong> defined something like this:</p>\n\n<pre><code>struct Point3 {\n    pub x: f32,\n    pub y: f32,\n    pub z: f32,\n}\n</code></pre>\n\n<ul>\n<li><em>Why no tuple struct or array?</em> The semantics of writing <code>v.x</code> are way clearer than <code>v.0</code> or <code>v[0]</code>. The latter two cases are fitting if you have a vector type to represent arbitrary data. But as I mentioned, I think strong typing is a good choice here and we should choose good names accordingly.</li>\n<li><em>Why <code>pub</code>?</em> Why not? If you are talking about points or directions in space, there are no invalid vectors (ignoring the <code>NaN</code> float value here). So there isn't really a reason to restrict access to the fields.</li>\n<li><em>Why <code>f32</code>?</em> Good question... actually you should probably use a type parameter, but then you need to have some kind of trait bound ...</li>\n</ul>\n\n<p>... well this brings me to my conclusion which you won't like: I think doing it correct and \"idiomatic\" requires some work in this case. And this work is properly done by libraries like <code>cgmath</code>. This <code>cgmath</code> library in particular has a very nice API design, IMO. Most functionality is implemented through traits (like <code>VectorSpace</code>) that reflect some of the maths behind it all. I, too, wanted to write vector types on my own for a project of mine, but I was eventually convinced to use a well tested, well designed library instead.</p>\n\n<hr>\n\n<p><strong>So how to do it \"right\"?</strong> Pretty much how <code>cgmath</code> does it:</p>\n\n<ul>\n<li>strong typing</li>\n<li>proper naming</li>\n<li>having most functionality in abstract traits </li>\n</ul>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1650, "favorite_count": 2, "accepted_answer_id": 39242375, "answer_count": 3, "score": 0, "last_activity_date": 1472647168, "creation_date": 1472614826, "last_edit_date": 1472627896, "question_id": 39240360, "link": "https://stackoverflow.com/questions/39240360/idiomatic-way-to-declare-2d-3d-vector-types-in-rust", "title": "Idiomatic way to declare 2D, 3D vector types in Rust?", "body": "<p>I'm looking to write some small library that use 2D and 3D points or directions in space <br>(vector in vector/matrix sense, not Rust's <code>Vec</code>).</p>\n\n<p>Rust doesn't impose rules here, so you can make a tuple of floats, or a new <code>struct</code> with <code>x, y, z</code> members. or a single <code>data: [f64; 3]</code> member.</p>\n\n<p>The reason I'd like to define a type here instead of using <code>[f64; 3]</code>, is so I can declare methods such as <code>length</code>, <code>normalized</code>, also <code>Add</code>, <code>Sub</code> operators.</p>\n\n<p>Whats a good basis to declare small 2D - 3D fixed sized data types on?</p>\n\n<hr>\n\n<p>Note, while there are good existing libraries, I'd like to write my own since it only needs some basic operations, and I like to understand whats going on internally.</p>\n"}, {"tags": ["rust", "visibility"], "comments": [{"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "edited": false, "score": 0, "creation_date": 1472578792, "post_id": 39233532, "comment_id": 65804814, "body": "I searched in Stackoverflow but could not find an answer. can u please send me the link ?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472601448, "post_id": 39233532, "comment_id": 65814709, "body": "The link is at the top of the question. You&#39;ll find a link like this on all questions marked as duplicate."}, {"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472683723, "post_id": 39233532, "comment_id": 65856292, "body": "But that does not really answer my question.."}, {"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472684388, "post_id": 39233532, "comment_id": 65856486, "body": "How about importing external crate ? for example if I wanna use session-types library. can I import it in a mod?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472689511, "post_id": 39233532, "comment_id": 65857764, "body": "I&#39;ve edited the linked answer, because although I think it <i>does</i> answer your question, perhaps you simply didn&#39;t understand it. :) Is it clearer now? Note that the linked question uses a module included from a separate file, while you use an inline module, but in Rust, there&#39;s no difference between the two."}, {"owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1472695171, "post_id": 39233532, "comment_id": 65859010, "body": "Yeah I have solved that problem already :) Thanks"}], "owner": {"reputation": 31, "user_id": 6721769, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd6f2fc1c8f27ef95178af27a44f726c?s=128&d=identicon&r=PG&f=1", "display_name": "Omar", "link": "https://stackoverflow.com/users/6721769/omar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 29, "favorite_count": 0, "closed_date": 1472578061, "answer_count": 0, "score": 0, "last_activity_date": 1472577942, "creation_date": 1472577686, "last_edit_date": 1472577942, "question_id": 39233532, "link": "https://stackoverflow.com/questions/39233532/using-libraries-within-module-in-rust", "closed_reason": "Duplicate", "title": "Using libraries within module in Rust", "body": "<p>I have code where I want to use a library but it seems like we cannot import libraries within <code>mod</code>? </p>\n\n<pre><code>mod A {\n    pub struct Circle {\n        x: f64,\n        y: f64,\n        radius: f64,\n    }\n\n    struct BigCircle {\n        x: f64,\n        y: f64,\n        radius: f64,\n    }\n\n    impl Circle {\n        pub fn new(x: f64, y: f64, radius: f64) -&gt; Circle {\n            Circle {\n                x: x,\n                y: y,\n                radius: radius,\n            }\n        }\n\n        pub fn area(&amp;self) -&gt; f64 {\n            std::f64::consts::PI * (self.radius * self.radius)\n        }\n\n        pub fn grow(&amp;self, increment: f64) -&gt; Circle {\n            // BigCircle { x: self.x, y: self.y, radius: self.radius + increment }\n            Circle::new(self.x, self.y, self.radius + increment)\n        }\n\n        pub fn print(&amp;self) {\n            println!(\"Im a Circle\");\n        }\n    }\n}\n\nfn main() {\n    let c = A::Circle::new(0.0, 0.0, 2.0);\n    println!(\"{}\", c.area());\n}\n</code></pre>\n\n<p>When I use this code it throws an error I because of the usage of <code>const</code>. if I don't put my code inside <code>mod</code>, everything works fine</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to resolve. Use of undeclared type or module `std::f64::consts` [--explain E0433]\n  --&gt; src/main.rs:27:13\n   |&gt;\n27 |&gt;             std::f64::consts::PI * (self.radius * self.radius)\n   |&gt;             ^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["functional-programming", "rust", "lifetime", "borrowing"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1472571812, "post_id": 39231801, "comment_id": 65800732, "body": "(FYI: Moving <code>acc +</code> to each branch works: <a href=\"https://play.rust-lang.org/?gist=95adc6ff8736d21b941a8a89ef67f582&amp;version=stable&amp;backtrace=0.\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>)"}, {"owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472572164, "post_id": 39231801, "comment_id": 65801010, "body": "Yes, it does. Must have been the last thing I didn&#39;t try before making this post. why though?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472572278, "post_id": 39231801, "comment_id": 65801094, "body": "It&#39;s because the lifetime of acc is greater than the match statement. A new string built in match only lives within its block."}, {"owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "edited": false, "score": 0, "creation_date": 1472572589, "post_id": 39231801, "comment_id": 65801323, "body": "Of course. thank you."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1472581191, "last_edit_date": 1495541697, "creation_date": 1472572556, "answer_id": 39232140, "question_id": 39231801, "link": "https://stackoverflow.com/questions/39231801/folding-over-references-inside-a-match-results-in-a-lifetime-error/39232140#39232140", "title": "Folding over references inside a match results in a lifetime error", "body": "<p>There are multiple solutions to your problem. But first some explanations:</p>\n\n<blockquote>\n  <p>If <code>to_string()</code> would have returned a <code>&amp;str</code> in the first place, the compiler would not have complained. Then, what is the difference?</p>\n</blockquote>\n\n<p>Suppose there is a method <code>to_str()</code> that returns a <code>&amp;str</code>. What would the signature look like?</p>\n\n<pre><code>fn to_str(&amp;self) -&gt; &amp;str {}\n</code></pre>\n\n<p>To better understand the issue, lets add explicit lifetimes (that are not necessary thanks to lifetime elision):</p>\n\n<pre><code>fn to_str&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a str {}\n</code></pre>\n\n<p>It becomes clear that the returned <code>&amp;str</code> lives as long as the receiver of the method (<code>self</code>). This would be OK since the receiver lives long enough for your <code>acc + ...</code> operation. In your case however, the <code>.to_string()</code> call creates a new object the only lives in the second match arm. After the arm's body is left, it will be destroyed. Therefore you can't pass a reference to it to the outer scope (in which <code>acc + ...</code> takes place).</p>\n\n<hr>\n\n<p>So <em>one</em> possible <strong>solution</strong> looks like this:</p>\n\n<pre><code>let s = vec.iter().fold(\n    String::new(), \n    |acc, e| {\n        acc + &amp;e.get_first()\n                .map(|f| f.to_string())\n                .unwrap_or(String::new())\n    }\n);\n</code></pre>\n\n<p>It's not optimal, but luckily your default value is an empty string and the owned version of an empty string (<code>String::new()</code>) does not require any heap allocations, so there is no performance penalty.</p>\n\n<p>However, we are still allocating once per integer. For a more efficient solution, see <a href=\"https://stackoverflow.com/a/39232212/2408867\">Matthieu M.'s answer</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1472577115, "post_id": 39232212, "comment_id": 65803915, "body": "You can use <code>String</code> with the <code>write!()</code> macro by using <code>std::fmt::Write</code> instead. This makes the code shorter. I&#39;d also prefer <code>if let Some(ref content) = e.get_first() { write!(...); } acc</code> to avoid &quot;returning&quot; <code>acc</code> twice.."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472579659, "post_id": 39232212, "comment_id": 65805303, "body": "@LukasKalbertodt: Much better!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1472581038, "last_edit_date": 1472581038, "creation_date": 1472572753, "answer_id": 39232212, "question_id": 39231801, "link": "https://stackoverflow.com/questions/39231801/folding-over-references-inside-a-match-results-in-a-lifetime-error/39232212#39232212", "title": "Folding over references inside a match results in a lifetime error", "body": "<p>There is a difference between the result of your branches:</p>\n\n<ul>\n<li><code>\"\"</code> is of type <code>&amp;'static str</code></li>\n<li><code>content</code> is of type <code>i32</code>, so you are converting it to a <code>String</code> and then from that to a <code>&amp;str</code>... but this <code>&amp;str</code> has the same lifetime as the <code>String</code> returned by <code>to_string</code>, which dies too early</li>\n</ul>\n\n<p>A quick work-around, as mentioned by @Dogbert, is to move <code>acc +</code> inside the branches:</p>\n\n<pre><code>let s: String = vec.iter().fold(\n    String::new(),\n    |acc, &amp;ref e| match e.get_first() {\n        None =&gt; acc,\n        Some(ref content) =&gt; acc + &amp;content.to_string(),\n    }\n);\n</code></pre>\n\n<p>However, it's a bit wasteful, because every time we have an integer, we are allocating a <code>String</code> (via <code>to_string</code>) just to immediately discard it.</p>\n\n<p>A better solution is to use the <code>write!</code> macro instead, which just appends to the original string buffer. This means there are no wasted allocations.</p>\n\n<pre><code>use std::fmt::Write;\n\nlet s = vec.iter().fold(\n    String::new(),\n    |mut acc, &amp;ref e| {\n        if let Some(ref content) = e.get_first() {\n            write!(&amp;mut acc, \"{}\", content).expect(\"Should have been able to format!\");\n        }\n        acc\n    }\n);\n</code></pre>\n\n<p>It's maybe a bit more complicated, notably because formatting adds in error handling, but is more efficient as it only uses a single buffer.</p>\n"}], "owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 39232212, "answer_count": 2, "score": 1, "last_activity_date": 1472581191, "creation_date": 1472571495, "last_edit_date": 1472572659, "question_id": 39231801, "link": "https://stackoverflow.com/questions/39231801/folding-over-references-inside-a-match-results-in-a-lifetime-error", "title": "Folding over references inside a match results in a lifetime error", "body": "<p>I want to build a string <code>s</code> by iterating over a vector of simple structs, appending different strings to <code>acc</code> depending on the struct.</p>\n\n<pre><code>#[derive(Clone, Debug)]\nstruct Point(Option&lt;i32&gt;, Option&lt;i32&gt;);\n\nimpl Point {\n\n    fn get_first(&amp;self) -&gt; Option&lt;i32&gt; {\n        self.0\n    }\n\n}\n\nfn main() {\n\n    let mut vec = vec![Point(None, None); 10];\n    vec[5] = Point(Some(1), Some(1));\n\n\n    let s: String = vec.iter().fold(\n        String::new(),\n        |acc, &amp;ref e| acc + match e.get_first() {\n            None =&gt; \"\",\n            Some(ref content) =&gt; &amp;content.to_string()\n        }\n    );\n\n    println!(\"{}\", s);\n\n}\n</code></pre>\n\n<p>Running this code results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n            Some(ref content) =&gt; &amp;content.to_string()\n                                  ^~~~~~~~~~~~~~~~~~~\nnote: reference must be valid for the expression at 21:22...\n        |acc, &amp;ref e| acc + match e.get_first() {\n                      ^\nnote: ...but borrowed value is only valid for the expression at 23:33\n            Some(ref content) =&gt; &amp;content.to_string()\n                                 ^~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>The problem is that the lifetime of the <code>&amp;str</code> I create seems to end immediately. However, if <code>to_string()</code> would have returned a <code>&amp;str</code> in the first place, the compiler would not have complained. Then, what is the difference?</p>\n\n<p>How can I make the compiler understand that I want the string references to live as long as I am constructing <code>s</code>?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472566052, "post_id": 39229593, "comment_id": 65796460, "body": "Or implement <code>Copy</code>."}, {"owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "edited": false, "score": 0, "creation_date": 1472566098, "post_id": 39229593, "comment_id": 65796497, "body": "How can I implement <code>Copy</code> of <code>T</code>?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472566576, "post_id": 39229593, "comment_id": 65796864, "body": "I added this information to the post."}, {"owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "edited": false, "score": 0, "creation_date": 1472567036, "post_id": 39229593, "comment_id": 65797206, "body": "Thank for your help. Following your recommendation, I realized with <code>clone</code> ."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1472566441, "last_edit_date": 1472566441, "creation_date": 1472565639, "answer_id": 39229593, "question_id": 39229365, "link": "https://stackoverflow.com/questions/39229365/how-to-return-value-with-no-cannot-move-out-of-borrowed-content-error/39229593#39229593", "title": "How to return value with no &#39;cannot move out of borrowed content&#39; error?", "body": "<p>You need to <code>clone</code> the object you want to return in order for that to be possible. This also means <code>T</code> needs to be <code>Clone</code>able. Consider the following code:</p>\n\n<pre><code>pub struct Foo&lt;T: Clone&gt; {\n    memory: Vec&lt;T&gt;\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; where T:Clone {\n    pub fn set(&amp;mut self, value: T) {\n        self.memory.push(value);\n    }\n\n    pub fn get(&amp;self, index: usize) -&gt; Option&lt;T&gt; {\n        Some(self.memory[index].clone())\n    }\n}\n</code></pre>\n\n<p>If this concerned an object that could be returned in full (unlike an element of a vector), you could create a method that moves the object, like so:</p>\n\n<pre><code>pub struct Foo&lt;T&gt; {\n    memory: T\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; {\n    pub fn get(self) -&gt; Option&lt;T&gt; {\n        Some(self.memory)\n    }\n}\n</code></pre>\n\n<p>Note that this time the argument is not <code>&amp;self</code>, but just <code>self</code>, so the ownership will be moved.</p>\n\n<p>You can also consider implementing <code>Copy</code> for <code>T</code>. In this case it will be passed to functions as value instead of reference like a primitive type, e.g. <code>i32</code>:</p>\n\n<pre><code>pub struct Foo&lt;T: Copy&gt; {\n    memory: Vec&lt;T&gt;\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; where T:Copy {\n    pub fn set(&amp;mut self, value: T) {\n        self.memory.push(value);\n    }\n\n    pub fn get(&amp;self, index: usize) -&gt; Option&lt;T&gt; {\n        Some(self.memory[index].clone())\n    }\n}\n</code></pre>\n\n<p>I would not recomment this, however, for memory-heavy objects or those whose ownership should for any reason be preserved/secured.</p>\n"}], "owner": {"reputation": 4223, "user_id": 710955, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/GvorM.png?s=128&g=1", "display_name": "LeMoussel", "link": "https://stackoverflow.com/users/710955/lemoussel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 0, "closed_date": 1472566155, "accepted_answer_id": 39229593, "answer_count": 1, "score": 2, "last_activity_date": 1472566836, "creation_date": 1472565006, "last_edit_date": 1472566836, "question_id": 39229365, "link": "https://stackoverflow.com/questions/39229365/how-to-return-value-with-no-cannot-move-out-of-borrowed-content-error", "closed_reason": "Duplicate", "title": "How to return value with no &#39;cannot move out of borrowed content&#39; error?", "body": "<p>I'm new to Rust and toying a bit with it. It's my first program, and it seems I've already encountered the dreaded borrow checker. :)</p>\n\n<pre><code>pub struct Foo&lt;T&gt; {\n    memory:  Vec&lt;T&gt;\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; { {\n    pub fn set(&amp;mut self, value: T) {\n        self.memory.push(value);\n    }\n\n    pub fn get(&amp;self, index: usize) -&gt; Option&lt;&amp;T&gt; {\n        Some(&amp;self.memory[index])\n    }\n}\n</code></pre>\n\n<p>It compiles just fine but I want to return value not reference from get function.</p>\n\n<p>If I do </p>\n\n<pre><code>pub fn get(&amp;self, index: usize) -&gt; Option&lt;T&gt; {\n    Some(*&amp;self.memory[index])\n}\n</code></pre>\n\n<p>Which fails with: </p>\n\n<p><code>error: cannot move out of borrowed content [E0507]\n  Some(*&amp;self.memory[index])</code></p>\n\n<p>I just have no idea why the borrow checker behaves this way. </p>\n\n<p>How can I return the value? Can anyone enlighten me?</p>\n\n<p><strong>Rem:</strong> It's not duplicate question. I don't ask someone explain what \"indexed content\" means but how to return value with no <code>cannot move out of borrowed content</code> error.</p>\n"}, {"tags": ["rust", "destructor", "exit"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1472563428, "post_id": 39228685, "comment_id": 65794470, "body": "I wouldn&#39;t worry about it if you don&#39;t handle any sensitive data or connections. You can see the remarks in <a href=\"http://stackoverflow.com/a/21570851/1870153\">stackoverflow.com/a/21570851/1870153</a>."}], "answers": [{"comments": [{"owner": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 1, "creation_date": 1472566006, "post_id": 39229209, "comment_id": 65796426, "body": "An extremely thorough and enlightening answer! I&#39;ve been using <code>panic!()</code> in different places when I found a syntax error in a file I&#39;m parsing, but I&#39;d like to avoid the <code>Thread &#39;main&#39; panicked...</code> noise and only present information about the problem I found. If all I have in my stack frames are simple data types like strings, chars, integers, a file that I&#39;m only reading from, simple enums and structs I defined myself, I almost dare to leave the cleanup to the OS."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 1, "creation_date": 1472566283, "post_id": 39229209, "comment_id": 65796646, "body": "@ThomasW use a <code>Result</code> to bubble non-programmer-logic errors back up to <code>main</code>, then use <code>std::process::exit</code> at the end of <code>main</code> if you want to control the exit code to the operating system. Use <code>panic!</code> for program-logic-errors."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 1, "creation_date": 1472571332, "post_id": 39229209, "comment_id": 65800427, "body": "@ThomasW What Shepmaster said. I think you should read <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">the &quot;Error Handling&quot; chapter in the Rust book</a>. Also: the <code>String</code> type sometimes feels &quot;simple&quot; but it&#39;s super complicated (UTF8/Unicode) and also implements <code>Drop</code> because the string buffer lives on the heap."}, {"owner": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 0, "creation_date": 1472573437, "post_id": 39229209, "comment_id": 65801871, "body": "@LukasKalbertodt I see the point about strings, but are there any dangers in letting the OS clean up their memory? I understood that <code>Result</code> is the cleanest way of handling this kind of errors. (Unless laziness kicks in, because that bubbling doesn&#39;t happen all by itself and needs to be implemented.)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 1, "creation_date": 1472574913, "post_id": 39229209, "comment_id": 65802722, "body": "@ThomasW No, the OS can clean up heap allocated memory without a problem. I wanted to draw attention to all other reasons for destructors that the OS may not be able to handle as well. And about laziness: unless already done, read the chapter. The Rust error handling is surprisingly elegant and often short. <code>try!()</code> and other tricks make this possible."}, {"owner": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 0, "creation_date": 1472592674, "post_id": 39229209, "comment_id": 65811970, "body": "@LukasKalbertodt In spite of the inner Schweinehund, I&#39;ll definitely read the error handling chapter."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "edited": false, "score": 0, "creation_date": 1472598678, "post_id": 39229209, "comment_id": 65814016, "body": "@ThomasW memory and file handles are easy things for the OS to handle (no pun intended). What&#39;s not handled by the OS are destructors that do things like finish writing buffered data to a file to leave it in a consistent state, for example."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1472595215, "last_edit_date": 1472595215, "creation_date": 1472564592, "answer_id": 39229209, "question_id": 39228685, "link": "https://stackoverflow.com/questions/39228685/when-is-stdprocessexit-o-k-to-use/39229209#39229209", "title": "When is `std::process::exit` O.K. to use?", "body": "<h3>Short answer:</h3>\n\n<ul>\n<li>rather use <a href=\"https://doc.rust-lang.org/std/macro.panic!.html\" rel=\"nofollow\"><code>panic!()</code></a> in nearly all cases</li>\n<li>you can pretty much <em>only</em> be sure that no destructors are left to run, if ...\n\n<ul>\n<li>... you are in the <code>main()</code> function</li>\n<li>... you manually handle the stack including unwinding (you're probably not...)</li>\n</ul></li>\n<li>sometimes you can just ignore destructors when exiting the program anyway, but you need to be careful!</li>\n</ul>\n\n<h3>Slightly longer explanation</h3>\n\n<blockquote>\n  <p>[...] for small tools it seems convenient.</p>\n</blockquote>\n\n<p>If you want to exit your program due to an unrecoverable error, the recommend way is to <a href=\"https://doc.rust-lang.org/std/macro.panic!.html\" rel=\"nofollow\"><code>panic!()</code></a>. This will unwind the stack (run all destructors) and exit the program with additional information (including the message string you can specify). </p>\n\n<blockquote>\n  <p>[...] if there are destructors left to run at a specific point and if I should care.</p>\n</blockquote>\n\n<p>There <em>are</em> destructors left to run if there are local variables that implement <a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\" rel=\"nofollow\"><code>Drop</code></a> in your current stack frame or in any stack frame above. A stack frame is a region in the stack memory that holds all local variable of a function call (loosely speaking). After a function exits, all local variables discarded which includes calling the destructor of all variables that implement <code>Drop</code>. </p>\n\n<p>The probability that some destructor needs to run grows with the depth of your stack (\"how many functions were called between <code>main()</code> and your current stack frame). Therefore it's really hard to reason about this whenever you are not in the <code>main()</code> function.</p>\n\n<hr>\n\n<p>When do types implement <code>Drop</code>? When it's wrong to just <em>ignore</em> them. Consider an <code>i32</code>: when we exit the function we can just... leave it in stack memory, because it doesn't have any negative side effects (ignoring the special case of data security for a moment). However, there are many types that do need to implement <code>Drop</code>. Here are a few categories:</p>\n\n<ul>\n<li>Allocating heap memory: <code>Box&lt;T&gt;</code>, <code>Vec&lt;T&gt;</code>, <code>HashMap&lt;T&gt;</code>, ...</li>\n<li>Holding OS resources: <code>File</code>, <code>Socket</code>, ...</li>\n<li>Returning handles: <code>Ref</code>, <code>MutexGuard</code>, ...</li>\n<li>...</li>\n</ul>\n\n<p>Not running the destructor for those has different effects. The first group is probably the most harmless one: we will leak memory. But when you exit your program, the operating system will clean up all this memory anyway. Nearly the same goes for OS resources: file descriptor are usually deleted by the operating system when a program exits.</p>\n\n<p>But there are more reasons to run a destructor. The important point to consider: you often don't know <em>why</em> certain types implement <code>Drop</code>, but these types do rely on it. Certain unwanted things <em>can</em> happen when you ignore this. Often you won't really notice, but sometimes it can lead to serious problems.</p>\n"}], "owner": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1060, "favorite_count": 0, "accepted_answer_id": 39229209, "answer_count": 1, "score": 6, "last_activity_date": 1472595215, "creation_date": 1472563234, "question_id": 39228685, "link": "https://stackoverflow.com/questions/39228685/when-is-stdprocessexit-o-k-to-use", "title": "When is `std::process::exit` O.K. to use?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/process/fn.exit.html\" rel=\"noreferrer\">documentation of <code>std::process::exit</code></a> says:</p>\n\n<blockquote>\n  <p>If a clean shutdown is needed it is recommended to only call this function at a known point where there are no more destructors left to run.</p>\n</blockquote>\n\n<p>Maybe due to my lack of systems programming background, I have no clue if there are destructors left to run at a specific point and if I should care.  The only thing that comes to my mind is pending write operations to a file (or to something else) where it's a good idea to leave things in a clean state.</p>\n\n<p>Anything else to watch out for?  I suspect it's not advisable to use in larger, more complex programs, but for small tools it seems convenient.</p>\n"}, {"tags": ["rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472553332, "post_id": 39225027, "comment_id": 65787764, "body": "will <code>array</code> be valid once the <code>vector</code> is destroyed? The idea is that <code>array</code> will own the data (I&#39;ll update the question)."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472554379, "post_id": 39225027, "comment_id": 65788401, "body": "@vinipsmaker: No. Therefore, keep the vector from being destroyed by <code>forget</code>ting it. See update."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 1, "creation_date": 1472556690, "post_id": 39225027, "comment_id": 65789928, "body": "Sorry, I&#39;m confused how the deallocation code would work within this approach. <code>into_boxed_slice</code> will return... what&#39;s the layout of that in memory? <code>boxed_slice.as_mut_ptr()</code> is guaranteed to return a pointer to the first char? How do I convert back to <code>Box&lt;[T]&gt;</code> so I can deallocate?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 2, "creation_date": 1472557150, "post_id": 39225027, "comment_id": 65790189, "body": "@vinipsmaker: (1) the layout is not specified. the current implementation uses <code>(ptr, len)</code>. (2) perhaps you should ask a new question. but you could try <code>slice::from_raw_parts_mut</code> and <code>Box::from_raw</code>, or use <code>Vec::from_raw_parts</code> but you need to pass the capacity as well."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 1, "creation_date": 1472557678, "post_id": 39225027, "comment_id": 65790551, "body": "How <code>slice::from_raw_parts</code> + <code>Box::from_raw</code> would be okay here? Isn&#39;t <code>Box::from_raw</code> getting a pointer to the stack-allocated slice and not the original slice? Or <code>Box&lt;[T]&gt;</code> is a special case?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472648448, "post_id": 39225027, "comment_id": 65836467, "body": "@vinipsmaker: The result of <code>slice::from_raw_parts_mut(array, array_len)</code> will refer to your heap-allocated memory. There is no stack allocation for any array involved here. And <code>Box::from_raw</code> will take ownership of it again so it&#39;ll be properly deallocated when it&#39;s dropped. But all this basically boils down to <code>Vec::from_raw_parts(array, array_len, array_len)</code> with the vec taking ownership of it again. BTW: <code>into_boxed_slice</code> is important here as it reduces the capacity to match the size. Otherwise you&#39;d need to remember the original capacity as well."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1472666462, "post_id": 39225027, "comment_id": 65848143, "body": "@sellibitze: can you link me to a reference? <code>Box::drop</code> is different than <code>slice::Drop</code> (I know <code>slice</code> is just a view and have no need to <code>drop</code>...).  As far as I see, unless <code>Box</code> gives special treatment to <code>slice</code>, it cannot know the <code>slice</code> heap-allocated content (pointers stored internally by <code>slice</code>). All <code>Box</code> should see is <code>slice</code> as an opaque box."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472731049, "post_id": 39225027, "comment_id": 65876119, "body": "@vinipsmaker: To be honest, I have trouble understanding where you think a problem is. <code>Box::from_raw</code> cannot know what the given pointer refers to. It just expects the pointer to come from some other <code>Box</code> that is now gone without having deallocated the pointee. So, you could feed it with some other pointer and violate this assumption. That&#39;s why this function is marked <code>unsafe</code>."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472791630, "post_id": 39225027, "comment_id": 65903156, "body": "If I understood correctly, <code>Box</code> is a smart pointer and it&#39;ll manage the heap-allocated memory. It&#39;ll use Rust&#39;s move semantics to move data from stack to heap without problems (there are no shared mutable state), but it&#39;s <code>Box</code> who will call deallocate. <code>Box&lt;T&gt;::into_raw</code> returns a pointer to <code>T</code> and it doesn&#39;t care about T&#39;s internal structure. <code>T</code>, in my case, is <code>slice</code> and AFAIK <code>Box</code> won&#39;t deallocate the region pointed by the <code>slice</code>. <code>slice</code> doesn&#39;t have <code>drop</code>. Only if <code>Box</code> gives special treatment to <code>slice</code> I can see how this work."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472792294, "post_id": 39225027, "comment_id": 65903336, "body": "I just can&#39;t see a guarantee I want on Rust for <code>Box&lt;T&gt;</code>: &lt;<a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/boxed/struct.Box.html</a>&gt;. C++ smart pointers are better documented. I can know exactly who is responsible to deallocate memory: &lt;<a href=\"http://en.cppreference.com/w/cpp/memory/unique_ptr\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/memory/unique_ptr</a>&gt;. I&#39;m using an unsafe API, there is a reason why I&#39;m worried. And Rust see memory leaks as safe (but realistically you&#39;d only need to worry if you need an unsafe API as well)."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472801553, "post_id": 39225027, "comment_id": 65907435, "body": "@vinipsmaker: <code>Box::from_raw</code> is like <code>unique_ptr</code>&#39;s constructor taking a raw pointer. <code>Box::into_raw</code> is like <code>unique_ptr::release</code>. So, given one box <code>b</code> you can do <code>Box::from_raw(b.into_raw())</code> which is similar to C++&#39;s <code>unique_ptr&lt;int&gt;(otherptr.release())</code> if <code>otherptr</code> is also a <code>unique_ptr&lt;int&gt;</code>. What your <code>T</code> is doesn&#39;t really matter. Both <code>unique_ptr</code> and <code>Box</code> support arrays as well: <code>unique_ptr&lt;int[]&gt;</code> or <code>Box&lt;[i32]&gt;</code>. This is properly deallocated/destroyed, too. You may be confusing this with a <i>borrowed</i> slice <code>&amp;[i32]</code> which is just a reference and dropping it doesn&#39;t do anything."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472801946, "post_id": 39225027, "comment_id": 65907670, "body": "@vinipsmaker: Also, a borrowed reference/slice coerces to a raw pointer. So, given a &quot;borrowed slice&quot; of type <code>&amp;mut [i32]</code> that&#39;s not really borrowed but the result of <code>slice::from_raw_parts_mut</code> you can stick it into <code>Box::from_raw</code> since it automatically turns into a <code>*mut [i32]</code>. The functions involved are all unsafe, of course, because it&#39;s easy to misuse. You must not use <code>Box::from_raw</code> with something that&#39;s already owned by something else or with something that requires a different kind of deallocation than what <code>Box</code> would be doing to release the memory."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472819269, "post_id": 39225027, "comment_id": 65918469, "body": "<i>What your T is doesn&#39;t really matter</i>... this is not true. <code>T</code> does matter. If the heap-allocated memory is pointed by an internal member of <code>T</code>, I don&#39;t even know what <code>Box</code> is managing (unless it gives special treatment to <code>T</code>, which would solve the problem). What <code>Box&lt;T&gt;</code> does know is a pointer to <code>slice</code>. It doesn&#39;t know the memory pointed by <code>slice</code>, which is the actual heap-allocated memory. Unless it gives special treatment to <code>slice</code>, which I cannot find on the reference documenation."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472819504, "post_id": 39225027, "comment_id": 65918609, "body": "<i>You may be confusing this with a borrowed slice <code>&amp;[i32]</code></i>. This actually can be an answer to my question. Thanks for the patience to discuss with me. Gonna read more about it."}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "reply_to_user": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1472819945, "post_id": 39225027, "comment_id": 65918891, "body": "@sellibitze: That&#39;s an excellent explanation. Would you mind to amend these comments to your answer?"}, {"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1473081086, "post_id": 39225027, "comment_id": 65994200, "body": "I created a new question just for the boxed slice discussion: <a href=\"http://stackoverflow.com/questions/39331341/how-to-pass-a-boxed-slice-boxt-to-a-c-function\" title=\"how to pass a boxed slice boxt to a c function\">stackoverflow.com/questions/39331341/&hellip;</a>"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 10, "last_activity_date": 1472555382, "last_edit_date": 1472555382, "creation_date": 1472552917, "answer_id": 39225027, "question_id": 39224904, "link": "https://stackoverflow.com/questions/39224904/how-to-expose-a-rust-vect-to-ffi/39225027#39225027", "title": "How to expose a Rust `Vec&lt;T&gt;` to FFI?", "body": "<p>You could <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.as_mut_ptr\" rel=\"noreferrer\">use <code>[T]::as_mut_ptr</code></a> to obtain the <code>*mut T</code> pointer directly from <code>Vec&lt;T&gt;</code>, <code>Box&lt;[T]&gt;</code> or any other DerefMut-to-slice types.</p>\n\n<pre><code>use std::mem;\n\nlet mut boxed_slice: Box&lt;[T]&gt; = vector.into_boxed_slice();\n\nlet array: *mut T = boxed_slice.as_mut_ptr();\nlet array_len: usize = boxed_slice.len();\n\n// Prevent the slice from being destroyed (Leak the memory).\nmem::forget(boxed_slice);\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "edited": false, "score": 0, "creation_date": 1472792625, "post_id": 39270881, "comment_id": 65903421, "body": "That&#39;s what I end up using: &lt;<a href=\"https://github.com/maidsafe/safe_core/pull/321/files#diff-6c72b345033f35005d017f9f5a1e1c9eR60\" rel=\"nofollow noreferrer\">github.com/maidsafe/safe_core/pull/321/&hellip;</a>&gt;. Except for the <code>assert!</code>, which I was thinking about using, but I wasn&#39;t confident/convinced enough."}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": true, "score": 23, "last_activity_date": 1525290760, "last_edit_date": 1525290760, "creation_date": 1472730836, "answer_id": 39270881, "question_id": 39224904, "link": "https://stackoverflow.com/questions/39224904/how-to-expose-a-rust-vect-to-ffi/39270881#39270881", "title": "How to expose a Rust `Vec&lt;T&gt;` to FFI?", "body": "<p>If you just want some C function to mutably borrow the <code>Vec</code>, you can do it like this:</p>\n\n<pre><code>extern \"C\" {\n    fn some_c_function(ptr: *mut i32, len: ffi::size_t);\n}\n\nfn safe_wrapper(a: &amp;mut [i32]) {\n    unsafe {\n        some_c_function(a.as_mut_ptr(), a.len() as ffi::size_t);\n    }\n}\n</code></pre>\n\n<p>Of course, the C function shouldn't store this pointer somewhere else because that would break aliasing assumptions.</p>\n\n<p>If you want to \"pass ownership\" of the data to C code, you'd do something like this:</p>\n\n<pre><code>use std::mem;\n\nextern \"C\" {\n    fn c_sink(ptr: *mut i32, len: ffi::size_t);\n}\n\nfn sink_wrapper(mut vec: Vec&lt;i32&gt;) {\n    vec.shrink_to_fit();\n    assert!(vec.len() == vec.capacity());\n    let ptr = vec.as_mut_ptr();\n    let len = vec.len();\n    mem::forget(vec); // prevent deallocation in Rust\n                      // The array is still there but no Rust object\n                      // feels responsible. We only have ptr/len now\n                      // to reach it.\n    unsafe {\n        c_sink(ptr, len as ffi::size_t);\n    }\n}\n</code></pre>\n\n<p>Here, the C function \"takes ownership\" in the sense that we expect it to eventually return the pointer and length to Rust, for example, by calling a Rust function to deallocate it:</p>\n\n<pre><code>#[no_mangle]\n/// This is intended for the C code to call for deallocating the\n/// Rust-allocated i32 array.\nunsafe extern \"C\" fn deallocate_rust_buffer(ptr: *mut i32, len: ffi::size_t) {\n    let len = len as usize;\n    drop(Vec::from_raw_parts(ptr, len, len));\n}\n</code></pre>\n\n<p>Because <code>Vec::from_raw_parts</code> expects three parameters, a pointer, a size and a capacity, we either have to keep track of the capacity as well somehow, or we use Vec's <code>shrink_to_fit</code> before passing the pointer and length to the C function. This might involve a reallocation, though.</p>\n"}], "owner": {"reputation": 1871, "user_id": 883113, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/af5ecb0a0194dc031a80074bbf9888b7?s=128&d=identicon&r=PG", "display_name": "vinipsmaker", "link": "https://stackoverflow.com/users/883113/vinipsmaker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8643, "favorite_count": 4, "accepted_answer_id": 39270881, "answer_count": 2, "score": 22, "last_activity_date": 1525290760, "creation_date": 1472552638, "last_edit_date": 1525290593, "question_id": 39224904, "link": "https://stackoverflow.com/questions/39224904/how-to-expose-a-rust-vect-to-ffi", "title": "How to expose a Rust `Vec&lt;T&gt;` to FFI?", "body": "<p>I'm trying to construct a pair of elements:</p>\n\n<ul>\n<li><code>array: *mut T</code></li>\n<li><code>array_len: usize</code></li>\n</ul>\n\n<p><code>array</code> is intended to own the data</p>\n\n<p>However, <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw\" rel=\"noreferrer\"><code>Box::into_raw</code></a> will return <code>*mut [T]</code>. I cannot find any info on converting raw pointers to slices. What is its layout in memory? How do I use it from C? Should I convert to <code>*mut T</code>? If so, how?</p>\n"}, {"tags": ["proxy", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1479384813, "creation_date": 1479384813, "answer_id": 40654600, "question_id": 39220694, "link": "https://stackoverflow.com/questions/39220694/cargo-on-windows-behind-a-corporate-proxy/40654600#40654600", "title": "Cargo on Windows behind a corporate proxy", "body": "<p>It appears that this is no longer an issue as of cargo 0.13 bundled with Rust 1.13 stable - I no longer need to manually download packages and put them in <code>paths</code> in cargo's config file.</p>\n"}, {"tags": [], "owner": {"reputation": 66, "user_id": 5152432, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8QRYF.jpg?s=128&g=1", "display_name": "Marco Carlo Moriggi", "link": "https://stackoverflow.com/users/5152432/marco-carlo-moriggi"}, "is_accepted": false, "score": 1, "last_activity_date": 1572681505, "creation_date": 1572681505, "answer_id": 58669270, "question_id": 39220694, "link": "https://stackoverflow.com/questions/39220694/cargo-on-windows-behind-a-corporate-proxy/58669270#58669270", "title": "Cargo on Windows behind a corporate proxy", "body": "<p>I had the same problem, and I solved simply setting environment variables <code>http_proxy</code> and <code>https_proxy</code> with <code>http(s)://user:password@proxy-address.xyz:port</code>.</p>\n\n<p>The only annoiyng part is that, when you need to unset the proxy (e.g. when you are smart-working from another network without using company's VPN) you have to unset / delete those variables.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3290, "favorite_count": 0, "accepted_answer_id": 40654600, "answer_count": 2, "score": 6, "last_activity_date": 1572681505, "creation_date": 1472540095, "last_edit_date": 1472565945, "question_id": 39220694, "link": "https://stackoverflow.com/questions/39220694/cargo-on-windows-behind-a-corporate-proxy", "title": "Cargo on Windows behind a corporate proxy", "body": "<p>I think this is a very common issue among those who want to use Cargo with Windows at work; I have seen multiple GitHub issues and forum posts related to it, but none of the answers solved my problems. </p>\n\n<p>Whenever I try to build some code pointing to a crates.io crate, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> Downloading &lt;package&gt;\nerror: unable to get packages from source\n\nCaused by:\n  failed to download package &lt;package&gt; from &lt;package address&gt;\n\nCaused by:\n  SSL connect error\n</code></pre>\n\n<p>What can I do to fix this? I know that Cargo can use the settings at <code>.cargo/config</code> and that the proxy details can be included there, but it doesn't work for me, with or without specifying the path for the certificate (I used the one distributed with curl), like below:</p>\n\n<pre><code>[http]\nproxy = \"http://user:password@proxy-address.xyz:port\"\ncainfo = \"cert.pem\"\n\n[https]\nproxy = \"https://user:password@proxy-address.xyz:port\"\ncainfo = \"cert.pem\"\n</code></pre>\n\n<p>The proxy specified in the config file works for any other purpose.</p>\n\n<p>I'm using Windows 7 64bit, Rust 1.11 GNU and Cargo bundled with it. How can I get this working? Currently I have to resort to downloading crate sources manually from their repositories and specifying <code>paths = [...]</code> for each of them in the Cargo config file.</p>\n"}, {"tags": ["assembly", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 496, "user_id": 8849904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e12464f6a0d1ea00fe20dabe06cea7?s=128&d=identicon&r=PG&f=1", "display_name": "davidanderle", "link": "https://stackoverflow.com/users/8849904/davidanderle"}, "edited": false, "score": 1, "creation_date": 1550356741, "post_id": 39220789, "comment_id": 96240321, "body": "Is there a way to change the assembly type? Say I want ARM instead of x86"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 496, "user_id": 8849904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e12464f6a0d1ea00fe20dabe06cea7?s=128&d=identicon&r=PG&f=1", "display_name": "davidanderle", "link": "https://stackoverflow.com/users/8849904/davidanderle"}, "edited": false, "score": 2, "creation_date": 1550395424, "post_id": 39220789, "comment_id": 96246394, "body": "@davidanderle Supply an ARM target to <code>cargo rustc</code>, e.g. <code>cargo rustc --target aarch64-apple-ios --release -- --emit asm</code>. The assembly will be in <code>target&#47;aarch64-apple-ios&#47;release&#47;deps&#47;*.s</code>."}, {"owner": {"reputation": 230, "user_id": 7844480, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/76ceafb6be72afbedb49299f60bff4fc?s=128&d=identicon&r=PG&f=1", "display_name": "Andru", "link": "https://stackoverflow.com/users/7844480/andru"}, "edited": false, "score": 1, "creation_date": 1554310215, "post_id": 39220789, "comment_id": 97707358, "body": "How to get intel asm?"}, {"owner": {"reputation": 2478, "user_id": 111471, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/ae8f3cb48d1150837d0dc5a221bb2d48?s=128&d=identicon&r=PG", "display_name": "sighol", "link": "https://stackoverflow.com/users/111471/sighol"}, "edited": false, "score": 8, "creation_date": 1558207465, "post_id": 39220789, "comment_id": 99026983, "body": "You can get intel syntax with  <code>cargo rustc -- --emit asm -C &quot;llvm-args=-x86-asm-syntax=intel&quot;</code>"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 70, "last_activity_date": 1590319304, "last_edit_date": 1590319304, "creation_date": 1472540354, "answer_id": 39220789, "question_id": 39219961, "link": "https://stackoverflow.com/questions/39219961/how-to-get-assembly-output-from-building-with-cargo/39220789#39220789", "title": "How to get assembly output from building with Cargo?", "body": "<p>You can use Cargo's <code>cargo rustc</code> command to send arguments to <code>rustc</code> directly:</p>\n\n<pre><code>cargo rustc -- --emit asm\nls target/debug/deps/&lt;crate_name&gt;-&lt;hash&gt;.s\n</code></pre>\n\n<p>For optimized assembly:</p>\n\n<pre><code>cargo rustc --release -- --emit asm\nls target/release/deps/&lt;crate_name&gt;-&lt;hash&gt;.s\n</code></pre>\n\n<p>If you see multiple <code>&lt;crate_name&gt;-&lt;hash&gt;-&lt;hash&gt;.rcgu.s</code> files instead of a <code>&lt;crate_name&gt;-&lt;hash&gt;.s</code> file, disable incremental compilation by setting the environment variable <code>CARGO_INCREMENTAL=0</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 41, "last_activity_date": 1496994115, "last_edit_date": 1496994115, "creation_date": 1482759671, "answer_id": 41332159, "question_id": 39219961, "link": "https://stackoverflow.com/questions/39219961/how-to-get-assembly-output-from-building-with-cargo/41332159#41332159", "title": "How to get assembly output from building with Cargo?", "body": "<p>In addition to kennytm's answer, you can also use the <code>RUSTFLAGS</code> environment variable and use the standard cargo commands:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>RUSTFLAGS=\"--emit asm\" cargo build\ncat target/debug/deps/project_name-hash.s\n</code></pre>\n\n<p>Or in release mode (with optimizations):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>RUSTFLAGS=\"--emit asm\" cargo build --release\ncat target/release/deps/project_name-hash.s\n</code></pre>\n\n<p>You can pass different values to the <code>--emit</code> parameter, <em>including</em> (but not limited to):</p>\n\n<ul>\n<li><code>mir</code> (Rust intermediate representation)</li>\n<li><code>llvm-ir</code> (LLVM intermediate representation)</li>\n<li><code>llvm-bc</code> (LLVM byte code)</li>\n<li><code>asm</code> (assembly)</li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 40, "last_activity_date": 1548080291, "last_edit_date": 1548080291, "creation_date": 1548065897, "answer_id": 54287770, "question_id": 39219961, "link": "https://stackoverflow.com/questions/39219961/how-to-get-assembly-output-from-building-with-cargo/54287770#54287770", "title": "How to get assembly output from building with Cargo?", "body": "<p>Both existing answers (using <code>cargo rustc</code> and <code>RUSTFLAGS</code>) are the best ways to obtain assembly with standard tools. If you find yourself trying to look at assembly fairly often, you might want to consider using <a href=\"https://github.com/gnzlbg/cargo-asm\" rel=\"noreferrer\"><strong>the <code>cargo asm</code> subcommand</strong></a>. After installing it with <code>cargo install cargo-asm</code>, you can print assembly like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo build --release\ncargo asm my_crate::my_function\n</code></pre>\n\n<p>There are a few things to pay attention to, though:</p>\n\n<ul>\n<li>Unsure about the path of your function? Just run <code>cargo asm</code> and it will list all symbols you can inspect.</li>\n<li>You have to <code>cargo build --release</code> before trying to look at the assembly, because <code>cargo asm</code> (apparently) only looks at the already existing build-artifacts</li>\n<li>The code for the function you want to inspect has to be actually generated. For generic functions this means that the function has to be instantiated/monomorphized with a concrete type. If that doesn't happen in your crate, you can always add a dummy function at the top level that does everything you want to inspect the assembly of. </li>\n</ul>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15958, "favorite_count": 9, "accepted_answer_id": 39220789, "answer_count": 3, "score": 51, "last_activity_date": 1590319304, "creation_date": 1472537463, "last_edit_date": 1472544322, "question_id": 39219961, "link": "https://stackoverflow.com/questions/39219961/how-to-get-assembly-output-from-building-with-cargo", "title": "How to get assembly output from building with Cargo?", "body": "<p>While I've seen docs on using <code>rustc</code> directly to output assembly, having to manually extract commands used by Cargo and edit them to write assembly is tedious.</p>\n\n<p>Is there a way to run Cargo that writes out assembly files?</p>\n"}, {"tags": ["pointers", "vector", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1472594193, "post_id": 39219667, "comment_id": 65812566, "body": "This is similar to <i><a href=\"https://stackoverflow.com/questions/38268529/how-to-get-the-byte-offset-between-str\">How to get the byte offset between <code>&amp;str</code></a></i> where the answer was \u201cjust convert to <code>usize</code>\u201d."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1483420278, "post_id": 39221566, "comment_id": 70079459, "body": "Enumerate is fine for the common case, however there are times where a function may (in a special case) - need to get the parent, then remove a reference from a vector. Where passing an index along is possible but inconvenient."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 4, "last_activity_date": 1472542886, "creation_date": 1472542886, "answer_id": 39221566, "question_id": 39219667, "link": "https://stackoverflow.com/questions/39219667/how-to-get-the-index-of-an-element-in-a-vector-using-pointer-arithmetic/39221566#39221566", "title": "How to get the index of an element in a vector using pointer arithmetic?", "body": "<p>There isn't a simpler way.  I think the reason is that it would be hard to guarantee that any operation or method that gave you that answer only allowed you to use it with the a <code>Vec</code> (or more likely slice) and something inside that collection; Rust wouldn't want to allow you to call it with a reference into a different vector.</p>\n\n<p>More idiomatic would be to avoid needing to do it in the first place. You can't store references into <code>Vec</code> anywhere very permanent away from the <code>Vec</code> anyway due to lifetimes, so you're likely to have the index handy when you've got the reference anyway.</p>\n\n<p>In particular, when iterating, for example, you'd use the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.enumerate\" rel=\"nofollow\"><code>enumerate</code></a> to iterate over pairs <code>(index, &amp;item)</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 70, "user_id": 2555814, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3f44254a2b99fef10f32a9495d115278?s=128&d=identicon&r=PG", "display_name": "ubsan", "link": "https://stackoverflow.com/users/2555814/ubsan"}, "edited": false, "score": 0, "creation_date": 1483424871, "post_id": 41437454, "comment_id": 70081254, "body": "I would generally recommend a <code>debug_assert</code> in <code>index_of_unchecked</code>."}], "tags": [], "owner": {"reputation": 70, "user_id": 2555814, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3f44254a2b99fef10f32a9495d115278?s=128&d=identicon&r=PG", "display_name": "ubsan", "link": "https://stackoverflow.com/users/2555814/ubsan"}, "is_accepted": true, "score": 2, "last_activity_date": 1496321449, "last_edit_date": 1496321449, "creation_date": 1483423925, "answer_id": 41437454, "question_id": 39219667, "link": "https://stackoverflow.com/questions/39219667/how-to-get-the-index-of-an-element-in-a-vector-using-pointer-arithmetic/41437454#41437454", "title": "How to get the index of an element in a vector using pointer arithmetic?", "body": "<p>So, given the issues which people have brought up with the pointers and stuff; the best way, imho, to do this is:</p>\n\n<pre><code>fn index_of_unchecked&lt;T&gt;(slice: &amp;[T], item: &amp;T) -&gt; usize {\n    if ::std::mem::size_of::&lt;T&gt;() == 0 {\n        return 0; // do what you will with this case\n    }\n    (item as *const _ as usize - slice.as_ptr() as usize)\n    / std::mem::size_of::&lt;T&gt;()\n}\n\n// note: for zero sized types here, you\n// return Some(0) if item as *const T == slice.as_ptr()\n// and None otherwise\nfn index_of&lt;T&gt;(slice: &amp;[T], item: &amp;T) -&gt; Option&lt;usize&gt; {\n    let ptr = item as *const T;\n    if\n        slice.as_ptr() &lt; ptr &amp;&amp; \n        slice.as_ptr().offset(slice.len()) &gt; ptr\n    {\n        Some(index_of_unchecked(slice, item))\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>although, if you want methods:</p>\n\n<pre><code>trait IndexOfExt&lt;T&gt; {\n    fn index_of_unchecked(&amp;self, item: &amp;T) -&gt; usize;\n    fn index_of(&amp;self, item: &amp;T) -&gt; Option&lt;usize&gt;;\n}\n\nimpl&lt;T&gt; IndexOfExt&lt;T&gt; for [T] {\n    fn index_of_unchecked(&amp;self, item: &amp;T) -&gt; usize {\n        // ...\n    }\n    fn index_of(&amp;self, item: &amp;T) -&gt; Option&lt;usize&gt; {\n        // ...\n    }\n}\n</code></pre>\n\n<p>and then you'll be able to use this method for any type that <code>Deref</code>s to <code>[T]</code></p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1294, "favorite_count": 1, "accepted_answer_id": 41437454, "answer_count": 2, "score": 1, "last_activity_date": 1496321449, "creation_date": 1472536281, "last_edit_date": 1483450576, "question_id": 39219667, "link": "https://stackoverflow.com/questions/39219667/how-to-get-the-index-of-an-element-in-a-vector-using-pointer-arithmetic", "title": "How to get the index of an element in a vector using pointer arithmetic?", "body": "<p>In C you can use the pointer offset to get index of an element within an array, e.g.:</p>\n\n<pre><code>index = element_pointer - &amp;vector[0];\n</code></pre>\n\n<p>Given a reference to an element in an array, this should be possible in Rust too.</p>\n\n<p>While Rust has the ability to get the memory address from vector elements, convert them to <code>usize</code>, then subtract them - is there a more convenient/idiomatic way to do this in Rust?</p>\n"}, {"tags": ["c", "rust", "ffi"], "comments": [{"owner": {"reputation": 594, "user_id": 6040113, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0a03cab99436994f7bc68df23f674729?s=128&d=identicon&r=PG&f=1", "display_name": "monkeyStix", "link": "https://stackoverflow.com/users/6040113/monkeystix"}, "edited": false, "score": 0, "creation_date": 1472531534, "post_id": 39218479, "comment_id": 65775703, "body": "how do you run the two programs? separately, or you run one from the other?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 1, "creation_date": 1472547162, "post_id": 39218479, "comment_id": 65783591, "body": "<code>CString::new(&quot;MBUF_POOL&quot;).unwrap().as_ptr()</code> looks dangerous. Are you sure that the raw pointer you get from this is valid long enough? TBH, I don&#39;t know when exactly this <code>CString</code> is dropped. If it&#39;s dropped <i>before</i> the function call to <code>dpdk_rte_pktmbuf_pool_create</code>, the pointer would be invalid. You really should avoid writing &quot;safe&quot; wrappers like <code>dpdk_rte_pktmbuf_pool_create</code> for FFI functions that aren&#39;t really safe!"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1472565111, "post_id": 39225302, "comment_id": 65795763, "body": "If only there was a <a href=\"https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.as_ptr\" rel=\"nofollow noreferrer\"><b>giant warning block on that function</b></a> to warn people about this..."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1472565871, "post_id": 39225302, "comment_id": 65796347, "body": "Or <a href=\"https://github.com/Manishearth/rust-clippy/wiki#temporary_cstring_as_ptr\" rel=\"nofollow noreferrer\">some tool able to warn about that</a> when we do it anyway. (disclaimer: I&#39;m a Clippy dev)"}, {"owner": {"reputation": 103, "user_id": 6479554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14e872b3f2f74039a9aa807bd2a36af1?s=128&d=identicon&r=PG&f=1", "display_name": "kentonspr", "link": "https://stackoverflow.com/users/6479554/kentonspr"}, "edited": false, "score": 0, "creation_date": 1472566705, "post_id": 39225302, "comment_id": 65796953, "body": "Thanks for the info, I have changed it to look like this -   <code>let name = CString::new(&quot;MBUF_POOL&quot;).unwrap();</code>  <code>let mb = dpdk::rte_mbuf::dpdk_rte_pktmbuf_pool_create(name.as_ptr(),    (8191 * nb_ports) as u32 , 250, 0, 2176, dpdk::rte_eal::dpdk_rte_socket_id());</code>  However, I&#39;m still getting the same behavior. I attempt to pass a pointer to a struct that contains the &quot;MBUF_POOL&quot; string, but it turns out NULL on C side."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1472567304, "post_id": 39225302, "comment_id": 65797413, "body": "I&#39;m not sure <code>Option&lt;*const _&gt;</code> makes a lot of sense in FFI. Remove the option."}, {"owner": {"reputation": 103, "user_id": 6479554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14e872b3f2f74039a9aa807bd2a36af1?s=128&d=identicon&r=PG&f=1", "display_name": "kentonspr", "link": "https://stackoverflow.com/users/6479554/kentonspr"}, "edited": false, "score": 0, "creation_date": 1472567629, "post_id": 39225302, "comment_id": 65797657, "body": "The C function taking the Option&lt;*const _&gt; accepts a pointer to a struct or NULL. Is there a way to pass NULL to C without using Option&lt;T&gt; and None?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1472570965, "post_id": 39225302, "comment_id": 65800195, "body": "<a href=\"https://doc.rust-lang.org/std/ptr/fn.null.html\" rel=\"nofollow noreferrer\"><code>*const T</code> already is a nullable pointer.</a>"}, {"owner": {"reputation": 103, "user_id": 6479554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14e872b3f2f74039a9aa807bd2a36af1?s=128&d=identicon&r=PG&f=1", "display_name": "kentonspr", "link": "https://stackoverflow.com/users/6479554/kentonspr"}, "edited": false, "score": 0, "creation_date": 1472575692, "post_id": 39225302, "comment_id": 65803103, "body": "Looks like that fixed it. After moving the string to a variable and removing the Option I no longer get the segfault. Thank you for the help on this, much appreciated."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1472567475, "last_edit_date": 1472567475, "creation_date": 1472553621, "answer_id": 39225302, "question_id": 39218479, "link": "https://stackoverflow.com/questions/39218479/raw-pointer-turns-null-passing-from-rust-to-c/39225302#39225302", "title": "Raw pointer turns null passing from Rust to C", "body": "<p><code>CString::new(\"\u2026\").unwrap().as_ptr()</code> does not work. The <code>CString</code> is temporary, hence the <code>as_ptr()</code> call returns the inner pointer of that temporary, which will likely be dangling when you use it. This is \u201csafe\u201d per Rust's definition of safety as long as you don't use the pointer, but you eventually do so in a <code>unsafe</code> block. You should bind the string to a variable and use <code>as_ptr</code> on that variable.</p>\n\n<p>This is such a common problem, there is even <a href=\"https://github.com/rust-lang/rfcs/pull/1642\" rel=\"nofollow\">a proposal to fix the <code>CStr{,ing}</code> API to avoid it</a>.</p>\n\n<p>Additionally raw pointer are nullable by themselves, so the Rust FFI equivalent of  <code>const struct rte_eth_rxconf *</code> would be <code>*const ffi::RteEthRxConf</code>, not <code>Option&lt;*const ffi::RteEthRxConf&gt;</code>.</p>\n"}], "owner": {"reputation": 103, "user_id": 6479554, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/14e872b3f2f74039a9aa807bd2a36af1?s=128&d=identicon&r=PG&f=1", "display_name": "kentonspr", "link": "https://stackoverflow.com/users/6479554/kentonspr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1140, "favorite_count": 0, "accepted_answer_id": 39225302, "answer_count": 1, "score": 4, "last_activity_date": 1472567475, "creation_date": 1472529038, "question_id": 39218479, "link": "https://stackoverflow.com/questions/39218479/raw-pointer-turns-null-passing-from-rust-to-c", "title": "Raw pointer turns null passing from Rust to C", "body": "<p>I'm attempting to retrieve a raw pointer from on C function in rust, and use that same raw pointer as an argument in another C function from another library. When I pass the raw pointer, I end up with a NULL pointer on the C side. </p>\n\n<p>I have tried to make a simplified version of my issue, but when I do it works as I would expect it to - </p>\n\n<p>C Code -</p>\n\n<pre><code>struct MyStruct {\n    int value;\n};\n\nstruct MyStruct * get_struct() {\n    struct MyStruct * priv_struct = (struct MyStruct*) malloc( sizeof(struct MyStruct));\n\n    priv_struct-&gt;value = 0;\n    return priv_struct;\n}\n\nvoid put_struct(struct MyStruct *priv_struct) {\n    printf(\"Value - %d\\n\", priv_struct-&gt;value);\n}\n</code></pre>\n\n<p>Rust Code -</p>\n\n<pre><code>#[repr(C)]\nstruct MyStruct {\n    value: c_int,\n}\n\nextern {\n    fn get_struct() -&gt; *mut MyStruct;\n}\n\nextern {\n    fn put_struct(priv_struct: *mut MyStruct) -&gt; ();\n}\n\nfn rust_get_struct() -&gt; *mut MyStruct {\n    let ret = unsafe { get_struct() };\n    ret\n}\n\nfn rust_put_struct(priv_struct: *mut MyStruct) {\n    unsafe { put_struct(priv_struct) };\n}\n\nfn main() {\n    let main_struct = rust_get_struct();\n    rust_put_struct(main_struct);\n}\n</code></pre>\n\n<p>When I run this I get the output of Value - 0 </p>\n\n<pre><code>~/Dev/rust_test$ sudo ./target/debug/rust_test \nValue - 0\n~/Dev/rust_test$\n</code></pre>\n\n<p>However, when trying to do this against a DPDK library, I retrieve and pass a raw pointer in the the same way but get a segfault. If I use gdb to debug, I can see that I'm passing a pointer on the Rust side, but I see it NULL on the C side -</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(gdb) frame 0\n#0  rte_eth_rx_queue_setup (port_id=0 '\\000', rx_queue_id=&lt;optimized out&gt;, nb_rx_desc=&lt;optimized out&gt;, socket_id=0, rx_conf=0x0, mp=0x0)\n   at /home/kenton/Dev/dpdk-16.07/lib/librte_ether/rte_ethdev.c:1216\n1216    if (mp-&gt;private_data_size &lt; sizeof(struct rte_pktmbuf_pool_private)) {\n\n(gdb) frame 1\n#1  0x000055555568953b in dpdk::ethdev::dpdk_rte_eth_rx_queue_setup (port_id=0 '\\000', rx_queue_id=0, nb_tx_desc=128, socket_id=0, rx_conf=None, \n   mb=0x7fff3fe47640) at /home/kenton/Dev/dpdk_ffi/src/ethdev/mod.rs:32\n32     let retc: c_int = unsafe {ffi::rte_eth_rx_queue_setup(port_id as uint8_t,\n</code></pre>\n\n<p>In frame 1, <strong>mb</strong> has an address and is being passed. In frame 0 the receiving function in the library is showing it as 0x0 for <strong>mp</strong>.</p>\n\n<p>My code to receive the pointer -</p>\n\n<pre><code>let mb = dpdk_rte_pktmbuf_pool_create(CString::new(\"MBUF_POOL\").unwrap().as_ptr(),\n       (8191 * nb_ports) as u32 , 250, 0, 2176, dpdk_rte_socket_id());\n</code></pre>\n\n<p>This calls into an ffi library -</p>\n\n<pre><code>pub fn dpdk_rte_pktmbuf_pool_create(name: *const c_char,\n                               n: u32,\n                               cache_size: u32,\n                               priv_size: u16,\n                               data_room_size: u16,\n                               socket_id: i32) -&gt; *mut rte_mempool::ffi::RteMempool {\n    let ret: *mut rte_mempool::ffi::RteMempool = unsafe {\n        ffi::shim_rte_pktmbuf_pool_create(name,\n                                          n as c_uint,\n                                          cache_size as c_uint,\n                                          priv_size as uint16_t,\n                                          data_room_size as uint16_t,\n                                          socket_id as c_int)\n    };\n    ret\n}\n</code></pre>\n\n<p>ffi - </p>\n\n<pre><code>extern {\n    pub fn shim_rte_pktmbuf_pool_create(name: *const c_char,\n                                        n: c_uint,\n                                        cache_size: c_uint,\n                                        priv_size: uint16_t,\n                                        data_room_size: uint16_t,\n                                        socket_id: c_int) -&gt; *mut rte_mempool::ffi::RteMempool;\n}\n</code></pre>\n\n<p>C function - </p>\n\n<pre><code>struct rte_mempool *\nrte_pktmbuf_pool_create(const char *name, unsigned n,\n    unsigned cache_size, uint16_t priv_size, uint16_t data_room_size,\n    int socket_id);\n</code></pre>\n\n<p>When I pass the pointer, it looks much the same as my simplified version up above. My variable <strong>mb</strong> contains a raw pointer that I pass to another function - </p>\n\n<pre><code>ret = dpdk_rte_eth_rx_queue_setup(port,q,128,0,None,mb);\n</code></pre>\n\n<p>ffi library - </p>\n\n<pre><code>pub fn dpdk_rte_eth_rx_queue_setup(port_id: u8,\n                                   rx_queue_id: u16,\n                                   nb_tx_desc: u16,\n                                   socket_id: u32,\n                                   rx_conf: Option&lt;*const ffi::RteEthRxConf&gt;,\n                                   mb_pool: *mut rte_mempool::ffi::RteMempool ) -&gt; i32 {\n    let retc: c_int = unsafe {ffi::rte_eth_rx_queue_setup(port_id as uint8_t,\n                                                          rx_queue_id as uint16_t,\n                                                          nb_tx_desc as uint16_t,\n                                                          socket_id as c_uint,\n                                                          rx_conf,\n                                                          mb)};\n    let ret: i32 = retc as i32;\n    ret\n}\n</code></pre>\n\n<p>ffi - </p>\n\n<pre><code>extern {\n    pub fn rte_eth_rx_queue_setup(port_id: uint8_t,\n                              rx_queue_id: uint16_t,\n                              nb_tx_desc: uint16_t,\n                              socket_id: c_uint,\n                              rx_conf: Option&lt;*const RteEthRxConf&gt;,\n                              mb: *mut rte_mempool::ffi::RteMempool ) -&gt; c_int;\n}\n</code></pre>\n\n<p>C function -</p>\n\n<pre><code>int\nrte_eth_rx_queue_setup(uint8_t port_id, uint16_t rx_queue_id,\n               uint16_t nb_rx_desc, unsigned int socket_id,\n               const struct rte_eth_rxconf *rx_conf,\n               struct rte_mempool *mp);\n</code></pre>\n\n<p>I apologize for the length, but I feel like I'm missing something simple and haven't been able to figure it out. I've checked struct alignment for each field that is being passed, and I even see values for the pointer that is received as I'd expect - </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(gdb) frame 1\n#1  0x000055555568dcf4 in dpdk::ethdev::dpdk_rte_eth_rx_queue_setup (port_id=0 '\\000', rx_queue_id=0, nb_tx_desc=128, socket_id=0, rx_conf=None, \n    mb=0x7fff3fe47640) at /home/kenton/Dev/dpdk_ffi/src/ethdev/mod.rs:32\n32      let retc: c_int = unsafe {ffi::rte_eth_rx_queue_setup(port_id as uint8_t,\n\n(gdb) print *mb\n$1 = RteMempool = {name = \"MBUF_POOL\", '\\000' &lt;repeats 22 times&gt;, pool_union = PoolUnionStruct = {data = 140734245862912}, pool_config = 0x0, \n  mz = 0x7ffff7fa4c68, flags = 16, socket_id = 0, size = 8191, cache_size = 250, elt_size = 2304, header_size = 64, trailer_size = 0, \n  private_data_size = 64, ops_index = 0, local_cache = 0x7fff3fe47700, populated_size = 8191, elt_list = RteMempoolObjhdrList = {\n    stqh_first = 0x7fff3ebc7f68, stqh_last = 0x7fff3fe46ce8}, nb_mem_chunks = 1, mem_list = RteMempoolMemhdrList = {stqh_first = 0x7fff3ebb7d80, \nstqh_last = 0x7fff3ebb7d80}, __align = 0x7fff3fe47700}\n</code></pre>\n\n<p>Any ideas on why the pointer is turning to NULL on the C side?</p>\n"}, {"tags": ["rust", "trait-objects"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1472515636, "creation_date": 1472515636, "answer_id": 39216977, "question_id": 39216874, "link": "https://stackoverflow.com/questions/39216874/how-do-you-create-a-boxt-when-t-is-a-trait-object/39216977#39216977", "title": "How do you create a Box&lt;T&gt; when T is a trait-object?", "body": "<p>The problem is actually quite simple: you have a trait object, and the only two things you know about this trait object are:</p>\n\n<ul>\n<li>its list of available methods</li>\n<li>the pointer to its data</li>\n</ul>\n\n<p>When you request to move this object to a different memory location (here on the heap), you are missing one <em>crucial</em> piece of information: <strong>its size</strong>.</p>\n\n<p>How are you going to know how much memory should be reserved? How many bits to move?</p>\n\n<p>When an object is <code>Sized</code>, this information is known at compile-time, so the compiler \"injects\" it for you. In the case of a trait-object, however, this information is unknown (unfortunately), and therefore this is not possible.</p>\n\n<p>It would be quite useful to make this information available and to have a polymorphic move/clone available, but this does not exist yet and I do not remember any proposal for it so far and I have no idea what the cost would be (in terms of maintenance, runtime penalty, ...).</p>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1516331341, "last_edit_date": 1516331341, "creation_date": 1472542394, "answer_id": 39221425, "question_id": 39216874, "link": "https://stackoverflow.com/questions/39216874/how-do-you-create-a-boxt-when-t-is-a-trait-object/39221425#39221425", "title": "How do you create a Box&lt;T&gt; when T is a trait-object?", "body": "<p>More about the <code>Sized</code> trait and bound - it's a rather special trait, which is <a href=\"https://doc.rust-lang.org/std/marker/trait.Sized.html\" rel=\"nofollow noreferrer\">implicitly added</a> to every function, which is why you don't see it listed in the prototype for <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.new\" rel=\"nofollow noreferrer\"><code>Box::new</code></a>:</p>\n\n<pre><code>fn new(x: T) -&gt; Box&lt;T&gt;\n</code></pre>\n\n<p>Notice that it takes <code>x</code> by value (or move), so you need to know how big it is to even call the function.</p>\n\n<p>In contrast, the <code>Box</code> type itself does <em>not</em> require <code>Sized</code>; it uses the (again special) trait bound <code>?Sized</code>, which means \"opt out of the default <code>Sized</code> bound\":</p>\n\n<pre><code>pub struct Box&lt;T&gt; where T: ?Sized(_);\n</code></pre>\n\n<p>If you look through, there is one way to create a <code>Box</code> with an unsized type:</p>\n\n<pre><code>impl&lt;T&gt; Box&lt;T&gt; where T: ?Sized\n....\n    unsafe fn from_raw(raw: *mut T) -&gt; Box&lt;T&gt;\n</code></pre>\n\n<p>so from unsafe code, you can create one from a raw pointer.  From then on, all the normal things work.</p>\n"}, {"tags": [], "owner": {"reputation": 6205, "user_id": 189767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/477570dc9d46773da1ec7234c2499272?s=128&d=identicon&r=PG", "display_name": "Andreas", "link": "https://stackoverflow.com/users/189767/andreas"}, "is_accepted": false, "score": 1, "last_activity_date": 1472778734, "last_edit_date": 1472778734, "creation_date": 1472761799, "answer_id": 39280390, "question_id": 39216874, "link": "https://stackoverflow.com/questions/39216874/how-do-you-create-a-boxt-when-t-is-a-trait-object/39280390#39280390", "title": "How do you create a Box&lt;T&gt; when T is a trait-object?", "body": "<p>I also want to post the answer, that one way to deal with this situation is</p>\n\n<pre><code>fn with_rng&lt;TRand: Rng&gt;(rng: &amp;TRand) -&gt; Self {\n    let r = Box::new(*rng);\n    Randomizer { rand: r }\n}\n</code></pre>\n\n<p>Rust's monomorphism will create the necessary implementation of <code>with_rng</code> replacing <code>TRand</code> by a concrete sized type. In addition, you may add a trait bound requiring <code>TRand</code> to be <code>Sized</code>.</p>\n"}], "owner": {"reputation": 6205, "user_id": 189767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/477570dc9d46773da1ec7234c2499272?s=128&d=identicon&r=PG", "display_name": "Andreas", "link": "https://stackoverflow.com/users/189767/andreas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1313, "favorite_count": 1, "accepted_answer_id": 39221425, "answer_count": 3, "score": 5, "last_activity_date": 1516331341, "creation_date": 1472514744, "last_edit_date": 1516330785, "question_id": 39216874, "link": "https://stackoverflow.com/questions/39216874/how-do-you-create-a-boxt-when-t-is-a-trait-object", "title": "How do you create a Box&lt;T&gt; when T is a trait-object?", "body": "<p>I have the following code</p>\n\n<pre><code>extern crate rand;\nuse rand::Rng;\n\npub struct Randomizer {\n    rand: Box&lt;Rng&gt;,\n}\n\nimpl Randomizer {\n    fn new() -&gt; Self {\n        let mut r = Box::new(rand::thread_rng()); // works\n        let mut cr = Randomizer { rand: r };\n        cr\n    }\n\n    fn with_rng(rng: &amp;Rng) -&gt; Self {\n        let mut r = Box::new(*rng); // doesn't work\n        let mut cr = Randomizer { rand: r };\n        cr\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>It complains that </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `rand::Rng: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:16:21\n   |\n16 |         let mut r = Box::new(*rng);\n   |                     ^^^^^^^^ `rand::Rng` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `rand::Rng`\n   = note: required by `&lt;std::boxed::Box&lt;T&gt;&gt;::new`\n</code></pre>\n\n<p>I don't understand why it requires <code>Sized</code> on <code>Rng</code> when <code>Box&lt;T&gt;</code> doesn't impose this on <code>T</code>.</p>\n"}, {"tags": ["rust", "channel"], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 3, "last_activity_date": 1472584780, "last_edit_date": 1472584780, "creation_date": 1472510316, "answer_id": 39216236, "question_id": 39216185, "link": "https://stackoverflow.com/questions/39216185/sending-channel-signal-from-a-closure/39216236#39216236", "title": "Sending channel signal from a closure", "body": "<p>You have declared that your <code>watch</code> function receives a closure of type <code>Fn(String)</code>. Usually a closure type includes its return type: <code>Fn(String) -&gt; SomeReturnType</code>. <code>Fn(String)</code> is equivalent to <code>Fn(String) -&gt; ()</code> and means that your closure should return an empty tuple <code>()</code>. <code>()</code> is often used similar to <code>void</code> in C.</p>\n\n<p>However, the closure you're trying to use (<code>|x| tx.send(x)</code>) returns <code>std::result::Result&lt;(), std::sync::mpsc::SendError&lt;std::string::String&gt;&gt;</code> instead. You can use <code>unwrap()</code> on the <code>Result</code> to check that the operation have succeded and to make the closure return <code>()</code>:</p>\n\n<pre><code>watch(|x| tx.send(x).unwrap());\n</code></pre>\n\n<p>Alternatively, you can declare <code>watch</code> function in such way so it can receive a closure returning any type:</p>\n\n<pre><code>fn watch&lt;F, R&gt;(callback: F)\n    where F: Fn(String) -&gt; R\n{\n    // ...\n}\n</code></pre>\n\n<p>But the <code>Result</code> should be checked anyway.</p>\n"}], "owner": {"reputation": 10805, "user_id": 262956, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/7515cb5c8df2d07f6d3780346ec0da92?s=128&d=identicon&r=PG", "display_name": "vise", "link": "https://stackoverflow.com/users/262956/vise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 0, "accepted_answer_id": 39216236, "answer_count": 1, "score": 0, "last_activity_date": 1472584780, "creation_date": 1472510008, "question_id": 39216185, "link": "https://stackoverflow.com/questions/39216185/sending-channel-signal-from-a-closure", "title": "Sending channel signal from a closure", "body": "<p>I'm trying to send a signal from within a closure, using the following code.</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc::channel;\n\nfn main() {\n    let (tx, rx) = channel();\n\n    let t1 = thread::spawn(move || {\n        watch(|x| tx.send(x));\n    });\n\n    let t2 = thread::spawn(move || {\n        println!(\"{:?}\", rx.recv().unwrap());\n    });\n\n    let _ = t1.join();\n    let _ = t2.join();\n}\n\nfn watch&lt;F&gt;(callback: F) where F : Fn(String) {\n    callback(\"hello world\".to_string());\n}\n</code></pre>\n\n<p>However, it fails compiling raising the following error:</p>\n\n<pre><code>src/test.rs:8:19: 8:29 note: expected type `()`\nsrc/test.rs:8:19: 8:29 note:    found type `std::result::Result&lt;(), std::sync::mpsc::SendError&lt;std::string::String&gt;&gt;`\n</code></pre>\n\n<p>Am I missing something?</p>\n"}, {"tags": ["generics", "types", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472498143, "post_id": 39213311, "comment_id": 65765760, "body": "Can you provide some additional information on what these impls are supposed to do? It&#39;s difficult to reason about this code."}, {"owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "edited": false, "score": 1, "creation_date": 1472503482, "post_id": 39213311, "comment_id": 65768524, "body": "Hm, I&#39;d test for myself if you had provided a complete example, but I guess maybe explicitly supplying type arguments to the <code>Box</code> constructor could help? <code>Foo::new().map(Box::&lt;SomeTrait&gt;::new)</code>?"}], "answers": [{"comments": [{"owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472503268, "post_id": 39213921, "comment_id": 65768423, "body": "Well, I can&#39;t edit the <code>make_*</code> methods, since they are part of two libraries. As to the <code>do_something</code>: The real functions in my code actually take <code>&amp;self</code>, i just tried to removed as much unnecassary context as possible, without realizing I actually broke something by that."}, {"owner": {"reputation": 1647, "user_id": 1429465, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8virG.jpg?s=128&g=1", "display_name": "Eric Y", "link": "https://stackoverflow.com/users/1429465/eric-y"}, "reply_to_user": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472504125, "post_id": 39213921, "comment_id": 65768788, "body": "Well in that case, it probably comes down to the compiler not being able to properly infer your map function. You could maybe try  `    let f: Option&lt;Box&lt;SomeTrait&gt;&gt; = Foo::make_foo(&quot;abc&quot;).and_then(|foo| -&gt; Option&lt;Box&lt;SomeTrait&gt;&gt; {         Some(Box::new(foo))     });`"}, {"owner": {"reputation": 1647, "user_id": 1429465, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8virG.jpg?s=128&g=1", "display_name": "Eric Y", "link": "https://stackoverflow.com/users/1429465/eric-y"}, "reply_to_user": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472504911, "post_id": 39213921, "comment_id": 65769145, "body": "I edited my answer to include that to make it a bit more readable."}, {"owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472505160, "post_id": 39213921, "comment_id": 65769261, "body": "That works. But if combined with e.g. a <code>match</code> (see my <i>edit</i> above), it also requires the <code>.and_then</code> part to be applied to each match-arm seperately, and cant be wrapped around the <code>match</code>."}, {"owner": {"reputation": 1647, "user_id": 1429465, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8virG.jpg?s=128&g=1", "display_name": "Eric Y", "link": "https://stackoverflow.com/users/1429465/eric-y"}, "reply_to_user": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472506530, "post_id": 39213921, "comment_id": 65769778, "body": "Right, in this case you would have to handle the and then within each branch of the match. You could potentially come up with a generic function that could clean it up, at least a little bit. I&#39;ll see if I can think of something for it."}, {"owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 1, "creation_date": 1472506984, "post_id": 39213921, "comment_id": 65769946, "body": "This should work: <code>fn repack&lt;T: SomeTrait + &#39;static&gt;(option: Option&lt;T&gt;) -&gt; Option&lt;Box&lt;SomeTrait&gt;&gt; {     option.and_then(|x| -&gt; Option&lt;Box&lt;SomeTrait&gt;&gt; {Some(Box::new(x))}) }</code>"}], "tags": [], "owner": {"reputation": 1647, "user_id": 1429465, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/8virG.jpg?s=128&g=1", "display_name": "Eric Y", "link": "https://stackoverflow.com/users/1429465/eric-y"}, "is_accepted": false, "score": 4, "last_activity_date": 1472504229, "last_edit_date": 1472504229, "creation_date": 1472499616, "answer_id": 39213921, "question_id": 39213311, "link": "https://stackoverflow.com/questions/39213311/generalising-over-two-structs/39213921#39213921", "title": "Generalising over two structs", "body": "<p>There are two general problems with this. The first is you need to have the object represented as a <code>Option&lt;Box&lt;SomeTrait&gt;&gt;</code> so setting your variable binding needs to be something like this <code>let f: Option&lt;Box&lt;SomeTrait&gt;&gt; = Some(Box::new(Foo::make_foo(\"abc\")));</code></p>\n\n<p>and you need to remove the option part from your make method so you can wrap it properly later.</p>\n\n<pre><code>impl Foo {\n    fn make_foo(a: &amp;str) -&gt; Foo {\n        Foo {}\n    }\n}\n</code></pre>\n\n<p>The ordering here is important. Option can't hold an unsized trait so it needs to wrap the box.</p>\n\n<p>Second is, a trait can not become a trait object if the trait has methods that don't reference <code>&amp;self</code></p>\n\n<p>A quick except from the rust error docs shows</p>\n\n<blockquote>\n  <p>Method has no receiver</p>\n  \n  <p>Methods that do not take a self parameter can't be called since there won't be a way to get a pointer to the method table for them.</p>\n</blockquote>\n\n<p>So for your trait methods you need </p>\n\n<pre><code>trait SomeTrait {\n    fn do_something(&amp;self);\n}\nimpl SomeTrait for Foo {\n    fn do_something(&amp;self) {  }\n}\nimpl SomeTrait for Bar {\n    fn do_something(&amp;self) {  }\n}\n</code></pre>\n\n<p>Edit:</p>\n\n<p>Since you can not change the make functions, another approach for mapping them properly is adding a return type to the lambda so it knows how to help the compiler agree with the type.</p>\n\n<pre><code>let f: Option&lt;Box&lt;SomeTrait&gt;&gt; = Foo::make_foo(\"abc\").and_then(|foo| -&gt; Option&lt;Box&lt;SomeTrait&gt;&gt; {\n    Some(Box::new(foo))\n});\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472507901, "post_id": 39215263, "comment_id": 65770260, "body": "You should consider outsourcing the <code>map(...)</code> part to a generic function, like described in the comments of the accepted answer."}, {"owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "reply_to_user": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472551133, "post_id": 39215263, "comment_id": 65786283, "body": "@jobach I added another implementation that does a little bit of that. At least the conversion is factored out to a supporting function (<code>impl From</code>). This solution looks a bit boiler-platey to me, but I don&#39;t know the real world situation this is going into, so it might work :P Anyway; I added it as a possible alternative to look at."}, {"owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "edited": false, "score": 0, "creation_date": 1472588807, "post_id": 39215263, "comment_id": 65810147, "body": "Even though the other answer was what inspired me for my own solution, this one addresses the problem from the question more directly, so I&#39;m going to mark this as the answer."}], "tags": [], "owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "is_accepted": true, "score": 3, "last_activity_date": 1472551437, "last_edit_date": 1472551437, "creation_date": 1472504960, "answer_id": 39215263, "question_id": 39213311, "link": "https://stackoverflow.com/questions/39213311/generalising-over-two-structs/39215263#39215263", "title": "Generalising over two structs", "body": "<p>I don't know if this is as beautiful as it gets, but I got this code working:</p>\n\n<pre><code>// Library part\nstruct Foo {}\nstruct Bar {}\n\nimpl Foo {\n    fn new() -&gt; Option&lt;Foo&gt; {Some(Foo {})}\n}\nimpl Bar {\n    fn new() -&gt; Option&lt;Bar&gt; {Some(Bar {})}\n}\n\n// My Part\ntrait SomeTrait {\n    fn do_something(&amp;self);\n}\nimpl SomeTrait for Foo {\n    fn do_something(&amp;self) {\n        println!(\"foo\")\n    }\n}\nimpl SomeTrait for Bar {\n    fn do_something(&amp;self) {\n        println!(\"bar\")\n    }\n}\n\nfn main () {\n    let b: Option&lt;Box&lt;SomeTrait&gt;&gt; = match \"x\" {\n        \"x\" =&gt; Foo::new().map(|x| Box::new(x) as Box&lt;SomeTrait&gt;),\n        _ =&gt; Bar::new().map(|x| Box::new(x) as Box&lt;SomeTrait&gt;)\n    };\n    b.unwrap().do_something();\n}\n</code></pre>\n\n<p>The change here is inside the calls to <code>map</code>. Instead of <code>Box::new</code>, <code>|x| Box::new(x) as Box&lt;SomeTrait&gt;</code>. This first creates a Box of the concrete type, and then casts it to the more generic Box type.</p>\n\n<hr>\n\n<p>I thought it might look more clean if I did the conversion by <code>.map(Into::into)</code>, but I'm not sure that panned out as well as hoped. I was surprised to find that there is no default implementation of <code>From</code> that does up-casting of <code>Box</code>. I got the following working, as another <a href=\"https://play.rust-lang.org/?code=%2F%2F%20Library%20part%0Astruct%20Foo%20%7B%7D%0Astruct%20Bar%20%7B%7D%0A%0Aimpl%20Foo%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Option%3CFoo%3E%20%7BSome(Foo%20%7B%7D)%7D%0A%7D%0Aimpl%20Bar%20%7B%0A%20%20%20%20fn%20new()%20-%3E%20Option%3CBar%3E%20%7BSome(Bar%20%7B%7D)%7D%0A%7D%0A%0A%2F%2F%20My%20Part%0Atrait%20SomeTrait%20%7B%0A%20%20%20%20fn%20do_something(%26self)%3B%0A%7D%0Aimpl%20SomeTrait%20for%20Foo%20%7B%0A%20%20%20%20fn%20do_something(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22foo%22)%0A%20%20%20%20%7D%0A%7D%0Aimpl%20SomeTrait%20for%20Bar%20%7B%0A%20%20%20%20fn%20do_something(%26self)%20%7B%0A%20%20%20%20%20%20%20%20println!(%22bar%22)%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%3C%27a%2C%20T%3E%20From%3CBox%3CT%3E%3E%20for%20Box%3CSomeTrait%2B%27a%3E%0A%20%20%20%20where%20T%20%3A%20SomeTrait%2B%27a%0A%7B%0A%20%20%20%20fn%20from(b%3A%20Box%3CT%3E)%20-%3E%20Box%3CSomeTrait%2B%27a%3E%20%7B%0A%20%20%20%20%20%20%20%20b%20as%20Box%3CSomeTrait%2B%27a%3E%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main%20()%20%7B%0A%20%20%20%20let%20b%3A%20Option%3CBox%3CSomeTrait%3E%3E%20%3D%20match%20%22x%22%20%7B%0A%20%20%20%20%20%20%20%20%22x%22%20%3D%3E%20Foo%3A%3Anew().map(Box%3A%3Anew).map(Into%3A%3Ainto)%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20Bar%3A%3Anew().map(Box%3A%3Anew).map(Into%3A%3Ainto)%0A%20%20%20%20%7D%3B%0A%20%20%20%20b.unwrap().do_something()%3B%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">alternative solution</a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; From&lt;Box&lt;T&gt;&gt; for Box&lt;SomeTrait+'a&gt;\n    where T : SomeTrait+'a\n{\n    fn from(b: Box&lt;T&gt;) -&gt; Box&lt;SomeTrait+'a&gt; {\n        b as Box&lt;SomeTrait+'a&gt;\n    }\n}\n\nfn main () {\n    let b: Option&lt;Box&lt;SomeTrait&gt;&gt; = match \"x\" {\n        \"x\" =&gt; Foo::new().map(Box::new).map(Into::into),\n        _ =&gt; Bar::new().map(Box::new).map(Into::into)\n    };\n    b.unwrap().do_something();\n}\n</code></pre>\n"}], "owner": {"reputation": 95, "user_id": 5132209, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/38729e465d6a211ca323d2edd0fadb53?s=128&d=identicon&r=PG&f=1", "display_name": "jobach", "link": "https://stackoverflow.com/users/5132209/jobach"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 149, "favorite_count": 0, "accepted_answer_id": 39215263, "answer_count": 2, "score": 2, "last_activity_date": 1472610315, "creation_date": 1472497190, "last_edit_date": 1472610315, "question_id": 39213311, "link": "https://stackoverflow.com/questions/39213311/generalising-over-two-structs", "title": "Generalising over two structs", "body": "<p>I have two independent libraries (distinct crates), each defining a struct and a function to build such a struct, if possible (for simplicity, I put everything into one module):</p>\n\n<pre><code>struct Foo {}\nstruct Bar {}\n\nimpl Foo {\n    fn make_foo(a: &amp;str) -&gt; Option&lt;Foo&gt; {\n        Some(Foo {})\n    }\n}\n\nimpl Bar {\n    fn make_bar(b: &amp;str) -&gt; Option&lt;Bar&gt; {\n        Some(Bar {})\n    }\n}\n</code></pre>\n\n<p>I now want to handle the two structs in the same way, independent of whether I actually have a <code>Foo</code> or a <code>Bar</code>:</p>\n\n<pre><code>trait SomeTrait {\n    fn do_something() -&gt; ();\n}\nimpl SomeTrait for Foo {\n    fn do_something() -&gt; () {\n        ()\n    }\n}\nimpl SomeTrait for Bar {\n    fn do_something() -&gt; () {\n        ()\n    }\n}\n</code></pre>\n\n<p>Since the size of <code>SomeTrait</code> is unknown at compile time, I can't simply <code>let a: Option&lt;SomeTrait&gt; = Foo::make_foo(\"abc\")</code>. So I tried wrap it in a <code>Box</code> (<em>before</em> unpacking the <code>Option</code>):</p>\n\n<pre><code>fn main() {\n    let f: Option&lt;Box&lt;SomeTrait&gt;&gt; = Foo::make_foo(\"abc\").map(Box::new)\n}\n</code></pre>\n\n<p>But still the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mismatched types [E0308]\n    let b: Option&lt;Box&lt;SomeTrait&gt;&gt; = Foo::new().map(Box::new);\n                                    ^~~~~~~~~~~~~~~~~~~~~~~~\nhelp: run `rustc --explain E0308` to see a detailed explanation\nnote: expected type `std::option::Option&lt;Box&lt;SomeTrait&gt;&gt;`\nnote:    found type `std::option::Option&lt;Box&lt;Foo&gt;&gt;`\n</code></pre>\n\n<p>I tried to use <code>as</code> for casting, but that didn't work since these are all non-scalar types.</p>\n\n<p>How do I solve this (without touching the implementation of <code>Foo</code> and <code>Bar</code>)? I feel like I'm trying to apply patterns from classical OOP-languages to Rust's trait system.</p>\n\n<p>In the end, I want to be able to do something like:</p>\n\n<pre><code>fn main() {\n    let arg = 5;\n    let x: Option&lt;Box&lt;SomeTrait&gt;&gt; = match arg {\n        4 =&gt; Foo::make_foo(\"abc\").map(Box::new),\n        _ =&gt; Bar::make_bar(\"abc\").map(Box::new),\n    };\n\n    x.do_something()\n}\n</code></pre>\n\n<hr>\n\n<p>Full example:</p>\n\n<pre><code>// Library part\nstruct Foo {}\nstruct Bar {}\n\nimpl Foo {\n    fn new() -&gt; Option&lt;Foo&gt; {\n        Some(Foo {})\n    }\n}\nimpl Bar {\n    fn new() -&gt; Option&lt;Bar&gt; {\n        Some(Bar {})\n    }\n}\n\n// My Part\ntrait SomeTrait {\n    fn do_something(&amp;self);\n}\nimpl SomeTrait for Foo {\n    fn do_something(&amp;self) {\n        println!(\"foo\")\n    }\n}\nimpl SomeTrait for Bar {\n    fn do_something(&amp;self) {\n        println!(\"bar\")\n    }\n}\n\nfn main() {\n    let b: Option&lt;Box&lt;SomeTrait&gt;&gt; = match \"x\" {\n        \"x\" =&gt; Foo::new().map(Box::new),\n        _ =&gt; Bar::new().map(Box::new),\n    };\n    b.unwrap().do_something();\n}\n</code></pre>\n"}, {"tags": ["dependencies", "rust", "conditional-compilation", "rust-cargo", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 5, "last_activity_date": 1472489059, "creation_date": 1472489059, "answer_id": 39211178, "question_id": 39210887, "link": "https://stackoverflow.com/questions/39210887/how-to-skip-a-dependency-if-related-feature-is-disabled/39211178#39211178", "title": "How to skip a dependency if related feature is disabled", "body": "<p>The <code>glob</code> dependency must be marked as optional:</p>\n\n<pre><code>[dependencies]\nglob = { version = \"0.2\", optional = true }\n</code></pre>\n"}], "owner": {"reputation": 5551, "user_id": 1201488, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/cce2b982a2acdfb40f3c376489403f1e?s=128&d=identicon&r=PG", "display_name": "Ivan Velichko", "link": "https://stackoverflow.com/users/1201488/ivan-velichko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 103, "favorite_count": 0, "accepted_answer_id": 39211178, "answer_count": 1, "score": 2, "last_activity_date": 1472489059, "creation_date": 1472487971, "question_id": 39210887, "link": "https://stackoverflow.com/questions/39210887/how-to-skip-a-dependency-if-related-feature-is-disabled", "title": "How to skip a dependency if related feature is disabled", "body": "<p>Suppose I have a crate which depends on the <code>glob</code> crate only if <code>#[cfg(feature = \"glob\")]</code> is enabled. Also, this feature is disabled by default. How can I skip downloading and compiling of the <code>glob</code> crate by default?</p>\n\n<pre><code># Cargo.toml\n...\n[features]\ndefault = []\n\n[dependencies]\nglob = \"0.2\"\n...\n</code></pre>\n\n<p>And the source code:</p>\n\n<pre><code># lib.rs\n.. several uses\n\n#[cfg(feature = \"glob\")]\nextern crate glob;\n\n... a lot of code that doesn't use glob crate.\n\n#[cfg(feature = \"glob\")]\nimpl Foo for Bar { \n    // only this code uses glob crate \n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "is_accepted": true, "score": 9, "last_activity_date": 1526398932, "last_edit_date": 1526398932, "creation_date": 1472486090, "answer_id": 39210387, "question_id": 39210311, "link": "https://stackoverflow.com/questions/39210311/the-trait-bound-is-not-satisfied-in-rust/39210387#39210387", "title": "The trait bound is not satisfied in Rust", "body": "<p>The reason is given to you in the notes:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: slice indices are of type `usize`\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>slice indices are of type `usize` or ranges of `usize`\n</code></pre>\n\n<p>You need to cast the <code>i32</code> value to <code>usize</code>, for example:</p>\n\n<pre><code>table[(field - 1) as usize]\n</code></pre>\n\n<p>Alternatively, consider using <code>usize</code> as the type of the <code>field</code> variable, if it makes sense in your application.</p>\n"}], "owner": {"reputation": 2010, "user_id": 3102952, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/yflBb.jpg?s=128&g=1", "display_name": "Nikola Stojakovi\u0107", "link": "https://stackoverflow.com/users/3102952/nikola-stojakovi%c4%87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6719, "favorite_count": 1, "accepted_answer_id": 39210387, "answer_count": 1, "score": 5, "last_activity_date": 1526398932, "creation_date": 1472485849, "last_edit_date": 1526398884, "question_id": 39210311, "link": "https://stackoverflow.com/questions/39210311/the-trait-bound-is-not-satisfied-in-rust", "title": "The trait bound is not satisfied in Rust", "body": "<p>I'm trying to write a Tic Tac Toe game in Rust, but  this function for changing a field doesn't work and I don't know what's wrong with it:</p>\n\n<pre><code>fn change_field(mut table: [char; 9], field: i32, player: char) -&gt; bool {\n    if field &gt; 0 &amp;&amp; field &lt; 10 {\n        if table[field - 1] == ' ' {\n            table[field - 1] = player;\n            return true;\n        } else {\n            println!(\"That field isn't empty!\");\n        }\n    } else {\n        println!(\"That field doesn't exist!\");\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>I'm getting these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:16:12: 16:26 error: the trait bound `[char]: std::ops::Index&lt;i32&gt;` is not satisfied [E0277]\nsrc/main.rs:16         if table[field-1] == ' ' {\n                          ^~~~~~~~~~~~~~\nsrc/main.rs:16:12: 16:26 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:16:12: 16:26 note: slice indices are of type `usize`\nsrc/main.rs:17:13: 17:27 error: the trait bound `[char]: std::ops::Index&lt;i32&gt;` is not satisfied [E0277]\nsrc/main.rs:17             table[field-1] = player;\n                           ^~~~~~~~~~~~~~\nsrc/main.rs:17:13: 17:27 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/main.rs:17:13: 17:27 note: slice indices are of type `usize`\nsrc/main.rs:17:13: 17:27 error: the trait bound `[char]: std::ops::IndexMut&lt;i32&gt;` is not satisfied [E0277]\nsrc/main.rs:17             table[field-1] = player;\n                           ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>In later versions of Rust, I get these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `i32: std::slice::SliceIndex&lt;[char]&gt;` is not satisfied\n --&gt; src/main.rs:3:12\n  |\n3 |         if table[field - 1] == ' ' {\n  |            ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `std::slice::SliceIndex&lt;[char]&gt;` is not implemented for `i32`\n  = note: required because of the requirements on the impl of `std::ops::Index&lt;i32&gt;` for `[char]`\n\nerror[E0277]: the trait bound `i32: std::slice::SliceIndex&lt;[char]&gt;` is not satisfied\n --&gt; src/main.rs:4:13\n  |\n4 |             table[field - 1] = player;\n  |             ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `std::slice::SliceIndex&lt;[char]&gt;` is not implemented for `i32`\n  = note: required because of the requirements on the impl of `std::ops::Index&lt;i32&gt;` for `[char]`\n</code></pre>\n\n<p>This is my first project in Rust so I don't have much experience with it. I tried to change the field to <code>u32</code> too.</p>\n"}, {"tags": ["c", "rust", "ffi"], "comments": [{"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 1, "creation_date": 1472481857, "post_id": 39208831, "comment_id": 65756889, "body": "It&#39;s a pointer, so you can just use <code>*mut std::os::raw::c_void</code> in the extern function signature and transmute it to the correct type."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 0, "creation_date": 1472482101, "post_id": 39208831, "comment_id": 65757036, "body": "@PavelStrakhov: That&#39;s an answer :)"}, {"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "reply_to_user": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 0, "creation_date": 1472482110, "post_id": 39208831, "comment_id": 65757044, "body": "@PavelStrakhov Using the correct type gives some type safety than using <code>void*</code>, so i would use it only as a last resort. Doesn&#39;t rust have a solution for this you mean ?"}], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 8, "last_activity_date": 1605460993, "last_edit_date": 1605460993, "creation_date": 1472483000, "answer_id": 39209422, "question_id": 39208831, "link": "https://stackoverflow.com/questions/39208831/how-to-represent-a-pointer-to-a-c-array-in-rust/39209422#39209422", "title": "How to represent a pointer to a C array in Rust?", "body": "<p>You need to use Rust's syntax for fixed size arrays:</p>\n<pre><code>pub unsafe extern &quot;C&quot; fn call_rust_funct(_p: *mut [u8; 3]) -&gt; *mut [i32; 4] {\n    Box::into_raw(Box::new([99i32; 4]))\n}\n</code></pre>\n<p>You can also always use <code>*mut std::os::raw::c_void</code> and transmute it to the correct type.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2919, "favorite_count": 1, "accepted_answer_id": 39209422, "answer_count": 1, "score": 8, "last_activity_date": 1605461035, "creation_date": 1472481315, "last_edit_date": 1605461035, "question_id": 39208831, "link": "https://stackoverflow.com/questions/39208831/how-to-represent-a-pointer-to-a-c-array-in-rust", "title": "How to represent a pointer to a C array in Rust?", "body": "<p>I need an <code>extern &quot;C&quot;</code> FFI function in Rust and want to accept an array of fixed size. The C code passes something like:</p>\n<pre class=\"lang-c prettyprint-override\"><code>// C code\nextern int(*)[4] call_rust_funct(unsigned char (*)[3]);\n....\nunsigned char a[] = { 11, 255, 212 };\nint(*p)[4] = call_rust_funct(&amp;a);\n</code></pre>\n<p>How do I write my Rust function for it ?</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// Pseudo code - DOESN'T COMPILE\npub unsafe extern &quot;C&quot; fn call_rust_funct(_p: *mut u8[3]) -&gt; *mut i32[4] {\n    Box::into_raw(Box::new([99i32; 4]))\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 4, "creation_date": 1472472866, "post_id": 39205905, "comment_id": 65750920, "body": "Keep in mind that the HashMap may reorganize its internals when it is modified, moving the items around and making the <code>&amp;String</code> references dangling."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1472472916, "post_id": 39205905, "comment_id": 65750948, "body": "Why not just keep the <code>HashMap</code>? You could still check a string&#39;s membership with the HashMap"}, {"owner": {"reputation": 1345, "user_id": 1321489, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ccd0ffe2cd87cc4d78d26b43a179bde?s=128&d=identicon&r=PG", "display_name": "Zozz", "link": "https://stackoverflow.com/users/1321489/zozz"}, "edited": false, "score": 0, "creation_date": 1472473046, "post_id": 39205905, "comment_id": 65751032, "body": "kennytm, I need several mappings and so didn&#39;t want to copy keys for every one. I can have one hashmap with just strings and then others with references to them. this is the main problem."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 3, "creation_date": 1472474215, "post_id": 39205905, "comment_id": 65751831, "body": "What about a <code>HashMap&lt;String, Content&gt;</code> where <code>Content</code> is a struct of values for your several mappings?"}, {"owner": {"reputation": 1345, "user_id": 1321489, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ccd0ffe2cd87cc4d78d26b43a179bde?s=128&d=identicon&r=PG", "display_name": "Zozz", "link": "https://stackoverflow.com/users/1321489/zozz"}, "edited": false, "score": 0, "creation_date": 1472474419, "post_id": 39205905, "comment_id": 65751960, "body": "That is one way to solve this but it has different semantics, for example I will not be able to get some mappings as immutable and others as mutable and separate which data gets accessed in which functions"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 2, "creation_date": 1472475298, "post_id": 39205905, "comment_id": 65752534, "body": "What about using <code>&amp;str</code> instead of <code>String</code>? You could easily have a <code>HashSet&lt;&amp;str&gt;</code> and <code>HashMap&lt;&amp;str, u8&gt;</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1472481166, "post_id": 39205905, "comment_id": 65756460, "body": "@antoyo: same issue, you have to handle the lifetime of those <code>str</code> (especially if created dynamically)."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1472486270, "creation_date": 1472486270, "answer_id": 39210440, "question_id": 39205905, "link": "https://stackoverflow.com/questions/39205905/safe-and-efficient-way-to-use-string-and-its-pointer-in-different-collections/39210440#39210440", "title": "Safe and efficient way to use String and its pointer in different collections", "body": "<p>It seems to me that what you are looking for is String Interning. There is a library, <a href=\"https://github.com/servo/string-cache\" rel=\"nofollow\">string-cache</a>, which was developed as part of the Servo project which may be of help.</p>\n\n<p>In any case, the basics are simple:</p>\n\n<ul>\n<li>a long-lived pool of <code>String</code>, which guarantees they will not be moving at all</li>\n<li>a look-up system to avoid inserting duplicates in the pool</li>\n</ul>\n\n<p>You can use a <a href=\"https://crates.io/crates/typed-arena\" rel=\"nofollow\">typed arena</a> to store your <code>String</code>, and then store <code>&amp;str</code> to those strings without copying them (they will live for as long as the arena lives). Use a <code>HashSet&lt;&amp;str&gt;</code> on top to avoid duplicates, and you're set.</p>\n"}], "owner": {"reputation": 1345, "user_id": 1321489, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ccd0ffe2cd87cc4d78d26b43a179bde?s=128&d=identicon&r=PG", "display_name": "Zozz", "link": "https://stackoverflow.com/users/1321489/zozz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 1, "accepted_answer_id": 39210440, "answer_count": 1, "score": 1, "last_activity_date": 1472486270, "creation_date": 1472472246, "last_edit_date": 1472481967, "question_id": 39205905, "link": "https://stackoverflow.com/questions/39205905/safe-and-efficient-way-to-use-string-and-its-pointer-in-different-collections", "title": "Safe and efficient way to use String and its pointer in different collections", "body": "<ul>\n<li>I have a bunch of long immutable strings, which I would like to store in a <code>HashSet</code>.</li>\n<li>I need a bunch of mappings with these strings as keys.</li>\n<li>I would like to use references to these strings as keys in these mappings to avoid copying strings.</li>\n</ul>\n\n<p>This is how I managed to eventually get to this status. The only concern is this extra copy I need to make at line 5.</p>\n\n<pre><code>let mut strings: HashSet&lt;String&gt; = HashSet::new();  // 1\nlet mut map: HashMap&lt;&amp;String, u8&gt; = HashMap::new(); // 2\n                                                    // 3\nlet s = \"very long string\".to_string();             // 4\nstrings.insert(s.clone());                          // 5\nlet s_ref = strings.get(&amp;s).unwrap();               // 6\nmap.insert(s_ref, 5);                               // 7\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=93470c0f11eba8e042ef6e474d622b39&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground link</a></p>\n\n<p>To avoid this cloning I found two workarounds:</p>\n\n<ul>\n<li>Use <code>Rc</code> for string (adds overhead and <a href=\"https://play.rust-lang.org/?gist=9f43458bac3d0f27332ffd3fc6e3d379&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">code clutter</a>)</li>\n<li>Use <a href=\"https://play.rust-lang.org/?gist=fd34caa9373c3f8517eab7ec76a7aad8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">unsafe code</a></li>\n</ul>\n\n<p>Is there any sensible way to remove this excessive cloning?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472485015, "post_id": 39205624, "comment_id": 65758853, "body": "@Shepmaster More info (more text) in this question and this answer. Maybe it could help some people to find their answer (I searched and did not found as I said in my question). I think it&#39;s not a &quot;duplicate&quot; but a &quot;similar&quot;. What do you think?"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1472472529, "creation_date": 1472472529, "answer_id": 39205995, "question_id": 39205624, "link": "https://stackoverflow.com/questions/39205624/trait-bounds-on-generic-methods-how-to-define-the-same-bounds-without-repeating/39205995#39205995", "title": "Trait bounds on generic methods: how to define the same bounds without repeating myself", "body": "<p>You can create a helper trait which you can use as a shorthand notation:</p>\n\n<pre><code>trait HandlerFun : 'static + Fn(&amp;Request) -&gt; Response + Send + Sync {}\n\nimpl&lt;T&gt; HandlerFun for T \n    where T: 'static + Fn(&amp;Request) -&gt; Response + Send + Sync \n{}\n\n// later\nfn m1&lt;T: HandlerFun&gt;(&amp;mut self, handler: T) {}\n</code></pre>\n\n<p>However, this isn't used very often due to it's verbosity. In fact, I've never seen a private trait \"alias\" in any production code. It also introduces some indirection for the reader as they have to look up how <code>HandlerFun</code> is defined. But sometimes it makes perfect sense to use such an \"empty\" trait to group some other traits; in that case it's also often useful to make it public.</p>\n\n<p><em>Note</em>: in your original code you should have used the <code>where</code> notation. The inline notation <code>&lt;T: BoundA + BoundB&gt;</code> should only be used for small trait bounds. Your bound is pretty long, so the <code>where</code> notation is better.</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 301, "favorite_count": 0, "closed_date": 1472481585, "accepted_answer_id": 39205995, "answer_count": 1, "score": 1, "last_activity_date": 1472472858, "creation_date": 1472471398, "last_edit_date": 1472472858, "question_id": 39205624, "link": "https://stackoverflow.com/questions/39205624/trait-bounds-on-generic-methods-how-to-define-the-same-bounds-without-repeating", "closed_reason": "Duplicate", "title": "Trait bounds on generic methods: how to define the same bounds without repeating myself", "body": "<p>Looking at these two methods:</p>\n\n<pre><code>fn m1&lt;T: 'static + Fn(&amp;Request) -&gt; Response + Send + Sync&gt;(&amp;mut self, handler: T) {\n    // It is not important\n}\n\n// Same trait bound to the generic\nfn m2&lt;T: 'static + Fn(&amp;Request) -&gt; Response + Send + Sync&gt;(&amp;mut self, handler: T) {\n    // It is not important\n}\n</code></pre>\n\n<p>Both share the same bound:</p>\n\n<pre><code>&lt;T: 'static + Fn(&amp;Request) -&gt; Response + Send + Sync&gt;\n</code></pre>\n\n<p>Can I \"factorize\" this? I tried to search the docs, but maybe I'm not using the right words. Can someone redirect me to the relevant part of the docs (or write an answer here if needed)?</p>\n"}, {"tags": ["debugging", "rust", "preprocessor", "rust-cargo"], "comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1472484308, "post_id": 39204908, "comment_id": 65758418, "body": "@Shepmaster This is similar to <a href=\"http://stackoverflow.com/questions/30786738/how-to-redefine-a-macro/30787006?s=2%7C2.4527\">this question</a>."}], "answers": [{"comments": [{"owner": {"reputation": 659, "user_id": 172106, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/0f55f3b9b2cdd268ac9a2ef47e3d684c?s=128&d=identicon&r=PG", "display_name": "turboladen", "link": "https://stackoverflow.com/users/172106/turboladen"}, "edited": false, "score": 9, "creation_date": 1571689742, "post_id": 39205417, "comment_id": 103317255, "body": "Just for the record, this doesn&#39;t work in build scripts. Just finding this out for myself so thought I&#39;d share."}, {"owner": {"reputation": 340, "user_id": 8244977, "user_type": "registered", "profile_image": "https://graph.facebook.com/100007678740593/picture?type=large", "display_name": "BingLi224", "link": "https://stackoverflow.com/users/8244977/bingli224"}, "edited": false, "score": 2, "creation_date": 1586979995, "post_id": 39205417, "comment_id": 108333469, "body": "if it&#39;s <code>#[cfg(debug_assertions)]</code> instead of <code>#[cfg(debug_assertions)] {...}</code>, there&#39;ll be <code>error[E0658]: attributes on expressions are experimental</code> and <code>error: removing an expression is not supported in this position</code>. Rust 1.42.0"}], "tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 91, "last_activity_date": 1596186478, "last_edit_date": 1596186478, "creation_date": 1472470736, "answer_id": 39205417, "question_id": 39204908, "link": "https://stackoverflow.com/questions/39204908/how-to-check-release-debug-builds-using-cfg-in-rust/39205417#39205417", "title": "How to check release / debug builds using cfg in Rust?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html#debug_assertions\" rel=\"noreferrer\"><code>debug_assertions</code></a> as the appropriate configuration flag. It works with both <a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html#the-cfg-attribute\" rel=\"noreferrer\"><code>#[cfg(...)]</code></a> attributes and the <a href=\"https://doc.rust-lang.org/stable/rust-by-example/attribute/cfg.html\" rel=\"noreferrer\"><code>cfg!</code></a> macro:</p>\n<pre><code>#[cfg(debug_assertions)]\nfn example() {\n    println!(&quot;Debugging enabled&quot;);\n}\n\n#[cfg(not(debug_assertions))]\nfn example() {\n    println!(&quot;Debugging disabled&quot;);\n}\n\nfn main() {\n    if cfg!(debug_assertions) {\n        println!(&quot;Debugging enabled&quot;);\n    } else {\n        println!(&quot;Debugging disabled&quot;);\n    }\n\n    #[cfg(debug_assertions)]\n    println!(&quot;Debugging enabled&quot;);\n\n    #[cfg(not(debug_assertions))]\n    println!(&quot;Debugging disabled&quot;);\n\n    example();\n}\n</code></pre>\n<p>This configuration flag was named as a correct way to do this in <a href=\"https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098/3\" rel=\"noreferrer\">this discussion</a>. There is no more suitable built-in condition for now.</p>\n<p>From the <a href=\"https://doc.rust-lang.org/reference/conditional-compilation.html\" rel=\"noreferrer\">reference</a>:</p>\n<blockquote>\n<p><code>debug_assertions</code> - Enabled by default when compiling without\noptimizations. This can be used to enable extra debugging code in\ndevelopment but not in production. For example, it controls the\nbehavior of the standard library's <code>debug_assert!</code> macro.</p>\n</blockquote>\n<p>An alternative, slightly more complicated way, is to use <code>#[cfg(feature = &quot;debug&quot;)]</code> and create a build script that enables a &quot;debug&quot; feature for your crate, as shown <a href=\"https://users.rust-lang.org/t/conditional-compilation-for-debug-release/1098/7\" rel=\"noreferrer\">here</a>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 19458, "favorite_count": 5, "accepted_answer_id": 39205417, "answer_count": 1, "score": 69, "last_activity_date": 1596186478, "creation_date": 1472469264, "last_edit_date": 1532188297, "question_id": 39204908, "link": "https://stackoverflow.com/questions/39204908/how-to-check-release-debug-builds-using-cfg-in-rust", "title": "How to check release / debug builds using cfg in Rust?", "body": "<p>With the C pre-processor it's common to do,</p>\n\n<pre><code>#if defined(NDEBUG)\n    // release build\n#endif\n\n#if defined(DEBUG)\n    // debug build\n#endif\n</code></pre>\n\n<p>Cargo's rough equivalents are:</p>\n\n<ul>\n<li><code>cargo build --release</code> for release.</li>\n<li><code>cargo build</code> for debug.</li>\n</ul>\n\n<p>How would Rust's <code>#[cfg(...)]</code> attribute or <code>cfg!(...)</code> macro be used to do something similar?</p>\n\n<p>I understand that Rust's pre-processor doesn't work like C's. I checked the documentation and <a href=\"https://doc.rust-lang.org/reference.html#conditional-compilation\" rel=\"noreferrer\">this page lists some attributes</a>. <em>(assuming this list is comprehensive)</em></p>\n\n<p><code>debug_assertions</code> could be checked, but it may be misleading when used to check for the more general debugging case.</p>\n\n<p>I'm not sure if this question should be related to Cargo or not.</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472444279, "post_id": 39198393, "comment_id": 65737057, "body": "I fear that there might be some terminology confusion here. Are you asking how to can skip executing the second half of the loop for some period of time, and after that amount of time has passed you will resume running the second half?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1472444297, "post_id": 39198393, "comment_id": 65737059, "body": "It seems you should use a condition or channel to signal that sleeping has ended"}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472444668, "post_id": 39198393, "comment_id": 65737126, "body": "@Shepmaster I have updated the question to clarify. <code>part_2</code> should not be called while the thread is sleeping (there is a <code>continue</code> before it), but all code before the <code>continue</code> is being run unconditionally."}], "answers": [{"comments": [{"owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 1, "creation_date": 1472445480, "post_id": 39198479, "comment_id": 65737298, "body": "I think moving <code>let now = ...</code> below <code>perform_physical_calculation()</code> would be more accurate, especially if such calculation takes noticeable time."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 0, "creation_date": 1472445917, "post_id": 39198479, "comment_id": 65737379, "body": "@AndrewLygin that&#39;s certainly possible. On the other hand, it might be desirable to have a stable time base for the entire &quot;frame&quot; so you don&#39;t get strange differences between your physics calculations and graphics rendering, for example. Additionally, getting the current time isn&#39;t &quot;free&quot;, so you may want to avoid getting it too frequently."}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1472445920, "post_id": 39198479, "comment_id": 65737380, "body": "This is much simpler than using <code>sleep</code>. However, the <code>if until &lt; Instant::now()</code> should be a <code>&gt;</code>, as making this change made the code work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1472446202, "post_id": 39198479, "comment_id": 65737450, "body": "@pengowen123 good point; I was too lazy to run the infinite loop until it finished to test it out ^_^."}, {"owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 1, "creation_date": 1472446812, "post_id": 39198479, "comment_id": 65737599, "body": "@Shepmaster, I agree. The choice between these options depends the exact meaning of <i>&#39;after a set amount of time&#39;</i>. Though, if such delay is long enough in comparison with the time of one iteration, the difference might be insignificant. Regarding the cost of getting the current time, I just suggested moving it a bit lower, it wouldn&#39;t add another call to <code>Instant::now()</code>, so all costs are exactly the same."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "edited": false, "score": 0, "creation_date": 1472447021, "post_id": 39198479, "comment_id": 65737657, "body": "@AndrewLygin but if performing the physics calculation needs the current time (and many game loops do use the time like that), then you&#39;d have to get the time twice. It all depends on code we can&#39;t see from the example though."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1472483045, "last_edit_date": 1472483045, "creation_date": 1472444749, "answer_id": 39198479, "question_id": 39198393, "link": "https://stackoverflow.com/questions/39198393/skip-part-of-loop-while-thread-is-sleeping/39198479#39198479", "title": "Skip part of loop while thread is sleeping", "body": "<p>There is no need for the overhead of threads or even the need to <strong>sleep</strong>. Simply track the time that you should delay executing code until:</p>\n\n<pre><code>use std::time::{Duration, Instant};\n\nfn part_1() {}\nfn part_2() {}\nfn some_condition() -&gt; bool {\n    false\n}\n\nfn main() {\n    let mut sleep_until = None;\n    loop {\n        part_1();\n\n        if let Some(until) = sleep_until {\n            if until &gt; Instant::now() {\n                continue;\n            }\n        }\n\n        part_2();\n\n        if some_condition() {\n            let now = Instant::now();\n            let until = now + Duration::from_millis(500);\n            sleep_until = Some(until);\n        }\n    }\n}\n</code></pre>\n\n<p>Although I'd probably avoid the use of <code>continue</code> here, and instead embed the logic within:</p>\n\n<pre><code>use std::time::{Duration, Instant};\n\nfn perform_physics_calculation() {}\nfn perform_graphics_render() {}\n\nfn main() {\n    let mut next_graphics_update = Instant::now();\n    let graphics_delay = Duration::from_millis(500);\n\n    loop {\n        let now = Instant::now();\n        perform_physics_calculation();\n\n        if next_graphics_update &lt;= now {\n            perform_graphics_render();\n            next_graphics_update = now + graphics_delay;\n        }\n    }\n}\n</code></pre>\n\n<p>Note in one case I use an <code>Option&lt;Instant&gt;</code> and in the other I just use an <code>Instant</code>; both cases can make sense.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1472445113, "creation_date": 1472445113, "answer_id": 39198522, "question_id": 39198393, "link": "https://stackoverflow.com/questions/39198393/skip-part-of-loop-while-thread-is-sleeping/39198522#39198522", "title": "Skip part of loop while thread is sleeping", "body": "<p>Turn your <code>sleeping</code> variable into a reference-counted atomic boolean so that you can reset it on the sleeping thread.</p>\n\n<pre><code>use std::sync::Arc;\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::thread;\nuse std::time::Duration;\n\nfn part_1() {}\nfn part_2() {}\nfn some_condition() -&gt; bool { false }\n\nfn main() {\n    let sleeping = Arc::new(AtomicBool::new(false));\n    let mut handle = None;\n\n    loop {\n        part_1();\n\n        if sleeping.load(Ordering::Acquire) {\n            continue;\n        }\n\n        part_2();\n\n        if some_condition() {\n            sleeping.store(true, Ordering::Release);\n            let sleeping_clone = sleeping.clone();\n            handle = Some(thread::spawn(move || {\n                thread::sleep(Duration::from_millis(100));\n                sleeping_clone.store(false, Ordering::Release);\n            }));\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 1, "accepted_answer_id": 39198479, "answer_count": 2, "score": 1, "last_activity_date": 1472483045, "creation_date": 1472444001, "last_edit_date": 1472444556, "question_id": 39198393, "link": "https://stackoverflow.com/questions/39198393/skip-part-of-loop-while-thread-is-sleeping", "title": "Skip part of loop while thread is sleeping", "body": "<p>I have two parts of code that I want to run in a loop. Sometimes I need to make the loop 'sleep', making each iteration skip the second part. The loop should stop sleeping after a set amount of time (for example using a thread with a call to <code>thread::sleep</code>). How do I accomplish this?</p>\n\n<pre><code>use std::thread;\n\nlet mut sleeping = false;\nlet mut handle = thread::spawn(|| {});\n\nloop {\n    part_1();\n\n    if sleeping {\n        continue;\n    }\n\n    part_2();\n\n    if some_condition {\n        sleeping = true;\n        handle = thread::spawn(|| thread::sleep_ms(100));\n    }\n}\n</code></pre>\n\n<p>In this example, if the condition is met, the <code>part_2</code> call would be skipped for some amount of iterations. My use case is continuing to run graphical updates in a game, while freezing the game's logic (such as counting down timers).</p>\n"}, {"tags": ["performance", "assembly", "optimization", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1472425873, "post_id": 39196594, "comment_id": 65733700, "body": "Branch prediction? How many mis-prediction does your profiler tells you the CPU made with the bounds-checked code?"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472426580, "post_id": 39196594, "comment_id": 65733790, "body": "If <code>[]</code> is called 4.8 billion times, at least one instruction (for bounds checking) will be called 4.8 billion times, right? So even if the CPU predicts the branch, I think we should see a significant difference between the two versions. Am I wrong?"}, {"owner": {"reputation": 38606, "user_id": 23771, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/NeuGc.jpg?s=128&g=1", "display_name": "Mike Dunlavey", "link": "https://stackoverflow.com/users/23771/mike-dunlavey"}, "edited": false, "score": 1, "creation_date": 1472429337, "post_id": 39196594, "comment_id": 65734193, "body": "You&#39;re doing what a lot of people do - guessing, and asking other people to guess. There&#39;s <a href=\"http://stackoverflow.com/a/378024/23771\"><i>no need to guess</i></a>."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 38606, "user_id": 23771, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/NeuGc.jpg?s=128&g=1", "display_name": "Mike Dunlavey", "link": "https://stackoverflow.com/users/23771/mike-dunlavey"}, "edited": false, "score": 0, "creation_date": 1472429796, "post_id": 39196594, "comment_id": 65734290, "body": "@MikeDunlavey I used a profiler (valgrind). I&#39;ve been improving the performance of my crate for days and I got a 30x speed up, after all. Switching from <code>[]</code> to <code>get_unchecked()</code> made the cost lowers from 10 to less than 1 for this specific line. However, the overall cost of the function stayed the same. This looks quite strange to me."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 2, "creation_date": 1472437008, "post_id": 39196594, "comment_id": 65735576, "body": "I think it&#39;s a nice question, but it&#39;s not about Rust. IMO there is no difference with <code>get_unchecked</code> because the CPU is not the bottleneck."}, {"owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "edited": false, "score": 0, "creation_date": 1472521769, "post_id": 39196594, "comment_id": 65773645, "body": "If your table values are all small like that in your actual use-case, use <code>u8</code> instead of <code>u64</code>.  On modern x86 CPUs, <code>movzbl (%rcx,%rsi), %eax</code> (aka movzx in Intel syntax) <a href=\"http://agner.org/optimize/\" rel=\"nofollow noreferrer\">runs at the same speed</a> as <code>movq (%rcx,%rsi,8), %rax</code> if they both hit in cache, but reduces your cache footprint by a factor of 8.  (So it takes fewer misses to pull the whole table into L1 cache, and it stays hot more easily.)  It might also save an instruction in scaling the indices, if the scale factor becomes small enough to do inside the the addressing mode."}], "answers": [{"tags": [], "owner": {"reputation": 240669, "user_id": 224132, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/N4ivW.png?s=128&g=1", "display_name": "Peter Cordes", "link": "https://stackoverflow.com/users/224132/peter-cordes"}, "is_accepted": false, "score": 4, "last_activity_date": 1472557803, "last_edit_date": 1472557803, "creation_date": 1472553785, "answer_id": 39225361, "question_id": 39196594, "link": "https://stackoverflow.com/questions/39196594/why-dont-i-get-performance-improvement-by-using-get-unchecked/39225361#39225361", "title": "Why don&#39;t I get performance improvement by using get_unchecked()?", "body": "<p>I haven't learned much Rust (yet), but I think I can still answer the performance part of this.</p>\n\n<p>First of all, are you sure your benchmark is actually running the stand-alone version of the function?  It might inline the function into the call site, where <code>box_id</code> is a compile-time constant.  Besides removing the minor call/ret overhead, the table index calculation asm would be significantly simplified.  Also, the bounds-check could be elided if it's known at compile-time that they're not exceeded.</p>\n\n<p>If someone shows how to modify the OP's example to compile to actual asm <a href=\"http://rust.godbolt.org/#compilers:!((compiler:nightly,options:&#39;-O+-C+target-cpu%3Dcore2&#39;,sourcez:MQQg2gZgpghgLgVwE5QBRygZzgSgLoBQBUAHhkgHYAEAxkvFFRtgNxETUC2MAlhajioBvAlSoB6cVQBGUCjQAWAfUwCWYyVQCSVAO49MC7VQDWFKLqoAlBNgIBfIgQAOCaVQ5VV0gPYklPAAmAFxUtjwAXlAANDIANj40JqEIAGwALIIAtAB8YRnComK0PhTYVAAqAIIAQgAyAKIAyqFgbWnp6gCMqXjq6X1UABx4VAC8RcXFbWBUXemxVAtzAMyxXYsATOsArOsbYkOLa3MADIup69tie2IAnLHnVADshFNTsbNUT123L7HLeZbdYnObrJ5US5za5dA5UB43WInEaTd6fMTLMFzZZHVYXYFzA6/K6LBH/MQnLpPW6nN7vMTo4nQxa465LUmLOHPRa3WHHdaAiFPKFdFZ0%2Bl4aKoqazWZMrHDAX4wn8jEc8lUGGU64Q3m06XFdFUSmgzHcuZ/Nm4oHM76c8HKhF8m7itFUL4/M37B1qvFiOG3a1sqHwpEE36uj7uv2Ks72im7RaYmEHEPmrps6lK%2B6R4qSg1iWVxsQQp3LEOUv5/InaxbpuHJlm5hnR0V1xalsO%2ByE%2BzUsnnZjPei2c5tURmgkOYhHWv6gn5wuEwtl67MvMdGok/eexENk3EawG8zGUgPhzZj/P0wvR8lt7Fdu1iPe9g7XA%2B8olso8b1ug60HH8Ip/BCpqxOay7xlSa53L%2BcoQi%2BT5DiqYjppW6xdjaVCWv2GJwQmI4lrur4grhobsthw7IRqMIDAWVBXteRZ9raFEKumC7KrGlEEUy96eqS%2BE2s6LHUV6MZnkRhHQQR%2B4XPhbFskSW6kahuHyk6K7Kju2JCXCQbtv6a5asq8qdsWmJzpeUrXtGcpKT6GkEj2hwdqpxpJmu5o8bCQk/H8jZqaxZJAVBlKYpxBHDApZaJoiYhWiSUXeRCgphcOkIKSe57qj5q4oVhXJcRC1pivRjH0sxgJLoONLqaCtbkRq%2BUhl0Qk6SJ3nLGSKkPgRvJsjCgbyfRm6eQVjWgumaWESGB66rEZIXqNt4ijWZEHDNGohY8cVYdc2rWfRRb3ix3GYsBGW9U14UDlJ1GvCtXxEry/69lN43UaFKFIdOWwKfW40Kppxluc%2BjnoVFfworZRoOX1h69qVe1smSoF3S5vnlX09FxFAcBUDw4xUKgqDSAkSRUAAZN8JCbKcgg5Hk6RUAAPiT5OJCY1NzDgggwJgYSYJEUBsLZeMEwAVsTpOc5TNOnCQXQNIzeRdPzgvhFEYvXggZQwNAwhUAAVNU9TNAAdAA5vjSh64oUBJFAgRk34ASBDg1u2/bCiOyYzuoDwns23AdvyL7Tsu5LgiOLZkhm40TRgL4/hBHgYA8OnkuEI4BDAGANAQFb6BYLghCcD4gQyHIiiFFMtiMMwcDBMEQg1DXvtILE5MwEkSgp/YbCog3XgIM4UBIC3mBD1M%2BeyOHrqePPigqGTHcT6EVOcAgBPt%2BHE%2BCCItnL53Fs8OQqCs%2BzR%2B2cUEsyG7QTEz3fcp6gzw4Drt8k6cVAWxbSxThKFOCA4BIDPYQB8HEF2TxWa9xoN3CmJh2bwKoAAai8K7VOgREFcz5vRewn9USOEcEAAAA%3D)),filterAsm:(commentOnly:!t,directives:!t,intel:!t,labels:!t),version:3\" rel=\"nofollow\">on the Godbolt compiler explorer</a>, I'd be able to take a look and say more.  Putting it up as-is on godbolt gives something that compiles to empty asm output.  I might decide to learn enough Rust to do this myself, but probably not soon.</p>\n\n<hr>\n\n<h3>Having a look at the stand-alone version of the function:</h3>\n\n<p>The extra instructions in the checked version are just the first 4:</p>\n\n<pre><code>9390:   50                      push   %rax        # align the stack in case we make a function call (wasted work for the common case)\n9391:   48 89 f8                mov    %rdi,%rax   # compiler is dumb, could have checked the value in %rdi\n9394:   48 83 f8 07             cmp    $0x7,%rax\n9398:   77 30                   ja     93ca &lt;_ZN3des7s_table17hbabdd9dee72331a5E+0x3a&gt;\n</code></pre>\n\n<p>And the final <code>pop    %rcx</code> to add 8 to %rsp.</p>\n\n<p>So that's 4 uops at the start of the function.  (Core2Duo can't macro-fuse in 64-bit mode.  Core2Duo can macro-fuse cmp/ja in 32-bit code, though.  (See <a href=\"http://agner.org/optimize/\" rel=\"nofollow\">Agner Fog's microarch pdf</a>).  If the compiler was smarter, it would only be 2 extra instructions / uops total on the fast-path through the function (cmp/ja), with stack alignment for another function call only done in the branch that actually makes the call.</p>\n\n<p>You might think that having these 4 uops issue as the first group of the function would be a problem, because it would delay the CPU from getting to the instructions on the critical path.  But that's not the case, because apparently your code doesn't bottleneck on the front-end.  (You didn't show the asm for the code that calls this in a loop).  So instructions are issued into the out-of-order core ahead of instructions that are actually executing.</p>\n\n<p>Probably by the time the function input is ready in %rdi, the scheduler already has the critical-path instructions waiting for it.  If the benchmark is actually running the standalone version, the 4 extra instructions at the beginning of the function aren't actually delaying the critical path any.  So presumably the critical path is bottlenecked on latency, not throughput.  (Does the output of one call form the index for the next lookup?  If so, that would prevent multiple invocations of the function from executing at the same time for different inputs.  L1 load-use latency is 3 cycles on Core 2 (according to <a href=\"http://agner.org/optimize/\" rel=\"nofollow\">Agner Fog's microarch pdf</a>).</p>\n\n<p>There's quite a bit of instruction-level parallelism in the instructions that calculate the table index from the input, though.  There are a couple <code>mov</code> instructions that make a copy, and then instructions do different things to the copy and the original.  And the two args are already separate.  I think there's probably enough parallelism to run 3 instructions in parallel a lot of the time, between when the input is ready and when the table index is ready.  So if execution has to wait 3 cycles for a table lookup before there's another input, that's time for the extra uops to run.  (The scheduler runs uops on a first-ready basis, though, not critical-path-first, so you'd expect them to sometimes lengthen the critical path with resource conflicts (stealing the execution ports from the critical path).</p>\n\n<p>TL:DR The L1 load-use latency could still easily be the bottleneck, not uop throughput, if the output of one call is the input to the next.  Otherwise there must be some other bottleneck that gives the 5 extra uops time to run without delaying the \"real work\".  Or else the check is being optimized away in the code that actually runs.</p>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 704, "favorite_count": 4, "answer_count": 1, "score": 10, "last_activity_date": 1472557803, "creation_date": 1472425710, "last_edit_date": 1472474767, "question_id": 39196594, "link": "https://stackoverflow.com/questions/39196594/why-dont-i-get-performance-improvement-by-using-get-unchecked", "title": "Why don&#39;t I get performance improvement by using get_unchecked()?", "body": "<p>I tried to use <code>get_unchecked()</code> instead of the <code>[]</code> index operator to get performance improvement in the <a href=\"https://github.com/antoyo/des-rs/blob/master/src/lib.rs#L257\" rel=\"noreferrer\"><code>s()</code></a> function of my <code>des</code> crate.</p>\n\n<p>However, it does not result in a visible performance improvement even thought the <code>[]</code> (or <code>get_unchecked()</code>) function is called 4.8 billion times in my benchmark. I would have thought that calling <code>get_unchecked()</code> 4.8 billion times instead of <code>[]</code> would result in a 2-second time improvement on my Intel Core 2 Duo 2.4 GHz processor.</p>\n\n<p>I made this small benchmark to have a small code to show you:</p>\n\n<pre><code>#![feature(test)]\n\nextern crate test;\n\nfn main() {\n}\n\npub fn s(box_id: usize, block: u64) -&gt; u64 {\n    const TABLES: [[[u64; 16]; 4]; 8] =\n        [[[ 14,  4, 13, 1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9, 0, 7]\n        , [  0, 15,  7, 4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5, 3, 8]\n        , [  4,  1, 14, 8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10, 5, 0]\n        , [ 15, 12,  8, 2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0, 6, 13]\n        ],\n        [ [ 15,  1,  8, 14,  6, 11,  3,  4,  9, 7,  2, 13, 12, 0,  5, 10]\n        , [  3, 13,  4,  7, 15,  2,  8, 14, 12, 0,  1, 10,  6, 9, 11,  5]\n        , [  0, 14,  7, 11, 10,  4, 13,  1,  5, 8, 12,  6,  9, 3,  2, 15]\n        , [ 13,  8, 10,  1,  3, 15,  4,  2, 11, 6,  7, 12,  0, 5, 14,  9]\n        ],\n        [ [ 10,  0,  9, 14, 6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8]\n        , [ 13,  7,  0,  9, 3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1]\n        , [ 13,  6,  4,  9, 8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7]\n        , [  1, 10, 13,  0, 6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12]\n        ],\n        [ [  7, 13, 14, 3,  0,  6,  9, 10,  1, 2, 8,  5, 11, 12,  4, 15]\n        , [ 13,  8, 11, 5,  6, 15,  0,  3,  4, 7, 2, 12,  1, 10, 14,  9]\n        , [ 10,  6,  9, 0, 12, 11,  7, 13, 15, 1, 3, 14,  5,  2,  8,  4]\n        , [  3, 15,  0, 6, 10,  1, 13,  8,  9, 4, 5, 11, 12,  7,  2, 14]\n        ],\n        [ [  2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13, 0, 14,  9]\n        , [ 14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3, 9,  8,  6]\n        , [  4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6, 3,  0, 14]\n        , [ 11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10, 4,  5,  3]\n        ],\n        [ [ 12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11]\n        , [ 10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8]\n        , [  9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6]\n        , [  4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13]\n        ],\n        [ [  4, 11,  2, 14, 15, 0,  8, 13,  3, 12, 9,  7,  5, 10, 6,  1]\n        , [ 13,  0, 11,  7,  4, 9,  1, 10, 14,  3, 5, 12,  2, 15, 8,  6]\n        , [  1,  4, 11, 13, 12, 3,  7, 14, 10, 15, 6,  8,  0,  5, 9,  2]\n        , [  6, 11, 13,  8,  1, 4, 10,  7,  9,  5, 0, 15, 14,  2, 3, 12]\n        ],\n        [ [ 13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7]\n        , [  1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2]\n        , [  7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8]\n        , [  2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11]\n        ]];\n        let i = ((block &amp; 0x20) &gt;&gt; 4 | (block &amp; 1)) as usize;\n        let j = ((block &amp; 0x1E) &gt;&gt; 1) as usize;\n        unsafe { *TABLES.get_unchecked(box_id).get_unchecked(i).get_unchecked(j) }\n        //TABLES[box_id][i][j]\n}\n\n#[cfg(test)]\nmod bench {\n    use test::{Bencher, black_box};\n\n    use super::s;\n\n    #[bench]\n    fn bench_s(bencher: &amp;mut Bencher) {\n        bencher.iter(|| {\n            let box_id = black_box(7);\n            (0 .. 40_000_000).fold(0, |acc, block| acc + s(box_id, block))\n        });\n    }\n}\n</code></pre>\n\n<p>The first time I ran this benchmark with <code>[]</code>, it took less time than the version with <code>get_unchecked()</code> (even though the <code>get_unchecked()</code> version seems a little bit faster on average).\nI am not sure it really reflects my real-life benchmark (which consists of encrypting a big file), but it gives an idea.</p>\n\n<p>I checked the assembly to be sure that the compiler did not optimize away the bound checking.</p>\n\n<p>Here is the version with <code>get_unchecked()</code>:</p>\n\n<pre><code>0000000000009360 &lt;_ZN3des7s_table17hbabdd9dee72331a5E&gt;:\n    9360:   48 89 f0                mov    %rsi,%rax\n    9363:   48 c1 e8 04             shr    $0x4,%rax\n    9367:   83 e0 02                and    $0x2,%eax\n    936a:   89 f1                   mov    %esi,%ecx\n    936c:   83 e1 01                and    $0x1,%ecx\n    936f:   48 09 c1                or     %rax,%rcx\n    9372:   48 c1 e7 09             shl    $0x9,%rdi\n    9376:   48 8d 05 93 57 04 00    lea    0x45793(%rip),%rax        # 4eb10 &lt;ref10404&gt;\n    937d:   48 01 f8                add    %rdi,%rax\n    9380:   48 c1 e1 07             shl    $0x7,%rcx\n    9384:   48 01 c1                add    %rax,%rcx\n    9387:   83 e6 1e                and    $0x1e,%esi\n    938a:   48 8b 04 b1             mov    (%rcx,%rsi,4),%rax\n    938e:   c3                      retq   \n    938f:   90                      nop\n</code></pre>\n\n<p>And here is the version with <code>[]</code>:</p>\n\n<pre><code>0000000000009390 &lt;_ZN3des7s_table17hbabdd9dee72331a5E&gt;:\n    9390:   50                      push   %rax\n    9391:   48 89 f8                mov    %rdi,%rax\n    9394:   48 83 f8 07             cmp    $0x7,%rax\n    9398:   77 30                   ja     93ca &lt;_ZN3des7s_table17hbabdd9dee72331a5E+0x3a&gt;\n    939a:   48 89 f1                mov    %rsi,%rcx\n    939d:   48 c1 e9 04             shr    $0x4,%rcx\n    93a1:   83 e1 02                and    $0x2,%ecx\n    93a4:   89 f2                   mov    %esi,%edx\n    93a6:   83 e2 01                and    $0x1,%edx\n    93a9:   48 09 ca                or     %rcx,%rdx\n    93ac:   48 c1 e0 09             shl    $0x9,%rax\n    93b0:   48 8d 0d 99 57 04 00    lea    0x45799(%rip),%rcx        # 4eb50 &lt;const10401&gt;\n    93b7:   48 01 c1                add    %rax,%rcx\n    93ba:   48 c1 e2 07             shl    $0x7,%rdx\n    93be:   48 01 ca                add    %rcx,%rdx\n    93c1:   83 e6 1e                and    $0x1e,%esi\n    93c4:   48 8b 04 b2             mov    (%rdx,%rsi,4),%rax\n    93c8:   59                      pop    %rcx\n    93c9:   c3                      retq   \n    93ca:   48 8d 3d b7 a3 25 00    lea    0x25a3b7(%rip),%rdi        # 263788 &lt;panic_bounds_check_loc10404&gt;\n    93d1:   ba 08 00 00 00          mov    $0x8,%edx\n    93d6:   48 89 c6                mov    %rax,%rsi\n    93d9:   e8 82 25 04 00          callq  4b960 &lt;_ZN4core9panicking18panic_bounds_check17hb2d969c3cc11ed08E&gt;\n    93de:   66 90                   xchg   %ax,%ax\n</code></pre>\n\n<p>We can see that the <code>get_unchecked()</code> version is smaller and that the version with <code>[]</code> check bounds.</p>\n\n<p>Both versions are compiled in release mode.</p>\n\n<p>Why is the <code>get_unchecked()</code> version not faster than that?\nI think it should be at least a couple of seconds faster than the <code>[]</code> version when <code>get_unchecked()</code>/<code>[]</code> is called 4.8 billion times.</p>\n\n<p><strong>Edit:</strong> I profiled the code using <code>valgrind</code>.</p>\n\n<p>The version with <code>[]</code> shows a cost of 10 for the line with the array indexing while the version with <code>get_unchecked()</code> shows a cost of less than 1 (see the images below).\nHowever, the costs of the function (see on the left of the images) stayed the same. This is strange. Does anybody have an explanation?</p>\n\n<p><a href=\"https://i.stack.imgur.com/9OhP9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/9OhP9.png\" alt=\"Version with get_unchecked\"></a>\nVersion with <code>get_unchecked()</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/2l2DU.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2l2DU.png\" alt=\"Version with index\"></a>\nVersion with <code>[]</code></p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472418136, "post_id": 39195621, "comment_id": 65731950, "body": "You have to call <code>b.foo::&lt;i32&gt;()</code> and <code>c.foo::&lt;i32&gt;()</code> (or any other type instead of <code>i32</code>). You actually never specified this type parameter... Too lazy to make an answer out of this right now... sorry :P"}, {"owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1472418504, "post_id": 39195621, "comment_id": 65732052, "body": "Thanks for the missing piece! If someone makes a real answer out of this, I&#39;ll mark it as solved"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1472423537, "creation_date": 1472423537, "answer_id": 39196389, "question_id": 39195621, "link": "https://stackoverflow.com/questions/39195621/rust-compiler-unable-to-infer-enough-information-about-generic-types/39196389#39196389", "title": "Rust compiler unable to infer enough information about generic types", "body": "<p>Often, generic functions will use their type parameters in the type of their parameters. In that case, the compiler can infer the type parameters from the type of the arguments on a call.</p>\n\n<p>However, in your case, <code>B::foo</code> and <code>C::foo</code> don't have any parameters using <code>T</code>. Therefore, each call needs to specify a concrete type for <code>T</code> explicitly. This is done by adding <code>::&lt;X&gt;</code> (where <code>X</code> is a type) after the name of the function, before the parentheses.</p>\n\n<p>In <code>C::foo</code>, presumably, you'll want to forward <code>C::foo</code>'s <code>T</code> to <code>B::foo</code>, so you'd write:</p>\n\n<pre><code>impl C {\n    fn foo&lt;T&gt;(&amp;self) {\n        let b = B {};\n        b.foo::&lt;T&gt;();\n    }\n}\n</code></pre>\n\n<p>Then in <code>main</code>, you can use any type you want:</p>\n\n<pre><code>fn main() {\n    let c = C {};\n    c.foo::&lt;i32&gt;();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1472424042, "creation_date": 1472424042, "answer_id": 39196443, "question_id": 39195621, "link": "https://stackoverflow.com/questions/39195621/rust-compiler-unable-to-infer-enough-information-about-generic-types/39196443#39196443", "title": "Rust compiler unable to infer enough information about generic types", "body": "<p>Since type inference is a novelty to many coming to Rust, let's explain it a bit more in depth.</p>\n\n<p>In essence, type inference is a bit like those \"maze\" games you may have played in magazines:</p>\n\n<p><a href=\"https://i.stack.imgur.com/YCMJ6.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/YCMJ6.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>You have a bunch of places where the type is unknown on the left hand, to connect to a handful of known types on the right hand. How to? Well, by examining the relationships between types!</p>\n\n<p>The simplest relationship (beyond no need to guess) is a 1-degree relationship:</p>\n\n<pre><code>let x: String = \"Hello, World\".into();\n</code></pre>\n\n<p>In Rust, we know that <code>into()</code> comes from the <code>Into&lt;T&gt;</code> trait that is implemented by <code>&amp;str</code>, but which <code>T</code>? Well, <code>into()</code> returns a <code>T</code> and the type of the expression is expected to be a <code>String</code>, therefore it <em>must</em> be <code>Into&lt;String&gt;</code>.</p>\n\n<p>In order to solve type inference, the compiler will therefore build some kind of graph of relationships between the places where the type need be inferred and the known types (in Rust, the function signature must be explicit, so it should not have to search too far), and then will try to deduce the types little by little.</p>\n\n<hr>\n\n<p>Let's examine the current use case:</p>\n\n<pre><code>fn main() {\n    let c = C{};\n    c.foo();\n}\n</code></pre>\n\n<p>Here, <code>c.foo();</code> calls <code>C::foo&lt;T&gt;()</code>: we need to deduce <code>T</code>. What information do we have? None. Zilch. Nada.</p>\n\n<p>In this case, unable to solve the problem, the compiler bails out and asks you (the developer) what you wanted <code>T</code> to be. You can specify it in multiple ways:</p>\n\n<ul>\n<li>the general method is making use of the so-called \"turbofish\" operator <code>::&lt;&gt;</code> as in <code>c.foo::&lt;i32&gt;()</code></li>\n<li>in the specific case where the result cannot be deduced, you can simply ascribe a type to the left-hand variable as in <code>let x: i32 = ...;</code></li>\n<li>it should be noted that often times you need not supply a <em>complete</em> type, and can make use of the <code>_</code> character to elide part of it as in <code>let x: Vec&lt;_&gt; = ...;</code> or <code>c.foo::&lt;Vec&lt;_&gt;&gt;()</code> if the compiler has enough information to deduce <code>_</code> on its own of course.</li>\n</ul>\n"}], "owner": {"reputation": 716, "user_id": 2315551, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8a4c0668c9eab3ecb855d3f6fd879ad7?s=128&d=identicon&r=PG&f=1", "display_name": "lsund", "link": "https://stackoverflow.com/users/2315551/lsund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 0, "accepted_answer_id": 39196443, "answer_count": 2, "score": 0, "last_activity_date": 1472442712, "creation_date": 1472417187, "last_edit_date": 1472442712, "question_id": 39195621, "link": "https://stackoverflow.com/questions/39195621/rust-compiler-unable-to-infer-enough-information-about-generic-types", "title": "Rust compiler unable to infer enough information about generic types", "body": "<p>I am learning Rust and came across something similar to this</p>\n\n<pre><code>struct A&lt;T&gt; {\n    some_vec: Vec&lt;T&gt;,\n    pub secret: &amp;'static str\n}\n\nstruct B{}\n\nstruct C{}\n\nimpl B {\n    fn foo&lt;T&gt;(&amp;self) {\n\n        let bar: A&lt;T&gt; = A { \n            some_vec: Vec::new(), \n            secret: \"123\" \n        };\n\n        println!(\"The secret is {}\", bar.secret);\n    }\n}\n\nimpl C {\n    fn foo&lt;T&gt;(&amp;self) {\n        let b = B{};\n        b.foo();\n    }\n}\n\nfn main() {\n    let c = C{};\n    c.foo();\n}\n</code></pre>\n\n<p>This produces the compiler error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [--explain E0282]\n  --&gt; src/main.rs:26:11\n   |&gt;\n26 |&gt;         b.foo();\n   |&gt;           ^^^\n</code></pre>\n\n<p>I have seen posts about the same error message but I was unable to figure out the solution in this case. What information (related to <code>b.foo()</code>) am I missing to specify?</p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 12, "last_activity_date": 1472990982, "last_edit_date": 1472990982, "creation_date": 1472411327, "answer_id": 39194845, "question_id": 39194700, "link": "https://stackoverflow.com/questions/39194700/is-string-a-valid-error-type-when-it-can-be-reported-immediately-in-stdout/39194845#39194845", "title": "Is String a valid Error type when it can be reported immediately in stdout?", "body": "<p><em>This is a rather broad question and there is no clear \"right\" or \"wrong\" answer.</em> </p>\n\n<p>It's important to note in your example, that strings carry very little easily accessible <strong>semantic information</strong>. Sure, you might be able to extract all semantic information by parsing the string, but this is really the wrong approach. Therefore, most bigger libraries or applications use error types that carry more semantic information to allow for easy error handling.</p>\n\n<p>In your case, strings are probably fine, if you will print them immediately anyway. But there is a neat little trick in order to make at least the function signatures a bit more future proof: <strong>return <code>Box&lt;Error&gt;</code></strong>.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/error/trait.Error.html\" rel=\"noreferrer\"><code>Error</code> trait</a> is a nice abstraction over errors. Pretty much every error type implements this trait. With <code>try!()</code> and the <code>Into</code> trait, it's possible to handle most errors with ease. Furthermore: there are a few type conversion <code>impl</code>s for strings and <code>Box&lt;Error&gt;</code>. This allows to return strings as errors:</p>\n\n<pre><code>fn foo() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    try!(std::fs::File::open(\"not-here\")); // io::Error\n    try!(Err(\"oh noooo!\"));   // &amp;str\n    try!(Err(\"I broke it :&lt;\".to_owned()));  // String\n    Err(\"nop\".into())\n}\n</code></pre>\n\n<p>See the <a href=\"https://play.rust-lang.org/?gist=5d607bcc6d8b7c2336cbb3e402c329c5&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">working demo</a>.</p>\n\n<p><em>Edit</em>: please note, that <code>Box&lt;Error&gt;</code> carries less semantic information than another concrete error type like <code>io::Error</code>. So it's not a good idea to always return <code>Box&lt;Error&gt;</code>! It's just a better approach in your situation :)</p>\n\n<p><em>Edit 2</em>: I've read a lot on error handling models recently, which changed my opinion a bit. I still think this answer is pretty much true. However, I think it's by far not as easy as I formulated it here. So just keep in mind that this answer doesn't suit as general guide <em>at all</em>! </p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3182, "favorite_count": 1, "closed_date": 1472474686, "accepted_answer_id": 39194845, "answer_count": 1, "score": 9, "last_activity_date": 1472990982, "creation_date": 1472410348, "last_edit_date": 1472481910, "question_id": 39194700, "link": "https://stackoverflow.com/questions/39194700/is-string-a-valid-error-type-when-it-can-be-reported-immediately-in-stdout", "closed_reason": "Needs more focus", "title": "Is String a valid Error type when it can be reported immediately in stdout?", "body": "<p>I recently implemented basic mechanics of a game of chess and used the <code>Result&lt;T, E&gt;</code> type for methods collecting human input, since it may be invalid. However, I'm not sure about what type I should pick for the possible error (<code>E</code>).</p>\n\n<p>I have gathered that introducing new types is considered a good practice when building a library. However, when the <code>Result</code> can be handled immediately and the <code>Err</code> reported in stdout, isn't it simpler to just return <code>Result&lt;T, String&gt;</code>s or <code>Result&lt;T, &amp;str&gt;</code>s (or <code>Result&lt;T, Cow&lt;str&gt;&gt;</code>s if both can occur)?</p>\n\n<p>Consider the following case:</p>\n\n<pre><code>pub fn play() {\n    let mut game = Game::new();\n\n    loop {\n        match game.turn() {\n            Ok(()) =&gt; { game.turn += 1 }\n            Err(e) =&gt; println!(\"{}\", e)\n        }\n    }\n}\n</code></pre>\n\n<p>The game is played in the terminal and any input errors can immediately be reported. Is there any added value to introducing a custom error type in this case?</p>\n"}, {"tags": ["memory-management", "rust", "memory-pool"], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472405344, "post_id": 39193030, "comment_id": 65728457, "body": "A <code>(Vec&lt;Box&lt;[T]&gt;&gt;, Vec&lt;T&gt;)</code> is probably better than a <code>Vec&lt;Vec&lt;T&gt;&gt;</code>, since there&#39;s little point having capacity for all the inner allocations, and the having the last <code>Vec</code> inline will make for faster push/pops. But that&#39;s a minor thing at most."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472407186, "post_id": 39193030, "comment_id": 65729019, "body": "@Veedrac: the big difference between <code>Vec&lt;T&gt;</code> and <code>Box&lt;[T]&gt;</code> is that in the latter you need the <i>exact</i> number of elements, whereas you can grow the <code>Vec&lt;T&gt;</code> as you need until it gets its &quot;max&quot; number of elements (but reserve first, to avoid re-allocating)."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472407401, "post_id": 39193030, "comment_id": 65729084, "body": "That&#39;s why it&#39;s <code>(Vec&lt;Box&lt;[T]&gt;&gt;, Vec&lt;T&gt;)</code>, not just <code>Vec&lt;Box&lt;[T]&gt;&gt;</code>. You don&#39;t want to resize the values in the middle, since those are all full."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472410363, "post_id": 39193030, "comment_id": 65729944, "body": "@Veedrac: Ah, I see now. Indeed easing the pop/push may be worth splitting the first and last elements. However note that in a <code>deque</code> (C++), you can pop/push from both ends, and doing so at minimal cost requires NOT having the move all the blocks each time you have fully popped a block from the front. In my case, it would mean leaving empty <code>Vec&lt;T&gt;</code> in <code>Vec&lt;Vec&lt;T&gt;&gt;</code> which is fine as you can have an index indicating the first and last non-empty ones."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472412229, "post_id": 39193030, "comment_id": 65730461, "body": "<code>Vec&lt;Vec&lt;T&gt;&gt;</code> isn&#39;t sufficient for a deque since you need to insert backwards on the LHS too. I&#39;m not entirely sure how C++ does this, but a <code>VecDeque&lt;VecDeque&lt;T&gt;&gt;</code> would work, albeit slightly inefficiently."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472413267, "post_id": 39193030, "comment_id": 65730722, "body": "@Veedrac: C++ basically uses a <code>struct { first: usize, last: usize, Vec&lt;Vec&lt;T&gt;&gt;, }</code> with a hard-coded size for &quot;complete&quot; inner <code>Vec&lt;T&gt;</code>. You sometimes have to shuffle the inner <code>Vec</code> back or forth (when you reach the edge, or re-allocate), but their content stays stable in memory, and getting to index <code>i</code> is something like <code>let len_first = outer[first].len(); if i &lt; len_first { outer[first][i] } else { outer[(i - len_first) % capacity + first][(i - len_first) &#47; capacity] }</code>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472413879, "post_id": 39193030, "comment_id": 65730913, "body": "That&#39;s not what I was referring to, which was how it dealt with prepends. Which is actually obvious given it&#39;s C++ - it just inserts them backwards and decrements a pointer. You can&#39;t do that with <code>Vec</code> in Rust, so you&#39;d need to juggle memory more dangerously to get things to work nicely."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1472414828, "post_id": 39193030, "comment_id": 65731161, "body": "@Veedrac: Ah I see, indeed it might be a bit trickier than just a <code>Vec&lt;T&gt;</code> to handle both prepend and append."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1472399270, "creation_date": 1472399270, "answer_id": 39193030, "question_id": 39187602, "link": "https://stackoverflow.com/questions/39187602/idiomatic-way-to-fill-an-arbitrary-sized-vector-without-array-resizing/39193030#39193030", "title": "Idiomatic way to fill an arbitrary sized vector without array resizing?", "body": "<p>Actually, I would favor a <code>Vec&lt;Vec&lt;T&gt;&gt;</code> in this situation, which is similar to how the <code>std::deque</code> is implement under the covers in C++.</p>\n\n<p>With a <code>Vec&lt;Vec&lt;T&gt;&gt;</code> where all inner <code>Vec&lt;T&gt;</code> have the same maximum size, and all but the first and last <code>Vec&lt;T&gt;</code> are full to the brim, you can have O(1) indexing <em>and</em> memory stability.</p>\n\n<p>Of course, the pointer to the chunks will move around as the outer <code>Vec</code> reallocates and all, but a <code>memcpy</code> of 24 bytes is easy enough.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 109, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1472401417, "creation_date": 1472352770, "last_edit_date": 1472401417, "question_id": 39187602, "link": "https://stackoverflow.com/questions/39187602/idiomatic-way-to-fill-an-arbitrary-sized-vector-without-array-resizing", "title": "Idiomatic way to fill an arbitrary sized vector without array resizing?", "body": "<p>There are times you want to allocate data without knowing ahead of time how much data you need.</p>\n\n<p>Mostly vectors are fine as-is, but there are times where it is more efficient to allocate a chain of memory chunks, creating new chunks as needed.</p>\n\n<p>If you don't need to access them directly by index (only pop the last item for example), they can be kept as memory chunks. Otherwise once this is done a fixed size vector can be allocated and the data copied into it.</p>\n\n<p>While this could be done in Rust with a <code>LinkedList</code> of <code>Vec</code> 's, is there a more idiomatic way to perform this task?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "edited": false, "score": 0, "creation_date": 1472354616, "post_id": 39186802, "comment_id": 65716515, "body": "The issue is most certainly that none of your implementations are equivalent. Write the Rust code exactly as the C++ version. Take a handle to stdout and stdin in the beginning of the application and lock them. Write directly to stdout&#39;s buffer instead of using the macro which incurs lock+formatting overhead."}, {"owner": {"user_type": "does_not_exist", "display_name": "user3704639"}, "edited": false, "score": 1, "creation_date": 1472354998, "post_id": 39186802, "comment_id": 65716586, "body": "Try building with <code>env RUSTFLAGS=&quot;-C target-cpu=native&quot; cargo build --release</code>. The Rust compiler refuses to use various higher end CPU extensions without specifically enabling them."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1472379235, "post_id": 39186802, "comment_id": 65720922, "body": "FWIW, <code>BufReader</code> is not ideal usage of <code>stdin</code>; try using <code>stdin.lock()</code> instead, which provides <code>BufRead</code> for you and avoids repeated locking. The difference isn&#39;t really meaningful, though, since IO isn&#39;t a large cost here."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1472399564, "post_id": 39186802, "comment_id": 65726613, "body": "@user1244932: I invite your to read the reddit discussion <a href=\"https://www.reddit.com/r/rust/comments/4zx55q/xpost_stackoverflow_rust_version_is_4x_slower_as/\" rel=\"nofollow noreferrer\">here</a>, there were a number of comments that I personally found quite interesting and that are a bit too long to succinctly summarize :)"}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472347646, "post_id": 39187218, "comment_id": 65715651, "body": "What versions do you use and how you run? I use rustc (1.12.0-beta.1) and gcc 5.3.0, and run with <code>time .&#47;exe &lt; data &gt; &#47;tmp&#47;out</code>"}, {"owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472347792, "post_id": 39187218, "comment_id": 65715669, "body": "rustc 1.13.0-nightly (e9bc1bac8 2016-08-24)"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472347796, "post_id": 39187218, "comment_id": 65715671, "body": "Also I run <code>cd &#47;sys&#47;devices&#47;system&#47;cpu&#47;cpufreq&#47; &amp;&amp; for i in </code>seq 0 7<code>; do echo performance &gt; policy$i&#47;scaling_governor; done</code> before timing measuring, did you do the same?"}, {"owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472347808, "post_id": 39187218, "comment_id": 65715672, "body": "and g++ (Ubuntu 5.4.0-6ubuntu1~16.04.2) 5.4.0 20160609"}, {"owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472347885, "post_id": 39187218, "comment_id": 65715685, "body": "No, I didn&#39;t mess with my governor, but the governor would react within milliseconds, and the benchmark takes tens of seconds. At best, I would expect governor settings to make a few tenths of a second difference at best."}, {"owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472348047, "post_id": 39187218, "comment_id": 65715704, "body": "Huh. Running it with <code>-march=native</code> sped the C++ code up to the 6.7 seconds."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472348120, "post_id": 39187218, "comment_id": 65715709, "body": "I rerun with <code>nightly</code>, instead of <code>beta</code> performance difference decrease from 4x to 2.7x"}, {"owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472348161, "post_id": 39187218, "comment_id": 65715715, "body": "This looks like a very oddly specific set of circumstances that are allowing <code>native</code> to do real optimization. I&#39;ve never heard of <code>-march=native</code> actually making such a difference before, and this only works with <code>g++</code>. The effect isn&#39;t nearly as dramatic with <code>clang++</code>, which shares the same backend as <code>rustc</code>."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472348423, "post_id": 39187218, "comment_id": 65715737, "body": "I saw such effect with <code>icc</code> vs <code>gcc</code>. On simple matrix multiplication (1000x1000) icc speedup code by 10x, because of it can in such case do vectorization, while <code>gcc</code> can not."}], "tags": [], "owner": {"reputation": 773, "user_id": 389837, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a8b9fc4b0d771ed05a642059ac8830a3?s=128&d=identicon&r=PG", "display_name": "coder543", "link": "https://stackoverflow.com/users/389837/coder543"}, "is_accepted": false, "score": 2, "last_activity_date": 1472441207, "last_edit_date": 1472441207, "creation_date": 1472347261, "answer_id": 39187218, "question_id": 39186802, "link": "https://stackoverflow.com/questions/39186802/why-is-this-rust-program-so-slow-did-i-miss-something/39187218#39187218", "title": "Why is this Rust program so slow? Did I miss something?", "body": "<p>I'm definitely not seeing any difference in execution time. On my machine,</p>\n\n<p>C++:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>real    0m19.672s\nuser    0m19.636s\nsys     0m0.060s\n</code></pre>\n\n<p>Rust:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>real    0m19.047s\nuser    0m19.028s\nsys     0m0.040s\n</code></pre>\n\n<p>I compiled the Rust code with <code>rustc -O test.rs -o ./test</code> and the C++ code with <code>g++ -Ofast test.cpp -o test</code>.</p>\n\n<p>I'm running Ubuntu 16.04 with Linux Kernel 4.6.3-040603-generic. The laptop I ran this on has an Intel(R) Core(TM) i5-6200U CPU and 8GB of RAM, nothing special.</p>\n"}, {"comments": [{"owner": {"reputation": 994, "user_id": 2754323, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/1258c3a2e37afb9c32b54b620f85ce92?s=128&d=identicon&r=PG&f=1", "display_name": "Yoha&#239;-Eliel Berreby", "link": "https://stackoverflow.com/users/2754323/yoha%c3%af-eliel-berreby"}, "edited": false, "score": 0, "creation_date": 1472371376, "post_id": 39187399, "comment_id": 65719049, "body": "<code>-march=native</code> is equivalent to <code>-C target-cpu=native</code>. Here are the times I get: C++: 12.417s; C++ with <code>-march=native</code>: 9.005s; Rust: 13.971s; Rust with <code>-C target-cpu=native</code>: 11.943s."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472385594, "post_id": 39187399, "comment_id": 65722611, "body": "First of all it is not my <code>c++</code> code, I provided link in question where it came from."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1472385777, "post_id": 39187399, "comment_id": 65722657, "body": "Second I doubt that your finding about <code>println!</code> vs <code>printf</code> is correct. I implement <code>fast</code> variant of this algorithm with <code>O(N*log(N))</code> instead of <code>O(N * N)</code>, but leave input/output code <code>as is</code> and now result <code>0.7 seconds</code>, similar to what <code>fast c++</code> show. So input/output can not give more then <code>0.1 seconds</code>"}], "tags": [], "owner": {"reputation": 343, "user_id": 2813790, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db33a6820335dc45a3e9e579c12d0a73?s=128&d=identicon&r=PG&f=1", "display_name": "IBit", "link": "https://stackoverflow.com/users/2813790/ibit"}, "is_accepted": false, "score": 26, "last_activity_date": 1472403910, "last_edit_date": 1472403910, "creation_date": 1472349860, "answer_id": 39187399, "question_id": 39186802, "link": "https://stackoverflow.com/questions/39186802/why-is-this-rust-program-so-slow-did-i-miss-something/39187399#39187399", "title": "Why is this Rust program so slow? Did I miss something?", "body": "<p>The vast majority of the performance you're seeing in C++ is due to the flag <code>-march=native</code>.</p>\n\n<p>This flag is not the equivalent flag to Rust's <code>--release</code>. It uses CPU instructions specific to the CPU it is compiled on, so math in particular is going to be <em>way</em> faster.</p>\n\n<p>Removing that flag puts the C++ code at 19 seconds.</p>\n\n<p>Then there's the unsafety present in the C++ code. None of the input is checked. The Rust code does check it, you use <code>.unwrap()</code> \u2013 <code>unwrap</code> has a performance cost, there's an assertion, then the code necessary for unwinding, etc.</p>\n\n<p>Using <code>if let</code>s instead of raw <code>unwrap</code>s, or ignoring results where possible, brings the Rust code down again.</p>\n\n<p>Rust: 22 seconds</p>\n\n<p>C++: 19 seconds</p>\n\n<p>Where's the 3 seconds coming from? A bit of playing around leads me to believe it's <code>println!</code> vs. <code>printf</code>, but I don't have hard numbers for the C++ code. What I can say is that the Rust code drops to 13 seconds when I perform the printing outside of the benchmark.</p>\n\n<p>TLDR: Your compiler flags are different, and your C++ code is not safe.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 43, "last_activity_date": 1522373790, "last_edit_date": 1522373790, "creation_date": 1472379119, "answer_id": 39190204, "question_id": 39186802, "link": "https://stackoverflow.com/questions/39186802/why-is-this-rust-program-so-slow-did-i-miss-something/39190204#39190204", "title": "Why is this Rust program so slow? Did I miss something?", "body": "<p>The difference is of course <code>-march=native</code>... kind of. Rust has this through <code>-C target_cpu=native</code>, but this doesn't give the same speed benefit. This is because <a href=\"https://en.wikipedia.org/wiki/LLVM\" rel=\"nofollow noreferrer\">LLVM</a> is unwilling to vectorize in this context, whereas <a href=\"https://en.wikipedia.org/wiki/GNU_Compiler_Collection\" rel=\"nofollow noreferrer\">GCC</a> does. You may note that using <a href=\"https://en.wikipedia.org/wiki/Clang\" rel=\"nofollow noreferrer\">Clang</a>, a C++ compiler that also uses LLVM, also produces relatively slow code.</p>\n\n<p>To encourage LLVM to vectorize, you can move the main loop into a separate function. Alternatively, you can use a local block. If you write the code carefully as</p>\n\n<pre><code>let dist = {\n    let mut dist = i32::max_value();\n    for &amp;(a, b) in &amp;points_a[..n] {\n        for &amp;(c, d) in &amp;points_b[..n] {\n            dist = std::cmp::min(((a - c).abs() + (b - d).abs()), dist);\n        }\n    }\n    dist\n} as u32;\n</code></pre>\n\n<p>the difference between Rust and C++ is then near-negligible (~4%).</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5131, "favorite_count": 0, "protected_date": 1508101092, "accepted_answer_id": 39190204, "answer_count": 3, "score": 17, "last_activity_date": 1522373790, "creation_date": 1472341926, "last_edit_date": 1495540433, "question_id": 39186802, "link": "https://stackoverflow.com/questions/39186802/why-is-this-rust-program-so-slow-did-i-miss-something", "title": "Why is this Rust program so slow? Did I miss something?", "body": "<p>I read <em><a href=\"https://stackoverflow.com/questions/39183668/minimal-distance-in-manhattan-metric/39186417\">Minimal distance in Manhattan metric</a></em> and rewrote the author's \"naive\" implementation in <a href=\"https://en.wikipedia.org/wiki/Rust_%28programming_language%29\" rel=\"nofollow noreferrer\">Rust</a>. The C++ variant is:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;utility&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n\nstd::pair&lt;int, int&gt; pointsA[1000001];\nstd::pair&lt;int, int&gt; pointsB[1000001];\n\nint main() {\n    int n, t;\n    unsigned long long dist;\n\n    scanf(\"%d\", &amp;t);\n\n    while(t--&gt;0) {\n        dist = 4000000000LL;\n        scanf(\"%d\", &amp;n);\n\n        for(int i = 0; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;pointsA[i].first, &amp;pointsA[i].second);\n        }\n\n        for(int i = 0; i &lt; n; i++) {\n            scanf(\"%d%d\", &amp;pointsB[i].first, &amp;pointsB[i].second);\n        }\n\n        for(int i = 0; i &lt; n ;i++) {\n            for(int j = 0; j &lt; n ; j++) {\n                if(abs(pointsA[i].first - pointsB[j].first) + abs(pointsA[i].second - pointsB[j].second) &lt; dist)\n                    dist = abs(pointsA[i].first - pointsB[j].first) + abs(pointsA[i].second - pointsB[j].second);\n            }\n        }\n        printf(\"%lld\\n\", dist);\n    }\n}\n</code></pre>\n\n<p>The Rust variant is:</p>\n\n<pre><code>use std::io;\nuse std::io::BufReader;\nuse std::io::BufRead;\n\nfn read_array(stdin: &amp;mut BufReader&lt;io::Stdin&gt;, array_len: usize, points: &amp;mut Vec&lt;(i32, i32)&gt;) {\n    let mut line = String::new();\n    for _ in 0..array_len {\n        line.clear();\n        stdin.read_line(&amp;mut line).unwrap();\n        let mut item = line.split_whitespace();\n        let x = item.next().unwrap().parse().unwrap();\n        let y = item.next().unwrap().parse().unwrap();\n        points.push((x, y));\n    }\n}\n\nfn manhattan_dist(a: &amp;(i32, i32), b: &amp;(i32, i32)) -&gt; u32 {\n    ((a.0 - b.0).abs() + (a.1 - b.1).abs()) as u32\n}\n\nfn main() {\n    let mut line = String::new();\n    let mut stdin = BufReader::new(io::stdin());\n    stdin.read_line(&amp;mut line).unwrap();\n    let n_iters = line.trim_right().parse::&lt;usize&gt;().unwrap();\n    let mut points_a = Vec::with_capacity(10000);\n    let mut points_b = Vec::with_capacity(10000);\n    for _ in 0..n_iters {\n        line.clear();\n        stdin.read_line(&amp;mut line).unwrap();\n        let set_len = line.trim_right().parse::&lt;usize&gt;().unwrap();\n        points_a.clear();\n        points_b.clear();\n        read_array(&amp;mut stdin, set_len, &amp;mut points_a);\n        read_array(&amp;mut stdin, set_len, &amp;mut points_b);\n        let mut dist = u32::max_value();\n        for i in points_a.iter() {\n            for j in points_b.iter() {\n                dist = std::cmp::min(manhattan_dist(i, j), dist);\n            }\n        }\n        println!(\"{}\", dist);\n    }\n}\n</code></pre>\n\n<p>Then, I generated data with a Python script:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import random\n\nITER = 100\nN = 10000\nMAX_INT = 1000000\n\nprint(\"%d\" % ITER)\n\nfor _ in range(0, ITER):\n    print(\"%d\" % N)\n    for _ in range(0, N):\n        print(random.randrange(-MAX_INT, MAX_INT + 1), random.randrange(1, MAX_INT + 1))\n    for _ in range(0, N):\n        print(random.randrange(-MAX_INT, MAX_INT + 1), random.randrange(-MAX_INT, 0))\n</code></pre>\n\n<p>And compiled both variants with <code>g++ -Ofast -march=native</code> and <code>rustc -C opt-level=3</code> respectively. The timings are:</p>\n\n<p><strong>C++</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>real    0m7.789s\nuser    0m7.760s\nsys     0m0.020s\n</code></pre>\n\n<p><strong>Rust</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>real    0m28.589s\nuser    0m28.570s\nsys     0m0.010s\n</code></pre>\n\n<p>Why is my Rust code four times slower than the C++ variant? I am using Rust 1.12.0-beta.1.</p>\n\n<p>I added time measurements:</p>\n\n<pre><code>let now = SystemTime::now();\nline.clear();\nstdin.read_line(&amp;mut line).unwrap();\nlet set_len = line.trim_right().parse::&lt;usize&gt;().unwrap();\npoints_a.clear();\npoints_b.clear();\nread_array(&amp;mut stdin, set_len, &amp;mut points_a);\nread_array(&amp;mut stdin, set_len, &amp;mut points_b);\nio_time += now.elapsed().unwrap();\n\nlet now = SystemTime::now();\nlet mut dist = u32::max_value();\nfor i in points_a.iter() {\n    for j in points_b.iter() {\n        dist = std::cmp::min(manhattan_dist(i, j), dist);\n    }\n}\ncalc_time += now.elapsed().unwrap();\n</code></pre>\n\n<p>And <code>writeln!(&amp;mut std::io::stderr(), \"io_time: {}, calc_time: {}\", io_time.as_secs(), calc_time.as_secs()).unwrap();</code> prints <code>io_time: 0, calc_time: 27</code>.</p>\n\n<p>I tried nightly <code>rustc 1.13.0-nightly (e9bc1bac8 2016-08-24)</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ time ./test_rust &lt; data.txt  &gt; test3_res\nio_time: 0, calc_time: 19\n\nreal    0m19.592s\nuser    0m19.560s\nsys     0m0.020s\n$ time ./test1 &lt; data.txt  &gt; test1_res\n\nreal    0m7.797s\nuser    0m7.780s\nsys     0m0.010s\n</code></pre>\n\n<p>So it is at now ~ 2.7x difference on my <a href=\"https://en.wikipedia.org/wiki/Intel_Core#Core_i7\" rel=\"nofollow noreferrer\">Core i7</a>.</p>\n"}, {"tags": ["rust", "directory-structure", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1472341819, "post_id": 39186795, "comment_id": 65714832, "body": "May I ask... <i>why?</i> Convention Over Configuration and all..."}, {"owner": {"reputation": 91978, "user_id": 387076, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/cFyP6.jpg?s=128&g=1", "display_name": "Gilles &#39;SO- stop being evil&#39;", "link": "https://stackoverflow.com/users/387076/gilles-so-stop-being-evil"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1472342017, "post_id": 39186795, "comment_id": 65714865, "body": "@MatthieuM. I&#39;ve never understood why it wasn&#39;t \u201cconfiguration over convention\u201d. Convention fails the <a href=\"https://blogs.msdn.microsoft.com/oldnewthing/20050607-00/?p=35413\" rel=\"nofollow noreferrer\">rule of two</a>: if you have two components with incompatible conventions, what do you do? You&#39;re stuck with an irresistible force hitting an immovable cargo."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1472342248, "post_id": 39186795, "comment_id": 65714898, "body": "<i>If you have two components with incompatible conventions, what do you do?</i> =&gt; you make the necessary changes so that both match the convention, obviously. Cargo was developed early enough that it could set conventions straight from the start (1.0) so that all projects would live by the same convention. That being said, it <i>might</i> be possible to tweak it (thus why I commented, not answered); I just wonder, personally, if that would be a good idea... the cost of changing the project might be lower than the cost of every single maintainer having to understand why it works differently."}, {"owner": {"reputation": 91978, "user_id": 387076, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/cFyP6.jpg?s=128&g=1", "display_name": "Gilles &#39;SO- stop being evil&#39;", "link": "https://stackoverflow.com/users/387076/gilles-so-stop-being-evil"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472342404, "post_id": 39186795, "comment_id": 65714921, "body": "@MatthieuM. Cargo was certainly not developed early enough so that it could set conventions. Directory trees have existed for more than half a century! Not all projects are pure Rust projects. (I have the same problem with Java sometimes, but the Rust toolchain seems to be even worse in that respect.)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472342907, "post_id": 39186795, "comment_id": 65714997, "body": "I obviously meant conventions in Rust projects :) Anyway, I am not saying it is impossible, just that going against the flow is always an uphill battle."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1472347087, "creation_date": 1472347087, "answer_id": 39187202, "question_id": 39186795, "link": "https://stackoverflow.com/questions/39186795/using-cargo-with-my-projects-own-directory-structure/39187202#39187202", "title": "Using Cargo with my project&#39;s own directory structure", "body": "<p>Not <em>really.</em>  You can control where the source files are by explicitly specifying them in the manifest:</p>\n\n<pre><code>[[bin]]\nname = \"foo\"\nsrc = \"foo.rs\"\n\n[[bin]]\nname = \"qux\"\nsrc = \"splong.rs\"\n</code></pre>\n\n<p>I don't know what you mean by <code>foo</code> being built from <code>foo.rs</code> <em>and</em> <code>bar.rs</code>, whilst <code>qux</code> is built only from <code>foo.rs</code>.  You can't just arbitrarily glob source files together: either <code>foo.rs</code> uses <code>bar.rs</code>, or it doesn't.</p>\n\n<p>But you can't control the target directory from within the manifest.  There's the <code>build.target-dir</code> setting (in <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow\">Cargo's configuration</a>, not the manifest), but that only lets you change the <code>target</code> directory, not the second level inside of it.  You <em>can</em> change it using the <a href=\"http://doc.crates.io/environment-variables.html\" rel=\"nofollow\"><code>CARGO_TARGET_DIR</code> environment variable</a>, though you can't set environment variables from within the manifest, either.</p>\n\n<p>That said, setting <code>CARGO_TARGET_DIR</code> to the root of the project will <em>also</em> change where all the intermediate files go, <em>and</em> it'll mean every time you switch between debug and release builds, you'll have to do a full recompile.</p>\n\n<p>You may want to consider opening an issue on <a href=\"https://github.com/rust-lang/cargo/issues\" rel=\"nofollow\">the Cargo issue tracker</a> about making this an option.</p>\n"}], "owner": {"reputation": 91978, "user_id": 387076, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/cFyP6.jpg?s=128&g=1", "display_name": "Gilles &#39;SO- stop being evil&#39;", "link": "https://stackoverflow.com/users/387076/gilles-so-stop-being-evil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 905, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1472347087, "creation_date": 1472341752, "last_edit_date": 1495541779, "question_id": 39186795, "link": "https://stackoverflow.com/questions/39186795/using-cargo-with-my-projects-own-directory-structure", "title": "Using Cargo with my project&#39;s own directory structure", "body": "<p>Can I use Cargo to build Rust code without using its <a href=\"http://doc.crates.io/manifest.html#the-project-layout\" rel=\"nofollow noreferrer\">standard project layout</a>?</p>\n\n<p>My source files are not in a directory called <code>src</code> and this will not change. My binaries must end up in the current directory (or, in some other projects, in a different directory that is not called <code>target/SOMETHING</code>). Can I tell Cargo that executable <code>foo</code> must be built from <code>foo.rs</code> and <code>bar.rs</code> in the same directory as <code>Cargo.toml</code>, and <code>qux</code> from <code>foo.rs</code>?</p>\n\n<p>I don't care about Cargo as a build system or as a deployment system. I'm only interested in it as a library management system. <a href=\"https://stackoverflow.com/questions/36813893/can-i-install-a-library-using-cargo-without-a-cargo-toml\">Apparently Cargo is the only game in the Rust town for this</a>.</p>\n"}, {"tags": ["generics", "type-conversion", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472442547, "post_id": 39186652, "comment_id": 65736693, "body": "See also <a href=\"http://stackoverflow.com/q/30427927/155423\">stackoverflow.com/q/30427927/155423</a>."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1472340665, "creation_date": 1472340665, "answer_id": 39186717, "question_id": 39186652, "link": "https://stackoverflow.com/questions/39186652/unable-to-implement-into-trait-for-a-generic-struct/39186717#39186717", "title": "Unable to implement Into trait for a generic struct", "body": "<p>Actually... there isn't a way to restrict this to types <code>T</code> not implementing <code>From&lt;Wrapper&lt;T&gt;&gt;</code>. Rust does not have \"negative\" clauses.</p>\n\n<p>Normally, the way to implement <code>Into</code> is simply to implement <code>From</code> and get <code>Into</code> <em>for free</em>. However, in your case the implementation would be:</p>\n\n<pre><code>impl&lt;T&gt; From&lt;Wrapper&lt;T&gt;&gt; for T {\n    fn from(w: Wrapper&lt;T&gt;) -&gt; T { w.value }\n}\n</code></pre>\n\n<p>and this runs into the orphan rules. You are not allowed to implement <code>From</code> for all <code>T</code>.</p>\n\n<p>There might be a trick, but I cannot see it here.</p>\n"}], "owner": {"reputation": 356, "user_id": 5280790, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/eac429a5a60ea7f567cc51ad67a95034?s=128&d=identicon&r=PG&f=1", "display_name": "Iceberg", "link": "https://stackoverflow.com/users/5280790/iceberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 182, "favorite_count": 0, "accepted_answer_id": 39186717, "answer_count": 1, "score": 2, "last_activity_date": 1472442478, "creation_date": 1472339946, "last_edit_date": 1472442478, "question_id": 39186652, "link": "https://stackoverflow.com/questions/39186652/unable-to-implement-into-trait-for-a-generic-struct", "title": "Unable to implement Into trait for a generic struct", "body": "<p>I'm having trouble implementing the <code>Into</code> trait for a generic struct in Rust.  A simplified version of what I am trying to do is below:</p>\n\n<pre><code>struct Wrapper&lt;T&gt; {\n    value: T\n}\n\nimpl&lt;T&gt; Into&lt;T&gt; for Wrapper&lt;T&gt; {\n    fn into(self) -&gt; T {\n        self.value\n    }\n}\n</code></pre>\n\n<p>When I try to compile, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: conflicting implementations of trait `std::convert::Into&lt;_&gt;` for type `Wrapper&lt;_&gt;`: [--explain E0119]\n --&gt; &lt;anon&gt;:5:1\n  |&gt;\n5 |&gt; impl&lt;T&gt; Into&lt;T&gt; for Wrapper&lt;T&gt; {\n  |&gt; ^\nnote: conflicting implementation in crate `core`\n</code></pre>\n\n<p>I get the impression that the problem is the following implementation in the standard library:</p>\n\n<pre><code>impl&lt;T, U&gt; Into&lt;T&gt; for U where T: From&lt;U&gt;\n</code></pre>\n\n<p>Since <code>T</code> <em>might</em> implement <code>From&lt;Wrapper&lt;T&gt;&gt;</code>, this <em>might</em> be a conflicting implementation.  Is there any way around this problem?  For example, is there a way to have an <code>impl&lt;T&gt;</code> block restricting <code>T</code> to types that do not implement <code>From&lt;Wrapper&lt;T&gt;&gt;</code>?</p>\n"}, {"tags": ["pointers", "rust", "unsafe"], "answers": [{"comments": [{"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1472337428, "post_id": 39186241, "comment_id": 65714060, "body": "got it, so I assume the compiler just magically handles all that for the normal use case? (which is what it meant that <code>?Sized</code> is a &quot;compiler intrinsic...) -- also you said <code>!Sized</code> and I think you meant <code>?Sized</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 3, "creation_date": 1472338001, "post_id": 39186241, "comment_id": 65714189, "body": "@cloudformdesign: I did mean <code>!Sized</code>. <code>Sized</code> means sized, <code>!Sized</code> means not-sized (but cannot actually be used as a bound) and <code>?Sized</code> means maybe-sized. As for the compiler handling conversions: indeed, the compiler just packs/unpacks as necessary automatically. Note that both the <code>raw::TraitObject</code> and <code>raw::Slice</code> are unstable as a principle to allow evolution of the underlying representation, and will probably remain unstable &quot;forever&quot; as Rust is not kin on committing to a stable ABI."}, {"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1472361693, "post_id": 39186241, "comment_id": 65717445, "body": "awesome! Thanks for the great overview"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1472335954, "creation_date": 1472335954, "answer_id": 39186241, "question_id": 39186185, "link": "https://stackoverflow.com/questions/39186185/how-do-you-create-a-sized-type-from-a-raw-pointer/39186241#39186241", "title": "How do you create a ?Sized type from a raw pointer?", "body": "<p>You actually cannot for the very reason cited in the error message.</p>\n\n<p>Rust references can be either pointer-sized (for <code>Sized</code> types) or <em>bigger</em> (for <code>!Sized</code> types). For example, if <code>Trait</code> is a trait, a <code>&amp;Trait</code> reference is actually two fields as defined by <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\"><code>std::raw::TraitObject</code></a>.</p>\n\n<p>So, in order to form a reference to an unsized type, you have to:</p>\n\n<ul>\n<li>identify exactly what kind of unsized type it is (trait? slice? ...)</li>\n<li>pick the right representation (<code>std::raw::TraitObject</code>, <code>std::raw::Slice</code>, ...)</li>\n</ul>\n\n<p>and then you have to fill in the blanks (there is more than just a pointer).</p>\n\n<p>So, unless you can limit your function to producing <code>&amp;T where T: Sized</code>, you cannot just transmute a raw pointer to <code>&amp;T</code>.</p>\n"}], "owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 411, "favorite_count": 0, "accepted_answer_id": 39186241, "answer_count": 1, "score": 2, "last_activity_date": 1472442401, "creation_date": 1472335558, "last_edit_date": 1472442401, "question_id": 39186185, "link": "https://stackoverflow.com/questions/39186185/how-do-you-create-a-sized-type-from-a-raw-pointer", "title": "How do you create a ?Sized type from a raw pointer?", "body": "<p>Here is an example of how to transmute a <code>Sized</code> type from a raw pointer:</p>\n\n<pre><code>use std::mem;\n\n#[derive(Eq, PartialEq)]\n#[repr(packed)]\nstruct Bob {\n    id: u32,\n    age: u32,\n}\n\nunsafe fn get_type&lt;'a, T: Sized&gt;(p: *const u8) -&gt; &amp;'a T {\n    mem::transmute(p)\n}\n\n#[test]\nfn it_works() {\n    let bob = Bob {\n        id: 22,\n        age: 445,\n    };\n    let bob2: &amp;Bob = unsafe {\n        let ptr: *const u8 = mem::transmute(&amp;bob);\n        get_type(ptr)\n    };\n    assert_eq!(&amp;bob, bob2);\n}\n</code></pre>\n\n<p>However, for my application I want to be able to get a <code>?Sized</code> type instead of a <code>Sized</code> type. However, this doesn't work:</p>\n\n<pre><code>unsafe fn get_type2&lt;'a, T: ?Sized&gt;(p: *const u8) -&gt; &amp;'a T {\n    mem::transmute(p)\n}\n</code></pre>\n\n<p>It fails with this error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: transmute called with differently sized types: *const u8 (64 bits) to &amp;'a T (pointer to T) [--explain E0512]\n --&gt; src/main.rs:2:9\n  |&gt;\n2 |&gt;         mem::transmute(p)\n  |&gt;         ^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I have tried to give it a <code>&amp;[u8]</code> (fat pointer) by converting it using <code>std::slice::from_raw_parts</code>, but it fails with pretty much the same error message.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472324755, "post_id": 39184570, "comment_id": 65710777, "body": "Thank you for the clarification on lifetimes. Unfortunately I am still getting the same error with this new hint:    note: reference must be valid for the lifetime &#39;b as defined on the block at 39:92...  pub fn path_to_params&lt;&#39;b&gt;(&amp;&#39;b self, path: &amp;&#39;b str) -&gt; Option&lt;HashMap&lt;&amp;&#39;b str, &amp;&#39;b str&gt;&gt; {"}, {"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472324858, "post_id": 39184570, "comment_id": 65710805, "body": "Do I need to set a lifetime for cap? If so, how do I go about doing that? It seems more complex in for loops."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472324904, "post_id": 39184570, "comment_id": 65710819, "body": "@eltiare: Note that I did not put <code>&#39;b</code> in as many places as you did. I left it off of <code>self</code> and the keys of the <code>HashMap</code>. Did it not work without it?"}, {"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472325553, "post_id": 39184570, "comment_id": 65711016, "body": "No, the compiler gave a suggestion to put the <code>&#39;b</code> lifetime on <code>self</code>. I probably don&#39;t need it on the keys, though."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 1, "creation_date": 1472325829, "post_id": 39184570, "comment_id": 65711100, "body": "@eltiare: Actually, my answer is wrong. I need to go back and change it as a careful examination of the Regex API revealed that it somehow unified the lifetimes of names and values. (I wish I could test it on play Rust :x)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472326228, "post_id": 39184570, "comment_id": 65711190, "body": "@eltiare: Answer edited, this may work much better (but once again, I cannot test it on play Rust :x)."}, {"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472326531, "post_id": 39184570, "comment_id": 65711268, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/122015/discussion-between-eltiare-and-matthieu-m\">continue this discussion in chat</a>."}, {"owner": {"reputation": 1213, "user_id": 831850, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/dcb0ac17de6539bbb91303eec3247944?s=128&d=identicon&r=PG", "display_name": "Jacob", "link": "https://stackoverflow.com/users/831850/jacob"}, "edited": false, "score": 2, "creation_date": 1472326977, "post_id": 39184570, "comment_id": 65711407, "body": "You can use Regex on the alternative <a href=\"http://play.integer32.com/?gist=37c5cf2d83c33220431c871b5d199d6d\" rel=\"nofollow noreferrer\">playground</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 1, "creation_date": 1472327750, "post_id": 39184570, "comment_id": 65711598, "body": "@eltiare: &quot;Fixed&quot; using <code>String</code>: <a href=\"http://play.integer32.com/?gist=37b3697ca1aca172e7ff48fc20d377ca\" rel=\"nofollow noreferrer\">play.integer32.com/?gist=37b3697ca1aca172e7ff48fc20d377ca</a>"}, {"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472329647, "post_id": 39184570, "comment_id": 65712124, "body": "@Matthew: In this particular case I don&#39;t think I have to worry about repeated matches. Thank you so much!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1472444070, "post_id": 39184570, "comment_id": 65737001, "body": "This <a href=\"https://github.com/rust-lang-nursery/regex/pull/230/commits/47bd416e1d380d672f267d13b161961334f04505\" rel=\"nofollow noreferrer\">should be fixed</a> with version 1.0 of regex. Note: <i>It was always possible to work around this by using indices.</i>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1472479531, "post_id": 39184570, "comment_id": 65755402, "body": "@Shepmaster: This might be worth an answer of its own, the patch itself won&#39;t be useful, but a code sample showing how to use the indices would be useful."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1472327565, "last_edit_date": 1472327565, "creation_date": 1472323480, "answer_id": 39184570, "question_id": 39184481, "link": "https://stackoverflow.com/questions/39184481/iterating-over-named-regex-groups-in-rust/39184570#39184570", "title": "Iterating over named regex groups in Rust", "body": "<p>Let's follow the lifetime lines:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/regex/regex/struct.Regex.html#method.captures_iter\" rel=\"nofollow\"><code>route.regex.captures_iter(path)</code></a> creates a <a href=\"https://doc.rust-lang.org/regex/regex/struct.FindCaptures.html\" rel=\"nofollow\"><code>FindCapture&lt;'r, 't&gt;</code></a> where the lifetime <code>'r</code> is that of <code>route.regex</code> and the lifetime <code>'t</code> is that of <code>path</code></li>\n<li>this iterator yields a <code>Captures&lt;'t&gt;</code>, only linked to the lifetime of <code>path</code></li>\n<li>whose method <a href=\"https://doc.rust-lang.org/regex/regex/struct.Captures.html#method.iter_named\" rel=\"nofollow\"><code>iter_named(&amp;'t self)</code></a> yields a <a href=\"https://doc.rust-lang.org/regex/regex/struct.SubCapturesNamed.html\" rel=\"nofollow\"><code>SubCapture&lt;'t&gt;</code></a> itself linked to the lifetime of <code>path</code> <em>and</em> the lifetime of the <code>cap</code></li>\n<li>this iterator yields a <code>(&amp;'t str, Option&lt;&amp;'t str&gt;)</code> so that both keys and values of the <code>HashMap</code> are linked to the lifetime of <code>path</code> <em>and</em> the lifetime of the <code>cap</code></li>\n</ul>\n\n<p>Therefore, it is unfortunately impossible to have the <code>HashMap</code> outlive the <code>cap</code> variable as this variable is used by the code as a \"marker\" to keep the buffers containing the groups alive.</p>\n\n<p>I am afraid that the only solution without significant re-structuring is to return a <code>HashMap&lt;String, String&gt;</code>, as unsatisfying as it is. It also occurs to me that a single capture group may match <em>multiple</em> times, not sure if you want to bother with this.</p>\n"}, {"comments": [{"owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472656466, "post_id": 39239614, "comment_id": 65842413, "body": "Is it still more efficient if you have a lot of regex&#39;s to match against?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "edited": false, "score": 0, "creation_date": 1472656984, "post_id": 39239614, "comment_id": 65842775, "body": "@eltiare you should always verify bold statements from people on the Internet ;-) Benchmarking would be a good idea. That being said, I can&#39;t imagine that the capture method would be multiple times more complex; my gut says maybe 5% slower. That would indicate that 20 regexes would be the tipping point (if you always checked all 20). Benchmarking would be interesting!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1472608856, "last_edit_date": 1495540301, "creation_date": 1472608856, "answer_id": 39239614, "question_id": 39184481, "link": "https://stackoverflow.com/questions/39184481/iterating-over-named-regex-groups-in-rust/39239614#39239614", "title": "Iterating over named regex groups in Rust", "body": "<p><a href=\"https://stackoverflow.com/a/39184570/155423\">Matthieu M. already explained</a> the lifetime situation well. The good news is that the regex crate recognized the problem and <a href=\"https://github.com/rust-lang-nursery/regex/pull/230/commits/47bd416e1d380d672f267d13b161961334f04505\" rel=\"nofollow noreferrer\">there's a fix in the pipeline for 1.0</a>.</p>\n\n<p>As stated in the commit message:</p>\n\n<blockquote>\n  <p>It was always possible to work around this by using indices.</p>\n</blockquote>\n\n<p>It is <em>also</em> possible to work around this by using <a href=\"https://doc.rust-lang.org/regex/regex/struct.Regex.html#method.capture_names\" rel=\"nofollow noreferrer\"><code>Regex::capture_names</code></a>, although it's a bit more nested this way:</p>\n\n<pre><code>pub fn path_to_params(&amp;self, path: &amp;'a str) -&gt; Option&lt;HashMap&lt;&amp;str, &amp;str&gt;&gt; {\n    for route in &amp;self.routes {\n        if let Some(captures) = route.regex.captures(path) {\n            let mut hash = HashMap::new();\n            for name in route.regex.capture_names() {\n                if let Some(name) = name {\n                    if let Some(value) = captures.name(name) {\n                        hash.insert(name, value);\n                    }\n                }\n            }\n            return Some(hash);\n        }\n    }\n    None\n}\n</code></pre>\n\n<p>Note that I also removed the outer <code>is_match</code> \u2014 it's inefficient to run the regex once and then again.</p>\n"}], "owner": {"reputation": 1271, "user_id": 568273, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/ca2295c9da7c79f9eb6b9d7e48cd9751?s=128&d=identicon&r=PG", "display_name": "eltiare", "link": "https://stackoverflow.com/users/568273/eltiare"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1013, "favorite_count": 1, "accepted_answer_id": 39184570, "answer_count": 2, "score": 4, "last_activity_date": 1472608856, "creation_date": 1472322888, "last_edit_date": 1472442978, "question_id": 39184481, "link": "https://stackoverflow.com/questions/39184481/iterating-over-named-regex-groups-in-rust", "title": "Iterating over named regex groups in Rust", "body": "<p>I wish to extract all named groups from a match into a HashMap and I'm running into a \"does not live long enough\" error while trying to compile this code: </p>\n\n<pre><code>extern crate regex;\n\nuse std::collections::HashMap;\nuse regex::Regex;\n\npub struct Route {\n    regex: Regex,\n}\n\npub struct Router&lt;'a&gt; {\n    pub namespace_seperator: &amp;'a str,\n    routes: Vec&lt;Route&gt;,\n}\n\nimpl&lt;'a&gt; Router&lt;'a&gt; {\n    // ...\n\n    pub fn path_to_params(&amp;self, path: &amp;'a str) -&gt; Option&lt;HashMap&lt;&amp;str, &amp;str&gt;&gt; {\n        for route in &amp;self.routes {\n            if route.regex.is_match(path) {\n                let mut hash = HashMap::new();\n                for cap in route.regex.captures_iter(path) {\n                    for (name, value) in cap.iter_named() {\n                        hash.insert(name, value.unwrap());\n                    }\n                }\n                return Some(hash);\n            }\n        }\n        None\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Here's the error output: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `cap` does not live long enough\n  --&gt; src/main.rs:23:42\n   |&gt;\n23 |&gt;                     for (name, value) in cap.iter_named() {\n   |&gt;                                          ^^^\nnote: reference must be valid for the anonymous lifetime #1 defined on the block at 18:79...\n  --&gt; src/main.rs:18:80\n   |&gt;\n18 |&gt;     pub fn path_to_params(&amp;self, path: &amp;'a str) -&gt; Option&lt;HashMap&lt;&amp;str, &amp;str&gt;&gt; {\n   |&gt;                                                                                ^\nnote: ...but borrowed value is only valid for the for at 22:16\n  --&gt; src/main.rs:22:17\n   |&gt;\n22 |&gt;                 for cap in route.regex.captures_iter(path) {\n   |&gt;                 ^\n</code></pre>\n\n<p>Obviously I still have a thing or two to learn about Rust lifetimes.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1472328968, "post_id": 39181411, "comment_id": 65711914, "body": "I was hoping to avoid a hack with assigning numeric values, but I didn&#39;t know it was possible to do it in such a concise way (I thought I would need an <code>impl</code> assigning values). Let&#39;s hope Rust implements a <code>Trait</code> like  Haskell&#39;s <code>Enum</code> in the future (there is already an RFC for that - <a href=\"https://github.com/rust-lang/rfcs/issues/284\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/284</a>)."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1472302663, "creation_date": 1472302663, "answer_id": 39181411, "question_id": 39181173, "link": "https://stackoverflow.com/questions/39181173/checking-for-consecutiveness-of-values-in-rust/39181411#39181411", "title": "Checking for consecutiveness of values in Rust", "body": "<p>You can give enum variants values (C-like) and easily compare them that way:</p>\n\n<pre><code>#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\nenum Rank {\n    Two=2,\n    Three,\n    Four,\n    Five,\n    Six,\n    Seven,\n    Eight,\n    Nine,\n    Ten,\n    Jack,\n    Queen,\n    King,\n    Ace\n}\n\nimpl Rank {\n    // Passing by value as Rank: Copy\n    pub fn next_is(self, other: Rank) -&gt; bool {\n        ((self as i32) + 1) == (other as i32)\n    }\n}\n</code></pre>\n\n<p>Then <code>is_straight</code> is simple to implement using the <code>next_is</code> method.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1472329137, "last_edit_date": 1472329137, "creation_date": 1472303292, "answer_id": 39181495, "question_id": 39181173, "link": "https://stackoverflow.com/questions/39181173/checking-for-consecutiveness-of-values-in-rust/39181495#39181495", "title": "Checking for consecutiveness of values in Rust", "body": "<p>As Chris Emerson already said, you can assign integer values to enum variants and then cast it via the <code>as</code> operator. So we have:</p>\n\n<pre><code>#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\nenum Rank {\n    Two = 2,\n    Three,\n    Four,\n    // ...\n}\n</code></pre>\n\n<p>The method <code>is_straight()</code> can be implemented using iterator magic:</p>\n\n<pre><code>fn is_straight(&amp;self) -&gt; bool {\n    self.0\n        .iter()\n        .map(|c| c.rank as i8 - self.0[0].rank as i8)\n        .eq(0..5)\n}\n</code></pre>\n\n<p>The unchecked indexing <code>self.0[0]</code> is safe, because the closure in <code>map()</code> is only called when at least one element is within the vector. And it <a href=\"https://play.rust-lang.org/?gist=9cb5a7fa9d685d86b82fe9378a060f43&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">seems to work</a> (I removed the <code>Suit</code> to reduce noise).</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 177, "favorite_count": 0, "accepted_answer_id": 39181411, "answer_count": 2, "score": 2, "last_activity_date": 1472329137, "creation_date": 1472301129, "last_edit_date": 1472302293, "question_id": 39181173, "link": "https://stackoverflow.com/questions/39181173/checking-for-consecutiveness-of-values-in-rust", "title": "Checking for consecutiveness of values in Rust", "body": "<p>I am currently implementing a poker game and I have encountered an issue that sounds really simple; it may be so, but I can't think of an idiomatic solution: how do I check if a hand is a straight?</p>\n\n<p>A straight is when all the ranks of the cards in a hand (i.e. 5 cards) are consecutive, e.g. Two, Three, Four, Five, Six. The suit can be disregarded (otherwise this would be a check for a straight flush).</p>\n\n<p>Consider the following code:</p>\n\n<pre><code>#[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord)]\nenum Rank {\n    Two,\n    Three,\n    Four,\n    Five,\n    Six,\n    Seven,\n    Eight,\n    Nine,\n    Ten,\n    Jack,\n    Queen,\n    King,\n    Ace\n}\n\n#[derive(Clone, Copy, PartialEq)]\nenum Suit {\n    Spades,\n    Clubs,\n    Diamonds,\n    Hearts\n}\n\n#[derive(PartialEq)]\nstruct Card {\n    rank: Rank,\n    suit: Suit\n}\n\nstruct Hand(Vec&lt;Card&gt;);\n\nimpl Hand {\n    fn is_straight(&amp;self) -&gt; bool {\n        // this should be easy\n    }\n}\n</code></pre>\n\n<p>The point is not iterating over an <code>enum</code> - I know this currently can't be done in Rust. I am not sure how to implement this if <code>Rank</code>s were an array or a <code>Vec&lt;Rank&gt;</code> (can be already sorted). The issue is checking if the <code>Hand</code>'s <code>Rank</code>s are consecutive (like <code>succ</code> or <code>pred</code> in Haskell).</p>\n\n<p>Any ideas how to do it idiomatically in <em>vanilla</em> Rust? The best I have come up with is checking if a sorted array of all <code>Rank</code>s contains the sorted array of <code>Hand</code>'s <code>Ranks</code>.</p>\n"}, {"tags": ["rust", "bitflags"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472283360, "post_id": 39178648, "comment_id": 65698954, "body": "Did you mean <code>if v &amp; (1 &lt;&lt; 0) &gt; 0</code> etc.?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1472283440, "post_id": 39178648, "comment_id": 65698971, "body": "@Dogbert, yes, updated"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1472285416, "post_id": 39178648, "comment_id": 65699417, "body": "I don&#39;t think it makes sense to use <code>match</code> when you are testing single bits."}], "answers": [{"comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1472291285, "post_id": 39179635, "comment_id": 65700909, "body": "That&#39;s really clever! I wrote some tests to check that this is indeed correct (and they pass): <a href=\"https://play.rust-lang.org/?gist=bcbd5fb07635e0601747abf06b8d3f57&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1567086101, "post_id": 39179635, "comment_id": 101865226, "body": "Is the generated code as efficient as a bitmask check?"}], "tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": false, "score": 11, "last_activity_date": 1472290714, "creation_date": 1472290714, "answer_id": 39179635, "question_id": 39178648, "link": "https://stackoverflow.com/questions/39178648/how-to-match-against-a-flags-bitmasks-in-rust/39179635#39179635", "title": "How to match against a flags/bitmasks in Rust?", "body": "<pre><code>if      (v &amp; (1 &lt;&lt; 0)) != 0 { foo(); }\nelse if (v &amp; (1 &lt;&lt; 1)) != 0 { bar(); }\nelse if (v &amp; (1 &lt;&lt; 2)) != 0 { baz(); }\n</code></pre>\n\n<p>Such concrete code can be rewritten like this:</p>\n\n<pre><code>match v.trailing_zeros() {\n    0 =&gt; foo(),\n    1 =&gt; bar(),\n    2 =&gt; baz(),\n    _ =&gt; {},\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2321, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1472290714, "creation_date": 1472283187, "last_edit_date": 1472283428, "question_id": 39178648, "link": "https://stackoverflow.com/questions/39178648/how-to-match-against-a-flags-bitmasks-in-rust", "title": "How to match against a flags/bitmasks in Rust?", "body": "<p>Take a typical check for bit-flags:</p>\n\n<pre><code>if      (v &amp; (1 &lt;&lt; 0)) != 0 { foo(); }\nelse if (v &amp; (1 &lt;&lt; 1)) != 0 { bar(); }\nelse if (v &amp; (1 &lt;&lt; 2)) != 0 { baz(); }\n</code></pre>\n\n<p>How would this be written as a <code>match</code> statement?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1472281013, "last_edit_date": 1472281013, "creation_date": 1472280670, "answer_id": 39178334, "question_id": 39178209, "link": "https://stackoverflow.com/questions/39178209/possible-to-check-a-value-is-a-compile-time-constant-in-rust/39178334#39178334", "title": "Possible to check a value is a compile time constant in Rust?", "body": "<p>If the type of the value or expression is fixed and known in advance, you can define a local constant and initialize it with the value or expression. If you don't otherwise use the constant, prefix its name with an underscore to suppress compiler warnings about the constant being unused. This only works with macros, though.</p>\n\n<pre><code>const _ASSERT_COMPILE_TIME_CONSTANT: i32 = $arg;\n</code></pre>\n\n<hr>\n\n<p>The nightly compiler also supports defining \"const functions\", i.e. functions that can be used in contexts where the compiler requires an expression that can be evaluated at compile time. The body of those functions are subject to restrictions, but call sites of const functions that don't need to be evaluated at compile time can pass expressions that cannot be evaluated at compile time as arguments, so defining a const function doesn't provide the guarantee you're asking for.</p>\n\n<hr>\n\n<p>If the type of the value or expression cannot be specified in the macro, then we can't omit it, as <code>const</code> requires that the type be specified. However, we can use a generic const function that returns a fixed type in a <code>const</code> initializer!</p>\n\n<pre><code>// at the beginning of the crate\n#![feature(const_fn)]\n\n// in the macro's body\nconst fn _swallow&lt;T&gt;(_x: T) { () }\nconst _ASSERT_COMPILE_TIME_CONSTANT: () = _swallow($arg);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1475099574, "last_edit_date": 1475099574, "creation_date": 1472282219, "answer_id": 39178528, "question_id": 39178209, "link": "https://stackoverflow.com/questions/39178209/possible-to-check-a-value-is-a-compile-time-constant-in-rust/39178528#39178528", "title": "Possible to check a value is a compile time constant in Rust?", "body": "<p>To add to @Francis answer, this is a macro that can be used to ensure constant value.</p>\n\n<pre><code>macro_rules! ensure_const_expr {\n    ($value:expr, $t:ty) =&gt; {\n        {\n            const _IGNORE: $t = $value;\n        }\n    }\n}\n\n\n// in a functions body\nensure_const_expr!(some_variable, i32);\n</code></pre>\n\n<hr>\n\n<p>Note the extra braces are needed so multiple uses don't fail with:</p>\n\n<pre><code>error: a value named `_IGNORE` has already been defined in this block\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1441, "favorite_count": 0, "accepted_answer_id": 39178334, "answer_count": 2, "score": 4, "last_activity_date": 1475099968, "creation_date": 1472279579, "last_edit_date": 1475099968, "question_id": 39178209, "link": "https://stackoverflow.com/questions/39178209/possible-to-check-a-value-is-a-compile-time-constant-in-rust", "title": "Possible to check a value is a compile time constant in Rust?", "body": "<p>There are cases when inline functions or macros will expand into a lot of code. However, when used with constants, dead branches can be optimized away.</p>\n\n<p>I could add a comment in the code:</p>\n\n<pre><code>// foo arg is always a constant, dead branches will be removed\n</code></pre>\n\n<p>But I'd rather add some kind of static assertion to ensure this is always the case.</p>\n\n<p>Is there a way in Rust to check if a value is a compile time constant?</p>\n\n<p>Something like GCC's <code>__builtin_constant_p</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1472297293, "post_id": 39177395, "comment_id": 65702619, "body": "This is really an elegant way to solve the problem. Thanks, mate, and I&#39;ll dig deeper for the Entry API"}, {"owner": {"reputation": 3185, "user_id": 114887, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/6b0c7e3c2d9ff81adf7470e066e4a705?s=128&d=identicon&r=PG&f=1", "display_name": "Matthew Piziak", "link": "https://stackoverflow.com/users/114887/matthew-piziak"}, "edited": false, "score": 0, "creation_date": 1472315291, "post_id": 39177395, "comment_id": 65708054, "body": "This is interesting. Can you clarify what you mean by &quot;borrows can&#39;t have ragged edges&quot;?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 1, "creation_date": 1472336242, "post_id": 39177395, "comment_id": 65713787, "body": "&quot; Here is rust&#39;s current BDfL&quot; Rust does not have a BDFL."}], "tags": [], "owner": {"reputation": 1342, "user_id": 4204307, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/149f206ac25aeef46535609435dc5c74?s=128&d=identicon&r=PG&f=1", "display_name": "Christopher Ian  Stern", "link": "https://stackoverflow.com/users/4204307/christopher-ian-stern"}, "is_accepted": true, "score": 5, "last_activity_date": 1483404500, "last_edit_date": 1483404500, "creation_date": 1472271307, "answer_id": 39177395, "question_id": 39177087, "link": "https://stackoverflow.com/questions/39177087/cannot-borrow-as-mutable-more-than-once-at-a-time-in-if-else/39177395#39177395", "title": "&quot;cannot borrow as mutable more than once at a time&quot; in if-else", "body": "<p>This is a common problem with <code>HashMap</code>s in Rust: borrows can't have ragged edges. Fortunately, there is an API to handle this case.</p>\n\n<p>You can use <code>HashMap::entry()</code> to get a place on a hash map, occupied or vacant and then use <code>or_insert()</code> to set a value for the key if there is not one already.</p>\n\n<pre><code>*hm.entry(tt).or_insert(0u32) += 1;\n</code></pre>\n\n<p>This returns a reference to the <code>hm</code> location, filling it with 0 if it wasn't there, then increments whatever it was.</p>\n\n<p>That Rust's lifetimes are prone to gratuitous conflicts is not an unknown issue. Here is <a href=\"http://smallcultfollowing.com/babysteps/blog/2016/04/27/non-lexical-lifetimes-introduction\" rel=\"nofollow noreferrer\">a Rust's Rust core team member discussing plans</a> to tackle this in a future version of Rust. For now, though, there are library methods that work around it.</p>\n"}], "owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 948, "favorite_count": 0, "closed_date": 1472442111, "accepted_answer_id": 39177395, "answer_count": 1, "score": 0, "last_activity_date": 1483404500, "creation_date": 1472267436, "last_edit_date": 1472441978, "question_id": 39177087, "link": "https://stackoverflow.com/questions/39177087/cannot-borrow-as-mutable-more-than-once-at-a-time-in-if-else", "closed_reason": "Duplicate", "title": "&quot;cannot borrow as mutable more than once at a time&quot; in if-else", "body": "<p>I'm writing a program to calculate the frequency of word occurrence. This is a segment of my code.</p>\n\n<pre><code>// hm is a HashMap&lt;&amp;str, u32&gt;\nif let Some(val) = hm.get_mut(tt) {\n    *val += 1u32;\n} else {\n    hm.insert(tt.clone(), 1u32);\n}\n</code></pre>\n\n<p>And I got...</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `hm` as mutable more than once at a time [E0499]\n      hm.insert(tt.clone(), 1u32);\n      ^~\nnote: first mutable borrow occurs here\n            if let Some(val) = hm.get_mut(tt) {\n                            ^~\nnote: first borrow ends here\n            }\n            ^\nhelp: run `rustc --explain E0499` to see a detailed explanation\n</code></pre>\n\n<p>I can bypass this by moving <code>hm.insert()</code> out of <code>else</code> scope but it's kind of \"un-programmatic\" way... I tried using <code>match</code> but the same error (would obviously) happened.</p>\n\n<p>How can I fix this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1472281921, "post_id": 39175953, "comment_id": 65698631, "body": "Without actual code, this can only be solved by blind guessing.  All we need is the structure, where it&#39;s being imported, and where it&#39;s being used."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1472293666, "post_id": 39175953, "comment_id": 65701598, "body": "How do you compile (<code>cargo build</code>)? Have you modified your <code>Cargo.toml</code>? In what file is the line <code>mod tutorial;</code>? In what file is the line <code>mod foo;</code>? Without this information, we can only guess how your module tree looks like, as @DK. already said."}], "answers": [{"comments": [{"owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472261057, "post_id": 39175997, "comment_id": 65695301, "body": "yeah, that&#39;s the first thing I tried. It didn&#39;t work. I still get error: macro undefined: &#39;implement_vertex!&#39;"}, {"owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "edited": false, "score": 1, "creation_date": 1472326882, "post_id": 39175997, "comment_id": 65711367, "body": "Make sure the <code>extern crate</code> statement is before your <code>mod</code> statements, otherwise the mods won&#39;t be able to access the imported macros."}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1538930543, "post_id": 39175997, "comment_id": 92308222, "body": "I&#39;m getting the same error but for <code>tests&#47;common.rs</code>. So what is analogous to <code>src&#47;main.rs</code> or <code>src&#47;lib.rs</code> for the <code>test</code> directory?"}, {"owner": {"reputation": 985, "user_id": 596489, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Ai1aK.png?s=128&g=1", "display_name": "Vijay Sali", "link": "https://stackoverflow.com/users/596489/vijay-sali"}, "reply_to_user": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1597516833, "post_id": 39175997, "comment_id": 112160849, "body": "@Nawaz curios to know how did you solve this issue incase of tests directory?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 985, "user_id": 596489, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Ai1aK.png?s=128&g=1", "display_name": "Vijay Sali", "link": "https://stackoverflow.com/users/596489/vijay-sali"}, "edited": false, "score": 1, "creation_date": 1597518479, "post_id": 39175997, "comment_id": 112161282, "body": "@VijaySali Usually, every <code>.rs</code> file in <code>tests&#47;</code> is compiled as its own little binary crate with your main library as dependency. So you would have to add the <code>#[macro_use] extern crate glium;</code> at the top of every file. If you add your tests manually in <code>Cargo.toml</code> via <code>[[test]]</code>, then those are you crate roots."}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "reply_to_user": {"reputation": 985, "user_id": 596489, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/Ai1aK.png?s=128&g=1", "display_name": "Vijay Sali", "link": "https://stackoverflow.com/users/596489/vijay-sali"}, "edited": false, "score": 1, "creation_date": 1597524974, "post_id": 39175997, "comment_id": 112162972, "body": "@VijaySali: As Lukas explained in the comment above, the solution is to add <code>extern crate stuff;</code> to each of your <code>tests&#47;&lt;each-file&gt;.rs</code>. Also, note that if you want to defined a common set of functions to be used in each of your tests file, then dont define that common file as <code>tests&#47;common.rs</code> as that&#39;ll be considered yet another <i>test</i> file instead by <code>Cargo</code>. Define <code>tests&#47;common&#47;mod.rs</code> instead. Then you can add <code>extern crate common</code> to your test files."}, {"owner": {"reputation": 2376, "user_id": 716568, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/5xQyw.jpg?s=128&g=1", "display_name": "LongHike", "link": "https://stackoverflow.com/users/716568/longhike"}, "edited": false, "score": 0, "creation_date": 1602225161, "post_id": 39175997, "comment_id": 113658179, "body": "&quot;Make sure the extern crate statement is before your mod statements ...&quot; actually did the trick for me. Thanks!"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 7, "last_activity_date": 1517770995, "last_edit_date": 1517770995, "creation_date": 1472254806, "answer_id": 39175997, "question_id": 39175953, "link": "https://stackoverflow.com/questions/39175953/how-do-you-import-macros-in-submodules-in-rust/39175997#39175997", "title": "How do you import macros in submodules in Rust?", "body": "<p>Do it just like the compiler told you:</p>\n\n<blockquote>\n  <p><code>an `extern crate` loading macros must be at the crate root</code></p>\n</blockquote>\n\n<p>Put the <code>#[macro_use] extern crate glium;</code> in the crate root, which is <code>main.rs</code> in your case. Make sure the <code>extern crate</code> statement is before your <code>mod</code> statements, otherwise the modules won't be able to access the imported macros. </p>\n\n<p>You can then use the macro in your submodule.</p>\n"}, {"tags": [], "owner": {"reputation": 207, "user_id": 6814244, "user_type": "unregistered", "profile_image": "https://www.gravatar.com/avatar/08ad35f0d5ae1b34b28260a38e4862d2?s=128&d=identicon&r=PG", "display_name": "John Anthony", "link": "https://stackoverflow.com/users/6814244/john-anthony"}, "is_accepted": false, "score": 19, "last_activity_date": 1474025430, "last_edit_date": 1474025430, "creation_date": 1473435657, "answer_id": 39415241, "question_id": 39175953, "link": "https://stackoverflow.com/questions/39175953/how-do-you-import-macros-in-submodules-in-rust/39415241#39415241", "title": "How do you import macros in submodules in Rust?", "body": "<p>Macros are handled early enough in the compilation stage that <strong>order matters</strong>. You, like I, probably were getting nice and used to Rust magicking away the need to care about the order of your use and crate statements.</p>\n\n<p>Move your <code>#[macro_use] extern crate glium;</code> statement to the top of your <code>lib.rs</code> and/or <code>main.rs</code> file as needed.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1560369125, "last_edit_date": 1560369125, "creation_date": 1517771234, "answer_id": 48611945, "question_id": 39175953, "link": "https://stackoverflow.com/questions/39175953/how-do-you-import-macros-in-submodules-in-rust/48611945#48611945", "title": "How do you import macros in submodules in Rust?", "body": "<p>I figured out my original problem. It turns out there are 2 Cargo roots? I have both a <code>lib.rs</code> and a <code>main.rs</code>. It turns out the correct place to put the <code>#[macro_use]</code> was in <code>lib.rs</code>.</p>\n"}], "owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11846, "favorite_count": 4, "answer_count": 3, "score": 29, "last_activity_date": 1560369125, "creation_date": 1472254336, "last_edit_date": 1517771391, "question_id": 39175953, "link": "https://stackoverflow.com/questions/39175953/how-do-you-import-macros-in-submodules-in-rust", "title": "How do you import macros in submodules in Rust?", "body": "<p>I have the following directory structure</p>\n\n<ul>\n<li><code>/main.rs</code></li>\n<li><code>/lib.rs</code></li>\n<li><code>/tutorial/mod.rs</code></li>\n<li><code>/tutorial/foo.rs</code></li>\n</ul>\n\n<p>In <code>foo.rs</code> I need to use a macro from the glium library, <code>implement_vertex!</code>. If I put <code>#[macro_use] extern crate glium;</code> at the head of <code>foo.rs</code>, I get a <code>error: an `extern crate` loading macros must be at the crate root</code>. I also get a <code>error: macro undefined: 'implement_vertex!'</code></p>\n\n<p>There is also a <code>lib.rs</code> that is the crate root of the tutorial modules. I needed to put <code>#[macro_use]</code> there. Does this create 2 crate roots if I have both <code>main.rs</code> and <code>lib.rs</code>?</p>\n\n<p>What is the correct way to import macros in a submodule?</p>\n"}, {"tags": ["rust", "buffer"], "answers": [{"tags": [], "owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "is_accepted": false, "score": 0, "last_activity_date": 1472250959, "creation_date": 1472250959, "answer_id": 39175507, "question_id": 39175411, "link": "https://stackoverflow.com/questions/39175411/read-and-write-on-same-tcpstream-in-rust/39175507#39175507", "title": "Read and Write on same TcpStream in Rust", "body": "<p>Are you just looking for <a href=\"https://doc.rust-lang.org/1.2.0/std/io/struct.BufStream.html\" rel=\"nofollow\"><code>BufStream</code></a> ?</p>\n"}], "owner": {"reputation": 339, "user_id": 3392335, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb374c23fc7955b4897467d6fb003352?s=128&d=identicon&r=PG&f=1", "display_name": "Hugo Buff", "link": "https://stackoverflow.com/users/3392335/hugo-buff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 2316, "favorite_count": 0, "closed_date": 1472260171, "answer_count": 1, "score": 1, "last_activity_date": 1472260148, "creation_date": 1472250228, "last_edit_date": 1472260148, "question_id": 39175411, "link": "https://stackoverflow.com/questions/39175411/read-and-write-on-same-tcpstream-in-rust", "closed_reason": "Duplicate", "title": "Read and Write on same TcpStream in Rust", "body": "<p>I have a <code>TcpStream</code> that prints out received lines by buffering them in a <code>BufReader</code>. </p>\n\n<pre><code>use std::net::TcpStream;\nuse std::io::{BufReader, BufRead, Write, BufWriter};\n\nfn main() {\n    let stream = TcpStream::connect(\"irc.freenode.org:6667\").unwrap();\n    let mut line = String::new();\n    let mut reader = BufReader::new(stream);\n\n    // let mut writer = BufWriter::new(stream);  //Issues with moved value  `stream`\n\n    loop {\n        let _ = reader.read_line(&amp;mut line);\n        println!(\"{}\", line);\n        line = String::new();\n    }\n}\n</code></pre>\n\n<p>I want to be able to write to the stream as well using a <code>BufWriter</code> but come across issues with <code>use of moved value 'stream'</code>.</p>\n\n<p>How can I read and write on the same <code>TcpStream</code>?</p>\n\n<p>I am aware of a crate that provides this functionality, but want to understand how to do it myself as I am new to Rust.</p>\n"}, {"tags": ["input", "rust", "output", "flush"], "comments": [{"owner": {"reputation": 2569, "user_id": 514040, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/98bb1ee1a1f3d1297acf493776066086?s=128&d=identicon&r=PG", "display_name": "neuronaut", "link": "https://stackoverflow.com/users/514040/neuronaut"}, "edited": false, "score": 0, "creation_date": 1472247552, "post_id": 39174864, "comment_id": 65692241, "body": "Why not just call unwrap, like so: <code>io::stdout().flush().unwrap()</code>? With something like flush, which should almost never fail, that should be sufficient."}, {"owner": {"reputation": 916, "user_id": 6763074, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh5.googleusercontent.com/-NkPGt4saSn4/AAAAAAAAAAI/AAAAAAAAABs/Orsm5ritSTs/photo.jpg?sz=128", "display_name": "Patrick Bucher", "link": "https://stackoverflow.com/users/6763074/patrick-bucher"}, "reply_to_user": {"reputation": 2569, "user_id": 514040, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/98bb1ee1a1f3d1297acf493776066086?s=128&d=identicon&r=PG", "display_name": "neuronaut", "link": "https://stackoverflow.com/users/514040/neuronaut"}, "edited": false, "score": 0, "creation_date": 1472248377, "post_id": 39174864, "comment_id": 65692476, "body": "Well, thanks! That works. I just don&#39;t understand yet, why. I worked through &quot;the book&quot; to chapter 4.12, but unwrap() is only handled in chapter <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">5.7 (error handling)</a>."}, {"owner": {"reputation": 2569, "user_id": 514040, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/98bb1ee1a1f3d1297acf493776066086?s=128&d=identicon&r=PG", "display_name": "neuronaut", "link": "https://stackoverflow.com/users/514040/neuronaut"}, "edited": false, "score": 0, "creation_date": 1472248611, "post_id": 39174864, "comment_id": 65692533, "body": "I&#39;d recommend reading that error handling section. It goes over all the details of what unwrap does, as well as other options for simplifying error handling."}, {"owner": {"reputation": 916, "user_id": 6763074, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh5.googleusercontent.com/-NkPGt4saSn4/AAAAAAAAAAI/AAAAAAAAABs/Orsm5ritSTs/photo.jpg?sz=128", "display_name": "Patrick Bucher", "link": "https://stackoverflow.com/users/6763074/patrick-bucher"}, "reply_to_user": {"reputation": 2569, "user_id": 514040, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/98bb1ee1a1f3d1297acf493776066086?s=128&d=identicon&r=PG", "display_name": "neuronaut", "link": "https://stackoverflow.com/users/514040/neuronaut"}, "edited": false, "score": 0, "creation_date": 1472249020, "post_id": 39174864, "comment_id": 65692651, "body": "OK. Rust seems to be a hard nut to crack. Even an advanced hello world example needs intimate knowledge of the error handling mechanism ;-)"}], "answers": [{"comments": [{"owner": {"reputation": 916, "user_id": 6763074, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh5.googleusercontent.com/-NkPGt4saSn4/AAAAAAAAAAI/AAAAAAAAABs/Orsm5ritSTs/photo.jpg?sz=128", "display_name": "Patrick Bucher", "link": "https://stackoverflow.com/users/6763074/patrick-bucher"}, "edited": false, "score": 0, "creation_date": 1472326372, "post_id": 39176604, "comment_id": 65711234, "body": "Many thanks for pointing out all the different options. The empty block probably was what I am was looking for initially (instead of printing an empty String). But the other options are even better. I really need to work through the whole intro &quot;book&quot; first, before I tackle exercises. Rust has a steep learning curve. Talking about the C example: that might be shorter by using an upper limit for the length of name. And the concatenation must be a distinct step for that exercise, otherwise it would be shorter, of course."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1559902583, "last_edit_date": 1559902583, "creation_date": 1472261056, "answer_id": 39176604, "question_id": 39174864, "link": "https://stackoverflow.com/questions/39174864/simplification-possible-in-example-using-print-and-flush/39176604#39176604", "title": "Simplification possible in example using print! and flush?", "body": "<p>As other people have said, make sure to read the <a href=\"https://doc.rust-lang.org/stable/book/ch09-00-error-handling.html\" rel=\"nofollow noreferrer\">error handling chapter</a>. </p>\n\n<p>In most cases, you don't want to use <code>println!</code> to report errors. Either you should return the error from your function and let the caller deal with it, or you should use <code>panic!</code> to abort that thread and potentially the process.</p>\n\n<pre><code>match io::stdout().flush() {\n    Ok(_) =&gt; print!(\"\"),\n    Err(error) =&gt; println!(\"{}\", error),\n}\n</code></pre>\n\n<p>Instead of printing nothing (which is inefficient), you can just... do nothing:</p>\n\n<pre><code>match io::stdout().flush() {\n    Ok(_) =&gt; (),\n    Err(error) =&gt; println!(\"{}\", error),\n}\n</code></pre>\n\n<p>Since you don't care about the success case, you can use an <code>if let</code>:</p>\n\n<pre><code>if let Err(error) = io::stdout().flush() {\n    println!(\"{}\", error);\n}\n</code></pre>\n\n<p>Replacing the <code>println</code> with a <code>panic!</code> would be even better:</p>\n\n<pre><code>if let Err(error) = io::stdout().flush() {\n    panic!(\"{}\", error);\n}\n</code></pre>\n\n<p>This is almost exactly what <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\"><code>Option::unwrap</code></a> does (<a href=\"https://github.com/rust-lang/rust/blob/1.34.1/src/libcore/option.rs#L342-L347\" rel=\"nofollow noreferrer\">source</a>), except it also returns the successful value when present:</p>\n\n<pre><code>pub fn unwrap(self) -&gt; T {\n    match self {\n        Some(val) =&gt; val,\n        None =&gt; panic!(\"called `Option::unwrap()` on a `None` value\"),\n    }\n}\n</code></pre>\n\n<p>However, it's <strong>even better</strong> to use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.expect\" rel=\"nofollow noreferrer\"><code>Option::expect</code></a> which allows you to specify an additional error message:</p>\n\n<pre><code>io::stdout().flush().expect(\"Unable to flush stdout\");\n</code></pre>\n\n<p>Applying that twice:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() {\n    print!(\"What is your name? \");\n\n    io::stdout().flush().expect(\"Unable to flush stdout\");\n\n    let mut name = String::new();\n    io::stdin()\n        .read_line(&amp;mut name)\n        .expect(\"Unable to read the line\");\n\n    let name = name.trim();\n\n    if !name.is_empty() {\n        println!(\"Hello, {}, nice to meet you!\", name);\n    } else {\n        println!(\"No name entered, goodbye.\");\n    }\n}\n</code></pre>\n\n<p>Note that there's no need to re-allocate a <code>String</code>, you can just shadow <code>name</code>, and there's no need to use <code>format</code> just to print out stuff.</p>\n\n<p>Since Rust 1.26.0, you could also choose to return a <code>Result</code> from <code>main</code>:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() -&gt; Result&lt;(), io::Error&gt; {\n    print!(\"What is your name? \");\n    io::stdout().flush()?;\n\n    let mut name = String::new();\n    io::stdin().read_line(&amp;mut name)?;\n\n    let name = name.trim();\n\n    if !name.is_empty() {\n        println!(\"Hello, {}, nice to meet you!\", name);\n    } else {\n        println!(\"No name entered, goodbye.\");\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<blockquote>\n  <p>but I could write this shorter in C, after all...</p>\n</blockquote>\n\n<p>I would encourage / challenge you to attempt this. Note that every memory allocation in this program is checked, as is every failure case dealing with the standard output. Many people are not aware that C's <code>printf</code> <strong>returns an error code</strong> that you should be checking. Try outputting to a pipe that has been closed for an example.</p>\n"}], "owner": {"reputation": 916, "user_id": 6763074, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh5.googleusercontent.com/-NkPGt4saSn4/AAAAAAAAAAI/AAAAAAAAABs/Orsm5ritSTs/photo.jpg?sz=128", "display_name": "Patrick Bucher", "link": "https://stackoverflow.com/users/6763074/patrick-bucher"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 624, "favorite_count": 0, "accepted_answer_id": 39176604, "answer_count": 1, "score": 1, "last_activity_date": 1559902583, "creation_date": 1472246934, "last_edit_date": 1472261075, "question_id": 39174864, "link": "https://stackoverflow.com/questions/39174864/simplification-possible-in-example-using-print-and-flush", "title": "Simplification possible in example using print! and flush?", "body": "<p>I started programming Rust a couple of days ago by working through the official documentation. Now I'm trying to challenge my understanding of Rust by working through the book \"Exercises for Programmers\" by Brian P. Hogan (The Pragmatic Programmers).</p>\n\n<p>The first exercise is to write a program that asks the user for a name and prints out a greeting using that name. Input, string concatenation and output should be done in three distinct steps.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>What is your name? Patrick\nHello, Patrick, nice to meet you.\n</code></pre>\n\n<p>The name will be entered at the same line as the initial prompt. Here's my solution:</p>\n\n<pre><code>use std::io;\nuse std::io::Write;\n\nfn main() {\n    print!(\"What is your name? \");\n    match io::stdout().flush() {\n        Ok(_) =&gt; print!(\"\"),\n        Err(error) =&gt; println!(\"{}\", error),\n    }\n    let mut name = String::new();\n    match io::stdin().read_line(&amp;mut name) {\n        Ok(_) =&gt; {\n            name = name.trim().to_string();\n            if name.len() &gt; 0 {\n                let greeting = \"Hello, \".to_string() + &amp;name + &amp;\", nice to meet you!\".to_string();\n                println!(\"{}\", greeting);\n            } else {\n                println!(\"No name entered, goodbye.\");\n            }\n        }\n        Err(error) =&gt; println!(\"{}\", error),\n    }\n}\n</code></pre>\n\n<p>The <code>print!</code> macro doesn't actually output the prompt until I call <code>flush</code>. <code>flush</code> needs error handling, so I need both to handle the <code>Ok</code> and the <code>Err</code> case. In case of <code>Ok</code>, there's nothing useful to do, so I just <code>print!</code> an empty string.</p>\n\n<p>Is there a shorter way to handle this? Maybe the error handling can be skipped or simplified somehow, or the whole <code>print!</code>/<code>flush</code> approach is the wrong one. (Everything works fine, but I could write this shorter in C, after all...)</p>\n"}, {"tags": ["tcp", "rust"], "answers": [{"comments": [{"owner": {"reputation": 339, "user_id": 3392335, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb374c23fc7955b4897467d6fb003352?s=128&d=identicon&r=PG&f=1", "display_name": "Hugo Buff", "link": "https://stackoverflow.com/users/3392335/hugo-buff"}, "edited": false, "score": 0, "creation_date": 1472240723, "post_id": 39173586, "comment_id": 65689567, "body": "Oh, I thought that it was being ignored with <code>let _ =</code>. I now see that both the return value and the sideeffect were being ignored."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 3, "last_activity_date": 1472240121, "creation_date": 1472240121, "answer_id": 39173586, "question_id": 39173526, "link": "https://stackoverflow.com/questions/39173526/how-do-you-read-the-contents-of-mut-0-128/39173586#39173586", "title": "How do you read the contents of &amp;mut [0; 128]?", "body": "<p>The comment in the code indicates that the result is ignored:</p>\n\n<pre><code>let _ = stream.read(&amp;mut [0; 128]); // ignore here too\n</code></pre>\n\n<p>To get the data, you need to create a variable:</p>\n\n<pre><code>let mut buffer = [0; 128];\nlet _ = stream.read(&amp;mut buffer);\n// The data is in buffer.\n</code></pre>\n"}], "owner": {"reputation": 339, "user_id": 3392335, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb374c23fc7955b4897467d6fb003352?s=128&d=identicon&r=PG&f=1", "display_name": "Hugo Buff", "link": "https://stackoverflow.com/users/3392335/hugo-buff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 39173586, "answer_count": 1, "score": 0, "last_activity_date": 1472260238, "creation_date": 1472239856, "last_edit_date": 1472260238, "question_id": 39173526, "link": "https://stackoverflow.com/questions/39173526/how-do-you-read-the-contents-of-mut-0-128", "title": "How do you read the contents of &amp;mut [0; 128]?", "body": "<p>I've been reading through <a href=\"https://doc.rust-lang.org/book/\" rel=\"nofollow\">the Rust documentation</a> and made it to section 4.26 before looking at the libraries included. <a href=\"https://doc.rust-lang.org/std/net/struct.TcpStream.html\" rel=\"nofollow\"><code>std::net::TcpStream</code></a> caught my eye but I don't understand the following lines:</p>\n\n<pre><code>let _ = stream.write(&amp;[1]);\nlet _ = stream.read(&amp;mut [0; 128]);\n</code></pre>\n\n<p>I have seen <code>[0; 128]</code> before under <a href=\"https://doc.rust-lang.org/book/vectors.html\" rel=\"nofollow\">Vectors</a> as <code>vec![0;10] // Ten 0s</code> so I can see that a buffer of 128 <code>0</code>s is passed in. The documentation for <code>read</code> says \"Pull some bytes from this source into the specified buffer, returning how many bytes were read.\" so how can you access the data that was read into the buffer?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1472226493, "post_id": 39170088, "comment_id": 65682725, "body": "Am I right in thinking that in your solution, <code>T*T</code> could be a completely different type <code>M</code>, as long as adding two <code>M</code> together gives a <code>T</code> again?"}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1472226965, "post_id": 39170088, "comment_id": 65682956, "body": "@ChrisEmerson: yes, you are right."}, {"owner": {"user_type": "does_not_exist", "display_name": "user4832129"}, "edited": false, "score": 0, "creation_date": 1472227929, "post_id": 39170088, "comment_id": 65683494, "body": "Is it correct to say that a rust compiler does type checking before substitution, so it is necessary to specify traits for trait types explicitly?(I hope my wording makes sense)."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 1, "creation_date": 1472232223, "post_id": 39170088, "comment_id": 65685664, "body": "@DmitryKuznetsov Yes, unlike C++, Rust requires that we specify the traits over generic types to use the methods from these traits in a generic function."}], "tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 4, "last_activity_date": 1472226664, "last_edit_date": 1472226664, "creation_date": 1472226389, "answer_id": 39170088, "question_id": 39169795, "link": "https://stackoverflow.com/questions/39169795/error-when-using-operators-with-a-generic-type/39170088#39170088", "title": "Error when using operators with a generic type", "body": "<p>The error message tells you what to do: you need to add an <code>Add</code> implementation for <code>&lt;T as Mul&gt;::Output</code>.</p>\n\n<p>You can do so by adding a trait bound on your <code>impl</code> as such:</p>\n\n<pre><code>use std::ops::Mul;\nuse std::ops::Add;\n\nstruct Vec2&lt;T: Copy&gt;\n{\n    x: T,\n    y: T,\n}\n\nimpl&lt;T&gt; Vec2&lt;T&gt;\n    where T: Copy + Mul,\n          &lt;T as Mul&gt;::Output: Add&lt;Output=T&gt;\n{\n    fn magnitude_squared(&amp;self) -&gt; T {\n        self.x * self.x + self.y * self.y\n    }\n}\n\nfn main() {\n    let x = Vec2 { x: 1f32, y: 1f32 };\n    println!(\"{}\", x.magnitude_squared());\n}\n</code></pre>\n\n<p>The <code>Copy</code> was added to simplify this answer.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user4832129"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 930, "favorite_count": 1, "closed_date": 1472234878, "accepted_answer_id": 39170088, "answer_count": 1, "score": 4, "last_activity_date": 1472226664, "creation_date": 1472225337, "question_id": 39169795, "link": "https://stackoverflow.com/questions/39169795/error-when-using-operators-with-a-generic-type", "closed_reason": "Duplicate", "title": "Error when using operators with a generic type", "body": "<p>I'm learning rust and I can't understand why the following code gives an error.</p>\n\n<pre><code>use std::ops::Mul;\nuse std::ops::Add;\n\nstruct Vec2&lt;T&gt;\n{\n    x: T,\n    y: T,\n}\n\nimpl&lt;T: Mul + Add&gt; Vec2&lt;T&gt; {\n    fn magnitude_squared(&amp;self) -&gt; T {\n        self.x * self.x + self.y * self.y // error here\n    }\n}\n\nfn main() {\n    let x = Vec2 { x: 1f32, y: 1f32 };\n    println!(\"{}\", x.magnitude_squared());\n}\n</code></pre>\n\n<p>Error message (doesn't make much sense to me unless multiplication of two floats produces some 'non-addable' type):</p>\n\n<blockquote>\n  <p>src\\main.rs(14,9): error E0369: binary operation <code>+</code> cannot be applied\n  to type <code>&lt;T as std::ops::Mul&gt;::Output</code><br>\n  help: run <code>rustc --explain E0369</code> to see a detailed explanation<br>\n  note: an implementation of <code>std::ops::Add</code> might be missing for <code>&lt;T as std::ops::Mul&gt;::Output</code></p>\n</blockquote>\n\n<p>Rust compiler <code>rustc 1.11.0 (9b21dcd6a 2016-08-15)</code><br>\nThe code is similar to <a href=\"https://doc.rust-lang.org/book/traits.html#trait-bounds-on-generic-structs\" rel=\"nofollow\">this</a> example. What's the difference that makes my code wrong?</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1472226881, "post_id": 39169790, "comment_id": 65682914, "body": "Could you please post a complete code example (which compiles). I suppose <code>module::*</code> are supposed to be some kind of integral types... but I&#39;d rather make sure that I have everything right."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472227176, "post_id": 39169790, "comment_id": 65683086, "body": "@antoyo corrected"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472233904, "post_id": 39169790, "comment_id": 65686441, "body": "Does it matter if <code>OTHER_EXPRESSION</code> is evaluated only once (and its result cached), or if it&#39;s evaluated when it should not be needed?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1472234745, "post_id": 39169790, "comment_id": 65686827, "body": "@ideasman42 you have been asking a lot of questions lately, which is fine. However, I sincerely would have hoped that you have learned <b>how to ask a good question</b> by now. A great majority of your questions have had a comment asking you to improve in some fashion or another. At this point, those should be a rare occurrence. <i>Please</i> take that feedback and apply it to all questions going forward. And as a personal appeal, <b>please</b> learn how to use the Latin <i>e.g.</i> properly, it&#39;s the most annoying edit I have to make you every one of your questions."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 1, "creation_date": 1472236025, "post_id": 39169790, "comment_id": 65687426, "body": "@ideasman42 To continue in the same vein as Shepmaster, could you pleasse accept one answer on the many questions you asked? Or if none of them answers you question, please tell why it does not and possibly edit your questions. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1472227944, "post_id": 39170425, "comment_id": 65683502, "body": "Thanks for the answer, I simplified the question from my own code to make it easier to follow, the body of each if statement is more then just a single flag expression. <i>(am still interested if this can be done by de-duplicating the if check and its body).</i>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1472227482, "creation_date": 1472227482, "answer_id": 39170425, "question_id": 39169790, "link": "https://stackoverflow.com/questions/39169790/is-it-possible-to-de-duplicate-if-statements-and-their-body-in-rust-perhaps-by/39170425#39170425", "title": "Is it possible to de-duplicate if statements and their body in Rust, perhaps by using macros?", "body": "<p>I think you have an X/Y problem here, so I am going to solve this <em>without</em> using <code>if</code>/<code>else</code>.</p>\n\n<p>What you seem to be doing is checking for the presence of a bit pattern, and prioritise the order in which said patterns are checked for (unclear if it matters, but let's assume it does).</p>\n\n<p>So, let's do this the functional way:</p>\n\n<pre><code>let constants = [fiz, foo, bar, baz];\n\nlet flag = constants.iter().filter(|v| var &amp; *v == **v).next();\n</code></pre>\n\n<p>And it <a href=\"https://play.rust-lang.org/?gist=249b503ce5f4fa98928810cb78f00656&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">just works</a>, no macro or repetitive stuff.</p>\n"}, {"tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": false, "score": 1, "last_activity_date": 1472230505, "creation_date": 1472230505, "answer_id": 39171225, "question_id": 39169790, "link": "https://stackoverflow.com/questions/39169790/is-it-possible-to-de-duplicate-if-statements-and-their-body-in-rust-perhaps-by/39171225#39171225", "title": "Is it possible to de-duplicate if statements and their body in Rust, perhaps by using macros?", "body": "<p>If you want to use macros, you can write it like this:</p>\n\n<pre><code>mod module {\n    pub const fiz: u32 = (1 &lt;&lt; 0);\n    pub const foo: u32 = (1 &lt;&lt; 1);\n    pub const bar: u32 = (1 &lt;&lt; 2);\n    pub const baz: u32 = (1 &lt;&lt; 3);\n}\n\nmacro_rules! check_bits {\n    ([$($Constant:expr),*]) =&gt; {\n        |var: u32| {\n            $(if ($Constant &amp; var) != 0 {\n                return $Constant;\n            })*\n                return 0;\n        }\n    }\n}\n\nfn main() {\n    let var = 5;\n    let checker = check_bits!([module::bar, module::fiz, module::foo, module::baz]);\n    assert_eq!(checker(var), module::bar);\n    println!(\"All OK\");\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1472234586, "creation_date": 1472225322, "last_edit_date": 1472234586, "question_id": 39169790, "link": "https://stackoverflow.com/questions/39169790/is-it-possible-to-de-duplicate-if-statements-and-their-body-in-rust-perhaps-by", "title": "Is it possible to de-duplicate if statements and their body in Rust, perhaps by using macros?", "body": "<p>Say we have a large block:</p>\n\n<pre><code>mod module {\n    pub const fiz: u32 = (1 &lt;&lt; 0);\n    // etc...\n}\n\nflag = {\n    if      (var &amp; module::fiz) != 0 { module::fiz }\n    else if (var &amp; module::foo) != 0 { module::foo }\n    else if (var &amp; module::bar) != 0 { module::bar }\n    else if (var &amp; module::baz) != 0 { module::baz }\n    // .. there could be many more similar checks\n};\n</code></pre>\n\n<p>With simply replacement macro its possible to do:</p>\n\n<pre><code>#define TEST(f) ((var) &amp; (f)) != 0 { f }\n</code></pre>\n\n<p>Allowing:</p>\n\n<pre><code>flag = {\n    if      TEST(module::fiz)\n    else if TEST(module::foo)\n    else if TEST(module::bar)\n    else if TEST(module::baz)\n}\n</code></pre>\n\n<p>It seems Rust doesn't allow a macro to declare part of an <code>if</code> statement.</p>\n\n<p>I managed to avoid repetition using assignment, but its quite ugly.</p>\n\n<pre><code>flag = {\n    let f;\n    if      (var &amp; {f = module::fiz; f }) != 0 { f }\n    else if (var &amp; {f = module::foo; f }) != 0 { f }\n    else if (var &amp; {f = module::bar; f }) != 0 { f }\n    else if (var &amp; {f = module::baz; f }) != 0 { f }\n}; \n</code></pre>\n\n<p>Does Rust provide some convenient/elegant way to allow repetition in this case?</p>\n\n<p>I don't think flag checking is the important part of this question, the issue is that you may want to repeat content in the check again in the body of an if statement, e.g.:</p>\n\n<pre><code>if      (foo &amp;&amp; OTHER_EXPRESSION) { do(); something_with(OTHER_EXPRESSION) }\nelse if (foo &amp;&amp; SOME_EXPRESSION)  { do(); something_with(SOME_EXPRESSION)  }\n</code></pre>\n"}, {"tags": ["rust", "stdio", "libc"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1472223546, "post_id": 39169146, "comment_id": 65680913, "body": "The code you posted doesn&#39;t compile (confusion of fp and passwd I think). Also, the strings you pass to the C function are not NUL-terminated, so your code has completely undefined behavior."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1472224998, "post_id": 39169146, "comment_id": 65681854, "body": "oh yes, I forgot to add one file which does the NUL termination, I&#39;ve updated the gist above"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1472225277, "post_id": 39169146, "comment_id": 65682023, "body": "Not worried about leaking the string every time? Anyway, I think the second argument has the same problem."}], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1472501295, "post_id": 39171100, "comment_id": 65767440, "body": "Thanks for the explanation about the dangling pointer, those things are very important. It&#39;s in the doc and I didn&#39;t read. Then: the C code I had was from the advanced unix programming book. After I found out that most of the FILE struct variables are only filled upon stream reading/writing, I found this sentence in the book: &quot;Note that we perform I/O on each stream before printing its buffering status, since the first I/O operation usually causes the buffers to be allocated for a stream&quot; (again, RTFM to me..) Working gist: <a href=\"https://gist.github.com/philippkeller/c683dda9d89ca0f8cb6830b6dc52910b\" rel=\"nofollow noreferrer\">gist.github.com/philippkeller/c683dda9d89ca0f8cb6830b6dc5291&zwnj;&#8203;0b</a>"}], "tags": [], "owner": {"reputation": 1295, "user_id": 1114328, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d211889b453feb9210d9645cbcfd524e?s=128&d=identicon&r=PG", "display_name": "durka42", "link": "https://stackoverflow.com/users/1114328/durka42"}, "is_accepted": true, "score": 3, "last_activity_date": 1472326285, "last_edit_date": 1472326285, "creation_date": 1472229990, "answer_id": 39171100, "question_id": 39169146, "link": "https://stackoverflow.com/questions/39169146/wrong-mapping-of-c-struct-to-rust/39171100#39171100", "title": "Wrong mapping of C struct to Rust", "body": "<p>First, your implementation of <code>ToPtr</code> invites unsound code. Reproduced here:</p>\n\n<p><i></p>\n\n<pre><code>// code in italics is wrong\nimpl ToPtr for str {\n    fn to_ptr(&amp;self) -&gt; *const i8 {\n        CString::new(self).unwrap().as_ptr()\n    }\n}\n</code></pre>\n\n<p></i></p>\n\n<p>This allocates a new <code>CString</code> and returns a pointer to its contents, but the <code>CString</code> is dropped when <code>to_ptr</code> returns, so this is a dangling pointer. <strong>Any dereference of this pointer is undefined behavior.</strong> The <a href=\"https://doc.rust-lang.org/beta/std/ffi/struct.CString.html#method.as_ptr\" rel=\"nofollow\">documentation</a> has a big warning about this, but it's still a very common mistake.</p>\n\n<p>One correct way to make a <code>*const c_char</code> from a string literal is <code>b\"string here\\0\".as_ptr() as *const c_char</code>. The string is null terminated and there is no dangling pointer because string literals live for the entire program. If you have a non-constant string to be converted, you <em>must</em> keep the <code>CString</code> alive while it is being used, like this:</p>\n\n<pre><code>let s = \"foo\";\nlet cs = CString::new(s).unwrap(); // don't call .as_ptr(), so the CString stays alive\nunsafe { some_c_function(cs.as_ptr()); }\n// CString is dropped here, after we're done with it\n</code></pre>\n\n<hr>\n\n<p>Aside: an editor \"suggested\" (I'm new to Stack Overflow, but it seems more polite to comment rather than try to rewrite my answer) that the above code could be written like this:</p>\n\n<pre><code>let s = \"foo\";\nunsafe {\n    // due to temporary drop rules, the CString will be dropped at the end of the statement (the `;`)\n    some_c_function(CString::new(s).unwrap().as_ptr());\n}\n</code></pre>\n\n<p>While this is technically correct (the best kind of correct), the \"temporary drop rules\" involved are subtle -- this works because <code>as_ptr</code> takes a reference to the <code>CString</code> <sup><sub>(actually a &amp;CStr, because the compiler changes the method chain to CString::new(s).unwrap().deref().as_ptr())</sub></sup> instead of consuming it, and because we have only one C function to call. I don't like to rely on anything that's subtle or non-obvious when writing unsafe code.</p>\n\n<hr>\n\n<p>With that out of the way, I <a href=\"https://gist.github.com/anonymous/a4deb83b9637054e75689a0097c0aea3\" rel=\"nofollow\">fixed that unsoundness</a> in your code (your calls all use string literals so I just used my first strategy above). I get this output on OSX:</p>\n\n<pre><code>0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0\n0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 0\n0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 0\n0, 0, 4, 3, 0, 0, 0, 0, 0, 0, 0\n</code></pre>\n\n<p>So, this matches your results, right? I also wrote the following C program:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nint main() {\n    struct __sFILE *fp1 = fdopen(STDIN_FILENO, \"r\");\n    struct __sFILE *fp2 = fdopen(STDOUT_FILENO, \"w\");\n    struct __sFILE *fp3 = fdopen(STDERR_FILENO, \"w\");\n    struct __sFILE *passwd = fopen(\"/etc/passwd\", \"r\");\n\n    printf(\"%i %i %i %i\\n\", fp1-&gt;_flags, fp2-&gt;_flags, fp3-&gt;_flags, passwd-&gt;_flags);\n}\n</code></pre>\n\n<p>And got the output:</p>\n\n<pre><code>4 8 8 4\n</code></pre>\n\n<p>Which seems to vindicate the Rust results. There is a comment at the top of <code>/usr/include/stdio.h</code> that says:</p>\n\n<pre><code>/*\n * The following always hold:\n *\n *  if (_flags&amp;(__SLBF|__SWR)) == (__SLBF|__SWR),\n *      _lbfsize is -_bf._size, else _lbfsize is 0\n *  if _flags&amp;__SRD, _w is 0\n *  if _flags&amp;__SWR, _r is 0\n */\n</code></pre>\n\n<p>And looking up those constants:</p>\n\n<pre><code>#define __SLBF  0x0001      /* line buffered */\n#define __SRD   0x0004      /* OK to read */\n#define __SWR   0x0008      /* OK to write */\n</code></pre>\n\n<p>This seems to match the output we get: 4 for file opened in read mode, 8 for write. So what is the problem here?</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 281, "favorite_count": 0, "accepted_answer_id": 39171100, "answer_count": 1, "score": 3, "last_activity_date": 1472326285, "creation_date": 1472223187, "last_edit_date": 1495541311, "question_id": 39169146, "link": "https://stackoverflow.com/questions/39169146/wrong-mapping-of-c-struct-to-rust", "title": "Wrong mapping of C struct to Rust", "body": "<p>For educational purpose I try to access the <code>FILE</code> struct in Rust:</p>\n\n<pre><code>unsafe {\n    let passwd = libc::fopen(\"/etc/passwd\".to_ptr(), &amp;('r' as libc::c_char));\n    let fp = &amp;mut *(passwd as *mut MY_FILE);\n    println!(\"flags={}, file={}\", fp._flags, fp._file);\n}\n</code></pre>\n\n<p>the <code>MY_FILE</code> struct I obtained by running bindgen on stdio.h (I'm on OS X):</p>\n\n<pre><code>bindgen /usr/include/stdio.h\n</code></pre>\n\n<p>Somehow <code>_flags</code> is always <code>8</code> for files open in write mode (4 in read mode), so this flags seems off (I tested with a <code>C</code> code to verify that it indeed is not 4 or 8). The file pointer however seems to be right. What could cause this? Am I extracting the binding from the wrong header file? Is there something I need to add to the <code>#[repr(C,)]</code> attribute?</p>\n\n<p><a href=\"https://gist.github.com/philippkeller/1f7cd1df9c48a5694c7e1e7c7952277d\" rel=\"nofollow noreferrer\">Here</a> is the full code including the struct.</p>\n\n<p>This is a follow up question from <a href=\"https://stackoverflow.com/questions/38360996\">an earlier question</a></p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472230850, "post_id": 39168640, "comment_id": 65685023, "body": "Without the package part (and only workspace part) I get: PS E:\\r\\rustenv&gt; cargo build error: failed to parse manifest at <code>E:\\r\\rustenv\\Cargo.toml</code>  Caused by:   no targets specified in the manifest   either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be present PS E:\\r\\rustenv&gt; cargo build error: failed to parse manifest at <code>E:\\r\\rustenv\\Cargo.toml</code>  Caused by:   no <code>package</code> or <code>project</code> section found."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472231132, "post_id": 39168640, "comment_id": 65685138, "body": "@BitTickler As I wrote, and as official documentation mention, <b>it should not work</b>, this is how it works now. To build you need call <code>cargo build</code> in subdirectories of real projects, not virtual."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472231770, "post_id": 39168640, "comment_id": 65685444, "body": "after adding <code>package.workspace</code> to the sub-crates, I get: PS E:\\r\\rustenv\\loader&gt; cargo build warning: unused manifest key: package.workspace"}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472231989, "post_id": 39168640, "comment_id": 65685568, "body": "@BitTickler you should have something like <code>workspace = &quot;..&quot;</code> in your package sections in loader"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472233395, "post_id": 39168640, "comment_id": 65686200, "body": "That I have: Under <code>package</code> section: <code>workspace = &quot;..&#47;rustenv&quot;</code>"}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472287321, "post_id": 39168640, "comment_id": 65699868, "body": "@BitTickler If you have structure like: <code>rustenv&#47;loader</code> and <code>rustenv&#47;shell</code>, then you should have <code>workspace = &quot;..&quot;</code> in both <code>loader</code> and <code>shell</code>, not <code>workspace = &quot;..&#47;rustenv&quot;</code>"}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472301947, "post_id": 39168640, "comment_id": 65703972, "body": "Tried that as well - but build of sub-crates goes to a target inside sub-crate anyway. Win64 rust version, btw."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472313715, "post_id": 39168640, "comment_id": 65707598, "body": "@BitTickler I add shell session to demonstrate how it works for me."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 0, "creation_date": 1472331607, "post_id": 39168640, "comment_id": 65712633, "body": "So it is a 0.13 cargo feature? I downloaded the most recent release for my (tier 0) platform right before I started this. I expected all tier 0 platforms had the same version..."}], "tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": false, "score": 3, "last_activity_date": 1544100128, "last_edit_date": 1544100128, "creation_date": 1472221627, "answer_id": 39168640, "question_id": 39166704, "link": "https://stackoverflow.com/questions/39166704/no-targets-specified-in-the-manifest-when-creating-a-cargo-workspace/39168640#39168640", "title": "No targets specified in the manifest when creating a Cargo workspace", "body": "<p>If your root project does not produce any artifacts (it is not a library/binary) then in terms of the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1525-cargo-workspace.md\" rel=\"nofollow noreferrer\">Cargo workspaces RFC</a>\nit is \"virtual\", it should contain only the <code>workspace</code> section:</p>\n\n<pre class=\"lang-toml prettyprint-override\"><code>[workspace]\nmembers = [\n    \"loader\"\n    , \"shell\"\n    ]\n</code></pre>\n\n<p>If <code>cargo build</code> does not work for it, you should</p>\n\n<pre><code>cd loader\ncargo build\ncd ..\ncd shell\ncargo build \n</code></pre>\n\n<p>what works in such configuration? You have shared output directory \"target\" and \"Cargo.lock\", so if you type \"cargo build\" in \"loader\" subdirectory you have compiled library in \"../target/\"</p>\n\n<p>Shell session that demonstrates how it works:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/tmp $ mkdir test\n/tmp $ cd test\n/tmp/test $ cargo new loader &amp;&amp; cargo new shell --bin\n     Created library `loader` project\n     Created binary (application) `shell` project\n/tmp/test $ cat &gt; Cargo.toml\n[workspace]\nmembers = [\"loader\", \"shell\"]\n/tmp/test $ cat loader/Cargo.toml \n[package]\nname = \"loader\"\nversion = \"0.1.0\"\nauthors = [\"me\"]\nworkspace = \"..\"\n\n[dependencies]\n/tmp/test $ cat shell/Cargo.toml \n[package]\nname = \"shell\"\nversion = \"0.1.0\"\nauthors = [\"me\"]\nworkspace = \"..\"\n\n[dependencies]\n/tmp/test/shell $ cargo build\n   Compiling shell v0.1.0 (file:///tmp/test/shell)\n    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\nevgeniy@localhost /tmp/test/shell $ ls\nCargo.toml  src\nevgeniy@localhost /tmp/test/shell $ ls ../\nCargo.lock  Cargo.toml  loader  shell  target\n/tmp/test $ cargo --version\ncargo 0.13.0-nightly (cd8ad10 2016-08-15)\n</code></pre>\n\n<p>If you worked/work with Visual Studio, have look at <a href=\"https://intellij-rust.github.io/\" rel=\"nofollow noreferrer\">the Rust plugin for Jetbrains IDE</a></p>\n"}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2426, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1544106445, "creation_date": 1472215555, "last_edit_date": 1544106445, "question_id": 39166704, "link": "https://stackoverflow.com/questions/39166704/no-targets-specified-in-the-manifest-when-creating-a-cargo-workspace", "title": "No targets specified in the manifest when creating a Cargo workspace", "body": "<p>Using Rust 1.11 and Cargo 1.12 (nightly), I'm trying to create a <code>[workspace]</code> which contains a few libraries and a few executables.</p>\n\n<p>In my root folder, I added my sub-crates with:</p>\n\n<pre><code>cargo new loader \ncargo new shell --bin\n</code></pre>\n\n<p>I then added the <code>cargo.toml</code> shown below to my root folder.</p>\n\n<pre class=\"lang-toml prettyprint-override\"><code>[package]\nname = \"rustenv\"\nversion = \"0.1.0\"\nauthors = [\"ME\"]\n\n[workspace]\nmembers = [\n    \"loader\"\n    , \"shell\"\n    ]\n</code></pre>\n\n<p>Running <code>cargo build</code> in my root folder yields:</p>\n\n<blockquote>\n     <pre class=\"lang-none prettyprint-override\"><code>PS E:\\r\\rustenv&gt; cargo build \n\nerror: failed to parse manifest at\n`E:\\r\\rustenv\\Cargo.toml`\n\nCaused by:  \n no targets specified in the manifest   \n either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be  present\n</code></pre>\n</blockquote>\n\n<p>I am a bit confused about how this <code>[workspace]</code> feature is supposed to work given that I am a Visual Studio user by nature and there, I can simply add projects to a workspace. It appears there is something else I have to do with Cargo to get the same effect.</p>\n"}, {"tags": ["c", "switch-statement", "rust", "match"], "comments": [{"owner": {"reputation": 56828, "user_id": 4062354, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xcV4d.png?s=128&g=1", "display_name": "MikeCAT", "link": "https://stackoverflow.com/users/4062354/mikecat"}, "edited": false, "score": 3, "creation_date": 1472200751, "post_id": 39161882, "comment_id": 65666920, "body": "&quot;Is this equivalent to the following C code&quot; No. <code>byte</code> is non-standard type and <code>*char</code> will emit compile error."}, {"owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1472200958, "post_id": 39161882, "comment_id": 65667055, "body": "I will fix the question, I mean are they as fast as eachother."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472201352, "post_id": 39161882, "comment_id": 65667287, "body": "Both of your code snippets are still broken. Please fix those, too. And you&#39;re likely to get an unsatisfying answer. I&#39;m pretty sure both compile down to pretty much the same assembly. Rust uses LLVM for optimization, the same backend as <code>clang</code> uses."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1472234064, "post_id": 39161882, "comment_id": 65686527, "body": "Additionally, it&#39;s going to matter <b>which compiler</b> (and compiler version) you are using. I guarantee that there&#39;s a C compiler out there that doesn&#39;t produce a jump table for that code."}], "answers": [{"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "edited": false, "score": 0, "creation_date": 1472336018, "post_id": 39177503, "comment_id": 65713731, "body": "Glad to hear it :)"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 7, "last_activity_date": 1472272627, "creation_date": 1472272627, "answer_id": 39177503, "question_id": 39161882, "link": "https://stackoverflow.com/questions/39161882/is-rusts-match-as-fast-as-cs-switch-for-bytes/39177503#39177503", "title": "is Rust&#39;s &quot;match&quot; as fast as C&#39;s &quot;switch&quot; for bytes?", "body": "<p>LLVM does what it thinks is fastest with match. Sometimes that's a jump table, sometimes it's not. It depends on the exact match, including how many features of match you're using. (Like @, if, and anything else.)</p>\n"}], "owner": {"reputation": 6045, "user_id": 1036670, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/8d2dr.jpg?s=128&g=1", "display_name": "vitiral", "link": "https://stackoverflow.com/users/1036670/vitiral"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1449, "favorite_count": 0, "accepted_answer_id": 39177503, "answer_count": 1, "score": -1, "last_activity_date": 1472272627, "creation_date": 1472200440, "last_edit_date": 1472233933, "question_id": 39161882, "link": "https://stackoverflow.com/questions/39161882/is-rusts-match-as-fast-as-cs-switch-for-bytes", "title": "is Rust&#39;s &quot;match&quot; as fast as C&#39;s &quot;switch&quot; for bytes?", "body": "<p>If I have Rust code like:</p>\n\n<pre><code>let x: u8;\nlet y = match x {\n    0 =&gt; \"0\",\n    1 =&gt; \"1\",\n    // ...\n    255 =&gt; \"255\",\n    _ =&gt; unreachable!(),\n};\n</code></pre>\n\n<p>will it be as fast (or faster) than the C code:</p>\n\n<pre><code>byte x;\nchar* y;\nswitch(x) {\n  case 0: y = \"0\"; break;\n  case 1: y = \"1\"; break;\n  ...\n  case 255: y = \"255\"; break;\n}\n</code></pre>\n\n<p>I am wondering if Rust implements anything like a jump table in the assembly.</p>\n"}, {"tags": ["pattern-matching", "rust", "tuples"], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1472211367, "post_id": 39160179, "comment_id": 65673048, "body": "@LukasKalbertodt But if you also need <code>(5, 4)</code> and <code>(2, 6)</code> to match, it quickly becomes very verbose."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1472267723, "post_id": 39160179, "comment_id": 65696188, "body": "@Kroltan: My code above prints <code>C</code> for <code>(2, 4)</code>, <code>(5, 4)</code>, <code>(2, 6)</code> and <code>(5, 6)</code>..."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 17, "last_activity_date": 1472194762, "creation_date": 1472194762, "answer_id": 39160179, "question_id": 39159857, "link": "https://stackoverflow.com/questions/39159857/matching-tuples-with-multiple-possible-values/39160179#39160179", "title": "Matching tuples with multiple possible values", "body": "<p>Alternatives are not part of the syntax for patterns; <code>a | b</code> is not a pattern. Alternatives can only be used to combine patterns in a <code>match</code> arm (they are not available in <code>if let</code> and <code>while let</code> expressions either).</p>\n\n<p>A workaround is to use guards:</p>\n\n<pre><code>match x {\n    (1, 1) =&gt; println!(\"A\"),\n    (1, 2 ... 3) =&gt; println!(\"B\"),\n    (a, b) if (a == 2 || a == 5) &amp;&amp;\n              (b == 4 || b == 6) =&gt; println!(\"C\"),\n    _ =&gt; println!(\"D\")\n}\n</code></pre>\n\n<p>Guards are arbitrary expressions (that must evaluate to a <code>bool</code>), so they can call functions.</p>\n\n<pre><code>match x {\n    (1, 1) =&gt; println!(\"A\"),\n    (1, 2 ... 3) =&gt; println!(\"B\"),\n    (a, b) if [2, 5].contains(&amp;a) &amp;&amp;\n              [4, 6].contains(&amp;b) =&gt; println!(\"C\"),\n    _ =&gt; println!(\"D\")\n}\n</code></pre>\n"}], "owner": {"reputation": 12872, "user_id": 1728830, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/2047c72f4a6fb6e256df9c21617162f8?s=128&d=identicon&r=PG", "display_name": "Thomas W", "link": "https://stackoverflow.com/users/1728830/thomas-w"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4633, "favorite_count": 1, "accepted_answer_id": 39160179, "answer_count": 1, "score": 13, "last_activity_date": 1472194762, "creation_date": 1472193669, "question_id": 39159857, "link": "https://stackoverflow.com/questions/39159857/matching-tuples-with-multiple-possible-values", "title": "Matching tuples with multiple possible values", "body": "<p>As tuple matching with ranges works, I hoped something similar would also work with alternatives:</p>\n\n<pre><code>match x {\n    (1, 1) =&gt; println!(\"A\"),\n    (1, 2 ... 3) =&gt; println!(\"B\"),   // ranges work\n    (2 | 5, 4 | 6) =&gt; println!(\"C\"), // this doesn't\n    _ =&gt; println!(\"D\")\n}\n</code></pre>\n\n<p>Is there an elegant solution to this or does one have to either \"unroll\" the alternatives or resort to chained <code>if</code>/<code>else if</code> instead of pattern matching?</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1472196572, "post_id": 39159226, "comment_id": 65664672, "body": "I think it must be a limitation in how Rust determines whether implementations overlay (or might overlap), but I haven&#39;t found anywhere where the rules are spelled out.  :-(  Oh, for a proper language spec!"}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472198749, "post_id": 39161143, "comment_id": 65665841, "body": "I actually don&#39;t think that&#39;s true. Isn&#39;t this what orphan rules are for? You can&#39;t add foreign trait <code>impl</code>s for a foreign type. At least one of trait and type has to be defined in the current crate... in order to let the compiler reason about cases like this, <i>I think</i>."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472199011, "post_id": 39161143, "comment_id": 65665974, "body": "@LukasKalbertodt See my edit. It is in the same sentence as the ophan rule in RFC 1023."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472199142, "post_id": 39161143, "comment_id": 65666044, "body": "Oh indeed, that sounds reasonable. Thanks!"}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 20, "last_activity_date": 1472198948, "last_edit_date": 1472198948, "creation_date": 1472197974, "answer_id": 39161143, "question_id": 39159226, "link": "https://stackoverflow.com/questions/39159226/conflicting-implementations-of-trait-in-rust/39161143#39161143", "title": "Conflicting implementations of trait in Rust", "body": "<p>The fact that <code>&amp;'a str</code> does not implement <code>Into&lt;i32&gt;</code> is not taken into account, because there is no guarantee that it couldn't be added later.  This would then break your code.</p>\n\n<p>So if this were allowed the possible breakage would make it harder to add implementations to library traits.</p>\n\n<p>Unfortunately I couldn't find documentation for that, neither in <a href=\"https://doc.rust-lang.org/nightly/book/\">The Rust Programming Language</a> Book nor in the <a href=\"https://doc.rust-lang.org/reference.html#implementations\">Reference Manual</a>.</p>\n\n<p>The best I could find is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\">RFC 1023</a>, which says that <em>a crate [...] cannot rely that <code>Type: !Trait</code> holds unless <code>Type</code> or <code>Trait</code> is local.</em></p>\n"}, {"tags": [], "owner": {"reputation": 4459, "user_id": 127251, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9b6273d6505f5cead55793f95dbe7873?s=128&d=identicon&r=PG", "display_name": "Paul Chernoch", "link": "https://stackoverflow.com/users/127251/paul-chernoch"}, "is_accepted": false, "score": 1, "last_activity_date": 1615239872, "creation_date": 1615239872, "answer_id": 66537661, "question_id": 39159226, "link": "https://stackoverflow.com/questions/39159226/conflicting-implementations-of-trait-in-rust/66537661#66537661", "title": "Conflicting implementations of trait in Rust", "body": "<p>I found a workaround using a marker trait. No nightly or experimental features necessary. The trick is that I define the marker trait in my crate and do not export it, so it is impossible for an upstream crate to define the marker on classes other than the ones I implement it on.</p>\n<p>Below the marker trait is <code>Numeric</code>.</p>\n<p>I use this so that I can implement Into for anything that can be converted into an f64, but also for strings in a separate impl, and other types as well.</p>\n<p>The <code>Numeric</code> trait must be <code>pub</code> because they are warning that future versions will disallow a private Trait in a public interface.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>\nuse std::convert::Into;\n\npub trait Numeric {}\nimpl Numeric for f64 {}\nimpl Numeric for f32 {}\nimpl Numeric for i64 {}\nimpl Numeric for i32 {}\nimpl Numeric for i16 {}\nimpl Numeric for i8 {}\nimpl Numeric for isize {}\nimpl Numeric for u64 {}\nimpl Numeric for u32 {}\nimpl Numeric for u16 {}\nimpl Numeric for u8 {}\nimpl Numeric for usize {}\n\n\npub trait UiId {\n    fn push(&amp;self);\n}\n\nimpl&lt;'a&gt; UiId for &amp;'a str {\n    fn push(&amp;self) {}\n}\n\nimpl&lt;T: Into&lt;i32&gt; + Numeric&gt; UiId for T {\n    fn push(&amp;self) {}\n}\n\n</code></pre>\n"}], "owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4564, "favorite_count": 0, "accepted_answer_id": 39161143, "answer_count": 2, "score": 16, "last_activity_date": 1615240352, "creation_date": 1472191067, "last_edit_date": 1615240352, "question_id": 39159226, "link": "https://stackoverflow.com/questions/39159226/conflicting-implementations-of-trait-in-rust", "title": "Conflicting implementations of trait in Rust", "body": "<p>I want to implement a custom trait for <code>&amp;'a str</code> and for integer numbers up to <code>i32</code>, but Rust does not allow me to:</p>\n\n<pre><code>use std::convert::Into;\n\npub trait UiId {\n    fn push(&amp;self);\n}\n\nimpl&lt;'a&gt; UiId for &amp;'a str {\n    fn push(&amp;self) {}\n}\n\nimpl&lt;T: Into&lt;i32&gt;&gt; UiId for T {\n    fn push(&amp;self) {}\n}\n\nfn main() {}\n</code></pre>\n\n<p>This fails to compile with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait `UiId` for type `&amp;str`:\n  --&gt; src/main.rs:11:1\n   |\n7  | impl&lt;'a&gt; UiId for &amp;'a str {\n   | ------------------------- first implementation here\n...\n11 | impl&lt;T: Into&lt;i32&gt;&gt; UiId for T {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `&amp;str`\n   |\n   = note: upstream crates may add new impl of trait `std::convert::From&lt;&amp;str&gt;` for type `i32` in future versions\n</code></pre>\n\n<p><code>&amp;'a str</code> does not implement <code>Into&lt;i32&gt;</code>. Is it possible to implement <code>UiId</code> for <code>&amp;'a str</code> and everything that can be converted into <code>i32</code> without specifying concrete types? How can I do that?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1472164042, "post_id": 39155432, "comment_id": 65654793, "body": "You&#39;ll need to show an actual example of what you&#39;ve tried for us to show you why its not working. This is common in Rust though.. and people refer to it as the &quot;Builder Pattern&quot;. As a random example, here&#39;s one I just found Googling: <a href=\"https://gist.github.com/Nogbit/aa0ac67e7208850b94e2\" rel=\"nofollow noreferrer\">gist.github.com/Nogbit/aa0ac67e7208850b94e2</a>"}], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 8, "last_activity_date": 1472170404, "creation_date": 1472170404, "answer_id": 39156579, "question_id": 39155432, "link": "https://stackoverflow.com/questions/39155432/unable-to-create-a-fluent-apis-because-the-type-self-doesnt-match-mut-self/39156579#39156579", "title": "Unable to create a fluent APIs because the type `self` doesn&#39;t match `&amp;mut self`", "body": "<p>You're correct, the types differ. You'll probably run in to lifetime issue. I assume you tried this:</p>\n\n<pre><code>let mut counter = Counter::new().incr().incr();\n</code></pre>\n\n<p>That fails. However, splitting them out:</p>\n\n<pre><code>let mut counter = Counter::new();\ncounter.incr().incr();\n</code></pre>\n\n<p>..works fine. The compiler will actually give you a decent hint here:</p>\n\n<pre><code>help: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>As I said in my comment.. to \"work around\" this fluent API design during object instantiation, people will commonly create a <code>Builder</code> type (the \"Builder Pattern\"). Yours, for example, might look like this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Counter { count: u32 }\n\nstruct CounterBuilder { count: u32 }\nimpl CounterBuilder {\n    fn new() -&gt; CounterBuilder {\n        CounterBuilder {\n            count: 0\n        }\n    }\n\n    fn incr(&amp;mut self) -&gt; &amp;mut CounterBuilder { \n        self.count = self.count + 1; \n        self \n    }\n\n    fn build(&amp;self) -&gt; Counter {\n        Counter {\n            count: self.count\n        }\n    }\n}\n\nfn main() {\n    let counter = CounterBuilder::new()\n        .incr()\n        .incr()\n        .build();\n\n    println!(\"Counter value is: {}\", counter.count); // Should print 2\n    assert_eq!(2, counter.count);\n}\n</code></pre>\n\n<p>Essentially, this works around the lifetime issues by discarding the borrow after the <code>build</code> call (its noting that you're finished with an instance of a <code>CounterBuilder</code>)... at which point you have a new concrete <code>Counter</code> object constructed and ready to go.</p>\n\n<p>Once you have your <code>Counter</code> instantiated... you can then modify it via its own fluent API if you want.. e.g:</p>\n\n<pre><code>let mut counter = CounterBuilder::new()\n        .incr()\n        .incr()\n        .build();\n\ncounter.local_increment().local_increment(); // For example, if you were to add a \"local_increment\" fluent method to Counter\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1472171542, "post_id": 39156683, "comment_id": 65656871, "body": "I considered this.. but wasn&#39;t sure exactly what the OP was after. +1 anyway - this is the <i>actual</i> way to fix the immediate problem."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1472171606, "post_id": 39156683, "comment_id": 65656888, "body": "@SimonWhitehead: Not too sure either, but since it&#39;s an oddball compared to the current mainstream languages I thought it worth mentioning :)"}, {"owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472248236, "post_id": 39156683, "comment_id": 65692428, "body": "hmm, wouldn&#39;t this lead to a lot of copies? Or is rust smarter than that?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 1, "creation_date": 1472249201, "post_id": 39156683, "comment_id": 65692711, "body": "@jz87: From a language point of view, no. It is however lowered as <code>memcpy</code> at the moment, and the optimiser might not be smart enough to remove them (case by case basis). pcwalton is working on LLVM to more aggressively remove useless <code>memcpy</code> calls, and had a first patch that removed ~25% of the <code>memcpy</code> calls in Servo (which is impressive, since probably a number of them ARE useful)... however in review it was suggested that he moved this analysis elsewhere, and while it slows down the integration it may actually improve the number of elided call sites."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1472171459, "creation_date": 1472171459, "answer_id": 39156683, "question_id": 39155432, "link": "https://stackoverflow.com/questions/39155432/unable-to-create-a-fluent-apis-because-the-type-self-doesnt-match-mut-self/39156683#39156683", "title": "Unable to create a fluent APIs because the type `self` doesn&#39;t match `&amp;mut self`", "body": "<p>Why would you use a reference?</p>\n\n<pre><code>#[derive(Debug)]\nstruct Counter { count: u32 }\n\nimpl Counter {\n    fn incr(mut self) -&gt; Counter { \n        self.count = self.count + 1; \n        self \n    }\n\n    fn new() -&gt; Counter {\n        Counter {\n            count: 0\n        }\n    }\n}\n</code></pre>\n\n<p>If you consume the original, then there is no borrow issue any longer :)</p>\n\n<p><em>Note: while appropriate for a builder pattern, it may be annoying with regular types.</em></p>\n"}], "owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 641, "favorite_count": 1, "accepted_answer_id": 39156683, "answer_count": 2, "score": 2, "last_activity_date": 1472233823, "creation_date": 1472162630, "last_edit_date": 1472233823, "question_id": 39155432, "link": "https://stackoverflow.com/questions/39155432/unable-to-create-a-fluent-apis-because-the-type-self-doesnt-match-mut-self", "title": "Unable to create a fluent APIs because the type `self` doesn&#39;t match `&amp;mut self`", "body": "<p>In many other languages it's common to have APIs that go something like</p>\n\n<pre><code>obj.do_x()\n   .do_y()\n</code></pre>\n\n<p>In Rust I run into a problem, if <code>do_x</code>, <code>do_y</code> take <code>&amp;mut self</code>, the types don't match. Is there an elegant way to solve this?</p>\n\n<p>For example:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Counter { count: u32 }\nimpl Counter {\n    fn incr(&amp;mut self) -&gt; &amp;mut Counter { \n        self.count = self.count + 1; \n        self \n    }\n\n    fn new() -&gt; Counter {\n        Counter {\n            count: 0\n        }\n    }\n}\n</code></pre>\n\n<p>The problem is, <code>new()</code> returns a <code>Counter</code>, but the fluent API needs <code>mut Counter</code>.</p>\n"}, {"tags": ["input", "rust", "line", "stdin"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1472159058, "post_id": 39154107, "comment_id": 65652937, "body": "Note that it would probably be more idiomatic to have <code>let mut input = String::new();</code> and then using <code>stdin.read_line(&amp;mut input);</code>. It&#39;s a bit more verbose, but it&#39;s less weird than binding a temporary to a reference."}], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 4, "last_activity_date": 1472233555, "last_edit_date": 1472233555, "creation_date": 1472157637, "answer_id": 39154391, "question_id": 39154107, "link": "https://stackoverflow.com/questions/39154107/how-to-avoid-going-to-new-line-with-stdin-in-rust/39154391#39154391", "title": "How to avoid going to new line with stdin in Rust", "body": "<p>You need to flush <code>stdout</code> before reading the line:</p>\n\n<pre><code>use std::io::{self, Write};\n\nfn main() {\n    let mut stdin = io::stdin();\n    let input = &amp;mut String::new();\n\n    loop {\n        input.clear();\n        print!(\"Your age: \");\n        io::stdout().flush();\n        stdin.read_line(input);\n        print!(\"{}\", input);\n    }\n}\n</code></pre>\n\n<p>From the <a href=\"https://doc.rust-lang.org/std/macro.print!.html\" rel=\"nofollow\"><code>print!</code> documentation</a>:</p>\n\n<blockquote>\n  <p>Note that stdout is frequently line-buffered by default so it may be necessary to use <code>io::stdout().flush()</code> to ensure the output is emitted immediately.</p>\n</blockquote>\n"}], "owner": {"reputation": 127, "user_id": 6564571, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/31a8875e2585a8f3c14c45b43d86cbd0?s=128&d=identicon&r=PG&f=1", "display_name": "Christopher Loen", "link": "https://stackoverflow.com/users/6564571/christopher-loen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1763, "favorite_count": 1, "accepted_answer_id": 39154391, "answer_count": 1, "score": 2, "last_activity_date": 1472233555, "creation_date": 1472156434, "last_edit_date": 1472233525, "question_id": 39154107, "link": "https://stackoverflow.com/questions/39154107/how-to-avoid-going-to-new-line-with-stdin-in-rust", "title": "How to avoid going to new line with stdin in Rust", "body": "<p>I have this code:</p>\n\n<pre><code>fn main() {\n    let mut stdin = io::stdin();\n    let input = &amp;mut String::new();\n\n    loop {\n        input.clear();\n        print!(\"Your age: \");\n        stdin.read_line(input);\n        print!(\"{}\", input);\n    }\n}\n</code></pre>\n\n<p>So when I input something, the programs returns \"Your age:\" plus my input. \nBut when I run the program I don't want to write the input in a new line.\nTo do something like that in Python, I can write:</p>\n\n<pre><code>var = input(\"Your age: \")\n</code></pre>\n\n<p>How can I avoid going to a new line? I'm sure it's simple but I really can't realize how to do that, I tried a lot of different stuff...</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472158890, "post_id": 39154184, "comment_id": 65652858, "body": "Isn&#39;t <code>Iterator</code> still unsized though? I would think you may have to <code>Box</code> it."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1472159626, "post_id": 39154184, "comment_id": 65653173, "body": "@MatthieuM. Oops, you&#39;re right."}, {"owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472162445, "post_id": 39154184, "comment_id": 65654239, "body": "What are the performance implications of boxing/unboxing unsized types. Is this something I can use in performance sensitive code?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 1, "creation_date": 1472163380, "post_id": 39154184, "comment_id": 65654563, "body": "@jz87 The code I posted above (using generics) has no run time overhead since specialized code for the specific iterator type and <code>Foo</code> implementation passed. Boxing the iterator and/or the <code>Foo</code> objects would require additional memory allocation and dynamic dispatch on every method call and iteration, which does have a non-zero (though not necessarily very high, depending on what you&#39;re doing) performance impact."}, {"owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472168580, "post_id": 39154184, "comment_id": 65656167, "body": "What if I have a recursive struct? Like struct A { content: T, children: Option&lt;A&gt; }, in this case, I can&#39;t use generics because that would bind the content of all the children to the same concrete type. So is boxing the only way in this scenario?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1472179497, "post_id": 39154184, "comment_id": 65658669, "body": "The code example as given doesn&#39;t work.  It&#39;s syntactically invalid, has a missing generic parameter, and is still trying to return an unsized type."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472199732, "post_id": 39154184, "comment_id": 65666369, "body": "@jz87 Generics are for dealing with <i>traits</i>. They&#39;re not a magic wand removing boxing. Yes, you need some kind of indirection for recursive types."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1472199766, "post_id": 39154184, "comment_id": 65666389, "body": "@DK. Ugh, that&#39;s what I get for posting late at night. Corrected now, for good."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 4, "last_activity_date": 1472199688, "last_edit_date": 1472199688, "creation_date": 1472156712, "answer_id": 39154184, "question_id": 39154094, "link": "https://stackoverflow.com/questions/39154094/how-do-i-use-unsized-types-traits-in-rust/39154184#39154184", "title": "How do I use unsized types/traits in Rust?", "body": "<p>You probably shouldn't use unsized types at all here. Use generics instead:</p>\n\n<pre><code>trait Foo {} // T is a common name for type parameters, so use a different name\n\nfn func&lt;I, F&gt;(iter: F) where I: Iterator, I::Item: Foo, F: FnOnce() -&gt; I {\n  for a in iter() {\n    // ...\n  }\n}\n</code></pre>\n\n<p>Check out the book chapters on <a href=\"https://doc.rust-lang.org/book/generics.html\" rel=\"nofollow\">generics</a> and <a href=\"https://doc.rust-lang.org/book/closures.html\" rel=\"nofollow\"><code>Fn*</code> traits</a>.</p>\n\n<p>And by the way, accepting a function doesn't seem very useful, since you just call it once at the start. It seems much simpler to write the function like this:</p>\n\n<pre><code>fn func&lt;I&gt;(iter: I) where I: Iterator, I::Item: Foo {\n  for a in iter {\n    // ...\n  }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": false, "score": 1, "last_activity_date": 1472214787, "creation_date": 1472214787, "answer_id": 39166473, "question_id": 39154094, "link": "https://stackoverflow.com/questions/39154094/how-do-i-use-unsized-types-traits-in-rust/39166473#39166473", "title": "How do I use unsized types/traits in Rust?", "body": "<p>Unsized types only \"work\" if there is an additional level of indirection involved. Example:</p>\n\n<pre><code>trait Ttait {}\nfn foo(x: Trait) {}      // error: x would be unsized which is not allowed\nfn bar(x: &amp;Trait) {}     // OK: x is just a reference\nfn baz(x: Box&lt;Trait&gt;) {} // OK: x is just an \"owning pointer\"\n</code></pre>\n\n<p>But instead of using traits as types, you should probably prefer to use traits as <em>bounds</em> for type <em>parameters</em> of generic functions and structs:</p>\n\n<pre><code>fn generic&lt;Type: Trait&gt;(x: Type) {}\n</code></pre>\n\n<p>This is actually not a function but a <em>family</em> of functions. For each type <code>Type</code> that implements <code>Trait</code> the compiler will create a special version of <code>generic</code> if needed. If you have some value <code>x</code> of a concrete type that implements <code>Trait</code> and write <code>generic(x)</code> you will be invoking a function that is created especially for that type which is unsized. This is called \"monomorphization\".</p>\n\n<p>So, traits have two uses. They act as unsized types (for trait objects, dynamic dispatch, dynamic polymorphism) as well as type bounds for generic code (static dispatch, static polymorphism). My suggestion would be to avoid trait objects if you can and prefer generic code.</p>\n\n<p>Without knowing exactly what you're trying to do, let me show you one possibility:</p>\n\n<pre><code>trait Trait {\n    fn foo(&amp;self);\n}\n\nfn func&lt;'x,I&gt;(iterable: I) where I: IntoIterator&lt;Item = &amp;'x Trait&gt; {\n    for a in iterable {\n        a.foo();\n    }\n}\n\nstruct Example;\n\nimpl Trait for Example {\n    fn foo(&amp;self) {\n        println!(\"Example::foo()\");\n    }\n}\n\nfn main() {\n    let arr = [Example, Example];\n    func(arr.iter().map(|x| x as &amp;Trait));\n}\n</code></pre>\n\n<p>This is an example which demonstrates both kinds of trait uses. <code>func</code> is generic over the kinds of iterables it takes but uses dynamic dispatch to invoke the right <code>foo</code> function. This is probably closest to what you were trying to do.</p>\n\n<p>You could also go \"full generic\" (avoiding the dynamic dispatch for the <code>foo</code> calls. See delnan's answer) or \"full dynamic\" (making <code>func</code> agnostic about what kind of iterator it actually deals with at runtime). With more context we can probably make better suggestions.</p>\n"}], "owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1445, "favorite_count": 0, "closed_date": 1472234143, "answer_count": 2, "score": 2, "last_activity_date": 1472234108, "creation_date": 1472156366, "last_edit_date": 1472234108, "question_id": 39154094, "link": "https://stackoverflow.com/questions/39154094/how-do-i-use-unsized-types-traits-in-rust", "closed_reason": "Duplicate", "title": "How do I use unsized types/traits in Rust?", "body": "<p>I have the following</p>\n\n<pre><code>trait T {}\ntype Iter = fn() -&gt; Iterator&lt;Item = T&gt;;\n\nfn func(iter: Iter) {\n    for a in iter() {\n        // ...\n    }\n}\n</code></pre>\n\n<p>I would like <code>iter</code> to return an Iterator with move semantics, so I shouldn't have to return <code>&amp;Iterator</code>. Problem is, <code>Iterator</code> is a trait, so it's unsized. The above code gets a compile error saying that Iterable does not satisfy the Sized trait because all local variables have to be statically sized.</p>\n\n<p>On top of this, <code>T</code> is also a trait, therefore unsized, so I can't bind <code>a</code> to it either because it's unsized.</p>\n\n<p>I'm new to Rust so this is really tripping me up. How do I use unsized types?</p>\n"}, {"tags": ["rust", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "edited": false, "score": 0, "creation_date": 1472178188, "post_id": 39151321, "comment_id": 65658396, "body": "Thanks for your answer. I think I better copy <code>self.val</code> before passing it to <code>f2</code>."}], "tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 3, "last_activity_date": 1472145968, "creation_date": 1472145968, "answer_id": 39151321, "question_id": 39150985, "link": "https://stackoverflow.com/questions/39150985/passing-a-member-of-a-struct-to-a-method-of-the-same-struct-in-rust/39151321#39151321", "title": "Passing a member of a struct to a method of the same struct in Rust", "body": "<p>Your solution works not because of an extra variable binding, but rather because of an extra <em>copy</em>. Integer types can be implicitly copied, so <code>let v = self.val</code> creates a copy of the value. That copy is not borrowed from <code>self</code> but owned. So compiler allows you to call <code>f2</code> with this copy. </p>\n\n<p>If you write <code>self.f2(self.val)</code>, compiler will also attempt to make a copy of <code>self.val</code>. However, at this location it is not possible to make a copy because <code>self</code> is borrowed for the function call. So it is not possible to make such call unless you copy the value before it. And this is not a syntax limitation, but an enforcement of the borrow checker. Anyway, it's better to write the copying and the call in the order in which they actually happen. </p>\n\n<p>If the type you're trying to use as argument were not <code>Copy</code> (e.g. a <code>String</code>), you would need to write <code>let v = self.val.clone(); self.f2(v);</code> to ask the compiler for copy explicitly. Making such calls without making a copy is not allowed. You probably would need to make the method non-mutable or eliminate the argument somehow.</p>\n"}, {"comments": [{"owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "edited": false, "score": 0, "creation_date": 1472178189, "post_id": 39152894, "comment_id": 65658397, "body": "Thanks for your answer. Interesting way."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 1, "last_activity_date": 1472151658, "creation_date": 1472151658, "answer_id": 39152894, "question_id": 39150985, "link": "https://stackoverflow.com/questions/39150985/passing-a-member-of-a-struct-to-a-method-of-the-same-struct-in-rust/39152894#39152894", "title": "Passing a member of a struct to a method of the same struct in Rust", "body": "<p>You can use this trick for copyable values:</p>\n\n<pre><code>pub fn f1(&amp;mut self) {\n    println!(\"F1\");\n    match self.val {x =&gt; self.f2(x)};\n}\n</code></pre>\n\n<p>However, using an explicit temporary variable is more clear and idiomatic.</p>\n"}], "owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 491, "favorite_count": 0, "accepted_answer_id": 39151321, "answer_count": 2, "score": 0, "last_activity_date": 1472151658, "creation_date": 1472144607, "question_id": 39150985, "link": "https://stackoverflow.com/questions/39150985/passing-a-member-of-a-struct-to-a-method-of-the-same-struct-in-rust", "title": "Passing a member of a struct to a method of the same struct in Rust", "body": "<p>I am now facing a borrowing problem in Rust, and I have an idea to solve it. But I think the way I found is not a good answer. So I am wondering if there is another way to solve it.</p>\n\n<p>I use the following example code to describe my situation:</p>\n\n<pre><code>struct S {\n    val: u8\n}\n\nimpl S {\n    pub fn f1(&amp;mut self) {\n        println!(\"F1\");\n        self.f2(self.val);\n    }\n\n    pub fn f2(&amp;mut self, input: u8) {\n        println!(\"F2\");\n\n        // Do something with input\n    }\n}\n\nfn main() {\n    let mut s = S {\n        val: 0\n    };\n\n    s.f1();\n}\n</code></pre>\n\n<p>Structure <code>S</code> has a method, <code>f2</code>, which takes an additional argument <code>input</code> to do something. There is another method, <code>f1</code>, which calls <code>f2</code> with the <code>val</code> of structure <code>S</code>. Outsider may call either <code>f1</code> or <code>f2</code> for different use cases.</p>\n\n<p>When I compiled the above code, I got the following error message:</p>\n\n<pre><code>src\\main.rs:9:17: 9:25 error: cannot use `self.val` because it was mutably borrowed [E0503]\nsrc\\main.rs:9         self.f2(self.val);\n                              ^~~~~~~~\nsrc\\main.rs:9:9: 9:13 note: borrow of `*self` occurs here\nsrc\\main.rs:9         self.f2(self.val);\n                      ^~~~\n</code></pre>\n\n<p>I roughly understand how borrowing works in Rust. So I know that I can solve the problem by changing the implementation of <code>f1</code> to:</p>\n\n<pre><code>pub fn f1(&amp;mut self) {\n    let v = self.val;\n    println!(\"F1\");\n    self.f2(v);\n}\n</code></pre>\n\n<p>However, I feel this solution a little bit redundant. I am wondering if there is a way to solve this problem <strong>without using extra variable binding</strong>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 1, "creation_date": 1472155259, "post_id": 39150448, "comment_id": 65651004, "body": "The thing is, I would like to access fields in my trait implementation. Hence the problem."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "edited": false, "score": 0, "creation_date": 1472158454, "post_id": 39150448, "comment_id": 65652617, "body": "@jz87: Make a getter in the <code>Xed</code> trait or use a macro, as mentioned. There is no support for &quot;mapping fields&quot; in traits to Rust (and there may never be, as getters are sufficient)."}, {"owner": {"reputation": 192, "user_id": 4999407, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/2e3f8bb510a9d4f6a9accc8e9d9b6d16?s=128&d=identicon&r=PG", "display_name": "eldruin", "link": "https://stackoverflow.com/users/4999407/eldruin"}, "edited": false, "score": 0, "creation_date": 1537773223, "post_id": 39150448, "comment_id": 91890133, "body": "Would there be a way to maintain that getter private while the other trait methods are public?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 192, "user_id": 4999407, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/2e3f8bb510a9d4f6a9accc8e9d9b6d16?s=128&d=identicon&r=PG", "display_name": "eldruin", "link": "https://stackoverflow.com/users/4999407/eldruin"}, "edited": false, "score": 0, "creation_date": 1537783316, "post_id": 39150448, "comment_id": 91894924, "body": "@eldruin: Trait methods are always public, but trait themselves can be private. To maintain the getter private you would implement either directly on the type (inherent method) or on a private trait."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 16, "last_activity_date": 1520461622, "last_edit_date": 1520461622, "creation_date": 1472142654, "answer_id": 39150448, "question_id": 39150216, "link": "https://stackoverflow.com/questions/39150216/implementing-a-trait-for-multiple-types-at-once/39150448#39150448", "title": "Implementing a trait for multiple types at once", "body": "<p>The only way to implement a trait once for many concrete types is to implement a trait for all types already implementing another trait.</p>\n\n<p>For example, you can implement a marker trait <code>Xed</code> and then:</p>\n\n<pre><code>impl&lt;T&gt; Double for T\nwhere\n    T: Xed,\n{\n    fn double(&amp;self) {\n        /* ... */\n    }\n}\n</code></pre>\n\n<p><strong>However</strong>, Rust has principled generics. The only thing that you know about <code>T</code> in the previous implementation is that <code>T</code> implements the <code>Xed</code> <code>trait</code>, and therefore the only associated types/functions you can use are those coming from <code>Xed</code>.</p>\n\n<p>A trait cannot expose a field/attribute, only associated types, constants and functions, so <code>Xed</code> would need a getter for <code>x</code> (which need not be called <code>x</code>).</p>\n\n<p>If you wish to rely on <em>syntactic</em> (and not <em>semantic</em>) properties of the code, then use macros.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1525732446, "last_edit_date": 1525732446, "creation_date": 1520461930, "answer_id": 49162312, "question_id": 39150216, "link": "https://stackoverflow.com/questions/39150216/implementing-a-trait-for-multiple-types-at-once/49162312#49162312", "title": "Implementing a trait for multiple types at once", "body": "<p>Since the internals of your structs are the same / share common components, you should extract them into a common struct and embed the common part back into the parent structs. The common struct would have the \"complicated\" implementation of the trait and then the parent struct's trait implementations would delegate to the common implementation:</p>\n\n<pre><code>trait T {\n    fn double(&amp;self) -&gt; u32;\n}\n\nstruct A {\n    common: Common,\n}\n\nimpl T for A {\n    fn double(&amp;self) -&gt; u32 {\n        self.common.double()\n    }\n}\n\nstruct B {\n    common: Common,\n}\n\nimpl T for B {\n    fn double(&amp;self) -&gt; u32 {\n        self.common.double()\n    }\n}\n\nstruct Common {\n    x: u32,\n}\n\nimpl T for Common {\n    fn double(&amp;self) -&gt; u32 {\n        self.x * 2\n    }\n}\n</code></pre>\n\n<p>Any nicer code will require changes to the language. Two possible paths:</p>\n\n<ul>\n<li><a href=\"https://github.com/nikomatsakis/fields-in-traits-rfc\" rel=\"nofollow noreferrer\">Fields in traits</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/2393\" rel=\"nofollow noreferrer\">Delegation</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1525731471, "creation_date": 1525731471, "answer_id": 50223259, "question_id": 39150216, "link": "https://stackoverflow.com/questions/39150216/implementing-a-trait-for-multiple-types-at-once/50223259#50223259", "title": "Implementing a trait for multiple types at once", "body": "<p>Creating a macro also solves your problem:</p>\n\n<pre><code>struct A {\n    x: u32,\n}\n\nstruct B {\n    x: u32,\n}\n\ntrait T {\n    fn double(&amp;self) -&gt; u32;\n}\n\nmacro_rules! impl_T {\n    (for $($t:ty),+) =&gt; {\n        $(impl T for $t {\n            fn double(&amp;self) -&gt; u32 {\n                self.x * 2\n            }\n        })*\n    }\n}\n\nimpl_T!(for A, B);\n\nfn main() {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2186, "user_id": 5163606, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Abhay Nainan", "link": "https://stackoverflow.com/users/5163606/abhay-nainan"}, "edited": false, "score": 1, "creation_date": 1592685227, "post_id": 61467564, "comment_id": 110515622, "body": "The first code block of your answer didn&#39;t work for me. Small tweak based on the crate documentation (<a href=\"https://docs.rs/duplicate/0.2.2/duplicate/\" rel=\"nofollow noreferrer\">docs.rs/duplicate/0.2.2/duplicate</a>):  A,B should each be enclosed in their own [] square brackets.  use duplicate::duplicate #[duplicate(name; [A]; [B])] impl T for name {..."}], "tags": [], "owner": {"reputation": 1127, "user_id": 8171453, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d3ac080ba0604191f0653a8880a21cdd?s=128&d=identicon&r=PG&f=1", "display_name": "Emoun", "link": "https://stackoverflow.com/users/8171453/emoun"}, "is_accepted": false, "score": 4, "last_activity_date": 1592814420, "last_edit_date": 1592814420, "creation_date": 1588018034, "answer_id": 61467564, "question_id": 39150216, "link": "https://stackoverflow.com/questions/39150216/implementing-a-trait-for-multiple-types-at-once/61467564#61467564", "title": "Implementing a trait for multiple types at once", "body": "<p>Using <a href=\"https://crates.io/crates/duplicate\" rel=\"nofollow noreferrer\">the <code>duplicate</code> attribute macro</a> you can do the following:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use duplicate::duplicate;\n#[duplicate(name; [A]; [B])]\nimpl T for name {\n    fn double(&amp;self) -&gt; u32 {\n        self.x * 2\n    }\n}\n</code></pre>\n<p>This will expand to two identical implementations for the two structs.\nI know you said you didn't want to use macros, but I interpret that as meaning you don't want to roll your own macro, so I think this is a good compromise.</p>\n<p>You could also use <code>duplicate</code> to avoid repeating your struct definitions:</p>\n<pre><code>use duplicate::duplicate;\n#[duplicate(name; [A]; [B])]\nstruct name {\n    x: u32,\n}\n</code></pre>\n<p>Or go all-out if you for some reason need two identical structs with identical implements (at this point we should begin questioning why we need 2 structs at all :D):</p>\n<pre><code>use duplicate::duplicate;\n#[duplicate(\n     mod_name struct_name; \n     [a]      [A]; \n     [b]      [B];\n)]\nmod mod_name {\n    pub struct name {\n        x: u32,\n    }\n    impl T for name {\n        fn double(&amp;self) -&gt; u32 {\n            self.x * 2\n        }\n    }\n}\nmod a;\nmod b;\npub use self::{a::*, b::*};\n</code></pre>\n"}], "owner": {"reputation": 7671, "user_id": 515279, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/c5ea3b30be6f62c5a96ccb58320e7f1f?s=128&d=identicon&r=PG", "display_name": "jz87", "link": "https://stackoverflow.com/users/515279/jz87"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7070, "favorite_count": 2, "answer_count": 4, "score": 25, "last_activity_date": 1592814420, "creation_date": 1472141883, "last_edit_date": 1520461546, "question_id": 39150216, "link": "https://stackoverflow.com/questions/39150216/implementing-a-trait-for-multiple-types-at-once", "title": "Implementing a trait for multiple types at once", "body": "<p>I have two structs and a trait:</p>\n\n<pre><code>struct A {\n    x: u32,\n}\n\nstruct B {\n    x: u32,\n}\n\ntrait T {\n    fn double(&amp;self) -&gt; u32;\n}\n</code></pre>\n\n<p>I would like to implement <code>T</code> for both structs using <code>x</code>.</p>\n\n<p>Is there a way to write something like</p>\n\n<pre><code>impl T for A, B {\n    fn double(&amp;self) -&gt; u32 {\n        /* ... */\n    }\n}\n</code></pre>\n\n<p>I would like to not use macros if possible.</p>\n"}, {"tags": ["string", "rust", "hashset", "borrowing"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472139841, "post_id": 39149460, "comment_id": 65642489, "body": "Could you add the <code>&#47;&#47; put stuff in refs</code> part? It&#39;s actually more or less important for this question."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1472140052, "post_id": 39149460, "comment_id": 65642641, "body": "Plase add a complete example we can try to compile.  It sounds like you&#39;ve got a <code>HashSet&lt;&amp;str&gt;</code> instead of <code>HashSet&lt;String&gt;</code>, which as @LukasKalbertodt says would be from how you initialise <code>refs</code>."}, {"owner": {"reputation": 1738, "user_id": 3879, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/16c337ddb689492848e26040b90bd69b?s=128&d=identicon&r=PG", "display_name": "ray", "link": "https://stackoverflow.com/users/3879/ray"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472140484, "post_id": 39149460, "comment_id": 65642919, "body": "@LukasKalbertodt I&#39;ve added where I&#39;m inserting strings. So I take it there&#39;s more I need to do at <code>HashSet</code> initialization..."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472140982, "post_id": 39149460, "comment_id": 65643256, "body": "@ray no the initialization is fine, but it&#39;s important to find out a few things. Look at my answer to understand what I mean :)"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 11, "last_activity_date": 1472140935, "last_edit_date": 1472140935, "creation_date": 1472140618, "answer_id": 39149826, "question_id": 39149460, "link": "https://stackoverflow.com/questions/39149460/how-do-i-pass-a-string-to-hashset-contains/39149826#39149826", "title": "How do I pass a string to HashSet contains?", "body": "<h3>Explanation</h3>\n\n<p>First, let's find out what type <code>refs</code> has. At the point <code>HashSet::new()</code>, the compiler can't tell what kinds of things you are going to put into the set, so the type is not clear yet. But the compiler figures it out in this line:</p>\n\n<pre><code>refs.insert(caps.at(2).unwrap());\n</code></pre>\n\n<p>The expression inside the function call (<code>caps.at(2).unwrap()</code>) returns a <code>&amp;str</code>. So we are putting <code>&amp;str</code>s into the set, thus <code>refs</code> has the type <code>HashSet&lt;&amp;str&gt;</code>. </p>\n\n<p>If you now look at the <a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.contains\">documentation for <code>contains</code></a>, you see that it takes some <code>&amp;Q</code> as argument. There are also some bounds: <code>where T: Borrow&lt;Q&gt;, Q: Hash + Eq</code>. We can ignore the <code>Hash + Eq</code> part; it doesn't cause any problems. </p>\n\n<p>So let's focus on the <code>T: Borrow&lt;Q&gt;</code>. We do know what <code>T</code> is: <code>&amp;str</code>. So let's see what <code>impl</code> of <code>Borrow</code> there are for <code>&amp;str</code>: <a href=\"https://doc.rust-lang.org/std/borrow/trait.Borrow.html\">documentation</a>. We'll find many generic impls, the important of which are (removed some noise):</p>\n\n<ul>\n<li><code>impl&lt;T&gt; Borrow&lt;T&gt; for T</code></li>\n<li><code>impl&lt;T&gt; Borrow&lt;T&gt; for &amp;T</code></li>\n</ul>\n\n<p>So pattern matching our <code>&amp;str</code> with the right hand pattern, we conclude that for <code>&amp;str</code>, <code>Borrow&lt;&amp;str&gt;</code> and <code>Borrow&lt;str&gt;</code> are implemented. So our <code>Q</code> could be <code>str</code> for example. That means that <code>contains</code> receives a parameter of type <code>&amp;str</code> (remember the <code>&amp;Q</code> from above).</p>\n\n<p><code>capture</code> however, is of type <code>String</code>. <code>&amp;capture</code> is an expression of type <code>&amp;String</code>. Whenever such an expression is used in a position where a <code>&amp;str</code> is needed without doubt, the compiler knows how to turn <code>&amp;String</code> into <code>&amp;str</code> (deref coercion). In this case however, the situation is not that clear, since we take a detour through the <code>Borrow</code> trait. Therefore we have to explicitly convert the <code>String</code> into a <code>&amp;str</code>. There are a quazzilion ways to achieve this, but how about <a href=\"https://doc.rust-lang.org/collections/string/struct.String.html#method.as_str\"><code>as_str()</code></a>? So the ...</p>\n\n<h3>Working solution</h3>\n\n<pre><code>if refs.contains(capture.as_str()) {\n    // ...\n}\n</code></pre>\n"}], "owner": {"reputation": 1738, "user_id": 3879, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/16c337ddb689492848e26040b90bd69b?s=128&d=identicon&r=PG", "display_name": "ray", "link": "https://stackoverflow.com/users/3879/ray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1274, "favorite_count": 0, "accepted_answer_id": 39149826, "answer_count": 1, "score": 4, "last_activity_date": 1490436464, "creation_date": 1472139570, "last_edit_date": 1490436464, "question_id": 39149460, "link": "https://stackoverflow.com/questions/39149460/how-do-i-pass-a-string-to-hashset-contains", "title": "How do I pass a string to HashSet contains?", "body": "<p>I want to use a <code>HashSet</code> for quick string lookup, but I can't seem to find a way to pass a string variable to <code>contains</code> without a compiler error.</p>\n\n<pre><code>refs = HashSet::new();\n\nlet first_pass = link_regex.replace_all(&amp;buffer, |caps: &amp;Captures| {\n\n    if caps.len() == 2 {\n        refs.insert(caps.at(2).unwrap());\n    }\n\n    caps.at(1).unwrap().to_owned()\n});\n\nlet out = ref_regex.replace_all(&amp;first_pass, |caps: &amp;Captures| {\n    let capture = caps.at(1).unwrap().to_owned();\n\n    // only remove if we've seen it before\n    if refs.contains(capture) {\n        return \"\".to_string();\n    }\n\n    capture\n});\n</code></pre>\n\n<p>That causes this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> src/bin/remove_links.rs:30:26: 30:33 error: mismatched types [E0308]\n src/bin/remove_links.rs:30         if refs.contains(capture) {\n                                                     ^~~~~~~\n src/bin/remove_links.rs:30:26: 30:33 help: run `rustc --explain E0308` to see a detailed explanation\n src/bin/remove_links.rs:30:26: 30:33 note: expected type `&amp;_`\n src/bin/remove_links.rs:30:26: 30:33 note:    found type `std::string::String`\n</code></pre>\n\n<p>If I try </p>\n\n<pre><code>refs.contains(&amp;capture)\n</code></pre>\n\n<p>then I get </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/bin/remove_links.rs:30:17: 30:25 error: the trait bound `&amp;str: std::borrow::Borrow&lt;std::string::String&gt;` is not satisfied [E0277]\nsrc/bin/remove_links.rs:30         if refs.contains(&amp;capture) {\n                                           ^~~~~~~~\n</code></pre>\n\n<p>I'm stumped, do I need to do some sort of type cast?</p>\n"}, {"tags": ["hashmap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3260, "user_id": 1361768, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/2cf5ccc5505d141e7b20f1b2cfc8ca38?s=128&d=identicon&r=PG", "display_name": "Majster", "link": "https://stackoverflow.com/users/1361768/majster"}, "edited": false, "score": 0, "creation_date": 1472133646, "post_id": 39147207, "comment_id": 65638434, "body": "Could you provide an example how to do the example I posted in the question? Also is there no other way than to use an enum? Seems a bit like an overkill compared to other languages, not sure how Rust does it though since I&#39;m just getting started."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1472142299, "post_id": 39147207, "comment_id": 65644070, "body": "<a href=\"https://github.com/maciejhirsz/json-rust\" rel=\"nofollow noreferrer\">This crate</a> also lets you write JSON pretty easily."}, {"owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "edited": false, "score": 0, "creation_date": 1472143547, "post_id": 39147207, "comment_id": 65644836, "body": "I&#39;ve added an example. Why do you think it&#39;s an overkill? This is pretty straightforward use of rust enums (tagged unions)."}], "tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 20, "last_activity_date": 1598237102, "last_edit_date": 1598237102, "creation_date": 1472133131, "answer_id": 39147207, "question_id": 39146584, "link": "https://stackoverflow.com/questions/39146584/how-do-i-create-a-rust-hashmap-where-the-value-can-be-one-of-multiple-types/39147207#39147207", "title": "How do I create a Rust HashMap where the value can be one of multiple types?", "body": "<p>You should use an enum type as value in your <code>HashMap</code>. That enum needs to have a variant for each possible type (boolean, number, string, list, map...) and an associated value of appropriate type for each variant:</p>\n<pre><code>enum JsonValue&lt;'a&gt; {\n    String(&amp;'a str),\n    VecOfString(Vec&lt;String&gt;),\n    AnotherHashMap(HashMap&lt;&amp;'a str, u32&gt;),\n}\n</code></pre>\n<p>Fortunately, there already is <a href=\"https://docs.serde.rs/serde_json/value/enum.Value.html\" rel=\"nofollow noreferrer\">an implementation of a JSON value type</a>, part of the <a href=\"https://github.com/serde-rs/json\" rel=\"nofollow noreferrer\">serde_json</a> crate which is built on the <a href=\"https://github.com/serde-rs/serde\" rel=\"nofollow noreferrer\">serde</a> crate.</p>\n<p>Here is how your code would look if you used the serde_json crate:</p>\n<pre><code>extern crate serde_json;\n\nuse serde_json::{Value, Map, Number};\n\nfn main() {\n    let mut inner_map = Map::new();\n    inner_map.insert(&quot;x&quot;.to_string(), Value::Number(Number::from(10u64)));\n    inner_map.insert(&quot;y&quot;.to_string(), Value::Number(Number::from(20u64)));\n\n    let mut map = Map::new();\n    map.insert(&quot;key1&quot;.to_string(), Value::String(&quot;test&quot;.to_string()));\n    map.insert(\n        &quot;key2&quot;.to_string(),\n        Value::Array(vec![\n            Value::String(&quot;a&quot;.to_string()),\n            Value::String(&quot;b&quot;.to_string()),\n        ]),\n    );\n    map.insert(&quot;key3&quot;.to_string(), Value::Object(inner_map));\n\n    println!(&quot;{}&quot;, serde_json::to_string(&amp;map).unwrap());\n    // =&gt; {&quot;key1&quot;:&quot;test&quot;,&quot;key2&quot;:[&quot;a&quot;,&quot;b&quot;],&quot;key3&quot;:{&quot;x&quot;:10,&quot;y&quot;:20}}\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 4, "last_activity_date": 1499269982, "last_edit_date": 1499269982, "creation_date": 1472834950, "answer_id": 39297313, "question_id": 39146584, "link": "https://stackoverflow.com/questions/39146584/how-do-i-create-a-rust-hashmap-where-the-value-can-be-one-of-multiple-types/39297313#39297313", "title": "How do I create a Rust HashMap where the value can be one of multiple types?", "body": "<p>Here is another approach that may be more palatable to you. The <a href=\"https://crates.io/crates/serde_json\" rel=\"nofollow noreferrer\"><code>serde_json</code> crate</a> provides a way to construct <code>serde_json::Value</code> objects from JSON literals. Your example would look like this:</p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nfn main() {\n    let item = json!({\n        \"key1\": \"value\",\n        \"key2\": [\"val\", \"val\", \"val\"],\n        \"key3\": { \"keyX\": 12 }\n    });\n\n    let response = serde_json::to_string(&amp;item).unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 3260, "user_id": 1361768, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/2cf5ccc5505d141e7b20f1b2cfc8ca38?s=128&d=identicon&r=PG", "display_name": "Majster", "link": "https://stackoverflow.com/users/1361768/majster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7829, "favorite_count": 2, "accepted_answer_id": 39147207, "answer_count": 2, "score": 14, "last_activity_date": 1598237102, "creation_date": 1472131448, "last_edit_date": 1499269827, "question_id": 39146584, "link": "https://stackoverflow.com/questions/39146584/how-do-i-create-a-rust-hashmap-where-the-value-can-be-one-of-multiple-types", "title": "How do I create a Rust HashMap where the value can be one of multiple types?", "body": "<p>I want to make a JSON object which includes multiple types. Here's the structure:</p>\n\n<pre><code>{\n    \"key1\": \"value\",\n    \"key2\": [\"val\", \"val\", \"val\"]\n    \"key3\": { \"keyX\": 12 }\n}\n</code></pre>\n\n<p>How can I make a <code>HashMap</code> which accepts all these types?</p>\n\n<p>I'm trying this:</p>\n\n<pre><code>let item = HashMap::new();\nitem.insert(\"key1\", someString); //type is &amp;str\nitem.insert(\"key2\", someVecOfStrings); //type is Vec&lt;String&gt;\nitem.insert(\"key3\", someOtherHashMap); //Type is HashMap&lt;&amp;str, u32&gt;\n\nlet response = json::encode(&amp;item).unwrap();\n</code></pre>\n\n<p>I know that the hash map does not have enough type info, but I'm not sure how I can make it work. I have tried setting an explicit type on <code>item</code> which was <code>HashMap&lt;&amp;str, Encodable&gt;</code> but then it's just another error. What is the correct way to do this?</p>\n"}, {"tags": ["rust", "hyper"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 8, "last_activity_date": 1472122800, "creation_date": 1472122800, "answer_id": 39143475, "question_id": 39141810, "link": "https://stackoverflow.com/questions/39141810/forr-r-r-cannot-be-sent-between-threads-safely/39143475#39143475", "title": "`for&lt;&#39;r, &#39;r, &#39;r&gt; ...` cannot be sent between threads safely", "body": "<p>You're nearly there.</p>\n\n<p>The error is saying that <code>MyHandler</code> doesn't implement the <code>Send</code> trait, which means that a type can be sent safely to other threads:</p>\n\n<pre><code>note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex&lt;std::vec::Vec&lt;(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)&gt;&gt;`\nnote: required because it appears within the type `MyHandler`\nnote: required by `hyper::server::Handler`\n</code></pre>\n\n<p>The error does point to the right place, but it's a bit overwhelming.  The first line is:</p>\n\n<pre><code>note: `for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static` cannot be sent between threads safely\n</code></pre>\n\n<p>Which is saying that a <code>Fn</code> type doesn't implement <code>Send</code>.  This is the one in your <code>Route</code> type:</p>\n\n<pre><code>type Route = (method::Method, String, Box&lt;Fn(server::Request, server::Response)&gt;);\n</code></pre>\n\n<p>A <code>Fn</code> closure is only <code>Send</code> if all of the variables it captures are also <code>Send</code>, but here we don't know whether any closure passed in will be suitable.</p>\n\n<p>The solution is simple: constrain the <code>Fn</code> type to be <code>Send</code>:</p>\n\n<pre><code>type Route = (method::Method, String, Box&lt;Fn(server::Request, server::Response)+Send&gt;);\n</code></pre>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2182, "favorite_count": 1, "accepted_answer_id": 39143475, "answer_count": 1, "score": 6, "last_activity_date": 1472122800, "creation_date": 1472118197, "last_edit_date": 1472119208, "question_id": 39141810, "link": "https://stackoverflow.com/questions/39141810/forr-r-r-cannot-be-sent-between-threads-safely", "title": "`for&lt;&#39;r, &#39;r, &#39;r&gt; ...` cannot be sent between threads safely", "body": "<p>I learn Rust and I tried to build a micro route system built on top of hyper (it's just for learning purpose, I know frameworks exists).</p>\n\n<p>I don't know how to share a \"complex\" type with an <code>hyper::server::Handler</code>. I read the error message, but unfortunately, I don't understand how to fix it (most of time, the rust compiler just says what to fix, right now I'm not sure to understand). </p>\n\n<p>Here is a (non-)working over-simplified example of what I tried:</p>\n\n<pre><code>extern crate hyper;\nuse std::sync::Mutex;\n\nuse hyper::*;\n\ntype Route = (method::Method, String, Box&lt;Fn(server::Request, server::Response)&gt;);\n\nstruct MyHandler {\n    routes: Mutex&lt;Vec&lt;Route&gt;&gt;\n}\n\nimpl server::Handler for MyHandler {\n    fn handle(&amp;self, req: server::Request, mut res: server::Response) {\n        // This is not important\n    }\n}\n\nfn main() {\n    // This is not important\n}\n</code></pre>\n\n<p>And the error is:</p>\n\n<pre><code>error: the trait bound `for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static: std::marker::Send` is not satisfied [--explain E0277]\n  --&gt; src/main.rs:12:10\n   |&gt;\n12 |&gt;     impl server::Handler for MyHandler {\n   |&gt;          ^^^^^^^^^^^^^^^\nnote: `for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static` cannot be sent between threads safely\nnote: required because it appears within the type `Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;`\nnote: required because it appears within the type `(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)`\nnote: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique&lt;(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)&gt;`\nnote: required because it appears within the type `alloc::raw_vec::RawVec&lt;(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)&gt;`\nnote: required because it appears within the type `std::vec::Vec&lt;(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)&gt;`\nnote: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex&lt;std::vec::Vec&lt;(hyper::method::Method, std::string::String, Box&lt;for&lt;'r, 'r, 'r&gt; std::ops::Fn(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;) + 'static&gt;)&gt;&gt;`\nnote: required because it appears within the type `MyHandler`\nnote: required by `hyper::server::Handler`\n</code></pre>\n\n<p>It works if I use a simple integer, but not with the <code>Route</code> type.</p>\n\n<p>So, there is a problem with the trait and something about \"cannot be sent between threads safely\". Reading <code>hyper</code> doc, I added a <code>Mutex</code>, but I must be dumb, <em>I have no idea what I am doing</em>, not sure if I should just stop to learn Rust, or keep trying.</p>\n"}, {"tags": ["printing", "rust", "stderr"], "answers": [{"comments": [{"owner": {"reputation": 129, "user_id": 6426228, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3f56a65390f1206b7f1f898ece6ee480?s=128&d=identicon&r=PG&f=1", "display_name": "ehoopz", "link": "https://stackoverflow.com/users/6426228/ehoopz"}, "edited": false, "score": 0, "creation_date": 1472118539, "post_id": 39141714, "comment_id": 65628167, "body": "lol! :D ok, thanks. /fail"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1596966441, "last_edit_date": 1596966441, "creation_date": 1472117916, "answer_id": 39141714, "question_id": 39141130, "link": "https://stackoverflow.com/questions/39141130/rust-how-to-make-a-formatted-print-to-stderr/39141714#39141714", "title": "Rust: how to make a formatted print to stderr?", "body": "<p>See <a href=\"https://stackoverflow.com/a/27590832/2408867\">answer of the linked duplicate</a>. Since Rust 1.19, you can use the <code>eprintln!</code> macro.</p>\n"}], "owner": {"reputation": 129, "user_id": 6426228, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/3f56a65390f1206b7f1f898ece6ee480?s=128&d=identicon&r=PG&f=1", "display_name": "ehoopz", "link": "https://stackoverflow.com/users/6426228/ehoopz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1077, "favorite_count": 0, "closed_date": 1472120106, "accepted_answer_id": 39141714, "answer_count": 1, "score": 1, "last_activity_date": 1596966441, "creation_date": 1472116285, "question_id": 39141130, "link": "https://stackoverflow.com/questions/39141130/rust-how-to-make-a-formatted-print-to-stderr", "closed_reason": "Duplicate", "title": "Rust: how to make a formatted print to stderr?", "body": "<p>I'm trying to print a formatted string to <code>stderr</code> in Rust (curious newbie here!), but it looks like an easy convenience macro (such as <code>print!/println!</code> for <code>stdout</code>) isn't provided in the standard library.</p>\n\n<p>In C, one could just do it like this:</p>\n\n<pre><code>fprintf(stderr, \"format_string\", args ...);\n</code></pre>\n\n<p>I've successfully printed string <em>literals</em> to <code>stderr</code> with </p>\n\n<pre><code>let stderr = std::io::stderr();\nwriteln!(&amp;mut stderr, \"literal\");\n</code></pre>\n\n<p>The next thing that came into mind was to do a <code>format!</code> first, and then use <code>writeln!</code>, mut that fails to compile with <code>error: expected a literal</code>. On the other hand, <code>stderr.write()</code> expects <code>&amp;[u8]</code>, so using <code>String::bytes().collect()</code> doesn't really work either.. </p>\n\n<p>What are the correct solutions to this?</p>\n"}, {"tags": ["python", "regex", "parsing", "rust"], "comments": [{"owner": {"reputation": 33, "user_id": 6755478, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/070eb5bd3ac84b56f1e2f7d22087ec3f?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Raster", "link": "https://stackoverflow.com/users/6755478/alex-raster"}, "edited": false, "score": 0, "creation_date": 1472106139, "post_id": 39137905, "comment_id": 65620400, "body": "Downvoter: Is there something I can do to improve this question?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1472111844, "post_id": 39137905, "comment_id": 65623757, "body": "(a) There is a lot of code that is not really relevant to the question; a <a href=\"http://stackoverflow.com/help/mcve\">mcve</a> would be best, but maybe not really possible nor necessary here. (b) Many links could be improved in formatting. (c) There are good reasons why SO prohibits using certain links (e.g. because those links can easily become invalid). It&#39;s worth finding out what&#39;s wrong with that link and solve this (for example by rehosting the image). --- Haven&#39;t seen that you are new to SO, otherwise I would have explained my downvote earlier, sorry! But: welcome :)"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1472107955, "creation_date": 1472107955, "answer_id": 39138538, "question_id": 39137905, "link": "https://stackoverflow.com/questions/39137905/iterating-through-capture-fields-in-a-rust-regex/39138538#39138538", "title": "Iterating through capture fields in a Rust regex", "body": "<p>You are iterating on each character of your input string and trying to match the regex on a string composed of a single character. However, this regex is not designed to match individual characters. Indeed, the regex will match <code>[S]</code> as a whole.</p>\n\n<p>If you want to be able to find multiple matches in a single string, use <a href=\"https://doc.rust-lang.org/regex/regex/struct.Regex.html#method.captures_iter\" rel=\"noreferrer\"><code>captures_iter</code></a> instead of <code>captures</code> to iterate on all matches and their respective captures (each match will be a formula, the regex will skip text that doesn't match a formula).</p>\n\n<pre><code>for captures in atom_re.captures_iter(\"[S]\") {\n    // check the captures of each match\n}\n</code></pre>\n\n<p>If you only want to find the first match in a string, then use <code>captures</code> on the whole string, rather than on each individual character.</p>\n"}], "owner": {"reputation": 33, "user_id": 6755478, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/070eb5bd3ac84b56f1e2f7d22087ec3f?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Raster", "link": "https://stackoverflow.com/users/6755478/alex-raster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 702, "favorite_count": 1, "accepted_answer_id": 39138538, "answer_count": 1, "score": 2, "last_activity_date": 1472181387, "creation_date": 1472105588, "last_edit_date": 1486566697, "question_id": 39137905, "link": "https://stackoverflow.com/questions/39137905/iterating-through-capture-fields-in-a-rust-regex", "title": "Iterating through capture fields in a Rust regex", "body": "<p>I'm playing around with the frowns parser available from http:// frowns.sourceforge.net, a parser that tokenizes SMILES standard chemical formula strings. Specifically I'm trying to port it to Rust.</p>\n\n<p>The original regex for an \"atom\" token in the parser looks like this (Python):</p>\n\n<pre><code>element_symbols_pattern = \\\n  r\"C[laroudsemf]?|Os?|N[eaibdpos]?|S[icernbmg]?|P[drmtboau]?|\"  \\\n  r\"H[eofgas]?|c|n|o|s|p|A[lrsgutcm]|B[eraik]?|Dy|E[urs]|F[erm]?|\"  \\\n  r\"G[aed]|I[nr]?|Kr?|L[iaur]|M[gnodt]|R[buhenaf]|T[icebmalh]|\" \\\n  r\"U|V|W|Xe|Yb?|Z[nr]|\\*\"\n\natom_fields = [\n    \"raw_atom\",\n    \"open_bracket\",\n    \"weight\",\n    \"element\",\n    \"chiral_count\",\n    \"chiral_named\",\n    \"chiral_symbols\",\n    \"hcount\",\n    \"positive_count\",\n    \"positive_symbols\",\n    \"negative_count\",\n    \"negative_symbols\",\n    \"error_1\",\n    \"error_2\",\n    \"close_bracket\",\n    \"error_3\",\n    ]\n\natom = re.compile(r\"\"\"\n(?P&lt;raw_atom&gt;Cl|Br|[cnospBCNOFPSI]) |  # \"raw\" means outside of brackets\n(\n  (?P&lt;open_bracket&gt;\\[)                 # Start bracket\n  (?P&lt;weight&gt;\\d+)?                     # Atomic weight (optional)\n  (                                    # valid term or error\n   (                                   #   valid term\n    (?P&lt;element&gt;\"\"\" + element_symbols_pattern + r\"\"\")  # element or aromatic\n    (                                  # Chirality can be\n     (?P&lt;chiral_count&gt;@\\d+) |          #   @1 @2 @3 ...\n     (?P&lt;chiral_named&gt;                 # or\n       @TH[12] |                       #   @TA1 @TA2\n       @AL[12] |                       #   @AL1 @AL2\n       @SP[123] |                      #   @SP1 @SP2 @SP3\n       @TB(1[0-9]?|20?|[3-9]) |        #   @TB{1-20}\n       @OH(1[0-9]?|2[0-9]?|30?|[4-9])) | # @OH{1-30}\n     (?P&lt;chiral_symbols&gt;@+)            # or @@@@@@@...\n    )?                                 # and chirality is optional\n    (?P&lt;hcount&gt;H\\d*)?                  # Optional hydrogen count\n    (                                  # Charges can be\n     (?P&lt;positive_count&gt;\\+\\d+) |       #   +&lt;number&gt;\n     (?P&lt;positive_symbols&gt;\\++) |       #   +++...  This includes the single '+'\n     (?P&lt;negative_count&gt;-\\d+)  |       #   -&lt;number&gt;\n     (?P&lt;negative_symbols&gt;-+)          #   ---...  including a single '-'\n    )?                                 # and are optional\n    (?P&lt;error_1&gt;[^\\]]+)?               # If there's anything left, it's an error\n  ) | (                                # End of parsing stuff in []s, except\n    (?P&lt;error_2&gt;[^\\]]*)                # If there was an error, we get here\n  ))\n  ((?P&lt;close_bracket&gt;\\])|              # End bracket\n   (?P&lt;error_3&gt;$))                     # unexpectedly reached end of string\n)\n\"\"\", re.X)\n</code></pre>\n\n<p>The field list is used to improve the reportability of the regex parser, as well as track parsing errors.</p>\n\n<p>I wrote <a href=\"https://gitlab.com/araster/frowns_regex\" rel=\"nofollow noreferrer\">something that compiles</a> and parses tokens without brackets properly, but something about the inclusion of brackets (such as <code>[S]</code> instead of <code>S</code>) breaks it. So I've narrowed it down with comments:</p>\n\n<pre><code>extern crate regex;\nuse regex::Regex;\n\nfn main() {\n    let atom_fields: Vec&lt;&amp;'static str&gt; = vec![\n        \"raw_atom\",\n        \"open_bracket\",\n        \"weight\",\n        \"element\",\n        \"chiral_count\",\n        \"chiral_named\",\n        \"chiral_symbols\",\n        \"hcount\",\n        \"positive_count\",\n        \"positive_symbols\",\n        \"negative_count\",\n        \"negative_symbols\",\n        \"error_1\",\n        \"error_2\",\n        \"close_bracket\",\n        \"error_3\"\n    ];\n\n    const EL_SYMBOLS: &amp;'static str = r#\"(?P&lt;element&gt;S?|\\*\")\"#;\n      let atom_re_str: &amp;String = &amp;String::from(vec![\n//    r\"(?P&lt;raw_atom&gt;Cl|Br|[cnospBCNOFPSI])|\", // \"raw\" means outside of brackets\n        r\"(\",\n        r\"(?P&lt;open_bracket&gt;\\[)\",                 // Start bracket\n//      r\"(?P&lt;weight&gt;\\d+)?\",                     // Atomic weight (optional)\n        r\"(\",                                    // valid term or error\n         r\"(\",                                   // valid term    \n          &amp;EL_SYMBOLS,                           // element or aromatic\n//       r\"(\",                                  // Chirality can be\n//        r\"(?P&lt;chiral_count&gt;@\\d+)|\",           //   @1 @2 @3 ...    \n//        r\"(?P&lt;chiral_named&gt;\",                 // or\n//         r\"@TH[12]|\",                         //   @TA1 @TA2\n//         r\"@AL[12]|\",                         //   @AL1 @AL2\n//         r\"@SP[123]|\",                        //   @SP1 @SP2 @SP3    \n//         r\"@TB(1[0-9]?|20?|[3-9])|\",          //   @TB{1-20}    \n//         r\"@OH(1[0-9]?|2[0-9]?|30?|[4-9]))|\", //   @OH{1-30}    \n//         r\"(?P&lt;chiral_symbols&gt;@+)\",           // or @@@@....,\n//        r\")?\",                                // and chirality is optional    \n//       r\"(?P&lt;hcount&gt;H\\d*)?\",                  // Optional hydrogen count    \n//       r\"(\",                                  // Charges can be    \n//        r\"(?P&lt;positive_count&gt;\\+\\d+)|\",        //   +&lt;number&gt;    \n//        r\"(?P&lt;positive_symbols&gt;\\++)|\",        //   +++...including a single '+'    \n//        r\"(?P&lt;negative_count&gt;-\\d+)|\",         //   -&lt;number&gt;    \n//        r\"(?P&lt;negative_symbols&gt;-+)\",          //   ---... including a single '-'\n//       r\")?\",                                 // and are optional    \n//      r\"(?P&lt;error_1&gt;[^\\]]+)?\",                // anything left is an error    \n        r\")\",                                  // End of stuff in []s, except    \n        r\"|((?P&lt;error_2&gt;[^\\]]*)\",                  // If other error, we get here\n        r\"))\",\n        r\"((?P&lt;close_bracket&gt;\\])|\",              // End bracket    \n        r\"(?P&lt;error_3&gt;$)))\"].join(\"\"));          // unexpected end of string\n\n    println!(\"generated regex: {}\", &amp;atom_re_str);\n    let atom_re = Regex::new(&amp;atom_re_str).unwrap();\n\n    for cur_char in \"[S]\".chars() {\n        let cur_string = cur_char.to_string();\n        println!(\"cur string: {}\", &amp;cur_string);\n        let captures = atom_re.captures(&amp;cur_string.as_str()).unwrap();\n// if captures.name(\"atom\").is_some() {\n//   for cur_field in &amp;atom_fields {\n//     let field_capture = captures.name(cur_field);\n//     if cur_field.contains(\"error\") {\n//       if *cur_field == \"error_3\" {\n//         // TODO replace me with a real error\n//         println!(\"current char: {:?}\", &amp;cur_char);\n//         panic!(\"Missing a close bracket (]). Looks like: {}.\",\n//                field_capture.unwrap());\n//       } else {\n//         panic!(\"I don't recognize the character. Looks like: {}.\",\n//                field_capture.unwrap());\n//       }      \n//     } else {\n//       println!(\"ok! matched {:?}\", &amp;cur_char);\n//     }\n//   }\n// }\n  }\n}\n</code></pre>\n\n<p>--</p>\n\n<p>You can see that the generated Rust regex works in Debuggex:</p>\n\n<pre><code>((?P&lt;open_bracket&gt;\\[)(((?P&lt;element&gt;S?|\\*\"))|((?P&lt;error_2&gt;[^\\]]*)))((?P&lt;close_bracket&gt;\\])|(?P&lt;error_3&gt;$)))\n</code></pre>\n\n<p><img src=\"https://debuggex.com/i/7j75Y2F1ph1v9jfL.png\" alt=\"Regular expression visualization\"> </p>\n\n<p>(<a href=\"http://debuggex.com/r/7j75Y2F1ph1v9jfL\" rel=\"nofollow noreferrer\">http://debuggex.com/r/7j75Y2F1ph1v9jfL</a>)</p>\n\n<p>If you run the example (<a href=\"https://gitlab.com/araster/frowns_regex\" rel=\"nofollow noreferrer\">https://gitlab.com/araster/frowns_regex</a>), you'll see that the open bracket parses correctly, but the <code>.captures().unwrap()</code> dies on the next character 'S'. If I use the complete expression I can parse all kinds of things from the frowns test file, as long as they don't have brackets.</p>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1472105557, "creation_date": 1472105557, "answer_id": 39137897, "question_id": 39137364, "link": "https://stackoverflow.com/questions/39137364/callback-to-mutable-self/39137897#39137897", "title": "Callback to mutable self", "body": "<p><strong>No</strong>, this is not possible with your code. If it were possible, you could easily construct an example that destroys memory safety, by for example accessing freed memory (<em>this is left as an exercise for the reader</em> \ud83d\ude09).</p>\n\n<p>You could think about whether or not the <code>FnMut</code> really needs all of the fields of <code>SelfCaller</code>. If not, you can pass the (hopefully few) single fields as arguments. If not, you can create another type (let's call it <code>Inner</code>) that contains all fields important to the callback and pass it to the function.</p>\n"}, {"comments": [{"owner": {"reputation": 9325, "user_id": 4931, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f4182656449e54bde861a02d6ef44ecd?s=128&d=identicon&r=PG", "display_name": "Michael Deardeuff", "link": "https://stackoverflow.com/users/4931/michael-deardeuff"}, "edited": false, "score": 0, "creation_date": 1472107548, "post_id": 39138280, "comment_id": 65621018, "body": "Thanks! That&#39;s helpful. In my case, though, the callback member is meant to be unchangeable. If the SelfCaller.callback member is hidden from the callbacks would it be acceptable to do this?"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 9325, "user_id": 4931, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f4182656449e54bde861a02d6ef44ecd?s=128&d=identicon&r=PG", "display_name": "Michael Deardeuff", "link": "https://stackoverflow.com/users/4931/michael-deardeuff"}, "edited": false, "score": 0, "creation_date": 1472109492, "post_id": 39138280, "comment_id": 65622253, "body": "Yes, if the <code>callback</code> member is not public and there is no public method that changes it, then it&#39;s safe to cheat on the lifetime. Be sure to leave a comment or two in your code to document the fact that the <code>callback</code> member should not be modifiable by users, so that nobody adds a mutator method in the future!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1472107037, "creation_date": 1472107037, "answer_id": 39138280, "question_id": 39137364, "link": "https://stackoverflow.com/questions/39137364/callback-to-mutable-self/39138280#39138280", "title": "Callback to mutable self", "body": "<p>No, there is no way, <em>because it is unsafe to do so</em>. Here's an example that demonstrates why (requires a nightly compiler).</p>\n\n<pre><code>#![feature(fn_traits)]\n#![feature(unboxed_closures)]\n\nuse std::mem;\n\ntrait Actable {\n    fn act(&amp;mut self);\n}\n\nstruct SelfCaller {\n    message: String,\n    callback: Box&lt;FnMut(&amp;mut SelfCaller)&gt;,\n}\n\nimpl Actable for SelfCaller {\n    fn act(&amp;mut self) {\n        let mut callback: &amp;mut Box&lt;FnMut(&amp;mut SelfCaller)&gt; = unsafe { mem::transmute(&amp;mut self.callback) };\n        println!(\"calling callback\");\n        callback(self);\n        println!(\"called callback\");\n    }\n}\n\nstruct Callback;\n\nimpl Drop for Callback {\n    fn drop(&amp;mut self) {\n        println!(\"Callback dropped!\");\n    }\n}\n\nimpl&lt;'a&gt; FnOnce&lt;(&amp;'a mut SelfCaller,)&gt; for Callback {\n    type Output = ();\n\n    extern \"rust-call\" fn call_once(mut self, args: (&amp;mut SelfCaller,)) {\n        self.call_mut(args)\n    }\n}\n\nimpl&lt;'a&gt; FnMut&lt;(&amp;'a mut SelfCaller,)&gt; for Callback {\n    extern \"rust-call\" fn call_mut(&amp;mut self, (messenger,): (&amp;mut SelfCaller,)) {\n        println!(\"changing callback\");\n        messenger.callback = Box::new(|messenger| {});\n        println!(\"changed callback\");\n        messenger.message = \"replaced message\".to_owned();\n    }\n}\n\nfn main() {\n    let change = Callback;\n\n    let mut messenger = SelfCaller {\n        message: \"initial message\".to_owned(),\n        callback: Box::new(change),\n    };\n\n    messenger.act();\n\n    println!(\"{}\", &amp;messenger.message);\n}\n</code></pre>\n\n<p>The output of this program is:</p>\n\n<pre><code>calling callback\nchanging callback\nCallback dropped!\nchanged callback\ncalled callback\nreplaced message\n</code></pre>\n\n<p>OK, so what's going on? First, I've written the implementation of <code>act</code> for <code>SelfCaller</code> in such a way that I <em>can</em> call the callback without <code>mem::replace</code>, using <code>mem::transmute</code> to get the compiler to generate a new lifetime disconnected from <code>self</code>.</p>\n\n<p>Then, I've written a callback (using the struct <code>Callback</code>, since I needed a type that implements both <code>FnMut</code> and <code>Drop</code> to demonstrate the problem) that mutates the <code>SelfCaller</code> by changing its <code>callback</code> member. This has the effect of <strong>dropping the previous callback</strong>, which is the callback that is currently executing! If <code>Callback</code> contained data members, attempting to read them would cause undefined behavior, since they are now in deallocated memory (we dropped the whole <code>Box</code>).</p>\n\n<hr>\n\n<p>By the way, in your code using <code>mem::replace</code>, callbacks cannot change the callback, since you restore the callback after the callback call ends.</p>\n"}, {"comments": [{"owner": {"reputation": 9325, "user_id": 4931, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f4182656449e54bde861a02d6ef44ecd?s=128&d=identicon&r=PG", "display_name": "Michael Deardeuff", "link": "https://stackoverflow.com/users/4931/michael-deardeuff"}, "edited": false, "score": 0, "creation_date": 1472154114, "post_id": 39142459, "comment_id": 65650379, "body": "Whoops! I forgot to make SelfCaller implement Drop!"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1472119942, "creation_date": 1472119942, "answer_id": 39142459, "question_id": 39137364, "link": "https://stackoverflow.com/questions/39137364/callback-to-mutable-self/39142459#39142459", "title": "Callback to mutable self", "body": "<p>If you don't need callbacks that borrow an environment, you can use a function instead of the closure:</p>\n\n<pre><code>trait Actable {\n    fn act(&amp;mut self);\n}\n\nstruct SelfCaller {\n    message: String,\n    callback: fn(&amp;mut SelfCaller),\n}\n\nimpl Actable for SelfCaller {\n    fn act(&amp;mut self) {\n        (self.callback)(self);\n    }\n}\n\nfn main() {\n    fn change(messenger: &amp;mut SelfCaller) {\n        messenger.message = \"replaced message\".to_owned();\n    }\n\n    let mut messenger = SelfCaller {\n        message: \"initial message\".to_owned(),\n        callback: change,\n    };\n\n    messenger.act();\n\n    println!(\"{}\", &amp;messenger.message);\n}\n</code></pre>\n"}], "owner": {"reputation": 9325, "user_id": 4931, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f4182656449e54bde861a02d6ef44ecd?s=128&d=identicon&r=PG", "display_name": "Michael Deardeuff", "link": "https://stackoverflow.com/users/4931/michael-deardeuff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 847, "favorite_count": 0, "accepted_answer_id": 39138280, "answer_count": 3, "score": 1, "last_activity_date": 1472154407, "creation_date": 1472103137, "last_edit_date": 1472154407, "question_id": 39137364, "link": "https://stackoverflow.com/questions/39137364/callback-to-mutable-self", "title": "Callback to mutable self", "body": "<p>Is there a way (in rust) to send a mutable borrowed self to a callback without the <code>mem::replace</code> hack I am using in the following MWE? I am using rust stable (1.11.0).</p>\n\n<pre><code>use std::mem;\n\ntrait Actable {\n    fn act(&amp;mut self);\n}\n\n// Not Cloneable\nstruct SelfCaller {\n    message: String,\n    callback: Box&lt;FnMut(&amp;mut SelfCaller)&gt;,\n    // other stuff\n}\n\nimpl Actable for SelfCaller {\n    fn act(&amp;mut self) {\n        fn noop(_: &amp;mut SelfCaller) {}\n        let mut callback = mem::replace(&amp;mut self.callback, Box::new(noop));\n        callback(self);\n        mem::replace(&amp;mut self.callback, callback);\n    }\n}\n\nimpl Drop for SelfCaller {\n    fn drop(&amp;mut self) {/* unimiportant to the story */}\n}\n\nfn main() {\n    fn change(messenger: &amp;mut SelfCaller) {\n        messenger.message = \"replaced message\".to_owned();\n    }\n\n    let mut messenger = SelfCaller {\n        message: \"initial message\".to_owned(),\n        callback: Box::new(change),\n    };\n\n    messenger.act();\n\n    println!(\"{}\", &amp;messenger.message);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Amem%3B%0A%0Atrait%20Actable%20%7B%0A%20%20%20%20fn%20act(%26mut%20self)%3B%0A%7D%0A%0A%2F%2F%20Not%20Cloneable%0Astruct%20SelfCaller%20%7B%0A%20%20%20%20message%3A%20String%2C%0A%20%20%20%20callback%3A%20Box%3CFnMut(%26mut%20SelfCaller)%3E%2C%20%2F%2F%20other%20stuff%0A%7D%0A%0Aimpl%20Actable%20for%20SelfCaller%20%7B%0A%20%20%20%20fn%20act(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20fn%20noop(_%3A%20%26mut%20SelfCaller)%20%7B%7D%0A%20%20%20%20%20%20%20%20let%20mut%20callback%20%3D%20mem%3A%3Areplace(%26mut%20self.callback%2C%20Box%3A%3Anew(noop))%3B%0A%20%20%20%20%20%20%20%20callback(self)%3B%0A%20%20%20%20%20%20%20%20mem%3A%3Areplace(%26mut%20self.callback%2C%20callback)%3B%0A%20%20%20%20%7D%0A%7D%0A%0Aimpl%20Drop%20for%20SelfCaller%20%7B%0A%20%20%20%20fn%20drop(%26mut%20self)%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20unimiportant%20to%20the%20story%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20fn%20change(messenger%3A%20%26mut%20SelfCaller)%20%7B%0A%20%20%20%20%20%20%20%20messenger.message%20%3D%20%22replaced%20message%22.to_owned()%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20mut%20messenger%20%3D%20SelfCaller%20%7B%0A%20%20%20%20%20%20%20%20message%3A%20%22initial%20message%22.to_owned()%2C%0A%20%20%20%20%20%20%20%20callback%3A%20Box%3A%3Anew(change)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20messenger.act()%3B%0A%0A%20%20%20%20println!(%22%7B%7D%22%2C%20%26messenger.message)%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Play</a></p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472104898, "post_id": 39137063, "comment_id": 65619869, "body": "Using <code>match</code> instead of if-else and omitting the <code>return</code> makes the code <a href=\"https://gist.github.com/LukasKalbertodt/9f2e73305880e586231b76ef4b6a948c\" rel=\"nofollow noreferrer\">a bit nicer</a> already, doesn&#39;t it? :)"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1472108258, "post_id": 39137063, "comment_id": 65621448, "body": "@LukasKalbertodt, right, edited to use match, however this doesn&#39;t address the root of the problem - moving complex functions that use callbacks to an iterator is non-trivial and resulting code often won&#39;t be readable or easy to maintain, eg - <a href=\"https://gitlab.com/ideasman42/rust-simple-examples/blob/master/draw_poly_2d_callback/src/main.rs\" rel=\"nofollow noreferrer\">gitlab.com/ideasman42/rust-simple-examples/blob/master/&hellip;</a>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1477554533, "last_edit_date": 1477554533, "creation_date": 1472104194, "answer_id": 39137579, "question_id": 39137063, "link": "https://stackoverflow.com/questions/39137063/whats-the-best-way-to-write-an-iterator-supporting-multiple-logic-branches/39137579#39137579", "title": "Whats the best way to write an iterator supporting multiple logic branches?", "body": "<p>Languages like C# and Python provide a way to generate iterators from methods written using a special <code>yield</code> keyword. As of Rust 1.11, there is no such feature in the language. However, such a feature is planned <a href=\"https://github.com/rust-lang/rfcs/issues/388\" rel=\"nofollow\">(see RFC)</a> (indeed, <a href=\"https://doc.rust-lang.org/grammar.html#keywords\" rel=\"nofollow\"><code>yield</code> is a reserved keyword</a>!) and would likely work as in C# (i.e. the compiler would generate a struct with the necessary state and implementation for <code>Iterator</code>).</p>\n\n<p>In the meantime, you could try <a href=\"https://github.com/erickt/stateful\" rel=\"nofollow\">Stateful</a>, a project that attempts to provide this feature. (<a href=\"http://erickt.github.io/blog/2016/01/27/stateful-in-progress-generators/\" rel=\"nofollow\">This blog post</a> explains how Stateful works, and the challenges involved.)</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 462, "favorite_count": 1, "accepted_answer_id": 39137579, "answer_count": 1, "score": 3, "last_activity_date": 1477554533, "creation_date": 1472101649, "last_edit_date": 1472115880, "question_id": 39137063, "link": "https://stackoverflow.com/questions/39137063/whats-the-best-way-to-write-an-iterator-supporting-multiple-logic-branches", "title": "Whats the best way to write an iterator supporting multiple logic branches?", "body": "<p>In Rust I've started writing iterators, converting them from code which took a callback function.</p>\n\n<p>I ran into the problem where the code that used a callback in multiple branches of the function didn't convert so cleanly into a Rust iterator.</p>\n\n<p>To give some pseudo-code.</p>\n\n<pre><code>// function using callbacks where the caller can exit at any time,\n// can be used in a similar way to an iterator.\nfn do_stuff(args, callback_fn(cb_args)) {\n    // define a, b, c... args\n    if callback_fn(a, b, 0) == false { return; }\n    for i in 0..n {\n        if callback_fn(c, d, i) == false { return; }\n    }\n    if callback_fn(e, f, -1) == false { return; }\n}\n</code></pre>\n\n<p>Converting this to an iterator was rather awkward since I needed to store some state representing each branch.</p>\n\n<pre><code>impl Iterator for MyStruct {\n    fn next(&amp;mut self) -&gt; Option&lt;MyResult&gt; {\n        let out = match (self.state) {\n            0 =&gt; {\n                self.state += 1;\n                Some(MyResult(self.a, self.b, 0))\n            },\n            1 =&gt; {\n                self.i += 1;\n                if self.i == self.n {\n                    self.state += 1;\n                }\n                Some(MyResult(self.c, self.d, self.i - 1))\n            },\n            2 =&gt; {\n                self.state += 1;\n                Some(MyResult(self.e, self.f, -1))\n            },\n            _ =&gt; {\n                None\n            },\n        }\n        return out;\n    }\n// --- snip\n</code></pre>\n\n<p><em>With the example above, this is arguably acceptable, (if a little awkward). Consider cases with multiple for loops, variable scopes, where its much harder to track state.</em></p>\n\n<hr>\n\n<p>While I didn't try these, I imagine there are some ways to achieve this which in most cases are less-then-ideal workarounds:</p>\n\n<ul>\n<li>Using the callback version, building a vector, then iterating over it... <br><em>(works but defeats the purpose of using an iterator, no way to early exit and avoid creating the entire data set for eg).</em></li>\n<li>Writing an iterator which communicates with a thread that uses similar logic to the callback version.<br><em>(while possible, the overhead of creating OS threads makes it a poor choice in many cases).</em></li>\n</ul>\n\n<p>Besides the workarounds above:</p>\n\n<p>Are there ways to write iterators like the example given, with less convoluted logic?<br>Ideally more like the example that uses callbacks.\n<br>Otherwise are there other ways to handle this?</p>\n\n<p>Or is this simply not supported in Rust?</p>\n\n<hr>\n\n<p><em>Note, the same logic applies coming from Python generators (using yield instead of a callback, using callbacks as an example here since they're ubiquitous with first class functions).</em></p>\n"}, {"tags": ["regex", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1472090210, "post_id": 39135477, "comment_id": 65616148, "body": "Your closure returns a <code>()</code> since the last expression is terminated by a semicolon, but the closure must return a <code>String</code>. Try removing the semicolon."}], "answers": [{"tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": true, "score": 2, "last_activity_date": 1472090629, "creation_date": 1472090629, "answer_id": 39135608, "question_id": 39135477, "link": "https://stackoverflow.com/questions/39135477/cannot-use-replace-all-from-the-regex-crate-expected-found-string/39135608#39135608", "title": "Cannot use `replace_all` from the regex crate: expected (), found String", "body": "<p>As @BurntSushi5 pointed out, your closure should return a <code>String</code>. Here is a complete example for future reference:</p>\n\n<pre><code>extern crate regex;\nuse regex::{Regex, Captures};\n\nfn main() {\n    let buffer = \"abcdef\";\n    let re = Regex::new(r\"(\\w)bc(\\w)\").unwrap();\n    let out = re.replace_all(&amp;buffer, |caps: &amp;Captures| {\n        caps.at(1).unwrap().to_owned()\n    });\n    println!(\"{:?}\", out); // =&gt; \"aef\"\n}\n</code></pre>\n"}], "owner": {"reputation": 1738, "user_id": 3879, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/16c337ddb689492848e26040b90bd69b?s=128&d=identicon&r=PG", "display_name": "ray", "link": "https://stackoverflow.com/users/3879/ray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 460, "favorite_count": 0, "accepted_answer_id": 39135608, "answer_count": 1, "score": 1, "last_activity_date": 1472093509, "creation_date": 1472089624, "last_edit_date": 1472093509, "question_id": 39135477, "link": "https://stackoverflow.com/questions/39135477/cannot-use-replace-all-from-the-regex-crate-expected-found-string", "title": "Cannot use `replace_all` from the regex crate: expected (), found String", "body": "<p>I'm trying to find and replace all instances of a string with a shortened version, and I want to maintain references to a capture if it's found.</p>\n\n<p>I've written this code:</p>\n\n<pre><code>extern crate regex;\nuse regex::{Regex, Captures};\n\n//... get buffer from stdin\n\nlet re = Regex::new(r\"(capture something1) and (capture 2)\").unwrap();\nlet out = re.replace_all(&amp;buffer, |caps: &amp;Captures| {\n    if let ref = caps.at(2).unwrap().to_owned() {\n        refs.push(ref.to_owned());\n    }\n\n    caps.at(1).unwrap().to_owned();\n});\n</code></pre>\n\n<p>Unfortunately compilation fails with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/bin/remove_links.rs:16:18: 16:29 error: type mismatch resolving `for&lt;'r, 'r&gt; &lt;[closure@src/bin/remove_links.rs:16:39: 22:6] as std::ops::FnOnce&lt;(&amp;'r regex::Captures&lt;'r&gt;,)&gt;&gt;::Output == std::string::String`:\n  expected (),\n    found struct `std::string::String` [E0271]\nsrc/bin/remove_links.rs:16     let out = re.replace_all(&amp;buffer, |caps: &amp;Captures| {\n                                            ^~~~~~~~~~~\nsrc/bin/remove_links.rs:16:18: 16:29 help: run `rustc --explain E0271` to see a detailed explanation\nsrc/bin/remove_links.rs:16:18: 16:29 note: required because of the requirements on the impl of `regex::Replacer` for `[closure@src/bin/remove_links.rs:16:39: 22:6]`\n</code></pre>\n\n<p>I can't make sense of it. I've also tried adding <code>use regex::{Regex, Captures, Replacer}</code> but that doesn't change the error at all.</p>\n"}]