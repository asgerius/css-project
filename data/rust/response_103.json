[{"tags": ["rust", "ownership", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482963321, "post_id": 41370424, "comment_id": 69942600, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/33705664/155423\">stackoverflow.com/q/33705664/155423</a>; <a href=\"http://stackoverflow.com/q/27098694/155423\">stackoverflow.com/q/27098694/155423</a>; <a href=\"http://stackoverflow.com/q/33204273/155423\">stackoverflow.com/q/33204273/155423</a>; or <a href=\"http://stackoverflow.com/q/38776577/155423\">stackoverflow.com/q/38776577/155423</a>, take your pick."}, {"owner": {"reputation": 1169, "user_id": 5774900, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d4a1b9f8a05b6ae616757fbeec30566?s=128&d=identicon&r=PG", "display_name": "Martin Fink", "link": "https://stackoverflow.com/users/5774900/martin-fink"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482963653, "post_id": 41370424, "comment_id": 69942712, "body": "@Shepmaster the second one helped me! Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1482963831, "post_id": 41370424, "comment_id": 69942782, "body": "Great! I just added another answer to that one with a special case that is likely to be helpful to your exact situation."}], "owner": {"reputation": 1169, "user_id": 5774900, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1d4a1b9f8a05b6ae616757fbeec30566?s=128&d=identicon&r=PG", "display_name": "Martin Fink", "link": "https://stackoverflow.com/users/5774900/martin-fink"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 31, "favorite_count": 0, "closed_date": 1482963670, "answer_count": 0, "score": 1, "last_activity_date": 1482963215, "creation_date": 1482963136, "last_edit_date": 1482963215, "question_id": 41370424, "link": "https://stackoverflow.com/questions/41370424/take-member-ownership-of-borrowed-struct", "closed_reason": "Duplicate", "title": "Take member ownership of borrowed struct", "body": "<p>I have the following function:</p>\n\n<pre><code>pub fn finish_frame(&amp;mut self) {\n    if self.frame.is_none() {\n        return;\n    }\n\n    self.frame.unwrap().finish().unwrap();\n}\n</code></pre>\n\n<p>When I compile, the compiler gives me the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/engine/renderer.rs:65:9\n   |\n65 |         self.frame.unwrap().finish().unwrap();\n   |         ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p><code>self.frame</code> is a <code>Option</code> type, <code>finish(mut self)</code> takes ownership of <code>self</code>. Since <code>finish(mut self)</code> is a library function, I cannot change that.</p>\n\n<p>Any idea on how I could do this? Ideally without implementing a copy trait, which feels like a waste of memory and CPU time.</p>\n\n<p>I am a Rust newbie, so please forgive me if this is a stupid mistake.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5825, "user_id": 2400966, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/937a1ba2c0aa7d9e24fd92b99e26e1e8?s=128&d=identicon&r=PG", "display_name": "jbrown", "link": "https://stackoverflow.com/users/2400966/jbrown"}, "edited": false, "score": 0, "creation_date": 1482951007, "post_id": 41367094, "comment_id": 69937570, "body": "Hmm this code is in a function that returns <code>Vec&lt;String&gt;</code>. If I return <code>&amp;*data</code> I get an error <code>expected struct </code>std::vec::Vec<code>, found reference</code>. If I return <code>*data* I get an error </code>cannot move out of borrowed content<code>. Is that something else about the borrow checker? The way I&#39;ve resolved this is to return </code>data.clone()` but I was trying to make it more performant, but I think I the borrow checker might not allow that since I&#39;m creating the vector in the function. Maybe I phrased my question wrong, but how can I get a <code>Vec&lt;String&gt;</code> from <code>data</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5825, "user_id": 2400966, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/937a1ba2c0aa7d9e24fd92b99e26e1e8?s=128&d=identicon&r=PG", "display_name": "jbrown", "link": "https://stackoverflow.com/users/2400966/jbrown"}, "edited": false, "score": 1, "creation_date": 1482951717, "post_id": 41367094, "comment_id": 69937895, "body": "@jbrown Sounds like you are saying you want <code>let mut data = vec![1, 2, 3]; return data;</code>."}, {"owner": {"reputation": 5825, "user_id": 2400966, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/937a1ba2c0aa7d9e24fd92b99e26e1e8?s=128&d=identicon&r=PG", "display_name": "jbrown", "link": "https://stackoverflow.com/users/2400966/jbrown"}, "edited": false, "score": 0, "creation_date": 1482953127, "post_id": 41367094, "comment_id": 69938466, "body": "yes, that&#39;s what I was looking for. Thanks. I&#39;ll re-read the rust docs about mutability"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 37, "last_activity_date": 1482946899, "last_edit_date": 1495539946, "creation_date": 1482946899, "answer_id": 41367094, "question_id": 41366896, "link": "https://stackoverflow.com/questions/41366896/how-to-make-a-rust-mutable-reference-immutable/41367094#41367094", "title": "How to make a Rust mutable reference immutable?", "body": "<p>Dereference then re-reference the value:</p>\n\n<pre><code>fn main() {\n    let data = &amp;mut vec![1, 2, 3];\n    let x = &amp;*data;\n}\n</code></pre>\n\n<p>For what your code was doing, you should probably read <a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference in `mut` before a variable name and after the `:`?</a>. Your variable <code>data</code> is already immutable, but it contains a mutable reference. You cannot re-assign <code>data</code>, but you can change the pointed-to value.</p>\n\n<blockquote>\n  <p>How can I turn a mutable reference into an immutable binding?</p>\n</blockquote>\n\n<p>It already <em>is</em> an immutable binding, as you cannot change what <code>data</code> is.</p>\n"}], "owner": {"reputation": 5825, "user_id": 2400966, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/937a1ba2c0aa7d9e24fd92b99e26e1e8?s=128&d=identicon&r=PG", "display_name": "jbrown", "link": "https://stackoverflow.com/users/2400966/jbrown"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15939, "favorite_count": 5, "accepted_answer_id": 41367094, "answer_count": 1, "score": 30, "last_activity_date": 1482947038, "creation_date": 1482945954, "last_edit_date": 1482947038, "question_id": 41366896, "link": "https://stackoverflow.com/questions/41366896/how-to-make-a-rust-mutable-reference-immutable", "title": "How to make a Rust mutable reference immutable?", "body": "<p>I'm trying to convert a mutable vector to an immutable vector in Rust. I thought this would work but it doesn't:</p>\n\n<pre><code>let data = &amp;mut vec![];\nlet x = data;          // I thought x would now be an immutable reference\n</code></pre>\n\n<p>How can I turn a mutable reference into an immutable binding?</p>\n"}, {"tags": ["rust", "cross-compiling"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1482942702, "post_id": 41365712, "comment_id": 69933543, "body": "Have you tried debugging on the target? Stepping into the formatting code to check the pointer &amp; index could be very informative."}, {"owner": {"reputation": 553, "user_id": 4830306, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cIfRj.png?s=128&g=1", "display_name": "Nicolas Jean", "link": "https://stackoverflow.com/users/4830306/nicolas-jean"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1482946790, "post_id": 41365712, "comment_id": 69935505, "body": "I agree with you @MatthieuM. but I am new to rust and I don&#39;t know how I can do that. What can I use to debug the code on my target ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482947615, "post_id": 41365712, "comment_id": 69935904, "body": "Rust creates normal binaries, so use your normal debugging tools such as GDB or LLDB."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1482997872, "post_id": 41365712, "comment_id": 69952241, "body": "Alignment maybe? If the array starts on an odd address and it reads 16-bit values, the last address bit could be ignored on the read, i.e. it would read from the even address one lower."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1483000418, "post_id": 41365712, "comment_id": 69953347, "body": "Is that for the LEGO Mindstorms EV3?"}, {"owner": {"reputation": 553, "user_id": 4830306, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cIfRj.png?s=128&g=1", "display_name": "Nicolas Jean", "link": "https://stackoverflow.com/users/4830306/nicolas-jean"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1483029606, "post_id": 41365712, "comment_id": 69969511, "body": "You were right @starblue, I disassembled the code using <code>gdb</code> only to find out that the lookup table is at an odd address (0x2a057bc3 in my case), the code attempts to load two bytes at once at 0x2a057c17, which is the correct location in the lookup table, but uses an <code>LDRH</code> instruction to do so. in the <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka15414.html\" rel=\"nofollow noreferrer\">ARM spec</a> I can see that for ARM9, <code>LDRH</code> and <code>STRH</code> require the address to be 2-byte aligned."}, {"owner": {"reputation": 553, "user_id": 4830306, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cIfRj.png?s=128&g=1", "display_name": "Nicolas Jean", "link": "https://stackoverflow.com/users/4830306/nicolas-jean"}, "edited": false, "score": 0, "creation_date": 1483030458, "post_id": 41365712, "comment_id": 69969953, "body": "I think that I probably missed something when compiling rust. Maybe it is the configuration for LLVM ?"}], "answers": [{"tags": [], "owner": {"reputation": 553, "user_id": 4830306, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cIfRj.png?s=128&g=1", "display_name": "Nicolas Jean", "link": "https://stackoverflow.com/users/4830306/nicolas-jean"}, "is_accepted": true, "score": 5, "last_activity_date": 1483099870, "creation_date": 1483099870, "answer_id": 41396059, "question_id": 41365712, "link": "https://stackoverflow.com/questions/41365712/integers-are-formatted-incorrectly-when-cross-compiling-to-armv5te/41396059#41396059", "title": "Integers are formatted incorrectly when cross-compiling to armv5te", "body": "<p>I finally found a solution to this problem!<br>\nThe problem was that LLVM was not properly configured and was generating code performing unaligned accesses. To fix this, I added the <code>strict-align</code> feature flag in src/librustc_back/target/arm_unknown_linux_gnueabi.rs<br>\nHere is the final diff with all the modifications I had to do:  </p>\n\n<pre><code>diff --git a/mk/cfg/arm-unknown-linux-gnueabi.mk b/mk/cfg/arm-unknown-linux-gnueabi.mk\nindex f66ad04..b9e4157 100644\n--- a/mk/cfg/arm-unknown-linux-gnueabi.mk\n+++ b/mk/cfg/arm-unknown-linux-gnueabi.mk\n@@ -1,5 +1,5 @@\n # arm-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-\n+CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-unknown-linux-uclibcgnueabi-\n CC_arm-unknown-linux-gnueabi=gcc\n CXX_arm-unknown-linux-gnueabi=g++\n CPP_arm-unknown-linux-gnueabi=gcc -E\n@@ -8,8 +8,8 @@ CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n+CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -fno-stack-protector -march=armv5te -mtune=arm926ej-s\n+CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -fno-stack-protector -march=armv5te -mtune=arm926ej-s\n CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\ndiff --git a/src/librustc_back/target/arm_unknown_linux_gnueabi.rs b/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\nindex e666a84..551bba0 100644\n--- a/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\n+++ b/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\n@@ -24,7 +24,7 @@ pub fn target() -&gt; TargetResult {\n         target_vendor: \"unknown\".to_string(),\n\n         options: TargetOptions {\n-            features: \"+v6\".to_string(),\n+            features: \"+v5te,+strict-align\".to_string(),\n             .. base\n         },\n     })\n</code></pre>\n"}], "owner": {"reputation": 553, "user_id": 4830306, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cIfRj.png?s=128&g=1", "display_name": "Nicolas Jean", "link": "https://stackoverflow.com/users/4830306/nicolas-jean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 152, "favorite_count": 1, "accepted_answer_id": 41396059, "answer_count": 1, "score": 11, "last_activity_date": 1483099870, "creation_date": 1482941282, "last_edit_date": 1482943092, "question_id": 41365712, "link": "https://stackoverflow.com/questions/41365712/integers-are-formatted-incorrectly-when-cross-compiling-to-armv5te", "title": "Integers are formatted incorrectly when cross-compiling to armv5te", "body": "<p>When compiling the following program on my computer, it outputs the expected value:  </p>\n\n<pre><code>fn main() {\n    let number = 42;\n    println!(\"number is {}\", number);\n}\n</code></pre>\n\n<blockquote>\n  <p>number is 42</p>\n</blockquote>\n\n<p>When cross-compiled for armv5te and run on the target, it outputs the following result:  </p>\n\n<blockquote>\n  <p>number is 14</p>\n</blockquote>\n\n<p>I believe that the implementation of <code>Display</code> for <code>i32</code> is not working as expected. In particular, it seems that the characters printed are taken at the wrong index in the following array (found in <a href=\"https://github.com/rust-lang/rust/blob/2c6933acc/src/libcore/fmt/num.rs#L186-L191\" rel=\"noreferrer\">libcore/fmt/num.rs</a>):  </p>\n\n<pre><code>const DEC_DIGITS_LUT: &amp;'static[u8] =\n    b\"0001020304050607080910111213141516171819\\\n      2021222324252627282930313233343536373839\\\n      4041424344454647484950515253545556575859\\\n      6061626364656667686970717273747576777879\\\n      8081828384858687888990919293949596979899\";\n</code></pre>\n\n<p>The two digits displayed are taken on the table at an offset of 1 byte to the left compared with the right place. I verified this hypothesis by testing with some other numbers (10 -> 91, 11 -> 01 for instance).</p>\n\n<p>Other formats (<code>{:b}</code>, <code>{:o}</code>, <code>{:x}</code>) all give the expected result on my computer and on the target.</p>\n\n<hr>\n\n<p>I am using a self compiled version of Rust (1.13.0, 2c6933acc 2016-11-07) for the successful test on my computer and the unsuccessful one on my ARM device. Here is the diff of the modifications I had to do:  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>diff --git a/mk/cfg/arm-unknown-linux-gnueabi.mk b/mk/cfg/arm-unknown-linux-gnueabi.mk\nindex f66ad04..b9e4157 100644\n--- a/mk/cfg/arm-unknown-linux-gnueabi.mk\n+++ b/mk/cfg/arm-unknown-linux-gnueabi.mk\n@@ -1,5 +1,5 @@\n # arm-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-\n+CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-unknown-linux-uclibcgnueabi-\n CC_arm-unknown-linux-gnueabi=gcc\n CXX_arm-unknown-linux-gnueabi=g++\n CPP_arm-unknown-linux-gnueabi=gcc -E\n@@ -8,8 +8,8 @@ CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -Darm -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -Darm -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n+CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -Darm -mfloat-abi=soft $(CFLAGS) -fno-stack-protector -march=armv5te -mtune=arm926ej-s\n+CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -Darm -mfloat-abi=soft $(CFLAGS) -fno-stack-protector -march=armv5te -mtune=arm926ej-s\n CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\ndiff --git a/src/librustc_back/target/arm_unknown_linux_gnueabi.rs b/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\nindex e666a84..8af2596 100644\n--- a/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\n+++ b/src/librustc_back/target/arm_unknown_linux_gnueabi.rs\n@@ -24,7 +24,7 @@ pub fn target() -&gt; TargetResult {\n target_vendor: \"unknown\".to_string(),\n\n options: TargetOptions {\n-            features: \"+v6\".to_string(),\n+            features: \"+v5te\".to_string(),\n .. base\n },\n })\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 11, "last_activity_date": 1482928700, "last_edit_date": 1495535391, "creation_date": 1482928700, "answer_id": 41362344, "question_id": 41361897, "link": "https://stackoverflow.com/questions/41361897/documenting-a-function-created-with-a-macro-in-rust/41362344#41362344", "title": "Documenting a function created with a macro in Rust", "body": "<p>Your doc comment refers to the macro invocation, which is useless in your case. To document the generated functions you have to write the doc comment into the macro definition <em>or</em> change your macro to also accept doc comments. Let's take a look at this:</p>\n\n<pre><code>#![deny(missing_docs)]\n//! crate docs\n\nmacro_rules! gen_fn {\n    ($name:ident) =&gt; {\n        /// generic doc comment... not very useful\n        pub fn $name() {}\n    }\n}\n\ngen_fn!(a);\ngen_fn!(b);\n</code></pre>\n\n<p>This works, but it's not the best solution, because doc comments are the same for all generated functions. If you want to document each generated function, you <em>have</em> to change the macro:</p>\n\n<pre><code>macro_rules! gen_fn {\n    ($(#[$attr:meta])* =&gt; $name:ident) =&gt; {\n        $(#[$attr])*\n        pub fn $name() {}\n    }\n}\n\ngen_fn!{\n    /// Doc comment for a\n    =&gt; a\n}\n</code></pre>\n\n<p>This works, because doc comments are converted to the <code>#[doc(...)]</code> attribute internally. You can find more information about that <a href=\"https://stackoverflow.com/questions/33999341/generating-documentation-in-macros\">here</a>.</p>\n"}], "owner": {"reputation": 15070, "user_id": 388427, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/a43a07bc90818154ff9c8d4af7c23502?s=128&d=identicon&r=PG", "display_name": "Sergey", "link": "https://stackoverflow.com/users/388427/sergey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 959, "favorite_count": 0, "closed_date": 1482933238, "accepted_answer_id": 41362344, "answer_count": 1, "score": 5, "last_activity_date": 1482928700, "creation_date": 1482927094, "question_id": 41361897, "link": "https://stackoverflow.com/questions/41361897/documenting-a-function-created-with-a-macro-in-rust", "closed_reason": "Duplicate", "title": "Documenting a function created with a macro in Rust", "body": "<p>I tried to do</p>\n\n<pre><code>#![deny(missing_docs)]\n</code></pre>\n\n<p>in Rust. And I found that <code>///</code> comments are just ignored when a function is created with a macro like this:</p>\n\n<pre><code>/// docs\npy_module_initializer!(libx, initlibx PyInit_libx |py, m| {\n    Ok(())\n});\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>error: missing documentation for a function\n113 | py_module_initializer!(libx initlibx PyInit_libx |py, m| {\n    | ^\n</code></pre>\n\n<p>I thought a macro will just add a function definition after <code>///</code>. What is wrong here?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 1694, "user_id": 1000974, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af4d5b47cb2367fcb0c0a0895bfd21cd?s=128&d=identicon&r=PG", "display_name": "Daniel Worthington-Bodart", "link": "https://stackoverflow.com/users/1000974/daniel-worthington-bodart"}, "edited": false, "score": 0, "creation_date": 1482918640, "post_id": 41359031, "comment_id": 69920255, "body": "In fact you can also get rid of the second lifetime  &#39;a on value!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1694, "user_id": 1000974, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af4d5b47cb2367fcb0c0a0895bfd21cd?s=128&d=identicon&r=PG", "display_name": "Daniel Worthington-Bodart", "link": "https://stackoverflow.com/users/1000974/daniel-worthington-bodart"}, "edited": false, "score": 0, "creation_date": 1482918732, "post_id": 41359031, "comment_id": 69920305, "body": "@DanielWorthington-Bodart: Indeed, I had missed it."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 1, "last_activity_date": 1482918723, "last_edit_date": 1482918723, "creation_date": 1482917145, "answer_id": 41359031, "question_id": 41358835, "link": "https://stackoverflow.com/questions/41358835/why-does-one-non-consuming-builder-compile-while-another-does-not/41359031#41359031", "title": "Why does one non-consuming builder compile while another does not?", "body": "<p>You have an issue with your lifetimes: you are re-using the same lifetime (<code>'a</code>) for too many different things, so that when the compiler attempts to use a single lifetime for all those <code>'a</code> you get a confusing error message.</p>\n\n<p>The solution is simple: do not use <code>'a</code> everywhere you can put a lifetime, but only where it's necessary.</p>\n\n<p>It is unnecessary to use <code>&amp;'a mut self</code>, the instance (<code>self</code>) does not need to have the same lifetime as the <code>&amp;str</code> it contains! (and actually, cannot really):</p>\n\n<pre><code>impl&lt;'a&gt; Headers&lt;'a&gt; {\n    pub fn replace(&amp;mut self, name: &amp;'a str, value: &amp;str) -&gt; &amp;mut Headers&lt;'a&gt; {\n        self.0.retain(|&amp;(key, _)|!name.eq_ignore_ascii_case(key));\n        self.0.push((name, value.to_string()));\n        self\n    }\n}\n\nimpl&lt;'a&gt; Request&lt;'a&gt; {\n    pub fn header(&amp;mut self, name: &amp;'a str, value: &amp;str) -&gt; &amp;mut Request&lt;'a&gt; {\n        self.headers.replace(name, value);\n        self\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1694, "user_id": 1000974, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af4d5b47cb2367fcb0c0a0895bfd21cd?s=128&d=identicon&r=PG", "display_name": "Daniel Worthington-Bodart", "link": "https://stackoverflow.com/users/1000974/daniel-worthington-bodart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 41359031, "answer_count": 1, "score": 1, "last_activity_date": 1482933343, "creation_date": 1482916494, "last_edit_date": 1482933343, "question_id": 41358835, "link": "https://stackoverflow.com/questions/41358835/why-does-one-non-consuming-builder-compile-while-another-does-not", "title": "Why does one non-consuming builder compile while another does not?", "body": "<p>I read <a href=\"https://aturon.github.io/ownership/builders.html\" rel=\"nofollow noreferrer\">the builder pattern</a> and then tried to build 2 different builders (<code>Header</code> and <code>Request</code>) as follows:</p>\n\n<pre><code>use std::ascii::AsciiExt;\n\n#[derive(PartialEq, Debug)]\npub struct Headers&lt;'a&gt; (pub Vec&lt;(&amp;'a str, String)&gt;);\n\nimpl&lt;'a&gt; Headers&lt;'a&gt; {\n    pub fn replace(&amp;'a mut self, name: &amp;'a str, value:&amp;str) -&gt; &amp;mut Headers&lt;'a&gt; {\n        self.0.retain(|&amp;(key, _)|!name.eq_ignore_ascii_case(key));\n        self.0.push((name, value.to_string()));\n        self\n    }\n}\n\n#[derive(PartialEq, Debug)]\npub struct Request&lt;'a&gt; {\n    pub headers: Headers&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; Request&lt;'a&gt; {\n    pub fn header(&amp;'a mut self, name: &amp;'a str, value:&amp;'a str) -&gt; &amp;mut Request&lt;'a&gt; {\n        self.headers.replace(name, value);\n        self\n    }\n}\n</code></pre>\n\n<p>Why does <code>Header</code> compile fine but <code>Request</code> fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n   --&gt; src/api.rs:154:9\n    |\n153 |         self.headers.replace(name, value);\n    |         ------------ first mutable borrow occurs here\n154 |         self\n    |         ^^^^ second mutable borrow occurs here\n155 |     }\n    |     - first borrow ends here\n</code></pre>\n"}, {"tags": ["rust", "closures", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482894158, "post_id": 41354717, "comment_id": 69911446, "body": "Nothing special about a closure here. You cannot return a reference to a value that was allocated inside a function."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482894207, "post_id": 41354717, "comment_id": 69911460, "body": "You&#39;ll likely be interested in <a href=\"http://stackoverflow.com/q/27535289/155423\">stackoverflow.com/q/27535289/155423</a> or <a href=\"http://stackoverflow.com/q/27646925/155423\">stackoverflow.com/q/27646925/155423</a>."}], "owner": {"reputation": 1518, "user_id": 802500, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54cb6e5f1e23129af9e91ea9b31eaace?s=128&d=identicon&r=PG", "display_name": "Justin Blank", "link": "https://stackoverflow.com/users/802500/justin-blank"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 26, "favorite_count": 0, "closed_date": 1482894099, "answer_count": 0, "score": 0, "last_activity_date": 1482894055, "creation_date": 1482893364, "last_edit_date": 1482894055, "question_id": 41354717, "link": "https://stackoverflow.com/questions/41354717/specify-lifetime-of-a-returned-reference-to-a-closure", "closed_reason": "Duplicate", "title": "Specify lifetime of a returned reference to a closure", "body": "<p>Given this struct: </p>\n\n<pre><code>struct Token&lt;'a&gt; {\n     r: &amp;'a Regex,\n     f: &amp;'a Fn(String) -&gt; Symbol\n}\n</code></pre>\n\n<p>I can't figure out the right syntax to specify the closure lifetime when returning it from a fn: </p>\n\n<pre><code>fn get_tokens&lt;'a&gt;() -&gt; Vec&lt;Token&lt;'a&gt;&gt; {\n    static ref NUMBER: Regex = Regex::new(r\"$(\\d+|\\d*\\.\\d+)\").unwrap(); // TODO avoid \"000\"?\n    let num_token = Token{ r: &amp;*NUMBER, f: &amp;|s| Symbol::Number(s) };\n    let tokens = vec![num_token];\n\n    tokens\n}\n</code></pre>\n\n<p>Without a lifetime parameter, I get the error that the borrowed value doesn't life long enough: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n   --&gt; src\\syntax\\lex.rs:49:45\n   |\n49 |     let num_token = Token{ r: &amp;*NUMBER, f: &amp;|s| Symbol::Number(s) };\n   |                                             ^^^^^^^^^^^^^^^^^^^^^ temporary value created here\n...\n53 | }\n   | - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the block at 36:38...\n     --&gt; src\\syntax\\lex.rs:36:39\n   |\n36 | fn get_tokens&lt;'a&gt;() -&gt; Vec&lt;Token&lt;'a&gt;&gt; {\n   |                                       ^\n</code></pre>\n\n<p>And I can't find any examples that show specifying a lifetime parameter for a closure like this. </p>\n"}, {"tags": ["vector", "static", "rust"], "answers": [{"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 8, "last_activity_date": 1482877734, "creation_date": 1482877734, "answer_id": 41352972, "question_id": 41352852, "link": "https://stackoverflow.com/questions/41352852/is-it-possible-to-create-a-vector-with-references-to-lazy-static-values/41352972#41352972", "title": "Is it possible to create a vector with references to lazy-static values?", "body": "<p>Yes. lazy_static gives <code>X_PRIME</code> and <code>Y_PRIME</code> distinct types, but they both <a href=\"https://docs.rs/lazy_static/0.2.2/lazy_static/#semantic\" rel=\"noreferrer\">implement <code>Deref&lt;Regex&gt;</code></a>, so you could write:</p>\n\n<pre><code>let regexes = vec![&amp;*X_PRIME, &amp;*Y_PRIME];\n// The * dereferences the values to a `Regex` type\n// The &amp; turn them back into references `&amp;Regex`.\n</code></pre>\n\n<p>You could also just define another static:</p>\n\n<pre><code>lazy_static! {\n    static ref X_PRIME: Regex = Regex::new(r\"\\d+\").unwrap();\n    static ref Y_PRIME: Regex = Regex::new(r\"asdf\\d+\").unwrap();\n    static ref REGEXES: Vec&lt;&amp;'static Regex&gt; = vec![&amp;X_PRIME, &amp;Y_PRIME];\n}\n</code></pre>\n"}], "owner": {"reputation": 1518, "user_id": 802500, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/54cb6e5f1e23129af9e91ea9b31eaace?s=128&d=identicon&r=PG", "display_name": "Justin Blank", "link": "https://stackoverflow.com/users/802500/justin-blank"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 497, "favorite_count": 0, "accepted_answer_id": 41352972, "answer_count": 1, "score": 3, "last_activity_date": 1482880615, "creation_date": 1482876938, "last_edit_date": 1482880615, "question_id": 41352852, "link": "https://stackoverflow.com/questions/41352852/is-it-possible-to-create-a-vector-with-references-to-lazy-static-values", "title": "Is it possible to create a vector with references to lazy-static values?", "body": "<p>The following code compiles: </p>\n\n<pre><code>let x = Regex::new(r\"\\d+\").unwrap();\nlet y = Regex::new(r\"asdf\\d+\").unwrap();\nlet regexes = vec![x, y];\n</code></pre>\n\n<p>But this code does not: </p>\n\n<pre><code>lazy_static! {\n    static ref X_PRIME: Regex = Regex::new(r\"\\d+\").unwrap();\n    static ref Y_PRIME: Regex = Regex::new(r\"asdf\\d+\").unwrap();\n}\nlet regexes = vec![X_PRIME, Y_PRIME];\n</code></pre>\n\n<p>The error is: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src\\syntax\\lex.rs:19:33\n   |\n19 |     let regexes = vec![X_PRIME, Y_PRIME];\n   |                                 ^^^^^^^ expected struct `syntax::lex::lex::X_PRIME`, found struct `syntax::lex::lex::Y_PRIME`\n   |\n   = note: expected type `syntax::lex::lex::X_PRIME`\n   = note:    found type `syntax::lex::lex::Y_PRIME`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482880837, "post_id": 41352710, "comment_id": 69908814, "body": "There are <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+cannot+borrow+%60%2Aself%60+as+mutable+more+than+once+at+a+time+is%3Aq\"><b>13 other questions</b></a> with the exact same error message. Please <a href=\"https://stackoverflow.com/posts/41352710/edit\">edit</a> your question to explain why the work that went into all of those answers is insufficient to help you solve your problem. Otherwise, we will just repeat ourselves saying the same thing as those existing answers (or mark this as a duplicate) and you will get no new information."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482880944, "post_id": 41352710, "comment_id": 69908839, "body": "Please also check out how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. For example, I can guarantee that you don&#39;t need to create 10 cards or 3 players to reproduce the error. The smaller the code example, the easier it is to see the problem (both for us and for you)."}], "owner": {"reputation": 21, "user_id": 5817753, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/00c0294340a2a92a71105237548be47a?s=128&d=identicon&r=PG&f=1", "display_name": "mnm364", "link": "https://stackoverflow.com/users/5817753/mnm364"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 220, "favorite_count": 1, "answer_count": 0, "score": 2, "last_activity_date": 1482881007, "creation_date": 1482876030, "last_edit_date": 1482881007, "question_id": 41352710, "link": "https://stackoverflow.com/questions/41352710/nested-method-calls-with-mut-receivers-result-in-borrow-checker-errors", "title": "Nested method calls with &amp;mut receivers result in borrow checker errors", "body": "<p>I ran into an issue when dealing with nested method calls with <code>&amp;mut</code> receivers that result in borrow checker errors. Specifically, the <code>deal</code> function implemented for the <code>Table</code> struct. The <code>Table</code> has both <code>players: Vec&lt;Player&gt;</code> and a <code>deck: Vec&lt;Card&gt;</code>. During <code>deal</code>, I am attempting to <em>move</em> cards from the <code>Table</code>'s <code>deck</code> into <code>Players</code>s` hands.</p>\n\n<pre><code>struct Card {\n    value: u32,\n}\n\nstruct Player {\n    name: String,\n    hand: Vec&lt;Card&gt;,\n}\n\nstruct Table {\n    players: Vec&lt;Player&gt;,\n    deck: Vec&lt;Card&gt;,\n}\n\nimpl Card {\n    fn new(value: u32) -&gt; Card {\n        Card { value: value }\n    }\n}\n\nimpl Player {\n    fn new&lt;S&gt;(name: S) -&gt; Player where S: Into&lt;String&gt; {\n        Player { name: name.into(), hand: Vec::new() }\n    }\n}\n\nimpl Table {\n    fn new(players: Vec&lt;Player&gt;) -&gt; Table {\n        let deck = vec![\n            Card::new(0),\n            Card::new(1),\n            Card::new(2),\n            Card::new(3),\n            Card::new(4),\n            Card::new(5),\n            Card::new(6),\n            Card::new(7),\n            Card::new(8),\n            Card::new(9),\n        ];\n\n        Table { players: players, deck: deck }\n    }\n\n    fn deal(&amp;mut self) {\n        for player in &amp;mut self.players {\n            self.hit(player);\n            // Table::hit_b(player, &amp;mut self.deck);\n            // player.hand.push(self.deck.pop().unwrap());\n        }\n    }\n\n    fn hit(&amp;mut self, player: &amp;mut Player) {\n        player.hand.push(self.deck.pop().unwrap());\n    }\n\n    fn hit_b(player: &amp;mut Player, deck: &amp;mut Vec&lt;Card&gt;) {\n        player.hand.push(deck.pop().unwrap());\n    }\n\n}\n\nfn main() {\n    println!(\"Simplified Playing Card Implementation\");\n\n    // Initialization\n    let players = vec![\n        Player::new(\"Player 1\"),\n        Player::new(\"Player 2\"),\n        Player::new(\"Player 3\"),\n    ];\n\n    let mut table = Table::new(players);\n\n    // Action\n    table.deal();\n\n    // Print\n    for player in &amp;table.players {\n        print!(\"{}: \", player.name);\n        for card in &amp;player.hand {\n            print!(\"{} \", card.value);\n        }\n        println!(\"\");\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src/main.rs:47:4\n   |\n46 |            for player in &amp;mut self.players {\n   |                               ------------ first mutable borrow occurs here\n47 |                    self.hit(player);\n   |             ^^^^ second mutable borrow occurs here\n48 |                    // player.hand.push(self.deck.pop().unwrap());\n49 |            }\n   |            - first borrow ends here\n</code></pre>\n\n<p>I have implemented several different workarounds, namely direct in-lining and static functions, that are commented out in for the code in question. Of course, there are many other workarounds that I did not include for brevity's sake.</p>\n\n<p>Is there a idiomatic way to approach the problem of nested method calls with <code>&amp;mut</code> receivers? There might be a solution that deals with explicit lifetimes that I am not seeing, but I couldn't quite put a finger on it.</p>\n\n<p>I have also found some relevant issues:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rfcs/issues/811</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/6268\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/6268</a></li>\n</ul>\n\n<p>As an aside, would anyone be privy to whether this design pattern will be addressed in an upcoming Rust release, maybe related to the improvements seen with MIR?</p>\n"}, {"tags": ["polymorphism", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1482873746, "post_id": 41352258, "comment_id": 69906567, "body": "That&#39;s exciting! I didn&#39;t really understand that part of the book because I wasn&#39;t ready for it, but now I have some good context."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1560882595, "last_edit_date": 1560882595, "creation_date": 1482872941, "answer_id": 41352258, "question_id": 41352088, "link": "https://stackoverflow.com/questions/41352088/simple-organization-of-rust-traits-for-polymorphic-return/41352258#41352258", "title": "Simple organization of Rust traits for &quot;polymorphic&quot; return", "body": "<p>It appears you want an <em>associated type</em>:</p>\n\n<pre><code>pub trait Algorithm&lt;T&gt; {\n    type Output;\n\n    fn calculate_something(&amp;self) -&gt; Result&lt;Self::Output, Error&gt;;\n}\n\nimpl&lt;T&gt; Algorithm&lt;T&gt; for Sphere&lt;T&gt; {\n    type Output = Sphere&lt;T&gt;;\n\n    fn calculate_something(&amp;self) -&gt; Result&lt;Self::Output, Error&gt; {\n        unimplemented!()\n    }\n}\n\nimpl&lt;T&gt; Algorithm&lt;T&gt; for Hyperbola&lt;T&gt; {\n    type Output = Hyperbola&lt;T&gt;;\n\n    fn calculate_something(&amp;self) -&gt; Result&lt;Self::Output, Error&gt; {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>Associated types <a href=\"https://doc.rust-lang.org/stable/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"nofollow noreferrer\">are described in detail</a> in <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>. I <strong>highly recommend</strong> reading through the entire book to become acquainted with what types of features Rust has to offer.</p>\n\n<p>An alternate solution is to define another generic type on the trait:</p>\n\n<pre><code>pub trait Algorithm&lt;T, Out = Self&gt; {\n    fn calculate_something(&amp;self) -&gt; Result&lt;Out, Error&gt;;\n}\n\nimpl&lt;T&gt; Algorithm&lt;T&gt; for Sphere&lt;T&gt; {\n    fn calculate_something(&amp;self) -&gt; Result&lt;Sphere&lt;T&gt;, Error&gt; {\n        unimplemented!()\n    }\n}\n\nimpl&lt;T&gt; Algorithm&lt;T&gt; for Hyperbola&lt;T&gt; {\n    fn calculate_something(&amp;self) -&gt; Result&lt;Hyperbola&lt;T&gt;, Error&gt; {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>You then need to decide <a href=\"https://stackoverflow.com/q/32059370/155423\">When is it appropriate to use an associated type versus a generic type?</a></p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1959, "favorite_count": 1, "accepted_answer_id": 41352258, "answer_count": 1, "score": 4, "last_activity_date": 1560882595, "creation_date": 1482871980, "last_edit_date": 1482872593, "question_id": 41352088, "link": "https://stackoverflow.com/questions/41352088/simple-organization-of-rust-traits-for-polymorphic-return", "title": "Simple organization of Rust traits for &quot;polymorphic&quot; return", "body": "<p>I have a basic struct called <code>Frame</code> that is useful for a bunch of calculations:. </p>\n\n<pre><code>pub struct Frame&lt;T&gt; {\n    grid_val: Vec&lt;T&gt;,\n    grid_space: Vec&lt;[T; 2]&gt;,\n    calculated_result: Option&lt;Vec&lt;T&gt;&gt;\n}\n</code></pre>\n\n<p><code>Frame</code> can be used to describe most basic calculations, but sometimes there's more complicated issues that come up and I need to add some more geometric information. So I used composition for each geometry:</p>\n\n<pre><code>pub struct Sphere&lt;T&gt; {\n    grid: Frame&lt;T&gt;,\n    radius: T\n}\n\npub struct Hyperbola&lt;T&gt; {\n    top_grid: Frame&lt;T&gt;,\n    bottom_grid: Frame&lt;T&gt;,\n    internal_angle: T\n}\n</code></pre>\n\n<p>Now I have a working implementation of <code>Algorithm</code> for <code>Sphere</code>:</p>\n\n<pre><code>pub trait Algorithm&lt;T&gt; {\n    fn calculate_something(&amp;self) -&gt; Result&lt;Sphere&lt;T&gt;, Error&gt;\n}\n\nimpl Algorithm&lt;T&gt; for Hyperbola {\n    // do things with top_grid, bottom_grid, and internal_angle\n}\n\nimpl Algorithm&lt;T&gt; for Sphere {\n    // do things with grid and radius\n}\n</code></pre>\n\n<p>This fills in <code>calculated_result</code> and returns a new <code>Sphere</code>. It's implemented this way because <code>Algorithm</code> needs to use the extra geometric information to compute the <code>calculated_result</code> \u2014 semantically, it makes more sense for it to be an implementation on the geometry, whose result happens to be associated with one or more <code>Frame</code>s.</p>\n\n<p>I want to implement the same <code>Algorithm</code> for <code>Hyperbola</code>. In fact, it's very close to the same, and it makes sense for the trait to be the same, but it doesn't make sense for it to return a <code>Sphere&lt;T&gt;</code>.</p>\n\n<p>I know that I could add another trait like <code>GeometricObject</code> and add another layer of composition, but that seems excessive. I guess I could maybe use a <code>Box</code>, but that seems clumsy.</p>\n\n<p>I also thought of having <code>calculate_something</code> return a <code>Vec&lt;T&gt;</code> to be inserted manually into whichever struct is in use, but then the ergonomics of returning the same struct type the method is called on are ruined (which is a waste in a public impl/trait).</p>\n\n<p>How can I get this organized without making it traits all the way down?</p>\n"}, {"tags": ["struct", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1482891289, "last_edit_date": 1482891289, "creation_date": 1482890704, "answer_id": 41354432, "question_id": 41350816, "link": "https://stackoverflow.com/questions/41350816/lifetime-of-a-parser-struct-in-rust/41354432#41354432", "title": "Lifetime of a parser struct in Rust", "body": "<p>The full error message is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/main.rs:22:35\n   |\n22 |         self.source = Some(source.chars());\n   |                                   ^^^^^\n   |\nhelp: consider using an explicit lifetime parameter as shown: fn parse(&amp;mut self, source: &amp;'a str) -&gt; Result&lt;Resource, ParserError&gt;\n  --&gt; src/main.rs:21:5\n   |\n21 |     pub fn parse(&amp;mut self, source: &amp;str) -&gt; Result&lt;Resource, ParserError&gt; {\n   |     ^\n</code></pre>\n\n<p>Doing as it suggests:</p>\n\n<pre><code>pub fn parse(&amp;mut self, source: &amp;'a str) -&gt; Result&lt;Resource, ParserError&gt;\n</code></pre>\n\n<p>Allows the code to compile and run (after fixing the unrelated mismatched mutability in <code>main</code>).</p>\n\n<hr>\n\n<p>To understand the difference, you must first understand <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision</a>. </p>\n\n<p>Your original code was:</p>\n\n<pre><code>fn new(source: &amp;str) -&gt; Parser // with elision\nfn new&lt;'b&gt;(source: &amp;'b str) -&gt; Parser&lt;'b&gt; // without elision\n</code></pre>\n\n<p>In words, the generic lifetime parameter <code>'a</code> of the struct was tied to the lifetime of the incoming string.</p>\n\n<p>Your new code was more complicated:</p>\n\n<pre><code>fn new() -&gt; Parser&lt;'b&gt;\n\n// with elision\nfn parse(&amp;mut self, source: &amp;str) -&gt; Result&lt;Resource, ParserError&gt;\n// without elision\nfn parse&lt;'c, 'd&gt;(&amp;'c mut self, source: &amp;'d str) -&gt; Result&lt;Resource, ParserError&gt;\n</code></pre>\n\n<p>In words, the generic lifetime parameter <code>'a</code> of the struct is still defined by the caller of <code>new</code>, but now it's not tied to anything from the constructor. When calling <code>parse</code>, you were attempting to pass in a string of an unrelated lifetime and store a reference to it (through the <code>Chars</code> iterator). Since the two lifetimes were unrelated, you cannot be sure it will last long enough.</p>\n"}], "owner": {"reputation": 49, "user_id": 7331895, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0370182e9d675d34b7f1c9e8fb52e267?s=128&d=identicon&r=PG&f=1", "display_name": "zbraniecki", "link": "https://stackoverflow.com/users/7331895/zbraniecki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 192, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1482891289, "creation_date": 1482865688, "last_edit_date": 1482887986, "question_id": 41350816, "link": "https://stackoverflow.com/questions/41350816/lifetime-of-a-parser-struct-in-rust", "title": "Lifetime of a parser struct in Rust", "body": "<p>I'm trying to rewrite my parser to allow for strings to be passed into the parse method, instead of being bound to the struct.</p>\n\n<p>Previously, my code looked like this:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::str;\n\n#[derive(Debug)]\npub enum ParserError {\n    Generic\n}\n\npub struct Resource(\n    pub HashMap&lt;String, String&gt;\n);\n\npub struct Parser&lt;'a&gt; {\n    source: str::Chars&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; Parser&lt;'a&gt; {\n    pub fn new(source: &amp;str) -&gt; Parser {\n        Parser { source: source.chars() }\n    }\n    pub fn parse(&amp;mut self) -&gt; Result&lt;Resource, ParserError&gt; {\n        let entries = HashMap::new();\n        Ok(Resource(entries))\n    }\n}\n\nfn main() {\n    let parser = Parser::new(\"key1 = Value 1\");\n    let res = parser.parse();\n}\n</code></pre>\n\n<p>and in my new code I'm trying something like this:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::str;\n\n#[derive(Debug)]\npub enum ParserError {\n    Generic\n}\n\npub struct Resource(\n    pub HashMap&lt;String, String&gt;\n);\n\npub struct Parser&lt;'a&gt; {\n    source: Option&lt;str::Chars&lt;'a&gt;&gt;\n}\n\nimpl&lt;'a&gt; Parser&lt;'a&gt; {\n    pub fn new() -&gt; Parser&lt;'a&gt; {\n        Parser { source: None }\n    }\n    pub fn parse(&amp;mut self, source: &amp;str) -&gt; Result&lt;Resource, ParserError&gt; {\n        self.source = Some(source.chars());\n\n        let entries = HashMap::new();\n        Ok(Resource(entries))\n    }\n}\n\nfn main() {\n    let parser = Parser::new();\n    parser.parse(\"key1 = Value 1\");\n    parser.parse(\"key2 = Value 2\");\n}\n</code></pre>\n\n<p>but it seems like I'm messing with lifetimes in a way that I'm not fully comfortable with. The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; test.rs:22:35\n   |\n22 |         self.source = Some(source.chars());\n   |    \n</code></pre>\n\n<p>What's the canonical way of handling this? How can I take a <code>String</code> and clone it into the lifetime of the <code>Parser</code> struct?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482866792, "post_id": 41350786, "comment_id": 69903744, "body": "<code>index.entry(name).or_insert_with(|| HashSet::with_capacity(32)).insert(topic)</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user1563700"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482867144, "post_id": 41350786, "comment_id": 69903888, "body": "@Shepmaster that works just fine, thank you for that. You can delete the question it it is a duplicate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482867212, "post_id": 41350786, "comment_id": 69903916, "body": "No need to delete duplicates. Presumably you <i>searched</i> before asking this question but something prevented the highly-voted duplicate from showing up for you. Now this question will live on as a signpost for everyone else who used the same search query you did."}], "owner": {"user_type": "does_not_exist", "display_name": "user1563700"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 26, "favorite_count": 0, "closed_date": 1482866715, "answer_count": 0, "score": 1, "last_activity_date": 1482865587, "creation_date": 1482865587, "question_id": 41350786, "link": "https://stackoverflow.com/questions/41350786/idiom-to-get-or-create-mutable-collection-from-map-member-fields", "closed_reason": "Duplicate", "title": "Idiom to get or create mutable collection from map member fields", "body": "<p>I have a type with <code>HashMap</code> members which hold a <code>HashSet</code> as value. If the <code>HashMap</code> does not contain a given key, I need to create a new <code>HashSet</code> and add it to the map.</p>\n\n<p>Since I have multiple similar members in my type I want to create a single method to handle that.</p>\n\n<p>Sadly I always end up with multiple mutable borrows <code>add_to_index</code>.</p>\n\n<p>How can I solve this or is there a better idiom?</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::collections::HashSet;\n\nstruct TopicIndex {\n    all: HashSet&lt;String&gt;,\n    topicsByName: HashMap&lt;String, HashSet&lt;String&gt;&gt;,\n    rootsByName: HashMap&lt;String, HashSet&lt;String&gt;&gt;,\n    endsByName: HashMap&lt;String, HashSet&lt;String&gt;&gt;,\n}\n\nenum IndexType {\n    Roots,\n    ByName,\n    Ends,\n}\n\nimpl TopicIndex {\n    pub fn new() -&gt; Self {\n        TopicIndex {\n            all: HashSet::with_capacity(32),\n            topicsByName: HashMap::with_capacity(128),\n            rootsByName: HashMap::with_capacity(128),\n            endsByName: HashMap::with_capacity(128),\n        }\n    }\n\n    // [...]\n\n    fn add_to_index(&amp;mut self, name: String, topic: String, indexType: IndexType) {\n        let mut index = match indexType {\n            IndexType::ByName =&gt; &amp;mut self.topicsByName,\n            IndexType::Roots =&gt; &amp;mut self.rootsByName,\n            IndexType::Ends =&gt; &amp;mut self.endsByName,\n        };\n        // first mutable borrow occurs here\n        let mut setOpt = index.get_mut(&amp;name);\n        if setOpt.is_some() {\n            setOpt.unwrap().insert(topic);\n        } else {\n            let mut set = HashSet::with_capacity(32);\n            set.insert(topic);\n            // second mutable borrow occurs here\n            index.insert(name, set);\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 1, "creation_date": 1486562199, "post_id": 41346691, "comment_id": 71398667, "body": "Too bad that the const functions are so limited even on nightly. Basically only tail recursion."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 2, "creation_date": 1486562627, "post_id": 41346691, "comment_id": 71399000, "body": "@AleksanderFular: There is work ongoing on a very capable constant evaluator called <a href=\"https://github.com/solson/miri\" rel=\"nofollow noreferrer\">miri</a> (aka, MIR interpreter). For now, the Rust community is mostly content to &quot;wait it out&quot; and watch solson and oli-obk experiment and see what&#39;s possible, what&#39;s not, what&#39;s too costly, what are the pitfalls, etc... note that MIRI is significantly more advanced than C++&#39;s constexpr: it handles memory allocations!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 3, "creation_date": 1518962044, "post_id": 41346691, "comment_id": 84708169, "body": "@AleksanderFular: Since I was passing by... the <a href=\"https://github.com/solson/miri\" rel=\"nofollow noreferrer\">MIRI</a> project, an interpreter for MIR the Mid-level Intermediate Representation used by rustc, has landed in rustc, and already 1.24 has stabilized a handful of functions as <code>const</code> such as <code>mem::size_of</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 18, "last_activity_date": 1576505576, "last_edit_date": 1576505576, "creation_date": 1482847638, "answer_id": 41346691, "question_id": 41346532, "link": "https://stackoverflow.com/questions/41346532/equivalent-of-constexpr-from-c/41346691#41346691", "title": "Equivalent of constexpr from C++?", "body": "<p><code>constexpr</code> in C++ can be used in 2 different situations:</p>\n\n<ul>\n<li>to qualify a constant, and denote that this constant must be available at compile-time</li>\n<li>to qualify a function, and denote that this function must be available for compile-time evaluation</li>\n</ul>\n\n<p>Rust supports both, albeit in a limited fashion:</p>\n\n<ul>\n<li>you can use <code>const</code> to declare a constant, instead of <code>let</code>, to declare that it is truly constant</li>\n<li>you can use <code>const</code> to qualify a function, to declare that it can be evaluated at compile-time. <a href=\"https://github.com/rust-lang/rust/issues/57563\" rel=\"nofollow noreferrer\">Not all functions can be made <code>const</code> yet</a>.</li>\n</ul>\n\n<p>In your situation, you want the first usage:</p>\n\n<pre><code>fn main() {\n    const something_const: i32 = 42;\n\n    fn multiply(nbr: i32) -&gt; i32 {\n        nbr * something_const\n    }\n\n    println!(\"{}\", multiply(1));\n}\n</code></pre>\n\n<p>Note that unlike with <code>let</code>, it is mandatory to annotate the constant with its type.</p>\n\n<p>Also, the compiler will complain about the naming; constants use <code>ALL_CAPS</code>.</p>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5517, "favorite_count": 1, "accepted_answer_id": 41346691, "answer_count": 1, "score": 16, "last_activity_date": 1576505576, "creation_date": 1482847021, "question_id": 41346532, "link": "https://stackoverflow.com/questions/41346532/equivalent-of-constexpr-from-c", "title": "Equivalent of constexpr from C++?", "body": "<p>See this code:</p>\n\n<pre><code>fn main() {\n    let something_const = 42;\n    fn multiply(nbr: i32) -&gt; i32 {\n        nbr * something_const\n    }\n    println!(\"{}\", multiply(1));\n}\n</code></pre>\n\n<p><code>rustc</code> outputs that</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0434]: can't capture dynamic environment in a fn item; use the || { ... } closure form instead\n  --&gt; main.rs:19:15\n   |\n19 |         nbr * something_const\n   |               ^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>But <code>something_const</code> is not dynamic, because it is known at compile time.</p>\n\n<p>Is it an equivalent in Rust of the C++ <code>constexpr</code> mechanism?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1482840615, "creation_date": 1482840615, "answer_id": 41344945, "question_id": 41343615, "link": "https://stackoverflow.com/questions/41343615/replace-type-with-wrappertype/41344945#41344945", "title": "Replace &amp;Type with &amp;Wrapper&lt;Type&gt;", "body": "<p>You don't need any conversions; you can achieve this in the following manner:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Wrapper(i32);\n\nlet num = 123; // the value\nlet x = &amp;num; // the reference to the value\nlet wrapped: Wrapper = Wrapper(*x); // now you can refer to &amp;wrapped\n\nprintln!(\"{:?}\", wrapped);\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 4, "creation_date": 1482845930, "post_id": 41344965, "comment_id": 69894217, "body": "The question is, when is the function <code>wrap</code> sound and under what conditions? We don&#39;t have any documented guarantee."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1482853352, "post_id": 41344965, "comment_id": 69897737, "body": "@bluss I added more information on that issue. It seems like it&#39;s really unsafe and it shouldn&#39;t be used, thus I removed the exact code, too. I&#39;m sorry for offering <code>unsafe</code> solutions in my SO answers. I usually don&#39;t do that, but I wrote this answer like 10 minutes after waking up ^_^"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1482927046, "post_id": 41344965, "comment_id": 69924822, "body": "@bluss I think I have made some assumptions about memory layout in a few applications, (e.g. <code>transmute((u32, u32)) :: u64</code> which makes an unsafe assumption about the layout of <code>(,)</code>). Is there a tracking issue for how this sort of thing (enforcing layout guarantees) will be solved in a future Rust?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1482978332, "post_id": 41344965, "comment_id": 69946400, "body": "first of all, absolutely don&#39;t do that, you have a perfectly fine type in <code>[u32; 2]</code> that you can use for a pair of u32 laid out without padding."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1482853283, "last_edit_date": 1482853283, "creation_date": 1482840690, "answer_id": 41344965, "question_id": 41343615, "link": "https://stackoverflow.com/questions/41343615/replace-type-with-wrappertype/41344965#41344965", "title": "Replace &amp;Type with &amp;Wrapper&lt;Type&gt;", "body": "<p>It's easy to make your example code work:</p>\n\n<pre><code>let wrapped: &amp;Wrapper&lt;i32&gt; = &amp;Wrapper(*x);    // type annotation optional\n</code></pre>\n\n<p>Coming from C++, you might think this is crazily unsafe, because we take a reference to a temporary (the expression on the left hand side). But in situations like this, Rust just saves the result of this temporary expression on the stack. The above code is equivalent to:</p>\n\n<pre><code>let hidden = Wrapper(*x);\nlet wrapped: &amp;Wrapper = &amp;hidden;\n</code></pre>\n\n<p>So far so good, but a problem arises when we want to return this reference. For example:</p>\n\n<pre><code>fn wrap&lt;T&gt;(t: &amp;T) -&gt; &amp;Wrapped&lt;T&gt; {\n    &amp;Wrapped(*t)\n}\n</code></pre>\n\n<p>We have two problems here. First, we can't move out of <code>t</code> (it's only borrowed; it only worked in the code above because <code>i32</code> is <code>Copy</code>) and second, we can't return a reference to a local variable (the <code>hidden</code> one that is created for us).</p>\n\n<hr>\n\n<p>To solve this, you could use the <code>unsafe</code> function <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>std::mem::transmute()</code></a>. This just interprets any type as another any other type.</p>\n\n<p>But wait! <code>unsafe {}</code> means \"compiler, trust me on this!\", but should we trust ourselves? We as a programmer would have to guarantee that <code>Wrapped&lt;T&gt;</code> and <code>T</code> have the exact same data layout. So: is that the case? </p>\n\n<p>It's probably true on most platforms, but I very much doubt we can guarantee this! Rust doesn't seem to promise a lot when it comes to data layout of structs (and unit structs). It may reorder fields (not important in this case) and may add padding. There is more information on this in the <a href=\"https://doc.rust-lang.org/nomicon/repr-rust.html\" rel=\"nofollow noreferrer\">repr(Rust) chapter of the Rustonomicon</a>. </p>\n\n<hr>\n\n<p><strong>To summarize</strong>: a function like <code>wrap()</code> <em>can't</em> be safely implemented. As a consequence, APIs containing functions like that should be avoided. </p>\n"}], "owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 1, "accepted_answer_id": 41344965, "answer_count": 2, "score": 2, "last_activity_date": 1482924903, "creation_date": 1482835403, "last_edit_date": 1482924903, "question_id": 41343615, "link": "https://stackoverflow.com/questions/41343615/replace-type-with-wrappertype", "title": "Replace &amp;Type with &amp;Wrapper&lt;Type&gt;", "body": "<p>I have a reference to a value and I would like to replace it with a reference to a <em>wrapper</em> struct wrapping the value.</p>\n\n<p>Example:</p>\n\n\n\n<pre><code>struct Wrapper&lt;T&gt;(T);\n\nlet num = 123;\nlet x: &amp;i32 = &amp;num;\nlet wrapped: &amp;Wrapper&lt;i32&gt; = .. // some conversion\n</code></pre>\n\n<p>Is this possible? (a <em>safe</em> solution is preferred, but not necessary.)</p>\n"}, {"tags": ["file", "io", "rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1482855564, "post_id": 41337053, "comment_id": 69898762, "body": "Why don&#39;t you mmap it? cf. <a href=\"https://crates.io/crates/memmap\" rel=\"nofollow noreferrer\">crates.io/crates/memmap</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "edited": false, "score": 0, "creation_date": 1482879680, "post_id": 41337167, "comment_id": 69908421, "body": "Whoa, as slow as that is, it works. Thanks!"}, {"owner": {"reputation": 190, "user_id": 3227066, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a885ebbb3d3abfc36436b95ee3d6d4bc?s=128&d=identicon&r=PG&f=1", "display_name": "Vladimir", "link": "https://stackoverflow.com/users/3227066/vladimir"}, "reply_to_user": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "edited": false, "score": 0, "creation_date": 1482966684, "post_id": 41337167, "comment_id": 69943685, "body": "@wateriswet It&#39;s not supposed to be any slower than the array version (except for the time it takes to reserve the space on the heap, which should be dwarfed by the actual reading). How are you measuring the time? Are you compiling with optimizations turned on?"}], "tags": [], "owner": {"reputation": 190, "user_id": 3227066, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a885ebbb3d3abfc36436b95ee3d6d4bc?s=128&d=identicon&r=PG&f=1", "display_name": "Vladimir", "link": "https://stackoverflow.com/users/3227066/vladimir"}, "is_accepted": true, "score": 3, "last_activity_date": 1482793973, "creation_date": 1482793973, "answer_id": 41337167, "question_id": 41337053, "link": "https://stackoverflow.com/questions/41337053/reading-file-into-a-boxed-slice/41337167#41337167", "title": "Reading file into a boxed slice", "body": "<p>A boxed array can still temporarily stack-allocate the array before moving it to the heap (especially in non-optimized builds). To ensure heap allocation from onset, use a vector instead:</p>\n\n<pre><code>let mut temp_buffer = vec![0u8; 430467210];\nmove_file.read(&amp;mut temp_buffer);\n</code></pre>\n"}], "owner": {"reputation": 4156, "user_id": 3072896, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/WWVXA.png?s=128&g=1", "display_name": "Joe Thomas", "link": "https://stackoverflow.com/users/3072896/joe-thomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "closed_date": 1482807521, "accepted_answer_id": 41337167, "answer_count": 1, "score": 1, "last_activity_date": 1482807503, "creation_date": 1482792667, "last_edit_date": 1482807503, "question_id": 41337053, "link": "https://stackoverflow.com/questions/41337053/reading-file-into-a-boxed-slice", "closed_reason": "Duplicate", "title": "Reading file into a boxed slice", "body": "<p>I have some analyses to do in Rust. As such, I have a rather large lookup table that creates a multidimensional array requiring 430,467,210 bytes. I've tried many times to load this into Rust, but I keep getting stack overflows. Recently I learned about heap allocation using <code>Box</code> and have tried to read my file into the boxed slice. It still does not work:</p>\n\n<pre><code>let mut temp_buffer = Box::new([0u8; 430467210]);\nmove_file.read(&amp;mut *temp_buffer);\n</code></pre>\n"}, {"tags": ["rust", "traits", "lifetime", "borrowing"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1482805860, "post_id": 41337021, "comment_id": 69879365, "body": "I&#39;m still trying to work this out. But I <i>did</i> find that you can use <code>iter()</code> instead of <code>into_iter()</code> and it will work."}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1482807499, "post_id": 41338450, "comment_id": 69879690, "body": "@Shepmaster Finally! :P"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482807563, "post_id": 41338450, "comment_id": 69879700, "body": "Also, please feel free to post yours too or edit mine. I&#39;m not entirely happy with my explanation - partly because I&#39;m not sure if I understand it myself 100%."}, {"owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "edited": false, "score": 0, "creation_date": 1482859538, "post_id": 41338450, "comment_id": 69900598, "body": "Thanks for the answer! However, without some (probably serious) redesign in my application, I need the two lifetimes to be the same. I worked around this problem by copying the implementation of the <code>use_alpha</code> function into the call site. Hopefully I&#39;ll come up with something better."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 4, "last_activity_date": 1482807350, "creation_date": 1482807350, "answer_id": 41338450, "question_id": 41337021, "link": "https://stackoverflow.com/questions/41337021/lifetime-error-using-associated-type-of-trait-with-lifetime-parameter/41338450#41338450", "title": "Lifetime error using associated type of trait with lifetime parameter", "body": "<p>In <code>use_alpha</code>, you have used the same lifetime for the reference to <code>Alpha</code> and its lifetime parameter. Its lifetime parameter then becomes the lifetime of <code>Impl</code>'s <code>Trait::T</code>. The note gives a hint about the order that values are dropped: <code>Impl::T</code> gets dropped before <code>Impl</code> because it's part of <code>Impl</code>'s definition, but that means that some parts of <code>Alpha</code> have already been dropped while it is still around.</p>\n\n<p>You can fix this by using two lifetimes parameters in <code>use_alpha</code>:</p>\n\n<pre><code>fn use_alpha&lt;'a, 'b&gt;(_: &amp;'a Alpha&lt;'b, Impl&gt;) {}\n</code></pre>\n\n<p>This will allow the compiler to infer different lifetimes for each of the types.</p>\n"}], "owner": {"reputation": 2584, "user_id": 1094609, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2f03a85e1167ccb340e3d1cb2da67995?s=128&d=identicon&r=PG", "display_name": "Craig M. Brandenburg", "link": "https://stackoverflow.com/users/1094609/craig-m-brandenburg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 286, "favorite_count": 0, "accepted_answer_id": 41338450, "answer_count": 1, "score": 7, "last_activity_date": 1545613466, "creation_date": 1482792361, "last_edit_date": 1545613466, "question_id": 41337021, "link": "https://stackoverflow.com/questions/41337021/lifetime-error-using-associated-type-of-trait-with-lifetime-parameter", "title": "Lifetime error using associated type of trait with lifetime parameter", "body": "<p>I'm getting a lifetime error with Rust 1.14 due to using an associated type, demonstrated by the following two similar programs, the first which compiles without error and the second which has the lifetime error.</p>\n\n<p><strong>Program #1 \u2014 compiles without error</strong></p>\n\n<pre><code>trait Trait&lt;'a&gt; {\n    type T;\n}\n\nstruct Impl;\n\nimpl&lt;'a&gt; Trait&lt;'a&gt; for Impl {\n    type T = std::marker::PhantomData&lt;&amp;'a ()&gt;;\n}\n\nstruct Alpha&lt;'a, T: Trait&lt;'a&gt;&gt; {\n    _dummy: std::marker::PhantomData&lt;(&amp;'a (), T)&gt;,\n}\n\nfn use_alpha&lt;'a&gt;(_: &amp;'a Alpha&lt;'a, Impl&gt;) {}\n\nfn main() {\n    for x in Vec::&lt;Alpha&lt;Impl&gt;&gt;::new().into_iter() {\n        use_alpha(&amp;x); // &lt;-- ok\n    }\n}\n</code></pre>\n\n<p><strong>Program #2 \u2014 has the lifetime error</strong></p>\n\n<pre><code>trait Trait&lt;'a&gt; {\n    type T;\n}\n\nstruct Impl;\n\nimpl&lt;'a&gt; Trait&lt;'a&gt; for Impl {\n    type T = std::marker::PhantomData&lt;&amp;'a ()&gt;;\n}\n\nstruct Alpha&lt;'a, T: Trait&lt;'a&gt;&gt; {\n    _dummy: std::marker::PhantomData&lt;(&amp;'a (), T::T)&gt;,\n}\n\nfn use_alpha&lt;'a&gt;(_: &amp;'a Alpha&lt;'a, Impl&gt;) {}\n\nfn main() {\n    for x in Vec::&lt;Alpha&lt;Impl&gt;&gt;::new().into_iter() {\n        use_alpha(&amp;x); // &lt;-- !error!\n    }\n}\n</code></pre>\n\n<p>Here's the compile-time error for the second program:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `x` does not live long enough\n  --&gt; src/main.rs:20:5\n   |\n19 |         use_alpha(&amp;x); // &lt;-- !error!\n   |                    - borrow occurs here\n20 |     }\n   |     ^ `x` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Here's the diff for the two programs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> #[derive(Clone)]\n struct Alpha&lt;'a, T: Trait&lt;'a&gt;&gt; {\n-    _dummy: std::marker::PhantomData&lt;(&amp;'a (), T)&gt;,\n+    _dummy: std::marker::PhantomData&lt;(&amp;'a (), T::T)&gt;,\n }\n</code></pre>\n\n<p>The only difference is that by changing the first program to use an associated type instead of the type parameter in the <code>struct</code> definition, a lifetime error occurs. I have no idea why this happens. As far as I can tell, the associated type should not incur any additional lifetime restrictions\u2014it's all just <code>'a</code>, but clearly the Rust compiler disagrees.</p>\n\n<p>If I replace iteration in the second program's <code>main</code> function with simple instantiation, then the lifetime error goes away. That is:</p>\n\n<pre><code>fn main() {\n    let x = Alpha::&lt;Impl&gt; { _dummy: std::marker::PhantomData };\n    use_alpha(&amp;x); // &lt;-- ok in both programs\n}\n</code></pre>\n\n<p>I don't understand why iteration is any different than direct instantiation.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482765353, "post_id": 41332048, "comment_id": 69868863, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>."}], "answers": [{"comments": [{"owner": {"reputation": 3397, "user_id": 1255016, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c20883abe67a3a886c4955a515273b53?s=128&d=identicon&r=PG", "display_name": "hfhc2", "link": "https://stackoverflow.com/users/1255016/hfhc2"}, "edited": false, "score": 0, "creation_date": 1482767848, "post_id": 41333230, "comment_id": 69869658, "body": "Thanks for your answer, I edited the question in order to clarify things."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1500556658, "last_edit_date": 1500556658, "creation_date": 1482765891, "answer_id": 41333230, "question_id": 41332048, "link": "https://stackoverflow.com/questions/41332048/how-do-i-solve-the-error-the-precise-format-of-fn-family-traits-type-paramet/41333230#41333230", "title": "How do I solve the error &quot;the precise format of `Fn`-family traits&#39; type parameters is subject to change&quot;?", "body": "<p>The direct answer is to do exactly as the error message says:</p>\n\n<blockquote>\n  <p>Use parenthetical notation instead</p>\n</blockquote>\n\n<p>That is, instead of <code>Fn&lt;(A, B)&gt;</code>, use <code>Fn(A, B)</code></p>\n\n<p>The <em>real problem</em> is that you are <a href=\"https://stackoverflow.com/q/38672235/155423\">not allowed to implement the <code>Fn*</code> family of traits yourself in stable Rust</a>.</p>\n\n<p>The <em>real question</em> you are asking is harder to be sure of because you haven't provided a <a href=\"/help/mcve\">MCVE</a>, so we are reduced to guessing. I'd say you should flip it around the other way; create a new trait, implement it for closures and your type:</p>\n\n<pre><code>trait Solve {\n    type Output;\n    fn solve(&amp;mut self) -&gt; Self::Output;\n}\n\nimpl&lt;F, T&gt; Solve for F\nwhere\n    F: FnMut() -&gt; T,\n{\n    type Output = T;\n\n    fn solve(&amp;mut self) -&gt; Self::Output {\n        (self)()\n    }\n}\n\nstruct Test;\nimpl Solve for Test {\n    // interesting things\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 3397, "user_id": 1255016, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c20883abe67a3a886c4955a515273b53?s=128&d=identicon&r=PG", "display_name": "hfhc2", "link": "https://stackoverflow.com/users/1255016/hfhc2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 632, "favorite_count": 2, "accepted_answer_id": 41333230, "answer_count": 1, "score": 5, "last_activity_date": 1500556658, "creation_date": 1482759082, "last_edit_date": 1482768169, "question_id": 41332048, "link": "https://stackoverflow.com/questions/41332048/how-do-i-solve-the-error-the-precise-format-of-fn-family-traits-type-paramet", "title": "How do I solve the error &quot;the precise format of `Fn`-family traits&#39; type parameters is subject to change&quot;?", "body": "<p>I have written a problem solver in Rust which as a subroutine needs to make calls to a function which is given as a black box (essentially I would like to give an argument of type <code>Fn(f64) -&gt; f64</code>).</p>\n\n<p>Essentially I have a function defined as <code>fn solve&lt;F&gt;(f: F) where F : Fn(f64) -&gt; f64 { ... }</code> which means that I can call <code>solve</code> like this:\n<code>solve(|x| x);</code></p>\n\n<p>What I would like to do is to pass a more complex function to the solver, i.e. a function which depends on multiple parameters etc. </p>\n\n<p>I would like to be able to pass a struct with a suitable trait implementation to the solver. I tried the following:</p>\n\n<pre><code>struct Test;\nimpl Fn&lt;(f64,)&gt; for Test {}\n</code></pre>\n\n<p>This yield the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the precise format of `Fn`-family traits' type parameters is subject to change. Use parenthetical notation (Fn(Foo, Bar) -&gt; Baz) instead (see issue #29625)\n</code></pre>\n\n<p>I would also like to add a trait which includes the <code>Fn</code> trait (which I don't know how to define, unfortunately). Is that possible as well?</p>\n\n<p>Edit:\nJust to clarify: I have been developing in C++ for quite a while, the C++ solution would be to overload the <code>operator()(args)</code>. In that case I could use a <code>struct</code> or <code>class</code> like a function. I would like to be able to</p>\n\n<ol>\n<li>Pass both functions and structs to the solver as arguments.</li>\n<li>Have an easy way to call the functions. Calling <code>obj.method(args)</code> is more complicated than <code>obj(args)</code> (in C++). But it seems that this behavior is not achievable currently.</li>\n</ol>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": false, "score": 2, "last_activity_date": 1482757435, "creation_date": 1482757435, "answer_id": 41331727, "question_id": 41331577, "link": "https://stackoverflow.com/questions/41331577/joining-a-thread-in-a-method-that-takes-mut-self-like-drop-results-in-cann/41331727#41331727", "title": "Joining a thread in a method that takes `&amp;mut self` (like drop) results in &quot;cannot move out of borrowed content&quot;", "body": "<p>The problem in <code>join</code> signature:</p>\n\n<pre><code>fn join(self) -&gt; Result&lt;T&gt;\n</code></pre>\n\n<p>so to fix your code, you need something like:</p>\n\n<pre><code>pub fn stop(self) {\n    self.handle.join();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1482879357, "post_id": 41331922, "comment_id": 69908326, "body": "Nice answer; this pattern of <code>Option</code> usage sometimes feels like one of Rust&#39;s best kept secrets."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1489507919, "post_id": 41331922, "comment_id": 72696604, "body": "Note: <code>join</code> returns a <code>Result</code>, it&#39;s bad to ignore results in general. At the very least, I recommend an <code>expect</code> in there to assert everything was OK. Or maybe printing the message carried by the error... at the same time, I&#39;d recommend NOT to <code>join</code> in a destructor to start with. Having a potential infinite <i>wait</i> in a destructor is a bad idea, it breaks unwinding."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489512248, "post_id": 41331922, "comment_id": 72699722, "body": "@MatthieuM. thanks for the hint. My answer now refers to yours and &quot;handles&quot; the <code>Result</code>."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1604490887, "post_id": 41331922, "comment_id": 114361645, "body": "The problem here is only cured symptomatically by using <code>Option</code> and <code>take()</code> which returns an owned instance. In case you have a reference to a <code>JoinHandle</code>, you will never be able to call <code>join</code> on it, no matter what you do and how: there is simply no way in Rust to make a reference become an self-owned object so that you may call methods with owned self like <code>JoinHandle::join()</code>. This is actually a problem I have and there is simply no way to even work around it. I simply don&#39;t want to have another Option for my join handle, as I already have one in the layer above, this is just ridiculous."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 11, "last_activity_date": 1489512161, "last_edit_date": 1495540430, "creation_date": 1482758420, "answer_id": 41331922, "question_id": 41331577, "link": "https://stackoverflow.com/questions/41331577/joining-a-thread-in-a-method-that-takes-mut-self-like-drop-results-in-cann/41331922#41331922", "title": "Joining a thread in a method that takes `&amp;mut self` (like drop) results in &quot;cannot move out of borrowed content&quot;", "body": "<p>The function signature of <a href=\"https://doc.rust-lang.org/std/thread/struct.JoinHandle.html#method.join\" rel=\"noreferrer\"><code>JoinHandle::join</code></a> is:</p>\n\n<pre><code>fn join(self) -&gt; Result&lt;T&gt;\n</code></pre>\n\n<p>This means that the method takes <code>self</code> (the receiver object) by values (taking the ownership/consuming it). But you only have a borrow to your <code>JoinHandle</code>; a mutable one, but still merely a borrow, <strong>not</strong> the ownership. Thus you can't call this method, because you can't move the ownership out of your borrow into this <code>join()</code> method. </p>\n\n<p>An easy way to fix that, is by accepting <code>self</code> by value in the <code>stop()</code> method, too:</p>\n\n<pre><code>pub fn stop(self) {\n    self.handle.join();\n}\n</code></pre>\n\n<hr>\n\n<p>But you will notice that this isn't possible when implementing <code>Drop</code>, because <code>drop()</code> has the signature <code>fn drop(&amp;mut self)</code>! Bummer! But there is a little trick you can use, described below. Please be aware that joining threads in <code>drop()</code> is probably not a good idea! Read <a href=\"https://stackoverflow.com/a/42791007/2408867\">Matthieu M.'s answer</a> for more information on that!</p>\n\n<p>If you still think, for whatever reason, that you really want to join a thread in <code>drop()</code>, you can store the <code>JoinHandle</code> in an <code>Option&lt;T&gt;</code> to save whether or not it's already joined. If you have a <code>Some(T)</code> you can obtain a <code>T</code> (by value!) from it by using the method <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.take\" rel=\"noreferrer\"><code>Option::take()</code></a>. Then you can write:</p>\n\n<pre><code>fn drop(&amp;mut self) {\n    // `self.handle` has the type `Option&lt;JoinHandle&lt;()&gt;&gt;` here!\n    if let Some(handle) = self.handle.take() {\n        handle.join().expect(\"failed to join thread\");\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 0, "creation_date": 1563369431, "post_id": 42791007, "comment_id": 100676822, "body": "doesnt this solution cause explicit panic at all times? drop will be invoked at the end of your &#39;join&#39; method.  Additionally your code does not compile with an error:   <code>error[E0509]: cannot move out of type `Foo`, which implements the `Drop` trait  --&gt; src&#47;lib.rs:7:9  </code> Please consider rewriting this answer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 1, "creation_date": 1563371330, "post_id": 42791007, "comment_id": 100678074, "body": "@AleksanderFular: Fixed. I always wanted destructuring to prevent <code>Drop</code> from running, but since it&#39;s not we can use an <code>Option</code> instead."}, {"owner": {"reputation": 188, "user_id": 86551, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/69811899ab64ac9a67b9d2bf7e61f7bf?s=128&d=identicon&r=PG", "display_name": "mathstuf", "link": "https://stackoverflow.com/users/86551/mathstuf"}, "edited": false, "score": 0, "creation_date": 1566910724, "post_id": 42791007, "comment_id": 101797522, "body": "Wouldn&#39;t destructuring preventing Drop be a problem with something like <code>struct Fd { fd: libc::c_int }</code>? I think I&#39;d want an explicit <code>.take(self)</code> method to extract the inner <code>fd</code> safely rather than destructuring silently passing &quot;hey, you close this&quot; semantics within the code."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 188, "user_id": 86551, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/69811899ab64ac9a67b9d2bf7e61f7bf?s=128&d=identicon&r=PG", "display_name": "mathstuf", "link": "https://stackoverflow.com/users/86551/mathstuf"}, "edited": false, "score": 0, "creation_date": 1566911195, "post_id": 42791007, "comment_id": 101797787, "body": "@mathstuf: Destructuring is only available if you have access to the fields of the <code>struct</code>, which generally means that you are within the same module. In the same module, since you are establishing (and tearing down) the invariants of the object, it seems more useful than harmful. In general, though, you are right that this is a trade-off; a <code>take</code> is safer at the cost of having to create a &quot;shadow&quot; version of the type -- same list of fields, but within a tuple -- and maintain it over time."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1604490177, "post_id": 42791007, "comment_id": 114361359, "body": "This doesn&#39;t always help. First of all, if you are using a framework which doesn&#39;t simply allow you to call your own owning method on your object - you have no other choice but to write it in the <code>drop</code>. At second, you can actually stop the thread in drop by sending the thread a message using mpsc::Sender and so cause it to stop there, so the point about the implicit deadlock is only partially valid. That means, there is no excuse for the <code>drop</code> method (or the <code>JoinHandle</code>) to disallow joining a thread. At third, you may simply want to create an RAII guard but this makes it impossible as well"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1604497942, "post_id": 42791007, "comment_id": 114364836, "body": "@VictorPolevoy: There is no <i>generic</i> method to stop a <code>thread</code>; you can send a message on a queue, yes, however you are still dependent on the logic in the thread actually reading <i>from that queue</i>. It&#39;s possible, but <i>brittle</i>. The thread logic could be blocked on anything else. A much more <i>lightweight</i> implementation is to set an atomic, but once again the thread logic has to periodically check it -- if it doesn&#39;t for any reason, that thread is not stopping."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1604501712, "post_id": 42791007, "comment_id": 114366824, "body": "But this is absolutely has nothing specific with the drop, it can happen anywhere at any time. If a thread can&#39;t be joined, you simply can do exactly nothing about it, right? So I see no advantages over trying to stop a thread from a dedicated method rather than doing it in the <code>drop</code>. If you can&#39;t stop/join the thread in the <code>stop</code> method, you won&#39;t be able to do it anywhere else. It is like a poisoned mutex - if you have one, you can&#39;t recover it no matter how you try and where."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1604509688, "post_id": 42791007, "comment_id": 114370703, "body": "@VictorPolevoy: It does; that&#39;s specifically what I&#39;m addressing in my answer. Calling <code>join</code> is <i>explicit</i>, so the user can control where it happens -- and ensure it happens after having setting up everything -- whereas calling <code>drop</code> is implicit, it may happen as the result of an early return (<code>?</code> unwrapping) or unwinding (panic) before everything is fully setup."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 7, "last_activity_date": 1573397753, "last_edit_date": 1573397753, "creation_date": 1489507753, "answer_id": 42791007, "question_id": 41331577, "link": "https://stackoverflow.com/questions/41331577/joining-a-thread-in-a-method-that-takes-mut-self-like-drop-results-in-cann/42791007#42791007", "title": "Joining a thread in a method that takes `&amp;mut self` (like drop) results in &quot;cannot move out of borrowed content&quot;", "body": "<p><strong>Don't</strong>.</p>\n\n<hr>\n\n<p>It may seem counter-intuitive, but joining a thread (or process) in a destructor is generally a <em>bad idea</em>.</p>\n\n<p>Note that asking to join <em>does not</em> cause the thread to stop by itself; it's just about <em>waiting</em> for the thread to stop, and the thread may not. There are multiple reasons why this could happen:</p>\n\n<ul>\n<li>the handle being on the same thread as the one it controls,</li>\n<li>the thread to be stopped waiting on a channel the current thread should send a signal on,</li>\n<li>...</li>\n</ul>\n\n<p>Yes, that's a deadlock. An <em>implicit</em> deadlock.</p>\n\n<p>A particular nasty situation is if your current thread panics (something unforeseen occurred). Unwinding starts... and blocks! And all the resources that this thread was supposed to clean-up hung in limbo, forever.</p>\n\n<hr>\n\n<p>A better design is to instead create an explicit <code>join</code> method, which consume <code>self</code> (by value). It also lets you return a <code>Result</code>, in case joining causes an error.</p>\n\n<p>And in order for your users to remember to join explicitly, <code>panic!</code> in the <code>Drop</code> implementation if they forgot to.</p>\n\n<p>That is:</p>\n\n<pre><code>impl Foo {\n    fn join(mut self) -&gt; std::thread::Result&lt;()&gt; {\n        match self.handle.take() {\n            Some(h) =&gt; h.join(),\n            None =&gt; Ok(()),\n        }\n    }\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        if self.handle.is_some() {\n            panic!(\"You MUST call either join on `Foo` to clean it up.\");\n        }\n    }\n}\n</code></pre>\n\n<p><em>Note: I am aware that panicking in destructors is controversial, however it is much safer to abort a process when it's in an unknown state that go on and hope for the best.</em></p>\n\n<hr>\n\n<p>If you <em>really</em>, despite my warning, want to shoot yourself in the foot, join in <code>drop</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 1, "last_activity_date": 1603176430, "creation_date": 1603176430, "answer_id": 64439826, "question_id": 41331577, "link": "https://stackoverflow.com/questions/41331577/joining-a-thread-in-a-method-that-takes-mut-self-like-drop-results-in-cann/64439826#64439826", "title": "Joining a thread in a method that takes `&amp;mut self` (like drop) results in &quot;cannot move out of borrowed content&quot;", "body": "<p>If you don't mind unsafe code, then here's something you could do (please look at <a href=\"https://stackoverflow.com/a/42791007/1021920\">Matthieus answer</a> why this <em>can</em> be a bad idea).</p>\n<pre><code>struct Foo {\n    handle: ManuallyDrop&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        unsafe {\n            let _ = ManuallyDrop::take(&amp;mut self.handle).join();\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1858, "favorite_count": 1, "accepted_answer_id": 41331922, "answer_count": 4, "score": 7, "last_activity_date": 1603176430, "creation_date": 1482756641, "last_edit_date": 1570664898, "question_id": 41331577, "link": "https://stackoverflow.com/questions/41331577/joining-a-thread-in-a-method-that-takes-mut-self-like-drop-results-in-cann", "title": "Joining a thread in a method that takes `&amp;mut self` (like drop) results in &quot;cannot move out of borrowed content&quot;", "body": "<p>I want to create a thread inside of the <code>new</code> method and stop it after the struct is destroyed:</p>\n\n<pre><code>use std::thread;\n\nstruct Foo {\n    handle: thread::JoinHandle&lt;()&gt;,\n}\n\nimpl Foo {\n    pub fn new(name: &amp;str) -&gt; Foo {\n        let name = name.to_string();\n        Foo {\n            handle: thread::spawn(move || {\n                println!(\"hi {}\", name);\n            }),\n        }\n    }\n    pub fn stop(&amp;mut self) {\n        self.handle.join();\n    }\n}\n\nfn main() {\n    let mut foo = Foo::new(\"test\");\n    foo.stop();\n}\n</code></pre>\n\n<p>This doesn't compile, and I can not understand why:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; &lt;anon&gt;:15:9\n   |\n15 |         self.handle.join();\n   |         ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>And in newer versions of Rust:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of `self.handle` which is behind a mutable reference\n  --&gt; src/main.rs:17:9\n   |\n17 |         self.handle.join();\n   |         ^^^^^^^^^^^ move occurs because `self.handle` has type `std::thread::JoinHandle&lt;()&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>How can I fix this error?</p>\n\n<p>In the future, I will implement <code>Drop</code> for <code>Foo</code>, and will call <code>stop()</code> from <code>drop()</code>. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2418, "user_id": 1232832, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/2c492983af89b49d44250c79579a2641?s=128&d=identicon&r=PG", "display_name": "Shou Ya", "link": "https://stackoverflow.com/users/1232832/shou-ya"}, "edited": false, "score": 2, "creation_date": 1482749015, "post_id": 41328254, "comment_id": 69863126, "body": "Why don&#39;t you write a <code>Foo::new</code> function that creates a <code>Foo</code> safely?"}, {"owner": {"reputation": 4353, "user_id": 4768968, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206870885874374/picture?type=large", "display_name": "Tim Consolazio", "link": "https://stackoverflow.com/users/4768968/tim-consolazio"}, "edited": false, "score": 0, "creation_date": 1482766676, "post_id": 41328254, "comment_id": 69869294, "body": "Could you just set up a getter for the private var you want to access? That way you could guard against any kind of access.  You could also do something like, in the constructor of Foo (so using new), gate the construction such that it will succeed only if a condition of some kind is met, like the required constructor arg must be an instance of a qualifying component, etc. You can&#39;t construct the component without being to supply a specific instance of a specific type, and if it&#39;s already been constructed, don&#39;t create a new one, return the existing one, or some such."}], "answers": [{"tags": [], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "is_accepted": true, "score": 1, "last_activity_date": 1482815544, "creation_date": 1482815544, "answer_id": 41339337, "question_id": 41328254, "link": "https://stackoverflow.com/questions/41328254/accessing-private-fields-from-different-modules/41339337#41339337", "title": "Accessing private fields from different modules", "body": "<p>I think I found a better workaround</p>\n\n<pre><code>pub mod root {\n    use self::foo::create_foo;\n    mod foo {\n        pub struct Foo {\n            i: i32,\n        }\n        impl Foo{\n            pub fn hello_foo(&amp;self){\n                println!(\"Hello foo\");\n            }\n        }\n        pub fn create_foo(i: i32) -&gt; Foo{\n            Foo { i: i }\n        }\n    }\n    pub mod bar {\n        pub struct Bar {\n            pub f: ::root::foo::Foo,\n        }\n        impl Bar {\n            pub fn new(i: i32) -&gt; Self {\n                Bar { f: ::root::foo::create_foo(i) }\n            }\n        }\n    }\n}\nfn main() {\n    //still private\n    //let f = root::foo::create_foo(42);\n    let b = root::bar::Bar::new(42);\n    b.f.hello_foo();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=251b6a251b87fbc08df110090e46dfd6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I expose a public constructor <code>create_foo</code> in <code>foo</code> but the module <code>foo</code> still remains private and I only expose <code>create_foo</code> in <code>root</code> which means that <code>bar</code> can now create a <code>Foo</code> but <code>create_foo</code> is still private outside of <code>root</code>.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1378, "favorite_count": 0, "accepted_answer_id": 41339337, "answer_count": 1, "score": 3, "last_activity_date": 1482815544, "creation_date": 1482739529, "last_edit_date": 1482765942, "question_id": 41328254, "link": "https://stackoverflow.com/questions/41328254/accessing-private-fields-from-different-modules", "title": "Accessing private fields from different modules", "body": "<pre><code>mod root {\n    mod foo {\n        pub struct Foo {\n            i: i32,\n        }\n    }\n    mod bar {\n        pub struct Bar {\n            f: ::root::foo::Foo,\n        }\n        impl Bar {\n            pub fn new(i: i32) -&gt; Self {\n                Bar { f: ::root::foo::Foo { i: i } }\n            }\n        }\n    }\n}\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a3d83152784807978c042c301cbcb610&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>The user should be able to interact with <code>Foo</code>, but the user should not be able to construct it manually because it is unsafe.</p>\n\n<p>The module <code>bar</code> should still be able to construct Foo. As far as I know the only way to do this is to put <code>Foo</code> inside the <code>root</code> module or inside the <code>bar</code> module.</p>\n\n<p>Is there a cleaner way to solve this problem? I named the modules here <code>foo</code> and <code>bar</code> but in my code they are separate files like <code>foo.rs</code> <code>bar.rs</code>. Is possible to put <code>foo.rs</code> <code>bar.rs</code> into the same module so that they can see the private fields but still be live in separate files?</p>\n\n<p>My current workaround was to expose a public unsafe <code>new</code> method for Foo.</p>\n"}, {"tags": ["module", "rust", "private", "traits"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1482729002, "post_id": 41326566, "comment_id": 69856839, "body": "A <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> could be great to understand what you want."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1482729211, "post_id": 41326566, "comment_id": 69856881, "body": "@Stargateur But this is prior to any particular implementation. I&#39;m asking what the thinking is in general. What would an MCVE here be, but a bunch of curly braces and <code>impl</code> / <code>trait</code> keywords?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482729481, "post_id": 41326566, "comment_id": 69856940, "body": "Well, I&#39;m a newbie in rust but I have some skill in API design. I&#39;m not sure to have understand the rust part of this question. A <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> could help me to understand better the rust part. Because this question is probably more about design. Maybe could you provide a &quot;pseudo code&quot;?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1482730022, "creation_date": 1482730022, "answer_id": 41326768, "question_id": 41326566, "link": "https://stackoverflow.com/questions/41326566/is-there-a-way-to-have-private-functions-in-public-traits/41326768#41326768", "title": "Is there a way to have private functions in public traits?", "body": "<blockquote>\n  <p>I could make <code>do_private_thing</code> a private function in the module where the trait implementation is located</p>\n</blockquote>\n\n<p>This is what I would do.</p>\n\n<blockquote>\n  <p>but the trait does require that that function's work be done by any implementation of the trait. So I feel like I'm lying a little bit if I leave that code out of the implementation.</p>\n</blockquote>\n\n<p>This starts to be a bit less clear. When you say <strong>any implementation of the trait</strong>, then I no longer understand why you'd want to make it private. If another implementer of the trait needs this code, then it should be public in some fashion.</p>\n\n<p>In many ways, this feels very similar to the question \"how do I test private methods\". My normal answer there is: <em>don't</em>. Instead, extract the code you want to test to a new public item and then test the item in isolation. The usual problem is that people don't want to expose the functionality <em>on a specific piece of state</em>, not that they don't want to expose the functionality at all.</p>\n\n<p>In this case, create a new type that incorporates the shared logic and can then be exposed and used by whoever needs it. Alternatively, create a type that can be parameterized by a type implementing your trait and provides whatever extra functionality you need.</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4731, "favorite_count": 0, "accepted_answer_id": 41326768, "answer_count": 1, "score": 8, "last_activity_date": 1482730022, "creation_date": 1482728098, "last_edit_date": 1482729665, "question_id": 41326566, "link": "https://stackoverflow.com/questions/41326566/is-there-a-way-to-have-private-functions-in-public-traits", "title": "Is there a way to have private functions in public traits?", "body": "<p>I have an implementation for a public trait that repeats some work over multiple functions, so I'd like to DRY it up with a function that does the shared work, to be called from the functions actually meant to be used. So I have:</p>\n\n<ul>\n<li><code>fn do_private_thing()</code></li>\n<li><code>fn do_pub_1()</code></li>\n<li><code>fn do_pub_2()</code></li>\n</ul>\n\n<p>I don't want <code>do_private_thing()</code> to be exposed in docs or used directly, because it doesn't do anything useful from the perspective of a user of the trait/implementation. But functions in public traits are not private.</p>\n\n<p>I could make <code>do_private_thing</code> a private function in the module where the trait implementation is located, but the trait does require that that function's work be done by any implementation of the trait. So I feel like I'm lying a little bit if I leave that code out of the implementation.</p>\n\n<p>What's the reasonable way to lay this out in Rust?</p>\n"}, {"tags": ["concurrency", "rust", "mutex", "pool"], "answers": [{"comments": [{"owner": {"reputation": 615, "user_id": 4176597, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f118d3068ac55ffc44752d308d50ee7?s=128&d=identicon&r=PG&f=1", "display_name": "ethanabrooks", "link": "https://stackoverflow.com/users/4176597/ethanabrooks"}, "edited": false, "score": 1, "creation_date": 1482704255, "post_id": 41324552, "comment_id": 69853459, "body": "Thank you so much! That solved my problem both on this version and the complicated real version that it is based on. Is there any chance you would be willing to describe the process you used for figuring it out?"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 615, "user_id": 4176597, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f118d3068ac55ffc44752d308d50ee7?s=128&d=identicon&r=PG&f=1", "display_name": "ethanabrooks", "link": "https://stackoverflow.com/users/4176597/ethanabrooks"}, "edited": false, "score": 0, "creation_date": 1482707205, "post_id": 41324552, "comment_id": 69853940, "body": "I would not have solved this without your simplified example! Ok, I will add some details about the process tomorrow."}], "tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": true, "score": 4, "last_activity_date": 1482755286, "last_edit_date": 1482755286, "creation_date": 1482700297, "answer_id": 41324552, "question_id": 41323505, "link": "https://stackoverflow.com/questions/41323505/why-isnt-mutex-unlocking/41324552#41324552", "title": "Why isn&#39;t Mutex unlocking?", "body": "<p>The problem is located in this line:</p>\n\n<pre><code>get_pool().pop().unwrap_or(Obj {})\n</code></pre>\n\n<p>Because you call <code>get_pool()</code>, you lock the mutex, and it will not be unlocked until the end of the line. However in the call to <code>unwrap_or()</code>, you create a new <code>Obj</code>. This won't be used if there was an object in the vec. Because it is created later, it will be dropped before the mutex is released. As the drop tries to lock the mutex, you get a deadlock.</p>\n\n<p>To fix this, split that statement across two lines:</p>\n\n<pre><code>let o = get_pool().pop();\no.unwrap_or(Obj {})\n</code></pre>\n\n<p>As a related note, you can use <a href=\"https://github.com/rust-lang-nursery/lazy-static.rs\" rel=\"nofollow noreferrer\">lazy-static</a> to avoid unsafe code:</p>\n\n<pre><code>#![feature(drop_types_in_const)]\nuse std::sync::{Mutex, MutexGuard};\n\n#[macro_use]\nextern crate lazy_static;\n\nlazy_static! {\n  static ref POOL: Mutex&lt;Vec&lt;Obj&gt;&gt; = Mutex::new(vec![]);\n}\n\npub struct Obj;\n\nfn get_pool&lt;'a&gt;() -&gt; MutexGuard&lt;'a, Vec&lt;Obj&gt;&gt; {\n        POOL.lock().unwrap()\n}\n\nimpl Drop for Obj {\n    fn drop(&amp;mut self) {\n        println!(\"dropping.\");\n        println!(\"hangs here...\");\n        get_pool().push(Obj {});\n        println!(\"not here...\");\n    }\n}\n\nimpl Obj {\n    pub fn new() -&gt; Obj {\n        println!(\"initializing\");\n        let o = get_pool().pop();\n        o.unwrap_or(Obj {})\n    }\n}\n\nfn main() {\n    Obj::new();\n    Obj::new();\n    println!(\"Now reaches this point.\");\n}\n</code></pre>\n\n<p><strong>edit</strong></p>\n\n<p>As requested I'll explain how I diagnosed this;</p>\n\n<ol>\n<li>First I verified if I could reproduce the problem using the sample you gave. Which I could, and the code was simple and clear enough. This was all fine, I only needed to add the line <code>println!(\"not here...\");</code> to be 100% sure it hangs at the statement above, and not at the end of the block.</li>\n<li>In a first scan, I noticed that <code>Obj::new();</code> had to be called twice for the problem to happen. So the next goal is to find the differences between both calls. (My knowledge of rust is not good enough yet to spot this error by just reading the code).</li>\n<li>Because <code>POOL</code> is not initialized in the first call, I added the initializing at the start of main (<code>unsafe{INIT.call_once(||{POOL=Some(Mutex::new(vec![]));});}</code>), but that did not change anything.</li>\n<li>Because an object is added to the pool when <code>Obj</code> is dropped, I added an object at the start of main (<code>get_pool().push(Obj {});</code>). Now it hangs at the first <code>Obj::new();</code>.</li>\n<li>I could further simplify it by calling <code>get_pool().pop().unwrap_or(Obj {});</code> next in main.</li>\n<li>Now I could partly remove or split that line to determine exactly where it hangs. By doing that I saw I was able to fix it. Then I realized an extra <code>Obj</code> was created there. Note that rust borrow scopes are currently <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">lexical</a>.</li>\n<li>In retrospect, I would have spotted this earlier if I removed the line containing <code>get_pool()</code> in <code>drop()</code>, and counted how many times <code>drop()</code> was called. I did not realize is was called three times instead of twice.</li>\n</ol>\n\n<p>As a general note, the title of this question is \"Why isn't Mutex unlocking\". This could be interpreted as a compiler bug, or a bug in the standard library. Most of the time (>99%) it is not. It is important to keep that in mind, and not focus on the wrong issue.</p>\n\n<p>This problem is related to global shared state. Try to avoid that. (Yes I know that's not always possible).</p>\n"}], "owner": {"reputation": 615, "user_id": 4176597, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f118d3068ac55ffc44752d308d50ee7?s=128&d=identicon&r=PG&f=1", "display_name": "ethanabrooks", "link": "https://stackoverflow.com/users/4176597/ethanabrooks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1699, "favorite_count": 0, "accepted_answer_id": 41324552, "answer_count": 1, "score": 4, "last_activity_date": 1482755286, "creation_date": 1482690064, "last_edit_date": 1482697462, "question_id": 41323505, "link": "https://stackoverflow.com/questions/41323505/why-isnt-mutex-unlocking", "title": "Why isn&#39;t Mutex unlocking?", "body": "<p>I am trying to implement a global object pool for a large <code>Obj</code> type. Here is the code for <code>POOL</code>:</p>\n\n<pre><code>static mut POOL: Option&lt;Mutex&lt;Vec&lt;Obj&gt;&gt;&gt; = None;\nstatic INIT: Once = ONCE_INIT;\n\npub struct Obj;\n</code></pre>\n\n<p>Here is how I am accessing and locking <code>POOL</code>:</p>\n\n<pre><code>fn get_pool&lt;'a&gt;() -&gt; MutexGuard&lt;'a, Vec&lt;Obj&gt;&gt; {\n    unsafe {\n        match POOL {\n            Some(ref mutex) =&gt; mutex.lock().unwrap(),\n            None            =&gt; {\n                INIT.call_once(|| {\n                    POOL = Some(Mutex::new(vec![]));\n                });\n                get_pool()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This is the code that is causing problems:</p>\n\n<pre><code>impl Drop for Obj {\n    fn drop(&amp;mut self) {\n        println!(\"dropping.\");\n        println!(\"hangs here...\");\n        get_pool().push(Obj {});\n    }\n}\n\nimpl Obj {\n    pub fn new() -&gt; Obj {\n        println!(\"initializing\");\n        get_pool().pop().unwrap_or(Obj {})\n        // for some reason, the mutex does not get unlocked at this point...\n    }\n}\n</code></pre>\n\n<p>I think it has something to do with the lifetime <code>'a</code> of the <code>MutexGuard</code> in the return value of <code>get_pool</code>. Frankly I'm probably a little confused about the way these lifetime parameters work. </p>\n\n<p>Here is a <a href=\"https://play.rust-lang.org/?gist=432e6ed15f19ee381857012147543f6f&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">link to a playground</a> with a working example. Thanks for your help and merry Christmas.</p>\n"}, {"tags": ["rust", "shebang"], "comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 1, "creation_date": 1482683502, "post_id": 41322300, "comment_id": 69849070, "body": "<a href=\"https://github.com/killerswan/rustx\" rel=\"nofollow noreferrer\">github.com/killerswan/rustx</a> ?"}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 2, "creation_date": 1482756617, "post_id": 41322899, "comment_id": 69865910, "body": "The <code>&amp;&amp;</code> will fail to remove <code>a.out</code> if running <code>a.out</code> returns a nonzero exit code."}], "tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": false, "score": 4, "last_activity_date": 1482684443, "creation_date": 1482684443, "answer_id": 41322899, "question_id": 41322300, "link": "https://stackoverflow.com/questions/41322300/how-to-execute-rust-code-directly-on-unix-systems-using-the-shebang/41322899#41322899", "title": "How to execute Rust code directly on Unix systems? (using the shebang)", "body": "<p>This seems to work:</p>\n\n<pre><code>#!/bin/sh\n//usr/bin/env rustc $0 -o a.out &amp;&amp; ./a.out &amp;&amp; rm ./a.out ; exit\n\nfn main() {\n    println!(\"Hello World!\");\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1455, "user_id": 1261335, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/7148159afe3a7065728d44063f3d22d0?s=128&d=identicon&r=PG", "display_name": "GrandOpener", "link": "https://stackoverflow.com/users/1261335/grandopener"}, "edited": false, "score": 2, "creation_date": 1597257952, "post_id": 41325202, "comment_id": 112077193, "body": "This was probably the best answer at the time it was answered, but unfortunately the cargo-script project appears to be abandoned.  New readers may want to examine other answers to see if they are a better fit.  I chose scriptisto for my personal use."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 17, "last_activity_date": 1482763477, "last_edit_date": 1482763477, "creation_date": 1482707918, "answer_id": 41325202, "question_id": 41322300, "link": "https://stackoverflow.com/questions/41322300/how-to-execute-rust-code-directly-on-unix-systems-using-the-shebang/41325202#41325202", "title": "How to execute Rust code directly on Unix systems? (using the shebang)", "body": "<p>There's <a href=\"https://github.com/DanielKeep/cargo-script\" rel=\"noreferrer\"><code>cargo-script</code></a>. That also lets you use dependencies.</p>\n\n<p>After installing <code>cargo-script</code> via <code>cargo install cargo-script</code>, you can create your script file (<code>hello.rs</code>) like this:</p>\n\n<pre><code>#!/usr/bin/env run-cargo-script\n\nfn main() {\n    println!(\"Hello World!\");\n}\n</code></pre>\n\n<p>To execute it, you need to:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ chmod +x hello.rs\n$ ./hello.rs\n   Compiling hello v0.1.0 (file://~/.cargo/.cargo/script-cache/file-hello-d746fc676c0590b)\n    Finished release [optimized] target(s) in 0.80 secs\nHello World!\n</code></pre>\n\n<hr>\n\n<p>To use crates from crates.io, please see the tutorial in the README linked above.</p>\n"}, {"tags": [], "owner": {"reputation": 1146, "user_id": 1485936, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e61d359e752abb4f80725ea05e6c3d3e?s=128&d=identicon&r=PG", "display_name": "i.petruk", "link": "https://stackoverflow.com/users/1485936/i-petruk"}, "is_accepted": false, "score": 4, "last_activity_date": 1574776921, "last_edit_date": 1574776921, "creation_date": 1572738896, "answer_id": 58676309, "question_id": 41322300, "link": "https://stackoverflow.com/questions/41322300/how-to-execute-rust-code-directly-on-unix-systems-using-the-shebang/58676309#58676309", "title": "How to execute Rust code directly on Unix systems? (using the shebang)", "body": "<p>I have written a tool just for that: <a href=\"https://github.com/igor-petruk/scriptisto\" rel=\"nofollow noreferrer\">Scriptisto</a>. It is a fully language agnostic tool and it works with other compiled languages or languages that have expensive validation steps (Python with mypy).</p>\n\n<p>For Rust it can also fetch <a href=\"https://github.com/igor-petruk/scriptisto/blob/master/data/templates/rust.rs\" rel=\"nofollow noreferrer\">dependencies</a> behind the scenes or build entirely in <a href=\"https://github.com/igor-petruk/scriptisto/blob/master/data/templates/docker-rust.rs\" rel=\"nofollow noreferrer\">Docker</a> without having a Rust compiler installed. <code>scriptisto</code> embeds those templates into the binary so you can bootstrap easily:</p>\n\n<pre><code>$ scriptisto new rust &gt; ./script.rs\n$ chmod +x ./script.rs\n$ ./script.rs\n</code></pre>\n\n<p>Instead of <code>new rust</code> you can do <code>new docker-rust</code> and the build will not require Rust compiler on your host system.</p>\n"}, {"tags": [], "owner": {"reputation": 1598, "user_id": 1410221, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/CW5Pu.jpg?s=128&g=1", "display_name": "HappyFace", "link": "https://stackoverflow.com/users/1410221/happyface"}, "is_accepted": false, "score": 0, "last_activity_date": 1589311252, "creation_date": 1589311252, "answer_id": 61760206, "question_id": 41322300, "link": "https://stackoverflow.com/questions/41322300/how-to-execute-rust-code-directly-on-unix-systems-using-the-shebang/61760206#61760206", "title": "How to execute Rust code directly on Unix systems? (using the shebang)", "body": "<pre><code>#!/bin/sh\n#![allow()] /*\n            exec cargo-play --cached --release $0 -- \"$@\"\n                        */\n</code></pre>\n\n<p>Needs cargo-play. You can see a solution that doesn't need anything <a href=\"https://neosmart.net/blog/2020/self-compiling-rust-code/\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<pre><code>#!/bin/sh\n#![allow()] /*\n\n# rust self-compiler by Mahmoud Al-Qudsi, Copyright NeoSmart Technologies 2020\n# See &lt;https://neosmart.net/blog/self-compiling-rust-code/&gt; for info &amp; updates.\n#\n# This code is freely released to the public domain. In case a public domain\n# license is insufficient for your legal department, this code is also licensed\n# under the MIT license.\n\n# Get an output path that is derived from the complete path to this self script.\n# - `realpath` makes sure if you have two separate `script.rs` files in two\n#   different directories, they get mapped to different binaries.\n# - `which` makes that work even if you store this script in $PATH and execute\n#   it by its filename alone.\n# - `cut` is used to print only the hash and not the filename, which `md5sum`\n#   always includes in its output.\nOUT=/tmp/$(printf \"%s\" $(realpath $(which \"$0\")) | md5sum | cut -d' '  -f1)\n\n# Calculate hash of the current contents of the script, so we can avoid\n# recompiling if it hasn't changed.\nMD5=$(md5sum \"$0\" | cut -d' '  -f1)\n\n# Check if we have a previously compiled output for this exact source code.\nif !(test -f \"${OUT}.md5\" &amp;&amp; test \"${MD5}\" = \"$(cat ${OUT}.md5)\"); then\n    # The script has been modified or is otherwise not cached.\n    # Check if the script already contains an `fn main()` entry point.\n    if grep -Eq '^\\s*(\\[.*?\\])*\\s*fn\\s*main\\b*' \"$0\"; then\n        # Compile the input script as-is to the previously determined location.\n        rustc \"$0\" -o ${OUT}\n        # Save rustc's exit code so we can compare against it later.\n        RUSTC_STATUS=$?\n    else\n        # The script does not contain an `fn main()` entry point, so add one.\n        # We don't use `printf 'fn main() { %s }' because the shebang must\n        # come at the beginning of the line, and we don't use `tail` to skip\n        # it because that would result in incorrect line numbers in any errors\n        # reported by rustc, instead we just comment out the shebang but leave\n        # it on the same line as `fn main() {`.\n        printf \"fn main() {//%s\\n}\" \"$(cat $0)\" | rustc - -o ${OUT}\n        # Save rustc's exit code so we can compare against it later.\n        RUSTC_STATUS=$?\n    fi\n\n    # Check if we compiled the script OK, or exit bubbling up the return code.\n    if test \"${RUSTC_STATUS}\" -ne 0; then\n        exit ${RUSTC_STATUS}\n    fi\n\n    # Save the MD5 of the current version of the script so we can compare\n    # against it next time.\n    printf \"%s\" ${MD5} &gt; ${OUT}.md5\nfi\n\n# Execute the compiled output. This also ends execution of the shell script,\n# as it actually replaces its process with ours; see exec(3) for more on this.\nexec ${OUT} $@\n\n# At this point, it's OK to write raw rust code as the shell interpreter\n# never gets this far. But we're actually still in the rust comment we opened\n# on line 2, so close that: */\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1982, "favorite_count": 6, "accepted_answer_id": 41325202, "answer_count": 4, "score": 18, "last_activity_date": 1589311252, "creation_date": 1482679025, "last_edit_date": 1482757745, "question_id": 41322300, "link": "https://stackoverflow.com/questions/41322300/how-to-execute-rust-code-directly-on-unix-systems-using-the-shebang", "title": "How to execute Rust code directly on Unix systems? (using the shebang)", "body": "<p>From reading <a href=\"https://github.com/rust-lang/rust/issues/1772#event-16049860\" rel=\"noreferrer\">this thread</a>, it looks like its possible to use the shebang to run Rust *.</p>\n\n<pre><code>#!/usr/bin/env rustc\n\nfn main() {\n    println!(\"Hello World!\");\n}\n</code></pre>\n\n<p>Making this executable and running does compile, but not run the code.</p>\n\n<pre><code>chmod +x hello_world.rs\n./hello_world.rs\n</code></pre>\n\n<p>However this only compiles the code into <code>hello_world</code>.</p>\n\n<p>Can <code>*.rs</code> files be executed directly, similar to a shell script?</p>\n\n<hr>\n\n<p>* This references <a href=\"https://github.com/killerswan/rustx\" rel=\"noreferrer\">rustx</a>, I looked into this, but its a bash script which compiles the script every time (without caching) and never removes the file from the temp directory, although this could be improved. Also it has the significant limitation that it can't use crates.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1482669209, "post_id": 41320681, "comment_id": 69845929, "body": "Just added some words about the relation between types and traits, in case you are interested."}], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1482668264, "post_id": 41321010, "comment_id": 69845709, "body": "You beat me to it. I <a href=\"http://play.integer32.com/?gist=3a8435a25c3a22f23d3585f4abb3f2bb&amp;version=stable\" rel=\"nofollow noreferrer\">had the Playground example ready to go as well</a>. Oh well :)"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 6, "last_activity_date": 1482669686, "last_edit_date": 1482669686, "creation_date": 1482667942, "answer_id": 41321010, "question_id": 41320681, "link": "https://stackoverflow.com/questions/41320681/how-do-i-solve-the-missing-associated-type-err-value-error/41321010#41321010", "title": "How do I solve the &quot;missing associated type `Err` value&quot; error?", "body": "<h2>Working code</h2>\n\n<p>The only thing you need to change to your code in order to make it compile is the type signature of the function:</p>\n\n<pre><code>pub fn read_all&lt;C, F&gt;() -&gt; C\n    where F: FromStr,\n          C: FromIterator&lt;F&gt;\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>Your code is almost correct, but there is a problem:</p>\n\n<ul>\n<li><code>FromIterator&lt;T&gt;</code> is a trait, but <code>T</code> is a <strong>type</strong>.</li>\n<li>You use <code>FromStr</code> in the place of <code>T</code>, but <code>FromStr</code> is a <strong>trait</strong>, not a type.</li>\n</ul>\n\n<p>To solve this, you need to get a <strong>type</strong> that implements <code>FromStr</code>. You can do this by adding a type parameter <code>F</code> to the function and constraining it with <code>where F: FromStr</code>. Then you can write <code>FromIterator&lt;F&gt;</code>.</p>\n\n<h2>A note on associated types</h2>\n\n<p>Besides the issue of using a trait instead of a type, typing <code>FromStr&lt;Err&gt;</code> is wrong syntax. While in this case it is not necessary to specify the type of <code>Err</code> in the <code>FromStr</code> trait, you could do it as shown below:</p>\n\n<pre><code>pub fn read_all&lt;C, F, E&gt;() -&gt; C\n    where F: FromStr&lt;Err=E&gt;,\n          C: FromIterator&lt;F&gt;\n</code></pre>\n\n<p>As you can see, instead of writing <code>FromStr&lt;E&gt;</code> we need to write <code>FromStr&lt;Err=E&gt;</code>. That is, you need to explicitly type the name of the associated type you are referring to.</p>\n\n<h2>A note on types vs traits</h2>\n\n<p>Usually traits cannot be treated as types. However, there are exceptions to this rule, as illustrated by the example below:</p>\n\n<pre><code>use std::fmt::Display;\n\npub fn print_box(thing: Box&lt;Display&gt;) {\n    println!(\"{}\", thing)\n}\n\nfn main() { print_box(Box::new(42)); }\n</code></pre>\n\n<p>Here, you would expect <code>T</code> in <code>Box&lt;T&gt;</code> to be a type, but the <code>Display</code> trait is supplied instead. However, the compiler does not reject the program. The type checker sees <code>Display</code> as an <a href=\"https://doc.rust-lang.org/book/unsized-types.html\" rel=\"nofollow noreferrer\">unsized type</a>. That is, the type of an object with a size unknown at compile time (because it could be any type implementing <code>Display</code>). When <code>T</code> in <code>Box&lt;T&gt;</code> is a trait, the resulting type is usually referred to as a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait object</a>. It is impossible to cover this topic in depth here, but the links I refer to are a good starting point in case you want to know more.</p>\n"}], "owner": {"reputation": 1729, "user_id": 3859522, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fe4a78465ab98520ed124337edad97c8?s=128&d=identicon&r=PG&f=1", "display_name": "Dulguun Otgon", "link": "https://stackoverflow.com/users/3859522/dulguun-otgon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2014, "favorite_count": 0, "accepted_answer_id": 41321010, "answer_count": 1, "score": 4, "last_activity_date": 1482694485, "creation_date": 1482664740, "last_edit_date": 1482694485, "question_id": 41320681, "link": "https://stackoverflow.com/questions/41320681/how-do-i-solve-the-missing-associated-type-err-value-error", "title": "How do I solve the &quot;missing associated type `Err` value&quot; error?", "body": "<p>I'm trying to make a simple utility function that reads multiple elements from <code>stdin</code> and puts them in collection and returns it. However I'm stuck at this point. The compiler says <code>missing associated type Err value</code>. How do I make it work, while keeping it generic as possible?</p>\n\n<p>While this function seems useless, it's for learning the language and its type system.</p>\n\n<pre><code>use std::io::{ stdin };\nuse std::str::FromStr;\nuse std::io::Read;\nuse std::iter::FromIterator;\n\npub fn read_all&lt;C&gt;() -&gt; C\n    where C: FromIterator&lt;FromStr&lt;Err&gt;&gt;\n{\n    let mut buff = String::new();\n    stdin().read_to_string(&amp;mut buff).expect(\"read_to_string error\");\n    buff.split_whitespace()\n        .filter_map(|w| w.parse().ok())\n        .collect()\n}\n</code></pre>\n\n<p>Usage example:</p>\n\n<pre><code>let v: Vec&lt;i32&gt; = read_all();\n</code></pre>\n"}, {"tags": ["enums", "macros", "rust"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 5, "creation_date": 1482668144, "post_id": 41319276, "comment_id": 69845682, "body": "How would you expect this to work? You cannot write a match that has incompatible types depending on the pattern that is matched. That just doesn&#39;t type check. An alternative would be to use a macro that tries to extract the value of a given variant, but then you might as well go for a function (or just use <code>if let</code>)."}], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482798181, "post_id": 41327090, "comment_id": 69878006, "body": "@Shepmaster Just a question that is you who downvote me? If that is you can you tell me why? This doesn&#39;t answer the question? &quot;How to create a macro that gets the value of an enum type?&quot;"}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": -1, "last_activity_date": 1482732587, "creation_date": 1482732587, "answer_id": 41327090, "question_id": 41319276, "link": "https://stackoverflow.com/questions/41319276/how-to-create-a-macro-that-gets-the-value-of-an-enum-type/41327090#41327090", "title": "How to create a macro that gets the value of an enum type?", "body": "<p>Like @aochagavia say there is no point to have a macro if you must do specific stuff with your enum.</p>\n\n<p>The following macro could help you, the purpose is to have a macro that create a enum and generate some method. This only work if all variant have one type.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! foo {\n    ($($(#[$meta:meta])* foo $name:ident($ty:ty),)*) =&gt; {\n        #[derive(Debug, Clone)]\n        pub enum Foo {\n            $($(#[$meta])* $name($ty),)*\n        }\n        impl Foo {\n            pub fn display(&amp;self) {\n                match *self {\n                    $(Foo::$name(x) =&gt; println!(\"{}\", x),)*\n                }\n            }\n        }\n    }\n}\n\nfoo! {\n    foo A(i32),\n    foo B(i64),\n}\n\nfn main() {\n    let a = Foo::A(32);\n    let b = Foo::B(64);\n\n    a.display();\n    b.display();\n}\n</code></pre>\n\n<p>The <a href=\"https://github.com/KokaKiwi/amf/blob/54254b76156c771fb9bfbe690bff19408d447178/src/markers.rs#L1\" rel=\"nofollow noreferrer\">original</a> macro is from @koka-el-kiwi, I take it as an example and modification for your case.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482764931, "post_id": 41332939, "comment_id": 69868732, "body": "Giant blocks of code should be accompanied by prose to describe <b>what</b> changes were made and <b>why</b> they solve the problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482764940, "post_id": 41332939, "comment_id": 69868736, "body": "Also, it&#39;s spelled <code>unwrap</code>."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482798918, "post_id": 41332939, "comment_id": 69878128, "body": "This doesn&#39;t work as expected, it&#39;s create 5 enum. Not one."}], "tags": [], "owner": {"reputation": 9, "user_id": 7339161, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4908849e2c466487426181170955d28a?s=128&d=identicon&r=PG", "display_name": "boy lama", "link": "https://stackoverflow.com/users/7339161/boy-lama"}, "is_accepted": false, "score": -2, "last_activity_date": 1482764879, "last_edit_date": 1482764879, "creation_date": 1482764140, "answer_id": 41332939, "question_id": 41319276, "link": "https://stackoverflow.com/questions/41319276/how-to-create-a-macro-that-gets-the-value-of-an-enum-type/41332939#41332939", "title": "How to create a macro that gets the value of an enum type?", "body": "<p>The following method is also available</p>\n\n<pre><code>pub enum Type&lt;T&gt; {\n    gli32(T),\n    gli64(T),\n    glfloat4fv(T),\n    glString(T),\n    glVec(T),\n}\n\nimpl&lt;T&gt; Type&lt;T&gt; {\n    pub fn unwarp(&amp;self) -&gt; &amp;T {\n        match *self {\n            Type::gli32(ref x) =&gt; x,\n            Type::gli64(ref x) =&gt; x,\n            Type::glfloat4fv(ref x) =&gt; x,\n            Type::glString(ref x) =&gt; x,\n            Type::glVec(ref x) =&gt; x,\n        }\n    }\n}\n\nfn main() {\n    println!(\"Hello, world!\");\n    let f = Type::gli32(32 as i32);\n    let ff64 = Type::gli64((64, 32));\n    let f4fv = Type::glfloat4fv((0.1, 0.2, 0.0));\n    let cstr = Type::glString(CString::new(\"glstring\").unwrap());\n    let ve = [1, 2, 3, 5];\n    let glve = Type::glVec(ve);\n\n    println!(\"f ={} {:?} {:?} {:?}\",\n             f.unwarp(),\n             f4fv.unwarp(),\n             cstr.unwarp(),\n             glve.unwarp());\n}\n</code></pre>\n"}], "owner": {"reputation": 9, "user_id": 7339161, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4908849e2c466487426181170955d28a?s=128&d=identicon&r=PG", "display_name": "boy lama", "link": "https://stackoverflow.com/users/7339161/boy-lama"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 82, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1482764988, "creation_date": 1482649414, "last_edit_date": 1482694341, "question_id": 41319276, "link": "https://stackoverflow.com/questions/41319276/how-to-create-a-macro-that-gets-the-value-of-an-enum-type", "title": "How to create a macro that gets the value of an enum type?", "body": "<p>My enum looks like this:</p>\n\n<pre><code>#[derive(Clone, Debug)]\npub enum Type {\n    GLnull,\n    GLenum(GLenum),\n    GLboolean(GLboolean),\n    GLint(GLint),\n    GLbyte(GLbyte),\n    GLshort(GLshort),\n    GLclampx(GLclampx),\n    GLubyte(GLubyte),\n    GLushort(GLushort),\n    GLuint(GLuint),\n    GLsizei(GLsizei),\n    GLclampf(GLclampf),\n    GLdouble(GLdouble),\n    GLclampd(GLclampd),\n    GLfloat_4fv((GLfloat, GLfloat, GLfloat, GLfloat)),\n    GLfloat(GLfloat),\n    GLintptr(GLintptr),\n    GLsizeiptr(GLsizeiptr),\n    GLbitfield(GLbitfield),\n    GLchar_ptr(String),\n}\n\nmacro_rules! get{\n    ($e:expr) =&gt; {\n        match $e {\n            Type::GLsizei(x) =&gt; { x }\n            Type::GLbitfield(x) =&gt; { x }\n            _ =&gt; { 0 }\n        }\n    }\n}\n</code></pre>\n\n<p>Now how do I create a macro that gets the value of the enum type?</p>\n"}, {"tags": ["rust", "message-queue", "future"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1532623875, "last_edit_date": 1532623875, "creation_date": 1482632799, "answer_id": 41318270, "question_id": 41316785, "link": "https://stackoverflow.com/questions/41316785/how-to-make-a-simple-futuressyncmpscchannel-example-work/41318270#41318270", "title": "How to make a simple futures::sync::mpsc::channel example work?", "body": "<p>It is <strong>highly recommended</strong> to read the warning and error messages that the compiler tells you. This is one of the big benefits of a statically typed language with a compiler:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused result which must be used: futures do nothing unless polled, #[warn(unused_must_use)] on by default\n  --&gt; src/main.rs:11:9\n   |\n11 |         tx.clone().send(1);\n   |         ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused result which must be used: futures do nothing unless polled, #[warn(unused_must_use)] on by default\n  --&gt; src/main.rs:12:9\n   |\n12 |         tx.clone().send(2);\n   |         ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused result which must be used: futures do nothing unless polled, #[warn(unused_must_use)] on by default\n  --&gt; src/main.rs:13:9\n   |\n13 |         tx.clone().send(3);\n   |         ^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I'm no expert with futures, but this compiles without warnings and prints all three values:</p>\n\n<pre><code>extern crate futures; // 0.1.23\n\nuse futures::{sync::mpsc, Async, Future, Sink, Stream};\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel(1000);\n\n    let handle = thread::spawn(move || {\n        tx.send(1)\n            .and_then(|tx| tx.send(2))\n            .and_then(|tx| tx.send(3))\n            .wait()\n            .expect(\"Unable to send\");\n    });\n\n    let mut rx = rx.map(|x| x * x);\n\n    handle.join().unwrap();\n\n    while let Ok(Async::Ready(Some(v))) = rx.poll() {\n        println!(\"stream: {}\", v);\n    }\n}\n</code></pre>\n\n<p><code>and_then</code> is used to send each subsequent value after the previous one. <code>wait</code> is used to block the generated thread until everything has successfully sent. The <code>poll</code> method is used to grab values off the queue until it runs out. There are multiple ways that might fail, and I'm ignoring them all and only concentrating on the success case.</p>\n"}], "owner": {"reputation": 500, "user_id": 4977168, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/ab582c6c0a0524f7dfc3197f1e2c45b2?s=128&d=identicon&r=PG&f=1", "display_name": "KolesnichenkoDS", "link": "https://stackoverflow.com/users/4977168/kolesnichenkods"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2817, "favorite_count": 1, "accepted_answer_id": 41318270, "answer_count": 1, "score": 4, "last_activity_date": 1580661100, "creation_date": 1482613111, "last_edit_date": 1580661100, "question_id": 41316785, "link": "https://stackoverflow.com/questions/41316785/how-to-make-a-simple-futuressyncmpscchannel-example-work", "title": "How to make a simple futures::sync::mpsc::channel example work?", "body": "<p>I am trying to write a simple exmaple of <a href=\"https://github.com/alexcrichton/futures-rs\" rel=\"nofollow noreferrer\">futures-rs</a> mpsc queues usage:</p>\n\n<pre><code>extern crate futures; // v0.1 (old)\n\nuse futures::{Sink, Stream};\nuse futures::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel::&lt;i32&gt;(1000);\n\n    let handle = thread::spawn(move || {\n        tx.clone().send(1);\n        tx.clone().send(2);\n        tx.clone().send(3);\n    });\n\n    let mut rx = rx.map(|x| {\n        println!(\"stream: {}\", x);\n        x * x\n    });\n\n    handle.join().unwrap();\n\n    rx.poll().unwrap();\n}\n</code></pre>\n\n<p>But it doesn't output anything to the console (I expect it to print <code>stream: 1</code>, <code>stream: 2</code> and <code>stream: 3</code>). I also tried to replace <code>rx.poll().unwrap()</code> with <code>rx.wait()</code>, but it still outputs nothing. And I didn't find any usage examples in the futures-rs docs. What am I doing wrong?</p>\n"}, {"tags": ["casting", "rust", "traits", "primitive-types"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482598333, "post_id": 41314474, "comment_id": 69833693, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/29025811/155423\">stackoverflow.com/q/29025811/155423</a>; <a href=\"http://stackoverflow.com/q/30942408/155423\">stackoverflow.com/q/30942408/155423</a>; <a href=\"http://stackoverflow.com/q/29184358/155423\">stackoverflow.com/q/29184358/155423</a>; <a href=\"http://stackoverflow.com/q/30057726/155423\">stackoverflow.com/q/30057726/155423</a>; <a href=\"http://stackoverflow.com/q/30044026/155423\">stackoverflow.com/q/30044026/155423</a>; <a href=\"http://stackoverflow.com/q/21073709/155423\">stackoverflow.com/q/21073709/155423</a>; <a href=\"http://stackoverflow.com/q/37296351/155423\">stackoverflow.com/q/37296351/155423</a>; etc."}, {"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482602398, "post_id": 41314474, "comment_id": 69834783, "body": "Thanks for the links. Lots of similar questions (maybe an opportunity to improve the book!). The most helpful answer I think it <a href=\"http://stackoverflow.com/a/29032520/265521\">this one</a>."}], "answers": [{"tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 2, "last_activity_date": 1482598110, "last_edit_date": 1482598110, "creation_date": 1482596338, "answer_id": 41314890, "question_id": 41314474, "link": "https://stackoverflow.com/questions/41314474/what-trait-can-be-used-for-scalar-casts/41314890#41314890", "title": "What trait can be used for scalar casts?", "body": "<p>There is a crate called <a href=\"https://crates.io/crates/num\" rel=\"nofollow noreferrer\">num</a> that provides some traits like the one you mention. You can find the documentation <a href=\"https://docs.rs/num/0.1.36/num/\" rel=\"nofollow noreferrer\">here</a>. In your particular case, it seems that you should be able to use the <a href=\"https://docs.rs/num/0.1.36/num/trait.One.html\" rel=\"nofollow noreferrer\"><code>One</code></a> trait. This trait is, however, very limited because it only provides one function:</p>\n\n<pre><code>pub trait One: Mul&lt;Self, Output=Self&gt; {\n    fn one() -&gt; Self;\n}\n</code></pre>\n\n<p>Depending on what you are trying to do, you are probably better off using the <a href=\"https://docs.rs/num/0.1.36/num/trait.Num.html\" rel=\"nofollow noreferrer\"><code>Num</code></a> trait, which is a subtrait of <code>Zero&lt;Output=Self&gt; + One&lt;Output=Self&gt; + Add&lt;Self&gt; + Sub&lt;Self, Output=Self&gt; + Mul&lt;Self&gt; + Div&lt;Self, Output=Self&gt; + Rem&lt;Self, Output=Self&gt; + PartialEq&lt;Self&gt;</code>.</p>\n\n<p>Both traits are implemented for the primitive numerical types (<code>usize</code>, <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>isize</code>, <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>f32</code>, <code>f64</code>). Note, however, that they are also implemented for some types that are defined in the library (<code>BigInt</code>, <code>BigUint</code>, <code>Ratio</code>, <code>Complex</code>).</p>\n"}, {"comments": [{"owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "edited": false, "score": 0, "creation_date": 1482667982, "post_id": 41315160, "comment_id": 69845650, "body": "Aren&#39;t some traits like <code>Sync</code> and <code>Copy</code> &#39;magic&#39;? If so I don&#39;t think it is unreasonable to expect a magic <code>Primitive</code> trait."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1482598223, "last_edit_date": 1495542288, "creation_date": 1482598223, "answer_id": 41315160, "question_id": 41314474, "link": "https://stackoverflow.com/questions/41314474/what-trait-can-be-used-for-scalar-casts/41315160#41315160", "title": "What trait can be used for scalar casts?", "body": "<p>Answering the question you asked:</p>\n\n<blockquote>\n  <p>What trait can be used for scalar casts?</p>\n</blockquote>\n\n<p>None. Traits only define methods and associated types. Scalar casts are built into the language and are not open for extension.</p>\n\n<p><a href=\"https://stackoverflow.com/a/41314890/155423\">aochagavia has answered</a> \"how do I solve this problem\".</p>\n"}], "owner": {"reputation": 67096, "user_id": 265521, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/34a66330977044d70165288c56740d4b?s=128&d=identicon&r=PG", "display_name": "Timmmm", "link": "https://stackoverflow.com/users/265521/timmmm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1482598223, "creation_date": 1482592780, "last_edit_date": 1482598084, "question_id": 41314474, "link": "https://stackoverflow.com/questions/41314474/what-trait-can-be-used-for-scalar-casts", "title": "What trait can be used for scalar casts?", "body": "<p>What trait can I restrict <code>T</code> to to allow this to compile?</p>\n\n<pre><code>fn one&lt;T&gt;() -&gt; T {\n    1.0 as _\n}\n\nfn main() {\n    println!(\"{}\", one::&lt;i8&gt;());\n}\n</code></pre>\n\n<p>As-is, it gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.14.0 (e8a012324 2016-12-16)\nerror: non-scalar cast: `f64` as `T`\n --&gt; &lt;anon&gt;:2:5\n  |\n2 |     1.0 as _\n  |     ^^^^^^^^\n</code></pre>\n\n<p>A good solution would be a trait that restricts <code>T</code> to primitive numeric types (<code>i8</code>, <code>f64</code>, etc.). I found <a href=\"http://aturon.github.io/stability-dashboard/std/num/trait.Primitive.html\" rel=\"nofollow noreferrer\"><code>std::num::Primitive</code></a> but it's experimental apparently and the nightly compiler couldn't find it anyway.</p>\n"}, {"tags": ["windows", "openssl", "rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482625509, "post_id": 41314016, "comment_id": 69839436, "body": "Use <code>cargo -vv build</code> to get more info."}], "answers": [{"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 0, "last_activity_date": 1482670295, "last_edit_date": 1482670295, "creation_date": 1482625385, "answer_id": 41317852, "question_id": 41314016, "link": "https://stackoverflow.com/questions/41314016/cant-build-rustless-on-windows/41317852#41317852", "title": "Can&#39;t build Rustless on Windows", "body": "<p>You are right that it is because OpenSSL is not found. A good tutorial is in the README of <a href=\"https://github.com/sfackler/rust-openssl\" rel=\"nofollow noreferrer\">rust-openssl</a>.</p>\n\n<blockquote>\n  <h3>Windows MSVC</h3>\n  \n  <p>On MSVC it's unfortunately not always a trivial process acquiring\n  OpenSSL. Perhaps the easiest way to do this right now is to download\n  <a href=\"http://slproweb.com/products/Win32OpenSSL.html\" rel=\"nofollow noreferrer\">precompiled binaries</a> and install them on your system. Currently it's\n  recommended to install the 1.1.0 (non-light) installation if you're\n  choosing this route.</p>\n  \n  <p>Once a precompiled binary is installed you can configure this crate to\n  find the installation via an environment variable:</p>\n\n<pre><code>set OPENSSL_DIR=C:\\OpenSSL-Win64\n</code></pre>\n  \n  <p>Note that this OpenSSL distribution does not ship with any root\n  certificates. So to make requests to servers on the internet, you have\n  to install them manually. Download the <a href=\"https://curl.haxx.se/docs/caextract.html\" rel=\"nofollow noreferrer\">cacert.pem file from here</a>,\n  copy it somewhere safe (<code>C:\\OpenSSL-Win64\\certs</code> is a good place) and\n  point the <code>SSL_CERT_FILE</code> environment variable there:</p>\n\n<pre><code>set SSL_CERT_FILE=C:\\OpenSSL-Win64\\certs\\cacert.pem\n</code></pre>\n  \n  <p>After that, you're just a <code>cargo build</code> away!</p>\n  \n  <h3>Windows GNU (MinGW)</h3>\n  \n  <p>The easiest way to acquire OpenSSL when working with MinGW is to\n  ensure you're using <a href=\"http://msys2.github.io\" rel=\"nofollow noreferrer\">MSYS2</a> and to then\n  execute:</p>\n\n<pre><code># 32-bit pacman -S mingw-w64-i686-openssl\n\n# 64-bit pacman -S mingw-w64-x86_64-openssl\n</code></pre>\n  \n  <p>And after that, a <code>cargo build</code> should be all you need!</p>\n  \n  <h3>Manual configuration</h3>\n  \n  <p>rust-openssl's build script will by default attempt to locate OpenSSL\n  via pkg-config or other system-specific mechanisms. This will not work\n  in some situations however, for example cross compiling or when using\n  a copy of OpenSSL other than the normal system install.</p>\n  \n  <p>The build script can be configured via environment variables:</p>\n  \n  <ul>\n  <li><code>OPENSSL_DIR</code> - If specified, a directory that will be used to find   OpenSSL installation. It's expected that under this directory the\n  <code>include</code>   folder has header files and a <code>lib</code> folder has the runtime\n  libraries.</li>\n  <li><code>OPENSSL_LIB_DIR</code> - If specified, a directory that will be used to find   OpenSSL libraries. Overrides the <code>lib</code> folder implied by\n  <code>OPENSSL_DIR</code>   (if specified).</li>\n  <li><code>OPENSSL_INCLUDE_DIR</code> - If specified, a directory that will be used to find   OpenSSL header files. Overrides the <code>include</code> folder implied\n  by <code>OPENSSL_DIR</code>   (if specified).</li>\n  <li><code>OPENSSL_STATIC</code> - If specified, OpenSSL libraries will be statically rather   than dynamically linked.</li>\n  </ul>\n  \n  <p>If <code>OPENSSL_DIR</code> is specified, then the build script will skip the\n  pkg-config step.</p>\n</blockquote>\n\n<p>It's a nightmare; OpenSSL with Windows is really painful. I hope that one day Rust has its own implementation of SSL/TLS.</p>\n"}, {"tags": [], "owner": {"reputation": 83, "user_id": 5292590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e4836e028066241f79326cc253573bc?s=128&d=identicon&r=PG&f=1", "display_name": "SchCh", "link": "https://stackoverflow.com/users/5292590/schch"}, "is_accepted": false, "score": 2, "last_activity_date": 1482694630, "last_edit_date": 1482694630, "creation_date": 1482663512, "answer_id": 41320555, "question_id": 41314016, "link": "https://stackoverflow.com/questions/41314016/cant-build-rustless-on-windows/41320555#41320555", "title": "Can&#39;t build Rustless on Windows", "body": "<p>I finally managed to build OpenSSL on Windows by following <a href=\"https://facility9.com/2016/03/installing-rust-on-windows/\" rel=\"nofollow noreferrer\">the solution from this blog post</a>. </p>\n\n<p>Here's a summary:</p>\n\n<ol>\n<li>Download Win64 OpenSSL v1.0.1u from <a href=\"http://slproweb.com/products/Win32OpenSSL.html\" rel=\"nofollow noreferrer\">here</a>. Install it with default settings.</li>\n<li><p>Set the following environment variables</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DEP_OPENSSL_INCLUDE=C:\\OpenSSL-Win64\\include\nOPENSSL_INCLUDE_DIR=C:\\OpenSSL-Win64\\include\nOPENSSL_LIB_DIR=C:\\OpenSSL-Win64\\lib\\VC\nOPENSSL_LIBS=ssleay32MT:libeay32MT\n</code></pre></li>\n<li><p>Install Visual Studio 2015 or Visual Studio Code with C++ support.</p></li>\n<li><p>Ensure that all path variables are set correctly</p></li>\n<li><p>Set <code>rust-msvc</code> as the toolchain. You can check this by typing <code>rustup show</code> into the console. You should get an output like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Default host: x86_64-pc-windows-msvc\n\nstable-x86_64-pc-windows-msvc (default)\nrustc 1.13.0 (2c6933acc 2016-11-07)\n</code></pre></li>\n</ol>\n\n<p>Now you should able to build Rust projects which requires OpenSSL. </p>\n"}], "owner": {"reputation": 83, "user_id": 5292590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e4836e028066241f79326cc253573bc?s=128&d=identicon&r=PG&f=1", "display_name": "SchCh", "link": "https://stackoverflow.com/users/5292590/schch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 726, "favorite_count": 2, "answer_count": 2, "score": 1, "last_activity_date": 1482694630, "creation_date": 1482588944, "last_edit_date": 1482632415, "question_id": 41314016, "link": "https://stackoverflow.com/questions/41314016/cant-build-rustless-on-windows", "title": "Can&#39;t build Rustless on Windows", "body": "<p>I'm trying to build the rustless <a href=\"https://github.com/rustless/rustless#basic-usage\" rel=\"nofollow noreferrer\">\"basic usage\" sample project</a>.</p>\n\n<p>This is my Cargo.toml. I had to add the dependencies in Cargo.toml in order to avoid the build error <code>error[E0463]: can't find crate for 'hyper'</code></p>\n\n<pre><code>[package]\nname = \"rustlessTest\"\nversion = \"0.1.0\"\nauthors = [\"x\"]\n\n[dependencies.rustless]\ngit = \"https://github.com/rustless/rustless\"\n\n[dependencies]\nhyper = \"0.9.14\"\niron = \"0.4.0\"\nrustc-serialize = \"0.3.22\"\nvalico = \"1.0.1\"\n</code></pre>\n\n<p>I also downloaded the OpenSSL library &amp; sources. I stored them under <code>C:\\OpenSSL\\lib and C:\\OpenSSL\\include</code> and set the directories as a environment variable, as mentioned in <a href=\"https://www.reddit.com/r/rust/comments/305ih7/using_hyper_on_windows/\" rel=\"nofollow noreferrer\">this thread</a> about how to using Hyper on Windows.</p>\n\n<p>When I try to compile, it fails with the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Build failed, waiting for other jobs to finish...\nerror: failed to run custom build command for `openssl v0.7.14`\n....\n....\n</code></pre>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 61, "user_id": 3994977, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80d1b7929361a030597030abf8ebbe7e?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Fraenkel", "link": "https://stackoverflow.com/users/3994977/daniel-fraenkel"}, "edited": false, "score": 0, "creation_date": 1482579452, "post_id": 41312320, "comment_id": 69829064, "body": "Aochagavia just pointed out to me that comparing the types wouldn&#39;t solve the problem in my example. Still I hope this question illustrates the problem.  I guess there is no elegant solution and that I just have to verify at runtime. Or perhaps it can be solved with a procedural macro, but that seems a bit overkill."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1482579736, "post_id": 41312320, "comment_id": 69829119, "body": "You would need to come up with a way for the compiler to check: &quot;I know that this implementation of Serialize always returns Objects&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 3994977, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80d1b7929361a030597030abf8ebbe7e?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Fraenkel", "link": "https://stackoverflow.com/users/3994977/daniel-fraenkel"}, "edited": false, "score": 0, "creation_date": 1482579110, "post_id": 41312690, "comment_id": 69828975, "body": "You&#39;re absolutely right. So &#39;type checking&#39; the struct would not be the right solution for the example. The pattern match needs to be done at runtime, which is unfortunate. It&#39;s just too bad that I need to let the process panic for something that in principle could be known at compile time."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 61, "user_id": 3994977, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80d1b7929361a030597030abf8ebbe7e?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Fraenkel", "link": "https://stackoverflow.com/users/3994977/daniel-fraenkel"}, "edited": false, "score": 0, "creation_date": 1482579454, "post_id": 41312690, "comment_id": 69829066, "body": "There are lots of things known at compile time that are just thrown away. Even in a language that supports reasoning about code, imagine how difficult it would be for the <i>programmer</i> to explain their intent to the compiler. This gets very complex, very fast. You essentially have to write a mathematical proof that the compiler is able to understand."}, {"owner": {"reputation": 61, "user_id": 3994977, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80d1b7929361a030597030abf8ebbe7e?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Fraenkel", "link": "https://stackoverflow.com/users/3994977/daniel-fraenkel"}, "edited": false, "score": 0, "creation_date": 1482579983, "post_id": 41312690, "comment_id": 69829178, "body": "I agree. In this case a more pragmatic runtime solution should not be a problem."}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 2, "last_activity_date": 1482580109, "last_edit_date": 1482580109, "creation_date": 1482577492, "answer_id": 41312690, "question_id": 41312320, "link": "https://stackoverflow.com/questions/41312320/is-it-possible-to-do-a-compile-time-type-check-on-a-generic-in-rust/41312690#41312690", "title": "Is it possible to do a compile time type check on a generic in Rust?", "body": "<p>Even if you managed to compare the types at compile time, nothing prevents a <code>struct</code> from being serialized as a <code>Json::I64</code>. Its <code>Serialize</code> implementation could be anything! I can think of some partial solutions:</p>\n\n<h3>Runtime checks</h3>\n\n<p>Add a runtime check to see if the result is indeed a <code>Json::Object</code> by pattern matching. You could combine this with an assertion in case you expect this to be always true. I think this is what you are doing now.</p>\n\n<h3>Introducing a custom trait</h3>\n\n<p>It would be possible to create a new trait:</p>\n\n<pre><code>trait SerializeAsObject : Serialize {}\n</code></pre>\n\n<p>Which you would then implement only for those data types you are sure will be serialized as objects. However, nothing prevents you from implementing the trait for <code>i64</code>, so there is still room for error here.</p>\n\n<h3>A real solution: dependent types</h3>\n\n<p>You would probably need a type system supporting <a href=\"https://en.wikipedia.org/wiki/Dependent_type\" rel=\"nofollow noreferrer\">dependent types</a> in order to ensure that serialization of a data type always results in a given kind of output. As far as I know, such a type system is so complex that there are no widely used languages out there supporting it (you could take a look at <a href=\"http://www.idris-lang.org/\" rel=\"nofollow noreferrer\">Idris</a> in case you want to know more about this).</p>\n\n<h3>Thoughts on compile-time checks</h3>\n\n<p>While it is great to have compile-time checks, the compiler can only go so far. In my experience, using dependent types in real world programming is not worth the hassle. For instance, in this case, you would need to provide a mathematical proof so the compiler can understand that the implementation of <code>Serialize</code> always results in serialization of an object.</p>\n\n<p>Even then, there is no way to ensure a program is bug free! Therefore I think in this case the right thing to do would be to use an assertion, document that your function will panic in case the data cannot be serialized as an object, and write unit tests to ensure it is called correctly.</p>\n"}], "owner": {"reputation": 61, "user_id": 3994977, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80d1b7929361a030597030abf8ebbe7e?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Fraenkel", "link": "https://stackoverflow.com/users/3994977/daniel-fraenkel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1405, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1482597938, "creation_date": 1482574242, "last_edit_date": 1482597938, "question_id": 41312320, "link": "https://stackoverflow.com/questions/41312320/is-it-possible-to-do-a-compile-time-type-check-on-a-generic-in-rust", "title": "Is it possible to do a compile time type check on a generic in Rust?", "body": "<p>I don't want to check whether a type has a certain trait but I would like to be able to differentiate between, e.g. a struct and an integer. Since both a struct and an integer can implement the same trait, I don't know how I could tell them apart.</p>\n\n<p>The reason that I want to do this is because I am using serde_json to convert a generic type to JSON but I <strong>only</strong> want it to become a JSON <code>Object</code> (which happens when it is a struct) but it should not convert to anything else (like an JSON <code>I64</code>). Since both structs and integers can implement the <code>Serialize</code> trait, there is no way to tell them apart.</p>\n\n<p>Currently, I let the process panic because it is not an error it could recover from, but since I could potentially know this at compile time, I am wondering whether there is any mechanism to determine the type at the compile stage.</p>\n\n<p>I would like to know how I can tell types apart by their \"kind\" and not by their traits.</p>\n"}, {"tags": ["http-headers", "rust", "hyper"], "answers": [{"comments": [{"owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1482579018, "post_id": 41312697, "comment_id": 69828957, "body": "cool, this is really helpful, thanks. I think <code>hyper</code> may prefer combining the cookies in one header field with semicolon split... (<a href=\"http://hyper.rs/hyper/async/hyper/header/struct.Cookie.html\" rel=\"nofollow noreferrer\">hyper.rs/hyper/async/hyper/header/struct.Cookie.html</a>)"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "edited": false, "score": 0, "creation_date": 1482579194, "post_id": 41312697, "comment_id": 69828999, "body": "You&#39;re welcome! Yeah, getting at code reuse with the server side of the library sounds like another good reason to keep the cookies together."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 2, "last_activity_date": 1484609238, "last_edit_date": 1484609238, "creation_date": 1482577609, "answer_id": 41312697, "question_id": 41312150, "link": "https://stackoverflow.com/questions/41312150/how-to-correctly-handle-multiple-set-cookie-headers-in-hyper/41312697#41312697", "title": "How to correctly handle multiple Set-Cookie headers in Hyper?", "body": "<p>I think that Hyper prefers to keep the cookies together in order to make it easier do some extra stuff with them, like checking a cryptographic signature with <a href=\"https://docs.rs/hyper/0.9.14/hyper/header/struct.CookieJar.html\" rel=\"nofollow noreferrer\"><code>CookieJar</code></a> (cf. <a href=\"https://github.com/hyperium/hyper/pull/71#issuecomment-58246056\" rel=\"nofollow noreferrer\">this implementation outline</a>).</p>\n\n<p>Another reason might be to keep the API simple. Headers in Hyper are indexed by type and you can only get a single instance of that type with <a href=\"https://docs.rs/hyper/0.9.14/hyper/header/struct.Headers.html#method.get\" rel=\"nofollow noreferrer\"><code>Headers::get</code></a>.</p>\n\n<p>In Hyper, you'd usually access a header by using a corresponding type. In this case the type is <a href=\"https://docs.rs/hyper/0.9.14/hyper/header/struct.SetCookie.html\" rel=\"nofollow noreferrer\"><code>SetCookie</code></a>. For example:</p>\n\n<pre><code>if let Some (&amp;SetCookie (ref cookies)) = response.headers.get() {\n    for cookie in cookies.iter() {\n        println! (\"Got a cookie. Name: {}. Value: {}.\", cookie.name, cookie.value);\n    }\n}\n</code></pre>\n\n<p>Accessing the raw header value of Set-Cookie makes less sense, because then you'll have to reimplement a proper parsing of quotes and cookie attributes (cf. <a href=\"https://tools.ietf.org/html/rfc6265#section-4.1.1\" rel=\"nofollow noreferrer\">RFC 6265, 4.1</a>).</p>\n\n<hr>\n\n<p>P.S. Note that in Hyper 10 the cookie is no longer parsed, <a href=\"https://github.com/hyperium/hyper/commit/f22701f7e7258ad4a26645eba47a3d374e452e86\" rel=\"nofollow noreferrer\">because</a> the crate that was used for the parsing triggers the openssl dependency hell.</p>\n"}], "owner": {"reputation": 3233, "user_id": 2487227, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yLbAE.jpg?s=128&g=1", "display_name": "Frederick Zhang", "link": "https://stackoverflow.com/users/2487227/frederick-zhang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 965, "favorite_count": 0, "accepted_answer_id": 41312697, "answer_count": 1, "score": 2, "last_activity_date": 1484609238, "creation_date": 1482572849, "last_edit_date": 1482597811, "question_id": 41312150, "link": "https://stackoverflow.com/questions/41312150/how-to-correctly-handle-multiple-set-cookie-headers-in-hyper", "title": "How to correctly handle multiple Set-Cookie headers in Hyper?", "body": "<p>I'm using Hyper to send HTTP requests, but when multiple cookies are included in the response, Hyper will combine them to one which then fails the parsing procedure.</p>\n\n<p>For example, here's a simple PHP script</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>&lt;?php\n\nsetcookie(\"hello\", \"world\");\nsetcookie(\"foo\", \"bar\");\n</code></pre>\n\n<p>Response using curl:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ curl -sLD - http://local.example.com/test.php\nHTTP/1.1 200 OK\nDate: Sat, 24 Dec 2016 09:24:04 GMT\nServer: Apache/2.4.25 (Unix) PHP/7.0.14\nX-Powered-By: PHP/7.0.14\nSet-Cookie: hello=world\nSet-Cookie: foo=bar\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\n</code></pre>\n\n<p>However for the following Rust code:</p>\n\n<pre><code>let client = Client::new();\nlet response = client.get(\"http://local.example.com/test.php\")\n    .send()\n    .unwrap();\nprintln!(\"{:?}\", response);\nfor header in response.headers.iter() {\n    println!(\"{}: {}\", header.name(), header.value_string());\n}\n</code></pre>\n\n<p>...the output will be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Response { status: Ok, headers: Headers { Date: Sat, 24 Dec 2016 09:31:54 GMT, Server: Apache/2.4.25 (Unix) PHP/7.0.14, X-Powered-By: PHP/7.0.14, Set-Cookie: hello=worldfoo=bar, Content-Length: 0, Content-Type: text/html; charset=UTF-8, }, version: Http11, url: \"http://local.example.com/test.php\", status_raw: RawStatus(200, \"OK\"), message: Http11Message { is_proxied: false, method: None, stream: Wrapper { obj: Some(Reading(SizedReader(remaining=0))) } } }\nDate: Sat, 24 Dec 2016 09:31:54 GMT\nServer: Apache/2.4.25 (Unix) PHP/7.0.14\nX-Powered-By: PHP/7.0.14\nSet-Cookie: hello=worldfoo=bar\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\n</code></pre>\n\n<p>This seems to be really weird to me. I used Wireshark to capture the response and there're <strong>two</strong> <code>Set-Cookie</code> headers in it. I also checked the Hyper documentation but got no clue...</p>\n\n<p>I noticed Hyper internally uses a <code>VecMap&lt;HeaderName, Item&gt;</code> to store the headers. So they concatenate the them to one? Then how should I divide them into individual cookies afterwards?</p>\n"}, {"tags": ["functional-programming", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1482569696, "post_id": 41310995, "comment_id": 69826805, "body": "I tried, but the more I did the less sane it looked."}], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482572488, "post_id": 41312076, "comment_id": 69827399, "body": "The OP wrote a tuple with a tuple inside <code>(usize, (usize, &amp;char))</code>. You solution work anyway? I&#39;m learning rust, so it&#39;s a newbie comment."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1482572671, "post_id": 41312076, "comment_id": 69827444, "body": "The question also asked if the tuple could be flattened, i.e. removing the tuple nesting."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 4, "last_activity_date": 1482572239, "creation_date": 1482572239, "answer_id": 41312076, "question_id": 41310995, "link": "https://stackoverflow.com/questions/41310995/how-can-i-search-through-a-2d-array-without-for-loops/41312076#41312076", "title": "How can I search through a 2D array without for loops?", "body": "<p>Here's my attempt, which does flatten the tuples:</p>\n\n<pre><code>let locs: Vec&lt;(usize, usize, char)&gt; = grid.iter()\n    .enumerate()\n    .flat_map(|(y, row)| {\n        row.iter()\n           .enumerate()\n           .map(move |(x, &amp;c)| (x,y,c))\n    })\n    .filter(|&amp;(_,_,c)| c == 'x')\n    .collect();\nprintln!(\"{:?}\", locs)\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=971e4e82a0fe021a3e733cefa8fd0541&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>My approach was to first flatten to <code>(x,y,c)</code> and then filter.  I took the liberty of returning the actual <code>char</code>s rather than references.</p>\n\n<p>The <code>move</code> closure was needed because otherwise the inner closure (which lives longer, inside the iterator, than the outer closure) had a reference to the outer <code>y</code>.</p>\n\n<p>If I wanted to do this more often, I would write an <code>Iterator</code> implementation which let me do:</p>\n\n<pre><code>let locs: Vec&lt;(usize, usize, char) =\n    iter2d(grid)\n    .filter(&amp;|_,_,c| c == 'x')\n    .collect();\n</code></pre>\n\n<p>The implementation is left as an exercise for the reader.  :-)</p>\n"}], "owner": {"reputation": 325, "user_id": 170993, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/5b9b07a1e96b1b5acee26709f699c0d1?s=128&d=identicon&r=PG", "display_name": "nqe", "link": "https://stackoverflow.com/users/170993/nqe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 166, "favorite_count": 0, "accepted_answer_id": 41312076, "answer_count": 1, "score": 3, "last_activity_date": 1482597649, "creation_date": 1482561639, "last_edit_date": 1482597649, "question_id": 41310995, "link": "https://stackoverflow.com/questions/41310995/how-can-i-search-through-a-2d-array-without-for-loops", "title": "How can I search through a 2D array without for loops?", "body": "<p>I have a <code>Vec&lt;Vec&lt;char&gt;&gt;</code> and I want to find all the x,y positions of a specific character, let's say 'x'. I can use a double for loop with enumerate and manually build up the solution (and I would guess this is the sane thing to do), but is there a nice way to do it with nothing but iterators?</p>\n\n<p>More or less I'm looking for ways to clean this up:</p>\n\n<pre><code>let locs: Vec&lt;(usize, (usize, &amp;char))&gt; = grid.iter()\n    .enumerate()\n    .flat_map(|(ind, row)|\n          iter::repeat(ind)\n            .zip(row.iter()\n               .enumerate()))\n    .filter(|&amp;(x, (y, ch))| ch == 'x')\n    .collect();\n</code></pre>\n\n<p>For one, is there a way to flatten the tuples?</p>\n"}, {"tags": ["iterator", "rust", "nested-loops", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482534546, "post_id": 41308788, "comment_id": 69820718, "body": "(I have the feeling my explanation is crap, but the text is getting long I can&#39;t think anymore. It&#39;s a tough topic and explaining it in one SO answer is a lot. Maybe I&#39;ll write a blog post about this... sorry for &quot;not my best&quot; :/)"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1482534719, "post_id": 41308788, "comment_id": 69820762, "body": "<i>&quot;The Rust compiler determines what kind of access to the environment is needed and chooses the &quot;least intrusive&quot; option that works.&quot;</i> A <code>move</code> closure always captures by value, a non-<code>move</code> closure always captures by reference (either with a mutable borrow if it&#39;s necessary or with an immutable borrow otherwise)."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1482534826, "post_id": 41308788, "comment_id": 69820794, "body": "@FrancisGagn&#233; I thought that for a long time, too. But no, closures can take their env by value without <code>move</code>: <a href=\"https://play.rust-lang.org/?gist=b1877b80394451899c894865c58fa58b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">see here</a>."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1482536754, "post_id": 41308788, "comment_id": 69821221, "body": "I guess I didn&#39;t really understand how <code>flat_map</code> is supposed to work either. This is a great answer!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1482538016, "post_id": 41308788, "comment_id": 69821484, "body": "@FrancisGagn&#233; yup; if any functions or methods in the closure take a closed-over variable by value, the compiler will know it needs to be <code>move</code>d in. However, if a method/function only needs it by reference, it will only go that far. <code>move</code> forces all the variables to be moved in."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1482537933, "last_edit_date": 1482537933, "creation_date": 1482534490, "answer_id": 41308788, "question_id": 41308549, "link": "https://stackoverflow.com/questions/41308549/specifying-lifetimes-in-nested-iterators-for-flattening/41308788#41308788", "title": "Specifying lifetimes in nested iterators for flattening", "body": "<h2>Solution</h2>\n\n<p>You were really close! This works:</p>\n\n<pre><code>let coord_vec: Vec&lt;_&gt; = x_coords.iter()\n    .flat_map(|&amp;x_coord| {\n        y_coords.iter().map(move |&amp;y_coord| {\n        //                  ^^^^\n            [x_coord, y_coord]\n        })\n    })\n    .collect();\n</code></pre>\n\n<p>The only thing I added is the <code>move</code> keyword in front of the inner closure. Why? Let's try to understand what the compiler is thinking below!</p>\n\n<p>A few notes, though:</p>\n\n<ul>\n<li>I renamed <code>map</code> to <code>flat_map</code> and removed the second <code>flat_map</code> call... You made your life more complicated than it has to be ;-)</li>\n<li>I omitted part of the type annotation of <code>coord_vec</code>, because it's not necessary</li>\n</ul>\n\n<h2>Explanation</h2>\n\n<p>The type <code>x_coord</code> is <code>i32</code> (or any other integer). Not a reference or anything but the value directly. This means that <code>x_coord</code> is owned by the enclosing function, which happens to be a closure, specifically the \"outer\" closure, that you pass to <code>flat_map</code>. Thus <code>x_coord</code> lives just inside the closure, not longer. That's what the compiler is telling you. So far so good.</p>\n\n<p>When you define the second closure (the \"inner\" one), you access the environment, specifically <code>x_coord</code>. The important question now is: how does a closure access its environment? It can do so with an immutable reference, with a mutable reference and by value. The Rust compiler determines what kind of access to the environment is needed and chooses the \"least intrusive\" option that works. Let's look at your code: the compiler figures out that the closure only needs to borrow the environment immutably (because <code>i32</code> is <code>Copy</code> and thus the closure can transform its <code>&amp;i32</code> into a <code>i32</code> easily).</p>\n\n<p>But in this case, the compiler's reasoning is wrong! The closure borrowing its environment leads to a limited lifetime. And in this case we need the closure to live for longer than it can, hence the error. </p>\n\n<p>By adding <code>move</code>, we force the compiler to pass the environment to the closure by value (transferring ownership). This way the closure borrows nothing and can live forever (satisfies <code>'static</code>).</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 1, "accepted_answer_id": 41308788, "answer_count": 1, "score": 3, "last_activity_date": 1482537933, "creation_date": 1482532545, "question_id": 41308549, "link": "https://stackoverflow.com/questions/41308549/specifying-lifetimes-in-nested-iterators-for-flattening", "title": "Specifying lifetimes in nested iterators for flattening", "body": "<p>I'm writing a function that should take a couple of vectors and produce their Cartesian product (all of their pair combinations) as a vector in row-major order. In other words, if I have</p>\n\n<pre><code>let x_coords = vec![1, 2, 3];\nlet y_coords = vec![4, 5, 6];\n</code></pre>\n\n<p>I want to produce</p>\n\n<pre><code>vec![ [1,4], [1,5], [1,6], [2,4], [2,5], [2,6], [3,4], [3,5], [3,6] ]\n</code></pre>\n\n<p>This seemed like a perfect job for <code>.flat_map()</code>:</p>\n\n<pre><code>fn main() {\n    let x_coords = vec![1, 2, 3];\n    let y_coords = vec![4, 5, 6];\n\n    let coord_vec: Vec&lt;[isize; 2]&gt; =\n        x_coords.iter().map(|&amp;x_coord| {\n            y_coords.iter().map(|&amp;y_coord| {\n                [x_coord, y_coord]\n            })\n        }).flat_map(|s| s).collect();\n\n    // Expecting to get: vec![ [1,4], [1,5], [1,6], [2,4], [2,5], [2,6], [3,4], [3,5], [3,6] ]\n    println!(\"{:?}\", &amp;coord_vec);\n}\n</code></pre>\n\n<p>But this doesn't work, because <code>&amp;x_coord</code> doesn't live long enough. According to the compiler, it ends up inside the <code>y_coords</code> map and then never makes it back out.</p>\n\n<p>I tried using <code>.clone()</code> and <code>move</code> in the closures, but got a strangely long and unclear lecture by the compiler in the form of multiple <code>Note:</code> lines.</p>\n\n<p>Am I just completely off base with <code>flat_map</code>, or can this be saved?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2916, "user_id": 3646096, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/KUofm.jpg?s=128&g=1", "display_name": "M&#225;rio Feroldi", "link": "https://stackoverflow.com/users/3646096/m%c3%a1rio-feroldi"}, "edited": false, "score": 0, "creation_date": 1482520667, "post_id": 41306546, "comment_id": 69816526, "body": "A <code>const fn</code> is somewhat similar to <code>constexpr</code> for that matter."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1527735831, "last_edit_date": 1527735831, "creation_date": 1482520341, "answer_id": 41306757, "question_id": 41306546, "link": "https://stackoverflow.com/questions/41306546/is-memsize-of-evaluated-at-compile-time/41306757#41306757", "title": "Is &#39;mem::size_of&#39; evaluated at compile time?", "body": "<h3>As of Rust 1.22.0</h3>\n\n<p><a href=\"https://doc.rust-lang.org/1.22.0/std/mem/fn.size_of.html\" rel=\"nofollow noreferrer\"><code>mem::size_of</code></a> is now declared as a <code>const</code> fn, which means that it is guaranteed to be <em>able</em> to be evaluated at compile time. You can make use of it in const contexts:</p>\n\n<pre><code>use std::mem;\n\nconst BYTES: usize = mem::size_of::&lt;f64&gt;();\n\nfn main() {}\n</code></pre>\n\n<h3>Prior to Rust 1.22.0</h3>\n\n<p>The only way to know for sure is to look at the LLVM IR or assembly. It is allowed for this to change over time, so if it's super important, you need to keep track of it yourself.</p>\n\n<p>As of Rust 1.14, this code:</p>\n\n<pre><code>#![crate_type=\"lib\"]\n\nuse std::mem;\n\npub fn use_it() -&gt; usize {\n    mem::size_of::&lt;String&gt;() * 8\n}\n</code></pre>\n\n<p>produces this LLVM IR when compiled in <strong>debug</strong> mode:</p>\n\n<pre><code>; Function Attrs: norecurse nounwind readnone uwtable\ndefine i64 @_ZN10playground6use_it17h005e773511657405E() unnamed_addr #0 {\nentry-block:\n  ret i64 192\n}\n</code></pre>\n\n<p>As you can see, the call to <code>size_of</code> has become the constant value <code>192</code>. Rust and/or LLVM are then able to do whatever normal optimization they want to.</p>\n\n<p>I'd believe it is safe to assume that <em>this</em> function will always be a compile-time constant.</p>\n\n<blockquote>\n  <p>Is there something equivalent to C++'s <code>constexpr</code></p>\n</blockquote>\n\n<p>See <a href=\"https://stackoverflow.com/q/41346532/155423\">Equivalent of constexpr from C++?</a></p>\n\n<p>Not yet. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\" rel=\"nofollow noreferrer\">RFC 911</a> introduced <em><code>const</code> functions</em>, functions which are able to be evaluated at compile time. The trick is that actually enabling this for everything that it should work with is difficult and predicated on some internal rewriting of the compiler.</p>\n\n<p>In nightly Rust, you can do something like:</p>\n\n<pre><code>#![feature(const_fn)]\n\nconst fn adder(a: usize, b: usize) -&gt; usize {\n    a + b\n}\n\nconst BITS: usize = adder(1, 2);\n\nfn main() {\n    println!(\"{}\", BITS);\n}\n</code></pre>\n"}], "owner": {"reputation": 404, "user_id": 2540904, "user_type": "registered", "accept_rate": 100, "profile_image": "https://graph.facebook.com/100005700121024/picture?type=large", "display_name": "MAG", "link": "https://stackoverflow.com/users/2540904/mag"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 0, "accepted_answer_id": 41306757, "answer_count": 1, "score": 3, "last_activity_date": 1527735831, "creation_date": 1482519211, "last_edit_date": 1482522252, "question_id": 41306546, "link": "https://stackoverflow.com/questions/41306546/is-memsize-of-evaluated-at-compile-time", "title": "Is &#39;mem::size_of&#39; evaluated at compile time?", "body": "<p>When using this expression:</p>\n\n<pre><code>mem::size_of::&lt;T&gt;() * 8\n</code></pre>\n\n<p>Like this:</p>\n\n<pre><code>value % (mem::size_of::&lt;T&gt;() * 8);\nvalue * (mem::size_of::&lt;T&gt;() * 8);\n</code></pre>\n\n<p>would the compiler be able to optimize it to this:</p>\n\n<pre><code>value &amp; ((mem::size_of::&lt;T&gt;() * 8) - 1);\nvalue &gt;&gt; LOG2_OF_EXPRESION;\n</code></pre>\n\n<p>Is there something equivalent to C++'s <code>constexpr</code> so I can return it from a function and use it where a compile time expression would be expected?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1482509051, "post_id": 41304437, "comment_id": 69811451, "body": "Ah,  that&#39;s subtle, but your explanation is very clear.  Thank you!"}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 6, "last_activity_date": 1482508708, "creation_date": 1482508708, "answer_id": 41304437, "question_id": 41304390, "link": "https://stackoverflow.com/questions/41304390/what-is-the-difference-between-the-two-styles-of-documentation-comments-in-rust/41304437#41304437", "title": "What is the difference between the two styles of documentation comments in Rust? (/// vs //!)", "body": "<p>The key word is <strong>containing</strong>. <code>//!</code> comments document the thing that <em>contains</em> it:</p>\n\n<pre><code>fn foo() {\n    //! a super awesome function\n    ...\n}\n</code></pre>\n\n<p><code>///</code> comments document the thing that <em>follows</em> it:</p>\n\n<pre><code>/// a super awesome function\nfn foo() {\n    ...\n}\n</code></pre>\n\n<p>The styles are otherwise equivalent. But you can only use <code>//!</code> with things that actually <em>contain</em> code -- such as crates, modules, and functions -- so that's why the doc calls out those three as examples.</p>\n"}, {"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 0, "creation_date": 1482509446, "post_id": 41304441, "comment_id": 69811620, "body": "plus one for the guidance on modules, thank you."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1482509291, "last_edit_date": 1482509291, "creation_date": 1482508719, "answer_id": 41304441, "question_id": 41304390, "link": "https://stackoverflow.com/questions/41304390/what-is-the-difference-between-the-two-styles-of-documentation-comments-in-rust/41304441#41304441", "title": "What is the difference between the two styles of documentation comments in Rust? (/// vs //!)", "body": "<p>This code:</p>\n\n<pre><code>/// I am referring to the next item\nmod foo {\n    fn bar() {}\n}\n</code></pre>\n\n<p>Is equivalent (modulo the one word difference) to this code:</p>\n\n<pre><code>mod foo {\n    //! I am referring to the enclosing item\n    fn bar() {}\n}\n</code></pre>\n\n<p>Both times, the doc comment belongs to the <code>mod</code> declaration.</p>\n\n<hr>\n\n<ul>\n<li><strong><code>///</code></strong> documents the <strong>next</strong> item</li>\n<li><strong><code>//!</code></strong> documents the <strong>enclosing</strong> item</li>\n</ul>\n\n<p>Note, that usually you would only use <code>///</code>. Documenting anything other than modules with <code>//!</code> is bad style and should be avoided. You always want to use <code>///</code> <em>except</em> if you want to document a module (including the root-module/crate); then it's fine to write the documentation inside of that module with <code>//!</code>.</p>\n"}], "owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 140, "favorite_count": 0, "closed_date": 1482508833, "accepted_answer_id": 41304437, "answer_count": 2, "score": 2, "last_activity_date": 1482509291, "creation_date": 1482508457, "last_edit_date": 1482508880, "question_id": 41304390, "link": "https://stackoverflow.com/questions/41304390/what-is-the-difference-between-the-two-styles-of-documentation-comments-in-rust", "closed_reason": "Duplicate", "title": "What is the difference between the two styles of documentation comments in Rust? (/// vs //!)", "body": "<p>The <a href=\"https://doc.rust-lang.org/book/comments.html\" rel=\"nofollow noreferrer\">Rust language doc</a> says the following about documentation comments (emphasis mine):</p>\n\n<blockquote>\n  <p>Doc comments use <code>///</code> instead of <code>//</code> [...] There is another style of doc comment, <code>//!</code>, to comment containing items (e.g. crates, modules or <strong>functions</strong>), instead of the items following it.</p>\n</blockquote>\n\n<p>And just to confuse things, the document provides an example using the <code>///</code> format to document a <strong>function</strong> (visible via the link, but omitted in the ellipsis, above).</p>\n\n<p>I've seen the two styles used pretty much synonymously before--is there a difference between them in Rust? My searches here and on the interwebs turned up nothing. </p>\n"}, {"tags": ["rust", "integer-overflow", "integer-arithmetic"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 6, "creation_date": 1482496427, "post_id": 41301485, "comment_id": 69805526, "body": "As an aside: I don&#39;t think you want to do that <i>at all.</i>  <code>(-1 % 10)</code> is <code>-1</code>, not <code>9</code>.  <code>-1isize as usize</code> is <code>18446744073709551615</code> (on 64-bit architectures)."}, {"owner": {"reputation": 1252, "user_id": 5536887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ccf33a3bd04aa3147b5d935a95f9e10d?s=128&d=identicon&r=PG&f=1", "display_name": "lmartens", "link": "https://stackoverflow.com/users/5536887/lmartens"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1482501792, "post_id": 41301485, "comment_id": 69807990, "body": "Ok, I didn&#39;t know. I thought it worked like described in <a href=\"http://math.stackexchange.com/questions/519845/modulo-of-a-negative-number\">this post</a>, but I see now that it is implemented like described in <a href=\"http://stackoverflow.com/questions/31210357/is-there-a-modulus-not-remainder-function-operation\">this post</a>. That clears it up!"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1482502018, "post_id": 41301585, "comment_id": 69808080, "body": "There&#39;s also <a href=\"https://doc.rust-lang.org/std/primitive.usize.html#method.wrapping_sub\" rel=\"nofollow noreferrer\">inherent methods on each type</a> for wrapping arithmetic."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1482501982, "last_edit_date": 1482501982, "creation_date": 1482496263, "answer_id": 41301585, "question_id": 41301485, "link": "https://stackoverflow.com/questions/41301485/panicked-at-attempt-to-subtract-with-overflow-when-cycling-backwards-though-a/41301585#41301585", "title": "Panicked at &#39;attempt to subtract with overflow&#39; when cycling backwards though a list", "body": "<p>If your code can have overflowing operations, I would suggest using <a href=\"https://doc.rust-lang.org/stable/std/num/struct.Wrapping.html\" rel=\"noreferrer\"><code>Wrapping</code></a>. You don't need to worry about casting or overflow panics when you allow it:</p>\n\n<pre><code>use std::num::Wrapping;\n\nlet zero = Wrapping(0u32);\nlet one = Wrapping(1u32);\n\nassert_eq!(std::u32::MAX, (zero - one).0);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1482504854, "last_edit_date": 1495541787, "creation_date": 1482502654, "answer_id": 41303083, "question_id": 41301485, "link": "https://stackoverflow.com/questions/41301485/panicked-at-attempt-to-subtract-with-overflow-when-cycling-backwards-though-a/41303083#41303083", "title": "Panicked at &#39;attempt to subtract with overflow&#39; when cycling backwards though a list", "body": "<p>As <a href=\"https://stackoverflow.com/questions/41301485/rust-panicked-at-attempt-to-subtract-with-overflow#comment69805526_41301485\">DK. points out</a>, you don't want wrapping semantics at the integer level:</p>\n\n<pre><code>fn main() {\n    let idx: usize = 0;\n    let len = 10;\n\n    let next_idx = idx.wrapping_sub(1) % len;\n    println!(\"{}\", next_idx) // Prints 5!!!\n}\n</code></pre>\n\n<p>Instead, you want to use modulo logic to wrap around:</p>\n\n<pre><code>let next_idx = (idx + len - 1) % len;\n</code></pre>\n\n<p>This only works if <code>len</code> + <code>idx</code> is less than the max of the type \u2014 this is much easier to see with a <code>u8</code> instead of <code>usize</code>; just set <code>idx</code> to 200 and <code>len</code> to 250.</p>\n\n<p>If you can't guarantee that the sum of the two values will always be less than the maximum value, I'd probably use the \"checked\" family of operations. This does the same level of conditional checking you mentioned you already have, but is neatly tied into a single line:</p>\n\n<pre><code>let next_idx = idx.checked_sub(1).unwrap_or(len - 1);\n</code></pre>\n"}], "owner": {"reputation": 1252, "user_id": 5536887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ccf33a3bd04aa3147b5d935a95f9e10d?s=128&d=identicon&r=PG&f=1", "display_name": "lmartens", "link": "https://stackoverflow.com/users/5536887/lmartens"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 19650, "favorite_count": 1, "accepted_answer_id": 41303083, "answer_count": 2, "score": 25, "last_activity_date": 1482504890, "creation_date": 1482495855, "last_edit_date": 1482504890, "question_id": 41301485, "link": "https://stackoverflow.com/questions/41301485/panicked-at-attempt-to-subtract-with-overflow-when-cycling-backwards-though-a", "title": "Panicked at &#39;attempt to subtract with overflow&#39; when cycling backwards though a list", "body": "<p>I am writing a cycle method for a list that moves an index either forwards or backwards. The following code is used to cycle backwards:</p>\n\n<pre><code>(i-1)%list_length\n</code></pre>\n\n<p>In this case, <code>i</code> is of the type <code>usize</code>, meaning it is unsigned. If <code>i</code> is equal to 0, this leads to an 'attempt to subtract with overflow' error. I tried to use the correct casting methods to work around this problem:</p>\n\n<pre><code>((i as isize)-1)%(list_length as isize)) as usize\n</code></pre>\n\n<p>This results in an integer overflow. </p>\n\n<p>I understand why the errors happen, and at the moment I've solved the problem by checking if the index is equal to 0, but I was wondering if there was some way to solve it by casting the variables to the correct types.</p>\n"}, {"tags": ["vector", "rust", "boxing"], "answers": [{"comments": [{"owner": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "edited": false, "score": 0, "creation_date": 1482496647, "post_id": 41301619, "comment_id": 69805623, "body": "Thanks, that works, but how does the <code>x: Box&lt;HasAreas&gt;</code> in <code>x.print_area();</code> get unboxed?  Is the unboxing automatic and where can I read the rules?"}, {"owner": {"reputation": 3370, "user_id": 2819650, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd1c2520461767f78a63e6cfb6431b1c?s=128&d=identicon&r=PG&f=1", "display_name": "coredump", "link": "https://stackoverflow.com/users/2819650/coredump"}, "reply_to_user": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "edited": false, "score": 2, "creation_date": 1482496832, "post_id": 41301619, "comment_id": 69805719, "body": "It&#39;s just automatic dereferencing for method call, that&#39;s why rust doesn&#39;t have both <code>obj.method()</code> and <code>pointer-&gt;method()</code> syntaxes, you can read here: <a href=\"https://doc.rust-lang.org/book/deref-coercions.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/deref-coercions.html</a>"}], "tags": [], "owner": {"reputation": 3370, "user_id": 2819650, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/fd1c2520461767f78a63e6cfb6431b1c?s=128&d=identicon&r=PG&f=1", "display_name": "coredump", "link": "https://stackoverflow.com/users/2819650/coredump"}, "is_accepted": true, "score": 9, "last_activity_date": 1482507855, "last_edit_date": 1482507855, "creation_date": 1482496383, "answer_id": 41301619, "question_id": 41301239, "link": "https://stackoverflow.com/questions/41301239/how-to-unbox-elements-contained-in-polymorphic-vectors/41301619#41301619", "title": "How to unbox elements contained in polymorphic vectors?", "body": "<p>You can dereference it like <code>print_area(*x)</code>, but it won't work for other reasons: the <code>Sized</code> bound for the <code>print_area</code> argument. Your function needs to know the size of its arguments.</p>\n\n<p>You have other problems in your code: you are trying to push into an immutable vector and you are trying to box moved values. These were moved after you used it in <code>print_area()</code>.</p>\n\n<p>My opinion is that it would be easier to make <code>print_area</code> a method which takes an immutable reference. This will work as you expected.</p>\n\n<pre><code>trait HasArea {\n    fn area(&amp;self) -&gt; f64;\n    fn print_area(&amp;self) {\n        println!(\"This shape has area of {}\", self.area());\n    }\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    side: f64,\n}\n\nimpl HasArea for Square {\n    fn area(&amp;self) -&gt; f64 {\n        self.side * self.side\n    }\n}\n\nfn print_area&lt;T: HasArea&gt;(shape: &amp;T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    c.print_area();\n    s.print_area();\n\n    let mut vec: Vec&lt;Box&lt;HasArea&gt;&gt; = Vec::new();\n    vec.push(Box::new(c));\n    vec.push(Box::new(s));\n\n    for x in vec {\n        x.print_area();\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 4, "last_activity_date": 1482503142, "last_edit_date": 1495540462, "creation_date": 1482496504, "answer_id": 41301646, "question_id": 41301239, "link": "https://stackoverflow.com/questions/41301239/how-to-unbox-elements-contained-in-polymorphic-vectors/41301646#41301646", "title": "How to unbox elements contained in polymorphic vectors?", "body": "<blockquote>\n  <p>After reading <a href=\"https://stackoverflow.com/a/25819164/129805\">https://stackoverflow.com/a/25819164/129805</a> it looks like Rust does automatic unboxing. Is this the case?</p>\n</blockquote>\n\n<p>Not as automatic as you might think. In fact, you were looking for an <code>unbox</code> method while <code>Box&lt;T&gt;</code> implements <code>Deref</code> for target <code>T</code>. That means you should either call <code>as_ref()</code> or rely on <code>Deref</code> coercion. Note that a <code>T</code> is not possible for unsized types, and since you are relying on polymorphic types, the consumer function will have to accept a reference.</p>\n\n<p>I took the liberty of fixing <code>main</code> and <code>print_area</code> to make it work. The vector was also improperly declared as immutable.</p>\n\n<pre><code>fn print_area&lt;T: HasArea + ?Sized&gt;(shape: &amp;T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    print_area(&amp;c);\n    print_area(&amp;s);\n\n    let mut vec: Vec&lt;Box&lt;HasArea&gt;&gt; = Vec::new();\n    vec.push(Box::new(c));\n    vec.push(Box::new(s));\n\n    for x in vec {\n        print_area(&amp;*x)\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1482496805, "post_id": 41301692, "comment_id": 69805706, "body": "My understanding of the question is that OP really wanted to have an owning vector."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1482496882, "post_id": 41301692, "comment_id": 69805742, "body": "Yes, I&#39;m just including an alternative way to handle a <code>Vec</code> of traits since there other issues with the OP&#39;s code and they might want to do additional research."}, {"owner": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "edited": false, "score": 0, "creation_date": 1482497269, "post_id": 41301692, "comment_id": 69805917, "body": "Thanks for your answer, it is also useful, but what I really didn&#39;t understand was the Rust <i>was</i> doing automatic unboxing in the referenced question.  As you might guess, I&#39;m just learning Rust."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1482496666, "creation_date": 1482496666, "answer_id": 41301692, "question_id": 41301239, "link": "https://stackoverflow.com/questions/41301239/how-to-unbox-elements-contained-in-polymorphic-vectors/41301692#41301692", "title": "How to unbox elements contained in polymorphic vectors?", "body": "<p>As an alternative to what E_net4 suggested, instead of boxing your traits you could use a <code>Vec</code> with references to make it work:</p>\n\n<pre><code>fn print_area&lt;T: HasArea+?Sized&gt;(shape: &amp;T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nlet mut vec: Vec&lt;&amp;HasArea&gt; = Vec::new();\nvec.push(&amp;c);\nvec.push(&amp;s);\n\nfor x in vec {\n    print_area(x)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1482504035, "last_edit_date": 1495541854, "creation_date": 1482503712, "answer_id": 41303317, "question_id": 41301239, "link": "https://stackoverflow.com/questions/41301239/how-to-unbox-elements-contained-in-polymorphic-vectors/41303317#41303317", "title": "How to unbox elements contained in polymorphic vectors?", "body": "<p>To answer your <em>direct</em> question:</p>\n\n<blockquote>\n  <p>How to unbox elements contained in polymorphic vectors?</p>\n</blockquote>\n\n<p>You <strong>cannot</strong>. Once something has been boxed and had the concrete type erased, that's it. A <code>Box&lt;SomeTrait&gt;</code> cannot be made back into a <code>SomeConcreteType</code>, because nothing knows what that concrete type is.</p>\n\n<hr>\n\n<p>To solve the problem in the code... check the error message again:</p>\n\n<blockquote>\n  <p>the trait bound <code>Box&lt;HasArea&gt;: HasArea</code> is not satisfied</p>\n</blockquote>\n\n<p>That's because a reference to a trait (or a box of a trait) <a href=\"https://stackoverflow.com/q/28799372/155423\"><strong>does not implement that trait</strong></a>!</p>\n\n<p>To allow your program to compile and run as you originally wrote it, you only need to implement the trait for boxes, and we might as well do references too:</p>\n\n<pre><code>impl&lt;T: ?Sized&gt; HasArea for Box&lt;T&gt;\n    where T: HasArea\n{\n    fn area(&amp;self) -&gt; f64 { (**self).area() }    \n}\n\nimpl&lt;'a, T: ?Sized&gt; HasArea for &amp;'a T\n    where T: HasArea\n{\n    fn area(&amp;self) -&gt; f64 { (**self).area() }    \n}\n</code></pre>\n\n<p>This allows your fixed-up main to run:</p>\n\n<pre><code>fn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    print_area(&amp;c);\n    print_area(&amp;s);\n\n    let vec: Vec&lt;Box&lt;HasArea&gt;&gt; = vec![Box::new(c), Box::new(s)];\n\n    for x in vec {\n        print_area(x)\n    }\n}\n</code></pre>\n\n<p>Here, we pass a reference of <code>c</code> and <code>s</code> to <code>print_area</code>, to avoid transferring ownership. We also use the <code>vec!</code> macro to construct the vector with much less ceremony.</p>\n"}], "owner": {"reputation": 37702, "user_id": 129805, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/F1gxS.png?s=128&g=1", "display_name": "fadedbee", "link": "https://stackoverflow.com/users/129805/fadedbee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1917, "favorite_count": 2, "accepted_answer_id": 41301619, "answer_count": 4, "score": 4, "last_activity_date": 1482507855, "creation_date": 1482494898, "last_edit_date": 1495541419, "question_id": 41301239, "link": "https://stackoverflow.com/questions/41301239/how-to-unbox-elements-contained-in-polymorphic-vectors", "title": "How to unbox elements contained in polymorphic vectors?", "body": "<p>After reading <a href=\"https://stackoverflow.com/a/25819164/129805\">this answer to \"Vector of objects belonging to a trait\"</a>, it looks like Rust does automatic unboxing.  Is this the case?</p>\n\n<p>My code doesn't compile and I don't understand how that answer's code could compile.</p>\n\n<p>What is the correct way to unbox the elements of a polymorphic vector, one containing boxed traits?</p>\n\n<p>I've read <a href=\"http://rustbyexample.com/std/box.html\" rel=\"nofollow noreferrer\">Rust by Example</a> and <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"nofollow noreferrer\">the <code>Box</code> documentation</a> and I can't see any method that looks like <code>unbox()</code>.</p>\n\n<p>My code is:</p>\n\n<pre><code>trait HasArea {\n    fn area(&amp;self) -&gt; f64;\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&amp;self) -&gt; f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    side: f64,\n}\n\nimpl HasArea for Square {\n    fn area(&amp;self) -&gt; f64 {\n        self.side * self.side\n    }\n}\n\nfn print_area&lt;T: HasArea&gt;(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    print_area(c);\n    print_area(s);\n\n    let vec: Vec&lt;Box&lt;HasArea&gt;&gt; = Vec::new();\n    vec.push(Box::new(c));\n    vec.push(Box::new(s));\n\n    for x in vec {\n        print_area(x)\n    }\n}\n</code></pre>\n\n<p>My error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling rustgraph v0.1.0 (file:///home/chris/lunch/rustgraph)\nerror[E0277]: the trait bound `Box&lt;HasArea&gt;: HasArea` is not satisfied\n  --&gt; src/main.rs:54:9\n   |\n54 |         print_area(x)\n   |         ^^^^^^^^^^ the trait `HasArea` is not implemented for `Box&lt;HasArea&gt;`\n   |\n   = note: required by `print_area`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1482455385, "post_id": 41293786, "comment_id": 69790549, "body": "What you&#39;re trying is not possible. <code>index()</code> will always return a reference and you can&#39;t return a reference to the function local <code>Option&lt;T&gt;</code>, because it doesn&#39;t live long enough. Apart from that, I <i>think</i> (just a wild guess) that the lifetime issue is actually the same as with <i>streaming iterators</i>. If that&#39;s the case, Rust&#39;s type system is not powerful enough to express this yet. But anyway, you don&#39;t want to return an <code>Option&lt;T&gt;</code> via <code>index()</code>, as it&#39;s expected to panic on an invalid index. Just write a <code>get()</code> method, like the hashmap does. I hope that maybe helped."}, {"owner": {"reputation": 173, "user_id": 7332766, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/09c09b5a09dd0212bb9db55e05bcd4b1?s=128&d=identicon&r=PG&f=1", "display_name": "divbyzero", "link": "https://stackoverflow.com/users/7332766/divbyzero"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482456047, "post_id": 41293786, "comment_id": 69790659, "body": "Yes, I believe you are correct. Semantically, <code>Index</code> should panic, so  <code>get()</code> is the better choice."}], "answers": [{"comments": [{"owner": {"reputation": 173, "user_id": 7332766, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/09c09b5a09dd0212bb9db55e05bcd4b1?s=128&d=identicon&r=PG&f=1", "display_name": "divbyzero", "link": "https://stackoverflow.com/users/7332766/divbyzero"}, "edited": false, "score": 0, "creation_date": 1482889172, "post_id": 41309174, "comment_id": 69910475, "body": "The logic is a little more involved, so the look up may not actually be on a hash in some cases; anyway this is what I was using - it saves having to write boiler plate just to map the look up onto the internal container."}], "tags": [], "owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "is_accepted": true, "score": 1, "last_activity_date": 1482538400, "creation_date": 1482538400, "answer_id": 41309174, "question_id": 41293786, "link": "https://stackoverflow.com/questions/41293786/unconstrained-lifetime-error-when-implementing-index-trait/41309174#41309174", "title": "Unconstrained lifetime error when implementing Index trait", "body": "<p>As has been pointed out in the comments, you won't be able to do exactly what you want.  But, what it seems like you really want is to replicate <code>HashMap</code>'s <code>get</code> method. So I would suggest either writing your own, or implmenting <code>Deref</code> (and <em>not</em> <code>DerefMut</code>) to give the struct's owner <em>immutable</em> access directly to the internal <code>HashMap</code>.  Hopefully that means the user can't mess up your struct's internal logic.  Keep in mind that if you do both then <code>Deref</code> will not be used to called <code>HashMap::get</code> because <code>Test::get</code> will be available.</p>\n\n<pre><code>struct FooMap {\n    data: HashMap&lt;String, String&gt;\n}\n</code></pre>\n\n<p>Replicating <code>get</code>:</p>\n\n<pre><code>impl FooMap {\n    pub fn get(&amp;self, index: &amp;str) -&gt; Option&lt;&amp;String&gt; { self.data.get(index) }\n}\n</code></pre>\n\n<p>Using <code>Deref</code>:</p>\n\n<pre><code>impl Deref for FooMap {\n    type Target = HashMap&lt;String, String&gt;;\n    fn deref(&amp;self) -&gt; &amp;Self::Target { &amp;self.data }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c27981ecba3bc60fbc90e0cf2f26134a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Example code on Rust Playground</a></p>\n"}], "owner": {"reputation": 173, "user_id": 7332766, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/09c09b5a09dd0212bb9db55e05bcd4b1?s=128&d=identicon&r=PG&f=1", "display_name": "divbyzero", "link": "https://stackoverflow.com/users/7332766/divbyzero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1368, "favorite_count": 2, "accepted_answer_id": 41309174, "answer_count": 1, "score": 6, "last_activity_date": 1482538400, "creation_date": 1482454395, "last_edit_date": 1482454671, "question_id": 41293786, "link": "https://stackoverflow.com/questions/41293786/unconstrained-lifetime-error-when-implementing-index-trait", "title": "Unconstrained lifetime error when implementing Index trait", "body": "<p>I have a struct that owns a <code>HashMap&lt;String, String&gt;</code>, </p>\n\n<pre><code>struct Test {\n    data: HashMap&lt;String, String&gt;,\n}\n</code></pre>\n\n<p>I am trying to implement the <code>Index</code> trait for this type to map to the <code>Index</code> implementation of the hashmap (there's other logic involved so I cannot expose the hashmap). </p>\n\n<p>This works if I am just getting a reference to the value in the hashmap:</p>\n\n<pre><code>impl&lt;'b&gt; Index&lt;&amp;'b str&gt; for Test {\n    type Output = String;\n    fn index(&amp;self, k: &amp;'b str) -&gt; &amp;String {\n        self.data.get(k).unwrap()\n    }\n}\n</code></pre>\n\n<p>However, I want to get <code>&amp;Option&lt;&amp;String&gt;</code> out of it, like <code>data.get()</code>. So I tried this:</p>\n\n<pre><code>impl&lt;'b, 'a&gt; Index&lt;&amp;'b str&gt; for Test {\n    type Output = Option&lt;&amp;'a String&gt;;\n    fn index(&amp;'a self, k: &amp;'b str) -&gt; &amp;Option&lt;&amp;'a String&gt; {\n        &amp;self.data.get(k)\n    }\n}\n</code></pre>\n\n<p>This results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n --&gt; &lt;anon&gt;:8:10\n  |\n8 | impl&lt;'b, 'a&gt; Index&lt;&amp;'b str&gt; for Test {\n  |          ^^ unconstrained lifetime parameter\n</code></pre>\n\n<p>I understand the \"<code>unconstrained lifetime parameter</code> in <code>'a</code>\". Now <code>'a</code> is the lifetime of <code>Test</code> itself, so I want (I think) <code>where 'Self: 'a</code> (so <code>self</code> lives at least as long as <code>'a</code> ) . I cannot seem to figure this out for <code>Index</code> impl? I tried some things with adding <code>PhantomData</code> to my <code>Test</code>. But I am not getting anywhere. Any suggestions?  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482443519, "post_id": 41290234, "comment_id": 69787078, "body": "This is dangerously close to &quot;primarily opinion based&quot;. But I think it&#39;s valid to ask for some basic guidelines about project/module design. <i>belst</i> mentiones one guideline: organize by logic. And there is absolutely no &quot;one module per struct&quot; rule! Especially in Rust, it wouldn&#39;t make any sense to define only one type per module."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482443546, "post_id": 41290234, "comment_id": 69787098, "body": "Oh and usually, you can learn from big, existing Rust crates, for example <code>std</code> itself!"}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482453704, "post_id": 41290234, "comment_id": 69790182, "body": "&quot;Primarily opinion based&quot;, I tried my best not to, did I not? ;-)"}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482443326, "post_id": 41290714, "comment_id": 69786993, "body": "Slightly confusing: whether to save the module &quot;foo&quot; in <code>foo.rs</code> or <code>foo&#47;mod.rs</code> doesn&#39;t directly depend on the size of the module, but whether or not it has submodules/children. Usually, only modules saved in <code>foo&#47;mod.rs</code> may have child modules. Maybe you want to clarify that in your question? :)"}], "tags": [], "owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "is_accepted": true, "score": 5, "last_activity_date": 1482483837, "last_edit_date": 1482483837, "creation_date": 1482436381, "answer_id": 41290714, "question_id": 41290234, "link": "https://stackoverflow.com/questions/41290234/is-there-a-conventional-way-for-organizing-a-rust-project/41290714#41290714", "title": "Is there a conventional way for organizing a Rust project?", "body": "<p>Try to plan how your program will be organized in terms of logic rather than objects. Split your logic into separate modules.</p>\n\n<p>If a you have a small module make it a single file <code>modname.rs</code> or if it is a bigger module (consisting of submodules) create a folder with at least a <code>mod.rs</code> file in it: <code>modname/mod.rs</code>.</p>\n\n<p>If your project gets really huge you could also split it into several crates (libraries) which you then depend on in your main project.</p>\n\n<p>You can read more about Rusts crates and module system in the official rust book: <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/book/crates-and-modules.html</a></p>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1308, "favorite_count": 0, "accepted_answer_id": 41290714, "answer_count": 1, "score": 3, "last_activity_date": 1482483837, "creation_date": 1482434169, "last_edit_date": 1482435762, "question_id": 41290234, "link": "https://stackoverflow.com/questions/41290234/is-there-a-conventional-way-for-organizing-a-rust-project", "title": "Is there a conventional way for organizing a Rust project?", "body": "<p>Is there is a standard fashion for organizing a Rust project? I have been working with C-family programming languages for over nine years, but Rust seems different in some aspects.</p>\n\n<p>Is one supposed to organize their projects in a similar manner to C-family languages, especially object-oriented such?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>project\n|-&gt;src\n   |-&gt;main.rs\n   |-&gt;structs.rs\n</code></pre>\n\n<p>Or perhaps in this way?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>project\n|-&gt;src\n   |-&gt;main.rs\n   |-&gt;struct0.rs\n   |-&gt;struct1.rs\n   |-&gt;struct2.rs\n   |-&gt;struct3.rs\n</code></pre>\n\n<p>That is, one file per struct?</p>\n\n<p>Or does one create new binary projects every time they make a new part of their program? I am currently using Cargo to generate my projects, but to be fair do not know too much about it. Eventually, there will come a point when I read through the entire Cargo documentation, although I would like to get a little more acquainted with Rust prior to that.</p>\n\n<p>Kindly explain in both trees and text, as well as possibly some pieces of code.</p>\n"}, {"tags": ["collections", "rust", "iteration"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1482436307, "creation_date": 1482436307, "answer_id": 41290694, "question_id": 41290104, "link": "https://stackoverflow.com/questions/41290104/iterate-over-the-sorted-elements-in-a-collection-in-tuples/41290694#41290694", "title": "Iterate over the sorted elements in a collection in tuples", "body": "<p>Itertools provides the <a href=\"https://docs.rs/itertools/0.5.8/itertools/trait.Itertools.html#method.tuple_windows\" rel=\"nofollow noreferrer\"><code>tuple_windows</code></a> method:</p>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\nuse std::collections::BTreeSet;\n\nfn main() {\n    let items: BTreeSet&lt;_&gt; = vec![1, 3, 2].into_iter().collect();\n\n    for (a, b) in items.iter().tuple_windows() {\n        println!(\"{} &lt; {}\", a, b);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Note that <code>windows</code> is a method on <em>slices</em>, not on iterators, and it returns an iterator of subslices of the original slice. A <code>BTreeMap</code> presumably cannot provide that same iterator interface because it isn't built on top of a contiguous hunk of data; there's going to be some value that isn't immediately next in memory to the subsequent value.</p>\n"}], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 0, "accepted_answer_id": 41290694, "answer_count": 1, "score": 3, "last_activity_date": 1482449269, "creation_date": 1482433588, "last_edit_date": 1482449269, "question_id": 41290104, "link": "https://stackoverflow.com/questions/41290104/iterate-over-the-sorted-elements-in-a-collection-in-tuples", "title": "Iterate over the sorted elements in a collection in tuples", "body": "<p>I am trying to iterate over the sorted elements in a collection in tuples of 2 or more.</p>\n\n<p>If I had a <code>Vec</code>, I could call</p>\n\n<pre><code>for window in my_vec.windows(2) {\n    // do something with window\n}\n</code></pre>\n\n<p>but <code>Vec</code>s aren't implicitly sorted, which would be really nice to have. I tried to use a <code>BTreeSet</code> instead of a <code>Vec</code>, but I don't seem to be able to call <code>windows</code> on it.</p>\n\n<p>When trying to call </p>\n\n<pre><code>for window in tree_set.iter().windows(2) {\n    // do something with window\n}\n</code></pre>\n\n<p>I get the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>no method named `windows` found for type `std::collections::btree_set::Iter&lt;'_, Card&gt;` in the current scope\n</code></pre>\n"}, {"tags": ["parsing", "iterator", "rust", "peek"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482433524, "post_id": 41290069, "comment_id": 69782571, "body": "<i>but I don&#39;t know how to fit it into my parser</i> \u2014 the same way you would with <code>Peekable</code>, just using <code>Multipeek</code> instead."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1482437272, "post_id": 41290069, "comment_id": 69784352, "body": "The code example you have provided is not a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> (emphasis on <i>C</i> and <i>M</i>, here). Specifically, it&#39;s missing key pieces like the implementation of <code>next_char</code>, <code>skip_ws</code>, <code>get_identifier</code>, <code>get_pattern</code>, <code>skip_line_ws</code>, the definitions of <code>Resource</code>, <code>Map</code>, etc."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1482453617, "post_id": 41290069, "comment_id": 69790159, "body": "Are you committed to keeping a chars iterator for the data? In that case you have access to the whole string, and can use it for lookahead (I&#39;d do that without the peekable). For example: <code>chars_iter.as_str().starts_with(&quot;[[&quot;)</code>. Only if you want to use generic iterators for data, do you need to find another soln."}], "owner": {"reputation": 49, "user_id": 7331895, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0370182e9d675d34b7f1c9e8fb52e267?s=128&d=identicon&r=PG&f=1", "display_name": "zbraniecki", "link": "https://stackoverflow.com/users/7331895/zbraniecki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1140, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1482433452, "creation_date": 1482433452, "question_id": 41290069, "link": "https://stackoverflow.com/questions/41290069/writing-parser-in-rust-peeking-two-chars-ahead", "title": "Writing parser in Rust - peeking two chars ahead", "body": "<p>I'm working on a parser in Rust. The goal is to parse into an AST and then use serde to serialize the AST into JSON.</p>\n\n<p>The DSL that I'm going to parse is semi-similar to JavaScript, but much simpler.</p>\n\n<pre><code>pub struct Parser&lt;'a&gt; {\n    source: Peekable&lt;str::Chars&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Parser&lt;'a&gt; {\n    pub fn new(source: &amp;str) -&gt; Parser {\n        Parser {\n            source: source.chars().peekable(),\n        }\n    }\n\n    pub fn parse(&amp;mut self) -&gt; Resource {\n        let mut entities = Map::new();\n\n        self.skip_ws();\n\n        loop {\n            let entity = self.get_entity();\n            entities.insert(entity.id, entity);\n            self.skip_ws();\n        }\n        Resource(entities)\n    }\n\n    fn get_entity(&amp;mut self) {\n        let id = self.get_identifier();\n        self.skip_line_ws();\n\n        if !self.next_char('=') {\n            panic!();\n        }\n\n        self.bump();\n\n        self.skip_line_ws();\n\n        let value = self.get_pattern();\n\n        if self.next_char('[') &amp;&amp; self.next_char('[', 1) {\n           // get attributes\n           // return entity with attributes\n        } else {\n           // return entity without attributes\n        }\n    }\n}\n</code></pre>\n\n<p>In two cases, peeking only one character is not sufficient to identify which token I'm collecting. For example, if the peeked character is '[', and the next after it is '[', then it's not part of the entity, but if it's a '[' and then <em>not</em> '[', it's an attribute.</p>\n\n<p>I know that in theory I can use <code>next()</code> to collect a character and then use <code>peek()</code> to look into the next one, but that poses a problem when you identify that the result is not part of the Entity, because in that case, I'd like to move the pointer back one character, and return.</p>\n\n<p>That also doesn't solve the problem in the scenario where I need to peek 3 characters ahead.</p>\n\n<p>It seems to me that I either need ability to peek two chars ahead, or I need an ability to advance the iterator and then move it back.\nI found <code>multipeek</code> in Itertools that claim to allow for peeking multiple characters ahead, but I don't know how to fit it into my parser.\nCan someone guide me or point out at a different approach?</p>\n"}, {"tags": ["rust", "type-mismatch"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1482428877, "post_id": 41288979, "comment_id": 69780338, "body": "What are you returning if <code>self.alts</code> is empty?"}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1482429372, "post_id": 41288979, "comment_id": 69780586, "body": "It is guaranteed not to be."}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1482429455, "post_id": 41288979, "comment_id": 69780624, "body": "But that is a good point code-wise."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482432217, "post_id": 41288979, "comment_id": 69781977, "body": "<i>a function located in an impl of a struct</i> \u2014 those are called <b>methods</b>."}, {"owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "edited": false, "score": 0, "creation_date": 1482458056, "post_id": 41288979, "comment_id": 69791091, "body": "Yes, that would make sense. Thank you for pointing it out."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1482432784, "post_id": 41289254, "comment_id": 69782241, "body": "And in the original case, where there will be an <code>if</code> in the loop, I&#39;d advocate for something like <code>self.alts.iter().find(...).expect(&quot;There must be a func&quot;)</code>."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 6, "last_activity_date": 1482429695, "creation_date": 1482429695, "answer_id": 41289254, "question_id": 41288979, "link": "https://stackoverflow.com/questions/41288979/returning-from-inside-for-loop-causes-type-mismatch/41289254#41289254", "title": "Returning from inside for loop causes type mismatch", "body": "<p>Your <code>for</code>-loop is the last <em>expression</em> inside the function. The compiler expects the last <em>expression</em> to evaluate to the return type. But all loops evaluate to <code>()</code> (<em>unit</em> or <em>void</em>), so the compiler has a classic type mismatch there.</p>\n\n<p>The correct question to ask yourself is: what would happen if the <code>return</code> inside of the loop wouldn't be executed (for example, because the loop isn't executed at all, because <code>self.alts</code> is empty)? This would lead to problems, wouldn't it?</p>\n\n<p>So you have to return a valid object <em>after</em> the <code>for</code>-loop to cover that case. <strong>But</strong> if you are certain that the spot after the loop will never be reached you can use <code>unreachable!();</code> to tell the compiler what you already know. However, if the program will reach this spot, it will panic! So better make sure, you know for certain how the program behaves.</p>\n"}], "owner": {"reputation": 1222, "user_id": 7152817, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b2b6ef3fc885710cadba2ae10136b473?s=128&d=identicon&r=PG&f=1", "display_name": "D. Ataro", "link": "https://stackoverflow.com/users/7152817/d-ataro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 657, "favorite_count": 0, "accepted_answer_id": 41289254, "answer_count": 1, "score": 3, "last_activity_date": 1482432437, "creation_date": 1482428565, "last_edit_date": 1482432437, "question_id": 41288979, "link": "https://stackoverflow.com/questions/41288979/returning-from-inside-for-loop-causes-type-mismatch", "title": "Returning from inside for loop causes type mismatch", "body": "<p>I am attempting to return a function pointer, which is located inside a <code>for</code> loop, from a function located in an <code>impl</code> of a struct.</p>\n\n<pre><code>fn locate_func(&amp;self, string: &amp;str) -&gt; fn() -&gt; bool {\n    let mut func;\n\n    for alt in &amp;self.alts {\n        return alt.func;\n    }\n}\n</code></pre>\n\n<p>There will be an <code>if</code> statement inside the <code>for</code> loop in the future, but as I am testing things at the very moment, it looks rather generic, and somewhat illogical.</p>\n\n<p>The above code in my mind, is supposed to return the pointer to <code>alt.func()</code>, which clearly is a pointer, as it tells me so should I remove the return and semicolon of that line.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src\\main.rs:42:3\n   |\n42 |            for alt in &amp;self.alts\n   |            ^ expected fn pointer, found ()\n   |\n   = note: expected type `fn() -&gt; bool`\n   = note:    found type `()`\n</code></pre>\n\n<p>Above is the error that is caused upon running <code>locate_func()</code>. I am clearly missing something as the aforementioned code is not working properly. Any hints?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "edited": false, "score": 0, "creation_date": 1482422425, "post_id": 41287040, "comment_id": 69776289, "body": "The problem is, BTreeMap references iter over tuples of references: <a href=\"https://play.rust-lang.org/?gist=9505e5d3c1d13b3ce1d99c5853e3b031&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">So this doesn&#39;t work</a>. The fix you made only works for collections sadly. I also managed to get a version for mappings working, see the code block containing <code>validate_collection</code> and <code>validate_mapping</code>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "edited": false, "score": 0, "creation_date": 1482424058, "post_id": 41287040, "comment_id": 69777472, "body": "Do you want to validate both the key and value, or just the values?"}, {"owner": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "edited": false, "score": 0, "creation_date": 1482424349, "post_id": 41287040, "comment_id": 69777685, "body": "Preferably both, but if you have a solution for the values I&#39;d be very interested to know how you did that!"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "edited": false, "score": 0, "creation_date": 1482425224, "post_id": 41287040, "comment_id": 69778229, "body": "I&#39;ve updated with a way to work with <code>BTreeMap</code> values (but not key/value)."}, {"owner": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "edited": false, "score": 0, "creation_date": 1482429319, "post_id": 41287040, "comment_id": 69780565, "body": "Thank you, I was expecting there&#39;s no way around a custom trait. I think this fits my needs quite nicely though!"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 3, "last_activity_date": 1482425187, "last_edit_date": 1482425187, "creation_date": 1482422075, "answer_id": 41287040, "question_id": 41286617, "link": "https://stackoverflow.com/questions/41286617/expected-bound-lifetime-parameter-error-when-attempting-to-call-a-generic-func/41287040#41287040", "title": "&quot;expected bound lifetime parameter&quot; error when attempting to call a generic function", "body": "<p>Looking at your trait bounds (reformatted a little):</p>\n\n<pre><code>fn validate&lt;C, F, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug {\n</code></pre>\n\n<p>the problem is that <code>&amp;C</code> won't implement <code>IntoIterator&lt;Item = V&gt;</code>; references tend to iterate over references.</p>\n\n<p>Fixing that (and the extra reference in the closure) makes it work:</p>\n\n<pre><code>fn validate&lt;C, F, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = &amp;'c V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug\n{\n    if let Some(val) = (&amp;col).into_iter().find(|v| !pred(v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n\nfn main() {\n    println!(\"Vec: {:?}\", validate(vec![1, 2, 3, 4], |&amp;v| v &lt;= 3));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e3837b0b8747b684a45cc89e7cbc9ff3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>To extend this to work with <code>BTreeMap</code> values, we can abstract over the method used to generate the iterators.   Let's add a trait <code>HasValueIterator</code> which knows how to get an iterator over values:</p>\n\n<pre><code>trait HasValueIterator&lt;'a, V: 'a&gt; {\n    type ValueIter : Iterator&lt;Item=&amp;'a V&gt;;\n\n    fn to_value_iter(&amp;'a self) -&gt; Self::ValueIter;\n}\n</code></pre>\n\n<p>and use that instead of <code>IntoIterator</code>:</p>\n\n<pre><code>fn validate&lt;C, F, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; C: HasValueIterator&lt;'c, V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug\n{\n    if let Some(val) = (&amp;col).to_value_iter().find(|v| !pred(v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n</code></pre>\n\n<p>Now we can implement it for <code>Vec</code> and <code>BTreeMap</code> (the latter using <code>.values()</code>), thought you have to name the iterator types:</p>\n\n<pre><code>impl&lt;'c, V:'c&gt; HasValueIterator&lt;'c, V&gt; for Vec&lt;V&gt; {\n    type ValueIter = std::slice::Iter&lt;'c,V&gt;;\n\n    fn to_value_iter(&amp;'c self) -&gt; Self::ValueIter {\n        self.iter()\n    }\n}\n\nimpl&lt;'c, V:'c, K:'c&gt; HasValueIterator&lt;'c, V&gt; for BTreeMap&lt;K, V&gt; {\n    type ValueIter = std::collections::btree_map::Values&lt;'c, K, V&gt;;\n\n    fn to_value_iter(&amp;'c self) -&gt; Self::ValueIter {\n        self.values()\n    }\n\n}\n</code></pre>\n\n<p>Now this works with both <code>Vec</code> and <code>BTreeMap</code>, at least with values:</p>\n\n<pre><code>fn main() {\n    println!(\"Vec: {:?}\", validate(vec![1, 2, 3, 4], |&amp;v| v &lt;= 3));\n\n    let mut map = BTreeMap::new();\n    map.insert(\"first\", 1);\n    map.insert(\"second\", 2);\n    map.insert(\"third\", 3);\n    println!(\"Map: {:?}\", validate(map, |&amp;v| v&lt;=2));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ade6feef1d2054f403bd361aff4e4d67&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>This outputs:</p>\n\n<pre><code>Vec: Err(\"[1, 2, 3, 4] contains invalid item: 4.\")\nMap: Err(\"{\\\"first\\\": 1, \\\"second\\\": 2, \\\"third\\\": 3} contains invalid item: 3.\")\n</code></pre>\n"}], "owner": {"reputation": 2655, "user_id": 1565070, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6uZFY.jpg?s=128&g=1", "display_name": "Nikon the Third", "link": "https://stackoverflow.com/users/1565070/nikon-the-third"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 278, "favorite_count": 0, "accepted_answer_id": 41287040, "answer_count": 1, "score": 2, "last_activity_date": 1482432352, "creation_date": 1482420668, "last_edit_date": 1482432352, "question_id": 41286617, "link": "https://stackoverflow.com/questions/41286617/expected-bound-lifetime-parameter-error-when-attempting-to-call-a-generic-func", "title": "&quot;expected bound lifetime parameter&quot; error when attempting to call a generic function", "body": "<p>I am attempting to write a function that validates a given collection using a closure. The function takes ownership of a collection, iterates over the contents, and if no invalid item was found, returns ownership of the collection. This is so it can be used like this (without creating a temp for the <code>Vec</code>): <code>let col = validate(vec![1, 2], |&amp;v| v &lt; 10)?;</code></p>\n\n<p>This is the current implementation of the function:</p>\n\n<pre><code>use std::fmt::Debug;\n\nfn validate&lt;C, F, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug\n{\n    if let Some(val) = (&amp;col).into_iter().find(|v| !pred(v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n</code></pre>\n\n<p>It does compile, but it doesn't work when I try to use it:</p>\n\n<pre><code>use std::collections::BTreeMap;\nuse std::iter::{FromIterator, once};\n\nfn main() {\n    println!(\"Vec: {:?}\", validate(vec![1, 2, 3, 4], |&amp;&amp;v| v &lt;= 3));\n    //                    ^^^^^^^^ expected bound lifetime parameter 'c, found concrete lifetime\n\n    println!(\"Map: {:?}\",\n             validate(BTreeMap::from_iter(once((1, 2))), |&amp;(&amp;k, &amp;v)| k &lt;= 3));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f7e126c263fa1acd5da4a2b74dd83f17\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>Is what I'm trying to accomplish here possible?</p>\n\n<h2>Background</h2>\n\n<p>I am writing a parser for a toy project of mine and was wondering if I\ncould write a single <code>validate</code> function that works with all the collection\ntypes I use:\n<a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">Vec</a>s,\n<a href=\"https://doc.rust-lang.org/stable/std/collections/struct.VecDeque.html\" rel=\"nofollow noreferrer\">VecDeque</a>s,\n<a href=\"https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html\" rel=\"nofollow noreferrer\">BTreeSet</a>s,\n<a href=\"https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html\" rel=\"nofollow noreferrer\">BTreeMap</a>s,\n<a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html\" rel=\"nofollow noreferrer\">&amp;[T] slices</a>.</p>\n\n<p>Each of these collections implements the <code>IntoIterator</code> trait for a reference of itself,\nwhich can be used to call <code>.into_iter()</code> on a reference without consuming the items\nin the collection:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src/libcollections/vec.rs#L1547\" rel=\"nofollow noreferrer\">Vec impl</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src/libcollections/vec_deque.rs#L2238\" rel=\"nofollow noreferrer\">VecDeque impl</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src/libcollections/btree/set.rs#L648\" rel=\"nofollow noreferrer\">BTreeSet impl</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src/libcollections/btree/map.rs#L1131\" rel=\"nofollow noreferrer\">BTreeMap impl</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/1f965cc8e9dc8f8b26eac99cffdef6501cf0c617/src/libcore/slice.rs#L935\" rel=\"nofollow noreferrer\">&amp;[T] slices impl</a></li>\n</ul>\n\n<p>This is the what the <code>for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = V&gt;</code> in the function declaration\nrefers to. Since the reference is defined <strong>in</strong> the function body itself, we can't just\nuse a lifetime that's declared on the function (like <code>fn validate&lt;'c, ...</code>), because this\nwould imply that the reference has to outlive the function (which it cannot). Instead we\nhave to use a <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"nofollow noreferrer\">Higher-Rank Trait Bound</a> to\ndeclare this lifetime.</p>\n\n<p>It seems to me that this lifetime is also the source of the trouble, since a version of\nthe function that takes and returns a reference to the collection works fine:</p>\n\n<pre><code>// This works just fine.\nfn validate&lt;'c, C, F, V&gt;(col: &amp;'c C, pred: F) -&gt; Result&lt;&amp;'c C, String&gt;\n    where C: Debug,\n          &amp;'c C: IntoIterator&lt;Item = V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug\n{\n    if let Some(val) = col.into_iter().find(|v| !pred(v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=5492174f03799af493a41b1e23c652cb\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>Furthermore, I managed to implement two other versions of the\nfunction, one which works for <code>Vec</code>, <code>VecDeque</code>, <code>BTreeSet</code> and <code>&amp;[T] slices</code>, and another\nwhich works for <code>BTreeMap</code> and probably other mappings:</p>\n\n<pre><code>use std::fmt::Debug;\n\npub fn validate_collection&lt;C, F, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = &amp;'c V&gt;,\n          F: Fn(&amp;V) -&gt; bool,\n          V: Debug\n{\n    if let Some(val) = (&amp;col).into_iter().find(|&amp;v| !pred(v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n\npub fn validate_mapping&lt;C, F, K, V&gt;(col: C, pred: F) -&gt; Result&lt;C, String&gt;\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = (&amp;'c K, &amp;'c V)&gt;,\n          F: Fn(&amp;K, &amp;V) -&gt; bool,\n          K: Debug,\n          V: Debug\n{\n    if let Some(val) = (&amp;col).into_iter().find(|&amp;(k, v)| !pred(k, v)) {\n        Err(format!(\"{:?} contains invalid item: {:?}.\", col, val))?;\n    }\n    Ok(col)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f81dbbaf8ee85bb7f785024e16a4ee6f\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>In the end I hope to create a <code>Validate</code> trait. Currently, I can only impl\nit for either collections or mappings, because the impls conflict.</p>\n\n<pre><code>use std::fmt::Debug;\n\ntrait Validate&lt;V&gt;: Sized {\n    fn validate&lt;F&gt;(self, F) -&gt; Result&lt;Self, String&gt; where F: Fn(&amp;V) -&gt; bool;\n}\n\n// Impl that only works for collections, not mappings.\nimpl&lt;C, V&gt; Validate&lt;V&gt; for C\n    where C: Debug,\n          for&lt;'c&gt; &amp;'c C: IntoIterator&lt;Item = &amp;'c V&gt;,\n          V: Debug\n{\n    fn validate&lt;F&gt;(self, pred: F) -&gt; Result&lt;C, String&gt;\n        where F: Fn(&amp;V) -&gt; bool\n    {\n        if let Some(val) = (&amp;self).into_iter().find(|&amp;v| !pred(v)) {\n            Err(format!(\"{:?} contains invalid item: {:?}.\", self, val))?;\n        }\n        Ok(self)\n    }\n}\n\nfn main() {\n    println!(\"Vec: {:?}\", vec![1, 2, 3, 4].validate(|&amp;v| v &lt;= 3));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=24f17167a7e755e90de57d36119860eb\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "edited": false, "score": 0, "creation_date": 1482419669, "post_id": 41286170, "comment_id": 69774345, "body": "Thanks for your answer! Is that a common thing to do in Rust? It seems a bit awkward, especially if my <code>.value</code> wasn&#39;t a String, but a larger, more complex object, but I guess there isn&#39;t really anything else one can do..."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "edited": false, "score": 0, "creation_date": 1482419763, "post_id": 41286170, "comment_id": 69774406, "body": "@tronje Actually, cloning should be avoided. Of course, in some some code performance doesn&#39;t matter at all, but generally cloning to satisfy the borrow checker should be avoided. Although, sometimes it&#39;s the easiest solution."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "edited": false, "score": 0, "creation_date": 1482419854, "post_id": 41286170, "comment_id": 69774470, "body": "@tronje This is just an easy solution for this simple case; it should be avoided for big objects."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1482419333, "creation_date": 1482419333, "answer_id": 41286170, "question_id": 41285979, "link": "https://stackoverflow.com/questions/41285979/how-can-i-use-multiple-items-in-a-vec-at-a-time-in-rust/41286170#41286170", "title": "How can I use multiple items in a Vec at a time in Rust?", "body": "<p>You're right, you can't borrow an object both immutably and mutably at the same time; in order to get this working you can do the following:</p>\n\n<pre><code>let new_value = my_vec[1].value.clone();\nmy_vec[0].change_value(&amp;new_value);\n</code></pre>\n\n<p>When you <code>clone()</code> the <code>value</code> from <code>myvec[1]</code>, you are no longer borrowing <code>myvec</code> and are free to use the <code>new_value</code> in the next line.</p>\n"}, {"comments": [{"owner": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "edited": false, "score": 0, "creation_date": 1482420028, "post_id": 41286241, "comment_id": 69774598, "body": "Thank you! Very nice explanation. To make sure I understand: the <code>.split</code> methods create views into my Vec, yes? Thus the actual objects remain in the vector, but are changed the way I wanted to after your code snippet is executed?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "edited": false, "score": 1, "creation_date": 1482420268, "post_id": 41286241, "comment_id": 69774793, "body": "@tronje Yes exactly. For example, <code>split_first_mut()</code> returns a mutable reference to the first element in the vector (the element stay in the vector) and a mutable slice (which can also be called &quot;view&quot;). We are only referencing the original data."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1482419959, "last_edit_date": 1482419959, "creation_date": 1482419580, "answer_id": 41286241, "question_id": 41285979, "link": "https://stackoverflow.com/questions/41285979/how-can-i-use-multiple-items-in-a-vec-at-a-time-in-rust/41286241#41286241", "title": "How can I use multiple items in a Vec at a time in Rust?", "body": "<p>I agree, this is slightly confusing. So let's first see, why this is not allowed by the Rust compiler.</p>\n\n<h3>Why it's not allowed</h3>\n\n<p>The index operator <code>[]</code> is something that can be overloaded, which means that users of the language can specify how it works. Rust tries to minimize the number of types of which the compiler has some special knowledge. As a consequence and despite its popularity, <code>Vec&lt;T&gt;</code> is just a normal type defined by a library. You could write your own <code>Vec&lt;T&gt;</code> without telling the compiler about it!</p>\n\n<p><code>Vec&lt;T&gt;</code> also overloads the index operator, to allow indexing a vector. But since the overload could do <em>anything</em>, it could always return the first element of the vector! And if you assume the index operator would do such a strange thing, this code shouldn't be allowed:</p>\n\n<pre><code>my_vec[0].change_value(my_vec[1].value.as_str());\n</code></pre>\n\n<p>Because <code>my_vec[0]</code> and <code>my_vec[1]</code> reference the same value.</p>\n\n<h3>How to make it work</h3>\n\n<p>Of course, the index operator is not implemented in such a stupid fashion and we know that. In order to get two references to different elements of the vector (where at least one is mutable), we have to use some special functions instead of the index operator. And there are quite some ways to do it:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_first_mut\" rel=\"noreferrer\"><code>split_first_mut()</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"noreferrer\"><code>split_at_mut()</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_mut\" rel=\"noreferrer\"><code>iter_mut()</code></a> which returns an iterator over mutable references</li>\n<li>...</li>\n</ul>\n\n<p>I can't really tell you what method to use, because I don't know your exact use case. But just to fix your example, you can write:</p>\n\n<pre><code>let (head, tail) = my_vec.split_first_mut();\nhead.change_value(tail[0].value.as_str());\n</code></pre>\n"}], "owner": {"reputation": 73, "user_id": 7330891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fad4775683aa7227cc0e56302d4f2d22?s=128&d=identicon&r=PG&f=1", "display_name": "tronje", "link": "https://stackoverflow.com/users/7330891/tronje"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1094, "favorite_count": 0, "accepted_answer_id": 41286241, "answer_count": 2, "score": 7, "last_activity_date": 1482419959, "creation_date": 1482418732, "question_id": 41285979, "link": "https://stackoverflow.com/questions/41285979/how-can-i-use-multiple-items-in-a-vec-at-a-time-in-rust", "title": "How can I use multiple items in a Vec at a time in Rust?", "body": "<p>I've been fighting with the borrow checker for a little bit... the gist of what I want to do is this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct SomeStruct {\n    value: String,\n}\n\nimpl SomeStruct {\n    fn new(value: &amp;str) -&gt; SomeStruct {\n        SomeStruct { value: value.to_string() }\n    }\n\n    fn change_value(&amp;mut self, new_value: &amp;str) {\n        self.value = new_value.to_string();\n    }\n}\n\nfn main() {\n    let mut my_vec = vec![\n        SomeStruct::new(\"foo\"),\n        SomeStruct::new(\"bar\"),\n    ];\n\n    my_vec[0].change_value(my_vec[1].value.as_str());\n}\n</code></pre>\n\n<p>This is a very generic version of a problem I'm having. Here's the stderr:</p>\n\n<pre><code>error[E0502]: cannot borrow `my_vec` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:22:30\n   |\n22 |     my_vec[0].change_value(my_vec[1].value.as_str());\n   |     ------                 ^^^^^^                  - mutable borrow ends here\n   |     |                      |\n   |     |                      immutable borrow occurs here\n   |     mutable borrow occurs here\n</code></pre>\n\n<p>So the borrow checker doesn't allow me to borrow the vector twice (once as mutable, and then again as immutable), which I understand. But the frustrating thing is that I want to modify one element in the vector, and only read another. I'm new to Rust (surprise!), and I'm not sure I've wrapped my mind around all its details and design choices. But this is something that feels like it should work, yet doesn't. What am I missing, and what can I do to get this (or comparable behavior) to work? Any help is greatly appreciated!</p>\n"}, {"tags": ["rust", "closures", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1482399487, "post_id": 41279626, "comment_id": 69761499, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/35651279/error-closure-may-outlive-the-current-function-but-it-will-not-outlive-it\">&quot;error: closure may outlive the current function&quot; but it will not outlive it</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1482399549, "post_id": 41279626, "comment_id": 69761540, "body": "it&#39;s not a strict duplicate, since you are trying to violate multiple borrowing rules, but it has the same underlying issue that you have once you fix all the nits."}, {"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1482399944, "post_id": 41279626, "comment_id": 69761799, "body": "ok, i&#39;ll look into the link you posted."}], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "edited": false, "score": 1, "creation_date": 1482599489, "post_id": 41313086, "comment_id": 69833993, "body": "I tried the first solution before, the problem is the  lifetime of  <code>&amp;mut Vec&lt;Doc&gt;</code> cant meets the compiler&#39;s requirements. And I dont know how to make this code work. As for solution 2, I&#39;m happy to learn there&#39;s another way to return closure, but I&#39;m a rust newbie, and currently I&#39;m only targeting stable version, so it&#39;s not applicable for me."}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 1, "last_activity_date": 1482581048, "creation_date": 1482581048, "answer_id": 41313086, "question_id": 41279626, "link": "https://stackoverflow.com/questions/41279626/return-a-closure-that-mutates-its-environment/41313086#41313086", "title": "return a closure that mutates its environment", "body": "<h2>The problem</h2>\n\n<p>If you look carefully at <code>create_handler</code>, you will see that <code>handler</code> will be destroyed at the end of the function, since it is just a local variable. Therefore Rust forbids any references to <code>handle</code> that may be used from outside the function. Otherwise, the references would point to data that is no longer available (the classical dangling pointer bug). </p>\n\n<h2>Solution 1: boxing the closure</h2>\n\n<p>You can return the closure as a trait object by boxing it (allocating on the heap). This is the only way to do it in stable Rust (1.14):</p>\n\n<pre><code>fn create_handler(docs: &amp;mut Vec&lt;Doc&gt;) -&gt; Box&lt;FnMut(&amp;DirEntry)&gt; {\n    let handler = |entry: &amp;DirEntry| -&gt; () {\n        let doc = Doc {\n            path: entry.path().to_str().unwrap().to_string(),\n            filename: entry.file_name().into_string().unwrap(),\n        };\n        docs.push(doc);\n    };\n\n    Box::new(handler)\n}\n</code></pre>\n\n<h2>Solution 2: returning the closure by value</h2>\n\n<p>While this does not work in stable Rust (1.14), you can use it on nightly. The benefit of this approach is that it avoids the heap allocation:</p>\n\n<pre><code>fn create_handler(docs: &amp;mut Vec&lt;Doc&gt;) -&gt; impl FnMut(&amp;DirEntry) {\n    let handler = |entry: &amp;DirEntry| -&gt; () {\n        let doc = Doc {\n            path: entry.path().to_str().unwrap().to_string(),\n            filename: entry.file_name().into_string().unwrap(),\n        };\n        docs.push(doc);\n    };\n\n    handler\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "is_accepted": true, "score": 1, "last_activity_date": 1482992355, "last_edit_date": 1482992355, "creation_date": 1482603082, "answer_id": 41315765, "question_id": 41279626, "link": "https://stackoverflow.com/questions/41279626/return-a-closure-that-mutates-its-environment/41315765#41315765", "title": "return a closure that mutates its environment", "body": "<p>After days of fumbling, I think I have found a solution, by leveraging <code>Box</code> and <code>move</code> (<code>move + Box</code> don't create a deep clone).</p>\n\n<p>But it is not good as I wanted, because I have to change <code>visit_dirs</code> signature (that piece of code is copied from rust doc, so I don't want change it). If anyone has a better suggestion, please let me know.</p>\n\n<p>to @ker &amp; @aochagavia, thanks for your help, it is truly appreciated.</p>\n\n<pre><code>use std::io;\nuse std::fs::{self, DirEntry,};\nuse std::path::Path;\n\nextern crate rustc_serialize;\nuse rustc_serialize::json;\n\n\n// json encoding: \n#[derive(Debug, RustcEncodable)]\nstruct Doc {\n    path: String,\n    filename: String,\n}\n\n\nfn main() {\n    let target_path = Path::new(\"/Users/interaction/workspace/temp/testeddocs\");\n    let mut docs: Vec&lt;Doc&gt; = Vec::new();\n\n    fn create_handler&lt;'a&gt;(docs: &amp;'a mut Vec&lt;Doc&gt;) -&gt; Box&lt;FnMut(&amp;DirEntry) + 'a&gt; {\n        let handler = move |entry: &amp;DirEntry| -&gt; () {\n            let doc = Doc {\n                path: entry.path().to_str().unwrap().to_string(),\n                filename: entry.file_name().into_string().unwrap(),\n            };\n            docs.push(doc);\n        };\n\n        Box::new(handler)\n    }\n\n    {\n        let mut handler = create_handler(&amp;mut docs);\n        visit_dirs(&amp;target_path, &amp;mut |entry: &amp;DirEntry|{\n            handler(entry)\n        });\n    }\n    println!(\"result json is: {}\", json::encode(&amp;docs).unwrap());\n}\n\n// one possible implementation of walking a directory only visiting files\nfn visit_dirs(dir: &amp;Path, cb: &amp;mut FnMut(&amp;DirEntry)) -&gt; io::Result&lt;()&gt; {\n    if try!(fs::metadata(dir)).is_dir() {\n        for entry in try!(fs::read_dir(dir)) {\n            let entry = try!(entry);\n            if try!(fs::metadata(entry.path())).is_dir() {\n                try!(visit_dirs(&amp;entry.path(), cb));\n            } else {\n                cb(&amp;entry);\n            }\n        }\n    }\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 1339243, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6023ec86753d849a6d412630e9b1c1dd?s=128&d=identicon&r=PG", "display_name": "Interaction", "link": "https://stackoverflow.com/users/1339243/interaction"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 150, "favorite_count": 0, "accepted_answer_id": 41315765, "answer_count": 2, "score": 3, "last_activity_date": 1482992355, "creation_date": 1482398450, "last_edit_date": 1482413422, "question_id": 41279626, "link": "https://stackoverflow.com/questions/41279626/return-a-closure-that-mutates-its-environment", "title": "return a closure that mutates its environment", "body": "<p>I'm writing a simple program that walks a directory, reading its entries and producing a JSON structure. I ran into trouble when I tried to return a closure that mutates a captured <code>&amp;mut Vec</code> parameter:</p>\n\n<pre><code>use std::io;\nuse std::fs::{self, DirEntry,};\nuse std::path::Path;\n\nextern crate rustc_serialize;\nuse rustc_serialize::json;\n\n\n// json encoding: \n#[derive(Debug, RustcEncodable)]\nstruct Doc {\n    path: String,\n    filename: String,\n}\n\n\nfn main() {\n    let target_path = Path::new(\"/Users/interaction/workspace/temp/testeddocs\");\n    let mut docs: Vec&lt;Doc&gt; = Vec::new();\n\n    fn create_handler(docs: &amp;mut Vec&lt;Doc&gt;) -&gt; &amp;FnMut(&amp;DirEntry) {\n        let handler = |entry: &amp;DirEntry| -&gt; () {\n            let doc = Doc {\n                path: entry.path().to_str().unwrap().to_string(),\n                filename: entry.file_name().into_string().unwrap(),\n            };\n            docs.push(doc);\n        };\n\n        &amp;handler\n    }\n    {\n        let handler = create_handler(&amp;mut docs);\n        visit_dirs(&amp;target_path, &amp; |entry: &amp;DirEntry|{\n            handler(entry);\n        });\n    }\n    println!(\"result json is: {}\", json::encode(&amp;docs).unwrap());\n}\n\n// one possible implementation of walking a directory only visiting files\nfn visit_dirs(dir: &amp;Path, cb: &amp;Fn(&amp;DirEntry)) -&gt; io::Result&lt;()&gt; {\n    if try!(fs::metadata(dir)).is_dir() {\n        for entry in try!(fs::read_dir(dir)) {\n            let entry = try!(entry);\n            if try!(fs::metadata(entry.path())).is_dir() {\n                try!(visit_dirs(&amp;entry.path(), cb));\n            } else {\n                cb(&amp;entry);\n            }\n        }\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>here's the compiler error it gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow immutable borrowed content `***handler` as mutable\n--&gt; src/main.rs:36:13\n   |\n36 |             handler(entry);\n   |             ^^^^^^^\n\nerror[E0373]: closure may outlive the current function, but it borrows `docs`, which is owned by the current function\n--&gt; src/main.rs:23:23\n   |\n23 |         let handler = |entry: &amp;DirEntry| -&gt; () {\n   |                       ^^^^^^^^^^^^^^^^^^^^^^^^ may outlive borrowed value `docs`\n...\n28 |             docs.push(doc);\n   |             ---- `docs` is borrowed here\n   |\nhelp: to force the closure to take ownership of `docs` (and any other referenced variables), use the `move` keyword, as shown:\n|         let handler = move |entry: &amp;DirEntry| -&gt; () {\n\nerror: `handler` does not live long enough\n--&gt; src/main.rs:31:10\n   |\n31 |         &amp;handler\n   |          ^^^^^^^ does not live long enough\n32 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the block at 22:64...\n--&gt; src/main.rs:22:65\n   |\n22 |     fn create_handler(docs: &amp;mut Vec&lt;Doc&gt;) -&gt; &amp;FnMut(&amp;DirEntry) {\n   |\n</code></pre>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 4, "last_activity_date": 1482381997, "creation_date": 1482381997, "answer_id": 41275951, "question_id": 41275803, "link": "https://stackoverflow.com/questions/41275803/cant-access-fields-of-structs-in-implementations-of-dynamic-traits/41275951#41275951", "title": "Can&#39;t access fields of structs in implementations of dynamic traits", "body": "<p>Within the context of the method implimentation, <code>Settings</code> is a \"generic type\".</p>\n\n<p>That is, what you've got there in your example, is the equivalent of this:</p>\n\n<pre><code>impl Foo for Bar {\n    fn get&lt;RandomWordHere&gt;(t: RandomWordHere) {\n        let x = t.time;\n    }\n}\n</code></pre>\n\n<p>Does the error make more sense now? Your generic type <code>Settings</code> is shadowing your actual type <code>Settings</code>.</p>\n\n<p>Your method isn't very generic in this sense now anyway.. since you're saying \"I want an actual instance of a <code>Settings</code> struct\". Whereas you probably want \"I want an instance of any type that has a <code>time</code> field\".</p>\n\n<p>Here is how you do the latter:</p>\n\n<pre><code>pub trait HasTime {\n    fn get_time(&amp;self) -&gt; &amp;String;\n}\n\npub struct Settings {\n    pub time: String\n}\n\nimpl HasTime for Settings {\n    fn get_time(&amp;self) -&gt; &amp;String {\n        &amp;self.time\n    }\n}\n\npub struct OtherStruct;\n\npub trait Foo {\n    fn get&lt;T&gt;(t: T) where T: HasTime;\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn get&lt;T&gt;(t: T) where T: HasTime {\n        let x = t.get_time();\n    }\n}\n\nfn main() {\n    Bar::get(Settings{time: \"\".into()}); // This is fine\n    // Bar::get(OtherStruct{}); // This is an error.. it doesn't implement HasTime\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=ef8ee3779010a91d476495977cb546c8&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}], "owner": {"reputation": 1595, "user_id": 3833068, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6a2a668bce4cd485078f912cbda24f2a?s=128&d=identicon&r=PG", "display_name": "Ameo", "link": "https://stackoverflow.com/users/3833068/ameo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 529, "favorite_count": 0, "closed_date": 1482413610, "accepted_answer_id": 41275951, "answer_count": 1, "score": 2, "last_activity_date": 1482413535, "creation_date": 1482380892, "last_edit_date": 1482413535, "question_id": 41275803, "link": "https://stackoverflow.com/questions/41275803/cant-access-fields-of-structs-in-implementations-of-dynamic-traits", "closed_reason": "Duplicate", "title": "Can&#39;t access fields of structs in implementations of dynamic traits", "body": "<p>While trying to implement traits with generic arguments and access the fields of those generic arguments, I've encountered an error message saying that the arguments in question do not contain such fields.</p>\n\n<p>Here's some example code that exhibits the issue:</p>\n\n<pre><code>pub struct Settings {\n    pub time: String,\n}\n\npub trait Foo {\n    fn get&lt;T&gt;(t: T);\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn get&lt;Settings&gt;(t: Settings) {\n        let x = t.time;\n    }\n}\n</code></pre>\n\n<p>(<a href=\"http://play.integer32.com/?gist=832f686e0e4baf3edb8321577a993d77&amp;version=nightly\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n\n<p>The error message given by the compiler is as follows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no field `time` on type `Settings`\n</code></pre>\n\n<p>which makes little sense in the context.  I expect that this is probably some misuse of generic traits on my part but the error message makes the question that.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482379268, "post_id": 41275548, "comment_id": 69752586, "body": "<a href=\"http://stackoverflow.com/questions/25383488/how-to-match-a-string-against-string-literals-in-rust\" title=\"how to match a string against string literals in rust\">stackoverflow.com/questions/25383488/&hellip;</a>"}, {"owner": {"reputation": 255, "user_id": 7328541, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2acf0e34d229dd1622f978708cf17693?s=128&d=identicon&r=PG&f=1", "display_name": "maku", "link": "https://stackoverflow.com/users/7328541/maku"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1482379551, "post_id": 41275548, "comment_id": 69752644, "body": "I have seen,but can&#39;t solve my problem"}], "answers": [{"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 255, "user_id": 7328541, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2acf0e34d229dd1622f978708cf17693?s=128&d=identicon&r=PG&f=1", "display_name": "maku", "link": "https://stackoverflow.com/users/7328541/maku"}, "edited": false, "score": 0, "creation_date": 1482418765, "post_id": 41275631, "comment_id": 69773787, "body": "@LukasKalbertodt Thanks, I&#39;m new in rust. Your answer was very clear. I fix like I could."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1482418822, "post_id": 41275631, "comment_id": 69773834, "body": "@Stargateur I already saw your fix, my comment is gone ;-) And welcome to Rust, I hope you enjoy your stay ^_^"}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 3, "last_activity_date": 1482504805, "last_edit_date": 1482504805, "creation_date": 1482379600, "answer_id": 41275631, "question_id": 41275548, "link": "https://stackoverflow.com/questions/41275548/how-to-match-against-a-static-str-in-rust/41275631#41275631", "title": "How to match against a &amp;&#39;static str in Rust", "body": "<p>In your example, <code>name</code> doesn't need to have a <code>static</code> lifetime. Because you only use <code>name</code> inside your function, <code>name</code> doesn't need to have an extended lifetime. Check out the <a href=\"https://doc.rust-lang.org/1.14.0/book/strings.html\" rel=\"nofollow noreferrer\">strings chapter</a> of <em>The Rust Programming Language</em>. To match a <code>&amp;str</code> with a <code>&amp;'static str</code> you don't need <code>&amp;</code>, just the variable itself is enough.</p>\n\n<pre><code>pub fn get_project(name: &amp;str) {\n    match name {\n        \"hi\" =&gt; println!(\"I found hi!\"),\n        _ =&gt; println!(\"Nothing match\"),\n    }\n}\n\nfn main() {\n    get_project(\"hi\");\n    get_project(\"42\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 6, "last_activity_date": 1482406172, "creation_date": 1482406172, "answer_id": 41282143, "question_id": 41275548, "link": "https://stackoverflow.com/questions/41275548/how-to-match-against-a-static-str-in-rust/41282143#41282143", "title": "How to match against a &amp;&#39;static str in Rust", "body": "<p>String literals \u2013 like <code>\"hi\"</code> \u2013 have the type <code>&amp;'static str</code>. So if you already have a <code>&amp;str</code>, you don't need to add the <code>&amp;</code>:</p>\n\n<pre><code>fn get_project(name: &amp;str) {\n    match name {\n        \"hi\" =&gt; {},\n        _ =&gt; {}, // matches have to be exhaustive \n    }\n}\n</code></pre>\n\n<p>I also added a <em>default case</em>, because matches in Rust need to be exhaustive: they need to cover all possible cases.</p>\n\n<hr>\n\n<p>Maybe you noticed, that I also removed the <code>'static</code> from the argument list. If you want to read about some lifetime stuff, go ahead. Else, stop reading here, because it's possibly confusing and not that important in this case.</p>\n\n<p>In this function there is no need to restrict the lifetime of the given argument to <code>'static</code>. Maybe you also want to pass in string slices that are borrowed from a <code>String</code>:</p>\n\n<pre><code>let user_input = read_user_input();  // type `String`\nget_project(&amp;input);\n</code></pre>\n\n<p>The code above only works when you remove the <code>'static</code> from the argument. Once removed, the function is equivalent to:</p>\n\n<pre><code>fn get_project&lt;'a&gt;(name: &amp;'a str) { ... }\n</code></pre>\n\n<p>This means that the function is generic over a lifetime <code>'a</code>. The function says: given any lifetime <code>'a</code>, you can give me a string with said lifetime and I am able to do my thing. Which is true. If the function wouldn't be able to do it for any lifetime, the compiler would complain ;-)</p>\n"}], "owner": {"reputation": 255, "user_id": 7328541, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2acf0e34d229dd1622f978708cf17693?s=128&d=identicon&r=PG&f=1", "display_name": "maku", "link": "https://stackoverflow.com/users/7328541/maku"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1197, "favorite_count": 1, "answer_count": 2, "score": 3, "last_activity_date": 1482504805, "creation_date": 1482378980, "last_edit_date": 1482504658, "question_id": 41275548, "link": "https://stackoverflow.com/questions/41275548/how-to-match-against-a-static-str-in-rust", "title": "How to match against a &amp;&#39;static str in Rust", "body": "<p>I am a Rust beginner and I can't solve this type problem. I have tried replacing <code>&amp;name</code> with <code>name</code>, but the error \"pattern <code>&amp;_</code> not covered\"  occurred.</p>\n\n<pre><code>fn get_project(name: &amp;'static str) {\n    match &amp;name {\n        \"hi\" =&gt; {},\n    }\n}\n\nfn main() {\n    let project = get_project(\"hi\");\n}\n</code></pre>\n\n<p>Compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; &lt;anon&gt;:3:9\n  |\n3 |         \"hi\" =&gt; {},\n  |         ^^^^ expected &amp;str, found str\n  |\n  = note: expected type `&amp;&amp;str`\n  = note:    found type `&amp;'static str`\n</code></pre>\n"}, {"tags": ["build", "rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 12, "last_activity_date": 1482375679, "last_edit_date": 1482375679, "creation_date": 1482375357, "answer_id": 41275118, "question_id": 41274901, "link": "https://stackoverflow.com/questions/41274901/out-of-source-builds-external-build-directory-with-cargo/41275118#41275118", "title": "Out of source builds (external build directory) with Cargo?", "body": "<p>You can specify the <strong>directory of the <code>target/</code></strong> folder either via <a href=\"http://doc.crates.io/config.html\" rel=\"noreferrer\">configuration file (key <code>build.target-dir</code>)</a> or <a href=\"http://doc.crates.io/environment-variables.html\" rel=\"noreferrer\">environment variable (<code>CARGO_TARGET_DIR</code>)</a>. Here is an example using a configuration file:</p>\n\n<p>Suppose you want to have a directory <code>~/work/</code> in which you want to save the Cargo project (<code>~/work/foo/</code>) and next to it the target directory (<code>~/work/my-target/</code>).</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cd ~/work\n$ cargo new --bin foo\n$ mkdir .cargo\n$ $EDITOR .cargo/config\n</code></pre>\n\n<p>Then insert the following into the configuration file:</p>\n\n<pre><code>[build]\ntarget-dir = \"./my-target\"\n</code></pre>\n\n<p>If you then build in your normal Cargo project directory:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cd foo\n$ cargo build\n</code></pre>\n\n<p>You will notice that there is no <code>target/</code> dir, but everything is in <code>~/work/my-target/</code>.</p>\n\n<hr>\n\n<p>However, the <code>Cargo.lock</code> is still saved inside the Cargo project directory, but that kinda makes sense. <a href=\"http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries\" rel=\"noreferrer\">For executables, you should check the <code>Cargo.lock</code> file into your git! For libraries, you shouldn't</a>. I guess having to ignore one file is better than having to ignore an entire folder.</p>\n\n<p>Lastly, there are a few caveats to changing the target-dir, which are listed <a href=\"https://github.com/rust-lang/cargo/pull/1657\" rel=\"noreferrer\">in the PR which introduced the feature</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 1, "last_activity_date": 1484739888, "last_edit_date": 1592644375, "creation_date": 1482388075, "answer_id": 41276989, "question_id": 41274901, "link": "https://stackoverflow.com/questions/41274901/out-of-source-builds-external-build-directory-with-cargo/41276989#41276989", "title": "Out of source builds (external build directory) with Cargo?", "body": "<p>While useful manually setting this up isn't all that convenient, I wanted to be able to build multiple crates within a source tree, having all of them out-of-source, something that <code>../target-dir</code> configuration option wouldn't achieve.</p>\n<hr />\n<h2>Helper utility for convenient out-of-source builds</h2>\n<p>Using the environment variable <a href=\"https://github.com/ideasman42/cargo-oos\" rel=\"nofollow noreferrer\">I've written a small utility to wrap cargo</a>, so it automatically builds out-of-source, supporting crates both at the top-level, on in a subdirectory of the source tree.</p>\n<hr />\n<p>Thanks to Lukas for pointing out <code>CARGO_TARGET_DIR</code> and <code>target-dir</code> configuration option.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2405, "favorite_count": 4, "accepted_answer_id": 41275118, "answer_count": 2, "score": 16, "last_activity_date": 1484740003, "creation_date": 1482373497, "last_edit_date": 1490005107, "question_id": 41274901, "link": "https://stackoverflow.com/questions/41274901/out-of-source-builds-external-build-directory-with-cargo", "title": "Out of source builds (external build directory) with Cargo?", "body": "<p>Having used CMake, I've become used to out-of-source builds, which are encouraged with CMake. How can out-of-source builds be done with Cargo?</p>\n\n<hr>\n\n<p>Using in-source-builds again feels like a step backwards:</p>\n\n<ul>\n<li>Development tools need to be configured to ignore paths. Sometimes multiple plugins and development tools - especially using VIM or Emacs!</li>\n<li>Some tools can't be configured to easily hide build files. While dotfiles are typically hidden, they will still show <code>Cargo.lock</code> and <code>target/</code>, worse still, recursively exposing their contents.</li>\n<li><a href=\"https://superuser.com/questions/335496/git-how-to-delete-all-untracked-files\">Deleting un-tracked files</a> to remove everything outside of version control, typically to cleanup editor temp files or some test output, can backfire if you forgot to add a new file to version control and don't <strong>manually</strong> check the file list properly before deleting them.</li>\n<li>Dependencies are downloaded into your source code path, sometimes adding <code>*.rs</code> files in the <code>target</code> directory as part of building indirect deps, so operating on all <code>*.rs</code> files may accidentally pickup other files which aren't in a hidden directory, so might not be ignored even after development tools have been configured.</li>\n</ul>\n\n<p>While it's possible to work around all these issues, I'd rather just have an external build path and keep the source directory pristine.</p>\n"}]