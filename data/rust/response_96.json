[{"tags": ["iterator", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "edited": false, "score": 0, "creation_date": 1478729524, "post_id": 40516724, "comment_id": 68275407, "body": "Really nice! I was recently copy pasting some code and thought it would be nice to have a way to have a default implementation for methods. I just assumed this was not possible without inheritance."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1552574182, "last_edit_date": 1552574182, "creation_date": 1478728807, "answer_id": 40516724, "question_id": 40516692, "link": "https://stackoverflow.com/questions/40516692/why-dont-we-implement-all-the-functions-from-iterator-to-implement-an-iterator/40516724#40516724", "title": "Why don&#39;t we implement all the functions from Iterator to implement an iterator?", "body": "<p>Because every method on <code>Iterator</code> except <code>next</code> has a <a href=\"https://doc.rust-lang.org/stable/book/ch10-02-traits.html#default-implementations\" rel=\"nofollow noreferrer\">default implementation</a>. These are methods implemented in the trait itself, and implementors of the trait gain them \"for free\":</p>\n\n<pre><code>struct SomeStruct {}\n\ntrait SomeTrait {\n    fn foo(&amp;self);\n\n    fn bar(&amp;self) {\n        println!(\"default\")\n    }\n}\n\nimpl SomeTrait for SomeStruct {\n    fn foo(&amp;self) {\n        unimplemented!()\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>You can tell if a trait method has a default implementation or not through <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">the documentation</a>:</p>\n\n<blockquote>\n  <h3>Required methods</h3>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; \n</code></pre>\n  \n  <h3>Provided methods</h3>\n\n<pre><code>fn size_hint(&amp;self) -&gt; (usize, Option&lt;usize&gt;)\n</code></pre>\n</blockquote>\n\n<p>Note that <code>size_hint</code> is in the \"provided methods\" section \u2014 that's the indication that there's a default implementation.</p>\n\n<p>If you can implement the method in a more efficient way, you are welcome to do so, but note that it is <a href=\"https://stackoverflow.com/questions/31461902/is-it-possible-to-extend-a-default-method-implementation-of-a-trait-in-a-struct\">not possible to call the default implementation if you decide to override it</a>.</p>\n\n<p>Specifically for <code>Iterator</code>, it's a great idea to implement <code>size_hint</code> if you can, as that can help optimize methods like <code>collect</code>.</p>\n"}], "owner": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 203, "favorite_count": 0, "accepted_answer_id": 40516724, "answer_count": 1, "score": 3, "last_activity_date": 1552574182, "creation_date": 1478728629, "last_edit_date": 1552573981, "question_id": 40516692, "link": "https://stackoverflow.com/questions/40516692/why-dont-we-implement-all-the-functions-from-iterator-to-implement-an-iterator", "title": "Why don&#39;t we implement all the functions from Iterator to implement an iterator?", "body": "<p>To implement an iterator in Rust, we only need to implement the <code>next</code> method, as explained <a href=\"https://doc.rust-lang.org/stable/std/iter/#implementing-iterator\" rel=\"nofollow noreferrer\">in the documentation</a>. However, the <code>Iterator</code> trait <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\">has many more methods</a>.</p>\n\n<p>As far as I know, we need to implement all the methods of a trait. For instance, this does not compile (<a href=\"https://play.rust-lang.org/?gist=bdb0e01739ffc17a271cdcc8eeb79424&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>):</p>\n\n<pre><code>struct SomeStruct {}\n\ntrait SomeTrait {\n    fn foo(&amp;self);\n    fn bar(&amp;self);\n}\n\nimpl SomeTrait for SomeStruct {\n    fn foo(&amp;self) {\n        unimplemented!()\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>The error is pretty clear:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0046]: not all trait items implemented, missing: `bar`\n --&gt; src/main.rs:8:1\n  |\n5 |     fn bar(&amp;self);\n  |     -------------- `bar` from trait\n...\n8 | impl SomeTrait for SomeStruct {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `bar` in implementation\n</code></pre>\n"}, {"tags": ["gtk", "rust"], "comments": [{"owner": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1478728548, "post_id": 40516510, "comment_id": 68275029, "body": "The mutex deadlocks because GTK+ signals run on the same thread as the one <code>gtk::main()</code> runs on. I wouldn&#39;t know a good Rust-specific solution to the problem, but I can give a GTK+-specific one: use idle callbacks to send stuff from another thread to the GTK+ thread."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 10424, "user_id": 3408572, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/0f3a08b145553b98749d3d0572d01265?s=128&d=identicon&r=PG&f=1", "display_name": "andlabs", "link": "https://stackoverflow.com/users/3408572/andlabs"}, "edited": false, "score": 0, "creation_date": 1478733238, "post_id": 40516510, "comment_id": 68276799, "body": "I know about <code>idle_add()</code>, but I don&#39;t know how I can call my <code>update()</code> method from it because the object would need to be static (or in a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> which is what I&#39;m trying to avoid)."}], "answers": [{"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": true, "score": 0, "last_activity_date": 1478838621, "creation_date": 1478838621, "answer_id": 40541128, "question_id": 40516510, "link": "https://stackoverflow.com/questions/40516510/alternative-way-to-handle-gtk-events-in-rust/40541128#40541128", "title": "Alternative way to handle GTK+ events in Rust", "body": "<p>I found a solution to this issue <a href=\"https://github.com/emoon/wrui_rust/blob/master/src/main.rs\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>Here is what I achieved with my example:</p>\n\n<pre><code>extern crate gtk;\n\nuse gtk::{Button, ButtonExt, ContainerExt, Inhibit, Label, WidgetExt, WindowType};\nuse gtk::Orientation::Vertical;\n\nuse Message::Increment;\n\nmacro_rules! connect {\n    ($source:ident :: $event:ident, $target:ident :: $message:expr) =&gt; {\n        let target = &amp;mut *$target as *mut _;\n        $source.$event(move |_| {\n            let target: &amp;mut Window = unsafe { &amp;mut *target };\n            target.update($message);\n        });\n    };\n}\n\nenum Message {\n    Increment,\n}\n\nstruct Window {\n    label: Label,\n    model: Model,\n    view: gtk::Window,\n}\n\nimpl Window {\n    fn new() -&gt; Box&lt;Self&gt; {\n        let window = gtk::Window::new(WindowType::Toplevel);\n\n        let vbox = gtk::Box::new(Vertical, 0);\n        window.add(&amp;vbox);\n\n        let label = Label::new(Some(\"0\"));\n        vbox.add(&amp;label);\n\n        let button = Button::new_with_label(\"Increment\");\n        vbox.add(&amp;button);\n        window.show_all();\n\n        window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(false)\n        });\n\n        let mut window = Box::new(Window {\n            label: label,\n            model: Model { count: 0 },\n            view: window,\n        });\n\n        connect!(button::connect_clicked, window::Increment);\n\n        window\n    }\n\n    fn update(&amp;mut self, message: Message) {\n        match message {\n            Increment =&gt; {\n                self.model.count += 1;\n                self.label.set_text(&amp;format!(\"{}\", self.model.count));\n            },\n        }\n    }\n}\n\nstruct Model {\n    count: i32,\n}\n\nfn main() {\n    gtk::init().unwrap();\n\n    let _window = Window::new();\n\n    gtk::main();\n}\n</code></pre>\n\n<p>Do you think this use of <code>unsafe</code> can cause segfault?\nFor instance, if the <code>button</code> could outlive the <code>window</code>, the <code>window</code> could be used after being freed, no?\nIs there a way to build a safe wrapper around this?</p>\n\n<p>On an esthetical note, is there a way to achieve this:</p>\n\n<pre><code>connect!(button::clicked, window::Increment);\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 641, "favorite_count": 0, "accepted_answer_id": 40541128, "answer_count": 1, "score": 1, "last_activity_date": 1478838621, "creation_date": 1478727769, "last_edit_date": 1478728469, "question_id": 40516510, "link": "https://stackoverflow.com/questions/40516510/alternative-way-to-handle-gtk-events-in-rust", "title": "Alternative way to handle GTK+ events in Rust", "body": "<p>Currently, I manage GTK+ events with <code>Rc</code> and <code>RefCell</code> as shown in the following example:</p>\n\n<pre><code>extern crate gtk;\n\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nuse gtk::{Button, ButtonExt, ContainerExt, Inhibit, Label, WidgetExt, Window, WindowType};\nuse gtk::Orientation::Vertical;\n\nstruct Model {\n    count: i32,\n}\n\nfn main() {\n    gtk::init().unwrap();\n\n    let window = Window::new(WindowType::Toplevel);\n\n    let model = Rc::new(RefCell::new(Model { count: 0 }));\n\n    let vbox = gtk::Box::new(Vertical, 0);\n    window.add(&amp;vbox);\n\n    let label = Label::new(Some(\"0\"));\n    vbox.add(&amp;label);\n\n    let button = Button::new_with_label(\"Increment\");\n    vbox.add(&amp;button);\n    window.show_all();\n\n    window.connect_delete_event(|_, _| {\n        gtk::main_quit();\n        Inhibit(false)\n    });\n\n    {\n        let model = model.clone();\n        button.connect_clicked(move |_| {\n            {\n                (*model.borrow_mut()).count += 1;\n            }\n            label.set_text(&amp;format!(\"{}\", (*model.borrow()).count));\n        });\n    }\n\n    gtk::main();\n}\n</code></pre>\n\n<p>My main issue with this code is the boilerplate needed because of the <code>RefCell</code>s.</p>\n\n<p>Also I feel like it is bad practise and can lead to panics (this is not my main issue so don't propose to use a <code>Mutex</code> because in some examples, that can lead to a deadlock).</p>\n\n<p>So I thought I could handle events in a way similar to Elm: with one function receiving signals where the model could be updated.\nHowever, I am unable to implement this in Rust.\nHere is an attempt:</p>\n\n<pre><code>extern crate gtk;\n\nuse std::cell::RefCell;\nuse std::collections::VecDeque;\nuse std::rc::Rc;\n\nuse gtk::{Button, ButtonExt, ContainerExt, Inhibit, Label, WidgetExt, WindowType};\nuse gtk::Orientation::Vertical;\n\nuse Message::Increment;\n\nenum Message {\n    Increment,\n}\n\nstruct Window {\n    label: Label,\n    model: Model,\n    queue: Rc&lt;RefCell&lt;VecDeque&lt;Message&gt;&gt;&gt;,\n    view: gtk::Window,\n}\n\nimpl Window {\n    fn new() -&gt; Self {\n        let window = gtk::Window::new(WindowType::Toplevel);\n\n        let vbox = gtk::Box::new(Vertical, 0);\n        window.add(&amp;vbox);\n\n        let label = Label::new(Some(\"0\"));\n        vbox.add(&amp;label);\n\n        let button = Button::new_with_label(\"Increment\");\n        vbox.add(&amp;button);\n        window.show_all();\n\n        window.connect_delete_event(|_, _| {\n            gtk::main_quit();\n            Inhibit(false)\n        });\n\n        let queue = Rc::new(RefCell::new(VecDeque::new()));\n\n        {\n            let queue = queue.clone();\n            button.connect_clicked(move |_| {\n                (*queue.borrow_mut()).push_back(Increment);\n            });\n        }\n\n        Window {\n            label: label,\n            queue: queue,\n            model: Model { count: 0 },\n            view: window,\n        }\n    }\n\n    // How to call this method when a message is received?\n    fn update(&amp;mut self, message: Message) {\n        match message {\n            Increment =&gt; {\n                self.model.count += 1;\n                self.label.set_text(&amp;format!(\"{}\", self.model.count));\n            },\n        }\n    }\n}\n\nstruct Model {\n    count: i32,\n}\n\nfn main() {\n    gtk::init().unwrap();\n\n    let window = Window::new();\n\n    gtk::main();\n}\n</code></pre>\n\n<p>How can I call the <code>update()</code> method when the message <code>queue</code> is updated?</p>\n\n<p>Is it a viable approach?</p>\n\n<p>If not, do you know any alternatives that would provide a solution to this issue?</p>\n\n<p>Perhaps some solution based on the <code>future</code> crate could be used?\nIn this case, how do I manage both main loops (the gtk+ one and the <code>tokio</code> one).</p>\n\n<p>Or a solution using channels?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478737667, "post_id": 40515320, "comment_id": 68278099, "body": "@Flowneee the RFC states <i>&quot;Workspaces can eventually get extended with <code>--all</code> flags so in a workspace root you could execute <code>cargo build --all</code> to compile all crates&quot;</i>. However, until that is completed, you will need to change into each crate&#39;s directory and run <code>cargo build</code>. A tiny <code>Makefile</code> or shell script might help bridge the gap until <code>--all</code> is implemented."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1478723230, "last_edit_date": 1478723230, "creation_date": 1478722768, "answer_id": 40515320, "question_id": 40514793, "link": "https://stackoverflow.com/questions/40514793/how-can-i-use-cargo-to-build-a-library-as-both-an-rlib-and-a-dylib-but-with-diff/40515320#40515320", "title": "How can I use Cargo to build a library as both an rlib and a dylib but with different contents?", "body": "<p>Opinionated answer: <strong>don't</strong>.</p>\n\n<p>Instead, split your code into two or three separate crates:</p>\n\n<ol>\n<li>The core library.</li>\n<li>The C bindings for the library.</li>\n<li>(Optional) The executable.</li>\n</ol>\n\n<p>Then, move your <code>c_bindings.rs</code> to the bindings crate as just <code>lib.rs</code>. It can depend on the core library. You can also move <code>main.rs</code> into another crate that also depends on the core library. </p>\n\n<p>These three crates can be in the same source code repository, but will be built with separate invocations.</p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1525-cargo-workspace.md\" rel=\"noreferrer\">A Cargo workspace</a> may prove to be useful; in fact it's listed as an explicit reason (\"An FFI crate with a sub-crate for FFI bindings\").</p>\n"}], "owner": {"reputation": 226, "user_id": 5033855, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/3HQpw.jpg?s=128&g=1", "display_name": "Flowneee", "link": "https://stackoverflow.com/users/5033855/flowneee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 909, "favorite_count": 1, "accepted_answer_id": 40515320, "answer_count": 1, "score": 4, "last_activity_date": 1478723230, "creation_date": 1478720743, "last_edit_date": 1478722490, "question_id": 40514793, "link": "https://stackoverflow.com/questions/40514793/how-can-i-use-cargo-to-build-a-library-as-both-an-rlib-and-a-dylib-but-with-diff", "title": "How can I use Cargo to build a library as both an rlib and a dylib but with different contents?", "body": "<p>I would like to make a project that contains:</p>\n\n<ul>\n<li>a library</li>\n<li>bindings for C</li>\n<li>an executable that uses the library</li>\n</ul>\n\n<p>The directory structure, excluding temporary files and other trash:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 c_bindings.rs // contains C bindings for library\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 compression.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 const_data.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hash.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs // library\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs // simple executable that uses library\n\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        \u251c\u2500\u2500 gost_stribog\n        \u251c\u2500\u2500 libgost_stribog.rlib\n</code></pre>\n\n<p>I want <code>cargo build</code> do this:</p>\n\n<ul>\n<li>build Rust library (rlib) that will ignore <code>c_bindings.rs</code></li>\n<li>C library (dylib) that will use <code>c_bindings.rs</code></li>\n<li>executable</li>\n</ul>\n\n<p>The debug directory should be:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u2514\u2500\u2500 target\n    \u2514\u2500\u2500 debug\n        \u251c\u2500\u2500 gost_stribog\n        \u251c\u2500\u2500 libgost_stribog.rlib\n        \u251c\u2500\u2500 libgost_stribog.so\n</code></pre>\n\n<p>What should my <code>Cargo.toml</code> look like?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 7, "last_activity_date": 1478707091, "last_edit_date": 1478707091, "creation_date": 1478702409, "answer_id": 40509571, "question_id": 40509400, "link": "https://stackoverflow.com/questions/40509400/how-to-pass-named-loop-labels-to-a-macro-in-rust/40509571#40509571", "title": "How to pass named loop labels to a macro in Rust?", "body": "<p>Passing it as the versatile <code>tt</code> (token tree) works:</p>\n\n<pre><code>macro_rules! my_break {\n    ($label:tt) =&gt; { break $label; }\n}\n\nfn main() {\n    'outer: loop {\n        println!(\"Start of outer\");\n        loop {\n            println!(\"Start of inner\");\n            my_break!('outer);\n            println!(\"Not reachable\");\n        }\n        println!(\"End of outer\");\n    }\n    println!(\"End of main\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e51f2486377d659b09e76aa3cafcf3f0&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n\n<p>To future readers, there's an <a href=\"https://github.com/rust-lang/rfcs/pull/1590\" rel=\"noreferrer\">accepted RFC</a> adding a lifetime specifier for macro parameters.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 329, "favorite_count": 0, "accepted_answer_id": 40509571, "answer_count": 1, "score": 4, "last_activity_date": 1478707091, "creation_date": 1478701872, "last_edit_date": 1478702199, "question_id": 40509400, "link": "https://stackoverflow.com/questions/40509400/how-to-pass-named-loop-labels-to-a-macro-in-rust", "title": "How to pass named loop labels to a macro in Rust?", "body": "<p>Using a macro that breaks out of a loop works, but I want to pass in a label to be able to define which outer loop to break out of.</p>\n\n<p>Passing the argument in as an expression gave a syntax error, the only way I managed to get this to work was to pass in a <code>block</code> however this isn't very elegant, e.g.:</p>\n\n<pre><code>my_macro({ break 'outer; });\n</code></pre>\n\n<p>Is there a way to pass:</p>\n\n<pre><code>my_macro('outer);\n</code></pre>\n\n<p>... that can be written in the macro as <code>break $my_label;</code> that expands into <code>break 'outer;</code> ?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1478616504, "post_id": 40489667, "comment_id": 68223457, "body": "Dereferencing pointers, unlike references, is not implicit. You have to dereference that pointer."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1478616843, "post_id": 40489667, "comment_id": 68223710, "body": "side-note: your <code>i_a</code> function returns <code>*mut int32_t</code> while the <code>a</code> method returns <code>i32</code>, even if you fix your issue, the types won&#39;t match up."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1478616547, "creation_date": 1478616547, "answer_id": 40489888, "question_id": 40489667, "link": "https://stackoverflow.com/questions/40489667/no-method-named-x-found-for-type-mut-y-in-the-current-scope/40489888#40489888", "title": "No method named X found for type *mut Y in the current scope", "body": "<blockquote>\n  <p>I want to call the method <code>a</code> on a struct <code>I</code></p>\n</blockquote>\n\n<p>The code does <em>not</em> have a struct I; it has a <em>mutable pointer</em> to a struct <code>I</code>.</p>\n\n<p>I'd <strong>strongly</strong> recommend reading the <a href=\"https://doc.rust-lang.org/stable/book/raw-pointers.html\" rel=\"nofollow noreferrer\">chapter on raw pointers</a> before doing any in-depth work with them. Rust is a great language and the compiler works very hard to prevent screw ups when you use the safe aspects; when you get into unsafe <strong>you</strong> need to know what you are doing because you have told the compiler to stand back and watch.</p>\n\n<p>One specific difference between references and raw pointers is that raw pointers <em>may be <code>NULL</code></em>. References, on the other hand, may <em>never be <code>NULL</code></em>. That's one reason why it is required to use an <code>unsafe</code> block any time you dereference a raw pointer.</p>\n\n<p>Normally, you <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null\" rel=\"nofollow noreferrer\">check for a <code>NULL</code> pointer</a> and then convert it to a reference if it's not <code>NULL</code>:</p>\n\n<pre><code>let i = &amp;*i;     // For `&amp;T`\nlet i = &amp;mut *i; // For `&amp;mut T`\n</code></pre>\n\n<p>Now that you have a reference, you can call methods.</p>\n\n<p>There are also helper functions like <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>as_ref</code></a>:</p>\n\n<pre><code>pub extern \"C\" fn i_a(i: *mut I) -&gt; int32_t {\n    match unsafe { i.as_ref() } {\n        Some(i) =&gt; i.a(5),\n        None =&gt; 42,\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>The code also has a giant hole waiting to be exploited. <code>i_a</code> purports to return a <em>pointer</em> to an integer, but the code returns an integer directly. That's a very bad mismatch</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478624028, "post_id": 40489907, "comment_id": 68228813, "body": "I&#39;d expect people to blindly copy-paste your code, so I&#39;d suggest adding the <code>NULL</code> check."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478625706, "post_id": 40489907, "comment_id": 68229903, "body": "@Shepmaster: Well, if the pointer is null then it&#39;ll probably crash; which is the behavior you&#39;ll get if you pass any wild pointer anyway."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478627664, "post_id": 40489907, "comment_id": 68231036, "body": "That response seems uncharacteristically <i>laissez faire</i> for you. Following that logic to the ridiculous end, it seems like many (all?) of the checks that Rust does are irrelevant because if you do it &quot;wrong&quot; it will be likely crash anyway."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478629763, "post_id": 40489907, "comment_id": 68232069, "body": "@Shepmaster: It&#39;s just that I&#39;ve seen too many newcomers think their code is safe because they have a null-pointer check, and then wonder why the debugger indicates <code>0x4</code> as the address of their object (C++). When dealing with <code>unsafe</code> code, I&#39;d rather people seat down and think it through: can they have a null pointer here? If they can, what should the response be (ignore/crash/other)? If they cannot, maybe an <code>assert</code> (or <code>debug_assert</code>) should document this?"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1478685291, "post_id": 40489907, "comment_id": 68251028, "body": "I don&#39;t think we should check for <code>nullptr</code> unless the interface specifically lists it as a possibility or as a way to express <code>Option::None</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1478616585, "creation_date": 1478616585, "answer_id": 40489907, "question_id": 40489667, "link": "https://stackoverflow.com/questions/40489667/no-method-named-x-found-for-type-mut-y-in-the-current-scope/40489907#40489907", "title": "No method named X found for type *mut Y in the current scope", "body": "<p>Let's remove the extern C stuff, it is not useful here:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\npub struct I {\n    pub values: Vec&lt;i32&gt;,\n}\n\nimpl I {\n    pub fn a(&amp;self, n: i32) -&gt; i32 {\n        return 0;\n    }\n}\n\npub fn i_a(i: *mut I) -&gt; i32 {\n    unsafe { i.a(5) }\n}\n</code></pre>\n\n<p>The issue is that pointers in Rust are <em>extremely</em> limited: they only have the methods implemented on <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html\" rel=\"nofollow noreferrer\">the primitive pointer type</a>.</p>\n\n<p>Basically, you can check if a pointer is null, compare it for equality, perform some arithmetic and dereference it. Note that few operations are actually unsafe on a pointer (mostly arithmetic and dereference).</p>\n\n<p>To actually use the <em>pointee</em>, you first need to dereference the pointer to obtain a reference from it; this is unsafe, but using the reference is then safe.</p>\n\n<p>Thus you can rewrite <code>i_a</code> as either:</p>\n\n<pre><code>pub fn i_a(i: *mut I) -&gt; i32 {\n    unsafe { (*i).a(5) }\n}\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>pub fn i_a(i: *mut I) -&gt; i32 {\n    unsafe { &amp;*i }.a(5)\n}\n</code></pre>\n\n<p>and then it will work.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1478616794, "creation_date": 1478616794, "answer_id": 40489983, "question_id": 40489667, "link": "https://stackoverflow.com/questions/40489667/no-method-named-x-found-for-type-mut-y-in-the-current-scope/40489983#40489983", "title": "No method named X found for type *mut Y in the current scope", "body": "<p>The method <code>a</code> technically takes a <code>self: &amp;I</code> argument (but the shorthand <code>&amp;self</code> is more convenient). So the method expects a reference to an <code>I</code>. The variable <code>i</code> is of type <code>*mut I</code>, but a <code>&amp;I</code> is expected. These types obviously do not match up. But you can either easily convert your <code>i</code> to a <code>&amp;I</code> by dereferencing the raw pointer and immediately referencing it again (<code>(&amp;*i).a(42)</code>). Alternatively you can implement the method for pointers:</p>\n\n<pre><code>trait A {\n    fn a(self, n: i32) -&gt; i32;\n}\n\nimpl A for *mut I {\n    fn a(self, n: i32) -&gt; i32 {\n        return 0;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 22825, "user_id": 992687, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/0Da71.png?s=128&g=1", "display_name": "The Unfun Cat", "link": "https://stackoverflow.com/users/992687/the-unfun-cat"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2837, "favorite_count": 0, "accepted_answer_id": 40489907, "answer_count": 3, "score": 0, "last_activity_date": 1478616794, "creation_date": 1478615920, "last_edit_date": 1478616119, "question_id": 40489667, "link": "https://stackoverflow.com/questions/40489667/no-method-named-x-found-for-type-mut-y-in-the-current-scope", "title": "No method named X found for type *mut Y in the current scope", "body": "<p>I want to call the method <code>a</code> on a struct <code>I</code>. I am told Rust can't find the method, but am unsure why:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `a` found for type `*mut I` in the current scope\n\n --&gt; src/lib.rs:7:16\n  |\n7 |     unsafe { i.a(5) }\n  |                ^\n</code></pre>\n\n<p>This is a minimal reproducible example:</p>\n\n<pre><code>extern crate libc;\nuse self::libc::int32_t;\n\n#[no_mangle]\npub extern \"C\" fn i_a(i: *mut I) -&gt; *mut int32_t {\n    unsafe { i.a(5) } // error: no method named `a` found for type `*mut I` in the current scope\n}\n\n#[derive(Debug, PartialEq)]\npub struct I {\n    pub values: Vec&lt;i32&gt;,\n}\n\nimpl I {\n    pub fn a(&amp;self, n: i32) -&gt; i32 {\n        return 0;\n    }\n}\n</code></pre>\n\n<p>How do I fix this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1478613608, "post_id": 40488690, "comment_id": 68221287, "body": "You&#39;ll have to provide a slice instead (or a new array instance). AFAIK a borrowed slice cannot be safely converted to a borrowed array."}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1478613697, "post_id": 40488690, "comment_id": 68221364, "body": "The length goes after the type i.e. <code>&amp;[u32; 10]</code> although I think you&#39;ll have to return an unsized slice: <code>fn foo(array: &amp;[u32; 10]) -&gt; &amp;[u32] { &amp;array[0..5] }</code>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1524933543, "last_edit_date": 1524933543, "creation_date": 1478615073, "answer_id": 40489372, "question_id": 40488690, "link": "https://stackoverflow.com/questions/40488690/borrow-a-section-of-a-borrowed-array-as-a-borrowed-array/40489372#40489372", "title": "Borrow a section of a borrowed array as a borrowed array", "body": "<h3>Stable Rust</h3>\n\n<p>It's not possible to do this using only safe Rust. To understand why, it's important to understand how these types are implemented. An array is guaranteed to have N initialized elements. It cannot get smaller or larger. At compile time, those guarantees allow the size aspect of the array to be removed, and the array only takes up N * sizeof(element) space.</p>\n\n<p>That means that <code>[T; N]</code> and <code>[T; M]</code> are different types (when <code>N</code> != <code>M</code>) and you cannot convert a reference of one to the other.</p>\n\n<p>The <strong>idiomatic</strong> solution is to use a <em>slice</em> instead:</p>\n\n<pre><code>fn foo(array: &amp;[u32; 10]) -&gt; &amp;[u32] {\n    &amp;array[0..5]\n}\n</code></pre>\n\n<p>A slice contains a pointer to the data and the length of the data, thus moving that logic from compile time to run time.</p>\n\n<h3>Nightly Rust</h3>\n\n<p>You can perform a runtime check that the slice is the correct length and convert it to an array in one step:</p>\n\n<pre><code>#![feature(try_from)]\n\nuse std::convert::TryInto;\n\nfn foo(array: &amp;[u32; 10]) -&gt; &amp;[u32; 5] {\n    array[0..5].try_into().unwrap()\n}\n\nfn main() {}\n</code></pre>\n\n<h3>Unsafe Rust</h3>\n\n<p>Because someone might want to do this the unsafe way in an earlier version of Rust, I'll present code <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/array.rs#L152-L163\" rel=\"nofollow noreferrer\">based on the standard library implementation</a>:</p>\n\n<pre><code>fn foo(array: &amp;[u32; 10]) -&gt; &amp;[u32; 5] {\n    let slice = &amp;array[0..5];\n\n    if slice.len() == 5 {\n        let ptr = slice.as_ptr() as *const [u32; 5];\n        unsafe { &amp;*ptr }\n    } else {\n        panic!(\"Needs to be length 5\")\n    }\n}\n\nfn main() {\n    let input = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    let output = foo(&amp;input);\n    println!(\"{:?}\", output);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 2, "last_activity_date": 1478639688, "creation_date": 1478639688, "answer_id": 40496530, "question_id": 40488690, "link": "https://stackoverflow.com/questions/40488690/borrow-a-section-of-a-borrowed-array-as-a-borrowed-array/40496530#40496530", "title": "Borrow a section of a borrowed array as a borrowed array", "body": "<p><a href=\"https://crates.io/crates/arrayref\" rel=\"nofollow noreferrer\">arrayref</a> implements a safe interface for doing this operation, using macros (and compile-time constant slicing bounds, of course).</p>\n\n<p><a href=\"https://github.com/droundy/arrayref#arrayref\" rel=\"nofollow noreferrer\">Their readme</a> explains</p>\n\n<blockquote>\n  <p>The goal of arrayref is to enable the effective use of APIs that involve array references rather than slices, for situations where parameters must have a given size. </p>\n</blockquote>\n\n<p>and</p>\n\n<pre><code>let addr: &amp;[u8; 16] = ...;\nlet mut segments = [0u16; 8];\n// array-based API with arrayref\nfor i in 0 .. 8 {\n    segments[i] = read_u16_array(array_ref![addr,2*i,2]);\n}\n</code></pre>\n\n<blockquote>\n  <p>Here the <code>array_ref![addr,2*i,2]</code> macro allows us to take an array reference to a slice consisting of two bytes starting at 2*i. Apart from the syntax (less nice than slicing), it is essentially the same as the slice approach. However, this code makes explicit the need for precisely two bytes both in the caller, and in the function signature.</p>\n</blockquote>\n"}], "owner": {"reputation": 2060, "user_id": 2561805, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/ad2d8c097cfaa8fdc3ac87bfa9b8d277?s=128&d=identicon&r=PG", "display_name": "goo", "link": "https://stackoverflow.com/users/2561805/goo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 40489372, "answer_count": 2, "score": 1, "last_activity_date": 1524933543, "creation_date": 1478613210, "last_edit_date": 1478618026, "question_id": 40488690, "link": "https://stackoverflow.com/questions/40488690/borrow-a-section-of-a-borrowed-array-as-a-borrowed-array", "title": "Borrow a section of a borrowed array as a borrowed array", "body": "<p>As the title reads, how would I go about doing this?</p>\n\n<pre><code>fn foo(array: &amp;[u32; 10]) -&gt; &amp;[u32; 5] {\n    &amp;array[0..5]\n}\n</code></pre>\n\n<p>Compiler error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:2:5\n  |\n2 |     &amp;array[0..5]\n  |     ^^^^^^^^^^^^ expected array of 5 elements, found slice\n  |\n  = note: expected type `&amp;[u32; 5]`\n  = note:    found type `&amp;[u32]`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 1, "creation_date": 1478600527, "post_id": 40484154, "comment_id": 68212509, "body": "You error says struct, your code says enum?"}, {"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "reply_to_user": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "edited": false, "score": 0, "creation_date": 1478631451, "post_id": 40484154, "comment_id": 68232958, "body": "@Neikos ah, the error occurs in both cases, but with a struct it&#39;s much less annoying to add a phantomdata cause the user isn&#39;t necessarily interacting with it directly. I wanted to make it clear my use case is an enum so it&#39;d be really bad ergonomics to require users to match a phantomdata whenever they unwrap one"}], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1478650850, "post_id": 40484544, "comment_id": 68241168, "body": "N...No. The lifetime bound is used in the body of the enum. The fact that it needs to look at the trait bounds to figure that out doesn&#39;t explain why it isn&#39;t getting it.  This is a helpful answer though. It still looks like neither of these techniques will do it for my use case. IRL, TermValue takes another type that needs a lifetime equivalent to the other, and for&lt;&#39;a&gt; bounding can only apply to one bound at a time, right?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 14, "last_activity_date": 1510520686, "last_edit_date": 1510520686, "creation_date": 1478600835, "answer_id": 40484544, "question_id": 40484154, "link": "https://stackoverflow.com/questions/40484154/parameter-a-is-never-used-error-when-a-is-used-in-type-parameter-bound/40484544#40484544", "title": "&quot;parameter `&#39;a` is never used&quot; error when &#39;a is used in type parameter bound", "body": "<blockquote>\n  <p><code>'a</code> clearly is being used.</p>\n</blockquote>\n\n<p>Not as far as the compiler is concerned.  All it cares about is that all of your generic parameters are used somewhere in the body of the <code>struct</code> or <code>enum</code>.  Constraints <em>do not count.</em></p>\n\n<p>What you <em>might</em> want is to use a higher-ranked lifetime bound:</p>\n\n<pre><code>enum TermValue&lt;LT&gt;\nwhere\n    for&lt;'a&gt; LT: 'a + ListTerm&lt;'a&gt; + Sized,\n{\n    Str(LT),\n}\n</code></pre>\n\n<p>In other situations, you <em>might</em> want to use <code>PhantomData</code> to indicate that you want a type to act <em>as though</em> it uses the parameter:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Thing&lt;'a&gt; {\n    // Causes the type to function *as though* it has a `&amp;'a ()` field,\n    // despite not *actually* having one.\n    _marker: PhantomData&lt;&amp;'a ()&gt;,\n}\n</code></pre>\n\n<p>And just to be clear: you <em>can</em> use <code>PhantomData</code> in an <code>enum</code>; put it in one of the variants:</p>\n\n<pre><code>enum TermValue&lt;'a, LT&gt;\nwhere\n    LT: 'a + ListTerm&lt;'a&gt; + Sized,\n{\n    Str(LT, PhantomData&lt;&amp;'a ()&gt;),\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1605460845, "last_edit_date": 1605460845, "creation_date": 1478611178, "answer_id": 40487993, "question_id": 40484154, "link": "https://stackoverflow.com/questions/40484154/parameter-a-is-never-used-error-when-a-is-used-in-type-parameter-bound/40487993#40487993", "title": "&quot;parameter `&#39;a` is never used&quot; error when &#39;a is used in type parameter bound", "body": "<p><a href=\"https://stackoverflow.com/a/40484544/155423\">DK. answered</a> how to circumvent the issue (by using <code>PhantomData</code> as suggested), and hinted that the issue was that <code>'a</code> was unused in the definition, but why would the compiler care about that?</p>\n<p><code>'a</code> is a lifetime marker. It is used by the borrow-checker to identify the relationship between the lifetime of different objects, as well as their borrow status.</p>\n<p>When borrowing an object, you may borrow it either mutably (<code>&amp;mut T</code>) or immutably (<code>&amp;T</code>), and in accordance with the <em>Mutability XOR Aliasing</em> principle underpinning Rust's memory safety it changes everything:</p>\n<ul>\n<li>You can have multiple concurrent <code>&amp;T</code></li>\n<li>You can only have a single <code>&amp;mut T</code>, and it excludes concurrent <code>&amp;T</code></li>\n</ul>\n<p>When you parameterize your <code>struct</code> or <code>enum</code> with <code>'a</code>, you announce your intention to borrow something whose lifetime will be some <code>'a</code>. You do not, however, announce whether you will be borrowing mutably or immutably, and this detail is critical.</p>\n<p>The compiler, therefore, will peer at the internals of your data type and check whether you use a mutable or immutable reference to deduce, by itself, which kind of borrow will occur when you use the data type.</p>\n<p>And here, because <code>'a</code> is unused, it cannot find any such use and therefore cannot compile your code.</p>\n<hr />\n<p>It is arguable whether the compiler peering inside the data type is a good thing or not, since changing the internals of this data type (from <code>&amp;T</code> to <code>&amp;mut T</code>) could lead to compilation failures without changing the type interface.</p>\n<p>It is important, thus, to remember that <em>how</em> you use the generic parameters (owning, borrowing mutably or borrowing immutably) is NOT an implementation detail.</p>\n"}, {"tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 2, "last_activity_date": 1510531870, "last_edit_date": 1592644375, "creation_date": 1510531870, "answer_id": 47255445, "question_id": 40484154, "link": "https://stackoverflow.com/questions/40484154/parameter-a-is-never-used-error-when-a-is-used-in-type-parameter-bound/47255445#47255445", "title": "&quot;parameter `&#39;a` is never used&quot; error when &#39;a is used in type parameter bound", "body": "<p>If you aren't using an associated type (like <code>&lt;LT as ListTerm&lt;'a&gt;&gt;::Iter</code>) in the enum definition, you probably don't need to make <code>'a</code> a parameter at all.</p>\n<p>I assume you want the <code>LT: ListTerm&lt;'a&gt;</code> bound so that you can write one or more <code>fn</code>s or an <code>impl</code> that uses <code>LT</code> as a <code>ListTerm</code>. In which case, you can easily parameterize the type with just <code>&lt;LT&gt;</code>, and put the <code>'a</code> generic and trait bound only on the items that require it:</p>\n<pre><code>trait ListTerm&lt;'a&gt; {\n    type Iter: Iterator&lt;Item = &amp;'a u32&gt;;\n    fn iter(&amp;'a self) -&gt; Self::Iter;\n}\n\nenum TermValue&lt;LT&gt; {  // no 'a parameter here...\n    Str(LT),\n}\n\nimpl&lt;'a, LT&gt; TermValue&lt;LT&gt;  // ... just here\nwhere\n    LT: ListTerm&lt;'a&gt;,\n{\n    fn iter(&amp;'a self) -&gt; LT::Iter {\n        match *self {\n            TermValue::Str(ref term) =&gt; term.iter(),\n        }\n    }\n}\n</code></pre>\n<p>Some standard library types like <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#impl\" rel=\"nofollow noreferrer\"><code>std::collections::HashMap&lt;K, V&gt;</code></a> do this: the <code>K: Hash + Eq</code> bound isn't on the type itself. Alternatively, you could have a <code>where</code> clause on each method where the bound is needed. The difference between a <code>where</code> clause on an <code>impl</code> and one on a <code>fn</code> is not significant unless you're implementing a trait (see <a href=\"https://stackoverflow.com/q/36142626/3650362\">this question</a>).</p>\n<p>The main reason for using <code>PhantomData</code> is that you want to express some constraint that the compiler can't figure out by itself. You <em>don't</em> need <code>PhantomData</code> to express &quot;Any <code>TermData&lt;LT&gt;</code> is only valid as long as its contained <code>LT</code> is valid&quot;, because the compiler already enforces that (by &quot;peering inside&quot; the type, as in <a href=\"https://stackoverflow.com/a/40487993/3650362\">Matthieu's answer</a>).</p>\n"}], "owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1783, "favorite_count": 1, "answer_count": 3, "score": 9, "last_activity_date": 1605460845, "creation_date": 1478599847, "last_edit_date": 1510520221, "question_id": 40484154, "link": "https://stackoverflow.com/questions/40484154/parameter-a-is-never-used-error-when-a-is-used-in-type-parameter-bound", "title": "&quot;parameter `&#39;a` is never used&quot; error when &#39;a is used in type parameter bound", "body": "<pre><code>use std::iter::Iterator;\n\ntrait ListTerm&lt;'a&gt; {\n    type Iter: Iterator&lt;Item = &amp;'a u32&gt;;\n    fn iter(&amp;'a self) -&gt; Self::Iter;\n}\n\nenum TermValue&lt;'a, LT&gt;\nwhere\n    LT: ListTerm&lt;'a&gt; + Sized + 'a,\n{\n    Str(LT),\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `'a` is never used\n --&gt; src/main.rs:8:16\n  |\n8 | enum TermValue&lt;'a, LT&gt;\n  |                ^^ unused type parameter\n  |\n  = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p><code>'a</code> clearly is being used. Is this a bug, or are parametric enums just not really finished? <code>rustc --explain E0392</code> recommends the use of <code>PhantomData&lt;&amp;'a _&gt;</code>, but I don't think there's any opportunity to do that in my use case.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 1, "creation_date": 1478599275, "post_id": 40482981, "comment_id": 68211627, "body": "Looks like it fixed in Beta and Nightly. <a href=\"https://play.rust-lang.org/?gist=450c131dcefde855ea0cbd832290e046&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1699, "user_id": 783825, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/cce2622c5ccd49a3cbf2007491ab1075?s=128&d=identicon&r=PG", "display_name": "Neikos", "link": "https://stackoverflow.com/users/783825/neikos"}, "is_accepted": true, "score": 5, "last_activity_date": 1478602431, "last_edit_date": 1478602431, "creation_date": 1478598506, "answer_id": 40483675, "question_id": 40482981, "link": "https://stackoverflow.com/questions/40482981/if-condition-remains-borrowed-in-body/40483675#40483675", "title": "`if` condition remains borrowed in body", "body": "<p>This is due to Rust's lexical borrowing scope. </p>\n\n<p>As you have noticed, borrowing something in the condition also borrows it for the branch. This is discussed in <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"noreferrer\">this issue</a>, and has since moved <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"noreferrer\">here</a>.</p>\n\n<p>This is a limitation that is currently fixed in the Rust 1.13 Beta and will thus probably be released in the next cycle.</p>\n"}], "owner": {"reputation": 1258, "user_id": 878951, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9e067b2b71d17b193cd26e2e4bd282a2?s=128&d=identicon&r=PG", "display_name": "Fabian Schuiki", "link": "https://stackoverflow.com/users/878951/fabian-schuiki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 210, "favorite_count": 0, "closed_date": 1478610915, "accepted_answer_id": 40483675, "answer_count": 1, "score": 5, "last_activity_date": 1478602431, "creation_date": 1478596415, "question_id": 40482981, "link": "https://stackoverflow.com/questions/40482981/if-condition-remains-borrowed-in-body", "closed_reason": "Duplicate", "title": "`if` condition remains borrowed in body", "body": "<p>I just came across some behaviour in Rust (1.12) I cannot explain. I have a struct that implements lazy loading with a <code>RefCell&lt;Option&lt;i32&gt;&gt;</code> and a function to access the data:</p>\n\n<pre><code>struct Foo {\n    data: RefCell&lt;Option&lt;i32&gt;&gt;\n}\n\nimpl Foo {\n    fn get_data(&amp;self) -&gt; i32 {\n        if self.data.borrow().is_none() { // &lt;--- (a)\n            let d = 1337;\n            self.data.borrow_mut() = Some(d); // &lt;--- (b)\n            d\n        } else {\n            self.data.borrow().unwrap()\n        }\n    }\n}\n</code></pre>\n\n<p>This compiles but yields a runtime error: The <code>RefCell</code> complains that a borrow is already active when attempting to <code>borrow_mut</code> on line <strong>(b)</strong>. The issue does not occur, however, if I change the if statement to the following:</p>\n\n<pre><code>let is_none = self.data.borrow().is_none();\nif is_none {\n</code></pre>\n\n<p><strong>Question:</strong> Why is the borrow in the if condition on line <strong>(a)</strong> still active inside the body of the if statement? Shouldn't the call to <code>is_none()</code> cause the borrow to end, since I'm only holding on to a <code>bool</code> afterwards, and not the borrowed value?</p>\n"}, {"tags": ["macros", "namespaces", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1478612854, "last_edit_date": 1478612854, "creation_date": 1478590514, "answer_id": 40481359, "question_id": 40481199, "link": "https://stackoverflow.com/questions/40481199/how-to-define-some-macros-as-private-to-a-module-when-using-macro-use-in-ru/40481359#40481359", "title": "How to define some macros as &#39;private&#39; to a module, when using `macro_use` in Rust?", "body": "<p>Currently, the macro namespace bounds can only be constrained across crates.</p>\n\n<p>The only way to make some macros private is to split the module into a crate, then use <code>#[macro_export]</code> to define which macros are exported from that crate.</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/book/macros.html#scoping-and-macro-importexport\" rel=\"nofollow noreferrer\">Rust's documentation on this topic</a>.</p>\n\n<hr>\n\n<p>Note: there may be some obscure way to do this, but from reading documentation it seems this feature isn't officially supported, which is why I posted this answer - happy to be proven wrong!</p>\n\n<p>The #rust IRC channel states that this is something which might be supported in Macros 2.0.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478613081, "post_id": 40484901, "comment_id": 68220933, "body": "The example shows a single implementation and use. How could this be shared between multiple macros?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478615604, "post_id": 40484901, "comment_id": 68222749, "body": "@ideasman42: Nothing precludes you from invoking <code>hello_world!(impl ...)</code> from another macro. It is not so much denied as hidden."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1478601944, "creation_date": 1478601944, "answer_id": 40484901, "question_id": 40481199, "link": "https://stackoverflow.com/questions/40481199/how-to-define-some-macros-as-private-to-a-module-when-using-macro-use-in-ru/40484901#40484901", "title": "How to define some macros as &#39;private&#39; to a module, when using `macro_use` in Rust?", "body": "<p>There actually is an idiom in Rust, to hide away \"implementation-detail\" macros.</p>\n\n<p>Rather than declaring a separate macros, you can instead declare a separate <em>case</em> within the existing macro. The examples I've seen would use the <code>impl</code> keyword for this, and the <code>impl</code> cases are located at the bottom of the macro definition.</p>\n\n<p>Thus, instead of:</p>\n\n<pre><code>macro_rules! hello_impl {\n    ($name:expr) =&gt; {\n        println!(\"Hello {}!\", $name);\n    }\n}\n\nmacro_rules! hello_world {\n    () =&gt; {\n        hello_impl!(\"world\");\n    }\n}\n</code></pre>\n\n<p>You use:</p>\n\n<pre><code>macro_rules! hello_world {\n    () =&gt; {\n        hello_world!(impl \"world\");\n    },\n    (impl $name:expr) =&gt; {\n        println!(\"Hello {}!\", $name);\n    }\n}\n</code></pre>\n\n<p>This way, there is no implementation macro any longer; and you only have one macro to export.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 885, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1478612854, "creation_date": 1478589961, "last_edit_date": 1478612827, "question_id": 40481199, "link": "https://stackoverflow.com/questions/40481199/how-to-define-some-macros-as-private-to-a-module-when-using-macro-use-in-ru", "title": "How to define some macros as &#39;private&#39; to a module, when using `macro_use` in Rust?", "body": "<p>I have a file which contains shared macros for a Rust project.</p>\n\n<p>Since I want to re-use the macros across the crate (between modules), I declare the module with <code>#[macro_use]</code>.</p>\n\n<p>While writing the macros, I split out some shared logic into a macro to avoid repetition, in this case I can't use a private function, it needs to be a macro.\nIf possible, I'd like to hide this shared macro so it can't be used directly by other modules.</p>\n\n<p>Is there a way to make some macros <em>private</em>, so they aren't exposed to other modules in the same crate via <code>#[macro_use]</code>?</p>\n"}, {"tags": ["algorithm", "math", "rust", "ascii-art"], "comments": [{"owner": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "edited": false, "score": 1, "creation_date": 1478614657, "post_id": 40479958, "comment_id": 68222043, "body": "With Hough-transforms a lot depends on the actual image and how sharp the edges are. The busier the image the more complex the results of the transform will be. What I would do is generate an image of the output to examine what the is produced.  It might help to add the input and output images to the question."}, {"owner": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "edited": false, "score": 1, "creation_date": 1478614995, "post_id": 40479958, "comment_id": 68222291, "body": "One think which seems suspicious is the fact you are rounding the r values quite strongly, with only 4 levels. This will mean you are basically checking with a very wide line, lots of points will contribute to the same line."}, {"owner": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "edited": false, "score": 1, "creation_date": 1478619758, "post_id": 40479958, "comment_id": 68225756, "body": "If you actually plot the lines in the output you find they are quite similar lines, some of them are parallel differing by a pixel. By considering a small image you are making life harder for yourself. Try something more like a 100 x 100 image and you will see the results becoming clearer. Try altering the granuallity of r and angle steps to see what happens."}, {"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "reply_to_user": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "edited": false, "score": 0, "creation_date": 1478655536, "post_id": 40479958, "comment_id": 68242256, "body": "@Salixalba I also tried with a 30x30 matrix, the results are even with the edited version quite far off unfortunately. :("}], "answers": [{"comments": [{"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1478653945, "post_id": 40491973, "comment_id": 68241929, "body": "That makes sense, thank you. I tried an updated version, it now finds only 2 lines, which makes more sense to me. The issue is however, that both lines are really far off from what I would expect, the program reports lines from <code>3,4</code> to <code>-1,-1</code> and <code>-3,1</code> to <code>2,2</code>. I updated the question with my new code, probably the conversion back to points is still off."}], "tags": [], "owner": {"reputation": 103, "user_id": 6760522, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5f9ab79fca50acb5c493a174c47549d5?s=128&d=identicon&r=PG&f=1", "display_name": "RaymoAisla", "link": "https://stackoverflow.com/users/6760522/raymoaisla"}, "is_accepted": false, "score": 1, "last_activity_date": 1478622601, "creation_date": 1478622601, "answer_id": 40491973, "question_id": 40479958, "link": "https://stackoverflow.com/questions/40479958/implementing-hough-transform-line-detection-in-2d-coordinate-system/40491973#40491973", "title": "Implementing Hough transform line detection in 2D coordinate system", "body": "<p>Hough Transform principle is to search all the lines passing through each considered point, and counting these lines occurrences thanks to the accumulator.</p>\n\n<p>However, we cannot determine all these lines because their number is infinite. Moreover the image is discretized, so calculating all lines does not make sense.</p>\n\n<p>And the problem comes from this discretization. The angle discretization needs to be relevant with the image size. Here, calculating the radius for 180 angles is overcalculation, because the image only make 9 pixels, and the possible angles for any line in this image are restricted to a dozen value.</p>\n\n<p>So here, for the first point (0,0), for each angle, the associated radius is r = 0</p>\n\n<p>For the second (1,0), the associated radius is r = cos(angle)</p>\n\n<p>For the third (2,0), the associated radius is r = 2 cos(angle)</p>\n\n<p>With the rounding, numerous values will have an associated radius of 0 for the same angle, and it cause over-detection. Discretization causes a spreading of Hough Accumulator.</p>\n\n<p>So the radius and the angle discretization needs to be calculated depending on the image size. Here, a 30\u00b0 step, so a 7*3 accumulator will be sufficient to detect a line.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478700417, "post_id": 40508810, "comment_id": 68259819, "body": "FYI <a href=\"https://doc.rust-lang.org/std/\" rel=\"nofollow noreferrer\">online API docs</a> are searchable, there are <a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians\" rel=\"nofollow noreferrer\">methods on floating point types to convert to radians</a>, and there are <a href=\"https://doc.rust-lang.org/std/f64/consts/constant.PI.html\" rel=\"nofollow noreferrer\">values of pi for each type of floating point</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478700575, "post_id": 40508810, "comment_id": 68259911, "body": "<a href=\"http://play.integer32.com/?gist=18cfdca6a7bd90924f1187dfe50bca48&amp;version=stable\" rel=\"nofollow noreferrer\">Example</a>."}, {"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478741735, "post_id": 40508810, "comment_id": 68279049, "body": "Thank you for your answer, I didn&#39;t know that. The results are still not what I want, so I think I have to start over again, the implementation seems kind of wrong all in all. Accepting this answer, as it gave me some guidelines how to work with math functions in general and in rust in specfic, also thanks to @Shepmaster"}, {"owner": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "edited": false, "score": 0, "creation_date": 1478757783, "post_id": 40508810, "comment_id": 68282705, "body": "I&#39;ve run a version of the modified of the code which is giving more believable answers. There is a second problem with your r values. Sometimes these go negative, yet the scalling function rounds anything &lt; 1 upto 1."}, {"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1478761163, "post_id": 40508810, "comment_id": 68283922, "body": "@Salixalba hm i thought I implement a scaling function in order to use the values as an offset in the accumulator matrix."}], "tags": [], "owner": {"reputation": 6816, "user_id": 865481, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/0b2if.gif?s=128&g=1", "display_name": "Salix alba", "link": "https://stackoverflow.com/users/865481/salix-alba"}, "is_accepted": true, "score": 2, "last_activity_date": 1478700472, "last_edit_date": 1478700472, "creation_date": 1478700097, "answer_id": 40508810, "question_id": 40479958, "link": "https://stackoverflow.com/questions/40479958/implementing-hough-transform-line-detection-in-2d-coordinate-system/40508810#40508810", "title": "Implementing Hough transform line detection in 2D coordinate system", "body": "<p>Your angles are in degrees rather than radians!</p>\n\n<p>Rust, like all other programming languages, uses radians for its trigonometry functions. Running</p>\n\n<pre><code>let ang_d = 30.0;\nlet ang_r = ang_d * 3.1415926 / 180.0;\nprintln!(\"sin(30) {} sin(30*pi/180) {}\", (ang_d as f32).sin(), (ang_r as f32).sin());\n</code></pre>\n\n<p>gives the results </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>sin(30) -0.9880316 sin(30*pi/180) 0.5\n</code></pre>\n\n<p>You need to convert all your angles to radians before calling <code>cos</code> and <code>sin</code>.</p>\n\n<p>In the first loop I've got</p>\n\n<pre><code>let angle = (i as f32) * 30.0 * 3.1415926 / 180.0;\nlet r = (x as f32) * (angle as f32).cos() + (y as f32) * (angle as f32).sin();\n</code></pre>\n\n<p>and in the second where you calculate the points on the lines </p>\n\n<pre><code>let ang = (z as f32) * 30.0 * 3.1415926 / 180.0;\nlet px = (r as f32) * (ang as f32).cos();\nlet py = (r as f32) * (ang as f32).sin();\nlet p1_px = px + (max_line_length as f32) * (ang as f32).cos();          \nlet p1_py = py + (max_line_length as f32) * (ang as f32).sin();\nlet p2_px = px - (max_line_length as f32) * (ang as f32).cos();\nlet p2_py = px - (max_line_length as f32) * (ang as f32).cos();\n</code></pre>\n\n<p>My Rust is rusty (actually non-existent) so there is nicer ways of doing the conversion and there should be a constant with the exact value of pi somewhere.</p>\n"}], "owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 705, "favorite_count": 0, "accepted_answer_id": 40508810, "answer_count": 2, "score": 0, "last_activity_date": 1478700472, "creation_date": 1478584630, "last_edit_date": 1478654281, "question_id": 40479958, "link": "https://stackoverflow.com/questions/40479958/implementing-hough-transform-line-detection-in-2d-coordinate-system", "title": "Implementing Hough transform line detection in 2D coordinate system", "body": "<p>I want to implement line detection in a simple coordinate system. I roughly followed an article about how to implement <a href=\"http://www.sunshine2k.de/coding/java/Houghtransformation/HoughTransform.html\" rel=\"nofollow noreferrer\">the Hough Transform</a>, but the results I get are quite far off from what I want.</p>\n\n<p>Given a 3 x 3 matrix like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>X X X\nX X X\n- - -\n</code></pre>\n\n<p>I want to detect the line starting at <code>0,0</code> going to <code>2,0</code>. I represent the coordinate system as a simple array of tuples, the first item in the tuple is x, the second is y, the third is the type of the point (canvas or line).</p>\n\n<p>I thought it would be relatively easy to detect the line using Hough, because the edge detection is basically just a binary decision: either the tuple is of type line, or not.</p>\n\n<p>I implemented the following program in Rust:</p>\n\n<pre><code>use std::f32;\n\nextern crate nalgebra as na;\nuse na::DMatrix;\n\n#[derive(Debug, PartialEq, Clone)]\nenum Representation {\n   Canvas,\n   Line,\n}\n\nfn main () {\n    let image_width = 3;\n    let image_height = 3;\n\n    let grid = vec![\n        (0, 0, Representation::Line), (1, 0, Representation::Line), (2, 0, Representation::Line),\n        (0, 1, Representation::Canvas), (1, 1, Representation::Canvas), (2, 1, Representation::Canvas),\n        (0, 2, Representation::Canvas), (1, 2, Representation::Canvas), (2, 2, Representation::Canvas),\n    ];\n\n    //let tmp:f32 = (image_width as f32 * image_width as f32) + (image_height as f32 * image_height as f32);\n    let max_line_length = 3;\n    let mut accumulator = DMatrix::from_element(180, max_line_length as usize, 0);\n\n    for y in 0..image_height {\n        for x in 0..image_width {\n            let coords_index = (y * image_width) + x;\n            let coords = grid.get(coords_index as usize).unwrap();\n\n            // check if coords is an edge\n            if coords.2 == Representation::Line {\n                for angle in 0..180 {\n                    let r = (x as f32) * (angle as f32).cos() + (y as f32) * (angle as f32).sin();\n                    let r_scaled = scale_between(r, 0.0, 2.0, -2.0, 2.0).round() as u32;\n\n                    accumulator[(angle as usize, r_scaled as usize)] += 1;\n                }\n            }\n        }\n    }\n\n    let threshold = 3;\n\n    // z = angle\n    for z in 0..180 {\n        for r in 0..3 {\n            let val = accumulator[(z as usize, r as usize)];\n\n            if val &lt; threshold {\n                continue;\n            }\n\n            let px = (r as f32) * (z as f32).cos();\n            let py = (r as f32) * (z as f32).sin();\n\n            let p1_px = px + (max_line_length as f32) * (z as f32).cos();\n            let p1_py = py + (max_line_length as f32) * (z as f32).sin();\n\n            let p2_px = px - (max_line_length as f32) * (z as f32).cos();\n            let p2_py = px - (max_line_length as f32) * (z as f32).cos();\n\n            println!(\"Found lines from {}/{} to {}/{}\", p1_px.ceil(), p1_py.ceil(), p2_px.ceil(), p2_py.ceil());\n        }\n    }\n}\n\nfn scale_between(unscaled_num: f32, min_allowed: f32, max_allowed: f32, min: f32, max: f32) -&gt; f32 {\n    (max_allowed - min_allowed) * (unscaled_num - min) / (max - min) + min_allowed\n}\n</code></pre>\n\n<p>The result is something like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Found lines from -1/4 to 1/1\nFound lines from 2/4 to 0/0\nFound lines from 2/-3 to 0/0\nFound lines from -1/4 to 1/1\nFound lines from 1/-3 to 0/0\nFound lines from 0/4 to 1/1\n...\n</code></pre>\n\n<p>Which is actually quite a lot, given that I only want to detect a single line. My implementation clearly is wrong, but I don't know where to look, my maths-fu is not high enough to debug further. </p>\n\n<p>I think the first part, the actual Hough Transform, seems kind of correct, because the linked article says:</p>\n\n<blockquote>\n<pre><code>for each image point p \n{\n  if (p is part of an edge)\n  {\n    for each possible angle\n    {\n     r = x * cos(angle) + y * sin(angle);\n     houghMatrix[angle][r]++;\n    }\n  }\n}\n</code></pre>\n</blockquote>\n\n<p>I'm stuck at mapping and filtering, which is according to the article:</p>\n\n<blockquote>\n  <ol>\n  <li><p>Each point in Hough space is given by angle a and distance r. Using these values, one single point p(x,y) of the line can be calculated by\n  px = r * cos(angle)\n  py = r * sin(angle).</p></li>\n  <li><p>The maximum length of a line is restricted by sqrt(imagewidth2 + imageheight2).</p></li>\n  <li><p>The point p, the angle a of the line and the maximum line length 'maxLength' can be used to calculate two other points of the line. The maximum length here ensures that both points to be calculated are lying outside of the actual image, resulting in the fact that if a line is drawn between these two points, the line goes from image border to image border in any case and is never cropped somewhere inside the image.</p></li>\n  <li><p>These two points p1 and p2 are calculated by:\n  p1_x = px + maxLength * cos(angle);\n  p1_y = py + maxLength * sin(angle);\n  p2_x = px - maxLength * cos(angle);\n  p2_y = py - maxLength * sin(angle);</p></li>\n  <li><p>...</p></li>\n  </ol>\n</blockquote>\n\n<p><strong>EDIT</strong></p>\n\n<p>Updated version that takes the image size into account, as suggested by @RaymoAisla</p>\n\n<pre><code>use std::f32;\n\nextern crate nalgebra as na;\nuse na::DMatrix;\n\nfn main () {\n    let image_width = 3;\n    let image_height = 3;\n\n    let mut grid = DMatrix::from_element(image_width as usize, image_height as usize, 0);\n    grid[(0, 0)] = 1;\n    grid[(1, 0)] = 1;\n    grid[(2, 0)] = 1;\n\n    let accu_width = 7;\n    let accu_height = 3;\n    let max_line_length = 3;\n\n    let mut accumulator = DMatrix::from_element(accu_width as usize, accu_height as usize, 0);\n\n\n    for y in 0..image_height {\n        for x in 0..image_width {\n            let coords = (x, y);\n            let is_edge = grid[coords] == 1;\n\n            if !is_edge {\n                continue;\n            }\n\n            for i in 0..7 {\n                let angle = i * 30;\n\n                let r = (x as f32) * (angle as f32).cos() + (y as f32) * (angle as f32).sin();\n                let r_scaled = scale_between(r, 0.0, 2.0, -2.0, 2.0).round() as u32;\n\n                accumulator[(i as usize, r_scaled as usize)] += 1;\n\n                println!(\"angle: {}, r: {}, r_scaled: {}\", angle, r, r_scaled);\n            }\n        }\n    }\n\n    let threshold = 3;\n\n    // z = angle index\n    for z in 0..7 {\n        for r in 0..3 {\n            let val = accumulator[(z as usize, r as usize)];\n\n            if val &lt; threshold {\n                continue;\n            }\n\n            let px = (r as f32) * (z as f32).cos();\n            let py = (r as f32) * (z as f32).sin();\n\n            let p1_px = px + (max_line_length as f32) * (z as f32).cos();\n            let p1_py = py + (max_line_length as f32) * (z as f32).sin();\n\n            let p2_px = px - (max_line_length as f32) * (z as f32).cos();\n            let p2_py = px - (max_line_length as f32) * (z as f32).cos();\n\n            println!(\"Found lines from {}/{} to {}/{} - val: {}\", p1_px.ceil(), p1_py.ceil(), p2_px.ceil(), p2_py.ceil(), val);\n        }\n    }\n}\n\nfn scale_between(unscaled_num: f32, min_allowed: f32, max_allowed: f32, min: f32, max: f32) -&gt; f32 {\n    (max_allowed - min_allowed) * (unscaled_num - min) / (max - min) + min_allowed\n}\n</code></pre>\n\n<p>The reported output is now:</p>\n\n<pre><code>angle: 0, r: 0, r_scaled: 1\nangle: 30, r: 0, r_scaled: 1\nangle: 60, r: 0, r_scaled: 1\nangle: 90, r: 0, r_scaled: 1\nangle: 120, r: 0, r_scaled: 1\nangle: 150, r: 0, r_scaled: 1\nangle: 180, r: 0, r_scaled: 1\n...\nFound lines from 3/4 to -1/-1\nFound lines from -3/1 to 2/2 \n</code></pre>\n\n<p>I plotted the lines on a coordinate system, the lines are very far off from the line that I would expect. I wonder if the conversion back to points is still off. </p>\n"}, {"tags": ["linux", "tcp", "server", "network-programming", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1543230146, "last_edit_date": 1543230146, "creation_date": 1478574762, "answer_id": 40478329, "question_id": 40468685, "link": "https://stackoverflow.com/questions/40468685/how-to-set-the-socket-option-so-reuseport-in-rust/40478329#40478329", "title": "How to set the socket option SO_REUSEPORT in Rust?", "body": "<p>Because <a href=\"https://stackoverflow.com/q/14388706/155423\"><code>SO_REUSEPORT</code> isn't cross-platform</a>, you will need to dip into platform-specific code. In this case, you can get the raw file descriptor from the socket and then use functions, types, and values from the libc crate to set the options you want:</p>\n\n<pre><code>extern crate libc; // 0.2.43\n\nuse std::{io, mem, net::TcpListener, os::unix::io::AsRawFd};\n\nfn main() -&gt; Result&lt;(), io::Error&gt; {\n    let listener = TcpListener::bind(\"0.0.0.0:8888\")?;\n\n    unsafe {\n        let optval: libc::c_int = 1;\n        let ret = libc::setsockopt(\n            listener.as_raw_fd(),\n            libc::SOL_SOCKET,\n            libc::SO_REUSEPORT,\n            &amp;optval as *const _ as *const libc::c_void,\n            mem::size_of_val(&amp;optval) as libc::socklen_t,\n        );\n        if ret != 0 {\n            return Err(io::Error::last_os_error());\n        }\n    }\n\n    Ok(())\n}\n</code></pre>\n\n<p>I make no guarantee that this is the right place to set this option, or that I haven't screwed up something in the unsafe block, but it does compile and run on macOS 10.12.</p>\n\n<p>A better solution may be to check out the <a href=\"https://crates.io/crates/nix\" rel=\"noreferrer\">nix crate</a>, which provides nicer wrappers for most *nix-specific code:</p>\n\n<pre><code>extern crate nix; // 0.11.0\n\nuse nix::sys::socket::{self, sockopt::ReusePort};\nuse std::{error::Error, net::TcpListener, os::unix::io::AsRawFd};\n\nfn main() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let listener = TcpListener::bind(\"0.0.0.0:8888\")?;\n    socket::setsockopt(listener.as_raw_fd(), ReusePort, &amp;true)?;\n\n    Ok(())\n}\n</code></pre>\n\n<p>An even better solution may be to check out the <a href=\"https://crates.io/crates/net2\" rel=\"noreferrer\">net2 crate</a>, which provides higher-level methods aimed specifically at networking-related code:</p>\n\n<pre><code>extern crate net2; // 0.2.33\n\nuse net2::{unix::UnixTcpBuilderExt, TcpBuilder};\n\nfn main() -&gt; Result&lt;(), std::io::Error&gt; {\n    let listener = TcpBuilder::new_v4()?\n        .reuse_address(true)?\n        .reuse_port(true)?\n        .bind(\"0.0.0.0:8888\")?\n        .listen(42)?;\n\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 632, "user_id": 4068848, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/FD7nX.png?s=128&g=1", "display_name": "huron", "link": "https://stackoverflow.com/users/4068848/huron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3145, "favorite_count": 0, "accepted_answer_id": 40478329, "answer_count": 1, "score": 4, "last_activity_date": 1543230146, "creation_date": 1478532171, "last_edit_date": 1478574777, "question_id": 40468685, "link": "https://stackoverflow.com/questions/40468685/how-to-set-the-socket-option-so-reuseport-in-rust", "title": "How to set the socket option SO_REUSEPORT in Rust?", "body": "<p>I've read the documentation for <code>std::net</code> and mio, and I've found some methods like <code>set_nodelay</code> and <code>set_keepalive</code>, but I haven't found a way to set other socket options like <code>SO_REUSEPORT</code> and <code>SO_REUSEADDR</code> on a given socket. How can I do this?</p>\n"}, {"tags": ["rust", "bit-manipulation"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478530195, "post_id": 40467995, "comment_id": 68180147, "body": "Are you looking for how to twiddle bits?"}, {"owner": {"reputation": 26723, "user_id": 995714, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/w1393.jpg?s=128&g=1", "display_name": "phuclv", "link": "https://stackoverflow.com/users/995714/phuclv"}, "edited": false, "score": 0, "creation_date": 1478530275, "post_id": 40467995, "comment_id": 68180201, "body": "does Rust have bitwise operators?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1478530605, "post_id": 40467995, "comment_id": 68180434, "body": "Haven&#39;t you tried <code>&amp;</code>, <code>|</code> and <code>^</code>? They&#39;re all available in Rust."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 26723, "user_id": 995714, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/w1393.jpg?s=128&g=1", "display_name": "phuclv", "link": "https://stackoverflow.com/users/995714/phuclv"}, "edited": false, "score": 0, "creation_date": 1478530668, "post_id": 40467995, "comment_id": 68180485, "body": "@L\u01b0uV\u0129nhPh&#250;c: It has."}, {"owner": {"reputation": 26723, "user_id": 995714, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/w1393.jpg?s=128&g=1", "display_name": "phuclv", "link": "https://stackoverflow.com/users/995714/phuclv"}, "edited": false, "score": 0, "creation_date": 1478530864, "post_id": 40467995, "comment_id": 68180642, "body": "Then why don&#39;t just use what&#39;s in the other question?"}], "answers": [{"comments": [{"owner": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 1, "creation_date": 1478617069, "post_id": 40468202, "comment_id": 68223882, "body": "Interesting bit about <code>!</code> versus <code>~</code>. I would probably have tried the latter first."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "edited": false, "score": 2, "creation_date": 1478617580, "post_id": 40468202, "comment_id": 68224259, "body": "@XavierT. yeah, it&#39;s definitely different, but IMO it does make more sense in the end. It is just a negation, after all."}, {"owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "edited": false, "score": 1, "creation_date": 1478640485, "post_id": 40468202, "comment_id": 68237551, "body": "fyi, the notation <code>&quot;{:#08b}&quot;</code> is designed to print the &#39;0b&#39; (or &#39;0x&#39;, etc) before the binary number"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "edited": false, "score": 1, "creation_date": 1478640716, "post_id": 40468202, "comment_id": 68237669, "body": "@Djzin TIL! However, the zero-padding doesn&#39;t feel &quot;right&quot;; you actually have to use <code>{:#010b}</code> because it&#39;s an overall width :-("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 38, "last_activity_date": 1560955954, "last_edit_date": 1560955954, "creation_date": 1478530716, "answer_id": 40468202, "question_id": 40467995, "link": "https://stackoverflow.com/questions/40467995/how-do-you-set-clear-and-toggle-a-single-bit-in-rust/40468202#40468202", "title": "How do you set, clear and toggle a single bit in Rust?", "body": "<p>Like many other languages, the bitwise operators <code>&amp;</code> (bitwise AND), <code>|</code> (bitwise OR), <code>^</code> (bitwise XOR) exist:</p>\n\n<pre><code>fn main() {\n    let mut byte: u8 = 0b0000_0000;\n\n    byte |= 0b0000_1000; // Set a bit\n    println!(\"0b{:08b}\", byte);\n\n    byte &amp;= 0b1111_0111; // Unset a bit\n    println!(\"0b{:08b}\", byte);\n\n    byte ^= 0b0000_1000; // Toggle a bit\n    println!(\"0b{:08b}\", byte);\n}\n</code></pre>\n\n<p>The main difference from other languages is in bitwise NOT, which uses <code>!</code> instead of <code>~</code>:</p>\n\n<pre><code>fn main() {\n    let mut byte: u8 = 0b0000_0000;\n\n    byte = !byte; // Flip all bits\n    println!(\"0b{:08b}\", byte);\n}\n</code></pre>\n\n<p>You can also shift bits left or right:</p>\n\n<pre><code>fn main() {\n    let mut byte: u8 = 0b0000_1000;\n\n    byte &lt;&lt;= 1; // shift left one bit\n    println!(\"0b{:08b}\", byte);\n\n    byte &gt;&gt;= 1; // shift right one bit\n    println!(\"0b{:08b}\", byte);\n}\n</code></pre>\n\n<p>There are many other conceptual things that ultimately do bit-level manipulation that are not expressed with operators. Check out the <a href=\"https://doc.rust-lang.org/std/primitive.i8.html\" rel=\"noreferrer\">documentation for an integer</a> for examples. One interesting example is <a href=\"https://doc.rust-lang.org/std/primitive.i8.html#method.leading_zeros\" rel=\"noreferrer\"><code>leading_zeros</code></a>. Here is how to rotate by a certain number of bits:</p>\n\n<pre><code>fn main() {\n    let mut byte: u8 = 0b1000_0000;\n\n    byte = byte.rotate_left(1); // rotate left one bit\n    println!(\"0b{:08b}\", byte);\n\n    byte = byte.rotate_right(1); // rotate right one bit\n    println!(\"0b{:08b}\", byte);\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/appendix-02-operators.html\" rel=\"noreferrer\">The book has some more information</a></p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 9, "last_activity_date": 1560932625, "last_edit_date": 1560932625, "creation_date": 1478530727, "answer_id": 40468208, "question_id": 40467995, "link": "https://stackoverflow.com/questions/40467995/how-do-you-set-clear-and-toggle-a-single-bit-in-rust/40468208#40468208", "title": "How do you set, clear and toggle a single bit in Rust?", "body": "<p>Rust has both bit-twiddling operators and binary format printing (very helpful for debugging):</p>\n\n<pre><code>fn bit_twiddling(original: u8, bit: u8) {\n    let mask = 1 &lt;&lt; bit;\n\n    println!(\n        \"Original: {:b}, Set: {:b}, Cleared: {:b}, Toggled: {:b}\",\n        original,\n        original |  mask,\n        original &amp; !mask,\n        original ^  mask\n    );\n}\n\nfn main() {\n    bit_twiddling(0, 3);\n    bit_twiddling(8, 3);\n}\n</code></pre>\n\n<p>It also has the compound assignment variants (<code>|=</code>, <code>&amp;=</code> and <code>^=</code>).</p>\n\n<p><a href=\"https://doc.rust-lang.org/book/appendix-02-operators.html\" rel=\"noreferrer\">The book has some more information</a></p>\n"}], "owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13343, "favorite_count": 6, "accepted_answer_id": 40468202, "answer_count": 2, "score": 22, "last_activity_date": 1560955954, "creation_date": 1478530104, "last_edit_date": 1513350678, "question_id": 40467995, "link": "https://stackoverflow.com/questions/40467995/how-do-you-set-clear-and-toggle-a-single-bit-in-rust", "title": "How do you set, clear and toggle a single bit in Rust?", "body": "<p>How do I set, clear and toggle a bit in Rust?</p>\n"}, {"tags": ["embedded", "rust", "startup", "bare-metal"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478525933, "post_id": 40465933, "comment_id": 68177336, "body": "<b>zero-initializing</b> the BSS segment for any global or static <b>uninitialized</b> variables \u2014 which do you want? If you want it to be zero-initialized, then <i>initialize it to zero</i>. That being said, <i>you</i> will have to write any code that copies values out of the flash memory and into RAM. That&#39;s what bare-metal means."}, {"owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1478530619, "post_id": 40465933, "comment_id": 68180440, "body": "I don&#39;t know anything about Rust, but can&#39;t you just declare a static variable and initialize it to zero? That should force it to get allocated in .bss."}, {"owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "reply_to_user": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1478562512, "post_id": 40465933, "comment_id": 68197965, "body": "@Lundin If you initialize it to zero in your code, it will go into the data segment."}, {"owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478562532, "post_id": 40465933, "comment_id": 68197969, "body": "@Shepmaster If you&#39;ve done bare-metal programming before, you&#39;ll know that you zero the BSS segment not just for your code but for code that others write for your system.  Regardless, this question isn&#39;t about how or whether to initialize variables, its about whether or not its possible to put data in the BSS segment using Rust."}, {"owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1478589411, "post_id": 40465933, "comment_id": 68206011, "body": "@Verax Then your .bss segment works differently than all other .bss segments in the world. Strange. The very purpose of having a .bss to begin with is to speed up zero-initialization."}, {"owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "reply_to_user": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "edited": false, "score": 0, "creation_date": 1478597696, "post_id": 40465933, "comment_id": 68210596, "body": "@Lundin You are right, I was wrong.  Zero-initialized data goes in the .bss segment.  If you want to create an answer explaining that .bss is populated with both uninitialized <i>and</i> zero-initialized data, I&#39;ll accept it.  Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478610661, "post_id": 40484747, "comment_id": 68219122, "body": "So, what can you show that proves that <b>in Rust</b> this happens?"}, {"owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1478621327, "post_id": 40484747, "comment_id": 68227019, "body": "@Shepmaster The behavior of the linker is not specified by any language standard. There is no requirement that a <code>.bss</code> segment must be present. Similarly, the manner in which initialization of static storage duration variables is carried out is not specified by a language standard either."}], "tags": [], "owner": {"reputation": 153119, "user_id": 584518, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "Lundin", "link": "https://stackoverflow.com/users/584518/lundin"}, "is_accepted": true, "score": 0, "last_activity_date": 1478601472, "last_edit_date": 1495540928, "creation_date": 1478601472, "answer_id": 40484747, "question_id": 40465933, "link": "https://stackoverflow.com/questions/40465933/how-do-i-write-rust-code-that-places-globals-statics-in-a-populated-bss-segmen/40484747#40484747", "title": "How do I write Rust code that places globals / statics in a populated BSS segment?", "body": "<p>The purpose of the <code>.bss</code> segment is to speed up initialization of all static storage duration variables with value zero. But also to save NVM, since it doesn't make sense to save x bytes all with the value <code>0</code> in flash and then copy them to RAM one by one.</p>\n\n<p>The solution to your problem might be to declare a static variable and explicitly initialize it to zero. Because all variables with static storage duration that are initialized to value zero end up in <code>.bss</code>. </p>\n\n<p>As a side-effect of this, all uninitialized static storage duration variables also end up in <code>.bss</code> too. Because in C (and in languages derived from/inspired by C) there is a requirement that if a variable with static storage duration is not initialized explicitly by the programmer, it must be initialized to value zero. </p>\n\n<p>For example this is formally specified in the C11 standard 6.7.9:</p>\n\n<blockquote>\n  <p>If an object that has static or thread storage duration is not\n  initialized explicitly, then:<br>\n  \u2014 if it has pointer type, it is\n  initialized to a null pointer;<br>\n  \u2014 if it has arithmetic type, it is\n  initialized to (positive or unsigned) zero;</p>\n</blockquote>\n\n<hr>\n\n<p><a href=\"https://stackoverflow.com/a/9535579/584518\">Pseudo code example of how <code>.data</code> and <code>.bss</code> initialization will differ.</a> </p>\n\n<p><a href=\"https://electronics.stackexchange.com/questions/237740/what-resides-in-the-different-memory-types-of-a-microcontroller/237759#237759\">More info of the different memory types and where different kind of variables end up in an embedded system.</a> </p>\n"}], "owner": {"reputation": 1929, "user_id": 539972, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/a06770429504c24cfeded0a38576007f?s=128&d=identicon&r=PG", "display_name": "Verax", "link": "https://stackoverflow.com/users/539972/verax"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 629, "favorite_count": 0, "accepted_answer_id": 40484747, "answer_count": 1, "score": 2, "last_activity_date": 1478610719, "creation_date": 1478523884, "last_edit_date": 1478610719, "question_id": 40465933, "link": "https://stackoverflow.com/questions/40465933/how-do-i-write-rust-code-that-places-globals-statics-in-a-populated-bss-segmen", "title": "How do I write Rust code that places globals / statics in a populated BSS segment?", "body": "<p>I'm experimenting with programming bare-metal embedded systems in Rust.  One of the things that is typically done in C startup code is zero-initializing the BSS segment for any global or static uninitialized variables.  </p>\n\n<p>However, in Rust, I can't figure out how to create any global or static uninitialized variables (even using <code>unsafe</code> code).  In other words, I can't figure out how to write any Rust code so the compiler will populate the BSS segment with something.</p>\n\n<p>I tried...</p>\n\n<pre><code>static BSS_Data: i32 = unsafe { core::mem::uninitialized() };\n</code></pre>\n\n<p>....but the compiler rejected it.</p>\n\n<p>Is there any way to write Rust code (<code>unsafe</code> or otherwise) that will result in a populated BSS segment?  Is the BSS segment guaranteed to always be empty in any program written entirely in Rust?</p>\n"}, {"tags": ["indexing", "rust"], "comments": [{"owner": {"reputation": 1136, "user_id": 5147158, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/7f5a49ac25a325cbd8293c5c6793c40f?s=128&d=identicon&r=PG&f=1", "display_name": "Peter Lenkefi", "link": "https://stackoverflow.com/users/5147158/peter-lenkefi"}, "edited": false, "score": 1, "creation_date": 1478507707, "post_id": 40460806, "comment_id": 68166555, "body": "@LukasKalbertodt Sorry, edited!"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478518550, "post_id": 40460958, "comment_id": 68172793, "body": "I&#39;ve always found this indexing idea of returning by value and having to add a <code>&amp;</code> weird, to be honest. My intuition scream: why take a reference to a temporary?"}, {"owner": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478523851, "post_id": 40460958, "comment_id": 68175980, "body": "@MatthieuM. Indexing produces an lvalue, which is very much the opposite of a temporary (rvalue)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 0, "creation_date": 1478524941, "post_id": 40460958, "comment_id": 68176700, "body": "@Kha: Unfortunately, that&#39;s not what the error message says: <a href=\"https://play.rust-lang.org/?gist=59e1a830c94433d92f52721904c09089&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">it complains about <code>v[0]</code> returning a <code>String</code></a>, thus a (fresh) value. I know it&#39;s not the case, but I find this really confusing nonetheless. (Maybe it&#39;s just a case where improving the diagnosis would go a long way toward clarifying things)."}, {"owner": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478530628, "post_id": 40460958, "comment_id": 68180450, "body": "@MatthieuM. &#39;returning&#39; would indeed be confusing... but it doesn&#39;t say that. <code>v[0]</code> is a (non-temporary l-)value of type <code>String</code>, that&#39;s completely correct. I&#39;m not sure how that message could be improved."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1106, "user_id": 161659, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/jKJ7J.jpg?s=128&g=1", "display_name": "Sebastian Ullrich", "link": "https://stackoverflow.com/users/161659/sebastian-ullrich"}, "edited": false, "score": 1, "creation_date": 1478531393, "post_id": 40460958, "comment_id": 68181014, "body": "@Kha: I am not sure either. It&#39;s just that the difference between a fresh value and a &quot;value&quot; obtaining from derefencing can be jarring because on the latter you can &quot;get back&quot; to the original reference by applying <code>&amp;</code> while on the former applying <code>&amp;</code> will generally not work (due to lifetimes) except when the compiler decides to be helpful and extend the lifetime of the underlying value. It&#39;s a papercut for beginners, and I don&#39;t know how to smooth it."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 1, "last_activity_date": 1478508194, "creation_date": 1478508194, "answer_id": 40460958, "question_id": 40460806, "link": "https://stackoverflow.com/questions/40460806/how-does-slice-indexing-work-in-rust/40460958#40460958", "title": "How does slice indexing work in Rust?", "body": "<blockquote>\n  <p>Is it just a compiler built-in thing?</p>\n</blockquote>\n\n<p>Yes. The source code comment also says that same. <code>[T]</code> is an unsized type and needs some extra rules anyway. For example, unsized types can't live on the stack (are pretty difficult to handle). But references to unsized types consist of a pointer and a size (specifically \"something that <em>completes</em> the type\").</p>\n\n<p>Note, however, that the expression is evaluated like this: <code>&amp;((*self)[index])</code>. This means that <code>self</code> (type <code>&amp;[T]</code>) is dereferenced to be type <code>[T]</code> and then indexed. This returns a <code>T</code>, but we only want a reference to it, thus the <code>&amp;</code>.</p>\n"}], "owner": {"reputation": 1136, "user_id": 5147158, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/7f5a49ac25a325cbd8293c5c6793c40f?s=128&d=identicon&r=PG&f=1", "display_name": "Peter Lenkefi", "link": "https://stackoverflow.com/users/5147158/peter-lenkefi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1278, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1478508194, "creation_date": 1478507557, "last_edit_date": 1478507844, "question_id": 40460806, "link": "https://stackoverflow.com/questions/40460806/how-does-slice-indexing-work-in-rust", "title": "How does slice indexing work in Rust?", "body": "<p>I wondered what slices were in Rust. As it turned out, it's just a struct with a data pointer and the size inside. I've looked at the source for indexing and I've <a href=\"https://github.com/rust-lang/rust/blob/f0e6b90790da2203f04fa44ee3ed8f24dcc5f4dc/src/libcore/slice.rs#L519-L526\" rel=\"nofollow noreferrer\">found this</a>:</p>\n\n<pre><code>impl&lt;T&gt; ops::Index&lt;usize&gt; for [T] {\n    type Output = T;\n\n    fn index(&amp;self, index: usize) -&gt; &amp;T {\n        // NB built-in indexing\n        &amp;(*self)[index]\n    }\n}\n</code></pre>\n\n<p>I'm not a Rust expert but <code>&amp;(*self)</code> seems like a pointer for me and there is no pointer indexing in Rust as far as I know. So how does this indexing thing work? Is it just a compiler built-in thing?</p>\n"}, {"tags": ["string", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478517591, "post_id": 40457615, "comment_id": 68172267, "body": "You don&#39;t need the <code>start</code> parameter if you use <code>slice::split_at</code> instead: then you can update <code>self.input</code> on each iteration of the loop."}, {"owner": {"reputation": 25982, "user_id": 305973, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/cd49db0b676767ea4358b1047c4cddd2?s=128&d=identicon&r=PG", "display_name": "robinst", "link": "https://stackoverflow.com/users/305973/robinst"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478759146, "post_id": 40457615, "comment_id": 68283157, "body": "Thanks @MatthieuM., that simplifies it!"}], "tags": [], "owner": {"reputation": 25982, "user_id": 305973, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/cd49db0b676767ea4358b1047c4cddd2?s=128&d=identicon&r=PG", "display_name": "robinst", "link": "https://stackoverflow.com/users/305973/robinst"}, "is_accepted": false, "score": 6, "last_activity_date": 1478759115, "last_edit_date": 1478759115, "creation_date": 1478491020, "answer_id": 40457615, "question_id": 40455997, "link": "https://stackoverflow.com/questions/40455997/iterate-over-lines-in-a-string-including-the-newline-characters/40457615#40457615", "title": "Iterate over lines in a string, including the newline characters", "body": "<p>The solution I currently have looks like this:</p>\n\n<pre><code>/// Iterator yielding every line in a string. The line includes newline character(s).\npub struct LinesWithEndings&lt;'a&gt; {\n    input: &amp;'a str,\n}\n\nimpl&lt;'a&gt; LinesWithEndings&lt;'a&gt; {\n    pub fn from(input: &amp;'a str) -&gt; LinesWithEndings&lt;'a&gt; {\n        LinesWithEndings {\n            input: input,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for LinesWithEndings&lt;'a&gt; {\n    type Item = &amp;'a str;\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a str&gt; {\n        if self.input.is_empty() {\n            return None;\n        }\n        let split = self.input.find('\\n').map(|i| i + 1).unwrap_or(self.input.len());\n        let (line, rest) = self.input.split_at(split);\n        self.input = rest;\n        Some(line)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 25982, "user_id": 305973, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/cd49db0b676767ea4358b1047c4cddd2?s=128&d=identicon&r=PG", "display_name": "robinst", "link": "https://stackoverflow.com/users/305973/robinst"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2644, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1478759115, "creation_date": 1478477131, "last_edit_date": 1495535422, "question_id": 40455997, "link": "https://stackoverflow.com/questions/40455997/iterate-over-lines-in-a-string-including-the-newline-characters", "title": "Iterate over lines in a string, including the newline characters", "body": "<p>I need to iterate over lines in a string, but keep the newlines at the end in the strings that are yielded.</p>\n\n<p>There is <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.lines\" rel=\"nofollow noreferrer\"><code>str.lines()</code></a>, but the strings it returns have the newline characters chopped off:</p>\n\n<pre><code>let result: Vec&lt;_&gt; = \"foo\\nbar\\n\".lines().collect();\nassert_eq!(result, vec![\"foo\", \"bar\"]);\n</code></pre>\n\n<p>Here's what I need:</p>\n\n<pre><code>assert_eq!(lines(\"foo\\nbar\\n\"), vec![\"foo\\n\", \"bar\\n\"]);\n</code></pre>\n\n<p>More test cases:</p>\n\n<pre><code>assert!(lines(\"\").is_empty());\nassert_eq!(lines(\"f\"), vec![\"f\"]);\nassert_eq!(lines(\"foo\"), vec![\"foo\"]);\nassert_eq!(lines(\"foo\\n\"), vec![\"foo\\n\"]);\nassert_eq!(lines(\"foo\\nbar\"), vec![\"foo\\n\", \"bar\"]);\nassert_eq!(lines(\"foo\\r\\nbar\"), vec![\"foo\\r\\n\", \"bar\"]);\nassert_eq!(lines(\"foo\\r\\nbar\\r\\n\"), vec![\"foo\\r\\n\", \"bar\\r\\n\"]);\nassert_eq!(lines(\"\\nfoo\"), vec![\"\\n\", \"foo\"]);\nassert_eq!(lines(\"\\n\\n\\n\"), vec![\"\\n\", \"\\n\", \"\\n\"]);\n</code></pre>\n\n<p>I have a solution that basically calls <code>find</code> in a loop, but I'm wondering if there's something more elegant.</p>\n\n<p>This is similar to <a href=\"https://stackoverflow.com/questions/32257273/split-a-string-keeping-the-separators\">Split a string keeping the separators</a>, but in that case, the characters are returned as separate items, but I want to keep them as part of the string:</p>\n\n<pre><code>[\"hello\\n\", \"world\\n\"]; // This\n[\"hello\", \"\\n\", \"world\", \"\\n\"]; // Not this\n</code></pre>\n"}, {"tags": ["iterator", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1478500997, "last_edit_date": 1495535560, "creation_date": 1478500997, "answer_id": 40459231, "question_id": 40455974, "link": "https://stackoverflow.com/questions/40455974/iterator-returning-a-reference-to-itself/40459231#40459231", "title": "Iterator returning a reference to itself", "body": "<blockquote>\n  <p>Question 1: What are the \"conflicting requirements\"?</p>\n</blockquote>\n\n<p>The borrow you try to return does not have lifetime <code>'a</code>, as promised. Rather, it has the same lifetime as <code>self</code>. If the signature for <code>next</code> was written in full, it would be:</p>\n\n<pre><code>fn next&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;&amp;'a [usize]&gt;\n</code></pre>\n\n<p>Returning an <code>Option&lt;&amp;'b [usize]&gt;</code> (with lifetime <code>'b</code> instead of <code>'a</code>) would be valid if it weren't for the fact that it violates the contract for the <code>Iterator</code> trait. However, it would freeze <code>self</code> until the result is dropped; i.e. you could not call <code>next</code> twice and use the result of both calls together. That's because each call to <code>next</code> can potentially invalidate the previously returned slices; pushing to a <code>Vec</code> can relocate the storage in memory to make room for additional elements, so the pointers in the slices would no longer be valid.</p>\n\n<blockquote>\n  <p>Question 2: The <a href=\"https://stackoverflow.com/questions/30422177/lifetime-in-iterator-impl\">answer cited above</a> says that <code>Item</code> must borrow from something that the <code>Iterator</code> wraps. I have read the source for <a href=\"https://doc.rust-lang.org/std/slice/struct.Windows.html\" rel=\"nofollow noreferrer\"><code>std::slice::Windows</code></a> which is a good example. However, in my case I want to mutate the <code>Vec</code> each time <code>next()</code> is called. Is that possible?</p>\n</blockquote>\n\n<p>It's not possible to do this with the <code>Iterator</code> trait, so you won't be able to use a <code>for</code> loop on your struct. However, you can do it (with the caveat mentioned above) with an ordinary method.</p>\n\n<pre><code>struct Countings(Vec&lt;usize&gt;);\n\nimpl Countings {\n    fn new() -&gt; Countings { Countings(vec![]) }\n\n    fn next&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a [usize] {\n        let item = self.0.len();\n        self.0.push(item);\n        self.0.as_slice()\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "edited": false, "score": 0, "creation_date": 1478548119, "post_id": 40463395, "comment_id": 68191235, "body": "Thanks. Your answer has some useful stuff. If I could accept both answers I would, but I think Francis&#39;s answer is better focused on my two questions."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1478515966, "creation_date": 1478515966, "answer_id": 40463395, "question_id": 40455974, "link": "https://stackoverflow.com/questions/40455974/iterator-returning-a-reference-to-itself/40463395#40463395", "title": "Iterator returning a reference to itself", "body": "<p>As Francis mentioned, it is not possible to modify the underlying vector during iteration. However, if you were to somehow have the possibility to specify the iteration bound, then things would be much easier:</p>\n\n<ul>\n<li>You would create the vector <code>[0, 1, 2, ...]</code></li>\n<li>And then create an iterator that returns an ever-growing slice, up to the length of the vector</li>\n</ul>\n\n<p>Just the iterator:</p>\n\n<pre><code>struct EverGrowingIterator&lt;'a, T: 'a&gt; {\n    slice: &amp;'a [T],\n    current: usize,\n}\n\nimpl&lt;'a, T&gt; Iterator for EverGrowingIterator&lt;'a, T&gt; {\n    type Item = &amp;'a [T];\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a [T]&gt; {\n        if self.current &gt;= self.slice.len() {\n            None\n        } else {\n            self.current += 1;\n            Some(&amp;self.slice[0..self.current])\n        }\n    }\n}\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>fn ever_growing&lt;'a, T&gt;(slice: &amp;'a [T]) -&gt; EverGrowingIterator&lt;'a, T&gt; {\n    EverGrowingIterator { slice: slice, current: 0 }\n}\n\nfn main() {\n    let v = vec![0, 1, 2];\n    for s in ever_growing(&amp;v) {\n        println!(\"{:?}\", s);\n    }\n}\n</code></pre>\n\n<p>Will print:</p>\n\n<pre><code>[0]\n[0, 1]\n[0, 1, 2]\n</code></pre>\n\n<hr>\n\n<p>If you need to adapt this for infinite growth, you need to look into creating a custom container (not a <code>Vec</code>) that will grow <em>while preserving references to previous slices</em>. Something like a <code>RefCell&lt;Vec&lt;Box&lt;[T]&gt;&gt;&gt;</code> could be used.</p>\n"}], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 348, "favorite_count": 0, "accepted_answer_id": 40459231, "answer_count": 2, "score": 2, "last_activity_date": 1478515966, "creation_date": 1478476930, "last_edit_date": 1495540989, "question_id": 40455974, "link": "https://stackoverflow.com/questions/40455974/iterator-returning-a-reference-to-itself", "title": "Iterator returning a reference to itself", "body": "<p>I'm aware of <a href=\"https://stackoverflow.com/questions/30422177/lifetime-in-iterator-impl\">Lifetime in Iterator impl</a>, but I'd like some more detail to help me properly understand.</p>\n\n<p>I want to write an infinite <code>Iterator</code> that returns <code>&amp;[0]</code>, <code>&amp;[0, 1]</code>, <code>&amp;[0, 1, 2]</code>, etc... . I'd like to write this:</p>\n\n<pre><code>struct Countings(Vec&lt;usize&gt;);\n\nimpl Countings {\n    fn new() -&gt; Countings { Countings(vec![]) }\n}\n\nimpl Iterator for Countings {\n    type Item = &amp;[usize];\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.0.push(self.0.len());\n        Some(self.0.as_slice())\n    }\n}\n</code></pre>\n\n<p>I can't because the type <code>Countings::Item</code> does not have a lifetime.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; src/lib.rs:8:17\n  |\n8 |     type Item = &amp;[usize];\n  |                 ^ expected lifetime parameter\n</code></pre>\n\n<p>So I add one. It has to be bound by the <code>impl Iterator</code>. That, in turn, requires a lifetime parameter on <code>struct Countings</code>. So far, I'm here:</p>\n\n<pre><code>struct Countings&lt;'a&gt;(Vec&lt;usize&gt;);\n\nimpl&lt;'a&gt; Countings&lt;'a&gt; {\n    fn new() -&gt; Countings&lt;'a&gt; { Countings(vec![]) }\n}\n\nimpl&lt;'a&gt; Iterator for Countings&lt;'a&gt; {\n    type Item = &amp;'a [usize];\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.0.push(self.0.len());\n        Some(self.0.as_slice())\n    }\n}\n</code></pre>\n\n<p>Now I have a different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0392]: parameter `'a` is never used\n --&gt; src/lib.rs:1:18\n  |\n1 | struct Countings&lt;'a&gt;(Vec&lt;usize&gt;);\n  |                  ^^\n  |\n  = help: consider removing `'a` or using a marker such as `std::marker::PhantomData`\n</code></pre>\n\n<p>I seriously consider it:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Countings&lt;'a&gt;(Vec&lt;usize&gt;, PhantomData&lt;&amp;'a [usize]&gt;);\n\nimpl&lt;'a&gt; Countings&lt;'a&gt; {\n    fn new() -&gt; Countings&lt;'a&gt; { Countings(vec![], PhantomData) }\n}\n\nimpl&lt;'a&gt; Iterator for Countings&lt;'a&gt; {\n    type Item = &amp;'a [usize];\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.0.push(self.0.len());\n        Some(self.0.as_slice())\n    }\n}\n</code></pre>\n\n<p>but to no avail:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; src/lib.rs:14:25\n   |\n14 |             Some(self.0.as_slice())\n   |                         ^^^^^^^^\n</code></pre>\n\n<p>Question 1: What are the \"conflicting requirements\"?</p>\n\n<p>Question 2: The <a href=\"https://stackoverflow.com/questions/30422177/lifetime-in-iterator-impl\">answer cited above</a> says that <code>Item</code> must borrow from something that the <code>Iterator</code> wraps. I have read the source for <a href=\"https://doc.rust-lang.org/std/slice/struct.Windows.html\" rel=\"nofollow noreferrer\"><code>std::slice::Windows</code></a> which is a good example. However, in my case I want to mutate the <code>Vec</code> each time <code>next()</code> is called. Is that possible?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 2, "creation_date": 1478471890, "post_id": 40455338, "comment_id": 68156350, "body": "Can you explain what actual troubles you&#39;re seeing? Why do you think what you&#39;re receiving is not convertible to a <code>Path</code>? Have you observed errors of some sort.. ? Have you simply echoed the input to stdout and observed weird characters... ?"}, {"owner": {"reputation": 10651, "user_id": 167935, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/583358786e336bb14a400ca17722ec3b?s=128&d=identicon&r=PG", "display_name": "Laurence", "link": "https://stackoverflow.com/users/167935/laurence"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1478473720, "post_id": 40455338, "comment_id": 68156801, "body": "@SimonWhitehead I&#39;ve added one example that gets errors."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478478740, "post_id": 40455338, "comment_id": 68157919, "body": "Re-reading over your question, I realized that my answer was basically just reimplementing the logic that you already know you need to do; I wasn&#39;t offering anything <i>easier</i>. I can only point at resources like the <a href=\"https://github.com/lifthrasiir/rust-encoding\" rel=\"nofollow noreferrer\">encoding crate</a> and <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms683162(v=vs.85).aspx\" rel=\"nofollow noreferrer\">how to tell the code page</a>. Sorry to provide false hope!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478513420, "post_id": 40455338, "comment_id": 68169804, "body": "@Shepmaster: is this not a case where <code>OsString</code> would help? It seems to me that the first issue is assuming that the filenames will be valid Unicode (whatever their original encoding)."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478537932, "post_id": 40455338, "comment_id": 68185340, "body": "@MatthieuM.: <code>OsString</code> wouldn&#39;t help here. On Windows, an <code>OsString</code> is encoded in <a href=\"https://simonsapin.github.io/wtf-8/\" rel=\"nofollow noreferrer\">WTF-8</a> (this is an implementation detail), whereas the data received on stdin is encoded in the console&#39;s code page (which defaults to the OEM code page) by most of the built-in commands and OS-provided utilities on Windows."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1478538750, "post_id": 40455338, "comment_id": 68185880, "body": "@FrancisGagn&#233;: Yes, of course encoding also needs be taken into account, my point was more that <code>String</code> is not suitable for the decoded product because Windows does not guarantee that a filename is Unicode (I think it accepts botched surrogate pairs for example)."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1478547959, "post_id": 40455338, "comment_id": 68191135, "body": "That&#39;s right, Windows tolerates unpaired surrogates. That cannot happen with legacy code pages, but it can happen if the console&#39;s code page is set to UTF-16, so your concern is valid. If the standard library exposed APIs that directly accepted potentially ill-formed UTF-16 for OS strings on Windows, then the conversion from UTF-16 to <code>OsString</code> (which is not exposed in the library at the moment) would be unnecessary. It would be more efficient, too, since Rust has to convert an <code>OsString</code> to UTF-16 before calling any API that uses the string as an argument."}, {"owner": {"reputation": 10651, "user_id": 167935, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/583358786e336bb14a400ca17722ec3b?s=128&d=identicon&r=PG", "display_name": "Laurence", "link": "https://stackoverflow.com/users/167935/laurence"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478548615, "post_id": 40455338, "comment_id": 68191537, "body": "@MatthieuM. I&#39;d overlooked <code>OsString::from_wide()</code>. The code looks more reasonable now,"}], "answers": [{"tags": [], "owner": {"reputation": 10651, "user_id": 167935, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/583358786e336bb14a400ca17722ec3b?s=128&d=identicon&r=PG", "display_name": "Laurence", "link": "https://stackoverflow.com/users/167935/laurence"}, "is_accepted": true, "score": 3, "last_activity_date": 1478558563, "last_edit_date": 1478558563, "creation_date": 1478481559, "answer_id": 40456495, "question_id": 40455338, "link": "https://stackoverflow.com/questions/40455338/how-do-i-read-os-compatible-strings-from-stdin/40456495#40456495", "title": "How do I read OS-compatible strings from stdin?", "body": "<p>Here's a reasonable looking version for Windows. Convert the console supplied string to a wide string using win32api functions then wrap it in an OsString using <code>OsString::from_wide</code>.</p>\n\n<p>I'm not convinced it uses the correct code page yet. <code>dir</code> seems to use OEM code page, so maybe that should be the default. There's also a distinction between input code page and output code page in a console.</p>\n\n<p>In my <code>Cargo.toml</code></p>\n\n<pre><code>[dependencies]\nwinapi = \"0.2\"\nkernel32-sys = \"0.2.2\"\n</code></pre>\n\n<p>Code to read a list of filenames piped through stdin on Windows as per the question.</p>\n\n<pre><code>extern crate kernel32;\nextern crate winapi;\n\nuse std::io::{self, Read};\nuse std::ptr;\nuse std::fs::metadata;\nuse std::ffi::OsString;\nuse std::os::windows::ffi::OsStringExt;\n\n/// Convert windows console input to wide string that can\n/// be used by OS functions\nfn wide_from_console_string(bytes: &amp;[u8]) -&gt; Vec&lt;u16&gt; {\n    assert!(bytes.len() &lt; std::i32::MAX as usize);\n    let mut wide;\n    let mut len;\n    unsafe {\n        let cp = kernel32::GetConsoleCP();\n        len = kernel32::MultiByteToWideChar(cp, 0, bytes.as_ptr() as *const i8, bytes.len() as i32, ptr::null_mut(), 0);\n        wide = Vec::with_capacity(len as usize);\n        len = kernel32::MultiByteToWideChar(cp, 0, bytes.as_ptr() as *const i8, bytes.len() as i32, wide.as_mut_ptr(), len);\n        wide.set_len(len as usize);\n    }\n    wide\n}\n\n/// Extract paths from a list supplied as Cr LF\n/// separated wide string\n/// Would use a generic split on substring if it existed\nfn paths_from_wide(wide: &amp;[u16]) -&gt; Vec&lt;OsString&gt; {\n    let mut r = Vec::new();\n    let mut start = 0;\n    let mut i = start;\n    let len = wide.len() - 1;\n    while i &lt; len {\n        if wide[i] == 13 &amp;&amp; wide[i + 1]  == 10 {\n            if i &gt; start {\n                r.push(OsString::from_wide(&amp;wide[start..i]));\n            }\n            start = i + 2;\n            i = i + 2;\n        } else {\n            i = i + 1;\n        }\n    }\n    if i &gt; start {\n        r.push(OsString::from_wide(&amp;wide[start..i]));\n    }\n    r\n}\n\nfn main() {\n    let mut bytes = Vec::new();\n    if let Ok(_) = io::stdin().read_to_end(&amp;mut bytes) {\n        let pathlist = wide_from_console_string(&amp;bytes[..]);\n        let paths = paths_from_wide(&amp;pathlist[..]);\n        for path in paths {\n            match metadata(&amp;path) {\n                Ok(stat) =&gt; println!(\"{:?} is_file: {}\", &amp;path, stat.is_file()),\n                Err(e) =&gt; println!(\"Error: {:?} for {:?}\", e, &amp;path)\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 10651, "user_id": 167935, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/583358786e336bb14a400ca17722ec3b?s=128&d=identicon&r=PG", "display_name": "Laurence", "link": "https://stackoverflow.com/users/167935/laurence"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 504, "favorite_count": 0, "accepted_answer_id": 40456495, "answer_count": 1, "score": 5, "last_activity_date": 1478558563, "creation_date": 1478471761, "last_edit_date": 1478476117, "question_id": 40455338, "link": "https://stackoverflow.com/questions/40455338/how-do-i-read-os-compatible-strings-from-stdin", "title": "How do I read OS-compatible strings from stdin?", "body": "<p>I'm trying to write a Rust program that gets a separated list of filenames on <code>stdin</code>. </p>\n\n<p>On Windows, I might invoke it from a <code>cmd</code> window with something like:</p>\n\n<pre><code>dir /b /s | findstr .*,v$ | rust-prog -n\n</code></pre>\n\n<p>On Unix I'd use something like:</p>\n\n<pre><code>find . -name '*,v' -print0 | rust-prog -0\n</code></pre>\n\n<p>I'm having trouble converting what I receive on <code>stdin</code> into something that can be used by <code>std::path::Path</code>. As I understand it, to get something that will compile on Windows or Unix, I'm going to need to use conditional compilation, and <code>std::os::windows::ffi</code> or <code>std::os::unix::ffi</code> as appropriate. </p>\n\n<p>Furthermore, It seems on Windows I'll need to use <code>kernel32::MultiByteToWideChar</code> using the current code page to create something usable by <code>std::os::windows::ffi::OsStrExt</code>.</p>\n\n<p>Is there an easier way to do this? Does what I'm suggesting even seem workable?</p>\n\n<p>As an example, it's easy to convert a string to a path, so I tried to use the string handling functions of <code>stdin</code>:</p>\n\n<pre><code>use std::io::{self, Read};\nfn main() {\n    let mut buffer = String::new();\n    match io::stdin().read_line(&amp;mut buffer) {\n        Ok(n) =&gt; println!(\"{}\", buffer),\n        Err(error) =&gt; println!(\"error: {}\", error)\n    }\n}\n</code></pre>\n\n<p>On Windows, if I have a directory with a single file called <code>\u00bf.txt</code> (that's 0xbf). and pipe the name into <code>stdin</code>. I get: <code>error: stream did not contain valid UTF-8</code>.</p>\n"}, {"tags": ["rust", "typechecking"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478467170, "post_id": 40454397, "comment_id": 68154840, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>."}, {"owner": {"reputation": 463, "user_id": 5956418, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/c1e4d59c950208e2ebb83fc021f2278d?s=128&d=identicon&r=PG&f=1", "display_name": "Qoros", "link": "https://stackoverflow.com/users/5956418/qoros"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478469097, "post_id": 40454397, "comment_id": 68155516, "body": "Thanks @Shepmaster for your editing. However, <b>I am wondering what things will Rust check dynamically</b>, so I took the out-of-bounds as an example."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478469537, "post_id": 40454397, "comment_id": 68155646, "body": "To be clear, you want to know every possible thing that Rust the language can check dynamically?"}, {"owner": {"reputation": 463, "user_id": 5956418, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/c1e4d59c950208e2ebb83fc021f2278d?s=128&d=identicon&r=PG&f=1", "display_name": "Qoros", "link": "https://stackoverflow.com/users/5956418/qoros"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478469639, "post_id": 40454397, "comment_id": 68155675, "body": "@Shepmaster, Yes, that is what I meant."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478469818, "post_id": 40454729, "comment_id": 68155732, "body": "This does not answer the question that OP asked. They wish to know how <i>every possible thing Rust can check dynamically</i>. This only covers a small aspect."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478469872, "post_id": 40454729, "comment_id": 68155747, "body": "Note that this is why I avoid answering questions that are overly broad and instead vote to close them. Sometimes OP rewords to be more specific, other times not."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478470072, "post_id": 40454729, "comment_id": 68155824, "body": "@Shepmaster It does answer two out of OP&#39;s three questions rather well. ;)"}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 8, "last_activity_date": 1478468509, "last_edit_date": 1478468509, "creation_date": 1478467617, "answer_id": 40454729, "question_id": 40454397, "link": "https://stackoverflow.com/questions/40454397/how-is-every-dynamically-checked-aspect-of-rust-implemented/40454729#40454729", "title": "How is every dynamically checked aspect of Rust implemented?", "body": "<p>Conceptually, Rust performs array bound checking on each and every array access. However, the compiler is very good at optimizing away the checks when it can prove that it's safe to do so.</p>\n\n<p>The LLVM intermediate output is misleading because it still undergoes optimizations by the LLVM's optimizing machinery before the machine assembly is generated. A better way to inspect assembly output is by generating the final assembly using an invocation such as <code>rustc -O --emit asm --crate-type=lib</code>. The <a href=\"https://godbolt.org/g/FE9O2U\" rel=\"noreferrer\">assembly output for your function</a> is just:</p>\n\n<pre><code>        push    rbp\n        mov     rbp, rsp\n        mov     eax, 2\n        pop     rbp\n        ret\n</code></pre>\n\n<p>Not only is there no bound checking in sight, there is no array to begin with, the compiler has optimized the entire function to a <code>return 2i32</code>! To force bound checking, the function needs to be written so that Rust cannot prove that it can be elided:</p>\n\n<pre><code>pub fn test_dynamic_checking(ind: usize) -&gt; i32 () {\n   let x = [1, 2, 3, 4];\n   x[ind]\n}\n</code></pre>\n\n<p>This results in a <a href=\"https://godbolt.org/g/3ggtox\" rel=\"noreferrer\">larger assembly</a>, where the bound check is implemented as the following two instructions:</p>\n\n<pre><code>        cmp     rax, 3    ; compare index with 3\n        ja      .LBB0_2   ; if greater, jump to panic code\n</code></pre>\n\n<p>That is as efficient as it gets. Turning off the bound check is rarely a good idea because it can easily cause the program to crash. It can be done, but explicitly and only within the confines of an <code>unsafe</code> block or function:</p>\n\n<pre><code>pub unsafe fn test_dynamic_checking(ind: usize) -&gt; i32 () {\n   let x = [1, 2, 3, 4];\n   *x.get_unchecked(ind)\n}\n</code></pre>\n\n<p>The <a href=\"https://godbolt.org/g/zPd88a\" rel=\"noreferrer\">generated assembly</a> shows the error checking to be entirely omitted:</p>\n\n<pre><code>        push    rbp\n        mov     rbp, rsp\n        lea     rax, [rip + const3141]\n        mov     eax, dword ptr [rax + 4*rdi]\n        pop     rbp\n        ret\n\nconst3141:\n        .long   1\n        .long   2\n        .long   3\n        .long   4\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1478523539, "last_edit_date": 1478523539, "creation_date": 1478512904, "answer_id": 40462394, "question_id": 40454397, "link": "https://stackoverflow.com/questions/40454397/how-is-every-dynamically-checked-aspect-of-rust-implemented/40462394#40462394", "title": "How is every dynamically checked aspect of Rust implemented?", "body": "<blockquote>\n  <p>In what situations does Rust implement dynamic checking?</p>\n</blockquote>\n\n<p>It's a bit of a cop out... but Rust, the language, does not implement any dynamic checking. The Rust libraries, however, starting with the <code>core</code> and <code>std</code> libraries do.</p>\n\n<p>A library needs to use run-time checking whenever not doing so could lead to a memory safety issue. Examples include:</p>\n\n<ul>\n<li>guaranteeing that an index is within bounds, such as when implementing <code>Index</code></li>\n<li>guaranteeing that no other reference to an object exists, such as when implementing <code>RefCell</code></li>\n<li>...</li>\n</ul>\n\n<p>In general, the Rust philosophy is to perform as many checks as possible at compile-time, but some checks need by delayed to run-time because they depend on dynamic behavior/values.</p>\n\n<blockquote>\n  <p>How does Rust implement dynamic checking in different situations?</p>\n</blockquote>\n\n<p>As efficiently as possible.</p>\n\n<p>When dynamic checking is required, the Rust code will be crafted to be as efficient as possible. This can be slightly complicated, as it involves trying to ease the work of the optimizer and conforming to patterns that the optimizer recognizes (or fixing it), but we have the chance that a few developers are obsessed with performance (@bluss, for example).</p>\n\n<p>Not all checks may be elided, of course, and those that remain will typically be just a branch.</p>\n\n<blockquote>\n  <p>Is there any way to turn off the dynamic checking?</p>\n</blockquote>\n\n<p>Whenever dynamic checking is necessary to guarantee code safety, it is not possible to turn in off in safe code.</p>\n\n<p>In some situations, though, an <code>unsafe</code> block or function may allow to bypass the check (for example <code>get_unchecked</code> for indexing).</p>\n\n<p>This is not recommended in general, and should be a last-resort behaviour:</p>\n\n<ol>\n<li>Most of the times, the run-time checks have little to no performance impacts; CPU prediction is awesome like that.</li>\n<li>Even if they have some impact, unless they sit it a very hot-loop, it may not be worth optimizing them.</li>\n<li>Finally, if it does NOT optimize, it is worth trying to understand why: maybe it's impossible or maybe the optimizer is not clever enough... in the latter case, reporting the issue is the best way to have someone digging into the optimizer and fixing it (if you cannot or are not willing to do it yourself).</li>\n</ol>\n"}], "owner": {"reputation": 463, "user_id": 5956418, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/c1e4d59c950208e2ebb83fc021f2278d?s=128&d=identicon&r=PG&f=1", "display_name": "Qoros", "link": "https://stackoverflow.com/users/5956418/qoros"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 430, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1478523539, "creation_date": 1478465444, "last_edit_date": 1478469765, "question_id": 40454397, "link": "https://stackoverflow.com/questions/40454397/how-is-every-dynamically-checked-aspect-of-rust-implemented", "title": "How is every dynamically checked aspect of Rust implemented?", "body": "<p>Rust employs dynamic checking methods to check many things. One such example is bounds checking of arrays.</p>\n\n<p>Take this code for example,</p>\n\n<pre><code>fn test_dynamic_checking() -&gt; i32 {\n    let x = [1, 2, 3, 4];\n    x[1]\n}\n</code></pre>\n\n<p>The resulting LLVM IR is:</p>\n\n<pre><code>; Function Attrs: uwtable\ndefine internal i32 @_ZN10dynamic_ck21test_dynamic_checking17hcef32a1e8c339e2aE() unnamed_addr #0 {\nentry-block:\n  %x = alloca [5 x i32]\n  %0 = bitcast [5 x i32]* %x to i8*\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([5 x i32]* @const7091 to i8*), i64 20, i32 4, i1 false)\n  %1 = getelementptr inbounds [5 x i32], [5 x i32]* %x, i32 0, i32 0\n  %2 = call i1 @llvm.expect.i1(i1 false, i1 false)\n  br i1 %2, label %cond, label %next\n\nnext:                                             ; preds = %entry-block\n  %3 = getelementptr inbounds i32, i32* %1, i64 1\n  %4 = load i32, i32* %3\n  ret i32 %4\n\ncond:                                             ; preds = %entry-block\n  call void @_ZN4core9panicking18panic_bounds_check17hcc71f10000bd8e6fE({ %str_slice, i32 }* noalias readonly dereferenceable(24) @panic_bounds_check_loc7095, i64 1, i64 5)\n  unreachable\n}\n</code></pre>\n\n<p>A branch instruction is inserted to decide whether the index is out of bounds or not, which doesn't exist in clang-compiled LLVM IR.</p>\n\n<p><strong>Here are my questions</strong>:</p>\n\n<ol>\n<li>In what situations does Rust implement dynamic checking?</li>\n<li>How does Rust implement dynamic checking in different situations?</li>\n<li>Is there any way to turn off the dynamic checking?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478457734, "post_id": 40452674, "comment_id": 68151553, "body": "<a href=\"http://stackoverflow.com/q/40006219/155423\">stackoverflow.com/q/40006219/155423</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2482, "user_id": 1129436, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/09511512293a4e31936309f2c6aee08e?s=128&d=identicon&r=PG", "display_name": "River Tam", "link": "https://stackoverflow.com/users/1129436/river-tam"}, "edited": false, "score": 0, "creation_date": 1478455618, "post_id": 40452705, "comment_id": 68150731, "body": "Thank you for the response and a way to get around this. Shouldn&#39;t <code>SplitWhitespace</code> be copyable, then? Seems inefficient to have to split on each word."}, {"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "reply_to_user": {"reputation": 2482, "user_id": 1129436, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/09511512293a4e31936309f2c6aee08e?s=128&d=identicon&r=PG", "display_name": "River Tam", "link": "https://stackoverflow.com/users/1129436/river-tam"}, "edited": false, "score": 2, "creation_date": 1478455888, "post_id": 40452705, "comment_id": 68150836, "body": "<a href=\"https://github.com/rust-lang/rust/issues/18045\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/18045</a> explains why <code>SplitWhitespace</code> doesn&#39;t implement <code>Copy</code>. Also, this won&#39;t be any slower than if <code>SplitWhitespace</code> implemented <code>Copy</code> since iterators are lazy and creating a <code>SplitWhitespace</code> struct has negligible overhead compared to the time taken to iterate through the splits."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478457952, "post_id": 40452705, "comment_id": 68151639, "body": "It is surprising it doesn&#39;t implement <code>Clone</code> though."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 4, "last_activity_date": 1478455782, "last_edit_date": 1478455782, "creation_date": 1478455524, "answer_id": 40452705, "question_id": 40452674, "link": "https://stackoverflow.com/questions/40452674/how-do-i-reuse-the-splitwhitespace-iterator/40452705#40452705", "title": "How do I reuse the SplitWhitespace iterator?", "body": "<p><code>split2</code> is getting moved because iterating with <code>for</code> consumes the iterator and since the type does not implement <code>Copy</code>, Rust isn't copying it implicitly.</p>\n\n<p>You can fix this by creating a new iterator inside the first <code>for</code>:</p>\n\n<pre><code>let split1 = thing1.split_whitespace();\n\nlet mut matches = 0;\nfor s1 in split1 {\n    for s2 in thing2.split_whitespace() {\n        if s1.eq(s2) {\n            matches = matches + 1;\n            break;\n        }\n    }\n}\n...\n</code></pre>\n\n<p>You can also rewrite the <code>matches</code> counting loop using some higher order functions available in the <code>Iterator</code> trait:</p>\n\n<pre><code>let matches = thing1.split_whitespace()\n    .flat_map(|c1| thing2.split_whitespace().filter(move |&amp;c2| c1 == c2))\n    .count();\n</code></pre>\n\n<p><code>longer_length</code> can also be written as:</p>\n\n<pre><code>let longer_length = std::cmp::max(thing1.len(), thing2.len());\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1478470166, "creation_date": 1478470166, "answer_id": 40455107, "question_id": 40452674, "link": "https://stackoverflow.com/questions/40452674/how-do-i-reuse-the-splitwhitespace-iterator/40455107#40455107", "title": "How do I reuse the SplitWhitespace iterator?", "body": "<p>There are possibly some better ways to do the word comparison.</p>\n\n<p>If the phrases are long, then iterating over <code>thing2</code>'s words for every word in <code>thing1</code> is not very efficient.  If you don't have to worry about words which appear more than once, then <code>HashSet</code> may help, and boils the iteration down to something like:</p>\n\n<pre><code>let words1: HashSet&lt;&amp;str&gt; = thing1.split_whitespace().collect();\nlet words2: HashSet&lt;&amp;str&gt; = thing2.split_whitespace().collect();\nlet matches = words1.intersection(&amp;words2).count();\n</code></pre>\n\n<p>If you do care about repeated words you probably need a <code>HashMap</code>, and something like:</p>\n\n<pre><code>let mut words_hash1: HashMap&lt;&amp;str, usize&gt; = HashMap::new();\nfor word in thing1.split_whitespace() {\n    *words_hash1.entry(word).or_insert(0) += 1;\n}\nlet matches2: usize = thing2.split_whitespace()\n                     .map(|s| words_hash1.get(s).cloned().unwrap_or(0))\n                     .sum();\n</code></pre>\n"}], "owner": {"reputation": 2482, "user_id": 1129436, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/09511512293a4e31936309f2c6aee08e?s=128&d=identicon&r=PG", "display_name": "River Tam", "link": "https://stackoverflow.com/users/1129436/river-tam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1315, "favorite_count": 1, "accepted_answer_id": 40452705, "answer_count": 2, "score": 2, "last_activity_date": 1478470166, "creation_date": 1478455306, "last_edit_date": 1478457717, "question_id": 40452674, "link": "https://stackoverflow.com/questions/40452674/how-do-i-reuse-the-splitwhitespace-iterator", "title": "How do I reuse the SplitWhitespace iterator?", "body": "<p>I've got a piece of code which is supposed to check if two sentences are \"too similar\", as defined by a heuristic made clearest by the code.</p>\n\n<pre><code>fn too_similar(thing1: &amp;String, thing2: &amp;String) -&gt; bool {\n    let split1 = thing1.split_whitespace();\n    let split2 = thing2.split_whitespace();\n\n    let mut matches = 0;\n    for s1 in split1 {\n        for s2 in split2 {\n            if s1.eq(s2) {\n                matches = matches + 1;\n                break;\n            }\n        }\n    }\n\n    let longer_length =\n        if thing1.len() &gt; thing2.len() {\n            thing1.len()\n        } else {\n            thing2.len()\n        };\n\n    matches &gt; longer_length / 2\n}\n</code></pre>\n\n<p>However, I'm getting the following compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `split2`\n --&gt; src/main.rs:7:19\n  |\n7 |         for s2 in split2 {\n  |                   ^^^^^^ value moved here in previous iteration of loop\n  |\n  = note: move occurs because `split2` has type `std::str::SplitWhitespace&lt;'_&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I'm not sure why <code>split2</code> is getting moved in the first place, but what's the Rust way of writing this function?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478438400, "post_id": 40449685, "comment_id": 68144912, "body": "Thanks for your reply:) However I can not <i>specify that <code>&amp;self</code> has the same lifetime as the returned value</i>, since <code>U8Ref</code> may actually hold something that outlives itself."}, {"owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478438751, "post_id": 40449685, "comment_id": 68145018, "body": "For example, I hope something like this can work:   <code>fn main() {     let v = 0u8;     let u: &amp;u8;     {         let r = U8Ref { data: &amp;v };         u = r.get();     } </code>"}], "tags": [], "owner": {"reputation": 35314, "user_id": 344347, "user_type": "registered", "accept_rate": 33, "profile_image": "https://www.gravatar.com/avatar/1d83837bce9d9a2656c4f5704d40c430?s=128&d=identicon&r=PG", "display_name": "Pavel Strakhov", "link": "https://stackoverflow.com/users/344347/pavel-strakhov"}, "is_accepted": false, "score": 2, "last_activity_date": 1478437668, "creation_date": 1478437668, "answer_id": 40449685, "question_id": 40449512, "link": "https://stackoverflow.com/questions/40449512/how-to-write-a-trait-that-has-a-method-returning-a-reference-and-implement-it-co/40449685#40449685", "title": "How to write a trait that has a method returning a reference and implement it correctly?", "body": "<p>First, you should specify that <code>&amp;self</code> has the same lifetime as the returned value (both in trait in the implementation). Otherwise, the compiler correctly tells you that the value may not live long enough.</p>\n\n<p>Second, you should <code>impl</code> the trait for the type itself, not for a reference to the type. If you write <code>impl Trait for &amp;'a U80</code>, <code>&amp;self</code> inside that <code>impl</code> will have type <code>&amp;&amp;U80</code>, which is not what you want. Implementing the trait for <code>U80</code> will make the trait method available for <code>U80</code>, <code>&amp;U80</code> and <code>&amp;mut U80</code> simultaneously because the trait methods receives <code>&amp;self</code>.</p>\n\n<pre><code>trait GetRef&lt;'a&gt; {\n    fn get(&amp;'a self) -&gt; &amp;'a u8;\n}\n\nstruct U8Ref&lt;'a&gt; {\n    data: &amp;'a u8\n}\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for U8Ref&lt;'a&gt; {\n    fn get(&amp;self) -&gt; &amp;'a u8 {\n        self.data\n    }\n}\n\nstruct U80 { data: u8 }\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for U80 {\n    fn get(&amp;'a self) -&gt; &amp;'a u8 {\n        &amp;self.data\n    }\n}\n\nfn main() {\n    let mut u0 = U80 {data :0};\n    (&amp;u0).get();\n    u0.get();\n    (&amp;mut u0).get();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478484619, "post_id": 40451609, "comment_id": 68159308, "body": "Thanks for your answer which solves my original problem. But can you help me with why adding a <code>mut</code> makes it not working again ... <a href=\"https://play.rust-lang.org/?gist=faaf3de7c6c0068c7804178b1160b0e6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground link</a>"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478502730, "post_id": 40451609, "comment_id": 68164291, "body": "Adding &amp;mut where? Probably worth asking in a new question."}, {"owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478511149, "post_id": 40451609, "comment_id": 68168396, "body": "see my <a href=\"https://play.rust-lang.org/?gist=faaf3de7c6c0068c7804178b1160b0e6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>; if this is not immediately solvable, I would ask a new question."}, {"owner": {"reputation": 307, "user_id": 5696120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0767b5a70eb7139a7c11856f4eb81434?s=128&d=identicon&r=PG&f=1", "display_name": "Not Important", "link": "https://stackoverflow.com/users/5696120/not-important"}, "reply_to_user": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "edited": false, "score": 0, "creation_date": 1478553216, "post_id": 40451609, "comment_id": 68194009, "body": "@jiakai Is <a href=\"https://play.rust-lang.org/?gist=4c890310ecc8f09c6b363dc6fa284d30&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">this</a> what you&#39;re trying to do?"}, {"owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "reply_to_user": {"reputation": 307, "user_id": 5696120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0767b5a70eb7139a7c11856f4eb81434?s=128&d=identicon&r=PG&f=1", "display_name": "Not Important", "link": "https://stackoverflow.com/users/5696120/not-important"}, "edited": false, "score": 0, "creation_date": 1478570698, "post_id": 40451609, "comment_id": 68200134, "body": "@not-important not exactly; the point is that a <code>U8MutRef</code> may hold a reference with longer lifetime than itself, so we have to write <code>impl&lt;&#39;a, &#39;s&gt; GetRef&lt;&#39;a, &#39;s&gt; for U8MutRef&lt;&#39;a&gt;</code> rather than <code>impl&lt;&#39;a&gt; GetRef&lt;&#39;a, &#39;a&gt; for U8MutRef&lt;&#39;a&gt; </code>, and it causes compile error in your code too."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 2, "last_activity_date": 1478449898, "last_edit_date": 1478449898, "creation_date": 1478449387, "answer_id": 40451609, "question_id": 40449512, "link": "https://stackoverflow.com/questions/40449512/how-to-write-a-trait-that-has-a-method-returning-a-reference-and-implement-it-co/40451609#40451609", "title": "How to write a trait that has a method returning a reference and implement it correctly?", "body": "<p>Implementations of your trait need to constrain the lifetimes involved.  For your <code>U8Ref</code> case the lifetime will outlive <code>self</code>, but in the <code>U80</code> and similar cases they will be equal.</p>\n\n<p>The trait needs to have both lifetimes as inputs to be able to express this, so let's add the <code>self</code> lifetime as <code>'s</code>:</p>\n\n<pre><code>trait GetRef&lt;'a, 's&gt; {\n    fn get(&amp;'s self) -&gt; &amp;'a u8;\n}\n</code></pre>\n\n<p>Now those are explicit, we can write the <code>impl</code>s.  First, for the one which holds a reference:</p>\n\n<pre><code>struct U8Ref&lt;'a&gt; {\n    data: &amp;'a u8\n}\n\n// Straightforward; we can separate the self and return reference lifetimes.\nimpl&lt;'a, 's&gt; GetRef&lt;'a, 's&gt; for U8Ref&lt;'a&gt; {\n    fn get(&amp;'s self) -&gt; &amp;'a u8 {\n        self.data\n    }\n}\n</code></pre>\n\n<p>And now for the harder case before, we can explicitly tell the compiler the lifetimes are the same:</p>\n\n<pre><code>struct U80 { data: u8 }\n\n// The impl is only valid when &amp;self has the same lifetime as the &amp;u8 returned.\nimpl&lt;'a&gt; GetRef&lt;'a, 'a&gt; for U80 {\n    fn get(&amp;'a self) -&gt; &amp;'a u8 {\n        &amp;self.data\n    }\n}\n</code></pre>\n\n<p>And use it to check it compiles:</p>\n\n<pre><code>fn main() {\n    let mut u0 = U80 {data :0};\n    let uval: u8 = 7;\n    let ur0 = U8Ref { data: &amp;uval };\n\n    ur0.get();\n\n    (&amp;u0).get();\n\n    u0.get();\n\n    (&amp;mut u0).get();\n    {\n        // Check that it works when U8Ref's reference outlives itself.\n        let v = 0u8;\n        let u: &amp;u8;\n        {\n            let r = U8Ref { data: &amp;v };\n            u = r.get();\n        }\n        println!(\"{}\", u);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=669c31e0495a7b51699ef0509f246a6b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}], "owner": {"reputation": 491, "user_id": 1184354, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/abc249d7c830786d8a1502dd36095240?s=128&d=identicon&r=PG", "display_name": "jiakai", "link": "https://stackoverflow.com/users/1184354/jiakai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 183, "favorite_count": 0, "accepted_answer_id": 40451609, "answer_count": 2, "score": 2, "last_activity_date": 1478449898, "creation_date": 1478436439, "last_edit_date": 1478443651, "question_id": 40449512, "link": "https://stackoverflow.com/questions/40449512/how-to-write-a-trait-that-has-a-method-returning-a-reference-and-implement-it-co", "title": "How to write a trait that has a method returning a reference and implement it correctly?", "body": "<p>I want to write a trait that has a method like <code>foo(&amp;self) -&gt; &amp;T</code> and implement it for a concrete type rather than a reference. Here is what I've tried, but I can not get it to work:</p>\n\n<pre><code>trait GetRef&lt;'a&gt; {\n    fn get(&amp;self) -&gt; &amp;'a u8;\n}\n\n// U8Ref works fine\nstruct U8Ref&lt;'a&gt; {\n    data: &amp;'a u8\n}\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for U8Ref&lt;'a&gt; {\n    fn get(&amp;self) -&gt; &amp;'a u8 {\n        self.data\n    }\n}\n\nstruct U80 { data: u8 }\nstruct U81 { data: u8 }\nstruct U82 { data: u8 }\nstruct U83 { data: u8 }\n\n// works, but is not exactly what I want (API changes, and does not work on\n// &amp;mut U80, see main() below)\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for &amp;'a U80 {\n    fn get(&amp;self) -&gt; &amp;'a u8 {\n        &amp;self.data\n    }\n}\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for U81 {\n    fn get(&amp;self) -&gt; &amp;'a u8 {\n        // E0495: cannot infer an appropriate lifetime for lifetime parameter\n        // in generic type due to conflicting requirements\n        &amp;self.data\n    }\n}\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for U82 {\n    //E0308: lifetime mismatch\n    fn get(&amp;'a self) -&gt; &amp;'a u8 {\n        &amp;self.data\n    }\n}\n\nimpl&lt;'a&gt; GetRef&lt;'a&gt; for &amp;'a mut U83 {\n    fn get(&amp;self) -&gt; &amp;'a u8 {\n        // again E0495\n        &amp;self.data\n    }\n}\n\nfn main() {\n    let u0 = U80 {data :0};\n\n    // works\n    (&amp;u0).get();\n\n    // no method named `get` found for type `U80` in the current scope\n    u0.get();\n\n    // no method named `get` found for type `&amp;mut U80` in the current scope\n    (&amp;mut u0).get();\n}\n</code></pre>\n"}, {"tags": ["file", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478385829, "post_id": 40443963, "comment_id": 68134542, "body": "Have you read <a href=\"https://doc.rust-lang.org/stable/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">the book chapter on modules</a>? If you explain what issues you have with the explanation from the book, we might be able to help. Otherwise, we will most likely just repeat what the book says."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478386381, "post_id": 40443963, "comment_id": 68134684, "body": "You could also check out the <a href=\"http://rust-lang.github.io/book/ch07-00-modules.html\" rel=\"nofollow noreferrer\">revised book-in-progress</a> to see if that way of explaining is better suited."}, {"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478388682, "post_id": 40443963, "comment_id": 68135236, "body": "Thanks, was helpful, the second link I mean."}, {"owner": {"reputation": 6631, "user_id": 51683, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2ac88413948aad12e279e0d9609e7f74?s=128&d=identicon&r=PG", "display_name": "carols10cents", "link": "https://stackoverflow.com/users/51683/carols10cents"}, "edited": false, "score": 0, "creation_date": 1478575946, "post_id": 40443963, "comment_id": 68201348, "body": "Have you tried the suggestion in the error message&#39;s note? What other things have you tried? What are you actually trying to do, why do you want to structure your project in the way that you&#39;re trying to? A better title that&#39;s in the form of a question might also help people to understand the problem better."}], "answers": [{"comments": [{"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "edited": false, "score": 0, "creation_date": 1478388440, "post_id": 40444335, "comment_id": 68135182, "body": "Thanks, thing is someone did comment on the question with a link to some information about modules which was helpful and in the end I already made those changes you mentioned and it did indeed make the error go away but thanks for trying any way. I also partially agree,I think because there&#39;s no folder it breaks the loadtree and rust doesn&#39;t like it so it just screams &quot;Nope, can\\&#39;t new module here as there is no subfolder&quot; or somthing like that, but since no one is trying to simply, I don&#39;t really know."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478389265, "post_id": 40444335, "comment_id": 68135368, "body": "May I ask why you are answering the question and then commenting on your own answer as if there are multiple people involved? Perhaps you meant to log into separate accounts for some reason?"}, {"owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478390423, "post_id": 40444335, "comment_id": 68135631, "body": "Wow, I guess it went over your head huh. You were helpful so I&#39;m grateful, My answer was me pretending to be someone trying to answer the question and me commenting was me pretending to be me commenting on someone answering me."}], "tags": [], "owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "is_accepted": true, "score": -1, "last_activity_date": 1478389202, "last_edit_date": 1478389202, "creation_date": 1478388256, "answer_id": 40444335, "question_id": 40443963, "link": "https://stackoverflow.com/questions/40443963/trying-to-get-rust-to-load-files/40444335#40444335", "title": "Trying to get Rust to load files", "body": "<p>The best way to fix this is to rename the manifest file to <strong>mod.rs</strong> and change the first line in <strong>main.rs</strong> to:</p>\n\n<pre><code>mod lib;\n</code></pre>\n\n<p>and change <strong>mod.rs</strong> to:</p>\n\n<pre><code>pub mod structs {\n    mod entity;\n}\n</code></pre>\n\n<p>I think the reason for your error is because there's a <strong>manifest.rs</strong> file but no folder. Why this causes the subfolder files to not load I can't say, I'm still new to Rust myself so there's a good chance I'm wrong.</p>\n\n<p>Someone with more Rust knowledge might know, but since they're downvoting instead of being helpful, I doubt you'd get a better answer.</p>\n"}], "owner": {"reputation": 2184, "user_id": 3536548, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qEPjr.png?s=128&g=1", "display_name": "Thermatix", "link": "https://stackoverflow.com/users/3536548/thermatix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 493, "favorite_count": 0, "accepted_answer_id": 40444335, "answer_count": 1, "score": -3, "last_activity_date": 1478389202, "creation_date": 1478385400, "last_edit_date": 1478385733, "question_id": 40443963, "link": "https://stackoverflow.com/questions/40443963/trying-to-get-rust-to-load-files", "title": "Trying to get Rust to load files", "body": "<p>I'm having trouble trying to get Rust to load files in subdirectories. Rust treats the files as the modules and the code as part of the module, but I'm used to Ruby's way of treating files and directories separate from the code that they contain.</p>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>mod lib {\n    pub mod manifest;\n}\n</code></pre>\n\n<p><strong>src/lib/manifest.rs</strong></p>\n\n<pre><code>mod structs {\n    pub mod entity;\n}\n</code></pre>\n\n<p><strong>src/lib/structs/entity.rs</strong></p>\n\n<pre><code>pub struct entity {\n    type: String\n}\n</code></pre>\n\n<p>The error I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot declare a new module at this location\n --&gt; src/lib/manifest.rs:2:13\n  |\n2 |     pub mod entity;\n  |             ^^^^^^\n  |\nnote: maybe move this module `structs` to its own directory via `structs/mod.rs`\n --&gt; src/lib/manifest.rs:2:13\n  |\n2 |     pub mod entity;\n  |             ^^^^^^\nnote: ... or maybe `use` the module `entity` instead of possibly redeclaring it\n --&gt; src/lib/manifest.rs:2:13\n  |\n2 |     pub mod entity;\n  |             ^^^^^^\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478369112, "post_id": 40441334, "comment_id": 68129712, "body": "Wait, what do you mean by <i>iterate two times</i>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1478369626, "post_id": 40441334, "comment_id": 68129876, "body": "@MatthieuM. a common misconception. Languages like Ruby, for example, will produce an entire <code>Array</code> as the result of a <code>map</code>. Each chained <code>map</code> call thus has to iterate over a new container. There are also &quot;lazy&quot; iterators in Ruby, but they aren&#39;t as common."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478369709, "post_id": 40441334, "comment_id": 68129898, "body": "@Shepmaster: That&#39;s what I am fearing, yes."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 21, "last_activity_date": 1482810975, "last_edit_date": 1482810975, "creation_date": 1478368549, "answer_id": 40441427, "question_id": 40441334, "link": "https://stackoverflow.com/questions/40441334/is-iter-map-sum-as-fast-as-iter-fold/40441427#40441427", "title": "Is `iter().map().sum()` as fast as `iter().fold()`?", "body": "<p>For them to generate the same code, they'd first have to <strong>do the same thing</strong>. Your two examples do not:</p>\n\n<pre><code>fn total_fold() -&gt; u64 {\n    (0..64).fold(0u64, |r, s| r + square(s + 1))\n}\n\nfn total_map() -&gt; u64 {\n    (1..64).map(square).sum()\n}\n\nfn main() {\n    println!(\"{}\", total_fold());\n    println!(\"{}\", total_map());\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>18446744073709551615\n9223372036854775807\n</code></pre>\n\n<hr>\n\n<p>Let's assume you meant</p>\n\n<pre><code>fn total_fold() -&gt; u64 {\n    (1..64).fold(0u64, |r, s| r + square(s + 1))\n}\n\nfn total_map() -&gt; u64 {\n    (1..64).map(|i| square(i + 1)).sum()\n}\n</code></pre>\n\n<p>There are a few avenues to check:</p>\n\n<ol>\n<li>The generated LLVM IR</li>\n<li>The generated assembly</li>\n<li>Benchmark</li>\n</ol>\n\n<p>The <em>easiest</em> source for the IR and assembly is one of the playgrounds (<a href=\"https://play.rust-lang.org\" rel=\"noreferrer\">official</a> or <a href=\"http://play.integer32.com\" rel=\"noreferrer\">alternate</a>). These both have buttons to view the assembly or IR. You can also pass <code>--emit=llvm-ir</code> or <code>--emit=asm</code> to the compiler to generate these files. </p>\n\n<p>Make sure to generate assembly or IR in release mode. The attribute <code>#[inline(never)]</code> is often useful to keep functions separate to find them easier in the output.</p>\n\n<p>Benchmarking is <a href=\"https://doc.rust-lang.org/stable/book/benchmark-tests.html\" rel=\"noreferrer\">documented in The Rust Programming Language</a>, so there's no need to repeat all that valuable information.</p>\n\n<hr>\n\n<p>Before <strong>Rust 1.14</strong>, these do not produce the <em>exact</em> same assembly. I'd wait for benchmarking / profiling data to see if there's any meaningful impact on performance before I worried.</p>\n\n<p>As of <strong>Rust 1.14</strong>, they <em>do produce the same assembly</em>! This is one reason I love Rust. You can write clear and idiomatic code and <a href=\"https://github.com/rust-lang/rust/pull/37315\" rel=\"noreferrer\">smart people come along and make it equally as fast</a>.</p>\n\n<blockquote>\n  <p>but the first code would iterate two times, once for the <code>map</code> and once for the <code>sum</code>.</p>\n</blockquote>\n\n<p>This is incorrect, and I'd love to know what source told you this so we can go correct it at that point and prevent future misunderstandings. <a href=\"https://doc.rust-lang.org/std/iter/index.html\" rel=\"noreferrer\">An iterator</a> operates on a pull basis; one element is processed at a time. The core method is <code>next</code>, which yields a single value, running just enough computation to produce that value.</p>\n"}, {"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1478379312, "post_id": 40441847, "comment_id": 68132749, "body": "The transformation that you apply to get the &quot;plain&quot; for loops is not how the compiler works. Perhaps after many optimizations it winds up with something similar (in fact I have little doubt that the two iterator chains wind up with the equivalent machine code), but that it <i>not</i> how the compiler desugars the two iterator chains. By contrast, the loops that you do end up with are so obviously equivalent that they should generate literally the same code &amp;mdash; the differences are entirely cosmetic even to the compiler."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1478397276, "post_id": 40441847, "comment_id": 68137059, "body": "I don&#39;t think it has any impact on this scenario (who knows) but <code>.map()</code> just learned to pass on the fold, so it&#39;s now doing part of that rewriting explicitly, see <a href=\"https://github.com/rust-lang/rust/pull/37315\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/37315</a>"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1478410445, "post_id": 40441847, "comment_id": 68138950, "body": "@delnan Minus some extremely minor nitpicks, it seems almost exactly like what the compiler sees after inlining. At what point do you disagree?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1478438946, "post_id": 40441847, "comment_id": 68145075, "body": "@Veedrac As I said, I do not dispute that morally similar code comes out after you ran the optimization pipeline over it, but I find the presentation in this answer too simplistic. It is not the case that the compiler applies one cute little high-level rewriting after the other (with exception of the recent PR bluss linked to). Even after inlining, it first sees a big ol&#39; mess of nested matches on Options which is then optimized further. The performance of iterators is a consequence of inlining plus plain old straight-line-code optimizations [cont&#39;d]"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1478439188, "post_id": 40441847, "comment_id": 68145152, "body": "[...] and pretending the compiler works on a higher level does a disservice to the programmer. One needs to keep that in mind what the compiler can and can&#39;t to write code that optimizes well, and to be able to cope when the compiler <i>doesn&#39;t</i> optimize everything as you want. Besides, it&#39;s important to me that people don&#39;t mistake iterators for magic sauce. Anyone can write library code that optimizes just as well."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478439396, "post_id": 40441847, "comment_id": 68145219, "body": "@delnan: That&#39;s a fair criticism; I was more interested in ensuring that there is no misunderstanding about the overall algorithm complexity (O(N)) than in the details."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1478440760, "post_id": 40441847, "comment_id": 68145665, "body": "@delnan I mean, OK, it happens inside LLVM&#39;s IR rather than at language level and the <code>for</code> loop is syntactically expanded, but the inlining still follows pretty much what was given."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1478442102, "post_id": 40441847, "comment_id": 68146108, "body": "@delnan i.e., for the first one the compiler inlines fold. <a href=\"https://doc.rust-lang.org/beta/src/core/up/src/libcore/iter/iterator.rs.html#1306\" rel=\"nofollow noreferrer\">See definition.</a> The closure is a direct call because of monomorphisation, so will be inlined almost immidiately too. This gets the first code, except the iterator is evaluated earlier and passed down by value."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1478442752, "post_id": 40441847, "comment_id": 68146329, "body": "@delnan For the second the compiler inlines Sum::sum, <a href=\"https://doc.rust-lang.org/beta/src/core/up/src/libcore/iter/traits.rs.html#591\" rel=\"nofollow noreferrer\">which is just a fold</a>, so that fold and its function argument then get inlined. Ignoring where the argument is evaluated, that&#39;s the first step given. The hardest to visualise step is inlining the map call because <a href=\"https://gist.github.com/47c793db3ceb810b2f6445ff4c63122c\" rel=\"nofollow noreferrer\">you inline twice inside the for loop, and fold some branches on constants</a>. These are basic optimizations for LLVM, though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1478443433, "post_id": 40441847, "comment_id": 68146552, "body": "@bluss By Jove, you&#39;ve done it again! See my update above, but diffing the assembly in nightly shows they only differ in basic block names. Kudos!"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1478444547, "post_id": 40441847, "comment_id": 68146893, "body": "Good, and the prize in crosshairs is worth even more than this example, see the VecDeque improvement or corresponding ndarray ones for .fold(). Segmented/nested iteration is seldom as optimizable when <code>Iterator::next</code> becomes a state machine; in the fold method we have the opportunity to write plain nested loops instead."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1478439529, "last_edit_date": 1478439529, "creation_date": 1478371223, "answer_id": 40441847, "question_id": 40441334, "link": "https://stackoverflow.com/questions/40441334/is-iter-map-sum-as-fast-as-iter-fold/40441847#40441847", "title": "Is `iter().map().sum()` as fast as `iter().fold()`?", "body": "<p>First, let's fix those example to actually return the same result:</p>\n\n<pre><code>pub fn total_fold_iter() -&gt; u64 {\n    (1..65).fold(0u64, |r, s| r + square(s))\n}\n\npub fn total_map_iter() -&gt; u64 {\n    (1..65).map(square).sum()\n}\n</code></pre>\n\n<p>Now, let's develop them, starting with <code>fold</code>. A <code>fold</code> is just a loop and an accumulator, it is <strong>roughly</strong> equivalent to:</p>\n\n<pre><code>pub fn total_fold_explicit() -&gt; u64 {\n    let mut total = 0;\n    for i in 1..65 {\n        total = total + square(i);\n    }\n    total\n}\n</code></pre>\n\n<p>Then, let's go with <code>map</code> and <code>sum</code>, and unwrap the <code>sum</code> first, which is <strong>roughly</strong> equivalent to:</p>\n\n<pre><code>pub fn total_map_partial_iter() -&gt; u64 {\n    let mut total = 0;\n    for i in (1..65).map(square) {\n        total += i;\n    }\n    total\n}\n</code></pre>\n\n<p>It's just a simple accumulator! And now, let's unwrap the <code>map</code> layer (which only applies a function), obtaining something that is <strong>roughly</strong> equivalent to:</p>\n\n<pre><code>pub fn total_map_explicit() -&gt; u64 {\n    let mut total = 0;\n    for i in 1..65 {\n        let s = square(i);\n        total += s;\n    }\n    total\n}\n</code></pre>\n\n<p>As you can see, the both of them are <em>extremely</em> similar: they have apply the same operations in the same order and have the same overall complexity.</p>\n\n<hr>\n\n<p>Which is faster? I have no idea. And a micro-benchmark may only tell half the truth anyway: just because something is faster in a micro-benchmark does not mean it is faster in the midst of other code.</p>\n\n<p>What I <em>can</em> say, however, is that they both have equivalent complexity and therefore should behave similarly, ie within a factor of each other.</p>\n\n<p>And that I would personally go for <code>map</code> + <code>sum</code>, because it expresses the intent more clearly whereas <code>fold</code> is the \"kitchen-sink\" of <code>Iterator</code> methods and therefore far less informative.</p>\n"}], "owner": {"reputation": 1331, "user_id": 2207958, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/SJNmA.jpg?s=128&g=1", "display_name": "Max Linke", "link": "https://stackoverflow.com/users/2207958/max-linke"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3935, "favorite_count": 0, "accepted_answer_id": 40441427, "answer_count": 2, "score": 10, "last_activity_date": 1482810975, "creation_date": 1478367967, "last_edit_date": 1478373167, "question_id": 40441334, "link": "https://stackoverflow.com/questions/40441334/is-iter-map-sum-as-fast-as-iter-fold", "title": "Is `iter().map().sum()` as fast as `iter().fold()`?", "body": "<p>Does the compiler generate the same code for <code>iter().map().sum()</code> and <code>iter().fold()</code>? In the end they achieve the same goal, but the first code would iterate two times, once for the <code>map</code> and once for the <code>sum</code>.</p>\n\n<p>Here is an example. Which version would be faster in <code>total</code>?</p>\n\n<pre><code>pub fn square(s: u32) -&gt; u64 {\n    match s {\n        s @ 1...64 =&gt; 2u64.pow(s - 1),\n        _ =&gt; panic!(\"Square must be between 1 and 64\")\n    }\n}\n\npub fn total() -&gt; u64 {\n    // A fold\n    (0..64).fold(0u64, |r, s| r + square(s + 1))\n    // or a map\n    (1..64).map(square).sum()\n}\n</code></pre>\n\n<p>What would be good tools to look at the assembly or benchmark this?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478356710, "post_id": 40435802, "comment_id": 68125909, "body": "Simply checking <a href=\"https://en.wikipedia.org/wiki/Floating_point\" rel=\"nofollow noreferrer\">Wikipedia</a> would tell you that combining two <code>f32</code> does not a <code>f64</code> make (2*23 != 52, you would be losing precision)"}], "answers": [{"comments": [{"owner": {"reputation": 514, "user_id": 1375259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yuWQ9.jpg?s=128&g=1", "display_name": "Chakravarthy Raghunandan", "link": "https://stackoverflow.com/users/1375259/chakravarthy-raghunandan"}, "edited": false, "score": 0, "creation_date": 1478332050, "post_id": 40435912, "comment_id": 68119390, "body": "thanks for clearing things up Also, does Rust have an arbitrary precision type ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 514, "user_id": 1375259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yuWQ9.jpg?s=128&g=1", "display_name": "Chakravarthy Raghunandan", "link": "https://stackoverflow.com/users/1375259/chakravarthy-raghunandan"}, "edited": false, "score": 0, "creation_date": 1478332863, "post_id": 40435912, "comment_id": 68119547, "body": "@ChakravarthyRaghunandan Not in the standard library; I believe there&#39;s one in the <code>num</code> crate, and possibly others elsewhere."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1478335709, "post_id": 40435912, "comment_id": 68120136, "body": "What about instructions working with <code>f64</code> directly? Like multiplication, division or sin()... are those available on every x86 CPU for example?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1478336082, "post_id": 40435912, "comment_id": 68120220, "body": "@LukasKalbertodt Going back how far? The 80387 implemented full <a href=\"https://en.wikipedia.org/wiki/IEEE_754-1985\" rel=\"nofollow noreferrer\">IEEE 754-1985</a>, plus at least sin, cos, and tan."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 12, "last_activity_date": 1478331529, "creation_date": 1478331529, "answer_id": 40435912, "question_id": 40435802, "link": "https://stackoverflow.com/questions/40435802/how-are-f64-types-represented-in-32-bit-machines-in-rust/40435912#40435912", "title": "How are f64 types represented in 32 bit machines in Rust?", "body": "<p>They're represented in <em>exactly</em> the same way they're represented on a 64-bit machine; they're a hardware feature going back to the math co-processor for the 386, which was released somewhere around 1987.</p>\n\n<p>Floats have <em>nothing</em> to do with the bitness of the machine.</p>\n\n<p>The actual binary-level representation is documented exhaustively in other places, like the <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\" rel=\"noreferrer\">Wikipedia page on the Double-precision floating-point format</a>.</p>\n"}], "owner": {"reputation": 514, "user_id": 1375259, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/yuWQ9.jpg?s=128&g=1", "display_name": "Chakravarthy Raghunandan", "link": "https://stackoverflow.com/users/1375259/chakravarthy-raghunandan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 347, "favorite_count": 0, "accepted_answer_id": 40435912, "answer_count": 1, "score": 3, "last_activity_date": 1478356636, "creation_date": 1478330588, "last_edit_date": 1478356636, "question_id": 40435802, "link": "https://stackoverflow.com/questions/40435802/how-are-f64-types-represented-in-32-bit-machines-in-rust", "title": "How are f64 types represented in 32 bit machines in Rust?", "body": "<p>I just realized we can use <code>f64</code> types even in a 32 bit machines with a bit of a performance trade-off. But, how is this achieved in Rust? Are two <code>f32</code> types bundled together as a makeshift <code>f64</code> type? Or something else going on behind the scenes?</p>\n\n<p>Can someone explain how this is done without digging too deep into rust internals? (I'm still very new to Rust).</p>\n"}, {"tags": ["c", "rust", "static-linking", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478362947, "post_id": 40435371, "comment_id": 68127765, "body": "Your question is not very clear. What have you <i>already tried</i>? There are <a href=\"http://jakegoulding.com/rust-ffi-omnibus/\" rel=\"nofollow noreferrer\">entire sites</a> dedicated to calling Rust code from other languages (including C) with working examples. Saying things like &quot;the C lib&quot; adds confusion because there <i>are no C libraries</i> in your question; presumably the file called &quot;main&quot; will be compiled into an executable (maybe through an object first)."}], "answers": [{"tags": [], "owner": {"reputation": 171, "user_id": 3614352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d66be3e50da03736e4af8f902511239d?s=128&d=identicon&r=PG&f=1", "display_name": "mfarrugi", "link": "https://stackoverflow.com/users/3614352/mfarrugi"}, "is_accepted": false, "score": 0, "last_activity_date": 1478446806, "last_edit_date": 1478446806, "creation_date": 1478445434, "answer_id": 40450942, "question_id": 40435371, "link": "https://stackoverflow.com/questions/40435371/how-do-you-statically-link-rust-and-c-sources-that-depend-on-each-other-through/40450942#40450942", "title": "How do you statically link Rust and C sources that depend on each other through FFI?", "body": "<p>This is no different than the <a href=\"https://github.com/alexcrichton/rust-ffi-examples/tree/master/c-to-rust\" rel=\"nofollow noreferrer\">'c-to-rust' example</a>.</p>\n\n<p>This was me not understanding the distinction between the compiling and linking stages; the Rust file's dependency on <code>GLOBAL_CONSTANT</code> is not resolved until link time, so there is no problem with creating <code>librust.a</code> then later linking it with the executable.</p>\n"}], "owner": {"reputation": 171, "user_id": 3614352, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d66be3e50da03736e4af8f902511239d?s=128&d=identicon&r=PG&f=1", "display_name": "mfarrugi", "link": "https://stackoverflow.com/users/3614352/mfarrugi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 598, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1478446806, "creation_date": 1478326675, "last_edit_date": 1478360525, "question_id": 40435371, "link": "https://stackoverflow.com/questions/40435371/how-do-you-statically-link-rust-and-c-sources-that-depend-on-each-other-through", "title": "How do you statically link Rust and C sources that depend on each other through FFI?", "body": "<p>What is the minimal Makefile or <code>cargo</code>/<code>rustc</code> + <code>cc</code> invocation to statically link Rust and C sources that depend on each other? Something like this (adapted from <a href=\"https://github.com/alexcrichton/rust-ffi-examples/tree/master/c-to-rust/src\" rel=\"nofollow noreferrer\">alexcrichton/rust-ffi-examples</a>), which is similar to the <a href=\"https://doc.rust-lang.org/book/ffi.html#targeting-callbacks-to-rust-objects\" rel=\"nofollow noreferrer\">example in the Rust docs</a>:</p>\n\n<p>main.c </p>\n\n<pre class=\"lang-c prettyprint-override\"><code>struct contrived { double x; double y; }\n\ndouble GLOBAL_CONSTANT = 100;\n\nextern double consume_input(struct contrived input);\n\nint main() {\n    double output = consume_input({.x = 1, .y = 2});\n    printf(\"Got %f.\", output);\n    return 0;\n}\n</code></pre>\n\n<p>lib.rs</p>\n\n<pre><code>#![crate_type = \"staticlib\"]\n\n#[repr(C)]\n#[derive(Clone, Copy)]\nstruct Contrived {\n    x: f64,\n    y: f64,\n}\n\nextern {\n    #[link(name = \"main\", kind = \"static\")]\n    static GLOBAL_CONSTANT: f64;\n}\n\n\n#[no_mangle]\npub extern fn consume_input(input: Contrived) -&gt; f64 {\n    input.x - input.y + GLOBAL_CONSTANT\n}\n</code></pre>\n\n<p>If lib.rs only depended on the struct, does it not actually depend on the C lib?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 124806, "user_id": 121747, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9fcebb68b105446c0d9eebbce1146044?s=128&d=identicon&r=PG&f=1", "display_name": "Jack", "link": "https://stackoverflow.com/users/121747/jack"}, "edited": false, "score": 1, "creation_date": 1478316352, "post_id": 40434374, "comment_id": 68117123, "body": "Regarding how to pass iterators please check <a href=\"http://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator\">here</a>. For your first question you can take a slice, eg <code>let slice = &amp;v1[0..v1.len()&#47;2]</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478355390, "post_id": 40434374, "comment_id": 68125508, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>. Since your &quot;accept an iterator&quot; question already has a duplicate, I&#39;ve just removed it."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1478355694, "last_edit_date": 1495540423, "creation_date": 1478355694, "answer_id": 40439278, "question_id": 40434374, "link": "https://stackoverflow.com/questions/40434374/how-does-one-operate-over-a-subset-of-a-vector/40439278#40439278", "title": "How does one operate over a subset of a vector?", "body": "<p>As mentioned, you want to create a <a href=\"https://doc.rust-lang.org/std/primitive.slice.html\" rel=\"nofollow noreferrer\"><em>slice</em></a> using the <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code> trait</a> with a <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow noreferrer\"><code>Range</code></a>:</p>\n\n<pre><code>let slice = &amp;v1[0..v1.len() / 2];\n</code></pre>\n\n<p>This is yet another reason <a href=\"https://stackoverflow.com/q/40006219/155423\">why it is discouraged to accept a <code>&amp;Vec</code></a>. The current code would require converting the slice into an allocated <code>Vec</code>. Instead, rewrite it to accept a slice:</p>\n\n<pre><code>fn median(v: &amp;[u32]) -&gt; f32 {\n    // ...\n}\n</code></pre>\n\n<p>Since you are likely interested in splitting a vector / slice in half and getting both parts, <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at\" rel=\"nofollow noreferrer\"><code>split_at</code></a> may be relevant:</p>\n\n<pre><code>let (head, tail) = v1.split_at(v1.len() / 2);\nprintln!(\"{:.*}\", 1, median(head));\nprintln!(\"{:.*}\", 1, median(tail));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4027, "user_id": 6412502, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-PawVF0qwzwY/AAAAAAAAAAI/AAAAAAAAABc/XCIKhmWmXdk/photo.jpg?sz=128", "display_name": "Little Roys", "link": "https://stackoverflow.com/users/6412502/little-roys"}, "is_accepted": false, "score": -1, "last_activity_date": 1604913472, "creation_date": 1604913472, "answer_id": 64748827, "question_id": 40434374, "link": "https://stackoverflow.com/questions/40434374/how-does-one-operate-over-a-subset-of-a-vector/64748827#64748827", "title": "How does one operate over a subset of a vector?", "body": "<p>How to find the median on vector:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn median(numbers: &amp;mut Vec&lt;i32&gt;) -&gt; i32 {\n    numbers.sort();\n    let mid = numbers.len() / 2;\n\n    if numbers.len() % 2 == 0 {\n        mean(&amp;vec![numbers[mid - 1], numbers[mid]]) as i32\n    } else {\n        numbers[mid]\n    }\n\n}\n</code></pre>\n<p>How to get <code>half</code> a vector:</p>\n<ul>\n<li>Use Slice:</li>\n</ul>\n<pre class=\"lang-rust prettyprint-override\"><code>let slice: &amp;[i32] = &amp;numbers[0..numbers.len() / 2];\n</code></pre>\n<ul>\n<li>Creates a draining iterator</li>\n</ul>\n<pre class=\"lang-rust prettyprint-override\"><code>let half: Vec&lt;i32&gt; = numbers.drain(..numbers.len()/2).collect()\n</code></pre>\n"}], "owner": {"reputation": 4724, "user_id": 1024740, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/1037d544b43c71c34225fac55e0c7750?s=128&d=identicon&r=PG", "display_name": "Rob Latham", "link": "https://stackoverflow.com/users/1024740/rob-latham"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4080, "favorite_count": 0, "accepted_answer_id": 40439278, "answer_count": 2, "score": 5, "last_activity_date": 1604913472, "creation_date": 1478315530, "last_edit_date": 1478355349, "question_id": 40434374, "link": "https://stackoverflow.com/questions/40434374/how-does-one-operate-over-a-subset-of-a-vector", "title": "How does one operate over a subset of a vector?", "body": "<p>I understand how to operate on an entire vector, though I don't think this is idiomatic Rust:</p>\n\n<pre><code>fn median(v: &amp;Vec&lt;u32&gt;) -&gt; f32 {\n    let count = v.len();\n    if count % 2 == 1 {\n        v[count / 2] as f32\n    } else {\n        (v[count / 2] as f32 + v[count / 2 - 1] as f32) / 2.0\n    }\n}\n\nfn main() {\n    let mut v1 = vec![3, 7, 8, 5, 12, 14, 21, 13, 18];\n    v1.sort();\n    println!(\"{:.*}\", 1, median(&amp;v1));\n}\n</code></pre>\n\n<p>But what if I want to operate on only half of this vector?  For example, the first quartile is the median of the lower half, and the third quartile is the median of the upper half.  My first thought was to construct two new vectors, but that did not seem quite right.  </p>\n\n<p>How do I get \"half\" a vector?</p>\n"}, {"tags": ["rust", "variadic-functions", "ffi"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 3, "creation_date": 1478336846, "post_id": 40432364, "comment_id": 68120404, "body": "Do you mean mexPrintf accepts a variable number of arguments like <code>printf</code>, or a <code>va_list</code> like <code>vprintf</code>? If the former you need to pass the integer directly rather than as a pointer to it."}, {"owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1478364773, "post_id": 40432364, "comment_id": 68128385, "body": "Thanks @ChrisEmerson, I sadly got the two confused. Thanks for helping to clear that up."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1478357501, "last_edit_date": 1478357501, "creation_date": 1478357157, "answer_id": 40439517, "question_id": 40432364, "link": "https://stackoverflow.com/questions/40432364/how-to-wrap-a-call-to-a-ffi-function-that-uses-varargs-in-rust/40439517#40439517", "title": "How to wrap a call to a FFI function that uses VarArgs in Rust?", "body": "<p>Contrary to popular belief, it is possible to <em>call</em> variadic / vararg functions that were defined in C. That doesn't mean that doing so is very easy, and it's definitely even easier to do something bad because there are even fewer types for the compiler to check your work with.</p>\n\n<p>Here's an example of calling <code>printf</code>. I've hard-coded just about everything:</p>\n\n<pre><code>extern crate libc;\n\nfn my_thing() {\n    unsafe {\n        libc::printf(b\"Hello, %s (%d)\\0\".as_ptr() as *const i8, b\"world\\0\".as_ptr(), 42i32);\n    }\n}\n\nfn main() {\n    my_thing()\n}\n</code></pre>\n\n<p>Note that I have to very explicitly make sure my format string and arguments are all the right types and the strings are NUL-terminated.</p>\n\n<p>Normally, you'll use tools like <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html\" rel=\"noreferrer\"><code>CString</code></a>:</p>\n\n<pre><code>extern crate libc;\n\nuse std::ffi::CString;\n\nfn my_thing(name: &amp;str, number: i32) {\n    let fmt = CString::new(\"Hello, %s (%d)\").expect(\"Invalid format string\");\n    let name = CString::new(name).expect(\"Invalid name\");\n\n    unsafe {\n        libc::printf(fmt.as_ptr(), name.as_ptr(), number);\n    }\n}\n\nfn main() {\n    my_thing(\"world\", 42)\n}\n</code></pre>\n\n<p>The Rust compiler test suite also has <a href=\"https://github.com/rust-lang/rust/blob/1.12.1/src/test/run-pass/variadic-ffi.rs\" rel=\"noreferrer\">an example of calling a variadic function</a>.</p>\n\n<hr>\n\n<p>A word of warning specifically for <code>printf</code>-like functions: C compiler-writers realized that people screw up this particular type of variadic function call <em>all the time</em>. To help combat that, they've encoded special logic that parses the format string and attempts to check the argument types against the types the format string expect. The Rust compiler will not check your C-style format strings for you!</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1526133697, "creation_date": 1526133697, "answer_id": 50307037, "question_id": 40432364, "link": "https://stackoverflow.com/questions/40432364/how-to-wrap-a-call-to-a-ffi-function-that-uses-varargs-in-rust/50307037#50307037", "title": "How to wrap a call to a FFI function that uses VarArgs in Rust?", "body": "<p>I had confused a \"variable list of arguments\" with a <code>va_list</code>. I'm going to avoid both if I can and in this situation, I'm just going to do the string formatting in Rust before passing it to interop. Here is what worked for me in this case:</p>\n\n<pre><code>#![allow(non_snake_case)]\n#![allow(unused_variables)]\n\nextern crate mex_sys;\n\nuse mex_sys::mxArray;\nuse std::ffi::CString;\nuse std::os::raw::c_int;\n\n// attempt to wrap mex_sys::mexPrintf\nfn mexPrintf(text: &amp;str) {\n    let cs = CString::new(text).expect(\"Invalid text\");\n    unsafe {\n        mex_sys::mexPrintf(cs.as_ptr());\n    }\n}\n\n#[no_mangle]\npub extern \"C\" fn mexFunction(\n    nlhs: c_int,\n    plhs: *mut *mut mxArray,\n    nrhs: c_int,\n    prhs: *mut *mut mxArray,\n) {\n    mexPrintf(&amp;format!(\"{} inputs and {} outputs\\n\", nrhs, nlhs));\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/foWbo.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/foWbo.png\" alt=\"enter image description here\"></a></p>\n"}], "owner": {"reputation": 5007, "user_id": 23059, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/28d1534c68a23bb158022f3d5f0985ad?s=128&d=identicon&r=PG", "display_name": "Cameron Taggart", "link": "https://stackoverflow.com/users/23059/cameron-taggart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2672, "favorite_count": 0, "accepted_answer_id": 40439517, "answer_count": 2, "score": 6, "last_activity_date": 1526133697, "creation_date": 1478297133, "last_edit_date": 1526133675, "question_id": 40432364, "link": "https://stackoverflow.com/questions/40432364/how-to-wrap-a-call-to-a-ffi-function-that-uses-varargs-in-rust", "title": "How to wrap a call to a FFI function that uses VarArgs in Rust?", "body": "<p><code>mexPrintf</code>, just like <code>printf</code>, accepts a varargs list of arguments, but I don't know what the best way to wrap this is in Rust. There is a <a href=\"https://github.com/rust-lang/rfcs/issues/376\" rel=\"nofollow noreferrer\">RFC for variadic generics</a>, but what can we do today?</p>\n\n<p>In this example, I want to print of the number of inputs and outputs, but the wrapped function just prints garbage. Any idea how to fix this?</p>\n\n<p><a href=\"https://i.stack.imgur.com/5SRYq.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/5SRYq.png\" alt=\"enter image description here\"></a></p>\n\n<pre><code>#![allow(non_snake_case)]\n#![allow(unused_variables)]\n\nextern crate mex_sys;\n\nuse mex_sys::mxArray;\nuse std::ffi::CString;\nuse std::os::raw::c_int;\nuse std::os::raw::c_void;\n\ntype VarArgs = *mut c_void;\n\n// attempt to wrap mex_sys::mexPrintf\nfn mexPrintf(fmt: &amp;str, args: VarArgs) {\n    let cs = CString::new(fmt).unwrap();\n    unsafe {\n        mex_sys::mexPrintf(cs.as_ptr(), args);\n    }\n}\n\n#[no_mangle]\npub extern \"system\" fn mexFunction(\n    nlhs: c_int,\n    plhs: *mut *mut mxArray,\n    nrhs: c_int,\n    prhs: *mut *mut mxArray,\n) {\n    let hw = CString::new(\"hello world\\n\").unwrap();\n    unsafe {\n        mex_sys::mexPrintf(hw.as_ptr());\n    }\n\n    let inout = CString::new(\"%d inputs and %d outputs\\n\").unwrap();\n    unsafe {\n        mex_sys::mexPrintf(inout.as_ptr(), nrhs, nlhs);\n    }\n\n    mexPrintf(\"hello world wrapped\\n\", std::ptr::null_mut());\n\n    let n = Box::new(nrhs);\n    let p = Box::into_raw(n);\n    mexPrintf(\"inputs %d\\n\", p as VarArgs);\n\n    let mut v = vec![3];\n    mexPrintf(\"vec %d\\n\", v.as_mut_ptr() as VarArgs);\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1478324968, "post_id": 40426877, "comment_id": 68118215, "body": "Just a note: this doesn&#39;t work on Windows prior to the Anniversary Update (I believe).  If you care about cross-platform support, use something else."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 7, "last_activity_date": 1478274676, "creation_date": 1478274676, "answer_id": 40426877, "question_id": 40426307, "link": "https://stackoverflow.com/questions/40426307/change-terminal-cursor-position-in-rust/40426877#40426877", "title": "Change terminal cursor position in Rust", "body": "<p>For terminal control I would recommend using a crate such as <a href=\"https://crates.io/crates/termion\" rel=\"noreferrer\">Termion</a>.  With Termion it looks something like:</p>\n\n<pre><code>fn main() {\n    let mut stdout = stdout().into_raw_mode().unwrap();\n\n    writeln!(stdout, \"{}Placed at 3,7\",\n       termion::cursor::Goto(3, 7));\n}\n</code></pre>\n\n<p>See the <a href=\"https://github.com/Ticki/termion/tree/master/examples\" rel=\"noreferrer\">examples</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 37324, "user_id": 513198, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/edf7f2190e60b6470bb6e4aab30152e7?s=128&d=identicon&r=PG", "display_name": "Xavier T.", "link": "https://stackoverflow.com/users/513198/xavier-t"}, "is_accepted": false, "score": 4, "last_activity_date": 1478288368, "creation_date": 1478288368, "answer_id": 40430593, "question_id": 40426307, "link": "https://stackoverflow.com/questions/40426307/change-terminal-cursor-position-in-rust/40430593#40430593", "title": "Change terminal cursor position in Rust", "body": "<p>You could also use <a href=\"https://github.com/jeaye/ncurses-rs\" rel=\"nofollow noreferrer\" title=\"ncurses-rs\">ncurses-rs</a>, which is a thin wrapper around the ncurse library, or <a href=\"https://github.com/gyscos/Cursive\" rel=\"nofollow noreferrer\">Cursive</a>, which is a bit higher level and allow you to create various widgets in the Terminal.</p>\n"}, {"tags": [], "owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "is_accepted": false, "score": 0, "last_activity_date": 1564767637, "last_edit_date": 1564767637, "creation_date": 1547832690, "answer_id": 54258843, "question_id": 40426307, "link": "https://stackoverflow.com/questions/40426307/change-terminal-cursor-position-in-rust/54258843#54258843", "title": "Change terminal cursor position in Rust", "body": "<p>You could use <a href=\"https://crates.io/crates/crossterm_cursor\" rel=\"nofollow noreferrer\">crossterm_cursor</a> for this, it provides you a way to deal with cursor movement and a lot of other cross-platform stuff. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use crossterm::cursor;\n\nlet mut cursor = cursor();\n\n/// Moving the cursor\n// Set the cursor to position X: 10, Y: 5 in the terminal\ncursor.goto(10,5);\n\n// Move the cursor up,right,down,left 3 cells.\ncursor.move_up(3);\ncursor.move_right(3);\ncursor.move_down(3);\ncursor.move_left(3);\n\n/// Safe the current cursor position to recall later\n// Goto X: 5 Y: 5\ncursor.goto(5,5);\n// Safe cursor position: X: 5 Y: 5\ncursor.save_position();\n// Goto X: 5 Y: 20\ncursor.goto(5,20);\n// Print at X: 5 Y: 20.\nprint!(\"Yea!\");\n// Reset back to X: 5 Y: 5.\ncursor.reset_position();\n// Print 'Back' at X: 5 Y: 5.\nprint!(\"Back\");\n\n// hide cursor\ncursor.hide();\n// show cursor\ncursor.show();\n// blink or not blinking of the cursor (not widely supported)\ncursor.blink(true)\n</code></pre>\n\n<p>You might as well use <a href=\"https://github.com/TimonPost/crossterm\" rel=\"nofollow noreferrer\">crossterm</a> to do this, but that will include non-cursor related functionalities as well. An other possibility is, to use the command <a href=\"https://timonpost.github.io/crossterm/docs//command.html\" rel=\"nofollow noreferrer\">api</a>. Please check out the <a href=\"https://github.com/TimonPost/crossterm/tree/master/examples\" rel=\"nofollow noreferrer\">examples</a> for more information about the cursor functionalities. </p>\n"}], "owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2673, "favorite_count": 0, "accepted_answer_id": 40426877, "answer_count": 3, "score": 4, "last_activity_date": 1564767637, "creation_date": 1478273099, "last_edit_date": 1478355221, "question_id": 40426307, "link": "https://stackoverflow.com/questions/40426307/change-terminal-cursor-position-in-rust", "title": "Change terminal cursor position in Rust", "body": "<p>In order to write a game, I need to write some characters at different positions in the terminal. I used </p>\n\n<pre><code>println!(\"{c:&gt;width$}\", c=\"*\", width=x);\n</code></pre>\n\n<p>It's almost OK with the <code>x</code> position, but I want to change the <code>y</code> position, when I press <kbd>space</kbd>. Is there any way to do it?</p>\n"}, {"tags": ["linux", "macos", "rust", "cross-compiling", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478404660, "post_id": 40424255, "comment_id": 68138107, "body": "FWIW, it&#39;s usually easier to <a href=\"https://github.com/japaric/rust-cross#i-want-to-build-binaries-for-linux-mac-and-windows-how-do-i-cross-compile-from-linux-to-mac\" rel=\"nofollow noreferrer\">just build a native Linux version</a>, avoiding cross-compilation."}, {"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478508331, "post_id": 40424255, "comment_id": 68166886, "body": "That&#39;s what I done."}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 925, "favorite_count": 1, "answer_count": 0, "score": 10, "last_activity_date": 1478358215, "creation_date": 1478267063, "last_edit_date": 1478358215, "question_id": 40424255, "link": "https://stackoverflow.com/questions/40424255/cross-compilation-to-x86-64-unknown-linux-gnu-fails-on-mac-osx", "title": "Cross-compilation to x86_64-unknown-linux-gnu fails on Mac OSX", "body": "<p>I tried to compile one of my Rust projects to the x86_64-unknown-linux-gnu target:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo build --target=x86_64-unknown-linux-gnu\n Compiling deployer v0.1.0 (file:///Users/raphael/web/deployer)\n  error: linking with `cc` failed: exit code: 1\n  |\n  = note: \"cc\"\n  = note: clang: warning: argument unused during compilation: '-pie'\nld: unknown option: --as-needed\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre>\n\n<p>I don't know what to do with such a message. What should I do to make it work?</p>\n\n<p>Here is my <code>Cargo.toml</code> file:</p>\n\n<pre><code>[package]\nname = \"deployer\"\nversion = \"0.1.0\"\nauthors = [\"...\"]\n\n[dependencies]\nclap = \"2.14.0\"\ntime = \"0.1.35\"\nslack-hook = \"0.2\"\n</code></pre>\n\n<p>Cargo version:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo 0.13.0-nightly (109cb7c 2016-08-19)\n</code></pre>\n\n<p>Rust version:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.12.0 (3191fbae9 2016-09-23)\n</code></pre>\n\n<p>I tried to update everything with rustup, but I still get the same problem.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1478259505, "post_id": 40421451, "comment_id": 68091833, "body": "That is not exactly the issue here. The fact that the range <code>0..256</code> was inferred to have elements of the same type as <code>a</code> was what brought the compilation warning in the first place."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1478259616, "post_id": 40421451, "comment_id": 68091903, "body": "@E_net4 Actually, it works (I tested at least my casting version). Apparently an <code>as</code>-cast is not a valid hint for the compiler to infer the type. So in this example, it&#39;s probably a <code>Range&lt;i32&gt;</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1478259823, "post_id": 40421451, "comment_id": 68092016, "body": "@LukasKalbertodt I didn&#39;t say that this solution doesn&#39;t work. The problem is in the exposed reason, which is... well, prone to ambiguities."}, {"owner": {"reputation": 453, "user_id": 847309, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/92fd71697845aa374da6a0566010077d?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/847309/alex"}, "edited": false, "score": 0, "creation_date": 1478267488, "post_id": 40421451, "comment_id": 68096884, "body": "so using <code>as</code> is not appropriate in this case? Lucas you say it is not a valid hint for compiler can you explain why?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1478286440, "post_id": 40421451, "comment_id": 68108639, "body": "@alex What actually happens is that <code>num as u8</code> tells the compiler that a cast from the range&#39;s element type to <code>u8</code> is needed, and &quot;cuts&quot; the type inference that would have occurred without it. Instead of assuming that <code>num</code> has the same type of <code>a</code>, and so inferring the range to a <code>Range&lt;u8&gt;</code>, it just &quot;falls back&quot; to <code>Range&lt;i32&gt;</code>."}], "tags": [], "owner": {"reputation": 453, "user_id": 847309, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/92fd71697845aa374da6a0566010077d?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/847309/alex"}, "is_accepted": false, "score": 0, "last_activity_date": 1478259228, "last_edit_date": 1478259228, "creation_date": 1478258696, "answer_id": 40421451, "question_id": 40421277, "link": "https://stackoverflow.com/questions/40421277/literal-out-of-range-warning-when-iterating-over-all-values-of-u8/40421451#40421451", "title": "Literal out of range warning when iterating over all values of u8", "body": "<p>I think you are comparing different types so need to cast. Try this:</p>\n\n<pre><code>for num in 0..256 {\n    let y = num as u8;\n    if y == a {\n        println!(\"found\");\n        break;\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 111, "user_id": 6940553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc5bc23aacbf15cbb492bf854c4fbdab?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/6940553/steve"}, "edited": false, "score": 0, "creation_date": 1478260555, "post_id": 40421720, "comment_id": 68092420, "body": "The half-open range is what I need. But without the break, it creates an infinite loop, so one needs to be careful. The half-open range is missing in Rust documentation?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 111, "user_id": 6940553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc5bc23aacbf15cbb492bf854c4fbdab?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/6940553/steve"}, "edited": false, "score": 0, "creation_date": 1478262433, "post_id": 40421720, "comment_id": 68093580, "body": "@Steve: It is called <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\"><code>RangeFrom</code></a>. There&#39;s also <code>RangeTo</code> and <code>RangeFull</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478262466, "post_id": 40421720, "comment_id": 68093605, "body": "The idea of using a half-open range is quite interesting, I wonder if it obviates part of the need for an inclusive range."}, {"owner": {"reputation": 111, "user_id": 6940553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc5bc23aacbf15cbb492bf854c4fbdab?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/6940553/steve"}, "edited": false, "score": 0, "creation_date": 1478262770, "post_id": 40421720, "comment_id": 68093822, "body": "Still I think there should be a way in the language to express the full u8 range without the use of typecast."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 111, "user_id": 6940553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc5bc23aacbf15cbb492bf854c4fbdab?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/6940553/steve"}, "edited": false, "score": 0, "creation_date": 1478262925, "post_id": 40421720, "comment_id": 68093916, "body": "@Steve I think many agree. But this is a huge debate in the community already, usually about syntax. Better not start a new discussion here in the comments :P"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1478262496, "last_edit_date": 1478262496, "creation_date": 1478259492, "answer_id": 40421720, "question_id": 40421277, "link": "https://stackoverflow.com/questions/40421277/literal-out-of-range-warning-when-iterating-over-all-values-of-u8/40421720#40421720", "title": "Literal out of range warning when iterating over all values of u8", "body": "<p>As alex already said, it's probably the best to iterate using bigger integer types (like <code>u32</code>) and cast it when comparing to the <code>u8</code> you're searching for:</p>\n\n<pre><code>let a: u8 = 4;\n\nfor num in 0..256 {\n    if (num as u8) == a {\n        println!(\"match found\");\n        break;\n    }\n}\n</code></pre>\n\n<p>In this special case you can use <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\">a half-open range</a>, too:</p>\n\n<pre><code>let a: u8 = 4;\n\nfor num in 0.. {\n    if num == a {\n        println!(\"match found\");\n        break;\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>Also when I execute this, the program skips the for loop.</p>\n</blockquote>\n\n<p>The binary representation of 256 is <code>1_0000_0000</code>. <code>u8</code> only saves the 8 rightmost bits, so just <code>0</code>s. Thus <code>0..256u8</code> is equivalent to <code>0..0</code>, which of course is an empty range.</p>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 4, "last_activity_date": 1478263037, "creation_date": 1478263037, "answer_id": 40422868, "question_id": 40421277, "link": "https://stackoverflow.com/questions/40421277/literal-out-of-range-warning-when-iterating-over-all-values-of-u8/40422868#40422868", "title": "Literal out of range warning when iterating over all values of u8", "body": "<p>You can combine iterators to create full <code>u8</code> range:</p>\n\n<pre><code>use std::iter::once;\nfor i in (0..255).chain(once(255)){\n    //...\n}\n</code></pre>\n\n<p>In nightly Rust you can use <a href=\"https://doc.rust-lang.org/std/ops/enum.RangeInclusive.html\" rel=\"nofollow noreferrer\">inclusive range</a>:</p>\n\n<pre><code>#![feature(inclusive_range_syntax)]\nfor i in 0...255 {\n    //...\n}\n</code></pre>\n"}], "owner": {"reputation": 111, "user_id": 6940553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dc5bc23aacbf15cbb492bf854c4fbdab?s=128&d=identicon&r=PG&f=1", "display_name": "Steve", "link": "https://stackoverflow.com/users/6940553/steve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 787, "favorite_count": 0, "closed_date": 1518992409, "accepted_answer_id": 40421720, "answer_count": 3, "score": 4, "last_activity_date": 1518992291, "creation_date": 1478258127, "last_edit_date": 1518992291, "question_id": 40421277, "link": "https://stackoverflow.com/questions/40421277/literal-out-of-range-warning-when-iterating-over-all-values-of-u8", "closed_reason": "Duplicate", "title": "Literal out of range warning when iterating over all values of u8", "body": "<p>The range in a <code>for</code>-loop, as I understand, is lower-limit inclusive and upper-limit exclusive. This is introducing an issue in the following code:</p>\n\n<pre><code>fn main() {\n    let a: u8 = 4;\n\n    for num in 0..256 {\n        if num == a {\n            println!(\"match found\");\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>I want to loop 256 times from 0 to 255, and this fits into the range of data supported by <code>u8</code>. But since the range is upper limit exclusive, I have to give 256 as the limit to process 255.  Due to this, the compiler gives the following warning.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: literal out of range for u8\n --&gt; src/main.rs:4:19\n  |\n4 |     for num in 0..256 {\n  |                   ^^^\n  |\n  = note: #[warn(overflowing_literals)] on by default\n</code></pre>\n\n<p>When I execute this, the program skips the <code>for</code> loop.</p>\n\n<p>In my opinion, the compiler has to ignore 256 in the range and accept the range as <code>u8</code> range.  Is it correct?  Is there any other way to give the range?</p>\n"}, {"tags": ["arrays", "rust", "inference"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 5, "creation_date": 1478257085, "post_id": 40420608, "comment_id": 68090422, "body": "Well, you may wish to read the documentation on <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>collect()</code></a>. Once you understand why the closure&#39;s return type cannot be inferred, you are still left with being unable to collect into a sized array. Can you rephrase the question accordingly afterwards?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478356023, "post_id": 40420608, "comment_id": 68125699, "body": "As a performance aside, you probably want to grab a <code>Rng</code> and reuse it, instead of grabbing the thread-local RNG over and over."}], "answers": [{"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": true, "score": 12, "last_activity_date": 1478381731, "last_edit_date": 1478381731, "creation_date": 1478359705, "answer_id": 40439932, "question_id": 40420608, "link": "https://stackoverflow.com/questions/40420608/cannot-infer-type-for-when-using-map-on-iter-in-rust/40439932#40439932", "title": "&quot;cannot infer type for `_`&quot; when using map on iter in Rust", "body": "<p>Since the type <code>[T; 10]</code> implements <code>Rand</code> where <code>T: Rand</code>, you can use <code>rand::random()</code> directly:</p>\n\n<pre><code>extern crate rand;\n\nfn main() {\n    let grid: [[bool; 10]; 10] = rand::random();\n    println!(\"{:#?}\", grid);\n}\n</code></pre>\n\n<hr>\n\n<p>As for why type inference is failing in your example - here's something slightly simpler that illustrates the problem:</p>\n\n<pre><code>fn main() {\n    let mut arr = [false; 10];\n    let mapped = arr.iter_mut().map(|_| rand::random()).collect();\n    println!(\"{:?}\", arr);\n    println!(\"{:?}\", mapped);\n}\n</code></pre>\n\n<p>Gives the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: unable to infer enough type information about `_`\n --&gt; src/main.rs:5:13\n  |\n5 |         let mapped = arr.iter_mut().map(|_| rand::random()).collect();\n  |             ^^^^^^ cannot infer type for `_`\n  |\n  = note: type annotations or generic parameter binding required\n</code></pre>\n\n<p>So we can specify the type:</p>\n\n<pre><code>fn main() {\n    let mut arr = [false; 10];\n    let mapped = arr.iter_mut().map(|_| rand::random()).collect::&lt;[bool; 10]&gt;();\n    println!(\"{:?}\", arr);\n    println!(\"{:?}\", mapped);\n}\n</code></pre>\n\n<p>Note the use of the <em>\"turbofish\"</em> operator <code>::&lt;&gt;</code> after collect to specify the type to collect into, in this case <code>::&lt;[bool; 10]&gt;</code>. Unfortunately here the compiler will complain:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `[_; 10]: std::iter::FromIterator&lt;bool&gt;` is not satisfied\n</code></pre>\n\n<p>So what is <code>std::iter::FromIterator&lt;bool&gt;</code>? Well, consider the <code>collect</code> function's definition:</p>\n\n<pre><code>fn collect&lt;B&gt;(self) -&gt; B\n    where B: FromIterator&lt;Self::Item&gt;\n</code></pre>\n\n<p>This means whatever type you are collecting into needs to implement <code>FromIterator&lt;Self::Item&gt;</code>. Arrays do not, unfortunately, implement <code>FromIterator</code> - but there are many possible types that do, for instance <code>Vec</code>, <code>VecDeque</code>, <code>HashSet</code>, <code>BTreeSet</code> and so on. So we can modify the example:</p>\n\n<pre><code>fn main() {\n    let mut arr = [false; 10];\n    let mapped = arr.iter_mut().map(|_| rand::random()).collect::&lt;Vec&lt;bool&gt;&gt;();\n    println!(\"{:?}\", arr);\n    println!(\"{:?}\", mapped);\n}\n</code></pre>\n\n<p>However, this might not give you the result you were hoping for:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[false, false, false, false, false, false, false, false, false, false]\n[true, false, false, true, true, false, true, false, true, true]\n</code></pre>\n\n<p>So what gives? Why wasn't the <code>arr</code> mutated even though it was declared mutable, and we used <code>iter_mut</code>? The reason is that <code>map</code> produces a <em>new</em> object from the existing one - it doesn't map \"in-place\". If you really wanted to map in-place, you <em>could</em> use the following:</p>\n\n<pre><code>fn main() {\n    let mut arr = [false; 10];\n    let mapped = arr.iter_mut().map(|b| *b = rand::random()).collect::&lt;Vec&lt;()&gt;&gt;();\n    println!(\"{:?}\", arr);\n    println!(\"{:?}\", mapped);\n}\n</code></pre>\n\n<p>Yielding</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[true, false, true, true, true, false, false, false, true, true]\n[(), (), (), (), (), (), (), (), (), ()]\n</code></pre>\n\n<p>However, this use of iterators is considered unidiomatic (not to mention confusing) - the idiomatic way would be to use a <code>for</code> loop:</p>\n\n<pre><code>fn main() {\n    let mut arr = [false; 10];\n    for b in &amp;mut arr {\n        *b = rand::random();\n    }\n    println!(\"{:?}\", arr);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>[false, true, true, true, false, false, true, false, true, false]\n</code></pre>\n\n<p>Much better. Of course in this particular case, my first example is probably the way to go.</p>\n"}], "owner": {"reputation": 938, "user_id": 1032905, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/8667c63c7cad748aa08f8ebc20f6d202?s=128&d=identicon&r=PG", "display_name": "dave", "link": "https://stackoverflow.com/users/1032905/dave"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8389, "favorite_count": 1, "accepted_answer_id": 40439932, "answer_count": 1, "score": 11, "last_activity_date": 1478381731, "creation_date": 1478256121, "last_edit_date": 1478358141, "question_id": 40420608, "link": "https://stackoverflow.com/questions/40420608/cannot-infer-type-for-when-using-map-on-iter-in-rust", "title": "&quot;cannot infer type for `_`&quot; when using map on iter in Rust", "body": "<p>I'm having an issue where I'm trying to initialise a 2D array of booleans with random true/false values but the compiler doesn't seem to be able to infer the types I need; I am just wondering what I need to specify for the inference engine to be able to resolve this. </p>\n\n<pre><code>extern crate rand;\n\nfn main() {\n    let mut grid = [[false; 10]; 10];\n    grid.iter_mut().map(|row| { [false; 10].iter().map(|_| { rand::random() }).collect() });\n}\n</code></pre>\n\n<p>Playground <a href=\"https://play.rust-lang.org/?gist=f63190bffe1354dd769f518a6654b883&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">link</a> (without <code>rand::random()</code>)</p>\n\n<p>The error I'm getting is</p>\n\n<pre><code>   | grid.iter_mut().map(|row| { [false; 10].iter().map(|_| { rand::random() }).collect() });\n   |                 ^^^ cannot infer type for `_`\n</code></pre>\n"}, {"tags": ["rust", "mutable"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1478259103, "creation_date": 1478259103, "answer_id": 40421590, "question_id": 40419691, "link": "https://stackoverflow.com/questions/40419691/how-to-have-a-struct-field-with-the-same-mutability-as-the-parent-struct/40421590#40421590", "title": "How to have a struct field with the same mutability as the parent struct?", "body": "<p>As well said in the question, this code compiles:</p>\n\n<pre><code>struct Test&lt;'a, A: 'a&gt; {\n  inner: &amp;'a mut A,\n}\n\nfn main() {\n    let t = Test { inner: &amp;mut 5i32 };\n\n    *t.inner = 9;\n}\n</code></pre>\n\n<p>It is indeed possible to mutate a borrowed element, even when the borrowing content is immutable. This is a case where you must choose your guarantees, while keeping in mind that the mutability of a binding is always independent of the borrowed content's mutability.</p>\n\n<p>Right now, I can think of two possible solutions: you can encapsulate the borrowed content over methods that depend on <code>self</code>'s mutability (<a href=\"https://play.rust-lang.org/?gist=0d380e53a068560fe606d219ec22ed94&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>, will no longer compile):</p>\n\n<pre><code>impl&lt;'a, A: 'a&gt; Test&lt;'a, A&gt; {\n    fn inner(&amp;self) -&gt; &amp;A {\n        self.inner\n    }\n\n    fn inner_mut(&amp;mut self) -&gt; &amp;mut A {\n        self.inner\n    }\n}\n</code></pre>\n\n<p>Although you still need to keep a borrow to mutable content, it can no longer be mutated from an immutable binding of <code>Test</code>. If you also need it to point to immutable content, you should consider having two different structs (<a href=\"https://play.rust-lang.org/?gist=22bca09430bc402d047f4373669ec8a5&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>struct Test&lt;'a, A: 'a&gt; {\n    inner: &amp;'a A,\n}\n\nimpl&lt;'a, A: 'a&gt; Test&lt;'a, A&gt; {\n    fn inner(&amp;self) -&gt; &amp;A {\n        self.inner\n    }\n}\n\nstruct TestMut&lt;'a, A: 'a&gt; {\n    inner: &amp;'a mut A,\n}\n\nimpl&lt;'a, A: 'a&gt; TestMut&lt;'a, A&gt; {\n    fn inner(&amp;self) -&gt; &amp;A {\n        self.inner\n    }\n\n    fn inner_mut(&amp;mut self) -&gt; &amp;mut A {\n        self.inner\n    }\n}\n</code></pre>\n\n<p>There is a third option: to keep both kinds of borrows exclusively with an enum. At this point however, using the borrowed content as mutable requires run-time checks.</p>\n"}], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 939, "favorite_count": 0, "accepted_answer_id": 40421590, "answer_count": 1, "score": 1, "last_activity_date": 1478259103, "creation_date": 1478253374, "question_id": 40419691, "link": "https://stackoverflow.com/questions/40419691/how-to-have-a-struct-field-with-the-same-mutability-as-the-parent-struct", "title": "How to have a struct field with the same mutability as the parent struct?", "body": "<p>I'm trying to wrap a slice in a struct so that I will be able to instantiate the struct mutably or immutably. Here's a minimal example:</p>\n\n<pre><code>use std::ops::{ Index, IndexMut };\n\nstruct Test&lt;'a, T: 'a&gt; {\n    inner: &amp;'a[T]\n}\n\nimpl&lt;'a, T: 'a&gt; Test&lt;'a, T&gt; {\n    fn new (inner: &amp;'a[T]) -&gt; Self { Test { inner: inner } }\n}\n\nimpl&lt;'a, T&gt; Index&lt;usize&gt; for Test&lt;'a, T&gt; {\n    type Output = T;\n    fn index (&amp;self, i: usize) -&gt; &amp;T { &amp;self.inner[i] }\n}\n\nimpl&lt;'a, T&gt; IndexMut&lt;usize&gt; for Test&lt;'a, T&gt; {\n   fn index_mut (&amp;mut self, i: usize) -&gt; &amp;mut T { &amp;mut self.inner[i] }\n}\n\nfn main() {\n    let store = [0; 3];\n    let test = Test::new (&amp;store);\n    println!(\"{}\", test[1]);\n\n    let mut mut_store = [0; 3];\n    let mut mut_test = Test::new (&amp;mut mut_store);\n    mut_test[1] = 42;\n    println!(\"{}\", mut_test[1]);\n}\n</code></pre>\n\n<p>This doesn't compile: \"cannot borrow immutable indexed content <code>self.inner[..]</code> as mutable\".</p>\n\n<p>I could get it to compile by changing the definition of <code>inner</code> to be of type <code>&amp;'a mut[T]</code>, but then <code>inner</code> is mutable even when I don't need it to be (in the above example, I must then declare <code>store</code> as mutable too even though <code>test</code> is immutable).</p>\n\n<p>Is there a way to make it so that the mutability of <code>inner</code> follows the mutability of the <code>Test</code> instance?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1478222123, "last_edit_date": 1495541628, "creation_date": 1478222123, "answer_id": 40413840, "question_id": 40413711, "link": "https://stackoverflow.com/questions/40413711/generic-type-mismatch-using-trait-in-rust/40413840#40413840", "title": "Generic Type Mismatch using Trait in Rust", "body": "<p>This is the <strong>entire</strong> knowledge of your types that the code can rely on inside of the method:</p>\n\n<pre><code>impl&lt;T: ops::Add&lt;Output = T&gt; + Copy&gt; ops::Add for Matrix&lt;T&gt; {\n    type Output = Self;\n    fn add(self, rhs: Self) -&gt; Self::Output {\n        // ...\n    }\n}\n</code></pre>\n\n<p>Based on that, how would it be possible to make this assumption?</p>\n\n<blockquote>\n  <p><code>num1</code> would deref the vector and <strong>get a integer type</strong></p>\n</blockquote>\n\n<p>There is <em>no way</em> to know what concrete type <code>T</code> will be!</p>\n\n<p>Beyond that, even if it were <em>some</em> integer type, how would it be possible to assume that summing into an <code>i32</code> is acceptable? What if <code>T</code> were a <code>i64</code>?</p>\n\n<p>The solution is to remove any assumptions and let the compiler do its job. Remove the type annotation from <code>sum</code> and the code compiles. I find it good practice to <em>always</em> allow the compiler to infer my types when possible.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29184358/155423\">Requiring implementation of Mul in generic function</a></li>\n<li><a href=\"https://stackoverflow.com/q/32551177/155423\">&quot;Expected type parameter&quot; error in the constructor of a generic struct</a></li>\n</ul>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 626, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1478222169, "creation_date": 1478221072, "last_edit_date": 1478222169, "question_id": 40413711, "link": "https://stackoverflow.com/questions/40413711/generic-type-mismatch-using-trait-in-rust", "title": "Generic Type Mismatch using Trait in Rust", "body": "<p>I am doing a matrix addition using traits. I am stuck by the generic type mismatch. My code is as following:</p>\n\n<pre><code>use std::{ops, fmt};\n\n#[derive(PartialEq, Debug)]\npub struct Matrix&lt;T&gt; {\n    data: Vec&lt;T&gt;,\n    row: usize,\n    col: usize,\n}\n\nimpl&lt;T: Copy&gt; Matrix&lt;T&gt; {\n    /// Creates a new matrix of `row` rows and `col` columns, and initializes\n    /// the matrix with the elements in `values` in row-major order.\n    pub fn new(row: usize, col: usize, values: &amp;[T]) -&gt; Matrix&lt;T&gt; {\n        Matrix {\n            data: values.to_vec(), // make copy and convert &amp;[T] to vector type\n            row: row,\n            col: col,\n        }\n    }\n}\n\nimpl&lt;T: ops::Add&lt;Output = T&gt; + Copy&gt; ops::Add for Matrix&lt;T&gt; {\n    type Output = Self;\n\n    /// Returns the sum of `self` and `rhs`. If `self.row != rhs.row || self.col != rhs.col`, panic.\n    fn add(self, rhs: Self) -&gt; Self::Output {\n\n        assert!(self.col == rhs.col);\n        assert!(self.row == rhs.row);\n\n        let mut newdata = Vec::new(); // make a new vector to store result\n        let mut sum: i32; // temp variable to record each addition\n\n        for num1 in self.data.iter() {\n            for num2 in rhs.data.iter() {\n                sum = *num1 + *num2;\n                newdata.push(sum)\n            }\n        }\n\n        Matrix {\n            data: newdata, // finally, return addition result using new_data\n            row: self.row,\n            col: self.col,\n        }\n    }\n}\n\nfn main() {\n    let x = Matrix::new(2, 3, &amp;[-6, -5, 0, 1, 2, 3]);\n    let y = Matrix::new(2, 3, &amp;[0, 1, 0, 0, 0, 0]);\n    // z = x + y;\n}\n</code></pre>\n\n<p>Compiling the program, I got two errors about type mismatch: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:36:23\n   |\n36 |                 sum = *num1 + *num2;\n   |                       ^^^^^^^^^^^^^ expected i32, found type parameter\n   |\n   = note: expected type `i32`\n   = note:    found type `T`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:41:9\n   |\n41 |         Matrix {\n   |         ^ expected type parameter, found i32\n   |\n   = note: expected type `Matrix&lt;T&gt;`\n   = note:    found type `Matrix&lt;i32&gt;`\n</code></pre>\n\n<p>My thoughts: </p>\n\n<ol>\n<li><code>num1</code> would deref the vector and get a integer type, that's why I use a sum to record the result.</li>\n<li>I am trying to return a <code>Matrix</code> type value at the end of the function. </li>\n</ol>\n\n<p>What is going wrong? </p>\n"}, {"tags": ["rust", "language-design"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 6, "creation_date": 1478220480, "post_id": 40413615, "comment_id": 68077064, "body": "Why not just make it <code>val: i32</code> then?"}, {"owner": {"reputation": 415, "user_id": 6094906, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e585526af864f66039864bfc16e2a08d?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Flow", "link": "https://stackoverflow.com/users/6094906/jon-flow"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 1, "creation_date": 1478220800, "post_id": 40413615, "comment_id": 68077132, "body": "I&#39;m asking why the language doesn&#39;t allow primitive type restrictions for generic parameters. The code example is obviously quite silly, it&#39;s to demonstrate a point."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1478220977, "post_id": 40413615, "comment_id": 68077175, "body": "There&#39;s nothing special about a &quot;primitive&quot; (which doesn&#39;t really exist in Rust), you also can&#39;t say <code>&lt;T: HashMap&gt;</code>. The whole point is that a generic allows more than one type. There is already a syntax to specify that a parameter is a specific type: <code>fn foo(name: SpecificType)</code>."}, {"owner": {"reputation": 415, "user_id": 6094906, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e585526af864f66039864bfc16e2a08d?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Flow", "link": "https://stackoverflow.com/users/6094906/jon-flow"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478221072, "post_id": 40413615, "comment_id": 68077197, "body": "@Shepmaster But I could specify more than one type by doing <code>T: i32 + f32 + f64</code> for example, but instead I&#39;d have to make a trait and implement that for each of the primitive types."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 4, "creation_date": 1478221198, "post_id": 40413615, "comment_id": 68077219, "body": "Generic type constraints relate to the contract a type exposes.. not what a type is. That is, they say &quot;This is what the generic type is <i>allowed to do</i>&quot; .. not &quot;this is what the generic type <i>can be</i>&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478221206, "post_id": 40413615, "comment_id": 68077221, "body": "To solve the problem that I expect you are actually having, you probably want to use <a href=\"http://rust-num.github.io/num/num/index.html#traits\" rel=\"nofollow noreferrer\">one of the traits from the num crate</a>."}, {"owner": {"reputation": 415, "user_id": 6094906, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e585526af864f66039864bfc16e2a08d?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Flow", "link": "https://stackoverflow.com/users/6094906/jon-flow"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478221234, "post_id": 40413615, "comment_id": 68077227, "body": "@Shepmaster It&#39;s not a problem I&#39;m having. I just wanted to learn more about why the designers of the language made this particular choice."}, {"owner": {"reputation": 415, "user_id": 6094906, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e585526af864f66039864bfc16e2a08d?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Flow", "link": "https://stackoverflow.com/users/6094906/jon-flow"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1478221302, "post_id": 40413615, "comment_id": 68077246, "body": "@SimonWhitehead That makes sense! Thank you :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478221347, "post_id": 40413615, "comment_id": 68077260, "body": "<i>But I could specify more than one type by doing</i> \u2014 doubtful. Choosing just <a href=\"https://doc.rust-lang.org/std/primitive.i32.html\" rel=\"nofollow noreferrer\"><code>i32</code></a> and <a href=\"https://doc.rust-lang.org/std/primitive.f64.html\" rel=\"nofollow noreferrer\"><code>f64</code></a>, you&#39;ll note that there are only a subset of methods in common. What would you want to do for the ones that don&#39;t match? What about methods with the <b>same signature</b> but which behave differently?"}], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1478360808, "post_id": 40419195, "comment_id": 68127114, "body": "Another note: If you (the OP, or a future reader) just need a generic over any numeric type, use the <code>Num</code> trait from the <code>num</code> crate."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1478354738, "last_edit_date": 1478354738, "creation_date": 1478251839, "answer_id": 40419195, "question_id": 40413615, "link": "https://stackoverflow.com/questions/40413615/why-can-you-only-specify-type-restrictions-with-traits/40419195#40419195", "title": "Why can you only specify type restrictions with traits?", "body": "<p>Because specifying type restrictions with types does not make sense.</p>\n\n<hr>\n\n<p>The very reason for using generic programming is to allow <em>multiple</em> concrete types. This is why you express <em>bounds</em>, and any type that satisfy those bounds can be used.</p>\n\n<p>If you wish to use a concrete type, you certainly can... but not with a generic function; you just use a regular function.</p>\n\n<hr>\n\n<p>Note that bounds are <em>additives</em>, that is, when specifying <code>T: X + Y</code> you are not saying that any type implementing EITHER X OR Y is expected, but that you want a type that implements BOTH X AND Y. The <code>+</code> here is an <em>intersection</em>.</p>\n\n<p>As a result:</p>\n\n<ul>\n<li><code>T: i32</code> is useless, just specify <code>i32</code> as the type</li>\n<li><code>T: i32 + f32</code> is non-sensical, no type is BOTH a <code>i32</code> and a <code>f32</code> at the same type</li>\n</ul>\n\n<hr>\n\n<p>So... how do you specify the OR relationship? By using a trait!</p>\n\n<pre><code>trait MyTrait: std::fmt::Display {}\n\nimpl MyTrait for i32 {}\nimpl MyTrait for f32 {}\n\nfn hello&lt;T: MyTrait&gt;(t: &amp;T) {\n    println!(\"{:?}\", t);\n}\n</code></pre>\n\n<p><em>Note: other people may implement your trait for their own types if it is public.</em></p>\n"}], "owner": {"reputation": 415, "user_id": 6094906, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e585526af864f66039864bfc16e2a08d?s=128&d=identicon&r=PG&f=1", "display_name": "Jon Flow", "link": "https://stackoverflow.com/users/6094906/jon-flow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 764, "favorite_count": 0, "accepted_answer_id": 40419195, "answer_count": 1, "score": 0, "last_activity_date": 1478354738, "creation_date": 1478220346, "last_edit_date": 1478220802, "question_id": 40413615, "link": "https://stackoverflow.com/questions/40413615/why-can-you-only-specify-type-restrictions-with-traits", "title": "Why can you only specify type restrictions with traits?", "body": "<p>In Rust you can only use traits to specify type restrictions, for example: <code>&lt;T: A + B&gt;</code>, A and B must be traits, they cannot be primitive types like <code>i32</code> or <code>f64</code>.</p>\n\n<pre><code>trait Foo {}\n\nimpl Foo for i32 {}\n\nfn blah&lt;T: i32&gt;(val: T) {\n    //     ^^^ works if this is Foo\n    println!(\"hello\\n\");\n}\n\nfn main() {\n    let toast: i32 = 33;\n    blah(toast);\n}\n</code></pre>\n\n<p>You can get around this by implementing a trait <em>for</em> a primitive, but why would the designers of the language not let you use primitives as a restriction?</p>\n"}, {"tags": ["string", "char", "rust", "optional"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1478215303, "post_id": 40412647, "comment_id": 68075771, "body": "I&#39;d say an <code>if let</code> is better when there&#39;s a <code>match</code> with a single interesting arm."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478215571, "post_id": 40412647, "comment_id": 68075849, "body": "Good point @Shepmaster - I tried not to introduce too many concepts given the question that was asked. I will add it as another option though."}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 11, "last_activity_date": 1478215645, "last_edit_date": 1478215645, "creation_date": 1478214015, "answer_id": 40412647, "question_id": 40412547, "link": "https://stackoverflow.com/questions/40412547/how-would-i-append-an-optionchar-to-a-string/40412647#40412647", "title": "How would I append an Option&lt;char&gt; to a string?", "body": "<p>Well, thats the thing: because <code>next()</code> returns an <code>Option&lt;char&gt;</code>, its possible that it returns <code>None</code>. You need to account for that scenario... otherwise you'll likely cause a panic and your application will exit.</p>\n\n<p>So, the blind and error-prone way is to unwrap it:</p>\n\n<pre><code>keyword.push(line.chars().next().unwrap());\n</code></pre>\n\n<p>That will likely crash at some point. What you want is to destructure it and make sure there's something there:</p>\n\n<pre><code>match line.chars().next() {\n    Some(c) =&gt; {\n        if c == 'H' || c == 'W' {\n             keyword.push(c);\n        }\n    },\n    None =&gt; ()\n}\n</code></pre>\n\n<p>As Shepmaster points out in the comments, the particular scenario above (where we only care about a single arm of the <code>match</code>) can be condensed to an <code>if let</code> binding:</p>\n\n<pre><code>if let Some(c) = line.chars().next() {\n    if c == 'H' || c == 'W' {\n       keyword.push(c);\n    }\n}\n</code></pre>\n\n<p>That said - you get this all for free by iterating via a <code>for</code> loop:</p>\n\n<pre><code>for c in line.chars() {\n    if c == 'H' || c == 'W' {\n        keyword.push(c);\n    }\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=869d78f506b72223472b9c0fb11a6ac2&amp;version=stable\" rel=\"nofollow noreferrer\">Playground example</a></p>\n"}], "owner": {"reputation": 157, "user_id": 4306649, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/3c34790f8dc078c2f5d9c16b1b2e8544?s=128&d=identicon&r=PG&f=1", "display_name": "whiskey golf", "link": "https://stackoverflow.com/users/4306649/whiskey-golf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 311, "favorite_count": 0, "accepted_answer_id": 40412647, "answer_count": 1, "score": 0, "last_activity_date": 1478215645, "creation_date": 1478213492, "last_edit_date": 1478215230, "question_id": 40412547, "link": "https://stackoverflow.com/questions/40412547/how-would-i-append-an-optionchar-to-a-string", "title": "How would I append an Option&lt;char&gt; to a string?", "body": "<p>I am using a <code>match</code> statement with <code>.chars().next()</code> and want to append a character to a string if it matches a certain character. I am trying to do so like this</p>\n\n<pre><code>keyword.push(line.chars().next()) \n</code></pre>\n\n<p>but get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>expected type 'char' found type Option&lt;&lt;char&gt;&gt;\n</code></pre>\n\n<p>How would I go about appending this onto my string?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 1, "creation_date": 1478206764, "post_id": 40411045, "comment_id": 68072501, "body": "If you&#39;re happy to use the <code>Any</code> trait instead of <code>Eq</code> specifically, <code>Vec&lt;Box&lt;Any&gt;&gt;</code> works (<a href=\"https://play.rust-lang.org/?gist=22fcc82ccea3f0b0aa0f3528f23d35a6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>)."}, {"owner": {"reputation": 437, "user_id": 126595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4f411dadceeab24ede008a1d53422a2?s=128&d=identicon&r=PG", "display_name": "FCo", "link": "https://stackoverflow.com/users/126595/fco"}, "reply_to_user": {"reputation": 10707, "user_id": 6650102, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/boCIP.jpg?s=128&g=1", "display_name": "Aurora0001", "link": "https://stackoverflow.com/users/6650102/aurora0001"}, "edited": false, "score": 0, "creation_date": 1478207052, "post_id": 40411045, "comment_id": 68072651, "body": "Thanks, but I really need to be able to compare the things in the vector though.  In particular, the larger problem, is that I would like to have a HashMap with heterogeneous keys."}], "answers": [{"comments": [{"owner": {"reputation": 437, "user_id": 126595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4f411dadceeab24ede008a1d53422a2?s=128&d=identicon&r=PG", "display_name": "FCo", "link": "https://stackoverflow.com/users/126595/fco"}, "edited": false, "score": 0, "creation_date": 1478209406, "post_id": 40411541, "comment_id": 68073673, "body": "Thanks. Comparing things of different type is very simple, values of different type are always different, however, values of the same type can be equal. In my case, what I am trying to implement is an n-ary tree, where each level has a different type of keys, so I need that the generic type parameter to be somewhat general, and I totally need Eq and Hash."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 437, "user_id": 126595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4f411dadceeab24ede008a1d53422a2?s=128&d=identicon&r=PG", "display_name": "FCo", "link": "https://stackoverflow.com/users/126595/fco"}, "edited": false, "score": 2, "creation_date": 1478209812, "post_id": 40411541, "comment_id": 68073823, "body": "@FCo What key types are we speaking of? Can&#39;t you wrap them around an enum?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1478210259, "post_id": 40411541, "comment_id": 68074005, "body": "An enum is an excellent solution, IMO. Then it&#39;s up to the user of the data structure to implement <code>Eq</code> as appropriate."}, {"owner": {"reputation": 437, "user_id": 126595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4f411dadceeab24ede008a1d53422a2?s=128&d=identicon&r=PG", "display_name": "FCo", "link": "https://stackoverflow.com/users/126595/fco"}, "edited": false, "score": 0, "creation_date": 1478371538, "post_id": 40411541, "comment_id": 68130489, "body": "I liked the idea  of the enum, it lead me to the ultimate solution that was keep each level of the tree as its own separate data structure. The overcomplicated and difficult to type heterogeneous key tree was the wrong approach."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1478208999, "last_edit_date": 1495535560, "creation_date": 1478208585, "answer_id": 40411541, "question_id": 40411045, "link": "https://stackoverflow.com/questions/40411045/is-it-possible-to-have-a-heterogeneous-vector-of-types-that-implement-eq/40411541#40411541", "title": "Is it possible to have a heterogeneous vector of types that implement Eq?", "body": "<blockquote>\n  <p>Is it possible to have a list of pointers to things I can compare regardless of their types?</p>\n</blockquote>\n\n<p>This doesn't make sense. How do you \"compare\" a <code>String</code> and a <code>File</code> or a <code>Socket</code> and a <code>GuiWindowFontFamily</code>?</p>\n\n<p>The code has some minor issues as well, namely that it lacks any kind of indirection for the trait. See <a href=\"https://stackoverflow.com/questions/27957103/what-is-the-best-way-to-create-a-heterogeneous-collection-of-objects\">What is the best way to create a heterogeneous collection of objects?</a> for a good overview of how to make a heterogeneous vector when not fighting object safety.</p>\n\n<p>Speaking of <em>object safety</em>, <a href=\"http://huonw.github.io/blog/2015/01/object-safety/\" rel=\"nofollow noreferrer\">there's a great blog series on the subject</a>, which covers the details of the specific error you are getting.</p>\n\n<p>So, what can we do? For starters, we can be more specific:</p>\n\n<pre><code>let mut x: Vec&lt;Box&lt;PartialEq&lt;u8&gt;&gt;&gt; = Vec::new();\n</code></pre>\n\n<p>This works because we are saying that everything in the vector can be compared to a <code>u8</code>, and there's not an open-ended infinite number of possibilities that each may be compared to.</p>\n\n<p>You could also implement some trait that dictates how things should be compared, and then use that:</p>\n\n<pre><code>trait Silly {\n    fn silly(&amp;self) -&gt; usize;\n}\n\nimpl Silly for u8 {\n    fn silly(&amp;self) -&gt; usize { *self as usize }\n}\n\nimpl Silly for bool {\n    fn silly(&amp;self) -&gt; usize { 1 }\n}\n\nfn main() {\n    let mut x: Vec&lt;Box&lt;Silly&gt;&gt; = Vec::new();\n}\n</code></pre>\n"}], "owner": {"reputation": 437, "user_id": 126595, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4f411dadceeab24ede008a1d53422a2?s=128&d=identicon&r=PG", "display_name": "FCo", "link": "https://stackoverflow.com/users/126595/fco"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1616, "favorite_count": 0, "accepted_answer_id": 40411541, "answer_count": 1, "score": 3, "last_activity_date": 1478208999, "creation_date": 1478206400, "last_edit_date": 1478207366, "question_id": 40411045, "link": "https://stackoverflow.com/questions/40411045/is-it-possible-to-have-a-heterogeneous-vector-of-types-that-implement-eq", "title": "Is it possible to have a heterogeneous vector of types that implement Eq?", "body": "<p>I want a vector for elements that contain a trait such as <code>Eq</code> and I need heterogeneous vectors. For example:</p>\n\n<pre><code>let mut x: Vec&lt;Eq&gt; = Vec::new();\n\nx.push(1);\nx.push(\"hello\")\n</code></pre>\n\n<p>I get an error message that says that <code>Eq</code> cannot be made into an object:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n --&gt; src/main.rs:2:20\n  |\n2 |     let mut x: Vec&lt;Eq&gt; = Vec::new();\n  |                    ^^ the trait `std::cmp::Eq` cannot be made into an object\n  |\n  = note: the trait cannot use `Self` as a type parameter in the supertrait listing\n</code></pre>\n\n<p>Is it possible to have a list of pointers to things I can compare regardless of their types?</p>\n"}, {"tags": ["unicode", "utf-8", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478207651, "post_id": 40410805, "comment_id": 68072929, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One question per question, please</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478207760, "post_id": 40410805, "comment_id": 68072985, "body": "It sounds like you are asking for <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.char_indices\" rel=\"nofollow noreferrer\"><code>char_indices</code></a> and storing that into a <code>Vec</code> (<code>let everything: Vec&lt;_&gt; = input.char_indices().collect()</code>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478207847, "post_id": 40410805, "comment_id": 68073028, "body": "If you have a <code>&amp;[u8]</code> that is UTF-8, you should make it into a <code>&amp;str</code>."}, {"owner": {"reputation": 269348, "user_id": 5987, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/2a1f9f4986b58015691eb2014e78869f?s=128&d=identicon&r=PG", "display_name": "Mark Ransom", "link": "https://stackoverflow.com/users/5987/mark-ransom"}, "edited": false, "score": 0, "creation_date": 1478208782, "post_id": 40410805, "comment_id": 68073442, "body": "Do you really need the exact byte position of each character? It seems like you might be better off knowing the byte position of the start of the line, then the Unicode character position within the line."}, {"owner": {"reputation": 1258, "user_id": 878951, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9e067b2b71d17b193cd26e2e4bd282a2?s=128&d=identicon&r=PG", "display_name": "Fabian Schuiki", "link": "https://stackoverflow.com/users/878951/fabian-schuiki"}, "edited": false, "score": 0, "creation_date": 1478244116, "post_id": 40410805, "comment_id": 68083688, "body": "I would like to keep track of the characters using only one index (for efficiency reasons -- there are a lot of tracked locations kept in memory)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478250720, "post_id": 40410805, "comment_id": 68086592, "body": "@Fabian: Just putting this here; in case you did not know. A <code>char</code> represents a Unicode Code Point, and it may take multiple Code Points to compose a grapheme (notably when diacritics are involved, but not only)."}], "answers": [{"tags": [], "owner": {"reputation": 1258, "user_id": 878951, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9e067b2b71d17b193cd26e2e4bd282a2?s=128&d=identicon&r=PG", "display_name": "Fabian Schuiki", "link": "https://stackoverflow.com/users/878951/fabian-schuiki"}, "is_accepted": false, "score": 3, "last_activity_date": 1478335583, "last_edit_date": 1478335583, "creation_date": 1478244691, "answer_id": 40417424, "question_id": 40410805, "link": "https://stackoverflow.com/questions/40410805/idiomatic-way-to-parse-and-navigate-utf-8-byte-stream/40417424#40417424", "title": "Idiomatic way to parse and navigate UTF-8 byte stream", "body": "<p>It seems that <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.char_indices\" rel=\"nofollow noreferrer\"><code>char_indices</code></a> solves both of my issues:</p>\n\n<pre><code>let input: &amp;str = \"something\";\nfor (offset, chr) in input.char_indices() {\n    // ...\n}\n</code></pre>\n\n<p>And at a later stage, looking up a character and backwards-counting the number of preceding characters on the line can be done with <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_at\" rel=\"nofollow noreferrer\"><code>split_at</code></a>:</p>\n\n<pre><code>let input: &amp;str = \"something\";\nlet where: usize = 4;\nlet (left,_) = input.split_at(where);\nfor (offset, chr) in left.char_indices().rev() {\n    if chr == '\\n' {\n        break;\n    }\n    // ...\n}\n</code></pre>\n\n<p>Matthieu M. pointed out a caveat: Iterating and counting the Unicode Code Points does not necessarily correspond to what one would instinctively perceive as individual letters of script; this is due to the fact that multiple code points may make up a grapheme. <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.chars\" rel=\"nofollow noreferrer\">An example can be found in the documentation of <code>chars()</code></a>.</p>\n"}], "owner": {"reputation": 1258, "user_id": 878951, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9e067b2b71d17b193cd26e2e4bd282a2?s=128&d=identicon&r=PG", "display_name": "Fabian Schuiki", "link": "https://stackoverflow.com/users/878951/fabian-schuiki"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 330, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1478335583, "creation_date": 1478205439, "last_edit_date": 1478207496, "question_id": 40410805, "link": "https://stackoverflow.com/questions/40410805/idiomatic-way-to-parse-and-navigate-utf-8-byte-stream", "title": "Idiomatic way to parse and navigate UTF-8 byte stream", "body": "<p>I'm working on a lexical analyzer / tokenizer in Rust that needs to parse a UTF-8 input file (given as a <code>&amp;[u8]</code>) into individual <code>char</code>s for parsing, but also has to keep track of the byte position within the file. At a later stage -- say when an error needs to be reported in the input -- I need to locate the offending character based on the byte and backtrack to find the relative position on its line.</p>\n\n<p>What is a/the idiomatic way to parse a byte stream into chars (keeping track of byte position); and are there functions in the standard library that allow me to calculate how many trailing bytes follow or whether a byte is the leading or a trailing byte, or do I have to implement these myself based on the Unicode standard?</p>\n\n<p>For example, something like:</p>\n\n<pre><code>// First to parse some input stream:\nlet input: &amp;[u8] = \"something\";\nfor (chr, bytepos) in parse(input) {\n    // ...\n}\n\n// Later to locate a character based on the byte position and\n// use is_leading_byte() to step backwards and count the number\n// of characters since the start of the line:\nlet chr: u8 = input[some_bytepos];\nchr.is_leading_byte();\nchr.is_trailing_byte();\n</code></pre>\n"}, {"tags": ["sorting", "floating-point", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1478204899, "last_edit_date": 1478204899, "creation_date": 1478196428, "answer_id": 40408419, "question_id": 40408293, "link": "https://stackoverflow.com/questions/40408293/how-do-i-sort-nan-so-that-it-is-greater-than-any-other-number-and-equal-to-an/40408419#40408419", "title": "How do I sort `NaN` so that it is greater than any other number, and equal to any other `NaN`?", "body": "<p>You already know how to handle ties, all you need is to compare floating point in the desired way. Just... write the code that you described:</p>\n\n<pre><code>use std::cmp::Ordering;\nuse std::f32;\n\nfn main() {\n    let mut vec = [91.0, f32::NAN, 42.0]; \n\n    vec.sort_by(|&amp;a, &amp;b| {\n        match (a.is_nan(), b.is_nan()) {\n            (true, true) =&gt; Ordering::Equal,\n            (true, false) =&gt; Ordering::Greater,\n            (false, true) =&gt; Ordering::Less,\n            (false, false) =&gt; a.partial_cmp(&amp;b).unwrap(),\n        }\n    });\n\n    println!(\"{:?}\", vec);\n}\n</code></pre>\n\n<p>You could be fancy and wrap that up in a structure that represents the key as well:</p>\n\n<pre><code>use std::cmp::Ordering;\nuse std::f32;\n\nfn main() {\n    let mut vec = [91.0, f32::NAN, 42.0];\n\n    vec.sort_by_key(|&amp;a| MyNanKey(a));\n\n    println!(\"{:?}\", vec);\n}\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct MyNanKey(f32);\n\nimpl Eq for MyNanKey {}\n\nimpl PartialOrd for MyNanKey {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl Ord for MyNanKey {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {\n        match (self.0.is_nan(), other.0.is_nan()) {\n            (true, true) =&gt; Ordering::Equal,\n            (true, false) =&gt; Ordering::Greater,\n            (false, true) =&gt; Ordering::Less,\n            (false, false) =&gt; self.0.partial_cmp(&amp;other.0).unwrap(),\n        }\n    }\n}\n</code></pre>\n\n<p>I did no thinking about if this would be applicable for the various infinities or denormalized floating point values, so beware.</p>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 349, "favorite_count": 0, "accepted_answer_id": 40408419, "answer_count": 1, "score": 3, "last_activity_date": 1478204899, "creation_date": 1478195921, "last_edit_date": 1478195993, "question_id": 40408293, "link": "https://stackoverflow.com/questions/40408293/how-do-i-sort-nan-so-that-it-is-greater-than-any-other-number-and-equal-to-an", "title": "How do I sort `NaN` so that it is greater than any other number, and equal to any other `NaN`?", "body": "<p>I'm sorting a vector based on two criteria. The first is a floating point that can be <code>NaN</code>, the second is a string which is used to break ties lexicographically.</p>\n\n<pre><code>vec.sort_by(|a, b| {\n    match (foo(a) as f64 / bar(a) as f64).partial_cmp(&amp;(foo(b) as f64 / bar(b) as f64)) {\n        Some(x) =&gt; {\n            Ordering::Equal =&gt; name(a).cmp(name(b)),\n            other =&gt; other,\n        }\n        None() =&gt; {\n            //Not sure what to put here.\n        }\n    }\n}\n</code></pre>\n\n<p><code>foo(a)</code> returns int > 0,\n<code>bar(a)</code> returns int >= 0,\n<code>name(a)</code> returns <code>&amp; String</code>.</p>\n\n<p>How do I sort <code>NaN</code> so that it is greater than any other number, and equal to any other <code>NaN</code> (lexicographic tie-breaker)?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478179580, "post_id": 40402619, "comment_id": 68055479, "body": "Thanks, I might end up doing this. The main down-side to this - while this works, I wanted to pass in the entire declaration, otherwise Ill need to make separate macros for <code>pub struct $name(u32);</code> and <code>struct $name(pub u32);</code> (public struct and public member)."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1478180105, "last_edit_date": 1478180105, "creation_date": 1478179378, "answer_id": 40402619, "question_id": 40402317, "link": "https://stackoverflow.com/questions/40402317/is-it-possible-to-nest-a-struct-declaration-in-a-macro-to-apply-struct-attribute/40402619#40402619", "title": "Is it possible to nest a struct declaration in a macro to apply struct attributes?", "body": "<p>Putting <code>#[derive(...)]</code> into the macro seems to work fine:</p>\n\n<pre><code>#[derive(Eq,PartialEq,Debug)]\nstruct Foo(u32);\n\nmacro_rules! my_eq(\n    ($name:ident) =&gt; {\n        #[derive(Eq,PartialEq,Debug)]\n        struct $name(u32);\n    };\n);\n\nmy_eq!(Bar);\n\nfn main() {\n    assert_eq!(Foo(3), Foo(3));\n    assert!(Foo(3) != Foo(4));\n    assert_eq!(Bar(3), Bar(3));\n    assert!(Bar(3) != Bar(4));\n\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8d1c8aae985a7c46a17c33779f3f4526&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground link</a></p>\n\n<p>Or if you want to pass the whole <code>struct</code> in:</p>\n\n<pre><code>macro_rules! my_eq(\n    ($name:item) =&gt; {\n        #[derive(Eq,PartialEq,Debug)]\n        $name\n    };\n);\n\nmy_eq!(struct Bar(u32););\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c92ef69c9b95f7a23710807ff994cc8f&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Note that the macro takes an entire item, so the semicolon inside the macro call is needed (<code>Foo{}</code> structs don't need it, just like when written inline).</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1478181378, "last_edit_date": 1478181378, "creation_date": 1478179858, "answer_id": 40402797, "question_id": 40402317, "link": "https://stackoverflow.com/questions/40402317/is-it-possible-to-nest-a-struct-declaration-in-a-macro-to-apply-struct-attribute/40402797#40402797", "title": "Is it possible to nest a struct declaration in a macro to apply struct attributes?", "body": "<p>This can be done by passing in an <code>item</code>, answer thanks to @j_ey on IRC.</p>\n\n<pre><code>macro_rules! ideas {\n    ($ty: item, $id: ident) =&gt; {\n        #[derive(Debug)]\n        $ty\n        impl $id {\n            fn doit(){}\n        }\n    }\n}\n\nideas!(pub struct Foo(u32);, Foo);\n\nfn main() {\n    let f = Foo(1);\n    println!(\"{:?}\", f);\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 398, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1478181378, "creation_date": 1478178483, "last_edit_date": 1495540124, "question_id": 40402317, "link": "https://stackoverflow.com/questions/40402317/is-it-possible-to-nest-a-struct-declaration-in-a-macro-to-apply-struct-attribute", "title": "Is it possible to nest a struct declaration in a macro to apply struct attributes?", "body": "<p>If we want to generalize applying <code>#[derive(...)]</code> to a struct, in some cases it would  be useful to wrap this in a macro.</p>\n\n<p>non-working example:</p>\n\n<pre><code>my_traits!(\n    pub struct MyType(u32),\n    MyType\n);\n</code></pre>\n\n<p>Where <code>my_traits</code> could prefix the first argument with <code>#[derive(...)]</code>, and use the second argument to declare <code>impl SomeTrait for $t {...}</code>.</p>\n\n<p>Declaring implementations works without any problems, however I didn't manage to find a way to use a macro to prefix the struct declaration with attributes.</p>\n\n<hr>\n\n<p>See this question for an example of what this could be used for:<br><a href=\"https://stackoverflow.com/questions/40401574\">Possible to derive attributes *after* a struct declaration?</a></p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1478178536, "post_id": 40401574, "comment_id": 68054733, "body": "Can you please include a complete example?  What has MyTypedNumber got to do with MyTypedInt?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1478178771, "post_id": 40401574, "comment_id": 68054900, "body": "<code>MyTypedInt</code> accidentally left in, corrected - added link to complete example."}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1478195218, "post_id": 40401574, "comment_id": 68066185, "body": "Derive doesn&#39;t do anything magical. You should be able to do the exact same implementation manually that it does. Could you provide the example where you feel you need derive?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1478196220, "post_id": 40401574, "comment_id": 68066740, "body": "@paholg, thats what I would have expected too and its true in most cases, however the Rust compiler is deprecating support for non-derive equality, see: RFC 1445."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478196552, "post_id": 40408237, "comment_id": 68066896, "body": "I updated the second macro example linked from this question after asking. Even so, the ability to use derive after defining a struct would be useful since its a little cumbersome to pass a struct definition into a macro. Updated the question."}], "tags": [], "owner": {"reputation": 6531, "user_id": 1614607, "user_type": "registered", "accept_rate": 59, "profile_image": "https://i.stack.imgur.com/j5OdR.jpg?s=128&g=1", "display_name": "Jacob Brown", "link": "https://stackoverflow.com/users/1614607/jacob-brown"}, "is_accepted": false, "score": 0, "last_activity_date": 1478272031, "last_edit_date": 1478272031, "creation_date": 1478195718, "answer_id": 40408237, "question_id": 40401574, "link": "https://stackoverflow.com/questions/40401574/possible-to-derive-attributes-after-a-struct-declaration/40408237#40408237", "title": "Possible to derive attributes *after* a struct declaration?", "body": "<p>The \"complete example\" link you provide <strong>does</strong> show an example of having the macro prefix attributes (see the second macro).</p>\n\n<pre><code>    #[derive(PartialEq, Eq, Copy, Clone, Debug)]\n    $struct_p_def\n</code></pre>\n\n<p>However, if instead you want to be able to provide derive-attributes per struct (e.g., only some of your structs need to derive <code>PartialEq</code>), you can pass the derive expression in the first part of your second <code>struct_impl_my_features!</code> example&mdash;the attributes are considered part of the <code>item</code> macro form. E.g., </p>\n\n<pre><code>struct_impl_my_features!(\n    #[derive(PartialEq, Eq)]\n    pub struct MyTypedNumber(pub u32);,\n    MyTypedNumber\n);\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>Sorry, I don't have an answer to your main question; as far as I know, it is not possible. However, if your primary concern is the clunkiness, and if your structs are all of similar form, you could make your macro call nicer by adding this to the top of your macro:</p>\n\n<pre><code>($x:ident ( $($v:tt)* ) ) =&gt; {\n    struct_impl_my_features!(pub struct $x( $($v)* );, $x)\n};\n</code></pre>\n\n<p>And then calling it like: </p>\n\n<pre><code>struct_impl_my_features!(MyTypedNumber(pub u32));\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 681, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1478272031, "creation_date": 1478176282, "last_edit_date": 1495541960, "question_id": 40401574, "link": "https://stackoverflow.com/questions/40401574/possible-to-derive-attributes-after-a-struct-declaration", "title": "Possible to derive attributes *after* a struct declaration?", "body": "<p>I'm using a macro to extend a primitive struct:</p>\n\n<pre><code>pub struct MyTypedNumber(pub u32);\nstruct_impl_my_features!(MyTypedNumber);\n</code></pre>\n\n<p>The <code>struct_impl_my_features</code> macro can implement functions &amp; traits for <code>MyTypedNumber</code>, however there is a case where its useful to use <code>#[derive(PartialEq, Eq)]</code> - for example.</p>\n\n<p>Is it possible to use <code>#[derive(...)]</code> after the struct is already declared?</p>\n\n<p>An alternative is to pass in the struct definition as an <code>item</code> argument to a macro:</p>\n\n<pre><code>struct_impl_my_features!(\n    pub struct MyTypedNumber(pub u32);,\n    MyTypedNumber\n);\n</code></pre>\n\n<p>This works, so it may be the best option, although it is rather clunky and means the declaration and macro extension must be together.</p>\n\n<p>See <a href=\"https://stackoverflow.com/a/40336386/432509\">this complete example</a>, the macro is called <code>struct_bitflag_impl</code> (second example).</p>\n\n<hr>\n\n<p>I worked around this by manually implementing <code>PartialEq</code> and <code>Eq</code>, however I ran into a case where Rust <em>needs</em> <code>#[derive(...)]</code> to be used as constants within <code>match</code> statement:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>= warning: this was previously accepted by the compiler but is being phased out;\n  it will become a hard error in a future release!\n= note: for more information,\n  see RFC 1445 &lt;https://github.com/rust-lang/rfcs/pull/1445&gt;\n</code></pre>\n"}, {"tags": ["rust", "control-flow"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1478164874, "post_id": 40397672, "comment_id": 68045639, "body": "I&#39;d consider wrapping the pattern into an iterator, so you&#39;d do something like: <code>for n in some_iter(n_init) { func(n) }</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478165070, "post_id": 40397672, "comment_id": 68045746, "body": "Could you please post COMPLETE examples. Each time you post a snippet we have to guess at what the involved types could be. Are they <code>Copy</code>? Do they have ownership over something? We don&#39;t know! we don&#39;t know!"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478166043, "post_id": 40397672, "comment_id": 68046360, "body": "@Matthieu M am interested in what kinds of flow control can be expressed, I rather not include exact types in my question since it distracts from other aspects, and that part I rather manage myself."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478166148, "post_id": 40397672, "comment_id": 68046439, "body": "This question is marked to close as: <code>Questions seeking debugging help</code>, can someone explain why? - Its intended to be a question about how to express flow control. There are no bugs to debug here."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1478166168, "post_id": 40397672, "comment_id": 68046456, "body": "@ideasman42: The problem is that this is making the job of <i>answerers</i> much harder, because <i>ownership</i> is a core idea of Rust, and thus answers differ depending on whether you use affine types, borrows, or <code>Copy</code> types. It&#39;s like your last question when you added <i>after the fact</i> the condition that <code>test()</code> answered <code>false</code> the first time... had this been encoded in the code from the beginning I could have known my answer did not fit. But since I could not <i>read your mind</i>, I provided an answer that fit and you <i>after</i> changed the question so it would not fit any longer. So.. COMPLETE please."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1478166652, "post_id": 40397672, "comment_id": 68046772, "body": "@Matthieu M. For this question just assume borrow checker isn&#39;t raising issues (noted in question, they could be int&#39;s for example)."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 6, "last_activity_date": 1478165218, "last_edit_date": 1478165218, "creation_date": 1478164912, "answer_id": 40397777, "question_id": 40397672, "link": "https://stackoverflow.com/questions/40397672/possible-to-combine-assignment-and-comparison-in-an-expression/40397777#40397777", "title": "Possible to combine assignment and comparison in an expression?", "body": "<p>The idiomatic way to represent iteration in Rust is to use an <code>Iterator</code>. Thus you would implement an iterator that does the <code>n = n.next</code> and then use a <code>for</code> loop to iterate over the iterator.</p>\n\n<pre><code>struct MyIter&lt;'a&gt; {\n    pos: &amp;'a MyData,\n    start: &amp;'a MyData,\n}\nimpl&lt;'a&gt; Iterator for MyIter&lt;'a&gt; {\n    type Item = &amp;'a MyData;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a MyData&gt; {\n        if self.pos as *const _ == self.start as *const _ {\n            None\n        } else {\n            let pos = self.pos;\n            self.pos = self.pos.next;\n            Some(pos)\n        }\n    }\n}\n</code></pre>\n\n<p>it is left as an exercise to the reader to adapt this iterator to be able to start from the first element instead of starting from the second.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478166855, "post_id": 40397875, "comment_id": 68046904, "body": "While interesting (and probably a good solution in some cases), this reads like a round-about and indirect answer which makes the flow control less clear then simply breaking once the initial value is reached."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1478167219, "post_id": 40397875, "comment_id": 68047136, "body": "@ideasman42: Fully agreed, but if you want assignment in a condition, that is the only pattern I can think of (and I would NOT encourage its use)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1478165203, "creation_date": 1478165203, "answer_id": 40397875, "question_id": 40397672, "link": "https://stackoverflow.com/questions/40397672/possible-to-combine-assignment-and-comparison-in-an-expression/40397875#40397875", "title": "Possible to combine assignment and comparison in an expression?", "body": "<p>Rust supports pattern matching in <code>if</code> and <code>while</code>:</p>\n\n<ul>\n<li>instead of having a boolean condition, the test is considered successful if the pattern matches</li>\n<li>as part of pattern matching, you bind the values matched to names</li>\n</ul>\n\n<p>Thus, if instead of having a boolean condition you were building an <code>Option</code>...</p>\n\n<pre><code>fn check(next: *mut Node, init: *mut Node) -&gt; Option&lt;*mut Node&gt;;\n\nlet mut n = n_init;\nloop {\n    func(n);\n    if let Some(x) = check(n.next, n_init) {\n        n = x;\n    } else {\n        break;\n    }\n}\n</code></pre>\n\n<p>However, if you can use an <code>Iterator</code> instead you'll be much more idiomatic.</p>\n"}, {"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1529850585, "post_id": 51010125, "comment_id": 89014355, "body": "This has the disadvantage that entering the loop needs to run logic (which you can avoid with C&#39;s <code>do {..} while();</code> style loops)."}, {"owner": {"reputation": 9, "user_id": 606051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/699dc8b8aa054cd5269e835923f0ff4d?s=128&d=identicon&r=PG", "display_name": "nyda", "link": "https://stackoverflow.com/users/606051/nyda"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1529906509, "post_id": 51010125, "comment_id": 89026717, "body": "I have updated the answer with a do..while example, but at this point you&#39;re pretty far off the beaten track."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1529922466, "post_id": 51010125, "comment_id": 89035069, "body": "The problem with this is a <code>continue</code> statement in <code>$b</code> will skip the final break."}, {"owner": {"reputation": 9, "user_id": 606051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/699dc8b8aa054cd5269e835923f0ff4d?s=128&d=identicon&r=PG", "display_name": "nyda", "link": "https://stackoverflow.com/users/606051/nyda"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1529993301, "post_id": 51010125, "comment_id": 89063556, "body": "Yes, as per your question this is assuming there is no continue in the block. If you wanted to avoid that as well you could probably wrap $b inside a fixed single or two iteration loop and try to tell whether a continue or break was used based on additional assignments you make inside that loop."}], "tags": [], "owner": {"reputation": 9, "user_id": 606051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/699dc8b8aa054cd5269e835923f0ff4d?s=128&d=identicon&r=PG", "display_name": "nyda", "link": "https://stackoverflow.com/users/606051/nyda"}, "is_accepted": false, "score": 0, "last_activity_date": 1529931811, "last_edit_date": 1529931811, "creation_date": 1529844737, "answer_id": 51010125, "question_id": 40397672, "link": "https://stackoverflow.com/questions/40397672/possible-to-combine-assignment-and-comparison-in-an-expression/51010125#51010125", "title": "Possible to combine assignment and comparison in an expression?", "body": "<p>An assignment in Rust returns the empty tuple. If you are fine with non-idiomatic code you can compare the assignment-result with such an empty tuple and use a logical conjunction to chain your actual loop condition.</p>\n\n<pre><code>let mut current = 3;\nlet mut parent;\n\nwhile (parent = get_parent(current)) == () &amp;&amp; parent != current {\n    println!(\"currently {}, parent is {}\", current, parent);\n    current = parent;\n}\n\n// example function\nfn get_parent(x: usize) -&gt; usize {\n    if x &gt; 0 { x - 1 } else { x }\n}\n\n// currently 3, parent is 2\n// currently 2, parent is 1\n// currently 1, parent is 0\n</code></pre>\n\n<blockquote>\n  <p>This has the disadvantage that entering the loop needs to run logic (which you can avoid with C's <code>do {..} while()</code>; style loops). </p>\n</blockquote>\n\n<p>You can use this approach inside a do-while macro, but readability isn't that great and at that point a refactoring might be preferable. In any case, this is how it could look:</p>\n\n<pre><code>do_it!({\n    println!(\"{}\", n);\n} while (n = n + 1) == () &amp;&amp; n &lt; 4);\n</code></pre>\n\n<p>This is the code for the macro:</p>\n\n<pre><code>macro_rules! do_it {\n    ($b: block while $e:expr) =&gt; {\n        loop {\n            $b\n            if !($e) { break };\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 509, "favorite_count": 0, "answer_count": 3, "score": 2, "last_activity_date": 1578691604, "creation_date": 1478164573, "last_edit_date": 1578691604, "question_id": 40397672, "link": "https://stackoverflow.com/questions/40397672/possible-to-combine-assignment-and-comparison-in-an-expression", "title": "Possible to combine assignment and comparison in an expression?", "body": "<p>In C, it's common to assign and compare in a single expression:</p>\n\n<pre><code>n = n_init;\ndo {\n    func(n);\n} while ((n = n.next) != n_init);\n</code></pre>\n\n<p>As I understand it this can be expressed in Rust as:</p>\n\n<pre><code>n = n_init;\nloop {\n    func(n);\n    n = n.next;\n    if n == n_init {\n        break;\n    }\n}\n</code></pre>\n\n<p>Which works the same as the C version (assuming the body of the loop doesn't use <code>continue</code>).</p>\n\n<p>Is there a more terse way to express this in Rust, or is the example above ideal?</p>\n\n<p>For the purposes of this question, assume ownership or satisfying the borrow checker isn't an issue. It's up to developer to satisfy these requirements.</p>\n\n<p>For example, as an integer:</p>\n\n<pre><code>n = n_init;\nloop {\n    func(&amp;vec[n]);\n    n = vec[n].next;\n    if n == n_init {\n        break;\n    }\n}\n</code></pre>\n\n<p>This may seem obvious that the Rust example is idiomatic Rust - however I'm looking to move quite a lot of this style of loop to Rust, I'm interested to know if there is some better/different way to express it.</p>\n"}, {"tags": ["pointers", "rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1478223501, "post_id": 40394372, "comment_id": 68077811, "body": "Personally, I would just make <code>new</code> accept a <code>Vec</code>. That way you don&#39;t impose a clone on the caller; the caller can decide to clone the data or just pass ownership of their <code>Vec</code> if they don&#39;t need it anymore."}], "answers": [{"comments": [{"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1478154844, "post_id": 40394599, "comment_id": 68040980, "body": "Thanks @Lukas, a follow up question: if by using to_own(), the fn new() takes the ownership of matrix , then the original matrix doesn&#39;t exist. If I want to do matrix addition, that would be a problem, right?  I am thinking maybe I should initialize the new matrix without taking the ownership.."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 1, "creation_date": 1478187198, "post_id": 40394599, "comment_id": 68061245, "body": "@enaJ I don&#39;t quite understand, but the <code>new()</code> function doesn&#39;t take ownership of anything. <code>to_owned()</code> takes a <i>borrowed</i> thing, copies it and returns an <i>owned</i> thing. Like if a friend lends a book to you. You better not write into that book or pretend it&#39;s your own. But if you copy the book letter for letter, you have your own version that <i>you</i> own."}, {"owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "edited": false, "score": 0, "creation_date": 1478188435, "post_id": 40394599, "comment_id": 68062086, "body": "So to_owned() make a copy of the borrowed object. That makes sense. BTW, I really like your analogies."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1478151879, "creation_date": 1478151879, "answer_id": 40394599, "question_id": 40394372, "link": "https://stackoverflow.com/questions/40394372/convert-input-vector-of-type-t-to-vect/40394599#40394599", "title": "convert input vector of type &amp;[T] to Vec&lt;T&gt;", "body": "<p>It is possible, but not via <code>*</code> (dereferencing). You see, <code>&amp;[T]</code> is something <em>borrowed</em>, so you can't keep it. The type <code>Matrix&lt;T&gt;</code> <em>owns</em> its <code>data</code>. You can't simply borrow something (<code>values</code>) and then give it away as if you own it (\"here, Matrix, take these values, you can keep them\").</p>\n\n<p>What you can do is to copy the borrowed data and store it as an owned type (<code>Vec&lt;T&gt;</code>). You can now give away this copy of the data, because you own it. Converting from borrowed to owned can be done by the <code>to_owned()</code> method, for example:</p>\n\n<pre><code>pub fn new(row: usize, col: usize, values: &amp;[T]) -&gt; Matrix&lt;T&gt; {\n    Matrix {\n        data: values.to_owned(),\n        //          ^^^^^^^^^^^\n        row: row,\n        col: col,\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1135, "user_id": 3754101, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/D1eNN.jpg?s=128&g=1", "display_name": "enaJ", "link": "https://stackoverflow.com/users/3754101/enaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 196, "favorite_count": 0, "accepted_answer_id": 40394599, "answer_count": 1, "score": 0, "last_activity_date": 1478151879, "creation_date": 1478150599, "last_edit_date": 1495541800, "question_id": 40394372, "link": "https://stackoverflow.com/questions/40394372/convert-input-vector-of-type-t-to-vect", "title": "convert input vector of type &amp;[T] to Vec&lt;T&gt;", "body": "<p>I am learning Rust by doing matrix math. The very first step is to create a new matrix of rows and columns, and initializes the matrix with the elements in values in row-major order.</p>\n\n<p>If I want to pass the input matrix value vector as &amp;[T], but I am not sure how to initialize the matrix with the elements values. </p>\n\n<pre><code>pub struct Matrix&lt;T&gt; {\n    data: Vec&lt;T&gt;,\n    row: usize,\n    col: usize,\n}\n\n/// Creates a new matrix of `row` rows and `col` columns, and initializes\n/// the matrix with the elements in `values` in row-major order.\npub fn new(row: usize, col: usize, values: &amp;[T]) -&gt; Matrix&lt;T&gt; {\n    Matrix {\n        data: *values, // ??\n        row: row,\n        col: col,\n    }\n}\n\n\nfn main() {\n    let x = Matrix::new(2, 3, &amp;[-2, -1, 0, 1, 2, 3]);\n    let y = Matrix::new(2, 3, &amp;[0, 0, 0, 0, 0, 0]);\n    // z = x + y;\n\n}\n</code></pre>\n\n<p>Based on this <a href=\"https://stackoverflow.com/questions/27554838/what-is-the-difference-between-vecstruct-and-struct\">post</a> , &amp;[T] is a reference to a set of Ts laid out sequentially in memory. Does that mean it is not possible to convert all the \"slice\" from pointers to vector type? And the only way to do is to use a loop to do deref of each item and store them in a new vector?</p>\n"}, {"tags": ["algorithm", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478185381, "post_id": 40404556, "comment_id": 68059911, "body": "Your answer would be more useful with some text that highlights and explains the differences between this code and OPs. Otherwise people will find it difficult to apply the changes that you have made to their own code experiencing the same problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478186937, "post_id": 40404556, "comment_id": 68061062, "body": "This code also does not print out the value of the starting node (<code>self</code>); it only prints out the children."}], "tags": [], "owner": {"reputation": 487, "user_id": 451149, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f90c9f613b91baa64d1210b674867914?s=128&d=identicon&r=PG", "display_name": "ldanko", "link": "https://stackoverflow.com/users/451149/ldanko"}, "is_accepted": false, "score": -1, "last_activity_date": 1478184498, "creation_date": 1478184498, "answer_id": 40404556, "question_id": 40393324, "link": "https://stackoverflow.com/questions/40393324/breadth-first-search-and-lifetimes/40404556#40404556", "title": "Breadth first search and lifetimes", "body": "<p>Try this one:</p>\n\n<pre><code>pub fn print(&amp;self) -&gt; String {\n    let mut queue = VecDeque::new();\n    let mut output = String::new();\n\n    if let Some(ref left_node) = self.left {\n        queue.push_back(left_node);\n    }\n    if let Some(ref right_node) = self.right {\n        queue.push_back(right_node);\n    }\n\n    while let Some(ref current) = queue.pop_front() {\n        if let Some(ref left_node) = current.left {\n            queue.push_back(left_node);\n        }\n        if let Some(ref right_node) = current.right {\n            queue.push_back(right_node);\n        }\n\n        output = output + current.value + \"\\n\";\n    }\n\n    output\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 57, "user_id": 2394115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c5a2e0c640aad2659f481a1a71ad632?s=128&d=identicon&r=PG", "display_name": "somnid", "link": "https://stackoverflow.com/users/2394115/somnid"}, "edited": false, "score": 0, "creation_date": 1478190515, "post_id": 40405402, "comment_id": 68063489, "body": "Huh, that wasn&#39;t apparent but it makes sense to me now.  I thought my reference wasn&#39;t living long enough.  Thanks for the explanation."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1478186740, "creation_date": 1478186740, "answer_id": 40405402, "question_id": 40393324, "link": "https://stackoverflow.com/questions/40393324/breadth-first-search-and-lifetimes/40405402#40405402", "title": "Breadth first search and lifetimes", "body": "<p>Your main problem lies in this line (and the <code>right</code> version):</p>\n\n<pre><code>if let Some(left_node) = current.left\n</code></pre>\n\n<p>This tries to <em>move</em> the value contained in <code>current.left</code> into the pattern on the right side. the problem is that <code>current.left</code> is an <code>Option&lt;Box&lt;BinarySearchNode&lt;'a&gt;&gt;&gt;</code>. When you move the <code>Box</code> out of <code>current</code>, that would leave <code>current</code> without a valid value for <code>left</code>! Accessing that value in the future would lead to bad behavior.</p>\n\n<p>Instead, you need to leave the value where it is and instead take a reference. The two main ways are to use the <code>ref</code> pattern modifier:</p>\n\n<pre><code>if let Some(ref left_node) = current.left\n</code></pre>\n\n<p>Or to call <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>as_ref</code></a>:</p>\n\n<pre><code>if let Some(left_node) = current.left.as_ref()\n</code></pre>\n\n<p>Here is complete code:</p>\n\n<pre><code>use std::collections::VecDeque;\n\nstruct BinarySearchNode&lt;'a&gt; {\n    value: &amp;'a str,\n    key: i32,\n    left: Option&lt;Box&lt;BinarySearchNode&lt;'a&gt;&gt;&gt;,\n    right: Option&lt;Box&lt;BinarySearchNode&lt;'a&gt;&gt;&gt;,\n}\n\nimpl&lt;'a&gt; BinarySearchNode&lt;'a&gt; {\n    pub fn print(&amp;self) -&gt; String {\n        let mut queue = VecDeque::new();\n        let mut output = String::new();\n        queue.push_back(self);\n\n        while let Some(current) = queue.pop_front() {\n            if let Some(left_node) = current.left.as_ref() {\n                queue.push_back(left_node);\n            }\n            if let Some(right_node) = current.right.as_ref() {\n                queue.push_back(right_node);\n            }\n\n            output = output + current.value + \"\\n\";\n        }\n\n        output\n    }\n}\n\nfn main() {\n    let root = BinarySearchNode {\n        value: \"a\",\n        key: 0,\n        left: Some(Box::new(BinarySearchNode {\n            value: \"b\",\n            key: 1,\n            left: None,\n            right: None,\n        })),\n        right: Some(Box::new(BinarySearchNode {\n            value: \"c\",\n            key: 2,\n            left: None,\n            right: None,\n        })),\n    };\n    println!(\"{}\", root.print());\n}\n</code></pre>\n"}], "owner": {"reputation": 57, "user_id": 2394115, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0c5a2e0c640aad2659f481a1a71ad632?s=128&d=identicon&r=PG", "display_name": "somnid", "link": "https://stackoverflow.com/users/2394115/somnid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 303, "favorite_count": 0, "accepted_answer_id": 40405402, "answer_count": 2, "score": 1, "last_activity_date": 1478186740, "creation_date": 1478143295, "last_edit_date": 1478184188, "question_id": 40393324, "link": "https://stackoverflow.com/questions/40393324/breadth-first-search-and-lifetimes", "title": "Breadth first search and lifetimes", "body": "<p>I want to write a function that uses breadth-first search on a binary tree to print node values in order:</p>\n\n<pre><code>use std::collections::VecDeque;\nuse std::ops::Deref;\n\nstruct BinarySearchNode&lt;'a&gt; {\n    value: &amp;'a str,\n    key: i32,\n    left: Option&lt;Box&lt;BinarySearchNode&lt;'a&gt;&gt;&gt;,\n    right: Option&lt;Box&lt;BinarySearchNode&lt;'a&gt;&gt;&gt;,\n}\n\nimpl&lt;'a&gt; BinarySearchNode&lt;'a&gt; {\n    pub fn print(&amp;self) -&gt; String {\n        let mut queue = VecDeque::new();\n        let mut output = String::new();\n        queue.push_back(&amp;self);\n\n        while let Some(ref current) = queue.pop_front() {\n            if let Some(left_node) = current.left {\n                queue.push_back(&amp;left_node.deref());\n            }\n            if let Some(right_node) = current.right {\n                queue.push_back(&amp;right_node.deref());\n            }\n\n            output = output + current.value + \"\\n\";\n        }\n\n        output\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>I get the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; src/main.rs:19:34\n   |\n19 |                 queue.push_back(&amp;left_node.deref());\n   |                                  ^^^^^^^^^^^^^^^^^ does not live long enough\n   |\nnote: reference must be valid for the block suffix following statement 0 at 13:40...\n  --&gt; src/main.rs:13:41\n   |\n13 |         let mut queue = VecDeque::new();\n   |                                         ^\nnote: ...but borrowed value is only valid for the statement at 19:16\n  --&gt; src/main.rs:19:17\n   |\n19 |                 queue.push_back(&amp;left_node.deref());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n  --&gt; src/main.rs:19:17\n   |\n19 |                 queue.push_back(&amp;left_node.deref());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: `left_node` does not live long enough\n  --&gt; src/main.rs:19:34\n   |\n19 |                 queue.push_back(&amp;left_node.deref());\n   |                                  ^^^^^^^^^\n   |\nnote: reference must be valid for the block suffix following statement 0 at 13:40...\n  --&gt; src/main.rs:13:41\n   |\n13 |         let mut queue = VecDeque::new();\n   |                                         ^\nnote: ...but borrowed value is only valid for the if let at 18:12\n  --&gt; src/main.rs:18:13\n   |\n18 |             if let Some(left_node) = current.left {\n   |             ^\n\nerror: borrowed value does not live long enough\n  --&gt; src/main.rs:22:34\n   |\n22 |                 queue.push_back(&amp;right_node.deref());\n   |                                  ^^^^^^^^^^^^^^^^^^ does not live long enough\n   |\nnote: reference must be valid for the block suffix following statement 0 at 13:40...\n  --&gt; src/main.rs:13:41\n   |\n13 |         let mut queue = VecDeque::new();\n   |                                         ^\nnote: ...but borrowed value is only valid for the statement at 22:16\n  --&gt; src/main.rs:22:17\n   |\n22 |                 queue.push_back(&amp;right_node.deref());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using a `let` binding to increase its lifetime\n  --&gt; src/main.rs:22:17\n   |\n22 |                 queue.push_back(&amp;right_node.deref());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: `right_node` does not live long enough\n  --&gt; src/main.rs:22:34\n   |\n22 |                 queue.push_back(&amp;right_node.deref());\n   |                                  ^^^^^^^^^^\n   |\nnote: reference must be valid for the block suffix following statement 0 at 13:40...\n  --&gt; src/main.rs:13:41\n   |\n13 |         let mut queue = VecDeque::new();\n   |                                         ^\nnote: ...but borrowed value is only valid for the if let at 21:12\n  --&gt; src/main.rs:21:13\n   |\n21 |             if let Some(right_node) = current.right {\n   |             ^\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:18:38\n   |\n18 |             if let Some(left_node) = current.left {\n   |                         ---------    ^^^^^^^ cannot move out of borrowed content\n   |                         |\n   |                         hint: to prevent move, use `ref left_node` or `ref mut left_node`\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:21:39\n   |\n21 |             if let Some(right_node) = current.right {\n   |                         ----------    ^^^^^^^ cannot move out of borrowed content\n   |                         |\n   |                         hint: to prevent move, use `ref right_node` or `ref mut right_node`\n</code></pre>\n\n<p>I needed to <code>deref()</code> because simply using the operator <code>*</code> was causing a type mismatch as it expected a reference and not a box. It seems those dereference slightly differently and at least in stable I can't destructure it either. </p>\n\n<p>I get that this value is scoped within the <code>while</code> loop and doesn't live long enough to be in the <code>VecDeque</code> (if this is the right data structure for the job) but I'm not sure what the best way to go about extending that lifetime is or if there's simply a better way to write this entire thing as it feels a bit complex.  </p>\n\n<p>My main problem is that I'm not sure where to start refactoring this code and I surprisingly had a hard time finding examples of a breadth-first search performed on a binary tree in Rust to take patterns from.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 532, "user_id": 1857492, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/7f056f6a0ec8266d1407c4baf6c152f2?s=128&d=identicon&r=PG", "display_name": "user1857492", "link": "https://stackoverflow.com/users/1857492/user1857492"}, "edited": false, "score": 2, "creation_date": 1606686029, "post_id": 40392936, "comment_id": 115029321, "body": "Why is this necessary?"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 33, "last_activity_date": 1516387722, "last_edit_date": 1516387722, "creation_date": 1478140405, "answer_id": 40392936, "question_id": 40392906, "link": "https://stackoverflow.com/questions/40392906/no-method-named-flush-found-for-type-stdiostdout-in-the-current-scope/40392936#40392936", "title": "no method named flush found for type std::io::Stdout in the current scope", "body": "<p>You need to import the trait that implements the <code>flush</code> method for <code>Stdout</code>.</p>\n\n<p>According to the documentation:</p>\n\n<p><a href=\"https://i.stack.imgur.com/n9TRg.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/n9TRg.png\" alt=\"io::Write\"></a></p>\n\n<p>Therefore:</p>\n\n<pre><code>use std::io::Write; // &lt;--- bring the trait into scope\n\nfn main() {\n    std::io::stdout().flush().expect(\"some error message\");\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=bf4ddbf23ef14d315d53c0a4b920c783&amp;version=stable\" rel=\"noreferrer\">Playground example</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1516388390, "last_edit_date": 1516388390, "creation_date": 1478140419, "answer_id": 40392940, "question_id": 40392906, "link": "https://stackoverflow.com/questions/40392906/no-method-named-flush-found-for-type-stdiostdout-in-the-current-scope/40392940#40392940", "title": "no method named flush found for type std::io::Stdout in the current scope", "body": "<blockquote>\n  <p>Can anyone tell me what I'm doing wrong?</p>\n</blockquote>\n\n<p>Yes; <strong>the compiler already does</strong>.</p>\n\n<pre><code>fn main() {\n    std::io::stdout().flush().expect(\"some error message\");\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `flush` found for type `std::io::Stdout` in the current scope\n --&gt; src/main.rs:3:23\n  |\n3 |     std::io::stdout().flush().expect(\"some error message\");\n  |                       ^^^^^\n  |\n  = help: items from traits can only be used if the trait is in scope\n  = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n          candidate #1: `use std::io::Write;`\n</code></pre>\n\n<p>Emphasis on the <code>help</code> and <code>note</code> lines - <code>use std::io::Write</code>.</p>\n\n<p>All together:</p>\n\n<pre><code>use std::io::Write;\n\nfn main() {\n    std::io::stdout().flush().expect(\"some error message\");\n}\n</code></pre>\n"}], "owner": {"reputation": 2482, "user_id": 1129436, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/09511512293a4e31936309f2c6aee08e?s=128&d=identicon&r=PG", "display_name": "River Tam", "link": "https://stackoverflow.com/users/1129436/river-tam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5859, "favorite_count": 1, "accepted_answer_id": 40392936, "answer_count": 2, "score": 16, "last_activity_date": 1516388390, "creation_date": 1478140213, "last_edit_date": 1516387692, "question_id": 40392906, "link": "https://stackoverflow.com/questions/40392906/no-method-named-flush-found-for-type-stdiostdout-in-the-current-scope", "title": "no method named flush found for type std::io::Stdout in the current scope", "body": "<p>All the documentation I've found regarding flushing suggests that the proper way to flush stdout is as follows:</p>\n\n<pre><code>std::io::stdout().flush().expect(\"some error message\");\n</code></pre>\n\n<p>This results in </p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code>no method named flush found for type std::io::Stdout in the current scope\n</code></pre>\n</blockquote>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["generics", "struct", "types", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478139890, "post_id": 40392524, "comment_id": 68037076, "body": "<a href=\"http://play.integer32.com/?gist=00e9ae6747f1dbb01df4070e34591732&amp;version=stable\" rel=\"nofollow noreferrer\">Smaller example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1478140142, "post_id": 40392524, "comment_id": 68037145, "body": "I think that you are going to run into issues because you have two <code>impl</code>s that look like they can overlap, even though the associated types prevent it from actually happening. I&#39;d probably try implementing {a, the} trait for your two concrete types and then implement it for <code>Counter&lt;T&gt; where T: Counted</code> and delegate."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478158774, "post_id": 40392524, "comment_id": 68042609, "body": "@Shepmaster: I think that&#39;s an answer?"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478167427, "post_id": 40392524, "comment_id": 68047261, "body": "I would be interested in seeing an example of what you mean @Shepmaster - I think I understood what you meant but an example would be great."}, {"owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1478186752, "post_id": 40392524, "comment_id": 68060926, "body": "@Shepmaster I took your recommendation and implemented <code>Counted</code> for both <code>PlainCounter</code> and <code>AtomicCounter</code> and then implemented <code>Counter&lt;T&gt; where T: Counted</code> where the calls on <code>Counter</code> just delegate to its <code>counter</code> field and everything worked out fine. I did some minor tweaking to the example to get it more in line with this new approach, example is <a href=\"https://play.rust-lang.org/?gist=e091e5ceb783c67a1d36bb89c2679b54&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a> if ypu&#39;re interested."}], "answers": [{"comments": [{"owner": {"reputation": 17343, "user_id": 499609, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c2a8564c05a7124ded58e86a6c86f6ca?s=128&d=identicon&r=PG", "display_name": "Asherah", "link": "https://stackoverflow.com/users/499609/asherah"}, "edited": false, "score": 0, "creation_date": 1492848918, "post_id": 40408431, "comment_id": 74165248, "body": "I&#39;m finding it a little unclear \u2014 how do we actually implement functions in the inner trait which refer to <code>self</code>? It&#39;d appear <code>self</code> would be e.g. <code>(T, u8)</code>, but presumably since we&#39;re implementing <code>Deref&lt;Target=u8&gt;</code> we don&#39;t actually have a concrete <code>u8</code>."}, {"owner": {"reputation": 17343, "user_id": 499609, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c2a8564c05a7124ded58e86a6c86f6ca?s=128&d=identicon&r=PG", "display_name": "Asherah", "link": "https://stackoverflow.com/users/499609/asherah"}, "edited": false, "score": 0, "creation_date": 1492849694, "post_id": 40408431, "comment_id": 74165424, "body": "Figured it out: give <code>InnerFoo</code> a type variable <code>&lt;T&gt;</code>, then the trait functions&#39; first parameter can be <code>t: T</code>. Add <code>&lt;T&gt;</code> to the <code>(T, \u2026) : InnerFoo</code> constraint on Foo. Then call <code>&lt;(T, &lt;T as Deref&gt;::Target) as InnerFoo&lt;T&gt;&gt;::my_fn(self, \u2026)</code>. Finally, impls of InnerFoo need the additional constraint <code>where T : Deref&lt;Target=\u2026&gt;</code>. Then you can call <code>t.deref()</code> in that impl."}, {"owner": {"reputation": 17343, "user_id": 499609, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c2a8564c05a7124ded58e86a6c86f6ca?s=128&d=identicon&r=PG", "display_name": "Asherah", "link": "https://stackoverflow.com/users/499609/asherah"}, "edited": false, "score": 0, "creation_date": 1492850229, "post_id": 40408431, "comment_id": 74165538, "body": "You can also drop the first <code>T</code> in the tuple types this way."}], "tags": [], "owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "is_accepted": true, "score": 9, "last_activity_date": 1478196458, "creation_date": 1478196458, "answer_id": 40408431, "question_id": 40392524, "link": "https://stackoverflow.com/questions/40392524/conflicting-trait-implementations-even-though-associated-types-differ/40408431#40408431", "title": "Conflicting trait implementations even though associated types differ", "body": "<p>You can accomplish this pattern by defining a second trait that does the actual work, and is implemented for <code>(Counter&lt;'a, T&gt;, &lt;T as Deref&gt;::Target)</code>, and have the <code>Counter</code> trait call out to that implementation.</p>\n\n<p>I don't think that was very clear, but I think an example can illustrate well. Using Shepmaster's shorter example for clarity, we would go from this:</p>\n\n<pre><code>use std::ops::Deref;\n\ntrait Foo {}\n\nimpl&lt;T&gt; Foo for T\n    where T: Deref&lt;Target = u8&gt;\n{}\n\nimpl&lt;T&gt; Foo for T\n    where T: Deref&lt;Target = bool&gt;\n{}\n\nfn main() {}\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>use std::ops::Deref;\n\ntrait Foo {}\ntrait InnerFoo {}\n\nimpl&lt;T&gt; Foo for T\n    where T: Deref,\n          (T, &lt;T as Deref&gt;::Target): InnerFoo\n{}\n\nimpl&lt;T&gt; InnerFoo for (T, u8)\n{}\n\nimpl&lt;T&gt; InnerFoo for (T, bool)\n{}\n\nfn main() {}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 763, "user_id": 3799609, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3143d9049a55a963685c987503743964?s=128&d=identicon&r=PG&f=1", "display_name": "Ten", "link": "https://stackoverflow.com/users/3799609/ten"}, "is_accepted": false, "score": 2, "last_activity_date": 1617329885, "last_edit_date": 1617329885, "creation_date": 1568907415, "answer_id": 58014555, "question_id": 40392524, "link": "https://stackoverflow.com/questions/40392524/conflicting-trait-implementations-even-though-associated-types-differ/58014555#58014555", "title": "Conflicting trait implementations even though associated types differ", "body": "<p>Unfortunately this is not implemented in the language yet.</p>\n<p>There's this tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/20400\" rel=\"nofollow noreferrer\">rust-lang/rust#20400</a>.</p>\n<p>An RFC <a href=\"https://github.com/rust-lang/rfcs/pull/1672#issuecomment-262152934\" rel=\"nofollow noreferrer\">rust-lang/rfcs#1672</a> was also proposed to solve this problem but was then postponed waiting for <a href=\"https://github.com/rust-lang/chalk\" rel=\"nofollow noreferrer\">Chalk integration</a> which will make it easier to implement.</p>\n<p>In the meantime, you'll have to use the workaround proposed <a href=\"https://stackoverflow.com/a/40408431/3799609\">above</a>.</p>\n"}], "owner": {"reputation": 1155, "user_id": 4641854, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/ebe283afcbdb0e4a9d1f20e26e969de1?s=128&d=identicon&r=PG", "display_name": "jeromefroe", "link": "https://stackoverflow.com/users/4641854/jeromefroe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 418, "favorite_count": 1, "accepted_answer_id": 40408431, "answer_count": 2, "score": 8, "last_activity_date": 1617329885, "creation_date": 1478137322, "last_edit_date": 1478139624, "question_id": 40392524, "link": "https://stackoverflow.com/questions/40392524/conflicting-trait-implementations-even-though-associated-types-differ", "title": "Conflicting trait implementations even though associated types differ", "body": "<p>I'm trying to an create a generic struct which wraps an <code>isize</code> or an <code>AtomicIsize</code>, but I am running into an error when I try to implement a trait for both possible implementations of the struct. I created a minimal example which demonstrates my issue below. </p>\n\n<pre><code>use std::sync::atomic::{AtomicIsize, Ordering};\nuse std::ops::Deref;\nuse std::marker::PhantomData;\n\npub trait Counted {\n    fn inc(&amp;self, value: isize);\n}\n\npub type PlainCounter = isize;\npub type AtomicCounter = AtomicIsize;\n\n\npub struct Counter&lt;'a, T: 'a&gt; {\n    counter: T,\n    phantom: PhantomData&lt;&amp;'a T&gt;,\n}\n\nimpl&lt;'a, T&gt; Counter&lt;'a, T&gt;\n    where T: Deref&lt;Target = PlainCounter&gt;\n{\n    pub fn new(counter: T) -&gt; Self {\n        Counter {\n            counter: counter,\n            phantom: PhantomData,\n        }\n    }\n}\n\nimpl&lt;'a, T&gt; Counted for Counter&lt;'a, T&gt;\n    where T: Deref&lt;Target = PlainCounter&gt;\n{\n    fn inc(&amp;self, value: isize) {\n        self.counter += 1;\n    }\n}\n\nimpl&lt;'a, T&gt; Counter&lt;'a, T&gt;\n    where T: Deref&lt;Target = AtomicCounter&gt;\n{\n    pub fn new(counter: T) -&gt; Self {\n        Counter {\n            counter: counter,\n            phantom: PhantomData,\n        }\n    }\n}\n\nimpl&lt;'a, T&gt; Counted for Counter&lt;'a, T&gt;\n    where T: Deref&lt;Target = AtomicCounter&gt;\n{\n    fn inc(&amp;self, value: isize) {\n        self.counter.fetch_add(value, Ordering::SeqCst);\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=ac19a5a16a0a7031fa27f15894d02733&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>The error I get is that the compiler found <code>conflicting implementations of trait `Counted` for type `Counter&lt;'_, _&gt;`</code>. It seems that the compiler cannot determine that the implementations are for two different types <code>T</code>, namely <code>T: Deref&lt;Target = PlainCounter&gt;</code> and <code>T: Deref&lt;Target = AtomicCounter&gt;</code>. Is there perhaps a way to provide additional information to the compiler so it can distinguish between the two cases, or am I on the wrong path entirely?</p>\n"}]