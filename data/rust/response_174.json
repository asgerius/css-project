[{"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 533, "user_id": 1368894, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/de66f14740a74532b61770e058996e51?s=128&d=identicon&r=PG", "display_name": "tazjin", "link": "https://stackoverflow.com/users/1368894/tazjin"}, "edited": false, "score": 0, "creation_date": 1525964295, "post_id": 50263215, "comment_id": 87568294, "body": "This seems to have solved my problem, thanks for pointing it out! After a re-read of some <code>crius</code> source code I also noticed that it uses the function pointer types internally in some places."}], "tags": [], "owner": {"reputation": 17388, "user_id": 921321, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3f4c4737cb30134f58cc76f06ef5113a?s=128&d=identicon&r=PG", "display_name": "Lukazoid", "link": "https://stackoverflow.com/users/921321/lukazoid"}, "is_accepted": true, "score": 6, "last_activity_date": 1525942647, "last_edit_date": 1525942647, "creation_date": 1525906888, "answer_id": 50263215, "question_id": 50261527, "link": "https://stackoverflow.com/questions/50261527/is-it-possible-to-store-a-rust-struct-containing-a-closure-in-a-different-struct/50263215#50263215", "title": "Is it possible to store a Rust struct containing a closure in a different struct?", "body": "<p>I currently know of no way a closure may be used as part of a return type other than using <code>impl</code> or <code>Box</code>, both of which you have mentioned and cannot be used in this situation.</p>\n\n<p>An alternative would be to use a function pointer instead of a closure, like so:</p>\n\n<pre><code>fn return_command_instance() -&gt; Command&lt;u8, u8, fn(u8) -&gt; Result&lt;u8, Box&lt;CommandError&gt;&gt;&gt; {\n    Command::define(|n: u8| Ok(n * 2))\n}\n</code></pre>\n\n<p>Notice the lower case <code>fn</code> to signify a function pointer and not the trait <code>Fn</code>. This is explained in more details in the chapter on <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-05-advanced-functions-and-closures.html#function-pointers\" rel=\"nofollow noreferrer\">Advanced Functions &amp; Closures</a>.</p>\n\n<p>This will only work if you do not capture any variables in the function, if you do it will be compiled into a closure.</p>\n"}], "owner": {"reputation": 533, "user_id": 1368894, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/de66f14740a74532b61770e058996e51?s=128&d=identicon&r=PG", "display_name": "tazjin", "link": "https://stackoverflow.com/users/1368894/tazjin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1080, "favorite_count": 1, "accepted_answer_id": 50263215, "answer_count": 1, "score": 9, "last_activity_date": 1525942647, "creation_date": 1525897728, "last_edit_date": 1525897954, "question_id": 50261527, "link": "https://stackoverflow.com/questions/50261527/is-it-possible-to-store-a-rust-struct-containing-a-closure-in-a-different-struct", "title": "Is it possible to store a Rust struct containing a closure in a different struct?", "body": "<p>The <a href=\"https://github.com/reneweb/crius\" rel=\"noreferrer\">Crius</a> library provides\ncircuit-breaker-like functionality for Rust. Crius defines a struct called <a href=\"https://docs.rs/crius/0.3.1/crius/command/struct.Command.html\" rel=\"noreferrer\"><code>Command</code></a> which looks like this:</p>\n\n<pre><code>pub struct Command&lt;P, T, CMD&gt;\nwhere\n    T: Send,\n    CMD: Fn(P) -&gt; Result&lt;T, Box&lt;CommandError&gt;&gt; + Sync + Send,\n{\n    pub config: Option&lt;Config&gt;,\n    pub cmd: CMD,\n    phantom_data: PhantomData&lt;P&gt;,\n}\n</code></pre>\n\n<p>Is it possible to store an instance of <code>Command</code> as a field in a different struct?</p>\n\n<p>I started out trying to return a value of this type from a\nfunction. Simply instantiating the type is no problem:</p>\n\n<pre><code>/// This function constructs a simple instance of `Command&lt;P, T, CMD&gt;` with the\n/// types set to:\n///\n///     P ~ u8\n///     T ~ u8\n///     CMD: Fn(u8) -&gt; Result&lt;u8, Box&lt;CommandError&gt;&gt; + Send + Sync\n///\n/// This function compiles fine. However, there is no *concrete* type\n/// for `CMD`. In compiler output it will be referred to as an\n/// \"anonymous\" type looking like this:\n///\n///    Command&lt;u8, u8, [closure@src/lib.rs:19:21: 19:38]&gt;\nfn simple_command_instance() {\n    let _ = Command::define(|n: u8| Ok(n * 2));\n}\n</code></pre>\n\n<p>It becomes more difficult when writing a return type for the\nfunction:</p>\n\n<pre><code>fn return_command_instance() -&gt; Command&lt;u8, u8, ???&gt; {\n                                                ^\n                                                |\n                          What goes here? -------\n\n    Command::define(|n: u8| Ok(n * 2))\n}\n</code></pre>\n\n<p>The type inferred by the compiler is anonymous - it can't be put in\nthere. Many times when closures are passed around, people resort to\nusing a <code>Box&lt;F: Fn&lt;...&gt;&gt;</code>, however there is no implementation for\n<code>impl Fn&lt;T&gt; for Box&lt;Fn&lt;T&gt;&gt;</code> - so boxing the type breaks the\nconstraints given by <code>crius::command::Command</code>.</p>\n\n<p>In versions of Rust that have the new <code>impl Trait</code> feature (such as the\nupcoming stable release), this is possible:</p>\n\n<pre><code>/// Use new `impl Trait` syntax as a type parameter in the return\n/// type:\nfn impl_trait_type_param() -&gt; Command&lt;u8, u8, impl Fn(u8) -&gt; Result&lt;u8, Box&lt;CommandError&gt;&gt;&gt; {\n    Command::define(|n: u8| Ok(n * 2))\n}\n</code></pre>\n\n<p>This does not work in stable Rust and <code>impl Trait</code> can only\nbe used in return types, not in struct members.</p>\n\n<p>Trying to propagate the generic type ends up looking something like\nthis:</p>\n\n<pre><code>fn return_cmd_struct&lt;F&gt;() -&gt; Command&lt;u8, u8, F&gt;\nwhere\n    F: Fn(u8) -&gt; Result&lt;u8, Box&lt;CommandError&gt;&gt; + Send + Sync,\n{\n    Command::define(|n: u8| Ok(n * 2))\n}\n</code></pre>\n\n<p>But this does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:33:21\n   |\n33 |     Command::define(|n: u8| Ok(n * 2))\n   |                     ^^^^^^^^^^^^^^^^^ expected type parameter, found closure\n   |\n   = note: expected type `F`\n              found type `[closure@src/lib.rs:33:21: 33:38]`\n</code></pre>\n\n<p>Again, I don't know of a way to specify that concrete type in the\nresult signature.</p>\n\n<hr>\n\n<p>Even if propagating the type as a generic parameter worked, it would\nstill be an issue for our specific use-case. We want to store a\n<code>Command</code> as part of an <a href=\"https://github.com/actix/actix\" rel=\"noreferrer\">actix</a> actor which registers as a\n<a href=\"https://docs.rs/actix/0.5.6/actix/registry/trait.SystemService.html\" rel=\"noreferrer\"><code>SystemService</code></a>, which requires a <code>Default</code> implementation, which\nagain eventually forces us to provide a concrete type.</p>\n\n<p>If anyone has any ideas about possible ways to do this, please share\nthem. Definitely knowing that it <em>isn't</em> possible would also be nice.</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1525885597, "post_id": 50258359, "comment_id": 87535158, "body": "Why not just implement <code>Send</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525885652, "post_id": 50258359, "comment_id": 87535197, "body": "Highly related: <a href=\"https://stackoverflow.com/q/36649865/155423\">How can I guarantee that a type that doesn&#39;t implement Sync can actually be safely shared between threads?</a>"}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525943805, "post_id": 50258359, "comment_id": 87556305, "body": "Morning shepmaster! I actually didn&#39;t know that you could implement <code>Send</code> manually. As I understand it (from reading the question you linked) I should be able to do a <code>unsafe impl Sync for Storage {};</code>. Then the compiler is trusting me that the pointer is not mutably shared elsewhere. Is that correct?"}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525943883, "post_id": 50258359, "comment_id": 87556346, "body": "Is that the only way I can achieve what I&#39;m looking for? If there&#39;s a way to do it without <code>unsafe</code> I&#39;d probably favour that. Thanks."}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525946383, "post_id": 50258359, "comment_id": 87557781, "body": "I meant <code>unsafe impl Send for Storage {};</code>. Here&#39;s a link to the playground where that code does indeed compile: <a href=\"https://play.rust-lang.org/?gist=721f662f26a3aaf9ec4f209143b547d4&amp;version=nightly&amp;mode=debug\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1526470182, "post_id": 50341075, "comment_id": 87755240, "body": "So, I am taking into my own hands t ensure that what the pointer points to still lives at any time to containing struct lives?"}, {"owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "reply_to_user": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 1, "creation_date": 1526519450, "post_id": 50341075, "comment_id": 87779910, "body": "Yes, lifetime of raw pointers is not checked by Rust. They have all the freedom, and potential crashes, of C pointers. See <code>ptr</code>&#39;s <code>as_ref</code> and <code>PhantomData</code> for adding more type safety around wrapper structs. That&#39;s separate from <code>Send</code>/<code>Sync</code>."}], "tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": true, "score": 5, "last_activity_date": 1526519506, "last_edit_date": 1526519506, "creation_date": 1526347688, "answer_id": 50341075, "question_id": 50258359, "link": "https://stackoverflow.com/questions/50258359/can-a-struct-containing-a-raw-pointer-implement-send-and-be-ffi-safe/50341075#50341075", "title": "Can a struct containing a raw pointer implement Send and be FFI safe?", "body": "<p>By default Rust assumes <code>*mut T</code> is not safe to send between threads, and this means structs containing it are not safe either.</p>\n\n<p>You can tell Rust that it is safe indeed:</p>\n\n<pre><code>unsafe impl Send for Storage {}\n</code></pre>\n\n<p>It relies entirely on your knowledge of how C uses data behind this pointer. Implementing <code>Send</code> means C won't rely on thread-local storage or thread-specific locks when using the object behind this pointer (paradoxically, that's true for most \"thread-unsafe\" C code). </p>\n\n<p>It doesn't require C to handle access from multiple threads at once \u2014 that's what <code>Sync</code> is for.</p>\n"}], "owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3265, "favorite_count": 2, "accepted_answer_id": 50341075, "answer_count": 1, "score": 8, "last_activity_date": 1526519506, "creation_date": 1525884358, "last_edit_date": 1525885560, "question_id": 50258359, "link": "https://stackoverflow.com/questions/50258359/can-a-struct-containing-a-raw-pointer-implement-send-and-be-ffi-safe", "title": "Can a struct containing a raw pointer implement Send and be FFI safe?", "body": "<p>I have a scenario where Rust will call C to <code>malloc</code> a buffer and stash the resulting pointer into a struct. Later on, the struct will be moved to a thread and passed to a C function which mutates it.</p>\n\n<p>The naive approach to my problem looks like this (<a href=\"https://play.rust-lang.org/?gist=46d55dabf88e55b48c5d77ecb5ec62ff&amp;version=nightly&amp;mode=debug\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>extern crate libc;\n\nuse libc::{c_void, malloc, size_t};\nuse std::thread;\n\nconst INITIAL_CAPACITY: size_t = 8;\n\nextern \"C\" {\n    fn mutate(s: *mut Storage);\n}\n\n#[repr(C)]\nstruct Storage {\n    #[allow(dead_code)]\n    buf: *mut c_void,\n    capacity: usize,\n}\n\nfn main() {\n    let buf = unsafe { malloc(INITIAL_CAPACITY) };\n    let mut s = Storage {\n        buf: buf,\n        capacity: INITIAL_CAPACITY,\n    };\n    thread::spawn(move || {\n        unsafe {\n            mutate(&amp;mut s); // mutates s.val, maybe reallocates it, updating s.capacity if so.\n        }\n    }).join()\n        .unwrap();\n}\n</code></pre>\n\n<p>Gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `*mut libc::c_void: std::marker::Send` is not satisfied in `[closure@src/main.rs:26:19: 30:6 s:Storage]`\n  --&gt; src/main.rs:26:5\n   |\n26 |     thread::spawn(move || {\n   |     ^^^^^^^^^^^^^ `*mut libc::c_void` cannot be sent between threads safely\n   |\n   = help: within `[closure@src/main.rs:26:19: 30:6 s:Storage]`, the trait `std::marker::Send` is not implemented for `*mut libc::c_void`\n   = note: required because it appears within the type `Storage`\n   = note: required because it appears within the type `[closure@src/main.rs:26:19: 30:6 s:Storage]`\n   = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>Which is the compiler's way of saying that because a <code>*mut c_void</code> doesn't implement <code>Send</code>, neither does <code>Storage</code> so you can't move it into the thread closure.</p>\n\n<p>I thought that using a <code>Unique</code> pointer might solve this. Let's try it (<a href=\"https://play.rust-lang.org/?gist=6216c6b11ba896b5b2dd9f152015e308&amp;version=nightly&amp;mode=debug\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>#![feature(ptr_internals)]\nextern crate libc;\n\nuse libc::{c_void, malloc, size_t};\nuse std::ptr::Unique;\nuse std::thread;\n\nconst INITIAL_CAPACITY: size_t = 8;\n\nextern \"C\" {\n    fn mutate(s: *mut Storage);\n}\n\n#[repr(C)]\nstruct Storage {\n    #[allow(dead_code)]\n    buf: Unique&lt;c_void&gt;,\n    capacity: usize,\n}\n\nfn main() {\n    let buf = Unique::new(unsafe { malloc(INITIAL_CAPACITY) }).unwrap();\n    let mut s = Storage {\n        buf: buf,\n        capacity: INITIAL_CAPACITY,\n    };\n    thread::spawn(move || {\n        unsafe {\n            mutate(&amp;mut s); // mutates s.val, maybe reallocates it, updating s.capacity if so.\n        }\n    }).join()\n        .unwrap();\n}\n</code></pre>\n\n<p>But this gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: `extern` block uses type `std::ptr::Unique&lt;libc::c_void&gt;` which is not FFI-safe: this struct has unspecified layout\n  --&gt; src/main.rs:11:18\n   |\n11 |     fn mutate(s: *mut Storage);\n   |                  ^^^^^^^^^^^^\n   |\n   = note: #[warn(improper_ctypes)] on by default\n   = help: consider adding a #[repr(C)] or #[repr(transparent)] attribute to this struct\n</code></pre>\n\n<p>Is there a way to have the <code>Storage</code> struct both implement <code>Send</code> and have mutable pointers to its instances be FFI safe?</p>\n"}, {"tags": ["rust", "qml", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 123, "user_id": 7450567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PiYHC.png?s=128&g=1", "display_name": "Ardakaniz", "link": "https://stackoverflow.com/users/7450567/ardakaniz"}, "edited": false, "score": 0, "creation_date": 1525884257, "post_id": 50258237, "comment_id": 87534476, "body": "@Ardakaniz it may be worth (politely!) asking the maintainer to release a new version in that case."}, {"owner": {"reputation": 123, "user_id": 7450567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PiYHC.png?s=128&g=1", "display_name": "Ardakaniz", "link": "https://stackoverflow.com/users/7450567/ardakaniz"}, "edited": false, "score": 0, "creation_date": 1525884403, "post_id": 50258237, "comment_id": 87534561, "body": "The last modification was 1 year ago, is it still maintened?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 123, "user_id": 7450567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PiYHC.png?s=128&g=1", "display_name": "Ardakaniz", "link": "https://stackoverflow.com/users/7450567/ardakaniz"}, "edited": false, "score": 3, "creation_date": 1525884468, "post_id": 50258237, "comment_id": 87534592, "body": "@Ardakaniz I don&#39;t actually know, but letting the owners know there is interest <i>might</i> help spur them to continue work. Or maybe other people (or you?) will step up to help maintain it if it&#39;s useful!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1525883918, "creation_date": 1525883918, "answer_id": 50258237, "question_id": 50258044, "link": "https://stackoverflow.com/questions/50258044/cargo-fails-to-compile-rust-qml-on-windows-10/50258237#50258237", "title": "Cargo fails to compile rust-qml on Windows 10", "body": "<p><a href=\"https://github.com/White-Oak/qml-rust/blob/v0.0.9/build.rs#L24-L28\" rel=\"nofollow noreferrer\">QML 0.0.9's build script doesn't support Windows</a>.</p>\n\n<p>It appears that support for Windows was added in <a href=\"https://github.com/White-Oak/qml-rust/commit/80ccad263b233166aa0bca2bb5d2a3dfe16d821e#diff-a7b0a2dee0126cddf994326e705a91ea\" rel=\"nofollow noreferrer\">80ccad26</a>, which seemingly hasn't been released yet. </p>\n\n<p>You will need to use the version <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\" rel=\"nofollow noreferrer\">from the git repository</a> instead:</p>\n\n<pre><code>[dependencies]\nqml = { git = \"https://github.com/White-Oak/qml-rust\" }\n</code></pre>\n"}], "owner": {"reputation": 123, "user_id": 7450567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PiYHC.png?s=128&g=1", "display_name": "Ardakaniz", "link": "https://stackoverflow.com/users/7450567/ardakaniz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 121, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1525883918, "creation_date": 1525883225, "last_edit_date": 1525883560, "question_id": 50258044, "link": "https://stackoverflow.com/questions/50258044/cargo-fails-to-compile-rust-qml-on-windows-10", "title": "Cargo fails to compile rust-qml on Windows 10", "body": "<p>I want to make a GUI application using Rust on Windows 10 and I found <a href=\"https://crates.io/crates/qml\" rel=\"nofollow noreferrer\">the qml crate</a> which looks nice.</p>\n\n<p>I added in my <code>Cargo.toml</code> file this dependency: <code>qml = \"0.0.9\"</code>, but when I run <code>cargo build</code>, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&gt; cargo build\n   Compiling qml v0.0.9\nerror: failed to run custom build command for `qml v0.0.9`\nprocess didn't exit successfully: `project\\target\\debug\\build\\qml-018515e4bf91189d\\build-script-build` (exit code: 101)\n--- stderr\nthread 'main' panicked at 'failed to execute process: The specified file cannot be found. (os error 2)', user\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\qml-0.0.9\\build.rs:28:33\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>I looked at the <code>build.rs</code> file and I saw this line:</p>\n\n<pre><code>fs::copy(Path::new(&amp;manifest_dir).join(\"build_lib.sh\"), Path::new(&amp;out_dir).join(\"build_lib.sh\")).unwrap();\n</code></pre>\n\n<p>Maybe I don't have the rights to do that on my account, so I tried to run it as admin, but cargo and rustc are installed in my user folder.</p>\n\n<p>When I change the path, I get the error <code>error: no default toolchain configured</code>.</p>\n"}, {"tags": ["unix", "linker", "rust", "ld", "gold-linker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525884123, "post_id": 50257514, "comment_id": 87534422, "body": "You should try replacing the Rust object file with a C object file. It&#39;s possible that it spits out some metadata that gold doesn&#39;t yet know how to handle."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525884562, "post_id": 50257514, "comment_id": 87534650, "body": "@Shepmaster Note that Rust is emitting a full-fledged static library. I&#39;m certain that gold would have no problem linking a simple C object file instead - that&#39;s what it was designed for."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525887424, "post_id": 50257514, "comment_id": 87536086, "body": "I don&#39;t understand where did you define <code>baz()</code> ?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525888121, "post_id": 50257514, "comment_id": 87536450, "body": "@Stargateur I intentionally didn&#39;t. It should be undefined in <code>out.o</code>. Note I&#39;m asking the linker to produce a relocatable output. The idea is that later one, someone can link <code>out.o</code> with something that <i>does</i> define <code>baz</code>."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1525891115, "post_id": 50257514, "comment_id": 87537959, "body": "(Note that <code>--emit=obj</code> is not a good idea in any case: the static library that <code>--crate-type=staticlib</code> produces includes object files which collectively define all of extra bells and whistles, like <code>panic</code>, that you need.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525892463, "post_id": 50257514, "comment_id": 87538669, "body": "<i><code>--emit=obj</code> is not a good idea in any case</i> \u2014 Well, you will have to add in the Rust standard library yourself, sure, but it&#39;s a good idea when you want to have multiple Rust-created static libraries, otherwise you get conflicting symbols."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525897442, "post_id": 50257514, "comment_id": 87540987, "body": "Debugging has shown that the section <code>.eh_frame</code> is a source of this error."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525901254, "post_id": 50257514, "comment_id": 87542724, "body": "@Shepmaster What makes you think this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525904943, "post_id": 50257514, "comment_id": 87543940, "body": "@Alec I edited the source of gold to print out the section and that&#39;s the last one before it asserts."}], "answers": [{"comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1525921797, "post_id": 50264339, "comment_id": 87547763, "body": "<a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=23155\" rel=\"nofollow noreferrer\">Done</a>. I&#39;m still unsure if this is actually a bug, or rather if it is the Rust static library that is defective in a way that <code>ld</code> and <code>ld.bfd</code> allow."}], "tags": [], "owner": {"reputation": 162629, "user_id": 50617, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YFykQ.png?s=128&g=1", "display_name": "Employed Russian", "link": "https://stackoverflow.com/users/50617/employed-russian"}, "is_accepted": false, "score": 0, "last_activity_date": 1525916956, "creation_date": 1525916956, "answer_id": 50264339, "question_id": 50257514, "link": "https://stackoverflow.com/questions/50257514/gold-fails-to-make-a-relocatable-object-file-from-a-static-library/50264339#50264339", "title": "Gold fails to make a relocatable object file from a static library", "body": "<blockquote>\n  <p>What does the error mean?</p>\n</blockquote>\n\n<p>It means that Gold is failing internal assertion. Probably <a href=\"https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=blob;f=gold/output.h;h=c2458831e3671278ce999be99f3d1be14c625716;hb=HEAD#l3382\" rel=\"nofollow noreferrer\">this one</a>.</p>\n\n<blockquote>\n  <p>How can I achieve the same relocatable object output with ld.gold as with ld and ld.bfd</p>\n</blockquote>\n\n<p>You need to either fix Gold to handle this input, or to change the input so it doesn't trigger the bug.</p>\n\n<p>Since neither you nor I understand exactly what the bug triggering conditions are, the first step should be to file a bug in bugzilla.</p>\n\n<p>There is already a very similar <a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=15861\" rel=\"nofollow noreferrer\">bug</a>. Not sure if you are hitting the same issue though.</p>\n"}, {"tags": [], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "is_accepted": true, "score": 1, "last_activity_date": 1525998078, "creation_date": 1525998078, "answer_id": 50283244, "question_id": 50257514, "link": "https://stackoverflow.com/questions/50257514/gold-fails-to-make-a-relocatable-object-file-from-a-static-library/50283244#50283244", "title": "Gold fails to make a relocatable object file from a static library", "body": "<p><a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=23155\" rel=\"nofollow noreferrer\">Reported here.</a> Turns out this is already fixed in trunk, so I guess the solution is to wait until binutils 2.31 (or build binutils from scratch).</p>\n"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 151, "favorite_count": 2, "accepted_answer_id": 50283244, "answer_count": 2, "score": 4, "last_activity_date": 1525998078, "creation_date": 1525881324, "last_edit_date": 1525892378, "question_id": 50257514, "link": "https://stackoverflow.com/questions/50257514/gold-fails-to-make-a-relocatable-object-file-from-a-static-library", "title": "Gold fails to make a relocatable object file from a static library", "body": "<p>Let me preface this by saying that I'm a noob in things related to linkers.  If something I say seems like it makes no sense, it probably doesn't - please call me out on it.</p>\n\n<hr>\n\n<p>I've got the following files:</p>\n\n<ul>\n<li><p><code>bar.rs</code></p>\n\n<pre><code>#[no_mangle]\npub extern fn bar(x: isize) -&gt; isize { x + 1 }\n</code></pre></li>\n<li><p><code>foo.c</code></p>\n\n<pre><code>extern int bar(int);\nextern int baz(int);\nint foo(int x) { return bar(x) + baz(x); }\n</code></pre></li>\n</ul>\n\n<p>I can link these into one relocatable object file with:</p>\n\n<pre><code>$ rustc --crate-type=staticlib bar.rs -o bar.a\n$ gcc -c foo.c -o foo.o\n$ ld -r foo.o bar.a -o out.o\n</code></pre>\n\n<p>I'm not sure what is happening under the hood, but I sure do get the output I wanted: <code>bar</code> and <code>foo</code> are defined while <code>baz</code> isn't.</p>\n\n<pre><code>$ nm out.o | grep '\\(foo\\|bar\\|baz\\)$'\n0000000000000000 T bar\n                 U baz\n0000000000000000 T foo\n</code></pre>\n\n<p>Exactly the same thing happens if I replace <code>ld</code> with <code>ld.bfd</code>. However, things fall apart with <code>ld.gold</code>.</p>\n\n<pre><code>$ ld.gold -r foo.o bar.a -o out.o\nld.gold: internal error in set_info_section, at ../../gold/output.h:3198\n</code></pre>\n\n<p>This is with both <code>ld.gold</code> packaged with binutils 2.24 and 2.26.</p>\n\n<p>The problem persists with binutils 2.30, although the line number I get is different:</p>\n\n<pre><code>$ ld.gold -r foo.o bar.a -o out.o\nld.gold: internal error in set_info_section, at ../../gold/output.h:3386\n</code></pre>\n\n<p>Also, the error persists even with <code>--emit=obj</code> instead of <code>--crate-type=staticlib</code></p>\n\n<p>So:</p>\n\n<ul>\n<li>What does the error mean?</li>\n<li>How can I achieve the same relocatable object output with <code>ld.gold</code> as with <code>ld</code> and <code>ld.bfd</code>?</li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "edited": false, "score": 0, "creation_date": 1525880685, "post_id": 50256949, "comment_id": 87532471, "body": "Thanks for the thoughtful answer and for the link to the API guidelines \u2014 it&#39;s a good read.  Do I understand correctly, that if I add <code>impl&lt;&#39;a, U: ?Sized + T&gt; T for &amp;&#39;a U { }</code>, then I won&#39;t need to explicitly add the lifetime parameter to the definition of <code>S</code>?"}, {"owner": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "edited": false, "score": 0, "creation_date": 1525881010, "post_id": 50256949, "comment_id": 87532674, "body": "One further question: if such derived trait implementations for &amp;&#39;a U and Box&lt;U&gt; are useful, why aren&#39;t they automatically produced by the compiler? Are there any downsides except for compilation time?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "edited": false, "score": 1, "creation_date": 1525881019, "post_id": 50256949, "comment_id": 87532683, "body": "@OlegEterevsky From <code>S</code> point of view, it will accept any type parameter as long as it implements the trait. When that type has a lifetime, the compiler will keep track of it."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "edited": false, "score": 1, "creation_date": 1525881276, "post_id": 50256949, "comment_id": 87532840, "body": "@OlegEterevsky Not all traits should have an inheriting behaviour on reference types. For example, this is the case for traits with consuming methods (taking self by value)."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 2, "last_activity_date": 1525879472, "creation_date": 1525879472, "answer_id": 50256949, "question_id": 50256435, "link": "https://stackoverflow.com/questions/50256435/what-are-the-best-practices-for-implementing-generic-code-that-can-be-reused-ove/50256949#50256949", "title": "What are the best practices for implementing generic code that can be reused over different types of ownership: &amp;&#39;a T, or Box&lt;T&gt;, or A: T?", "body": "<p>This can be a bit case dependent, but when possible, you should prefer taking the value directly (as in, some <code>T: Trait</code>).</p>\n\n<p>There is a similar API guideline (<a href=\"https://rust-lang-nursery.github.io/api-guidelines/interoperability.html#c-rw-value\" rel=\"nofollow noreferrer\">C-RW-VALUE</a>), which advises interfaces to take a parameter <code>T</code> directly, rather than a mutable reference to a value which implements <code>std::io::Read</code> or <code>std::io::Write</code>. This works because <code>Read</code> and <code>Write</code> are also implemented for mutable references to arbitrary <code>T</code> types implementing these traits.</p>\n\n<p>If you are in control of that trait, following the same approach is quite idiomatic and addresses your concern without the need for so many constructor functions.</p>\n\n<pre><code>trait T { }\n// generic implementations for references and smart container types follow\nimpl&lt;'a, U: ?Sized + T&gt; T for &amp;'a U { }\nimpl&lt;U: ?Sized + T&gt; T for Box&lt;U&gt; { }\n\nstruct A { }\nimpl T for A { }\n\nfn main() {\n    let a = A {};\n    let s1 = S::new(a);\n    let s2 = S::new(&amp;a);\n    let s3 = S::new(&amp;a as &amp;T);\n    let s4 = S::new(Box::new(a));\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31215418/1233251\">General way to own a value (don&#39;t specify `Rc` or `Box`)</a></li>\n</ul>\n"}], "owner": {"reputation": 1074, "user_id": 430693, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/de186c14eba2fe3d03fee2887ec2b1f3?s=128&d=identicon&r=PG", "display_name": "Oleg Eterevsky", "link": "https://stackoverflow.com/users/430693/oleg-eterevsky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 53, "favorite_count": 0, "accepted_answer_id": 50256949, "answer_count": 1, "score": 2, "last_activity_date": 1525903941, "creation_date": 1525877849, "last_edit_date": 1525903941, "question_id": 50256435, "link": "https://stackoverflow.com/questions/50256435/what-are-the-best-practices-for-implementing-generic-code-that-can-be-reused-ove", "title": "What are the best practices for implementing generic code that can be reused over different types of ownership: &amp;&#39;a T, or Box&lt;T&gt;, or A: T?", "body": "<p>I have a trait <code>T</code>. I am implementing a struct <code>S</code> that owns or keeps a reference to an object that implements trait <code>T</code>. It can be done in one of a few ways:</p>\n\n<ol>\n<li><pre><code>struct S&lt;A: T&gt; {\n    field: A,\n}\n</code></pre></li>\n<li><pre><code>struct S&lt;A: T, 'a&gt; {\n    field: &amp;'a A,\n}\n</code></pre></li>\n<li><pre><code>struct S&lt;'a&gt; {\n    field: &amp;'a T,\n}\n</code></pre></li>\n<li><pre><code>struct S {\n    field: Box&lt;T&gt;,\n}\n</code></pre></li>\n</ol>\n\n<p>... and so on.</p>\n\n<p>In different contexts, different ownership models might be useful. </p>\n\n<p>I would like to implement <code>S</code> in such a way that it could be created in any of the following ways:</p>\n\n<pre><code>trait T { }\nstruct A { }\nimpl T for A { }\n\nfn main() {\n    let a = A {};\n    let s1 = S::new_owning(a);\n    let s2 = S::new_from_ref(&amp;a);\n    let s3 = S::new_from_trait_ref(&amp;a as &amp;T);\n    let s4 = S::new_from_boxed_trait(Box::new(a));\n}\n</code></pre>\n"}, {"tags": ["rust", "operators"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1525873188, "post_id": 50254315, "comment_id": 87527148, "body": "Possibly related: <a href=\"https://stackoverflow.com/questions/39335747/where-are-rusts-boolean-and-other-primitive-types-implemented\">Where are Rust&#39;s boolean and other primitive types implemented?</a>."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1525874486, "post_id": 50254315, "comment_id": 87528178, "body": "@ljedrz more than related. Althoughs the question is totally different, the answers match very well. I&#39;m not sure if this is a duplicate now, because the answers here add information that would not match your question."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1525874713, "post_id": 50254315, "comment_id": 87528327, "body": "I think this question is interesting on its own; in this case the source <i>is</i> available in the <code>std</code> docs and its link to the intrinsics is not obvious at all."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1525874264, "creation_date": 1525874264, "answer_id": 50255262, "question_id": 50254315, "link": "https://stackoverflow.com/questions/50254315/are-operators-in-core-really-defined-circularly/50255262#50255262", "title": "Are operators in core really defined circularly?", "body": "<blockquote>\n  <p>How does the compiler know to add two numbers without falling into a recursive loophole?</p>\n</blockquote>\n\n<p>Because the compiler is the compiler, and the compiler knows it doesn't need an <code>Add</code> implementation to add two numbers.  If it's doing constant folding, it just adds them.  If it's generating code, it tells LLVM to add them at runtime.</p>\n\n<p>Those <code>Add</code> implementations aren't there to tell the compiler how to add numbers, they're to implement <code>Add</code> for numbers so that user code can add numbers via the <code>Add</code> trait just like any user-defined type.  If those implementations didn't exist, then you wouldn't be able to add numbers in generic methods, because they wouldn't implement <code>Add</code>.</p>\n\n<p>To put it another way: <code>Add</code> is what the compiler uses when it doesn't otherwise know how to add things.  But it already knows how to add numbers, so it doesn't need them.  They're provided for consistency with other types.</p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1525875219, "last_edit_date": 1525875219, "creation_date": 1525874359, "answer_id": 50255302, "question_id": 50254315, "link": "https://stackoverflow.com/questions/50254315/are-operators-in-core-really-defined-circularly/50255302#50255302", "title": "Are operators in core really defined circularly?", "body": "<p>The implementations of <code>Add</code> that rely on the addition operator <code>+</code> in the end need to point to operations on primitives (eg. integers) and arithmetic operations on <em>those</em> are implemented using <a href=\"https://en.wikipedia.org/wiki/Intrinsic_function\" rel=\"nofollow noreferrer\">compiler built-ins</a>.</p>\n\n<p>What is more, the primitives themselves are compiler built-ins as well - note that you won't be able to find their sources in the <code>std</code> documentation.</p>\n\n<p>The bottom line is that primitive types don't actually <em>need</em> the code provided by the implementations of <code>Add</code> and other artithmetic operators' traits at all - these functionalities are provided by the compiler's intrinsics. Their trait implementations are provided for the purposes of generics.</p>\n"}], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 326, "favorite_count": 1, "accepted_answer_id": 50255262, "answer_count": 2, "score": 13, "last_activity_date": 1525886659, "creation_date": 1525871615, "last_edit_date": 1525886659, "question_id": 50254315, "link": "https://stackoverflow.com/questions/50254315/are-operators-in-core-really-defined-circularly", "title": "Are operators in core really defined circularly?", "body": "<p>We can implement the traits in <code>core::ops</code> to define the behavior of operators for our types. The traits themselves are annotated with <code>#[lang  =...]</code> attributes so the compiler knows which traits and operators belong together.</p>\n\n<p>For example, the <code>Add</code> implementation for primitive types looks like this (macro manually expanded and simplified from <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/libcore/ops/arith.rs#L100-L115\" rel=\"noreferrer\">here</a>):</p>\n\n<pre><code>impl Add for i32 {\n    type Output = i32;\n\n    fn add(self, other: i32) -&gt; i32 {\n        self + other\n    }\n}\n</code></pre>\n\n<p>To my surprise, the implementation uses the <code>+</code> operator internally, which presumably calls <code>self.add(other)</code>, resulting in an infinite recursion. Obviously, things do not happen like this because expressions like <code>3 + 4</code> (assuming no constant folding) work perfectly fine.</p>\n\n<p>Now consider this naive implementation of the <code>Add</code> trait:</p>\n\n<pre><code>use std::ops::Add;\n\nstruct Foo;\n\nimpl Add for Foo {\n    type Output = Foo;\n\n    fn add(self, other: Foo) -&gt; Foo {\n        self + other\n    }\n}\n\nfn main() {\n    let two_foo = Foo + Foo;\n}\n</code></pre>\n\n<p>The compiler warns that <code>function cannot return without recurring</code> and running this program in Debug mode properly stops with <code>fatal runtime error: stack overflow</code>.</p>\n\n<p>How does the compiler know how to add two numbers without falling into a recursive loophole?</p>\n"}, {"tags": ["rust", "terminology", "lifetime", "lifetime-scoping"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 13, "creation_date": 1525874952, "post_id": 50253558, "comment_id": 87528496, "body": "I think it would be worth emphasizing that, perhaps counter-intuitively, Non-Lexical Lifetimes are not about the Lifetime of variables, but about the Lifetime of Borrows. Or, otherwise said, Non-Lexical Lifetimes is about decorrelating the lifetimes of variables from that of borrows... unless I am wrong? (but I don&#39;t think that NLL changes when a destructor is executed)"}, {"owner": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 3, "creation_date": 1548174056, "post_id": 50253558, "comment_id": 95444880, "body": "&quot;<i>Interestingly, certain good patterns were developed because of lexical lifetimes</i>&quot;\u2014I suppose, then, there&#39;s a risk that the existence of NLL may make future good patterns that much harder to identify?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 112511, "user_id": 623041, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/pIG3S.png?s=128&g=1", "display_name": "eggyal", "link": "https://stackoverflow.com/users/623041/eggyal"}, "edited": false, "score": 2, "creation_date": 1548174282, "post_id": 50253558, "comment_id": 95445013, "body": "@eggyal it&#39;s certainly a possibility. Designing within a set of constraints (even if arbitrary!) can lead to new, interesting designs. Without those constraints, we might fall back on our existing knowledge and patterns and never learn or explore to find something new. That being said, presumably someone would think &quot;oh, the hash is being calculated twice, I can fix that&quot; and the API would be created, but it may be harder for users to find the API in the first place. I hope that tools like <a href=\"https://github.com/rust-lang/rust-clippy\" rel=\"nofollow noreferrer\">clippy</a> help those folk."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 160, "last_activity_date": 1611230660, "last_edit_date": 1611230660, "creation_date": 1525869238, "answer_id": 50253558, "question_id": 50251487, "link": "https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes/50253558#50253558", "title": "What are non-lexical lifetimes?", "body": "<p>It's easiest to understand what non-lexical lifetimes are by understanding what <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping\" rel=\"noreferrer\"><em>lexical</em></a> lifetimes are. In versions of Rust before non-lexical lifetimes are present, this code will fail:</p>\n<pre><code>fn main() {\n    let mut scores = vec![1, 2, 3];\n    let score = &amp;scores[0];\n    scores.push(4);\n}\n</code></pre>\n<p>The Rust compiler sees that <code>scores</code> is borrowed by the <code>score</code> variable, so it disallows further mutation of <code>scores</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `scores` as mutable because it is also borrowed as immutable\n --&gt; src/main.rs:4:5\n  |\n3 |     let score = &amp;scores[0];\n  |                  ------ immutable borrow occurs here\n4 |     scores.push(4);\n  |     ^^^^^^ mutable borrow occurs here\n5 | }\n  | - immutable borrow ends here\n</code></pre>\n<p>However, a human can trivially see that this example is overly conservative: <code>score</code> is <strong>never used</strong>! The problem is that the borrow of <code>scores</code> by <code>score</code> is <a href=\"https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping\" rel=\"noreferrer\"><em>lexical</em></a> \u2014 it lasts until the end of the block in which it is contained:</p>\n<pre><code>fn main() {\n    let mut scores = vec![1, 2, 3]; //\n    let score = &amp;scores[0];         //\n    scores.push(4);                 //\n                                    // &lt;-- score stops borrowing here\n}\n</code></pre>\n<p>Non-lexical lifetimes fix this by enhancing the compiler to understand this level of detail. The compiler can now more accurately tell when a borrow is needed and this code will compile.</p>\n<p>A wonderful thing about non-lexical lifetimes is that once enabled, <em>no one will ever think about them</em>. It will simply become &quot;what Rust does&quot; and things will (hopefully) just work.</p>\n<h3>Why were lexical lifetimes allowed?</h3>\n<p>Rust is intended to only allow known-safe programs to compile. However, <a href=\"https://en.wikipedia.org/wiki/Halting_problem\" rel=\"noreferrer\">it is impossible</a> to exactly allow <em>only</em> safe programs and reject unsafe ones. To that end, Rust errs on the side of being conservative: some safe programs are rejected. Lexical lifetimes are one example of this.</p>\n<p>Lexical lifetimes were <em>much</em> easier to implement in the compiler because knowledge of blocks is &quot;trivial&quot;, while knowledge of the data flow is less so. The compiler needed to be <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\" rel=\"noreferrer\">rewritten to introduce and make use of a &quot;mid-level intermediate representation&quot; (MIR)</a>. Then the borrow checker (a.k.a. &quot;borrowck&quot;) had to be rewritten to use MIR instead of the abstract syntax tree (AST). Then the rules of the borrow checker had to be refined to be finer-grained.</p>\n<p>Lexical lifetimes don't always get in the way of the programmer, and there are many ways of working around lexical lifetimes when they do, even if they are annoying. In many cases, this involved adding extra curly braces or a boolean value. This allowed Rust 1.0 to ship and be useful for many years before non-lexical lifetimes were implemented.</p>\n<p>Interestingly, certain <em>good</em> patterns were developed because of lexical lifetimes. The prime example to me is <a href=\"https://stackoverflow.com/q/28512394/155423\">the <code>entry</code> pattern</a>. This code fails before non-lexical lifetimes and compiles with it:</p>\n<pre><code>fn example(mut map: HashMap&lt;i32, i32&gt;, key: i32) {\n    match map.get_mut(&amp;key) {\n        Some(value) =&gt; *value += 1,\n        None =&gt; {\n            map.insert(key, 1);\n        }\n    }\n}\n</code></pre>\n<p>However, this code is inefficient because it calculates the hash of the key twice. The solution that was created <em>because</em> of lexical lifetimes is shorter and more efficient:</p>\n<pre><code>fn example(mut map: HashMap&lt;i32, i32&gt;, key: i32) {\n    *map.entry(key).or_insert(0) += 1;\n}\n</code></pre>\n<h3>The name &quot;non-lexical lifetimes&quot; doesn't sound right to me</h3>\n<p>The lifetime of a value is the time span during which the value stays at a specific memory address (see <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> for a longer explanation). The feature known as non-lexical lifetimes doesn't <em>change</em> the lifetimes of any values, so it cannot make lifetimes non-lexical. It only makes the tracking and checking of borrows of those values more precise.</p>\n<p>A more accurate name for the feature might be &quot;non-lexical <em>borrows</em>&quot;. Some compiler developers refer to the underlying &quot;MIR-based borrowck&quot;.</p>\n<p>Non-lexical lifetimes were never intended to be a &quot;user-facing&quot; feature, <em>per se</em>. They've mostly grown large in our minds because of the little papercuts we get from their absence. Their name was mostly intended for internal development purposes and changing it for marketing purposes was never a priority.</p>\n<h3>Yeah, but how do I use it?</h3>\n<p>In Rust 1.31 (released on 2018-12-06), you need to opt-in to the Rust 2018 edition in your Cargo.toml:</p>\n<pre><code>[package]\nname = &quot;foo&quot;\nversion = &quot;0.0.1&quot;\nauthors = [&quot;An Devloper &lt;an.devloper@example.com&gt;&quot;]\nedition = &quot;2018&quot;\n</code></pre>\n<p>As of Rust 1.36, the Rust 2015 edition also enables non-lexical lifetimes.</p>\n<p>The current implementation of non-lexical lifetimes is in a &quot;migration mode&quot;. If the NLL borrow checker passes, compilation continues. If it doesn't, the previous borrow checker is invoked. If the old borrow checker allows the code, a warning is printed, informing you that your code is likely to break in a future version of Rust and should be updated.</p>\n<p>In nightly versions of Rust, you can opt-in to the enforced breakage via a feature flag:</p>\n<pre><code>#![feature(nll)]\n</code></pre>\n<p>You can even opt-in to the experimental version of NLL by using the compiler flag <code>-Z polonius</code>.</p>\n<h3>A sample of real problems solved by non-lexical lifetimes</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38023871/155423\">Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it&#39;s in?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32761524/155423\">Why does HashMap::get_mut() take ownership of the map for the rest of the scope?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41187296/155423\">Cannot borrow as immutable because it is also borrowed as mutable in function arguments</a></li>\n<li><a href=\"https://stackoverflow.com/q/47395171/155423\">How to update-or-insert on a Vec?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41601197/155423\">Is there a way to release a binding before it goes out of scope?</a></li>\n<li><a href=\"https://stackoverflow.com/q/37986640/155423\">Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time</a></li>\n<li><a href=\"https://stackoverflow.com/q/43590162/155423\">When returning the outcome of consuming a StdinLock, why was the borrow to stdin retained?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28466809/155423\">Collaterally moved error when deconstructing a Box of pairs</a></li>\n</ul>\n"}], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11655, "favorite_count": 34, "answer_count": 1, "score": 103, "last_activity_date": 1618716317, "creation_date": 1525862706, "last_edit_date": 1618716317, "question_id": 50251487, "link": "https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes", "title": "What are non-lexical lifetimes?", "body": "<p>Rust has an <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\" rel=\"noreferrer\">RFC</a> related to non-lexical lifetimes which <a href=\"https://github.com/rust-lang/rfcs/pull/2094\" rel=\"noreferrer\">has been approved</a> to be implemented in the language for a long time. <a href=\"https://github.com/rust-lang/rust/pull/46862\" rel=\"noreferrer\">Recently</a>, Rust's support of this feature has improved a lot and is considered complete.</p>\n\n<p>My question is: <strong>what exactly is a non-lexical lifetime?</strong></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 3, "last_activity_date": 1525860075, "creation_date": 1525860075, "answer_id": 50250592, "question_id": 50248219, "link": "https://stackoverflow.com/questions/50248219/casting-struct-to-trait-with-lifetime-got-cannot-infer-an-appropriate-lifetime/50250592#50250592", "title": "casting struct to trait with lifetime got &quot;cannot infer an appropriate lifetime for lifetime parameter `&#39;a` due to conflicting requirements&quot;", "body": "<p>The default lifetime of a trait object is <code>'static</code>. You need to add an explicit lifetime bound to the trait object returned by <code>nb()</code> function:</p>\n\n<pre><code>impl A {\n    fn nb&lt;'s&gt;(&amp;'s self) -&gt; Box&lt;BT+'s&gt; {\n        Box::new(B{a: self})\n    }\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html#inference-of-trait-object-lifetimes\" rel=\"nofollow noreferrer\">Inference of Trait Object Lifetimes</a></p>\n"}], "owner": {"reputation": 11, "user_id": 9763270, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Plutonist", "link": "https://stackoverflow.com/users/9763270/plutonist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1525860075, "creation_date": 1525852327, "last_edit_date": 1525858262, "question_id": 50248219, "link": "https://stackoverflow.com/questions/50248219/casting-struct-to-trait-with-lifetime-got-cannot-infer-an-appropriate-lifetime", "title": "casting struct to trait with lifetime got &quot;cannot infer an appropriate lifetime for lifetime parameter `&#39;a` due to conflicting requirements&quot;", "body": "<pre class=\"lang-rust prettyprint-override\"><code>trait BT {\n    fn get_a(&amp;self) -&gt; &amp;A;\n}\n\n#[derive(Debug)]\nstruct A {\n    v: i32,\n}\n\nimpl A {\n    fn nb(&amp;self) -&gt; Box&lt;BT&gt; {\n        Box::new(B { a: self })\n    }\n}\n\n#[derive(Debug)]\nstruct B&lt;'a&gt; {\n    a: &amp;'a A,\n}\n\nimpl&lt;'a&gt; BT for B&lt;'a&gt; {\n    fn get_a(&amp;self) -&gt; &amp;A {\n        return self.a;\n    }\n}\n\nfn main() {\n    println!(\"{:?}\", A { v: 32 }.nb().get_a());\n}\n</code></pre>\n\n<p><code>A</code> has a method to generate a <code>B</code> instance with a reference of <code>A</code>, and <code>B</code> might have many methods access <code>B.a</code> (A's reference in B). If let <code>A.nb()</code> return <code>B</code> instead of <code>BT</code>, the code would work well.</p>\n\n<p>I'm new to Rust. This problem has troubled me all day. What should I do to make this code work? Thanks!</p>\n\n<p>The whole error report:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n  --&gt; src\\socket\\msg\\message.rs:53:26\n   |\n53 |                 Box::new(B{a: self})\n   |                          ^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 52:13...\n  --&gt; src\\socket\\msg\\message.rs:52:13\n   |\n52 | /             fn nb(&amp;self) -&gt; Box&lt;BT&gt; {\n53 | |                 Box::new(B{a: self})\n54 | |             }\n   | |_____________^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src\\socket\\msg\\message.rs:53:31\n   |\n53 |                 Box::new(B{a: self})\n   |                               ^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\n   = note: ...so that the expression is assignable:\n           expected std::boxed::Box&lt;socket::msg::message::test::test::BT + 'static&gt;\n              found std::boxed::Box&lt;socket::msg::message::test::test::BT&gt;\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525851409, "post_id": 50246958, "comment_id": 87513138, "body": "The code in your <code>push</code> method does not look like a very serious attempt to accomplish your goal. Where exactly are you stuck?"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525851718, "post_id": 50246958, "comment_id": 87513304, "body": "@kazemakase It doesn&#39;t look like a serious attempt because I don&#39;t have enough knowledge about Rust to know which direction to go in/what topics to research. Still a novice at Rust unfortunately albeit trying to implement actual code and use it."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525852366, "post_id": 50246958, "comment_id": 87513662, "body": "thank you for shortening the data. Regarding the <code>push</code> method, the basic idea seems simple: get value from CSV, push to vector. You seem to know about <code>Vec::push</code>, but I can only guess that the problem is in getting values out of the CSV. Having not used the crate myself, does the <a href=\"https://docs.rs/csv/1.0.0-beta.5/csv/struct.StringRecord.html\" rel=\"nofollow noreferrer\">documentation</a> not help?"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525852656, "post_id": 50246958, "comment_id": 87513835, "body": "@kazemakase I did have a look at how <code>StringRecord</code> is extracted into <code>Row</code> struct however the process seemed like black magic performed by <code>#[derive(Deserialize)]</code>. I&#39;m also not sure how to adapt the code from a vector of structs (as in the example) to a struct of vectors. <a href=\"https://docs.rs/csv/1.0.0-beta.5/csv/struct.StringRecord.html#method.deserialize\" rel=\"nofollow noreferrer\">docs.rs/csv/1.0.0-beta.5/csv/&hellip;</a>"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525853087, "post_id": 50246958, "comment_id": 87514103, "body": "@kazemakase Or are you saying that an intermediary struct must be created first, and then that struct extracted to a vector? Is there a way to go directly from <code>StringRecord</code> to struct of vectors?"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525853651, "post_id": 50246958, "comment_id": 87514388, "body": "@kazemakase I can&#39;t get that approach to work either (error included at the bottom of the link): <a href=\"https://play.rust-lang.org/?gist=824619d403115c5fc37d19f859b261a6&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525854273, "post_id": 50246958, "comment_id": 87514720, "body": "As far I am concerned <code>#[derive(Deserialize)]</code> <i>is</i> black magic :) I do not know how to use it. Instead, I am trying to help by finding out where exactly your problem is, so that others who know more can get to the point directly. Your last link seems promising - now we have a concrete attempt and an error message. (Btw, the error message tells you how to fix that error: <i>use <code>&amp;mut self</code></i> - I don&#39;t know if anything else is wrong with the code.)"}], "answers": [{"tags": [], "owner": {"reputation": 2353, "user_id": 6314392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/983d79cc7cd73b44026df03f5efdb2a0?s=128&d=identicon&r=PG&f=1", "display_name": "Timon Post", "link": "https://stackoverflow.com/users/6314392/timon-post"}, "is_accepted": true, "score": 3, "last_activity_date": 1525859979, "last_edit_date": 1525859979, "creation_date": 1525856472, "answer_id": 50249392, "question_id": 50246958, "link": "https://stackoverflow.com/questions/50246958/how-to-push-data-from-a-csvstringrecord-to-each-column-vector-in-a-struct/50249392#50249392", "title": "How to push data from a csv::StringRecord to each column vector in a struct?", "body": "<p>This should do the job, take note that no error handling is done this code is just for demonstration purpose.</p>\n\n<p>Take all csv data and push the name fields into the name vector; push the datetime fields into the datetime vector and push the speed into the speed, then return the DataFrame.</p>\n\n<pre><code>extern crate csv;\n\nuse std::error::Error;\nuse csv::StringRecord;\n\n#[derive(Debug)]\nstruct DataFrame {\n   header: csv::StringRecord,\n   name: Vec&lt;String&gt;,\n   datetime: Vec&lt;String&gt;,\n   speed: Vec&lt;f32&gt;,\n }\n\n\nimpl DataFrame {\n\n    fn new() -&gt; DataFrame {\n        DataFrame {\n            header: csv::StringRecord::new(),\n            name: Vec::new(),\n            datetime: Vec::new(),\n            speed: Vec::new(),\n        }\n     }\n\n     fn read_csv(filepath: &amp;str, has_headers: bool) -&gt; DataFrame {\n         // Open file\n         let file = std::fs::File::open(filepath).unwrap();\n         let mut rdr = csv::ReaderBuilder::new()\n            .has_headers(has_headers)\n            .from_reader(file);\n\n         let mut data_frame = DataFrame::new();\n\n         // push all the records\n         for result in rdr.records().into_iter() {\n            let record = result.unwrap();\n            data_frame.push(&amp;record);\n         }\n         return data_frame;\n      }\n\n      fn push(&amp;mut self, row: &amp;csv::StringRecord) {\n          // get name\n          self.name.push(row[0].to_string());\n          // get datetime\n          self.datetime.push(row[1].to_string());\n          // get speed\n          self.speed.push(row[2].parse().unwrap());\n      }\n}\n\n\nfn main() {\n   let data = DataFrame::read_csv(\"path to file\", true);\n\n    println!(\"{:?}\", data)\n}\n</code></pre>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 773, "favorite_count": 1, "accepted_answer_id": 50249392, "answer_count": 1, "score": 1, "last_activity_date": 1525859979, "creation_date": 1525847895, "last_edit_date": 1525853549, "question_id": 50246958, "link": "https://stackoverflow.com/questions/50246958/how-to-push-data-from-a-csvstringrecord-to-each-column-vector-in-a-struct", "title": "How to push data from a csv::StringRecord to each column vector in a struct?", "body": "<p>How to implement the <code>push(&amp;self, row: &amp;csv::StringRecord)</code> trait below?</p>\n\n<p>The input is a reference to a <code>csv::StringRecord</code> from the <code>rust-csv</code> library. The idea is to append each column onto it's vector.</p>\n\n<pre><code>extern crate csv;\n\n#[derive(Debug)]\nstruct DataFrame {\n    header: csv::StringRecord,\n    name: Vec&lt;String&gt;,\n    datetime: Vec&lt;String&gt;,\n    speed: Vec&lt;f32&gt;,\n}\n\nimpl DataFrame {\n    fn new() -&gt; DataFrame {\n        DataFrame {\n            header: csv::StringRecord::new(),\n            name: Vec::new(),\n            datetime: Vec::new(),\n            speed: Vec::new(),\n        }\n    }\n\n    fn read_csv(filepath: &amp;str, has_headers: bool) -&gt; DataFrame {\n        // Open file\n        let file = std::fs::File::open(filepath).unwrap();\n        let mut rdr = csv::ReaderBuilder::new()\n            .has_headers(has_headers)\n            .from_reader(file);\n\n        // Add values to struct\n        let mut empty_dataframe = DataFrame::new();\n        empty_dataframe.header = rdr.headers().unwrap().clone();\n        for result in rdr.records() {\n            empty_dataframe.push(&amp;result.unwrap());\n        }\n        empty_dataframe\n    }\n\n    fn push(&amp;self, row: &amp;csv::StringRecord) {\n        println!(\"{:?}\", row);\n        //self.name.push(name);\n        //self.datetime.push(datetime);\n        //self.speed.push(speed);\n    }\n}\n\n\nfn main() {\n    let data = DataFrame::read_csv(\"src/data.csv\", true);\n    println!(\"{:?}\", data);\n}\n</code></pre>\n\n<p><code>Cargo.toml</code> has the following dependency (version is important as <code>ReaderBuilder</code> is only available after version 1.</p>\n\n<pre><code>[dependencies]\ncsv = \"1.0.0-beta.5\"\n</code></pre>\n\n<p><code>data.csv</code> is in the following format:</p>\n\n<pre><code>&gt;&gt;&gt; head src/data.csv\nName,DateTime,Speed\nTom,2016-01-04 09:30:00.038279090,102.44\nTom,2016-01-04 09:30:00.038279090,102.44\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 603, "user_id": 5426649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06e8dc32d97b1f0deb88bba090f58e46?s=128&d=identicon&r=PG&f=1", "display_name": "Olivier", "link": "https://stackoverflow.com/users/5426649/olivier"}, "is_accepted": true, "score": 0, "last_activity_date": 1525845206, "last_edit_date": 1525845206, "creation_date": 1525844044, "answer_id": 50246154, "question_id": 50245626, "link": "https://stackoverflow.com/questions/50245626/cannot-borrow-rdr-as-mutable-more-than-once-at-a-time-when-using-library-from/50246154#50246154", "title": "cannot borrow `rdr` as mutable more than once at a time [when using library from cargo]", "body": "<p>If you look at <code>headers</code> <a href=\"https://docs.rs/csv/1.0.0-beta.5/csv/struct.Reader.html#method.headers\" rel=\"nofollow noreferrer\">signature</a>, it is:</p>\n\n<pre><code>fn headers(&amp;mut self) -&gt; Result&lt;&amp;StringRecord&gt;;\n</code></pre>\n\n<p>So <code>headers()</code> mutably borrows <code>ReaderBuilder</code>'s instance.\nSame for <a href=\"https://docs.rs/csv/1.0.0-beta.5/csv/struct.Reader.html#method.records\" rel=\"nofollow noreferrer\"><code>records()</code></a>:</p>\n\n<pre><code>fn records(&amp;mut self) -&gt; StringRecordsIter&lt;R&gt;;\n</code></pre>\n\n<p>Both of the return types of these functions contains mutable reference(s) to the underlying <code>ReaderBuilder</code> instance.</p>\n\n<p>As per rust's <a href=\"https://doc.rust-lang.org/book/second-edition/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"nofollow noreferrer\">borrow rules</a>, you cannot have multiple mutable references to the <em>same</em> object living at the <em>same</em> time.</p>\n\n<p><strong>Possible mitigation</strong>: Use <code>headers()</code> in a separate scope. Thus, the references are dropped, before <code>records()</code> is called.</p>\n\n<pre><code>let mut rdr = csv::ReaderBuilder::new()\n    .has_headers(true)\n    .from_reader(file);\n{\n   let headers = rdr.headers().unwrap();\n   println!(\"{:?}\", headers);\n   // `headers` is dropped here.\n}\n\nfor result in rdr.records() {\n    let record = result.unwrap();\n    println!(\"{:?}\", record);\n}\n</code></pre>\n\n<p>The error does not occur when you <code>clone</code> because another brand new object is created and allocated on cloning. You do not have multiple mutable references anymore.</p>\n\n<p>Same, when you use <code>println!(\"{:?}\", rdr.headers().unwrap());</code>, the value returned by <code>headers()</code> is dropped immediately, so the borrow checker does not complain about multiple mutable references.</p>\n\n<p>Whether the functions are provided by a library or created by a user is irrelevant. The only thing that matters is the functions' signatures.</p>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 50246154, "answer_count": 1, "score": 1, "last_activity_date": 1525845206, "creation_date": 1525840767, "question_id": 50245626, "link": "https://stackoverflow.com/questions/50245626/cannot-borrow-rdr-as-mutable-more-than-once-at-a-time-when-using-library-from", "title": "cannot borrow `rdr` as mutable more than once at a time [when using library from cargo]", "body": "<p>Running the below code:</p>\n\n<pre><code>extern crate csv;  // csv = \"1.0.0-beta.5\"\n\nuse std::fs::File;\n\nfn main() {\n    let file_path = \"file.csv\";\n    let file = File::open(file_path).unwrap();\n\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(true)\n        .from_reader(file);\n    let headers = rdr.headers().unwrap();\n    println!(\"{:?}\", headers);\n\n    //println!(\"{:?}\", rdr.headers().unwrap());\n\n    for result in rdr.records() {\n        let record = result.unwrap();\n        println!(\"{:?}\", record);\n    }\n}\n</code></pre>\n\n<p>Results in:</p>\n\n<pre><code>error[E0499]: cannot borrow `rdr` as mutable more than once at a time\n  --&gt; src/main.rs:17:19\n   |\n12 |     let headers = rdr.headers().unwrap();\n   |                   --- first mutable borrow occurs here\n...\n17 |     for result in rdr.records() {\n   |                   ^^^ second mutable borrow occurs here\n...\n21 | }\n   | - first borrow ends here\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>If I change these lines:</p>\n\n<pre><code>let headers = rdr.headers().unwrap();\nprintln!(\"{:?}\", headers);\n\n//println!(\"{:?}\", rdr.headers().unwrap());\n</code></pre>\n\n<p>to the below the code works:</p>\n\n<pre><code>//let headers = rdr.headers().unwrap();\n//println!(\"{:?}\", headers);\n\nprintln!(\"{:?}\", rdr.headers().unwrap());\n</code></pre>\n\n<p>Similarly if I <code>clone</code> the headers it also works:</p>\n\n<pre><code>let headers = rdr.headers().unwrap().clone();\nprintln!(\"{:?}\", headers);\n</code></pre>\n\n<p>I read a related <a href=\"https://stackoverflow.com/questions/31281155/cannot-borrow-x-as-mutable-more-than-once-at-a-time\">question</a> however that question was about a function that the user wrote themselves whereas this use case is where a function was provided by a library.</p>\n\n<p>How should such errors be dealt with and what exactly is happening to cause this error?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 3, "creation_date": 1525830424, "post_id": 50243893, "comment_id": 87506393, "body": "I don&#39;t know a <i>ton</i> about binary manipulation, but wouldn&#39;t a left shift be more appropriate than just a multiplication?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1525833374, "post_id": 50243893, "comment_id": 87506945, "body": "@BHustus If the compiler can&#39;t optimize that you can blame it ;)"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 6, "creation_date": 1525840968, "post_id": 50243893, "comment_id": 87508700, "body": "I mean, not necessarily for optimization purposes, but for clarity. Bit-shifting seems like it would more clearly explain what you&#39;re doing: &quot;I want to shift 8 bits to the left, then place the other number in the empty right half to create one number&quot;. Multiplication does the same thing, but it seems like another step to parse for people reading the code."}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": false, "score": 5, "last_activity_date": 1525831049, "last_edit_date": 1525831049, "creation_date": 1525825632, "answer_id": 50243893, "question_id": 50243866, "link": "https://stackoverflow.com/questions/50243866/how-do-i-convert-two-u8-primitives-into-a-u16-primitive/50243893#50243893", "title": "How do I convert two u8 primitives into a u16 primitive?", "body": "<p>You can multiply the first element to move it to the higher byte, then add the second element. It just needs extra casting:</p>\n\n<pre><code>let a: u8 = 1;\nlet b: u8 = 2;\nlet c: u16 = (a as u16 * 256) + b as u16;\nprintln!(\"c: {}\", c); // c: 258\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 716, "user_id": 1708107, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6dbfec1458818ab1a1081a626c37eec1?s=128&d=identicon&r=PG", "display_name": "youR.Fate", "link": "https://stackoverflow.com/users/1708107/your-fate"}, "edited": false, "score": 0, "creation_date": 1589211899, "post_id": 50244328, "comment_id": 109196756, "body": "You may want to update this answer to use the <code>u16::from_le_bytes()</code> or <code>u16::from_be_bytes()</code> functions which exist now. See <a href=\"https://doc.rust-lang.org/std/primitive.u16.html#method.from_be_bytes\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.u16.html#method.from_be_byte&zwnj;&#8203;s</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 716, "user_id": 1708107, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6dbfec1458818ab1a1081a626c37eec1?s=128&d=identicon&r=PG", "display_name": "youR.Fate", "link": "https://stackoverflow.com/users/1708107/your-fate"}, "edited": false, "score": 1, "creation_date": 1589212609, "post_id": 50244328, "comment_id": 109197185, "body": "@youR.Fate mentioned, but it&#39;s not a great solution for the OP, as they don&#39;t have an array to start with. That means that they&#39;d have to handle the error case, then perform the transformation. byteorder does that in one step."}, {"owner": {"reputation": 716, "user_id": 1708107, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6dbfec1458818ab1a1081a626c37eec1?s=128&d=identicon&r=PG", "display_name": "youR.Fate", "link": "https://stackoverflow.com/users/1708107/your-fate"}, "edited": false, "score": 0, "creation_date": 1589288139, "post_id": 50244328, "comment_id": 109228345, "body": "when I converted a <code>Vec&lt;u8&gt;</code> to a <code>Vec&lt;u16&gt;</code> I used a chunk iter over the <code>u8</code> vec, then mapped that itterator to the <code>u16::from_le_bytes</code> function to get a vector of <code>u16</code>. But I can see why byteorder might be a neater soltuion."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 716, "user_id": 1708107, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6dbfec1458818ab1a1081a626c37eec1?s=128&d=identicon&r=PG", "display_name": "youR.Fate", "link": "https://stackoverflow.com/users/1708107/your-fate"}, "edited": false, "score": 1, "creation_date": 1589288746, "post_id": 50244328, "comment_id": 109228727, "body": "@youR.Fate mentioned, but the chunk iterators return slices, not fixed-size arrays, so you still have to deal with an error case. When <a href=\"https://stackoverflow.com/q/28136739/155423\">const generics are stable</a>, we might be able to get a chunks iterator that returns <code>&amp;[T; N]</code> and avoid the error case completely."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 25, "last_activity_date": 1617029928, "last_edit_date": 1617029928, "creation_date": 1525829890, "answer_id": 50244328, "question_id": 50243866, "link": "https://stackoverflow.com/questions/50243866/how-do-i-convert-two-u8-primitives-into-a-u16-primitive/50244328#50244328", "title": "How do I convert two u8 primitives into a u16 primitive?", "body": "<p>If you actually had two distinct <code>u8</code>s, the conventional solution involves bitwise manipulation, specifically shifting and bitwise OR. This requires zero heap allocation and is very efficient:</p>\n<pre><code>let number = ((vector[0] as u16) &lt;&lt; 8) | vector[1] as u16;\n</code></pre>\n<p>And a graphical explanation:</p>\n<pre class=\"lang-none prettyprint-override\"><code>             A0                   B0\n        +--------+           +--------+\n        |XXXXXXXX|           |YYYYYYYY|\n        +-------++           +-------++\n                |                    |\n A1 = A0 as u16 |     B1 = B0 as u16 |\n+---------------v+   +---------------v+\n|00000000XXXXXXXX|   |00000000YYYYYYYY|\n+---------------++   +---------------++\n                |                    |\n   A2 = A1 &lt;&lt; 8 |                    |\n+---------------v+                   |\n|XXXXXXXX00000000|                   |\n+---------------++                   |\n                |              +--+  |\n                +--------------&gt;OR&lt;--+\n                               +-++\n                                 |\n                     V = A2 | B1 |\n                 +----------+----v+\n                 |XXXXXXXXYYYYYYYY|\n                 +----------------+\n</code></pre>\n<p>However, you are really looking at your problem too narrowly. You don't have two <code>u8</code>, you have a <code>&amp;[u8]</code>.</p>\n<p>In this case, use the <a href=\"https://crates.io/crates/byteorder\" rel=\"nofollow noreferrer\">byteorder crate</a>:</p>\n<pre><code>use byteorder::{ByteOrder, LittleEndian}; // 1.3.4\n\nfn main() {\n    let data = [1, 16];\n    let v = LittleEndian::read_u16(&amp;data);\n    println!(&quot;{}&quot;, v);\n}\n</code></pre>\n<p>This shows its power when you want to handle reading through the buffer:</p>\n<pre><code>use byteorder::{BigEndian, LittleEndian, ReadBytesExt}; // 1.3.4\n\nfn main() {\n    let data = [1, 16, 1, 2];\n    let mut current = &amp;data[..];\n\n    let v1 = current.read_u16::&lt;LittleEndian&gt;();\n    let v2 = current.read_u16::&lt;BigEndian&gt;();\n\n    println!(&quot;{:?}, {:?}&quot;, v1, v2); // Ok(4097), Ok(258)\n}\n</code></pre>\n<p>As you can see, you need to be conscious of the <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\"><em>endianness</em></a> of your input data.</p>\n<p>You could also <a href=\"https://stackoverflow.com/q/25428920/155423\">get a fixed-size array from your slice</a> and then use <a href=\"https://doc.rust-lang.org/std/primitive.u16.html#method.from_le_bytes\" rel=\"nofollow noreferrer\"><code>u16::from_le_bytes</code></a>. If you had a <code>&amp;[u8]</code> and wanted to get a <code>Vec&lt;u16&gt;</code>, you can iterate over appropriately-sized slices using <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.chunks_exact\" rel=\"nofollow noreferrer\"><code>chunks_exact</code></a> (or <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.array_chunks\" rel=\"nofollow noreferrer\"><code>array_chunks</code></a>).</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40467995/155423\">How do you set, clear and toggle a single bit in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33968870/155423\">Temporarily transmute [u8] to [u16]</a></li>\n<li><a href=\"https://stackoverflow.com/q/48308759/155423\">How do I convert a Vec&lt;T&gt; to a Vec&lt;U&gt; without copying the vector?</a></li>\n</ul>\n<hr />\n<p>Free code review on your original post:</p>\n<ul>\n<li><p>There's no need to use <code>to_vec</code> here, use <a href=\"https://doc.rust-lang.org/std/macro.vec.html\" rel=\"nofollow noreferrer\"><code>vec!</code></a> instead.</p>\n</li>\n<li><p>There's no need to specify the vast majority of the types.</p>\n<pre><code>let vector = [1u8, 16].to_vec();\n\nlet vector0 = format!(&quot;{:02x}&quot;, vector[0]);\nlet vector1 = format!(&quot;{:02x}&quot;, vector[1]);\nlet mut vector_combined = String::new();\nvector_combined = vector_combined + &amp;vector0.clone();\nvector_combined = vector_combined + &amp;vector1.clone();\nlet number = u16::from_str_radix(&amp;vector_combined.to_string(), 16).unwrap();\n</code></pre>\n</li>\n<li><p>There's no need to clone the strings before taking a reference to them when adding.</p>\n</li>\n<li><p>There's no need to convert the <code>String</code> to... another <code>String</code> in <code>from_str_radix</code>.</p>\n<pre><code>let vector0 = format!(&quot;{:02x}&quot;, vector[0]);\nlet vector1 = format!(&quot;{:02x}&quot;, vector[1]);\nlet mut vector_combined = String::new();\nvector_combined = vector_combined + &amp;vector0;\nvector_combined = vector_combined + &amp;vector1;\nlet number = u16::from_str_radix(&amp;vector_combined, 16).unwrap();\n</code></pre>\n</li>\n<li><p>There's no need to create an empty <code>String</code> to append to, just use <code>vector0</code></p>\n<pre><code>let vector0 = format!(&quot;{:02x}&quot;, vector[0]);\nlet vector1 = format!(&quot;{:02x}&quot;, vector[1]);\nlet vector_combined = vector0 + &amp;vector1;\nlet number = u16::from_str_radix(&amp;vector_combined, 16).unwrap();\n</code></pre>\n</li>\n<li><p>There's no need to create two strings at all, one will do:</p>\n<pre><code>let vector_combined = format!(&quot;{:02x}{:02x}&quot;, vector[0], vector[1]);\nlet number = u16::from_str_radix(&amp;vector_combined, 16).unwrap();\n</code></pre>\n</li>\n</ul>\n<p>Of course, this still isn't the right solution, but it's <em>better</em>.</p>\n"}], "owner": {"reputation": 270, "user_id": 7351717, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/GEvRh.png?s=128&g=1", "display_name": "Hydraxan14", "link": "https://stackoverflow.com/users/7351717/hydraxan14"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6604, "favorite_count": 4, "accepted_answer_id": 50244328, "answer_count": 2, "score": 6, "last_activity_date": 1617029928, "creation_date": 1525825366, "last_edit_date": 1525829557, "question_id": 50243866, "link": "https://stackoverflow.com/questions/50243866/how-do-i-convert-two-u8-primitives-into-a-u16-primitive", "title": "How do I convert two u8 primitives into a u16 primitive?", "body": "<p>I'm reading a binary file into a Rust program using a <code>Vec&lt;u8&gt;</code> as a buffer. Two bytes in the stream represent a big-endian <code>u16</code>.</p>\n\n<p>So far, the only way I've figured out how to convert to a primitive <code>u16</code> involves converting the two elements to <code>String</code>s first, and it looks <em>terrible</em>.</p>\n\n<p>Code:</p>\n\n<pre><code>let vector: Vec&lt;u8&gt; = [1, 16].to_vec();\nlet vector0: String = format!(\"{:02x}\", vector[0]);\nlet vector1: String = format!(\"{:02x}\", vector[1]);\nlet mut vector_combined = String::new();\nvector_combined = vector_combined + &amp;vector0.clone();\nvector_combined = vector_combined + &amp;vector1.clone();\nlet number: u16 = u16::from_str_radix(&amp;vector_combined.to_string(), 16).unwrap();\n\nprintln!(\"vector[0]: 0x{:02x}\", vector[0]);\nprintln!(\"vector[1]: 0x{:02x}\", vector[1]);\nprintln!(\"number: 0x{:04x}\", number);\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>vector[0]: 0x01\nvector[1]: 0x10\nnumber: 0x0110\n</code></pre>\n"}, {"tags": ["csv", "rust"], "comments": [{"owner": {"reputation": 45031, "user_id": 213136, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0b84a36c241e04175fcec402dac43018?s=128&d=identicon&r=PG", "display_name": "Bob Jarvis - Reinstate Monica", "link": "https://stackoverflow.com/users/213136/bob-jarvis-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1525824444, "post_id": 50243750, "comment_id": 87505260, "body": "What happens if you compile <a href=\"https://github.com/BurntSushi/rust-csv/blob/6f24780f26a81336bc919e4e2b07cdcadb0c309d/examples/cookbook-read-colon.rs\" rel=\"nofollow noreferrer\">example_1</a>?"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 45031, "user_id": 213136, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0b84a36c241e04175fcec402dac43018?s=128&d=identicon&r=PG", "display_name": "Bob Jarvis - Reinstate Monica", "link": "https://stackoverflow.com/users/213136/bob-jarvis-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1525825244, "post_id": 50243750, "comment_id": 87505433, "body": "@BobJarvis Same error <code>src&#47;main.rs:8:24</code>, <code>let mut rdr = csv::ReaderBuilder::new()</code>, <code>Could not find &#39;ReaderBuilder&#39; in &#39;csv&#39;</code>"}, {"owner": {"reputation": 45031, "user_id": 213136, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0b84a36c241e04175fcec402dac43018?s=128&d=identicon&r=PG", "display_name": "Bob Jarvis - Reinstate Monica", "link": "https://stackoverflow.com/users/213136/bob-jarvis-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1525826014, "post_id": 50243750, "comment_id": 87505568, "body": "How about the examples at <a href=\"https://crates.io/crates/csv\" rel=\"nofollow noreferrer\">this page</a>?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525826238, "post_id": 50243750, "comment_id": 87505604, "body": "Why <code>csv = &quot;0.15.0&quot;</code>?"}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525827587, "post_id": 50243750, "comment_id": 87505829, "body": "@trentcl That&#39;s the version specified on <a href=\"https://crates.io/crates/csv\" rel=\"nofollow noreferrer\">crates.io/crates/csv</a>. I tried csv = &quot;0.14.0&quot; with same results."}, {"owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "reply_to_user": {"reputation": 45031, "user_id": 213136, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0b84a36c241e04175fcec402dac43018?s=128&d=identicon&r=PG", "display_name": "Bob Jarvis - Reinstate Monica", "link": "https://stackoverflow.com/users/213136/bob-jarvis-reinstate-monica"}, "edited": false, "score": 0, "creation_date": 1525827628, "post_id": 50243750, "comment_id": 87505841, "body": "@BobJarvis Compiling the projects on <a href=\"https://crates.io/crates/csv\" rel=\"nofollow noreferrer\">crates.io/crates/csv</a> and anything with <code>Reader</code> only works. It&#39;s the <code>ReaderBuilder</code> that fails"}], "answers": [{"tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": true, "score": 1, "last_activity_date": 1526426827, "last_edit_date": 1526426827, "creation_date": 1525830228, "answer_id": 50244375, "question_id": 50243750, "link": "https://stackoverflow.com/questions/50243750/could-not-find-readerbuilder-in-csv/50244375#50244375", "title": "Could not find `ReaderBuilder` in `csv`", "body": "<p><code>ReaderBuilder</code> is only available in the csv 1.0 release, as indicated in the documentation. You are trying to use an older version.</p>\n\n<p>Please consider following <a href=\"https://docs.rs/csv/1.0.0/csv/#setup\" rel=\"nofollow noreferrer\">the instructions in the documentation</a>:</p>\n\n<blockquote>\n  <p>Add this to your Cargo.toml:</p>\n\n<pre><code>[dependencies]\ncsv = \"1\"\n</code></pre>\n  \n  <p>and this to your crate root:</p>\n\n<pre><code>extern crate csv;\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 5940, "user_id": 4605629, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/741edb45b2f1d3e3c3d9555085004ad1?s=128&d=identicon&r=PG&f=1", "display_name": "Greg", "link": "https://stackoverflow.com/users/4605629/greg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 47, "favorite_count": 0, "accepted_answer_id": 50244375, "answer_count": 1, "score": -1, "last_activity_date": 1526426827, "creation_date": 1525824203, "last_edit_date": 1525831132, "question_id": 50243750, "link": "https://stackoverflow.com/questions/50243750/could-not-find-readerbuilder-in-csv", "title": "Could not find `ReaderBuilder` in `csv`", "body": "<p>Compiling this code:</p>\n\n<pre><code>extern crate csv;\n\nfn main() {\n    let mut test = csv::ReaderBuilder::new();\n}\n</code></pre>\n\n<p>Results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0433]: failed to resolve. Could not find `ReaderBuilder` in `csv`\n --&gt; src/main.rs:5:25\n  |\n5 |     let mut test = csv::ReaderBuilder::new();\n  |                         ^^^^^^^^^^^^^ Could not find `ReaderBuilder` in `csv`\n</code></pre>\n\n<p>The <code>Cargo.toml</code> file has the following dependencies:</p>\n\n<pre><code>[dependencies]\ncsv = \"0.15.0\"\nrustc-serialize = \"0.3.24\"\n</code></pre>\n\n<p>Why is this happening (all examples use the <code>ReaderBuilder</code> in a similar manner: <a href=\"https://github.com/BurntSushi/rust-csv/blob/6f24780f26a81336bc919e4e2b07cdcadb0c309d/examples/cookbook-read-colon.rs\" rel=\"nofollow noreferrer\">example_1</a> and <a href=\"https://github.com/BurntSushi/rust-csv/blob/6f24780f26a81336bc919e4e2b07cdcadb0c309d/examples/cookbook-read-colon.rs\" rel=\"nofollow noreferrer\">example_2</a>).</p>\n"}, {"tags": ["enums", "rust", "traits", "upcasting"], "comments": [{"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1525799199, "post_id": 50238145, "comment_id": 87495022, "body": "Will every case of the enum contain something that implements the trait, like you&#39;ve shown here, or will there be some cases which don&#39;t?"}, {"owner": {"reputation": 77, "user_id": 9759642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3f2ad6d29f808e40bb8956218b96269?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan C.", "link": "https://stackoverflow.com/users/9759642/ryan-c"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1525799655, "post_id": 50238145, "comment_id": 87495291, "body": "For my current usage, yes they all implement the trait.  I wouldn&#39;t be opposed to a solution that allowed pattern matching so that wasn&#39;t a requirement though."}], "answers": [{"comments": [{"owner": {"reputation": 77, "user_id": 9759642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3f2ad6d29f808e40bb8956218b96269?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan C.", "link": "https://stackoverflow.com/users/9759642/ryan-c"}, "edited": false, "score": 0, "creation_date": 1525800538, "post_id": 50239092, "comment_id": 87495703, "body": "Thanks.  It feels like unfortunate boilerplate, but encapsulates it nicely."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1525800017, "creation_date": 1525800017, "answer_id": 50239092, "question_id": 50238145, "link": "https://stackoverflow.com/questions/50238145/is-it-possible-to-upcast-to-a-trait-when-destructuring-enums/50239092#50239092", "title": "Is it possible to upcast to a trait when destructuring enums?", "body": "<p>No, you cannot <em>while</em> destructuring. You can do it <em>after</em> though:</p>\n\n<pre><code>// My preferred\nfn call_some_func(some_enum: SomeEnum) {\n    let x: &amp;SomeTrait = match some_enum {\n        SomeEnum::Value1(ref x) =&gt; x,\n        SomeEnum::Value2(ref x) =&gt; x,\n    };\n    x.some_func();\n}\n</code></pre>\n\n\n\n<pre><code>// Also works\nfn call_some_func(some_enum: SomeEnum) {\n    let x = match some_enum {\n        SomeEnum::Value1(ref x) =&gt; x as &amp;SomeTrait,\n        SomeEnum::Value2(ref x) =&gt; x,\n    };\n    x.some_func();\n}\n</code></pre>\n\n<p>I'd encourage you to extract this to a method for reuse:</p>\n\n<pre><code>impl SomeEnum {\n    fn as_trait(&amp;self) -&gt; &amp;SomeTrait {\n        match *self {\n            SomeEnum::Value1(ref x) =&gt; x,\n            SomeEnum::Value2(ref x) =&gt; x,\n        }\n    }\n}\n\nfn call_some_func(some_enum: SomeEnum) {\n    some_enum.as_trait().some_func();\n}\n</code></pre>\n\n<p>And probably to implement the trait on the enum itself, if all the variants implement it. This way, consumers don't have to care:</p>\n\n<pre><code>impl SomeTrait for SomeEnum {\n    fn some_func(&amp;self) {\n        self.as_trait().some_func()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 77, "user_id": 9759642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3f2ad6d29f808e40bb8956218b96269?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan C.", "link": "https://stackoverflow.com/users/9759642/ryan-c"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "accepted_answer_id": 50239092, "answer_count": 1, "score": 2, "last_activity_date": 1525800017, "creation_date": 1525796396, "last_edit_date": 1525798505, "question_id": 50238145, "link": "https://stackoverflow.com/questions/50238145/is-it-possible-to-upcast-to-a-trait-when-destructuring-enums", "title": "Is it possible to upcast to a trait when destructuring enums?", "body": "<p>I'd like to be able to destructure/upcast enum variants to a commonly implemented trait.  Here's the setup:</p>\n\n<pre><code>trait SomeTrait {\n    fn some_func(&amp;self);\n}\n\nstruct SomeStruct1;\nimpl SomeTrait for SomeStruct1 {\n    fn some_func(&amp;self) {}\n}\n\nstruct SomeStruct2;\nimpl SomeTrait for SomeStruct2 {\n    fn some_func(&amp;self) {}\n}\n\nenum SomeEnum {\n    Value1(SomeStruct1),\n    Value2(SomeStruct2),\n}\n</code></pre>\n\n<p>Here's one possibility I tried:</p>\n\n<pre><code>fn call_some_func(some_enum: SomeEnum) {\n    match some_enum {\n        SomeEnum::Value1(ref some_trait: &amp;SomeTrait) |\n        SomeEnum::Value2(ref some_trait: &amp;SomeTrait) =&gt; some_trait.some_func()\n    }\n}\n</code></pre>\n\n<p>It resulted in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `)`, `,`, or `@`, found `:`\n  --&gt; src/main.rs:22:40\n   |\n22 |         SomeEnum::Value1(ref some_trait: &amp;SomeTrait) |\n   |                                        ^ expected one of `)`, `,`, or `@` here\n</code></pre>\n\n<p>This was another idea I had:</p>\n\n<pre><code>fn call_some_func2(some_enum: SomeEnum) {\n    match some_enum {\n        _(ref some_trait: &amp;SomeTrait) =&gt; some_trait.some_func()\n    }\n}\n</code></pre>\n\n<p>Which also failed:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `=&gt;`, `if`, or `|`, found `(`\n  --&gt; src/main.rs:22:10\n   |\n22 |         _(ref some_trait: &amp;SomeTrait) =&gt; some_trait.some_func()\n   |          ^ expected one of `=&gt;`, `if`, or `|` her\n</code></pre>\n\n<p>Does anyone know of a way to accomplish this type of destructuring?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3691, "user_id": 1808989, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/3884a2f2ee43a4681967493905dcc20c?s=128&d=identicon&r=PG", "display_name": "Andrew Sun", "link": "https://stackoverflow.com/users/1808989/andrew-sun"}, "edited": false, "score": 0, "creation_date": 1525797240, "post_id": 50238217, "comment_id": 87493980, "body": "Thanks! So if I understood correctly, the problem is that the <code>*</code> operator always uses <code>Deref::deref()</code>, even if the <code>Box</code> was obtained from a mutable reference? I noticed that explicitly calling <code>*list.deref_mut()</code> works too."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3691, "user_id": 1808989, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/3884a2f2ee43a4681967493905dcc20c?s=128&d=identicon&r=PG", "display_name": "Andrew Sun", "link": "https://stackoverflow.com/users/1808989/andrew-sun"}, "edited": false, "score": 1, "creation_date": 1525797727, "post_id": 50238217, "comment_id": 87494267, "body": "@AndrewSun I clarified some poor wording on my part. <code>*</code> can call either <code>deref</code> or <code>deref_mut</code> depending on the context, but in this case it can&#39;t tell that it needs to be <code>deref_mut</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1525812805, "last_edit_date": 1525812805, "creation_date": 1525796629, "answer_id": 50238217, "question_id": 50237774, "link": "https://stackoverflow.com/questions/50237774/why-can-i-not-borrow-a-variable-as-mutable-more-than-once-at-a-time-with-a-mut/50238217#50238217", "title": "Why can I not borrow a variable as mutable more than once at a time with a &amp;mut Box&lt;T&gt; while &amp;mut T works?", "body": "<p>This can be simplified to</p>\n\n<pre><code>fn foo(v: &amp;mut Box&lt;(i32, i32)&gt;) {\n    match **v {\n        (ref mut head, ref mut tail) =&gt; {}\n    }\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>fn foo(v: &amp;mut Box&lt;(i32, i32)&gt;) {\n    let (ref mut head, ref mut tail) = **v;\n}\n</code></pre>\n\n<p>The problem is that <code>Box</code> is a a strange, in-between type.</p>\n\n<p>Way back in Rust's history, <code>Box</code> was special-cased by the compiler; it knew a lot of the details of <code>Box</code>, but this meant that it was \"magic\" and no one else could implement something that worked like <code>Box</code>.</p>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0130-box-not-special.md\" rel=\"nofollow noreferrer\">RFC 130</a> proposed changing that; making <code>Box</code> \"just another type\". Unfortunately, this still hasn't been fully transitioned. </p>\n\n<p>The details are nuanced, but basically the current borrow checker handles pattern-matching <em>syntactically</em>, not <em>semantically</em>. It needs to do this to prevent some unsoundness issues.</p>\n\n<p>In the future, non-lexical lifetimes (NLL) just magically fix this; you don't have to to anything (hooray!).</p>\n\n<p>Until then, you can explicitly get back to a <code>&amp;mut T</code> with this ugly blob:</p>\n\n<pre><code>match *&amp;mut **list {\n</code></pre>\n\n<p>Or call <code>DerefMut</code> explicitly:</p>\n\n<pre><code>match *std::ops::DerefMut::deref_mut(list) {\n</code></pre>\n\n<p>However, there's <a href=\"https://stackoverflow.com/q/40006219/155423\">very little reason to accept a <code>&amp;mut Box&lt;T&gt;</code></a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/30104\" rel=\"nofollow noreferrer\">Destructuring boxes into multiple mutable references seems broken #30104</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/32930\" rel=\"nofollow noreferrer\">Bad / misleading error message with auto deref and mutable borrows of multiple fields #32930</a></li>\n<li><a href=\"https://stackoverflow.com/q/28386120/155423\">Why can I not borrow a boxed vector content as mutable?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38243040/155423\">Confused by move semantics of struct fields inside a Box</a></li>\n<li><a href=\"https://stackoverflow.com/q/34256165/155423\">Moving out of boxed tuple</a></li>\n</ul>\n"}], "owner": {"reputation": 3691, "user_id": 1808989, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/3884a2f2ee43a4681967493905dcc20c?s=128&d=identicon&r=PG", "display_name": "Andrew Sun", "link": "https://stackoverflow.com/users/1808989/andrew-sun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 75, "favorite_count": 0, "accepted_answer_id": 50238217, "answer_count": 1, "score": 2, "last_activity_date": 1525812805, "creation_date": 1525794993, "last_edit_date": 1525796068, "question_id": 50237774, "link": "https://stackoverflow.com/questions/50237774/why-can-i-not-borrow-a-variable-as-mutable-more-than-once-at-a-time-with-a-mut", "title": "Why can I not borrow a variable as mutable more than once at a time with a &amp;mut Box&lt;T&gt; while &amp;mut T works?", "body": "<p>I'm trying to implement a linked list in Rust and I'm having some trouble understanding the difference between these two functions:</p>\n\n<pre><code>enum List&lt;T&gt; {\n    Nil,\n    Cons(T, Box&lt;List&lt;T&gt;&gt;)\n}\n\nfn foo&lt;T&gt;(list: &amp;mut Box&lt;List&lt;T&gt;&gt;) {\n    match **list {\n        List::Nil =&gt; return,\n        List::Cons(ref mut head, ref mut tail) =&gt; {\n            // ...\n        }\n    }\n}\n\nfn bar&lt;T&gt;(list: &amp;mut List&lt;T&gt;) {\n    match *list {\n        List::Nil =&gt; return,\n        List::Cons(ref mut head, ref mut tail) =&gt; {\n            // ...\n        }\n    }\n}\n</code></pre>\n\n<p><code>foo</code> fails to compile, with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `list` (via `list.1`) as mutable more than once at a time\n  --&gt; src/main.rs:66:34\n   |\n66 |         List::Cons(ref mut head, ref mut rest) =&gt; {\n   |                    ------------  ^^^^^^^^^^^^ second mutable borrow occurs here (via `list.1`)\n   |                    |\n   |                    first mutable borrow occurs here (via `list.0`)\n...\n69 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>However, <code>bar</code> compiles and runs perfectly. Why does <code>bar</code> work, but not <code>foo</code>? I am using Rust version 1.25.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1525791529, "post_id": 50236150, "comment_id": 87490585, "body": "There is likely an XY problem here. Consider showing more context around the use of that trait. Also keep in mind that <a href=\"https://stackoverflow.com/q/40006219/1233251\">owning containers such as <code>Vec</code> can coerce to slices</a>."}], "answers": [{"comments": [{"owner": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "edited": false, "score": 0, "creation_date": 1525790863, "post_id": 50236317, "comment_id": 87490157, "body": "Thanks for your answer. Will adding lifetime constraints to the temporary variable <code>elems</code> work?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "edited": false, "score": 2, "creation_date": 1525790987, "post_id": 50236317, "comment_id": 87490227, "body": "@Yang no. I mean it when I say impossible. If you can&#39;t change the <code>HashSet</code> or the trait and won&#39;t add fields, there&#39;s no solution."}, {"owner": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "edited": false, "score": 0, "creation_date": 1525798674, "post_id": 50236317, "comment_id": 87494770, "body": "I am trying to use <code>Cow</code>, once I have <code>let cow = Cow::from(&amp;slice[..])</code> or <code>let cow = Cow::from(vec) </code>, how can I get back <code>&amp;slice[..]</code>. I have used <code>cow.borrow()</code>, but error <code>type annotations required: cannot resolve &#39;std::borrow::Cow&lt;&#39;_, [u32]&gt;: std::borrow::Borrow&lt;_&gt;&#39;</code> shown up"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "edited": false, "score": 0, "creation_date": 1525800492, "post_id": 50236317, "comment_id": 87495692, "body": "@Yang <code>&amp;cow[..]</code> ?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1556371722, "last_edit_date": 1556371722, "creation_date": 1525790552, "answer_id": 50236317, "question_id": 50236150, "link": "https://stackoverflow.com/questions/50236150/how-do-i-form-a-slice-from-a-hashset/50236317#50236317", "title": "How do I form a slice from a HashSet?", "body": "<p>No, your requirements are 100% completely impossible in safe Rust.</p>\n\n<p>A <code>HashSet</code> / <code>HashMap</code> do not have a contiguous collection of data, thus there's no way to get a slice from them.</p>\n\n<hr>\n\n<p>If you can change things, then you have options.</p>\n\n<p>You can \"render a view\" of the <code>HashSet</code> if you can store a <code>Vec</code> and the method is <code>&amp;mut self</code>:</p>\n\n<pre><code>struct Node {\n    set: HashSet&lt;usize&gt;,\n    view: Vec&lt;usize&gt;,\n    // other fields omitted\n}\n\nimpl Node {\n    pub fn set_slice(&amp;mut self) -&gt; &amp;[usize] {\n        self.view.clear();\n        self.view.extend(self.set.iter().cloned());\n        &amp;self.view\n    }\n}\n</code></pre>\n\n<p>You could return a <code>Cow</code> which would be either borrowed or owned:</p>\n\n<pre><code>use std::borrow::Cow;\n\nimpl Node {\n    pub fn set_slice(&amp;self) -&gt; Cow&lt;[usize]&gt; {\n        self.set.iter().cloned().collect::&lt;Vec&lt;_&gt;&gt;().into()\n    }\n}\n</code></pre>\n\n<p>You could <a href=\"https://stackoverflow.com/q/27535289/155423\">return an iterator over the values</a>:</p>\n\n<pre><code>impl Node {\n    pub fn set_slice&lt;'a&gt;(&amp;'a self) -&gt; impl Iterator&lt;Item = &amp;'a usize&gt; + 'a {\n        self.set.iter()\n    }\n}\n</code></pre>\n\n<p>There's <em>possibly</em> <a href=\"https://crates.io/\" rel=\"nofollow noreferrer\">a crate</a> that uses a tightly-packed <code>Vec</code> as its backing storage, which could then be exposed as a slice.</p>\n"}, {"tags": [], "owner": {"reputation": 452, "user_id": 829264, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/83e2ecd7bb790d0fc0c6d26bc8cf2f98?s=128&d=identicon&r=PG", "display_name": "Alex Koz.", "link": "https://stackoverflow.com/users/829264/alex-koz"}, "is_accepted": false, "score": 0, "last_activity_date": 1526485954, "last_edit_date": 1526485954, "creation_date": 1525791648, "answer_id": 50236696, "question_id": 50236150, "link": "https://stackoverflow.com/questions/50236150/how-do-i-form-a-slice-from-a-hashset/50236696#50236696", "title": "How do I form a slice from a HashSet?", "body": "<p>That is impossible in simple (basic) ways.</p>\n\n<p>That's possible with <code>Box</code>, <code>mut static</code> but I recommend to modify your trait and return something like in following example:</p>\n\n<p>You can use <code>AsRef&lt;[T]&gt;</code> instead of <code>&amp;[usize]</code> in your trait. Or simply return an iterator.</p>\n\n<pre><code>struct Node {\n    set: HashSet&lt;usize&gt;,\n}\n\ntrait SetSlice {\n    type Slice: AsRef&lt;[usize]&gt;;\n    fn get_slice_cloned(&amp;self) -&gt; Self::Slice;\n}\n\nimpl SetSlice for Node {\n    type Slice = Vec&lt;usize&gt;;\n    fn get_slice_cloned(&amp;self) -&gt; Self::Slice { self.set.iter().cloned().collect() }\n}\n\n// there we use auto-impl of Iterator trait\n// and return the iter.\n// NOTE: we cannot use auto-impl in trait methods.\nimpl Node {\n    fn get_neat_iter(&amp;self) -&gt; impl Iterator&lt;Item = &amp;usize&gt; { self.set.iter() }\n}\n\nfn need_slice(slice: &amp;[usize]) {}\n\nfn main() {\n    let n = Node { set: Default::default(), };\n\n    // as_ref\n    let all = n.get_slice_cloned();\n    need_slice(all.as_ref());\n\n    // iter-way\n    let all: Vec&lt;_&gt; = n.get_neat_iter().cloned().collect();\n    need_slice(&amp;all);\n}\n</code></pre>\n\n<p>This is only two ways from many.</p>\n"}], "owner": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1933, "favorite_count": 0, "accepted_answer_id": 50236317, "answer_count": 2, "score": 2, "last_activity_date": 1556371722, "creation_date": 1525790068, "last_edit_date": 1525792957, "question_id": 50236150, "link": "https://stackoverflow.com/questions/50236150/how-do-i-form-a-slice-from-a-hashset", "title": "How do I form a slice from a HashSet?", "body": "<p>A struct is defined as:</p>\n\n<pre><code>struct Node {\n    set: HashSet&lt;usize&gt;,\n    // other fields omitted\n}\n</code></pre>\n\n<p>I <strong>have to</strong> implement a function for a trait (compatibility issues) which needs to return all elements in the set as a slice.</p>\n\n<p>I am aware of something like the following function won't work:</p>\n\n<pre><code>impl Node {\n    pub fn set_slice(&amp;self) -&gt; &amp;[usize] {\n        let elems: Vec&lt;_&gt; = self.set.iter().cloned().collect();\n        &amp;elems[..]\n    }\n}\n</code></pre>\n\n<p>The problem is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `elems` does not live long enough\n  --&gt; src/main.rs:11:10\n   |\n11 |         &amp;elems[..]\n   |          ^^^^^ borrowed value does not live long enough\n12 |     }\n   |     - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the method body at 9:5...\n  --&gt; src/main.rs:9:5\n   |\n9  | /     pub fn set_slice(&amp;self) -&gt; &amp;[usize] {\n10 | |         let elems: Vec&lt;_&gt; = self.set.iter().cloned().collect();\n11 | |         &amp;elems[..]\n12 | |     }\n   | |_____^\n</code></pre>\n\n<p>I know this requirement may sound strange. Despite why I have to do this, is there any 'good' way to achieve this?</p>\n\n<p>If it is possible, I want keep the <code>HashSet</code> container for a O(1) lookup, and I don't want to introduce new struct members in order to save memory. </p>\n"}, {"tags": ["reference", "rust", "immutability", "lifetime"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1525788707, "post_id": 50235594, "comment_id": 87488699, "body": "Lifetimes 101: know your <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elisions</a>. Consider expanding all lifetimes in <code>mwrite</code> as an exercise."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 2, "creation_date": 1525788865, "post_id": 50235594, "comment_id": 87488801, "body": "Why return a reference that was passed into the function? It ought to be available in the outer scope anyway..."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1525789297, "post_id": 50235594, "comment_id": 87489087, "body": "There are multiple other issues in this code: there is no need for a <code>return</code> at the end of a function, just remove the semi-colon; results from <code>writer.write</code> are deliberately ignored, and this will likely trigger a compiler warning. <code>mwread</code> does not even contain a reproducible implementation. You are highly advised to write a proper <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> next time."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525789336, "post_id": 50235594, "comment_id": 87489115, "body": "Your code isn&#39;t valid Rust. It&#39;s missing the <code>struct</code> keyword, for one. It generates errors (<code>method `mwread` is not a member of trait `CursorReadWrite`</code>, <code>cannot find value `somedata` in this scope</code>), etc. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and <a href=\"https://stackoverflow.com/posts/50235594/edit\">edit</a> your question to contain it."}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 2, "last_activity_date": 1525789202, "creation_date": 1525789202, "answer_id": 50235899, "question_id": 50235594, "link": "https://stackoverflow.com/questions/50235594/lifetime-mismatch-return-a-referenced-mutable-variable/50235899#50235899", "title": "lifetime mismatch - Return a referenced mutable variable", "body": "<p>It's not easy to fix your code, because there are plenty of missing pieces, but you might want to re-define <code>mwrite</code> with explicit lifetimes:</p>\n\n<pre><code>pub trait CursorReadWrite&lt;'a, 'b&gt; {\n    fn mwrite(&amp;'a mut self, writer: &amp;'b mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; &amp;'b mut Cursor&lt;Vec&lt;u8&gt;&gt;;\n    fn mwread(&amp;mut self, reader: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;);\n}\n\nimpl&lt;'a, 'b&gt; CursorReadWrite&lt;'a, 'b&gt; for Triangle{\n    fn mwrite(&amp;'a mut self, writer: &amp;'b mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; &amp;'b mut Cursor&lt;Vec&lt;u8&gt;&gt;{\n        ...\n    }\n}\n</code></pre>\n\n<p>When you have more than 1 input lifetime the compiler can't tell which one you want to pick for the output. Citing <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision rules</a>:</p>\n\n<blockquote>\n  <ol>\n  <li><p>Each parameter that is a reference gets its own lifetime parameter. In other words, a function with one parameter gets one lifetime\n  parameter: fn <code>foo&lt;'a&gt;(x: &amp;'a i32)</code>, <strong>a function with two arguments gets\n  two separate lifetime parameters</strong>: <code>fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32)</code>, and so on.</p></li>\n  <li><p>(...)</p></li>\n  <li><p><strong>If there are multiple input lifetime parameters, but one of them is <code>&amp;self</code> or <code>&amp;mut self</code> because this is a method, then the lifetime of self\n  is assigned to all output lifetime parameters</strong>. (...)</p></li>\n  </ol>\n</blockquote>\n"}], "owner": {"reputation": 897, "user_id": 4528728, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/48b7aeab16c3e50657c88ac3542a502b?s=128&d=identicon&r=PG&f=1", "display_name": "Slim Shady", "link": "https://stackoverflow.com/users/4528728/slim-shady"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 928, "favorite_count": 0, "accepted_answer_id": 50235899, "answer_count": 1, "score": -2, "last_activity_date": 1525790127, "creation_date": 1525788313, "last_edit_date": 1525790127, "question_id": 50235594, "link": "https://stackoverflow.com/questions/50235594/lifetime-mismatch-return-a-referenced-mutable-variable", "title": "lifetime mismatch - Return a referenced mutable variable", "body": "<p>I have structs of different shapes:</p>\n\n<pre><code>struct Triangle { points: Vec&lt;u8&gt; }\n\nstruct Square { points: Vec&lt;u8&gt; }\n\nstruct Pentagon { points: Vec&lt;u8&gt; }\n</code></pre>\n\n<p>I have a trait <code>CursorReadWrite</code>:</p>\n\n<pre><code>use std::io::Cursor;\n\npub trait CursorReadWrite {\n    fn mwrite(&amp;mut self, writer: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;;\n    fn mread(&amp;mut self, reader: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;);\n}\n</code></pre>\n\n<p>I can implement it for <code>Triangle</code>, <code>Square</code> etc</p>\n\n<pre><code>impl CursorReadWrite for Triangle {\n    fn mwrite(&amp;mut self, writer: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt; {\n        //do some work and write the data on Cursor&lt;&gt;\n        writer.write(somedata);\n        return writer;\n    }\n    fn mread(&amp;mut self, reader: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;) {\n        //read data and do some work and save it in mutable self ( Triangle, Square etc)\n        self.points = somedata;\n    }\n}\n</code></pre>\n\n<p>Call the function like this </p>\n\n<pre><code>let csd = Cursor::new(Vec::&lt;u8&gt;::new());\nlet mut t = Triangle::default();\nlet new_csd = t.mwrite(&amp;mut csd);\nt.mread(&amp;mut new_csd);\n</code></pre>\n\n<p>It gives this error </p>\n\n\n\n<pre><code>error[E0623]: lifetime mismatch\n   |\n25 |     fn mwrite(&amp;mut self,writer: &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;) -&gt; &amp;mut Cursor&lt;Vec&lt;u8&gt;&gt;{\n   |                                     --------------------     ----------------------------\n   |                                     |\n   |                                     this parameter and the return type are declared with different lifetimes...\n...\n28 |             return writer;\n   |                    ^^^^^^^^^^^^ ...but data from `writer` is returned here\n</code></pre>\n"}, {"tags": ["hashmap", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525787403, "post_id": 50230946, "comment_id": 87487866, "body": "See also <a href=\"https://stackoverflow.com/q/45194220/155423\">Get first element from HashMap</a>."}, {"owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525833792, "post_id": 50230946, "comment_id": 87507039, "body": "@Stargateur Fixed!"}, {"owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525833804, "post_id": 50230946, "comment_id": 87507041, "body": "@Shepmaster Your right, that post does answer my question, however it does not do so in an obvious way.  It&#39;s title is not indicative of the problem I was referring to, nor is the example code or explanation.  This post has a better description of the actual problem.  There should be a better way of solving this besides just marking this as a duplicate?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525834102, "post_id": 50230946, "comment_id": 87507101, "body": "that&#39;s actually the perfect use case for duplicates. They serve as signposts that redirect people that search for different terminology, getting them all to one canonical set of answers. There&#39;s absolutely <i>nothing</i> bad about having your question marked as a duplicate."}, {"owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525834420, "post_id": 50230946, "comment_id": 87507183, "body": "Makes sense! Thank you!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525834743, "post_id": 50230946, "comment_id": 87507246, "body": "The down vote was for the output as image, which you&#39;ve fixed so I&#39;ve removed; thank you."}], "answers": [{"comments": [{"owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "edited": false, "score": 0, "creation_date": 1525833843, "post_id": 50231183, "comment_id": 87507048, "body": "Thank you! this is exactly what I was looking for!"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 7, "last_activity_date": 1525776625, "last_edit_date": 1525776625, "creation_date": 1525774438, "answer_id": 50231183, "question_id": 50230946, "link": "https://stackoverflow.com/questions/50230946/why-does-hashmapiter-nth0-give-different-output-for-each-execution-run/50231183#50231183", "title": "Why does HashMap::iter.nth(0) give different output for each execution run?", "body": "<p>It's because a <code>HashMap</code> is unordered. Its <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.iter\" rel=\"noreferrer\"><code>iter</code> method</a></p>\n\n<blockquote>\n  <p>visits all key-value pairs in <strong>arbitrary</strong> order</p>\n</blockquote>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/collections/#iterators\" rel=\"noreferrer\">documentation on collections</a> describes this behavior:</p>\n\n<blockquote>\n  <p>For <strong>unordered collections like HashMap</strong>, the items will be yielded in\n  whatever order the internal representation made most convenient.</p>\n</blockquote>\n\n<p>In order to always retrieve a specific value you need to <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get\" rel=\"noreferrer\">search by the key</a> (or use one of the <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.Iter.html#impl-Iterator\" rel=\"noreferrer\"><code>Iterator</code> methods</a> that don't depend on the order, e.g. <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\" rel=\"noreferrer\"><code>find</code></a>); for example:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut hm = HashMap::new();\n    hm.insert(0, \"a\");\n    hm.insert(1, \"b\");\n    println!(\"{:?}\", hm.get(&amp;0)) // always Some(\"a\")\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "edited": false, "score": 0, "creation_date": 1525836382, "post_id": 50232015, "comment_id": 87507564, "body": "Thanks for the BTreeMap mention, this seems interesting, I will check it out!"}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 2, "last_activity_date": 1525789619, "last_edit_date": 1525789619, "creation_date": 1525777287, "answer_id": 50232015, "question_id": 50230946, "link": "https://stackoverflow.com/questions/50230946/why-does-hashmapiter-nth0-give-different-output-for-each-execution-run/50232015#50232015", "title": "Why does HashMap::iter.nth(0) give different output for each execution run?", "body": "<p>It is worth mentioning <code>BTreeMap</code> and corresponding <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.iter\" rel=\"nofollow noreferrer\">iter</a> function</p>\n\n<blockquote>\n  <p>Gets an iterator over the entries of the map, sorted by key.</p>\n</blockquote>\n\n<p>This may be a simple drop-in replacement.</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn main() {\n    let mut hm = BTreeMap::new();\n    hm.insert(0, 1);\n    hm.insert(1, 1);\n    let mut iter = hm.iter();\n    println!(\"{:?}\", iter.nth(0).expect(\"Fatal.\").0);\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=099f64c37213eb08dcfe7d4a05860c5b&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 2, "last_activity_date": 1525789515, "last_edit_date": 1525789515, "creation_date": 1525789162, "answer_id": 50235889, "question_id": 50230946, "link": "https://stackoverflow.com/questions/50230946/why-does-hashmapiter-nth0-give-different-output-for-each-execution-run/50235889#50235889", "title": "Why does HashMap::iter.nth(0) give different output for each execution run?", "body": "<p>As others have said, the order is not predictable. However, using a different hasher can at least give you <em>reproducible</em> results. For example the <a href=\"https://crates.io/crates/fnv\" rel=\"nofollow noreferrer\">FNV hash function</a>, which you can use like this:</p>\n\n<pre><code>extern crate fnv;\n\nuse std::collections::HashMap;\nuse std::hash::BuildHasherDefault;\nuse fnv::FnvHasher;\n\ntype HashMapFnv&lt;K, V&gt; = HashMap&lt;K, V, BuildHasherDefault&lt;FnvHasher&gt;&gt;;\n\nfn main() {\n    let mut hm = HashMapFnv::default();\n    hm.insert(0, 1);\n    hm.insert(1, 1);\n    let mut iter = hm.iter();\n    println!(\"{:?}\", iter.nth(0).expect(\"Fatal.\").0)\n}\n</code></pre>\n\n<p>This should give you the same results each time. However, there are no guarantees about what that order is, so you might get different results on a different operating system, if you update FNV or if you use a different version of Rust itself.</p>\n\n<p>Note that you shouldn't use this hash function in any application that processes external data, as it is be vulnerable to hash collision attacks. The default hash function in Rust is safe.</p>\n"}], "owner": {"reputation": 753, "user_id": 3699468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/n0DZO.jpg?s=128&g=1", "display_name": "rustysys-dev", "link": "https://stackoverflow.com/users/3699468/rustysys-dev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 224, "favorite_count": 0, "closed_date": 1525789473, "accepted_answer_id": 50231183, "answer_count": 3, "score": 3, "last_activity_date": 1525833295, "creation_date": 1525773686, "last_edit_date": 1525833295, "question_id": 50230946, "link": "https://stackoverflow.com/questions/50230946/why-does-hashmapiter-nth0-give-different-output-for-each-execution-run", "closed_reason": "Duplicate", "title": "Why does HashMap::iter.nth(0) give different output for each execution run?", "body": "<p>Given the below program:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut hm = HashMap::new();\n    hm.insert(0, 1);\n    hm.insert(1, 1);\n    let mut iter = hm.iter();\n    println!(\"{:?}\", iter.nth(0).expect(\"Fatal.\").0)\n}\n</code></pre>\n\n<p>I get a different output for each execution run of the code:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>procyclinsur@procyclinsur:~/Documents/Rust/t1$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/t1`\n1\nprocyclinsur@procyclinsur:~/Documents/Rust/t1$ vim src/main.rs \nprocyclinsur@procyclinsur:~/Documents/Rust/t1$ cargo run\n   Compiling t1 v0.1.0 (file:///home/procyclinsur/Documents/Rust/t1)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.12 secs\n     Running `target/debug/t1`\n1\nprocyclinsur@procyclinsur:~/Documents/Rust/t1$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/t1`\n1\nprocyclinsur@procyclinsur:~/Documents/Rust/t1$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/t1`\n0\nprocyclinsur@procyclinsur:~/Documents/Rust/t1$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/t1`\n1\n</code></pre>\n\n<p>I'd expect that I should see the same output for each run of the program. Does anyone know the reason why this code behaves in such a way? How do I get this to output only 0 as expected?</p>\n"}, {"tags": ["c++", "linker", "rust", "static-libraries"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525768682, "post_id": 50229088, "comment_id": 87475859, "body": "Is this the same issue as in <a href=\"https://stackoverflow.com/q/43866969/3005167\">stackoverflow.com/q/43866969/3005167</a>?"}, {"owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525768754, "post_id": 50229088, "comment_id": 87475919, "body": "@kazemakase unfortunately it isn&#39;t, as far as I could see. This is C++, and I tried switching to g++ (instead of clang++), but it had no effect."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 3, "creation_date": 1525768997, "post_id": 50229088, "comment_id": 87476058, "body": "@Shir Intuitively I&#39;d guess C++ or C does not matter.... wait, don&#39;t you need to specify <code>extern &quot;C&quot;</code> in C++?"}, {"owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "reply_to_user": {"reputation": 32072, "user_id": 7860670, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/LH36y.png?s=128&g=1", "display_name": "user7860670", "link": "https://stackoverflow.com/users/7860670/user7860670"}, "edited": false, "score": 0, "creation_date": 1525769015, "post_id": 50229088, "comment_id": 87476071, "body": "@VTT I tried dynamic libraries (namely - linking with an .so file I created by adding &quot;crate-type = [&quot;dylib&quot;]&quot; to my cargo file. It resulted in the exact same &quot;undefined reference&quot; error on compilation."}, {"owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525769279, "post_id": 50229088, "comment_id": 87476225, "body": "@kazemakase OMG. That worked! Thank you."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525769402, "post_id": 50229088, "comment_id": 87476302, "body": "good to hear :) In that case, I guess we can say that the question is answered <a href=\"https://stackoverflow.com/q/44056461/3005167\">here</a>?"}, {"owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525769628, "post_id": 50229088, "comment_id": 87476457, "body": "@kazemakase I wouldn&#39;t say that. It explains why your suggestion works, though."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525770783, "post_id": 50229088, "comment_id": 87477204, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/24105186/how-can-i-call-c-functions-from-library-in-rust\">How can I call C++ functions from library in Rust?</a>"}, {"owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525783106, "post_id": 50229088, "comment_id": 87485011, "body": "@Stargateur no, it\u2019s the other way around. This question is about calling a Rust library in C++."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525802145, "post_id": 50229088, "comment_id": 87496460, "body": "@Shir Oh, you very right, but the answer will be very close."}], "answers": [{"tags": [], "owner": {"reputation": 2916, "user_id": 3646096, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/KUofm.jpg?s=128&g=1", "display_name": "M&#225;rio Feroldi", "link": "https://stackoverflow.com/users/3646096/m%c3%a1rio-feroldi"}, "is_accepted": true, "score": 4, "last_activity_date": 1525783943, "creation_date": 1525783943, "answer_id": 50234125, "question_id": 50229088, "link": "https://stackoverflow.com/questions/50229088/compiling-rust-static-library-and-using-it-in-c-undefined-reference/50234125#50234125", "title": "Compiling Rust static library and using it in C++: undefined reference", "body": "<p>Name mangling in <a href=\"/questions/tagged/c%2b%2b\" class=\"post-tag\" title=\"show questions tagged &#39;c++&#39;\" rel=\"tag\">c++</a> is not standardized, therefore <code>void hello_world_in_rust()</code> might have a different linkage compared to <a href=\"/questions/tagged/c\" class=\"post-tag\" title=\"show questions tagged &#39;c&#39;\" rel=\"tag\">c</a>. You can force the same C linkage in both languages by using <code>extern \"C\"</code> as part of the functions signature/prototype:</p>\n\n<pre><code>extern \"C\" void hello_world_in_rust();\n</code></pre>\n"}], "owner": {"reputation": 237, "user_id": 1225968, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/86d4964523678c3eea5c8970e735faf4?s=128&d=identicon&r=PG", "display_name": "Shir", "link": "https://stackoverflow.com/users/1225968/shir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2486, "favorite_count": 1, "accepted_answer_id": 50234125, "answer_count": 1, "score": 2, "last_activity_date": 1525783943, "creation_date": 1525767610, "last_edit_date": 1592644375, "question_id": 50229088, "link": "https://stackoverflow.com/questions/50229088/compiling-rust-static-library-and-using-it-in-c-undefined-reference", "title": "Compiling Rust static library and using it in C++: undefined reference", "body": "<p>I'm trying to compile a <code>static</code> library in Rust, and then use it in my C++ code (note this is about calling Rust from C++ and not the other way around). I went over all the tutorials I could find online, and replies to similar questions, and I'm obviously doing something wrong, though I can't see what.</p>\n<p>I created a minimal example for my problem :</p>\n<p><strong>1. Cargo.toml :</strong></p>\n<pre><code>[package]\nname = &quot;hello_world&quot;\nversion = &quot;0.1.0&quot;\n\n[lib]\nname = &quot;hello_in_rust_lib&quot;\npath = &quot;src/lib.rs&quot;\ncrate-type = [&quot;staticlib&quot;]\n\n[dependencies]\n</code></pre>\n<p><strong>2. lib.rs :</strong></p>\n<pre><code>#[no_mangle]\npub unsafe extern &quot;C&quot; fn hello_world_in_rust() {\n    println!(&quot;Hello World, Rust here!&quot;);\n}\n</code></pre>\n<p><strong>3. hello_world_in_cpp.cpp :</strong></p>\n<pre><code>extern void hello_world_in_rust();\n\nint main() {\n    hello_world_in_rust();\n}\n</code></pre>\n<p>To build the library, in my rust directory I ran :</p>\n<blockquote>\n<p>cargo build --lib</p>\n</blockquote>\n<p>(which went fine)\nI proceeded to run, in my C++ folder :</p>\n<blockquote>\n<p>clang++ hello_world_in_cpp.cpp -o hello.out -L ../hello_world/target/release/ -lhello_in_rust_lib</p>\n</blockquote>\n<p>Which resulted in the following error :</p>\n<blockquote>\n<p>/tmp/hello_world_in_cpp-cf3577.o: In function <code>main</code> :</p>\n<p>hello_world_in_cpp.cpp:(.text+0x5): undefined reference to <code>hello_world_in_rust()</code></p>\n</blockquote>\n"}, {"tags": ["vector", "types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 1, "creation_date": 1525766056, "post_id": 50228232, "comment_id": 87474356, "body": "<code>[T]</code> is not an array, because arrays are <code>[T; N]</code> with a statically known size. The <a href=\"https://doc.rust-lang.org/std/slice/\" rel=\"nofollow noreferrer\">slice documentation</a> names <code>[T]</code> a <i>contiguous sequence</i>.. I&#39;m not sure if this is the official term."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525766441, "post_id": 50228232, "comment_id": 87474572, "body": "In contrast, the <a href=\"https://doc.rust-lang.org/reference/types.html#array-and-slice-types\" rel=\"nofollow noreferrer\">Reference</a> says <code>[T]</code> is a <i>slice</i> and <code>&amp;[T]</code> is a <i>shared slice</i> often just called <i>slice</i>. This gets confusing :)"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525771880, "post_id": 50228232, "comment_id": 87477915, "body": "Yeah, it can be confusing; I guess <code>[T]</code>, <code>&amp;[T]</code> and <code>&amp;mut [T]</code> can all be referred to as slices, but the reference variants are most useful and thus that name stuck to them most."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 3, "last_activity_date": 1525766443, "last_edit_date": 1525766443, "creation_date": 1525764743, "answer_id": 50228232, "question_id": 50228083, "link": "https://stackoverflow.com/questions/50228083/why-does-a-t-argument-also-accept-vect/50228232#50228232", "title": "Why does a &amp;[T] argument also accept &amp;Vec&lt;T&gt;?", "body": "<p>Generally speaking, <a href=\"https://doc.rust-lang.org/std/primitive.slice.html\" rel=\"nofollow noreferrer\"><code>[T]</code> is a contiguous sequence and <code>&amp;[T]</code> is a slice</a>.</p>\n\n<p>The reason why the compiler allows <code>&amp;[String]</code> instead of <code>&amp;Vec&lt;String&gt;</code> is that <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#deref-methods\" rel=\"nofollow noreferrer\"><code>Vec&lt;T&gt;</code> dereferences to <code>[T]</code></a>. It can be said that the former notation (in function parameters) is more general; it is also <a href=\"https://stackoverflow.com/questions/40006219/why-is-it-discouraged-to-accept-a-reference-to-a-string-string-vec-vec-or\">the preferred one</a>. Further details about automatic dereferencing rules can be found in <a href=\"https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules\">this question</a>.</p>\n"}], "owner": {"reputation": 1585, "user_id": 3193180, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ZJHYL.jpg?s=128&g=1", "display_name": "kreo", "link": "https://stackoverflow.com/users/3193180/kreo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 275, "favorite_count": 0, "accepted_answer_id": 50228232, "answer_count": 1, "score": 2, "last_activity_date": 1525766443, "creation_date": 1525764184, "last_edit_date": 1525765253, "question_id": 50228083, "link": "https://stackoverflow.com/questions/50228083/why-does-a-t-argument-also-accept-vect", "title": "Why does a &amp;[T] argument also accept &amp;Vec&lt;T&gt;?", "body": "<p>I am working through the Rust book, namely the <a href=\"https://doc.rust-lang.org/book/second-edition/ch12-00-an-io-project.html\" rel=\"nofollow noreferrer\">minigrep project</a>. There I came across the following snippet:</p>\n\n<pre><code>fn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n\n    let (query, filename) = parse_config(&amp;args);\n\n    // --snip--\n}\n\nfn parse_config(args: &amp;[String]) -&gt; (&amp;str, &amp;str) {\n    let query = &amp;args[1];\n    let filename = &amp;args[2];\n\n    (query, filename)\n}\n</code></pre>\n\n<p>The confusing piece for me is <code>args: &amp;[String]</code>. If I replace it with <code>args: &amp;Vec&lt;String&gt;</code>, it also works. My guess is that <code>&amp;[String]</code> is a more general type annotation that matches not only <code>&amp;Vec&lt;String&gt;</code>, but also some other types. Is that correct? If so, what other types are matched by <code>[T]</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525742710, "post_id": 50224492, "comment_id": 87466534, "body": "Why do you need this functionality?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525742720, "post_id": 50224492, "comment_id": 87466535, "body": "Out of the box solution: Don&#39;t export macros you don&#39;t want OR make fine-grained modules and only import the ones you want."}, {"owner": {"reputation": 73, "user_id": 9416273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3567fbdfbadb27c1e624bf7b4bebec3f?s=128&d=identicon&r=PG&f=1", "display_name": "aeafwefcve", "link": "https://stackoverflow.com/users/9416273/aeafwefcve"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525749648, "post_id": 50224492, "comment_id": 87467949, "body": "@Shepmaster I have a macro called <code>html</code> and it is in the file <code>html_macro.rs</code>. I have <code>#[macro_use] mod html_macro;</code> in my <code>main.rs</code> file. The <code>html</code> macro requires another macro <code>html_inner</code> to work, which is defined in the same file. I want the other code in my application to be able to use the <code>html</code> macro but I don&#39;t want the <code>html_inner</code> macro to be visible outside of the <code>html_macro.rs</code> file."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525814461, "post_id": 50224492, "comment_id": 87502458, "body": "That&#39;s not how macros work. If <code>html!</code> invokes <code>html_inner!</code>, then both macros need to be in scope when <code>html!</code> is invoked."}], "owner": {"reputation": 73, "user_id": 9416273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3567fbdfbadb27c1e624bf7b4bebec3f?s=128&d=identicon&r=PG&f=1", "display_name": "aeafwefcve", "link": "https://stackoverflow.com/users/9416273/aeafwefcve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 53, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1525742480, "creation_date": 1525742425, "last_edit_date": 1525742480, "question_id": 50224492, "link": "https://stackoverflow.com/questions/50224492/is-it-possible-to-control-which-macros-are-imported-from-a-module", "title": "Is it possible to control which macros are imported from a module?", "body": "<p>The documentation says that if a <code>macro_use</code> attribute is on an <code>extern crate</code> statement, then it can specify which macros are imported like this: <code>#[macro_use(macro1, macro2)]</code>. Is there any way to do this for <code>mod</code> statements?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1525731020, "post_id": 50223152, "comment_id": 87463845, "body": "What differentiates a <code>Post</code> from a <code>PostDraft</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525731122, "post_id": 50223152, "comment_id": 87463864, "body": "I believe your question is already answered by the answers of <a href=\"https://stackoverflow.com/q/39150216/155423\">Implementing a trait for multiple types at once</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50223152/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1525731139, "post_id": 50223152, "comment_id": 87463873, "body": "@Schwern in this example, absolutely nothing. In reality, they don&#39;t implement the same field definitions and/or method implementations. And there are more than two. The only rigorously common part is the <code>show_author</code> method, and it&#39;s more complicated IRL, therefore I&#39;d like to avoid duplicating it."}, {"owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525731718, "post_id": 50223152, "comment_id": 87464020, "body": "@Shepmaster this was not the answer I was <i>hoping for</i>, but that was the actual answer indeed. Actually it makes sense, and as one of the answer mentions, the code above calls for refactoring. Thanks for your reactivity."}, {"owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1525731825, "post_id": 50223152, "comment_id": 87464047, "body": "I feel like implementing <code>Post</code> and <code>PostDraft</code> as separate structs is the real problem here. &quot;Draft&quot; (or &quot;published&quot;) might better be a trait."}, {"owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1525731934, "post_id": 50223152, "comment_id": 87464072, "body": "@Schwern it makes sense \u2014 however I&#39;m trying to follow the example from the Rust Book where they go through a variant of the state pattern using types as state, hence the two different types here \u2014 <a href=\"https://doc.rust-lang.org/beta/book/second-edition/ch17-03-oo-design-patterns.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/beta/book/second-edition/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 1, "creation_date": 1525732644, "post_id": 50223152, "comment_id": 87464286, "body": "@Schwern it is a duplicate as it is phrased; you&#39;d need to perform substantial editing to make <i>this</i> not a duplicate. Perhaps you need to self-ask/answer a question that is phrased however you need it be to answer it."}, {"owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 0, "creation_date": 1525732814, "post_id": 50223152, "comment_id": 87464321, "body": "@Schwern actually this part of the Rust Book is precisely about using several types to model state, instead of putting state in a given, unique type. I suggest you read through the link I provided if you&#39;re interested, as it gives quite a surprising perspective on that, at least as I found."}, {"owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 1, "creation_date": 1525732989, "post_id": 50223152, "comment_id": 87464372, "body": "@Jivan I see where you&#39;re at in the example now. I think in this instance rather than adding more String fields to all the structs, you&#39;d create a new struct like <code>struct Content { body: String, author: String }</code> and have everything use that. <code>struct DraftPost { content: Content }</code> and <code>struct Post { content: Content }</code>."}, {"owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "reply_to_user": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "edited": false, "score": 2, "creation_date": 1525733119, "post_id": 50223152, "comment_id": 87464399, "body": "@Schwern that&#39;s exactly what I ended up doing \u2014 it seems to be the most natural way to do that, effectively"}], "owner": {"reputation": 15633, "user_id": 2091169, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/MT8tZ.jpg?s=128&g=1", "display_name": "Jivan", "link": "https://stackoverflow.com/users/2091169/jivan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 155, "favorite_count": 0, "closed_date": 1525731690, "answer_count": 0, "score": 0, "last_activity_date": 1525731148, "creation_date": 1525730907, "last_edit_date": 1525731148, "question_id": 50223152, "link": "https://stackoverflow.com/questions/50223152/duplicate-trait-method-implementation-in-rust", "closed_reason": "Duplicate", "title": "Duplicate trait method implementation in Rust", "body": "<p>In the following code, the implementation of <code>show_author()</code> is the same for <code>Post</code> and <code>PostDraft</code>.</p>\n\n<p>Is it possible to de-duplicate it and implement it directly in the trait, or in another form, so that it wouldn't have to be written twice?</p>\n\n<pre><code>trait PostAuthor {\n    fn show_author(&amp;self) -&gt; String;\n}\n\nstruct Post {\n    author: String,\n}\n\nstruct PostDraft {\n    author: String,\n}\n\nimpl PostAuthor for Post {\n    fn show_author(&amp;self) -&gt; String {\n        &amp;self.author\n    }\n}\n\nimpl PostAuthor for PostDraft {\n    fn show_author(&amp;self) -&gt; String {\n        &amp;self.author\n    }\n}\n</code></pre>\n\n<p>When trying to replace the method signature with the actual implementation in the trait, the following error shows, indicating that the trait obviously doesn't know (and rightly so) about any <code>author</code> field:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: attempted to take value of method `author` on type `&amp;Self`\n --&gt; src/lib.rs:5:15\n  |\n5 |         &amp;self.author\n  |               ^^^^^^\n  |\n  = help: maybe a `()` to call it is missing? If not, try an anonymous function\n</code></pre>\n\n<p>In a hypothetical purposefully-invalid imaginary Rust code, a solution would be to simply declare the implementation for the two <code>struct</code>s at once:</p>\n\n<pre><code>impl PostAuthor for Post, PostDraft {\n    fn show_author(&amp;self) -&gt; String {\n        &amp;self.author\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525722683, "post_id": 50221148, "comment_id": 87460263, "body": "I believe this question to already be answered by <a href=\"https://stackoverflow.com/q/32165917/155423\">Why does linking lifetimes matter only with mutable references?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50221148/edit\">edit</a> your question to explain how this differs from the existing answers. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525722873, "post_id": 50221148, "comment_id": 87460347, "body": "Additionally, how does <i>the compiler know</i> that <code>get_mut</code> isn&#39;t going to store the argument in the <code>HashMap</code>, using only the signature of the function?"}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525723357, "post_id": 50221148, "comment_id": 87460592, "body": "I&#39;m not entirely sure that my question is the same as the one you referred to. Mostly, the difference is that in my case, only immutable references to <code>Foo</code> (the borrowing type) are involved."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525724506, "post_id": 50221148, "comment_id": 87461132, "body": "However, you are spot on regarding <code>get_mut</code>: the difference (with <code>get</code>) is not about parameter <code>k</code>, but about <code>self</code> being mutable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525724866, "post_id": 50221148, "comment_id": 87461291, "body": "Right, it&#39;s the difference between <code>&amp;self</code> and <code>&amp;mut self</code>. Thanks to lifetime elision, the method is <code>get_mut&lt;&#39;a, Q: ?Sized&gt;(&amp;&#39;a mut self, k: &amp;Q) -&gt; Option&lt;&amp;&#39;a mut V&gt;</code> \u2014 the lifetimes are linked."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525725882, "post_id": 50221148, "comment_id": 87461694, "body": "Yes, but (my understanding of) lifetime elision does not explain everything here. To be even more precise, we have <code>get_mut&lt;&#39;a, &#39;b, Q: ?Sized&gt;(&amp;&#39;a mut self, k: &amp;&#39;b Q) -&gt; Option&lt;&amp;&#39;a mut V&gt;</code>. But here the &quot;inner&quot; lifetime of Q seems to be constrained by <code>&#39;a</code>."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525747001, "post_id": 50221148, "comment_id": 87467380, "body": "If the answer to your question contains the word &quot;variance&quot;, you&#39;re gonna have a bad time. For would-be answerers, here are some facts I found illuminating: <code>&amp;T</code> is variant in <code>T</code>, <code>&amp;mut T</code> is invariant in <code>T</code>, and <code>HashMap&lt;K, V&gt;</code> is variant in <code>K</code>. Good luck!"}], "answers": [{"comments": [{"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1525776360, "post_id": 50230740, "comment_id": 87480671, "body": "Thanks a lot, that clarifies a lot of things (also because I read <a href=\"https://stackoverflow.com/questions/32165917/why-does-linking-lifetimes-matter-only-with-mutable-references\">this</a> before, on @shepmaster&#39;s advice). That being said, this is a pity here, because we know (unlike the compiler) that <code>get_mut</code> will not leak the passed key in the <code>HashMap</code> :-/"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525786198, "post_id": 50230740, "comment_id": 87487001, "body": "Now it is right. Many thanks @trentcl for the correction!"}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1525790713, "post_id": 50230740, "comment_id": 87490043, "body": "I still don&#39;t get why replacing <code>&amp;&amp;c</code> by <code>&amp;c</code> works, though... I understand why it works type-wise (<code>K=&amp;u32</code> implements <code>Borrow&lt;Q&gt;</code> where <code>Q=u32</code>); but I don&#39;t understand why, all of a sudden, the compiler is satisfied with the lifetimes in that case..."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525803224, "post_id": 50230740, "comment_id": 87496999, "body": "<a href=\"https://doc.rust-lang.org/src/core/borrow.rs.html#95-97\" rel=\"nofollow noreferrer\"><code>&amp;&#39;a u32</code> implements <code>Borrow&lt;u32&gt;</code> for any lifetime <code>&#39;a</code></a>, and <a href=\"https://doc.rust-lang.org/src/core/borrow.rs.html#85-87\" rel=\"nofollow noreferrer\"><code>&amp;&#39;a u32</code> implements <code>Borrow&lt;&amp;&#39;a u32&gt;</code> by the reflexive implementation</a>, but <code>&amp;&#39;a u32</code> <i>doesn&#39;t</i> implement <code>Borrow&lt;&amp;&#39;b u32&gt;</code> even if <code>&#39;a: &#39;b</code>. This is because traits, <code>Borrow</code> included, are always invariant over their parameters."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 1, "creation_date": 1525803530, "post_id": 50230740, "comment_id": 87497200, "body": "@Pierre-Antoine This also means that if you&#39;re willing to create a newtype struct to put in your <code>HashMap</code>, you can write that missing blanket <code>impl</code> yourself and get (almost) the original example to compile: <a href=\"https://play.rust-lang.org/?gist=28abb8003a1e2f9460f01468b9feeb5a&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a>. So your intuition is right: the restriction is overly conservative."}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525811345, "post_id": 50230740, "comment_id": 87501217, "body": "@trentcl  Darn, I had the idea of the FooKey, but for some reason could not get it working. I&#39;ll start afain from your code, thanks. Note that FooKey must also implement Hash and Eq, consistently with Foo, in order to respect the contract of HashMap..."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1525811600, "post_id": 50230740, "comment_id": 87501326, "body": "@Pierre-Antoine If you pass <code>&amp;c</code> it works because passing <i>values by reference</i> is safe and <code>&amp;&amp;c</code> does not work because passing <i>references by reference</i> is not safe. See <a href=\"https://gist.github.com/attdona/52126d892a38f4c8d2593639c7579905\" rel=\"nofollow noreferrer\">this</a> just to get the idea."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 5, "last_activity_date": 1525785428, "last_edit_date": 1525785428, "creation_date": 1525773032, "answer_id": 50230740, "question_id": 50221148, "link": "https://stackoverflow.com/questions/50221148/why-is-hashmapget-mut-more-picky-than-hashmapget-regarding-lifetimes/50230740#50230740", "title": "Why is HashMap::get_mut more picky than HashMap::get regarding lifetimes?", "body": "<p>The problem arises because an immutable reference is variant over its (referenced) type whereas a mutable reference is invariant over its type.</p>\n\n<p>A great read for understanding the concept is the <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">Nomicon</a>.</p>\n\n<h1>HashMap: <code>get</code> versus <code>get_mut</code></h1>\n\n<p>Shrinking further down, this is a simpler code reproducing the problem:</p>\n\n<pre><code>#![allow(unused_variables)]\nuse std::collections::HashMap;\n\nfn main() {\n    let mut hm = HashMap::&lt;&amp;u32, u32&gt;::new();    // --+ 'a\n    let c = 42;                                    // |  --+ 'b\n                                                   // |    |\n    HashMap::&lt;&amp;u32, u32&gt;::get(&amp;mut hm, &amp;&amp;c);       // |    |\n    // HashMap::&lt;&amp;u32, u32&gt;::get_mut(&amp;mut hm, &amp;&amp;c);// |    |\n}                                                  // +    +\n</code></pre>\n\n<h1>The immutable case</h1>\n\n<p>Consider the signature of <code>HashMap::get</code>:</p>\n\n<pre><code>fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt;\n    where K: Borrow&lt;Q&gt;, Q: Hash + Eq\n</code></pre>\n\n<p>In this case <code>&amp;Q</code> is <code>&amp;&amp;'b u32</code> and <code>get</code>'s receiver is <code>&amp;Self</code>.</p>\n\n<p>The variant nature of immutable references implies that \na <code>&amp;HashMap&lt;&amp;'a u32, u32&gt;</code> can be used where a <code>&amp;HashMap&lt;'b u32, u32&gt;</code> is required.</p>\n\n<p>Thanks to this rule, the compiler considers the original invocation:</p>\n\n<pre><code>HashMap::&lt;&amp;'a u32, u32&gt;::get(&amp;hm, &amp;&amp;'b c);\n</code></pre>\n\n<p>equivalent to:</p>\n\n<pre><code>HashMap::&lt;&amp;'b u32, u32&gt;::get(&amp;hm, &amp;&amp;'b c);\n</code></pre>\n\n<p>The compiler infers from the interface, and <strong>only from the interface</strong>, that the method implementation can not introduce leaks: compilation succeeds.</p>\n\n<h1>The mutable case</h1>\n\n<p>Consider the signature of <code>HashMap::get_mut</code>:</p>\n\n<pre><code>fn get_mut&lt;Q: ?Sized&gt;(&amp;mut self, k: &amp;Q) -&gt; Option&lt;&amp;mut V&gt;\n    where K: Borrow&lt;Q&gt;, Q: Hash + Eq\n</code></pre>\n\n<p>Also in this case <code>&amp;Q</code> is <code>&amp;&amp;'b u32</code>, but <code>get_mut</code>'s receiver is <code>&amp;mut Self</code>.</p>\n\n<p>The invariant nature of mutable references implies that a <code>&amp;mut HashMap&lt;&amp;'a u32, u32&gt;</code> can not be used where a <code>&amp;mut HashMap&lt;&amp;'b u32, u32&gt;</code> is expected.</p>\n\n<p>Thanks to this rule the compiler throws an error because by analyzing <strong>only</strong> the interface:</p>\n\n<pre><code>HashMap::&lt;&amp;'a 32, u32&gt;::get_mut(&amp;mut hm, &amp;&amp;'b c);\n</code></pre>\n\n<p>the compiler can not exclude, for example, that <code>get_mut</code> might store a key with lifetime <code>'b</code>.</p>\n\n<p>Such a key can not outlive the <code>hm</code> HashMap: compilation fails.</p>\n"}], "owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 375, "favorite_count": 1, "accepted_answer_id": 50230740, "answer_count": 1, "score": 4, "last_activity_date": 1525785428, "creation_date": 1525721239, "last_edit_date": 1525731905, "question_id": 50221148, "link": "https://stackoverflow.com/questions/50221148/why-is-hashmapget-mut-more-picky-than-hashmapget-regarding-lifetimes", "title": "Why is HashMap::get_mut more picky than HashMap::get regarding lifetimes?", "body": "<p>I have a <code>struct Foo&lt;'a&gt;</code> which is a wrapper around <code>&amp;'a str</code> references. And I want to populate a <code>HashMap</code> with <code>Foo</code>s as keys. Here is a snippet of code (<a href=\"https://play.rust-lang.org/?gist=4ead2fb232e56a00d2f048adcc0c643c&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">open it in playground</a>):</p>\n\n<pre><code>use std::collections::HashMap;\n\n#[derive(PartialEq, Eq, Hash)]\nstruct Foo&lt;'a&gt; {\n    txt: &amp;'a str,\n}\n\nfn main() {\n    let a = \"hello\".to_string();\n    let a2 = Foo { txt: &amp;a };\n    let b = \"hello\".to_string();\n    let b2 = Foo { txt: &amp;b };\n\n    let mut hm = HashMap::&lt;Foo, u32&gt;::new();\n\n    hm.insert(a2, 42);\n    println!(\"=== {:?}\", hm.get(&amp;b2));     // prints Some(42)\n    println!(\"=== {:?}\", hm.get_mut(&amp;b2)); // prints Some(42)\n\n    {\n        let c = \"hello\".to_string();\n        let c2 = Foo { txt: &amp;c };\n        println!(\"=== {:?}\", hm.get(&amp;c2));         // prints Some(42)\n        // println!(\"=== {:?}\", hm.get_mut(&amp;c2));  // does not compile. Why?\n        // hm.insert(c2, 101);                     // does not compile, but I understand why.\n    }\n}\n</code></pre>\n\n<p>This code compiles and runs  perfectly, but the compiler complains if I uncomment the two last lines of code. More precisely, it complains about the borrowed value in <code>c2</code> not living long enough.</p>\n\n<p>For the last one (<code>insert</code>), this is perfectly understandable: I can not move <code>c2</code> into the <code>HashMap</code>, which lives longer than data borrowed by <code>c2</code> from <code>c</code>.</p>\n\n<p>However, I don't understand why the second-to-last line (<code>get_mut</code>) has the same problem: in that case, the borrowed data should only be necessary during the call to <code>get_mut</code>, it is not moved into the <code>HashMap</code>.</p>\n\n<p>This is all the more surprising that the <code>get</code> above works perfectly (as I expected), and that both <code>get</code> and <code>get_mut</code> have identical signatures when it comes to the <code>k</code> parameter...</p>\n\n<hr>\n\n<p>After digging a little more,\nI reproduced the problem with plain references (instead of a struct embedding a reference).</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let a = 42;\n    let b = 42;\n\n    let mut hm = HashMap::&lt;&amp;u32,u32&gt;::new();\n\n    hm.insert(&amp;a, 13);\n    println!(\"=== {:?}\", hm.get(&amp;&amp;b));     // prints Some(13)\n    println!(\"=== {:?}\", hm.get_mut(&amp;&amp;b)); // prints Some(13)\n\n    {\n        let c = 42;\n        println!(\"=== {:?}\", hm.get(&amp;&amp;c));        // prints Some(13)\n        //println!(\"=== {:?}\", hm.get_mut(&amp;&amp;c));  // does not compile. Why?\n    } \n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=c6b3dcd61d6bcb4334e291fb8b9cff7c&amp;version=undefined&amp;mode=undefined\" rel=\"nofollow noreferrer\">open in playground</a>)</p>\n\n<p>Again, uncommenting the last line causes the compiler to complain (same message as above).</p>\n\n<p>However, I found an interesting workaround for this particular example: replacing <code>&amp;&amp;c</code> by <code>&amp;c</code> in the last line solves the problem -- actually, one can replace <code>&amp;&amp;</code> by <code>&amp;</code> in all calls to <code>get</code> and <code>get_mut</code>. I guess this has to do with <code>&amp;T</code> implementing <code>Borrow&lt;T&gt;</code>.</p>\n\n<p>I don't understand precisely what, in this workaround, convinces the compiler to do what I want it to do. And I can not apply it directly to my original code, because I don't use <em>references</em> as keys, but objects embedding references, so I can not replace <code>&amp;&amp;</code> by <code>&amp;</code>...</p>\n"}, {"tags": ["serialization", "rust", "deserialization", "serde"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1525703777, "post_id": 50216574, "comment_id": 87450314, "body": "The newline (ascii <code>10</code>) is in <code>initial_buf</code>, so it seems clear that it&#39;s originating from <code>serialize</code>, which you haven&#39;t provided."}, {"owner": {"reputation": 1143, "user_id": 986315, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8f87fe450b9f76c9b737675477576921?s=128&d=identicon&r=PG", "display_name": "Devashish Dixit", "link": "https://stackoverflow.com/users/986315/devashish-dixit"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525703819, "post_id": 50216574, "comment_id": 87450343, "body": "<code>serialize</code> is <code>bincode::serialize</code>"}], "answers": [{"comments": [{"owner": {"reputation": 1143, "user_id": 986315, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8f87fe450b9f76c9b737675477576921?s=128&d=identicon&r=PG", "display_name": "Devashish Dixit", "link": "https://stackoverflow.com/users/986315/devashish-dixit"}, "edited": false, "score": 0, "creation_date": 1525758284, "post_id": 50218053, "comment_id": 87470459, "body": "The problem with this approach is that the virtual cursor in file can be at any place. For example, if I want to read a random record from the middle of file, how can I seek to the starting location of that record? To accomplish this, I&#39;ll have to store the starting offsets of all the records separately."}, {"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "reply_to_user": {"reputation": 1143, "user_id": 986315, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8f87fe450b9f76c9b737675477576921?s=128&d=identicon&r=PG", "display_name": "Devashish Dixit", "link": "https://stackoverflow.com/users/986315/devashish-dixit"}, "edited": false, "score": 0, "creation_date": 1525774492, "post_id": 50218053, "comment_id": 87479555, "body": "If you require the ability to seek, you could length-prefix each record. Generally I would expect this approach to be significantly more efficient than using a newline delimiter -- because in order to seek to a particular &quot;line&quot; of the file you need to look at every single byte before that line to determine whether it is a newline byte, whereas with length prefixes you can skip an entire record with one read."}, {"owner": {"reputation": 1143, "user_id": 986315, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8f87fe450b9f76c9b737675477576921?s=128&d=identicon&r=PG", "display_name": "Devashish Dixit", "link": "https://stackoverflow.com/users/986315/devashish-dixit"}, "edited": false, "score": 0, "creation_date": 1525778433, "post_id": 50218053, "comment_id": 87481958, "body": "Also, it would be great if somehow we can add this in bincode itself. BSON adds int32 at the beginning to specify the length of encoded byte array."}], "tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 2, "last_activity_date": 1525708193, "creation_date": 1525708193, "answer_id": 50218053, "question_id": 50216574, "link": "https://stackoverflow.com/questions/50216574/how-can-i-add-separators-between-different-records-in-a-bincoded-file/50218053#50218053", "title": "How can I add separators between different records in a bincoded file?", "body": "<p>Bincode's contract is that you give it a value to serialize and it gives you back bytes. The contract does not guarantee that the bytes you get back cannot contain a newline.</p>\n\n<p>In your data the integer 1546 is 0x60A which is represented as the bytes <code>[10, 6, 0, 0]</code>.</p>\n\n<p>You should be able to work with Bincode data without any separators at all. The <a href=\"https://docs.rs/bincode/1.0/bincode/fn.deserialize_from.html\" rel=\"nofollow noreferrer\"><code>bincode::deserialize_from</code></a> function will know where to stop reading.</p>\n"}], "owner": {"reputation": 1143, "user_id": 986315, "user_type": "registered", "accept_rate": 48, "profile_image": "https://www.gravatar.com/avatar/8f87fe450b9f76c9b737675477576921?s=128&d=identicon&r=PG", "display_name": "Devashish Dixit", "link": "https://stackoverflow.com/users/986315/devashish-dixit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 233, "favorite_count": 0, "accepted_answer_id": 50218053, "answer_count": 1, "score": 1, "last_activity_date": 1525708193, "creation_date": 1525703159, "last_edit_date": 1525707013, "question_id": 50216574, "link": "https://stackoverflow.com/questions/50216574/how-can-i-add-separators-between-different-records-in-a-bincoded-file", "title": "How can I add separators between different records in a bincoded file?", "body": "<p>I have following <code>struct</code></p>\n\n<pre><code>struct Employee {\n    id: u64,\n    name: String,\n}\n</code></pre>\n\n<p>I am serializing it with following code and then writing the serialized byte array to a file:</p>\n\n<pre><code>let emp = Employee {\n    id: 1546,\n    name: \"abcd\".to_string(),\n};\n\nlet mut file = OpenOptions::new()\n    .read(true)\n    .write(true)\n    .create(true)\n    .open(\"hello.txt\")\n    .unwrap();\n\nlet initial_buf = &amp;bincode::serialize(&amp;emp).unwrap();\n\nprintln!(\"Initial Buf: {:?}\", initial_buf);\n\nfile.write(&amp;initial_buf);\nfile.write(&amp;[b'\\n']);\nfile.flush();\n\nfile.seek(SeekFrom::Start(0)).unwrap();\n\nlet mut final_buf: Vec&lt;u8&gt; = Vec::new();\n\nlet mut reader = BufReader::new(file);\n\nreader.read_until(b'\\n', &amp;mut final_buf).unwrap();\n\nprintln!(\"Final Buf: {:?}\", final_buf);\n</code></pre>\n\n<p>I get the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Initial Buf: [10, 6, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 97, 98, 99, 100]\nFinal Buf: [10]\n</code></pre>\n"}, {"tags": ["pointers", "rust", "raw-pointer"], "answers": [{"comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1525720190, "post_id": 50215695, "comment_id": 87459039, "body": "Accessing memory-mapped I/O-registers is another use case."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1525720508, "post_id": 50215695, "comment_id": 87459229, "body": "@starblue That sounds like something you&#39;d use mainly for embedded or close-to-the-metal code? I don&#39;t have any experience with that. Feel free to edit if it&#39;s not too much work :)"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1525721771, "post_id": 50215695, "comment_id": 87459855, "body": "Yes, that&#39;s exactly where (and how) the code hits the metal :-) Edit done."}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": true, "score": 8, "last_activity_date": 1553548327, "last_edit_date": 1553548327, "creation_date": 1525700451, "answer_id": 50215695, "question_id": 50214682, "link": "https://stackoverflow.com/questions/50214682/how-should-i-decide-when-it-is-more-or-less-appropriate-to-use-raw-pointers/50215695#50215695", "title": "How should I decide when it is more or less appropriate to use raw pointers?", "body": "<p>Basically, a pointer is an object that refers to another object. In most programming languages (I guess) a pointer is actually just a number that refers to a memory address. Rust's raw pointers are really just that - memory addresses. There are other pointer types in Rust (<code>&amp;</code> references, <code>Box</code>, <code>Rc</code>, <code>Arc</code>), for which the compiler can verify that the memory is valid and contains what the program thinks it contains. This is not the case for raw pointers; they can in principle point to any memory location, regardless of the content. Refer to <a href=\"https://doc.rust-lang.org/book/first-edition/raw-pointers.html\" rel=\"nofollow noreferrer\">The Book</a> for more details.</p>\n\n<p>Raw pointers can only be dereferenced inside <code>unsafe</code> blocks. These blocks are a way for the programmer to tell the compiler \"<em>I know better than you that this is safe and I promise not to do anything stupid</em>\".</p>\n\n<p>It is generally best to avoid raw pointers if possible because the compiler cannot reason about their validity, which makes them unsafe in general. Things that make raw pointers unsafe are the potential to...</p>\n\n<ul>\n<li>access a NULL pointer,</li>\n<li>access a dangling (freed or invalid) pointer,</li>\n<li>free a pointer multiple times,</li>\n</ul>\n\n<p>All these points boil down to <em>dereferencing</em> the pointer. That is, to use the memory pointed to.</p>\n\n<p>However, using raw pointers without dereferencing them is perfectly safe. This has a use case in finding out if two references point to the same object:</p>\n\n<pre><code>fn is_same(a: &amp;i32, b: &amp;i32) -&gt; bool {\n    a as *const _ == b as *const _\n}\n</code></pre>\n\n<p>Another use case is the foreign function interface (FFI). If you wrap a C function that takes raw pointers as arguments, there is no way around providing them to the function. This is actually unsafe (as is the whole FFI business), because the function is likely to dereference the pointer. This means you are responsible for making sure the pointer is valid, stays valid, and is not freed multiple times.</p>\n\n<p>Finally, raw pointers are used for optimization. For example, the <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"nofollow noreferrer\">slice iterator</a> uses raw pointers as internal state. This is faster than indices because they avoid range checks during iteration. However, it is also unsafe as far as the compiler is concerned. The library author needs to pay extra attention, so using raw pointers for optimization always comes at the risk of introducing memory bugs that you normally do not have in rust.</p>\n\n<p>In summary, the three main uses of raw pointers are:</p>\n\n<ul>\n<li>\"just numbers\" - you never access the memory they point to.</li>\n<li>FFI - you pass them outside Rust.</li>\n<li>memory-mapped I/O - to trigger I/O actions you need to access hardware registers at fixed addresses.</li>\n<li>performance - they can be faster than other options, but the compiler won't enforce safety.</li>\n</ul>\n\n<p>As to <em>when</em> raw pointers should be used, the first three points are straight-forward: You will know when they apply because you have to. The last point is more subtle. As with all optimizations, only use them when the benefit outweighs the effort and risk of using them.</p>\n\n<p>A counter example when <strong>not</strong> to use raw pointers is whenever the other pointer types (<code>&amp;</code> references, <code>Box</code>, <code>Rc</code>, <code>Arc</code>) do the job.</p>\n"}], "owner": {"reputation": 1342, "user_id": 3990158, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/c657e26d1552cbe4705fd965d53d2e25?s=128&d=identicon&r=PG&f=1", "display_name": "PHA", "link": "https://stackoverflow.com/users/3990158/pha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 269, "favorite_count": 2, "accepted_answer_id": 50215695, "answer_count": 1, "score": 7, "last_activity_date": 1553548327, "creation_date": 1525697432, "last_edit_date": 1525706733, "question_id": 50214682, "link": "https://stackoverflow.com/questions/50214682/how-should-i-decide-when-it-is-more-or-less-appropriate-to-use-raw-pointers", "title": "How should I decide when it is more or less appropriate to use raw pointers?", "body": "<p>I get the impression that Rust is intended to be used in highly safe systems. Then I noticed that raw pointers allow arbitrary pointer arithmetic, and they can cause memory safety and security issues. </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1525650611, "creation_date": 1525650611, "answer_id": 50205520, "question_id": 50205496, "link": "https://stackoverflow.com/questions/50205496/can-a-rust-macro-set-a-variable-and-return-a-value-at-the-same-time/50205520#50205520", "title": "Can a Rust macro set a variable and return a value at the same time?", "body": "<p>No.</p>\n\n<p>Macros aren't magic, they just expand to a single expression/statement/item you could otherwise write yourself.  There is no way to write a variable declaration that \"escapes\" the scope it's defined in.</p>\n"}, {"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1525761260, "post_id": 50209166, "comment_id": 87471771, "body": "I don&#39;t think this particular problem is related to hygienic macros; the name is supplied by the caller, and is supposed to be used by the caller again."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1525765307, "post_id": 50209166, "comment_id": 87473955, "body": "@Stefan I think you may be right... can you elaborate on your reasoning?"}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 0, "last_activity_date": 1525707220, "last_edit_date": 1525707220, "creation_date": 1525678369, "answer_id": 50209166, "question_id": 50205496, "link": "https://stackoverflow.com/questions/50205496/can-a-rust-macro-set-a-variable-and-return-a-value-at-the-same-time/50209166#50209166", "title": "Can a Rust macro set a variable and return a value at the same time?", "body": "<p>This is not possible because Rust has <a href=\"https://en.wikipedia.org/wiki/Hygienic_macro\" rel=\"nofollow noreferrer\">hygienic macros</a>, as documented <a href=\"https://doc.rust-lang.org/1.2.0/book/macros.html#hygiene\" rel=\"nofollow noreferrer\">here</a>. </p>\n\n<p>Macro hygiene <a href=\"https://github.com/rust-lang/rfcs/issues/2054\" rel=\"nofollow noreferrer\">cannot be disabled currently</a>, but it <em>may</em> become possible in <a href=\"https://github.com/rust-lang/rust/issues/39412\" rel=\"nofollow noreferrer\">Macros 2.0</a>:</p>\n\n<blockquote>\n  <p>[ ] Implement \"hygiene bending\" for when users want a name from macro def to \"escape\".</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 15396681, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/21076fcd8e8b62747ce7174dfe55cb59?s=128&d=identicon&r=PG&f=1", "display_name": "John W.", "link": "https://stackoverflow.com/users/15396681/john-w"}, "is_accepted": false, "score": 0, "last_activity_date": 1615775125, "last_edit_date": 1615775125, "creation_date": 1615769755, "answer_id": 66631109, "question_id": 50205496, "link": "https://stackoverflow.com/questions/50205496/can-a-rust-macro-set-a-variable-and-return-a-value-at-the-same-time/66631109#66631109", "title": "Can a Rust macro set a variable and return a value at the same time?", "body": "<p>here is one way you can do this...</p>\n<pre><code>    #[macro_export]\n    macro_rules! create_var {\n        ($name:ident, $val:expr) =&gt; {\n            let $name = $val;\n        }\n    }\n\n    fn main() {\n        create_var!(test, 42);\n        println!(&quot;{}&quot;,test);\n    }\n</code></pre>\n<p>Output:</p>\n<pre><code>    42\n</code></pre>\n"}], "owner": {"reputation": 73, "user_id": 9416273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3567fbdfbadb27c1e624bf7b4bebec3f?s=128&d=identicon&r=PG&f=1", "display_name": "aeafwefcve", "link": "https://stackoverflow.com/users/9416273/aeafwefcve"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1439, "favorite_count": 0, "accepted_answer_id": 50205520, "answer_count": 3, "score": 4, "last_activity_date": 1615775125, "creation_date": 1525650222, "last_edit_date": 1525651717, "question_id": 50205496, "link": "https://stackoverflow.com/questions/50205496/can-a-rust-macro-set-a-variable-and-return-a-value-at-the-same-time", "title": "Can a Rust macro set a variable and return a value at the same time?", "body": "<p>I want to create a macro which will take as parameters <code>($var:ident, $val:expr)</code>. The macro should set the variable <code>$var</code> to the value of <code>$val</code>, clone it, and then return the clone. This is my attempt:</p>\n\n<pre><code>macro_rules! my_macro {\n    ($var:ident, $val:expr) =&gt; {{\n        let $var = $val;\n        $var.clone()\n    }}\n}\n\nfn main() {\n    println!(\"{}\", my_macro!(x, 5));\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>It doesn't work because the <code>let</code> statement is inside a block. If I try to solve the problem by changing <code>{{</code> to <code>{</code>, then it produces a syntax error. Is there any way to solve this?</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525638361, "post_id": 50204153, "comment_id": 87425386, "body": "See also <a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525638695, "post_id": 50204153, "comment_id": 87425486, "body": "I believe your question is already answered by the answers of <a href=\"https://stackoverflow.com/q/29760668/155423\">Iterate over one of several possible iterators</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50204153/edit\">edit</a> your question to explain the differences. Otherwise we can mark this as answered."}, {"owner": {"reputation": 573, "user_id": 1309740, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/352cb0a7d071bb52129eaa4e3f881d11?s=128&d=identicon&r=PG", "display_name": "utter_step", "link": "https://stackoverflow.com/users/1309740/utter-step"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1525639573, "post_id": 50204153, "comment_id": 87425719, "body": "@Shepmaster thanks for your comments and edits!  Seems like the answer you provided is exactly what I&#39;m looking for, so I&#39;m marking this answered :)"}], "owner": {"reputation": 573, "user_id": 1309740, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/352cb0a7d071bb52129eaa4e3f881d11?s=128&d=identicon&r=PG", "display_name": "utter_step", "link": "https://stackoverflow.com/users/1309740/utter-step"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 50, "favorite_count": 0, "closed_date": 1525639706, "answer_count": 0, "score": 2, "last_activity_date": 1525639777, "creation_date": 1525637870, "last_edit_date": 1525639777, "question_id": 50204153, "link": "https://stackoverflow.com/questions/50204153/is-it-possible-to-conditionally-apply-iterator-transformations", "closed_reason": "Duplicate", "title": "Is it possible to conditionally apply iterator transformations?", "body": "<p>I have a function that takes array of posts and an optional <code>after_id</code> to skip posts with an id less or equal to given.</p>\n\n<pre><code>fn get_page&lt;'a&gt;(data: &amp;'a Vec&lt;u64&gt;, after_id: Option&lt;u64&gt;) -&gt; Vec&lt;&amp;u64&gt; {\n    let data = data.iter();\n    let data = match after_id {\n        Some(id) =&gt; data.skip_while(|&amp;&amp;post| post &lt;= id),\n        None =&gt; data,\n    };\n\n    data.take(10).collect()\n}\n</code></pre>\n\n<p>This code triggers a compilation error, stating that <code>Some</code> arm creates a <code>iter::SkipWhile</code> struct and its type is incompatible with <code>posts</code> type (<code>slice::Iter</code>) from <code>None</code> arm.</p>\n\n<p>The only fix I see, without deconstructing <code>match</code> into <code>if</code>s or something like that, is:</p>\n\n<pre><code>let posts = match after_id {\n    Some(id) =&gt; posts.skip_while(|post| post.id &lt;= id).collect(),\n    None =&gt; posts.collect(),\n};\n</code></pre>\n\n<p>The obvious downside is that I needlessly iterate whole collection and use extra memory.</p>\n\n<p>Is it possible to apply <code>skip_while</code> conditionally and store the result in a single variable, without <code>collect</code>ing an intermediate result?</p>\n"}, {"tags": ["text", "macros", "formatting", "rust", "embedded"], "answers": [{"comments": [{"owner": {"reputation": 311, "user_id": 8070904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2e2cc3ccbae5a59a2ddf4df942d1835?s=128&d=identicon&r=PG&f=1", "display_name": "chocol4te", "link": "https://stackoverflow.com/users/8070904/chocol4te"}, "edited": false, "score": 0, "creation_date": 1525616098, "post_id": 50200528, "comment_id": 87417824, "body": "I&#39;m targeting an STM32F103, will japaric&#39;s <a href=\"https://github.com/japaric/alloc-cortex-m\" rel=\"nofollow noreferrer\"><code>alloc-cortex-m</code></a> work? Do I have any safer alternatives? Thanks so much!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 311, "user_id": 8070904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2e2cc3ccbae5a59a2ddf4df942d1835?s=128&d=identicon&r=PG&f=1", "display_name": "chocol4te", "link": "https://stackoverflow.com/users/8070904/chocol4te"}, "edited": false, "score": 1, "creation_date": 1525618812, "post_id": 50200528, "comment_id": 87418727, "body": "@FerdiaMcKeogh I&#39;m not sure what you mean by &quot;safer&quot; in this context, but it seems like a reasonable choice."}, {"owner": {"reputation": 311, "user_id": 8070904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2e2cc3ccbae5a59a2ddf4df942d1835?s=128&d=identicon&r=PG&f=1", "display_name": "chocol4te", "link": "https://stackoverflow.com/users/8070904/chocol4te"}, "edited": false, "score": 0, "creation_date": 1525619135, "post_id": 50200528, "comment_id": 87418827, "body": "Sorry, I meant safer in terms of a stable/widely accepted method. <code>alloc-cortex-m</code> is working perfectly! Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1570334603, "last_edit_date": 1570334603, "creation_date": 1525615331, "answer_id": 50200528, "question_id": 50200268, "link": "https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment/50200528#50200528", "title": "How can I use the format! macro in a no_std environment?", "body": "<p>In general, you <em>don't</em>. <code>format!</code> allocates a <code>String</code>, and a <code>no_std</code> environment doesn't have an allocator.</p>\n\n<p>If you do have an allocator, you can use the <a href=\"https://doc.rust-lang.org/alloc/\" rel=\"nofollow noreferrer\">alloc crate</a>. This crate contains the <a href=\"https://doc.rust-lang.org/alloc/macro.format.html\" rel=\"nofollow noreferrer\"><code>format!</code></a> macro.</p>\n\n<pre><code>#![crate_type = \"dylib\"]\n#![no_std]\n\n#[macro_use]\nextern crate alloc;\n\nfn thing() {\n    let text = format!(\"example {:.1} test {:x} words {}\", 1, 2, 3);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39488327/155423\">How to format output to a byte array with no_std and no allocator?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525631281, "post_id": 50201632, "comment_id": 87423132, "body": "Why not <code>let mut w = write_to::WriteTo::new(&amp;mut buf); write!(&amp;mut w, &quot;caf&#233;&quot;).unwrap();</code> ?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1525631883, "post_id": 50201632, "comment_id": 87423339, "body": "@Shepmaster you&#39;ll need another step to extract the result and probably a <code>use core::fmt::Write;</code> (<a href=\"https://doc.rust-lang.org/core/macro.write.html\" rel=\"nofollow noreferrer\"><code>write!</code></a> needs a <code>write_fmt</code> method in scope)... but yes, you can use it that way too.  Maybe a <code>format_buf!(&amp;mut buf, &quot;...&quot;, ...)</code> macro would be a more comfortable way - but I think that exercise can be left to the reader :)"}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": false, "score": 20, "last_activity_date": 1525627430, "last_edit_date": 1525627430, "creation_date": 1525621832, "answer_id": 50201632, "question_id": 50200268, "link": "https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment/50201632#50201632", "title": "How can I use the format! macro in a no_std environment?", "body": "<p>In addition to <a href=\"https://stackoverflow.com/a/50200528/1478356\">Shepmaster's answer</a> you can also format strings without an allocator.</p>\n\n<p>In <a href=\"https://doc.rust-lang.org/core/fmt/trait.Write.html\" rel=\"noreferrer\"><code>core::fmt::Write</code></a> you only need to implement <code>write_str</code> and then you get <code>write_fmt</code> for free.</p>\n\n<p>With <a href=\"https://doc.rust-lang.org/core/macro.format_args.html\" rel=\"noreferrer\"><code>format_args!(...)</code></a> (same syntax as <a href=\"https://doc.rust-lang.org/std/macro.format.html\" rel=\"noreferrer\"><code>format!</code></a>) you can prepare a <a href=\"https://doc.rust-lang.org/core/fmt/struct.Arguments.html\" rel=\"noreferrer\"><code>core::fmt::Arguments</code></a> value, which can be passed to <a href=\"https://doc.rust-lang.org/core/fmt/fn.write.html\" rel=\"noreferrer\"><code>core::fmt::write</code></a>.</p>\n\n<p>See <a href=\"https://play.rust-lang.org/?gist=e86a41043cbcfef53047991451937d41&amp;version=stable&amp;mode=release\" rel=\"noreferrer\">Playground</a>:</p>\n\n<pre><code>#![crate_type = \"dylib\"]\n#![no_std]\n\npub mod write_to {\n    use core::cmp::min;\n    use core::fmt;\n\n    pub struct WriteTo&lt;'a&gt; {\n        buffer: &amp;'a mut [u8],\n        // on write error (i.e. not enough space in buffer) this grows beyond\n        // `buffer.len()`.\n        used: usize,\n    }\n\n    impl&lt;'a&gt; WriteTo&lt;'a&gt; {\n        pub fn new(buffer: &amp;'a mut [u8]) -&gt; Self {\n            WriteTo { buffer, used: 0 }\n        }\n\n        pub fn as_str(self) -&gt; Option&lt;&amp;'a str&gt; {\n            if self.used &lt;= self.buffer.len() {\n                // only successful concats of str - must be a valid str.\n                use core::str::from_utf8_unchecked;\n                Some(unsafe { from_utf8_unchecked(&amp;self.buffer[..self.used]) })\n            } else {\n                None\n            }\n        }\n    }\n\n    impl&lt;'a&gt; fmt::Write for WriteTo&lt;'a&gt; {\n        fn write_str(&amp;mut self, s: &amp;str) -&gt; fmt::Result {\n            if self.used &gt; self.buffer.len() {\n                return Err(fmt::Error);\n            }\n            let remaining_buf = &amp;mut self.buffer[self.used..];\n            let raw_s = s.as_bytes();\n            let write_num = min(raw_s.len(), remaining_buf.len());\n            remaining_buf[..write_num].copy_from_slice(&amp;raw_s[..write_num]);\n            self.used += raw_s.len();\n            if write_num &lt; raw_s.len() {\n                Err(fmt::Error)\n            } else {\n                Ok(())\n            }\n        }\n    }\n\n    pub fn show&lt;'a&gt;(buffer: &amp;'a mut [u8], args: fmt::Arguments) -&gt; Result&lt;&amp;'a str, fmt::Error&gt; {\n        let mut w = WriteTo::new(buffer);\n        fmt::write(&amp;mut w, args)?;\n        w.as_str().ok_or(fmt::Error)\n    }\n}\n\npub fn test() {\n    let mut buf = [0u8; 64];\n    let _s: &amp;str = write_to::show(\n        &amp;mut buf,\n        format_args!(\"write some stuff {:?}: {}\", \"foo\", 42),\n    ).unwrap();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2729, "user_id": 499839, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/niGfa.jpg?s=128&g=1", "display_name": "Mika Vatanen", "link": "https://stackoverflow.com/users/499839/mika-vatanen"}, "is_accepted": false, "score": 1, "last_activity_date": 1598556807, "creation_date": 1598556807, "answer_id": 63623031, "question_id": 50200268, "link": "https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment/63623031#63623031", "title": "How can I use the format! macro in a no_std environment?", "body": "<p>You can also combine the usage of <code>numtoa</code> and <code>arrayvec</code> crates. Example:</p>\n<pre><code>#![no_std]\n\nuse numtoa::NumToA;\nuse arrayvec::ArrayString;\n\nfn main() -&gt; ! {\n    let mut num_buffer = [0u8; 20];\n    let mut text = ArrayString::&lt;[_; 100]&gt;::new();\n\n    let num1 = 123;\n    let num2 = 456;\n    let num3 = 789;\n\n    // text.clear(); (on subsequent usages)\n    text.push_str(&quot;example &quot;);\n    text.push_str(num1.numtoa_str(10, &amp;mut num_buffer));\n\n    text.push_str(&quot; test &quot;);\n    text.push_str(num2.numtoa_str(10, &amp;mut num_buffer));\n\n    text.push_str(&quot; words &quot;);\n    text.push_str(num3.numtoa_str(10, &amp;mut num_buffer));\n}\n</code></pre>\n<p>Note that push_str can panic. Check out the api for <code>try_</code> -methods</p>\n<p>And Cargo.toml</p>\n<pre><code>\u00a0[dependencies]\n arrayvec = { version = &quot;0.5&quot;, default-features = false }\n numtoa = &quot;0.2&quot;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 491, "user_id": 323152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0478b87ec69ce7ce034d370f326c50aa?s=128&d=identicon&r=PG", "display_name": "Andelf", "link": "https://stackoverflow.com/users/323152/andelf"}, "is_accepted": false, "score": 0, "last_activity_date": 1604745789, "creation_date": 1604745789, "answer_id": 64726826, "question_id": 50200268, "link": "https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment/64726826#64726826", "title": "How can I use the format! macro in a no_std environment?", "body": "<p>Write a formatter!</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use core::fmt::{self, Write};\nuse core::str;\n\nfn main() {\n    // For LCD 160 / 8 = 20 chars\n    let mut buf = [0u8; 20];\n    let mut buf = ByteMutWriter::new(&amp;mut buf[..]);\n  \n    buf.clear();\n    write!(&amp;mut buf, &quot;Hello {}!&quot;, &quot;Rust&quot;).unwrap();\n    \n    // buf.as_str()\n}\n\n\npub struct ByteMutWriter&lt;'a&gt; {\n    buf: &amp;'a mut [u8],\n    cursor: usize,\n}\n\nimpl&lt;'a&gt; ByteMutWriter&lt;'a&gt; {\n    pub fn new(buf: &amp;'a mut [u8]) -&gt; Self {\n        ByteMutWriter { buf, cursor: 0 }\n    }\n\n    pub fn as_str(&amp;self) -&gt; &amp;str {\n        str::from_utf8(&amp;self.buf[0..self.cursor]).unwrap()\n    }\n\n    #[inline]\n    pub fn capacity(&amp;self) -&gt; usize {\n        self.buf.len()\n    }\n\n    pub fn clear(&amp;mut self) {\n        self.cursor = 0;\n    }\n\n    pub fn len(&amp;self) -&gt; usize {\n        self.cursor\n    }\n\n    pub fn empty(&amp;self) -&gt; bool {\n        self.cursor == 0\n    }\n\n    pub fn full(&amp;self) -&gt; bool {\n        self.capacity() == self.cursor\n    }\n}\n\nimpl fmt::Write for ByteMutWriter&lt;'_&gt; {\n    fn write_str(&amp;mut self, s: &amp;str) -&gt; fmt::Result {\n        let cap = self.capacity();\n        for (i, &amp;b) in self.buf[self.cursor..cap]\n            .iter_mut()\n            .zip(s.as_bytes().iter())\n        {\n            *i = b;\n        }\n        self.cursor = usize::min(cap, self.cursor + s.as_bytes().len());\n        Ok(())\n    }\n}\n\n</code></pre>\n"}], "owner": {"reputation": 311, "user_id": 8070904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c2e2cc3ccbae5a59a2ddf4df942d1835?s=128&d=identicon&r=PG&f=1", "display_name": "chocol4te", "link": "https://stackoverflow.com/users/8070904/chocol4te"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3863, "favorite_count": 3, "accepted_answer_id": 50200528, "answer_count": 4, "score": 11, "last_activity_date": 1604745789, "creation_date": 1525613546, "last_edit_date": 1525615034, "question_id": 50200268, "link": "https://stackoverflow.com/questions/50200268/how-can-i-use-the-format-macro-in-a-no-std-environment", "title": "How can I use the format! macro in a no_std environment?", "body": "<p>How could I implement the following example without using std?</p>\n\n<pre><code>let text = format!(\"example {:.1} test {:x} words {}\", num1, num2, num3);\n</code></pre>\n\n<p><code>text</code> has type <code>&amp;str</code> and <code>num1</code>, <code>num2</code> and <code>num3</code> have any numeric type.</p>\n\n<p>I've tried using <code>numtoa</code> and <code>itoa/dtoa</code> for displaying numbers but <code>numtoa</code> does not support floats and <code>itoa</code> does not support <code>no_std</code>. I feel like displaying a number in a string is fairly common and that I'm probably missing something obvious.</p>\n"}, {"tags": ["generics", "rust", "thread-safety", "phantom-types"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525615991, "post_id": 50200197, "comment_id": 87417790, "body": "<code>PhantomData&lt;&amp;&#39;static T&gt;</code>, maybe? Or... no, that would require <code>T: &#39;static</code>."}, {"owner": {"reputation": 43, "user_id": 9748256, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-tDJkSxMedrI/AAAAAAAAAAI/AAAAAAAACgg/LuRLlpczuOI/photo.jpg?sz=128", "display_name": "C&#233;sar Rinc&#243;n", "link": "https://stackoverflow.com/users/9748256/c%c3%a9sar-rinc%c3%b3n"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525616509, "post_id": 50200197, "comment_id": 87417969, "body": "Thanks! But yeah <code>&#39;static</code> doesn&#39;t quite work for this, that&#39;d be a pretty hefty constraint on the type. Also, to the bloke who asked what <code>T</code> is used for, and why not a reference: I&#39;m sorry, I think I deleted you comment trying to delete a response of mine that I mistyped &gt;.&lt; Will comment again below."}, {"owner": {"reputation": 43, "user_id": 9748256, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-tDJkSxMedrI/AAAAAAAAAAI/AAAAAAAACgg/LuRLlpczuOI/photo.jpg?sz=128", "display_name": "C&#233;sar Rinc&#243;n", "link": "https://stackoverflow.com/users/9748256/c%c3%a9sar-rinc%c3%b3n"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525617102, "post_id": 50200197, "comment_id": 87418168, "body": "So I didn&#39;t think the use of <code>T</code> was relevant to the question because it isn&#39;t used in the structure, so it makes no difference on whether it&#39;s <code>Sync</code> or <code>Send</code>. If you look in the playground example I linked, you&#39;ll see I use it to define a <code>impl</code> with methods that are only available when <code>T</code> is a specific type. So that&#39;s a possible use. Should I edit my question? As for using a reference: that&#39;s less than ideal because then the structure has to be defined as <code>struct Map&lt;&#39;a, T&gt;</code>, so everywhere it&#39;s used you have to specify a lifetime. A meaningless lifetime, since it&#39;s not actually used."}, {"owner": {"reputation": 43, "user_id": 9748256, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-tDJkSxMedrI/AAAAAAAAAAI/AAAAAAAACgg/LuRLlpczuOI/photo.jpg?sz=128", "display_name": "C&#233;sar Rinc&#243;n", "link": "https://stackoverflow.com/users/9748256/c%c3%a9sar-rinc%c3%b3n"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525620357, "post_id": 50200197, "comment_id": 87419270, "body": "That is brilliant, indeed that&#39;s what I need, many thanks."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1525630995, "last_edit_date": 1525630995, "creation_date": 1525619333, "answer_id": 50201210, "question_id": 50200197, "link": "https://stackoverflow.com/questions/50200197/how-do-i-share-a-struct-containing-a-phantom-pointer-among-threads/50201210#50201210", "title": "How do I share a struct containing a phantom pointer among threads?", "body": "<h3>Zero-sized marker traits</h3>\n\n<p>My preferred solution is to use use throwaway structs for this purpose:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Map&lt;T: ThingMarker&gt; {\n    filename: String,\n    marker: T,\n}\n\ntrait ThingMarker: Default {}\n\n#[derive(Debug, Default)]\nstruct RegionMarker;\nimpl ThingMarker for RegionMarker {}\n\n// General Map methods\nimpl&lt;T: ThingMarker&gt; Map&lt;T&gt;\nwhere\n    T: Debug,\n{\n    pub fn new&lt;S&gt;(filename: S) -&gt; Self\n    where\n        S: Into&lt;String&gt;,\n    {\n        Map {\n            filename: filename.into(),\n            marker: Default::default(),\n        }\n    }\n   // ...\n}\n\nimpl Map&lt;RegionMarker&gt; {\n    pub fn get_region(&amp;self) -&gt; Region { /* ... */ }\n}\n\nfn main() {\n    let master_map = Arc::new(Map::&lt;RegionMarker&gt;::new(\"mapfile\"));\n    // ...\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3c74792325bfbf67aa13f4b70b309649&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<blockquote>\n  <p>a structure that needs to be generic over a type, yet the type is not actually contained in the structure: it's used in methods of this structure, not in the structure itself.</p>\n</blockquote>\n\n<p>My rationale is that you don't actually need to parameterize your struct over the type <em>used in the methods</em>, you just need to parameterize it over <em>some</em> type. This is a prime case for just having your own trait. It's probably even more powerful as you can have associated types or constants on the trait implementation.</p>\n\n<h3>Narrow implementation</h3>\n\n<blockquote>\n  <p>but those <code>unsafe impl</code>s are ugly and make me nervous.</p>\n</blockquote>\n\n<p>As they should. One simple modification is to create your own wrapper type that narrowly implements those traits:</p>\n\n<pre><code>// Pick a better name for this struct\n#[derive(Debug)]\nstruct X&lt;T&gt;(PhantomData&lt;*const T&gt;);\n\nimpl&lt;T&gt; X&lt;T&gt; {\n    fn new() -&gt; Self {\n        X(PhantomData)\n    }\n}\n\nunsafe impl&lt;T&gt; Sync for X&lt;T&gt; {}\nunsafe impl&lt;T&gt; Send for X&lt;T&gt; {}\n</code></pre>\n\n<p>This prevents \"accidentally\" implementing these traits for your type if some other field is not <code>Send</code> or <code>Sync</code>.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0f8fa63258529d3850606d07ab90e1c5&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1525620321, "creation_date": 1525620321, "answer_id": 50201389, "question_id": 50200197, "link": "https://stackoverflow.com/questions/50200197/how-do-i-share-a-struct-containing-a-phantom-pointer-among-threads/50201389#50201389", "title": "How do I share a struct containing a phantom pointer among threads?", "body": "<p>There's another option: <code>PhantomData&lt;fn() -&gt; T&gt;</code>. <code>fn() -&gt; T</code> has the same <a href=\"https://doc.rust-lang.org/nomicon/phantom-data.html#table-of-phantomdata-patterns\" rel=\"noreferrer\">variance</a> as <code>T</code> and <code>*const T</code>, but unlike <code>*const T</code>, it implements both <code>Send</code> and <code>Sync</code>. It also makes it clear that your struct only ever <em>produces</em> instances of <code>T</code>. (If some methods take <code>T</code> as input, then <code>PhantomData&lt;fn(T) -&gt; T&gt;</code> might be more appropriate).</p>\n\n<pre><code>#[derive(Debug)]\nstruct Map&lt;T&gt; {\n    filename: String,\n    phantom: PhantomData&lt;fn() -&gt; T&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 43, "user_id": 9748256, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-tDJkSxMedrI/AAAAAAAAAAI/AAAAAAAACgg/LuRLlpczuOI/photo.jpg?sz=128", "display_name": "C&#233;sar Rinc&#243;n", "link": "https://stackoverflow.com/users/9748256/c%c3%a9sar-rinc%c3%b3n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 483, "favorite_count": 0, "accepted_answer_id": 50201389, "answer_count": 2, "score": 4, "last_activity_date": 1525630995, "creation_date": 1525613083, "last_edit_date": 1525620733, "question_id": 50200197, "link": "https://stackoverflow.com/questions/50200197/how-do-i-share-a-struct-containing-a-phantom-pointer-among-threads", "title": "How do I share a struct containing a phantom pointer among threads?", "body": "<p>I have a structure that needs to be generic over a type, yet the type is not actually contained in the structure: it's used in methods of this structure, not in the structure itself. And so, the structure includes a <code>PhantomData</code> member:</p>\n\n<pre><code>pub struct Map&lt;T&gt; {\n    filename: String,\n    phantom: PhantomData&lt;*const T&gt;,\n}\n</code></pre>\n\n<p>The phantom member is defined as a pointer because the structure does not actually own data of type <code>T</code>.  This is per advice in <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\">the documentation of <code>std::marker::PhantomData</code></a>:</p>\n\n<blockquote>\n  <p>Adding a field of type <code>PhantomData&lt;T&gt;</code> indicates that your type owns data of type <code>T</code>. This in turn implies that when your type is dropped, it may drop one or more instances of the type <code>T</code>. This has bearing on the Rust compiler's drop check analysis.</p>\n  \n  <p>If your struct does not in fact own the data of type <code>T</code>, it is better to use a reference type, like <code>PhantomData&lt;&amp;'a T&gt;</code> (ideally) or <code>PhantomData&lt;*const T&gt;</code> (if no lifetime applies), so as not to indicate ownership.</p>\n</blockquote>\n\n<p>So the pointer seems to be the right choice here. This, however, causes the structure to no longer be <code>Send</code> nor <code>Sync</code>, because <code>PhantomData</code> is only <code>Send</code> and <code>Sync</code> if its type parameter is, and since pointers are neither, the whole thing isn't either. And so, code like this</p>\n\n<pre><code>// Given a master_map of type Arc&lt;Map&lt;Region&gt;&gt; ...\nlet map = Arc::clone(&amp;master_map);\n\nthread::spawn(move || {\n    map.do_stuff();\n});\n</code></pre>\n\n<p>fails to compile even though no <code>Region</code> values or even pointers are being moved:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `*const Region: std::marker::Send` is not satisfied in `Map&lt;Region&gt;`\n  --&gt; src/main.rs:57:9\n   |\n57 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `*const Region` cannot be sent between threads safely\n   |\n   = help: within `Map&lt;Region&gt;`, the trait `std::marker::Send` is not implemented for `*const Region`\n   = note: required because it appears within the type `std::marker::PhantomData&lt;*const Region&gt;`\n   = note: required because it appears within the type `Map&lt;Region&gt;`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&lt;Map&lt;Region&gt;&gt;`\n   = note: required because it appears within the type `[closure@src/main.rs:57:23: 60:10 map:std::sync::Arc&lt;Map&lt;Region&gt;&gt;]`\n   = note: required by `std::thread::spawn`\n\nerror[E0277]: the trait bound `*const Region: std::marker::Sync` is not satisfied in `Map&lt;Region&gt;`\n  --&gt; src/main.rs:57:9\n   |\n57 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `*const Region` cannot be shared between threads safely\n   |\n   = help: within `Map&lt;Region&gt;`, the trait `std::marker::Sync` is not implemented for `*const Region`\n   = note: required because it appears within the type `std::marker::PhantomData&lt;*const Region&gt;`\n   = note: required because it appears within the type `Map&lt;Region&gt;`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc&lt;Map&lt;Region&gt;&gt;`\n   = note: required because it appears within the type `[closure@src/main.rs:57:23: 60:10 map:std::sync::Arc&lt;Map&lt;Region&gt;&gt;]`\n   = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>Here's a <a href=\"https://play.rust-lang.org/?gist=e071c3e62268e943cd9f233a8ea098d6&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">complete test case in the playground that exhibits this issue</a>:</p>\n\n<pre><code>use std::fmt::Debug;\nuse std::marker::PhantomData;\nuse std::sync::Arc;\nuse std::thread;\n\n#[derive(Debug)]\nstruct Region {\n    width: usize,\n    height: usize,\n    // ... more stuff that would be read from a file\n}\n\n#[derive(Debug)]\nstruct Map&lt;T&gt; {\n    filename: String,\n    phantom: PhantomData&lt;*const T&gt;,\n}\n\n// General Map methods\nimpl&lt;T&gt; Map&lt;T&gt;\nwhere\n    T: Debug,\n{\n    pub fn new&lt;S&gt;(filename: S) -&gt; Self\n    where\n        S: Into&lt;String&gt;,\n    {\n        Map {\n            filename: filename.into(),\n            phantom: PhantomData,\n        }\n    }\n\n    pub fn do_stuff(&amp;self) {\n        println!(\"doing stuff {:?}\", self);\n    }\n}\n\n// Methods specific to Map&lt;Region&gt;\nimpl Map&lt;Region&gt; {\n    pub fn get_region(&amp;self) -&gt; Region {\n        Region {\n            width: 10,\n            height: 20,\n        }\n    }\n}\n\nfn main() {\n    let master_map = Arc::new(Map::&lt;Region&gt;::new(\"mapfile\"));\n    master_map.do_stuff();\n    let region = master_map.get_region();\n    println!(\"{:?}\", region);\n\n    let join_handle = {\n        let map = Arc::clone(&amp;master_map);\n        thread::spawn(move || {\n            println!(\"In subthread...\");\n            map.do_stuff();\n        })\n    };\n\n    join_handle.join().unwrap();\n}\n</code></pre>\n\n<p>What is the best way to deal with this? This is what I've tried:</p>\n\n<p><strong>Defining the phantom field as <code>PhantomData&lt;T&gt;</code>.</strong> A proper value instead of a pointer. This works, but I'm wary of it because I've no idea what effect it has, if any, on Rust compiler's \"drop check analysis\", as per the docs quoted above.</p>\n\n<p><strong>Defining the phantom field as <code>PhantomData&lt;&amp;'a T&gt;</code>.</strong> A reference. This should work, but it forces the structure to take an unneeded lifetime parameter, which propagates through my code. I'd rather not do this.</p>\n\n<p><strong>Forcing the structure to implement <code>Send</code> and <code>Sync</code>.</strong> This is what I'm actually doing at the moment:</p>\n\n<pre><code>unsafe impl&lt;T&gt; Sync for Map&lt;T&gt; {}\nunsafe impl&lt;T&gt; Send for Map&lt;T&gt; {}\n</code></pre>\n\n<p>It seems to work, but those <code>unsafe impl</code>s are ugly and make me nervous.</p>\n\n<p>To clarify what <code>T</code> is used for: It doesn't matter, really. It may not even be used, just provided as a marker for the type system. E.g. only needed so that <code>Map&lt;T&gt;</code> has a type parameter so different <code>impl</code> blocks can be provided:</p>\n\n<pre><code>impl&lt;T&gt; struct Map&lt;T&gt; {\n    // common methods of all Maps\n}\n\nimpl struct Map&lt;Region&gt; {\n    // additional methods available when T is Region\n}\n\nimpl struct Map&lt;Whatever&gt; {\n    // additional methods available when T is Whatever, etc.\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust", "future", "executor", "rust-tokio"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525592513, "post_id": 50195747, "comment_id": 87411592, "body": "What is <code>future1</code> ? Did I miss something ?"}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525597325, "post_id": 50195747, "comment_id": 87412762, "body": "Sorry, it is a lib which just imports futures v 0.1 (which tokio uses) rather than futures v 0.2. I have updated the snippet to remove this idiosyncrasy."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1525755726, "post_id": 50195747, "comment_id": 87469496, "body": "Never use <code>thread::sleep</code> in async code, and even worse, never use an endless loop - an executor blocked while running a future that way will never run anything else ever again. You want <a href=\"https://docs.rs/tokio/0.1.6/tokio/timer/struct.Interval.html\" rel=\"nofollow noreferrer\"><code>tokio::timer::Interval</code></a>, and for that you want a full <a href=\"https://docs.rs/tokio/0.1.6/tokio/runtime/current_thread/struct.Runtime.html\" rel=\"nofollow noreferrer\"><code>tokio::runtime::current_thread::Runtime</code></a> instead of just the executor, so it drives timers and IO (&quot;reactor&quot;) too."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1525882893, "last_edit_date": 1525882893, "creation_date": 1525607076, "answer_id": 50199304, "question_id": 50195747, "link": "https://stackoverflow.com/questions/50195747/is-it-possible-to-spawn-work-on-tokios-current-thread-within-the-current-thread/50199304#50199304", "title": "Is it possible to spawn work on Tokio&#39;s current thread within the current thread?", "body": "<p>Yes, it is possible. Tokio provides <a href=\"https://docs.rs/tokio/0.1.6/tokio/executor/current_thread/index.html\" rel=\"noreferrer\">documentation on how to use <code>current_thread</code></a>:</p>\n\n<blockquote>\n<pre><code>use futures::future::lazy;\n\n// Calling execute here results in a panic\n// current_thread::spawn(my_future);\n\ncurrent_thread::block_on_all(lazy(|| {\n    // The execution context is setup, futures may be executed.\n    current_thread::spawn(lazy(|| {\n        println!(\"called from the current thread executor\");\n        Ok(())\n    }));\n\n    Ok::&lt;_, ()&gt;(())\n}));\n</code></pre>\n</blockquote>\n\n<p>Your specific problem is that you aren't spawning the task on the current thread:</p>\n\n<pre><code>fn foo() {\n    tokio::spawn(lazy(|| {\n//  ^^^^^^^^^^^^\n</code></pre>\n\n<p>Instead, this should be</p>\n\n<pre><code>fn foo() {\n    current_thread::spawn(lazy(|| {\n//  ^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>However, I don't believe this code will ever actually print <code>In foo!</code> because the outer loop will never create a future that would block, therefore there's no reason for the executor to ever look at any other futures.</p>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3120, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1525882893, "creation_date": 1525573972, "last_edit_date": 1525606744, "question_id": 50195747, "link": "https://stackoverflow.com/questions/50195747/is-it-possible-to-spawn-work-on-tokios-current-thread-within-the-current-thread", "title": "Is it possible to spawn work on Tokio&#39;s current thread within the current thread?", "body": "<p>I want to spawn a task inside <code>foo</code> on the <code>current_thread</code> executor:</p>\n\n<pre><code>extern crate futures; // version 0.1\nextern crate tokio;\n\nuse futures::future::lazy;\nuse std::{thread, time};\nuse tokio::executor::current_thread::CurrentThread;\n\nfn foo() {\n    tokio::spawn(lazy(|| {\n        println!(\"In foo!\");\n        Ok(())\n    }));\n}\n\nfn main() {\n    let mut current_thread = CurrentThread::new();\n    current_thread.spawn(lazy(|| {\n        loop {\n            println!(\"In spawn!\");\n            foo();\n            thread::sleep(time::Duration::from_secs(1));\n        }\n        Ok(())\n    }));\n    current_thread.run().unwrap();\n}\n</code></pre>\n\n<p>When I run it, it fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>In spawn!\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: SpawnError { is_shutdown: true }', libcore/result.rs:945:5\nstack backtrace:\n   0:        0x10879438f - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::hd4a234eb73c9eb11\n                               at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1:        0x108788b9d - std::sys_common::backtrace::print::h686165a0aebbb1f5\n                               at libstd/sys_common/backtrace.rs:71\n                               at libstd/sys_common/backtrace.rs:59\n   2:        0x108797043 - std::panicking::default_hook::{{closure}}::h25aacbcb8a8273d9\n                               at libstd/panicking.rs:205\n   3:        0x108796dcc - std::panicking::default_hook::h036425f579a26a8f\n                               at libstd/panicking.rs:221\n   4:        0x10879758b - &lt;std::panicking::begin_panic::PanicPayload&lt;A&gt; as core::panic::BoxMeUp&gt;::get::hac9fda42d0999bf5\n                               at libstd/panicking.rs:457\n   5:        0x1087971c0 - std::panicking::try::do_call::h8b3a10ecb1a21334\n                               at libstd/panicking.rs:344\n   6:        0x108797182 - std::panicking::try::do_call::h8b3a10ecb1a21334\n                               at libstd/panicking.rs:322\n   7:        0x1087cbac5 - &lt;&amp;'a T as core::fmt::Display&gt;::fmt::h2e38aa9ebf1dda6d\n                               at libcore/panicking.rs:71\n   8:        0x108771405 - core::result::unwrap_failed::h111a0aed60721615\n                               at /Users/travis/build/rust-lang/rust/src/libcore/macros.rs:26\n   9:        0x10877110b - &lt;core::result::Result&lt;T, E&gt;&gt;::unwrap::h1b36496d5b4f78f0\n                               at /Users/travis/build/rust-lang/rust/src/libcore/result.rs:782\n  10:        0x108771ba6 - tokio_executor::global::spawn::h95932f8a5d0c0373\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-executor-0.1.2/src/global.rs:128\n  11:        0x108771b26 - tokio::executor::spawn::hbdc3654dcb691a15\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/mod.rs:207\n  12:        0x108772a5a - ox::foo::h1a20773fe06f38f5\n                               at src/main.rs:9\n  13:        0x1087729e3 - ox::main::{{closure}}::ha045cd464fd2bcd2\n                               at src/main.rs:20\n  14:        0x108770de0 - &lt;futures::future::lazy::Lazy&lt;F, R&gt;&gt;::get::h6d01f86e63eb0ae6\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/future/lazy.rs:64\n  15:        0x108770f54 - &lt;futures::future::lazy::Lazy&lt;F, R&gt; as futures::future::Future&gt;::poll::he4dbb0cba4734268\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/future/lazy.rs:82\n  16:        0x1087765a4 - core::fmt::Arguments::new_v1_formatted::h535b215c9c95b52a\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/future/mod.rs:113\n  17:        0x1087750a4 - &lt;futures::task_impl::Spawn&lt;T&gt;&gt;::poll_future_notify::{{closure}}::he965765a8e172c4b\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\n  18:        0x10877520a - &lt;futures::task_impl::Spawn&lt;T&gt;&gt;::enter::{{closure}}::hc5d84c8a0c9b9541\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\n  19:        0x108774dc8 - futures::task_impl::std::set::h6d292679eb1abcd6\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/std/mod.rs:78\n  20:        0x1087751a7 - &lt;futures::task_impl::Spawn&lt;T&gt;&gt;::enter::h19b2ea99bdf79995\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:363\n  21:        0x108775039 - &lt;futures::task_impl::Spawn&lt;T&gt;&gt;::poll_future_notify::hf216aece3ea15c32\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/futures-0.1.21/src/task_impl/mod.rs:289\n  22:        0x108773e03 - &lt;tokio::executor::current_thread::scheduler::Scheduled&lt;'a, U&gt;&gt;::tick::haebb55271ba68f7f\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:352\n  23:        0x108773d8c - &lt;tokio::executor::current_thread::scheduler::Scheduler&lt;U&gt;&gt;::tick::{{closure}}::h0fdf80d08ed0341a\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:332\n  24:        0x1087720fc - &lt;tokio::executor::current_thread::Borrow&lt;'a, U&gt;&gt;::enter::{{closure}}::{{closure}}::hc3a2b045d8dbd69f\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:688\n  25:        0x108771c7f - tokio::executor::current_thread::CurrentRunner::set_spawn::h796df298bd44491f\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:720\n  26:        0x10877209c - &lt;tokio::executor::current_thread::Borrow&lt;'a, U&gt;&gt;::enter::{{closure}}::hf2160ea4bc6cb70d\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:687\n  27:        0x108771887 - &lt;std::thread::local::LocalKey&lt;T&gt;&gt;::try_with::h07c3b54d23ac7bcf\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:294\n  28:        0x1087716b4 - &lt;std::thread::local::LocalKey&lt;T&gt;&gt;::with::h8a95d51541a57481\n                               at /Users/travis/build/rust-lang/rust/src/libstd/thread/local.rs:248\n  29:        0x108771fda - &lt;tokio::executor::current_thread::Borrow&lt;'a, U&gt;&gt;::enter::hd84e35a45b8c5f10\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:686\n  30:        0x108773c6d - &lt;tokio::executor::current_thread::scheduler::Scheduler&lt;U&gt;&gt;::tick::hc6a4d68c4ca62da1\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/scheduler.rs:332\n  31:        0x1087724bd - &lt;tokio::executor::current_thread::Entered&lt;'a, P&gt;&gt;::tick::h806caa14d1fda0e2\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:572\n  32:        0x1087721ac - &lt;tokio::executor::current_thread::Entered&lt;'a, P&gt;&gt;::run_timeout2::hacdc210a9580db1b\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:541\n  33:        0x108772450 - &lt;tokio::executor::current_thread::Entered&lt;'a, P&gt;&gt;::run::h98ebc98ef8f09a85\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:484\n  34:        0x108771e04 - &lt;tokio::executor::current_thread::CurrentThread&lt;P&gt;&gt;::run::h023b6fbff627efb0\n                               at /tmp/registry/src/github.com-1ecc6299db9ec823/tokio-0.1.6/src/executor/current_thread/mod.rs:356\n  35:        0x108772ac0 - ox::main::h5fd6c3ac8eb3383f\n                               at src/main.rs:25\n  36:        0x108772cc1 - std::rt::lang_start::{{closure}}::h8d7d3864a0a638c3\n                               at /Users/travis/build/rust-lang/rust/src/libstd/rt.rs:74\n  37:        0x1087970e7 - std::panicking::try::do_call::h8b3a10ecb1a21334\n                               at libstd/rt.rs:59\n                               at libstd/panicking.rs:304\n  38:        0x1087a2cde - panic_unwind::dwarf::eh::read_encoded_pointer::hcabc31a4d46081c4\n                               at libpanic_unwind/lib.rs:105\n  39:        0x10878fd00 - std::sys_common::bytestring::debug_fmt_bytestring::h020ca4453b64bdbd\n                               at libstd/panicking.rs:283\n                               at libstd/panic.rs:361\n                               at libstd/rt.rs:58\n  40:        0x108772ca1 - std::rt::lang_start::h14c96d0aa9f67dbd\n                               at /Users/travis/build/rust-lang/rust/src/libstd/rt.rs:74\n  41:        0x108772b14 - ox::main::h5fd6c3ac8eb3383f\n</code></pre>\n\n<p>I tried passing in <code>current_thread</code> to <code>foo</code> but that fails to compile. Is it possible to do this and if so, how?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525542086, "post_id": 50192075, "comment_id": 87401518, "body": "I believe your question is already answered by the answers in <a href=\"https://stackoverflow.com/q/28512394/155423\">How to lookup from and insert into a HashMap efficiently?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50192075/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525542194, "post_id": 50192075, "comment_id": 87401552, "body": "The <a href=\"https://play.rust-lang.org/?gist=7569394ee36b58216d2e3d0c535ece82&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">duplicate applied to your question</a>."}], "owner": {"reputation": 1242, "user_id": 978677, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/d0d717a9e4aa531242bfc75804a9992f?s=128&d=identicon&r=PG", "display_name": "cm007", "link": "https://stackoverflow.com/users/978677/cm007"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 106, "favorite_count": 0, "closed_date": 1525543854, "answer_count": 0, "score": 0, "last_activity_date": 1525541957, "creation_date": 1525540394, "last_edit_date": 1525541957, "question_id": 50192075, "link": "https://stackoverflow.com/questions/50192075/how-to-get-then-modify-value-of-a-hashmap-during-iteration-in-rust", "closed_reason": "Duplicate", "title": "How to get then modify value of a HashMap during iteration in Rust?", "body": "<p>I am trying to invert a collection of key-value pairs. For example, </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>a: 1, 2, 3\nb: 3, 4, 5\n</code></pre>\n\n<p>to</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>1: a\n2: a\n3: a, b\n4: b\n5: b\n</code></pre>\n\n<p>I have the following Rust code:</p>\n\n<pre><code>use std::collections::{HashMap, HashSet};\n\npub fn convert_map(my_tuples: Vec&lt;(String, Vec&lt;String&gt;)&gt;) -&gt; HashMap&lt;String, HashSet&lt;String&gt;&gt; {\n    let mut my_map = HashMap::&lt;String, HashSet&lt;String&gt;&gt;::new();\n    for my_tuple in my_tuples {\n        for new_key in my_tuple.1 {\n            match my_map.get(&amp;new_key) {\n                Some(val) =&gt; {\n                    val.insert(my_tuple.0);\n                }\n                None =&gt; {\n                    let mut new_val = HashSet::new();\n                    new_val.insert(my_tuple.0);\n                    my_map.insert(new_key, new_val);\n                }\n            }\n        }\n    }\n    my_map\n}\n</code></pre>\n\n<p>However, I am getting the following compiler errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> error[E0596]: cannot borrow immutable borrowed content `*val` as mutable\n --&gt; src/main.rs:9:21\n  |\n9 |                     val.insert(my_tuple.0);\n  |                     ^^^ cannot borrow as mutable\n\nerror[E0382]: use of moved value: `my_tuple.0`\n --&gt; src/main.rs:9:32\n  |\n9 |                     val.insert(my_tuple.0);\n  |                                ^^^^^^^^^^ value moved here in previous iteration of loop\n  |\n  = note: move occurs because `my_tuple.0` has type `std::string::String`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `my_tuple.0`\n  --&gt; src/main.rs:13:36\n   |\n9  |                     val.insert(my_tuple.0);\n   |                                ---------- value moved here\n...\n13 |                     new_val.insert(my_tuple.0);\n   |                                    ^^^^^^^^^^ value used here after move\n   |\n   = note: move occurs because `my_tuple.0` has type `std::string::String`, which does not implement the `Copy` trait\n\nerror[E0502]: cannot borrow `my_map` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:14:21\n   |\n7  |             match my_map.get(&amp;new_key) {\n   |                   ------ immutable borrow occurs here\n...\n14 |                     my_map.insert(new_key, new_val);\n   |                     ^^^^^^ mutable borrow occurs here\n15 |                 }\n16 |             }\n   |             - immutable borrow ends here\n</code></pre>\n\n<p>I am new to Rust and am not sure how to correctly state the mutability so that this will compile.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1525528589, "post_id": 50190214, "comment_id": 87397239, "body": "Ok makes sense thanks.... but then... why did it work at some point? XD That puzzles me"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1525531150, "post_id": 50190214, "comment_id": 87398002, "body": "@Cecile It works in your second example because <code>roms</code> is the only non-<code>Copy</code> member of <code>State</code>, and <code>roms</code> is the element you&#39;re replacing, so it doesn&#39;t need to be moved. In <code>struct</code> update syntax, only the fields that are not explicitly set are moved. (If you added another field to <code>State</code> that was non-<code>Copy</code>, it would have the same issue <code>User</code> does.)"}, {"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1525533458, "post_id": 50190214, "comment_id": 87398721, "body": "Thanks for the explanations"}, {"owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1525533892, "post_id": 50190214, "comment_id": 87398860, "body": "Cloning is not working, I still obtain a reference: `   = note: expected type User found type &amp;User`"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "edited": false, "score": 0, "creation_date": 1525542289, "post_id": 50190214, "comment_id": 87401583, "body": "@Cecile you also need to make <code>User</code> clonable, otherwise you are only cloning the reference, which is pretty useless. Simply add <code>#[derive(Clone)]</code> as in the playground example."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 3, "last_activity_date": 1525528400, "creation_date": 1525528400, "answer_id": 50190214, "question_id": 50190112, "link": "https://stackoverflow.com/questions/50190112/cannot-move-out-of-borrowed-content-when-using-the-struct-literal-update-syntax/50190214#50190214", "title": "Cannot move out of borrowed content when using the struct literal update syntax: User { active: false, ..*user }", "body": "<p>The <code>..expr</code> syntax moves all the missing member from <code>expr</code>. It <em>moves</em>. That means you generally can't use it with a reference, since you can't move out of a reference (you can \"move\" <code>Copy</code> types out of a reference though).</p>\n\n<p>To solve you problem, you need to clone, in order to get a new full object you can move from:</p>\n\n<pre><code>fn foo(user: &amp;User) -&gt; User {\n    User {\n        active: false,\n        ..user.clone()\n    }\n}\n</code></pre>\n\n<p>(<a href=\"http://play.integer32.com/?gist=c3dacea150a98993c9308f59d5f55afb&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">link to playground</a>)</p>\n\n<p>The downside is that this also clone all members you don't need because you've already specified them. In this case it's fine since cloning <code>active</code> is a trivial operation (as it's just a boolean), however this would make an extra useless clone for <code>username</code>:</p>\n\n<pre><code>fn foo(user: &amp;User) -&gt; User {\n    User {\n        username: \"foo\".into(),\n        ..user.clone()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1125, "user_id": 2824342, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/0ea84a519cbc8e36fd15ced5da3fd3b6?s=128&d=identicon&r=PG&f=1", "display_name": "Cecile", "link": "https://stackoverflow.com/users/2824342/cecile"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 0, "accepted_answer_id": 50190214, "answer_count": 1, "score": 0, "last_activity_date": 1525529007, "creation_date": 1525527748, "last_edit_date": 1525529007, "question_id": 50190112, "link": "https://stackoverflow.com/questions/50190112/cannot-move-out-of-borrowed-content-when-using-the-struct-literal-update-syntax", "title": "Cannot move out of borrowed content when using the struct literal update syntax: User { active: false, ..*user }", "body": "<p>I'm beginning in Rust and I like very much the syntax with <code>..</code> to <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\" rel=\"nofollow noreferrer\">create an instance of another instance</a> but I don't know how to use it with a reference of an instance instead.</p>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23%5Bderive(Debug)%5D%0Astruct%20User%20%7B%0A%20%20%20%20username%3A%20String%2C%0A%20%20%20%20email%3A%20String%2C%0A%20%20%20%20sign_in_count%3A%20u64%2C%0A%20%20%20%20active%3A%20bool%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20user1%20%3D%20User%20%7B%0A%20%20%20%20%20%20%20%20email%3A%20String%3A%3Afrom(%22someone%40example.com%22)%2C%0A%20%20%20%20%20%20%20%20username%3A%20String%3A%3Afrom(%22someusername123%22)%2C%0A%20%20%20%20%20%20%20%20active%3A%20true%2C%0A%20%20%20%20%20%20%20%20sign_in_count%3A%201%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20let%20user2%20%3D%20foo(%26user1)%3B%0A%20%20%20%20%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20user2)%3B%0A%7D%0A%0Afn%20foo(user%3A%20%26User)%20-%3E%20User%20%7B%0A%20%20%20%20User%20%7B%0A%20%20%20%20%20%20%20%20active%3A%20false%2C%0A%20%20%20%20%20%20%20%20..*user%0A%20%20%20%20%7D%0A%7D&amp;run=1\" rel=\"nofollow noreferrer\">Try it here.</a></p>\n\n<pre><code>#[derive(Debug)]\nstruct User {\n    username: String,\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\n\nfn main() {\n    let user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n    let user2 = foo(&amp;user1);\n\n    println!(\"{:?}\", user2);\n}\n\nfn foo(user: &amp;User) -&gt; User {\n    User {\n        active: false,\n        ..*user\n    }\n}\n</code></pre>\n\n<p>Which gives me the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:24:11\n   |\n24 |         ..*user\n   |           ^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>The funny thing is that it worked for me at some point:</p>\n\n<pre><code>fn reduce&lt;'a&gt;(state: &amp;State&lt;'a&gt;, action: Action) -&gt; Option&lt;State&lt;'a&gt;&gt; {\n    match action {\n        Action::LoadRoms { roms } =&gt; {\n            let mut new_state = State { roms, ..*state };\n            Some(new_state)\n        }\n        _ =&gt; None,\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/cecton/meldnafen-rust/blob/master/src/store.rs#L38\" rel=\"nofollow noreferrer\">From here.</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525530618, "post_id": 50189976, "comment_id": 87397839, "body": "This <code>read_exact::&lt;&amp;TcpStream, _&gt;(conn.borrow(), [0u8]);</code> would work, I don&#39;t have the knowledge to explain it but it&#39;s similar to the answers of the questions you link. &quot;This results in an overflow and general sadness. Rust never finds a disproof, so can&#39;t ever guarantee it&#39;s going down the wrong path.&quot;"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525599692, "post_id": 50189976, "comment_id": 87413298, "body": "Right. I feel like the reason behind is the same. But if this is a bug in the compiler that is not easy to fix, shall I blame <code>tokio</code>? If my own libraries run into this issue, how to avoid the user from getting confused like this?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525699603, "post_id": 50189976, "comment_id": 87447417, "body": "Maybe you should search or open an issue on the github of rust compiler, they will be able to answer you properly (and after don&#39;t forget to come here with the answer ;))"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1526144872, "post_id": 50308602, "comment_id": 87633446, "body": "While I was researching this problem, a compiler developer told me that there&#39;s some special case for resolving references that allows the infinite recursion. I&#39;m not sure if it&#39;s the reference in  <code>&amp;X1: AsyncRead</code> or one of the ones in <code>impl&lt;X2&gt; AsyncRead for &amp;PollEvented&lt;X2&gt; where &amp;X2: Read</code> that triggers this special case though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1526145018, "post_id": 50308602, "comment_id": 87633483, "body": "<i>allows OP&#39;s program to be inferred correctly</i> \u2014 do you know <i>how</i>? There&#39;s still a possible infinite loop with <code>AsyncRead</code>; does it now take into account that there&#39;s only the one implementation of <code>Borrow</code> for <code>Rc&lt;T&gt;</code>?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1526145550, "post_id": 50308602, "comment_id": 87633632, "body": "@Shepmaster I think you&#39;ll need to ask niko for &quot;how&quot;, I just know it works \ud83d\ude05 Perhaps via some methods written in <a href=\"http://smallcultfollowing.com/babysteps/blog/2017/09/12/tabling-handling-cyclic-queries-in-chalk/\" rel=\"nofollow noreferrer\">smallcultfollowing.com/babysteps/blog/2017/09/12/&hellip;</a>"}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1526196086, "post_id": 50308602, "comment_id": 87643394, "body": "I was thought that <code>x.borrow()</code> is equivalent to <code>&amp;*x</code>, but if I know <code>&amp;*x</code> is actually equivalent to <code>x.deref()</code> I would use this instead if possible. Just a but dislike magical symbol operators."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1526196224, "post_id": 50308602, "comment_id": 87643421, "body": "@kennytm So the new engine is just the same (I mean, does the same thing, maybe in a different way) as the old, but uses BFS rather than DFS so it will not being trapped in a circle, am I right?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "edited": false, "score": 0, "creation_date": 1526198126, "post_id": 50308602, "comment_id": 87643859, "body": "@EarthEngine Sort of <a href=\"http://smallcultfollowing.com/babysteps/blog/2018/01/31/an-on-demand-slg-solver-for-chalk/\" rel=\"nofollow noreferrer\">(yes the search is BFS)</a>. Also, by expressing the trait system in terms of logic, it also allows us to support more complex features like GATs more naturally."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 3, "last_activity_date": 1526144721, "last_edit_date": 1526144721, "creation_date": 1526143868, "answer_id": 50308602, "question_id": 50189976, "link": "https://stackoverflow.com/questions/50189976/why-do-i-get-overflow-evaluating-the-requirement-sized-when-using-tokio-ios/50308602#50308602", "title": "Why do I get &quot;overflow evaluating the requirement `Sized`&quot; when using tokio_io&#39;s read_exact with a Rc&lt;TcpStream&gt;?", "body": "<p>The difference between <code>&amp;*conn</code> and <code>conn.borrow()</code> is that <strong>a type may have multiple Borrow impls</strong>.</p>\n\n<pre><code>use std::borrow::Borrow;\n\nfn main() {\n    let input = vec![1, 2, 3];\n\n    let _slice:   &amp;[u8]    = input.borrow(); // ok\n    let _vec_ref: &amp;Vec&lt;u8&gt; = input.borrow(); // also ok \n\n    let _slice:   &amp;[u8]    = &amp;*input; // ok\n//  let _vec_ref: &amp;Vec&lt;u8&gt; = &amp;*input; // error!\n}\n</code></pre>\n\n<p>The <code>&amp;*conn</code> expression uses the <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code></a> trait, where each type can only have a single <code>Deref</code> implementation. However, a type can have multiple <code>Borrow&lt;X&gt;</code> implementations for different <code>X</code>s. </p>\n\n<p>When you write</p>\n\n<pre><code>read_exact(conn.borrow(), [0u8]);\n</code></pre>\n\n<p>The compiler needs to solve the following obligations: </p>\n\n<ol>\n<li><code>Rc&lt;TcpStream&gt;: Borrow&lt;X1&gt;</code> due to use of <code>borrow()</code></li>\n<li><code>&amp;X1: AsyncRead</code> due to <a href=\"https://docs.rs/tokio-io/0.1.6/tokio_io/io/fn.read_exact.html\" rel=\"nofollow noreferrer\"><code>read_exact</code></a></li>\n</ol>\n\n<p>Note that <code>X1</code> is an unknown type. The compiler will need to find out all potential <code>X1</code>s and see if anyone can fit into both obligations. Obligation 2 somehow got evaluated first, which ends up with these candidates:</p>\n\n<ol>\n<li><a href=\"https://docs.rs/tokio-core/0.1.17/tokio_core/reactor/struct.PollEvented.html#impl-AsyncRead-1\" rel=\"nofollow noreferrer\"><code>impl&lt;X2&gt; AsyncRead for &amp;PollEvented&lt;X2&gt; where &amp;X2: Read</code></a></li>\n<li><a href=\"https://docs.rs/tokio-core/0.1.17/tokio_core/net/struct.TcpStream.html#impl-AsyncRead-1\" rel=\"nofollow noreferrer\"><code>impl AsyncRead for &amp;TcpStream</code></a></li>\n<li><code>impl AsyncRead for &amp;[u8]</code> and probably more unimportant candidates...</li>\n</ol>\n\n<p>Again, somehow candidate 1 is selected before candidate 2. This leads to the following new set of obligations after candidate 1 is selected:</p>\n\n<ol>\n<li><code>Rc&lt;TcpStream&gt;: Borrow&lt;PollEvented&lt;X2&gt;&gt;</code></li>\n<li><del><code>&amp;PollEvented&lt;X2&gt;: AsyncRead</code></del> <em>solved!</em></li>\n<li><code>&amp;X2: Read</code></li>\n</ol>\n\n<p>which then leads to <code>impl&lt;X3&gt; Read for &amp;PollEvented&lt;X3&gt; where &amp;X3: Read</code> being selected, and from this point the solver got stuck in an infinite loop and eventually gave up.</p>\n\n<p>Details about how the compiler solves these equations can be found in the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html\" rel=\"nofollow noreferrer\">Rust Compiler Guide</a>.</p>\n\n<p>The good news is that the trait system is being <a href=\"https://rust-lang-nursery.github.io/rustc-guide/traits.html\" rel=\"nofollow noreferrer\">revamped</a> to use standard logic inference techniques (like Prolog) which allows OP's program to be inferred correctly.</p>\n\n<p>However, before the new trait engine is implemented, if you must use <code>borrow</code> you could help the compiler a little bit by telling it what <code>X1</code> should be:</p>\n\n<pre><code>read_exact::&lt;&amp;TcpStream, _&gt;(conn.borrow(), [u8]);\n//           ^~~~~~~~~~ forces &amp;X1 = &amp;TcpStream\n</code></pre>\n\n<hr>\n\n<p>In case you're interested, the following <a href=\"https://github.com/rust-lang-nursery/chalk\" rel=\"nofollow noreferrer\">chalk</a> program proves that the new solver can typecheck OP's example</p>\n\n<pre><code>trait Borrow&lt;T&gt; {}\ntrait AsyncRead {}\ntrait Read {}\n\nstruct Ref&lt;T&gt; {} // meaning &amp;T\n\nstruct Rc&lt;T&gt; {}\nimpl&lt;T&gt; Borrow&lt;T&gt; for Rc&lt;T&gt; {}\n\nstruct TcpStream {}\nimpl Read for TcpStream {}\nimpl AsyncRead for TcpStream {}\nimpl Read for Ref&lt;TcpStream&gt; {}\nimpl AsyncRead for Ref&lt;TcpStream&gt; {}\n\nstruct PollEvented&lt;E&gt; {}\nimpl&lt;E&gt; AsyncRead for Ref&lt;PollEvented&lt;E&gt;&gt; where Ref&lt;E&gt;: Read {}\nimpl&lt;E&gt; Read for Ref&lt;PollEvented&lt;E&gt;&gt; where Ref&lt;E&gt;: Read {}\n\n// Verify:\n// \n// ?- exists&lt;X&gt; { Ref&lt;X&gt;: AsyncRead, Rc&lt;TcpStream&gt;: Borrow&lt;X&gt; }\n// Unique; substitution [?0 := TcpStream], lifetime constraints []\n</code></pre>\n"}], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 352, "favorite_count": 0, "accepted_answer_id": 50308602, "answer_count": 1, "score": 2, "last_activity_date": 1526144721, "creation_date": 1525526865, "last_edit_date": 1525530300, "question_id": 50189976, "link": "https://stackoverflow.com/questions/50189976/why-do-i-get-overflow-evaluating-the-requirement-sized-when-using-tokio-ios", "title": "Why do I get &quot;overflow evaluating the requirement `Sized`&quot; when using tokio_io&#39;s read_exact with a Rc&lt;TcpStream&gt;?", "body": "<p>There are quite a few similar errors already posted:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/39397157/overflow-evaluating-the-requirement-but-that-kind-of-recursion-should-not-happ\">&quot;Overflow evaluating the requirement&quot; but that kind of recursion should not happen at all</a></li>\n<li><a href=\"https://stackoverflow.com/questions/31196422/what-does-overflow-evaluating-the-requirement-mean-and-how-can-i-fix-it\">What does &quot;Overflow evaluating the requirement&quot; mean and how can I fix it?</a></li>\n</ul>\n\n<p><a href=\"https://play.rust-lang.org/?gist=511081305ef28abbe843b94f5a481620&amp;version=nightly&amp;mode=debug\" rel=\"nofollow noreferrer\">My case</a> is much more simple and looks innocent:</p>\n\n<pre><code>extern crate tokio_core;\nextern crate tokio_io;\n\nuse std::{borrow::Borrow, rc::Rc};\nuse tokio_core::net::TcpStream;\nuse tokio_io::io::read_exact;\n\nfn read_one(conn: Rc&lt;TcpStream&gt;) {\n    read_exact(conn.borrow(), [0u8]);\n}\n</code></pre>\n\n<p>It gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0275]: overflow evaluating the requirement `_: std::marker::Sized`\n --&gt; src/main.rs:9:5\n  |\n9 |     read_exact(conn.borrow(), [0u8]);\n  |     ^^^^^^^^^^\n  |\n  = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n  = note: required because of the requirements on the impl of `std::io::Read` for `&amp;tokio_core::reactor::poll_evented2::PollEvented&lt;_&gt;`\n  = note: required because of the requirements on the impl of `std::io::Read` for `&amp;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;_&gt;&gt;`\n  = note: required because of the requirements on the impl of `std::io::Read` for `&amp;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;_&gt;&gt;&gt;`\n[... snip ...]\n  = note: required because of the requirements on the impl of `std::io::Read` for `&amp;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;_&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;`\n  = note: required because of the requirements on the impl of `tokio_io::AsyncRead` for `&amp;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;tokio_core::reactor::poll_evented2::PollEvented&lt;_&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;`\n  = note: required by `tokio_io::io::read_exact`\n</code></pre>\n\n<p>What is going on?</p>\n\n<p>I know the following works and it is simpler than the above:</p>\n\n<pre><code>read_exact(&amp;*conn, [0u8]);\n</code></pre>\n\n<p>I believe <code>conn.borrow</code> should work as well, I just don't understand why we have this error.</p>\n"}, {"tags": ["c++", "rust", "ffi"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1525523842, "post_id": 50188710, "comment_id": 87395806, "body": "I&#39;m a little concerned that there may be a problem with your use of <code>__stdcall</code>.  <code>extern fn</code>s in Rust use the C calling convention by default, not stdcall.  You should probably use <code>__cdecl</code> instead.  You could also use <code>extern &quot;stdcall&quot; fn</code> on the Rust side, but that&#39;s only valid on 32-bit Windows."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1525529385, "post_id": 50188710, "comment_id": 87397472, "body": "Your C++ callback function also needs to be marked with <code>extern &quot;C&quot;</code>"}], "answers": [{"comments": [{"owner": {"reputation": 153, "user_id": 7810882, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/31bd8d33e639ec2e82414a9c730d9d33?s=128&d=identicon&r=PG&f=1", "display_name": "user7810882", "link": "https://stackoverflow.com/users/7810882/user7810882"}, "edited": false, "score": 0, "creation_date": 1525519270, "post_id": 50188786, "comment_id": 87394462, "body": "Returning <code>Box::into_raw(tmp)</code> instead of <code>&amp;mut *tmp</code> seems to work. Thank you."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 5, "last_activity_date": 1525529335, "last_edit_date": 1525529335, "creation_date": 1525518881, "answer_id": 50188786, "question_id": 50188710, "link": "https://stackoverflow.com/questions/50188710/rust-function-that-allocates-memory-and-calls-a-c-callback-crashes/50188786#50188786", "title": "Rust function that allocates memory and calls a C++ callback crashes", "body": "<p><code>Box</code> in Rust is similar to <code>std::unique_ptr</code> in C++. The way you construct <code>tmp</code>, the data pointed to will be freed at the end of the function.</p>\n\n<p>In order to \"leak\" the pointer into C++ world, you should use <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw\" rel=\"nofollow noreferrer\"><code>Box::into_raw</code></a>.</p>\n\n<p>Note that as there is no guarantee that Rust and C++ allocate memory the same way; you will have to pass the pointer back to Rust and use <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.from_raw\" rel=\"nofollow noreferrer\"><code>Box::from_raw</code></a> to deallocate it.</p>\n"}], "owner": {"reputation": 153, "user_id": 7810882, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/31bd8d33e639ec2e82414a9c730d9d33?s=128&d=identicon&r=PG&f=1", "display_name": "user7810882", "link": "https://stackoverflow.com/users/7810882/user7810882"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 398, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1525529335, "creation_date": 1525518253, "last_edit_date": 1525529279, "question_id": 50188710, "link": "https://stackoverflow.com/questions/50188710/rust-function-that-allocates-memory-and-calls-a-c-callback-crashes", "title": "Rust function that allocates memory and calls a C++ callback crashes", "body": "<p>Rust code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(C)]\npub struct Tmp {\n    pub callback: extern \"C\" fn(i: i32),\n}\n\n#[no_mangle]\npub extern \"C\" fn set_callback(callback: extern \"C\" fn(i: i32)) -&gt; *mut Tmp {\n    let mut tmp = Box::new(Tmp { callback });\n    println!(\"tmp as ptr: {:p}\", tmp); // &gt;&gt; here &lt;&lt;\n    &amp;mut *tmp\n}\n\n#[no_mangle]\npub extern \"C\" fn use_callback(tmp_ptr: *mut Tmp) {\n    unsafe {\n        ((*tmp_ptr).callback)(1);\n        ((*tmp_ptr).callback)(3);\n    }\n}\n</code></pre>\n\n<p>C++ code:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>struct Tmp {\n    void (*callback)(int32_t);\n};\n\ntypedef Tmp*(__stdcall* set_callback_t)(void(*callback_t)(int32_t));\ntypedef void(__stdcall* use_callback_t)(Tmp*);\n\nvoid callback(int32_t i) {\n    printf(\"%d\\n\", i * 2);\n}\n\nint main() {\n    // ... loading rust part as .dll\n    // ... checking if loaded correctly\n    Tmp* tmp_ptr = set_callback(callback);\n    printf(\"tmp_ptr %p\\n\", tmp_ptr);\n    use_callback(tmp_ptr);\n    // ... freeing the .dll\n}\n</code></pre>\n\n<p>When I compile this the program, it works as expected. The printed values of pointer to <code>Tmp</code> structure in Rust and C++ match. When I comment out the <code>println</code> in Rust, the C++ program crashes, which means that there is something wrong with this (probably Rust part) code.</p>\n\n<p>I am using the Rust code as a .dll. I would like to pass a pointer to C++ function to the <code>set_callback</code> function, and then I would like to use that pointer in the <code>use_callback</code> function when I call <code>use_callback</code> in the C++ code.</p>\n\n<p>For what I understand, at the end I will have to call a Rust function to drop the <code>Tmp</code> structure, but I left that out.</p>\n"}, {"tags": ["rust", "type-mismatch"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525506535, "post_id": 50187031, "comment_id": 87390757, "body": "Your <code>a</code> could be written as <code>(1..1000001).collect()</code>"}, {"owner": {"reputation": 11, "user_id": 8591201, "user_type": "registered", "profile_image": "https://graph.facebook.com/1892597367669449/picture?type=large", "display_name": "Shisui Uchiha", "link": "https://stackoverflow.com/users/8591201/shisui-uchiha"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525506852, "post_id": 50187031, "comment_id": 87390829, "body": "@Boiethios this just a sample code , my actual purpose is to import a list of integers from a file into vector {a} real problem lies in if condition to stop printing loop"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525507287, "post_id": 50187031, "comment_id": 87390926, "body": "You can use <code>collect</code> in this case as well\u2026"}, {"owner": {"user_type": "does_not_exist", "display_name": "user743382"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525507434, "post_id": 50187031, "comment_id": 87390957, "body": "@Stargateur About your edit: the minimal program to demonstrate the problem the OP is asking about is not necessarily the minimal program to demonstrate the error the OP is receiving. I do not know whether the OP is asking why <code>i</code> and <code>j</code>&#39;s types are what they are, or why <code>usize</code> and <code>i64</code> cannot be compared. (And you shouldn&#39;t be editing at all to enforce your personal brace style, see <a href=\"https://meta.stackoverflow.com/q/263115.\">meta.stackoverflow.com/q/263115.</a>)"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1525508433, "post_id": 50187031, "comment_id": 87391167, "body": "@hvd Rust has a standard format style, and this is good to use it. Furthermore, the OP did not format the code at all."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525508443, "post_id": 50187031, "comment_id": 87391171, "body": "@hvd I tried to transform this question to something useful for futur reader, this is better ?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user743382"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525508709, "post_id": 50187031, "comment_id": 87391246, "body": "@Stargateur I think so, much appreciated. (Of course, the OP is free to disagree and edit or roll back, but in that case hopefully the OP would explain why they still disagree. :))"}], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user743382"}, "is_accepted": true, "score": 3, "last_activity_date": 1525507015, "creation_date": 1525507015, "answer_id": 50187117, "question_id": 50187031, "link": "https://stackoverflow.com/questions/50187031/error-type-mismatch-expected-usize-found-i64-with-a-veci64/50187117#50187117", "title": "error: type mismatch: expected `usize`, found `i64` with a `Vec&lt;i64&gt;`", "body": "<p>The error message is saying that you cannot compare <code>i</code> (type <code>usize</code>) and <code>j</code> (type <code>i64</code>).</p>\n\n<p>Why is <code>i</code> type <code>usize</code>? Because you're using it as an index in <code>a[i]</code>.</p>\n\n<p>Why is <code>j</code> type <code>i64</code>? Because you've initialised it from <code>n</code>, which has type <code>i64</code> because it is pushed into a <code>Vec&lt;i64&gt;</code>.</p>\n\n<p>Why can you not compare the two? Because in languages where you can, that would be done by either converting <code>usize</code> to <code>i64</code> and then performing the comparison, or by converting <code>i64</code> to <code>usize</code> and then performing the comparison. Both approaches can potentially do the wrong thing.</p>\n"}], "owner": {"reputation": 11, "user_id": 8591201, "user_type": "registered", "profile_image": "https://graph.facebook.com/1892597367669449/picture?type=large", "display_name": "Shisui Uchiha", "link": "https://stackoverflow.com/users/8591201/shisui-uchiha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 649, "favorite_count": 1, "accepted_answer_id": 50187117, "answer_count": 1, "score": 0, "last_activity_date": 1525508624, "creation_date": 1525506411, "last_edit_date": 1525508624, "question_id": 50187031, "link": "https://stackoverflow.com/questions/50187031/error-type-mismatch-expected-usize-found-i64-with-a-veci64", "title": "error: type mismatch: expected `usize`, found `i64` with a `Vec&lt;i64&gt;`", "body": "<pre><code>fn main() {\n    let mut a: Vec&lt;i64&gt; = Vec::new();\n\n    let n = 42;\n    a.push(n);\n\n    let i = 0;\n    a[i];\n\n    let j = n;\n\n    i == j;\n}\n</code></pre>\n\n<p>I am not able to fix type mismatch in rust, error says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:4:10\n  |\n4 |     i == j;\n  |          ^ expected usize, found i64\n</code></pre>\n"}, {"tags": ["generics", "rust", "type-inference"], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 3, "last_activity_date": 1525523255, "last_edit_date": 1525523255, "creation_date": 1525513123, "answer_id": 50187947, "question_id": 50186556, "link": "https://stackoverflow.com/questions/50186556/why-is-the-inference-of-a-generic-type-not-transitive/50187947#50187947", "title": "Why is the inference of a generic type not &quot;transitive&quot;?", "body": "<p>E0283</p>\n\n<blockquote>\n  <p>This error occurs when the compiler doesn't have enough information to unambiguously choose an implementation.</p>\n</blockquote>\n\n<p>In this example the compiler is not able to infer that <code>B</code> is a slice type <code>[T]</code>, You have at least to specify that information with the annotation <code>[_]</code>:       </p>\n\n<pre><code>assert!(test_eq::&lt;_, _, [_]&gt;(my_vec, [1, 2, 3] ));\n</code></pre>\n"}], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 50187947, "answer_count": 1, "score": 1, "last_activity_date": 1525529158, "creation_date": 1525502564, "last_edit_date": 1525529158, "question_id": 50186556, "link": "https://stackoverflow.com/questions/50186556/why-is-the-inference-of-a-generic-type-not-transitive", "title": "Why is the inference of a generic type not &quot;transitive&quot;?", "body": "<p>When I try to compile this code:</p>\n\n<pre><code>use std::borrow::Borrow;\n\nfn test_eq&lt;T, U, B&gt;(t: T, u: U) -&gt; bool\nwhere\n    T: Borrow&lt;B&gt;,\n    U: Borrow&lt;B&gt;,\n    B: PartialEq&lt;B&gt; + ?Sized,\n{\n    t.borrow() == u.borrow()\n}\n\nfn main() {\n    let my_vec = vec![1, 2, 3];\n\n    assert!(test_eq(my_vec, [1, 2, 3]));\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0283]: type annotations required: cannot resolve `std::vec::Vec&lt;i32&gt;: std::borrow::Borrow&lt;_&gt;`\n  --&gt; src/main.rs:15:13\n   |\n15 |     assert!(test_eq(my_vec, [1, 2, 3]));\n   |             ^^^^^^^\n   |\n</code></pre>\n\n<p>Obviously, <code>[T]</code> is a good candidate for <code>B</code> because:</p>\n\n<ul>\n<li><code>Vec&lt;T&gt;</code> implements <code>Borrow&lt;[T]&gt;</code></li>\n<li><code>[T, 3]</code> implements <code>Borrow&lt;[T]&gt;</code></li>\n<li><code>[T]</code> implements <code>PartialEq&lt;[T]&gt;</code></li>\n</ul>\n\n<p>and my code compiles if I explicitly specify the types:</p>\n\n<pre><code>assert!(test_eq::&lt;Vec&lt;i32&gt;, [i32; 3], [i32]&gt;(my_vec, [1, 2, 3]));\n</code></pre>\n\n<p>Why does this code fail to compile?</p>\n"}, {"tags": ["rust", "undefined-behavior", "unsafe"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1525484280, "post_id": 50184028, "comment_id": 87386994, "body": "Something that comes to mind: Rust is free to manipulate how it represents enums based on the representation of its variants&#39; payloads (<i>i.e.</i> the trick that makes <code>Option&lt;Box&lt;T&gt;&gt;</code> the same size as <code>Box&lt;T&gt;</code>).  I&#39;m not aware of any layout optimisations that affect <code>Result</code>, but I also see no reason they couldn&#39;t be added in future.  If that were the case, <code>mem::uninitialized</code> could leave the <code>E</code> value in an invalid state that changes how the <code>Result</code> is interpreted."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1525588430, "post_id": 50184028, "comment_id": 87410700, "body": "Yeah, I figured as much. So there is no guarantee of defined behavior when it comes to putting invalid states into enums."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1525723193, "post_id": 50184028, "comment_id": 87460524, "body": "Not sure whether it&#39;s the case yet, but <code>Result&lt;T, !&gt;</code> could and (someday) should have the same layout as <code>T</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1525708232, "post_id": 50217999, "comment_id": 87453069, "body": "<i>LLVM just optimized the entire program to immediate SIGILL</i> \u2014 now that&#39;s efficient code generation."}], "tags": [], "owner": {"reputation": 491, "user_id": 5282385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f909f7c0f578c26cc98852294a416cc?s=128&d=identicon&r=PG", "display_name": "Ralf Jung", "link": "https://stackoverflow.com/users/5282385/ralf-jung"}, "is_accepted": true, "score": 10, "last_activity_date": 1525708025, "creation_date": 1525708025, "answer_id": 50217999, "question_id": 50184028, "link": "https://stackoverflow.com/questions/50184028/is-memforgetmemuninitialized-defined-behavior/50217999#50217999", "title": "Is mem::forget(mem::uninitialized()) defined behavior?", "body": "<p>No, this is not defined behavior, at least not for all types.  (I can't tell how your code would be called as part of mutation, so I don't know if you have control over the types here, but the generic <code>impl</code> sure makes it look like you do not.)  That's demonstrated by the following piece of code:</p>\n\n<pre><code>#![feature(never_type)]\nuse std::mem;\n\nfn main() {\n    unsafe { mem::forget(mem::uninitialized::&lt;!&gt;()) }\n}\n</code></pre>\n\n<p>If you <a href=\"https://play.rust-lang.org/?gist=675ba20c51ad31461e2c12b2e1d46a21&amp;version=nightly&amp;mode=release\" rel=\"noreferrer\">run this on the playground</a>, you will see the program die with a SIGILL.  The ASM output shows that LLVM just optimized the entire program to immediate SIGILL because of the way it uses a value of the uninhabited type <code>!</code>:</p>\n\n<pre><code>playground::main:\n    ud2\n</code></pre>\n\n<p>Generally speaking, it is near impossible to correctly use <code>mem::uninitialized</code> in generic code, see e.g. <a href=\"https://github.com/rust-lang/rust/issues/48493\" rel=\"noreferrer\">this issue of <code>rc::Weak</code></a>.  For this reason, that function is in the process of being <a href=\"https://github.com/rust-lang/rfcs/pull/1892\" rel=\"noreferrer\">deprecated and replaced</a>.  But that won't help you here; what you want to do is just outright illegal for <code>Result&lt;T, !&gt;</code>.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 288, "favorite_count": 1, "accepted_answer_id": 50217999, "answer_count": 1, "score": 12, "last_activity_date": 1525708025, "creation_date": 1525474363, "last_edit_date": 1525482186, "question_id": 50184028, "link": "https://stackoverflow.com/questions/50184028/is-memforgetmemuninitialized-defined-behavior", "title": "Is mem::forget(mem::uninitialized()) defined behavior?", "body": "<p>In <a href=\"https://github.com/llogiq/mutagen\" rel=\"noreferrer\">mutagen</a>, I'm injecting various\nmutations in the code. One thing I'd like to mutate is the pattern\n<code>if let Ok(x) = y { .. }</code>. However, this poses quite the challenge, as I\ncannot know the type of <code>y</code> \u2013 the user could have built their own enum with an\nunary <code>Ok</code> variant. I can still opportunistically mutate it for cases where we\nactually have a <code>Result</code> whose error type implements <code>Default</code> using a trait\nthat looks like the following simplified:</p>\n\n<pre><code>#![feature(specialization)]\n\npub trait Errorer {\n    fn err(self, mutate: bool) -&gt; Self;\n}\n\nimpl&lt;X&gt; Errorer for X {\n    default fn err(self, _mutate: bool) -&gt; Self {\n        self\n    }\n}\n\nimpl&lt;T, E&gt; Errorer for Result&lt;T, E&gt;\nwhere\n    E: Default,\n{\n    fn err(self, mutate: bool) -&gt; Self {\n        if mutate {\n            Err(Default::default())\n        } else {\n            self\n        }\n    }\n}\n</code></pre>\n\n<p>Alas, there aren't that many errors which implement <code>Default</code>, so this is\nnot too useful. Even an implementation for <code>Result&lt;T, Box&lt;Error&gt;&gt;</code> would give\nus more bang for the buck (and be completely possible). However, given that I\ndon't care much about code actually <em>inspecting</em> the error, I wonder if I could\ndo a general implementation by extending the mutation of the above code to</p>\n\n<pre><code>match Errorer::err(y, mutation) {\n    Ok(x) =&gt; { .. }\n    Err(x) =&gt; { mem::forget(x); }\n}\n</code></pre>\n\n<p>and have <code>err</code> return <code>Err(mem::uninitialized())</code> when mutating \u2013 so is this\nbehavior safe? Note: I'm returning <code>Err(mem::uninitialized())</code> from a method,\nonly to <code>mem::forget</code> it later. I see no way this could panic, so we should\nassume that the value will be indeed forgotten.</p>\n\n<p>Is this defined behavior or should I expect nasal demons?</p>\n"}, {"tags": ["rust", "undefined-behavior", "strict-aliasing", "memory-model"], "comments": [{"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525464338, "post_id": 50181283, "comment_id": 87382064, "body": "@Shepmaster They&#39;re all minor variations of the same issue, accessing memory to which a <code>&amp;mut</code> might exist which isn&#39;t owned by your code, so an the answers to all of them will have a lot of overlap. For example if the rule is &quot;you may never ever access memory somebody else has an <code>&amp;mut</code> to&quot;, then this would answer all of them at once."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1525464512, "post_id": 50181283, "comment_id": 87382143, "body": "Can the unifying theme be placed into the question&#39;s title? As it is now, the title is basically useless to anyone else who might search for the same problem. Any title which uses a construction like &quot;check out this thing&quot; without describing &quot;this thing&quot; falls into the same trap."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525468517, "post_id": 50181283, "comment_id": 87383737, "body": "@Shepmaster I removed the 4th case, since it&#39;s a bit further from the rest. The remaining cases are all accessing (reading or writing) a whole 32-bit word, even though we only have a reference into a part of it."}], "answers": [{"tags": [], "owner": {"reputation": 491, "user_id": 5282385, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2f909f7c0f578c26cc98852294a416cc?s=128&d=identicon&r=PG", "display_name": "Ralf Jung", "link": "https://stackoverflow.com/users/5282385/ralf-jung"}, "is_accepted": false, "score": 4, "last_activity_date": 1525853545, "last_edit_date": 1525853545, "creation_date": 1525813693, "answer_id": 50242288, "question_id": 50181283, "link": "https://stackoverflow.com/questions/50181283/does-reading-or-writing-a-whole-32-bit-word-even-though-we-only-have-a-referenc/50242288#50242288", "title": "Does reading or writing a whole 32-bit word, even though we only have a reference to a part of it, result in undefined behaviour?", "body": "<p>This is a very interesting question.\nThere are actually several issues with these functions, making them unsound (i.e., not safe to expose) for various formal reasons.\nAt the same time, I am unable to actually construct a problematic interaction between these functions and compiler optimizations.</p>\n\n<h3>Out-of-bounds accesses</h3>\n\n<p>I'd say all of these functions are unsound because they can access unallocated memory.  Each of them I can call with a <code>&amp;*Box::new(0u8)</code> or <code>&amp;mut *Box::new(0u8)</code>, resulting in out-of-bounds accesses, i.e. accesses beyond what was allocated using <code>malloc</code> (or whatever allocator).  Neither C nor LLVM permit such accesses.  (I'm using the heap because I find it easier to think about allocations there, but the same applies to the stack where every stack variable is really its own independent allocation.)</p>\n\n<p>Granted, the <a href=\"https://llvm.org/docs/LangRef.html\" rel=\"nofollow noreferrer\">LLVM language reference</a> doesn't actually define when a load has undefined behavior due to the access not being inside the object.  However, we can get a hint in the <a href=\"https://llvm.org/docs/LangRef.html#id1201\" rel=\"nofollow noreferrer\">documentation of <code>getlementptr inbounds</code></a>, which says</p>\n\n<blockquote>\n  <p>The in bounds addresses for an allocated object are all the addresses that point into the object, plus the address one byte past the end.</p>\n</blockquote>\n\n<p>I am fairly certain that being in bounds is a necessary but not sufficient requirement for actually using an address with load/store.</p>\n\n<p>Note that this is independent of what happens on the assembly level; LLVM will do optimizations based on a much higher-level memory model that argues in terms of allocated blocks (or \"objects\" as C calls them) and staying within the bounds of these blocks. \nC (and Rust) are not assembly, and it is not possible to use assembly-based reasoning on them.\nMost of the time it is possible to derive contradictions from assembly-based reasoning (see e.g. <a href=\"https://bugs.llvm.org/show_bug.cgi?id=34548\" rel=\"nofollow noreferrer\">this bug in LLVM</a> for a very subtle example: casting a pointer to an integer and back is <em>not</em> a NOP).\nThis time, however, the only examples I can come up with are fairly far-fetched: For example, with memory-mapped IO, even reads from a location could \"mean\" something to the underlying hardware, and there could be such a read-sensitive location sitting right next to the one that's passed into <code>read</code>.\nBut really I don't know much about this kind of embedded/driver development, so this may be entirely unrealistic.</p>\n\n<p>(EDIT: I should add that I am not an LLVM expert.  Probably the llvm-dev mailing list is a better place to determine if they are willing to commit to permitting such out-of-bounds accesses.)</p>\n\n<h3>Data races</h3>\n\n<p>There is another reason at least some of these functions are not sound: Concurrency.  You clearly already saw this coming, judging from the use of concurrent accesses.</p>\n\n<p>Both <code>read</code> and <code>read_vol</code> are definitely unsound under the concurrency semantics of <a href=\"https://concurrencyfreaks.blogspot.de/2013/02/the-new-memory-model-in-c11-and-c11.html\" rel=\"nofollow noreferrer\">C11</a>.  Imagine <code>x</code> is the first element of a <code>[u8]</code>, and another thread is writing to the second element at the same time as we execute <code>read</code>/<code>read_vol</code>.  Our read of the whole 32bit word overlaps with the other thread's write.  This is a classical \"data race\": Two threads accessing the same location at the same time, one access being a write, and one access not being atomic.  Under C11, any data race is UB so we are out. <a href=\"https://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\" rel=\"nofollow noreferrer\">LLVM</a> is slightly more permissive so both <code>read</code> and <code>read_val</code> are probably allowed, but <a href=\"https://doc.rust-lang.org/nomicon/atomics.html\" rel=\"nofollow noreferrer\">right now Rust declares that it uses the C11 model</a>.</p>\n\n<p>Also note that \"vol\" is a bad name (assuming you meant this as short-hand for \"volatile\") -- in C, <a href=\"https://stackoverflow.com/questions/8819095/concurrency-atomic-and-volatile-in-c11-memory-model\">atomicity has nothing to do with <code>volatile</code></a>!  It is literally impossible to write correct concurrent code when using volatile and not atomics.  Unfortunately, Java's <code>volatile</code> is about atomicity, but that's a very different <code>volatile</code> than the one in C.</p>\n\n<p>And finally, <code>write</code> also introduces a data race between an atomic read-modify-update and a non-atomic write in the other thread, so it is UB in C11 as well.  And this time it is also UB in LLVM: Another thread could be <em>reading</em> from one of the extra locations that <code>write</code> affects, so calling <code>write</code> would introduce a data race between our writing and the other thread's reading.  LLVM specifies that in this case, the read returns <code>undef</code>.  So, calling <code>write</code> can make safe accesses to the same location in other threads return <code>undef</code>, and subsequently trigger UB.</p>\n\n<h3>Do we have any examples of issues caused by these functions?</h3>\n\n<p>The frustrating part is, while I found multiple reasons to rule out your functions following the spec(s), there seems to be no good reason that these functions are ruled out!  The <code>read</code> and <code>read_vol</code> concurrency issues are fixed by LLVM's model (which however has other problems, compared to C11), but <code>write</code> is illegal in LLVM just because read-write data races make the read return <code>undef</code> -- and in this case we know we are writing the same value that was already stored in these other bytes! Couldn't LLVM just say that in this special case (writing the value that's already there), the read must return that value?  Probably yes, but this stuff is subtle enough that I would also not be surprised if that invalidates some obscure optimization.</p>\n\n<p>Moreover, at least on non-embedded platforms the out-of-bounds accesses done by <code>read</code> are unlikely to cause actual trouble.  I guess one could imagine a semantics which returns <code>undef</code> when reading an out-of-bounds byte that is guaranteed to sit on the same page as an in-bounds <code>byte</code>. But that would still leave <code>write</code> illegal, and that is a really tough one: <code>write</code> can only be allowed if the memory on these other locations is left absolutely unchanged.  There could be arbitrary data sitting there from other allocations, parts of the stack frame, whatever.  So somehow the formal model would have to let you read those other bytes, not allow you to gain anything by inspecting them, but also verify that you are not changing the bytes before writing them back with a CAS. I'm not aware of any model that would let you do that. But I thank you for bringing these nasty cases to my attention, it's always good to know that there is still plenty of stuff left to research in terms of memory models :)</p>\n\n<h3>Rust's aliasing rules</h3>\n\n<p>Finally, what you were probably wondering about is whether these functions violate any of the additional aliasing rules that Rust adds. The trouble is, we don't know -- these rules are <a href=\"https://internals.rust-lang.org/t/proposal-reboot-the-unsafe-code-guidelines-team-as-a-working-group/7307\" rel=\"nofollow noreferrer\">still under development</a>.  However, all the proposals I have seen so far would indeed rule out your functions: When you hold an <code>&amp;mut u8</code> (say, one that points right next to the one that's passed to <code>read</code>/<code>read_vol</code>/<code>write</code>), the aliasing rules provide a guarantee that <em>no access whatsoever</em> will happen to that byte by anyone but you.  So, your functions reading from memory that others could hold a <code>&amp;mut u8</code> to already makes them violate the aliasing rules.</p>\n\n<p>However, the motivation for these rules is to conform with the C11 concurrency model and LLVM's rules for memory access.  If LLVM declares something UB, we <em>have to</em> make it UB in Rust as well unless we are willing to change our codegen in a way that avoids the UB (and typically sacrifices performance). Moreover, given that Rust adopted the C11 concurrency model, the same holds true for that.  So for these cases, the aliasing rules really don't have any choice but make these accesses illegal.  We could revisit this once we have a more permissive memory model, but right now our hands are bound.</p>\n"}], "owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 177, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1525853545, "creation_date": 1525459017, "last_edit_date": 1525481776, "question_id": 50181283, "link": "https://stackoverflow.com/questions/50181283/does-reading-or-writing-a-whole-32-bit-word-even-though-we-only-have-a-referenc", "title": "Does reading or writing a whole 32-bit word, even though we only have a reference to a part of it, result in undefined behaviour?", "body": "<p>I'm trying to understand what exactly the Rust aliasing/memory model allows. In particular I'm interested in when accessing memory outside the range you have a reference to (which might be aliased by other code on the same or different threads) becomes undefined behaviour.</p>\n\n<p>The following examples all access memory outside what is ordinarily allowed, but in ways that would be safe if the compiler produced the obvious assembly code. In addition, I see little conflict potential with compiler optimization, but they might still violate strict aliasing rules of Rust or LLVM thus constituting undefined behavior.</p>\n\n<p>The operations are all properly aligned and thus cannot cross a cache-line or page boundary.</p>\n\n<ol>\n<li><p>Read the aligned 32-bit word surrounding the data we want to access and discard the parts outside of what we're allowed to read.</p>\n\n<p>Variants of this could be useful in SIMD code.</p>\n\n<pre><code>pub fn read(x: &amp;u8) -&gt; u8 {\n    let pb = x as *const u8;\n    let pw = ((pb as usize) &amp; !3) as *const u32;\n    let w = unsafe { *pw }.to_le();\n    (w &gt;&gt; ((pb as usize) &amp; 3) * 8) as u8\n}\n</code></pre></li>\n<li><p>Same as 1, but reads the 32-bit word using an <code>atomic_load</code> intrinsic.</p>\n\n<pre><code>pub fn read_vol(x: &amp;u8) -&gt; u8 {\n    let pb = x as *const u8;\n    let pw = ((pb as usize) &amp; !3) as *const AtomicU32;\n    let w = unsafe { (&amp;*pw).load(Ordering::Relaxed) }.to_le();\n    (w &gt;&gt; ((pb as usize) &amp; 3) * 8) as u8\n}\n</code></pre></li>\n<li><p>Replace the aligned 32-bit word containing the value we care about using CAS. It overwrites the parts outside what we're allowed to access with what's already in there, so it only affects the parts we're allowed to access.</p>\n\n<p>This could be useful to emulate small atomic types using bigger ones. I used <code>AtomicU32</code> for simplicity, in practice <code>AtomicUsize</code> is the interesting one.</p>\n\n<pre><code>pub fn write(x: &amp;mut u8, value:u8) {\n    let pb = x as *const u8;\n    let atom_w = unsafe { &amp;*(((pb as usize) &amp; !3) as *const AtomicU32) };\n    let mut old = atom_w.load(Ordering::Relaxed);\n    loop {\n        let shift = ((pb as usize) &amp; 3) * 8;\n        let new = u32::from_le((old.to_le() &amp; 0xFF_u32 &lt;&lt;shift)|((value as u32) &lt;&lt; shift));\n        match atom_w.compare_exchange_weak(old, new, Ordering::SeqCst, Ordering::Relaxed) {\n            Ok(_) =&gt; break,\n            Err(x) =&gt; old = x,\n        }\n    }\n}\n</code></pre></li>\n</ol>\n"}, {"tags": ["casting", "rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1525455153, "post_id": 50180229, "comment_id": 87377754, "body": "if you mean easy as &quot;zero cost&quot; you are very wrong ;) <code>u8</code> is not the same size than ... <code>usize</code> so I would not call that &quot;easy&quot; but more importantly, your question is suspect I believe your are doing something wrong. Can you include the context that lead you to ask this question ? I believe this would be more efficient to solve your real problem instead of give you a correct technical answer but you will probably use it wrongly."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525455327, "post_id": 50180229, "comment_id": 87377836, "body": "I believe this question is already answered by <a href=\"https://stackoverflow.com/q/33968870/155423\">Temporarily transmute &#91;u8&#93; to &#91;u16&#93;</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/50180229/edit\">edit</a> your question to explain how it&#39;s different. Otherwise, we can mark this as already answered."}], "owner": {"reputation": 2777, "user_id": 4852094, "user_type": "registered", "accept_rate": 68, "profile_image": "https://graph.facebook.com/10102767534136292/picture?type=large", "display_name": "Rob", "link": "https://stackoverflow.com/users/4852094/rob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 69, "favorite_count": 0, "closed_date": 1575988130, "answer_count": 0, "score": 2, "last_activity_date": 1525455615, "creation_date": 1525454726, "last_edit_date": 1525455615, "question_id": 50180229, "link": "https://stackoverflow.com/questions/50180229/how-do-i-cast-from-one-slice-type-to-another", "closed_reason": "Duplicate", "title": "How do I cast from one slice type to another?", "body": "<p>If I have an function that requires a slice of type <code>&amp;[usize]</code> but I have a slice of type <code>&amp;[u8]</code>, how do I cast from one type to the other? It seems like it should be easy to cast <code>u8</code> to <code>usize</code> but I'm not finding a simple solution.</p>\n\n<p>Something like:</p>\n\n<pre><code>use rand::{SeedableRng, StdRng};\n\n// seed = &amp;[1, 2, 3] with type u8\nlet rng: StdRng = SeedableRng::from_seed(seed);\n</code></pre>\n"}, {"tags": ["generics", "struct", "rust", "traits", "type-parameter"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1525454248, "post_id": 50180069, "comment_id": 87377301, "body": "You&#39;ve asked enough questions that you should know to include the <i>entire</i> error message without me needing to edit it in for you."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1525454814, "last_edit_date": 1525454814, "creation_date": 1525454422, "answer_id": 50180149, "question_id": 50180069, "link": "https://stackoverflow.com/questions/50180069/how-can-a-function-require-that-a-type-implement-a-trait-without-removing-the-ex/50180149#50180149", "title": "How can a function require that a type implement a trait without removing the existing trait bound?", "body": "<p>I'd encourage you to go back and reread <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em></a>. This is a free online book that the Rust community has created that covers a broad spectrum of the things you need to know to be a successful Rust programmer. </p>\n\n<p>In this case, the <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html\" rel=\"nofollow noreferrer\">chapter on traits</a> mentions this about <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html#trait-bounds\" rel=\"nofollow noreferrer\">trait bounds</a>:</p>\n\n<blockquote>\n  <p>We can specify multiple trait bounds on a generic type by using <code>+</code>. If we needed to be able to use display formatting on the type <code>T</code> in a function as well as the <code>summary</code> method, we can use the trait bounds <code>T: Summarizable + Display</code>. This means <code>T</code> can be any type that implements both <code>Summarizable</code> and <code>Display</code>.</p>\n</blockquote>\n\n<p>For your case:</p>\n\n<pre><code>fn main_func&lt;T: SrObject + Default&gt;() -&gt; Vec&lt;T&gt; {\n    (0..10).map(|_| T::default()).collect()\n}\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>fn main_func&lt;T&gt;() -&gt; Vec&lt;T&gt;\nwhere\n    T: SrObject + Default,\n{\n    (0..10).map(|_| T::default()).collect()\n}\n</code></pre>\n\n<p>Other changes to make it idiomatic:</p>\n\n<ul>\n<li>Don't specify the type of <code>v</code> when calling <code>Vec::new</code>; it will be inferred.</li>\n<li>Don't use an explicit <code>return</code> at the end of a function.</li>\n<li>Use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"nofollow noreferrer\"><code>Iterator::map</code></a> and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>Iterator::collect</code></a> to convert the iterator into a collection, instead of pushing elements by hand.</li>\n</ul>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/46793494/155423\">Difference between &lt;T: Trait&gt; and where T: Trait</a></li>\n</ul>\n"}], "owner": {"reputation": 897, "user_id": 4528728, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/48b7aeab16c3e50657c88ac3542a502b?s=128&d=identicon&r=PG&f=1", "display_name": "Slim Shady", "link": "https://stackoverflow.com/users/4528728/slim-shady"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 50180149, "answer_count": 1, "score": 0, "last_activity_date": 1525454814, "creation_date": 1525454064, "last_edit_date": 1525454224, "question_id": 50180069, "link": "https://stackoverflow.com/questions/50180069/how-can-a-function-require-that-a-type-implement-a-trait-without-removing-the-ex", "title": "How can a function require that a type implement a trait without removing the existing trait bound?", "body": "<p>I'm trying to have a <code>main_func</code> that returns a vector of a type <code>T</code> structs with a <code>SrObject</code> trait</p>\n\n<pre><code>struct TestA {\n    value: u8,\n}\n\npub trait SrObject {\n    fn myfunc(&amp;mut self);\n}\nimpl SrObject for TestA {\n    fn myfunc(&amp;mut self) {\n        unimplemented!();\n    }\n}\nimpl Default for TestA {\n    fn default() -&gt; TestA {\n        TestA { value: 3u8 }\n    }\n}\n\nfn main_func&lt;T: SrObject&gt;(t: T) -&gt; Vec&lt;T&gt; {\n    let mut v = Vec::&lt;T&gt;::new();\n    for i in 0..10 {\n        v.push(T::default());\n        //v[i].myfunc();\n    }\n    return v;\n}\n</code></pre>\n\n<p>it gives:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no function or associated item named `default` found for type `T` in the current scope\n  --&gt; src/main.rs:22:16\n   |\n22 |         v.push(T::default());\n   |                ^^^^^^^^^^ function or associated item not found in `T`\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `default`, perhaps you need to implement it:\n           candidate #1: `std::default::Default`\n</code></pre>\n\n<p>I understand that I don't have the <code>Default</code> trait in fn <code>main_func&lt;T: SrObject&gt;</code>, but how can I achieve this without removing the <code>SrObject</code> trait?</p>\n"}, {"tags": ["hashmap", "rust", "gdb"], "answers": [{"comments": [{"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 1, "creation_date": 1525535290, "post_id": 50189122, "comment_id": 87399348, "body": "Is there any way to see the values at all? That issue thread mentions you can print the memory after PhantomData marker... My gdb-guy is a bit rusty. :-) Does anyone know how to do that?"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 4, "last_activity_date": 1525528942, "last_edit_date": 1525528942, "creation_date": 1525521178, "answer_id": 50189122, "question_id": 50179667, "link": "https://stackoverflow.com/questions/50179667/how-do-i-pretty-print-a-rust-hashmap-in-gdb/50189122#50189122", "title": "How do I pretty-print a Rust HashMap in GDB?", "body": "<p>At the moment it is not possible to pretty-print key-values items for an <code>HashMap</code>.</p>\n\n<p>There is <a href=\"https://github.com/rust-lang/rust/issues/41082\" rel=\"nofollow noreferrer\">an open issue requesting this feature</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1534519922, "post_id": 51889369, "comment_id": 90748236, "body": "@fukatani: First of all, thank you for contributing the pretty printers. Regarding asking to remove a downvote, it&#39;s certainly possible, however it&#39;s unlikely to succeed unless you can convince the downvoter that you are right OR fix whatever flaw of the answer they perceived to be worth a downvote. I would note that beyond the offending comment here; there&#39;s the issue that the OP is asking about <code>HashMap</code> and you are replying for <code>BTreeMap</code>; so while it&#39;s useful information, it seems only marginally related to the issue at hand."}, {"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 0, "creation_date": 1534534866, "post_id": 51889369, "comment_id": 90754927, "body": "@fukatani - thank you, this is good news. Looks like it is merged already. May be this will help me to figure out the one for HashMap!"}, {"owner": {"reputation": 170, "user_id": 6085922, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1a177e3574c200dbb9307586be3e930?s=128&d=identicon&r=PG", "display_name": "fukatani", "link": "https://stackoverflow.com/users/6085922/fukatani"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1534572929, "post_id": 51889369, "comment_id": 90762212, "body": "@Shepmaster I tried, but <code>HashMap</code> is difficult for me. I think that one of the reasonable methods at the current version is to use BTreeMap only for debugging. Forgive me."}, {"owner": {"reputation": 170, "user_id": 6085922, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1a177e3574c200dbb9307586be3e930?s=128&d=identicon&r=PG", "display_name": "fukatani", "link": "https://stackoverflow.com/users/6085922/fukatani"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1534573301, "post_id": 51889369, "comment_id": 90762276, "body": "@MatthieuM. So should I remove my answer?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1534586420, "post_id": 51889369, "comment_id": 90765132, "body": "@fukatani: I am afraid it would be for the best. What you could do, if you wish, is create another question named &quot;How to pretty-print a BTreeMap in gdb?&quot; which shows the current situation, then self-answer it with a link to your patch and a demonstration of the output after the patch. (When asking, there&#39;s a box to tick to so you can post both question and answer in one go). This way, people looking to print their BTreeMap would be aware they can upgrade to get it."}, {"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1534632776, "post_id": 51889369, "comment_id": 90776358, "body": "@fukatani -- if you end up posting this in a separate answer -- leave a link to this one. I am sure that people who are searching for this will be interested in both <code>BTreeMap</code> and <code>HashMap</code>. I know I am -- and i found your answer very useful. @Shepmaster -- for <code>HashMap</code> I couldn&#39;t figure out to how even see the values &quot;by hand&quot;, let alone pretty print them. <code>marker = PhantomData&lt;(i32, &amp;str)&gt;</code> is probably the key to this, but for the life of me I can&#39;t locate where the pointers for keys and values are..."}, {"owner": {"reputation": 170, "user_id": 6085922, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1a177e3574c200dbb9307586be3e930?s=128&d=identicon&r=PG", "display_name": "fukatani", "link": "https://stackoverflow.com/users/6085922/fukatani"}, "edited": false, "score": 0, "creation_date": 1534660279, "post_id": 51889369, "comment_id": 90780165, "body": "I already removed performance description and showed my answer is strongly related to question. But unfortunately, downvote continues.  I do not have the energy to separate question. I&#39;m tired of the stackoverflow and rust community so I&#39;m leaving. It does not seem to be suitable for me. Discussion is continuing, so I&#39;ll leave this answer as it is. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1534723496, "post_id": 51889369, "comment_id": 90795108, "body": "@fukatani Please don&#39;t let us pedantic people here on Stack Overflow detract from the greater Rust community. Stack Overflow has specific standards that we seek to uphold to make the Q&amp;A as useful as possible, and these guidelines do not fit everyone&#39;s personality. However, Rust is bigger than just Stack Overflow and has many other avenues like the user&#39;s forum, IRC, Discord, etc. You may find one or more of these more suitable to your own specific style. FWIW, I also thank you for adding that support, even though I use LLDB instead of GDB ;-)"}], "tags": [], "owner": {"reputation": 170, "user_id": 6085922, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1a177e3574c200dbb9307586be3e930?s=128&d=identicon&r=PG", "display_name": "fukatani", "link": "https://stackoverflow.com/users/6085922/fukatani"}, "is_accepted": false, "score": 2, "last_activity_date": 1534572644, "last_edit_date": 1534572644, "creation_date": 1534486423, "answer_id": 51889369, "question_id": 50179667, "link": "https://stackoverflow.com/questions/50179667/how-do-i-pretty-print-a-rust-hashmap-in-gdb/51889369#51889369", "title": "How do I pretty-print a Rust HashMap in GDB?", "body": "<p>Pretty printing a <code>BTreeMap</code> will be enabled if <a href=\"https://github.com/rust-lang/rust/pull/53357\" rel=\"nofollow noreferrer\">this PR is merged</a>.</p>\n\n<p>Both BTreeMap and HashMap APIs are similar. So, you may be able to replace <code>HashMap</code> and <code>BTreeMap</code> for debugging.</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 7129461, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/12272764c5fa918cb211dac95a8c747d?s=128&d=identicon&r=PG&f=1", "display_name": "tkehan", "link": "https://stackoverflow.com/users/7129461/tkehan"}, "is_accepted": false, "score": 0, "last_activity_date": 1611414440, "creation_date": 1611414440, "answer_id": 65860760, "question_id": 50179667, "link": "https://stackoverflow.com/questions/50179667/how-do-i-pretty-print-a-rust-hashmap-in-gdb/65860760#65860760", "title": "How do I pretty-print a Rust HashMap in GDB?", "body": "<p>you can use rust-gdb/rust-lldb, it can pretty-print key-values items for an HashMap.</p>\n"}], "owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1965, "favorite_count": 1, "accepted_answer_id": 50189122, "answer_count": 3, "score": 3, "last_activity_date": 1611414440, "creation_date": 1525452230, "last_edit_date": 1525454124, "question_id": 50179667, "link": "https://stackoverflow.com/questions/50179667/how-do-i-pretty-print-a-rust-hashmap-in-gdb", "title": "How do I pretty-print a Rust HashMap in GDB?", "body": "<p>Here is a simple Rust example with a <code>Vec</code> and <code>HashMap</code> that I am running in GDB:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let v = vec![\"Mon\", \"Tue\", \"Wed\"];\n    println!(\"{:?}\", v);\n\n    let mut h = HashMap::new();\n    h.insert(1,\"Jan\");\n    h.insert(2,\"Feb\");\n    h.insert(3,\"Mar\");\n    h.insert(4,\"Apr\");\n    println!(\"{:?}\", h);\n}\n</code></pre>\n\n<p>When I view the <code>Vec</code> it is pretty-printed, while the <code>HashMap</code> isn't:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>bash$ rust-gdb target/debug/test_hashmap\nGNU gdb (GDB) 8.1\nCopyright (C) 2018 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-pc-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n&lt;http://www.gnu.org/software/gdb/bugs/&gt;.\nFind the GDB manual and other documentation resources online at:\n&lt;http://www.gnu.org/software/gdb/documentation/&gt;.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from target/debug/test_hashmap...done.\n(gdb) b 12\nBreakpoint 1 at 0xa056: file src/main.rs, line 12.\n(gdb) r\nStarting program: /home/john/proj/test_hashmap/target/debug/test_hashmap \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/usr/lib/libthread_db.so.1\".\n[\"Mon\", \"Tue\", \"Wed\"]\n\nBreakpoint 1, test_hashmap::main () at src/main.rs:12\n12          println!(\"{:?}\", h);\n(gdb) p v\n$1 = Vec&lt;&amp;str&gt;(len: 3, cap: 3) = {\"Mon\", \"Tue\", \"Wed\"}\n(gdb) p h\n$2 = HashMap&lt;i32, &amp;str, std::collections::hash::map::RandomState&gt; = {hash_builder = RandomState = {k0 = 12919411587537124140, \n    k1 = 836420561220520453}, table = RawTable&lt;i32, &amp;str&gt; = {capacity_mask = 31, size = 4, hashes = TaggedHashUintPtr = {\n      Unique&lt;usize&gt; = {pointer = NonZero&lt;*const usize&gt; = {0x7ffff6c1c400}, _marker = PhantomData&lt;usize&gt;}}, \n    marker = PhantomData&lt;(i32, &amp;str)&gt;}, resize_policy = DefaultResizePolicy}\n(gdb) info pretty-printer\nglobal pretty-printers:\n  builtin\n    mpx_bound128\n  objfile /home/john/proj/test_hashmap/target/debug/test_hashmap pretty-printers:\n  rust_pretty_printer_lookup_function\n(gdb) n\n{1: \"Jan\", 4: \"Apr\", 3: \"Mar\", 2: \"Feb\"}\n13      }\n(gdb) \n</code></pre>\n\n<p>The program sees the <code>HashMap</code> (and prints its values ok), but I can't see those inside GDB. The Rust pretty printer seems to be enabled because <code>Vec</code> is printed out just fine.</p>\n\n<p>How can I get the <code>HashMap</code> keys and values in regular GDB? </p>\n"}, {"tags": ["string", "rust", "stack", "heap"], "comments": [{"owner": {"reputation": 47, "user_id": 6646950, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f1d947c9595b7a8c19ec2a7beb15fed5?s=128&d=identicon&r=PG&f=1", "display_name": "krabbos", "link": "https://stackoverflow.com/users/6646950/krabbos"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1525434751, "post_id": 50174070, "comment_id": 87365413, "body": "my question is a little different"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1525435122, "post_id": 50174070, "comment_id": 87365643, "body": "@krabbos Your question is phrased a bit differently, but the answer is: <i>one creates a <code>String</code> and the other creates a <code>&amp;&#39;static str</code></i>. Which then leaves the question: <i>what&#39;s the difference?</i>"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525438203, "post_id": 50174070, "comment_id": 87367733, "body": "Shades of <a href=\"https://stackoverflow.com/q/28587698/3650362\">What&#39;s the difference between placing \u201cmut\u201d before a variable name and after the \u201c:\u201d?</a>. <code>let mut x = &quot;a string&quot;</code> doesn&#39;t make <code>x</code> a <code>&amp;&#39;static mut str</code>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1525448453, "post_id": 50174070, "comment_id": 87374432, "body": "Note: duplicate don&#39;t mean the same question but the same answer..."}, {"owner": {"reputation": 445, "user_id": 1147211, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c133f3fd48e1fd4d0e60d96bffc8b3c?s=128&d=identicon&r=PG", "display_name": "rokob", "link": "https://stackoverflow.com/users/1147211/rokob"}, "edited": false, "score": 0, "creation_date": 1525448684, "post_id": 50174070, "comment_id": 87374569, "body": "<code>let mut x = &quot;a string&quot;;</code>  declares a mutable variable that holds a borrow to immutable content <code>&amp;str</code>. For example, the following will compile:      <code>let mut x = &quot;a string&quot;; x = &quot;hi&quot;;</code>  However, if you remove the <code>mut</code> you will get the error  &quot;cannot assign twice to immutable variable <code>x</code>&quot;  The type <code>&amp;mut str</code> needs to have something with a mutable backing like <code>String</code>. For example notice that in the docs <a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/primitive.str.html</a> all methods that take <code>&amp;mut self</code> have examples using <code>String</code>."}], "owner": {"reputation": 47, "user_id": 6646950, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f1d947c9595b7a8c19ec2a7beb15fed5?s=128&d=identicon&r=PG&f=1", "display_name": "krabbos", "link": "https://stackoverflow.com/users/6646950/krabbos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 140, "favorite_count": 0, "closed_date": 1525448487, "answer_count": 0, "score": 1, "last_activity_date": 1525434026, "creation_date": 1525434026, "question_id": 50174070, "link": "https://stackoverflow.com/questions/50174070/what-is-the-difference-between-stringfrom-and-mut-x-some-string-in-rust", "closed_reason": "Duplicate", "title": "what is the difference between String::from and mut x = &quot;some string&quot; in rust", "body": "<p>my understanding is that declaring a string variable like the following</p>\n\n<pre><code>let x = \"a string\"\n</code></pre>\n\n<p>allocates memory for immutable x on the stack</p>\n\n<p>while declaring x like this</p>\n\n<pre><code>let x = String::from(\"a string\");\n</code></pre>\n\n<p>does the same but on the heap. And this way we create a mutable string variable.</p>\n\n<p>My question is this, is there any difference between the following:</p>\n\n<pre><code>let mut x = \"a string\";\n</code></pre>\n\n<p>and</p>\n\n<pre><code>let x = String::from(\"a string\");\n</code></pre>\n\n<p>doesn't this mean that in both cases x is a mutable string variable?\ncan I assign x to another variable as in <code>\"y = x\"</code>?</p>\n"}, {"tags": ["rust", "rust-actix"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525457074, "post_id": 50165750, "comment_id": 87378663, "body": "As currently posed, this question is off-topic: <i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and <b>the shortest code necessary to reproduce it in the question itself</b>.</i>. You haven&#39;t provided the definition of <code>FooBarHandler</code>, you haven&#39;t shown what crates (and their versions!) you are importing, etc. In fact, your code <b>isn&#39;t syntactically valid</b>."}], "answers": [{"comments": [{"owner": {"reputation": 621, "user_id": 3241417, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2b46f395ee2c87e518def980db61256?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/3241417/alex"}, "edited": false, "score": 0, "creation_date": 1525397995, "post_id": 50165924, "comment_id": 87349811, "body": "How should I avoid this? I tried adding <code>let baz = self.baz.clone();</code> before the <code>and_then</code> future, and then replacing <code>self.baz</code> with <code>baz</code>, but that gave the following error:  <code>error[E0373]: closure may outlive the current function, but it borrows </code>baz<code>, which is owned by the current function</code>"}, {"owner": {"reputation": 154, "user_id": 7526741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f9e7fc59fd903158f3127f1384139cf0?s=128&d=identicon&r=PG", "display_name": "Nikolay Kim", "link": "https://stackoverflow.com/users/7526741/nikolay-kim"}, "reply_to_user": {"reputation": 621, "user_id": 3241417, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2b46f395ee2c87e518def980db61256?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/3241417/alex"}, "edited": false, "score": 1, "creation_date": 1525398430, "post_id": 50165924, "comment_id": 87349906, "body": "Do clone and then move it to the closure, <code>.and_then(move |..| {...})</code>"}, {"owner": {"reputation": 621, "user_id": 3241417, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2b46f395ee2c87e518def980db61256?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/3241417/alex"}, "edited": false, "score": 0, "creation_date": 1525398799, "post_id": 50165924, "comment_id": 87349987, "body": "I tried that, but I get these errors: <code>The parameter type &#39;S&#39; may not live long enough</code>. The compiler suggests adding an explicit lifetime bound- <code>S : &#39;static</code>, but that results in errors about the trait not being able to be shared between threads safely."}], "tags": [], "owner": {"reputation": 154, "user_id": 7526741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f9e7fc59fd903158f3127f1384139cf0?s=128&d=identicon&r=PG", "display_name": "Nikolay Kim", "link": "https://stackoverflow.com/users/7526741/nikolay-kim"}, "is_accepted": false, "score": 2, "last_activity_date": 1525397701, "creation_date": 1525397701, "answer_id": 50165924, "question_id": 50165750, "link": "https://stackoverflow.com/questions/50165750/error-e0477-the-type-does-not-fulfill-the-required-lifetime-with-actix-web-ha/50165924#50165924", "title": "&quot;Error E0477: the type does not fulfill the required lifetime&quot; with Actix-Web handlers", "body": "<p>You use <code>self</code> inside your .and_then future, which violates lifetime requirement.</p>\n"}], "owner": {"reputation": 621, "user_id": 3241417, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d2b46f395ee2c87e518def980db61256?s=128&d=identicon&r=PG&f=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/3241417/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 392, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1525397701, "creation_date": 1525396085, "question_id": 50165750, "link": "https://stackoverflow.com/questions/50165750/error-e0477-the-type-does-not-fulfill-the-required-lifetime-with-actix-web-ha", "title": "&quot;Error E0477: the type does not fulfill the required lifetime&quot; with Actix-Web handlers", "body": "<p>I am trying to implement an HTTP request handler using Actix-Web. Here is the relevant part of my code:</p>\n\n<pre><code>impl&lt;S&gt; Handler&lt;S&gt; for FooBarHandler {\n    type Result = Box&lt;Future&lt;Item = HttpResponse, Error = Error&gt;&gt;;\n\n    fn handle(&amp;mut self, req : HttpRequest&lt;S&gt;) -&gt; Self::Result {\n        req.json().from_err().and_then(|foo : Foo|\n            self.baz.qux(foo);\n            Ok(HttpResponse::Ok().finish())\n        }).responder()\n    }\n}\n</code></pre>\n\n<p>However, I receive this error message:</p>\n\n<pre><code>error[E0477]: the type  `mymod::futures::AndThen&lt;mymod::futures::future::FromErr&lt;mymod::actix_web::dev::JsonBody&lt;mymod::actix_web::HttpRequest&lt;S&gt;, mymod::Foo&gt;, mymod::actix_web::Error&gt;, std::result::Result&lt;mymod::actix_web::HttpResponse, mymod::actix_web::Error&gt;, [closure@src/mymod.rs:53:40: 56:10 self:&amp;&amp;mut mymod::FooBarHandler]&gt;` does not fulfill the required lifetime\n  --&gt; src/mymod.rs:56:12\n   |\n56 |         }).responder()\n   |            ^^^^^^^^^\n   |\n   = note: type must satisfy the static lifetime\n</code></pre>\n\n<p>I do not understand this error message at all. The code is practically identical to <a href=\"https://github.com/actix/examples/blob/master/json/src/main.rs\" rel=\"nofollow noreferrer\">this example</a>, which does not contain any lifetime annotations.</p>\n"}, {"tags": ["struct", "rust", "encapsulation", "unit-type"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1525376531, "post_id": 50162597, "comment_id": 87343344, "body": "There is no mention of unit type preferences in the <a href=\"https://rust-lang-nursery.github.io/api-guidelines/\" rel=\"nofollow noreferrer\">Rust API guidelines</a>. I&#39;m afraid that there is no objective answer to this. :-( You may wish to send this over to users.rust-lang.org or similar venues."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1525377009, "post_id": 50162597, "comment_id": 87343583, "body": "@E_net4 So you are saying that there is no difference, and it comes down to preference? (In that case, unit structs having dedicated syntax for this purpose makes <code>D</code> the most obvious choice)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1525377593, "post_id": 50162597, "comment_id": 87343853, "body": "I am implying that it&#39;s mostly case dependant. The most obvious choice isn&#39;t always the best one. Composition of unit values also make a unit value. It also depends on whether creating them from outside the crate is allowed in your public API."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1525377887, "post_id": 50162597, "comment_id": 87343968, "body": "@E_net4 That sounds like an answer if some of them allow creating values from outside the crate and others don&#39;t. That&#39;s exactly the part I couldn&#39;t figure out."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1525382270, "post_id": 50162597, "comment_id": 87345931, "body": "You ask two questions: &quot;What are the differences?&quot; and &quot;When would I use them?&quot; One of these is on-topic on SO; the other is not. If you stick to the on-topic one, you&#39;ll probably get an answer."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1525382980, "post_id": 50162597, "comment_id": 87346211, "body": "@trentcl I didn&#39;t mean to ask &quot;<i>Which should I prefer if there are no differences?</i>&quot;, sorry - that&#39;s clearly offtopic indeed. Edited. Assuming there are differences, I was looking for the scenarios where those differences matter. I hope it&#39;s not considered too broad."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1525416895, "post_id": 50162597, "comment_id": 87355234, "body": "I can think of a few more cases off the top of my head. <code>struct A { _marker: PhantomData }</code> is also a zero-sized struct, <code>struct A&lt;T&gt; { t: T }</code> is a zero-sized struct if <code>T</code> is zero-sized, <code>enum A {}</code> (a no-variant <code>enum</code>) is also zero-sized, ..."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1525434584, "post_id": 50162597, "comment_id": 87365300, "body": "@MatthieuM. <code>PhantomData</code> has a clear purpose, I know when to use that. A no-variant enum is like <code>!</code> (void) not <code>()</code> (unit), no value can exist at all."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1525438630, "post_id": 50162597, "comment_id": 87368011, "body": "@Bergi: Good point on the no-variant :)"}, {"owner": {"reputation": 995, "user_id": 7497172, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7747b8182794646b8bb276bab1e765e9?s=128&d=identicon&r=PG&f=1", "display_name": "hvertous", "link": "https://stackoverflow.com/users/7497172/hvertous"}, "edited": false, "score": 0, "creation_date": 1608118791, "post_id": 50162597, "comment_id": 115483533, "body": "since &quot;unit type&quot; is just a tuple with no fields, shouldn&#39;t the &quot;unit struct&quot; be rather <code>struct E();</code> than <code>struct E;</code> ? That would make more sense."}, {"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "reply_to_user": {"reputation": 995, "user_id": 7497172, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7747b8182794646b8bb276bab1e765e9?s=128&d=identicon&r=PG&f=1", "display_name": "hvertous", "link": "https://stackoverflow.com/users/7497172/hvertous"}, "edited": false, "score": 0, "creation_date": 1608122881, "post_id": 50162597, "comment_id": 115485313, "body": "@hvertous <a href=\"https://doc.rust-lang.org/stable/reference/items/structs.html\" rel=\"nofollow noreferrer\">The reference</a> calls <code>struct E;</code> a &quot;<i>unit-like struct</i>&quot;."}, {"owner": {"reputation": 995, "user_id": 7497172, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7747b8182794646b8bb276bab1e765e9?s=128&d=identicon&r=PG&f=1", "display_name": "hvertous", "link": "https://stackoverflow.com/users/7497172/hvertous"}, "edited": false, "score": 0, "creation_date": 1608220104, "post_id": 50162597, "comment_id": 115521866, "body": "@Bergi yes, I know, I was wondering why is that"}], "answers": [{"comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 2, "creation_date": 1525445221, "post_id": 50170328, "comment_id": 87372432, "body": "So most of these exist just because generic code could end up with them, not because they have different functionality? I guess I was confused because <a href=\"https://github.com/DoumanAsh/stm32l4x6_hal/blob/19f6233ef04e549825a3851e25e5829c253a5149/src/rcc/mod.rs#L65\" rel=\"nofollow noreferrer\">here</a> <code>struct C(());</code> was used directly while <a href=\"https://github.com/DoumanAsh/stm32l4x6_hal/blob/19f6233ef04e549825a3851e25e5829c253a5149/src/gpio/mod.rs#L17-L68\" rel=\"nofollow noreferrer\">in other places</a> in the same codebase <code>struct A;</code> was used."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1525450568, "post_id": 50170328, "comment_id": 87375585, "body": "@trentcl provides another nice use case in his answer."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 7, "last_activity_date": 1525421840, "creation_date": 1525421840, "answer_id": 50170328, "question_id": 50162597, "link": "https://stackoverflow.com/questions/50162597/what-are-the-differences-between-the-multiple-ways-to-create-zero-sized-structs/50170328#50170328", "title": "What are the differences between the multiple ways to create zero-sized structs?", "body": "<pre><code>struct D; // unit struct\n</code></pre>\n\n<p>This is the usual way for people to write a zero-sized <code>struct</code>.</p>\n\n<pre><code>struct A{} // empty struct / empty braced struct\nstruct B(); // empty tuple struct\n</code></pre>\n\n<p>These are just special cases of basic <code>struct</code> and tuple <code>struct</code> which happen to have no parameters. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\" rel=\"noreferrer\">RFC 1506</a> explains the rational to allow those (they didn't used to):</p>\n\n<blockquote>\n  <p>Permit tuple structs and tuple variants with 0 fields. This restriction is artificial and can be lifted trivially. Macro writers dealing with tuple structs/variants will be happy to get rid of this one special case.</p>\n</blockquote>\n\n<p>As such, they could easily be generated by macros, but people will rarely write those on their own.</p>\n\n<pre><code>struct C(()); // unit-valued tuple struct\n</code></pre>\n\n<p>This is another special case of tuple <code>struct</code>. In Rust, <code>()</code> is a type just like any other type, so <code>struct C(());</code> isn't much different from <code>struct E(u32);</code>. While the type itself isn't very useful, forbidding it would make yet another special case that would need to be handled in macros or generics (<code>struct F&lt;T&gt;(T)</code> can of course be instantiated as <code>F&lt;()&gt;</code>).</p>\n\n<p>Note that there are many other ways to have empty types in Rust. Eg. it is possible to have a function return <code>Result&lt;(), !&gt;</code> to indicate that it doesn't produce a value, and cannot fail. While you might think that returning <code>()</code> in that case would be better, you might <em>have</em> to do that if you implement a trait that dictates you to return <code>Result&lt;T, E&gt;</code> but lets you choose <code>T = ()</code> and <code>E = !</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1525451128, "post_id": 50178953, "comment_id": 87375896, "body": "Thanks, I think this is what I was looking for. Is there any way to make the constructor of a struct public?"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525454061, "post_id": 50178953, "comment_id": 87377221, "body": "It makes sense that a <code>Box</code> should not be manually constructed, because it needs to place data on the heap. But what is a practical use case of a public zero-sized struct with private constructor?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1525488991, "post_id": 50178953, "comment_id": 87387689, "body": "@kazemakase I knew someone would ask, but I didn&#39;t have a use case in mind. The book suggests <a href=\"https://doc.rust-lang.org/book/first-edition/ffi.html\" rel=\"nofollow noreferrer\">using such structs as pointer targets in FFI</a> (although they use <code>[u8; 0]</code> instead of <code>()</code> for unclear reasons). I can also imagine using a struct like this to control access to a global resource, through some combination of compile time and runtime enforcement... something like <code>lazy_static</code> does but with extra requirements. Maybe you can think of something better?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "edited": false, "score": 0, "creation_date": 1525489033, "post_id": 50178953, "comment_id": 87387701, "body": "@Bergi Sure, by marking all its members <code>pub</code>. I have added this information to the answer."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 10, "last_activity_date": 1604343709, "last_edit_date": 1604343709, "creation_date": 1525449616, "answer_id": 50178953, "question_id": 50162597, "link": "https://stackoverflow.com/questions/50162597/what-are-the-differences-between-the-multiple-ways-to-create-zero-sized-structs/50178953#50178953", "title": "What are the differences between the multiple ways to create zero-sized structs?", "body": "<p>There are only two functional differences between these four definitions (and a fifth possibility I'll mention in a minute):</p>\n<ol>\n<li>Syntax (the most obvious). <a href=\"https://stackoverflow.com/a/50170328/3650362\">mcarton's answer</a> goes into more detail.</li>\n<li>When the struct is marked <code>pub</code>, whether its <a href=\"https://doc.rust-lang.org/nomicon/constructors.html\" rel=\"nofollow noreferrer\">constructor</a> (also called <a href=\"http://words.steveklabnik.com/structure-literals-vs-constructors-in-rust\" rel=\"nofollow noreferrer\"><code>struct</code> literal syntax</a>) is usable outside the module it's defined in.</li>\n</ol>\n<p>The only one of your examples that is not directly constructible from outside the current module is <code>C</code>. If you try to do this, you will get an error:</p>\n<pre><code>mod stuff {\n    pub struct C(());\n}\nlet _c = stuff::C(());  // error[E0603]: tuple struct `C` is private\n</code></pre>\n<p>This happens because the field is not marked <code>pub</code>; if you declare <code>C</code> as <code>pub struct C(pub ())</code>, the error goes away.</p>\n<p>There's another possibility you didn't mention that gives a marginally more descriptive error message: a normal struct, with a zero-sized non-<code>pub</code> member.</p>\n<pre><code>mod stuff {\n    pub struct E {\n        _dummy: (),\n    }\n}\nlet _e = stuff::E { _dummy: () };  // error[E0451]: field `_dummy` of struct `main::stuff::E` is private\n</code></pre>\n<p>(Again, you can make the <code>_dummy</code> field available outside of the module by declaring it with <code>pub</code>.)</p>\n<p>Since <code>E</code>'s constructor is only usable inside the <code>stuff</code> module, <code>stuff</code> has exclusive control over when and how values of <code>E</code> are created. Many structs in the standard library take advantage of this, like <code>Box</code> (to take an obvious example). Zero-sized types work in exactly the same way; in fact, from outside the module it's defined in, the only way you would know that an opaque type is zero-sized is by calling <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"nofollow noreferrer\"><code>mem::size_of</code></a>.</p>\n<h2>See also</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/64651511/3650362\">What is an idiomatic way to create a zero-sized struct that can&#39;t be instantiated outside its crate?</a></li>\n<li><a href=\"https://stackoverflow.com/q/63338208/3650362\">Why define a struct with single private field of unit type?</a></li>\n</ul>\n"}], "owner": {"reputation": 507143, "user_id": 1048572, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/7f2c4de95e8f4f8f5a71c3aaf0ed312a?s=128&d=identicon&r=PG", "display_name": "Bergi", "link": "https://stackoverflow.com/users/1048572/bergi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 2, "accepted_answer_id": 50178953, "answer_count": 2, "score": 17, "last_activity_date": 1604343709, "creation_date": 1525375880, "last_edit_date": 1525384935, "question_id": 50162597, "link": "https://stackoverflow.com/questions/50162597/what-are-the-differences-between-the-multiple-ways-to-create-zero-sized-structs", "title": "What are the differences between the multiple ways to create zero-sized structs?", "body": "<p>I found four different ways to create a <code>struct</code> with no data:</p>\n\n<ul>\n<li><pre><code>struct A{} // empty struct / empty braced struct\n</code></pre></li>\n<li><pre><code>struct B(); // empty tuple struct\n</code></pre></li>\n<li><pre><code>struct C(()); // unit-valued tuple struct\n</code></pre></li>\n<li><pre><code>struct D; // unit struct\n</code></pre></li>\n</ul>\n\n<p>(I'm leaving arbitrarily nested tuples that contain only <code>()</code>s and single-variant <code>enum</code> declarations out of the question, as I understand why those shouldn't be used).</p>\n\n<p><strong>What are the differences</strong> between these four declarations? Would I use them for specific purposes, or are they interchangeable?</p>\n\n<p>The book and the reference were surprisingly unhelpful. I did find <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\" rel=\"noreferrer\">this accepted RFC (<em>clarified_adt_kinds</em>)</a> which goes into the differences a bit, namely that the unit struct also declares a constant value <code>D</code> and that the tuple structs also declare constructors <code>B()</code> and <code>C(_: ())</code>. However it doesn't offer a design guideline on why to use which.</p>\n\n<p>My guess would be that when I export them with <code>pub</code>, there are differences in which kinds can actually be constructed outside of my module, but I found no conclusive documentation about that.</p>\n"}, {"tags": ["rust", "benchmarking", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1525372825, "last_edit_date": 1525372825, "creation_date": 1525372426, "answer_id": 50161785, "question_id": 50160101, "link": "https://stackoverflow.com/questions/50160101/how-do-i-execute-cargo-bench-on-a-per-file-basis/50161785#50161785", "title": "How do I execute `cargo bench` on a per-file basis?", "body": "<p>There is no direct \"run the tests contained in this file on disk\" option. The help for <code>cargo bench</code> says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo bench --help\nExecute all benchmarks of a local package\n\nUsage:\n    cargo bench [options] [BENCHNAME] [--] [&lt;args&gt;...]\n\nOptions:\n    BENCHNAME                    If specified, only run benches containing this string in their names\n</code></pre>\n\n<p>Additionally, files correspond to Rust modules, and modules are part of the test name.</p>\n\n<p>You can combine these two things together and use <code>cargo bench my_file_slash_module_name</code> to restrict the tests that are run. In your specific case:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo bench p002\n</code></pre>\n\n<p>If you happen to have other tests or modules that contain this same substring, you can sometimes get away by adding the colons:</p>\n\n<pre><code>cargo bench p002::\n</code></pre>\n"}], "owner": {"reputation": 1598, "user_id": 3216056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eea647c52a709c187d089c8512d4b3c2?s=128&d=identicon&r=PG&f=1", "display_name": "piercebot", "link": "https://stackoverflow.com/users/3216056/piercebot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1322, "favorite_count": 0, "accepted_answer_id": 50161785, "answer_count": 1, "score": 2, "last_activity_date": 1525372825, "creation_date": 1525365916, "last_edit_date": 1525372473, "question_id": 50160101, "link": "https://stackoverflow.com/questions/50160101/how-do-i-execute-cargo-bench-on-a-per-file-basis", "title": "How do I execute `cargo bench` on a per-file basis?", "body": "<p>I'm working through <a href=\"https://projecteuler.net\" rel=\"nofollow noreferrer\">Project Euler</a> problems, and I have each problem in a different file.  As I try different approaches to each problem, I create a series of benchmarks for each problem in its respective file.</p>\n\n<p>My directory structure looks like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>euler/\n    Cargo.lock\n    Cargo.toml\n    README.md\n    src/\n        main.rs\n        p001.rs\n        p002.rs\n        ...etc.\n</code></pre>\n\n<p>The contents of <code>main.rs</code> are:</p>\n\n<pre><code>#![feature(test)]\n\nextern crate primes;\nextern crate test;\n\nmod p001;\nmod p002;\n// ... etc\n\nfn main() {}\n</code></pre>\n\n<p>When I run <code>cargo bench</code>, it runs the benchmarks for every single file in my project:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo bench\n    Finished release [optimized] target(s) in 0.02 secs\n     Running target/release/deps/euler_rust-5be87dff38a04da2\n\nrunning 11 tests\ntest p001::bench_fold_sum                     ... bench:      12,955 ns/iter (+/- 13,501)\ntest p001::bench_for_sum                      ... bench:      11,385 ns/iter (+/- 7,383)\ntest p002::bench_for_sum                      ... bench:         270 ns/iter (+/- 90)\ntest p002::bench_takewhile_filter_mutable_sum ... bench:         322 ns/iter (+/- 333)\ntest p002::bench_takewhile_filter_sum         ... bench:         512 ns/iter (+/- 379)\ntest p002::bench_takewhile_sum                ... bench:         273 ns/iter (+/- 117)\ntest p002::bench_while_sum                    ... bench:         286 ns/iter (+/- 240)\n</code></pre>\n\n<p>I'm interested in only running the benchmarks contained in one file, but specifying the filename after <code>cargo bench</code> yields the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo bench src/p002.rs\n    Finished release [optimized] target(s) in 0.02 secs\n     Running target/release/deps/euler_rust-5be87dff38a04da2\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 11 filtered out\n</code></pre>\n\n<p>How do you run the benchmarks in a single file?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1525362561, "post_id": 50159002, "comment_id": 87336022, "body": "This question has already been asked: <a href=\"https://stackoverflow.com/q/37053567/155423\">Is it possible to specialize on a static lifetime?</a>. Please <a href=\"https://stackoverflow.com/posts/50159002/edit\">edit</a> your question to explain why it&#39;s different. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1525415147, "post_id": 50159002, "comment_id": 87354353, "body": "just posted, give a look it this fit your case: <a href=\"https://stackoverflow.com/a/50168450/3356777\">stackoverflow.com/a/50168450/3356777</a>"}, {"owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "edited": false, "score": 0, "creation_date": 1525439108, "post_id": 50159002, "comment_id": 87368300, "body": "it is indeed a duplicate. Sorry about that, and thanks for pointing to the answers."}], "owner": {"reputation": 1523, "user_id": 1235487, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5c586f2d0682c9f919da29b520347a5e?s=128&d=identicon&r=PG", "display_name": "Pierre-Antoine", "link": "https://stackoverflow.com/users/1235487/pierre-antoine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 59, "favorite_count": 0, "closed_date": 1525370947, "answer_count": 0, "score": 2, "last_activity_date": 1525362460, "creation_date": 1525362010, "last_edit_date": 1525362232, "question_id": 50159002, "link": "https://stackoverflow.com/questions/50159002/different-implementations-for-static-and-non-static-arguments", "closed_reason": "Duplicate", "title": "Different implementations for static and non-static arguments", "body": "<p>I would like a method, accepting a <code>&amp;str</code>, to behave differently when it is passed a static string or a non-static string (the motivation is that the static string does not need to be copied, while the non-static string may die too soon, so I need to copy it).</p>\n\n<p>I don't know if the compiler can do that for me, and if yes, how to code it properly. All my attempts result in \"conflicting implementations\", as in <a href=\"https://play.rust-lang.org/?gist=ae075385d18bbe99f7b897d8fd86c10d&amp;version=stable&amp;mode=debughttps://play.rust-lang.org/?gist=ae075385d18bbe99f7b897d8fd86c10d&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">this example</a>.</p>\n\n<pre><code>struct Foo;\n\ntrait Bar&lt;'a, 'b&gt; {\n    fn bar(&amp;'a self, &amp;'b str);\n}\n\nimpl&lt;'a&gt; Bar&lt;'a, 'static&gt; for Foo {\n    fn bar(&amp;'a self, _: &amp;'static str) {\n        println!(\"STATIC\");\n    }\n}\n\nimpl&lt;'a, 'b&gt; Bar&lt;'a, 'b&gt; for Foo\nwhere\n    'b: 'a,\n{\n    fn bar(&amp;'a self, _: &amp;'b str) {\n        println!(\"NON-STATIC\");\n    }\n}\n\nfn main() {\n    Foo {}.bar(\"hello\"); // display \"STATIC\"\n    let world = String::from(\"world\");\n    Foo {}.bar(&amp;world); // display \"NON-STATIC\"\n}\n</code></pre>\n\n<p>If this can't be done with generics, could it be done with a macro?</p>\n"}, {"tags": ["multithreading", "rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525362183, "post_id": 50158915, "comment_id": 87335791, "body": "I believe this has already been answered by <a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a>. Further information can be found in <a href=\"https://stackoverflow.com/q/28654978/155423\">Lifetime troubles sharing references between threads</a>. Please <a href=\"https://stackoverflow.com/posts/50158915/edit\">edit</a> your question to explain how this is different from these existing questions. Otherwise, we can mark this as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525363018, "post_id": 50158915, "comment_id": 87336344, "body": "<a href=\"https://play.rust-lang.org/?gist=36740c478e6de6722f4d61c25a0c488e&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">The duplicate applied to your question</a>."}, {"owner": {"reputation": 75, "user_id": 3796621, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YReLf.jpg?s=128&g=1", "display_name": "Anders", "link": "https://stackoverflow.com/users/3796621/anders"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1525431776, "post_id": 50158915, "comment_id": 87363730, "body": "Thanks for your help :) Greatly appreciated"}], "owner": {"reputation": 75, "user_id": 3796621, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YReLf.jpg?s=128&g=1", "display_name": "Anders", "link": "https://stackoverflow.com/users/3796621/anders"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 36, "favorite_count": 0, "closed_date": 1525431743, "answer_count": 0, "score": 0, "last_activity_date": 1525428456, "creation_date": 1525361738, "last_edit_date": 1525428456, "question_id": 50158915, "link": "https://stackoverflow.com/questions/50158915/how-do-i-hand-an-stdsyncrwlock-reference-to-multiple-threads", "closed_reason": "Duplicate", "title": "How do I hand an std::sync::RwLock reference to multiple threads?", "body": "<p>I want to have give multiple threads access to the same data structure in a thread-safe manner.</p>\n\n<p>I can get as far as this, where it says that my <code>RwLock</code> does not live long enough! I understand the lending and borrowing of Rust, but this I can't wrap my head around.</p>\n\n<pre><code>use std::sync::RwLock;\nuse std::thread;\n\nfn func&lt;'a&gt;(vec_lock: &amp;'a RwLock&lt;Vec&lt;i32&gt;&gt;) {\n    let mut vec = vec_lock.write().unwrap();\n    vec.push(2);\n}\n\nfn main() {\n    let v: Vec&lt;i32&gt; = Vec::new(); // Shared data\n    let v_lock = &amp;RwLock::new(v); // RwLock ref\n\n    let t1 = thread::spawn(move || func(v_lock)); // Give lock ref to func\n    let t2 = thread::spawn(move || func(v_lock)); // Give lock ref to func\n    t1.join().unwrap(); // Wait\n    t2.join().unwrap();\n\n    // Here v should be [2,2]\n}\n</code></pre>\n\n<p>The compiler says </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:11:19\n   |\n11 |     let v_lock = &amp;RwLock::new(v);\n   |                   ^^^^^^^^^^^^^^ temporary value does not live long enough\n...\n19 | }\n   | - temporary value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I cannot seem to find any examples that do this. Any ideas or pointers are greatly appreciated.</p>\n"}, {"tags": ["rust", "future", "channel", "executor"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1525348004, "last_edit_date": 1525348004, "creation_date": 1525342426, "answer_id": 50152468, "question_id": 50149548, "link": "https://stackoverflow.com/questions/50149548/why-do-i-get-a-mismatched-type-error-expected-mpscreceiver-found-when-us/50152468#50152468", "title": "Why do I get a mismatched type error (expected mpsc::Receiver, found ()) when using a local Futures executor?", "body": "<p>As the error message states:</p>\n\n<blockquote>\n  <p>type mismatch resolving <code>&lt;ForEach&lt;Receiver&lt;Ping&gt;, Result&lt;(), futures::Never&gt;, [closure]&gt;</code> as <code>&lt;futures::Future&gt;::Item == ()</code></p>\n</blockquote>\n\n<p><a href=\"https://docs.rs/futures/0.2.1/futures/executor/struct.LocalExecutor.html#method.spawn_local\" rel=\"nofollow noreferrer\"><code>spawn_local</code></a> requires that the future passed to it have the <em>associated type</em> <code>Item</code> be the unit type / the empty tuple / <code>()</code>. Your future is not returning that type.</p>\n\n<blockquote>\n  <p>should take a <code>()</code> future, which I am passing it</p>\n</blockquote>\n\n<p>I do not know why you believe that to be true. <a href=\"https://docs.rs/futures/0.2.1/futures/trait.StreamExt.html#method.for_each\" rel=\"nofollow noreferrer\"><code>for_each</code></a> implements <code>Future</code> by <a href=\"https://docs.rs/futures/0.2.1/futures/stream/struct.ForEach.html#impl-Future\" rel=\"nofollow noreferrer\">returning the stream as the <code>Item</code></a>.</p>\n\n<p>This can be fixed by using <a href=\"https://docs.rs/futures/0.2.1/futures/trait.FutureExt.html#method.map\" rel=\"nofollow noreferrer\"><code>map</code></a> to discard the stream:</p>\n\n<pre><code>executor.spawn_local(rx_1.for_each(move |Ping(size)| {\n    // ...\n}).map(|_| ()));\n</code></pre>\n\n<p>This doesn't allow your code to compile, but it fixes your error.</p>\n\n<hr>\n\n<p>Making the code work is a larger change. Here's one possibility, presented without comment as it has nothing to do with your question:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::{\n    channel::mpsc::{self, Receiver, Sender},\n    executor::LocalPool,\n    prelude::*,\n};\n\nstruct Ping(usize);\n\nfn pinger(\n    rx: Receiver&lt;Ping&gt;,\n    tx: Sender&lt;Ping&gt;,\n    id: &amp;'static str,\n) -&gt; impl Future&lt;Item = (), Error = Never&gt; {\n    rx.map_err(Never::never_into::&lt;Box&lt;std::error::Error&gt;&gt;)\n        .fold(tx, move |tx, Ping(size)| {\n            println!(\"{}: {}\", id, size);\n\n            if size &gt;= 10 {\n                println!(\"{}: Done\", id);\n                tx.close().err_into().right_future()\n            } else {\n                tx.send(Ping(size + 1)).err_into().left_future()\n            }\n        })\n        .map(|_| ())\n        .map_err(move |e| panic!(\"Task {} failed: {}\", id, e))\n}\n\nfn main() {\n    let mut pool = LocalPool::new();\n    let mut executor = pool.executor();\n\n    let (tx_1, rx_1) = mpsc::channel(1);\n    let (tx_2, rx_2) = mpsc::channel(1);\n    let tx_ignite = tx_1.clone();\n\n    executor.spawn_local(pinger(rx_1, tx_2, \"Rx 1\")).unwrap();\n    executor.spawn_local(pinger(rx_2, tx_1, \"Rx 2\")).unwrap();\n\n    executor\n        .spawn_local({\n            tx_ignite\n                .send(Ping(0))\n                .map(drop)\n                .map_err(|e| panic!(\"{:?}\", e))\n        })\n        .unwrap();\n\n    pool.run(&amp;mut executor);\n}\n</code></pre>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 586, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1525349888, "creation_date": 1525333494, "last_edit_date": 1525349888, "question_id": 50149548, "link": "https://stackoverflow.com/questions/50149548/why-do-i-get-a-mismatched-type-error-expected-mpscreceiver-found-when-us", "title": "Why do I get a mismatched type error (expected mpsc::Receiver, found ()) when using a local Futures executor?", "body": "<p>I have the following code:</p>\n\n<pre><code>extern crate futures;\n\nuse futures::channel::mpsc;\nuse futures::executor::LocalPool;\nuse futures::prelude::*;\n\nstruct Ping(usize);\n\nfn main() {\n    let (last_tx, mut prev_rx) = mpsc::channel::&lt;Ping&gt;(1);\n    let mut pool = LocalPool::new();\n    let mut executor = pool.executor();\n    let (tx_1, rx_1) = mpsc::channel::&lt;Ping&gt;(1);\n    let (tx_2, rx_2) = mpsc::channel::&lt;Ping&gt;(1);\n    executor.spawn_local(rx_1.for_each(move |Ping(size)| {\n        if size == 10 {\n            tx_2.close();\n            println!(\"Done 2\");\n        } else {\n            let tx = tx_2.clone();\n            tx.send(Ping(size + 1));\n        }\n        Ok(())\n    }));\n\n    executor.spawn_local(rx_2.for_each(move |Ping(size)| {\n        if size == 10 {\n            tx_1.close();\n            println!(\"Done 1\");\n        } else {\n            let tx = tx_1.clone();\n            tx.send(Ping(size + 1));\n        }\n        Ok(())\n    }));\n}\n</code></pre>\n\n<p>It does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;futures::stream::ForEach&lt;futures::channel::mpsc::Receiver&lt;Ping&gt;, std::result::Result&lt;(), futures::Never&gt;, [closure@src/bin/futures_ring_poc.rs:16:40: 25:6 tx_2:_]&gt; as futures::Future&gt;::Item == ()`\n  --&gt; src/bin/futures_ring_poc.rs:16:14\n   |\n16 |     executor.spawn_local(rx_1.for_each(move |Ping(size)| {\n   |              ^^^^^^^^^^^ expected struct `futures::channel::mpsc::Receiver`, found ()\n   |\n   = note: expected type `futures::channel::mpsc::Receiver&lt;Ping&gt;`\n              found type `()`\n\nerror[E0271]: type mismatch resolving `&lt;futures::stream::ForEach&lt;futures::channel::mpsc::Receiver&lt;Ping&gt;, std::result::Result&lt;(), futures::Never&gt;, [closure@src/bin/futures_ring_poc.rs:27:40: 36:6 tx_1:_]&gt; as futures::Future&gt;::Item == ()`\n  --&gt; src/bin/futures_ring_poc.rs:27:14\n   |\n27 |     executor.spawn_local(rx_2.for_each(move |Ping(size)| {\n   |              ^^^^^^^^^^^ expected struct `futures::channel::mpsc::Receiver`, found ()\n   |\n   = note: expected type `futures::channel::mpsc::Receiver&lt;Ping&gt;`\n              found type `()`\n</code></pre>\n\n<p>Why? From <a href=\"https://docs.rs/futures/0.2.1/futures/executor/struct.LocalExecutor.html#method.spawn_local\" rel=\"nofollow noreferrer\">the docs</a> <code>spawn_local</code> should take a <code>()</code> future, which I am passing it.</p>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1525347195, "post_id": 50147956, "comment_id": 87325504, "body": "I don&#39;t see any extra events. The first call to <code>poll</code> blocks as expected, as do all the subsequent alternate calls. But the calls in between are returning immediately (with no events).  I don&#39;t know why it would behave like this, but I also don&#39;t see why it would be a problem..."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1525348223, "post_id": 50147956, "comment_id": 87326207, "body": "It actually doesn&#39;t happen if you don&#39;t remove the done tasks from the <code>tasks</code> Vec. At a guess, I&#39;d say that <a href=\"https://docs.rs/mio/0.6.10/src/mio/poll.rs.html#1508-1518\" rel=\"nofollow noreferrer\"><code>Registration::drop</code></a> is updating the state of the <code>Poll</code>, causing <code>poll</code> to return because of the state change, even though there are no new events."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1525349595, "post_id": 50147956, "comment_id": 87327100, "body": "You are right, in general it is not a problem. But there are specific cases where you want optimize as much as possible the event loop thread or, as in my case, to understand how Mio works, probably I&#39;m missing something."}], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 0, "last_activity_date": 1525788903, "creation_date": 1525788903, "answer_id": 50235792, "question_id": 50147956, "link": "https://stackoverflow.com/questions/50147956/why-is-mios-poll-triggered-twice-for-user-generated-events/50235792#50235792", "title": "Why is Mio&#39;s poll triggered twice for user-generated events?", "body": "<p>As stated in the comments and confirmed <a href=\"https://github.com/carllerche/mio/issues/836\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<blockquote>\n  <p>dropping a Registration might wake up the loop (which it indeed does, the same as a registration) without actually triggering an event</p>\n</blockquote>\n\n<p>This is obviously not an issue in most cases, just a behavior that I did not expect after reading the <a href=\"https://carllerche.github.io/mio/mio/struct.Poll.html#method.poll\" rel=\"nofollow noreferrer\">docs</a>:</p>\n\n<blockquote>\n  <p>fn poll(&amp;self, events: &amp;mut Events, timeout: Option) -> Result[\u2212]\n  Wait for readiness events</p>\n  \n  <p>Blocks the current thread and waits for readiness events for any of the Evented handles that have been registered with this Poll instance. The function will block until either at least one readiness event has been received or timeout has elapsed. A timeout of None means that poll will block until a readiness event has been received.</p>\n</blockquote>\n\n<p>The current thread is indeed awaken also when dropping a <code>Registration</code>.</p>\n"}], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 178, "favorite_count": 0, "accepted_answer_id": 50235792, "answer_count": 1, "score": 1, "last_activity_date": 1525788903, "creation_date": 1525327326, "last_edit_date": 1525341699, "question_id": 50147956, "link": "https://stackoverflow.com/questions/50147956/why-is-mios-poll-triggered-twice-for-user-generated-events", "title": "Why is Mio&#39;s poll triggered twice for user-generated events?", "body": "<p>The following code generates a \"user event\" to be returned by <code>poll</code>:</p>\n\n<pre><code>extern crate mio;\n\nuse mio::event::Evented;\nuse mio::{Events, Poll, PollOpt, Ready, Registration, Token};\nuse std::thread::{sleep, spawn, JoinHandle};\nuse std::time::{Duration, Instant};\n\n#[derive(Debug)]\nstruct Output(u32, Duration);\n\npub struct MioThread {\n    registration: Registration,\n    handle: JoinHandle&lt;Output&gt;,\n}\n\nimpl MioThread {\n    pub fn new(i: u32) -&gt; MioThread {\n        let now = Instant::now();\n\n        let (registration, set_readiness) = Registration::new2();\n\n        let handle = spawn(move || {\n            sleep(Duration::from_millis((1000 - (100 * i)) as u64));\n\n            set_readiness.set_readiness(Ready::readable()).unwrap();\n\n            Output(i, now.elapsed())\n        });\n\n        MioThread {\n            registration: registration,\n            handle: handle,\n        }\n    }\n\n    // manage the thread result\n    fn eval_result(self) {\n        let out = self.handle.join();\n        println!(\"do whathever you want with: {:?}\", out.unwrap());\n    }\n}\n\nfn main() {\n    let poll = Poll::new().unwrap();\n\n    let mut events = Events::with_capacity(16);\n\n    let mut tasks = Vec::new();\n    for i in 0..5 {\n        let mio_thread = MioThread::new(i);\n\n        mio_thread\n            .registration\n            .register(&amp;poll, Token(i as usize), Ready::readable(), PollOpt::edge())\n            .unwrap();\n\n        tasks.push(Some(mio_thread));\n    }\n\n    loop {\n        let num_events = poll.poll(&amp;mut events, None).unwrap();\n        println!(\"poll fired: {} events\", num_events);\n        for event in &amp;events {\n            if event.readiness().is_readable() {\n                let Token(thread_id) = event.token();\n\n                if let Some(t) = tasks.remove(thread_id) {\n                    t.eval_result();\n                }\n\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>poll fired: 1 events\ndo whathever you want with: Output(4, Duration { secs: 0, nanos: 600967623 })\npoll fired: 0 events\npoll fired: 1 events\ndo whathever you want with: Output(3, Duration { secs: 0, nanos: 701035026 })\npoll fired: 0 events\npoll fired: 1 events\ndo whathever you want with: Output(2, Duration { secs: 0, nanos: 801089370 })\npoll fired: 0 events\npoll fired: 1 events\ndo whathever you want with: Output(1, Duration { secs: 0, nanos: 900890190 })\npoll fired: 0 events\npoll fired: 1 events\ndo whathever you want with: Output(0, Duration { secs: 1, nanos: 600076 })\npoll fired: 0 events\n</code></pre>\n\n<p>I've opened <a href=\"https://github.com/carllerche/mio/issues/836\" rel=\"nofollow noreferrer\">an issue on the Mio repository</a>.</p>\n"}]