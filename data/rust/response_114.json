[{"tags": ["reference", "rust", "borrow-checker", "borrowing"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587274, "post_id": 42812232, "comment_id": 72736670, "body": "Is cloning <code>v</code> an option? And do you understand what the issue would be if <code>v</code> was returned?"}, {"owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587585, "post_id": 42812232, "comment_id": 72736959, "body": "I tried inserting some clone calls (<code>let val = e.lookup(&amp;name).clone();</code> and <code>Ok(v.clone())</code>, but I still get the error."}, {"owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587814, "post_id": 42812232, "comment_id": 72737155, "body": "I know that returning <code>v</code> right now would be an error because the <code>Ref&lt;Enviroment&gt;</code> that it points to would be freed before it does."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489589036, "post_id": 42812232, "comment_id": 72738175, "body": "Superb. Not quite sure about the issue yet, notably because of the lifetime dance with the environments..."}, {"owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489589105, "post_id": 42812232, "comment_id": 72738227, "body": "Exactly. The closures need to have a reference to the environment the created them so that lexical scoping can work."}], "answers": [{"comments": [{"owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "edited": false, "score": 0, "creation_date": 1489590922, "post_id": 42813503, "comment_id": 72739684, "body": "Wow, thanks! I never would have guessed that that was the problem."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1489590553, "last_edit_date": 1489590553, "creation_date": 1489590209, "answer_id": 42813503, "question_id": 42812232, "link": "https://stackoverflow.com/questions/42812232/how-to-make-refcells-ref-live-long-enough/42813503#42813503", "title": "How to make RefCell&#39;s Ref live long enough", "body": "<p>This isn't really a problem regarding <code>RefCell</code> or <code>Ref</code>. You have this method:</p>\n\n<pre><code>impl&lt;'a&gt; Enviroment&lt;'a&gt; {\n    pub fn lookup(&amp;self, name: &amp;str) -&gt; Option&lt;Option&lt;Value&gt;&gt;;\n}\n</code></pre>\n\n<p>After <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision</a> is reversed, that is equivalent to:</p>\n\n<pre><code>impl&lt;'a&gt; Enviroment&lt;'a&gt; {\n    pub fn lookup&lt;'b, 'c&gt;(&amp;'b self, name: &amp;'c str) -&gt; Option&lt;Option&lt;Value&lt;'b&gt;&gt;&gt;;\n}\n</code></pre>\n\n<p>Which means that the <code>Value</code> is only guaranteed to contain values that live as long as the <code>Environment</code>. What you really want is to tie the <code>Value</code> to whatever the <code>Environment</code> references:</p>\n\n<pre><code>impl&lt;'a&gt; Enviroment&lt;'a&gt; {\n    pub fn lookup(&amp;self, name: &amp;str) -&gt; Option&lt;Option&lt;Value&lt;'a&gt;&gt;&gt;;\n}\n</code></pre>\n\n<p>This allows your example code to compile.</p>\n"}], "owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 0, "accepted_answer_id": 42813503, "answer_count": 1, "score": 3, "last_activity_date": 1489590553, "creation_date": 1489587088, "last_edit_date": 1489589837, "question_id": 42812232, "link": "https://stackoverflow.com/questions/42812232/how-to-make-refcells-ref-live-long-enough", "title": "How to make RefCell&#39;s Ref live long enough", "body": "<p>I'm working on an interpreter in Rust for a programming language. Everything was going fine until I decided to implement closures, which caused some massive headaches because now each closure value needs to have a mutable reference of the environment it was defined in. I finally got it to mostly work with <code>RefCell</code>, but I'm now running into one more error that I can't figure out how to solve.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `e` does not live long enough\n   --&gt; src/interpreter.rs:163:23\n    |\n163 |             let val = e.lookup(&amp;name);\n    |                       ^ does not live long enough\n...\n169 |         }\n    |         - borrowed value only lives until here\n    |\nnote: borrowed value must be valid for the lifetime 'b as defined on the body at 147:93...\n   --&gt; src/interpreter.rs:147:94\n    |\n147 | fn eval_expr&lt;'a, 'b, 'c&gt;(ast: &amp;'a Expr, env: &amp;'b RefEnv&lt;'b&gt;) -&gt; Result&lt;Value&lt;'b&gt;, Error&lt;'c&gt;&gt; {\n    |                                                                                              ^\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>Here is the relevant code:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::cell::RefCell;\n#[derive(Clone, Debug)]\npub enum Value&lt;'a&gt; {\n    Number(f64),\n    UserFunc(Definition, Enviroment&lt;'a&gt;),\n}\n\n#[derive(Clone, Debug)]\npub struct Definition;\n\npub enum Expr {\n    Name(String),\n}\n\n// Nothing to do with the problem\npub enum Error {\n    UndefinedName(String),\n}\n\n#[derive(Debug, Clone)]\npub struct Enviroment&lt;'a&gt; {\n    current_frame: HashMap&lt;String, Option&lt;Value&lt;'a&gt;&gt;&gt;,\n    prev: Option&lt;&amp;'a Enviroment&lt;'a&gt;&gt;,\n}\nimpl&lt;'a&gt; Enviroment&lt;'a&gt; {\n    pub fn new() -&gt; Enviroment&lt;'a&gt; {\n        Enviroment {\n            current_frame: HashMap::new(),\n            prev: None,\n        }\n    }\n    pub fn extend(bindings: Vec&lt;(String, Value&lt;'a&gt;)&gt;,\n                  prev: Option&lt;&amp;'a Enviroment&lt;'a&gt;&gt;)\n                  -&gt; Enviroment&lt;'a&gt; {\n        let mut frame = HashMap::new();\n        for (key, val) in bindings {\n            frame.insert(key, Some(val));\n        }\n        Enviroment {\n            current_frame: frame,\n            prev: prev,\n        }\n    }\n    pub fn lookup(&amp;self, name: &amp;str) -&gt; Option&lt;Option&lt;Value&gt;&gt; {\n        let val = self.current_frame.get(&amp;String::from(name));\n        if val.is_some() {\n            val.cloned()\n        } else {\n            if let Some(prev) = self.prev {\n                prev.lookup(name)\n            } else {\n                None\n            }\n        }\n    }\n}\n\ntype RefEnv&lt;'a&gt; = RefCell&lt;Enviroment&lt;'a&gt;&gt;;\n\nfn eval_expr&lt;'a, 'b&gt;(ast: &amp;'a Expr, env: &amp;'b RefEnv&lt;'b&gt;) -&gt; Result&lt;Value&lt;'b&gt;, Error&gt; {\n    match *ast {\n        Expr::Name(ref name) =&gt; {\n            let e = env.borrow();\n            let val = e.lookup(&amp;name);\n            if let Some(Some(v)) = val {\n                Ok(v)\n            } else {\n                Err(Error::UndefinedName(format!(\"{} is not defined\", name)))\n            }\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>How can I change the code to make it compile?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489590735, "post_id": 42811147, "comment_id": 72739553, "body": "Why split it up at all? That is, why not just have <code>fn decode_message(id: u32, data: ...) -&gt; Result&lt;..., ...&gt; { match id { 1 =&gt; parse::&lt;TypeA&gt;(...), ... } }</code>"}], "owner": {"reputation": 144, "user_id": 2302102, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/237052dcc431f91b731f679b5e33be67?s=128&d=identicon&r=PG", "display_name": "kellerkindt", "link": "https://stackoverflow.com/users/2302102/kellerkindt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 330, "favorite_count": 3, "answer_count": 0, "score": 1, "last_activity_date": 1489585982, "creation_date": 1489584345, "last_edit_date": 1489585982, "question_id": 42811147, "link": "https://stackoverflow.com/questions/42811147/elegant-way-to-match-protobuf-message-type-in-rust", "title": "Elegant way to match protobuf message type in Rust", "body": "<p>I am working on a protobuf Rust project. The type is required to be known in order to parse a message, so the ID (a <code>u32</code>) is sent and matched to a enum (<code>MessageType</code>). Depending on the type, another match is required on that enum value to determine the actual type. A simplified version looks like:</p>\n\n<pre><code>use protobuf::core::parse_from_bytes;\n\n#[derive(Copy, Clone, Debug)]\npub enum MessageType {\n    Neither = 0,\n    TypeA   = 1,\n    TypeB   = 2\n}\n\nimpl From&lt;u32&gt; for MessageType {\n    fn from(id: u32) -&gt; Self {\n        match id {\n            1 =&gt; MessageType::TypeA,\n            2 =&gt; MessageType::TypeB\n            _ =&gt; MessageType::Neither\n        }\n    }\n}\n\nfn decode_message(&amp;mut self, m_type: Option&lt;MessageType&gt;) -&gt; Result&lt;..., ....&gt; {\n     // some code before...\n\n     let m = match m_type {\n        &amp;Option::Some(MessageType::TypeA) =&gt; parse_from_bytes::&lt;TypeA&gt;(&amp;mut (self.body.as_mut() as &amp;mut [u8]))?,\n        &amp;Option::Some(MessageType::TypeB) =&gt; parse_from_bytes::&lt;TypeB&gt;(&amp;mut (self.body.as_mut() as &amp;mut [u8]))?,\n        _ =&gt; panic!(\"unknown type\")\n    };\n\n    // do something with m...\n}\n</code></pre>\n\n<p>Is there a more elegant way to bind the generic message type to the enum to eliminate the match required in <code>decode_message</code>?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker", "memory-safety"], "answers": [{"comments": [{"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1489577398, "post_id": 42808207, "comment_id": 72729249, "body": "Great answer! Thanks I&#39;ll wait until the end of the day to see if anyone else pipes up."}, {"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1489577523, "post_id": 42808207, "comment_id": 72729336, "body": "On another note, I wonder if I should try to raise a PR to the Rustonomicon adding this very example. What do you think? It would have saved me some time for sure."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 1, "creation_date": 1489579355, "post_id": 42808207, "comment_id": 72730594, "body": "@EddBarrett: I think the maintainers would be delighted to have more contributions, especially from beginners since beginners are the best suited to point out what is a hurdle to them. You may want to open an issue first, to discuss your idea about developing this undercovered topic: this way you can sound them out without first investing too much time, and they can direct your work before you start (maybe they&#39;d rather have a new chapter for more advanced example? maybe they&#39;d rather put it before this example but after this other one? ...)."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1489580498, "post_id": 42808207, "comment_id": 72731375, "body": "Hmm, I see it the opposite way around - I&#39;ll add an answer."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1489576588, "last_edit_date": 1495541422, "creation_date": 1489576588, "answer_id": 42808207, "question_id": 42807679, "link": "https://stackoverflow.com/questions/42807679/clarify-the-meaning-of-binding-two-references-to-differently-scoped-referents-to/42808207#42808207", "title": "Clarify the meaning of binding two references to differently scoped referents to the same lifetime in a function signature", "body": "<p><strong>It's (2)</strong>: the returned reference lives as long as the shorter input lifetime.</p>\n\n<p>However, from the perspective of the function, both input lifetimes are in fact the same (both being <code>'a</code>). So given that the variable <code>a</code> from <code>main()</code> clearly lives longer than <code>b</code>, how does this work?</p>\n\n<p>The trick is that the caller shortens the lifetime of one of the two references to match <code>min()</code>s function signature. If you have a reference <code>&amp;'x T</code>, you can convert it to <code>&amp;'y T</code> <em>iff</em> <code>'x</code> outlives <code>'y</code> (also written: <code>'x: 'y</code>). This makes intuitive sense (we can shorten the lifetime of a reference without bad consequences). The compiler performs this conversion automatically. So <em>imagine</em> that the compiler turns your <code>main()</code> into:</p>\n\n<pre><code>let a = String::from(\"short\");\n{\n    let b = String::from(\"a long long long string\");\n\n    // NOTE: this syntax is not valid Rust! \n    let a_ref: &amp;'a_in_main str = &amp;a;\n    let b_ref: &amp;'b_in_main str = &amp;b;\n    println!(\"{}\", min(&amp;a as &amp;'b_in_main str, &amp;b));\n    //                    ^^^^^^^^^^^^^^^^^^\n}\n</code></pre>\n\n<p>This has to do with something called <em>subtyping</em> and you can read more about this in <a href=\"https://stackoverflow.com/a/42639814/2408867\">this excellent answer</a>.</p>\n\n<p><strong>To summarize</strong>: the caller shortens one lifetime to match the function signature such that the function can just assume both references have the same lifetime.</p>\n"}, {"comments": [{"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1489584827, "post_id": 42809710, "comment_id": 72734681, "body": "Thanks! In fact I think <code>c</code> and <code>b</code> are in different scopes in the eyes of the compiler, as each <code>let</code> binding makes a new implicit scope (according to Rustonomicon)."}], "tags": [], "owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "is_accepted": false, "score": 1, "last_activity_date": 1489580777, "creation_date": 1489580777, "answer_id": 42809710, "question_id": 42807679, "link": "https://stackoverflow.com/questions/42807679/clarify-the-meaning-of-binding-two-references-to-differently-scoped-referents-to/42809710#42809710", "title": "Clarify the meaning of binding two references to differently scoped referents to the same lifetime in a function signature", "body": "<p>Apart from what @Lukas have mentioned in the answer, you can also read the signature of the function as - The returned reference is valid till the point where both the passed references are valid i.e its an conjunction (aka AND) between the parameters lifetime.</p>\n\n<p>There is something more to it. Below are two code examples:</p>\n\n<pre><code>    let a = String::from(\"short\");\n    {\n        let c: &amp;str;\n        let b = String::from(\"a long long long string\");\n        c = min(&amp;a, &amp;b);\n\n    } \n</code></pre>\n\n<p>AND</p>\n\n<pre><code>let a = String::from(\"short\");\n    {\n        let b = String::from(\"a long long long string\");\n        let c: &amp;str;\n        c = min(&amp;a, &amp;b);\n\n    }\n</code></pre>\n\n<p>The first one doesn't work (second one does). It may seem that both <code>b</code> and <code>c</code> have same lifetime as they are in same scope but the ordering in the scope also matters as in the first case <code>b</code> lifetime will end before <code>c</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1489583222, "post_id": 42809888, "comment_id": 72733429, "body": "I&#39;m on the fence with regard to your answer (though I upvoted it since borrows matter). From the point of view of the callee, I would argue that the borrow does not matter. And thus, <i>from the point of view of the callee</i>, the answer is (2) =&gt; the callee guarantee that the result can live as long as <code>&#39;a</code>, the shorted lifetime. Whether the result actually <i>lives</i> that long or not... doesn&#39;t matter. It cannot live any longer, though."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587353, "post_id": 42809888, "comment_id": 72736738, "body": "@MatthieuM. If we look from the callee&#39;s point of view, there&#39;s only one lifetime, so there&#39;s not so much to say.  (At least from <i>my</i> point of view!)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587762, "post_id": 42809888, "comment_id": 72737120, "body": "What I am trying to say is that there are two ways to look at the question: (1) What is the maximum lifetime that the result can have? and (2) How long are the arguments borrowed for? It seems to me that the OP is angling for (1) and not that interested in (2). I may be wrong, of course, I&#39;m no mind reader!"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489587901, "post_id": 42809888, "comment_id": 72737226, "body": "Ok, I read it as &quot;how are <code>&amp;a</code> and <code>&amp;b</code> squashed into one lifetime <code>&#39;a</code>.  Also not a mind reader!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489588012, "post_id": 42809888, "comment_id": 72737309, "body": "That&#39;s why I upvoted both yours and Lukas&#39; answers, you both make complete valid point... and I have no idea which the OP wanted... and maybe the OP actually needs <i>both</i> points, because it&#39;s not immediately obvious there is a difference to a beginner :)"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1489582757, "last_edit_date": 1489582757, "creation_date": 1489581214, "answer_id": 42809888, "question_id": 42807679, "link": "https://stackoverflow.com/questions/42807679/clarify-the-meaning-of-binding-two-references-to-differently-scoped-referents-to/42809888#42809888", "title": "Clarify the meaning of binding two references to differently scoped referents to the same lifetime in a function signature", "body": "<p>I'm going to go for <strong>(3) something else</strong>!</p>\n\n<p>With your function signature:</p>\n\n<pre><code>fn min&lt;'a&gt;(a: &amp;'a str, b: &amp;'a str) -&gt; &amp;'a str { ...}\n\n// ...\nmin(&amp;a, &amp;b)\n</code></pre>\n\n<p>the <code>'a</code> is <em>not</em> the lifetime of the objects being borrowed.  It is a new lifetime generated by the compiler <em>just for this call</em>.  <code>a</code> and <code>b</code> will be borrowed (or possibly reborrowed) for as long as needed for the call, extended by the scope of the return value (since it references the same <code>'a</code>).</p>\n\n<p>Some examples:</p>\n\n<pre><code>let mut a = String::from(\"short\");\n{\n    let mut b = String::from(\"a long long long string\");\n    // a and b borrowed for the duration of the println!()\n    println!(\"{}\", min(&amp;a, &amp;b));\n    // a and b borrowed for the duration of the expression, but not\n    // later (since l is not a reference)\n    let l = min(&amp;a, &amp;b).len();\n\n    {\n        // borrowed for s's scope\n        let s = min(&amp;a, &amp;b);\n        // Invalid: b is borrowed until s goes out of scope\n        // b += \"...\";\n    }\n    b += \"...\";  // Ok: b is no longer borrowed.\n    // Borrow a and b again to print:\n    println!(\"{}\", min(&amp;a, &amp;b));\n}\n</code></pre>\n\n<p>As you can see, the <code>'a</code> for any individual call is distinct from the lifetime of the actual <code>a</code> and <code>b</code> which are borrowed, though of course both must outlive the generated lifetime of each call.</p>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b73c84433b14fb2bc5eaed144dce64a1&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n"}], "owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 42808207, "answer_count": 3, "score": 9, "last_activity_date": 1489582757, "creation_date": 1489575205, "last_edit_date": 1489580295, "question_id": 42807679, "link": "https://stackoverflow.com/questions/42807679/clarify-the-meaning-of-binding-two-references-to-differently-scoped-referents-to", "title": "Clarify the meaning of binding two references to differently scoped referents to the same lifetime in a function signature", "body": "<p>I've been trying to get my head around the Rust borrowing and ownership model.</p>\n\n<p>Suppose we have the following code:</p>\n\n<pre><code>fn main() {\n    let a = String::from(\"short\");\n    {\n        let b = String::from(\"a long long long string\");\n        println!(\"{}\", min(&amp;a, &amp;b));\n    }\n}\n\nfn min&lt;'a&gt;(a: &amp;'a str, b: &amp;'a str) -&gt; &amp;'a str {\n    if a.len() &lt; b.len() {\n        return a;\n    } else {\n        return b;\n    }\n}\n</code></pre>\n\n<p><code>min()</code> just returns a reference to the shorter of the two <em>referenced</em> strings. <code>main()</code> passes in two string references whose referents are defined in different scopes. I've used <code>String::from()</code> so that the references don't have a static lifetime. The program correctly prints <code>short</code>. <a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20String%3A%3Afrom(%22short%22)%3B%0A%20%20%20%20let%20b%3B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20b%20%3D%20String%3A%3Afrom(%22a%20long%20long%20long%20string%22)%3B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20min(%26a%2C%20%26b))%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20min%3C%27a%3E(a%3A%20%26%27a%20str%2C%20b%3A%20%26%27a%20str)%20-%3E%20%26%27a%20str%20%7B%0A%20%20%20%20if%20a.len()%20%3C%20b.len()%20%7B%0A%20%20%20%20%20%20%20%20return%20a%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20return%20b%3B%0A%20%20%20%20%7D%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Here is the example in the Rust Playground</a>.</p>\n\n<p>If we refer to the <a href=\"https://doc.rust-lang.org/nomicon/lifetimes.html\" rel=\"noreferrer\">Rustonomicon</a> (which I appreciate is a work in progress doc), we are told that the meaning of a function signature like:</p>\n\n<pre><code>fn as_str&lt;'a&gt;(data: &amp;'a u32) -&gt; &amp;'a str\n</code></pre>\n\n<p>means the function:</p>\n\n<blockquote>\n  <p>takes a reference to a <code>u32</code> with some lifetime, and promises that it can produce a reference to a <code>str</code> that can live just as long.</p>\n</blockquote>\n\n<p>Now let's turn to the signature of <code>min()</code> from my example:</p>\n\n<pre><code>fn min&lt;'a&gt;(a: &amp;'a str, b: &amp;'a str) -&gt; &amp;'a str\n</code></pre>\n\n<p>This is more invloved, since:</p>\n\n<ul>\n<li>We have two input references.</li>\n<li>Their referents are defined in different scopes meaning that they are valid for different lifetimes (<code>a</code> is valid longer).</li>\n</ul>\n\n<p>Using similar wording to the quoted statement above, what does the function signature of <code>min()</code> mean?</p>\n\n<ol>\n<li><p><strong>The function accepts two references and promises to produce a reference to a <code>str</code> that can live as long as the referents of <code>a</code> <em>and</em> <code>b</code>?</strong> That feels wrong somehow, as if we return the reference to <code>b</code> from <code>min()</code>, then clearly that reference is not valid for the lifetime of <code>a</code> in <code>main()</code>.</p></li>\n<li><p><strong>The function accepts two references and promises to produce a reference to a <code>str</code> that can live as long as the shorter of the two referents of <code>a</code> <em>and</em> <code>b</code>?</strong> That could work, since both referents of <code>a</code> and <code>b</code> remain valid in the inner scope of <code>main()</code>.</p></li>\n<li><p><strong>Something else entirely?</strong></p></li>\n</ol>\n\n<p>To summarise, I don't understand what it means to bind the lifetimes of the two input references of <code>min()</code> to the same lifetime when their referents are defined in different scopes in the caller.</p>\n"}, {"tags": ["rust", "docopt"], "comments": [{"owner": {"reputation": 4318, "user_id": 681870, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/efd42a5f2e0cec71c5b93f0113273213?s=128&d=identicon&r=PG", "display_name": "J. P. Petersen", "link": "https://stackoverflow.com/users/681870/j-p-petersen"}, "edited": false, "score": 2, "creation_date": 1489579823, "post_id": 42803218, "comment_id": 72730951, "body": "Could you explain how you would set the value to false?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489582840, "post_id": 42803218, "comment_id": 72733122, "body": "If there&#39;s no way to set it to <code>false</code>, then the problem is easily solved: <code>const FLAG_AN_OPTION_WITH_DEFAULT_TRUE: bool = true;</code>"}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489588050, "post_id": 42803218, "comment_id": 72737329, "body": "@Shepmaster Errm, the issue is that if a flag defaults to true, then there is no way for an end user to set the flag to false. Because of that, it doesn&#39;t make sense to default a flag to true. A flag is either given (true) or not (false)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1489589270, "post_id": 42803218, "comment_id": 72738354, "body": "@BurntSushi5 I know, my comment was tongue-in-cheek ;-)"}], "answers": [{"tags": [], "owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "is_accepted": false, "score": 1, "last_activity_date": 1489588122, "creation_date": 1489588122, "answer_id": 42812626, "question_id": 42803218, "link": "https://stackoverflow.com/questions/42803218/is-it-possible-to-set-a-boolean-option-as-true-by-default-in-rusts-docopt/42812626#42812626", "title": "Is it possible to set a boolean option as &#39;true&#39; by default in Rust&#39;s docopt?", "body": "<p>No.</p>\n\n<p>Docopt itself does not provide a way to \"disable\" a flag, so if a flag defaulted to true---even when it's not given by an end user---then it would be impossible for that flag to ever be <code>false</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1489626027, "last_edit_date": 1495541367, "creation_date": 1489607541, "answer_id": 42819429, "question_id": 42803218, "link": "https://stackoverflow.com/questions/42803218/is-it-possible-to-set-a-boolean-option-as-true-by-default-in-rusts-docopt/42819429#42819429", "title": "Is it possible to set a boolean option as &#39;true&#39; by default in Rust&#39;s docopt?", "body": "<p>The <a href=\"https://stackoverflow.com/a/42812626/155423\">author of the crate says it's not possible</a>, so that's as authoritative of an answer you can get.</p>\n\n<hr>\n\n<p>As an <em>alternative</em>, you can take an argument that defaults to \"true\":</p>\n\n<pre><code>const USAGE: &amp;'static str = \"\nHello World. \n\nUsage:\n  helloworld [options]\n\nOptions:\n  --an-option=&lt;arg&gt;   This option should by default be true [default: true].\n\";\n\n#[derive(Debug, RustcDecodable)]\nstruct Args {\n    flag_an_option: String,\n}\n\nimpl Args {\n    // ...\n\n    fn an_option(&amp;self) -&gt; bool {\n        self.flag_an_option == \"true\"\n    }\n}\n\nfn main() {\n    let a = Args::init(\"dummy\");\n    println!(\"{}\", a.an_option()); // true\n\n    let a = Args::init(\"dummy --an-option=false\");\n    println!(\"{}\", a.an_option()); // false\n\n    let a = Args::init(\"dummy --an-option=true\");\n    println!(\"{}\", a.an_option()); // true\n}\n</code></pre>\n\n<p>Or you could have a flag that has inverse logic:</p>\n\n<pre><code>const USAGE: &amp;'static str = \"\nHello World. \n\nUsage:\n  helloworld [options]\n\nOptions:\n  --disable-an-option\n\";\n\n#[derive(Debug, RustcDecodable)]\nstruct Args {\n    flag_disable_an_option: bool,\n}\n\nimpl Args {\n    // ... \n\n    fn an_option(&amp;self) -&gt; bool {\n        !self.flag_disable_an_option\n    }\n}\n\nfn main() {\n    let a = Args::init(\"dummy\");\n    println!(\"{}\", a.an_option()); // true\n\n    let a = Args::init(\"dummy --disable-an-option\");\n    println!(\"{}\", a.an_option()); // false\n}\n</code></pre>\n\n<p>Remember that you can implement methods on the parsed argument struct that make it easier to deal with.</p>\n"}], "owner": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1366, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1489626027, "creation_date": 1489561895, "last_edit_date": 1489581792, "question_id": 42803218, "link": "https://stackoverflow.com/questions/42803218/is-it-possible-to-set-a-boolean-option-as-true-by-default-in-rusts-docopt", "title": "Is it possible to set a boolean option as &#39;true&#39; by default in Rust&#39;s docopt?", "body": "<p>By default, a boolean field is set to <code>false</code>, but I want it set to <code>true</code> by default. </p>\n\n<p>I tried to use <code>[default: true]</code> in the <code>docopt</code> description, but it seems <code>default</code> cannot be applied to a boolean option. I also tried to use Rust's <code>Default</code> trait - it doesn't work either. </p>\n\n<p>The following is a minimal example:</p>\n\n<pre><code>extern crate rustc_serialize;\nextern crate docopt;\n\nuse docopt::Docopt;\n\nconst USAGE: &amp;'static str = \"\nHello World. \n\nUsage:\n  helloworld [options]\n\nOptions:\n  --an-option-with-default-true   This option should by default be true\n\";\n\n#[derive(Debug, RustcDecodable)]\nstruct Args {\n    flag_an_option_with_default_true: bool,\n}\n\nimpl Args {\n    pub fn init(str: &amp;str) -&gt; Args {\n        Docopt::new(USAGE)\n            .and_then(|d| d.argv(str.split_whitespace().into_iter()).parse())\n            .unwrap_or_else(|e| e.exit())\n            .decode()\n            .unwrap()\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 111, "user_id": 7679205, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/1785230388414883/picture?type=large", "display_name": "Atsuki Takahashi", "link": "https://stackoverflow.com/users/7679205/atsuki-takahashi"}, "edited": false, "score": 0, "creation_date": 1489551447, "post_id": 42800862, "comment_id": 72715800, "body": "Rust&#39;s type system is so smart ! Thanks for answering !"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 111, "user_id": 7679205, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/1785230388414883/picture?type=large", "display_name": "Atsuki Takahashi", "link": "https://stackoverflow.com/users/7679205/atsuki-takahashi"}, "edited": false, "score": 0, "creation_date": 1489579466, "post_id": 42800862, "comment_id": 72730668, "body": "@AtsukiTakahashi: Pedantically, this is not the type system but the compiler being smart here. And yes, rustc is all kinds of smart!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1489550413, "creation_date": 1489550413, "answer_id": 42800862, "question_id": 42800789, "link": "https://stackoverflow.com/questions/42800789/can-rust-call-abstract-functions/42800862#42800862", "title": "Can Rust call abstract functions?", "body": "<p>The key is the signature of the method:</p>\n\n<pre><code>fn from_dataframes&lt;D&gt;(frames: Vec&lt;D&gt;) -&gt; WebSocketResult&lt;Self&gt;\n</code></pre>\n\n<p>When the compiler goes to unify the types, it can use the return type of <code>recv_message</code> (<em>i.e.</em> <code>WebSocketResult&lt;M&gt;</code>) to infer that the result of <code>from_dataframes</code> must be the same type, which means the <code>Self</code> type in question is <code>M</code>, which means that what you <em>really</em> meant was:</p>\n\n<pre><code>&lt;M as Message&gt;::from_dataframes(dataframes)\n</code></pre>\n\n<p>If there was no connection between the implementing type and the method signature, then it wouldn't work, because the compiler would have nothing to base its reasoning on.</p>\n"}], "owner": {"reputation": 111, "user_id": 7679205, "user_type": "registered", "accept_rate": 50, "profile_image": "https://graph.facebook.com/1785230388414883/picture?type=large", "display_name": "Atsuki Takahashi", "link": "https://stackoverflow.com/users/7679205/atsuki-takahashi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 298, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1489581702, "creation_date": 1489549846, "last_edit_date": 1489581702, "question_id": 42800789, "link": "https://stackoverflow.com/questions/42800789/can-rust-call-abstract-functions", "title": "Can Rust call abstract functions?", "body": "<p>I found some complicated code in the <a href=\"http://cyderize.github.io/rust-websocket/doc/websocket/index.html\" rel=\"nofollow noreferrer\">websocket</a> library which seems to call an abstract function in the <a href=\"http://cyderize.github.io/rust-websocket/doc/websocket/ws/receiver/trait.Receiver.html#method.recv_message\" rel=\"nofollow noreferrer\"><code>Receiver</code></a> trait.</p>\n\n<pre><code>fn recv_message&lt;'m, D, M, I&gt;(&amp;mut self) -&gt; WebSocketResult&lt;M&gt;\n    where M: Message&lt;'m, D, DataFrameIterator = I&gt;,\n          I: Iterator&lt;Item = D&gt;,\n          D: DataFrame\n{\n    let dataframes = try!(self.recv_message_dataframes());\n    Message::from_dataframes(dataframes) // Isn't this an abstract function?\n}\n</code></pre>\n\n<p>The code for <code>ws::Message</code> trait:</p>\n\n<pre><code>pub trait Message&lt;'a, F&gt;: Sized\n    where F: DataFrame\n{\n    type DataFrameIterator: Iterator&lt;Item = F&gt;;\n    fn from_dataframes&lt;D&gt;(frames: Vec&lt;D&gt;) -&gt; WebSocketResult&lt;Self&gt; where D: DataFrame;\n    fn dataframes(&amp;'a self) -&gt; Self::DataFrameIterator;\n}\n</code></pre>\n\n<p>It looks like it shouldn't work because Rust wouldn't know which function to call.  How does it work?</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489519971, "post_id": 42794578, "comment_id": 72704473, "body": "<i>Interesting that I don&#39;t need <code>App&lt;T, U&gt;</code> here</i> \u2014 that&#39;s because you are saying that <code>Term</code> is only implemented when both children of <code>App</code> are the <b>same type</b>. <code>App&lt;u8, u8&gt;</code> is OK, <code>App&lt;u8, u32&gt;</code> would not be."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489521033, "post_id": 42794578, "comment_id": 72705079, "body": "This means I do need it after all - I might not have triggered an error yet, but I want different variations of <code>App</code> to be <code>Term</code>s too."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1489526366, "post_id": 42794858, "comment_id": 72708132, "body": "I was wondering about several individual implementations, but it still causes trouble, e.g. with <code>App&lt;Var, App&gt;</code>, because the inner <code>App</code> expects 2 type arguments again - is there any way around it?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1489530846, "last_edit_date": 1489530846, "creation_date": 1489519598, "answer_id": 42794858, "question_id": 42794578, "link": "https://stackoverflow.com/questions/42794578/how-to-match-on-concrete-types-of-generic-struct-fields/42794858#42794858", "title": "How to match on concrete types of generic struct fields?", "body": "<blockquote>\n  <p>I would like to print <code>App</code> differently based on the types of its contents.</p>\n</blockquote>\n\n<p>That's easy enough, just implement <code>Display</code> for every unique type of <code>App</code> you wish to be able to print:</p>\n\n<pre><code>use std::fmt;\n\nstruct App&lt;T, U&gt;(T, U);\n\nimpl fmt::Display for App&lt;i32, bool&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Awesome choice!\")\n    }\n}\n\nimpl fmt::Display for App&lt;bool, String&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Woah, a string? Really?\")\n    }\n}\n\nfn main() {\n    println!(\"{}\", App(42i32, false));\n    println!(\"{}\", App(true, \"wow\".to_string()));\n}\n</code></pre>\n\n<p>You can also accept further types that have their own generics:</p>\n\n<pre><code>impl&lt;T&gt; fmt::Display for App&lt;Vec&lt;T&gt;, char&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{} of them; {}\", self.0.len(), self.1)\n    }\n}\n</code></pre>\n\n<p>Note that this has no <code>unimplemented!</code> call; everything is checked at compile time:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `App&lt;bool, bool&gt;: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:24:24\n   |\n24 |         println!(\"{}\", App(true, false));\n   |                        ^^^^^^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `App&lt;bool, bool&gt;`\n   |\n   = note: `App&lt;bool, bool&gt;` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>This has a close analog in the standard library: <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>Cursor</code></a>. This type accepts a generic, but all of the interesting functionality is only implemented for a handful of concrete types like <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code>.</p>\n\n<blockquote>\n  <p>but it still causes trouble, e.g. with <code>App&lt;Var, App&gt;</code>, because the inner <code>App</code> expects 2 type arguments again</p>\n</blockquote>\n\n<p>Yes, you have to specify the generics because <code>App</code> <em>isn't a type</em>, it's only a stepping stone towards one.</p>\n\n<p>It all depends on what you want to do. The simplest is to just have an <code>App</code> composed of two types of any kind, so long as you don't use them:</p>\n\n<pre><code>impl&lt;T, U&gt; fmt::Display for App&lt;i32, App&lt;T, U&gt;&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Semi-awesome\")\n    }\n}\n</code></pre>\n\n<p>If you want to be able to display the <code>App</code>, then you need to restrict the generics such that <code>App</code> is displayable:</p>\n\n<pre><code>impl&lt;T, U&gt; fmt::Display for App&lt;i32, App&lt;T, U&gt;&gt;\n    where App&lt;T, U&gt;: fmt::Display,\n{\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"({}) squared!\", self.1)\n    }\n}\n</code></pre>\n\n<p>Check it out with</p>\n\n<pre><code>fn main() {\n    let a = App(42i32, false);\n    println!(\"{}\", a);\n    let b = App(100, a);\n    println!(\"{}\", b);\n    let c = App(100, b);\n    println!(\"{}\", c);\n}\n</code></pre>\n\n<hr>\n\n<p>I have a guess that the follow up question will be something about having some kind of fallback or default case for all the non-special conditions. Something like:</p>\n\n<pre><code>impl fmt::Display for App&lt;i32, bool&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Awesome choice!\")\n    }\n}\n\nimpl&lt;T: fmt::Display, U: fmt::Display&gt; fmt::Display for App&lt;T, U&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Boring: {} + {}\", self.0, self.1)\n    }\n}\n</code></pre>\n\n<p>Nope, that won't compile! <code>i32</code> and <code>bool</code> <strong>also implement <code>Display</code></strong> so it is ambiguous which implementation to select. At this point, you are into the realm of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">specialization</a>. This forces you to truly understand the <em>orphan rules</em>. </p>\n\n<p>As far as I understand the current implementation of specialization, you cannot specialize on a concrete type, only on traits.</p>\n"}], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 973, "favorite_count": 0, "accepted_answer_id": 42794858, "answer_count": 1, "score": 1, "last_activity_date": 1489588977, "creation_date": 1489518515, "last_edit_date": 1489588977, "question_id": 42794578, "link": "https://stackoverflow.com/questions/42794578/how-to-match-on-concrete-types-of-generic-struct-fields", "title": "How to match on concrete types of generic struct fields?", "body": "<p>I'm playing around with the lambda calculus, but since I'm not too generics-savvy, I would like to confirm my understanding of some things and resolve an error. Consider the following definitions:</p>\n\n<pre><code>pub trait Term {} // a lambda term - a variable, an abstraction or an application\n\npub struct Var(pub usize); // a variable, De Bruijn style\npub struct Abs&lt;T: Term&gt;(T); // an abstraction\npub struct App&lt;T: Term, U: Term&gt;(T, U); // application of T on U\n</code></pre>\n\n<p>I understand (i.e. otherwise it doesn't work) that I need <code>App</code> to be generic over <code>&lt;T: Term, U: Term&gt;</code> as opposed to just <code>&lt;T: Term&gt;</code> to be able to e.g. apply a <code>Var</code> to an <code>App</code>, i.e. to have an <code>App(Var(x), App(...))</code>.</p>\n\n<p>The aforementioned structs are all <code>Term</code>s:</p>\n\n<pre><code>impl Term for Var {}\nimpl&lt;T: Term&gt; Term for Abs&lt;T&gt; {}\nimpl&lt;T: Term&gt; Term for App&lt;T, T&gt; {}\n</code></pre>\n\n<p>Interesting that I don't need <code>App&lt;T, U&gt;</code> here, but hopefully so far so good - now I would like to implement <code>fmt::Display</code> for the aforementioned structs:</p>\n\n<pre><code>use std::fmt;\nuse std::fmt::Display;\n\nimpl fmt::Display for Var {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"{}\", self.0)\n    }\n}\n\nimpl&lt;T: Term+Display&gt; Display for Abs&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"\u03bb{}\", self.0)\n    }\n}\n</code></pre>\n\n<p>These two <code>impl</code>s work just fine; I'm including them since the next one relies on them:</p>\n\n<pre><code>impl&lt;T: Term+Display&gt; Display for App&lt;T, T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n            App(Var(_), Var(_)) =&gt; write!(f, \"{}{}\", self.0, self.1),\n            _ =&gt; unimplemented!()\n        }\n    }\n}\n</code></pre>\n\n<p>But it fails with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src\\ast.rs:34:8\n   |\n34 |                    App(Var(_), Var(_)) =&gt; write!(f, \"{}{}\", self.0, self.1),\n   |                        ^^^^^^ expected type parameter, found struct `ast::Var`\n   |\n   = note: expected type `T`\n   = note:    found type `ast::Var`\n</code></pre>\n\n<p>I would like to print <code>App</code> differently based on the types of its contents. I tried to find a related question, but they mostly revolve around associated types. Is there a simple solution or do I have to rework the definitions?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1489516700, "post_id": 42793606, "comment_id": 72702517, "body": "In C this would look like a good candidate for a macro, wonder if macro is the way to go in Rust too..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1489517577, "post_id": 42793606, "comment_id": 72703041, "body": "@turbulencetoo an interesting idea. In C, a macro is lower-level text manipulation, which can result in invalid source code. In Rust, the number of places you can invoke a macro is limited and the expansion must be syntactically valid. I don&#39;t think that patterns are in the set of valid places. You could always do some type of build script to generate text files that happen to result in valid Rust code, however."}], "answers": [{"comments": [{"owner": {"reputation": 2568, "user_id": 4411558, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90e851e46386fc187059016dd06bbd36?s=128&d=identicon&r=PG", "display_name": "\u5f20\u5b9e\u552f", "link": "https://stackoverflow.com/users/4411558/%e5%bc%a0%e5%ae%9e%e5%94%af"}, "edited": false, "score": 0, "creation_date": 1568616216, "post_id": 42794024, "comment_id": 102315412, "body": "Will the guard clause version have the same performance? For example, would it prevent the main match expression being compiled to a single jump table?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2568, "user_id": 4411558, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/90e851e46386fc187059016dd06bbd36?s=128&d=identicon&r=PG", "display_name": "\u5f20\u5b9e\u552f", "link": "https://stackoverflow.com/users/4411558/%e5%bc%a0%e5%ae%9e%e5%94%af"}, "edited": false, "score": 0, "creation_date": 1568655651, "post_id": 42794024, "comment_id": 102335269, "body": "@\u5f20\u5b9e\u552f that assumes that it would be a jump table to start with. I don&#39;t know that there are any guarantees you can assume here. Profiling and looking at the generated code is the best path."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1546366779, "last_edit_date": 1546366779, "creation_date": 1489516825, "answer_id": 42794024, "question_id": 42793606, "link": "https://stackoverflow.com/questions/42793606/how-can-i-store-a-pattern-in-a-variable-in-rust/42794024#42794024", "title": "How can I store a pattern in a variable in Rust?", "body": "<blockquote>\n  <p>Can patterns be stored in variables somehow?</p>\n</blockquote>\n\n<p>No. Patterns are a compile-time construct, and variables hold run-time concepts.</p>\n\n<blockquote>\n  <p>Is there a better or more idiomatic way to do this?</p>\n</blockquote>\n\n<p>Creating a function or method is always a good solution to avoid repeating code. You can then use this as a <em>guard clause</em>:</p>\n\n<pre><code>fn is_whitespace(c: char) -&gt; bool {\n    match c {\n        ' ' | '\\n' | '\\t' | '\\r' =&gt; true,\n        _ =&gt; false,\n    }\n}\n\nfn main() {\n    let ch = ' ';\n\n    match ch {\n        x if is_whitespace(x) =&gt; println!(\"whitespace\"),\n        _ =&gt; println!(\"token\"),\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>I'd also strongly recommend using an existing parser, <a href=\"https://crates.io/categories/parsing\" rel=\"noreferrer\">of which there are a multitude</a>, but everyone wants their Rust \"hello world\" to be parsing, for whatever reason.</p>\n\n<p>A parsing library I use allows writing code akin to this, where <code>whitespace</code> is a function that knows how to parse the valid types of whitespace:</p>\n\n<pre><code>sequence!(pm, pt, {\n    _          = literal(\"if\");\n    ws         = whitespace;\n    _          = literal(\"let\");\n    ws         = append_whitespace(ws);\n    pattern    = pattern;\n    ws         = optional_whitespace(ws);\n    _          = literal(\"=\");\n    ws         = optional_whitespace(ws);\n    expression = expression;\n}, |_, _| /* do something with pieces */);\n</code></pre>\n\n<p>Each of the things on the right-hand side are still individual functions that know how to parse something specific.</p>\n"}], "owner": {"reputation": 2475, "user_id": 968496, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/8c7e97fd69d4b075b9babdb3258c1c90?s=128&d=identicon&r=PG", "display_name": "Brennan Cheung", "link": "https://stackoverflow.com/users/968496/brennan-cheung"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 962, "favorite_count": 0, "accepted_answer_id": 42794024, "answer_count": 1, "score": 10, "last_activity_date": 1546366779, "creation_date": 1489515435, "last_edit_date": 1489516857, "question_id": 42793606, "link": "https://stackoverflow.com/questions/42793606/how-can-i-store-a-pattern-in-a-variable-in-rust", "title": "How can I store a pattern in a variable in Rust?", "body": "<p>I'm implementing a parser in Rust and whitespace is a common pattern that I want to reuse in <code>match</code> patterns.</p>\n\n<p>This code works:</p>\n\n<pre><code>let ch = ' ';\n\nmatch ch {\n    ' ' | '\\n' | '\\t' | '\\r' =&gt; println!(\"whitespace\"),\n     _ =&gt; println!(\"token\"),\n}\n</code></pre>\n\n<p>This would get really repetitive if I need to keep on specifying the whitespace pattern each time.  I would like to define that once and reuse it.  I want to do something like:</p>\n\n<pre><code>let whitespace = ' ' | '\\n' | '\\t' | '\\r';\n\nlet ch = ' ';\n\nmatch ch {\n    whitespace =&gt; println!(\"whitespace\"),\n    _          =&gt; println!(\"token\"),\n}\n</code></pre>\n\n<p>The compiler does not like the <code>ws</code> assignment.  It interprets the <code>|</code> as a binary operation instead of alternation.</p>\n\n<p>Can patterns be stored in variables somehow?  Is there a better or more idiomatic way to do this?</p>\n"}, {"tags": ["rust", "nom"], "answers": [{"tags": [], "owner": {"reputation": 1452, "user_id": 203955, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ed9901b9b80743c05aedf58b4f4926dd?s=128&d=identicon&r=PG", "display_name": "G&#233;al", "link": "https://stackoverflow.com/users/203955/g%c3%a9al"}, "is_accepted": true, "score": 1, "last_activity_date": 1489581485, "last_edit_date": 1489581485, "creation_date": 1489570813, "answer_id": 42805959, "question_id": 42790494, "link": "https://stackoverflow.com/questions/42790494/parse-an-integer-to-a-float-using-nom/42805959#42805959", "title": "Parse an integer to a float using Nom", "body": "<p>You need to wrap the <code>tag!(\".\")</code> with <code>complete!</code> too, as follows:</p>\n\n<pre><code>named!(unsigned_float_v2 &lt;f32&gt;,\n    map_res!(\n        map_res!(\n            recognize!(\n                alt!(\n                    delimited!(digit, complete!(tag!(\".\")), opt!(complete!(digit))) |\n                    delimited!(opt!(digit), complete!(tag!(\".\"), digit) |\n                    digit\n                )\n            ),\n            str::from_utf8\n        ),\n        FromStr::from_str\n    )\n);\n</code></pre>\n\n<p>If the input is <code>123</code>, the <code>tag!</code> would return <code>Incomplete</code> because it cannot decide if the next input is a <code>.</code></p>\n"}], "owner": {"reputation": 2559, "user_id": 665869, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b73cd84b791b01148061a5dab96eebc6?s=128&d=identicon&r=PG", "display_name": "mitnk", "link": "https://stackoverflow.com/users/665869/mitnk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 736, "favorite_count": 0, "accepted_answer_id": 42805959, "answer_count": 1, "score": 0, "last_activity_date": 1489581485, "creation_date": 1489506346, "last_edit_date": 1489522923, "question_id": 42790494, "link": "https://stackoverflow.com/questions/42790494/parse-an-integer-to-a-float-using-nom", "title": "Parse an integer to a float using Nom", "body": "<p>Nom has an <a href=\"https://github.com/Geal/nom/blob/3000d54cc643289cc1d75e48a0f49a659a8dbe4a/tests/float.rs#L9-L20\" rel=\"nofollow noreferrer\">example of parsing a floating point number</a>:</p>\n\n<pre><code>named!(unsigned_float &lt;f32&gt;, map_res!(\n  map_res!(\n    recognize!(\n      alt!(\n        delimited!(digit, tag!(\".\"), opt!(complete!(digit))) |\n        delimited!(opt!(digit), tag!(\".\"), digit)\n      )\n    ),\n    str::from_utf8\n  ),\n  FromStr::from_str\n));\n</code></pre>\n\n<p>I want to extend this example to also support parsing <code>\"123\"</code> to <code>123.0</code>. I've tried something like this with no luck:</p>\n\n<pre><code>named!(unsigned_float_v1 &lt;f32&gt;,\n    map_res!(\n        map_res!(\n            alt!(\n                recognize!(\n                    alt!(\n                        delimited!(digit, tag!(\".\"), opt!(complete!(digit))) |\n                        delimited!(opt!(digit), tag!(\".\"), digit)\n                    )\n                ) |\n                ws!(digit)\n            ),\n            str::from_utf8\n        ),\n        FromStr::from_str\n    )\n);\n\nnamed!(unsigned_float_v2 &lt;f32&gt;,\n    map_res!(\n        map_res!(\n            recognize!(\n                alt!(\n                    delimited!(digit, tag!(\".\"), opt!(complete!(digit))) |\n                    delimited!(opt!(digit), tag!(\".\"), digit) |\n                    digit\n                )\n            ),\n            str::from_utf8\n        ),\n        FromStr::from_str\n    )\n);\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1489505932, "post_id": 42790156, "comment_id": 72694982, "body": "One way would be to store <code>Option&lt;thread::JoinHandle&lt;()&gt;&gt;</code> and <code>.take()</code> it in the <code>Drop</code> impl."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1489506196, "post_id": 42790156, "comment_id": 72695188, "body": "@Dogbert I thought about mem::replace, but looks like no way to create empty JoinHandle for replacement."}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 582, "favorite_count": 0, "closed_date": 1489507182, "answer_count": 0, "score": 2, "last_activity_date": 1489507049, "creation_date": 1489505418, "last_edit_date": 1489507049, "question_id": 42790156, "link": "https://stackoverflow.com/questions/42790156/how-to-join-thread-in-drop-function", "closed_reason": "Duplicate", "title": "How to join thread in drop function?", "body": "<p>I want to stop a thread after a structure \"goes away\":</p>\n\n<pre><code>use std::thread;\n\nstruct Foo {\n    handle: thread::JoinHandle&lt;()&gt;,\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"we drop data\");\n        self.handle.join();\n    }\n}\n\nfn main() {\n    let handle = thread::spawn(|| println!(\"hi from thread\"));\n    let _ = Foo { handle: handle };\n}\n</code></pre>\n\n<p>but it doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0509]: cannot move out of type `Foo`, which implements the `Drop` trait\n  --&gt; src/main.rs:10:9\n   |\n10 |         self.handle.join();\n   |         ^^^^^^^^^^^ cannot move out of here\n</code></pre>\n\n<p>This is because <code>join</code> takes <code>self</code>, not <code>&amp;mut self</code>. How can I join this thread in the <code>drop</code> method?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1489486091, "post_id": 42778697, "comment_id": 72680009, "body": "I don&#39;t think the &quot;word&quot; size can be queried, because it is meaningless semantically. If you explain what you intend to check with this size, it would be easier: are you looking for pointer size? atomic size? something else?"}, {"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489558198, "post_id": 42778697, "comment_id": 72717893, "body": "@MatthieuM. That&#39;s poor reasoning for a systems language. As for the reason, it&#39;s to select optimal algorithms and unsigned integer types for a set of mathematical calculations for each arch. Moreover, I don&#39;t see how my specific goals are relevant to a general question as the one I asked here."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489563631, "post_id": 42778697, "comment_id": 72720355, "body": "I am afraid that you do not understand how modern architectures work, it&#39;s a tad work complicated than just a &quot;silver bullet&quot; word size. 64-bits processors, for example, which can handle both u32 and u64 operations may be faster on 64-bits operations, in isolation, but can perform more 32-bits operations in a single cycle, and twice as many u32 can fit in a single cache line as u64. So whether to use u32 or u64 for better speed is NOT as simple as querying &quot;a word size&quot;... not any longer. Which is why I am saying that &quot;a word size&quot; is no longer meaningful in general."}, {"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489588610, "post_id": 42778697, "comment_id": 72737799, "body": "@MatthieuM. Perhaps in general, but Rust claims to be a systems language, a language that by definition deals with specifics. Can this be said for all architecture targets supported by Rust? Not all software is written for x86. (In this instance, it&#39;s targeted towards ARM). From my testing (with --release, and holding system load, algorithm used, and cpu temperature constant), the 64-bit code path completes in about half the time (0.58) compared to its 32-bit counterpart on 64-bit systems (which is more or less aligned with my assumptions)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489589363, "post_id": 42778697, "comment_id": 72738423, "body": "Rust <b>is</b> a systems language, this has nothing to do with this though. The problem is one of vocabulary; it&#39;s not clear what <code>word</code> means. As a simple example, <a href=\"https://en.wikipedia.org/wiki/Word_%28computer_architecture%29\" rel=\"nofollow noreferrer\">x86-64 is a 64-bits architecture with a 16-bits word size according to Wikipedia</a>. Do you want your program to use 16-bits integrals on x86_64?"}, {"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489641309, "post_id": 42778697, "comment_id": 72762433, "body": "@MatthieuM. Fair enough. I should have used more precise wording. Should the title be changed to a less ambiguous title (i.e &quot;How to conditionally compile based on largest data register size available&quot;)? It might hurt search engine discoverability though."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489649804, "post_id": 42778697, "comment_id": 72765930, "body": "I don&#39;t think that&#39;s what you want either, due to vectorized instructions there are registers of up to 512 bits now (on x86_64 and at least 256 bits on ARM). I fully understand what you are aiming for, and I have no idea how to name it. It used to be that C would name the corresponding type <code>int</code>, but even that didn&#39;t survive the 64-bits transition as people worried than since <code>int</code> had been 32-bits for so long making it 64-bits would break stuff. I guess what you would want is &quot;the size of the fastest integer&quot;, but as I mentioned early... it may not be the fastest for your algorithm."}], "answers": [{"comments": [{"owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "edited": false, "score": 0, "creation_date": 1489558485, "post_id": 42778839, "comment_id": 72718008, "body": "<code>target_has_atomic</code> is effectively equivalent to what I&#39;m looking for. I&#39;m using rust 1.9, which didn&#39;t list this attribute."}], "tags": [], "owner": {"reputation": 1427, "user_id": 4381423, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/W5qHX.jpg?s=128&g=1", "display_name": "Mark Mucha", "link": "https://stackoverflow.com/users/4381423/mark-mucha"}, "is_accepted": true, "score": 4, "last_activity_date": 1489494805, "last_edit_date": 1489494805, "creation_date": 1489471688, "answer_id": 42778839, "question_id": 42778697, "link": "https://stackoverflow.com/questions/42778697/how-to-conditionally-compile-code-on-target-word-size-in-rust/42778839#42778839", "title": "How to conditionally compile code on target word size in Rust?", "body": "<p>According to <a href=\"https://doc.rust-lang.org/reference.html#conditional-compilation\" rel=\"nofollow noreferrer\">the conditional compilation docs</a>, you can use one of the following to get close to what you're looking for.</p>\n\n<pre><code>target_pointer_width = \"...\"\n\ntarget_has_atomic = \"...\" // one of \"8\", \"16\", \"32\", \"64\" and \"ptr\".\n</code></pre>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 483, "favorite_count": 0, "closed_date": 1489494757, "accepted_answer_id": 42778839, "answer_count": 1, "score": 1, "last_activity_date": 1489494805, "creation_date": 1489471060, "question_id": 42778697, "link": "https://stackoverflow.com/questions/42778697/how-to-conditionally-compile-code-on-target-word-size-in-rust", "closed_reason": "Duplicate", "title": "How to conditionally compile code on target word size in Rust?", "body": "<p>On x86 systems, it's usually 32-bit words. On x86_64, it's 64 bits. How can this value be used to conditionally compile code? </p>\n\n<p>The reference lists a number attributes that <code>#[cfg()]</code> exposes, but word size doesn't seem to be one of those exposed.</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489486757, "post_id": 42777894, "comment_id": 72680539, "body": "Note: the <code>Copy</code> bound is superfluous here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489495022, "post_id": 42777894, "comment_id": 72686400, "body": "<i><code>String</code> is not an implementor of <code>Into&lt;i64&gt;</code></i> \u2014 not <b>now</b>, it isn&#39;t."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489494938, "post_id": 42783264, "comment_id": 72686340, "body": "Or <code>cargo --explain e0119</code> or <code>rustc --explain e0119</code>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1489486776, "creation_date": 1489486776, "answer_id": 42783264, "question_id": 42777894, "link": "https://stackoverflow.com/questions/42777894/e0119-error-with-generic-trait-implementation/42783264#42783264", "title": "E0119 error with generic trait implementation", "body": "<p><strong>TL;DR: <code>where</code> clauses don't count.</strong></p>\n\n<hr>\n\n<p>The crux of the issue is that the conflict detection is <em>solely pattern based</em> at the moment: it does not account for <code>where</code> clauses.</p>\n\n<p>The problem is 3-fold:</p>\n\n<ol>\n<li>Deciding whether <code>where</code> clauses allow overlap or not is quite complicated,</li>\n<li>Deciding which <code>where</code> clause is more specialized than another is quite complicated (upcoming specialization),</li>\n<li>Allowing <em>negative reasoning</em> means that adding a trait implementation in the library code is now a breaking change.</li>\n</ol>\n\n<p>The first two are purely implementation details, however the latter is a real concern in terms of language design. Imagine that:</p>\n\n<ul>\n<li>your code doesn't have the <code>Copy</code> bound,</li>\n<li>the Rust team decides to make parsing easier and add <code>impl Into&lt;i64&gt; for &amp;str</code>.</li>\n</ul>\n\n<p>And suddenly, there's a conflict where there was none before! You cannot upgrade!</p>\n\n<p>So there's a real design choice here. You have to pick between:</p>\n\n<ul>\n<li>being able to write impl that do not conflict (yet),</li>\n<li>being able to upgrade your dependencies painlessly.</li>\n</ul>\n\n<p>You can't have both.</p>\n\n<hr>\n\n<p><em>Note: try typing <code>Rust explain &lt;code&gt;</code> in your search engine of choice, and behold <a href=\"https://doc.rust-lang.org/error-index.html#E0119\" rel=\"noreferrer\">E0119</a>. Although it's not that helpful here.</em></p>\n"}], "owner": {"reputation": 263, "user_id": 2752617, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6fa102a12ce01b661aa42b11fc271bf9?s=128&d=identicon&r=PG&f=1", "display_name": "tanagumo", "link": "https://stackoverflow.com/users/2752617/tanagumo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1030, "favorite_count": 0, "accepted_answer_id": 42783264, "answer_count": 1, "score": 8, "last_activity_date": 1489494878, "creation_date": 1489466637, "last_edit_date": 1489494878, "question_id": 42777894, "link": "https://stackoverflow.com/questions/42777894/e0119-error-with-generic-trait-implementation", "title": "E0119 error with generic trait implementation", "body": "<p>I have an enum:</p>\n\n<pre><code>enum Field {\n    Str(String),\n    Integer(i64),\n}\n</code></pre>\n\n<p>I want to do:</p>\n\n<pre><code>impl From&lt;String&gt; for Field {\n    fn from(s: String) -&gt; Field {\n        Field::Str(s)\n    }\n}\n\nimpl&lt;I&gt; From&lt;I&gt; for Field where I: Into&lt;i64&gt; + Copy {\n    fn from(i: I) -&gt; Field {\n        Field::Integer(Into::&lt;i64&gt;::into(i))\n    }\n}\n</code></pre>\n\n<p>This code above has an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0119]: conflicting implementations of trait\n`std::convert::From&lt;std::string::String&gt;` for type `Field`:\n--&gt; &lt;anon&gt;:12:5\n   |\n6  |          impl From&lt;String&gt; for Field {\n   |  ________- starting here...\n7  | |       fn from(s: String) -&gt; Field {\n8  | |         Field::Str(s)\n9  | |       }\n10 | |     }\n   | |_____- ...ending here: first implementation here\n11 | \n12 |       impl&lt;I&gt; From&lt;I&gt; for Field where I: Into&lt;i64&gt; + Copy {\n   |  _____^ starting here...\n13 | |       fn from(i: I) -&gt; Field {\n14 | |         Field::Integer(Into::&lt;i64&gt;::into(i))\n15 | |       }\n16 | |     }\n   | |_____^ ...ending here: conflicting implementation for `Field`\n</code></pre>\n\n<p><code>String</code> is not an implementor of <code>Into&lt;i64&gt;</code>, so why does error <code>E0119</code> happen?</p>\n"}, {"tags": ["error-handling", "rust", "libc"], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1489436399, "post_id": 42772620, "comment_id": 72660809, "body": "sure, <code>fork</code> was just a dummy example. Where I&#39;m currently stuck is <code>pthread_attr_init</code> which currently seems not supported by <code>nix</code> yet"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1489436561, "post_id": 42772620, "comment_id": 72660879, "body": "@hansaplast then it seems like the correct solution is to submit a PR to nix adding that. Then you would just use whatever mechanism they have already established for converting error codes to elegant types."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1489437184, "post_id": 42772620, "comment_id": 72661207, "body": "@hansaplast remember you can also temporarily fork nix to use your local changes while the PR is being reviewed. That way you aren&#39;t stuck waiting."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 2, "creation_date": 1489437347, "post_id": 42772620, "comment_id": 72661292, "body": "thanks, I have a bit a special case where I am porting C code of a book to Rust and want to stay as close to syscalls as possible for educational purposes, so I guess I&#39;ll go the way where I&#39;ll write a trait with a method per sentinel"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1489437435, "last_edit_date": 1489437435, "creation_date": 1489436056, "answer_id": 42772620, "question_id": 42772307, "link": "https://stackoverflow.com/questions/42772307/how-do-i-handle-errors-from-libc-functions-in-an-idiomatic-rust-manner/42772620#42772620", "title": "How do I handle errors from libc functions in an idiomatic Rust manner?", "body": "<p>The <em>best</em> option is to not reimplement the universe. Instead, use <a href=\"https://crates.io/crates/nix\" rel=\"nofollow noreferrer\">nix</a>, which wraps everything for you and has done the hard work of converting all the error types and handling the sentinel values:</p>\n\n<pre><code>pub fn fork() -&gt; Result&lt;ForkResult&gt;\n</code></pre>\n\n<p>Then just <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"nofollow noreferrer\">use normal error handling</a> like <code>try!</code> or <code>?</code>.</p>\n\n<hr>\n\n<p>Of course, you could rewrite all of nix by converting your trait to returning <code>Result</code>s and including the specific error codes and then use <code>try!</code> or <code>?</code>, but why would you? </p>\n\n<p>There's nothing magical in Rust that converts negative or positive numbers into a domain specific error type for you. The code you already have is the correct approach, once you've enhanced it to use a <code>Result</code> either by creating it directly or via something like <code>ok_or</code>. </p>\n\n<p>An intermediate solution would be to reuse nix's <code>Errno</code> struct, perhaps with your own trait sugar on top.</p>\n\n<blockquote>\n  <p>so this would need another argument</p>\n</blockquote>\n\n<p>I'd say it would be better to have different methods: one for negative sentinel values and one for positive sentinel values.</p>\n"}, {"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1489519281, "post_id": 42773525, "comment_id": 72704090, "body": "great roundup about handling libc&#39;s return types in general! This would be nice as a documentation post"}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 8, "last_activity_date": 1603900715, "last_edit_date": 1603900715, "creation_date": 1489439544, "answer_id": 42773525, "question_id": 42772307, "link": "https://stackoverflow.com/questions/42772307/how-do-i-handle-errors-from-libc-functions-in-an-idiomatic-rust-manner/42773525#42773525", "title": "How do I handle errors from libc functions in an idiomatic Rust manner?", "body": "<p>As indicated in the other answer, use pre-made wrappers whenever possible. Where such wrappers do not exist, the following guidelines might help.</p>\n<h3>Return <code>Result</code> to indicate errors</h3>\n<p>The idiomatic Rust return type that includes error information is <code>Result</code> (<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow noreferrer\"><code>std::result::Result</code></a>). For most functions from POSIX libc, the specialized type <a href=\"https://doc.rust-lang.org/std/io/type.Result.html\" rel=\"nofollow noreferrer\"><code>std::io::Result</code></a> is a perfect fit because it uses <a href=\"https://doc.rust-lang.org/std/io/struct.Error.html\" rel=\"nofollow noreferrer\"><code>std::io::Error</code></a> to encode errors, and it includes all standard system errors represented by <code>errno</code> values. A good way to avoid repetition is using a utility function such as:</p>\n<pre><code>use std::io::{Result, Error};\n\nfn check_err&lt;T: Ord + Default&gt;(num: T) -&gt; Result&lt;T&gt; {\n    if num &lt; T::default() {\n        return Err(Error::last_os_error());\n    }\n    Ok(num)\n}\n</code></pre>\n<p>Wrapping <code>fork()</code> would look like this:</p>\n<pre><code>pub fn fork() -&gt; Result&lt;u32&gt; {\n    check_err(unsafe { libc::fork() }).map(|pid| pid as u32)\n}\n</code></pre>\n<p>The use of <code>Result</code> allows idiomatic usage such as:</p>\n<pre><code>let pid = fork()?;  // ? means return if Err, unwrap if Ok\nif pid == 0 {\n    // child\n    ...\n}\n</code></pre>\n<h3>Restrict the return type</h3>\n<p>The function will be easier to use if the return type is modified so that only &quot;possible&quot; values are included. For example, if a function logically has no return value, but returns an <code>int</code> only to communicate the presence of error, the Rust wrapper should return nothing:</p>\n<pre><code>pub fn dup2(oldfd: i32, newfd: i32) -&gt; Result&lt;()&gt; {\n    check_err(unsafe { libc::dup2(oldfd, newfd) })?;\n    Ok(())\n}\n</code></pre>\n<p>Another example are functions that logically return an unsigned integer, such as a PID or a file descriptor, but still declare their result as signed to include the -1 error return value. In that case, consider returning an unsigned value in Rust, as in the <code>fork()</code> example above. <code>nix</code> takes this one step further by having <code>fork()</code> return <code>Result&lt;ForkResult&gt;</code>, where <code>ForkResult</code> is a real enum with methods such as <code>is_child()</code>, and from which the PID is extracted using pattern matching.</p>\n<h3>Use options and other enums</h3>\n<p>Rust has a rich type system that allows expressing things that have to be encoded as magic values in C. To return to the <code>fork()</code> example, that function returns 0 to indicate the child return. This would be naturally expressed with an <code>Option</code> and can be combined with the <code>Result</code> shown above:</p>\n<pre><code>pub fn fork() -&gt; Result&lt;Option&lt;u32&gt;&gt; {\n    let pid = check_err(unsafe { libc::fork() })? as u32;\n    if pid != 0 {\n        Some(pid)\n    } else {\n        None\n    }\n}\n</code></pre>\n<p>The user of this API would no longer need to compare with the magic value, but would use pattern matching, for example:</p>\n<pre><code>if let Some(child_pid) = fork()? {\n    // execute parent code\n} else {\n    // execute child code\n}\n</code></pre>\n<h3>Return values instead of using output parameters</h3>\n<p>C often returns values using <em>output parameters</em>, pointer parameters into which the results are stored. This is either because the actual return value is reserved for the error indicator, or because more than one value needs to be returned, and returning structs was badly supported by historical C compilers.</p>\n<p>In contrast, Rust's <code>Result</code> supports return value independent of error information, and has no problem whatsoever with returning multiple values. Multiple values returned as a tuple are much more ergonomic than output parameters because they can be used in expressions or captured using pattern matching.</p>\n<h3>Wrap system resources in owned objects</h3>\n<p>When returning handles to system resources, such as file descriptors or Windows handles, it good practice to return them wrapped in an object that implements <code>Drop</code> to release them. This will make it less likely that a user of the wrapper will make a mistake, and it makes the use of return values more idiomatic, removing the need for awkward invocations of <code>close()</code> and resource leaks coming from failing to do so.</p>\n<p>Taking <code>pipe()</code> as an example:</p>\n<pre><code>use std::fs::File;\nuse std::os::unix::io::FromRawFd;\n\npub fn pipe() -&gt; Result&lt;(File, File)&gt; {\n    let mut fds = [0 as libc::c_int; 2];\n    check_err(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n    Ok(unsafe { (File::from_raw_fd(fds[0]), File::from_raw_fd(fds[1])) })\n}\n\n// Usage:\n// let (r, w) = pipe()?;\n// ... use R and W as normal File object\n</code></pre>\n<p>This <code>pipe()</code> wrapper returns multiple values and uses a wrapper object to refer to a system resource. Also, it returns the <code>File</code> objects defined in the Rust standard library and accepted by Rust's IO layer.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1170, "favorite_count": 1, "accepted_answer_id": 42773525, "answer_count": 2, "score": 5, "last_activity_date": 1603900715, "creation_date": 1489434907, "last_edit_date": 1489436263, "question_id": 42772307, "link": "https://stackoverflow.com/questions/42772307/how-do-i-handle-errors-from-libc-functions-in-an-idiomatic-rust-manner", "title": "How do I handle errors from libc functions in an idiomatic Rust manner?", "body": "<p>libc's error handling is usually to return something <code>&lt; 0</code> in case of an error. I find myself doing this over and over:</p>\n\n<pre><code>let pid = fork()\nif pid &lt; 0 {\n    // Please disregard the fact that `Err(pid)`\n    // should be a `&amp;str` or an enum\n    return Err(pid);\n}\n</code></pre>\n\n<p>I find it ugly that this needs 3 lines of error handling, especially considering that these tests are quite frequent in this kind of code.</p>\n\n<p>Is there a way to return an <code>Err</code> in case <code>fork()</code> returns <code>&lt; 0</code>? </p>\n\n<p>I found two things which are close: </p>\n\n<ol>\n<li><code>assert_eq!</code>. This needs another line and it <code>panic</code>s so the caller cannot handle the error.</li>\n<li><p>Using traits like these:</p>\n\n<pre><code>pub trait LibcResult&lt;T&gt; {\n    fn to_option(&amp;self) -&gt; Option&lt;T&gt;;\n}\n\nimpl LibcResult&lt;i64&gt; for i32 {\n    fn to_option(&amp;self) -&gt; Option&lt;i64&gt; {\n        if *self &lt; 0 { None } else { Some(*self) }\n    }\n}\n</code></pre></li>\n</ol>\n\n<p>I could write <code>fork().to_option().expect(\"could not fork\")</code>. This is now only one line, but it <code>panic</code>s instead of returning an <code>Err</code>. I guess this could be solved using <code>ok_or</code>.</p>\n\n<p>Some functions of libc have <code>&lt; 0</code> as sentinel (e.g. <a href=\"http://man7.org/linux/man-pages/man2/fork.2.html#RETURN_VALUE\" rel=\"noreferrer\"><code>fork</code></a>), while others use <code>&gt; 0</code> (e.g. <a href=\"http://man7.org/linux/man-pages/man3/pthread_attr_init.3.html#RETURN_VALUE\" rel=\"noreferrer\"><code>pthread_attr_init</code></a>), so this would need another argument.</p>\n\n<p>Is there something out there which solves this?</p>\n"}, {"tags": ["macros", "nested", "rust", "match", "repeat"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1489420668, "post_id": 42767999, "comment_id": 72651552, "body": "Ouch, looks painful :( I wish you luck."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489456331, "post_id": 42767999, "comment_id": 72667975, "body": "<i>I believe that the problem could be easily solvable with a macro</i> \u2014 macros don&#39;t add any real magic to Rust&#39;s capabilities, they simply remove the boilerplate. However, you haven&#39;t <i>shown us the boilerplate</i>. Instead, you&#39;ve elided the meat of the problem with <code>...</code>. I&#39;m pretty sure that you don&#39;t want us to create a macro that expands to literal <code>...</code>, but we don&#39;t know what it <b>should</b> be. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. I&#39;d start by providing the complete definition of 2 sets of 2 types and the complete desired code of the <code>match</code>. You are likely to get something useful from that."}, {"owner": {"reputation": 23991, "user_id": 300805, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/16633fb54ed0f92814a6e07aa536fa0c?s=128&d=identicon&r=PG", "display_name": "peoro", "link": "https://stackoverflow.com/users/300805/peoro"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489459479, "post_id": 42767999, "comment_id": 72668749, "body": "@Shepmaster by <code>... A ... X ...</code> I meant <code>f(A, X)</code> which I thought was a minimal, complete and verifiable example.  In my specific case I need to create an channel to transmit a type associated to a trait implemented by <code>$first</code>, then start a thread where I instantiate <code>$second</code> and pass it to a functions (<code>f1</code>), and call a function (<code>f2</code>) on <code>$first</code> on the main thread.  <code>f2</code> requires that <code>$first</code> implement a trait whose generic parameter must be an associated type to a trait implement for <code>$second</code> and <code>f1</code> requires <code>$second</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1489459993, "post_id": 42767999, "comment_id": 72668865, "body": "I&#39;d suppose we disagree on the meaning on <b>verifiable</b> then, as I can&#39;t verify <i>anything</i> with the code you&#39;ve presented and based on my current understanding, it is <i>impossible</i> to write the code that you are asking, regardless of using a macro or not. If you <a href=\"https://stackoverflow.com/posts/42767999/edit\">edit</a> your question to show the complete definition of <code>A</code>, <code>B</code>, and <code>Z</code>, the <code>match</code> for the pairs <code>a, z</code>, <code>b, z</code> and a function signature that you call from the macro, then perhaps we can see the boilerplate and then construct the macro."}], "answers": [{"tags": [], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "is_accepted": false, "score": 3, "last_activity_date": 1489807665, "last_edit_date": 1489807665, "creation_date": 1489807581, "answer_id": 42870117, "question_id": 42767999, "link": "https://stackoverflow.com/questions/42767999/cartesian-product-match/42870117#42870117", "title": "Cartesian product match", "body": "<p>I think your idea of implementing a Cartesian product using macros is best.</p>\n\n<p>I'm not quite sure what you want the <code>match</code> expression to be, so I've <a href=\"https://play.rust-lang.org/?gist=86f018d7cf645ffa492fe23e551d2dfb\" rel=\"nofollow noreferrer\">implemented</a> a repeated function call instead. The macro plumbing should be much the same, however. Hopefully you can take it from here.</p>\n\n<pre><code>macro_rules! cp_inner {\n    ($f: expr, $x: expr, [$($y: expr),*]) =&gt; {\n        $($f($x, $y);)*\n    }\n}\n\nmacro_rules! cartesian_product {\n    ($f: expr, [$($x: expr),*], $ys: tt) =&gt; {\n        $(cp_inner!($f, $x, $ys);)*;\n    }\n}\n\nfn print_pair(x: u32, y: &amp;'static str) {\n    println!(\"({}, {})\", x, y);\n}\n\npub fn main() {\n    cartesian_product!(print_pair, [1, 2, 3], [\"apple\", \"banana\", \"cherry\"]);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 30359, "user_id": 255688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/74b63650ed07d745fd9accf52e4d286b?s=128&d=identicon&r=PG", "display_name": "phimuemue", "link": "https://stackoverflow.com/users/255688/phimuemue"}, "is_accepted": false, "score": 0, "last_activity_date": 1553026924, "creation_date": 1553026924, "answer_id": 55249378, "question_id": 42767999, "link": "https://stackoverflow.com/questions/42767999/cartesian-product-match/55249378#55249378", "title": "Cartesian product match", "body": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=cc928b6ce1054f1a43639c561bc85c79\" rel=\"nofollow noreferrer\">Here</a> is a macro <code>cartesian_match</code> that can be used as follows:</p>\n\n<pre><code>fn main() {\n    macro_rules! test( ($x: tt, $y: tt, $z: tt,) =&gt; {\n        println!(\"{:?} {:?} {:?}\", $x, $y, $z);\n    });\n    #[derive(Debug)]\n    enum E {\n        V1, V2, V3,\n    }\n    let b = false;\n    let oi = Some(6);\n    let e = E::V1;\n    cartesian_match!(\n        test,\n        match (oi) {\n            Some(n) =&gt; {format!(\"{} is the number\", n)},\n            None =&gt; {None as Option&lt;usize&gt;},\n        },\n        match (b) {\n            true =&gt; true,\n            false =&gt; {E::V3},\n        },\n        match (e) {\n            E::V1 =&gt; true,\n            E::V2 =&gt; 'l',\n            E::V3 =&gt; 2,\n        },\n    );\n}\n</code></pre>\n\n<p>Calling <code>cartesian_match</code> is a bit rough around the edges (note all the braces), and possibly does not support all the patterns supported in ordinary <code>match</code> statements.</p>\n\n<p>The macro is defined as follows:</p>\n\n<pre><code>macro_rules! cartesian_match(\n    (\n        $macro_callback: ident,\n        $(match ($e: expr) {\n            $($x: pat =&gt; $y: tt,)*\n        },)*\n    ) =&gt; {\n        cartesian_match!(@p0,\n            $macro_callback,\n            (),\n            $(match ($e) {\n                $($x =&gt; $y,)*\n            },)*\n        )\n    };\n    (@p0,\n        $macro_callback: ident,\n        $rest_packed: tt,\n        match ($e: expr) {\n            $($x: pat =&gt; $y: tt,)*\n        },\n        $(match ($e2: expr) {\n            $($x2: pat =&gt; $y2: tt,)*\n        },)*\n    ) =&gt; {\n        cartesian_match!(@p0,\n            $macro_callback,\n            (\n                match ($e) {\n                    $($x =&gt; $y,)*\n                },\n                $rest_packed,\n            ),\n            $(match ($e2) {\n                $($x2 =&gt; $y2,)*\n            },)*\n        )\n    };\n    (@p0,\n        $macro_callback: ident,\n        $rest_packed: tt,\n    ) =&gt; {\n        cartesian_match!(@p1,\n            $macro_callback,\n            @matched{()},\n            $rest_packed,\n        )\n    };\n    (@p1,\n        $macro_callback: ident,\n        @matched{$matched_packed: tt},\n        (\n            match ($e: expr) {\n                $($x: pat =&gt; $y: tt,)*\n            },\n            $rest_packed: tt,\n        ),\n    ) =&gt; {\n        match $e {\n            $($x =&gt; cartesian_match!(@p1,\n                $macro_callback,\n                @matched{ ($matched_packed, $y,) },\n                $rest_packed,\n            ),)*\n        }\n    };\n    (@p1,\n        $macro_callback: ident,\n        @matched{$matched_packed: tt},\n        (),\n    ) =&gt; {\n        cartesian_match!(@p2,\n            $macro_callback,\n            @unpacked(),\n            $matched_packed,\n        )\n        //$macro_callback!($matched_packed)\n    };\n    (@p2,\n        $macro_callback: ident,\n        @unpacked($($u: tt,)*),\n        (\n            $rest_packed: tt,\n            $y: tt,\n        ),\n    ) =&gt; {\n        cartesian_match!(@p2,\n            $macro_callback,\n            @unpacked($($u,)* $y,),\n            $rest_packed,\n        )\n    };\n    (@p2,\n        $macro_callback: ident,\n        @unpacked($($u: tt,)*),\n        (),\n    ) =&gt; {\n        $macro_callback!($($u,)*)\n    };\n);\n</code></pre>\n\n<p>It takes a variable number of <code>match</code> items and expands them in a nested manner one after another. It does so in different \"internal phases\" (denoted by the <code>@</code>-prefixed parameter in the macro argument lists):</p>\n\n<ul>\n<li>Phase <code>@p0</code> takes a list of <code>match</code>es and converts them into a single <code>tt</code>. Essentially, it transforms <code>match_1, match_2, match_3,</code> into something like <code>(match_1, (match_2, (match_3, (),)))</code>. (This is done to prevent \"inconsistent lockstep iteration\".)</li>\n<li>Phase <code>@p1</code> unpacks the thing generated by <code>@p0</code> and converts it into nested <code>match</code> statements. It uses the same trick as <code>@p0</code> to store the elements matched up to the current nesting depth.</li>\n<li>Phase <code>@p2</code> unpacks the thing generated by <code>@p1</code> (i.e. it essentially converts <code>((((), v3), v2), v1,)</code> to <code>v1, v2, v3</code> and passes it into the specified callback.</li>\n</ul>\n"}], "owner": {"reputation": 23991, "user_id": 300805, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/16633fb54ed0f92814a6e07aa536fa0c?s=128&d=identicon&r=PG", "display_name": "peoro", "link": "https://stackoverflow.com/users/300805/peoro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 313, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1553026924, "creation_date": 1489420448, "last_edit_date": 1489425996, "question_id": 42767999, "link": "https://stackoverflow.com/questions/42767999/cartesian-product-match", "title": "Cartesian product match", "body": "<p>I have two sets of <em>incomplete</em> types (i.e. struct names, missing generic parameters and lifetimes), and I need to have some code executed for each possible pair of combinations:</p>\n\n<pre><code>// these are my types\nstruct A&lt;T&gt; { ... }\nstruct B&lt;'a, 'b, T&gt; { ... }\nstruct C { ... }\n\nstruct X&lt;T&gt; { ... }\nstruct Y { ... }\nstruct W&lt;'a&gt; { ... }\nstruct Z&lt;T, D&gt; { ... }\n\n// this is the code I need to generate\nmatch (first_key, second_key) {\n    (\"a\", \"x\") =&gt; { ... A ... X ... }\n    (\"a\", \"y\") =&gt; { ... A ... Y ... }\n    (\"a\", \"w\") =&gt; { ... A ... W ... }\n    (\"a\", \"z\") =&gt; { ... A ... Z ... }\n    (\"b\", \"x\") =&gt; { ... B ... X ... }\n    (\"b\", \"y\") =&gt; { ... B ... Y ... }\n    // ...\n}\n</code></pre>\n\n<p>The structures of the first set (<code>A</code>, <code>B</code>, <code>C</code>) and the ones on the second set (<code>X</code>, <code>Y</code>, <code>W</code>, <code>Z</code>) have a generic parameter depending on each other (e.g. for the case <code>(\"a\", \"x\")</code>, the actual types that will be used are <code>A&lt;X&gt;</code> and <code>X&lt; A&lt;X&gt;::Color &gt;</code> ). For this reason I couldn't find any solution using generic functions or similar.</p>\n\n<p>I believe that the problem could be easily solvable with a macro; something like:</p>\n\n<pre><code>macro_rules! my_code {\n    ( $first_type:tt), $second_type:tt ) =&gt; {\n        // ... $first_type ... $second_type ...\n    }\n}\n\nproduct_match!( (first_key, second_key) {\n    { \"a\" =&gt; A, \"b\" =&gt; B, \"c\" =&gt; C },\n    { \"x\" =&gt; X, \"y\" =&gt; Y, \"w\" =&gt; W, \"z\" =&gt; Z }\n} =&gt; my_code )\n</code></pre>\n\n<p>but I failed at implementing <code>product_match</code> after working for several hours on it already. I couldn't find any easy way to nest repetitions; I believe that the only solution is using macros to turn the lists of match cases into nested tuples of values, and then recurse over them, but I found this very difficult to implement.</p>\n\n<p>Another option could be generating the code of that big <code>match</code> using a build script, but this solution sounds quite dirty.</p>\n\n<p>Is there any easy solution to this problem that I missed? Is there any easy way to implement <code>product_match!</code>? How can I implement my logic?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1489412696, "last_edit_date": 1489412696, "creation_date": 1489412093, "answer_id": 42764988, "question_id": 42764707, "link": "https://stackoverflow.com/questions/42764707/is-it-possible-to-return-a-container-from-a-loop-when-the-container-is-used-by-a/42764988#42764988", "title": "Is it possible to return a container from a loop when the container is used by an iterator?", "body": "<p>This is currently unsupported by the borrowchecker, but it would not be idiomatic anyway. The idiomatic solution is</p>\n\n<pre><code>if ret.contains(&amp;2) {\n    return Ok(ret);\n}\n</code></pre>\n\n<p>Since your real code is <code>BufReader</code>, I'll assume you mean the iterator returned by the <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.bytes\" rel=\"nofollow noreferrer\"><code>bytes</code></a> method. In that case, the idiomatic solution would instead be a variant of the following.</p>\n\n<pre><code>if ret.bytes().any(|b| b == Ok(2)) {\n    return Ok(ret);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "is_accepted": false, "score": 2, "last_activity_date": 1489414084, "last_edit_date": 1489414084, "creation_date": 1489413265, "answer_id": 42765377, "question_id": 42764707, "link": "https://stackoverflow.com/questions/42764707/is-it-possible-to-return-a-container-from-a-loop-when-the-container-is-used-by-a/42765377#42765377", "title": "Is it possible to return a container from a loop when the container is used by an iterator?", "body": "<blockquote>\n  <p>Why is this an error if all references are local?</p>\n</blockquote>\n\n<p>Well, not exactly. The <code>iter()</code> call looks like it does not borrow anything but it is. The signature is <code>fn iter(&amp;self) -&gt; Iter&lt;T&gt;</code>. When you call <code>ret.iter()</code>, you are actually calling <code>iter(&amp;ret)</code> which is immutably borrowing <code>ret</code>. That borrow will be valid until the scope of the <code>for</code> loop, which is itself syntactic sugar over a <code>while</code> loop until the iterator's <code>next</code> function no longer returns a value.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "accepted_answer_id": 42764988, "answer_count": 2, "score": 0, "last_activity_date": 1489414084, "creation_date": 1489411245, "last_edit_date": 1489412593, "question_id": 42764707, "link": "https://stackoverflow.com/questions/42764707/is-it-possible-to-return-a-container-from-a-loop-when-the-container-is-used-by-a", "title": "Is it possible to return a container from a loop when the container is used by an iterator?", "body": "<p>I have an iterator to a <code>BufReader</code> and want to return a <code>BufReader</code>. This example is simple enough that it would be suitable to just use <code>return</code>, but the real code structure is more complex and <code>return</code> is not suitable:</p>\n\n<pre><code>fn f() -&gt; Result&lt;Vec&lt;i32&gt;, &amp;'static str&gt; {\n    let ret = vec![1, 2, 3];\n\n    for i in ret.iter() {\n        if *i == 2 {\n            return Ok(ret);\n        }\n    }\n    Err(\"no element\")\n}\n</code></pre>\n\n<p>This compiles with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0505]: cannot move out of `ret` because it is borrowed\n   |\n11 |     for i in ret.iter() {\n   |              --- borrow of `ret` occurs here\n12 |         if *i == 2 {\n13 |             return Ok(ret);\n   |                       ^^^ move out of `ret` occurs here\n</code></pre>\n\n<p>Why is this an error if all references are local? Is it really important that the references still exist?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17573, "user_id": 181228, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/729f685b8e8d7e9feed18c177c82e59b?s=128&d=identicon&r=PG", "display_name": "glebm", "link": "https://stackoverflow.com/users/181228/glebm"}, "edited": false, "score": 0, "creation_date": 1489409592, "post_id": 42764016, "comment_id": 72643352, "body": "String literals are of type <code>&amp;&#39;static str</code>, not <code>String</code>. <code>String</code> is a string on heap."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489581460, "post_id": 42764016, "comment_id": 72732051, "body": "They are not unrelated; in fact they are strongly related. The <b>only way</b> to make a <code>Vec</code> <i>or</i> a <code>String</code> is at runtime because they each require heap allocation. The only way to have a single instance of a runtime value like <code>Vec</code> or <code>String</code> is through the mechanism of somethign like <code>InitOnce</code> or <code>lazy_static!</code>."}, {"owner": {"reputation": 12061, "user_id": 87191, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5a32c1cfc71ebf97967c5d6fd2cf2cf2?s=128&d=identicon&r=PG", "display_name": "simao", "link": "https://stackoverflow.com/users/87191/simao"}, "edited": false, "score": 0, "creation_date": 1489586555, "post_id": 42764016, "comment_id": 72736076, "body": "the answer bellow works for me and I am not using any of those."}], "answers": [{"comments": [{"owner": {"reputation": 12061, "user_id": 87191, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5a32c1cfc71ebf97967c5d6fd2cf2cf2?s=128&d=identicon&r=PG", "display_name": "simao", "link": "https://stackoverflow.com/users/87191/simao"}, "edited": false, "score": 0, "creation_date": 1489412797, "post_id": 42764117, "comment_id": 72645527, "body": "The array is quite big. so probably I don&#39;t want it copied everywhere. Still trying to make sense of that signature though. Thanks"}, {"owner": {"reputation": 17573, "user_id": 181228, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/729f685b8e8d7e9feed18c177c82e59b?s=128&d=identicon&r=PG", "display_name": "glebm", "link": "https://stackoverflow.com/users/181228/glebm"}, "reply_to_user": {"reputation": 12061, "user_id": 87191, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5a32c1cfc71ebf97967c5d6fd2cf2cf2?s=128&d=identicon&r=PG", "display_name": "simao", "link": "https://stackoverflow.com/users/87191/simao"}, "edited": false, "score": 4, "creation_date": 1489413639, "post_id": 42764117, "comment_id": 72646123, "body": "The first one is an array of 3 references to static strings, the second one is a reference to a static array of references to static strings. Static here means the lifetime = lifetime of the program, so effectively stuff that&#39;s stored in the DATA section of the executable. I see that the array has 93 elements: 93 64-bit pointers is way smaller than a CPU cache line so the first signature might actually be faster, definitely worth benchmarking."}, {"owner": {"reputation": 9545, "user_id": 242814, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fabed09b67201710f4cc958b4e668cb1?s=128&d=identicon&r=PG", "display_name": "Brennan Vincent", "link": "https://stackoverflow.com/users/242814/brennan-vincent"}, "edited": false, "score": 1, "creation_date": 1573119449, "post_id": 42764117, "comment_id": 103780403, "body": "@glebm Not true. A CPU cache line (on typical desktop and mobile CPUs) is 64 bytes. 93 64-bit pointers would occupy 744 bytes in total, or 12 cache lines."}, {"owner": {"reputation": 17573, "user_id": 181228, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/729f685b8e8d7e9feed18c177c82e59b?s=128&d=identicon&r=PG", "display_name": "glebm", "link": "https://stackoverflow.com/users/181228/glebm"}, "reply_to_user": {"reputation": 9545, "user_id": 242814, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/fabed09b67201710f4cc958b4e668cb1?s=128&d=identicon&r=PG", "display_name": "Brennan Vincent", "link": "https://stackoverflow.com/users/242814/brennan-vincent"}, "edited": false, "score": 0, "creation_date": 1588966707, "post_id": 42764117, "comment_id": 109114326, "body": "@BrennanVincent is absolutely right. Also each slice is actually a pointer + length, so it&#39;s 16 bytes per slice."}], "tags": [], "owner": {"reputation": 17573, "user_id": 181228, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/729f685b8e8d7e9feed18c177c82e59b?s=128&d=identicon&r=PG", "display_name": "glebm", "link": "https://stackoverflow.com/users/181228/glebm"}, "is_accepted": true, "score": 26, "last_activity_date": 1569261408, "last_edit_date": 1569261408, "creation_date": 1489409511, "answer_id": 42764117, "question_id": 42764016, "link": "https://stackoverflow.com/questions/42764016/creating-a-static-const-vecstring/42764117#42764117", "title": "Creating a static const Vec&lt;String&gt;", "body": "<p>Do you want it to be mutable? Do the values have to be <code>String</code>s? If the answer is \"no\" to both, you can use an array of string slices (<code>[&amp;str; N]</code>) instead of a <code>Vec&lt;String&gt;</code>:</p>\n\n<pre><code>const LEFT: [&amp;'static str; 3] = [\"Hello\", \"World\", \"!\"];\n// or\nconst LEFT: &amp;'static [&amp;'static str] = &amp;[\"Hello\", \"World\", \"!\"];\n</code></pre>\n\n<p><code>const</code>s are basically copied wherever they are used, so the second form may be preferable depending on the size of the array.</p>\n"}], "owner": {"reputation": 12061, "user_id": 87191, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5a32c1cfc71ebf97967c5d6fd2cf2cf2?s=128&d=identicon&r=PG", "display_name": "simao", "link": "https://stackoverflow.com/users/87191/simao"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12075, "favorite_count": 2, "closed_date": 1489409509, "accepted_answer_id": 42764117, "answer_count": 1, "score": 20, "last_activity_date": 1569261408, "creation_date": 1489409261, "last_edit_date": 1569259422, "question_id": 42764016, "link": "https://stackoverflow.com/questions/42764016/creating-a-static-const-vecstring", "closed_reason": "Duplicate", "title": "Creating a static const Vec&lt;String&gt;", "body": "<p>I am trying to initialize a <code>Vec&lt;String&gt;</code> with some settings that can be reused over my code.</p>\n\n<p>I am using <code>const left: Vec&lt;String&gt; = vec![...</code> but this doesn't work: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; names-generator.rs:2:27\n   |\n2  | const left: Vec&lt;String&gt; = vec![\n   |                           ^ expected slice, found array of 93 elements\n   |\n   = note: expected type `Box&lt;[std::string::String]&gt;`\n   = note:    found type `Box&lt;[&amp;str; 93]&gt;`\n   = note: this error originates in a macro outside of the current crate\n</code></pre>\n\n<p>What is the recommended way of doing something like this?</p>\n"}, {"tags": ["concurrency", "rust", "rust-tokio"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489400399, "post_id": 42759882, "comment_id": 72637749, "body": "I am confused by the narrative vs the sample code. Could you clarify whether you want (1) one server object listening to multiple ports or (2) multiple server objects each listening to one port?"}, {"owner": {"reputation": 287, "user_id": 3191372, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/jqFzX.jpg?s=128&g=1", "display_name": "Thibaud Dauce", "link": "https://stackoverflow.com/users/3191372/thibaud-dauce"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489402803, "post_id": 42759882, "comment_id": 72639152, "body": "I want one server object listening to multiple ports but this server must be able to access the chosen port."}, {"owner": {"reputation": 287, "user_id": 3191372, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/jqFzX.jpg?s=128&g=1", "display_name": "Thibaud Dauce", "link": "https://stackoverflow.com/users/3191372/thibaud-dauce"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489403360, "post_id": 42759882, "comment_id": 72639464, "body": "I edited my main post with my current work in progress"}], "answers": [{"tags": [], "owner": {"reputation": 1447, "user_id": 392331, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8a3eba1d67a2c45274e1df07f6888e5f?s=128&d=identicon&r=PG", "display_name": "46bit", "link": "https://stackoverflow.com/users/392331/46bit"}, "is_accepted": false, "score": 4, "last_activity_date": 1541041796, "last_edit_date": 1541041796, "creation_date": 1491970758, "answer_id": 43360223, "question_id": 42759882, "link": "https://stackoverflow.com/questions/42759882/how-to-build-multiple-concurrent-servers-with-rust-and-tokio/43360223#43360223", "title": "How to build multiple concurrent servers with Rust and Tokio?", "body": "<p>You can run multiple servers from one thread. <code>core.run(server).unwrap();</code> is just a convenience method and not the only/main way to do things.</p>\n\n<p>Instead of running the single <a href=\"https://docs.rs/futures/0.1/futures/stream/struct.ForEach.html\" rel=\"nofollow noreferrer\"><code>ForEach</code></a> to completion, spawn each individually and then just keep the thread alive:</p>\n\n<pre><code>let mut core = Core::new().unwrap();\nlet handle = core.handle();\n\n// I want to bind to multiple port here if it's possible with simple addresses\nlet addr = \"127.0.0.1:80\".parse().unwrap();\nlet addr2 = \"127.0.0.1:443\".parse().unwrap();\n\n// Or here if there is a special function on the TcpListener\nlet sock = TcpListener::bind(&amp;addr, &amp;handle).unwrap();\n\n// Or here if there is a special function on the sock\nlet server = sock.incoming().for_each(|(client_stream, remote_addr)| {\n    // And then retrieve the current port in the callback\n    println!(\"Receive connection on {}!\", mysterious_function_to_retrieve_the_port);\n    Ok(())\n});\n\nhandle.spawn(sock);\nhandle.spawn(server);\n\nloop {\n    core.turn(None);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2626, "user_id": 180718, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/a9c408ec73a9d18e09c2b94a614da26d?s=128&d=identicon&r=PG", "display_name": "deontologician", "link": "https://stackoverflow.com/users/180718/deontologician"}, "is_accepted": false, "score": 2, "last_activity_date": 1558831079, "creation_date": 1558831079, "answer_id": 56309792, "question_id": 42759882, "link": "https://stackoverflow.com/questions/42759882/how-to-build-multiple-concurrent-servers-with-rust-and-tokio/56309792#56309792", "title": "How to build multiple concurrent servers with Rust and Tokio?", "body": "<p>I'd just like to follow up that there seems to be a slightly less manual way to do things than 46bit's answer (at least as of 2019).</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let addr1 = \"127.0.0.1:80\".parse().unwrap();\nlet addr2 = \"127.0.0.1:443\".parse().unwrap();\n\nlet sock1 = TcpListener::bind(&amp;addr1, &amp;handle).unwrap();\nlet sock2 = TcpListener::bind(&amp;addr2, &amp;handle).unwrap();\n\nlet server1 = sock1.incoming().for_each(|_| Ok(()));\nlet server2 = sock2.incoming().for_each(|_| Ok(()));\n\nlet mut runtime = tokio::runtime::Runtime()::new().unwrap();\n\nruntime.spawn(server1);\nruntime.spawn(server2);\n\nruntime.shutdown_on_idle().wait().unwrap();\n</code></pre>\n"}], "owner": {"reputation": 287, "user_id": 3191372, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/jqFzX.jpg?s=128&g=1", "display_name": "Thibaud Dauce", "link": "https://stackoverflow.com/users/3191372/thibaud-dauce"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2674, "favorite_count": 3, "answer_count": 2, "score": 5, "last_activity_date": 1558831079, "creation_date": 1489396076, "last_edit_date": 1489408545, "question_id": 42759882, "link": "https://stackoverflow.com/questions/42759882/how-to-build-multiple-concurrent-servers-with-rust-and-tokio", "title": "How to build multiple concurrent servers with Rust and Tokio?", "body": "<p>I'm looking to build multiple concurrent servers on different ports with Rust and Tokio:</p>\n\n<pre><code>let mut core = Core::new().unwrap();\nlet handle = core.handle();\n\n// I want to bind to multiple port here if it's possible with simple addresses\nlet addr = \"127.0.0.1:80\".parse().unwrap();\nlet addr2 = \"127.0.0.1:443\".parse().unwrap();\n\n// Or here if there is a special function on the TcpListener\nlet sock = TcpListener::bind(&amp;addr, &amp;handle).unwrap();\n\n// Or here if there is a special function on the sock\nlet server = sock.incoming().for_each(|(client_stream, remote_addr)| {\n    // And then retrieve the current port in the callback\n    println!(\"Receive connection on {}!\", mysterious_function_to_retrieve_the_port);\n    Ok(())\n});\n\ncore.run(server).unwrap();\n</code></pre>\n\n<p>Is there an option with Tokio to listen to multiple ports or do I need to create a simple thread for each port and run <code>Core::new()</code> in each?</p>\n\n<p>Thanks to <a href=\"https://github.com/reem/rust-scoped-pool\" rel=\"noreferrer\">rust-scoped-pool</a>, I have:</p>\n\n<pre><code>let pool = Pool::new(2);\n\nlet mut listening_on = [\"127.0.0.1:80\", \"127.0.0.1:443\"];\n\npool.scoped(|scope| {\n    for address in &amp;mut listening_on {\n        scope.execute(move ||{\n            let mut core = Core::new().unwrap();\n            let handle = core.handle();\n\n            let addr = address.parse().unwrap();\n            let sock = TcpListener::bind(&amp;addr, &amp;handle).unwrap();\n\n            let server = sock.incoming().for_each(|(client_stream, remote_addr)| {\n                println!(\"Receive connection on {}!\", address);\n                Ok(())\n            });\n\n            core.run(server).unwrap();\n        });\n    }\n});\n</code></pre>\n\n<p>rust-scoped-pool is the only solution I have found to execute multiple threads and wait forever after spawning them. I think it's working but I was wondering if a simpler solution existed.</p>\n"}, {"tags": ["rust", "mutable"], "answers": [{"tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": true, "score": 7, "last_activity_date": 1489360350, "creation_date": 1489360350, "answer_id": 42754320, "question_id": 42753516, "link": "https://stackoverflow.com/questions/42753516/cannot-borrow-data-mutably-in-a-reference-in-array/42754320#42754320", "title": "Cannot borrow data mutably in a `&amp;` reference in array", "body": "<p>You can fix compilation error with additional <code>mut</code>:</p>\n\n<p><code>bar: &amp;'a [&amp;'a mut Bar]</code> to  <code>bar: &amp;'a mut [&amp;'a mut Bar]</code></p>\n"}], "owner": {"reputation": 928, "user_id": 4141219, "user_type": "registered", "accept_rate": 88, "profile_image": "https://lh4.googleusercontent.com/-d32iaz7YS1g/AAAAAAAAAAI/AAAAAAAAAao/vl5qXOl_78g/photo.jpg?sz=128", "display_name": "Charlie", "link": "https://stackoverflow.com/users/4141219/charlie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4649, "favorite_count": 0, "accepted_answer_id": 42754320, "answer_count": 1, "score": 5, "last_activity_date": 1489368825, "creation_date": 1489354813, "last_edit_date": 1489368825, "question_id": 42753516, "link": "https://stackoverflow.com/questions/42753516/cannot-borrow-data-mutably-in-a-reference-in-array", "title": "Cannot borrow data mutably in a `&amp;` reference in array", "body": "<p>I want to change a value of a struct in an array in another struct:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    bar: &amp;'a [&amp;'a mut Bar]\n}\n\nstruct Bar {\n    baz: u16\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn add(&amp;mut self, x: u16) {\n        self.bar[0].add(x);\n    }\n}\n\nimpl Bar {\n    fn add(&amp;mut self, x: u16) {\n        self.baz += x;\n    }\n}\n</code></pre>\n\n<p>This gives an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0389]: cannot borrow data mutably in a `&amp;` reference\n  --&gt; src/main.rs:11:9\n   |\n11 |         self.bar[0].add(x);\n   |         ^^^^^^^^^^^ assignment into an immutable reference\n</code></pre>\n\n<p>How would one fix this example?</p>\n"}, {"tags": ["heroku", "rust"], "comments": [{"owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "edited": false, "score": 0, "creation_date": 1489392463, "post_id": 42748698, "comment_id": 72633406, "body": "Try replacing all the &quot;\\n&quot; with &quot;\\r\\n&quot; in the generated http response."}, {"owner": {"reputation": 316, "user_id": 4471378, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XT5bM.jpg?s=128&g=1", "display_name": "Regan Koopmans", "link": "https://stackoverflow.com/users/4471378/regan-koopmans"}, "reply_to_user": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "edited": false, "score": 0, "creation_date": 1489429254, "post_id": 42748698, "comment_id": 72656954, "body": "That fixed it! Thank you so much!"}], "answers": [{"tags": [], "owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "is_accepted": true, "score": 2, "last_activity_date": 1489464324, "creation_date": 1489464324, "answer_id": 42777602, "question_id": 42748698, "link": "https://stackoverflow.com/questions/42748698/rust-http-server-on-heroku-generates-error-h18-server-request-interrupted/42777602#42777602", "title": "Rust HTTP server on Heroku generates error H18 \u2014 Server Request Interrupted", "body": "<p>As discussed in the comments, the problem was that the code was using <code>\\n</code> as the delimiter in the HTTP response whereas the standard says it should be <code>\\r\\n</code></p>\n"}, {"tags": [], "owner": {"reputation": 1645, "user_id": 4178913, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rgO3x.png?s=128&g=1", "display_name": "sam", "link": "https://stackoverflow.com/users/4178913/sam"}, "is_accepted": false, "score": 0, "last_activity_date": 1588274281, "creation_date": 1588274281, "answer_id": 61531107, "question_id": 42748698, "link": "https://stackoverflow.com/questions/42748698/rust-http-server-on-heroku-generates-error-h18-server-request-interrupted/61531107#61531107", "title": "Rust HTTP server on Heroku generates error H18 \u2014 Server Request Interrupted", "body": "<p>I also faced this error testing a POST call to process the image file at Flask server.\nI added a simple delay before returning the response </p>\n\n<pre><code>time.sleep(3)\n</code></pre>\n\n<p>It worked!\nI believe Heroku(a free subscription) needs time to process the POST request from infrastructure angle, so it was throwing the network error if you return immediately</p>\n\n<p>Before </p>\n\n<pre><code>@app.route(\"/process_image\", methods=['POST'])\ndef process_image():\n    print (\"received \")\n    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}\n</code></pre>\n\n<p>Later</p>\n\n<pre><code>@app.route(\"/process_image\", methods=['POST'])\ndef process_image():\n    print (\"received \")\n    time.sleep(3)\n    return json.dumps({'success': True}), 200, {'ContentType': 'application/json'}\n</code></pre>\n"}], "owner": {"reputation": 316, "user_id": 4471378, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XT5bM.jpg?s=128&g=1", "display_name": "Regan Koopmans", "link": "https://stackoverflow.com/users/4471378/regan-koopmans"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1152, "favorite_count": 1, "accepted_answer_id": 42777602, "answer_count": 2, "score": 1, "last_activity_date": 1588274281, "creation_date": 1489329485, "last_edit_date": 1489329662, "question_id": 42748698, "link": "https://stackoverflow.com/questions/42748698/rust-http-server-on-heroku-generates-error-h18-server-request-interrupted", "title": "Rust HTTP server on Heroku generates error H18 \u2014 Server Request Interrupted", "body": "<h1>The Problem</h1>\n\n<p>I am trying to host a simple HTTP server written in Rust on Heroku. </p>\n\n<p>I am not using an external HTTP library because this is a learning project for University, so I am managing everything through <code>TcpStream</code>s.</p>\n\n<p>The server works as expected locally.</p>\n\n<p>I keep seeing the H18 (Server Request Interrupted) error in the Heroku logs, and the running instance on Heroku does not serve any files. Specifically, these types of errors occur:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2017-03-12T14:11:53.952084+00:00 heroku[router]: sock=backend at=error code=H18 desc=\"Server Request Interrupted\" method=GET path=\"/\" host=regans-rust-project.herokuapp.com request_id=fe50b113-8091-4129-99f5-632c9536bb8e fwd=\"154.126.208.8\" dyno=web.1 connect=0ms service=2ms status=503 bytes=581 protocol=https\n\n2017-03-12T14:11:54.459277+00:00 heroku[router]: sock=backend at=error code=H18 desc=\"Server Request Interrupted\" method=GET path=\"/favicon.ico\" host=regans-rust-project.herokuapp.com request_id=cf6ad8a0-2780-4c07-843a-2b533df1c9aa fwd=\"154.126.208.8\" dyno=web.1 connect=0ms service=1ms status=503 bytes=388 protocol=https\n</code></pre>\n\n<h1>What I have tried</h1>\n\n<ul>\n<li>I have made sure that the static resources are in the directory by invoking Heroku's bash utility. I have also <strong>run the executable</strong> from here, and the server works locally <strong>from the Heroku instance</strong> as well.</li>\n<li>I have ensured that I am returning well-formed HTTP responses (I have status codes, content types, connection types, content lengths).</li>\n</ul>\n\n<h1>My Code</h1>\n\n<p>You can see my code <a href=\"https://github.com/Regan-Koopmans/time-serv\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>I am using the following <a href=\"https://github.com/emk/heroku-buildpack-rust\" rel=\"nofollow noreferrer\">buildpack</a></p>\n\n<p>Is there anything else I should be appending to my responses to \"finish\" them? Any help would be greatly appreciated :)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489328859, "post_id": 42748447, "comment_id": 72613771, "body": "<i>This previously worked and the function <code>connect</code> existed</i> And <b>what changed</b> between when it worked and when it didn&#39;t? Computers are not magic; things happen for a reason! What version of openssl are you using? 0.9.8 only lists two structs with <code>connect</code>, <code>SslConnector</code> and <code>Ssl</code>. An <code>SslStream</code> is the <b>result</b> of connecting."}, {"owner": {"reputation": 101, "user_id": 7697424, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/83bd35576d75390abfda416a78c5d437?s=128&d=identicon&r=PG&f=1", "display_name": "Otoma", "link": "https://stackoverflow.com/users/7697424/otoma"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489370960, "post_id": 42748447, "comment_id": 72627284, "body": "@Shepmaster, latest."}], "owner": {"reputation": 101, "user_id": 7697424, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/83bd35576d75390abfda416a78c5d437?s=128&d=identicon&r=PG&f=1", "display_name": "Otoma", "link": "https://stackoverflow.com/users/7697424/otoma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 216, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1489328597, "creation_date": 1489328099, "last_edit_date": 1489328597, "question_id": 42748447, "link": "https://stackoverflow.com/questions/42748447/no-associated-item-named-connect-found-for-type-opensslsslsslstream", "title": "No associated item named `connect` found for type `openssl::ssl::SslStream&lt;_&gt;", "body": "<p>I'm using OpenSSL in my Rust application:</p>\n\n<pre><code>let mut abc = ssl::SslStream::connect(&amp;sctx, tcp_conn).unwrap();\n</code></pre>\n\n<p>throws an exception:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no associated item named `connect` found for type `openssl::ssl::SslStream&lt;_&gt;` in the current scope\n --&gt; src/main.rs:7:19\n  |\n7 |     let mut abc = ssl::SslStream::connect(&amp;sctx, tcp_conn).unwrap();\n  |                   ^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I have imported everything:</p>\n\n<pre><code>extern crate openssl;\n\nuse std::net::TcpStream;\nuse openssl::ssl;\n</code></pre>\n\n<p>This previously worked and the function <code>connect</code> existed. </p>\n"}, {"tags": ["list", "rust"], "comments": [{"owner": {"reputation": 1210, "user_id": 3175431, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/d718426ebc054d9b7962dcd804c1cb65?s=128&d=identicon&r=PG", "display_name": "Jezzamon", "link": "https://stackoverflow.com/users/3175431/jezzamon"}, "edited": false, "score": 0, "creation_date": 1590941597, "post_id": 42748277, "comment_id": 109865349, "body": "Related terms: ignoring order (I was searching using that and couldn&#39;t find this question)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1563893103, "last_edit_date": 1563893103, "creation_date": 1489328281, "answer_id": 42748484, "question_id": 42748277, "link": "https://stackoverflow.com/questions/42748277/how-do-i-test-for-the-equality-of-two-unordered-lists/42748484#42748484", "title": "How do I test for the equality of two unordered lists?", "body": "<p>If you know that there can never be duplicates, you can use a set (<code>HashSet</code> or <code>BTreeSet</code>, depending on your types):</p>\n\n<pre><code>use std::{collections::HashSet, hash::Hash};\n\nfn my_eq&lt;T&gt;(a: &amp;[T], b: &amp;[T]) -&gt; bool\nwhere\n    T: Eq + Hash,\n{\n    let a: HashSet&lt;_&gt; = a.iter().collect();\n    let b: HashSet&lt;_&gt; = b.iter().collect();\n\n    a == b\n}\n\nfn main() {\n    assert!(my_eq(\n        &amp;[\"foo\", \"bar\", \"baz\", \"beh\"],\n        &amp;[\"beh\", \"foo\", \"baz\", \"bar\"]\n    ));\n    assert!(!my_eq(\n        &amp;[\"beh\", \"foo\", \"baz\", \"bar\"],\n        &amp;[\"beh\", \"foo\", \"baz\", \"baz\"]\n    ));\n}\n</code></pre>\n\n<p>If you need to handle duplicates, you'll want to count the number of values too:</p>\n\n<pre><code>use std::{collections::HashMap, hash::Hash};\n\nfn my_eq&lt;T&gt;(a: &amp;[T], b: &amp;[T]) -&gt; bool\nwhere\n    T: Eq + Hash,\n{\n    fn count&lt;T&gt;(items: &amp;[T]) -&gt; HashMap&lt;&amp;T, usize&gt;\n    where\n        T: Eq + Hash,\n    {\n        let mut cnt = HashMap::new();\n        for i in items {\n            *cnt.entry(i).or_insert(0) += 1\n        }\n        cnt\n    }\n\n    count(a) == count(b)\n}\n\nfn main() {\n    assert!(my_eq(\n        &amp;[\"foo\", \"foo\", \"baz\", \"beh\"],\n        &amp;[\"beh\", \"foo\", \"baz\", \"foo\"]\n    ));\n    assert!(!my_eq(\n        &amp;[\"foo\", \"foo\", \"baz\", \"beh\"],\n        &amp;[\"beh\", \"foo\", \"baz\"]\n    ));\n}\n</code></pre>\n\n<p>If you want to be super fancy, you can create a <em>newtype</em> that adds this type of equality directly:</p>\n\n<pre><code>use std::{collections::HashMap, hash::Hash};\n\n#[derive(Debug, Copy, Clone)]\nstruct CustomEq&lt;'a, T: 'a&gt;(&amp;'a [T]);\n\nimpl&lt;'a, T&gt; CustomEq&lt;'a, T&gt;\nwhere\n    T: Eq + Hash,\n{\n    fn count(&amp;self) -&gt; HashMap&lt;&amp;T, usize&gt; {\n        let mut cnt = HashMap::new();\n        for i in self.0 {\n            *cnt.entry(i).or_insert(0) += 1\n        }\n        cnt\n    }\n}\n\nimpl&lt;'a, T&gt; PartialEq for CustomEq&lt;'a, T&gt;\nwhere\n    T: Eq + Hash,\n{\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.count() == other.count()\n    }\n}\n\nfn main() {\n    assert_eq!(\n        CustomEq(&amp;[\"foo\", \"bar\", \"baz\", \"beh\"]),\n        CustomEq(&amp;[\"beh\", \"foo\", \"baz\", \"bar\"])\n    );\n    assert_ne!(\n        CustomEq(&amp;[\"beh\", \"foo\", \"baz\", \"bar\"]),\n        CustomEq(&amp;[\"beh\", \"foo\", \"baz\", \"baz\"])\n    );\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1563893935, "creation_date": 1563893935, "answer_id": 57167005, "question_id": 42748277, "link": "https://stackoverflow.com/questions/42748277/how-do-i-test-for-the-equality-of-two-unordered-lists/57167005#57167005", "title": "How do I test for the equality of two unordered lists?", "body": "<p>If you have ownership or mutability of your lists, you can sort them and then compare the lists:</p>\n\n<pre><code>fn eq_lists_inplace&lt;T&gt;(a: &amp;mut [T], b: &amp;mut [T]) -&gt; bool\nwhere\n    T: PartialEq + Ord,\n{\n    a.sort();\n    b.sort();\n\n    a == b\n}\n\nfn main() {\n    let mut a = [\"foo\", \"bar\", \"baz\", \"beh\"];\n    let mut b = [\"beh\", \"foo\", \"baz\", \"bar\"];\n\n    assert!(eq_lists_inplace(&amp;mut a, &amp;mut b));\n\n    let mut c = [\"beh\", \"foo\", \"baz\", \"bar\"];\n    let mut d = [\"beh\", \"foo\", \"baz\", \"baz\"];\n\n    assert!(!eq_lists_inplace(&amp;mut c, &amp;mut d));\n}\n</code></pre>\n\n<p>If you don't have ownership, then you could take references to the items and sort those:</p>\n\n<pre><code>fn eq_lists&lt;T&gt;(a: &amp;[T], b: &amp;[T]) -&gt; bool\nwhere\n    T: PartialEq + Ord,\n{\n    let mut a: Vec&lt;_&gt; = a.iter().collect();\n    let mut b: Vec&lt;_&gt; = b.iter().collect();\n    a.sort();\n    b.sort();\n\n    a == b\n}\n\nfn main() {\n    let a = &amp;[\"foo\", \"bar\", \"baz\", \"beh\"];\n    let b = &amp;[\"beh\", \"foo\", \"baz\", \"bar\"];\n    assert!(eq_lists(a, b));\n\n    let c = &amp;[\"beh\", \"foo\", \"baz\", \"bar\"];\n    let d = &amp;[\"beh\", \"foo\", \"baz\", \"baz\"];\n    assert!(!eq_lists(c, d));\n}\n</code></pre>\n\n<p>There are various ways of sorting available to you. A sample of alternates:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_key\" rel=\"nofollow noreferrer\"><code>sort_by_key</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable\" rel=\"nofollow noreferrer\"><code>sort_unstable</code></a></li>\n</ul>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user4187476"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1297, "favorite_count": 0, "accepted_answer_id": 42748484, "answer_count": 2, "score": 9, "last_activity_date": 1563893935, "creation_date": 1489327088, "last_edit_date": 1563892975, "question_id": 42748277, "link": "https://stackoverflow.com/questions/42748277/how-do-i-test-for-the-equality-of-two-unordered-lists", "title": "How do I test for the equality of two unordered lists?", "body": "<p>I have 2 vectors of structs. What's the best method to know that those lists are the same length and that all elements are in both lists?</p>\n\n<p><code>[foo, bar, baz, beh]</code> is \"equal\" to <code>[beh, foo, baz, bar]</code> but <code>[beh, foo, baz, bar]</code> is not \"equal\" to <code>[beh, foo, baz, baz]</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489349526, "post_id": 42748982, "comment_id": 72621298, "body": "The linked answer demonstrates the two-step creation of reference to itself. I thought it would work here, using a box to prevent moves. But <a href=\"https://play.rust-lang.org/?gist=b51113c7b9e233f5c3518cf95da47fc7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">it doesn&#39;t compile, either</a>, and I&#39;m not really sure I understand why - surely there is no move if the object is boxed? Or is it the case that the compiler cannot prove that the object will never be moved out of the box?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489350977, "post_id": 42748982, "comment_id": 72621858, "body": "@user4815162342 you mean the piece of code from the linked answer that has the warning <i>&quot;but the created value is highly restricted - <b>it can never be moved. Notably, this means it cannot be returned from a function</b>&quot;</i> (emphasis mine)? The same style of struct that you try to move by returning it from a function? Moving <i>the box</i> counts as a move. In this case, the compiler doesn&#39;t know anything special about <code>Box</code>. This is why owning_ref exists."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489353491, "post_id": 42748982, "comment_id": 72622748, "body": "No need to be snappy, I clearly didn&#39;t realize that &quot;moving the box counts as a move&quot; (not part of the answer). So, why does moving the box count as a move? It doesn&#39;t move the object, after all."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489355572, "post_id": 42748982, "comment_id": 72623408, "body": "@user4815162342 not trying to be snappy, just pointing out that the exact problem with the exact same context you are talking about is covered in the duplicate, right after the part of code that you adapted for the example. For whatever reason, I have the experience of people not reading the next sentence that already answers the question, so I have taken to just pointing it out again, bolding the relevant aspect, no disrespect intended."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489355698, "post_id": 42748982, "comment_id": 72623445, "body": "@user4815162342  <i>why does moving the box count as a move</i> \u2014 because it <b>is a move</b> and the compiler doesn&#39;t know anything special about <code>Box</code>. It&#39;s the same as <i>any other struct</i> where you take a reference to the inside of it. The <b>compiler doesn&#39;t know</b> that the reference remains valid, even though the programmer does. That&#39;s why the linked question has the section <i>&quot;There is a special case where the lifetime tracking is overzealous: when you have something placed on the heap&quot;</i> \u2014 the compiler doesn&#39;t know what <code>Box</code> (or <code>String</code> or <code>Vec</code> or <code>PathBuf</code> or ...) does with the internals."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1489356018, "post_id": 42748982, "comment_id": 72623549, "body": "No problem, thanks for the clarification. I guess I was thinking of boxing as something that &quot;obviously&quot; guarantees that the object&#39;s address won&#39;t change, a fact I already <a href=\"http://stackoverflow.com/a/41089221/1600898\">wrote about</a> in the context of raw pointers. But what applies raw pointers don&#39;t track lifetimes, so these problems don&#39;t apply to them."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1489356322, "post_id": 42748982, "comment_id": 72623656, "body": "I solved the issue by getting rid of the vector. The code that collected substrings into the vector is now an <code>Iterator</code> that produces <code>&amp;str</code> items without any allocation. That change made it possible to move the iteration into the closure, which now only needs the string to work. I&#39;m accepting this answer, since it answers the question I actually asked correctly and in quite some detail."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1602609092, "last_edit_date": 1602609092, "creation_date": 1489331106, "answer_id": 42748982, "question_id": 42747620, "link": "https://stackoverflow.com/questions/42747620/lifetime-of-references-in-closures/42748982#42748982", "title": "Lifetime of references in closures", "body": "<p>There's nothing specific to closures here; it's the equivalent of:</p>\n<pre><code>fn main() {\n    let string = String::from(&quot;a:b:c&quot;);\n    let substrings = vec![&amp;string[0..1], &amp;string[2..3], &amp;string[4..5]];\n    let string = string;\n}\n</code></pre>\n<p>You are attempting to <em>move</em> the <code>String</code> while there are outstanding borrows. In my example here, it's to another variable; in your example it's to the closure's environment. Either way, you are still moving it.</p>\n<p>Additionally, you are trying to move the substrings into the same closure environment as the owning string. That's makes the entire problem equivalent to <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>:</p>\n<pre><code>struct Environment&lt;'a&gt; {\n    string: String,\n    substrings: Vec&lt;&amp;'a str&gt;,\n}\n\nfn thing&lt;'a&gt;() -&gt; Environment&lt;'a&gt; {\n    let string = String::from(&quot;a:b:c&quot;);\n    let substrings = vec![&amp;string[0..1], &amp;string[2..3], &amp;string[4..5]];\n    Environment {\n        string: string,\n        substrings: substrings,\n    }\n}\n</code></pre>\n<blockquote>\n<p>The object is created within the environment and is scoped to it</p>\n</blockquote>\n<p>I'd disagree; <code>string</code> and <code>substrings</code> are created <em>outside</em> of the closure's environment and <em>moved into it</em>. It's that move that's tripping you up.</p>\n<blockquote>\n<p>once created it could be safely moved to the closure.</p>\n</blockquote>\n<p>In <em>this</em> case that's true, but only because you, the programmer, can guarantee that the address of the string data <em>inside</em> the <code>String</code> will remain constant. You know this for two reasons:</p>\n<ul>\n<li><code>String</code> is internally implemented with a heap allocation, so moving the <code>String</code> doesn't move the string data.</li>\n<li>The <code>String</code> will never be mutated, which could cause the string to reallocate, invalidating any references.</li>\n</ul>\n<p>The <em>easiest</em> solution for your example is to simply convert the slices to <code>String</code>s and let the closure own them completely. This may even be a net benefit if that means you can free a large string in favor of a few smaller strings.</p>\n<p>Otherwise, you meet the criteria laid out under &quot;There is a special case where the lifetime tracking is overzealous&quot; in <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>, so you can use crates like:</p>\n<h3><a href=\"https://crates.io/crates/owning_ref\" rel=\"nofollow noreferrer\">owning_ref</a></h3>\n<pre class=\"lang-rust prettyprint-override\"><code>use owning_ref::RcRef; // 0.4.1\nuse std::rc::Rc;\n\nfn stage_action() -&gt; impl Fn() {\n    let string = RcRef::new(Rc::new(String::from(&quot;a:b:c&quot;)));\n\n    let substrings = vec![\n        string.clone().map(|s| &amp;s[0..1]),\n        string.clone().map(|s| &amp;s[2..3]),\n        string.clone().map(|s| &amp;s[4..5]),\n    ];\n\n    move || {\n        for sub in &amp;substrings {\n            println!(&quot;{}&quot;, &amp;**sub);\n        }\n    }\n}\n\nfn main() {\n    let action = stage_action();\n    action();\n}\n</code></pre>\n<h3><a href=\"https://crates.io/crates/ouroboros\" rel=\"nofollow noreferrer\">ouroboros</a></h3>\n<pre class=\"lang-rust prettyprint-override\"><code>use ouroboros::self_referencing; // 0.2.3\n\nfn stage_action() -&gt; impl Fn() {\n    #[self_referencing]\n    struct Thing {\n        string: String,\n        #[borrows(string)]\n        substrings: Vec&lt;&amp;'this str&gt;,\n    }\n\n    let thing = ThingBuilder {\n        string: String::from(&quot;a:b:c&quot;),\n        substrings_builder: |s| vec![&amp;s[0..1], &amp;s[2..3], &amp;s[4..5]],\n    }\n    .build();\n\n    move || {\n        thing.with_substrings(|substrings| {\n            for sub in substrings {\n                println!(&quot;{}&quot;, sub);\n            }\n        })\n    }\n}\n\nfn main() {\n    let action = stage_action();\n    action();\n}\n</code></pre>\n<hr />\n<p>Note that I'm no expert user of either of these crates, so these examples may not be the <em>best</em> use of it.</p>\n"}], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 555, "favorite_count": 0, "accepted_answer_id": 42748982, "answer_count": 1, "score": 2, "last_activity_date": 1602609092, "creation_date": 1489323069, "last_edit_date": 1489329810, "question_id": 42747620, "link": "https://stackoverflow.com/questions/42747620/lifetime-of-references-in-closures", "title": "Lifetime of references in closures", "body": "<p>I need a closure to refer to parts of an object in its enclosing environment. The object is created within the environment and is scoped to it, but once created it could be safely moved to the closure.</p>\n\n<p>The use case is a function that does some preparatory work and returns a closure that will do the rest of the work. The reason for this design are execution constraints: the first part of the work involves allocation, and the remainder must do no allocation. Here is a minimal example:</p>\n\n<pre><code>fn stage_action() -&gt; Box&lt;Fn() -&gt; ()&gt; {\n    // split a freshly allocated string into pieces\n    let string = String::from(\"a:b:c\");\n    let substrings = vec![&amp;string[0..1], &amp;string[2..3], &amp;string[4..5]];\n\n    // the returned closure refers to the subtrings vector of\n    // slices without any further allocation or modification\n    Box::new(move || {\n        for sub in substrings.iter() {\n            println!(\"{}\", sub);\n        }\n    })\n}\n\nfn main() {\n    let action = stage_action();\n    // ...executed some time later:\n    action();\n}\n</code></pre>\n\n<p>This fails to compile, correctly stating that <code>&amp;string[0..1]</code> and others must not outlive <code>string</code>. But if <code>string</code> were moved into the closure, there would be no problem. Is there a way to force that to happen, or another approach that would allow the closure to refer to parts of an object created just outside of it?</p>\n\n<p>I've also tried creating a <code>struct</code> with the same functionality to make the move fully explicit, but that <a href=\"https://play.rust-lang.org/?gist=fe54f15dbc4c6b10ea80bf817ae9abf8&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">doesn't compile either</a>. Again, compilation fails with the error that <code>&amp;later[0..1]</code> and others only live until the end of function, but \"borrowed value must be valid for the static lifetime\".</p>\n\n<p>Even <a href=\"https://play.rust-lang.org/?gist=cd1f2b44e27b34538b258284605bc15b&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">completely avoiding a <code>Box</code></a> doesn't appear to help - the compiler complains that the object doesn't live long enough.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1489324705, "post_id": 42747410, "comment_id": 72612414, "body": "You are apparently compiling <code>raw-cpuid 2.0.0</code> which is more than a year old. The version <code>2.0.1</code> released on June, the 8th 2016 compiles fine for me."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489328409, "post_id": 42747410, "comment_id": 72613628, "body": "If you can use nightly Rust, you can use my <a href=\"https://github.com/shepmaster/cupid\" rel=\"nofollow noreferrer\">cupid crate</a>, which is a pure-Rust implementation."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489334749, "post_id": 42747410, "comment_id": 72615815, "body": "@Shepmaster <code>raw-cpuid</code> requires nightly, too AFAIK."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489540365, "post_id": 42747410, "comment_id": 72713212, "body": "Also, I just released cupid 0.3.0, which now works on stable :-)"}], "owner": {"reputation": 325, "user_id": 3688659, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/6265083c30ede6204e64facc809859d2?s=128&d=identicon&r=PG&f=1", "display_name": "SphericalCow", "link": "https://stackoverflow.com/users/3688659/sphericalcow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 148, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1489324266, "creation_date": 1489321919, "last_edit_date": 1489324266, "question_id": 42747410, "link": "https://stackoverflow.com/questions/42747410/how-do-i-compile-the-raw-cpuid-crate-in-rust", "title": "How do I compile the raw-cpuid crate in rust?", "body": "<p>I am using <a href=\"http://gz.github.io/rust-x86/raw_cpuid/\" rel=\"nofollow noreferrer\">raw-cpuid</a> crate for a project. It uses <code>raw::Slice</code> structure in <a href=\"http://gz.github.io/rust-x86/raw_cpuid/struct.ExtendedFunctionInfo.html#method.processor_brand_string\" rel=\"nofollow noreferrer\"><code>processor_brand_string()</code> function of <code>ExtendedFunctionInfo structure</code></a>.</p>\n\n<pre><code>let slice = raw::Slice { data: brand_string_start, len: 3*4*4 };\n</code></pre>\n\n<p>The above statement doesn't compile. It aborts with this error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cannot find struct, variant or union type `Slice` in module `raw`\n   --&gt; /home/ubuntu/.cargo/registry/src/github.com-1ecc6299db9ec823/raw-cpuid-2.0.0/src/lib.rs:435:25\n    |\n435 |             let slice = raw::Slice { data: brand_string_start, len: 3*4 };\n    |                         ^^^^^^^^^^ not found in `raw`\n</code></pre>\n\n<p>The crate uses <code>no_std</code> attribute. The Rust book says </p>\n\n<blockquote>\n  <p>When we\u2019re using the standard library, Rust automatically brings <code>std</code>\n  into scope, allowing you to use its features without an explicit\n  import. By the same token, when using <code>#![no_std]</code>, Rust will bring <code>core</code>\n  into scope for you, as well as its prelude. This means that a lot of\n  code will Just Work.</p>\n</blockquote>\n\n<p>I checked the core crate and it has <a href=\"https://doc.rust-lang.org/1.8.0/core/raw/struct.Slice.html\" rel=\"nofollow noreferrer\"><code>Slice</code></a> structure in the raw module. I have searched for any resolution of this error but I couldn't find one and me being new to Rust am unable to figure out what to do. I don't think many have used this crate but any help is appreciated. Thanks</p>\n"}, {"tags": ["rust", "atom-editor"], "answers": [{"comments": [{"owner": {"reputation": 165, "user_id": 2790167, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a10d94b71e71fa7d70fef9127402139a?s=128&d=identicon&r=PG&f=1", "display_name": "user2790167", "link": "https://stackoverflow.com/users/2790167/user2790167"}, "edited": false, "score": 0, "creation_date": 1489346451, "post_id": 42746161, "comment_id": 72620119, "body": "I downloaded that repository, unpacked it, and pointed Racer at the directory.  Atom still shows the same error messages when typing, including &quot;racer.racerBinPath is not set in your config&quot;.  So then I ran the <code>rustup component add rust-src</code> command and tried pointing it at that source code instead.  Still no luck.  Finally, I added the optional &#39;Cargo home directory&#39; path, which also failed."}], "tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": false, "score": 3, "last_activity_date": 1489313743, "creation_date": 1489313743, "answer_id": 42746161, "question_id": 42745371, "link": "https://stackoverflow.com/questions/42745371/how-to-get-racer-working-with-atom/42746161#42746161", "title": "How to get Racer working with Atom?", "body": "<p>The \"rust source code directory\" refers to the source of the compiler and standard library, such that racer can look up definitions for types and functions defined in the standard library.</p>\n\n<p>Using rustup, you can run the command\n<code>rustup component add rust-src</code>\n- which will download the source code to a folder like\n<code>.multirust/toolchains/&lt;your-toolchain&gt;/lib/rustlib/src/rust/src</code></p>\n\n<p>This is the path you want in step 2.</p>\n\n<p>Alternatively, you can get it from here: <a href=\"https://github.com/rust-lang/rust/tree/stable\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/tree/stable</a></p>\n"}], "owner": {"reputation": 165, "user_id": 2790167, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a10d94b71e71fa7d70fef9127402139a?s=128&d=identicon&r=PG&f=1", "display_name": "user2790167", "link": "https://stackoverflow.com/users/2790167/user2790167"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 654, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1489332655, "creation_date": 1489307801, "last_edit_date": 1489332655, "question_id": 42745371, "link": "https://stackoverflow.com/questions/42745371/how-to-get-racer-working-with-atom", "title": "How to get Racer working with Atom?", "body": "<p>I've followed the instructions on <a href=\"https://atom.io/packages/racer\" rel=\"nofollow noreferrer\">this page</a> to try to get the Racer package for Atom working in a 64-bit Windows OS.  But I've so far been unsuccessful.</p>\n\n<p>I installed Rust from <a href=\"https://www.rust-lang.org/en-US/install.html\" rel=\"nofollow noreferrer\">this location</a>.  I installed Atom and its packages 'language-rust' (0.4.9) and 'racer' (0.20.0).  I successfully compiled racer.exe using the source repository found <a href=\"https://github.com/phildawes/racer\" rel=\"nofollow noreferrer\">here</a>, producing a 3.4-MB binary.  The Racer package asks for two directories to be specified by the user:</p>\n\n<ol>\n<li>Path to the Racer executable</li>\n<li>Path to the Rust source code directory</li>\n</ol>\n\n<p>For the former, I pointed it at the location of the racer.exe binary I compiled.  I'm not sure what to enter in the latter field.</p>\n\n<p>If it's left blank, the plugin doesn't work (many errors are generated while typing).  I gather that the Racer plugin wants to be pointed at a directory containing \"the Rust source code\", but I don't know what it's referring to.  The package's documentation says, \"The Rustc source has to point to the base directory of the source code.\".  The source points at the base directory of the source?  I have no idea what that means, so I'm stuck.</p>\n"}, {"tags": ["reference", "rust", "lifetime"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1489313919, "post_id": 42745363, "comment_id": 72609247, "body": "You code is not very idiomatic and uses <code>unsafe</code> for a very simple operation already. Do you know about <a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\"><code>Vec&lt;T&gt;</code></a>? It&#39;s a dynamically allocated array with convenience methods like <code>push()</code>. If you can&#39;t or don&#39;t want to use the heap, you can use the crate <code>arrayvec</code> which wraps an stack allocated array and provides many useful methods as well. You certainly don&#39;t want to do that yourself like that..."}, {"owner": {"reputation": 71, "user_id": 1642282, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1307ee5b2dadf4a6f1cef0ce30bc3dcd?s=128&d=identicon&r=PG", "display_name": "jeremiah", "link": "https://stackoverflow.com/users/1642282/jeremiah"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1489328396, "post_id": 42745363, "comment_id": 72613622, "body": "I didn&#39;t know about arrayvec. Certainly it can improve my code."}], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1489313711, "post_id": 42745502, "comment_id": 72609198, "body": "Could you explain <i>why</i> the lifetime parameter needs to be specified?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1489323542, "post_id": 42745502, "comment_id": 72612042, "body": "As this is already accepted: the lifetime <code>&#39;b</code> can be removed from the signature and the <code>::&lt;&#39;a&gt;</code> can be removed from the body. The compiler is able to infer those two things."}], "tags": [], "owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "is_accepted": true, "score": 1, "last_activity_date": 1489308771, "creation_date": 1489308771, "answer_id": 42745502, "question_id": 42745363, "link": "https://stackoverflow.com/questions/42745363/the-lifetime-a-as-defined-on-the-body-does-not-necessarily-outlive-the-anonymou/42745502#42745502", "title": "the lifetime &#39;a as defined on the body does not necessarily outlive the anonymous lifetime #1 defined on the body", "body": "<p>You need to specify lifetime to the slice parameter:</p>\n\n<pre><code>fn f1&lt;'b, 'a: 'b&gt;(s: &amp;'a str, data: &amp;'b mut [T1&lt;'a&gt;]) {\n    data[0] = T1::&lt;'a&gt; { value: s };\n}\n</code></pre>\n"}], "owner": {"reputation": 71, "user_id": 1642282, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1307ee5b2dadf4a6f1cef0ce30bc3dcd?s=128&d=identicon&r=PG", "display_name": "jeremiah", "link": "https://stackoverflow.com/users/1642282/jeremiah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1772, "favorite_count": 0, "accepted_answer_id": 42745502, "answer_count": 1, "score": 2, "last_activity_date": 1489324062, "creation_date": 1489307747, "last_edit_date": 1489313667, "question_id": 42745363, "link": "https://stackoverflow.com/questions/42745363/the-lifetime-a-as-defined-on-the-body-does-not-necessarily-outlive-the-anonymou", "title": "the lifetime &#39;a as defined on the body does not necessarily outlive the anonymous lifetime #1 defined on the body", "body": "<p>I'm trying to create a function (<code>f1</code>) that adds an element to an array.</p>\n\n<p>Here is my Rust code:</p>\n\n<pre><code>use std::mem;\n\nstruct T1&lt;'a&gt; {\n    value: &amp;'a str,\n}\n\nfn main() {   \n    let mut data: [T1; 1] = unsafe { mem::uninitialized() };\n    f1(\"Hello\", &amp;mut data[..]);\n}\n\nfn f1&lt;'b, 'a: 'b&gt;(s: &amp;'a str, data: &amp;'b mut[T1]) {   \n    data[0] = T1::&lt;'a&gt; { value: s };\n}\n</code></pre>\n\n<p>I get this error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:13:15\n   |\n13 |     data[0] = T1::&lt;'a&gt; { value: s };\n   |               ^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n   |\n   = note: expected type `T1&lt;'_&gt;`\n   = note:    found type `T1&lt;'a&gt;`\nnote: the lifetime 'a as defined on the body at 12:49...\n  --&gt; &lt;anon&gt;:12:50\n   |\n12 |   fn f1&lt;'b, 'a: 'b&gt;(s: &amp;'a str, data: &amp;'b mut[T1]) {   \n   |  __________________________________________________^ starting here...\n13 | |     data[0] = T1::&lt;'a&gt; { value: s };\n14 | | }\n   | |_^ ...ending here\nnote: ...does not necessarily outlive the anonymous lifetime #1 defined on the body at 12:49\n  --&gt; &lt;anon&gt;:12:50\n   |\n12 |   fn f1&lt;'b, 'a: 'b&gt;(s: &amp;'a str, data: &amp;'b mut[T1]) {   \n   |  __________________________________________________^ starting here...\n13 | |     data[0] = T1::&lt;'a&gt; { value: s };\n14 | | }\n   | |_^ ...ending here\nhelp: consider using an explicit lifetime parameter as shown: fn f1&lt;'b, 'a:'b&gt;(s: &amp;'a str, data: &amp;'b mut [T1&lt;'a&gt;])\n  --&gt; &lt;anon&gt;:12:1\n   |\n12 |   fn f1&lt;'b, 'a: 'b&gt;(s: &amp;'a str, data: &amp;'b mut[T1]) {   \n   |  _^ starting here...\n13 | |     data[0] = T1::&lt;'a&gt; { value: s };\n14 | | }\n   | |_^ ...ending here \n</code></pre>\n\n<p>Is there a way to write <code>f1</code> that does what I'm trying to do?</p>\n"}, {"tags": ["rust", "traits", "lifetime"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1489309757, "post_id": 42743880, "comment_id": 72608133, "body": "Does the linked question help you? I <i>think</i> it&#39;s the same problem in both questions. However, you have another problem: you want to get a <code>&amp;mut Vec&lt;_&gt;</code> (the <code>I</code> type in the second impl) from a <code>&amp;&amp;mut T</code> (the type of <code>self</code> in the method of the second impl) which is impossible. The answer to both problems is: take <code>self</code> by value in the method. If this all isn&#39;t helping you, please let us know!"}, {"owner": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1489339688, "post_id": 42743880, "comment_id": 72617611, "body": "@LukasKalbertodt thanks for the link. I think it boild down to the same problem indeed. I did solve my problem the way you suggested: by taking <code>self</code> instead of <code>&amp;self</code>. Thanks a lot!"}], "answers": [{"tags": [], "owner": {"reputation": 988, "user_id": 6090592, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d5e40fcf8c369f36d04406528df52f2?s=128&d=identicon&r=PG&f=1", "display_name": "Djzin", "link": "https://stackoverflow.com/users/6090592/djzin"}, "is_accepted": true, "score": 2, "last_activity_date": 1489346600, "last_edit_date": 1489346600, "creation_date": 1489315407, "answer_id": 42746400, "question_id": 42743880, "link": "https://stackoverflow.com/questions/42743880/rustc-can-infer-the-appropriate-lifetime-for-a-given-impl-but-not-for-another/42746400#42746400", "title": "rustc can &quot;infer the appropriate lifetime&quot; for a given impl, but not for another one", "body": "<p>Let's compare the two function signatures, desugared. The second one looks like this:</p>\n\n<pre><code>fn as_url_params&lt;'b&gt;(self: &amp;'b &amp;'a mut Vec&lt;(T, U)&gt;) -&gt; &amp;'a mut Vec&lt;(T, U)&gt; {\n    *self\n}\n</code></pre>\n\n<p>Here you dereference <code>self</code>, giving you an object of type <code>&amp;'a mut Vec&lt;(T, U)&gt;</code> (which is what you want) - but it can live only for lifetime <code>'b</code> since you dereferenced it from a reference of lifetime <code>'b</code>. Since <code>'b</code> is potentially shorter than <code>'a</code>, this is a lifetime error.</p>\n\n<p>So how on earth does the first example work, then?</p>\n\n<pre><code>fn as_url_params&lt;'b&gt;(self: &amp;'b &amp;'a Vec&lt;(T, U)&gt;) -&gt; &amp;'a Vec&lt;(T, U)&gt; {\n    *self\n}\n</code></pre>\n\n<p>In this case, we get an object of type <code>&amp;'a Vec&lt;(T, U)&gt;</code> with the same borrowing restriction - but since <code>&amp;'a T</code> implements <code>Copy</code>, we return a new copy of it. (The reason it implements <code>Copy</code> - it doesn't matter if the intermediate borrow ends - we know there is an immutable reference with lifetime <code>'a</code>, so the object cannot change in any way until <code>'a</code> has ended.)</p>\n"}], "owner": {"reputation": 1326, "user_id": 1836144, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/e250d748ff6c2ff23bc4550e0f0971f5?s=128&d=identicon&r=PG", "display_name": "little-dude", "link": "https://stackoverflow.com/users/1836144/little-dude"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "closed_date": 1489351145, "accepted_answer_id": 42746400, "answer_count": 1, "score": 0, "last_activity_date": 1489346600, "creation_date": 1489294010, "question_id": 42743880, "link": "https://stackoverflow.com/questions/42743880/rustc-can-infer-the-appropriate-lifetime-for-a-given-impl-but-not-for-another", "closed_reason": "Duplicate", "title": "rustc can &quot;infer the appropriate lifetime&quot; for a given impl, but not for another one", "body": "<p>Apologies for the confusing title... If someone thinks of a better one, please edit this post.</p>\n\n<p>I defined a trait like this:</p>\n\n<pre><code>pub trait AsUrlParams\n    where &lt;Self::I as IntoIterator&gt;::Item: Borrow&lt;(Self::K, Self::V)&gt;,\n{\n    type I: IntoIterator;\n    type K: AsRef&lt;str&gt;;\n    type V: AsRef&lt;str&gt;;\n\n    fn as_url_params(&amp;self) -&gt; Self::I;\n}\n</code></pre>\n\n<p>Implementing it for <code>&amp;Vec&lt;(T, U)&gt;</code> is straightforward:</p>\n\n<pre><code>impl&lt;'a, T, U&gt; AsUrlParams for &amp;'a Vec&lt;(T, U)&gt;\n    where T: AsRef&lt;str&gt;,\n          U: AsRef&lt;str&gt;,\n{\n        type I = Self;\n        type K = T;\n        type V = U;\n\n        fn as_url_params(&amp;self) -&gt; Self::I {\n            *self\n        }\n}\n</code></pre>\n\n<p>However, I hit a lifetime issue when trying to implemented it for <code>&amp;mut Vec&lt;(T, U)&gt;</code>:</p>\n\n<pre><code>impl&lt;'a, T, U&gt; AsUrlParams for &amp;'a mut Vec&lt;(T, U)&gt;\n    where T: AsRef&lt;str&gt;,\n          U: AsRef&lt;str&gt;,\n{\n        type I = Self;\n        type K = T;\n        type V = U;\n\n        fn as_url_params(&amp;self) -&gt; Self::I {\n            *self\n        }\n}\n</code></pre>\n\n<p>Here is the error:</p>\n\n<pre><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n   --&gt; src/main.rs:186:13\n    |\n186 |             *self\n    |             ^^^^^\n    |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 185:43...\n   --&gt; src/main.rs:185:44\n    |\n185 |           fn as_url_params(&amp;self) -&gt; Self::I {\n    |  ____________________________________________^ starting here...\n186 | |             *self\n187 | |         }\n    | |_________^ ...ending here\nnote: ...so that reference does not outlive borrowed content\n   --&gt; src/main.rs:186:13\n    |\n186 |             *self\n    |             ^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the body at 185:43...\n   --&gt; src/main.rs:185:44\n    |\n185 |           fn as_url_params(&amp;self) -&gt; Self::I {\n    |  ____________________________________________^ starting here...\n186 | |             *self\n187 | |         }\n    | |_________^ ...ending here\nnote: ...so that types are compatible (expected AsUrlParams, found AsUrlParams)\n   --&gt; src/main.rs:185:44\n    |\n185 |           fn as_url_params(&amp;self) -&gt; Self::I {\n    |  ____________________________________________^ starting here...\n186 | |             *self\n187 | |         }\n    | |_________^ ...ending here\n</code></pre>\n\n<p>I have two questions:</p>\n\n<ul>\n<li>Is there a way to implement this trait for <code>&amp;'a mut Vec&lt;(T, U)&gt;</code> ?</li>\n<li>Why am I not hitting this error for <code>&amp;'a Vec&lt;(T, U)&gt;</code> ? It looks exactly the same to me from a lifetime perspective: the content of <code>&amp;self</code> is <code>&amp;'a Vec&lt;(T, U)&gt;</code>, which outlives <code>&amp;self</code>.</li>\n</ul>\n"}, {"tags": ["rust", "global-variables", "constants"], "answers": [{"comments": [{"owner": {"reputation": 3503, "user_id": 4322159, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/BuXUi.jpg?s=128&g=1", "display_name": "Fusion", "link": "https://stackoverflow.com/users/4322159/fusion"}, "edited": false, "score": 0, "creation_date": 1601322879, "post_id": 42744581, "comment_id": 113366216, "body": "Since this answer 3 years passed... There is still no better way how to do this? Can&#39;t believe Rust cannot make this without using external crates."}], "tags": [], "owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "is_accepted": true, "score": 5, "last_activity_date": 1489301059, "creation_date": 1489301059, "answer_id": 42744581, "question_id": 42743507, "link": "https://stackoverflow.com/questions/42743507/global-constant-initialized-at-runtime-in-rust/42744581#42744581", "title": "Global constant initialized at runtime in Rust?", "body": "<p>I think something like <a href=\"http://rust-lang-nursery.github.io/lazy-static.rs/lazy_static/index.html\" rel=\"noreferrer\">lazy_static</a> can help with this.</p>\n"}], "owner": {"reputation": 11233, "user_id": 639687, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/367828dd86c0336d80700d4d4086cd33?s=128&d=identicon&r=PG", "display_name": "czerny", "link": "https://stackoverflow.com/users/639687/czerny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1538, "favorite_count": 0, "closed_date": 1489329053, "accepted_answer_id": 42744581, "answer_count": 1, "score": 4, "last_activity_date": 1489329085, "creation_date": 1489290351, "question_id": 42743507, "link": "https://stackoverflow.com/questions/42743507/global-constant-initialized-at-runtime-in-rust", "closed_reason": "Duplicate", "title": "Global constant initialized at runtime in Rust?", "body": "<p>Is is possible to define a global constant, value of which is computed at the beginning of the runtime? Something like</p>\n\n<pre><code>static START_TIME: time::Timespec = time::get_time();\n</code></pre>\n\n<p>if it were possible. <code>static</code> and <code>const</code> declaration requires compile time value (<code>calls in constants are limited to struct and enum constructors</code>) and let can't be put outside function (<code>error: expected item, found `let`</code>).</p>\n"}, {"tags": ["testing", "documentation", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489281352, "post_id": 42742369, "comment_id": 72602828, "body": "<code>#[feature(cfg = nightly)]</code> =&gt; <i>expected unsuffixed literal or identifier, found nightly</i>. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and provide one when asking a question on Stack Overflow."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489281920, "post_id": 42742369, "comment_id": 72602930, "body": "<code>#[feature(cfg = &quot;nightly&quot;)]</code> =&gt; <i>unused attribute</i> and <i>crate-level attribute should be an inner attribute: add an exclamation mark</i>. <b>Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a></b> and provide one when asking a question on Stack Overflow."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489282166, "post_id": 42742369, "comment_id": 72602975, "body": "@Shepmaster Do you use automated tools to generate those two MCVE comments? I would have appreciated a minimally personal comment such as &quot;I think you mean &quot;nightly&quot; in quotes, assuming your build process hasn&#39;t panicked, since you didn&#39;t mention anything like that in your question.&quot; Also, MCVEs, even in the link you included, are explicitly not specified as a requirement for a question. We&#39;re all humans here and I made a judgment call not to include it, why hit me with that comment <i>every time</i> I don&#39;t include an MCVE for a question?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489282763, "post_id": 42742369, "comment_id": 72603076, "body": "Nope, they are handcrafted for each question, although <code>[MCVE]</code> in comments expands on SO because this is such a problem. <a href=\"http://stackoverflow.com/help/on-topic\">The help states</a>: <i>&quot;Questions seeking debugging help [...] must include [...] the shortest code necessary to reproduce it&quot;</i>; else the question is likely to be <b>closed as off-topic</b>. I have no idea how many times I&#39;ve left such a comment for you because I&#39;ve left many for lots of people; I leave one when the question needs a MCVE. I don&#39;t tend to spend more effort on it than the OP has shown in the question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489282893, "post_id": 42742369, "comment_id": 72603095, "body": "Look at it from the other way: if someone had left an answer saying &quot;doc tests and feature gates works for me&quot;, would you have upvoted or accepted it? I&#39;m guessing not. However, that&#39;s the equivalent of the <a href=\"https://meta.stackoverflow.com/a/261593/155423\">effort shown</a>. What if the answer had obvious logical or syntax errors showing that the answerer didn&#39;t even <i>try</i> the solution? Asking a good question and getting a good answer is a two-way street."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489283397, "post_id": 42742369, "comment_id": 72603182, "body": "@Shepmaster I do appreciate you explaining your view. For my part, I feel it&#39;s personally disrespectful given that we have a passing acquaintance through these Q&amp;A, enough for me to expect (and mildly dread) an MCVE comment from you, and (I presumed) enough for you to expect a certain degree of Rust familiarity from me. I&#39;d bring up the differences between these two interpretations of SO as a medium on Meta, but I&#39;m not up for doing the emotional labor in fielding the discussion or dealing with the Meta effect, so let&#39;s just leave it at this for the dubious posterity of comments."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489283428, "post_id": 42742369, "comment_id": 72603188, "body": "And please don&#39;t mistake my terseness for dislike. It&#39;s simply that it feels like most of the time any suggestions I make are ignored or immediately acted upon, so there&#39;s generally little return-on-investment for anything longer than pointing out an error and suggesting that the OP try to create something appropriate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489283735, "post_id": 42742369, "comment_id": 72603245, "body": "<i>we have a passing acquaintance through these Q&amp;A</i> \u2014 I only remember a small subset of regular users, most of which hang out in the <a href=\"http://chat.stackoverflow.com/rooms/62927/rust\">Rust chatroom</a> (which you are welcome to join). For example, it appears that you&#39;ve asked two of the last 150 questions, of which I&#39;ve likely read / edited / answered 98+% of. It&#39;s nothing deliberate, <a href=\"https://stackoverflow.com/questions/tagged/rust\">rust</a> just isn&#39;t as tiny as it was a few years back."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 40596, "user_id": 1677912, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/craWj.png?s=128&g=1", "display_name": "Mogsdad", "link": "https://stackoverflow.com/users/1677912/mogsdad"}, "edited": false, "score": 0, "creation_date": 1520188046, "post_id": 42742369, "comment_id": 85202897, "body": "@Mogsdad This question has nothing to do with Python; using <a href=\"https://stackoverflow.com/questions/tagged/doctest\">doctest</a> is inappropriate."}, {"owner": {"reputation": 40596, "user_id": 1677912, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/craWj.png?s=128&g=1", "display_name": "Mogsdad", "link": "https://stackoverflow.com/users/1677912/mogsdad"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1520190836, "post_id": 42742369, "comment_id": 85203926, "body": "@Shepmaster Nothing to do with Documentation, either (if one reads the tag guidance). That&#39;s what you get when tags are just words, I guess."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 40596, "user_id": 1677912, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/craWj.png?s=128&g=1", "display_name": "Mogsdad", "link": "https://stackoverflow.com/users/1677912/mogsdad"}, "edited": false, "score": 0, "creation_date": 1520191072, "post_id": 42742369, "comment_id": 85204012, "body": "@Mogsdad am I misunderstanding what a &quot;documentation generator&quot; is? Rust has a tool called <code>rustdoc</code> which generates documentation from source code comments. That same tool also runs tests. The tag says it&#39;s for such tools."}], "answers": [{"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1550577206, "post_id": 42742655, "comment_id": 96311411, "body": "This is possible to add some default features to the tests with <a href=\"https://github.com/rust-lang/cargo/issues/2911#issuecomment-415998960\" rel=\"nofollow noreferrer\">a dirty workaround</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 0, "last_activity_date": 1489282196, "last_edit_date": 1489282196, "creation_date": 1489281847, "answer_id": 42742655, "question_id": 42742369, "link": "https://stackoverflow.com/questions/42742369/how-do-you-run-doc-tests-in-feature-gated-implementations/42742655#42742655", "title": "How do you run doc tests in feature gated implementations?", "body": "<p>Features that are not part of the <code>default</code> set must always be explicitly opted into. You do that by passing an argument at the command line or by listing them in the <code>[dependencies]</code> section if they are dependencies.</p>\n\n<p><strong>src/lib.rs</strong></p>\n\n<pre><code>/// ```\n/// assert!(false);\n/// ```\n#[cfg(feature = \"nightly\")]\ntrait Foo {}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[package]\nname = \"wuzzy\"\nversion = \"0.1.0\"\nauthors = [\"An Devloper &lt;an.devloper@example.com&gt;\"]\n\n[features]\nnightly = []\n</code></pre>\n\n<p>Running <code>cargo test --features=nightly</code> causes the assertion to fire, and <code>cargo test</code> ignores the test. This all works on stable Rust.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo test --features=nightly\n   Doc-tests wuzzy\n\nrunning 1 test\ntest src/lib.rs - Foo (line 1) ... FAILED\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured\n\n$ cargo test\n   Doc-tests wuzzy\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured\n</code></pre>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 218, "favorite_count": 0, "accepted_answer_id": 42742655, "answer_count": 1, "score": 1, "last_activity_date": 1520187891, "creation_date": 1489278976, "last_edit_date": 1520187891, "question_id": 42742369, "link": "https://stackoverflow.com/questions/42742369/how-do-you-run-doc-tests-in-feature-gated-implementations", "title": "How do you run doc tests in feature gated implementations?", "body": "<p>I noticed that if you have a feature gate like <code>#[feature(cfg = \"nightly\")]</code> around a trait implementation, the doctest is skipped by a call to <code>cargo test</code>, even on a nightly <code>rustc</code>. I tried <code>cargo test --all-features</code>, but the results were the same. (Commenting out the gate results in the tests being run, of course.) I didn't see anything in the Rust Reference about this, either.</p>\n\n<p>How do you ensure tests on feature gated implementations run?</p>\n\n<p>For reference, here's my working Rust version.</p>\n\n<pre><code>rustc 1.17.0-nightly (c0b7112ba 2017-03-02)\nbinary: rustc\ncommit-hash: c0b7112ba246d96f253ba845d91f36c0b7398e42\ncommit-date: 2017-03-02\n</code></pre>\n"}, {"tags": ["rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 661, "user_id": 114410, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2a60134645fab0e6e1235ea0f17eda9d?s=128&d=identicon&r=PG", "display_name": "Josh Stone", "link": "https://stackoverflow.com/users/114410/josh-stone"}, "is_accepted": false, "score": 24, "last_activity_date": 1561546498, "last_edit_date": 1561546498, "creation_date": 1490827893, "answer_id": 43105582, "question_id": 42741815, "link": "https://stackoverflow.com/questions/42741815/setting-the-include-path-with-bindgen/43105582#43105582", "title": "Setting the include path with bindgen", "body": "<p>With the API you can use <a href=\"https://docs.rs/bindgen/0.22.1/bindgen/struct.Builder.html#method.clang_arg\" rel=\"noreferrer\"><code>Builder::clang_arg</code></a> with arbitrary arguments:</p>\n\n<pre><code>let b = bindgen::builder().header(\"foo.h\").clang_arg(\"-I/path\");\n</code></pre>\n\n<p>From the command line you can do the same by appending arguments after <code>--</code>, like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>bindgen foo.h -- -I/path\n</code></pre>\n"}], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5868, "favorite_count": 2, "answer_count": 1, "score": 20, "last_activity_date": 1561546498, "creation_date": 1489274145, "last_edit_date": 1489274261, "question_id": 42741815, "link": "https://stackoverflow.com/questions/42741815/setting-the-include-path-with-bindgen", "title": "Setting the include path with bindgen", "body": "<p>I'm writing a Rust interface to <a href=\"https://github.com/repaper/gratis\" rel=\"noreferrer\">a small C library</a>, which has headers spread in a few locations. It's not a system library, and is normally used by some executables in the same package; I'm currently including it as a git submodule in my Cargo project.</p>\n\n<p>Building the library seems to be pretty easy; I've opted to use the <code>gcc</code> crate from <code>build.rs</code>:</p>\n\n<pre><code>gcc::Config::new()\n            .file(\"external/foo/dir1/file1.c\")\n            .file(\"external/foo/dir2/file2.c\")\n            .include(\"external/foo/dir1/\")\n            .include(\"external/foo/dir2/\")\n            .include(\"external/foo/config_a/\")\n            .compile(\"libfoo.a\");\n</code></pre>\n\n<p>Now I was hoping to use the <a href=\"https://docs.rs/bindgen/0.22.1/bindgen/index.html\" rel=\"noreferrer\"><code>bindgen</code></a> crate to generate the FFI interface without too much fuss, but it doesn't seem to have a way of setting include paths.</p>\n\n<p>I can create a <code>wrapper.h</code> as suggested by <a href=\"http://fitzgeraldnick.com/2016/12/14/using-libbindgen-in-build-rs.html\" rel=\"noreferrer\">this blog</a> and include several headers, but if <code>dir1/dir1.h</code> includes <code>conf.h</code> directly, which works when building due to <code>.include(\"external/foo/config_a/\")</code> it can't be found.</p>\n\n<p>I can't find anything in <code>bindgen</code>'s API to help here (essentially I want to pass the equivalent of gcc/clang's <code>-I</code> option).  Am I missing anything?</p>\n\n<p>The best option I can think of so far is to copy the various headers from the library source into some temporary directory in <code>build.rs</code> and run <code>bindgen</code> on that, but that seems somewhat messy if there's a nicer way.</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1489272964, "post_id": 42741600, "comment_id": 72601017, "body": "@ardave FYI, you can put something between <code>impl</code> and <code>I2CDevice</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489273554, "post_id": 42741600, "comment_id": 72601193, "body": "<i>which occurs on the colon (:) that begins the type constraint</i> \u2014 <b>why</b> would you go out of your way to retype in English what would have been more clearly expressed by simply <i>copy-and-pasting the error</i>?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1489273647, "last_edit_date": 1489273647, "creation_date": 1489273122, "answer_id": 42741694, "question_id": 42741600, "link": "https://stackoverflow.com/questions/42741600/how-to-implement-non-generic-trait-on-a-struct-with-a-generic-parameter/42741694#42741694", "title": "How to implement non-generic trait on a struct with a generic parameter", "body": "<p>You should re-read <em>The Rust Programming Language</em>, specifically the section on <a href=\"https://doc.rust-lang.org/stable/book/traits.html#trait-bounds-on-generic-structs\" rel=\"noreferrer\">how to implement traits for generic structs</a>. A <em>lot</em> of hard work has gone into that documentation so that people can get started in Rust easier.</p>\n\n<p>The book will show you the proper syntax for how to define a trait for a struct:</p>\n\n<pre><code>impl&lt;'a, T&gt; I2CDevice for DebugDeviceDecorator&lt;'a, T&gt;\n    where T: I2CDevice&lt;Error = LinuxI2CError&gt; + Sized + 'a\n{\n    // ...\n}\n</code></pre>\n\n<p>Note:</p>\n\n<ol>\n<li><p>You have to declare the two generic values (<code>'a</code> and <code>T</code>) before you can use them.</p></li>\n<li><p>There's nothing special about the fact that the trait has no generics.</p></li>\n<li><p>Types in Rust use <code>PascalCase</code>, not <code>camelCase</code>, so I've changed the name.</p></li>\n<li><p>I switched to a <code>where</code> clause because it's too hard to read the bounds when they are crammed into the generic declaration.</p></li>\n</ol>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user74754"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1109, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1489273647, "creation_date": 1489272585, "last_edit_date": 1489273486, "question_id": 42741600, "link": "https://stackoverflow.com/questions/42741600/how-to-implement-non-generic-trait-on-a-struct-with-a-generic-parameter", "title": "How to implement non-generic trait on a struct with a generic parameter", "body": "<p>I am using the <a href=\"https://github.com/rust-embedded/rust-i2cdev/blob/master/src/core.rs\" rel=\"nofollow noreferrer\"><code>I2CDevice</code> trait</a> which is defined in an external crate like this:</p>\n\n<pre><code>pub trait I2CDevice {\n    type Error: Error;\n    // members\n}\n</code></pre>\n\n<p>Neither it nor any of its members contain any generic arguments.</p>\n\n<p>I am creating a decorator for any <code>I2CDevice</code> implementation which delegates to an inner/concrete <code>I2CDevice</code>, adding console printing for diagnostic purposes:</p>\n\n<pre><code>struct debugDeviceDecorator&lt;'a, T: I2CDevice&lt;Error = LinuxI2CError&gt; + Sized + 'a&gt; {\n    device: &amp;'a mut T,\n}\n\nimpl I2CDevice__A__ for debugDeviceDecorator__B__ {\n    type Error = LinuxI2CError;\n\n    fn read(&amp;mut self, data: &amp;mut [u8]) -&gt; Result&lt;(), Self::Error&gt; {\n        println!(\"read: data: {:?}\", data);\n        self.device.read(data)\n    }\n\n    // etc.\n}\n</code></pre>\n\n<p>I can't figure out what to put in place of <code>__A__</code> and <code>__B__</code>.</p>\n\n<p>When I use no generic arguments whatsoever, I get compiler errors: <em>Expected 1 lifetime parameter</em> and <em>Expected 1 type argument.</em>   </p>\n\n<p>My best guess then is to leave <code>__A__</code> blank because the definition of <code>I2CDevice</code> requires no generic arguments, and then to mirror the type argument used for the <code>debugDeviceDecorator</code> struct itself in place of <code>__B__</code> like:</p>\n\n<pre><code>impl I2CDevice for debugDeviceDecorator&lt;'a, T: I2CDevice&lt;Error=LinuxI2CError&gt; + Sized + 'a&gt; { }\n</code></pre>\n\n<p>I get the compilation error: <em>error: expected one of <code>!</code>, <code>(</code>, <code>+</code>, <code>,</code>, <code>::</code>, <code>&lt;</code>, or <code>&gt;</code>, found <code>:</code></em>, which occurs on the colon (<code>:</code>) that begins the type constraint on the generic argument <code>T</code>.</p>\n\n<p>Perhaps the compiler thinks that I'm trying to constrain <code>T</code> in a manner which diverges from the constraint in the struct definition itself, so instead I try:</p>\n\n<pre><code>impl I2CDevice for debugDeviceDecorator&lt;'a, T&gt; {}\n</code></pre>\n\n<p>Which results in the errors <em>undeclared lifetime</em> for the lifetime parameter, and <em>undefined or not in scope</em> for the type argument itself, at which point I cannot figure out how to proceed.  I would assume that the lifetime and the type argument are defined by the future, as yet nonexistent code that will some day initialize a <code>debugDeviceDecorator</code> struct, values which cannot yet be known and seem to me as though should not prevent this existing code from compiling.</p>\n\n<p>I can see the compiler needing some information about the type of <code>self.device</code> used within the functions of the impl, but I feel like my first guess in which I mirrored the struct's expanded type definition in my impl declaration should have provided that.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1489270126, "post_id": 42740799, "comment_id": 72600150, "body": "<i>How, if at all, can I convince Rust to derive the trait for me?</i> \u2014 you cannot."}, {"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489270622, "post_id": 42740799, "comment_id": 72600304, "body": "@Shepmaster Thanks for the pointer to the other question. I must have missed it as it does not mention Clone in the name (but is Clone-specific)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489270774, "post_id": 42740799, "comment_id": 72600354, "body": "The code in the question uses <code>Clone</code>, but the problem is due to using <code>derive</code>. Any parameterized type will have that issue with any derived trait."}], "owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 32, "favorite_count": 0, "closed_date": 1489270104, "answer_count": 0, "score": 0, "last_activity_date": 1489269955, "creation_date": 1489267393, "last_edit_date": 1489269955, "question_id": 42740799, "link": "https://stackoverflow.com/questions/42740799/clone-for-all-clone-structures-with-a-non-clone-type-parameter", "closed_reason": "Duplicate", "title": "Clone for all-Clone structures with a non-Clone type parameter", "body": "<p>I am using a <code>#[derive(Clone)]</code> for <code>struct&lt;T&gt;</code> where <code>T</code> is not <code>Clone</code> but all the elements of the struct are <code>Clone</code> (since <code>Rc&lt;T&gt;</code> is always <code>Clone</code>). How, if at all, can I convince Rust to derive the trait for me?</p>\n\n<p>A working example: <a href=\"https://play.rust-lang.org/?gist=863a0662fafe674f03307880fa8bbe54&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">(playground link)</a> </p>\n\n<pre><code>use std::rc::Rc;\n\nstruct NotClone;\n\n#[derive(Clone)]\nstruct WithRc&lt;T&gt; {\n    elem: Rc&lt;T&gt;\n    // ...\n}\n\nimpl&lt;T&gt; WithRc&lt;T&gt; {\n    pub fn new(v: T) -&gt; WithRc&lt;T&gt; {\n        WithRc { elem: Rc::new(v) }\n    }\n}\n\nfn main() {\n    let a = WithRc::new(NotClone { });\n    let b = a.clone(); // This triggers the error\n}\n</code></pre>\n\n<p>The error message is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `clone` found for type `WithRc&lt;NotClone&gt;` in the current scope\n  --&gt; src/main.rs:19:15\n   |\n19 |     let b = a.clone(); // This triggers the error\n   |               ^^^^^\n   |\n   = note: the method `clone` exists but the following trait bounds were not satisfied: `NotClone : std::clone::Clone`\n   = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `clone`, perhaps you need to implement it:\n   = help: candidate #1: `std::clone::Clone`\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\">This doc</a> indicates that having <code>Clone</code> members should be enough (and that would make sense), but maybe I am missing something. </p>\n\n<p>I know I <em>could</em> implement <code>Clone</code> myself, but since I already use <code>WithRc&lt;T&gt;</code> as a thin wrapper around a <code>Rc</code>-wrapped data structure where some methods need the shared pointer to self, I'm trying to avoid more boilerplate.</p>\n"}, {"tags": ["data-structures", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489245100, "post_id": 42736656, "comment_id": 72591571, "body": "This question feels far too broad for Stack Overflow."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1489246990, "post_id": 42736656, "comment_id": 72592240, "body": "I agree with Shepmaster. This by no means that I do not find your question intriguing and interesting! I do feel, however, that an answer would require a <i>discussion</i>, which Stack Overflow is ill-equipped to host. I advise you to ask this question on either r/rust (reddit) or the Rust Users forum. (Note: you may also need to specify some bits; for example can the heap change while people have handles? If it can, maintaining indices to elements is going to be tough...)"}, {"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "edited": false, "score": 0, "creation_date": 1490298128, "post_id": 42736656, "comment_id": 73062751, "body": "There is a good discussion at this at <a href=\"https://github.com/contain-rs/discuss/issues/11\" rel=\"nofollow noreferrer\">github.com/contain-rs/discuss/issues/11</a> also mentioning other ways to implement stable handles. One notable example is to reuse but never (in the struct lifetime) deallocate the Node data structures and provide &quot;version number&quot; passed around in the handles. If a handle points to a reused Node, the version numbers will not match."}], "answers": [{"comments": [{"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "edited": false, "score": 0, "creation_date": 1489914298, "post_id": 42870421, "comment_id": 72871766, "body": "A great example -- thanks for pointing out the <code>Entry</code> API. I guess to have multiple &quot;handles&quot; with mutability, I cold use a <code>RefCell</code>."}, {"owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "edited": false, "score": 0, "creation_date": 1489914866, "post_id": 42870421, "comment_id": 72871902, "body": "Hmm, adding mutability to &quot;handles&quot; would be more complicated than just using a <code>RefCell</code>: I still do not know how to <i>safely</i> modify the structure (esp. remove elements) while holding some handles elsewhere. I understand that this is unsafe in general (except withr <code>Rc</code> or GC) and have to set the right level of &quot;unsafeness&quot;."}], "tags": [], "owner": {"reputation": 799, "user_id": 3096774, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/1dd1ee89121ffeb86343b5e70b20beb1?s=128&d=identicon&r=PG&f=1", "display_name": "apt1002", "link": "https://stackoverflow.com/users/3096774/apt1002"}, "is_accepted": false, "score": 2, "last_activity_date": 1489810825, "creation_date": 1489810825, "answer_id": 42870421, "question_id": 42736656, "link": "https://stackoverflow.com/questions/42736656/what-is-the-right-and-most-rusty-way-to-implement-a-data-structure-providing-ha/42870421#42870421", "title": "What is the right and most Rusty way to implement a data structure providing &quot;handles&quot; to its elements?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>Entry</code> API</a> of <a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code></a> in the standard library is a good example of your third idea.</p>\n\n<p>If you study the source code a bit, you find that instances of Entry include a mutable reference to the <code>HashMap</code> they came from, plus some metadata needed to avoid redundantly searching the hash table a second time.</p>\n\n<p>Because an <code>Entry</code> contains a mutable reference to its <code>HashMap</code>, only one such <code>Entry</code> can exist at a time, and concurrent modification of the <code>HashMap</code> while the <code>Entry</code> exists is impossible. This is probably what you want.</p>\n\n<p>Rust's built-in slice type is another example of your third idea. Unusually, the <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"nofollow noreferrer\"><code>split_at_mut()</code></a> method can be used to obtain multiple simultaneous mutable views of the same array, provided they don't overlap. This is perhaps a good example of benefiting from carefully chosen unsafe code.</p>\n\n<p>In my opinion, these designs work well, and I would imitate them.</p>\n"}], "owner": {"reputation": 410, "user_id": 5717598, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-AECmH5CumNA/AAAAAAAAAAI/AAAAAAAAA7Y/PXFW5M9p32M/photo.jpg?sz=128", "display_name": "Tom&#225;\u0161 Gaven\u010diak", "link": "https://stackoverflow.com/users/5717598/tom%c3%a1%c5%a1-gaven%c4%8diak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 274, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1489810825, "creation_date": 1489244346, "last_edit_date": 1495541415, "question_id": 42736656, "link": "https://stackoverflow.com/questions/42736656/what-is-the-right-and-most-rusty-way-to-implement-a-data-structure-providing-ha", "title": "What is the right and most Rusty way to implement a data structure providing &quot;handles&quot; to its elements?", "body": "<p>What would be a good Rusty way to implement a data structure providing \"handles\" to its elements to allow their later manipulation? A prime example would be a <a href=\"https://en.wikipedia.org/wiki/Binary_heap\" rel=\"nofollow noreferrer\">binary heap</a> implementation where you want to decrease element keys and remove elements.</p>\n\n<p>(My particular motivation are <a href=\"https://en.wikipedia.org/wiki/Fibonacci_heap\" rel=\"nofollow noreferrer\">Fibonacci</a> and other heaps, e.g. for Dijkstra's algorithm.)</p>\n\n<p>Unlike <a href=\"https://stackoverflow.com/questions/36167160/recursive-data-structures-in-rust\">this related question</a> I do not mind writing unsafe code as long as I can provide a safe interface with safe element references.</p>\n\n<p>I can think of several directions:</p>\n\n<ul>\n<li><p>Index the elements of the data structure by some unique key and always access it via this key. In a heap, this means an additional structure. This also complicates the internal structure quite a bit.</p></li>\n<li><p>Wrap every node in an <code>Rc</code>, using weak refs for parent pointers. Every \"element handle\" returned is actually a wrapped <code>Rc</code>. This can be completely safe Rust, but I do not like this solution for all the runtime checks and using refcounting everywhere not being a really good design.</p></li>\n<li><p>Return handles with references or pointers lifetime-bound to the main structure. This option would likely not allow deleting individual elements before dropping the main structure. I am not sure about the details or options.</p></li>\n</ul>\n\n<p>I would like to ask for help with the last option, or more generally if there are any other approaches I am missing. I know that <a href=\"https://stackoverflow.com/a/36168774/5717598\">\"you can not have everything\"</a> ... I am asking for the right and most Rusty approach here.</p>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 27474, "user_id": 611, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f0f2ee087377182b1e7bb0057dcee4e0?s=128&d=identicon&r=PG", "display_name": "OJ.", "link": "https://stackoverflow.com/users/611/oj"}, "edited": false, "score": 0, "creation_date": 1511347447, "post_id": 42736596, "comment_id": 81819486, "body": "Did you ever find an answer to this @danilo-silva ? I&#39;m looking to do something similar. I&#39;m struggling to see how I continue to iterate over separate reads/writes, so any help would be greatly appreciated."}], "owner": {"reputation": 293, "user_id": 5914783, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206866191308280/picture?type=large", "display_name": "Danilo Silva", "link": "https://stackoverflow.com/users/5914783/danilo-silva"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 596, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1489244900, "creation_date": 1489243945, "last_edit_date": 1495542870, "question_id": 42736596, "link": "https://stackoverflow.com/questions/42736596/stream-content-to-a-remote-server-in-an-infinite-loop", "title": "Stream content to a remote server in an infinite loop", "body": "<p>I previously asked about\n<a href=\"https://stackoverflow.com/questions/42107668/asynchronously-reconnecting-a-client-to-a-server-in-an-infinite-loop\">Asynchronously reconnecting a client to a server in an infinite loop</a>, with <a href=\"https://gist.github.com/silvadanilo/a52c5b3d77c9d0290dd4faa19339067e\" rel=\"nofollow noreferrer\">my final solution</a>. This was the first part of my problem, and I can not sort out the second part.</p>\n\n<p>I have an unbounded channel and I need to stream data received by this channel to the remote server. If the connection with the remote server is lost then I would restart it and retry streaming data from the same channel.</p>\n\n<p>The solution I thought of is to pass the <code>UnboundedReceiver</code> to the method that attempts to connect to the server, forward the data in this method and return the <code>UnboundedReceiver</code> received when the connection is lost, so the infinite loop can re-take the ownership of the <code>UnboundedReceiver</code> and pass it to the loop method again.</p>\n\n<p>How can I return this <code>UnboundedReceiver</code> from my <code>send_data_to_remote_server()</code> method?</p>\n\n<p>Here is a code sample:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\nextern crate tokio_line;\n\nuse futures::future::{self, Future, Loop};\nuse futures::{Stream, Sink};\nuse futures::sync::mpsc::{self, UnboundedSender, UnboundedReceiver};\nuse tokio_core::io::{Io};\nuse tokio_core::net::{TcpStream};\nuse tokio_core::reactor::{Core, Handle};\nuse tokio_line::LineCodec;\nuse std::{io, str};\nuse std::{thread, time};\n\n\nfn send_data_to_remote_server(handle: &amp;Handle, bufrx: UnboundedReceiver&lt;String&gt;) -&gt; Box&lt;Future&lt;Item = UnboundedReceiver&lt;String&gt;, Error = io::Error&gt;&gt; {\n    let remote_addr = \"127.0.0.1:9876\".parse().unwrap();\n    let tcp = TcpStream::connect(&amp;remote_addr, handle);\n\n    let client = tcp.and_then(move |stream| {\n        let (sender, receiver) = stream.framed(LineCodec).split();\n        let reader = receiver\n            .for_each(|message| {\n                println!(\"{}\", message);\n                Ok(())\n            })\n            .and_then(|bufrx| {\n                println!(\"CLIENT DISCONNECTED\");\n                /***************** START FIXME ************/\n                let (_, bufrx) = mpsc::unbounded(); //FIXME: `bufrx` received in a clousure is actually an `()` so I can't use it, I put this here only as sample and to satisfy the compiler\n                /***************** END FIXME ************/\n                Ok(bufrx)\n            });\n\n        let writer = bufrx\n            .map_err(|_| io::Error::new(io::ErrorKind::Other, \"error kind returned should be the same of `sender` sink in `forward()`\"))\n            .forward(sender)\n            .and_then(|(bufrx, sender)| {\n                // bufrx\n                /***************** START FIXME ************/\n                let (_, bufrx) = mpsc::unbounded(); //FIXME: `bufrx` received in a clousure is actually an `()` so I can't use it, I put this here only as sample and to satisfy the compiler\n                /***************** END FIXME ************/\n                Ok(bufrx)\n            });\n\n        reader.select(writer)\n            .map(|(bufrx, nf)| {\n                bufrx\n            })\n            .map_err(|(err, nf)| {\n                err\n            })\n\n    }).or_else(|_| {\n        println!(\"connection refuse\");\n        Err(io::Error::new(io::ErrorKind::Other, \"connection refuse\"))\n    });\n\n    Box::new(client)\n}\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n\n    let (buftx, bufrx) = mpsc::unbounded();\n\n    let client = future::loop_fn(bufrx, |bufrx| {\n        send_data_to_remote_server(&amp;handle, bufrx)\n            .map(|bufrx| -&gt; Loop&lt;UnboundedReceiver&lt;String&gt;, UnboundedReceiver&lt;String&gt;&gt; {\n                /***************** START FIXME ************/\n                // actually the `bufrx` received in this clouser is not the original one, but I\n                // think that the fix should be made in the `send_data_to_remote_server()` method\n                /***************** END FIXME ************/\n                Loop::Continue(bufrx)\n            })\n            .or_else(|err| -&gt; Result&lt;Loop&lt;UnboundedReceiver&lt;String&gt;, UnboundedReceiver&lt;String&gt;&gt;, ()&gt; {\n                thread::sleep(time::Duration::from_millis(50));\n                /***************** START FIXME ************/\n                let (_, bufrx) = mpsc::unbounded(); //FIXME: argument received in a clousure is actually an `io::Error` and I lost the ownership of the original bufrx so I can't use it, I put this here only as sa\u21aample and to satisfy the compiler\n                /***************** END FIXME ************/\n\n                Ok(Loop::Continue(bufrx))\n            })\n    });\n\n    core.run(client).unwrap();\n}\n</code></pre>\n\n<p>Add the tokio-line crate with: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>tokio-line = { git = \"https://github.com/tokio-rs/tokio-line\" }\n</code></pre>\n"}, {"tags": ["reference", "rust", "slice"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1489240375, "post_id": 42735801, "comment_id": 72590048, "body": "Can&#39;t you just change <code>f</code> to: <code>fn f(paths: &amp;[PathBuf])</code>? It&#39;s still accepting a slice, so there is no additional allocation."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1489240904, "post_id": 42735801, "comment_id": 72590215, "body": "@PeterHall signature of <code>f</code> not accidental, I pass also <code>Vec&lt;&amp;Path&gt;</code> to it."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 4, "creation_date": 1489242132, "post_id": 42735801, "comment_id": 72590635, "body": "If you want it to be generic over Path, PathBuf, Vec and [] you probably need to take an <code>T, I where T: Iterator&lt;Item=I&gt;, I: AsRef&lt;Path&gt;</code>"}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1489241507, "post_id": 42736148, "comment_id": 72590411, "body": "Size not matter from my point of view, but allocation on heap may require a lot of time. I thought about changing slice to iterator (almost like your code, but without <code>collect</code>), but still can not force compiler to accept my code, because of Sized magic."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1489241559, "post_id": 42736148, "comment_id": 72590433, "body": "There are no new heap allocations here. Only references to the existing paths."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1489242492, "post_id": 42736148, "comment_id": 72590752, "body": "<code>let paths: Vec&lt;&amp;Path&gt;</code> so you tell that <code>Vec</code> allocate place on stack?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1489242682, "post_id": 42736148, "comment_id": 72590806, "body": "It&#39;s allocating on the heap. But it&#39;s only allocating pointers, not the actual data. The compiler will likely optimise away the extra jumps too."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489243718, "post_id": 42736148, "comment_id": 72591125, "body": "<i>There are no new heap allocations here</i> \u2014 <b>there is absolutely heap allocation taking place</b>. The entire vector is allocated on the heap! I do not believe there will be any optimizations here because vectors are a run time concept, so the compiler cannot optimize through them."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489249727, "post_id": 42736148, "comment_id": 72593229, "body": "@Shepmaster Yes, that&#39;s fair. But there is no other way to lay out the memory of an unknown size of data, in order to create the requested slice."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 0, "last_activity_date": 1489241776, "last_edit_date": 1489241776, "creation_date": 1489241086, "answer_id": 42736148, "question_id": 42735801, "link": "https://stackoverflow.com/questions/42735801/vecpathbuf-to-path-without-allocations/42736148#42736148", "title": "Vec&lt;PathBuf&gt; to &amp;[&amp;Path] without allocations?", "body": "<p>To pass around a slice, you have to also have the original data held somewhere. To have a <code>&amp;[&amp;Path]</code>, then this needs to be pointing into something like a <code>Vec&lt;&amp;Path&gt;</code>. But you don't have one of those, you have a <code>Vec&lt;PathBuf&gt;</code>.</p>\n\n<p>To get this to work with your existing signatures, you can make a temporary <code>Vec&lt;&amp;Path&gt;</code> and then take a slice of it.</p>\n\n<pre><code>fn f(paths: &amp;[&amp;Path]) {\n}\n\nfn main() {\n    let a: Vec&lt;PathBuf&gt; = vec![PathBuf::from(\"/tmp/a.txt\"), PathBuf::from(\"/tmp/b.txt\")];\n    let paths: Vec&lt;&amp;Path&gt; = a.iter().map(PathBuf::as_path).collect();\n    f(&amp;paths[..]);\n\n}\n</code></pre>\n\n<p>Even though this creates a new <code>Vec</code>, this is just a couple of pointers on the stack - it doesn't have to actually copy any of the paths.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1489256628, "last_edit_date": 1495540440, "creation_date": 1489244268, "answer_id": 42736645, "question_id": 42735801, "link": "https://stackoverflow.com/questions/42735801/vecpathbuf-to-path-without-allocations/42736645#42736645", "title": "Vec&lt;PathBuf&gt; to &amp;[&amp;Path] without allocations?", "body": "<blockquote>\n  <p>Is it possible to convert <code>Vec&lt;PathBuf&gt;</code> to <code>&amp;[&amp;Path]</code> without memory allocations?</p>\n</blockquote>\n\n<p>No, as answered by <a href=\"https://stackoverflow.com/q/32723794/155423\">How do I write a function that takes both owned and non-owned string collections?</a>; a <code>PathBuf</code> and a <code>Path</code> have different memory layouts (the answer uses <code>String</code> and <code>str</code>; the concepts are the same).</p>\n\n<blockquote>\n  <p>how should I change <code>f</code> signature to accept slices with <code>Path</code> and <code>PathBuf</code>?</p>\n</blockquote>\n\n<p>Again as suggested in <a href=\"https://stackoverflow.com/q/32723794/155423\">How do I write a function that takes both owned and non-owned string collections?</a>, use <code>AsRef</code>:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nfn f&lt;P&gt;(paths: &amp;[P])\n    where P: AsRef&lt;Path&gt;\n{}\n\nfn main() {\n    let a = vec![PathBuf::from(\"/tmp/a.txt\")];\n    let b = vec![Path::new(\"/tmp/b.txt\")];\n\n    f(&amp;a);\n    f(&amp;b);\n}\n</code></pre>\n\n<p>This requires no additional heap allocation.</p>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 0, "last_activity_date": 1489244318, "creation_date": 1489244318, "answer_id": 42736649, "question_id": 42735801, "link": "https://stackoverflow.com/questions/42735801/vecpathbuf-to-path-without-allocations/42736649#42736649", "title": "Vec&lt;PathBuf&gt; to &amp;[&amp;Path] without allocations?", "body": "<p>It's not possible to just cast without any allocations, because their layout in memory is different.</p>\n\n<p><code>Vec&lt;PathBuf&gt;</code> stores the data inline, and <code>[&amp;Path]</code> stores pointers to the data (it's roughly similar to <code>Vec&lt;&amp;PathBuf&gt;</code>).</p>\n\n<p>You need to create a new vector to hold the pointers. If the size is known at compile time, you could use a stack-allocated array for it. Otherwise <code>map</code>+<code>collect</code> is needed.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 482, "favorite_count": 0, "accepted_answer_id": 42736645, "answer_count": 3, "score": 2, "last_activity_date": 1551785107, "creation_date": 1489239131, "last_edit_date": 1551785107, "question_id": 42735801, "link": "https://stackoverflow.com/questions/42735801/vecpathbuf-to-path-without-allocations", "title": "Vec&lt;PathBuf&gt; to &amp;[&amp;Path] without allocations?", "body": "<p>I have function that return <code>Vec&lt;PathBuf&gt;</code> and function that accept <code>&amp;[&amp;Path]</code>, basically like this:</p>\n\n<pre><code>use std::path::{Path, PathBuf};\n\nfn f(paths: &amp;[&amp;Path]) {\n}\n\nfn main() {\n    let a: Vec&lt;PathBuf&gt; = vec![PathBuf::from(\"/tmp/a.txt\"), PathBuf::from(\"/tmp/b.txt\")];\n\n    f(&amp;a[..]);\n}\n</code></pre>\n\n<p>Is it possible to convert <code>Vec&lt;PathBuf&gt;</code> to <code>&amp;[&amp;Path]</code> without memory allocations?</p>\n\n<p>If not, how should I change <code>f</code> signature to accept slices with <code>Path</code> and <code>PathBuf</code>?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489245890, "post_id": 42735664, "comment_id": 72591842, "body": "<code>File::open(&amp;Path::new(filename))</code> is redundant; <code>File::open(filename)</code> suffices."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489246121, "post_id": 42735841, "comment_id": 72591910, "body": "The problem with this solution is you can now only implement <code>MyObjectReader</code> for types where <code>MyObjectReader::R</code> is <code>File</code> (or can somehow come from a <code>File</code>), otherwise there&#39;s no way to implement the required <code>from_filename</code> method, unless you just <code>panic!</code> or something. Not really your fault; the problem statement is the cause."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489247604, "post_id": 42735841, "comment_id": 72592478, "body": "@Shepmaster Yes. It would probably make more sense to move <code>from_filename</code> out of the trait, and make it a regular method of <code>MyFileReader</code>."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 3, "last_activity_date": 1489245955, "last_edit_date": 1489245955, "creation_date": 1489239323, "answer_id": 42735841, "question_id": 42735664, "link": "https://stackoverflow.com/questions/42735664/file-struct-isnt-viewed-as-implementing-a-read/42735841#42735841", "title": "File struct isn&#39;t viewed as implementing a Read?", "body": "<blockquote>\n  <p>doesn't <code>std::fs::File</code> implement <code>std::io::Read</code>?</p>\n</blockquote>\n\n<p>Yes. But consider an implementation of your trait:</p>\n\n<pre><code>impl MyObjectReader for SomeReaderImpl {\n    type R = AnythingYouLike;\n    // .. etc\n}\n</code></pre>\n\n<p>The problem is that that <code>R</code> <em>could</em> be <code>File</code>, but it might not be.</p>\n\n<p>Your default implementation is assuming that <code>R</code> is <code>File</code>, so perhaps that implementation should go in the specific instance where <code>R</code> is <em>definitely</em> <code>File</code>:</p>\n\n<pre><code>use std::io::Read;\nuse std::fs;\n\ntrait MyObjectReader {\n    type R: Read;\n\n    fn new(Self::R) -&gt; Self;\n\n    fn from_filename(filename: &amp;str) -&gt; Self where Self: Sized;\n}\n\nstruct MyFileReader;\n\nimpl MyObjectReader for MyFileReader {\n    type R = fs::File;\n\n    fn new(_: Self::R) -&gt; Self {\n        MyFileReader\n    }\n\n    fn from_filename(filename: &amp;str) -&gt; Self\n        where Self: Sized\n    {\n        let open_file = fs::File::open(filename).unwrap();\n        Self::new(open_file)\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": false, "score": 1, "last_activity_date": 1489245698, "last_edit_date": 1489245698, "creation_date": 1489245383, "answer_id": 42736838, "question_id": 42735664, "link": "https://stackoverflow.com/questions/42735664/file-struct-isnt-viewed-as-implementing-a-read/42736838#42736838", "title": "File struct isn&#39;t viewed as implementing a Read?", "body": "<p>Generic types aren't like interfaces. Bounds are not subclassing.</p>\n\n<p><code>type R: Read</code> does not mean <em>any</em> type that implements <code>Read</code>. It's not an abstract class. It's more like a placeholder/alias. It means <em>one specific</em> type that implements <code>Read</code>. And which type it is going to be is defined only in the <code>impl</code> block, so the <code>trait</code> block doesn't know it at that point.</p>\n\n<p>Another way to look at it is that by saying <code>from_filename</code> returns <code>Self</code> (with arbitrary <code>R: Read</code>), it has to work for <em>every</em> implementation of <code>Read</code>, but your implementation can only return <code>Self&lt;R=File&gt;</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1489518083, "last_edit_date": 1489518083, "creation_date": 1489260765, "answer_id": 42739673, "question_id": 42735664, "link": "https://stackoverflow.com/questions/42735664/file-struct-isnt-viewed-as-implementing-a-read/42739673#42739673", "title": "File struct isn&#39;t viewed as implementing a Read?", "body": "<p>You may also wish to move the location of your generic to the <code>new</code> method:</p>\n\n<pre><code>use std::io::Read;\nuse std::fs::File;\n\ntrait MyObjectReader {\n    fn new&lt;R: Read&gt;(R) -&gt; Self;\n\n    fn from_filename(filename: &amp;str) -&gt; Self\n        where Self: Sized\n    {\n        let open_file = File::open(&amp;filename).unwrap();\n        Self::new(open_file)\n    }\n}\n</code></pre>\n\n<p>This says that <code>new</code> can take <em>any</em> type that implements <code>Read</code>, regardless of how the implementation of the trait defines <code>R</code>. This can be combined with an associated type if you still need that for other methods that aren't currently shown:</p>\n\n<pre><code>use std::io::Read;\nuse std::fs::File;\n\ntrait MyObjectReader {\n    type R: Read;\n\n    fn new&lt;R2: Read&gt;(R2) -&gt; Self;\n\n    fn from_filename(filename: &amp;str) -&gt; Self\n        where Self: Sized\n    {\n        let open_file = File::open(&amp;filename).unwrap();\n        Self::new(open_file)\n    }\n\n    fn something_else(&amp;self) -&gt; Self::R;\n}\n</code></pre>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1489518083, "creation_date": 1489238253, "last_edit_date": 1489243480, "question_id": 42735664, "link": "https://stackoverflow.com/questions/42735664/file-struct-isnt-viewed-as-implementing-a-read", "title": "File struct isn&#39;t viewed as implementing a Read?", "body": "<p>I am making a trait which will read/decode to certain object from a variety of file formats. The trait has a generic <code>std::io::Read</code> class for the inner reader object. I'm trying to make a convenience <code>from_filename</code> constructor which will open the file and use that. However I cannot seem to make it work.</p>\n\n<p>This is the code:</p>\n\n<pre><code>use std::io::Read;\nuse std::fs;\nuse std::path::Path;\n\ntrait MyObjectReader {\n    type R: Read;\n\n    fn new(Self::R) -&gt; Self;\n\n    fn from_filename(filename: &amp;str) -&gt; Self where Self: Sized {\n        let open_file = fs::File::open(&amp;Path::new(filename)).unwrap();\n        Self::new(open_file)\n    }\n\n    // other methods will go here\n}\n</code></pre>\n\n<p>And then I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rustc 1.15.1 (021bd294c 2017-02-08)\nerror[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:14:19\n   |\n14 |         Self::new(open_file)\n   |                   ^^^^^^^^^ expected associated type, found struct `std::fs::File`\n   |\n   = note: expected type `&lt;Self as MyObjectReader&gt;::R`\n   = note:    found type `std::fs::File`\n</code></pre>\n\n<p><em>I know an <code>.unwrap()</code> is sub-par in a library, I'll change that later.</em></p>\n\n<p>I can't understand this error, because doesn't <code>std::fs::File</code> implement <code>std::io::Read</code>? To my mind it should work.</p>\n"}, {"tags": ["reference", "rust", "immutability", "mutable"], "comments": [{"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1489231412, "post_id": 42734428, "comment_id": 72587319, "body": "What are you trying to do? Modify the value that the reference point to or change the reference itself?"}, {"owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "reply_to_user": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "edited": false, "score": 0, "creation_date": 1489231928, "post_id": 42734428, "comment_id": 72587462, "body": "@TatsuyukiIshi edited with more complete information about my goals"}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "edited": false, "score": 0, "creation_date": 1490623368, "post_id": 42734428, "comment_id": 73181347, "body": "@freinn I guess you are still confused. Concentrate, by then try to recall your thoughts and dig into them. Before you understand a code you shall be able to guess what it does in a first glance. We can&#39;t help you always, but we can guess. From you write we see what think and where you think."}, {"owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "reply_to_user": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "edited": false, "score": 0, "creation_date": 1490699760, "post_id": 42734428, "comment_id": 73219418, "body": "@VitaliPom question == question =&gt; not knowing. answer == answer =&gt; knowledge is there."}], "answers": [{"comments": [{"owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "edited": false, "score": 0, "creation_date": 1489233290, "post_id": 42734754, "comment_id": 72587896, "body": "nice answer, but I think my first 2 code comments are wrong and are still in your answer."}, {"owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "reply_to_user": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "edited": false, "score": 0, "creation_date": 1489233344, "post_id": 42734754, "comment_id": 72587910, "body": "Removed. Thanks."}], "tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": true, "score": 2, "last_activity_date": 1489243857, "last_edit_date": 1489243857, "creation_date": 1489232583, "answer_id": 42734754, "question_id": 42734428, "link": "https://stackoverflow.com/questions/42734428/how-can-a-function-argument-allow-mutating-a-variable-but-not-be-capable-of-poin/42734754#42734754", "title": "How can a function argument allow mutating a variable but not be capable of pointing to any other variable?", "body": "<p>A reference is a variable that points to something else. References do not collapse, so in Rust you can have a reference to a reference.</p>\n\n<p>Your linked question describes what's different between <code>x: &amp;mut T</code> and <code>mut x: T</code>. <code>mut x: &amp;T</code> means you can change where the reference points to, but you can't change the value what it points to.</p>\n\n<p>Non-reference values will be copied when passed to functions (or moved, if not implementing <code>Copy</code>).</p>\n\n<p>A working example:</p>\n\n<pre><code>// with &amp;mut I can change the referred value of n\nfn mutate_usize_again(n: &amp;mut usize) {\n    *n += 1;\n    *n += 70;\n}\n\nfn mutate_usize_two_times(n: &amp;mut usize) {\n    *n = 8;\n    // just pass it along\n    mutate_usize_again(n);\n}\n\nfn mutate_usize_one_time_referred_value(n: &amp;mut usize) {\n    *n += 25;\n}\n\n// this changes the **local** value of n\nfn mutate_usize_one_time_mutable_pointer(mut n: usize) {\n    println!(\"n before assigning in mutate_usize_one_time = {}\", n);\n    n = 48;\n    println!(\"n after assigning in mutate_usize_one_time = {}\", n);\n}\n\nfn main() {\n    let mut index = 0;\n    mutate_usize_one_time_mutable_pointer(index);\n    println!(\"index after mutate_usize_one_time_mutable_pointer = {}\", index);\n    mutate_usize_two_times(&amp;mut index);\n    println!(\"index after mutate_usize_two_times = {}\", index);\n    mutate_usize_one_time_referred_value(&amp;mut index);\n    println!(\"index after mutate_usize_one_time_referred_value = {}\", index);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "edited": false, "score": 0, "creation_date": 1489234446, "post_id": 42734971, "comment_id": 72588230, "body": "Yayyyy glad to help ^^"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489245673, "post_id": 42734971, "comment_id": 72591772, "body": "A slash is <code>&#47;</code> (and a backslash is <code>\\</code>). What symbol do you actually mean?"}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489249437, "post_id": 42734971, "comment_id": 72593137, "body": "@Shepmaster backslash"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489259825, "post_id": 42734971, "comment_id": 72596850, "body": "That leaves me even more confused. There are no backslashes <i>anywhere</i> in this code. I really don&#39;t know what you are trying to say."}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489584548, "post_id": 42734971, "comment_id": 72734441, "body": "@Shepmaster I just tried to dig into the editor&#39;s head. He was asking how pointers work. Before my comment, unless I confuse the Q, he verified and later deleted his comment, about my answer - that I hit his thoughts."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489584759, "post_id": 42734971, "comment_id": 72734607, "body": "My point is that the backslash symbol (<code>\\</code>) has <i>nothing to do</i> with pointers. I still don&#39;t know why you brought it up in the first place."}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489585004, "post_id": 42734971, "comment_id": 72734810, "body": "Ooooh oh ooooh sorry. I&#39;m mistaken with the other slash. Thanks for correcting :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489585157, "post_id": 42734971, "comment_id": 72734922, "body": "I truly apologize, as I don&#39;t think I&#39;m doing a good job of communicating. <b>Neither</b> slash (<code>&#47;</code>) nor backslash (<code>\\</code>) have anything to do with pointers."}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489588754, "post_id": 42734971, "comment_id": 72737914, "body": "In physics I think, there is a reference - &quot;Even mistake is a truth sentence&quot;. He was asking about references and I answered in his language :D with backslash instead of slash.... it&#39;s psychological mistake :)))))) it&#39;s truth, he confirmed/"}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489588821, "post_id": 42734971, "comment_id": 72737976, "body": "@Shepmaster speak in the language children speak, they&#39;ll get you. Others not."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1489600185, "post_id": 42734971, "comment_id": 72746225, "body": "Please understand that answers are also made to be understood by other people who stumble upon the same or similar problems. As it is, this answer is of poor quality and hardly makes any sense to the wider Rust programming community. In fact, nothing so far even shows that the OP understands it."}, {"owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1489603994, "post_id": 42734971, "comment_id": 72748436, "body": "@E_net4 They deleted my comment because this is not a good answer. I only tried to be grateful. The only thing he&#39;s saying is that it must be an even number of &amp; and *, like in C++ etc. But he is confusing character&#39;s names or thinking in another language."}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "edited": false, "score": 0, "creation_date": 1489604556, "post_id": 42734971, "comment_id": 72748839, "body": "yeah I know, they have their own distinctions in their heads :) it&#39;s what I thought for the first time. It&#39;s okay, I hope it gave you boost. Good luck in the next steps :)) @freinn"}, {"owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1489604893, "post_id": 42734971, "comment_id": 72749029, "body": "@E_net4 there are 80% of children or new scholars who learn how to code here, we have a different language of speaking before reaching the point that &quot;Pointer&quot; and &quot;Reference&quot; are two different tings. let us, it will be rewarded in the end for your. 80% of the users here are going to made 4x working power in the next 10 years for the market and double the working power already in the next 2 years. Consider us as the people who write the next gen. of tools for you, we can also revenge you back ;) but you&#39;re okay. I&#39;m glad people started to arise attention on those important topics."}], "tags": [], "owner": {"reputation": 620, "user_id": 1017216, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/c977600e3c59522b5f222d921c66d7a5?s=128&d=identicon&r=PG", "display_name": "Vitali Pom", "link": "https://stackoverflow.com/users/1017216/vitali-pom"}, "is_accepted": false, "score": -5, "last_activity_date": 1489245653, "last_edit_date": 1489245653, "creation_date": 1489233874, "answer_id": 42734971, "question_id": 42734428, "link": "https://stackoverflow.com/questions/42734428/how-can-a-function-argument-allow-mutating-a-variable-but-not-be-capable-of-poin/42734971#42734971", "title": "How can a function argument allow mutating a variable but not be capable of pointing to any other variable?", "body": "<p>Considering your title, you're confused on the very principle.\nShort answer that strikes it all:</p>\n\n<blockquote>\n  <p>You shall always follow the even rule. You have same amount of slashes and same amount of dereferences. Together they give an even number.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1489234299, "creation_date": 1489234299, "answer_id": 42735043, "question_id": 42734428, "link": "https://stackoverflow.com/questions/42734428/how-can-a-function-argument-allow-mutating-a-variable-but-not-be-capable-of-poin/42735043#42735043", "title": "How can a function argument allow mutating a variable but not be capable of pointing to any other variable?", "body": "<p><em>Ah! The old pointer/pointee issue. Don't worry, it's a common stumbling block. Keep at it, at some point it'll click and then it'll just seem obvious.</em></p>\n\n<p><strong>What is a reference?</strong></p>\n\n<p>A reference is an indirection. The address of a thing that exists somewhere else.</p>\n\n<p>Let's use an analogy:</p>\n\n<ul>\n<li>a function <em>frame</em> is a closet, with lots of drawers,</li>\n<li>each drawer may contain one value.</li>\n</ul>\n\n<p>For the moment, let's forget about <em>types</em>, <em>stack</em> and <em>heap</em>: we only have closets and drawers:</p>\n\n<ul>\n<li>a <em>value</em> is in a drawer, it may moved or copied to another drawer,</li>\n<li>a <em>reference</em> is the address of this value, represented as a pair of IDs (closet ID, drawer ID).</li>\n</ul>\n\n<p><em>Note: it is nonsensical to mention just a drawer ID, all closets have a drawer 0...</em></p>\n\n<hr>\n\n<p><strong>How to use a drawer?</strong></p>\n\n<p>Let us imagine a (typeless) simple example, the addition function:</p>\n\n<pre><code>fn add(left, right) { left + right }\n</code></pre>\n\n<p>Now, what happens when we call <code>add(3, 4)</code>?</p>\n\n<pre><code>Function\n  call\n\n+-add-+  &lt;-- New closet\n|  3  |  &lt;-- Drawer 0: value 3\n+-----+\n|  4  |  &lt;-- Drawer 1: value 4\n+-----+\n</code></pre>\n\n<p><em>Note: in the following, I'll represent a closet as an array. This closet would be <code>[3, 4]</code>. I'll also \"number\" the closets using letters, to avoid mixing closets and drawers, so this closet could be <code>d</code>, and the first drawer of <code>d</code> would be <code>0@d</code> (which contains 3 here).</em></p>\n\n<p>The function is defined as \"take the value in drawer 0, take the value in drawer 1, add them together in drawer 2, return content of drawer 2\".</p>\n\n<p>Let's spice things up; and introduce references:</p>\n\n<pre><code>fn modify() {\n    let x = 42;\n    let y = &amp;x;\n    *y = 32;\n}\n</code></pre>\n\n<p>What does <code>modify</code> do?</p>\n\n<ul>\n<li>call <code>modify</code> => a fresh closet is given to us <code>a: []</code>,</li>\n<li><code>let x = 42;</code> => our closet is now <code>a: [42]</code>,</li>\n<li><code>let y = &amp;x;</code> => our closet is now <code>a: [42, 0@a]</code>,</li>\n</ul>\n\n<p>And now comes the crux: <code>*y = 32;</code>. This means put 32 in the drawer pointed to by <code>y</code>. And thus the closet is now: <code>a: [32, 0@a]</code>.</p>\n\n<hr>\n\n<p><strong>Your first example</strong></p>\n\n<p>Let's look at your first example, put in situation with a <code>main</code>:</p>\n\n<pre><code>// with &amp;mut I can change the referred value of n, but then I can't\n// pass a mutable reference anywhere\nfn mutate_usize_again(n: &amp;mut usize) {\n    *n += 1;\n    // n += 70; ^ cannot use `+=` on type `&amp;mut usize`\n}\n\nfn main() {\n    let mut x = 24;\n    mutate_usize_gain(&amp;mut x);\n}\n</code></pre>\n\n<p>So, what's going on here?</p>\n\n<ul>\n<li>call <code>main</code> => a fresh closet is allocated <code>a: []</code>,</li>\n<li><code>let mut x = 24;</code> => <code>a: [24]</code>,</li>\n<li>call <code>mutate_usize_again</code> => a fresh closet allocated <code>b: []</code>,</li>\n<li>with <code>&amp;mut x</code> => <code>b: [0@a]</code>,</li>\n<li><code>*n += 1;</code> => add 1 to the drawer pointed to by <code>n</code> (0@a), this means that <code>b</code> does not change, but <code>a</code> does! Now <code>a: [25]</code>.</li>\n<li><code>n += 70</code> => add 70 to a reference... this does not make sense, a reference does not have arithmetic operations.</li>\n</ul>\n\n<hr>\n\n<p><strong>Your second example</strong></p>\n\n<p>Let's move on to your second example, augmented:</p>\n\n<pre><code>// Parameter renamed because it's confusing to always use the same letter\nfn mutate_usize_again(z: &amp;mut usize) { *z += 1; }\n\nfn mutate_usize_two_times(mut n: &amp;mut usize) {\n    *n = 8;\n    // if I don't write mut n, I can't pass a mutable reference to\n    // the mutate_usize_again function\n    mutate_usize_again(&amp;mut n);\n}\n\nfn main() {\n    let mut x = 24;\n    mutate_usize_two_times(&amp;mut x);\n}\n</code></pre>\n\n<p>We'll need 3 closets!</p>\n\n<ul>\n<li>call <code>main</code> => a fresh closet is allocated <code>a: []</code>,</li>\n<li><code>let mut x = 24</code> => <code>a: [24]</code>,</li>\n<li>call <code>mutate_usize_two_times</code> => a fresh closet is allocated <code>b: []</code>,</li>\n<li>with <code>n: &amp;mut usize = &amp;mut x</code> => <code>b: [0@a]</code>,</li>\n<li><code>*n = 8</code> => stores 8 in the drawer pointed to by <code>n</code>: <code>a: [8]</code>, <code>b</code> unchanged,</li>\n<li>call <code>mutate_usize_again</code> => a fresh closet is allocated <code>c: []</code>,</li>\n<li>with <code>z: &amp;mut usize = &amp;mut n</code> => ERROR. The type of <code>&amp;mut n</code> is <code>&amp;mut &amp;mut usize</code> which cannot be assigned to a parameter of type <code>z</code>,</li>\n<li>let's pretend you used <code>z: &amp;mut usize = n</code> => <code>c: [0@a]</code>,</li>\n<li><code>*z += 1</code> => adds 1 to the value in the drawer pointed to by <code>z</code>: <code>a: [9]</code>, <code>b</code> and <code>c</code> unchanged.</li>\n</ul>\n\n<p>You can take a reference to a reference, but it's not what you meant to do here. We can indeed twist the example to making it work though by defining:</p>\n\n<pre><code> fn mutate_usize_again(z: &amp;mut &amp;mut usize) { **z += 1; }\n                          ^                   ^~~ dereference TWICE\n                          |~~~~~~~~~~~~~~ two levels of reference\n</code></pre>\n\n<p>In this case, starting again from the call to <code>mutate_usize_again</code>:</p>\n\n<ul>\n<li>before call, we had: <code>a: [8]</code>, <code>b: [0@a]</code></li>\n<li>call <code>mutate_usize_again</code> => a fresh closet is allocated <code>c: []</code>,</li>\n<li>with <code>z: &amp;mut &amp;mut usize = &amp;mut n</code> => <code>c: [0@b]</code> &lt;- a reference to a reference!</li>\n<li><code>**z += 1</code> => adds 1 to the value in drawer pointed to by the reference pointed to by <code>z</code>. <code>**z += 1</code> is <code>**0@b += 1</code> which is <code>*0@a += 1</code>, which modifies <code>a</code> to be <code>a: [9]</code> and leaves <code>b</code> and <code>c</code> unchanged.</li>\n</ul>\n\n<hr>\n\n<p><strong>Your third example</strong></p>\n\n<p>Your third example, enhanced:</p>\n\n<pre><code>fn mutate_usize_one_time_mutable_pointer(mut n: usize) {\n    println!(\"n before assigning in mutate_usize_one_time = {}\", n);\n    n = 48;\n    println!(\"n after assigning in mutate_usize_one_time = {}\", n);\n}\n\nfn main() {\n    let x = 42;\n    mutate_usize_one_time_mutable_pointer(x);\n}\n</code></pre>\n\n<p>Let's go:</p>\n\n<ul>\n<li>call <code>main</code> => a fresh closet is allocated <code>a: []</code>,</li>\n<li><code>let x = 42;</code> => <code>a: [42]</code>,</li>\n<li>call <code>mutate_usize_one_time_mutable_pointer</code> => a fresh closet is allocated <code>b: []</code></li>\n<li>with <code>n: mut usize = x</code> => <code>b: [42]</code>,</li>\n<li><code>n = 48</code> => modifies the value of <code>n</code>: <code>b: [48]</code>, <em>note that <code>a</code> is unchanged</em></li>\n<li>end of <code>mutate_usize_one_time_mutable_pointer</code>, discards <code>b</code>, <code>a: [42]</code>.</li>\n</ul>\n\n<p>There is no pointer involved here, the name of the function is misleading.</p>\n\n<hr>\n\n<p><strong>Your final example</strong></p>\n\n<p>Your fourth example, augmented:</p>\n\n<pre><code>fn mutate_usize_one_time(mut n: &amp;usize) {\n    println!(\"n before assigning in mutate_usize_one_time = {}\", n);\n    n = &amp;48;\n    println!(\"n after assigning in mutate_usize_one_time = {}\", n);\n}\n\nfn main() {\n    let x = 42;\n    mutate_usize_one_time(&amp;x);\n}\n</code></pre>\n\n<p>Let's go:</p>\n\n<ul>\n<li>call <code>main</code> => a fresh closet is allocated <code>a: []</code>,</li>\n<li><code>let x = 42;</code> => <code>a: [42]</code>,</li>\n<li>call <code>mutate_usize_one_time</code> => a fresh closet is allocated <code>b: []</code>,</li>\n<li><code>n: &amp;size = &amp;x</code> => <code>b: [0@a]</code>,</li>\n<li><code>48</code> => <code>b: [0@a, 48]</code></li>\n<li><code>&amp;48</code> => <code>b: [0@a, 48, 1@b]</code></li>\n<li><code>n = &amp;48</code> => would lead to <code>b: [1@b, 48]</code> however lifetimes forbid references pointing to something <em>past</em> them, this is forbidden.</li>\n</ul>\n\n<hr>\n\n<p>Hope it's starting making sense. If not... then go for a run, go out with friends, clear your head, read another explanation, clear your head again, and come back again. It'll seep in little by little ;)</p>\n"}], "owner": {"reputation": 881, "user_id": 646565, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Cu0yq.jpg?s=128&g=1", "display_name": "freinn", "link": "https://stackoverflow.com/users/646565/freinn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 223, "favorite_count": 0, "accepted_answer_id": 42734754, "answer_count": 3, "score": 0, "last_activity_date": 1489245653, "creation_date": 1489230444, "last_edit_date": 1495542734, "question_id": 42734428, "link": "https://stackoverflow.com/questions/42734428/how-can-a-function-argument-allow-mutating-a-variable-but-not-be-capable-of-poin", "title": "How can a function argument allow mutating a variable but not be capable of pointing to any other variable?", "body": "<p>I want a function that calls other functions that are mutually recursive, but I already have that with type signatures like:</p>\n\n<pre><code>fn f1(mut index: &amp;mut usize, ..)\nfn f2(mut index: &amp;mut usize, ..)\n</code></pre>\n\n<p>I really want a set of mutually recursive functions that can only mutate the  <code>index</code> variable I've defined in my <code>main()</code> function, and are <strong>not capable</strong> of pointing to any other variable. </p>\n\n<p>I've read the 2 answers from <a href=\"https://stackoverflow.com/questions/28587698/whats-the-difference-in-mut-before-a-variable-name-and-after-the\">What&#39;s the difference in `mut` before a variable name and after the `:`?</a>, and I've tried several approaches but still I can't achieve what I want. I think I don't really understand the concepts.</p>\n\n<p>Here is evidence of my current understanding:</p>\n\n<pre><code>// with &amp;mut I can change the referred value of n, but then I can't\n// pass a mutable reference anywhere\nfn mutate_usize_again(n: &amp;mut usize) {\n    *n += 1;\n    // n += 70; ^ cannot use `+=` on type `&amp;mut usize`\n}\n\nfn mutate_usize_two_times(mut n: &amp;mut usize) {\n    *n = 8;\n    // if I don't write mut n, I can't pass a mutable reference to\n    // the mutate_usize_again function\n    mutate_usize_again(&amp;mut n);\n}\n\nfn mutate_usize_one_time_referred_value(n: &amp;mut usize) {\n    *n += 25;\n}\n\n// this changes the referred value of n\nfn mutate_usize_one_time_mutable_pointer(mut n: usize) {\n    println!(\"n before assigning in mutate_usize_one_time = {}\", n);\n    n = 48;\n    println!(\"n after assigning in mutate_usize_one_time = {}\", n);\n}\n\n// doesn't work because of lifetimes\n// this changes where is pointing a (Copy?) reference of n\n// passed value does not change\n/*\nfn mutate_usize_one_time(mut n: &amp;usize) {\n    println!(\"n before assigning in mutate_usize_one_time = {}\", n);\n    n = &amp;48;\n    println!(\"n after assigning in mutate_usize_one_time = {}\", n);\n}\n*/\n\nfn main() {\n    let mut index = 0;\n    mutate_usize_one_time_mutable_pointer(index);\n    println!(\"index after mutate_usize_one_time_mutable_pointer = {}\", index);\n    mutate_usize_two_times(&amp;mut index);\n    println!(\"index after mutate_usize_two_times = {}\", index);\n    mutate_usize_one_time_referred_value(&amp;mut index);\n    println!(\"index after mutate_usize_ = {}\", index);\n}\n</code></pre>\n\n<p>I would really appreciate a nice explanation of what is going on in my code if I've misunderstood.</p>\n\n<p>I'm starting to think that what I want is already done given:</p>\n\n<ol>\n<li><code>index</code> must refer to its updated value => <code>mut index</code>  </li>\n<li><code>index</code> must be capable of changing the referred value and pass mutable references to the other functions. => <code>&amp;mut usize</code></li>\n<li>If it were another function parameter with the same type <code>(mut index2: &amp;mut usize)</code>, the compiler would not let me have 2 mutable references pointing to the same memory location.</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489194582, "post_id": 42730169, "comment_id": 72579761, "body": "Likely duplicate of <a href=\"http://stackoverflow.com/q/31373255/155423\">stackoverflow.com/q/31373255/155423</a>; but also <a href=\"http://stackoverflow.com/q/29540407/155423\">stackoverflow.com/q/29540407/155423</a>; <a href=\"http://stackoverflow.com/q/40035731/155423\">stackoverflow.com/q/40035731/155423</a>; <a href=\"http://stackoverflow.com/q/28654978/155423\">stackoverflow.com/q/28654978/155423</a> (and other searches for &quot;thread mutable&quot; and friends)."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489208931, "post_id": 42730169, "comment_id": 72582199, "body": "It is not clear to me how to apply those answers to my question, so perhaps you or someone else could explain. I&#39;ll add an attempt using Arc+Mutex that also doesn&#39;t compile."}, {"owner": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "edited": false, "score": 1, "creation_date": 1489211869, "post_id": 42730169, "comment_id": 72582743, "body": "I think in your second example you will either have to return Result&lt;(u16, Arc&lt;Mutex&lt;String&gt;&gt;), MyAppError&gt; or return a clone of buf2"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 32405, "user_id": 553209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/HCxak.jpg?s=128&g=1", "display_name": "Ankur", "link": "https://stackoverflow.com/users/553209/ankur"}, "edited": false, "score": 0, "creation_date": 1489212668, "post_id": 42730169, "comment_id": 72582864, "body": "Both suggestions actually work @Ankur. Thanks for your help! The only other improvement I wish for is to pass in a pre-allocated <code>String</code> (like the first two examples) rather than returning one, but I haven&#39;t figured that one out yet."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1489213069, "post_id": 42730169, "comment_id": 72582917, "body": "Actually, building on the &quot;return the mutex&quot; suggestion, I can also <i>allocate</i> the mutex outside the function and pass it in. Even nicer!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489246738, "post_id": 42730169, "comment_id": 72592148, "body": "Allocating the <code>Mutex</code> outside the threads (including the allocated <code>String</code>) is exactly what <a href=\"http://stackoverflow.com/a/31373349/155423\">stackoverflow.com/a/31373349/155423</a> does. It also <a href=\"http://stackoverflow.com/a/42195774/155423\">links to another answer</a> that shows how to get the <code>String</code> back when the threads are done, so you don&#39;t need to return the <code>Arc&lt;Mutex&lt;String&gt;&gt;</code>."}], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 387, "favorite_count": 0, "closed_date": 1489195525, "answer_count": 0, "score": 0, "last_activity_date": 1489246535, "creation_date": 1489194339, "last_edit_date": 1495541841, "question_id": 42730169, "link": "https://stackoverflow.com/questions/42730169/fill-a-string-buffer-from-a-thread", "closed_reason": "Duplicate", "title": "Fill a string buffer from a thread", "body": "<p>With <code>hyper</code>, I need to make an HTTP connection and read the results.\nI want to wrap the whole thing in a timeout,\nso I start a thread\nand use <a href=\"https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv_timeout\" rel=\"nofollow noreferrer\"><code>recv_timeout</code></a> to wait for it.</p>\n\n<p>Wrapping just the <a href=\"https://hyper.rs/hyper/v0.9.8/hyper/client/request/struct.Request.html#method.send\" rel=\"nofollow noreferrer\"><code>send</code></a> works,\nbut I want to also wrap <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"nofollow noreferrer\"><code>read_to_string</code></a>.\nHere is the code:</p>\n\n<pre><code>fn send_request(url: &amp;str) -&gt; Result&lt;Response, MyAppError&gt; {\n    let mut c = Client::new();\n    let mut req = c.get(url);\n    req.send().map_err(|e| MyAppError::TcpError(e))\n}\n\nfn get_url(url: &amp;str, mut buf: &amp;mut String) -&gt; Result&lt;u16, MyAppError&gt; {\n    let mut resp = send_request(url)?;\n    resp.read_to_string(&amp;mut buf).map_err(|e| MyAppError::ReadError(e))?;\n    Ok(resp.status.to_u16())\n}\n\nfn get_url_with_timeout_2(url: &amp;str, mut buf: &amp;mut String) -&gt; Result&lt;u16, MyAppError&gt; {\n    let (tx, rx) = mpsc::channel();\n    let url = url.to_owned();\n    let t = thread::spawn(move || {\n        match tx.send(get_url(&amp;url, &amp;mut buf)) {\n            Ok(()) =&gt; {} // everything good\n            Err(_) =&gt; {} // we have been released, no biggie\n        }\n    });\n    match rx.recv_timeout(Duration::from_millis(5000)) {\n        Ok(resp) =&gt; resp,\n        Err(_) =&gt; Err(MyAppError::Timeout),\n    }\n}\n</code></pre>\n\n<p>Unfortunately I get a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0477]: the type `[closure@src/main.rs:53:25: 58:4 tx:std::sync::mpsc::Sender&lt;std::result::Result&lt;u16, MyAppError&gt;&gt;, url:std::string::String, buf:&amp;mut std::string::String]` does not fulfill the required lifetime\n  --&gt; src/main.rs:53:11\n   |\n53 |   let t = thread::spawn(move || {\n   |           ^^^^^^^^^^^^^\n   |\n   = note: type must outlive the static lifetime\n</code></pre>\n\n<p>How can I pass the buffer to the thread,\nlet it fill it,\nand then print out the buffer back on the main thread?</p>\n\n<p>(This is Rust 1.15.1.)</p>\n\n<p><a href=\"https://github.com/pjungwir/rust-thread-read-to-string\" rel=\"nofollow noreferrer\">This repository</a> gives a complete <code>main.rs</code> and shows three examples for getting the webpage:</p>\n\n<ol>\n<li><p>With no timeout.</p></li>\n<li><p>With a timeout just on <code>send</code>.</p></li>\n<li><p>With a timeout on the whole thing.</p></li>\n</ol>\n\n<p>If you take out 3, it all compiles and runs.\nWhat can I change about 3 to make that work too?</p>\n\n<p>By the way, making a web request is really just the \"occasion\" for this question. I've already seen <a href=\"https://stackoverflow.com/questions/36181719/what-is-the-correct-way-in-rust-to-create-a-timeout-for-a-thread-or-a-function\">this question about doing a timeout</a>. My own interest is not the timeout per se, but about how to fill up a buffer on one thread and read it on another.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/31373255/share-mutable-object-between-threads\">Share mutable object between threads</a> suggests using <code>Arc</code> and <code>Mutex</code> to safely share data between threads. Here is an attempt at that:</p>\n\n<pre><code>fn get_url_with_timeout_3(url: &amp;str) -&gt; Result&lt;(u16, String), MyAppError&gt; {\n    let (tx, rx) = mpsc::channel();\n    let url = url.to_owned();\n    let shbuf = Arc::new(Mutex::new(String::new()));\n    let shbuf2 = shbuf.clone();\n    let t = thread::spawn(move || {\n        let mut c = Client::new();\n        let mut req = c.get(&amp;url);\n        let mut ret = match req.send() {\n            Ok(mut resp) =&gt; {\n                let mut buf2 = shbuf2.lock().unwrap();\n                match resp.read_to_string(&amp;mut buf2) {\n                    Ok(_) =&gt; Ok(resp.status.to_u16()),\n                    Err(e) =&gt; Err(MyAppError::ReadError(e)),\n                }\n            }\n            Err(e) =&gt; Err(MyAppError::TcpError(e)),\n        };\n\n        match tx.send(ret) {\n            Ok(()) =&gt; {} // everything good\n            Err(_) =&gt; {} // we have been released, no biggie\n        }\n    });\n    match rx.recv_timeout(Duration::from_millis(5000)) {\n        Ok(maybe_status_code) =&gt; {\n            let buf2 = shbuf.lock().unwrap();\n            Ok((maybe_status_code?, *buf2))\n        }\n        Err(_) =&gt; Err(MyAppError::Timeout),\n    }\n}\n</code></pre>\n\n<p>This gives me the error <code>cannot move out of borrowed content</code> for trying to return <code>*buf2</code> (which makes sense, since it would be leaking data out of the <code>Mutex</code>), but I'm not sure how to express this in a structure where Rust can see the pattern. </p>\n\n<p>If the request thread times out, it holds the lock forever \u2014 but I never try to read the buffer, so who cares. If the request thread finishes, it releases the lock and goes away, and the main thread will hold the only reference. I can reason that it is safe, but I'm not sure how to convince the compiler.</p>\n\n<p>I'm not allowed to answer this question since it is supposedly a duplicate, but I've added 3 working implementations to <a href=\"https://github.com/pjungwir/rust-thread-read-to-string/tree/45c3aacc5ff0bd0df32aff67a1d240948f047874\" rel=\"nofollow noreferrer\">my GitHub repository</a> using the ideas from the comments.</p>\n"}, {"tags": ["string", "sorting", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489193280, "post_id": 42729848, "comment_id": 72579478, "body": "This is not even valid code, so I don&#39;t see how you can say &quot;this only works...&quot;. It produces multiple errors: <i>mismatched types</i>;  <i>no method named <code>vector</code> found for type <code>std::str::Chars&lt;&#39;_&gt;</code></i>; <i>no associated item named <code>from_iter</code> found for type <code>std::string::String</code></i>. Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> when asking a question on Stack Overflow."}], "answers": [{"comments": [{"owner": {"reputation": 149, "user_id": 5335302, "user_type": "registered", "accept_rate": 0, "profile_image": "https://graph.facebook.com/966601076714268/picture?type=large", "display_name": "user5335302", "link": "https://stackoverflow.com/users/5335302/user5335302"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489208291, "post_id": 42729940, "comment_id": 72582069, "body": "@Shepmaster I don&#39;t know how you got this error. however I am getting the correct output without error. the overall program with headers are edited in the answer. and I am able to compile the program without errors. You may have missed the use std::iter::FromIterator; header."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1489246314, "post_id": 42729940, "comment_id": 72591974, "body": "I got the error by copying your code and running it. Since you did not include the entire valid example, it had an error. If you <b>don&#39;t provide the  code, how would anyone else looking at the answer know what to use</b>?"}, {"owner": {"reputation": 2201, "user_id": 944911, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/62bf7fe5162a18d635b9a2614dd81543?s=128&d=identicon&r=PG", "display_name": "sigod", "link": "https://stackoverflow.com/users/944911/sigod"}, "edited": false, "score": 2, "creation_date": 1569019166, "post_id": 42729940, "comment_id": 102473489, "body": "Note, that you can use <code>chars.into_iter().collect::&lt;String&gt;()</code> instead of <code>String::from_iter</code> (from <code>FromIterator</code>)."}], "tags": [], "owner": {"reputation": 149, "user_id": 5335302, "user_type": "registered", "accept_rate": 0, "profile_image": "https://graph.facebook.com/966601076714268/picture?type=large", "display_name": "user5335302", "link": "https://stackoverflow.com/users/5335302/user5335302"}, "is_accepted": false, "score": 7, "last_activity_date": 1489246254, "last_edit_date": 1489246254, "creation_date": 1489192463, "answer_id": 42729940, "question_id": 42729848, "link": "https://stackoverflow.com/questions/42729848/how-can-i-sort-the-characters-of-a-string-in-rust/42729940#42729940", "title": "How can I sort the characters of a string in Rust?", "body": "<p>I did this and got the desired output. However this may not be the best way.</p>\n\n<pre><code>use std::iter::Iterator;\nuse std::iter::FromIterator;\n\nfn main() {\n    let wordy: String = \"I am a hello world example\".to_owned();\n    let s_slice: &amp;str = &amp;wordy[..];\n\n    let mut chars: Vec&lt;char&gt; = s_slice.chars().collect();\n    chars.sort_by(|a, b| b.cmp(a));\n\n    println!(\"test{:?}\", chars);\n    let s = String::from_iter(chars);\n    println!(\"{}\", s);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 596, "user_id": 2901952, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/514374779a37a8a15daed7414dc2cd9b?s=128&d=identicon&r=PG", "display_name": "tripathiakshit", "link": "https://stackoverflow.com/users/2901952/tripathiakshit"}, "is_accepted": false, "score": 2, "last_activity_date": 1593537607, "last_edit_date": 1593537607, "creation_date": 1593489273, "answer_id": 62650039, "question_id": 42729848, "link": "https://stackoverflow.com/questions/42729848/how-can-i-sort-the-characters-of-a-string-in-rust/62650039#62650039", "title": "How can I sort the characters of a string in Rust?", "body": "<p>If you're okay with using crates, you can use the <code>itertools</code> crate to simplify things quite a bit.</p>\n<p>Add the crate to your <code>Cargo.toml</code>:</p>\n<pre><code>[dependencies]\nitertools = &quot;0.9.0&quot;\n</code></pre>\n<p>Then use it in your file to sort and reverse the string.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use itertools::Itertools;\n\nfn main() {\n    let wordy = &quot;I am a hello world example&quot;;\n\n    let s = wordy.chars().sorted().rev().collect::&lt;String&gt;();\n\n    println!(&quot;{}&quot;, s);\n}\n</code></pre>\n"}], "owner": {"reputation": 149, "user_id": 5335302, "user_type": "registered", "accept_rate": 0, "profile_image": "https://graph.facebook.com/966601076714268/picture?type=large", "display_name": "user5335302", "link": "https://stackoverflow.com/users/5335302/user5335302"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6316, "favorite_count": 1, "answer_count": 2, "score": 1, "last_activity_date": 1593537607, "creation_date": 1489191670, "last_edit_date": 1489193135, "question_id": 42729848, "link": "https://stackoverflow.com/questions/42729848/how-can-i-sort-the-characters-of-a-string-in-rust", "title": "How can I sort the characters of a string in Rust?", "body": "<p>I have the string \"laxmi\" and I need to sort it in descending alphabetical order, producing \"xmlia\". I have written this:</p>\n\n<pre><code>fn main() {\n    let wordy: String = \"I am a hello world example\";\n\n    let chars: Vec&lt;char&gt; = wordy.chars().vector();\n    chars.sort_by(|a, b| b.cmp(a));\n\n    // let s: String = chars.into_iter().collect();\n    println!(\"test{:?}\", chars);\n    let s = String::from_iter(chars);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>This only works if <code>wordy</code> is a <code>&amp;str</code>, but I have a <code>String</code>. How can I convert the <code>String</code> to a vector of <code>char</code> so that I can sort the string?</p>\n"}, {"tags": ["c", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 298, "user_id": 3681958, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/372dd6074eae7a4b708f399059f469b4?s=128&d=identicon&r=PG", "display_name": "HotelCalifornia", "link": "https://stackoverflow.com/users/3681958/hotelcalifornia"}, "edited": false, "score": 0, "creation_date": 1489187578, "post_id": 42728338, "comment_id": 72578046, "body": "Ack, dunno what I was thinking. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1581346757, "last_edit_date": 1581346757, "creation_date": 1489182782, "answer_id": 42728338, "question_id": 42727935, "link": "https://stackoverflow.com/questions/42727935/passing-a-rust-variable-to-a-c-function-that-expects-to-be-able-to-modify-it/42728338#42728338", "title": "Passing a Rust variable to a C function that expects to be able to modify it", "body": "<blockquote>\n  <p>but I do have a decent background in C</p>\n</blockquote>\n\n<p>The moral equivalent of your Rust code is:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>int *v = NULL;\nimeGet(addr, v);\n*v\n</code></pre>\n\n<p>This will have an error because the C code is likely going to dereference that <code>v</code> to store the value in, except you've passed in a NULL, so it's more likely to go boom.</p>\n\n<p>You need to create storage for the value, then provide a reference to that storage to the function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ime_get(addr: u8) -&gt; i32 {\n    let mut v = 0;\n    unsafe { imeGet(addr, &amp;mut v) };\n    v\n}\n</code></pre>\n\n<p>The solution for any pointer type uses <a href=\"https://doc.rust-lang.org/core/ptr/fn.null_mut.html\" rel=\"nofollow noreferrer\"><code>ptr::null_mut</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>unsafe { \n    let mut v = std::ptr::null_mut();\n    takes_a_pointer_pointer(addr, &amp;mut v);\n    v\n}\n</code></pre>\n\n<p>The general solution for any type uses <a href=\"https://doc.rust-lang.org/std/mem/union.MaybeUninit.html\" rel=\"nofollow noreferrer\"><code>mem::MaybeUninit</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>unsafe {\n    let mut v = std::mem::MaybeUninit::uninit();\n    takes_a_value_pointer(addr, v.as_mut_ptr());\n    v.assume_init()\n}\n</code></pre>\n\n<p>For completeness, you should be checking the return value:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn ime_get(addr: u8) -&gt; Option&lt;i32&gt; {\n    let mut v = 0;\n    let success = unsafe { imeGet(addr, &amp;mut v) };\n\n    if success {\n        Some(v)\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>the differences between how Rust and C work with regards to passing pointers.</p>\n</blockquote>\n\n<p>There really aren't any, at this level.</p>\n"}], "owner": {"reputation": 298, "user_id": 3681958, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/372dd6074eae7a4b708f399059f469b4?s=128&d=identicon&r=PG", "display_name": "HotelCalifornia", "link": "https://stackoverflow.com/users/3681958/hotelcalifornia"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2003, "favorite_count": 3, "accepted_answer_id": 42728338, "answer_count": 1, "score": 8, "last_activity_date": 1581346757, "creation_date": 1489180957, "last_edit_date": 1489182837, "question_id": 42727935, "link": "https://stackoverflow.com/questions/42727935/passing-a-rust-variable-to-a-c-function-that-expects-to-be-able-to-modify-it", "title": "Passing a Rust variable to a C function that expects to be able to modify it", "body": "<p>I'm writing a safe Rust layer with which I can call functions from a C library in Rust. I've generated the unsafe bindings using <a href=\"https://github.com/servo/rust-bindgen\" rel=\"noreferrer\">rust-bindgen</a>, but I'm getting a little confused on the differences between how Rust and C work with regards to passing pointers.</p>\n\n<p>The C function looks like this:</p>\n\n<pre><code>bool imeGet(unsigned char address, int *value);\n</code></pre>\n\n<p>It reads an I2C sensor at <code>address</code>, stores the result in <code>value</code>, and returns <code>TRUE</code> on success.</p>\n\n<p>Bindgen has the Rust function looking like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn imeGet(address: ::std::os::raw::c_uchar,\n              value: *mut ::std::os::raw::c_int) -&gt; bool;\n</code></pre>\n\n<p>And my safe caller looks like this currently:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn ime_get(addr: u8) -&gt; i32 {\n    let v: &amp;mut i32 = 0;\n    unsafe {\n        imeGet(addr, v);\n        *v\n    }\n}\n</code></pre>\n\n<p>This code doesn't compile because of the <code>= 0</code>. When I didn't have that, the compiler complained about <code>v</code> possibly not having been initialized. My intent is to handle the success within this function, and just return the <code>i32</code> value.</p>\n\n<p>How do I handle the behavior of the <code>*mut c_int</code> argument? I tried to declare <code>v</code> as a reference and return its dereferenced value (above), but that doesn't work. I also tried to just return <code>v</code>, but I don't really want the return value to stay mutable.</p>\n\n<p>I'm pretty new to Rust, but I do have a decent background in C, which may be my source of confusion.</p>\n"}, {"tags": ["rust", "file-descriptor", "libc"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1489175161, "last_edit_date": 1489175161, "creation_date": 1489174845, "answer_id": 42726499, "question_id": 42726095, "link": "https://stackoverflow.com/questions/42726095/how-to-implement-redirection-of-stdout-of-a-child-process-to-a-file/42726499#42726499", "title": "How to implement redirection of stdout of a child process to a file?", "body": "<p>The documentation for <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html#method.open\" rel=\"noreferrer\"><code>File::open</code></a> states (emphasis mine):</p>\n\n<blockquote>\n  <p>Attempts to open a file in <strong>read-only mode</strong>.</p>\n</blockquote>\n\n<p>Switching to <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html#method.create\" rel=\"noreferrer\"><code>File::create</code></a> appears to create the file and \"etc\" is written to it.</p>\n\n<hr>\n\n<p>Additionally, you should:</p>\n\n<ol>\n<li>Not open 2 additional files - nothing ever closes those file descriptors so you have a resource leak.</li>\n<li>Check the return value of <code>pipe</code> to handle errors.</li>\n<li>Check out the <a href=\"https://crates.io/crates/nix\" rel=\"noreferrer\">nix crate</a>.</li>\n</ol>\n\n\n\n<pre><code>extern crate libc;\nextern crate nix;\n\nuse std::process::{Command, Stdio};\nuse std::os::unix::io::{FromRawFd, IntoRawFd};\nuse std::fs::File;\n\nuse nix::unistd::pipe;\n\nfn main() {\n    let fds = pipe().unwrap();\n    let fd1 = File::create(\"test1\").unwrap().into_raw_fd();\n\n    let (pipe_in, pipe_out, file_out) = unsafe {\n        (Stdio::from_raw_fd(fds.0),\n         Stdio::from_raw_fd(fds.1),\n         Stdio::from_raw_fd(fd1))\n    };\n\n    Command::new(\"ls\")\n        .arg(\"/\")\n        .stdout(pipe_out)\n        .spawn()\n        .unwrap();\n\n    let mut cmd2 = Command::new(\"grep\")\n        .arg(\"etc\")\n        .stdin(pipe_in)\n        .stdout(file_out)\n        .spawn()\n        .unwrap();\n\n    cmd2.wait().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 35, "user_id": 7692016, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df24e565d80d2cf080879627ffbf3402?s=128&d=identicon&r=PG&f=1", "display_name": "R. Ding", "link": "https://stackoverflow.com/users/7692016/r-ding"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1981, "favorite_count": 1, "accepted_answer_id": 42726499, "answer_count": 1, "score": 3, "last_activity_date": 1489175161, "creation_date": 1489173312, "last_edit_date": 1489174270, "question_id": 42726095, "link": "https://stackoverflow.com/questions/42726095/how-to-implement-redirection-of-stdout-of-a-child-process-to-a-file", "title": "How to implement redirection of stdout of a child process to a file?", "body": "<p>I am implementing I/O redirection in a shell written in Rust. I succeeded in piping between two children processes by using unsafe code with raw file descriptors and <code>pipe()</code> from the libc crate.</p>\n\n<p>When I try to redirect <code>stdout</code> of the last child process to a file that I have permission to, it fails:</p>\n\n<pre><code>extern crate libc;\nuse std::process::{Command, Stdio};\nuse std::os::unix::io::{FromRawFd, IntoRawFd};\nuse std::fs::File;\nuse self::libc::c_int;\n\nfn main() {\n    let mut fds = [-1 as c_int, -1 as c_int];\n    let fd1 = File::open(\"test1\").unwrap().into_raw_fd();\n    let fd2 = File::open(\"test2\").unwrap().into_raw_fd();\n    let fd3 = File::open(\"test3\").unwrap().into_raw_fd();\n    println!(\"{:?}, {:?}, {:?}\", fd1, fd2, fd3);\n    unsafe {\n        libc::pipe(&amp;mut fds[0] as *mut c_int);\n        let cmd1 = Command::new(\"ls\")\n            .arg(\"/\")\n            .stdout(Stdio::from_raw_fd(fds[1]))\n            .spawn()\n            .unwrap();\n        let mut cmd2 = Command::new(\"grep\")\n            .arg(\"etc\")\n            .stdin(Stdio::from_raw_fd(fds[0]))\n            .stdout(Stdio::from_raw_fd(fd1))\n            .spawn()\n            .unwrap();\n        let _result = cmd2.wait().unwrap();\n    }\n}\n</code></pre>\n\n<p>The result of the above piece:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>3, 4, 5\ngrep: write error: Bad file descriptor\n</code></pre>\n\n<p>It seems that the file descriptor isn't correctly returned, but if there were no file named test1, test2 and test3, <code>File::open(_).unwrap()</code> should panic instead of pretending to have opened a file.</p>\n\n<p>The code works perfectly fine if redirection to the file is removed, i.e. only piping is used.</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489163055, "post_id": 42723065, "comment_id": 72565974, "body": "Note: you may be interested in bluss&#39; <a href=\"https://github.com/bluss/ordermap\" rel=\"nofollow noreferrer\">OrderMap</a>, a HashMap whose iteration order solely depends on the order in which elements have been inserted and removed."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1588601179, "last_edit_date": 1588601179, "creation_date": 1489163883, "answer_id": 42723390, "question_id": 42723065, "link": "https://stackoverflow.com/questions/42723065/how-to-sort-hashmap-keys-when-serializing-with-serde/42723390#42723390", "title": "How to sort HashMap keys when serializing with serde?", "body": "<p>Use the <a href=\"https://serde.rs/field-attrs.html#serialize_with\" rel=\"nofollow noreferrer\"><code>serialize_with</code> field attribute</a>:</p>\n\n<pre><code>use serde::{Deserialize, Serialize, Serializer}; // 1.0.106\nuse serde_json; // 1.0.52\nuse std::collections::{BTreeMap, HashMap};\n\n#[derive(Serialize, Deserialize, Default)]\nstruct MyStruct {\n    #[serde(serialize_with = \"ordered_map\")]\n    map: HashMap&lt;String, String&gt;,\n}\n\nfn ordered_map&lt;S&gt;(value: &amp;HashMap&lt;String, String&gt;, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\nwhere\n    S: Serializer,\n{\n    let ordered: BTreeMap&lt;_, _&gt; = value.iter().collect();\n    ordered.serialize(serializer)\n}\n\nfn main() {\n    let mut m = MyStruct::default();\n    m.map.insert(\"gamma\".into(), \"3\".into());\n    m.map.insert(\"alpha\".into(), \"1\".into());\n    m.map.insert(\"beta\".into(), \"2\".into());\n\n    println!(\"{}\", serde_json::to_string_pretty(&amp;m).unwrap());\n}\n</code></pre>\n\n<p>Here, I've chosen to just rebuild an entire <code>BTreeMap</code> from the <code>HashMap</code> and then reuse the existing serialization implementation.</p>\n\n<pre><code>{\n  \"map\": {\n    \"alpha\": \"1\",\n    \"beta\": \"2\",\n    \"gamma\": \"3\"\n  }\n}\n</code></pre>\n"}], "owner": {"reputation": 24273, "user_id": 525872, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/4d6f74711436cfe252bf4fc8f3cf4971?s=128&d=identicon&r=PG", "display_name": "Jo Liss", "link": "https://stackoverflow.com/users/525872/jo-liss"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4115, "favorite_count": 2, "accepted_answer_id": 42723390, "answer_count": 1, "score": 15, "last_activity_date": 1588601179, "creation_date": 1489162830, "last_edit_date": 1489163983, "question_id": 42723065, "link": "https://stackoverflow.com/questions/42723065/how-to-sort-hashmap-keys-when-serializing-with-serde", "title": "How to sort HashMap keys when serializing with serde?", "body": "<p>I'm serializing a <code>HashMap</code> with serde, like so:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct MyStruct {\n    map: HashMap&lt;String, String&gt;\n}\n</code></pre>\n\n<p><code>HashMap</code>'s key order is unspecified, and since the hashing is randomized (see <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\">documentation</a>), the keys actually end up coming out in different order between identical runs.</p>\n\n<p>I'd like my <code>HashMap</code> to be serialized in sorted (e.g. alphabetical) key order, so that the serialization is deterministic.</p>\n\n<p>I could use a <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"noreferrer\"><code>BTreeMap</code></a> instead of a <code>HashMap</code> to achieve this, as <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.keys\" rel=\"noreferrer\"><code>BTreeMap::keys()</code></a> returns its keys in sorted order, but I'd rather not change my data structure just to accommodate the serialization logic.</p>\n\n<p>How do I tell serde to sort the <code>HashMap</code> keys before serializing?</p>\n"}, {"tags": ["json", "rust", "serde"], "answers": [{"comments": [{"owner": {"reputation": 4834, "user_id": 3142367, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/0hqcO.jpg?s=128&g=1", "display_name": "pietrovismara", "link": "https://stackoverflow.com/users/3142367/pietrovismara"}, "edited": false, "score": 3, "creation_date": 1503755635, "post_id": 42722170, "comment_id": 78751115, "body": "Is there any way to set indentation? By default it seems 2 spaces."}], "tags": [], "owner": {"reputation": 24273, "user_id": 525872, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/4d6f74711436cfe252bf4fc8f3cf4971?s=128&d=identicon&r=PG", "display_name": "Jo Liss", "link": "https://stackoverflow.com/users/525872/jo-liss"}, "is_accepted": false, "score": 20, "last_activity_date": 1489160063, "creation_date": 1489160063, "answer_id": 42722170, "question_id": 42722169, "link": "https://stackoverflow.com/questions/42722169/generate-pretty-indented-json-with-serde/42722170#42722170", "title": "Generate pretty (indented) JSON with serde", "body": "<p>Use the <a href=\"https://docs.serde.rs/serde_json/fn.to_string_pretty.html\" rel=\"noreferrer\"><code>to_string_pretty</code></a> function to get indented JSON:</p>\n\n<pre><code>::serde_json::to_string_pretty(&amp;obj)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 36, "last_activity_date": 1520099400, "creation_date": 1520099400, "answer_id": 49087292, "question_id": 42722169, "link": "https://stackoverflow.com/questions/42722169/generate-pretty-indented-json-with-serde/49087292#49087292", "title": "Generate pretty (indented) JSON with serde", "body": "<p>The <a href=\"https://docs.serde.rs/serde_json/fn.to_string_pretty.html\" rel=\"noreferrer\"><code>serde_json::to_string_pretty</code></a> function generates pretty-printed indented JSON.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nfn main() {\n    let obj = json!({\"foo\":1,\"bar\":2});\n    println!(\"{}\", serde_json::to_string_pretty(&amp;obj).unwrap());\n}\n</code></pre>\n\n<p>This approach defaults to 2 spaces of indentation, which happens to be what you asked for in your question. You can customize the indentation by using <a href=\"https://docs.serde.rs/serde_json/ser/struct.PrettyFormatter.html\" rel=\"noreferrer\"><code>PrettyFormatter::with_indent</code></a>.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_json;\n\nextern crate serde;\nuse serde::Serialize;\n\nfn main() {\n    let obj = json!({\"foo\":1,\"bar\":2});\n\n    let buf = Vec::new();\n    let formatter = serde_json::ser::PrettyFormatter::with_indent(b\"    \");\n    let mut ser = serde_json::Serializer::with_formatter(buf, formatter);\n    obj.serialize(&amp;mut ser).unwrap();\n    println!(\"{}\", String::from_utf8(ser.into_inner()).unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 24273, "user_id": 525872, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/4d6f74711436cfe252bf4fc8f3cf4971?s=128&d=identicon&r=PG", "display_name": "Jo Liss", "link": "https://stackoverflow.com/users/525872/jo-liss"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7997, "favorite_count": 4, "accepted_answer_id": 49087292, "answer_count": 2, "score": 30, "last_activity_date": 1520099400, "creation_date": 1489160063, "last_edit_date": 1489160250, "question_id": 42722169, "link": "https://stackoverflow.com/questions/42722169/generate-pretty-indented-json-with-serde", "title": "Generate pretty (indented) JSON with serde", "body": "<p>Using the <a href=\"https://github.com/serde-rs/json\" rel=\"noreferrer\">serde_json</a> crate, I can use</p>\n\n<pre><code>::serde_json::to_string(&amp;obj)\n</code></pre>\n\n<p>to serialize an object into a JSON string. The resulting JSON uses compact formatting, like:</p>\n\n<pre><code>{\"foo\":1,\"bar\":2}\n</code></pre>\n\n<p>But how do I generate pretty/indented JSON? For example, I'd like to get this:</p>\n\n<pre><code>{\n  \"foo\": 1,\n  \"bar\": 2\n}\n</code></pre>\n"}, {"tags": ["rust", "rayon"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1489159426, "post_id": 42721458, "comment_id": 72563593, "body": "Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. There is way too much code here for the error specified."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1489166588, "post_id": 42721458, "comment_id": 72568157, "body": "<i>I&#39;ve <code>impl</code>d <code>Send</code> and <code>Sync</code> for <code>Point&lt;T&gt;</code></i> \u2014 You should <b>not</b> do that because you aren&#39;t guaranteeing that <code>Point</code> is safe to transfer across thread boundaries <b>regardless</b> of the concrete type of <code>T</code>. You are simply adding unsafety to your program."}], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 4, "last_activity_date": 1489160832, "creation_date": 1489160832, "answer_id": 42722395, "question_id": 42721458, "link": "https://stackoverflow.com/questions/42721458/how-to-satisfy-the-iterator-trait-bound-in-order-to-use-rayon-here/42722395#42722395", "title": "How to satisfy the Iterator trait bound in order to use Rayon here?", "body": "<p>Rayon's parallel iterators implement <code>ParallelIterator</code>, not <code>Iterator</code>. In particular, this means you cannot just put a <code>par_iter()</code> in a for-loop header and expect it to suddenly be parallel. <code>for</code> is sequential.</p>\n\n<p>Since your original code isn't written in terms of iterator functions, but rather as for loops, you can't parallelize it simply with the switch to <code>par_iter()</code>, but have to actually redesign the code.</p>\n\n<p>In particular, the failing part of the code seems to be implementing the <a href=\"https://docs.rs/rayon/0.6.0/rayon/par_iter/trait.ParallelIterator.html#method.max_by_key\" rel=\"nofollow noreferrer\"><code>max_by_key</code></a> function.</p>\n"}], "owner": {"reputation": 21101, "user_id": 416626, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/ad98b7aa615718b4a2446d12af86be73?s=128&d=identicon&r=PG", "display_name": "urschrei", "link": "https://stackoverflow.com/users/416626/urschrei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 985, "favorite_count": 0, "accepted_answer_id": 42722395, "answer_count": 1, "score": 1, "last_activity_date": 1489166413, "creation_date": 1489158104, "last_edit_date": 1489166413, "question_id": 42721458, "link": "https://stackoverflow.com/questions/42721458/how-to-satisfy-the-iterator-trait-bound-in-order-to-use-rayon-here", "title": "How to satisfy the Iterator trait bound in order to use Rayon here?", "body": "<p>I'm attempting to parallelise the Ramer\u2013Douglas-Peucker line simplification algorithm by using Rayon's <code>par_iter</code> instead of <code>iter</code>:</p>\n\n<pre><code>extern crate num_traits;\nuse num_traits::{Float, ToPrimitive};\nextern crate rayon;\nuse self::rayon::prelude::*;\n\n#[derive(PartialEq, Clone, Copy, Debug)]\npub struct Coordinate&lt;T&gt;\n    where T: Float\n{\n    pub x: T,\n    pub y: T,\n}\n\n#[derive(PartialEq, Clone, Copy, Debug)]\npub struct Point&lt;T&gt;(pub Coordinate&lt;T&gt;) where T: Float;\n\nimpl&lt;T&gt; Point&lt;T&gt;\n    where T: Float + ToPrimitive\n{\n    pub fn new(x: T, y: T) -&gt; Point&lt;T&gt; {\n        Point(Coordinate { x: x, y: y })\n    }\n    pub fn x(&amp;self) -&gt; T {\n        self.0.x\n    }\n    pub fn y(&amp;self) -&gt; T {\n        self.0.y\n    }\n}\n\nunsafe impl&lt;T&gt; Send for Point&lt;T&gt; where T: Float {}\nunsafe impl&lt;T&gt; Sync for Point&lt;T&gt; where T: Float {}\n\nfn distance&lt;T&gt;(a: &amp;Point&lt;T&gt;, p: &amp;Point&lt;T&gt;) -&gt; T \n    where T: Float\n{\n    let (dx, dy) = (a.x() - p.x(), a.y() - p.y());\n    dx.hypot(dy)\n}\n\n// perpendicular distance from a point to a line\nfn point_line_distance&lt;T&gt;(point: &amp;Point&lt;T&gt;, start: &amp;Point&lt;T&gt;, end: &amp;Point&lt;T&gt;) -&gt; T\n    where T: Float\n{\n    if start == end {\n        distance(point, start)\n    } else {\n        let numerator = ((end.x() - start.x()) * (start.y() - point.y()) -\n                         (start.x() - point.x()) * (end.y() - start.y()))\n            .abs();\n        let denominator = distance(start, end);\n        numerator / denominator\n    }\n}\n\n// Ramer\u2013Douglas-Peucker line simplification algorithm\nfn rdp&lt;T&gt;(points: &amp;[Point&lt;T&gt;], epsilon: &amp;T) -&gt; Vec&lt;Point&lt;T&gt;&gt;\n    where T: Float + Send + Sync\n{\n    if points.is_empty() {\n        return points.to_vec();\n    }\n    let mut dmax = T::zero();\n    let mut index: usize = 0;\n    let mut distance: T;\n\n    for (i, _) in points.par_iter().enumerate().take(points.len() - 1).skip(1) {\n        distance = point_line_distance(&amp;points[i], &amp;points[0], &amp;*points.last().unwrap());\n        if distance &gt; dmax {\n            index = i;\n            dmax = distance;\n        }\n    }\n    if dmax &gt; *epsilon {\n        let mut intermediate = rdp(&amp;points[..index + 1], &amp;*epsilon);\n        intermediate.pop();\n        intermediate.extend_from_slice(&amp;rdp(&amp;points[index..], &amp;*epsilon));\n        intermediate\n    } else {\n        vec![*points.first().unwrap(), *points.last().unwrap()]\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::{Point};\n    use super::{rdp};\n        #[test]\n    fn rdp_test() {\n        let mut vec = Vec::new();\n        vec.push(Point::new(0.0, 0.0));\n        vec.push(Point::new(5.0, 4.0));\n        vec.push(Point::new(11.0, 5.5));\n        vec.push(Point::new(17.3, 3.2));\n        vec.push(Point::new(27.8, 0.1));\n        let mut compare = Vec::new();\n        compare.push(Point::new(0.0, 0.0));\n        compare.push(Point::new(5.0, 4.0));\n        compare.push(Point::new(11.0, 5.5));\n        compare.push(Point::new(27.8, 0.1));\n        let simplified = rdp(&amp;vec, &amp;1.0);\n        assert_eq!(simplified, compare);\n    }\n}\n</code></pre>\n\n<p>I've <code>impl</code>d <code>Send</code> and <code>Sync</code> for <code>Point&lt;T&gt;</code>, but when I switch to <code>par_iter</code>, I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound rayon::par_iter::skip::Skip&lt;rayon::par_iter::take::Take&lt;rayon::par_iter::enumerate::Enumerate&lt;rayon::par_iter::slice::SliceIter&lt;'_, Point&lt;T&gt;&gt;&gt;&gt;&gt;: std::iter::Iterator is not satisfied\n   --&gt; lib.rs:107:5\n\n= note: rayon::par_iter::skip::Skip&lt;rayon::par_iter::take::Take&lt;rayon::par_iter::enumerate::Enumerate&lt;rayon::par_iter::slice::SliceIter&lt;'_, Point&lt;T&gt;&gt;&gt;&gt;&gt; is not an iterator; maybe try calling .iter() or a similar method\n= note: required by std::iter::IntoIterator::into_iter\n</code></pre>\n\n<p>I don't understand what it's asking for. Is the problem that I'm operating on a tuple?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1489165053, "post_id": 42721376, "comment_id": 72567243, "body": "<a href=\"http://play.integer32.com/?gist=76f606ad0a70a1d14965c552fcccd83c&amp;version=stable\" rel=\"nofollow noreferrer\">Further minimized</a>."}, {"owner": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 0, "creation_date": 1489172581, "post_id": 42721376, "comment_id": 72571362, "body": "<a href=\"http://play.integer32.com/?gist=f3010554cfead7d64f39f13e5060c16d&amp;version=stable\" rel=\"nofollow noreferrer\">change the declaration</a> to <code>pub fn descendants_iter(self, from: Tree) -&gt; Box&lt;Iterator&lt;Item = Tree&gt;&gt; {</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 0, "creation_date": 1489172951, "post_id": 42721376, "comment_id": 72571527, "body": "@rampion that would consume <code>self</code>, which doesn&#39;t outwardly appear to be needed, especially considering that introducing a temporary (as shown in my comment) &quot;solves&quot; the problem."}, {"owner": {"reputation": 21, "user_id": 1202708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d3c2dc7214d62b47d8647566db6f852?s=128&d=identicon&r=PG", "display_name": "Jonathan Morley", "link": "https://stackoverflow.com/users/1202708/jonathan-morley"}, "reply_to_user": {"reputation": 81794, "user_id": 9859, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/KEZOL.jpg?s=128&g=1", "display_name": "rampion", "link": "https://stackoverflow.com/users/9859/rampion"}, "edited": false, "score": 0, "creation_date": 1489177785, "post_id": 42721376, "comment_id": 72573948, "body": "@rampion that also fails to compile on the larger example in the question if I only change the signature of <code>descendants</code>"}], "owner": {"reputation": 21, "user_id": 1202708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d3c2dc7214d62b47d8647566db6f852?s=128&d=identicon&r=PG", "display_name": "Jonathan Morley", "link": "https://stackoverflow.com/users/1202708/jonathan-morley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 514, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1489164176, "creation_date": 1489157869, "last_edit_date": 1489164176, "question_id": 42721376, "link": "https://stackoverflow.com/questions/42721376/returning-a-recursive-iterator-from-a-function", "title": "Returning a recursive iterator from a function", "body": "<p>I have a function that <a href=\"https://gist.github.com/anonymous/b006dd1977f4bea0672501ae4426fd32\" rel=\"nofollow noreferrer\">returns a flat-mapped <code>Vec</code> over children of a tree</a>:</p>\n\n<pre><code>use std::iter;\n\n#[derive(Clone)]\nstruct Tree {\n    value: String,\n    children: Vec&lt;Tree&gt;,\n}\n\nstruct NoClone;\n\nimpl NoClone {\n    pub fn children(&amp;self, from: &amp;Tree) -&gt; Vec&lt;Tree&gt; {\n        from.children.clone()\n    }\n\n    pub fn descendants_vec&lt;'a&gt;(&amp;'a self, from: Tree) -&gt; Vec&lt;Tree&gt; {\n        let children = self.children(&amp;from);\n        iter::once(from)\n            .chain(children.into_iter().flat_map(|child| self.descendants_vec(child)))\n            .collect::&lt;Vec&lt;Tree&gt;&gt;()\n    }\n\n    pub fn descendants_iter&lt;'a&gt;(&amp;'a self, from: Tree) -&gt; Box&lt;Iterator&lt;Item = Tree&gt; + 'a&gt; {\n        let children = self.children(&amp;from);\n        Box::new(iter::once(from)\n                     .chain(children.into_iter().flat_map(move |child| {\n                                                              self.descendants_iter(child)\n                                                          })))\n    }\n}\n\nfn main() {\n    //println!(\"Flattened (Iter): {:?}\", mapped_iter());\n    println!(\"Flattened (Vec): {:?}\", mapped_vec());\n}\n\nfn tree() -&gt; Tree {\n    let tree_a = Tree {\n        value: \"a\".to_owned(),\n        children: Vec::new(),\n    };\n\n    let tree_b = Tree {\n        value: \"b\".to_owned(),\n        children: Vec::new(),\n    };\n\n    let tree_c = Tree {\n        value: \"c\".to_owned(),\n        children: Vec::new(),\n    };\n\n    Tree {\n        value: \"abc\".to_owned(),\n        children: vec![tree_a, tree_b, tree_c],\n    }\n}\n\n/*fn mapped_iter() -&gt; Vec&lt;String&gt; {\n    let tree = tree();\n    let no_clone = NoClone;\n    no_clone.descendants_iter(tree).map(|x| x.value).collect::&lt;Vec&lt;String&gt;&gt;()\n}*/\n\nfn mapped_vec() -&gt; Vec&lt;String&gt; {\n    let tree = tree();\n    let no_clone = NoClone;\n    no_clone.descendants_vec(tree)\n        .into_iter()\n        .map(|x| x.value)\n        .collect::&lt;Vec&lt;String&gt;&gt;()\n}\n</code></pre>\n\n<p>I would like to avoid the intermediate <code>collect</code>/<code>iter</code> and use <code>descendants_iter</code> which returns an <code>Iterator</code> (boxed until we get impl traits).</p>\n\n<p>However, uncommenting the blocks calling this function causes the compiler to complain with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `no_clone` does not live long enough\n  --&gt; &lt;anon&gt;:63:1\n   |\n62 |     no_clone.descendants_iter(tree).map(|x| x.value).collect::&lt;Vec&lt;String&gt;&gt;()\n   |     -------- borrow occurs here\n63 | }\n   | ^ `no_clone` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>Any ideas about how to use the <code>descendants_iter</code> function?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1489153102, "creation_date": 1489153102, "answer_id": 42719740, "question_id": 42719580, "link": "https://stackoverflow.com/questions/42719580/why-doesnt-a-static-function-argument-make-something-live-for-the-entire-progr/42719740#42719740", "title": "Why doesn&#39;t a &#39;static function argument make something live for the entire program?", "body": "<p>You are making a very common mistake, attempting to dictate the lifetime of a reference, however <strong>lifetimes are descriptive, not prescriptive</strong>.</p>\n\n<hr>\n\n<p><code>'static</code> is the lifetime of all things that live for the entire duration of the program, for example in:</p>\n\n<pre><code>const ID: usize = 4;\n\nfn print(i: &amp;'static usize) { println!(\"{}\", i); }\n\nfn main() {\n    print(&amp;ID);\n}\n</code></pre>\n\n<p>The lifetime of <code>ID</code> is <code>'static</code> and therefore I can pass <code>&amp;ID</code> to a function expecting a <code>&amp;'static usize</code>.</p>\n\n<p>If I have a variable of type <code>usize</code> in <code>main</code>:</p>\n\n<pre><code>fn main() {\n    let i = 4usize;\n    print(&amp;i);\n}\n</code></pre>\n\n<p>the compiler will however complain that <code>i</code> does not live long enough because <code>&amp;'static usize</code> as a parameter type is a <em>requirement</em>: it says that ONLY variables which live at least as long as <code>'static</code> (which is the longest possible lifetime) will be accepted. And <code>i</code>'s lifetime is shorter, so it's rejected.</p>\n\n<hr>\n\n<p>To reiterate: <em>all things in Rust have an intrinsic lifetime, and the <code>'a</code> notation is only a way of <strong>observing it</strong> not a way of <strong>modifying it</strong>.</em></p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 1, "last_activity_date": 1489153155, "creation_date": 1489153155, "answer_id": 42719759, "question_id": 42719580, "link": "https://stackoverflow.com/questions/42719580/why-doesnt-a-static-function-argument-make-something-live-for-the-entire-progr/42719759#42719759", "title": "Why doesn&#39;t a &#39;static function argument make something live for the entire program?", "body": "<p>You may wish to read more about <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime ellision</a>. The two functions, with lifetimes made explicit, are defined as follows:</p>\n\n<pre><code>fn say_foo&lt;'a&gt;(_: &amp;'a String) -&gt; &amp;'a str {...}\n\nfn say_bar(_: &amp;'static String) -&gt; &amp;'static str {...}\n</code></pre>\n\n<p>Calling <code>say_bar</code> on <code>&amp;b</code> does not work because <code>b</code> does not have a static lifetime. You cannot pass a reference with a shorter lifetime than the one specified. On the other hand, calling <code>say_foo</code> works because the lifetime parameter <code>'a</code> is resolved to <code>&amp;b</code>'s lifetime.</p>\n"}], "owner": {"reputation": 23, "user_id": 7688931, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/55182171b0c4d12f40992010f4704177?s=128&d=identicon&r=PG&f=1", "display_name": "hono", "link": "https://stackoverflow.com/users/7688931/hono"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 333, "favorite_count": 0, "accepted_answer_id": 42719740, "answer_count": 2, "score": 2, "last_activity_date": 1570211450, "creation_date": 1489152547, "last_edit_date": 1570211450, "question_id": 42719580, "link": "https://stackoverflow.com/questions/42719580/why-doesnt-a-static-function-argument-make-something-live-for-the-entire-progr", "title": "Why doesn&#39;t a &#39;static function argument make something live for the entire program?", "body": "<p>I still don't understand the behavior of <code>'static</code>. In the following code, <code>say_foo</code> works but <code>say_bar</code> does not:</p>\n\n<pre><code>fn say_foo(_: &amp;String) -&gt; &amp;str {\n    \"foo!\"\n}\nfn say_bar(_: &amp;'static String) -&gt; &amp;str {\n    \"bar!\"\n}\n\nfn main() {\n    let f = \"f\".to_string();\n    let f2 = say_foo(&amp;f); // ok:)\n    println!(\"{}\", f2);\n\n    let b = \"b\".to_string();\n    let b2 = say_bar(&amp;b); // error:`b` does not live long enough\n    println!(\"{}\", b2);\n}\n</code></pre>\n\n<p>Even if I pass <code>reference</code> to both functions, the life expectancy of the passed variable is different between <code>say_foo</code> and <code>say_bar</code>. </p>\n\n<p>In <a href=\"https://doc.rust-lang.org/stable/book/lifetimes.html\" rel=\"nofollow noreferrer\">the chapter about lifetimes</a>, I found that <code>'static</code> is a signal that makes a lifetime of something to live in the entire program.</p>\n\n<p>But this <code>'static</code> does not seem to act like that: <code>b</code> was released before <code>b2</code> (and <code>f</code>).</p>\n\n<p>What does <code>'static</code> mean?</p>\n"}, {"tags": ["rust", "libc", "unsafe", "execvp"], "answers": [{"comments": [{"owner": {"reputation": 45, "user_id": 5128192, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-VpdaQeoyvE0/AAAAAAAAAAI/AAAAAAAAABA/TFWXsYqNDcE/photo.jpg?sz=128", "display_name": "Jianzhong Liu", "link": "https://stackoverflow.com/users/5128192/jianzhong-liu"}, "edited": false, "score": 0, "creation_date": 1489150579, "post_id": 42717801, "comment_id": 72557590, "body": "Thanks! I read that part but didn&#39;t realize I made the mistake it warned not to."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1558464641, "last_edit_date": 1558464641, "creation_date": 1489146789, "answer_id": 42717801, "question_id": 42717473, "link": "https://stackoverflow.com/questions/42717473/passing-vecstring-from-rust-to-char-in-c/42717801#42717801", "title": "Passing Vec&lt;String&gt; from Rust to char** in C", "body": "<p>I suggest you read <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_ptr\" rel=\"nofollow noreferrer\">the documentation for <code>CString::as_ptr</code></a> again:</p>\n\n<blockquote>\n  <p><strong>WARNING</strong></p>\n  \n  <p>It is your responsibility to make sure that the underlying memory is not\n  freed too early. For example, the following code will cause undefined\n  behavior when <code>ptr</code> is used inside the <code>unsafe</code> block:</p>\n\n<pre><code># #![allow(unused_must_use)]\nuse std::ffi::{CString};\n\nlet ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();\nunsafe {\n    // `ptr` is dangling\n    *ptr;\n}\n</code></pre>\n  \n  <p>This happens because the pointer returned by <code>as_ptr</code> does not carry any\n  lifetime information and the <a href=\"https://doc.rust-lang.org/std/ffi/struct.CString.html\" rel=\"nofollow noreferrer\"><code>CString</code></a> is deallocated immediately after\n  the <code>CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr()</code> expression is evaluated.\n  To fix the problem, bind the <code>CString</code> to a local variable:</p>\n\n<pre><code># #![allow(unused_must_use)]\nuse std::ffi::{CString};\n\nlet hello = CString::new(\"Hello\").expect(\"CString::new failed\");\nlet ptr = hello.as_ptr();\nunsafe {\n    // `ptr` is valid because `hello` is in scope\n    *ptr;\n}\n</code></pre>\n  \n  <p>This way, the lifetime of the <code>CString</code> in <code>hello</code> encompasses\n  the lifetime of <code>ptr</code> and the <code>unsafe</code> block.</p>\n</blockquote>\n\n<p>You are doing exactly what the documentation says not to do.</p>\n"}, {"comments": [{"owner": {"reputation": 45, "user_id": 5128192, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-VpdaQeoyvE0/AAAAAAAAAAI/AAAAAAAAABA/TFWXsYqNDcE/photo.jpg?sz=128", "display_name": "Jianzhong Liu", "link": "https://stackoverflow.com/users/5128192/jianzhong-liu"}, "edited": false, "score": 0, "creation_date": 1489150692, "post_id": 42717881, "comment_id": 72557673, "body": "Thanks! I guess I should&#39;ve kept the <code>CString</code>s in a vector."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 8, "last_activity_date": 1558464187, "last_edit_date": 1558464187, "creation_date": 1489147029, "answer_id": 42717881, "question_id": 42717473, "link": "https://stackoverflow.com/questions/42717473/passing-vecstring-from-rust-to-char-in-c/42717881#42717881", "title": "Passing Vec&lt;String&gt; from Rust to char** in C", "body": "<p>You are creating <code>CString</code> instances and immediately fetching a pointer. Consequently, as you well guessed, ownership of this string was dropped prematurely. This is similar to returning a reference to a local instance, except that since pointers do not retain lifetime information, this case does not trigger a compilation error.</p>\n\n<p>The solution to your problem is to retain the owned C-style strings during the function's scope, and produce a pointer to pointers of the same content separately.</p>\n\n<pre><code>let cstr_argv: Vec&lt;_&gt; = argv.iter()\n        .map(|arg| CString::new(arg.as_str()).unwrap())\n        .collect();\n\nlet mut p_argv: Vec&lt;_&gt; = cstr_argv.iter() // do NOT into_iter()\n        .map(|arg| arg.as_ptr())\n        .collect();\n\np_argv.push(std::ptr::null());\n\nlet p: *const *const c_char = p_argv.as_ptr();\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b839923d94354b127097724db17d9562&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>.</p>\n\n<p>See also: <a href=\"https://stackoverflow.com/q/52174925/1233251\">CString::new().unwrap().as_ptr() gives empty *const c_char</a></p>\n"}], "owner": {"reputation": 45, "user_id": 5128192, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-VpdaQeoyvE0/AAAAAAAAAAI/AAAAAAAAABA/TFWXsYqNDcE/photo.jpg?sz=128", "display_name": "Jianzhong Liu", "link": "https://stackoverflow.com/users/5128192/jianzhong-liu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1451, "favorite_count": 2, "accepted_answer_id": 42717881, "answer_count": 2, "score": 3, "last_activity_date": 1558464641, "creation_date": 1489145843, "last_edit_date": 1489156492, "question_id": 42717473, "link": "https://stackoverflow.com/questions/42717473/passing-vecstring-from-rust-to-char-in-c", "title": "Passing Vec&lt;String&gt; from Rust to char** in C", "body": "<p>I've been trying to write a shell in Rust that links directly to the <code>libc</code> library. I've used a <code>Vec&lt;String&gt;</code> to hold the arguments to be passed to <code>execvp()</code>, but it seems that my conversion to <code>char **</code> has not been successful. Upon execution, all the parameters became null strings.</p>\n\n<p>Here's the piece of code involved.</p>\n\n<pre><code>fn safe_execvp(path: String, argv: Vec&lt;String&gt;) -&gt; Result&lt;(), i32&gt; {\n    unsafe {\n        let c_path = CString::new(path.as_str()).unwrap();\n        let mut c_argv_vec = Vec::new();\n        for arg in &amp;argv {\n            let c_arg = CString::new(arg.as_str()).unwrap().as_ptr();\n            c_argv_vec.push(c_arg);\n        }\n        c_argv_vec.push(std::ptr::null());\n        match execvp(c_file.as_ptr(), c_argv_vec.as_ptr()) {\n            num =&gt; Err(num),\n        }\n    }\n}\n</code></pre>\n\n<p><code>execvp</code> is the C library function defined as <code>fn execvp(file: *const i8, argv: *const*const i8) -&gt; i32;</code>.</p>\n\n<p>I'm not sure what I've done wrong. Is it because the memory for the arguments were released before calling <code>execvp()</code>? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 1375899, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7881c4b6271f3b501fe6930aa1798907?s=128&d=identicon&r=PG", "display_name": "Ehsan M. Kermani", "link": "https://stackoverflow.com/users/1375899/ehsan-m-kermani"}, "edited": false, "score": 1, "creation_date": 1553462785, "post_id": 42709869, "comment_id": 97383214, "body": "This everything <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d0a2a38d988dff0ca97ecd8a4a8025d3\" rel=\"nofollow noreferrer\">compiles now</a>, I&#39;m curious how the explanations can be updated."}, {"owner": {"reputation": 128, "user_id": 907697, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/affa770bee36d66d6bcf650396d04fb3?s=128&d=identicon&r=PG", "display_name": "x1957", "link": "https://stackoverflow.com/users/907697/x1957"}, "edited": false, "score": 0, "creation_date": 1596721653, "post_id": 42709869, "comment_id": 111906710, "body": "everything compiles now"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 6, "last_activity_date": 1489118942, "last_edit_date": 1489118942, "creation_date": 1489117815, "answer_id": 42709869, "question_id": 42708462, "link": "https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a/42709869#42709869", "title": "Why is it useful to use PhantomData to inform the compiler that a struct owns a generic if I already implement Drop?", "body": "<p><em>Caveat emptor</em> \u2014 I'm not that strong in the extremely deep theory that truly answers your question. I'm just a layperson who has used Rust a bit and has read the related RFCs. Always refer back to those original sources for a less-diluted version of the truth.</p>\n\n<hr>\n\n<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md\" rel=\"noreferrer\">RFC 769</a> introduced the actual <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#the-drop-check-rule\" rel=\"noreferrer\">The Drop-Check Rule</a>:</p>\n\n<blockquote>\n  <p>Let <code>v</code> be some value (either temporary or named) and <code>'a</code> be some\n  lifetime (scope); if the type of <code>v</code> owns data of type <code>D</code>, where (1.)\n  <code>D</code> has a lifetime- or type-parametric <code>Drop</code> implementation, and (2.)\n  the structure of <code>D</code> can reach a reference of type <code>&amp;'a _</code>, and (3.)\n  either:</p>\n  \n  <ul>\n  <li><p>(A.) the <code>Drop impl</code> for <code>D</code> instantiates <code>D</code> at <code>'a</code>\n       directly, i.e. <code>D&lt;'a&gt;</code>, or,</p></li>\n  <li><p>(B.) the <code>Drop impl</code> for <code>D</code> has some type parameter with a\n       trait bound <code>T</code> where <code>T</code> is a trait that has at least\n       one method,</p></li>\n  </ul>\n  \n  <p>then <code>'a</code> must strictly outlive the scope of <code>v</code>.</p>\n</blockquote>\n\n<p>It then goes further to define some of those terms, including <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#when-does-one-type-own-another\" rel=\"noreferrer\">what it means for one type to own another</a>. This goes further to mention <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md#phantom-data\" rel=\"noreferrer\"><code>PhantomData</code> specifically</a>:</p>\n\n<blockquote>\n  <p>Therefore, as an additional special case to the criteria above for when the type <code>E</code> owns data of type <code>D</code>, we include:</p>\n  \n  <p>If <code>E</code> is <code>PhantomData&lt;T&gt;</code>, then recurse on <code>T</code>.</p>\n</blockquote>\n\n<hr>\n\n<p>A key problem occurs when two variables are defined at the same time:</p>\n\n<pre><code>struct Noisy&lt;'a&gt;(&amp;'a str);\n\nimpl&lt;'a&gt; Drop for Noisy&lt;'a&gt; {\n    fn drop(&amp;mut self) { println!(\"Dropping {}\", self.0 )}\n}\n\nfn main() -&gt; () {\n    let (mut v, s) = (Vec::new(), \"hi\".to_string());\n    let noisy = Noisy(&amp;s);\n    v.push(noisy);\n}\n</code></pre>\n\n<p>As I understand it, without The Drop-Check Rule and indicating that <code>Vec</code> owns <code>Noisy</code>, code like this might compile. When the <code>Vec</code> is dropped, the <code>drop</code> implementation could access an invalid reference; introducing unsafety.</p>\n\n<p>Returning to your points:</p>\n\n<blockquote>\n  <p>If I implement <code>Drop</code> for a struct and manually destroy all <code>T</code>s in it, why should I care if compiler knows that my struct owns some <code>T</code>s?</p>\n</blockquote>\n\n<p>The compiler <strong>must</strong> know that you own the value <em>because</em> you can/will call <code>drop</code>. Since the implementation of <code>drop</code> is arbitrary, if you are going to call it, the compiler must forbid you from accepting values that would cause unsafe behavior during drop.</p>\n\n<p>Always remember that any arbitrary <code>T</code> can be a value, a reference, a value containing a reference, etc. When trying to puzzle out these types of things, it's important to try to use the <strong>most</strong> complicated variant for any thought experiments.</p>\n\n<hr>\n\n<p>All of that should provide enough pieces to connect-the-dots; for full understanding, reading the RFC a few times is probably better than relying on my flawed interpretation.</p>\n\n<p>Then it gets more complicated. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\" rel=\"noreferrer\">RFC 1238</a> further modifies The Drop-Check Rule, removing this specific reasoning. It does say:</p>\n\n<blockquote>\n  <p>parametricity is a necessary but not sufficient condition to justify the inferences that dropck makes </p>\n</blockquote>\n\n<p>Continuing to use <code>PhantomData</code> seems the safest thing to do, but it may <strong>not</strong> be required. An anonymous Twitter benefactor pointed out this code:</p>\n\n<pre><code>use std::marker::PhantomData;\n\n#[derive(Debug)] struct MyGeneric&lt;T&gt; { x: Option&lt;T&gt; }\n#[derive(Debug)] struct MyDropper&lt;T&gt; { x: Option&lt;T&gt; }\n#[derive(Debug)] struct MyHiddenDropper&lt;T&gt; { x: *const T }\n#[derive(Debug)] struct MyHonestHiddenDropper&lt;T&gt; { x: *const T, boo: PhantomData&lt;T&gt; }\n\nimpl&lt;T&gt; Drop for MyDropper&lt;T&gt; { fn drop(&amp;mut self) { } }\nimpl&lt;T&gt; Drop for MyHiddenDropper&lt;T&gt; { fn drop(&amp;mut self) { } }\nimpl&lt;T&gt; Drop for MyHonestHiddenDropper&lt;T&gt; { fn drop(&amp;mut self) { } }\n\nfn main() {\n    // Does Compile! (magic annotation on destructor)\n    {\n        let (a, mut b) = (0, vec![]);\n        b.push(&amp;a);\n    }\n\n    // Does Compile! (no destructor)\n    {\n        let (a, mut b) = (0, MyGeneric { x: None });\n        b.x = Some(&amp;a);\n    }\n\n    // Doesn't Compile! (has destructor, no attribute)\n    {\n        let (a, mut b) = (0, MyDropper { x: None });\n        b.x = Some(&amp;a);\n    }\n\n    {\n        let (a, mut b) = (0, MyHiddenDropper { x: 0 as *const _ });\n        b.x = &amp;&amp;a;\n    }\n\n    {\n        let (a, mut b) = (0, MyHonestHiddenDropper { x: 0 as *const _, boo: PhantomData });\n        b.x = &amp;&amp;a;\n    }\n}\n</code></pre>\n\n<p>This suggests that the changes in RFC 1238 made the compiler more conservative, such that simply having a lifetime or type parameter is enough to prevent it from compiling.</p>\n\n<p>You can also note that <code>Vec</code> doesn't have this problem because it uses the <code>unsafe_destructor_blind_to_params</code> attribute described in the the RFC.</p>\n"}, {"comments": [{"owner": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "edited": false, "score": 0, "creation_date": 1489350041, "post_id": 42721125, "comment_id": 72621477, "body": "Thank you for such an elaborate response, it feels like a lost Rustonomicon chapter.  If I get it right, a one sentence answer could be &quot;to make compiler check if T has no <code>drop</code> and let it have same lifetime as <code>Vec&lt;T&gt;</code>&quot;?"}, {"owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "reply_to_user": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "edited": false, "score": 0, "creation_date": 1489401332, "post_id": 42721125, "comment_id": 72638265, "body": "That&#39;s not how I would phrase it. (After all, the <code>PhantomData</code> isn&#39;t what would allow the <code>T</code> to have lifetimes that do not strictly outlive the <code>Vec&lt;T&gt;</code>.)"}, {"owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "reply_to_user": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "edited": false, "score": 0, "creation_date": 1489401389, "post_id": 42721125, "comment_id": 72638306, "body": "Instead, I would say something like &quot;The <code>PhantomData</code> ensures that if <code>T</code> implements <code>Drop</code>, then it will be forced to outlive the <code>Vec&lt;T&gt;</code>, even in the presence of the <code>#[may_dangle]</code> attribute on <code>T</code>.&quot;"}], "tags": [], "owner": {"reputation": 3495, "user_id": 36585, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0ccd55542e51b1b98f5a72b30c815dc?s=128&d=identicon&r=PG", "display_name": "pnkfelix", "link": "https://stackoverflow.com/users/36585/pnkfelix"}, "is_accepted": true, "score": 24, "last_activity_date": 1489157523, "last_edit_date": 1489157523, "creation_date": 1489157220, "answer_id": 42721125, "question_id": 42708462, "link": "https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a/42721125#42721125", "title": "Why is it useful to use PhantomData to inform the compiler that a struct owns a generic if I already implement Drop?", "body": "<p>The <code>PhantomData&lt;T&gt;</code> within <code>Vec&lt;T&gt;</code> (held indirectly via a <code>Unique&lt;T&gt;</code> within <code>RawVec&lt;T&gt;</code>) communicates to the compiler that the vector may own instances of <code>T</code>, and therefore the vector may run destructors for <code>T</code> when the vector is dropped.</p>\n\n<hr>\n\n<p>Deep dive: We have a combination of factors here:</p>\n\n<ul>\n<li><p>We have a <code>Vec&lt;T&gt;</code> which has an <code>impl Drop</code> (i.e. a destructor implementation).</p></li>\n<li><p>Under the rules of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\" rel=\"noreferrer\">RFC 1238</a>, this would usually imply a relationship between instances of <code>Vec&lt;T&gt;</code> and any lifetimes that occur within <code>T</code>, by requiring that all lifetimes within <code>T</code> strictly outlive the vector.</p></li>\n<li><p>However, the destructor for <code>Vec&lt;T&gt;</code> specifically opts out of this semantics <em>for just that destructor</em> (of <code>Vec&lt;T&gt;</code> itself) via the use of special unstable attributes (see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1238-nonparametric-dropck.md\" rel=\"noreferrer\">RFC 1238</a> and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1327-dropck-param-eyepatch.md\" rel=\"noreferrer\">RFC 1327</a>). This allows for a vector to hold references that have the same lifetime of the vector itself. This is considered sound; after all, the vector itself will not dereference data pointed to by such references (all its doing is dropping values and deallocating the backing array), as long as an important caveat holds.</p></li>\n<li><p>The important caveat: While the vector itself will not dereference pointers within its contained values while destructing itself, it <em>will</em> drop the values held by the vector. If those values of type <code>T</code> themselves have destructors, those destructors for <code>T</code> get run. And if those destructors access the data held within their references, then we would have a problem <em>if</em> we allowed dangling pointers within those references.</p></li>\n<li><p>So, diving in even more deeply: the way that we confirm dropck validity for a given structure <code>S</code>, we first double check if <code>S</code> itself has an <code>impl Drop for S</code> (and if so, we enforce rules on <code>S</code> with respect to its type parameters). But even after that step, we then recursively <em>descend into</em> the structure of <code>S</code> itself, and double check for each of its fields that everything is kosher according to dropck. (Note that we do this even if a type parameter of <code>S</code> is tagged with <code>#[may_dangle]</code>.)</p></li>\n<li><p>In this specific case, we have a <code>Vec&lt;T&gt;</code> which (indirectly via <code>RawVec&lt;T&gt;</code>/<code>Unique&lt;T&gt;</code>) owns a collection of values of type <code>T</code>, represented in a raw pointer <code>*const T</code>. However, the compiler attaches no ownership semantics to <code>*const T</code>; that field alone in a structure <code>S</code> implies <em>no relationship</em> between <code>S</code> and <code>T</code>, and thus enforces <em>no constraint</em> in terms of the relationship of lifetimes within the types <code>S</code> and <code>T</code> (at least from the viewpoint of dropck).</p></li>\n<li><p>Therefore, if the <code>Vec&lt;T&gt;</code> had <em>solely</em> a <code>*const T</code>, the recursive descent into the structure of the vector would fail to capture the ownership relation between the vector and the instances of <code>T</code> contained within the vector. That, combined with the <code>#[may_dangle]</code> attribute on <code>T</code>, would cause the compiler to accept unsound code (namely cases where destructors for <code>T</code> end up trying to access data that has already been deallocated).</p></li>\n<li><p>BUT: <code>Vec&lt;T&gt;</code> does <em>not</em> solely contain a <code>*const T</code>. There is also a <code>PhantomData&lt;T&gt;</code>, and <em>that</em> conveys to the compiler \"hey, even though you can assume (due to the <code>#[may_dangle] T</code>) that the destructor for <code>Vec</code> won't access data of <code>T</code> when the vector is dropped, it is <em>still</em> possible that some destructor of <code>T</code> <em>itself</em> will access data of <code>T</code> as the vector is dropped.\"</p></li>\n</ul>\n\n<p>The end effect: Given <code>Vec&lt;T&gt;</code>, if <code>T</code> <em>doesn't</em> have a destructor, then the compiler provides you with more flexibility (namely, it allows a vector to hold data with references to data that lives for the same amount of time as the vector itself, even though such data may be torn down before the vector is). But if <code>T</code> <em>does</em> have a destructor (and that destructor is not otherwise communicating to the compiler that it won't access any referenced data), then the compiler is more strict, requiring any referenced data to strictly outlive the vector (thus ensuring that when the destructor for <code>T</code> runs, all the referenced data will still be valid).</p>\n\n<hr>\n\n<p>If one wants to try to understand this via concrete exploration, you can try comparing how the compiler differs in its treatment of little container types that vary in their use of <code>#[may_dangle]</code> and <code>PhantomData</code>.</p>\n\n<p>Here is some sample code I have whipped up to illustrate this:</p>\n\n<pre><code>// Illustration of a case where PhantomData is providing necessary ownership\n// info to rustc.\n//\n// MyBox2&lt;T&gt; uses just a `*const T` to hold the `T` it owns.\n// MyBox3&lt;T&gt; has both a `*const T` AND a PhantomData&lt;T&gt;; the latter communicates\n// its ownership relationship with `T`.\n//\n// Skim down to `fn f2()` to see the relevant case, \n// and compare it to `fn f3()`. When you run the program,\n// the output will include:\n//\n// drop PrintOnDrop(mb2b, PrintOnDrop(\"v2b\", 13, INVALID), Valid)\n//\n// (However, in the absence of #[may_dangle], the compiler will constrain\n// things in a manner that may indeed imply that PhantomData is unnecessary;\n// pnkfelix is not 100% sure of this claim yet, though.)\n\n#![feature(alloc, dropck_eyepatch, generic_param_attrs, heap_api)]\n\nextern crate alloc;\n\nuse alloc::heap;\nuse std::fmt;\nuse std::marker::PhantomData;\nuse std::mem;\nuse std::ptr;\n\n#[derive(Copy, Clone, Debug)]\nenum State { INVALID, Valid }\n\n#[derive(Debug)]\nstruct PrintOnDrop&lt;T: fmt::Debug&gt;(&amp;'static str, T, State);\n\nimpl&lt;T: fmt::Debug&gt; PrintOnDrop&lt;T&gt; {\n    fn new(name: &amp;'static str, t: T) -&gt; Self {\n        PrintOnDrop(name, t, State::Valid)\n    }\n}\n\nimpl&lt;T: fmt::Debug&gt; Drop for PrintOnDrop&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        println!(\"drop PrintOnDrop({}, {:?}, {:?})\",\n                 self.0,\n                 self.1,\n                 self.2);\n        self.2 = State::INVALID;\n    }\n}\n\nstruct MyBox1&lt;T&gt; {\n    v: Box&lt;T&gt;,\n}\n\nimpl&lt;T&gt; MyBox1&lt;T&gt; {\n    fn new(t: T) -&gt; Self {\n        MyBox1 { v: Box::new(t) }\n    }\n}\n\nstruct MyBox2&lt;T&gt; {\n    v: *const T,\n}\n\nimpl&lt;T&gt; MyBox2&lt;T&gt; {\n    fn new(t: T) -&gt; Self {\n        unsafe {\n            let p = heap::allocate(mem::size_of::&lt;T&gt;(), mem::align_of::&lt;T&gt;());\n            let p = p as *mut T;\n            ptr::write(p, t);\n            MyBox2 { v: p }\n        }\n    }\n}\n\nunsafe impl&lt;#[may_dangle] T&gt; Drop for MyBox2&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        unsafe {\n            // We want this to be *legal*. This destructor is not \n            // allowed to call methods on `T` (since it may be in\n            // an invalid state), but it should be allowed to drop\n            // instances of `T` as it deconstructs itself.\n            //\n            // (Note however that the compiler has no knowledge\n            //  that `MyBox2&lt;T&gt;` owns an instance of `T`.)\n            ptr::read(self.v);\n            heap::deallocate(self.v as *mut u8,\n                             mem::size_of::&lt;T&gt;(),\n                             mem::align_of::&lt;T&gt;());\n        }\n    }\n}\n\nstruct MyBox3&lt;T&gt; {\n    v: *const T,\n    _pd: PhantomData&lt;T&gt;,\n}\n\nimpl&lt;T&gt; MyBox3&lt;T&gt; {\n    fn new(t: T) -&gt; Self {\n        unsafe {\n            let p = heap::allocate(mem::size_of::&lt;T&gt;(), mem::align_of::&lt;T&gt;());\n            let p = p as *mut T;\n            ptr::write(p, t);\n            MyBox3 { v: p, _pd: Default::default() }\n        }\n    }\n}\n\nunsafe impl&lt;#[may_dangle] T&gt; Drop for MyBox3&lt;T&gt; {\n    fn drop(&amp;mut self) {\n        unsafe {\n            ptr::read(self.v);\n            heap::deallocate(self.v as *mut u8,\n                             mem::size_of::&lt;T&gt;(),\n                             mem::align_of::&lt;T&gt;());\n        }\n    }\n}\n\nfn f1() {\n    // `let (v, _mb1);` and `let (_mb1, v)` won't compile due to dropck\n    let v1; let _mb1;\n    v1 = PrintOnDrop::new(\"v1\", 13);\n    _mb1 = MyBox1::new(PrintOnDrop::new(\"mb1\", &amp;v1));\n}\n\nfn f2() {\n    {\n        let (v2a, _mb2a); // Sound, but not distinguished from below by rustc!\n        v2a = PrintOnDrop::new(\"v2a\", 13);\n        _mb2a = MyBox2::new(PrintOnDrop::new(\"mb2a\", &amp;v2a));\n    }\n\n    {\n        let (_mb2b, v2b); // Unsound!\n        v2b = PrintOnDrop::new(\"v2b\", 13);\n        _mb2b = MyBox2::new(PrintOnDrop::new(\"mb2b\", &amp;v2b));\n        // namely, v2b dropped before _mb2b, but latter contains\n        // value that attempts to access v2b when being dropped.\n    }\n}\n\nfn f3() {\n    let v3; let _mb3; // `let (v, mb3);` won't compile due to dropck\n    v3 = PrintOnDrop::new(\"v3\", 13);\n    _mb3 = MyBox3::new(PrintOnDrop::new(\"mb3\", &amp;v3));\n}\n\nfn main() {\n    f1(); f2(); f3();\n}\n</code></pre>\n"}], "owner": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1336, "favorite_count": 4, "accepted_answer_id": 42721125, "answer_count": 2, "score": 12, "last_activity_date": 1489157523, "creation_date": 1489108659, "last_edit_date": 1489112338, "question_id": 42708462, "link": "https://stackoverflow.com/questions/42708462/why-is-it-useful-to-use-phantomdata-to-inform-the-compiler-that-a-struct-owns-a", "title": "Why is it useful to use PhantomData to inform the compiler that a struct owns a generic if I already implement Drop?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/nomicon/phantom-data.html\" rel=\"noreferrer\">Rustonomicon's guide to <code>PhantomData</code></a>, there is a part about what happens if a <code>Vec</code>-like struct has <code>*const T</code> field, but no <code>PhantomData&lt;T&gt;</code>:</p>\n\n<blockquote>\n  <p>The drop checker will generously determine that <code>Vec&lt;T&gt;</code> does not own any values of type <code>T</code>. This will in turn make it conclude that it doesn't need to worry about <code>Vec</code> dropping any <code>T</code>'s in its destructor for determining drop check soundness. This will in turn allow people to create unsoundness using <code>Vec</code>'s destructor.</p>\n</blockquote>\n\n<p>What does it mean? If I implement <code>Drop</code> for a struct and manually destroy all <code>T</code>s in it, why should I care if compiler knows that my struct owns some <code>T</code>s?</p>\n"}, {"tags": ["mongodb", "rust", "iron"], "answers": [{"comments": [{"owner": {"reputation": 1279, "user_id": 5130134, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/uNgFI.png?s=128&g=1", "display_name": "NotBad4U", "link": "https://stackoverflow.com/users/5130134/notbad4u"}, "edited": false, "score": 0, "creation_date": 1489136658, "post_id": 42709256, "comment_id": 72549037, "body": "Thank for the response, but unfortunately i&#39;ll have more than 2 routes in the future and i think it&#39;s not a elegant solution to create a variable for each new routes."}], "tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": false, "score": 1, "last_activity_date": 1489113934, "creation_date": 1489113934, "answer_id": 42709256, "question_id": 42707428, "link": "https://stackoverflow.com/questions/42707428/trouble-to-pass-iron-handlers-with-closure-in-the-router-declaration/42709256#42709256", "title": "Trouble to pass Iron handlers with closure in the router declaration", "body": "<p>You can <code>#[derive(Clone)]</code> for your handler, and clone it:</p>\n\n<pre><code>let handler_show = handler.clone();\nrouter!(\n     index:  get    \"/\"    =&gt; move |r: &amp;mut Request| handler.index(r),\n     show:   get    \"/:id\" =&gt; move |r: &amp;mut Request| handler_show.show(r),\n)\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1279, "user_id": 5130134, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/uNgFI.png?s=128&g=1", "display_name": "NotBad4U", "link": "https://stackoverflow.com/users/5130134/notbad4u"}, "edited": false, "score": 0, "creation_date": 1489147549, "post_id": 42717753, "comment_id": 72555865, "body": "You saved my refactoring !"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1489146647, "creation_date": 1489146647, "answer_id": 42717753, "question_id": 42707428, "link": "https://stackoverflow.com/questions/42707428/trouble-to-pass-iron-handlers-with-closure-in-the-router-declaration/42717753#42717753", "title": "Trouble to pass Iron handlers with closure in the router declaration", "body": "<p>The router <code>get</code> method takes a handler by <em>value</em>. In Rust, passing by value implies giving up ownership.</p>\n\n<p>By definition, you cannot give up ownership of something twice: it's no longer yours after you gave it up the first time! The only exception to the rule is <code>Copy</code> types, but those are restricted to things like integers and non-mutating references (and references are out because <code>Handler: 'static</code>).</p>\n\n<p>Thus, you <em>need</em> to call <code>.clone()</code> on the handler to be passed. Every time.</p>\n\n<p>A very simple way is to use a block-expression:</p>\n\n<pre><code>let h  = handler;\nrouter!(\n    index: get \"/\"    =&gt; { let h = h.clone(); move |r: &amp;mut Request| h.index(r) },\n    show:  get \"/:id\" =&gt; { let h = h.clone(); move |r: &amp;mut Request| h.show(r) },\n)\n</code></pre>\n\n<p>this way, you do not have to declare all the clones beforehand.</p>\n"}], "owner": {"reputation": 1279, "user_id": 5130134, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/uNgFI.png?s=128&g=1", "display_name": "NotBad4U", "link": "https://stackoverflow.com/users/5130134/notbad4u"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "accepted_answer_id": 42717753, "answer_count": 2, "score": 1, "last_activity_date": 1489146647, "creation_date": 1489101783, "last_edit_date": 1489146152, "question_id": 42707428, "link": "https://stackoverflow.com/questions/42707428/trouble-to-pass-iron-handlers-with-closure-in-the-router-declaration", "title": "Trouble to pass Iron handlers with closure in the router declaration", "body": "<p>I'm trying to declare my routes with closures:</p>\n\n<pre><code>use mongodb::Client;\n\npub fn get_user_routes(client: Client) -&gt; Router {\n    let controller = controller::UserController::new(client);\n    let handler = handlers::UserHandler::new(controller);\n\n    router!(\n         index:  get    \"/\"    =&gt; move |r: &amp;mut Request| handler.index(r),\n         show:   get    \"/:id\" =&gt; move |r: &amp;mut Request| handler.show(r),\n    )\n}\n</code></pre>\n\n<p>I get this error and I can't implement the <code>Copy</code> trait for my <code>UserController</code> because the <a href=\"https://docs.rs/mongodb/0.2.3/mongodb/type.Client.html\" rel=\"nofollow noreferrer\"><code>mongodb::Client</code></a> doesn't implement it (it's an <code>Arc</code>).</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: capture of moved value: `handler`\n      --&gt; src/api/users/mod.rs:17:57\n       |\n    16 |         index:  get    \"/\"    =&gt; move |r: &amp;mut Request| handler.index(r),\n       |                                  ---------------------- value moved (into closure) here\n    17 |         show:   get    \"/:id\" =&gt; move |r: &amp;mut Request| handler.show(r),\n       |                                                         ^^^^^^^ value captured here after move\n       |\n       = note: move occurs because `handler` has type `api::users::handlers::UserHandler`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>My <code>UserHandler</code> just has a <code>UserController</code> and the <code>UserController</code>, a <code>mongodb::Client</code>.</p>\n"}, {"tags": ["generics", "types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 975, "user_id": 7687388, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Xhm3T.png?s=128&g=1", "display_name": "CodeSandwich", "link": "https://stackoverflow.com/users/7687388/codesandwich"}, "is_accepted": false, "score": 0, "last_activity_date": 1489107270, "creation_date": 1489107270, "answer_id": 42708249, "question_id": 42706743, "link": "https://stackoverflow.com/questions/42706743/how-to-create-a-generic-array-of-flexible-but-static-size-and-different-type/42708249#42708249", "title": "How to create a generic array of flexible but static size and different type", "body": "<p>Currently there is no built-in solution for your problem, like you said, no generic integers yet.</p>\n\n<p>You could tackle the problem using a vector with manually set size to avoid resizing and memory waste. But it still means heap allocations.</p>\n\n<p>There is also a third-party solution: <a href=\"https://github.com/fizyk20/generic-array\" rel=\"nofollow noreferrer\">https://github.com/fizyk20/generic-array</a></p>\n"}], "owner": {"reputation": 101, "user_id": 7686392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e4cc5575c302df893b9f7227aff838be?s=128&d=identicon&r=PG&f=1", "display_name": "redroid", "link": "https://stackoverflow.com/users/7686392/redroid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 97, "favorite_count": 0, "closed_date": 1489112943, "answer_count": 1, "score": 0, "last_activity_date": 1489107270, "creation_date": 1489098545, "question_id": 42706743, "link": "https://stackoverflow.com/questions/42706743/how-to-create-a-generic-array-of-flexible-but-static-size-and-different-type", "closed_reason": "Duplicate", "title": "How to create a generic array of flexible but static size and different type", "body": "<p>I have a structure involving a statically sized array of generic data. In my specific application, it works fine, because I know what size is suitable for the context. However, I would like it to be more generic so I can move it into a separate crate that other people could use. </p>\n\n<p>Specifically, my structure has (in the generic case) a type parameter <code>T</code> and a field of type <code>[(AtomicUsize, T); N]</code> for some fixed-at-compile-time N. The problem is that I'd prefer to not have to write a specific value of N into the class definition - the client code that actually uses the type should be able to define it as they want. I know that the language doesn't directly support generic integers, but is there any sensible/ergonomic way of doing this, or do I just have to pick a number?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1489073701, "creation_date": 1489073701, "answer_id": 42699379, "question_id": 42699222, "link": "https://stackoverflow.com/questions/42699222/how-can-i-update-a-struct-setting-most-but-not-all-of-the-fields-to-a-default-v/42699379#42699379", "title": "How can I update a struct, setting most but not all of the fields to a default value?", "body": "<p>I'd replace the entire <code>self</code> with the default value, then preserve the interesting fields from the previous value:</p>\n\n<pre><code>use std::mem;\n\nimpl Foo {\n    fn f1(&amp;mut self) {\n        let old = mem::replace(self, Self::default());\n        self.f10 = old.f10;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 42699379, "answer_count": 1, "score": 3, "last_activity_date": 1489073818, "creation_date": 1489073268, "last_edit_date": 1489073818, "question_id": 42699222, "link": "https://stackoverflow.com/questions/42699222/how-can-i-update-a-struct-setting-most-but-not-all-of-the-fields-to-a-default-v", "title": "How can I update a struct, setting most but not all of the fields to a default value?", "body": "<p>I know about the great Rust feature:</p>\n\n<pre><code>Foo {\n    fieldX: someValue,\n    ..Self::default()\n}\n</code></pre>\n\n<p>I want to use this in a method with <code>&amp;mut self</code>, not touching fields <code>f10</code> and <code>f11</code> and setting the others to default:</p>\n\n<pre><code>#[derive(Default)]\nstruct Foo {\n    f1: u32,\n    //...\n    f10: Vec&lt;u32&gt;,\n    f11: Vec&lt;u32&gt;,\n}\n\nimpl Foo {\n    fn f1(&amp;mut self) {\n        let new_me = Foo {\n            f10: self.f10,\n            ..Self::default()\n        };\n        *self = new_me;\n    }\n}\n</code></pre>\n\n<p>but the compiler says:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:12:18\n   |\n12 |             f10: self.f10,\n   |                  ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>How can I:</p>\n\n<ol>\n<li>Leave signature of <code>f1</code> as is: <code>&amp;mut self</code></li>\n<li>Not copy any <code>Vec&lt;&gt;</code>, only moving</li>\n<li><p>Not write boring code, like </p>\n\n<pre><code>self.f1 = 0;\nself.f2 = 0;\nself.f3 = None;\n// ...\n</code></pre></li>\n</ol>\n"}, {"tags": ["random", "rust", "libc"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1489045876, "post_id": 42688721, "comment_id": 72501946, "body": "Just to make sure: you are compiling both in Release mode, right? (Because when I do use Release mode, in your example, XorShiftRng is completely optimized away... =&gt; <a href=\"http://play.integer32.com/?gist=29f3a3735ee52ab10790f96e4b248b6b&amp;version=nightly\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>)"}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489046343, "post_id": 42688721, "comment_id": 72502181, "body": "uh, no, I didn&#39;t! In release mode the <code>XorShiftRng</code> version with <code>rng.gen()</code> is 760&#39;000x as fast as <code>random()</code>. So my case is solved, but I don&#39;t understand why the release version is so much faster, and why XorShiftRng is now so much faster than <code>random()</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1489046804, "post_id": 42688721, "comment_id": 72502441, "body": "Because your benchmark is flawed (it&#39;s hard to benchmkar): everything is hard-coded, so the compiler optimizes the benchmark to <code>let start = time(); let end = time(); println!(&quot;...&quot;, start.to(end));</code>. This only happens for XorShiftRng because its implementation is available to the compiler, whereas the libc::random is dynamically loaded at run-time. My suggestion would be to use a realistic workload to evaluate them."}], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1489052096, "post_id": 42690839, "comment_id": 72505696, "body": "what do you mean with &quot;so the compiler can&#39;t optimize it away&quot;?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1489053211, "post_id": 42690839, "comment_id": 72506476, "body": "If the compiler detects that you are not using a variable, it won&#39;t bother computing its value."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1489060981, "post_id": 42690839, "comment_id": 72511828, "body": "@hansaplast Rust&#39;s optimizing compiler will completely omit a loop that has no side effects. I&#39;ve now updated the answer to explain that in more details."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1489074604, "post_id": 42690839, "comment_id": 72521296, "body": "one last question: why is the release build so much faster than the debug build? What is different in the generated executable compared to when building without <code>--release</code>?"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 2, "creation_date": 1489075342, "post_id": 42690839, "comment_id": 72521852, "body": "@hansaplast Building for &quot;release&quot; tells <code>rustc</code> (and by extension to the underlying LLVM backend) to optimize for run-time efficiency. Optimizations can include smart register allocation, function inlining, loop unrolling, and many many others. The same goes for C, BTW, except that <code>libc</code> is <i>already</i> compiled with optimizations included, by your distribution. If you tried to compile libc&#39;s <code>random</code> without optimizations turned on, you would likely also see abysmal performance."}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": true, "score": 14, "last_activity_date": 1489071437, "last_edit_date": 1489071437, "creation_date": 1489049958, "answer_id": 42690839, "question_id": 42688721, "link": "https://stackoverflow.com/questions/42688721/fastest-way-to-generate-random-numbers/42690839#42690839", "title": "Fastest way to generate random numbers", "body": "<p>Be sure to compile the code you are measuring in release mode, otherwise your benchmark is not representative of Rust's performance.</p>\n\n<p>In order to obtain meaningful numbers, you must also modify the benchmark to do something with the generated numbers, e.g. collect them into a vector<sup>1</sup>. Failing to do so can make the compiler optimize the whole loop away because it has no side effects. This is what happened in your second attempt that led you to conclude that <code>XorShiftRng</code> is 760,000 thousand times faster than <code>libc::random</code>.</p>\n\n<p>With the <a href=\"http://play.integer32.com/?gist=8a307a5bdf65d56e27fda6742c46f347&amp;version=nightly\" rel=\"noreferrer\">changed benchmark</a> run in release mode, <code>XorShiftRng</code> ends up approximately 2x faster than <code>libc::random</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>PT0.101378490S seconds for libc::random\nPT0.050827393S seconds for XorShiftRng\n</code></pre>\n\n<p><sup>1</sup>\nThe compiler could also be smart enough to realize that the vector is also unused and optimize it away as well, but current <code>rustc</code> does not do so, and storing elements into a vector is enough. A simple and future-proof way to ensure that the generation is not optimized away is to sum up the numbers and write out the result.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2287, "favorite_count": 0, "accepted_answer_id": 42690839, "answer_count": 1, "score": 6, "last_activity_date": 1489071437, "creation_date": 1489042793, "question_id": 42688721, "link": "https://stackoverflow.com/questions/42688721/fastest-way-to-generate-random-numbers", "title": "Fastest way to generate random numbers", "body": "<p>libc has <a href=\"http://man7.org/linux/man-pages/man3/random.3.html\" rel=\"noreferrer\"><code>random</code></a> which</p>\n\n<blockquote>\n  <p>uses a nonlinear additive feedback random number generator employing a default table of size 31 long integers to return successive pseudo-random numbers</p>\n</blockquote>\n\n<p>I'm looking for a random function written in Rust with the same speed. It doesn't need to be crypto-safe, pseudo-random is good enough.</p>\n\n<p>Looking through the <a href=\"https://doc.rust-lang.org/rand/rand/index.html\" rel=\"noreferrer\"><code>rand crate</code></a> it seems that <a href=\"https://doc.rust-lang.org/rand/rand/struct.XorShiftRng.html\" rel=\"noreferrer\"><code>XorShiftRng</code></a> is the closest fit to this need: </p>\n\n<blockquote>\n  <p>The Xorshift algorithm is not suitable for cryptographic purposes but is very fast</p>\n</blockquote>\n\n<p>When I use it like this:</p>\n\n<pre><code>extern crate time;\nuse rand::Rng;\n\nlet mut rng = rand::XorShiftRng::new_unseeded();\nrng.next_u64();\n</code></pre>\n\n<p>it is about 33% slower than libc's random. (<a href=\"http://play.integer32.com/?gist=de0c94e53cdbb04e9dd673ae90a82d3d&amp;version=nightly\" rel=\"noreferrer\">Sample code generating 8'000'000 random numbers</a>).</p>\n\n<p>In the end, I'll need <code>i64</code> random numbers, so when I run <code>rng.gen()</code> this is already 100% slower than libc's random. When casting with <code>rng.next_u64() as i64</code>, then is is 60% slower.</p>\n\n<p>Is there any way to achieve the same speed in rust without using any <code>unsafe</code> code?</p>\n"}, {"tags": ["intellij-idea", "rust"], "comments": [{"owner": {"reputation": 348241, "user_id": 104891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ff652685122f4500dd4f3c21fb32da2?s=128&d=identicon&r=PG", "display_name": "CrazyCoder", "link": "https://stackoverflow.com/users/104891/crazycoder"}, "edited": false, "score": 0, "creation_date": 1489022386, "post_id": 42684786, "comment_id": 72493827, "body": "Please try File | Invalidate Caches | Invalidate and Restart, if it doesn&#39;t help, <a href=\"https://github.com/intellij-rust/intellij-rust/issues\" rel=\"nofollow noreferrer\">file a bug</a>."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1489047108, "post_id": 42685502, "comment_id": 72502599, "body": "As much as possible, answers should be <b>definitive</b>. &quot;Have you tried ...?&quot; is a comment, not an answer."}], "tags": [], "owner": {"reputation": 1, "user_id": 4761785, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-FBrwfFVcf7k/AAAAAAAAAAI/AAAAAAAABSM/-bN8vY1xcLk/photo.jpg?sz=128", "display_name": "nelson correa v. j&#250;nior", "link": "https://stackoverflow.com/users/4761785/nelson-correa-v-j%c3%banior"}, "is_accepted": false, "score": -1, "last_activity_date": 1489026056, "creation_date": 1489026056, "answer_id": 42685502, "question_id": 42684786, "link": "https://stackoverflow.com/questions/42684786/how-do-i-get-the-rust-intellij-idea-plugin-to-show-autocomplete-suggestions/42685502#42685502", "title": "How do I get the Rust IntelliJ IDEA plugin to show autocomplete suggestions?", "body": "<p>I use IntelliJ Community Edition on MacOS and auto complete works fine. Try install racer crate and restart IDE:</p>\n\n<p><code>cargo install racer</code></p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1489047064, "post_id": 42688824, "comment_id": 72502575, "body": "Note: if they support the <a href=\"http://doc.crates.io/manifest.html#the-workspace--field-optional\" rel=\"nofollow noreferrer\">workspace</a>, then you have a single project. Just put a <code>Cargo.toml</code> with a <code>[workspace]</code> section at the root."}], "tags": [], "owner": {"reputation": 14308, "user_id": 2106207, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/960430ab7aba908bb9aa62d530618a75?s=128&d=identicon&r=PG", "display_name": "Nan Xiao", "link": "https://stackoverflow.com/users/2106207/nan-xiao"}, "is_accepted": true, "score": 3, "last_activity_date": 1489043201, "last_edit_date": 1592644375, "creation_date": 1489043201, "answer_id": 42688824, "question_id": 42684786, "link": "https://stackoverflow.com/questions/42684786/how-do-i-get-the-rust-intellij-idea-plugin-to-show-autocomplete-suggestions/42688824#42688824", "title": "How do I get the Rust IntelliJ IDEA plugin to show autocomplete suggestions?", "body": "<p>mkaput gives the right <a href=\"https://github.com/intellij-rust/intellij-rust/issues/1061#issuecomment-285267909\" rel=\"nofollow noreferrer\">answer</a>:</p>\n<blockquote>\n<p>You have created a project in a directory which is not a Cargo project (you have two separate ones inside instead). Our requirement for almost any feature is that IntelliJ project root (~/rust in your situation) is also Cargo project/workspace root (it has Cargo.toml). Thanks to this we can firmly invoke cargo to get all information we need.</p>\n<p>tl;dr make separate projects inside each: hello_cargo and guessing_game :-)</p>\n</blockquote>\n"}], "owner": {"reputation": 14308, "user_id": 2106207, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/960430ab7aba908bb9aa62d530618a75?s=128&d=identicon&r=PG", "display_name": "Nan Xiao", "link": "https://stackoverflow.com/users/2106207/nan-xiao"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1705, "favorite_count": 0, "accepted_answer_id": 42688824, "answer_count": 2, "score": 2, "last_activity_date": 1489093261, "creation_date": 1489021300, "last_edit_date": 1489093261, "question_id": 42684786, "link": "https://stackoverflow.com/questions/42684786/how-do-i-get-the-rust-intellij-idea-plugin-to-show-autocomplete-suggestions", "title": "How do I get the Rust IntelliJ IDEA plugin to show autocomplete suggestions?", "body": "<p>I use IntelliJ IDEA to develop in Rust, but after installing the <a href=\"https://intellij-rust.github.io/\" rel=\"nofollow noreferrer\">Rust plugin</a>, the code auto-complete function doesn't work: </p>\n\n<p><a href=\"https://i.stack.imgur.com/ndvvH.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ndvvH.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>I hope IntelliJ IDEA would give me a hint for <code>String</code>, but I still need me to write it myself. Did I miss something?</p>\n"}]