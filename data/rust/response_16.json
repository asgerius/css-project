[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5917, "user_id": 178910, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/52d5a92e855d52b66765f059feb975f1?s=128&d=identicon&r=PG", "display_name": "peter", "link": "https://stackoverflow.com/users/178910/peter"}, "edited": false, "score": 0, "creation_date": 1430327714, "post_id": 29948322, "comment_id": 48021503, "body": "Mmmkay. I thought there was more to it, since <code>Box&lt;SomeTrait&gt;</code> doesn&#39;t really specify an actual &quot;type&quot; like <code>Box&lt;SomeStruct&gt;</code> would or even <code>Box&lt;SomeGenericStruct&lt;SomeType&gt;&gt;</code>. Hoping there was some magic there for boxing generic traits. But I can see how the parameterizing of the trait changes things."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1430321614, "creation_date": 1430321614, "answer_id": 29948322, "question_id": 29947744, "link": "https://stackoverflow.com/questions/29947744/how-to-box-a-trait-that-has-generic-type-parameters/29948322#29948322", "title": "How to box a trait that has generic type parameters?", "body": "<p>You need to specify what you want the object to be able to be compared equal to:</p>\n\n<pre><code>fn foo(value: Box&lt;PartialEq&lt;u8&gt;&gt;) -&gt; bool {\n    *value == 42\n}\n\nfn bar(value: Box&lt;PartialEq&lt;&amp;str&gt;&gt;) -&gt; bool {\n    *value == \"the answer\"\n}\n</code></pre>\n"}], "owner": {"reputation": 5917, "user_id": 178910, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/52d5a92e855d52b66765f059feb975f1?s=128&d=identicon&r=PG", "display_name": "peter", "link": "https://stackoverflow.com/users/178910/peter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1018, "favorite_count": 0, "accepted_answer_id": 29948322, "answer_count": 1, "score": 2, "last_activity_date": 1430322297, "creation_date": 1430320178, "last_edit_date": 1430322297, "question_id": 29947744, "link": "https://stackoverflow.com/questions/29947744/how-to-box-a-trait-that-has-generic-type-parameters", "title": "How to box a trait that has generic type parameters?", "body": "<p>I am generally able to use a trait as the type parameter for something like Box&lt;>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait CtxVal {}\ntype CtxNodes = HashMap&lt;String, Box&lt;CtxVal&gt;&gt;;\n</code></pre>\n\n<p>But when the trait has it's own generic type parameters, like <a href=\"http://doc.rust-lang.org/nightly/std/cmp/trait.PartialEq.html\" rel=\"nofollow\">PartialEq</a>, I'm stuck.</p>\n\n<pre><code>type CtxNodes = HashMap&lt;String, Box&lt;PartialEq&gt;&gt;;\n</code></pre>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>main.rs:6:37: 6:46 error: the type parameter `Rhs` must be explicitly specified in an \n      object type because its default value `Self` references the type `Self`                             \nmain.rs:6 type CtxNodes = HashMap&lt;String, Box&lt;PartialEq&gt;&gt;;                                                                                                                                \n                                              ^~~~~~~~~ \n</code></pre>\n\n<p>If I were to provide the type for the <code>PartialEq</code>, what would that even be? </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>Box&lt;PartialEq&lt;???&gt;&gt;\n</code></pre>\n"}, {"tags": ["compiler-errors", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 2, "last_activity_date": 1430312478, "creation_date": 1430312478, "answer_id": 29944564, "question_id": 29944364, "link": "https://stackoverflow.com/questions/29944364/misleading-error-passing-osstring-to-a-funct-tostring-where-does-display-tra/29944564#29944564", "title": "Misleading error passing OsString to a func&lt;T: ToString&gt;, where does Display trait comes from?", "body": "<p>The <a href=\"http://doc.rust-lang.org/nightly/std/string/trait.ToString.html\" rel=\"nofollow\">trait <code>ToString</code></a> is <a href=\"https://github.com/rust-lang/rust/blob/551a74dddd84cf01440ee84148ebd18bc68bd7c8/src/libcollections/string.rs#L985\" rel=\"nofollow\">implemented by all types that implement <code>Display</code></a> (and, in fact, only those types):</p>\n\n<pre><code>impl&lt;T: fmt::Display + ?Sized&gt; ToString for T {\n    ...\n</code></pre>\n\n<p>So, when the compiler looks for an implementation of <code>ToString</code>, it ends up trying to look for one for <code>Display</code> and that's where the trait search fails for <code>OsString</code> (<code>Display</code> doesn't have the same sort of \"blanket impl\").</p>\n"}], "owner": {"reputation": 1462, "user_id": 317518, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f629ed092208f3ce38babe097091e466?s=128&d=identicon&r=PG", "display_name": "naufraghi", "link": "https://stackoverflow.com/users/317518/naufraghi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 275, "favorite_count": 0, "accepted_answer_id": 29944564, "answer_count": 1, "score": 0, "last_activity_date": 1430318370, "creation_date": 1430312038, "last_edit_date": 1430318370, "question_id": 29944364, "link": "https://stackoverflow.com/questions/29944364/misleading-error-passing-osstring-to-a-funct-tostring-where-does-display-tra", "title": "Misleading error passing OsString to a func&lt;T: ToString&gt;, where does Display trait comes from?", "body": "<p>Why does this function call:</p>\n\n<pre><code>use std::string::ToString;\nuse std::ffi::OsString;\n\nfn len&lt;T: ToString&gt;(v: &amp;T) -&gt; usize {\n    v.to_string().len()\n}\n\nfn main() {\n    let text = OsString::from(\"Hello, world!\");\n    let tlen = len(&amp;text);\n    println!(\"len('{:?}') = {}\", &amp;text, tlen);\n}\n</code></pre>\n\n<p>raise this compilation error:</p>\n\n<pre><code>&lt;anon&gt;:10:16: 10:19 error: the trait `core::fmt::Display` is not implemented for the type `std::ffi::os_str::OsString` [E0277]\n&lt;anon&gt;:10     let tlen = len(&amp;text);\n                         ^~~\n&lt;anon&gt;:10:16: 10:19 note: `std::ffi::os_str::OsString` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\n&lt;anon&gt;:10     let tlen = len(&amp;text);\n                         ^~~\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>I know that the code is broken as <code>OsString</code> does not implement <code>ToString</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 900, "user_id": 602721, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be8ca2dd9f7a396f2f1e0cadcd378aa3?s=128&d=identicon&r=PG", "display_name": "tomsgd", "link": "https://stackoverflow.com/users/602721/tomsgd"}, "edited": false, "score": 0, "creation_date": 1430309214, "post_id": 29943027, "comment_id": 48007119, "body": "Thank you. I understand the need to indicate that the output type is also T, but I obviously haven&#39;t fully grokked ownership yet. More study required..."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1430308610, "creation_date": 1430308610, "answer_id": 29943027, "question_id": 29942840, "link": "https://stackoverflow.com/questions/29942840/mismatched-types-when-implementing-a-trait/29943027#29943027", "title": "Mismatched types when implementing a trait", "body": "<p>Using <code>T: Add</code> as a bound says that one can write <code>T + T</code>, but it doesn't place any restriction on the type that will result from that, in particular, it may not be <code>T</code>. You're relying on it being <code>T</code> to be able to return <code>Matrix&lt;T&gt;</code>.</p>\n\n<p>One approach would be to require that <code>T: Add&lt;Output = T&gt;</code>, so that <code>T + T</code> returns a <code>T</code>:</p>\n\n<pre><code>impl&lt;T: Add&lt;Output = T&gt;&gt; Add for Matrix&lt;T&gt; {\n    ...\n}\n</code></pre>\n\n<p>Another approach would be to instead work with whatever output <code>T</code> wants to give: i.e. your addition would return <code>Matrix&lt;T::Output&gt;</code>:</p>\n\n<pre><code>impl&lt;T: Add&gt; Add for Matrix&lt;T&gt;\n{\n    type Output = Matrix&lt;T::Output&gt;;\n\n    fn add(self, _rhs: Matrix&lt;T&gt;) -&gt; Matrix&lt;T::Output&gt;\n    {\n        assert!(self.rows == _rhs.rows &amp;&amp; self.cols == _rhs.cols,\n                \"attempting to add matrices of different sizes\");\n\n        let mut res = Matrix {\n            rows: self.rows,\n            cols: self.cols,\n            data : Vec::with_capacity(self.rows * self.cols),\n        };\n\n        for i in 0..self.rows*self.cols{\n            res.data.push(self.data[i] + _rhs.data[i]);\n        }\n        res\n   }\n}\n</code></pre>\n\n<p>However, both of these meet a problem:</p>\n\n<pre><code>&lt;anon&gt;:23:27: 23:39 error: cannot move out of indexed content\n&lt;anon&gt;:23             res.data.push(self.data[i] + _rhs.data[i]);\n                                    ^~~~~~~~~~~~\n&lt;anon&gt;:23:42: 23:54 error: cannot move out of indexed content\n&lt;anon&gt;:23             res.data.push(self.data[i] + _rhs.data[i]);\n                                                   ^~~~~~~~~~~~\n</code></pre>\n\n<p><code>Add</code>/the <code>+</code> operator takes ownership of its arguments, and one cannot move ownership out of a vector with direct indexing (in general, the compiler can't tell that one won't try to access a moved-out index again, later, which would be a safety problem). Fortunately, there's a solution: vectors support a moving-out iterator, and one can walk over <code>self</code> and <code>_rhs</code> moving out in lock-step:</p>\n\n<pre><code>for (a, b) in self.data.into_iter().zip(_rhs.data.into_iter()) {\n    res.data.push(a + b)\n}\n</code></pre>\n\n<p>The <code>a</code> and <code>b</code> variables are both of type <code>T</code>, i.e. ownership has moved.</p>\n\n<hr>\n\n<p>Minor note, one can actually \"iteratorise\" the code even more, writing:</p>\n\n<pre><code>fn add(self, _rhs: Matrix&lt;T&gt;) -&gt; Matrix&lt;T::Output&gt;\n{\n    assert!(self.rows == _rhs.rows &amp;&amp; self.cols == _rhs.cols,\n            \"attempting to add matrices of different sizes\");\n\n    let data = self.data.into_iter()\n         .zip(_rhs.data.into_iter())\n        .map(|(a,b)| a + b)\n        .collect();\n    Matrix {\n        rows: self.rows,\n        cols: self.cols,\n        data: data\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 900, "user_id": 602721, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be8ca2dd9f7a396f2f1e0cadcd378aa3?s=128&d=identicon&r=PG", "display_name": "tomsgd", "link": "https://stackoverflow.com/users/602721/tomsgd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 351, "favorite_count": 0, "accepted_answer_id": 29943027, "answer_count": 1, "score": 1, "last_activity_date": 1430318150, "creation_date": 1430308109, "last_edit_date": 1430318150, "question_id": 29942840, "link": "https://stackoverflow.com/questions/29942840/mismatched-types-when-implementing-a-trait", "title": "Mismatched types when implementing a trait", "body": "<p>To learn Rust, I'm building my own Matrix class. My implementation of the Add trait is as follows:</p>\n\n<pre><code>impl&lt;T: Add&gt; Add for Matrix&lt;T&gt;\n{\n    type Output = Matrix&lt;T&gt;;\n\n    fn add(self, _rhs: Matrix&lt;T&gt;) -&gt; Matrix&lt;T&gt;\n    {\n        assert!(self.rows == _rhs.rows &amp;&amp; self.cols == _rhs.cols,\n                \"attempting to add matrices of different sizes\");\n\n        let mut res: Matrix&lt;T&gt; = Matrix::&lt;T&gt;{\n            rows: self.rows,\n            cols: self.cols,\n            data : Vec::&lt;T&gt;::with_capacity(self.rows * self.cols),\n        };\n\n        for i in 0..self.rows*self.cols{\n            res.data.push(self.data[i] + _rhs.data[i]);\n        }\n        res\n   }\n}\n</code></pre>\n\n<p>but i get the following error</p>\n\n<pre><code>       Compiling matrix v0.1.0 (file://~/soft/rust/projects/matrix)\nsrc/lib.rs:35:27: 35:54 error: mismatched types:\n expected `T`,\n    found `&lt;T as core::ops::Add&gt;::Output`\n(expected type parameter,\n    found associated type) [E0308]\nsrc/lib.rs:35             res.data.push(self.data[i] + _rhs.data[i]);\n                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Going by the error report, I guess that I need to indicate somewhere else that T implements the Add trait but anywhere I try to do this I either get the same error or a parsing error.</p>\n\n<p>My definition of Matrix by the way is</p>\n\n<pre><code>pub struct Matrix&lt;T&gt; {\n    pub rows: usize,\n    pub cols: usize,\n    pub data: Vec&lt;T&gt;,\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 208003, "user_id": 841108, "user_type": "registered", "accept_rate": 61, "profile_image": "https://i.stack.imgur.com/Fm52y.png?s=128&g=1", "display_name": "Basile Starynkevitch", "link": "https://stackoverflow.com/users/841108/basile-starynkevitch"}, "edited": false, "score": 0, "creation_date": 1430318492, "post_id": 29937697, "comment_id": 48014996, "body": "I guess it is operating system specific."}], "answers": [{"comments": [{"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1430488713, "post_id": 29980945, "comment_id": 48095724, "body": "Thanks for pointing this out ! I would still love to be able to set this value for the main-thread at compile time - maybe one day this is supported by rustc."}], "tags": [], "owner": {"reputation": 275, "user_id": 4847649, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4b0f4de7a5238491547d1e1fa9f031a?s=128&d=identicon&r=PG", "display_name": "planetbeing", "link": "https://stackoverflow.com/users/4847649/planetbeing"}, "is_accepted": true, "score": 11, "last_activity_date": 1430448288, "creation_date": 1430448288, "answer_id": 29980945, "question_id": 29937697, "link": "https://stackoverflow.com/questions/29937697/how-to-set-the-thread-stack-size-during-compile-time/29980945#29980945", "title": "How to set the thread stack size during compile time?", "body": "<p>There's no way to set the stack size of the main thread in Rust. In fact, an assumption about the size of the main thread's stack is made at the source code level in the Rust runtime library (<a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/rt/mod.rs#L85\" rel=\"noreferrer\">https://github.com/rust-lang/rust/blob/master/src/libstd/rt/mod.rs#L85</a>).</p>\n\n<p>The environment variable <code>RUST_MIN_STACK</code> influences the stack size of threads created within the program that's not the main thread, but you could just as easily specify that value within your source code at runtime.</p>\n\n<p>The most straightforward way to solve your problem might be to run the clap in a separate thread you create, so that you can control its stack size.</p>\n\n<p>Take this code for example:</p>\n\n<pre><code>extern crate clap;\nuse clap::App;\nuse std::thread;\n\nfn main() {\n    let child = thread::Builder::new().stack_size(32 * 1024 * 1024).spawn(move || {\n        return App::new(\"example\")\n            .version(\"v1.0-beta\")\n            .args_from_usage(\"&lt;INPUT&gt; 'Sets the input file to use'\")\n            .get_matches();\n    }).unwrap();\n\n    let matches = child.join().unwrap();\n\n    println!(\"INPUT is: {}\", matches.value_of(\"INPUT\").unwrap());\n}\n</code></pre>\n\n<p>clap appears to be able to terminate the application correctly from within the child thread so your code should work with little modification.</p>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3400, "favorite_count": 2, "accepted_answer_id": 29980945, "answer_count": 1, "score": 11, "last_activity_date": 1430448288, "creation_date": 1430294422, "last_edit_date": 1430318200, "question_id": 29937697, "link": "https://stackoverflow.com/questions/29937697/how-to-set-the-thread-stack-size-during-compile-time", "title": "How to set the thread stack size during compile time?", "body": "<p>When attempting to run a program that builds a large <a href=\"http://kbknapp.github.io/clap-rs/clap/struct.App.html#\"><code>clap::App</code></a> (<a href=\"https://github.com/Byron/google-apis-rs/blob/clap/gen/dfareporting2d1-cli/src/main.rs\">find the source here</a>), I get a stackoverflow: <code>thread '&lt;main&gt;' has overflowed its stack</code>.</p>\n\n<p>So far I was unable to figure out how to instruct <code>rustc</code> to increase the stacksize for a brute-force workaround. <code>RUST_MIN_STACK</code> seems to apply only to runtime, and even there it didn't seem to have any effect.</p>\n\n<p>As the code is generated, what I would probably have to do is to move the <code>SubCommand</code> creation to the runtime, which is what I will try next.</p>\n\n<p><strong>However, do you see a way to fix this differently ?</strong></p>\n\n<p><em>It seems quite important to figure this one out as the builder patterns appears to be prone to this issue, if the built structure is just large and nested enough.</em></p>\n\n<h1>How to reproduce</h1>\n\n<pre><code>git clone -b clap https://github.com/Byron/google-apis-rs\ncd google-apis-rs\ngit checkout 9a8ae4b\nmake dfareporting2d1-cli-cargo ARGS=run\n</code></pre>\n\n<p>Please note that you will need my fork of <a href=\"https://github.com/Byron/rust-quasi\">quasi</a> and set an override locally to allow building with the latest compiler.</p>\n\n<h1>Meta</h1>\n\n<pre><code>\u279c  google-apis-rs git:(clap) rustc --version\nrustc 1.1.0-nightly (97d4e76c2 2015-04-27) (built 2015-04-28)\n</code></pre>\n"}, {"tags": ["enums", "rust"], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 7, "last_activity_date": 1430290469, "creation_date": 1430290469, "answer_id": 29936352, "question_id": 29935878, "link": "https://stackoverflow.com/questions/29935878/can-struct-like-enums-be-used-as-types/29936352#29936352", "title": "Can struct-like enums be used as types?", "body": "<p>In this first situation, </p>\n\n<pre><code>enum Foo {\n    Bar { i: i32 },\n    Baz,\n}\n</code></pre>\n\n<p>as the compiler tells you <code>Bar</code> is not a type but a value, and cannot be used as a type (<code>error: found value name used as a type</code>).</p>\n\n<p>You second construction is what is generally used, for example in the standard library with <a href=\"http://doc.rust-lang.org/std/net/enum.IpAddr.html\"><code>std::net::IpAddr</code></a> and <a href=\"http://doc.rust-lang.org/std/net/enum.SocketAddr.html\"><code>std::net::SocketAddr</code></a>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 7, "last_activity_date": 1430291089, "creation_date": 1430291089, "answer_id": 29936541, "question_id": 29935878, "link": "https://stackoverflow.com/questions/29935878/can-struct-like-enums-be-used-as-types/29936541#29936541", "title": "Can struct-like enums be used as types?", "body": "<p>No, an enum variant is not a type in its own right and cannot be used as a type.</p>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1895, "favorite_count": 1, "accepted_answer_id": 29936352, "answer_count": 2, "score": 4, "last_activity_date": 1430291089, "creation_date": 1430288780, "question_id": 29935878, "link": "https://stackoverflow.com/questions/29935878/can-struct-like-enums-be-used-as-types", "title": "Can struct-like enums be used as types?", "body": "<p>Consider the following (illegal) example:</p>\n\n<pre><code>enum Foo {\n    Bar { i: i32 },\n    Baz,\n}\n\nstruct MyStruct {\n    field: Foo::Bar,\n}\n</code></pre>\n\n<p><code>Foo::Bar</code> is a <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0418-struct-variants.md\" rel=\"nofollow\">struct-like variant</a>. I've found them to be quite useful. However, I have an instance where I need to store an instance of the struct inside another struct, like the above example of <code>MyStruct</code>. Changing <code>MyStruct::field</code> to be a <code>Foo</code> would be invalid, as it doesn't make sense for the field to be a <code>Foo::Baz</code>. It's just meant to be an instance of <code>Foo::Bar</code>.</p>\n\n<p><code>rustc</code> tells me the above code is invalid:</p>\n\n<pre><code>error: found value name used as a type: DefVariant(DefId { krate: 0u32, node: 4u32 }, DefId { krate: 0u32, node: 5u32 }, true)\n</code></pre>\n\n<p>Am I just doing something wrong, or is this not possible? If it's not possible, are there any plans on doing it?</p>\n\n<p>I know I could work around it like this, but I consider it an inferior option and it's one I'd like to avoid if possible:</p>\n\n<pre><code>struct Bar {\n    i: i32,\n}\n\nenum Foo {\n    Bar(Bar),\n    Baz,\n}\n\nstruct MyStruct {\n    field: Bar,\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1430288822, "creation_date": 1430288822, "answer_id": 29935886, "question_id": 29935830, "link": "https://stackoverflow.com/questions/29935830/how-do-i-destructuring-match-syntaxptrp/29935886#29935886", "title": "How do I destructuring-match syntax::ptr::P?", "body": "<p>There's no way to pattern match through a <code>P</code>: <a href=\"https://github.com/rust-lang/rust/blob/d4cedea80a70d61931e4442dde90bd136a60deeb/src/libsyntax/ptr.rs#L48\" rel=\"nofollow\">the field is private</a> and we don't have generalised pointer pattern matching (yet).</p>\n\n<p>The only ways to get at the contained data are <code>Deref</code> (for a <code>&amp;</code>), and the methods <code>and_then</code> and <code>map</code> (for by-value).</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 1, "accepted_answer_id": 29935886, "answer_count": 1, "score": 3, "last_activity_date": 1430318260, "creation_date": 1430288600, "last_edit_date": 1430318260, "question_id": 29935830, "link": "https://stackoverflow.com/questions/29935830/how-do-i-destructuring-match-syntaxptrp", "title": "How do I destructuring-match syntax::ptr::P?", "body": "<p>I have a function which tries to match an <code>syntax::ast::ExprBinary(syntax::ast::BinOp, syntax::ptr::P&lt;ast::Expr&gt;, syntax::ptr::P&lt;syntax::ast::Expr&gt;)</code>, but I cannot find the right syntax to match the <code>P</code> so I get the contained expression out of it. I see that I can use <code>Deref</code> to get at the <code>Expr</code>, but this is cumbersome.</p>\n\n<p>Is there a way to get rid of the <code>P</code> within the <code>match</code> (or <code>if let</code>) clause?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430274877, "post_id": 29933265, "comment_id": 47988858, "body": "I thought about going the <code>?Sized</code> route \u2014 do you think that would be better than reborrowing?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430277126, "post_id": 29933265, "comment_id": 47989418, "body": "If you don&#39;t wish to transfer ownership then taking <code>&amp;mut</code> probably makes more sense."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1430406494, "post_id": 29933265, "comment_id": 48062251, "body": "What about just using .by_ref() when you call it to reborrow? Using by-value Write is more convenient with a number of writers, for example an adapted writer."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1430274309, "creation_date": 1430274309, "answer_id": 29933265, "question_id": 29933157, "link": "https://stackoverflow.com/questions/29933157/can-i-pass-the-same-mutable-trait-object-in-multiple-iterations-of-a-loop-withou/29933265#29933265", "title": "Can I pass the same mutable trait object in multiple iterations of a loop without adding indirection?", "body": "<p>You'll need to explicitly reborrow:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>for _ in 0..10 {\n    write_it(&amp;mut *t);\n}\n</code></pre>\n\n<p>One often sees this happen implicitly, but it is not in this case because <code>write_it</code> takes a raw generic, <code>W</code>, and the compiler only implicitly reborrows a <code>&amp;mut</code> when used in a place that is expecting a <code>&amp;mut</code>. E.g. if it was</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn write_it&lt;W: ?Sized + Write&gt;(w: &amp;mut W) { ... }\n</code></pre>\n\n<p>your code works fine, since explicit <code>&amp;mut</code> in the type of the argument will ensure that the compiler will implicitly reborrow with a shorter lifetime (i.e. the <code>&amp;mut*</code>).</p>\n\n<p>Cases like this demonstrate that <code>&amp;mut</code> does in fact move ownership, the implicit reborrowing often disguises it in favour of improved ergonomics.</p>\n\n<p>As for performance of the version with the extra reference: the speed of a <code>&amp;mut (&amp;mut Write)</code> is likely to be indistinguishable from a plain <code>&amp;mut Write</code>: the virtual call will usually be much more expensive than dereferencing the <code>&amp;mut</code>.</p>\n\n<p>Furthermore, the aliasing guarantees of <code>&amp;mut</code> means the compiler is very free about how interacts with a <code>&amp;mut</code>: e.g., depending on the internals, it may load the two words of the <code>&amp;mut Write</code> from the pointer into registers once at the start of <code>write_it</code> and then write any changes back at the end. This is legal because being a <code>&amp;mut</code> means that there's nothing else that can mutate that memory.</p>\n\n<p>Lastly, at the moment, a \"large\" value like a <code>&amp;mut Write</code> is passed via a pointer; essentially the same as a <code>&amp;mut &amp;mut Write</code> on the machine. The assembly for both the <code>&amp;mut *t</code> and <code>&amp;mut t</code> versions both start (literally the only difference I can see is the names of the <code>Ltmp...</code> labels):</p>\n\n<pre class=\"lang-asm prettyprint-override\"><code>_ZN8write_it20h2919620193267806634E:\n    .cfi_startproc\n    cmpq    %fs:112, %rsp\n    ja  .LBB4_2\n    movabsq $72, %r10\n    movabsq $0, %r11\n    callq   __morestack\n    retq\n.LBB4_2:\n    pushq   %r14\n.Ltmp116:\n    .cfi_def_cfa_offset 16\n    pushq   %rbx\n.Ltmp117:\n    .cfi_def_cfa_offset 24\n    subq    $56, %rsp\n.Ltmp118:\n    .cfi_def_cfa_offset 80\n.Ltmp119:\n    .cfi_offset %rbx, -24\n.Ltmp120:\n    .cfi_offset %r14, -16\n    movq    (%rdi), %rsi\n    movq    8(%rdi), %rax\n    ...\n</code></pre>\n\n<p>The two <code>movq</code>s at the end are loading the two words of the <code>&amp;mut Write</code> trait object into registers.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "accepted_answer_id": 29933265, "answer_count": 1, "score": 3, "last_activity_date": 1430274309, "creation_date": 1430273548, "question_id": 29933157, "link": "https://stackoverflow.com/questions/29933157/can-i-pass-the-same-mutable-trait-object-in-multiple-iterations-of-a-loop-withou", "title": "Can I pass the same mutable trait object in multiple iterations of a loop without adding indirection?", "body": "<p>I'm writing a bit of code that can either output to stdout or to a file. Based on some external condition, I instantiate the file or stdout and then create a trait object from the reference to the appropriate item:</p>\n\n<pre><code>use std::{io,fs};\n\nfn write_it&lt;W&gt;(mut w: W) where W: io::Write { }\n\nfn main() {\n    let mut stdout;\n    let mut file;\n\n    let t: &amp;mut io::Write = if true {\n        stdout = io::stdout();\n        &amp;mut stdout\n    } else {\n        file = fs::File::create(\"/tmp/output\").unwrap();\n        &amp;mut file\n    };\n\n    for _ in 0..10 {\n        write_it(t);\n    }\n}\n</code></pre>\n\n<p>This works fine, until I try to call <code>write_it</code> multiple times. That will fail, as <code>t</code> is moved into <code>write_it</code> and thus is not available on subsequent iterations of the loop:</p>\n\n<pre><code>&lt;anon&gt;:18:18: 18:19 error: use of moved value: `t`\n&lt;anon&gt;:18         write_it(t);\n                           ^\nnote: `t` was previously moved here because it has type `&amp;mut std::io::Write`, which is non-copyable\n</code></pre>\n\n<p>I can work around it by adding another layer of indirection:</p>\n\n<pre><code>let mut t: &amp;mut io::Write;\nwrite_it(&amp;mut t);\n</code></pre>\n\n<p>But this seems like it could be potentially inefficient. Is it actually inefficient? Is there a cleaner way of writing this code?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1584972324, "post_id": 29932503, "comment_id": 107597730, "body": "Note that <b><code>1..10</code> only yields from 1 to 9</b>. <b>It does <i>not</i> yield <code>10</code></b>, in case that is what you are expecting. Therefore your code only executes 9 times. To include 10, you should get <code>1..=10</code>, but if you want more idiomatic Rust code, we usually write <code>0..10</code> (which is more relatable if you later want to use <code>i</code> as an array index later on)."}], "answers": [{"comments": [{"owner": {"reputation": 167, "user_id": 2891944, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iJFwu.jpg?s=128&g=1", "display_name": "Jman", "link": "https://stackoverflow.com/users/2891944/jman"}, "edited": false, "score": 0, "creation_date": 1561864768, "post_id": 29932594, "comment_id": 100197109, "body": "Awesome!  I have been hunting for an hour for this answer and you plainly &amp; clearly answered it! Many thanks! +1"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 65, "last_activity_date": 1430269411, "creation_date": 1430269411, "answer_id": 29932594, "question_id": 29932503, "link": "https://stackoverflow.com/questions/29932503/what-is-the-idiomatic-way-to-write-a-for-loop-without-using-the-iterator-value/29932594#29932594", "title": "What is the idiomatic way to write a for loop without using the iterator value?", "body": "<p>You can write <code>_</code> as your pattern, meaning \u201cdiscard the value\u201d:</p>\n\n<pre><code>let mut x: i32 = 0;\nfor _ in 1..10 {\n    x += 1;\n}\n</code></pre>\n"}], "owner": {"reputation": 363, "user_id": 3835342, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e6f54c04b770283464c6ae03c213a596?s=128&d=identicon&r=PG&f=1", "display_name": "Cole Reynolds", "link": "https://stackoverflow.com/users/3835342/cole-reynolds"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5390, "favorite_count": 2, "accepted_answer_id": 29932594, "answer_count": 1, "score": 31, "last_activity_date": 1430270402, "creation_date": 1430268777, "last_edit_date": 1430270402, "question_id": 29932503, "link": "https://stackoverflow.com/questions/29932503/what-is-the-idiomatic-way-to-write-a-for-loop-without-using-the-iterator-value", "title": "What is the idiomatic way to write a for loop without using the iterator value?", "body": "<p>Assuming I want a finite loop using a range:</p>\n\n<pre><code>let mut x: i32 = 0;\nfor i in 1..10 {\n    x += 1;\n}\n</code></pre>\n\n<p>The compiler will spit out the warning:</p>\n\n<pre><code>warning: unused variable: `i`, #[warn(unused_variables)] on by default\nfor i in 1..10 {\n    ^\n</code></pre>\n\n<p>Is there a more idiomatic way to write this that won't make the compiler complain?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430270660, "post_id": 29932255, "comment_id": 47987772, "body": "The build is trying to run <code>gcc</code>. Do you have GCC installed?"}, {"owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430270834, "post_id": 29932255, "comment_id": 47987817, "body": "Yes, and added to the path-var."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1430271466, "post_id": 29932255, "comment_id": 47987991, "body": "Just to double check, what happens if you run <code>gcc --version</code>?"}, {"owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "edited": false, "score": 0, "creation_date": 1430271876, "post_id": 29932255, "comment_id": 47988107, "body": "I get <code>gcc (GCC) 4.8.1</code>"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1430272039, "post_id": 29932255, "comment_id": 47988149, "body": "Hm, that seems fine... could you try running the command yourself to get the full picture, i.e. <code>&quot;gcc&quot; &quot;-O0&quot; &quot;-c&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-mwin32&quot; &quot;-m64&quot; &quot;-fPIC&quot; &quot;C:\\Users\\User\\.cargo\\registry\\src\\github.com-1ecc6299db9ec8&zwnj;&#8203;23\\time-0.1.25\\src&#47;t&zwnj;&#8203;ime_helpers.c&quot; &quot;-o&quot; &quot;D:\\Projects\\hots-unpack\\target\\release\\build\\time-e758cbe87&zwnj;&#8203;7e9589d\\out\\src\\time&zwnj;&#8203;_helpers.o&quot;</code> (the library used to run gcc doesn&#39;t print the compiler&#39;s output when it fails, <a href=\"https://github.com/alexcrichton/gcc-rs/issues/36\" rel=\"nofollow noreferrer\">#36</a>)."}, {"owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "edited": false, "score": 0, "creation_date": 1430272290, "post_id": 29932255, "comment_id": 47988219, "body": "I get <code>C:\\Users\\User\\.cargo\\registry\\src\\github.com-1ecc6299db9ec82&zwnj;&#8203;3\\time-0.1.25\\src&#47;ti&zwnj;&#8203;me_helpers.c:1:0: sorry, unimplemented: 64-bit mode not compiled in</code>. So it has something to do with my architecture? Sorry, really new in rust and gcc."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 2, "creation_date": 1430272616, "post_id": 29932255, "comment_id": 47988298, "body": "I&#39;m unfamiliar with gcc on windows, but that suggests you may have a 32-bit version, while a 64-bit one is needed. I&#39;m unsure of details, but maybe the <a href=\"https://github.com/rust-lang/rust/#building-on-windows\" rel=\"nofollow noreferrer\">instructions for building rust itself from source on windows</a> might make progress (you&#39;ll want the x86_64 toolchain)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1430272734, "post_id": 29932255, "comment_id": 47988325, "body": "Yeah, I&#39;m betting that you need the 64-bit version of GCC. Building rust-crypto doesn&#39;t even work on a 32-bit Windows 7 VM, complaining about usage of the <code>xmm1</code> and <code>xmm3</code> registers."}, {"owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "edited": false, "score": 0, "creation_date": 1430273627, "post_id": 29932255, "comment_id": 47988546, "body": "Many thanks to you, 64 bit version of gcc fixed it."}], "answers": [{"tags": [], "owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "is_accepted": true, "score": 2, "last_activity_date": 1434916790, "last_edit_date": 1434916790, "creation_date": 1430273608, "answer_id": 29933163, "question_id": 29932255, "link": "https://stackoverflow.com/questions/29932255/failed-to-run-custom-build-command-for-time-v0-1-25/29933163#29933163", "title": "Failed to run custom build command for `time v0.1.25`", "body": "<p>I needed the 64bit version of gcc for windows: <a href=\"http://mingw-w64.org\" rel=\"nofollow\">http://mingw-w64.org</a></p>\n\n<p>Working like a charm now.</p>\n"}], "owner": {"reputation": 1530, "user_id": 4812912, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/cc708a995d3d69d500c95c9479748858?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/4812912/michael-pittino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 555, "favorite_count": 0, "accepted_answer_id": 29933163, "answer_count": 1, "score": 2, "last_activity_date": 1434916790, "creation_date": 1430267124, "last_edit_date": 1430270594, "question_id": 29932255, "link": "https://stackoverflow.com/questions/29932255/failed-to-run-custom-build-command-for-time-v0-1-25", "title": "Failed to run custom build command for `time v0.1.25`", "body": "<p>I am trying to compile a script using <code>cargo build --release</code> but get the following output (<a href=\"http://pastebin.com/PTGanvK4\" rel=\"nofollow\">full stacktrace</a>):</p>\n\n<pre><code>running: \"gcc\" \"-O0\" \"-c\" \"-ffunction-sections\" \"-fdata-sections\" \"-mwin32\" \"-m64\" \"-fPIC\" \"C:\\Users\\User\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\time-0.1.25\\src/time_helpers.c\" \"-o\" \"D:\\Projects\\hots-unpack\\target\\release\\build\\time-e758cbe877e9589d\\out\\src\\time_helpers.o\"     \n\nfailed to run custom build command for `time v0.1.25`\n\nProcess didn't exit successfully: `D:\\Projects\\hots-unpack\\target\\release\\build\\time-e758cbe877e9589d\\build-script-build` (exit code: 101)\n\n--- stderr\nthread '&lt;main&gt;' panicked at 'explicit panic', C:\\Users\\User\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\gcc-0.3.4\\src\\lib.rs:380\n</code></pre>\n\n<p>This is the <a href=\"https://github.com/athre0z/hots-unpack\" rel=\"nofollow\">script</a> I want to compile  </p>\n"}, {"tags": ["pointers", "rust", "ffi", "erlang-nif"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 3, "last_activity_date": 1430254456, "creation_date": 1430254456, "answer_id": 29929726, "question_id": 29928721, "link": "https://stackoverflow.com/questions/29928721/raw-pointer-type-for-interior-mutable-struct/29929726#29929726", "title": "Raw pointer type for interior mutable struct", "body": "<p>I personally think that you should treat them as you treat references in Rust itself. When a function requires <code>&amp;mut</code> reference, it is very likely that it will actually change the value, and if it requires <code>&amp;</code>, then it is natural to expect that the value won't be changed (of course, disregarding inner mutability).</p>\n\n<p>C does not have a distinction between inherited and inner mutability, and so you can choose what to use <code>*mut</code> or <code>*const</code> solely based on how C functions work with this value. In fact, in properly written C API this distinction will be present in form of <code>const</code> qualifiers. Consequently, if there are any functions which want to mutate the value, go with <code>*mut</code>. If there are no such functions (e.g. this is an immutable structure which is created only once) go with <code>*const</code>. This is, of course, applies to the type you want to store in your wrapper - in FFI function signatures you should always mirror C API signatures.</p>\n"}], "owner": {"reputation": 1743, "user_id": 398021, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/a5a39b5f9de50200406c7a209ff7a121?s=128&d=identicon&r=PG", "display_name": "goertzenator", "link": "https://stackoverflow.com/users/398021/goertzenator"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 567, "favorite_count": 0, "accepted_answer_id": 29929726, "answer_count": 1, "score": 0, "last_activity_date": 1468170748, "creation_date": 1430251059, "last_edit_date": 1468170748, "question_id": 29928721, "link": "https://stackoverflow.com/questions/29928721/raw-pointer-type-for-interior-mutable-struct", "title": "Raw pointer type for interior mutable struct", "body": "<p>I\u2019m doing some Rust FFI work for the Erlang NIF API, and I have these:</p>\n\n<pre><code>ErlNifEnv *enif_alloc_env();\nvoid enif_free_env(ErlNifEnv* env);\n</code></pre>\n\n<p>This ErlNifEnv pointer gets passed to a variety of other functions but the user will never deref the pointer.  Also, this pointer is not threadsafe (use amongst multiple threads would require a mutex).  The naive Rust representation of this type would be..</p>\n\n<pre><code>struct ErlNifEnv;\n*mut ErlNifEnv;\n</code></pre>\n\n<p>But, I think I can treat this type as having \u201cinterior mutability\u201d which would lead to\u2026</p>\n\n<pre><code>struct ErlNifEnv;\n*const ErlNifEnv;\n</code></pre>\n\n<p>Should I be treating this pointer as const even though the underlying C code sees it as non-const?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 0, "creation_date": 1430278955, "post_id": 29927165, "comment_id": 47989967, "body": "I did understand the thing about how borrowing freezes the referred object, meaning moving is not allowed in this case but I just couldn&#39;t figure out how to avoid the moving. Clearly I need to revise some concepts and go through the docs more carefully.  Thanks for your help :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1497295809, "last_edit_date": 1497295809, "creation_date": 1430245739, "answer_id": 29927165, "question_id": 29926724, "link": "https://stackoverflow.com/questions/29926724/matching-string-cannot-move-out-of-borrowed-content/29927165#29927165", "title": "Matching String: cannot move out of borrowed content", "body": "<p>It depends on what you want to do with the existing string in the structure.</p>\n\n<pre><code>let fragment = match req.url.fragment {\n    Some(fragment) =&gt; fragment,\n    None =&gt; \"\".to_string(),\n};\n</code></pre>\n\n<p>In this code, you are <em>moving</em> the String out of <code>req.url.fragment</code>, but that would leave it in an undefined state. That's a bad thing, and Rust prevents you from doing that!</p>\n\n<p>As the error message states:</p>\n\n<blockquote>\n  <p>to prevent the move, use <code>ref fragment</code> or <code>ref mut fragment</code> to capture value by reference</p>\n</blockquote>\n\n<p>If you want to leave the string where it is and return a copy, then you can take a reference and then clone it:</p>\n\n<pre><code>let fragment = match req.url {\n    Some(ref fragment) =&gt; fragment.clone(),\n    None =&gt; \"\".to_string()\n};\n</code></pre>\n\n<p>If you want to leave the existing string as a <code>None</code>, then you can use <code>take</code>:</p>\n\n<pre><code>let fragment = match req.url.take() {\n    Some(fragment) =&gt; fragment,\n    None =&gt; \"\".to_string()\n};\n</code></pre>\n\n<p>Even shorter, you can use <code>unwrap_or_else</code>:</p>\n\n<pre><code>let fragment = req.url.take().unwrap_or_else(String::new);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 2, "last_activity_date": 1497295845, "last_edit_date": 1497295845, "creation_date": 1430257065, "answer_id": 29930399, "question_id": 29926724, "link": "https://stackoverflow.com/questions/29926724/matching-string-cannot-move-out-of-borrowed-content/29930399#29930399", "title": "Matching String: cannot move out of borrowed content", "body": "<p>The problem here is that one cannot invalidate a <code>&amp;mut</code> reference, and moving ownership out is one way to invalidate. (There's a few links to similar questions/answers in the sidebar on the right.)</p>\n\n<p>A fix is to instead use references, which should work quite well in this case:</p>\n\n<pre><code>fn fb_token(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let fragment: &amp;str = match req.url.fragment {\n        Some(ref fragment) =&gt; &amp;**fragment,\n        None =&gt; \"\",\n    };\n\n    Ok(Response::with((status::Ok, fragment)))\n}\n</code></pre>\n\n<p>(The <code>&amp;str</code> annotation isn't necessary, just to make it clearer what's happening.)</p>\n\n<p>This works because <a href=\"https://github.com/iron/iron/blob/220b7a339501bcaa6a3f5200d00a428a9e098c2e/src/modifiers.rs#L77\" rel=\"nofollow noreferrer\">iron implements <code>Modifier&lt;Response&gt;</code> for <code>&amp;str</code></a>, so that type can be used with <code>with</code> instead of the owned <code>String</code>.</p>\n"}], "owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3463, "favorite_count": 0, "accepted_answer_id": 29927165, "answer_count": 2, "score": 5, "last_activity_date": 1497295845, "creation_date": 1430244181, "last_edit_date": 1497295724, "question_id": 29926724, "link": "https://stackoverflow.com/questions/29926724/matching-string-cannot-move-out-of-borrowed-content", "title": "Matching String: cannot move out of borrowed content", "body": "<p><code>req.url.fragment</code> is an optional <code>String</code>. If it has a value, I want to copy that value into <code>fragment</code>, otherwise I want to assign an empty string. I keep getting the error that I <code>cannot move out of borrowed content</code>.</p>\n\n<p>How do I resolve this?</p>\n\n<pre><code>fn fb_token(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let fragment = match req.url.fragment {\n        Some(fragment) =&gt; fragment,\n        None =&gt; \"\".to_string(),\n    };\n\n    Ok(Response::with((status::Ok, fragment)))\n}\n</code></pre>\n"}, {"tags": ["parsing", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430234891, "post_id": 29922918, "comment_id": 47968667, "body": "<code>&quot;\\&quot;HE\\\\\\&quot;LLO\\&quot;&quot;</code> would probably be better written <code>r#&quot;&quot;HE\\&quot;LLO&quot;&quot;#</code>."}, {"owner": {"reputation": 4091, "user_id": 9191, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/a06d0fc5d5b9a1d254e566c1d0e449a8?s=128&d=identicon&r=PG", "display_name": "Fredrik", "link": "https://stackoverflow.com/users/9191/fredrik"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430235449, "post_id": 29922918, "comment_id": 47969141, "body": "@ChrisMorgan ah, so <i>that&#39;s</i> how you do the equivalent of &#39; &#39;, updated the example"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430260896, "post_id": 29922918, "comment_id": 47984744, "body": "Rust uses C\u266f\u2010style raw strings, allowing <code>r&quot;\u2026&quot;</code>, <code>r#&quot;\u2026&quot;#</code>, <code>r##&quot;\u2026&quot;##</code> <i>&amp;c.</i>"}], "answers": [{"tags": [], "owner": {"reputation": 146, "user_id": 2489366, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b17dc89f064e89b0e6e0cb19ee61421f?s=128&d=identicon&r=PG", "display_name": "Mar", "link": "https://stackoverflow.com/users/2489366/mar"}, "is_accepted": true, "score": 1, "last_activity_date": 1430246558, "creation_date": 1430246558, "answer_id": 29927405, "question_id": 29922918, "link": "https://stackoverflow.com/questions/29922918/using-parser-combinators-to-parse-string-with-escaped-characters/29927405#29927405", "title": "Using parser-combinators to parse string with escaped characters?", "body": "<p>I have a mostly functional JSON parser as a benchmark for parser-combinators which parses this sort of escaped characters. I have included a link to it and a slightly simplified version of it below.</p>\n\n<pre><code>fn json_char(input: State&lt;&amp;str&gt;) -&gt; ParseResult&lt;char, &amp;str&gt; {\n    let (c, input) = try!(satisfy(|c| c != '\"').parse_state(input));\n    let mut back_slash_char = satisfy(|c| \"\\\"\\\\nrt\".chars().find(|x| *x == c).is_some()).map(|c| {\n        match c {\n            '\"' =&gt; '\"',\n            '\\\\' =&gt; '\\\\',\n            'n' =&gt; '\\n',\n            'r' =&gt; '\\r',\n            't' =&gt; '\\t',\n            c =&gt; c//Should never happen\n        }\n    });\n    match c {\n        '\\\\' =&gt; input.combine(|input| back_slash_char.parse_state(input)),\n        _    =&gt; Ok((c, input))\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/Marwes/parser-combinators/blob/master/benches/json.rs#L75-L95\" rel=\"nofollow\">json_char</a></p>\n\n<p>Since this parser may consume 1 or 2 characters it is not enough to use the primitive combinators and so we need to introduce a function which can branch on the character which is parsed.</p>\n"}, {"tags": [], "owner": {"reputation": 24214, "user_id": 124257, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/Y1Udo.jpg?s=128&g=1", "display_name": "fresskoma", "link": "https://stackoverflow.com/users/124257/fresskoma"}, "is_accepted": false, "score": 0, "last_activity_date": 1582562657, "creation_date": 1582562657, "answer_id": 60380409, "question_id": 29922918, "link": "https://stackoverflow.com/questions/29922918/using-parser-combinators-to-parse-string-with-escaped-characters/60380409#60380409", "title": "Using parser-combinators to parse string with escaped characters?", "body": "<p>I ran into the same problem and ended up with the following solution:</p>\n\n<pre><code>    (\n        char('\"'),\n        many1::&lt;Vec&lt;char&gt;, _&gt;(choice((\n            escaped_character(),\n            satisfy(|c| c != '\"'),\n        ))),\n        char('\"')\n    )\n</code></pre>\n\n<p>Or in other words, a string is delimited by <code>\"</code> followed by <code>many</code> <code>escaped_characters</code> or anything that isn't a closing <code>\"</code>, and is closed by a closing <code>\"</code>.</p>\n\n<p>Here's a full example of how I'm using this:</p>\n\n<pre><code>pub enum Operand {\n    String { value: String },\n}\n\nfn escaped_character&lt;I&gt;() -&gt; impl Parser&lt;Input = I, Output = char&gt;\n    where\n        I: Stream&lt;Item = char&gt;,\n        I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,\n{\n    (\n        char('\\\\'),\n        any(),\n    ).and_then(|(_, x)| match x {\n        '0' =&gt; Ok('\\0'),\n        'n' =&gt; Ok('\\n'),\n        '\\\\' =&gt; Ok('\\\\'),\n        '\"' =&gt; Ok('\"'),\n        _ =&gt; Err(StreamErrorFor::&lt;I&gt;::unexpected_message(format!(\"Invalid escape sequence \\\\{}\", x)))\n    })\n}\n\n#[test]\nfn parse_escaped_character() {\n    let expected = Ok(('\\n', \" foo\"));\n    assert_eq!(expected, escaped_character().easy_parse(\"\\\\n foo\"))\n}\n\nfn string_operand&lt;I&gt;() -&gt; impl Parser&lt;Input = I, Output = Operand&gt;\n    where\n        I: Stream&lt;Item = char&gt;,\n        I::Error: ParseError&lt;I::Item, I::Range, I::Position&gt;,\n{\n    (\n        char('\"'),\n        many1::&lt;Vec&lt;char&gt;, _&gt;(choice((\n            escaped_character(),\n            satisfy(|c| c != '\"'),\n        ))),\n        char('\"')\n    )\n        .map(|(_,value,_)| Operand::String { value: value.into_iter().collect() })\n}\n\n#[test]\nfn parse_string_operand() {\n    let expected = Ok((Operand::String { value: \"foo \\\" bar \\n baz \\0\".into() }, \"\"));\n    assert_eq!(expected, string_operand().easy_parse(r#\"\"foo \\\" bar \\n baz \\0\"\"#))\n}\n</code></pre>\n"}], "owner": {"reputation": 4091, "user_id": 9191, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/a06d0fc5d5b9a1d254e566c1d0e449a8?s=128&d=identicon&r=PG", "display_name": "Fredrik", "link": "https://stackoverflow.com/users/9191/fredrik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 568, "favorite_count": 0, "accepted_answer_id": 29927405, "answer_count": 2, "score": 4, "last_activity_date": 1582563058, "creation_date": 1430233323, "last_edit_date": 1582563058, "question_id": 29922918, "link": "https://stackoverflow.com/questions/29922918/using-parser-combinators-to-parse-string-with-escaped-characters", "title": "Using parser-combinators to parse string with escaped characters?", "body": "<p>I'm trying to use the <a href=\"https://docs.rs/combine/*/combine/\" rel=\"nofollow noreferrer\" title=\"combine\">combine</a> library in Rust to parse a string. The real data that I'm trying to parse looks something like this:</p>\n\n<pre><code>A79,216,0,4,2,2,N,\"US\\\"PS\"\n</code></pre>\n\n<p>So at the end of that data is a string in quotes, but the string will contain escaped characters as well. I can't figure out how to parse those escaped characters in between the other quotes.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate parser_combinators;\n\nuse self::parser_combinators::*;\n\nfn main() {\n    let s = r#\"\"HE\\\"LLO\"\"#;\n    let data = many(satisfy(|c| c != '\"')); // Fails on escaped \" obviously\n    let mut str_parser = between(satisfy(|c| c == '\"'), satisfy(|c| c == '\"'), data);\n    let result : Result&lt;(String, &amp;str), ParseError&gt; = str_parser.parse(s);\n    match result {\n        Ok((value, _)) =&gt; println!(\"{:?}\", value),\n        Err(err) =&gt; println!(\"{}\", err),\n    }\n}\n\n//=&gt; \"HE\\\\\"\n</code></pre>\n\n<p>The code above will parse that string successfully but will obviously fail on the escaped character in the middle, printing out <code>\"HE\\\\\"</code> in the end.</p>\n\n<p>I want to change the code above so that it prints <code>\"HE\\\\\\\"LLO\"</code>.</p>\n\n<p>How do I do that?</p>\n"}, {"tags": ["rust", "raspberry-pi2"], "comments": [{"owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 4, "creation_date": 1430220267, "post_id": 29917513, "comment_id": 47957197, "body": "Some useful links: <a href=\"http://metaverse.fr/blog/compiling-rust-for-the-raspberry-pi/\" rel=\"nofollow noreferrer\">metaverse.fr/blog/compiling-rust-for-the-raspberry-pi</a> and <a href=\"https://github.com/npryce/rusty-pi/blob/master/doc/compile-the-compiler.asciidoc\" rel=\"nofollow noreferrer\">github.com/npryce/rusty-pi/blob/master/doc/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430227889, "post_id": 29917513, "comment_id": 47963217, "body": "Do you wish to <i>run</i> <code>rustc</code> on the RPi, or to you simply want to cross-compile a program that will execute on the RPi?"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430227956, "post_id": 29917513, "comment_id": 47963278, "body": "@Shepmaster I want to cross-compile program to execute on RPi2. I want to run something simple on it."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 0, "creation_date": 1430233554, "post_id": 29917513, "comment_id": 47967609, "body": "@FilipeGon&#231;alves How compatible is RPi with RPi2? That seems like a decent answer."}, {"owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 0, "creation_date": 1430236350, "post_id": 29917513, "comment_id": 47969829, "body": "@DanielFath Honestly, I have no idea. I came up with those links after a quick google search. I will try and look into this later today if I have the chance."}], "answers": [{"tags": [], "owner": {"reputation": 1496, "user_id": 2659409, "user_type": "registered", "accept_rate": 26, "profile_image": "https://www.gravatar.com/avatar/63e7502c01befd785ad3a66f56bbe24e?s=128&d=identicon&r=PG&f=1", "display_name": "druuu", "link": "https://stackoverflow.com/users/2659409/druuu"}, "is_accepted": false, "score": 9, "last_activity_date": 1434311591, "creation_date": 1434311591, "answer_id": 30833842, "question_id": 29917513, "link": "https://stackoverflow.com/questions/29917513/how-can-i-compile-rust-code-to-run-on-a-raspberry-pi-2/30833842#30833842", "title": "How can I compile Rust code to run on a Raspberry Pi 2?", "body": "<p>The Rust compiler is not distributed as a cross-compiler for the Raspberry Pi, so it needs to be compiled as a cross compiler with rpi dev tools.</p>\n\n<ol>\n<li><p>Get rpi dev tools - <code>git clone https://github.com/raspberrypi/tools.git ~/pi-tools</code></p></li>\n<li><p>get rust compiler from mozilla git repo and add rpi tools to the path <code>export PATH=~/pi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin:$PATH</code></p></li>\n<li><p>Look for rusty-pi dir on your home <code>./configure --target=arm-unknown-linux-gnueabihf --prefix=$HOME/rusty-pi &amp;&amp; make &amp;&amp; make install</code></p></li>\n<li><p>Considering helloworld.rs -> <code>% ~/pi-rust/bin/rustc --target=arm-unknown-linux-gnueabihf -C linker=arm-linux-gnueabihf-g++ helloworld.rs</code></p></li>\n</ol>\n\n<p>It will produce an executable. </p>\n"}, {"comments": [{"owner": {"reputation": 427, "user_id": 858646, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/997934d3247bdc9af4234251559987fa?s=128&d=identicon&r=PG", "display_name": "Kai Giebeler", "link": "https://stackoverflow.com/users/858646/kai-giebeler"}, "edited": false, "score": 0, "creation_date": 1509281236, "post_id": 41412427, "comment_id": 80947237, "body": "This works perfectly fine. I just had to add the missing quote-escapes (<code>&quot;linker = \\&quot;arm-linux-gnueabihf-gcc\\&quot;&quot;</code>). Would you mind to update your answer?"}, {"owner": {"reputation": 480, "user_id": 291228, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6112e4a7810b26f22762e5f5edf2abf0?s=128&d=identicon&r=PG", "display_name": "Chris Pick", "link": "https://stackoverflow.com/users/291228/chris-pick"}, "edited": false, "score": 0, "creation_date": 1515027217, "post_id": 41412427, "comment_id": 83149400, "body": "This answer works fine on Raspberry Pi 2s and 3s, but not on 1s or Zeros. See <a href=\"https://stackoverflow.com/a/48087233/291228\">my answer</a> for a setup that builds binaries that work across all Pi versions."}, {"owner": {"reputation": 2457, "user_id": 1591777, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/w2A5m.png?s=128&g=1", "display_name": "cstroe", "link": "https://stackoverflow.com/users/1591777/cstroe"}, "edited": false, "score": 1, "creation_date": 1542179633, "post_id": 41412427, "comment_id": 93470622, "body": "I had to use <code>sudo apt install gcc-arm-linux-gnueabihf libc6-dev-armhf-cross libc6-dev-armhf-cross binutils-doc gcc-7-locales cpp-doc gcc-7-multilib-arm-linux-gnueabihf gcc-7-doc libgcc1-dbg-armhf-cross</code> on Ubuntu 18.04."}], "tags": [], "owner": {"reputation": 546, "user_id": 1274872, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0558dbd4c30646e4e376322697a118d2?s=128&d=identicon&r=PG", "display_name": "kazhik", "link": "https://stackoverflow.com/users/1274872/kazhik"}, "is_accepted": true, "score": 28, "last_activity_date": 1515072666, "last_edit_date": 1515072666, "creation_date": 1483228351, "answer_id": 41412427, "question_id": 29917513, "link": "https://stackoverflow.com/questions/29917513/how-can-i-compile-rust-code-to-run-on-a-raspberry-pi-2/41412427#41412427", "title": "How can I compile Rust code to run on a Raspberry Pi 2?", "body": "<p>We have <a href=\"https://blog.rust-lang.org/2016/05/13/rustup.html\" rel=\"noreferrer\">rustup</a> now.</p>\n\n<pre><code>$ rustup target add arm-unknown-linux-gnueabihf\n$ sudo apt-get install gcc-arm-linux-gnueabihf\n$ echo '[target.arm-unknown-linux-gnueabihf]' &gt;&gt; ~/.cargo/config\n$ echo 'linker = \"arm-linux-gnueabihf-gcc\"' &gt;&gt; ~/.cargo/config\n$ cd &lt;project dir&gt;\n$ cargo build --target=arm-unknown-linux-gnueabihf\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 480, "user_id": 291228, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6112e4a7810b26f22762e5f5edf2abf0?s=128&d=identicon&r=PG", "display_name": "Chris Pick", "link": "https://stackoverflow.com/users/291228/chris-pick"}, "is_accepted": false, "score": 9, "last_activity_date": 1515027016, "creation_date": 1515027016, "answer_id": 48087233, "question_id": 29917513, "link": "https://stackoverflow.com/questions/29917513/how-can-i-compile-rust-code-to-run-on-a-raspberry-pi-2/48087233#48087233", "title": "How can I compile Rust code to run on a Raspberry Pi 2?", "body": "<p><a href=\"https://stackoverflow.com/a/41412427/291228\">@kazhik's answer</a> will work for Raspberry Pi 2s and 3s (which are <a href=\"https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications\" rel=\"noreferrer\">ARMv7/8 based</a>), but not for Raspberry Pi 1s or Zeros (which are <a href=\"https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications\" rel=\"noreferrer\">ARMv6 based</a>).</p>\n\n<p>The problem is that Debian/Ubuntu's <code>armhf</code> port (and thus their <code>gcc-arm-linux-gnueabihf</code> package/compiler/toolchain) targets >= <a href=\"https://www.debian.org/ports/arm/#status\" rel=\"noreferrer\">ARMv7</a>.</p>\n\n<p>Fortunately, rustup's <code>gcc-arm-linux-gnueabihf</code> targets >= <a href=\"https://forge.rust-lang.org/platform-support.html#tier-2\" rel=\"noreferrer\">ARMv6</a> (with hardware floating-point, which all Raspberry Pis support), so all that's needed is the correct linker.  The Raspberry Pi foundation provides one of those in their <a href=\"https://github.com/raspberrypi/tools\" rel=\"noreferrer\">tools repository</a>.</p>\n\n<p>Putting it together, the following steps can be used to cross compile a Rust binary that works on all Raspberry Pis:</p>\n\n<pre><code>$ rustup target add arm-unknown-linux-gnueabihf\n$ git clone --depth=1 https://github.com/raspberrypi/tools raspberrypi-tools\n$ echo \"[target.arm-unknown-linux-gnueabihf]\" &gt;&gt; ~/.cargo/config\n$ echo \"linker = \\\"$(pwd)/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc\\\"\" &gt;&gt; ~/.cargo/config\n</code></pre>\n\n<p>To test the cross-compiler (assuming a Pi is running and reachable with the default <code>raspberrypi</code> hostname):</p>\n\n<pre><code>cpick@devhost:  $ cargo new --bin rpi-test\ncpick@devhost:  $ cd rpi-test\ncpick@devhost:  $ cargo build --target=arm-unknown-linux-gnueabihf\ncpick@devhost:  $ scp target/arm-unknown-linux-gnueabihf/debug/rpi-test pi@raspberrypi:\ncpick@devhost:  $ ssh pi@raspberrypi\npi@raspberrypi: $ ./rpi-test\nHello, world!\n</code></pre>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7577, "favorite_count": 14, "accepted_answer_id": 41412427, "answer_count": 3, "score": 27, "last_activity_date": 1569233919, "creation_date": 1430218719, "last_edit_date": 1430233952, "question_id": 29917513, "link": "https://stackoverflow.com/questions/29917513/how-can-i-compile-rust-code-to-run-on-a-raspberry-pi-2", "title": "How can I compile Rust code to run on a Raspberry Pi 2?", "body": "<p>I recently acquired a Raspberry PI 2 and I want to run a Rust program on it. </p>\n\n<p>Is there a guide/instructions how to cross compile Rust programs on Raspberry PI 2? I've heard about running Rust on RPi or Arduino, although not recently.</p>\n\n<p>I want a <code>Hello World</code> equivalent Rust program running on Raspberry Pi 2. It doesn't have to be a literal Hello World program, just something that is of similar low complexity.</p>\n"}, {"tags": ["io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 3, "last_activity_date": 1430161910, "creation_date": 1430161910, "answer_id": 29904049, "question_id": 29903626, "link": "https://stackoverflow.com/questions/29903626/how-to-read-an-integer-from-a-buffer-in-rust-1-0/29904049#29904049", "title": "How to read an integer from a buffer in Rust 1.0?", "body": "<p>This functionality is not in the standard library any more, but there are other libraries providing it.\n<a href=\"https://github.com/BurntSushi/byteorder\" rel=\"nofollow\">byteorder</a> is a popular one.</p>\n"}], "owner": {"reputation": 40442, "user_id": 15985, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/fb915f0b3a0a397891f4fd6dab6c2ac8?s=128&d=identicon&r=PG", "display_name": "Thomas Bratt", "link": "https://stackoverflow.com/users/15985/thomas-bratt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 974, "favorite_count": 0, "accepted_answer_id": 29904049, "answer_count": 1, "score": 4, "last_activity_date": 1430161910, "creation_date": 1430160304, "last_edit_date": 1430160891, "question_id": 29903626, "link": "https://stackoverflow.com/questions/29903626/how-to-read-an-integer-from-a-buffer-in-rust-1-0", "title": "How to read an integer from a buffer in Rust 1.0?", "body": "<p>The API for reading scalar values seems to have been removed from the <code>Cursor</code> and <code>Reader</code> io traits. Is there a standard library replacement for these or do I have to write my own?</p>\n\n<p>For example, it used to be possible to write:</p>\n\n<pre><code>let magic = try!(reader.read_be_u16());\n</code></pre>\n"}, {"tags": ["path", "command", "rust", "msys"], "answers": [{"tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": true, "score": 3, "last_activity_date": 1430179514, "creation_date": 1430179514, "answer_id": 29908039, "question_id": 29903129, "link": "https://stackoverflow.com/questions/29903129/invoking-shell-scripts-on-windows-under-msys-using-command/29908039#29908039", "title": "Invoking shell scripts on Windows under MSYS using Command", "body": "<p>The Windows example doesn't work because Windows isn't a Unix. On Unix-like systems, the <code>#!</code> at the beginning of a script is recognized, and it invokes the executable at the given path as the interpreter. Windows doesn't have this behavior; and even if it did, it wouldn't recognize the path name to the <code>/bin/bash</code>, as that path name is one that msys2 emulates, it is not a native path name.</p>\n\n<p>Instead, you can explicitly execute the script you want using the msys2 shell, by doing something like the following (alter the path as appropriate, I have <code>msys32</code> installed since it's a 32 bit VM)</p>\n\n<pre><code>let out_win   = Command::new(\"C:\\\\msys32\\\\usr\\\\bin\\\\sh.exe\")\n                            .arg(\"-c\")\n                            .arg(path_win_style)\n                            .output();\n</code></pre>\n"}], "owner": {"reputation": 893, "user_id": 381561, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/52db682f9a668b4731f4aba72fb21f16?s=128&d=identicon&r=PG", "display_name": "Kill KRT", "link": "https://stackoverflow.com/users/381561/kill-krt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2008, "favorite_count": 1, "accepted_answer_id": 29908039, "answer_count": 1, "score": 1, "last_activity_date": 1430185760, "creation_date": 1430158666, "last_edit_date": 1430185760, "question_id": 29903129, "link": "https://stackoverflow.com/questions/29903129/invoking-shell-scripts-on-windows-under-msys-using-command", "title": "Invoking shell scripts on Windows under MSYS using Command", "body": "<p>I am trying to invoke commands in Rust (1.0 beta 3) on Windows 7 in an <a href=\"http://msys2.github.io\" rel=\"nofollow\">MSYS2</a> environment, but I cannot understand how to do it.</p>\n\n<p>Suppose that you have this very simple script called <code>myls</code> in your home folder:</p>\n\n<pre><code>#!/bin/bash\n\nls\n</code></pre>\n\n<p>And now create a simple program in Rust that calls the script:</p>\n\n<pre><code>use std::process::Command;\nuse std::path::Path;\n\nfn main() \n{\n    let path_linux_style = Path::new(\"~/myls\").to_str().unwrap();\n    let path_win_style   = Path::new(\"C:\\\\msys64\\\\home\\\\yourname\\\\myls\").to_str().unwrap();\n\n    let out_linux = Command::new(path_linux_style).output();\n    let out_win   = Command::new(path_win_style).output();\n\n    match out_linux\n    {\n        Ok(_)  =&gt; println!(\"Linux path is working!\"),\n        Err(e) =&gt; println!(\"Linux path is not working: {}\", e)\n    }\n\n    match out_win\n    {\n        Ok(_)  =&gt; println!(\"Win path is working!\"),\n        Err(e) =&gt; println!(\"Win path is not working: {}\", e)\n    }\n}\n</code></pre>\n\n<p>Now, if you try to execute it, you will get the following output:</p>\n\n<pre><code>Linux path is not working: The system cannot find the file specified.\n (os error 2)\nWin path is not working: %1 is not a valid Win32 application.\n (os error 193)\n</code></pre>\n\n<p>So I am not able to invoke any command in MSYS environment.\nHow can I solve it?</p>\n\n<p><strong>EDIT</strong>:\nI noticed that if I invoke an executable, the problem doesn't happen, so it seems to be related to invocation of bash script. Anyway, it's quite annoying since it makes compiling projects depending on external C/C++ code (that need to launch <code>configure</code> script) tricky to get to work.</p>\n"}, {"tags": ["profiling", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1430154230, "post_id": 29901705, "comment_id": 47926237, "body": "Are you compiling with optimization turned on? That&#39;s the #1 cause of &quot;it&#39;s too slow&quot;."}, {"owner": {"reputation": 16224, "user_id": 2351099, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/178b1acb2ebd59939788cd25b19cf191?s=128&d=identicon&r=PG", "display_name": "Max Galkin", "link": "https://stackoverflow.com/users/2351099/max-galkin"}, "edited": false, "score": 0, "creation_date": 1463697656, "post_id": 29901705, "comment_id": 62188161, "body": "This article seems helpful: <a href=\"https://llogiq.github.io/2015/07/15/profiling.html\" rel=\"nofollow noreferrer\">llogiq.github.io/2015/07/15/profiling.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1430156721, "creation_date": 1430156721, "answer_id": 29902564, "question_id": 29901705, "link": "https://stackoverflow.com/questions/29901705/does-the-rust-compiler-have-a-profiling-option/29902564#29902564", "title": "Does the Rust compiler have a profiling option?", "body": "<p>There's no direct switch that I'm aware of. However, I've successfully compiled my code with optimizations enabled <em>as well as</em> debugging symbols. I can then use OS X's Instruments to profile the code. Other people have used KCachegrind on Linux systems to the same effect.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1430181231, "creation_date": 1430181231, "answer_id": 29908305, "question_id": 29901705, "link": "https://stackoverflow.com/questions/29901705/does-the-rust-compiler-have-a-profiling-option/29908305#29908305", "title": "Does the Rust compiler have a profiling option?", "body": "<p>The compiler doesn't support any form of instrumentation specifically for profiling (like <code>-p</code>/<code>-pg</code>/<code>-prof</code>), but compiled Rust programs can be profiled under tools that do not require custom instrumentation, such as Instruments on OS X, and perf or callgrind on Linux.</p>\n\n<p>I believe such tools support using DWARF debuginfo (as emitted by <code>-g</code>) to provide more detailed performance diagnostics (per-line etc.), but enabling optimisations play havoc with the debug info, and it's never really worked for me. When I'm analysing performance, diving into the asm is very common.</p>\n\n<p>Making this easier would be really nice, and tooling is definitely a <a href=\"http://internals.rust-lang.org/t/priorities-after-1-0/1901\">post-1.0 priority</a>.</p>\n"}], "owner": {"reputation": 36975, "user_id": 94977, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/8341c5bff3dcbd8ed34d9d68bd4169f2?s=128&d=identicon&r=PG", "display_name": "Jason Orendorff", "link": "https://stackoverflow.com/users/94977/jason-orendorff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1248, "favorite_count": 0, "accepted_answer_id": 29908305, "answer_count": 2, "score": 4, "last_activity_date": 1430181231, "creation_date": 1430153787, "question_id": 29901705, "link": "https://stackoverflow.com/questions/29901705/does-the-rust-compiler-have-a-profiling-option", "title": "Does the Rust compiler have a profiling option?", "body": "<p>I have a Rust program that isn't running as fast as I think it should. Is there a way to tell the compiler to instrument the binary to generate profiling information?</p>\n\n<p>I mean something like GCC's <code>-p</code> and <code>-pg</code> options or GHC's <code>-prof</code>.</p>\n"}, {"tags": ["string", "rust", "string-parsing"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1430153623, "post_id": 29901607, "comment_id": 47925847, "body": "It&#39;s not <code>str</code> that has to implement <code>DoubleEndedSearcher</code>, it&#39;s <code>StrSearcher</code> in this case.  I think.  That, or I read the impl of <code>Pattern</code> on <code>str</code> wrong..."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1593027345, "last_edit_date": 1593027345, "creation_date": 1430153456, "answer_id": 29901607, "question_id": 29901415, "link": "https://stackoverflow.com/questions/29901415/why-can-i-not-reverse-the-result-of-strsplit/29901607#29901607", "title": "Why can I not reverse the result of str::split?", "body": "<p>The problem is that <code>rev()</code> is defined on the <code>Split</code> iterator only if it implements <code>DoubleEndedIterator</code>, but <code>Split</code> only implements <code>DoubleEndedIterator</code> if the searcher of the pattern you are splitting on satisfies <code>DoubleEndedSearcher</code>:</p>\n<pre><code>impl&lt;'a, P&gt; DoubleEndedIterator for Split&lt;'a, P&gt;\nwhere\n    P: Pattern&lt;'a&gt;,\n    &lt;P as Pattern&lt;'a&gt;&gt;::Searcher: DoubleEndedSearcher&lt;'a&gt;, \n</code></pre>\n<p>The documentation lists which types implement <a href=\"https://doc.rust-lang.org/std/str/pattern/trait.DoubleEndedSearcher.html\" rel=\"nofollow noreferrer\"><code>DoubleEndedSearcher</code></a>. None of the types there correspond to <code>&amp;str</code> pattern, so you can't use <code>rev()</code> when you split on string.</p>\n<p>In your particular case, I guess, it is sufficient to change <code>split(&quot;:&quot;)</code> to <code>split(':')</code> (i.e. split on character instead of string) because the character pattern searcher <em>does</em> implement <code>DoubleEndedSearcher</code>.</p>\n<p>Such features of Rust (conditional trait implementation and trait bounds local to a method) allow writing really expressive code, but they can be sometimes hard to read through.</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1430153561, "creation_date": 1430153561, "answer_id": 29901636, "question_id": 29901415, "link": "https://stackoverflow.com/questions/29901415/why-can-i-not-reverse-the-result-of-strsplit/29901636#29901636", "title": "Why can I not reverse the result of str::split?", "body": "<p><strong>TLDR</strong>: <code>StrSearcher</code> (the type that does searching for string patterns) doesn't implement <code>DoubleEndedSearcher</code> and, as such, the <code>split</code> iterator doesn't implement <code>DoubleEndedIterator</code> and, as such, you can't call <code>rev</code> on it.</p>\n\n<p>If you look at the documentation on that page for <code>rev</code>, you'll see <code>where Self: DoubleEndedIterator</code>.  This means that <code>rev</code> is defined <em>if and only if</em> the type the <code>Iterator</code> trait is being implemented for (which is <code>Split</code>) <em>also</em> has an implementation of the <code>DoubleEndedIterator</code> trait.</p>\n\n<p>If you look further down, you'll see:</p>\n\n<pre><code>impl&lt;'a, P&gt; DoubleEndedIterator for Split&lt;'a, P&gt;\nwhere P: Pattern&lt;'a&gt;, P::Searcher: DoubleEndedSearcher&lt;'a&gt;\n</code></pre>\n\n<p>Thus, <code>DoubleEndedIterator</code> is implemented for <code>Split</code> <em>if and only if</em> both of those conditions are satisfied: <code>P</code> must be a <code>Pattern</code> and the <code>Searcher</code> type it defines must implement <code>DoubleEndedSearcher</code>.</p>\n\n<p>Now, you're using a string literal as the pattern, so if you check the <a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"nofollow\">documentation for the <code>str</code> type</a>, you'll see:</p>\n\n<pre><code>impl&lt;'a, 'b&gt; Pattern&lt;'a&gt; for &amp;'b str\n</code></pre>\n\n<p>Within that, the associated <code>Searcher</code> type is defined as:</p>\n\n<pre><code>type Searcher = StrSearcher&lt;'a, 'b&gt;\n</code></pre>\n\n<p>Nearly there!  Follow the link to the <a href=\"https://doc.rust-lang.org/std/str/pattern/struct.StrSearcher.html\" rel=\"nofollow\">documentation for <code>StrSearcher</code></a> and...</p>\n\n<p>...there's no implementation of <code>DoubleEndedSearcher</code>.  Thus, the required bounds are <em>not</em> satisfied and <code>rev</code> can't be used on the <code>Split</code> iterator.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1586810253, "last_edit_date": 1586810253, "creation_date": 1430154599, "answer_id": 29901965, "question_id": 29901415, "link": "https://stackoverflow.com/questions/29901415/why-can-i-not-reverse-the-result-of-strsplit/29901965#29901965", "title": "Why can I not reverse the result of str::split?", "body": "<p>The other answers are correct, but I want to point out <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.rsplit\" rel=\"nofollow noreferrer\"><code>rsplit</code></a>. This is probably more obvious and more performant.</p>\n\n<p>So, why can't you use <code>rev</code>? As other answers state, it's not implemented for <code>StrSearcher</code>. But <em>why</em> is it not implemented? From the <a href=\"https://doc.rust-lang.org/std/str/pattern/trait.DoubleEndedSearcher.html\" rel=\"nofollow noreferrer\"><code>DoubleEndedSearcher</code></a> docs:</p>\n\n<blockquote>\n  <p>For this, the impl of <code>Searcher</code> and <code>ReverseSearcher</code> need\n  to follow these conditions:</p>\n  \n  <ul>\n  <li>All results of <code>next()</code> need to be identical\n  to the results of <code>next_back()</code> in reverse order.</li>\n  <li><code>next()</code> and <code>next_back()</code> need to behave as\n  the two ends of a range of values, that is they\n  can not \"walk past each other\".</li>\n  </ul>\n</blockquote>\n\n<p>The problem with reversing the iterator using strings is this:</p>\n\n<pre><code>\"baaab\".split(\"aa\") // -&gt; [\"b\", \"aa\", \"ab\"];\n</code></pre>\n\n<p>However, if you were to start at the end of the string, you'd get something like:</p>\n\n<pre><code>\"baaab\".split(\"aa\").rev() // -&gt; [\"b\", \"aa\", \"ba\"]\n</code></pre>\n\n<p>Which is clearly not the same set of items in a different order!</p>\n\n<p>Simply put, you <em>can't</em> reverse an iterator that is split on strings because there's no <strong>efficient</strong> way of knowing when the next result is. You'd have to split the entire string into a collection, then reverse the collection!</p>\n\n<p>This is why <code>rsplit</code> exists - it means start at the end of the string and split to the beginning, in an efficient manner.</p>\n"}], "owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 816, "favorite_count": 0, "accepted_answer_id": 29901607, "answer_count": 3, "score": 4, "last_activity_date": 1593027614, "creation_date": 1430152765, "last_edit_date": 1593027614, "question_id": 29901415, "link": "https://stackoverflow.com/questions/29901415/why-can-i-not-reverse-the-result-of-strsplit", "title": "Why can I not reverse the result of str::split?", "body": "<p>According to the docs for <a href=\"https://doc.rust-lang.org/std/str/struct.Split.html\" rel=\"nofollow noreferrer\"><code>Split</code></a>, there is a <code>rev</code> method on the result of doing <code>split</code> on a string:</p>\n<pre><code>fn main() {\n    let mut length = 0;\n    let mut mult = 1;\n    for part in &quot;1:30&quot;.split(&quot;:&quot;).rev() {\n        length += mult * part.parse::&lt;i32&gt;().unwrap();\n        mult *= 60;\n    }\n}\n</code></pre>\n<p>I get the following error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::str::pattern::StrSearcher&lt;'_, '_&gt;: std::str::pattern::DoubleEndedSearcher&lt;'_&gt;` is not satisfied\n --&gt; src/main.rs:4:35\n  |\n4 |     for part in &quot;1:30&quot;.split(&quot;:&quot;).rev() {\n  |                                   ^^^ the trait `std::str::pattern::DoubleEndedSearcher&lt;'_&gt;` is not implemented for `std::str::pattern::StrSearcher&lt;'_, '_&gt;`\n  |\n  = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::str::Split&lt;'_, &amp;str&gt;`\n\nerror[E0277]: the trait bound `std::str::pattern::StrSearcher&lt;'_, '_&gt;: std::str::pattern::DoubleEndedSearcher&lt;'_&gt;` is not satisfied\n --&gt; src/main.rs:4:17\n  |\n4 |     for part in &quot;1:30&quot;.split(&quot;:&quot;).rev() {\n  |                 ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::str::pattern::DoubleEndedSearcher&lt;'_&gt;` is not implemented for `std::str::pattern::StrSearcher&lt;'_, '_&gt;`\n  |\n  = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::str::Split&lt;'_, &amp;str&gt;`\n  = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Rev&lt;std::str::Split&lt;'_, &amp;str&gt;&gt;`\n</code></pre>\n"}, {"tags": ["hashmap", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430157259, "post_id": 29901338, "comment_id": 47927986, "body": "The Rust style guide is 4-space indents."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1430157491, "creation_date": 1430157491, "answer_id": 29902786, "question_id": 29901338, "link": "https://stackoverflow.com/questions/29901338/accessing-hashmap-field-value-as-mut-inside-struct-impl/29902786#29902786", "title": "Accessing hashmap field value as &amp;mut inside struct impl", "body": "<p>As the error message says, you can't reborrow <code>self</code> when it is already mutably borrowed:</p>\n\n<pre><code>&lt;anon&gt;:24:5: 24:9 error: cannot borrow `*self` as immutable because `self.clients` is also borrowed as mutable\n&lt;anon&gt;:24     self.poke(client);\n              ^~~~\n</code></pre>\n\n<p>In your method:</p>\n\n<pre><code>pub fn poke_client(&amp;mut self, token: usize) {\n    let client = self.clients.get_mut(&amp;token).unwrap();\n    self.poke(client);\n}\n</code></pre>\n\n<p>You borrow <code>self</code> mutably on the first line, and then try to borrow it again for the second line, when you call the method <code>poke</code>. The easiest solution is to just call <code>Client::set_poked</code> here:</p>\n\n<pre><code>pub fn poke_client(&amp;mut self, token: usize) {\n    let client = self.clients.get_mut(&amp;token).unwrap();\n    client.set_poked();\n}\n</code></pre>\n\n<p>The other solution is to introduce a method that doesn't require <code>self</code>:</p>\n\n<pre><code>impl Server {\n    pub fn poke_client(&amp;mut self, token: usize) {\n        let client = self.clients.get_mut(&amp;token).unwrap();\n        Server::poke(client);\n    }\n\n    fn poke(c: &amp;mut Client) {\n        c.set_poked();\n    }\n}\n</code></pre>\n\n<p>You can pass any other parts of <code>self</code> that are needed for <code>poke</code>. This may be a good time to introduce a new object that mediates between <code>Server</code> and <code>Client</code>.</p>\n"}], "owner": {"reputation": 2883, "user_id": 151652, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/abc432bb0450574a25b15ff23d399d5a?s=128&d=identicon&r=PG", "display_name": "Farcaller", "link": "https://stackoverflow.com/users/151652/farcaller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2427, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1430157491, "creation_date": 1430152511, "question_id": 29901338, "link": "https://stackoverflow.com/questions/29901338/accessing-hashmap-field-value-as-mut-inside-struct-impl", "title": "Accessing hashmap field value as &amp;mut inside struct impl", "body": "<p>given a simple struct like this:</p>\n\n<pre><code>struct Server {\n  clients: HashMap&lt;usize, Client&gt;\n}\n</code></pre>\n\n<p>what is the best way to access <code>Client</code> as a <code>&amp;mut</code>? Consider the following code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Client {\n  pub poked: bool\n}\n\nimpl Client {\n  pub fn poked(&amp;self) -&gt; bool {\n    self.poked\n  }\n\n  pub fn set_poked(&amp;mut self) {\n    self.poked = true;\n  }\n}\n\nstruct Server {\n  clients: HashMap&lt;usize, Client&gt;\n}\n\nimpl Server {\n  pub fn poke_client(&amp;mut self, token: usize) {\n    let client = self.clients.get_mut(&amp;token).unwrap();\n    self.poke(client);\n  }\n\n  fn poke(&amp;self, c: &amp;mut Client) {\n    c.set_poked();\n  }\n}\n\nfn main() {\n    let mut s = Server { clients: HashMap::new() };\n    s.clients.insert(1, Client { poked: false });\n\n    s.poke_client(1);\n\n    assert!(s.clients.get(&amp;1).unwrap().poked() == true);\n}\n</code></pre>\n\n<p>The only two options I see are to use <code>RefCell</code>/<code>Cell</code> inside Client, which makes things look really horrible:</p>\n\n<pre><code>pub struct Client {\n    nickname: RefCell&lt;Option&lt;String&gt;&gt;,\n    username: RefCell&lt;Option&lt;String&gt;&gt;,\n    realname: RefCell&lt;Option&lt;String&gt;&gt;,\n    hostname: RefCell&lt;Option&lt;String&gt;&gt;,\n    out_socket: RefCell&lt;Box&lt;Write&gt;&gt;,\n}\n</code></pre>\n\n<p>Or to wrap the <code>clients</code> in <code>RefCell</code>, which makes it impossible to have simple methods like this one for <code>Server</code>:</p>\n\n<pre><code>pub fn client_by_token(&amp;self, token: usize) -&gt; Option&lt;&amp;Client&gt; {\n    self.clients_tok.get(&amp;token)\n}\n</code></pre>\n\n<p>forcing me to use closures (e.g. <code>with_client_by_token(|c| ...)</code>).</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1430140595, "post_id": 29896672, "comment_id": 47916327, "body": "Your last attempt is incorrect - you&#39;re essentially saying that <code>&#39;a</code> can be arbitrary lifetime the <i>caller</i> chooses, so it may as well chose <code>&#39;static</code>. But your code does not return a reference with static lifetime, it returns a reference with lifetime of <code>self.data</code>. This can&#39;t possibly work, so such signature is considered unsound. And BTW, the compiler usually shows the conflicting requirements - it highlights scopes with which conflicting lifetimes are associated. The rest of your question requires more research."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1430141042, "post_id": 29896672, "comment_id": 47916686, "body": "<code>&amp;Vec&lt;T&gt;</code> could be made a tiny bit more efficient by changing it to <code>&amp;[T]</code>; <code>&amp;Vec&lt;T&gt;</code> will automatically coerce to <code>&amp;[T]</code> also, so there is no increased burden in using it."}, {"owner": {"reputation": 1081, "user_id": 1976730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f2d3471083d1569b698ff42ca5f303?s=128&d=identicon&r=PG", "display_name": "sqweek", "link": "https://stackoverflow.com/users/1976730/sqweek"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1430144359, "post_id": 29896672, "comment_id": 47919325, "body": "@VladimirMatveev I&#39;ve seen scopes highlighted for some lifetime errors, but not in this particular case. Which just makes it all the more frustrating :P"}], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1430172914, "post_id": 29897056, "comment_id": 47936417, "body": "Whoops, <code>&amp;self.data</code> and <code>&amp;self.overlay</code> should obviously have been <code>data</code> and <code>overlay</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 5, "last_activity_date": 1609702549, "last_edit_date": 1609702549, "creation_date": 1430140966, "answer_id": 29897056, "question_id": 29896672, "link": "https://stackoverflow.com/questions/29896672/can-you-control-borrowing-a-struct-vs-borrowing-a-field/29897056#29897056", "title": "Can you control borrowing a struct vs borrowing a field?", "body": "<p>As long as the method <code>merge</code> takes <code>&amp;self</code>, you cannot accomplish what you desire: it borrows all of each of its arguments and this cannot be altered.</p>\n<p>The solution is to change it so that it doesn\u2019t take <code>self</code>, but instead takes the individual fields you wish to be borrowed:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl App {\n    ...\n    fn merge(data: &amp;Vec&lt;u8&gt;, overlay: &amp;Vec&lt;(usize, Vec&lt;u8&gt;)&gt;, start: usize) -&gt; Vec&lt;&amp;[u8]&gt; {\n        MergeIter::new(data, overlay, start).collect()\n    }\n\n    fn process(&amp;mut self) {\n        let merged = Self::merge(&amp;self.data, &amp;self.overlay, 0);\n        ... // inspect contents of 'merged'\n        self.sink.process(merged);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1081, "user_id": 1976730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f2d3471083d1569b698ff42ca5f303?s=128&d=identicon&r=PG", "display_name": "sqweek", "link": "https://stackoverflow.com/users/1976730/sqweek"}, "edited": false, "score": 0, "creation_date": 1430144443, "post_id": 29897104, "comment_id": 47919389, "body": "I still haven&#39;t looked into rust macros - guess it&#39;s time I did!"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1608919612, "last_edit_date": 1608919612, "creation_date": 1430141088, "answer_id": 29897104, "question_id": 29896672, "link": "https://stackoverflow.com/questions/29896672/can-you-control-borrowing-a-struct-vs-borrowing-a-field/29897104#29897104", "title": "Can you control borrowing a struct vs borrowing a field?", "body": "<p>Yes, you've guessed correctly - the error happens because when you have <code>merge</code> method accept <code>&amp;self</code>, the compiler can't know at its call site that it uses only some fields - <code>merge</code> signature only tells it that the data it returns is somehow derived from <code>self</code>, but it doesn't tell how - and so the compiler assumes the &quot;worst&quot; case and prevents you from accessing other fields <code>self</code> has.</p>\n<p>I'm afraid there is no way to fix this at the moment, and I'm not sure there ever will be any. However, you can use macros to shorten <code>merge</code> invocations:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! merge {\n    ($this:ident, $start:expr) =&gt; {\n        MergeIter::new(&amp;$this.data, &amp;$this.overlay, $start).collect()\n    }\n}\n\nfn process(&amp;mut self) {\n    let merged = merge!(self, 0);\n    // inspect contents of 'merged'\n    self.sink.process(merged);\n}\n</code></pre>\n"}], "owner": {"reputation": 1081, "user_id": 1976730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8f2d3471083d1569b698ff42ca5f303?s=128&d=identicon&r=PG", "display_name": "sqweek", "link": "https://stackoverflow.com/users/1976730/sqweek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 526, "favorite_count": 0, "accepted_answer_id": 29897104, "answer_count": 2, "score": 5, "last_activity_date": 1609702549, "creation_date": 1430139887, "last_edit_date": 1608919584, "question_id": 29896672, "link": "https://stackoverflow.com/questions/29896672/can-you-control-borrowing-a-struct-vs-borrowing-a-field", "title": "Can you control borrowing a struct vs borrowing a field?", "body": "<p>I'm working on a program involving a struct along these lines:</p>\n<pre><code>struct App {\n    data: Vec&lt;u8&gt;,\n    overlay: Vec&lt;(usize, Vec&lt;u8&gt;)&gt;,\n    sink: Sink,\n}\n</code></pre>\n<p>In brief the <code>data</code> field holds some bytes and <code>overlay</code> is a series of byte sequences to be inserted at specific indices. The <code>Sink</code> type is unimportant except that it has a function like:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl Sink {\n    fn process&lt;'a&gt;(&amp;mut self, input: Vec&lt;&amp;'a [u8]&gt;) {\n        // ...\n    }\n}\n</code></pre>\n<p>I've implemented an iterator to merge the information from <code>data</code> and <code>overlay</code> for consumption by <code>Sink</code>.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>struct MergeIter&lt;'a, 'b&gt; {\n    data: &amp;'a Vec&lt;u8&gt;,\n    overlay: &amp;'b Vec&lt;(usize, Vec&lt;u8&gt;)&gt;,\n    // iterator state etc.\n}\n\nimpl&lt;'a, 'b&gt; Iterator for MergeIter&lt;'a, 'b&gt; {\n    type Item = &amp;'a [u8];\n    // ...\n}\n</code></pre>\n<p>This is I think a slight lie, because the lifetime of each &amp;[u8] returned by the iterator isn't always that of the original <code>data</code>. The data inserted from <code>overlay</code> has a different lifetime, but I don't see how I can annotate this more accurately. Anyway, the borrow checker doesn't seem to mind - the following approach works:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn merge&lt;'a, 'b&gt;(data: &amp;'a Vec&lt;u8&gt;, overlay: &amp;'b Vec&lt;(usize, Vec&lt;u8&gt;)&gt;, start: usize) -&gt; Vec&lt;&amp;'a [u8]&gt; {\n    MergeIter::new(data, overlay, start).collect()\n}\n\nimpl App {\n    fn process(&amp;mut self) {\n        let merged = merge(&amp;self.data, &amp;self.overlay, 0);\n        // inspect contents of 'merged'\n        self.sink.process(merged);\n    }\n}\n</code></pre>\n<p>I end up using this <code>merge</code> function all over the place, but always against the same data/overlay. So I figure I'll add an <code>App::merge</code> function for convenience, and here's where the problem begins:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl App {\n    fn merge&lt;'a&gt;(&amp;'a self, start: usize) -&gt; Vec&lt;&amp;'a [u8]&gt; {\n        MergeIter::new(&amp;self.data, &amp;self.overlay, start).collect()\n    }\n\n    fn process(&amp;mut self) {\n        let merged = self.merge(0);\n        // inspect contents of 'merged'\n        self.sink.process(merged);\n    }\n}\n</code></pre>\n<p><code>App::process</code> now fails to pass the borrow checker - it refuses to allow the mutable borrow of self.sink while self is borrowed.</p>\n<p>I've wrestled with this for some time, and if I've understood correctly the problem isn't with <code>process</code> but with this signature:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn merge&lt;'a&gt;(&amp;'a self, start: usize) -&gt; Vec&lt;&amp;'a [u8]&gt; {\n</code></pre>\n<p>Here I've essentially told the borrow checker that the references returned in the vector are equivalent to the <code>self</code> borrow.</p>\n<p>Even though I feel like I've now understood the problem, I still feel like my hands are tied. Leaving the lifetime annotations out doesn't help (because the compiler does the equivalent?), and with only the two references involved there's no way I can see to tell rust that the output reference has a lifetime bound to something else.</p>\n<p>I also tried this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn merge&lt;'a, 'b&gt;(&amp;'b self, start: usize) -&gt; Vec&lt;&amp;'a [u8]&gt; {\n    let data: &amp;'a Vec&lt;u8&gt; = &amp;self.data;\n    MergeIter::new(&amp;self.data, &amp;self.overlay, start).collect()\n}\n</code></pre>\n<p>but the compiler complains about the <code>let</code> statement (&quot;unable to infer appropriate lifetime due to conflicting requirements&quot; -- I also find it infuriating that the compiler doesn't explain said requirements).</p>\n<p>Is it possible to achieve this? The Rust Reference is kind of light on lifetime annotations and associated syntax.</p>\n<p>rustc 1.0.0-nightly (706be5ba1 2015-02-05 23:14:28 +0000)</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 2, "last_activity_date": 1430134122, "last_edit_date": 1430134122, "creation_date": 1430133622, "answer_id": 29894315, "question_id": 29893978, "link": "https://stackoverflow.com/questions/29893978/unable-to-hold-pass-reference-of-parent-to-the-composition-object/29894315#29894315", "title": "Unable to hold/pass reference of parent to the composition object", "body": "<p>This cannot work because you're violating mutable aliasing requirements - you're trying to mutably borrow <code>A</code> and its substructure at the same time:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>self.composition.f(self);\n// roughtly equivalent to:\nlet c = &amp;mut self.composition;  // borrow substructure\nc.f(self /* borrow self */);\n</code></pre>\n\n<p>(I've removed explicit <code>&amp;mut self</code> because it is incorrect (as it gives you <code>&amp;mut &amp;mut A&lt;...&gt;</code>, but it does not change the whole picture at all.)</p>\n\n<p>This is a natural error in Rust framework. Suppose that <code>f</code> implementation on this particular composition <code>X</code> rewrites <code>composition</code> field on the passed object:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl T for X {\n    fn f(&amp;mut self, a: &amp;mut A&lt;X&gt;) {\n        a.composition = create_x_somehow();\n    }\n}\n</code></pre>\n\n<p>And suddenly the object this method is called on is destroyed, and <code>self</code> is invalidated!</p>\n\n<p>Naturally, the compiler prevents you from doing this <em>even if you know</em> that you don't modify <code>composition</code>, because such kind of knowledge cannot be encoded statically (especially given that this is a trait method which can be implemented by anyone having access to your trait).</p>\n\n<p>You have essentially two choices in such situations:</p>\n\n<ul>\n<li>reformulate the problem so it does not require such architecture anymore, or</li>\n<li>use special language/library constructs to work around such static checks.</li>\n</ul>\n\n<p>The second point is about using such things as <code>Cell</code>/<code>RefCell</code> (they are safe, i.e. don't require <code>unsafe</code> blocks, but they can panic at runtime - probably these can work in your case) or, if nothing else helps, dropping to raw pointers and <code>unsafe</code> code. But, frankly, the first option usually is better: if you design your code based on ownership semantics and aliasing rules enforced by the compiler, almost always the resulting architecture would be of much better quality.</p>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 296, "favorite_count": 0, "accepted_answer_id": 29894315, "answer_count": 1, "score": 3, "last_activity_date": 1430134161, "creation_date": 1430132637, "last_edit_date": 1430134161, "question_id": 29893978, "link": "https://stackoverflow.com/questions/29893978/unable-to-hold-pass-reference-of-parent-to-the-composition-object", "title": "Unable to hold/pass reference of parent to the composition object", "body": "<p>In C++ it would something like <code>struct A</code> is composed of <code>struct B</code> and some function of <code>B</code> takes a pointer to the parent object <code>A</code>. So function of <code>A</code> calling that function of <code>B</code> will simply pass the <code>this</code> pointer to it. I'm trying this in Rust but failing to get it to work - this is what I want to achieve:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct A&lt;Type: T&gt; {\n    composition: Type,\n    value: usize,\n}\n\nimpl&lt;Type&gt; A&lt;Type&gt; where Type: T {\n    fn new(obj: Type) -&gt; A&lt;Type&gt; {\n        A {\n            composition: obj,\n            value: 999,\n        }\n    }\n\n    fn f(&amp;mut self) {\n        println!(\"Value: {:?}\", self.value);\n    }\n\n    fn call(&amp;mut self) {\n        self.composition.f(&amp;mut self);\n    }\n}\n\ntrait T {\n    fn f(&amp;mut self, &amp;mut A&lt;Self&gt;);\n}\n\nstruct B {\n    value: usize,\n}\n\nimpl B {\n    fn new() -&gt; B {\n        B { value: 0, }\n    }\n}\n\nimpl T for B {\n    fn f(&amp;mut self, parent: &amp;mut A&lt;B&gt;) {\n        println!(\"B::f\");\n        parent.f();\n    }\n}\n\nfn main() {\n    let objA = A::new(B::new());\n\n    // I want call sequence -&gt; A::call() -&gt; B::f() -&gt; A::f()\n    objA.call();\n}\n</code></pre>\n\n<p>Note that i require mutability in all the functions although in example above it might seem that <code>&amp;mut self</code> in most function parameters don't make much sense. How do it do this in Rust?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1430130967, "post_id": 29892074, "comment_id": 47909649, "body": "Convention would name the function <code>get_vec_slice</code>, and would also largely refrain from such a trivial method. It would also probably take <code>&amp;[f64]</code> rather than <code>&amp;Vec&lt;f64&gt;</code>; <code>&amp;Vec&lt;f64&gt;</code> is silently coercible to <code>&amp;[f64]</code>, so there is no loss there. It would also for convenience probably be made generic instead of specific to <code>f64</code>\u2026"}, {"owner": {"reputation": 900, "user_id": 602721, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be8ca2dd9f7a396f2f1e0cadcd378aa3?s=128&d=identicon&r=PG", "display_name": "tomsgd", "link": "https://stackoverflow.com/users/602721/tomsgd"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430134828, "post_id": 29892074, "comment_id": 47912213, "body": "Cheers for the advice. I&#39;m still battling with the Rust compiler so much, I haven&#39;t really begun to absorb the conventions and idioms."}], "answers": [{"comments": [{"owner": {"reputation": 900, "user_id": 602721, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be8ca2dd9f7a396f2f1e0cadcd378aa3?s=128&d=identicon&r=PG", "display_name": "tomsgd", "link": "https://stackoverflow.com/users/602721/tomsgd"}, "edited": false, "score": 0, "creation_date": 1430130714, "post_id": 29892395, "comment_id": 47909466, "body": "Thanks. I should have spotted that"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 14, "last_activity_date": 1526398638, "last_edit_date": 1526398638, "creation_date": 1430128274, "answer_id": 29892395, "question_id": 29892074, "link": "https://stackoverflow.com/questions/29892074/cannot-return-a-vector-slice-opsrangei32-is-not-implemented/29892395#29892395", "title": "Cannot return a vector slice - ops::Range&lt;i32&gt; is not implemented", "body": "<p>The error messages tells you that you can't index into a vector with values of type <code>u32</code>. <code>Vec</code> indices have to be of type <code>usize</code>, so you have to cast your indices to that type like this:</p>\n\n<pre><code>vec[start as usize..(start + len) as usize]\n</code></pre>\n\n<p>or just change the type of the <code>start</code> and <code>len</code> arguments to <code>usize</code>.</p>\n\n<p>You also <a href=\"https://stackoverflow.com/q/27879161/155423\">need to take a reference to the result</a>:</p>\n\n<pre><code>&amp;vec[start as usize..(start + len) as usize]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3377, "user_id": 3405842, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/iiJWf.jpg?s=128&g=1", "display_name": "GrvTyagi", "link": "https://stackoverflow.com/users/3405842/grvtyagi"}, "is_accepted": false, "score": 2, "last_activity_date": 1577860587, "creation_date": 1577860587, "answer_id": 59550452, "question_id": 29892074, "link": "https://stackoverflow.com/questions/29892074/cannot-return-a-vector-slice-opsrangei32-is-not-implemented/59550452#59550452", "title": "Cannot return a vector slice - ops::Range&lt;i32&gt; is not implemented", "body": "<p><strong>Why do we need usize:</strong></p>\n\n<p><code>usize</code> gives you the guarantee to be always big enough to hold any pointer or any offset in a data structure, while <code>u32</code> can be too small on some architectures.</p>\n\n<p>As an example, on a 32 bit x86 computer, <code>usize = u32</code>, while on x86_64 computers, <code>usize = u64</code>.</p>\n"}], "owner": {"reputation": 900, "user_id": 602721, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/be8ca2dd9f7a396f2f1e0cadcd378aa3?s=128&d=identicon&r=PG", "display_name": "tomsgd", "link": "https://stackoverflow.com/users/602721/tomsgd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5735, "favorite_count": 1, "accepted_answer_id": 29892395, "answer_count": 2, "score": 5, "last_activity_date": 1577860587, "creation_date": 1430127472, "last_edit_date": 1526398557, "question_id": 29892074, "link": "https://stackoverflow.com/questions/29892074/cannot-return-a-vector-slice-opsrangei32-is-not-implemented", "title": "Cannot return a vector slice - ops::Range&lt;i32&gt; is not implemented", "body": "<p>Why does the following Rust code give an error?</p>\n\n<pre><code>fn getVecSlice(vec: &amp;Vec&lt;f64&gt;, start: i32, len: i32) -&gt; &amp;[f64] {\n    vec[start..start + len]\n}\n</code></pre>\n\n<p>The error message I get is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait `core::ops::Index&lt;core::ops::Range&lt;i32&gt;&gt;` is not implemented for the type `collections::vec::Vec&lt;f64&gt;` [E0277]\n</code></pre>\n\n<p>In later versions of Rust, I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::ops::Range&lt;i32&gt;: std::slice::SliceIndex&lt;[f64]&gt;` is not satisfied\n --&gt; src/main.rs:2:9\n  |\n2 |         vec[start..start + len]\n  |         ^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `std::slice::SliceIndex&lt;[f64]&gt;` is not implemented for `std::ops::Range&lt;i32&gt;`\n  = note: required because of the requirements on the impl of `std::ops::Index&lt;std::ops::Range&lt;i32&gt;&gt;` for `std::vec::Vec&lt;f64&gt;`\n</code></pre>\n\n<p>I'm trying to simulate a 2 dimensional matrix using the <code>Vec</code> type and return references to the different rows of the matrix.What is the best way to achieve this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1430115677, "post_id": 29888088, "comment_id": 47900737, "body": "That\u2019s code from some time ago. <code>std::io</code> has been rewritten since then."}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 1, "last_activity_date": 1430114255, "creation_date": 1430114255, "answer_id": 29888217, "question_id": 29888088, "link": "https://stackoverflow.com/questions/29888088/cannot-compile-code-that-uses-stdio-there-is-no-file-in-stdio/29888217#29888217", "title": "Cannot compile code that uses std::io - There is no `File` in `std::io`", "body": "<p>You probably want to import <code>std::fs::File</code> and <code>std::io::BufReader</code> (You'll also need to change <code>BufferedReader</code> to <code>BufReader</code> in your code).</p>\n"}, {"tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 9, "last_activity_date": 1592190007, "last_edit_date": 1592190007, "creation_date": 1430131480, "answer_id": 29893524, "question_id": 29888088, "link": "https://stackoverflow.com/questions/29888088/cannot-compile-code-that-uses-stdio-there-is-no-file-in-stdio/29893524#29893524", "title": "Cannot compile code that uses std::io - There is no `File` in `std::io`", "body": "<p>Some things to note:</p>\n\n<ul>\n<li><code>BufferedReader</code> doesn't exist, there is only <code>BufReader</code>. </li>\n<li><code>std::io::File</code> is actually <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"nofollow noreferrer\"><code>std::fs::File</code></a>.</li>\n<li><code>Path</code> import is missing.</li>\n<li>Opening <code>File</code> can fail with error and has to be handled or unwrapped. In a small script <code>unwrap</code> is fine, but it means if the file is missing your program aborts.</li>\n<li>Reading lines, isn't a mutable operation, so compiler will warn you of it being needlessly mutable.</li>\n<li>To use <code>lines</code> you need to import <code>use std::io::File</code>.</li>\n</ul>\n\n<p>Finished code:</p>\n\n<pre><code>  use std::io::{BufReader,BufRead};\n  use std::fs::File;\n  use std::path::Path;\n\n  fn main() {\n      let path = Path::new(\"file_test.txt\");\n      let file = BufReader::new(File::open(&amp;path).unwrap());\n      for line in file.lines() {\n          print!(\"{}\", line.unwrap());\n      }\n  }\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "edited": false, "score": 0, "creation_date": 1430131760, "post_id": 29893572, "comment_id": 47910174, "body": "Oops Daniel was faster and his answer is more detailed than mine"}], "tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 3, "last_activity_date": 1430131602, "creation_date": 1430131602, "answer_id": 29893572, "question_id": 29888088, "link": "https://stackoverflow.com/questions/29888088/cannot-compile-code-that-uses-stdio-there-is-no-file-in-stdio/29893572#29893572", "title": "Cannot compile code that uses std::io - There is no `File` in `std::io`", "body": "<p>In addition to what llogiq said</p>\n\n<ul>\n<li><code>use std::io::BufferedReader</code> => <code>use std::io::{BufReader, BufRead}</code></li>\n<li><code>use std::io::File</code> => <code>use std::fs::File</code></li>\n<li><a href=\"http://doc.rust-lang.org/nightly/std/fs/struct.File.html#method.open\" rel=\"nofollow\"><code>File::open</code></a> returns a <code>Result</code> so you probably need to <code>unwrap</code> it for instance</li>\n</ul>\n\n<p><a href=\"http://is.gd/2AUQC6\" rel=\"nofollow\">playpen link</a> ... which panics because it <code>unwrap</code>s on unknown file</p>\n"}], "owner": {"reputation": 609, "user_id": 1959071, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/d4b5f7c8252a0f3fa11e20ae9437b5fc?s=128&d=identicon&r=PG", "display_name": "SherMM", "link": "https://stackoverflow.com/users/1959071/shermm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1238, "favorite_count": 2, "accepted_answer_id": 29893524, "answer_count": 3, "score": 2, "last_activity_date": 1592190007, "creation_date": 1430113691, "last_edit_date": 1430140246, "question_id": 29888088, "link": "https://stackoverflow.com/questions/29888088/cannot-compile-code-that-uses-stdio-there-is-no-file-in-stdio", "title": "Cannot compile code that uses std::io - There is no `File` in `std::io`", "body": "<p>I am pretty new to Rust, and I was just trying to get familiar with the io library by performing a basic line-by-line read from a text file. The example I was trying to compile was straight from the website. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io::BufferedReader;\nuse std::io::File;\n\nfn main() {\n    let path = Path::new(\"file_test.txt\");\n    let mut file = BufferedReader::new(File::open(&amp;path));\n    for line in file.lines() {\n        print!(\"{}\", line.unwrap());\n    }\n}\n</code></pre>\n\n<p>When I tried to compile it with rustc, these are the errors I received:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>io_test.rs:1:5: 1:28 error: unresolved import `std::io::BufferedReader`. There is no `BufferedReader` in `std::io`\nio_test.rs:1 use std::io::BufferedReader;\n                 ^~~~~~~~~~~~~~~~~~~~~~~\nio_test.rs:2:5: 2:18 error: unresolved import `std::io::File`. There is no `File` in `std::io`\nio_test.rs:2 use std::io::File;\n                 ^~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I am using Ubuntu 14.04, and I have no idea if that's part of the problem. I really appreciate any help. Perhaps its just some simple error or mistake on my part. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1430100852, "post_id": 29886098, "comment_id": 47896275, "body": "Hm, <code>url_str</code> doesn&#39;t seem to be an interpolated string? Could you add some more details, e.g. how <code>c</code> is created?"}, {"owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1430101239, "post_id": 29886098, "comment_id": 47896367, "body": "hi!, I&#39;ve added the fn that i use"}], "answers": [{"comments": [{"owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "edited": false, "score": 0, "creation_date": 1430101991, "post_id": 29886138, "comment_id": 47896557, "body": "awesome that worked! I&#39;m confused with <code>String</code> and <code>&amp;str</code> will update my post. thank you!"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1430101605, "last_edit_date": 1430101605, "creation_date": 1430101068, "answer_id": 29886138, "question_id": 29886098, "link": "https://stackoverflow.com/questions/29886098/how-do-i-send-an-interpolated-string-on-a-channel/29886138#29886138", "title": "How do I send an interpolated string on a channel?", "body": "<p>With elided lifetimes and types reinstated, here\u2019s what you have:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn construct_url&lt;'a, 'b, 'c&gt;(c: &amp;'a Sender&lt;&amp;'b str&gt;, city_code: &amp;'c str) {\n    let url_str: String = format!(\"http://api.openweathermap.org/data/2.5/weather?q={}\", city_code);\n    println!(\"{}\", url_str);\n    c.send(&amp;url_str);\n}\n</code></pre>\n\n<p>Bear in mind the distinctions between <code>String</code> and <code>&amp;str</code>: <code>&amp;str</code> is a string slice, a reference to a string that someone else owns; <code>String</code> is the owned variety.</p>\n\n<p><code>'b</code> is necessarily at least as long as the entire function body\u2014any string you construct inside the function will not live long enough for <code>'b</code>. Therefore your sender will need to send a <code>String</code>, not a <code>&amp;str</code>.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn construct_url(c: &amp;Sender&lt;String&gt;, city_code: &amp;str) {\n    let url_str = format!(\"http://api.openweathermap.org/data/2.5/weather?q={}\", city_code);\n    println!(\"{}\", url_str);\n    c.send(url_str);\n}\n</code></pre>\n"}], "owner": {"reputation": 1763, "user_id": 1175415, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9d2e16819b10749cd775f0dfc5db1635?s=128&d=identicon&r=PG", "display_name": "Hokutosei", "link": "https://stackoverflow.com/users/1175415/hokutosei"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 467, "favorite_count": 0, "accepted_answer_id": 29886138, "answer_count": 1, "score": 2, "last_activity_date": 1430140420, "creation_date": 1430100789, "last_edit_date": 1430140420, "question_id": 29886098, "link": "https://stackoverflow.com/questions/29886098/how-do-i-send-an-interpolated-string-on-a-channel", "title": "How do I send an interpolated string on a channel?", "body": "<p>How do I store a variable in a string? I've read the examples, but they are all just <code>println!()</code>.</p>\n\n<pre><code>//javascript\nvar url_str = \"http://api.weather/city\" + city_code + \"/get\";\n\n//go\nurlStr := fmt.Sprintf(\"http://api.weather/%s/get\", cityCode)\n\n// Edit: Rust \nlet url_str = format!(\"http://api.openweathermap.org/data/2.5/weather?q={}\", city_code);\n</code></pre>\n\n<p>I am using <code>tx.send()</code> and want to send an interpolated string on the channel like this:</p>\n\n<pre><code>let url_str = \"http://api.weather\";\nc.send(url_str);\n</code></pre>\n\n<p>but I get an error</p>\n\n<pre><code>src/http_get/http_getter.rs:21:17: 21:24 error: `url_str` does not live long enough\nsrc/http_get/http_getter.rs:21         c.send(&amp;url_str);\n                                           ^~~~~~~\n</code></pre>\n\n<p>Here is the function that I am trying to implement for constructing the URL:</p>\n\n<pre><code>pub fn construct_url(c: &amp;Sender&lt;String&gt;, city_code: &amp;str) {\n        let url_str = format!(\"http://api.openweathermap.org/data/2.5/weather?q={}\", city_code);\n        println!(\"{}\", url_str);\n        c.send(url_str);\n}\n</code></pre>\n"}, {"tags": ["pattern-matching", "rust"], "answers": [{"comments": [{"owner": {"reputation": 8775, "user_id": 821110, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/fa6fca5f613944238a91d2daeba67b9d?s=128&d=identicon&r=PG", "display_name": "W.K.S", "link": "https://stackoverflow.com/users/821110/w-k-s"}, "edited": false, "score": 3, "creation_date": 1452369720, "post_id": 29885937, "comment_id": 57142696, "body": "So basically what the compiler is saying is &quot;Hey, I&#39;m happy to move &#39;e&#39; into the guard statement, but if the guard statement fails, there&#39;s no way I can move &#39;e&#39; back. So the only way this is gonna work is if you let me borrow &#39;e&#39; to check the guard statement.&quot;"}, {"owner": {"reputation": 5869, "user_id": 2543666, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4e7c6887ce958029525412ab297b5895?s=128&d=identicon&r=PG", "display_name": "Thayne", "link": "https://stackoverflow.com/users/2543666/thayne"}, "edited": false, "score": 8, "creation_date": 1516429443, "post_id": 29885937, "comment_id": 83693106, "body": "What if I don&#39;t need ownership in the guard expression, but do in the body?"}, {"owner": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "reply_to_user": {"reputation": 5869, "user_id": 2543666, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/4e7c6887ce958029525412ab297b5895?s=128&d=identicon&r=PG", "display_name": "Thayne", "link": "https://stackoverflow.com/users/2543666/thayne"}, "edited": false, "score": 2, "creation_date": 1547774149, "post_id": 29885937, "comment_id": 95317504, "body": "@Thayne apparently you need to use Rust 2018 edition with <code>#![feature(bind_by_move_pattern_guards)]</code>, wait until the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0107-pattern-guards-with-bind-by-move.md\" rel=\"nofollow noreferrer\">RFC</a> is fully implemented, or move the guard into the match body."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1571084056, "post_id": 29885937, "comment_id": 103115016, "body": "RFC now is stabilized: <a href=\"https://github.com/rust-lang/rust/pull/63118\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/63118</a>"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 34, "last_activity_date": 1430099906, "last_edit_date": 1430099906, "creation_date": 1430099576, "answer_id": 29885937, "question_id": 29885867, "link": "https://stackoverflow.com/questions/29885867/cannot-bind-by-move-into-a-pattern-guard/29885937#29885937", "title": "cannot bind by-move into a pattern guard", "body": "<p>In this case, you can bind by reference:</p>\n\n<pre><code>let res = match Some(\"hi\".to_string()) {\n    Some(ref s) if s.len() == 0 =&gt; 1,\n    _ =&gt; 3\n};\n</code></pre>\n\n<p>The general problem here is that binding by move must disallow further uses of the original variable, as moving out invalidates the data. If the guard is <code>false</code>, then the original variable needs to be used to match against the later patterns, which is illegal due to the move.</p>\n\n<p>For example:</p>\n\n<pre><code>fn f(x: Option&lt;String&gt;) {\n    match x {\n        Some(a) if { drop(a); false } =&gt; println!(\"impossible\"),\n        Some(b) =&gt; println!(\"whoops, {}\", b),\n        None =&gt; println!(\"none\"),\n    }\n}\n</code></pre>\n\n<p>If <code>x</code> is <code>Some</code>, the internal <code>String</code> is moved out and deallocated when deciding if <code>a</code> arm should be taken, but that same <code>String</code> is immediately used again for the <code>b</code> arm once the <code>a</code> arm is rejected.</p>\n"}], "owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5188, "favorite_count": 3, "accepted_answer_id": 29885937, "answer_count": 1, "score": 22, "last_activity_date": 1430099906, "creation_date": 1430099087, "question_id": 29885867, "link": "https://stackoverflow.com/questions/29885867/cannot-bind-by-move-into-a-pattern-guard", "title": "cannot bind by-move into a pattern guard", "body": "<p>How do I fix the problem of <code>cannot bind by-move into a pattern guard [E0008]</code> on <code>s</code>?</p>\n\n<pre><code>let res = match Some(\"hi\".to_string()) {\n    Some(s) if s.len() == 0 =&gt; 1,\n    _ =&gt; 3\n};\n</code></pre>\n\n<p>Is there anyway of changing it without putting the condition in the arm?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1430100029, "last_edit_date": 1430100029, "creation_date": 1430099541, "answer_id": 29885933, "question_id": 29885638, "link": "https://stackoverflow.com/questions/29885638/cannot-insert-reference-in-hashmap-if-it-is-declared-after-the-data-i-am-inserti/29885933#29885933", "title": "Cannot insert reference in HashMap if it is declared after the data I am inserting", "body": "<p>The type of <code>hs</code> is <code>HashSet&lt;&amp;'\u03c1 BitVec&gt;</code>\u2014but what is <code>'\u03c1</code>?</p>\n\n<p>The error message explains it a bit:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:7:33: 17:2 note: reference must be valid for the block suffix following statement 0 at 7:32...\n&lt;anon&gt;:7     let mut hs = HashSet::new();\n</code></pre>\n\n<p>It is saying that the reference must be legit for the rest of the block after line 7, where the <code>HashSet</code> is defined.</p>\n\n<p>That, then, is what <code>'\u03c1</code> is: the rest of the block after line 7.</p>\n\n<p>Think of it this way: when the <code>HashSet&lt;&amp;BitVec&gt;</code> is created, would it be legitimate to <em>immediately</em> insert the values? No, because they are references to things that do not exist yet.</p>\n\n<p>If you were inserting the <code>BitVec</code>s rather than references to them, the problem would go away, for while the lifetime of <code>&amp;'\u03c1 BitVec</code> is <code>'\u03c1</code>, the lifetime of <code>BitVec</code> is <code>'static</code>, as it contains no non-static data, and so inserting <code>hs.insert(BitVec::from_elem(10, false))</code> would be just fine.</p>\n\n<p>Now why could the compiler not allow the earlier definition of <code>hs</code>? When it infers the type, it must be a type that is legal where it is. If it were to infer for the lifetime \u201cafter line 13\u201d when the <code>hs</code> declaration is on line 7, you would have something that is not legal at the time of its declaration. In this particular case nothing is done with the <code>T</code> of <code>HashSet&lt;T&gt;</code> in a <code>new</code> call, so you might say that theoretically the compiler could ignore the fact that it\u2019s dealing with an illegal type that will become legal by the time we actually use it, but that would be downright evil and inconsistent (changes to the body of a function could potentially affect callers) so Rust forbids the entire class of behaviour.</p>\n"}], "owner": {"reputation": 95, "user_id": 1510870, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e95a16f622331110642ea65f3f3e848?s=128&d=identicon&r=PG", "display_name": "Mark M", "link": "https://stackoverflow.com/users/1510870/mark-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 157, "favorite_count": 1, "accepted_answer_id": 29885933, "answer_count": 1, "score": 2, "last_activity_date": 1430140620, "creation_date": 1430097211, "last_edit_date": 1430140620, "question_id": 29885638, "link": "https://stackoverflow.com/questions/29885638/cannot-insert-reference-in-hashmap-if-it-is-declared-after-the-data-i-am-inserti", "title": "Cannot insert reference in HashMap if it is declared after the data I am inserting", "body": "<p>I am totally confused about lifetimes after this error:</p>\n\n<pre><code>#![feature(collections)]\nuse std::collections::BitVec;\nuse std::collections::HashSet;\n\nfn main() {\n    let mut hs = HashSet::new();\n\n    let  zeros :  BitVec = BitVec::from_elem(10,false);\n    let  ones  :  BitVec = BitVec::from_elem(10,true);    \n    println!(\"{:?}\\n{:?}\",zeros,ones);\n    // let mut hs = HashSet::new(); // works only if move this line to #7\n\n    hs.insert(&amp;zeros);\n    hs.insert(&amp;ones);\n    println!(\"{:?}\",hs);\n}\n</code></pre>\n\n<p>This gives me error:</p>\n\n<pre><code>&lt;anon&gt;:14:16: 14:21 error: `zeros` does not live long enough\n&lt;anon&gt;:14     hs.insert(&amp;zeros);\n                         ^~~~~\n&lt;anon&gt;:7:33: 17:2 note: reference must be valid for the block suffix following statement 0 at 7:32...\n&lt;anon&gt;:7     let mut hs = HashSet::new();\n</code></pre>\n\n<p>But if I declare <code>hs</code> later, right after <code>zeros</code> and <code>ones</code>, everything works fine:</p>\n\n<pre><code>#![feature(collections)]\nuse std::collections::BitVec;\nuse std::collections::HashSet;\n\nfn main() {\n    // let mut hs = HashSet::new();\n\n    let  zeros :  BitVec = BitVec::from_elem(10,false);\n    let  ones  :  BitVec = BitVec::from_elem(10,true);    \n    println!(\"{:?}\\n{:?}\",zeros,ones);\n    let mut hs = HashSet::new(); // works only if move this line to #7\n\n    hs.insert(&amp;zeros);\n    hs.insert(&amp;ones);\n    println!(\"{:?}\",hs);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>0000000000\n1111111111\n{0000000000, 1111111111}\nProgram ended.\n</code></pre>\n\n<p>You can try code <a href=\"http://is.gd/UhFLmc\" rel=\"nofollow\">here</a>. </p>\n\n<p>--</p>\n\n<p>I asked this question on IRC got the following answer:</p>\n\n<blockquote>\n  <p>talchas: basically objects are destroyed line by line (well, statement\n  by statement) in reverse order they were created,so if the bitsets\n  were destroyed before the hashset, then the hashset's destructor would\n  run with invalid pointers in it. if you declare them afterwards they\n  get destroyed before the hashset does and you have references to them\n  in the hashset.</p>\n  \n  <p>so for this in particular, there's\n  <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md</a>\n  and probably some discussion in pull requests and such</p>\n  \n  <p>reem: The RFC that introduced it goes into great detail\n  <a href=\"https://github.com/rust-lang/rfcs/blob/f78aa94fd44c890ef5091a646db4d4159d21e1e2/text/0000-sound-generic-drop.md\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/blob/f78aa94fd44c890ef5091a646db4d4159d21e1e2/text/0000-sound-generic-drop.md</a>,\n  but might not be the best thing to read to just get a quick\n  understand.</p>\n</blockquote>\n"}, {"tags": ["rust", "ord"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1430140748, "post_id": 29884402, "comment_id": 47916460, "body": "<i>I&#39;ve seen a question similar to this one but</i> - please <b>include links to these questions</b> once you&#39;ve found them. That allows answerers to get a better sense of what explanations you have already read that don&#39;t make sense, otherwise we are at risk of just repeating the same thing you already know, wasting everyone&#39;s time! It is also nice for future searchers, as they can easily go to related questions."}], "answers": [{"comments": [{"owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "edited": false, "score": 0, "creation_date": 1430095981, "post_id": 29884582, "comment_id": 47895017, "body": "Thank you! One more thing. If I wanted to manually calculate cmp, what would I return to signify greater, less, or equal. I&#39;ve tried doing the above and returning Ordering::Less, Ordering::Greater, and Ordering::Equal when appropriate but the compiler states that cmp expects output type () instead of core::cmp::Ordering. This only seems to happen in the Less and Greater cases that occur in the if statement"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "edited": false, "score": 1, "creation_date": 1430097975, "post_id": 29884582, "comment_id": 47895505, "body": "Oh yeah, what you wanted there was <code>if size1 &lt; size2 { Ordering::Less } else if size1 &gt; size2 { Ordering::Greater } else { Ordering::Equal }</code>. An <code>if</code> expression has a type, you had effectively three statements in a row, the values of the first two of which were not being used, and which had inconsistent types as well, for they had an implicit <code>else { }</code> which is of type <code>()</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 30, "last_activity_date": 1430088966, "creation_date": 1430088966, "answer_id": 29884582, "question_id": 29884402, "link": "https://stackoverflow.com/questions/29884402/how-do-i-implement-ord-for-a-struct/29884582#29884582", "title": "How do I implement Ord for a struct?", "body": "<p>The definition of <a href=\"http://doc.rust-lang.org/std/cmp/trait.Ord.html\"><code>Ord</code></a> is this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Ord: Eq + PartialOrd&lt;Self&gt; {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering;\n}\n</code></pre>\n\n<p>Any type that implements <code>Ord</code> must also implement <code>Eq</code> and <code>PartialOrd&lt;Self&gt;</code>. You must implement these traits for <code>SomeNum</code>.</p>\n\n<p>Incidentally, your implementation looks like being the wrong way round; if <code>self.value</code> is all you are comparing, <code>self.value &gt; other.value</code> should be <code>Greater</code>, not <code>Less</code>.</p>\n\n<p>You can use the <code>Ord</code> implementation on <code>u32</code> to assist, should you desire it: <code>self.value.cmp(other.value)</code>.</p>\n\n<p>You should also take into account that <code>Ord</code> is a <em>total</em> ordering. If your <code>PartialEq</code> implementation, for example, takes <code>name</code> into consideration, your <code>Ord</code> implementation must also. It might be well to use a tuple for convenience (indicating that the most important field in the comparison is <code>value</code>, but that if they are the same, <code>name</code> should be taken into account), something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct SomeNum {\n    name: String,\n    value: u32,\n}\n\nimpl Ord for SomeNum {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {\n        (self.value, &amp;self.name).cmp(&amp;(other.value, &amp;other.name))\n    }\n}\n\nimpl PartialOrd for SomeNum {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl PartialEq for SomeNum {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        (self.value, &amp;self.name) == (other.value, &amp;other.name)\n    }\n}\n\nimpl Eq for SomeNum { }\n</code></pre>\n\n<p>If you\u2019re doing it like this, you might as well reorder the fields and use <code>#[derive]</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(PartialEq, Eq, PartialOrd, Ord)]\nstruct SomeNum {\n    value: u32,\n    name: String,\n}\n</code></pre>\n\n<p>This will expand to basically the same thing.</p>\n"}], "owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7638, "favorite_count": 4, "accepted_answer_id": 29884582, "answer_count": 1, "score": 21, "last_activity_date": 1526162074, "creation_date": 1430087682, "last_edit_date": 1526162074, "question_id": 29884402, "link": "https://stackoverflow.com/questions/29884402/how-do-i-implement-ord-for-a-struct", "title": "How do I implement Ord for a struct?", "body": "<p>I've seen a question similar to this one, but no one that tells me exactly how to implement <code>Ord</code> for a struct. For example, the following:</p>\n\n<pre><code>struct SomeNum {\n    name: String,\n    value: u32,\n}\n\nimpl Ord for SomeNum {\n    fn cmp(&amp;self, other:&amp;Self) -&gt; Ordering {\n        let size1 = self.value;\n        let size2 = other.value;\n        if size1 &gt; size2 {\n            Ordering::Less\n        }\n        if size1 &lt; size2 {\n            Ordering::Greater\n        }\n        Ordering::Equal\n    }\n}\n</code></pre>\n\n<p>This gives me the error:</p>\n\n<pre><code>error: the trait `core::cmp::Eq` is not implemented for the type `SomeNum` [E0277]\n</code></pre>\n\n<p>How would I fix this? I have tried changing the implementation to:</p>\n\n<pre><code>impl Ord for SomeNum where SomeNum: PartialOrd + PartialEq + Eq {...}\n</code></pre>\n\n<p>and adding the appropriate <code>partial_cmp</code> and <code>eq</code> functions but it gives me the error that both those methods are not a member of <code>Ord</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1430089885, "post_id": 29879372, "comment_id": 47893464, "body": "Convention would have <code>newData</code> as <code>Data::new</code>, by the way."}], "answers": [{"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 4, "last_activity_date": 1430070319, "last_edit_date": 1430070319, "creation_date": 1430066898, "answer_id": 29880508, "question_id": 29879372, "link": "https://stackoverflow.com/questions/29879372/expected-trait-coreopsfnmut-found-type-parameter/29880508#29880508", "title": "expected trait core::ops::FnMut, found type parameter", "body": "<p>You need to help rust by spelling out the cast from <code>Box&lt;F&gt;</code> to <code>Box&lt;FnMut&gt;</code> at least partly.</p>\n\n<p>Because <code>Box&lt;Trait&gt;</code> implies <code>Box&lt;Trait + 'static&gt;</code>, you need to add the bound <code>F: 'static</code> too.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Data {\n    func: Option&lt;Box&lt;FnMut(String) + Send&gt;&gt;\n}\n\nfn new_data&lt;F&gt;(func: Option&lt;Box&lt;F&gt;&gt;) -&gt; Data where\n    F: FnMut(String) + Send + 'static\n{\n    Data {\n        func: func.map(|x| x as Box&lt;_&gt;)\n    }\n}\n\nfn main() {\n    let _ = new_data(Some(Box::new(|msg|{ })));\n}\n</code></pre>\n\n<p>To note here is that <code>Box&lt;F&gt;</code> and <code>Box&lt;FnMut ...&gt;</code> are not the same type, but the former will convert to the latter automatically in most cases. Inside the Option here we just needed to help the conversion by writing an explicit cast.</p>\n"}, {"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1430075650, "last_edit_date": 1430075650, "creation_date": 1430070186, "answer_id": 29881129, "question_id": 29879372, "link": "https://stackoverflow.com/questions/29879372/expected-trait-coreopsfnmut-found-type-parameter/29881129#29881129", "title": "expected trait core::ops::FnMut, found type parameter", "body": "<p>While the answer by user139873 is absolutely correct, I'd like to add that it is more idiomatic to pass the closure into the function by value and box it in the function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Data {\n    func: Option&lt;Box&lt;FnMut(String) + Send&gt;&gt;\n}\n\nfn new_data&lt;F&gt;(func: Option&lt;F&gt;) -&gt; Data where\n        F: FnMut(String) + Send + 'static {\n    Data {\n        func: func.map(|f| Box::new(f) as Box&lt;_&gt;)\n    }\n}\n\nfn main() {\n    let _ = new_data(Some(|msg| {}));\n}\n</code></pre>\n\n<p>This way you place fewer restrictions on the caller, and their code becomes simpler.</p>\n"}], "owner": {"reputation": 520, "user_id": 884498, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88109a4658cfee0b9d680f48f073d9d4?s=128&d=identicon&r=PG", "display_name": "Nathan Fox", "link": "https://stackoverflow.com/users/884498/nathan-fox"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1627, "favorite_count": 0, "accepted_answer_id": 29880508, "answer_count": 2, "score": 4, "last_activity_date": 1430075650, "creation_date": 1430061082, "last_edit_date": 1430070363, "question_id": 29879372, "link": "https://stackoverflow.com/questions/29879372/expected-trait-coreopsfnmut-found-type-parameter", "title": "expected trait core::ops::FnMut, found type parameter", "body": "<p>I don't understand why the code below does not compile. It seems like rust is just not 'expanding' the type parameter, since it looks like it matches to me.</p>\n\n<p>Code (rust playpen: <a href=\"http://is.gd/gC82I4\" rel=\"nofollow\">http://is.gd/gC82I4</a>)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::sync::{Arc, Mutex};\n\nstruct Data{\n    func: Option&lt;Box&lt;FnMut(String) + Send&gt;&gt;\n}\n\nfn newData&lt;F&gt;(func: Option&lt;Box&lt;F&gt;&gt;) -&gt; Data\nwhere F: FnMut(String) + Send{\n    Data{\n        func: func\n    }\n}\n\nfn main(){\n    let _ = newData(Some(Box::new(|msg|{})));\n}\n</code></pre>\n\n<p>Error</p>\n\n<pre><code>&lt;anon&gt;:10:15: 10:19 error: mismatched types:\n expected `core::option::Option&lt;Box&lt;core::ops::FnMut(collections::string::String) + Send&gt;&gt;`,\n    found `core::option::Option&lt;Box&lt;F&gt;&gt;`\n(expected trait core::ops::FnMut,\n    found type parameter) [E0308]\n&lt;anon&gt;:10         func: func\n                        ^~~~\nerror: aborting due to previous error\nplaypen: application terminated with error code 101\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11809, "user_id": 319084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d7588bce02f53e22ff6cf5c1d4866eec?s=128&d=identicon&r=PG", "display_name": "Dan Simon", "link": "https://stackoverflow.com/users/319084/dan-simon"}, "edited": false, "score": 0, "creation_date": 1430067302, "post_id": 29879312, "comment_id": 47885272, "body": "Looks like the associated type is working for me.  I did see the issue and updated docs about PhantomData and still think it&#39;s pretty weird, but at least I can avoid it for now :)"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1430170261, "post_id": 29879312, "comment_id": 47935287, "body": "We might look into making it less weird in the future, but for now, it&#39;s a fairly low-level kind of thing, for sure."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 4, "last_activity_date": 1546172029, "last_edit_date": 1546172029, "creation_date": 1430060855, "answer_id": 29879312, "question_id": 29878950, "link": "https://stackoverflow.com/questions/29878950/how-can-i-have-an-unused-type-parameter-in-a-struct/29879312#29879312", "title": "How can I have an unused type parameter in a struct?", "body": "<p>Depending on how your real <code>Foo</code> is, you might be able to work with associated types instead, like this:</p>\n\n<pre><code>trait Foo{ type T; }\n\nstruct Bar&lt;B: Foo&gt; {\n  b: B,\n}\n</code></pre>\n\n<p>otherwise (if you do need to have the type parameter on <code>Foo</code>), <code>PhantomData</code> is indeed the way to go. </p>\n\n<p>You were not the only person finding <code>PhantomData</code>'s docs confusing (see <a href=\"https://github.com/rust-lang/rust/issues/22914\" rel=\"nofollow noreferrer\"><code>PhantomData</code> is incomprehensible</a>). As a result, the <a href=\"http://doc.rust-lang.org/stable/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\">documentation for <code>PhantomData</code></a> has been <a href=\"https://github.com/rust-lang/rust/pull/23925\" rel=\"nofollow noreferrer\">recently improved by Steve Klabnik</a> and now it does mention this scenario explicitly (and not just unsafe code).</p>\n"}, {"tags": [], "owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "is_accepted": false, "score": 2, "last_activity_date": 1430061639, "creation_date": 1430061639, "answer_id": 29879485, "question_id": 29878950, "link": "https://stackoverflow.com/questions/29878950/how-can-i-have-an-unused-type-parameter-in-a-struct/29879485#29879485", "title": "How can I have an unused type parameter in a struct?", "body": "<p>It seems that what you want is the following: for <em>any</em> type <code>A</code>, <code>B</code> must implement <code>Foo&lt;A&gt;</code>. That suggests that you rely on functionality of <code>Foo</code> that does not depend on the value of <code>A</code>, which means that you can change <code>Foo</code> to have an associated type rather than a type parameter.</p>\n\n<pre><code>trait Foo&lt;T&gt; { }\n</code></pre>\n\n<p>will become</p>\n\n<pre><code>trait Foo {\n    type T;\n}\n</code></pre>\n\n<p>Then you can remove the <code>A</code> type parameter everywhere and require just <code>B: Foo</code>.</p>\n\n<p>To elaborate on <code>PhantomData</code>, it has nothing to do with unsafe code, it is used to determine variance of a type parameter when the compiler cannot infer it. See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0738-variance.md\" rel=\"nofollow\">RFC 738</a> for more information on variance and <code>PhantomData</code>.</p>\n"}], "owner": {"reputation": 11809, "user_id": 319084, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d7588bce02f53e22ff6cf5c1d4866eec?s=128&d=identicon&r=PG", "display_name": "Dan Simon", "link": "https://stackoverflow.com/users/319084/dan-simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 593, "favorite_count": 0, "accepted_answer_id": 29879312, "answer_count": 2, "score": 2, "last_activity_date": 1546172029, "creation_date": 1430058787, "last_edit_date": 1430140819, "question_id": 29878950, "link": "https://stackoverflow.com/questions/29878950/how-can-i-have-an-unused-type-parameter-in-a-struct", "title": "How can I have an unused type parameter in a struct?", "body": "<p>I'm trying to update some older code I wrote that basically looks like:</p>\n\n<pre><code>trait Foo&lt;T&gt;{}\n\nstruct Bar&lt;A, B: Foo&lt;A&gt;&gt;{\n  b: B\n}\n</code></pre>\n\n<p>This used to work totally fine, but now I am getting a compile error:</p>\n\n<pre><code>src/test.rs:19:12: 19:13 error: parameter `A` is never used\nsrc/test.rs:19 struct Bar&lt;A, B: Foo&lt;A&gt;&gt; {\n                          ^\nsrc/test.rs:19:12: 19:13 help: consider removing `A` or using a marker such as `core::marker::PhantomData`\n</code></pre>\n\n<p>So I can try to remove the type parameter and get something like this:</p>\n\n<pre><code>struct Bar&lt;A&gt;{\n  b: Foo&lt;A&gt;\n}\n</code></pre>\n\n<p>however this is not really what I want.  In my original code <code>B</code> resolves to a sized type, but now <code>Foo&lt;A&gt;</code> is unsized.</p>\n\n<p>The other suggested solution is to try using this PhantomData the error mentions, resulting in:</p>\n\n<pre><code>struct Bar&lt;A, B: Foo&lt;A&gt;&gt; {\n  b: B,\n  marker: PhantomData&lt;A&gt;\n}\n</code></pre>\n\n<p>but this seems really messy to me.  Reading the docs for <code>PhantomData</code> seem to indicate this is meant to be used with unsafe code, but I am not working with unsafe code anywhere here.  All I want is for <code>Bar</code> to contain an instance some type that implements <code>Foo</code>.</p>\n\n<p>Is this really the only way to handle this situation now, or am I missing something?</p>\n"}, {"tags": ["rust", "rust-cargo", "hyper", "rust-obsolete"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 2, "creation_date": 1430050092, "post_id": 29874844, "comment_id": 47878911, "body": "Please include relevant version numbers, e.g., for rustc and Cargo. Without those, it&#39;s impossible to give any specific advice."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 1, "creation_date": 1430099397, "post_id": 29874844, "comment_id": 47895880, "body": "Could you include the date in the cargo version number?"}], "answers": [{"comments": [{"owner": {"reputation": 84, "user_id": 3958927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d33c151d4d479a8f223fbbb4c9934737?s=128&d=identicon&r=PG&f=1", "display_name": "bipvanwinkle", "link": "https://stackoverflow.com/users/3958927/bipvanwinkle"}, "edited": false, "score": 0, "creation_date": 1430085593, "post_id": 29876212, "comment_id": 47892111, "body": "So I should be able to specify an older version of hyper and have this problem go away? Is there a way to determine what version of Rust a crate is expecting? P.s. thank you for the quick response."}, {"owner": {"reputation": 2589, "user_id": 1254484, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/acf54b662a117afbdf33f54fce9723fc?s=128&d=identicon&r=PG", "display_name": "Pascal", "link": "https://stackoverflow.com/users/1254484/pascal"}, "reply_to_user": {"reputation": 84, "user_id": 3958927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d33c151d4d479a8f223fbbb4c9934737?s=128&d=identicon&r=PG&f=1", "display_name": "bipvanwinkle", "link": "https://stackoverflow.com/users/3958927/bipvanwinkle"}, "edited": false, "score": 1, "creation_date": 1430127772, "post_id": 29876212, "comment_id": 47907601, "body": "Theoretically, this might work. There is no direct mention of what rustc build those crates work with. You might find something in the git commit history or in the issues on the Github page, though. (There was a new beta release yesterday, by the way.)"}], "tags": [], "owner": {"reputation": 2589, "user_id": 1254484, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/acf54b662a117afbdf33f54fce9723fc?s=128&d=identicon&r=PG", "display_name": "Pascal", "link": "https://stackoverflow.com/users/1254484/pascal"}, "is_accepted": true, "score": 4, "last_activity_date": 1430042385, "creation_date": 1430042385, "answer_id": 29876212, "question_id": 29874844, "link": "https://stackoverflow.com/questions/29874844/unable-to-build-hyper-invalid-character-in-crate-name/29876212#29876212", "title": "Unable to build Hyper - invalid character `-` in crate name", "body": "<p>Your version of Hyper seems to require a newer version of Rust, which automatically converts hyphens to underscores in crate names.</p>\n\n<p>See <a href=\"https://github.com/rust-lang/rfcs/pull/940\" rel=\"nofollow\">RFC 940</a> and <a href=\"https://github.com/rust-lang/rust/issues/23533\" rel=\"nofollow\">Issue #23533</a>.</p>\n"}], "owner": {"reputation": 84, "user_id": 3958927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d33c151d4d479a8f223fbbb4c9934737?s=128&d=identicon&r=PG&f=1", "display_name": "bipvanwinkle", "link": "https://stackoverflow.com/users/3958927/bipvanwinkle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 398, "favorite_count": 0, "accepted_answer_id": 29876212, "answer_count": 1, "score": 3, "last_activity_date": 1516608943, "creation_date": 1430032407, "last_edit_date": 1516608943, "question_id": 29874844, "link": "https://stackoverflow.com/questions/29874844/unable-to-build-hyper-invalid-character-in-crate-name", "title": "Unable to build Hyper - invalid character `-` in crate name", "body": "<p>I am trying to run the hyper example listed on the Github readme.</p>\n\n<pre><code>extern crate hyper;\n\nuse std::io::Write;\n\nuse hyper::Server;\nuse hyper::server::Request;\nuse hyper::server::Response;\nuse hyper::net::Fresh;\n\nfn hello(_: Request, res: Response&lt;Fresh&gt;) {\n    let mut res = res.start().unwrap();\n    res.write_all(b\"Hello World!\").unwrap();\n    res.end().unwrap();\n}\n\nfn main() {\n    Server::http(hello).listen(\"127.0.0.1:3000\").unwrap();\n}\n</code></pre>\n\n<p>And the Cargo.toml looks like this:</p>\n\n<pre><code>[package]\n\nname = &lt;crate_name&gt;\nversion = &lt;version&gt;\nauthors = &lt;authors&gt;\n\n[dependencies]\nhyper = \"0.3\"\n</code></pre>\n\n<p>However, when I attempt to build it using Cargo run I get the following error:</p>\n\n<pre><code>error: invalid character `-` in crate name: `build-script-build`\nerror: invalid character `-` in crate name: `pkg-config`\nerror: invalid character `-` in crate name: `rustc-serialize`\n</code></pre>\n\n<p>I looked through these different crates trying to see if maybe I could just change a \"rustc-serialize\" to \"rustc_serialize\" because I think that crate names can no longer have hyphens. However, I couldn't find anything of the sort. I would really like to be able to solve this problem because I have a feeling that I am going to run into this error a few more times while Rust is still being polished. </p>\n\n<p>Edit: The versions are as follows:\nRust: 1.0.0-beta.2\nHyper: 0.3.14\nCargo: 0.0.1-pre-nightly (built 2015-03-09)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 7, "creation_date": 1430049017, "post_id": 29873569, "comment_id": 47878616, "body": "Those C functions are locale dependent, while Rust is fixed to Unicode chars."}], "answers": [{"tags": [], "owner": {"reputation": 656, "user_id": 2067248, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8259a621b065428d8756fda25da84adc?s=128&d=identicon&r=PG", "display_name": "lokulin", "link": "https://stackoverflow.com/users/2067248/lokulin"}, "is_accepted": true, "score": 29, "last_activity_date": 1589698611, "last_edit_date": 1589698611, "creation_date": 1430021793, "answer_id": 29873663, "question_id": 29873569, "link": "https://stackoverflow.com/questions/29873569/check-whether-a-char-is-a-letter-or-a-number/29873663#29873663", "title": "Check whether a char is a letter or a number?", "body": "<p><code>is_alphabetic, is_digit, is_alphanumeric, is_numeric</code> are what you are looking for.</p>\n\n<p>e.g. :</p>\n\n<pre><code>fn main() {\n    println!(\"1 is a digit {}\", '1'.is_digit(10));\n    println!(\"f is a hex digit {}\", 'f'.is_digit(16));\n    println!(\"a is alphabetic {}\", 'a'.is_alphabetic());\n    println!(\"\u3053is alphabetic {}\", '\u3053'.is_alphabetic());\n    println!(\"a is alphanumeric {}\", 'a'.is_alphanumeric());\n    println!(\"1 is alphanumeric {}\", '1'.is_alphanumeric());\n}\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>1 is a digit true\nf is a hex digit true\na is alphabetic true\n\u3053is alphabetic true\na is alphanumeric true\n1 is alphanumeric true\n</code></pre>\n\n<p>They are described in detail in the <a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"noreferrer\">Rust standard library docs for chars</a>.</p>\n"}], "owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9409, "favorite_count": 2, "accepted_answer_id": 29873663, "answer_count": 1, "score": 17, "last_activity_date": 1589721879, "creation_date": 1430020930, "last_edit_date": 1589721879, "question_id": 29873569, "link": "https://stackoverflow.com/questions/29873569/check-whether-a-char-is-a-letter-or-a-number", "title": "Check whether a char is a letter or a number?", "body": "<p>What are the Rust equivalents to C's <code>isalpha</code>, <code>isdigit</code> and <code>isalnum</code>? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1430010354, "post_id": 29871967, "comment_id": 47870081, "body": "I answered your apparent question (difference of C macros and Rust macros) but your title asks about macros and functions. You should probably change your title."}], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 9, "creation_date": 1578922340, "post_id": 29872492, "comment_id": 105585863, "body": "One thing this answer is missing to answer &quot;What is the difference between macros and functions?&quot; is &quot;Why do we need functions at all?&quot;, as the answer seems to describe macros as having all the features of functions and more."}, {"owner": {"reputation": 1548, "user_id": 1456334, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/GR43K.jpg?s=128&g=1", "display_name": "oooyaya", "link": "https://stackoverflow.com/users/1456334/oooyaya"}, "edited": false, "score": 0, "creation_date": 1613488002, "post_id": 29872492, "comment_id": 117086362, "body": "I wasn&#39;t understanding why it was <code>5 * 2 + 3</code> instead of <code>5 * 5</code>.  It&#39;s worth mentioning since most people probably won&#39;t read the link that <code>FIVE_TIMES(x)</code> will take <code>x</code> as the operation <code>2 + 3</code>, <b>not</b> the result of <code>2+3 = 5</code>.  Plugging 2 + 3 in, then you get <code>5 * 2 + 3</code> and the order of operations gives you <code>5*2 = 10</code> and then <code>10 + 3 = 13</code>.  So if you think in terms of strings, this is just an unevaluated substitution."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 23, "last_activity_date": 1584539204, "last_edit_date": 1584539204, "creation_date": 1430009901, "answer_id": 29872492, "question_id": 29871967, "link": "https://stackoverflow.com/questions/29871967/what-is-the-difference-between-macros-and-functions-in-rust/29872492#29872492", "title": "What is the difference between macros and functions in Rust?", "body": "<p>Keep on reading the documentation, specifically <a href=\"https://doc.rust-lang.org/book/ch19-06-macros.html\" rel=\"noreferrer\">the chapter on macros</a>!</p>\n\n<h1>Rust functions vs Rust macros</h1>\n\n<p>Macros are executed at compile time. They generally expand into new pieces of code that the compiler will then need to further process.</p>\n\n<h1>Rust macros vs C macros</h1>\n\n<p>The biggest difference to me is that <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html#hygiene\" rel=\"noreferrer\">Rust macros are <em>hygenic</em></a>. The book has an example that explains what hygiene prevents, and also says:</p>\n\n<blockquote>\n  <p>Each macro expansion happens in a distinct \u2018syntax context\u2019, and each variable is tagged with the syntax context where it was introduced.</p>\n</blockquote>\n\n<p>It uses this example:</p>\n\n<blockquote>\n  <p>For example, this C program prints 13 instead of the expected 25.</p>\n\n<pre><code>#define FIVE_TIMES(x) 5 * x\n\nint main() {\n    printf(\"%d\\n\", FIVE_TIMES(2 + 3));\n    return 0;\n}\n</code></pre>\n</blockquote>\n\n<p>Beyond that, Rust macros</p>\n\n<ul>\n<li>Can be distributed with the compiled code</li>\n<li>Can be overloaded in argument counts</li>\n<li>Can match on syntax patterns like braces or parenthesis or commas</li>\n<li>Can require a repeated input pattern</li>\n<li>Can be recursive</li>\n<li>Operate at the syntax level, not the text level</li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1551045846, "post_id": 54856923, "comment_id": 96485555, "body": "Please clarify what this answer adds to the existing answers, which mention <i>Can be overloaded in argument counts</i>"}], "tags": [], "owner": {"reputation": 291, "user_id": 1714250, "user_type": "registered", "accept_rate": 14, "profile_image": "https://www.gravatar.com/avatar/7034e8d6f402bf5ffa97b9a139277ec0?s=128&d=identicon&r=PG", "display_name": "Ayush Mishra", "link": "https://stackoverflow.com/users/1714250/ayush-mishra"}, "is_accepted": false, "score": 1, "last_activity_date": 1551045217, "creation_date": 1551045217, "answer_id": 54856923, "question_id": 29871967, "link": "https://stackoverflow.com/questions/29871967/what-is-the-difference-between-macros-and-functions-in-rust/54856923#54856923", "title": "What is the difference between macros and functions in Rust?", "body": "<p>In <code>macro</code>, you can take variable number of parameters.</p>\n\n<p>In <code>function</code> you have to define number and type of parameters.</p>\n"}, {"tags": [], "owner": {"reputation": 129, "user_id": 9520525, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-U93W7vRPkeE/AAAAAAAAAAI/AAAAAAAAAxE/V25t2IryaTY/photo.jpg?sz=128", "display_name": "Vahin Sharma", "link": "https://stackoverflow.com/users/9520525/vahin-sharma"}, "is_accepted": false, "score": 7, "last_activity_date": 1607523445, "last_edit_date": 1607523445, "creation_date": 1607520843, "answer_id": 65217848, "question_id": 29871967, "link": "https://stackoverflow.com/questions/29871967/what-is-the-difference-between-macros-and-functions-in-rust/65217848#65217848", "title": "What is the difference between macros and functions in Rust?", "body": "<p>Quoting from <a href=\"https://doc.rust-lang.org/book/ch19-06-macros.html#the-difference-between-macros-and-functions\" rel=\"noreferrer\">the Rust documentation</a>:</p>\n<blockquote>\n<h3>The Difference Between Macros and Functions</h3>\n<p>Fundamentally, macros are a way of writing code that writes other code, which\nis known as <em>metaprogramming</em>. In Appendix C, we discuss the <code>derive</code>\nattribute, which generates an implementation of various traits for you. We\u2019ve\nalso used the <code>println!</code> and <code>vec!</code> macros throughout the book. All of these\nmacros <em>expand</em> to produce more code than the code you\u2019ve written manually.</p>\n<p>Metaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don\u2019t.</p>\n<p>A function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call <code>println!(&quot;hello&quot;)</code> with one argument or\n<code>println!(&quot;hello {}&quot;, name)</code> with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can\u2019t, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.</p>\n<p>The downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you\u2019re writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.</p>\n<p>Another important difference between macros and functions is that you must\ndefine macros or bring them into scope <em>before</em> you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.</p>\n</blockquote>\n"}], "owner": {"reputation": 6139, "user_id": 4144667, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/rNMgl.png?s=128&g=1", "display_name": "geckob", "link": "https://stackoverflow.com/users/4144667/geckob"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6847, "favorite_count": 1, "accepted_answer_id": 29872492, "answer_count": 3, "score": 19, "last_activity_date": 1607523445, "creation_date": 1430005205, "last_edit_date": 1430091400, "question_id": 29871967, "link": "https://stackoverflow.com/questions/29871967/what-is-the-difference-between-macros-and-functions-in-rust", "title": "What is the difference between macros and functions in Rust?", "body": "<p>Quoted from the <a href=\"https://doc.rust-lang.org/book/hello-world.html\" rel=\"noreferrer\">Rust blog</a>:</p>\n\n<blockquote>\n  <p>One last thing to mention: Rust\u2019s macros are significantly different from C macros, if you\u2019ve used those</p>\n</blockquote>\n\n<p>What is the difference between macros and function in Rust? How is it different from C?</p>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "edited": false, "score": 0, "creation_date": 1430013789, "post_id": 29872820, "comment_id": 47870815, "body": "Ah I see. I have another question based on the output of this piece of code. It seems that &quot;hello&quot; is being printed between 20 and 30 times rather than the expected 100. Would this be because the main thread ends before all of the threads are finished?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "edited": false, "score": 1, "creation_date": 1430013937, "post_id": 29872820, "comment_id": 47870839, "body": "@Dumbapples yeah, that&#39;s why I said that this version &quot;compiles&quot; not that it &quot;works&quot; ^_^ I ran it once and saw some output, and ran it again and saw no output. The program will definitely exit when the main thread ends, and there&#39;s nothing keeping it around. There are lots of solutions for that though!"}, {"owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "edited": false, "score": 0, "creation_date": 1430014670, "post_id": 29872820, "comment_id": 47870963, "body": "I found a bug in my code. I think the current code will cause every thread after the 20th one to wait, regardless of how many threads are currently running. I would have to decrement the number in the arc somewhere. Would obtaining a lock on the Arc between the print statement and the notify and decrementing it solve this problem?"}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1430100123, "post_id": 29872820, "comment_id": 47896066, "body": "I suspect the <code>else</code> branch of the <code>if</code> isn&#39;t necessary: <code>let mut start = num.lock().unwrap(); while *start =&gt; 20 { start = cvar.wait(start).unwrap(); }</code> (NB. I&#39;ve also switched the <code>if</code> to a <code>while</code>, to protect against spurious wake-ups, which may occur with <code>Condvar</code>)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1601426039, "last_edit_date": 1601426039, "creation_date": 1430013374, "answer_id": 29872820, "question_id": 29870837, "link": "https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading/29872820#29872820", "title": "How do I use a Condvar to limit multithreading?", "body": "<p>Here's a version that compiles:</p>\n<pre><code>use std::{\n    sync::{Arc, Condvar, Mutex},\n    thread,\n};\n\nfn main() {\n    let thread_count_arc = Arc::new((Mutex::new(0u8), Condvar::new()));\n    let mut i = 0;\n    while i &lt; 100 {\n        let thread_count = thread_count_arc.clone();\n        thread::spawn(move || {\n            let (num, cvar) = &amp;*thread_count;\n\n            let mut start = cvar\n                .wait_while(num.lock().unwrap(), |start| *start &gt;= 20)\n                .unwrap();\n\n            // Before Rust 1.42, use this:\n            //\n            // let mut start = num.lock().unwrap();\n            // while *start &gt;= 20 {\n            //     start = cvar.wait(start).unwrap()\n            // }\n\n            *start += 1;\n\n            println!(&quot;hello&quot;);\n            cvar.notify_one();\n        });\n        i += 1;\n    }\n}\n</code></pre>\n<p>The important part can be seen from the signature of <a href=\"https://doc.rust-lang.org/std/sync/struct.Condvar.html#method.wait_while\" rel=\"nofollow noreferrer\"><code>Condvar::wait_while</code></a> or <a href=\"https://doc.rust-lang.org/std/sync/struct.Condvar.html#method.wait\" rel=\"nofollow noreferrer\"><code>Condvar::wait</code></a>:</p>\n<pre><code>pub fn wait_while&lt;'a, T, F&gt;(\n    &amp;self,\n    guard: MutexGuard&lt;'a, T&gt;,\n    condition: F\n) -&gt; LockResult&lt;MutexGuard&lt;'a, T&gt;&gt;\nwhere\n    F: FnMut(&amp;mut T) -&gt; bool, \n</code></pre>\n<pre><code>pub fn wait&lt;'a, T&gt;(\n    &amp;self,\n    guard: MutexGuard&lt;'a, T&gt;\n) -&gt; LockResult&lt;MutexGuard&lt;'a, T&gt;&gt;\n</code></pre>\n<p>This says that <code>wait_while</code> / <code>wait</code> <em>consumes</em> the <code>guard</code>, which is why you get the error you did - you no longer own <code>start</code>, so you can't call any methods on it!</p>\n<p>These functions are doing a great job of reflecting how <code>Condvar</code>s work - you give up the lock on the <code>Mutex</code> (represented by <code>start</code>) for a while, and when the function returns you get the lock again.</p>\n<p>The fix is to give up the lock and then grab the lock guard return value from <code>wait_while</code> / <code>wait</code>. I've also switched from an <code>if</code> to a <code>while</code>, as <a href=\"https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading/29872820#comment47896066_29872820\">encouraged by huon</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "is_accepted": false, "score": 0, "last_activity_date": 1527217917, "last_edit_date": 1527217917, "creation_date": 1430015249, "answer_id": 29872994, "question_id": 29870837, "link": "https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading/29872994#29872994", "title": "How do I use a Condvar to limit multithreading?", "body": "<p>I realized the code I provided didn't do exactly what I wanted it to, so I'm putting this edit <a href=\"https://stackoverflow.com/a/29872820/155423\">of Shepmaster's code</a> here for future reference.</p>\n\n<pre><code>use std::sync::{Arc, Condvar, Mutex};\nuse std::thread;\n\nfn main() {\n    let thread_count_arc = Arc::new((Mutex::new(0u8), Condvar::new()));\n    let mut i = 0;\n    while i &lt; 150 {\n        let thread_count = thread_count_arc.clone();\n        thread::spawn(move || {\n            let x;\n            let &amp;(ref num, ref cvar) = &amp;*thread_count;\n            {\n                let start = num.lock().unwrap();\n                let mut start = if *start &gt;= 20 {\n                    cvar.wait(start).unwrap()\n                } else {\n                    start\n                };\n                *start += 1;\n                x = *start;\n            }\n            println!(\"{}\", x);\n            {\n                let mut counter = num.lock().unwrap();\n                *counter -= 1;\n            }\n            cvar.notify_one();\n        });\n        i += 1;\n    }\n    println!(\"done\");\n}\n</code></pre>\n\n<p>Running this in the playground should show more or less expected behavior.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1430142380, "post_id": 29886043, "comment_id": 47917763, "body": "Yeah, I really wanted to use a Semaphore, but the whole unstable thing. Even better would be a single-producer, multi-consumer channel and a 20-count threadpool! But the question did specifically ask about a Condvar, so we give the people what they want. ^_^"}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 1, "last_activity_date": 1527218079, "last_edit_date": 1527218079, "creation_date": 1430100420, "answer_id": 29886043, "question_id": 29870837, "link": "https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading/29886043#29886043", "title": "How do I use a Condvar to limit multithreading?", "body": "<p>For reference, the usual way to have a limited number of threads in a given scope is with a <a href=\"https://doc.rust-lang.org/1.8.0/std/sync/struct.Semaphore.html\" rel=\"nofollow noreferrer\"><code>Semaphore</code></a>.</p>\n\n<p>Unfortunately, <code>Semaphore</code> was never stabilized, was deprecated in Rust 1.8 and was removed in Rust 1.9. There are crates available that add semaphores on top of other concurrency primitives.</p>\n\n<pre><code>let sema = Arc::new(Semaphore::new(20)); \n\nfor i in 0..100 {\n    let sema = sema.clone();\n    thread::spawn(move || {\n        let _guard = sema.acquire();\n        println!(\"{}\", i);\n    })\n}\n</code></pre>\n\n<p>This isn't quite doing the same thing: since each thread is not printing the total number of the threads inside the scope when that thread entered it.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1588077109, "post_id": 61472451, "comment_id": 108755705, "body": "Please <a href=\"https://stackoverflow.com/posts/61472451/edit\">edit</a> your answer to explain the differences between it and the existing answers. Your code appears identical to the <a href=\"https://stackoverflow.com/a/29872820/155423\">existing accepted answer</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1588077774, "post_id": 61472451, "comment_id": 108756040, "body": "Well, the the accepted answer <a href=\"https://stackoverflow.com/revisions/29872820/4\">before I updated it</a>."}], "tags": [], "owner": {"reputation": 497, "user_id": 2063091, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e881abf6492d3599bbecda08ed109402?s=128&d=identicon&r=PG&f=1", "display_name": "gterzian", "link": "https://stackoverflow.com/users/2063091/gterzian"}, "is_accepted": false, "score": -1, "last_activity_date": 1588046938, "creation_date": 1588046938, "answer_id": 61472451, "question_id": 29870837, "link": "https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading/61472451#61472451", "title": "How do I use a Condvar to limit multithreading?", "body": "<p>You want to use a <code>while</code> loop, and re-assign <code>start</code> at each iteration, like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let thread_count_arc = Arc::new((Mutex::new(0), Condvar::new()));\n    let mut i = 0;\n    while i &lt; 100 {\n        let thread_count = thread_count_arc.clone();\n        thread::spawn(move || {\n            let &amp;(ref num, ref cvar) = &amp;*thread_count;\n            let mut start = num.lock().unwrap();\n            while *start &gt;= 20 {\n                let current = cvar.wait(start).unwrap();\n                start = current;\n            }\n            *start += 1;\n            println!(\"hello\");\n            cvar.notify_one();\n        });\n        i += 1;\n    }\n}\n</code></pre>\n\n<p>See also some article on the topic:</p>\n\n<p><a href=\"https://medium.com/@polyglot_factotum/rust-concurrency-five-easy-pieces-871f1c62906a\" rel=\"nofollow noreferrer\">https://medium.com/@polyglot_factotum/rust-concurrency-five-easy-pieces-871f1c62906a</a></p>\n\n<p><a href=\"https://medium.com/@polyglot_factotum/rust-concurrency-patterns-condvars-and-locks-e278f18db74f\" rel=\"nofollow noreferrer\">https://medium.com/@polyglot_factotum/rust-concurrency-patterns-condvars-and-locks-e278f18db74f</a></p>\n"}], "owner": {"reputation": 2199, "user_id": 4643182, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98d44e9e23a8818bfc464af3538f1455?s=128&d=identicon&r=PG&f=1", "display_name": "Dumbapples", "link": "https://stackoverflow.com/users/4643182/dumbapples"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1942, "favorite_count": 0, "accepted_answer_id": 29872820, "answer_count": 4, "score": 5, "last_activity_date": 1601426039, "creation_date": 1429996567, "last_edit_date": 1527217547, "question_id": 29870837, "link": "https://stackoverflow.com/questions/29870837/how-do-i-use-a-condvar-to-limit-multithreading", "title": "How do I use a Condvar to limit multithreading?", "body": "<p>I'm trying to use a <code>Condvar</code> to limit the number of threads that are active at any given time. I'm having a hard time finding good examples on how to use <code>Condvar</code>. So far I have:</p>\n\n<pre><code>use std::sync::{Arc, Condvar, Mutex};\nuse std::thread;\n\nfn main() {\n    let thread_count_arc = Arc::new((Mutex::new(0), Condvar::new()));\n    let mut i = 0;\n    while i &lt; 100 {\n        let thread_count = thread_count_arc.clone();\n        thread::spawn(move || {\n            let &amp;(ref num, ref cvar) = &amp;*thread_count;\n            {\n                let mut start = num.lock().unwrap();\n                if *start &gt;= 20 {\n                    cvar.wait(start);\n                }\n                *start += 1;\n            }\n            println!(\"hello\");\n            cvar.notify_one();\n        });\n        i += 1;\n    }\n}\n</code></pre>\n\n<p>The compiler error given is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `start`\n  --&gt; src/main.rs:16:18\n   |\n14 |                     cvar.wait(start);\n   |                               ----- value moved here\n15 |                 }\n16 |                 *start += 1;\n   |                  ^^^^^ value used here after move\n   |\n   = note: move occurs because `start` has type `std::sync::MutexGuard&lt;'_, i32&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I'm entirely unsure if my use of <code>Condvar</code> is correct. I tried staying as close as I could to the example on the Rust API. Wwat is the proper way to implement this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1429992208, "post_id": 29869774, "comment_id": 47865146, "body": "No, there isn&#39;t. But since that isn&#39;t a particularly helpful or interesting answer, could you maybe give some context about what you&#39;re trying to achieve? I mean, why not just return the vector?"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1429992393, "post_id": 29869774, "comment_id": 47865206, "body": "I&#39;m trying to adapt <a href=\"http://is.gd/OEGCSL\" rel=\"nofollow noreferrer\">this</a> to return <code>Vec&lt;&amp;str&gt;</code> instead of <code>Vec&lt;String&gt;</code>."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1429992462, "post_id": 29869774, "comment_id": 47865228, "body": "More context in my question <a href=\"http://stackoverflow.com/q/29720886/943814\">here</a>"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 2, "creation_date": 1429994537, "post_id": 29869774, "comment_id": 47865888, "body": "That really just shifts the question from &quot;why not just return the vector?&quot; to &quot;why not just return the <code>Vec&lt;String&gt;</code>?&quot; ;-) Someone has to own the data that <code>&amp;str</code> or <code>&amp;[u8]</code> point to (with the exception of <code>str</code> or array constants)."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "edited": false, "score": 0, "creation_date": 1429995078, "post_id": 29869774, "comment_id": 47866059, "body": "I think I see what you&#39;re saying. Fair enough. I have a naturally tendency to avoid <code>String</code>, because it&#39;s allocated on the heap. Too many years as a real time C programmer I guess. But it doesn&#39;t matter in this case because <code>Vec</code> is on the heap too."}, {"owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 0, "creation_date": 1430002861, "post_id": 29869774, "comment_id": 47868302, "body": "Why don&#39;t you use <code>std::str::as_bytes()</code>? It does exactly what you&#39;re trying to do."}, {"owner": {"reputation": 19346, "user_id": 2793118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5da03d2e233e1a40a4f1923acfb9d433?s=128&d=identicon&r=PG", "display_name": "Filipe Gon&#231;alves", "link": "https://stackoverflow.com/users/2793118/filipe-gon%c3%a7alves"}, "edited": false, "score": 0, "creation_date": 1430003202, "post_id": 29869774, "comment_id": 47868385, "body": "PS: Also, out of curiosity, apparently it&#39;s implemented with <code>unsafe</code> code: <a href=\"https://github.com/rust-lang/rust/blob/c0eb9384af9f623563df59a9ae454ffedea1f4f8/src/libcore/str/mod.rs#L1789\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/&hellip;</a>"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1430008058, "post_id": 29869774, "comment_id": 47869563, "body": "I&#39;m not actually trying to convert <code>&amp;str</code> to <code>&amp;[u8]</code>. This is just a minimal reproduction of the error. The links I posted show what I&#39;m going for."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 1, "last_activity_date": 1430038753, "last_edit_date": 1495541181, "creation_date": 1430038753, "answer_id": 29875646, "question_id": 29869774, "link": "https://stackoverflow.com/questions/29869774/give-caller-ownership-of-local-variables-that-depend-on-each-other/29875646#29875646", "title": "Give caller ownership of local variables that depend on each other", "body": "<p>(Copied from <a href=\"https://stackoverflow.com/questions/29598264/returning-a-struct-containing-mutable-values/29598350#29598350\">my answer to a related but still slightly different question</a>.)</p>\n\n<p>You're trying to return a borrow to something which was created in and is owned by the function. This is <em>impossible</em>. No, there is no way around it; you can't somehow extend the lifetime of <code>vector</code>, returning <code>vector</code> as well as the borrow won't work. Really. This is one of the things Rust was specifically designed to absolutely forbid.</p>\n\n<p>If you want to transfer something out of a function, one of two things must be true:</p>\n\n<ol>\n<li><p>It is being stored somewhere outside the function that will outlive the current call (as in, you were given a borrow as an argument; returning doesn't count).</p>\n\n<p>To expand on this, you could change the function to <code>fn str_to_u8&lt;'a, 'b&gt;(s: &amp;'a str, vector: &amp;'b mut Vec&lt;u8&gt;) -&gt; &amp;'b [u8]</code>.  This would allow the vector to survive the function and let you to safely return a slice into it.</p>\n\n<blockquote>\n  <p><strong>Note</strong>: Another somewhat code-smelly alternative is to <em>leak</em> the vector.  This involves <code>forget</code>ting <code>vector</code> and unsafely casting the slice to <code>&amp;'static [u8]</code> (<em>i.e.</em> promise the compiler it will live forever).  This, obviously, will leak the heap allocation.</p>\n  \n  <p>You could also store <code>vector</code> in a global or something, but that should be your option of absolute last resort; Rust <em>hates</em> globals.</p>\n</blockquote></li>\n<li><p>You are returning ownership, not just a borrowed reference.  So, your function would just return the <code>Vec&lt;u8&gt;</code>, which the <em>caller</em> would then slice.</p></li>\n</ol>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 287, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1430038753, "creation_date": 1429990415, "question_id": 29869774, "link": "https://stackoverflow.com/questions/29869774/give-caller-ownership-of-local-variables-that-depend-on-each-other", "title": "Give caller ownership of local variables that depend on each other", "body": "<p>Here's a fairly minimal reproduction of my problem:</p>\n\n<pre><code>fn str_to_u8(s: &amp;str) -&gt; &amp;[u8] {\n    let vector = s.chars().map(|c| c as u8).collect::&lt;Vec&lt;u8&gt;&gt;();\n    let slice = vector.as_slice();\n    slice\n}\n</code></pre>\n\n<p>The compiler says that <code>vector</code> doesn't live long enough, which makes sense. Is there a way to force <code>vector</code> to \"move\" into <code>slice</code> so that when the caller takes ownership of slice it also takes ownership of <code>vector</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1264, "user_id": 898347, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/9lyb7.png?s=128&g=1", "display_name": "Chathurika Sandarenu", "link": "https://stackoverflow.com/users/898347/chathurika-sandarenu"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1430237279, "post_id": 29869764, "comment_id": 47970509, "body": "I was initially thinking that compile error was due to I&#39;m trying to return a struct from the method. But it seems like it was not the case, and error is due to the &amp;str used inside struct."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1430240941, "post_id": 29869764, "comment_id": 47973027, "body": "No worries :) &quot;Duplicate&quot; questions are not inherently &quot;bad&quot; or anything (contrary to most other close reasons), it is just that redirecting all of them toward a single question helps concentrating the efforts in building great answers."}], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1429997225, "post_id": 29869900, "comment_id": 47866739, "body": "While the answer and the example code are correct, I&#39;d like to note that <code>x</code> is an integer and its string representation cannot possibly contain whitespace. Consequently, <code>trim()</code> is redundant, and you can just call <code>to_string()</code> on <code>x</code> directly: <code>Message { msg: x.to_string() }</code>. This way you save an extra allocation."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1430001578, "post_id": 29869900, "comment_id": 47867985, "body": "Good point, although I&#39;m guessing (since OP is storing this in something called <code>Message</code>) that the actual code the OP is trying to make involves more than just integers."}], "tags": [], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "is_accepted": true, "score": 0, "last_activity_date": 1429991075, "last_edit_date": 1495535046, "creation_date": 1429991075, "answer_id": 29869900, "question_id": 29869764, "link": "https://stackoverflow.com/questions/29869764/how-do-i-return-a-vector-created-using-a-for-loop/29869900#29869900", "title": "How do I return a Vector created using a for loop?", "body": "<p>I <a href=\"https://stackoverflow.com/q/29428227/943814\">asked the same question recently</a>. It can't be done. The answer in the link has an excellent explanation. My solution was to return a <code>String</code>:</p>\n\n<pre><code>struct Message {\n    msg: String\n}\n\nfn loop_function() -&gt; Vec&lt;Message&gt; {\n    let mut result = vec![];\n    for x in 0..10 {\n        result.push(Message { msg: format!(\"{}\", x).trim().to_string() });\n    }\n    result\n}\n\nfn main() {\n    loop_function();\n}\n</code></pre>\n"}], "owner": {"reputation": 1264, "user_id": 898347, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/9lyb7.png?s=128&g=1", "display_name": "Chathurika Sandarenu", "link": "https://stackoverflow.com/users/898347/chathurika-sandarenu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1089, "favorite_count": 0, "closed_date": 1430237287, "accepted_answer_id": 29869900, "answer_count": 1, "score": 0, "last_activity_date": 1430009356, "creation_date": 1429990357, "last_edit_date": 1430009356, "question_id": 29869764, "link": "https://stackoverflow.com/questions/29869764/how-do-i-return-a-vector-created-using-a-for-loop", "closed_reason": "Duplicate", "title": "How do I return a Vector created using a for loop?", "body": "<p>I wanted create some data using a for loop. I used following to do that. </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Message&lt;'a&gt; {\n    msg: &amp;'a str\n}\n\nfn loop_function&lt;'a&gt;() -&gt; Vec&lt;Message&lt;'a&gt;&gt; {\n    let mut result = vec![];\n    for x in 0..10 {\n        result.push(Message { msg: format!(\"{}\", x).trim() });\n    }\n    result\n}\n\nfn main() {\n    loop_function();\n}\n</code></pre>\n\n<p>But when I try to compile this I get following error related to lifetime of <code>x</code>. </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:8:33: 8:49 error: borrowed value does not live long enough\nsrc/main.rs:8       result.push(Message { msg: format!(\"{}\", x).trim() });\n                                               ^~~~~~~~~~~~~~~~\nsrc/main.rs:5:44: 11:2 note: reference must be valid for the lifetime 'a as defined on the block at 5:43...\nsrc/main.rs:5 fn loop_function&lt;'a&gt;() -&gt; Vec&lt;Message&lt;'a&gt;&gt; {\nsrc/main.rs:6     let mut result = vec![];\nsrc/main.rs:7     for x in 0..10 {\nsrc/main.rs:8       result.push(Message { msg: format!(\"{}\", x).trim() });\nsrc/main.rs:9   }\nsrc/main.rs:10     result\n               ...\nsrc/main.rs:8:6: 8:60 note: ...but borrowed value is only valid for the statement at 8:5\nsrc/main.rs:8       result.push(Message { msg: format!(\"{}\", x).trim() });\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:8:6: 8:60 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:8       result.push(Message { msg: format!(\"{}\", x).trim() });\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>Is there a way to extend the lifetime <code>x</code> so that I can return the vector?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429955241, "post_id": 29863565, "comment_id": 47852400, "body": "Convention for associated types is camel case, i.e. <code>Value</code>, not <code>VALUE</code>."}, {"owner": {"reputation": 523, "user_id": 1611416, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/8fe76a05a5c7124596566d5fdd64563c?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/1611416/simon"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1429956706, "post_id": 29863565, "comment_id": 47852855, "body": "@ChrisMorgan Thanks will use in future, I think I used it in this case to distinguish the types from the Traits."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1429955484, "creation_date": 1429955484, "answer_id": 29863635, "question_id": 29863565, "link": "https://stackoverflow.com/questions/29863565/nested-trait-types-bounded-types-and-verbosity-in-use-of-the-as-keyword/29863635#29863635", "title": "Nested trait types, bounded types and verbosity in use of the as keyword", "body": "<p>The first level can be implied, so you can have <code>Vec&lt;&lt;F::BAR as Bar&lt;F&gt;&gt;::BAZ&gt;</code>. It\u2019s quite possible that in the future the rules will be loosened up so that it can cope with inferring appropriate constraints for multiple levels, but it\u2019s not the case now.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 0, "last_activity_date": 1462390418, "creation_date": 1462390418, "answer_id": 37036475, "question_id": 29863565, "link": "https://stackoverflow.com/questions/29863565/nested-trait-types-bounded-types-and-verbosity-in-use-of-the-as-keyword/37036475#37036475", "title": "Nested trait types, bounded types and verbosity in use of the as keyword", "body": "<p>You can create a <a href=\"https://doc.rust-lang.org/book/type-aliases.html\" rel=\"nofollow\">type alias</a></p>\n\n<pre><code>type FooBarBaz&lt;F&gt; = &lt;&lt;F as Foo&gt;::BAR as Bar&lt;F&gt;&gt;::BAZ;\n\nstruct MyStruct&lt;F: Foo&gt;  {\n    data: Vec&lt; FooBarBaz&lt;F&gt; &gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 523, "user_id": 1611416, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/8fe76a05a5c7124596566d5fdd64563c?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/1611416/simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 478, "favorite_count": 0, "accepted_answer_id": 29863635, "answer_count": 2, "score": 2, "last_activity_date": 1462390418, "creation_date": 1429955125, "question_id": 29863565, "link": "https://stackoverflow.com/questions/29863565/nested-trait-types-bounded-types-and-verbosity-in-use-of-the-as-keyword", "title": "Nested trait types, bounded types and verbosity in use of the as keyword", "body": "<p>I have question regarding the use the  readability and verbosity of the <strong>as</strong> keyword for nested types within traits.</p>\n\n<p>I'm coming from a C++ background and I suspect that my misunderstanding will come from a lack of knowledge of the type systems used Haskell, which I understand rust makes use of.</p>\n\n<p>In C++, templated structs are used as traits, where types are defined based on the template parameters. Nesting can occur where other struct types are defined within structs etc. etc.</p>\n\n<p>Rust seems to support similar functionality. <code>struct MyStruct&lt;F: Foo&gt;</code> which is part of a larger code snippet below, defines members based on the types in supplied type <code>F</code>, bounded to trait <code>Foo</code>:</p>\n\n<pre><code>struct MyStruct&lt;F: Foo&gt;  {\n// Why does this not work?\n// Surely F, being constrainted to a Foo,\n//   has a type BAR, constrained to Bar&lt;F&gt;,\n//   has a type BAZ, constrained to Baz&lt;F&gt;\n//        data: Vec&lt;F::BAR::BAZ&gt;,\n    data: Vec&lt; &lt;&lt;F as Foo&gt;::BAR as Bar&lt;F&gt;&gt;::BAZ &gt;,\n}\n</code></pre>\n\n<p>Briefly, when defining members in this struct, it seems one has to use <code>&lt;&lt;F as Foo&gt;::BAR as Bar&lt;F&gt;&gt;::BAZ</code> to provide the compiler with extra type information. This seems reasonable since the compiler must know about the type of <code>F</code> in order to reason about its types. However it seems to me that this information is already provided by the bounds placed on these types, within the generic parameter to the struct, and within the trait definitions themselves.</p>\n\n<p>I do find <code>&lt;&lt;F as Foo&gt;::BAR as Bar&lt;F&gt;&gt;::BAZ</code> a bit difficult to read compared to <code>F::BAR::BAZ</code> and I was wondering if there was anyway to handle this better from a code readability point of view? Full code snippet below:</p>\n\n<pre><code>use std::vec::{Vec};\n\npub trait Foo {\n    type VALUE;\n    type BAR: Bar&lt;Self&gt;;\n}\n\npub trait Bar&lt;F: Foo&gt; {\n    type BAZ: Baz&lt;F&gt;;    \n}\n\npub trait Baz&lt;F: Foo&gt; {\n    fn new(value: F::VALUE) -&gt; Box&lt;F::VALUE&gt; {\n        Box::new(value)\n    }\n}\n\nfn main() {\n    struct BarImpl;\n\n    impl&lt;F: Foo&gt; Bar&lt;F&gt; for BarImpl {\n        type BAZ = BazImpl;\n    }\n\n    struct FooImpl;\n\n    impl Foo for FooImpl {\n        type VALUE = f64;\n        type BAR = BarImpl;\n    }\n\n    struct BazImpl { dummy: i32 };\n\n    impl&lt;F: Foo&gt; Baz&lt;F&gt; for BazImpl {};\n\n\n    struct MyStruct&lt;F: Foo&gt;  {\n    // Why does this not work?\n    // Surely F, being constrainted to a Foo,\n    //   has a type BAR, constrained to Bar&lt;F&gt;,\n    //   has a type BAZ, constrained to Baz&lt;F&gt;\n    //        data: Vec&lt;F::BAR::BAZ&gt;,\n        data: Vec&lt; &lt;&lt;F as Foo&gt;::BAR as Bar&lt;F&gt;&gt;::BAZ &gt;,\n    }\n\n    let mut s = MyStruct::&lt;FooImpl&gt; { data: Vec::new() };\n\n    for x in 0..5 {\n        let b = BazImpl{ dummy: x};\n        s.data.push(b);\n    }\n\n    println!(\"s.data.len() = {}\", s.data.len());\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429949661, "post_id": 29862630, "comment_id": 47850830, "body": "The overflow is saying arithmetic overflow, viz. that bits have been lost. Given that <code>ip</code> is <code>[u8; 4]</code>, no part of that expression should be capable of causing overflow."}], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 9, "last_activity_date": 1429950481, "creation_date": 1429950481, "answer_id": 29862844, "question_id": 29862630, "link": "https://stackoverflow.com/questions/29862630/crash-while-trying-to-do-bit-shift/29862844#29862844", "title": "Crash while trying to do bit shift", "body": "<p>According to the <a href=\"https://doc.rust-lang.org/reference.html#operator-precedence\">the Rust reference</a>, operator <code>+</code> as a stronger precedence than operator <code>&lt;&lt;</code>, meaning that your expression is actually parsed like this:</p>\n\n<pre><code>(ip[0] as u32) &lt;&lt; (24 + (ip[1] as u32)) &lt;&lt; (16 + (ip[2] as u32)) &lt;&lt; (8 + (ip[3] as u32))\n</code></pre>\n\n<p>Which can pretty easily overflow.</p>\n\n<p>You need to add the appropriates brackets:</p>\n\n<pre><code>((ip[0] as u32) &lt;&lt; 24) + ((ip[1] as u32) &lt;&lt; 16) + ((ip[2] as u32) &lt;&lt; 8) + (ip[3] as u32)\n</code></pre>\n"}], "owner": {"reputation": 2308, "user_id": 1120799, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/IRCQ4.jpg?s=128&g=1", "display_name": "Abhishek Chanda", "link": "https://stackoverflow.com/users/1120799/abhishek-chanda"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3240, "favorite_count": 0, "accepted_answer_id": 29862844, "answer_count": 1, "score": 2, "last_activity_date": 1429950481, "creation_date": 1429948962, "question_id": 29862630, "link": "https://stackoverflow.com/questions/29862630/crash-while-trying-to-do-bit-shift", "title": "Crash while trying to do bit shift", "body": "<p>I am trying to run this rust code</p>\n\n<pre><code>use std::net::Ipv4Addr;\n\nfn ip_to_int(addr: Ipv4Addr) -&gt; u32 {\n        let ip = addr.octets();\n        (ip[0] as u32) &lt;&lt; 24 + (ip[1] as u32) &lt;&lt; 16 + (ip[2] as u32) &lt;&lt; 8 + (ip[3] as u32)\n    }\n\nfn main() {\n    let ip = Ipv4Addr::new(74, 125, 227, 0);\n    println!(\"{}\", ip_to_int(ip));\n}\n</code></pre>\n\n<p>This crashes with</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'shift operation overflowed', test.rs:5\n</code></pre>\n\n<p>I did typecast everything to 32 bit ints and no shift is larger than 32 bits. Why does it crash? Also, isn't the compiler supposed to catch this and prevent compilation?</p>\n\n<pre><code>Abhishek@Abhisheks-MacBook-Pro-2:~$ rustc --version\nrustc 1.1.0-nightly (21f278a68 2015-04-23) (built 2015-04-24)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": false, "score": 4, "last_activity_date": 1429946912, "creation_date": 1429946912, "answer_id": 29862350, "question_id": 29862216, "link": "https://stackoverflow.com/questions/29862216/how-can-i-return-none-from-a-function-that-borrows-from-its-argument-or-avoid/29862350#29862350", "title": "How can I return None from a function that borrows from it&#39;s argument, or avoid needing to?", "body": "<p>As you don't apparently need to mutate the slice through this function, an alternative would be to switch your return type from <code>&amp;'a Option&lt;Foo&gt;</code> to <code>Option&lt;&amp;'a Foo&gt;</code>. This way, you won't have any problem with returning <code>None</code>.</p>\n\n<p>To do this, you can use the <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow\"><code>Option::as_ref(..)</code></a> method, which allows you to turn a <code>&amp;Option&lt;Foo&gt;</code> into a <code>Option&lt;&amp;Foo&gt;</code>.</p>\n\n<p>In the end, you have:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_or_none&lt;'a&gt;(data: &amp;'a [Option&lt;Foo&gt;], bar: u8) -&gt; Option&lt;&amp;'a Foo&gt; {\n    match bar as usize {\n        idx if idx &lt; data.len() =&gt; data[idx].as_ref(),\n        _ =&gt; None\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1429947357, "post_id": 29862352, "comment_id": 47850199, "body": "1. looks like cruft. 3 sounds like an antipattern. 2. looks good - is your choice of destructuring <code>data.get()</code> with nested <code>Some</code>s considered more idiomatic? I find checking the length easier to understand but that is probably because I&#39;m new to Rust."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 1, "creation_date": 1429949422, "post_id": 29862352, "comment_id": 47850766, "body": "Depending on the semantic meaning of your <code>Option&lt;Foo&gt;</code>, any of the three could easily be the most suitable (OK, three less so), though I would tend to expect the second to be the best one. It, by the way, could be written <code>data.get(bar as usize).and_then(|x| x.as_ref())</code>. I just go with what feels the nicest, and in the second case I felt that a more complex pattern was better and clearer than <code>and_then</code> plus <code>as_ref</code>, while in the third I felt that <code>unwrap_or</code> was a good choice. It\u2019s all fairly subjective, I\u2019m afraid."}, {"owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "edited": false, "score": 0, "creation_date": 1429950798, "post_id": 29862352, "comment_id": 47851142, "body": "Thanks to you I have just discovered <code>and_then()</code> and <code>or_else()</code>. Very handy. I agree in this case it&#39;s less obvious what is going on with <code>and_then</code> than with a match clause, but as you say, it&#39;s subjective."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1429946913, "creation_date": 1429946913, "answer_id": 29862352, "question_id": 29862216, "link": "https://stackoverflow.com/questions/29862216/how-can-i-return-none-from-a-function-that-borrows-from-its-argument-or-avoid/29862352#29862352", "title": "How can I return None from a function that borrows from it&#39;s argument, or avoid needing to?", "body": "<p>There are a few approaches you could take:</p>\n\n<ol>\n<li><p>Add another layer of <code>Option</code>ness, returning a <code>Option&lt;&amp;Option&lt;Foo&gt;&gt;</code>. I\u2019m guessing you don\u2019t want to do this.</p></li>\n<li><p>Return an <code>Option&lt;&amp;Foo&gt;</code> instead of <code>&amp;Option&lt;Foo&gt;</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_or_none(data: &amp;[Option&lt;Foo&gt;], bar: u8) -&gt; Option&lt;&amp;Foo&gt; {\n    match data.get(bar as usize) {\n        Some(&amp;Some(ref foo)) =&gt; Some(foo),\n        _ =&gt; None,\n    }\n}\n</code></pre></li>\n<li><p>Store a suitable <code>None</code> as a static and return a reference to it. Its lifetime is <code>'static</code> (so long as <code>Foo</code> is <code>'static</code>), so a reference to it can be shortened to <code>'a</code> with no problems.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>static NO_FOO: Option&lt;Foo&gt; = None;\n\nfn get_or_none(data: &amp;[Option&lt;Foo&gt;], bar: u8) -&gt; &amp;Option&lt;Foo&gt; {\n    data.get(bar as usize).unwrap_or(&amp;NO_FOO)\n}\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 4446, "user_id": 696485, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/4de94e14f977802057b0109d079d95a1?s=128&d=identicon&r=PG", "display_name": "Iskar Jarak", "link": "https://stackoverflow.com/users/696485/iskar-jarak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1693, "favorite_count": 0, "accepted_answer_id": 29862352, "answer_count": 2, "score": 1, "last_activity_date": 1429950975, "creation_date": 1429945983, "last_edit_date": 1429950975, "question_id": 29862216, "link": "https://stackoverflow.com/questions/29862216/how-can-i-return-none-from-a-function-that-borrows-from-its-argument-or-avoid", "title": "How can I return None from a function that borrows from it&#39;s argument, or avoid needing to?", "body": "<p>I have a slice of Option, and given a value, if that value is a valid index in the slice I want to use the value at that index, otherwise use <code>None</code>.</p>\n\n<p>Now, values need to be able to be reused, so I think I want to borrow from my slice, not move... Note that <code>Foo</code> does not implement the <code>Copy</code> trait and I'd prefer to keep it that way.</p>\n\n<p>I need to do this often, so a function returning <code>&amp;Option&lt;Foo&gt;</code> seemed appropriate, with the addition of a lifetime specifier since obviously the return value shouldn't outlive the slice it is borrowed from. That leads me to:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn get_or_none&lt;'a&gt;(data: &amp;'a [Option&lt;Foo&gt;], bar: u8) -&gt; &amp;'a Option&lt;Foo&gt; {\n  match bar as usize {\n    idx if idx &lt; data.len() =&gt; &amp;data[idx],\n    _ =&gt; &amp;None // obviously can't work\n  }\n}\n</code></pre>\n\n<p>This is clearly wrong. I can cheat, for now, because I know for this particular application the first value in the slice will always be None (it's a property of my data, so to speak), but that's just avoiding the problem.</p>\n\n<p>What should I do instead?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 7, "creation_date": 1429945981, "post_id": 29862184, "comment_id": 47849838, "body": "Hahahaha!  I was writing more or less the exact same thing, then had a power failure 15-ish minutes ago.  I was <i>just</i> about to post it.  Yes, about the only case I can think of is when you want to be able to take an aggregate value and split off parts of it after using it, without losing lifetime information.  Think of building up a bundle of values (which might involve lifetimes), using it, then recovering the original values afterwards."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1430053900, "post_id": 29862184, "comment_id": 47880225, "body": "The &#39;b in get_x_or_zero_ref can of course be omitted since it&#39;s implied by the default lifetime elision rules."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 4, "creation_date": 1474151204, "post_id": 29862184, "comment_id": 66416152, "body": "It doesn&#39;t make sense to say that a function &quot;requires&quot; its parameters to have different lifetimes. The purpose of lifetime parameters is to prevent the function or struct from <i>unifying</i> those parameters into a single (inferred) lifetime, so the borrow checker can distinguish between them"}], "tags": [], "owner": {"reputation": 1582, "user_id": 1079493, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc87059a3d24c9f85993c85e7c55a05?s=128&d=identicon&r=PG", "display_name": "Kai", "link": "https://stackoverflow.com/users/1079493/kai"}, "is_accepted": true, "score": 25, "last_activity_date": 1429946462, "last_edit_date": 1429946462, "creation_date": 1429945743, "answer_id": 29862184, "question_id": 29861388, "link": "https://stackoverflow.com/questions/29861388/when-is-it-useful-to-define-multiple-lifetimes-in-a-struct/29862184#29862184", "title": "When is it useful to define multiple lifetimes in a struct?", "body": "<p>After staying up way too late, I was able to come up with an example case where the lifetimes matter. Here is the code:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>static ZERO: i32 = 0;\n\nstruct Foo&lt;'a, 'b&gt; {\n    x: &amp;'a i32,\n    y: &amp;'b i32,\n}\n\nfn get_x_or_zero_ref&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32) -&gt; &amp;'a i32 {\n    if *x &gt; *y {\n        return x\n    } else {\n        return &amp;ZERO\n    }\n}\n\nfn main() {\n    let x = 1;\n    let v;\n    {\n        let y = 2;\n        let f = Foo { x: &amp;x, y: &amp;y };\n        v = get_x_or_zero_ref(&amp;f.x, &amp;f.y);\n    }\n    println!(\"{}\", *v);\n}\n</code></pre>\n\n<p>If you were to change the definition of <code>Foo</code> to this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n    y: &amp;'a i32,\n}\n</code></pre>\n\n<p>Then the code won't compile.</p>\n\n<p>Basically, if you want to use the fields of the struct on any function that requires it's parameters to have different lifetimes, then the fields of the struct must have different lifetimes as well.</p>\n"}, {"comments": [{"owner": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1579925105, "post_id": 58018832, "comment_id": 105938932, "body": "The additional lifetime to Y can be removed if the expression <code>X(&amp;z)</code> is lifted into its own variable. i.e. <code>let x = X(&amp;z)</code>.  <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=e5defc06e21d487986cba4d2969b132d\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>  Is there another way to force the need for additional lifetime parameters? I&#39;m currently trying to understand why functions might require &gt;1 lifetime parameter."}, {"owner": {"reputation": 462, "user_id": 5452170, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16bfc7d23c7bad37f5832e8e01cf849d?s=128&d=identicon&r=PG&f=1", "display_name": "Xiao-Feng Li", "link": "https://stackoverflow.com/users/5452170/xiao-feng-li"}, "reply_to_user": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580011400, "post_id": 58018832, "comment_id": 105955604, "body": "@StevenShaw Yes. A separate variable x will lift X(&amp;z) to the same scope level as z, instead of a temporary within z&#39;s constructor.  On the other hand, the case in my answer is not a game of concepts, but happened in my actual project. I just reduced it into the given code. For functions, it is even more common to have more than one lifetime parameter. E.g., you have two input borrows, but the return value&#39;s lifetime only relies on one of the inputs lifetimes."}, {"owner": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580076454, "post_id": 58018832, "comment_id": 105969532, "body": "Thanks, I thought it might be that I&#39;d only see it in a wider context. I&#39;ve tried hard to come up with a small example that requires multiple lifetime parameters on a function. For example, the accepted answer can simply have the second parameter to the function removed. It can even have the second parameter to the struct removed if you also remove the unnecessary scope in <code>main</code>. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f8c63e5f51df08323749230931883bf2\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>  I&#39;ve tucked away your nice phrase &quot;game of concepts&quot; and added your book to my wish list."}, {"owner": {"reputation": 462, "user_id": 5452170, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16bfc7d23c7bad37f5832e8e01cf849d?s=128&d=identicon&r=PG&f=1", "display_name": "Xiao-Feng Li", "link": "https://stackoverflow.com/users/5452170/xiao-feng-li"}, "reply_to_user": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580148473, "post_id": 58018832, "comment_id": 105994830, "body": "@StevenShaw Being able to remove the lifetime parameter of the second input (while keeping the first one) already means they have two different lifetime arguments. It is just that one is elided according to &quot;lifetime elision&quot; rule.  Secondly, the inner scope for <code>v</code> in <code>main()</code> in the accepted answer can be a function call (or call chain), hence cannot be simply removed."}, {"owner": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580164721, "post_id": 58018832, "comment_id": 106000968, "body": "Got it. My deletion does rely on lifetime elision (all variables have lifetime tracking in Rust if I&#39;m not mistaken). I&#39;m looking for an example where it&#39;s necessary to annotate multiple lifetimes on a function (where elision does not work)."}, {"owner": {"reputation": 462, "user_id": 5452170, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16bfc7d23c7bad37f5832e8e01cf849d?s=128&d=identicon&r=PG&f=1", "display_name": "Xiao-Feng Li", "link": "https://stackoverflow.com/users/5452170/xiao-feng-li"}, "reply_to_user": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580177236, "post_id": 58018832, "comment_id": 106003552, "body": "@StevenShaw  Lifetime elision does not work when the compiler cannot infer its lifetime. A simple example is to let the function to return a struct that has two different lifetimes such as Foo in the accepted answer.  See <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=31247245d3472547571d99dd02103737\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ."}, {"owner": {"reputation": 5428, "user_id": 482382, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/9fe6eecd0900f0e779711f091fec8b3b?s=128&d=identicon&r=PG", "display_name": "Steven Shaw", "link": "https://stackoverflow.com/users/482382/steven-shaw"}, "edited": false, "score": 0, "creation_date": 1580253738, "post_id": 58018832, "comment_id": 106035619, "body": "Thanks for your help and perseverance! So, functions require multiple lifetimes when structs require multiple lifetimes. This brings us back to this very SO question! However, I find the answers here pretty contrived as I can remove the lifetimes from the structs without any trouble. For instance, I change your lastest playground to have a single lifetime parameter (and also the function). <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=237c2fecbde105bd65ec563b2b3beee7\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>. Again, I a imagine that in a larger project, multiple lifetimes on structs must become necessary."}], "tags": [], "owner": {"reputation": 462, "user_id": 5452170, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/16bfc7d23c7bad37f5832e8e01cf849d?s=128&d=identicon&r=PG&f=1", "display_name": "Xiao-Feng Li", "link": "https://stackoverflow.com/users/5452170/xiao-feng-li"}, "is_accepted": false, "score": 8, "last_activity_date": 1568928565, "last_edit_date": 1568928565, "creation_date": 1568926545, "answer_id": 58018832, "question_id": 29861388, "link": "https://stackoverflow.com/questions/29861388/when-is-it-useful-to-define-multiple-lifetimes-in-a-struct/58018832#58018832", "title": "When is it useful to define multiple lifetimes in a struct?", "body": "<p>Here is another simple example where the struct definition has to use two lifetimes in order to operate as expected. It does not split the aggregate into fields of different lifetimes, but nests the struct with another struct.</p>\n\n<pre><code>struct X&lt;'a&gt;(&amp;'a i32);\n\nstruct Y&lt;'a, 'b&gt;(&amp;'a X&lt;'b&gt;);\n\nfn main() {\n    let z = 100;\n    //taking the inner field out of a temporary\n    let z1 = ((Y(&amp;X(&amp;z))).0).0;  \n    assert!(*z1 == z);\n}\n</code></pre>\n\n<p>The struct <code>Y</code> has two lifetime parameters, one for its contained field <code>&amp;X</code>, and one for <code>X</code>'s contained field <code>&amp;z</code>.</p>\n\n<p>In the operation <code>((Y(&amp;X(&amp;z))).0).0</code>, <code>X(&amp;z)</code> is created as a temporary and is borrowed. Its lifetime is only in the scope of this operation, expiring at the statement end. But since <code>X(&amp;z)</code>'s lifetime is different from the its contained field <code>&amp;z</code>, the operation is fine to return <code>&amp;z</code>, whose value can be accessed later in the function.  </p>\n\n<p>If using single lifetime for <code>Y</code> struct. This operation won't work, because the lifetime of <code>&amp;z</code> is the same as its containing struct <code>X(&amp;z)</code>, expiring at the statement end; therefore the returned <code>&amp;z</code> is no longer valid to be accessed afterwards.</p>\n\n<p>See code in the <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2015&amp;gist=aab0f7be88eca6a98602a0c30fa8ab4e\" rel=\"noreferrer\">playground</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 1582, "user_id": 1079493, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc87059a3d24c9f85993c85e7c55a05?s=128&d=identicon&r=PG", "display_name": "Kai", "link": "https://stackoverflow.com/users/1079493/kai"}, "is_accepted": false, "score": 1, "last_activity_date": 1616632162, "creation_date": 1616632162, "answer_id": 66791361, "question_id": 29861388, "link": "https://stackoverflow.com/questions/29861388/when-is-it-useful-to-define-multiple-lifetimes-in-a-struct/66791361#66791361", "title": "When is it useful to define multiple lifetimes in a struct?", "body": "<p>I want to re-answer my question here since it's still showing up high in search results and I feel I can explain better. Consider this code:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=86c3213896dff3399ac220cd1924c80d\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n    y: &amp;'a i32,\n}\n\nfn main() {\n    let x = 1;\n    let v;\n    {\n        let y = 2;\n        let f = Foo { x: &amp;x, y: &amp;y };\n        v = f.x;\n    }\n    println!(&quot;{}&quot;, *v);\n}\n</code></pre>\n<p>And the error:</p>\n<pre><code>error[E0597]: `y` does not live long enough\n--&gt; src/main.rs:11:33\n|\n11 |         let f = Foo { x: &amp;x, y: &amp;y };\n|                                 ^^ borrowed value does not live long enough\n12 |         v = f.x;\n13 |     }\n|     - `y` dropped here while still borrowed\n14 |     println!(&quot;{}&quot;, *v);\n|                    -- borrow later used here\n</code></pre>\n<p>What's going on here?</p>\n<ol>\n<li>The lifetime of <code>f.x</code> has the requirement of being at least large enough to encompass the scope of <code>x</code> up until the <code>println!</code> statement (since it's initialized with <code>&amp;x</code> and then assigned to <code>v</code>).</li>\n<li>The definition of <code>Foo</code> specifies that both <code>f.x</code> and <code>f.y</code> use the same generic lifetime <code>'a</code>, so the lifetime of <code>f.y</code> must be at least as large as <code>f.x</code>.</li>\n<li>But, that can't work, because we assign <code>&amp;y</code> to <code>f.y</code>, and <code>y</code> goes out of scope before the <code>println!</code>. Error!</li>\n</ol>\n<p>The solution here is to allow <code>Foo</code> to use separate lifetimes for <code>f.x</code> and <code>f.y</code>, which we do using multiple generic lifetime parameters:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=30fed822b269150a867429575b6fc05e\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n<pre><code>struct Foo&lt;'a, 'b&gt; {\n    x: &amp;'a i32,\n    y: &amp;'b i32,\n}\n</code></pre>\n<p>Now the lifetimes of <code>f.x</code> and <code>f.y</code> aren't tied together. The compiler will still use a lifetime that's valid until the <code>println!</code> statement for <code>f.x</code>. But there's no longer a requirement that <code>f.y</code> uses the same lifetime, so the compiler is free to choose a smaller lifetime for <code>f.y</code>, such as one that is valid only for the scope of <code>y</code>.</p>\n"}], "owner": {"reputation": 1582, "user_id": 1079493, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc87059a3d24c9f85993c85e7c55a05?s=128&d=identicon&r=PG", "display_name": "Kai", "link": "https://stackoverflow.com/users/1079493/kai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3685, "favorite_count": 10, "accepted_answer_id": 29862184, "answer_count": 3, "score": 47, "last_activity_date": 1616632162, "creation_date": 1429939782, "question_id": 29861388, "link": "https://stackoverflow.com/questions/29861388/when-is-it-useful-to-define-multiple-lifetimes-in-a-struct", "title": "When is it useful to define multiple lifetimes in a struct?", "body": "<p>In Rust, when we want a struct to contain references, we typically define their lifetimes as such:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n    y: &amp;'a i32,\n}\n</code></pre>\n\n<p>But it's also possible to define multiple lifetimes for different references in the same struct:</p>\n\n<pre><code>struct Foo&lt;'a, 'b&gt; {\n    x: &amp;'a i32,\n    y: &amp;'b i32,\n}\n</code></pre>\n\n<p>When is it ever useful to do this? Can someone provide some example code that doesn't compile when both lifetimes are <code>'a</code> but does compile when the lifetimes are <code>'a</code> and <code>'b</code> (or vice versa)?</p>\n"}, {"tags": ["rust", "nested-loops"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1429925528, "post_id": 29859892, "comment_id": 47845769, "body": "<code>points.iter_mut()</code> could be written <code>&amp;mut points</code>."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1429925736, "post_id": 29859892, "comment_id": 47845807, "body": "Certainly the fundamental idea you wish to achieve cannot be done in safe Rust code; the read and write stuff will need to be separated in some way to make it expressible in safe code."}], "answers": [{"tags": [], "owner": {"reputation": 183, "user_id": 4119156, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-lBGugoWscQI/AAAAAAAAAAI/AAAAAAAAAFQ/XbODxH0Kzw0/photo.jpg?sz=128", "display_name": "George Roger", "link": "https://stackoverflow.com/users/4119156/george-roger"}, "is_accepted": false, "score": 1, "last_activity_date": 1429930674, "last_edit_date": 1429930674, "creation_date": 1429925586, "answer_id": 29860006, "question_id": 29859892, "link": "https://stackoverflow.com/questions/29859892/mutating-an-item-inside-of-nested-loops/29860006#29860006", "title": "Mutating an item inside of nested loops", "body": "<p>I've found an answer to my own question</p>\n\n<pre><code>for (point, movement) in points.iter().zip(movements.iter_mut()) {\n    *movement = Quaternion::identity();\n    for neighbour in &amp;points {\n        if neighbour.id == point.id {\n            continue;\n        }\n        let angle = point.pos.angle(&amp;neighbour.pos);\n        let axis = point.pos.cross(&amp;neighbour.pos);\n        let force = -(1.0/(angle*angle)) * update_amt;\n        *movement = (*movement) * Quaternion::angle_axis(angle, axis);\n    }\n}\n</code></pre>\n\n<p>By creating a separate vector to hold the movements, rather than having movement be a trait of the point, I can borrow the points vector twice as immutable, and borrow the movements vector once as mutable. </p>\n\n<p>I think a C++ mindset still has me thinking too much in terms of classes, but I may still be wrong about this being a ideal way to go about this sort of pattern in rust. If anyone has a problem with this solution, or just knows a better way to go about it, any suggestions would be great.</p>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 11, "last_activity_date": 1429934523, "last_edit_date": 1429934523, "creation_date": 1429930728, "answer_id": 29860499, "question_id": 29859892, "link": "https://stackoverflow.com/questions/29859892/mutating-an-item-inside-of-nested-loops/29860499#29860499", "title": "Mutating an item inside of nested loops", "body": "<p>There's a few ways one can write this.</p>\n\n<p>One is your suggestion, of separating movements into a separate vector, since that ensures that the mutable borrow of the movement value doesn't force the compiler to conservatively disallow access to the rest of <code>points</code> to avoid mutable borrows from aliasing. In Rust, <code>&amp;mut</code> reference can never alias: if values are accessible by exactly one path, it is guaranteed that any/all mutations will be memory safe, if there is aliasing it takes more effort (including runtime checks) to ensure that mutations are safe.</p>\n\n<p>Another is to use indicies for the outer loop:</p>\n\n<pre><code>for i in 0..points.len() {\n    let mut movement = Quaternion::identity();\n    for neighbour in &amp;points {\n        if neighbour.id == points[i].id {\n            continue\n        }\n        // ...\n        movement = movement * Quaternion::angle_axis(angle, axis);\n    }\n\n    points[i].movement = movement\n}\n</code></pre>\n\n<p>A third method is to change how the loops work: when considering the interaction between a point and its neighbour, update both the point and the neighbour at the same time. This allows one to iterate \"triangularly\": point <code>0</code>  interacts with <code>1..n</code>, point <code>1</code> interacts with <code>2..n</code>, ... (where <code>n = points.len()</code>). This can be done in a way that the compiler understands won't alias.</p>\n\n<p>First one must reset all <code>movement</code>s to <code>1</code>. The main loops then consist of an outer loop that selects the single element, and then one can \"reborrow\" the iterator for the inner loop. The outer loop cannot use <code>for</code>, since <code>for</code> will take ownership of the iterator, fortunately, though, <code>while let</code> allows one to write this neatly:</p>\n\n<pre><code>for point in &amp;mut points {\n    point.movement = Quaternion::identity()\n}\nlet mut iter = points.iter_mut();\nwhile let Some(point) = iter.next() {\n    // this reborrows the iterator by converting back to a slice\n    // (with a shorter lifetime) which is coerced to an iterator \n    // by `for`. This then iterates over the elements after `point`\n    for neighbour in &amp;mut iter[..] {\n        // `neighbour` is automatically distinct from `point`\n\n        let angle = point.pos.angle(&amp;neighbour.pos);\n        let axis = point.pos.cross(&amp;neighbour.pos);\n        let force = -(1.0 / (angle*angle)) * update_amt;\n        point.movement = point.movement * Quaternion::angle_axis(angle, axis);\n        neighbour.movement = neighbour.movement * Quaternion::angle_axis(angle, -axis);\n    }\n}\n</code></pre>\n\n<p>NB. that I believe that <code>axis</code> must be reversed for the <code>neighbour</code> update. (I haven't compiled this, but hopefully it's close.)</p>\n\n<p>Theoretically, the latter offers an approximately 2&times; speed-up vs. any of the other suggestions so far. At least, it reduces the number of calculations of <code>angle</code>, <code>axis</code> &amp; <code>force</code> from <code>n * (n - 1)</code> to <code>n * (n - 1) / 2</code>.</p>\n"}], "owner": {"reputation": 183, "user_id": 4119156, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-lBGugoWscQI/AAAAAAAAAAI/AAAAAAAAAFQ/XbODxH0Kzw0/photo.jpg?sz=128", "display_name": "George Roger", "link": "https://stackoverflow.com/users/4119156/george-roger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2523, "favorite_count": 0, "answer_count": 2, "score": 9, "last_activity_date": 1541354486, "creation_date": 1429924483, "last_edit_date": 1541354486, "question_id": 29859892, "link": "https://stackoverflow.com/questions/29859892/mutating-an-item-inside-of-nested-loops", "title": "Mutating an item inside of nested loops", "body": "<p>I'm trying to write a program to evenly (or as close to possible) distribute points about the surface of a sphere. I'm trying to achieve this by placing N points randomly about a unit sphere, and then running multiple steps where the points repel each other.</p>\n\n<p>The problem is in the loop over the points array. The code below loops over each point, and then the loop inside that, again loops over each point and calculates the repulsive force between each point pair.</p>\n\n<pre><code>for point in points.iter_mut() {\n    point.movement = Quaternion::identity();\n    for neighbour in &amp;points {\n        if neighbour.id == point.id {\n            continue;\n        }\n        let angle = point.pos.angle(&amp;neighbour.pos);\n        let axis = point.pos.cross(&amp;neighbour.pos);\n        let force = -(1.0/(angle*angle)) * update_amt;\n        point.movement = point.movement * Quaternion::angle_axis(angle, axis);\n    }\n}\n</code></pre>\n\n<p>I'm getting the error: </p>\n\n<pre><code>src/main.rs:71:27: 71:33 error: cannot borrow `points` as immutable because it is also borrowed as mutable\nsrc/main.rs:71         for neighbour in &amp;points {\n</code></pre>\n\n<p>and the explanation </p>\n\n<pre><code>the mutable borrow prevents subsequent moves, borrows, or modification of `points` until the borrow ends\n</code></pre>\n\n<p>I'm fairly new to Rust, coming from a C++ background, and I've got no idea how to make this kind of pattern work in Rust.</p>\n\n<p>Any solutions to this would be greatly appreciated, as I'm now absolutely stuck for ideas.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1429916394, "post_id": 29858775, "comment_id": 47843604, "body": "I don&#39;t really understand : Either #1 the return value of FirstStruct::get() has been allocated on the stack and then it shouldn&#39;t have been returned or #2 the return value of FirstStruct::get() has been allocated on the heap and then there must be a way to say : &quot;Don&#39;t deallocate it, I transfer the return value from FirstStruct to SecondStruct associating it with SecondStruct&#39;s lifetime&quot;. Isn&#39;t it ?"}, {"owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1429916663, "post_id": 29858775, "comment_id": 47843692, "body": "#1 as you expect, I don&#39;t want to use static #2 I can&#39;t move FirstStruct because it is from another library (rustc-serialize) #3 I already tried this solution and it work, but this is boilerplate (unwraping Option, update to string and rewrap in Option) #4 Thanks a lot for taking time to answer and edit my post. Rust community is definitely awesome."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "edited": false, "score": 0, "creation_date": 1429932511, "post_id": 29858775, "comment_id": 47847088, "body": "@Moebius I&#39;ve updated with some more details. If that still doesn&#39;t help, then perhaps someone else will be able to provide a more clear answer!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1429932474, "last_edit_date": 1429932474, "creation_date": 1429915697, "answer_id": 29858775, "question_id": 29858662, "link": "https://stackoverflow.com/questions/29858662/lifetime-error-for-returned-value-of-a-function/29858775#29858775", "title": "Lifetime error for returned value of a function", "body": "<pre class=\"lang-rust prettyprint-override\"><code>pub fn from_string() -&gt; SecondStruct&lt;'a&gt; {\n    let obj = FirstStruct { a: 1 };\n    SecondStruct {\n        name: SecondStruct::extract_string(&amp;obj),\n    }\n}\n</code></pre>\n\n<p>This code says \"I will return a <code>SecondStruct</code> with the lifetime <code>'a</code>\". The <strong>caller</strong> of the code gets to determine what the length of the lifetime <code>'a</code> is. This is almost never what you want!</p>\n\n<pre><code>// Lifetime elision means the method is equivalent to this\n// fn get&lt;'a&gt;(&amp;'a self) -&gt; Option&lt;&amp;'a str&gt;\n\nfn get(&amp;self) -&gt; Option&lt;&amp;str&gt; {\n    Some(\"aaa\")\n}\n</code></pre>\n\n<p>This code uses says that the string returned will live as long as <code>self</code> lives.</p>\n\n<p>Put these two concepts together, and you can understand your error. The variable <code>obj</code> is only defined to live as long as the function call is active. However, you are trying to return a reference to the inner-workings of the struct beyond the call! Actually, you are trying to return it for <em>any arbitrary lifetime</em> the caller decides! This is Rust preventing you from shooting yourself in the foot, hooray for Rust!</p>\n\n<hr>\n\n<p>So how do you fix your problem? For the provided example code, the easiest thing is to just use the <code>'static</code> lifetime:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct FirstStruct { a: i8 }\n\nimpl FirstStruct {\n    fn get(&amp;self) -&gt; Option&lt;&amp;'static str&gt; { Some(\"aaa\") }\n}\n\npub struct SecondStruct&lt;'a&gt; { name: Option&lt;&amp;'a str&gt; }\n\nimpl&lt;'a&gt; SecondStruct&lt;'a&gt; {\n    fn extract_string(obj: &amp;FirstStruct) -&gt; Option&lt;&amp;'static str&gt; { obj.get() }\n\n    pub fn from_string() -&gt; SecondStruct&lt;'static&gt; {\n        let obj = FirstStruct { a: 1 };\n        SecondStruct { name: SecondStruct::extract_string(&amp;obj) }\n    }\n}\n\nfn main() {\n    let g_def_res = SecondStruct::from_string();\n}\n</code></pre>\n\n<p>But that's probably not what you really want. The next thing to try would be to <em>embed</em> <code>FirstStruct</code> inside <code>SecondStruct</code>, and simply delegate to it. Another option would be to move from <code>&amp;str</code> to <code>String</code> - <code>String</code> owns the string data, and so you can transfer ownership from <code>First</code> to <code>Second</code>.</p>\n\n<p>Whatever you do, you have to ensure that the source of the string data outlives the function call to <code>from_string</code>.</p>\n\n<hr>\n\n<blockquote>\n  <p>Either the return value of <code>FirstStruct::get</code> has been allocated on the stack or it has been allocated on the heap.</p>\n</blockquote>\n\n<p>It's trickier than that. The return value is <em>always</em> on the stack. That is, the <code>Option&lt;&amp;str&gt;</code> takes up space on the stack. The <code>&amp;str</code> may contain a pointer to something that is allocated either on the stack or heap, it's not known by this code. All you know is that the pointed-at value is guaranteed to live for the lifetime of that specific <code>FirstStruct</code> item.</p>\n\n<p>You don't own the string, so you can't transfer ownership around.</p>\n\n<blockquote>\n  <p>I can't move FirstStruct because it is from another library (rustc-serialize</p>\n</blockquote>\n\n<p>I'm not sure what you mean. If you have an object, then you can embed it into your object. The fact that it comes from another crate doesn't come into play. If you have a reference to something, then you can still capture the reference, but then your object has to live for a shorter period than the reference (so that it never becomes invalid).</p>\n\n<blockquote>\n  <p>Unwrapping Option, updating to a string and rewrapping in Option is a lot of boilerplate.</p>\n</blockquote>\n\n<p>Have you seen <code>Option::map</code>? It makes this kind of thing very succinct. Combined with <code>From</code>, you can write a very short thing to convert an <code>Option&lt;&amp;str&gt;</code> to <code>Option&lt;String&gt;</code>:</p>\n\n<pre><code>// fn is just to establish some types, you'd just use the `.map` call in real code\nfn foo(a: Option&lt;&amp;str&gt;) -&gt; Option&lt;String&gt; {\n    a.map(From::from)\n}\n</code></pre>\n"}], "owner": {"reputation": 4863, "user_id": 2482582, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/yQkZE.jpg?s=128&g=1", "display_name": "Moebius", "link": "https://stackoverflow.com/users/2482582/moebius"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 953, "favorite_count": 0, "accepted_answer_id": 29858775, "answer_count": 1, "score": 0, "last_activity_date": 1429932474, "creation_date": 1429915031, "last_edit_date": 1429915189, "question_id": 29858662, "link": "https://stackoverflow.com/questions/29858662/lifetime-error-for-returned-value-of-a-function", "title": "Lifetime error for returned value of a function", "body": "<p>This is a simplified version of a piece of code I am trying to implement:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct FirstStruct\n{\n    a:  i8,\n}\n\nimpl FirstStruct\n{\n     fn get(&amp;self) -&gt; Option&lt;&amp;str&gt;\n     {\n         Some(\"aaa\")\n     }\n}\n\npub struct SecondStruct&lt;'a&gt;\n{\n    pub name:           Option&lt;&amp;'a str&gt;,\n}\n\nimpl&lt;'a&gt; SecondStruct&lt;'a&gt;\n{\n    fn extract_string(obj: &amp;/*'a*/ FirstStruct) -&gt; Option&lt;&amp;'a str&gt;\n    {\n        obj.get() //this is where the error happen\n    }\n\n    pub fn from_string() -&gt; SecondStruct&lt;'a&gt;\n    {\n        let obj = FirstStruct{a: 1};\n        SecondStruct{\n            name:       SecondStruct::extract_string(&amp;obj),\n        }\n    }\n}\n\nfn main()\n{\n    let g_def_res = SecondStruct::from_string();\n}\n</code></pre>\n\n<p>This code throws the following error :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>test2.rs:23:13: 23:18 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements\ntest2.rs:23         obj.get() //this is where the error happen\n                        ^~~~~\ntest2.rs:21:5: 24:6 help: consider using an explicit lifetime parameter as shown: fn extract_string(obj: &amp;'a FirstStruct) -&gt; Option&lt;&amp;'a str&gt;\ntest2.rs:21     fn extract_string(obj: &amp;FirstStruct) -&gt; Option&lt;&amp;'a str&gt;\ntest2.rs:22     {\ntest2.rs:23         obj.get() //this is where the error happen\ntest2.rs:24     }\nerror: aborting due to previous error\n</code></pre>\n\n<p>Applying the proposed solution throw this error :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>test2.rs:30:55: 30:58 error: `obj` does not live long enough\ntest2.rs:30             name:       SecondStruct::extract_string(&amp;obj),\n                                                                  ^~~\ntest2.rs:27:5: 32:6 note: reference must be valid for the lifetime 'a as defined on the block at 27:4...\ntest2.rs:27     {\ntest2.rs:28         let obj = FirstStruct{a: 1};\ntest2.rs:29         SecondStruct{\ntest2.rs:30             name:       SecondStruct::extract_string(&amp;obj),\ntest2.rs:31         }\ntest2.rs:32     }\ntest2.rs:28:37: 32:6 note: ...but borrowed value is only valid for the block suffix following statement 0 at 28:36\ntest2.rs:28         let obj = FirstStruct{a: 1};\ntest2.rs:29         SecondStruct{\ntest2.rs:30             name:       SecondStruct::extract_string(&amp;obj),\ntest2.rs:31         }\ntest2.rs:32     }\nerror: aborting due to previous error\n</code></pre>\n\n<p>To summarise:</p>\n\n<p>How to say that the return value of <code>FirstStruct::get</code> must have the lifetime of either [the return value of <code>SecondStruct::from_str</code> | the struct lifetime <code>'a</code>]? I think both refer to same thing?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 1530, "user_id": 2856360, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/Zh14f.png?s=128&g=1", "display_name": "Tomasz Waszczyk", "link": "https://stackoverflow.com/users/2856360/tomasz-waszczyk"}, "edited": false, "score": 0, "creation_date": 1609249323, "post_id": 29857478, "comment_id": 115788911, "body": "There is any command to add dev dependency like in Yarn: &quot;yarn add xyz&quot;?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1530, "user_id": 2856360, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/Zh14f.png?s=128&g=1", "display_name": "Tomasz Waszczyk", "link": "https://stackoverflow.com/users/2856360/tomasz-waszczyk"}, "edited": false, "score": 1, "creation_date": 1609249614, "post_id": 29857478, "comment_id": 115789037, "body": "@TomaszWaszczyk <a href=\"https://stackoverflow.com/a/32934310/155423\">Is there a command to automatically add a crate to my Cargo.toml?</a>. <code>cargo add --dev xyz</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 74, "last_activity_date": 1617801786, "last_edit_date": 1617801786, "creation_date": 1429909568, "answer_id": 29857478, "question_id": 29857002, "link": "https://stackoverflow.com/questions/29857002/how-to-define-test-only-dependencies/29857478#29857478", "title": "How to define test-only dependencies?", "body": "<p>Yes. Use <code>dev-dependencies</code>. From the <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies\" rel=\"nofollow noreferrer\">Cargo docs</a>:</p>\n<blockquote>\n<p>You can add a <code>[dev-dependencies]</code> section to your <code>Cargo.toml</code> whose format is equivalent to <code>[dependencies]</code>:</p>\n<pre><code>[dev-dependencies]\ntempdir = &quot;0.3&quot;\n</code></pre>\n<p>Dev-dependencies are not used when compiling a package for building,\nbut are used for compiling tests, examples, and benchmarks.</p>\n</blockquote>\n<p>When possible, you should also use Cargo's <a href=\"https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions\" rel=\"nofollow noreferrer\">resolver version 2</a> to better handle complicated dev-dependency cases.</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7974, "favorite_count": 7, "accepted_answer_id": 29857478, "answer_count": 1, "score": 71, "last_activity_date": 1617801786, "creation_date": 1429907723, "last_edit_date": 1429913091, "question_id": 29857002, "link": "https://stackoverflow.com/questions/29857002/how-to-define-test-only-dependencies", "title": "How to define test-only dependencies?", "body": "<p>I have a Rust library that implements a lint plugin. I want to include <code>compiletest</code>, but not require it outside of testing. What is the correct way to specify that the dependency is for testing only?</p>\n"}, {"tags": ["windows", "unix", "rust", "dependency-management", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 2050, "user_id": 3210837, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/d19541ed89cb1b8227a255188696700b?s=128&d=identicon&r=PG&f=1", "display_name": "Toothbrush", "link": "https://stackoverflow.com/users/3210837/toothbrush"}, "edited": false, "score": 0, "creation_date": 1476470211, "post_id": 30105345, "comment_id": 67375843, "body": "This answer is now obsolete. Please see <b>@Andrew Straw</b>&#39;s answer."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1431012096, "creation_date": 1431012096, "answer_id": 30105345, "question_id": 29854912, "link": "https://stackoverflow.com/questions/29854912/how-to-have-different-dependencies-depending-on-os-family/30105345#30105345", "title": "How to have different dependencies depending on OS family", "body": "<p>There currently is no way to do this. It would be nice, for sure.</p>\n"}, {"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1465710185, "post_id": 37761296, "comment_id": 63010505, "body": "Yea, this is true now. My answer is very old, and now inaccurate."}], "tags": [], "owner": {"reputation": 898, "user_id": 1633026, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2e1ad7e90b16b09cf026e49c24d148ba?s=128&d=identicon&r=PG", "display_name": "Andrew Straw", "link": "https://stackoverflow.com/users/1633026/andrew-straw"}, "is_accepted": true, "score": 19, "last_activity_date": 1465631402, "creation_date": 1465631402, "answer_id": 37761296, "question_id": 29854912, "link": "https://stackoverflow.com/questions/29854912/how-to-have-different-dependencies-depending-on-os-family/37761296#37761296", "title": "How to have different dependencies depending on OS family", "body": "<p>As far as I read the docs <a href=\"http://doc.crates.io/specifying-dependencies.html#platform-specific-dependencies\">here</a>, this should now work:</p>\n\n<pre><code>[target.'cfg(unix)'.dependencies]\nabc-sys = \"*\"\ndef = \"*\"\n\n[target.'cfg(windows)'.dependencies]\nabc-win = \"*\"\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2853, "user_id": 3062525, "user_type": "registered", "profile_image": "https://graph.facebook.com/1114414642001809/picture?type=large", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432", "link": "https://stackoverflow.com/users/3062525/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%92%d0%b0%d1%81%d0%b8%d0%bb%d1%8c%d0%b5%d0%b2"}, "is_accepted": false, "score": 0, "last_activity_date": 1568882927, "creation_date": 1568882927, "answer_id": 58007171, "question_id": 29854912, "link": "https://stackoverflow.com/questions/29854912/how-to-have-different-dependencies-depending-on-os-family/58007171#58007171", "title": "How to have different dependencies depending on OS family", "body": "<pre><code># macos dependencies\n\n[target.'cfg(target_os = \"macos\")'.dependencies]\ndep1 = \"*\"\ndep2 = \"*\"\n\n# windows dependencies\n\n[target.'cfg(target_os = \"windows\")'.dependencies]\ndep3 = \"*\"\ndep4 = \"*\"\n\n# regular dependencies\n\n[dependencies] \ndep5 = \"*\"\ndep6 = \"*\"\n\n</code></pre>\n"}], "owner": {"reputation": 163, "user_id": 4252260, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9dd0436f047308b959c0b562183437e0?s=128&d=identicon&r=PG&f=1", "display_name": "Bryal", "link": "https://stackoverflow.com/users/4252260/bryal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1712, "favorite_count": 2, "accepted_answer_id": 37761296, "answer_count": 3, "score": 16, "last_activity_date": 1568882927, "creation_date": 1429900104, "question_id": 29854912, "link": "https://stackoverflow.com/questions/29854912/how-to-have-different-dependencies-depending-on-os-family", "title": "How to have different dependencies depending on OS family", "body": "<p>I'm writing a cross-platform library that has platform specific dependencies, one for unix-like platforms, and one for windows. These crates only compile on specific platforms, wherefore I can't just add them all under dependencies normally.</p>\n\n<p>In the actual rust code I use <code>cfg</code> attributes, like <code>#[cfg(unix)]</code> to compile certain code for certain platforms, and I want to do something similar in the Cargo.toml, or in a build script, for the dependencies. Currently, I'm using target triplets like these:</p>\n\n<pre><code>[target.i686-unknown-linux-gnu.dependencies.crate1]\ngit = repo1\n[target.x86-unknown-linux-gnu.dependencies.crate1]\ngit = repo1\n[target.x86_64-unknown-linux-gnu.dependencies.crate1]\ngit = repo1\n\n[target.i686-pc-windows-gnu.dependencies]\ncrate2 = \"*\"\n[target.x86-pc-windows-gnu.dependencies]\ncrate2 = \"*\"\n[target.x86_64-pc-windows-gnu.dependencies]\ncrate2 = \"*\"\n</code></pre>\n\n<p>However, this list is far from exhaustive. I don't care about architecture or ABI, only OS family, and as such, the list would get very long, were I to match for every single unix-like target triple.</p>\n\n<p>Is there any way to use specific dependencies, determined only by the OS family of the platform cargo is run on? Something like:</p>\n\n<pre><code>[target.family.unix.dependencies]\nabc-sys = \"*\"\ndef = \"*\"\n\n[target.family.windows.dependencies]\nabc-win = \"*\"\n</code></pre>\n"}, {"tags": ["data-structures", "rust"], "comments": [{"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 1, "creation_date": 1429879992, "post_id": 29847928, "comment_id": 47821893, "body": "The only use-case I can think of involve unsafe behavior, like wanting objects of the heap having a fixed pointer position even if the <code>Vec</code> reallocates."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 12, "last_activity_date": 1429895900, "last_edit_date": 1429895900, "creation_date": 1429882156, "answer_id": 29848802, "question_id": 29847928, "link": "https://stackoverflow.com/questions/29847928/when-to-use-boxvec-or-vecbox/29848802#29848802", "title": "When to use Box&lt;Vec&lt;..&gt;&gt; or Vec&lt;Box&lt;..&gt;&gt;?", "body": "<p>There are really only a few times you need to use <code>Box</code>:</p>\n\n<ul>\n<li><p>Recursive data structures: not relevant for the outermost element, so no need for <code>Vec&lt;Box&lt;T&gt;&gt;</code>.</p></li>\n<li><p>Owned trait object, which must be <code>Box&lt;Trait&gt;</code> because the size of the object is dynamic;</p></li>\n<li><p>Things that are sensitive to particular memory addresses, in order that the contained object will keep the same memory location (practically never the case and definitely not the case in any stable public API; some of the handle stuff to do with <code>std::sync::mpsc::Select</code> is the only case that I am aware of; this unsafety and care required is a part of why <a href=\"http://doc.rust-lang.org/std/macro.select!.html\" rel=\"noreferrer\"><code>select!</code></a> exists. This sort of a thing (<code>Handle.add</code>) is unsafe stuff.</p></li>\n</ul>\n\n<p>If none of these situations apply, <em>you should not use <code>Box</code></em>. And <code>Box&lt;Vec&lt;T&gt;&gt;</code> is one such case; the boxing is completely superfluous, adding an additional level of indirection to no benefit whatsoever.</p>\n\n<p>So the simple version is:</p>\n\n<ul>\n<li><code>Box&lt;Vec&lt;T&gt;&gt;</code>: never.</li>\n<li><code>Vec&lt;Box&lt;T&gt;&gt;</code>: only if <code>T</code> is a trait, i.e. you\u2019re working with trait objects.</li>\n</ul>\n"}], "owner": {"reputation": 17673, "user_id": 139802, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/33c5692f72d9da5663651d034c4588b6?s=128&d=identicon&r=PG", "display_name": "Andrew Wagner", "link": "https://stackoverflow.com/users/139802/andrew-wagner"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1354, "favorite_count": 0, "accepted_answer_id": 29848802, "answer_count": 1, "score": 4, "last_activity_date": 1429895900, "creation_date": 1429879652, "last_edit_date": 1429880565, "question_id": 29847928, "link": "https://stackoverflow.com/questions/29847928/when-to-use-boxvec-or-vecbox", "title": "When to use Box&lt;Vec&lt;..&gt;&gt; or Vec&lt;Box&lt;..&gt;&gt;?", "body": "<p>When would it make sense to design a data structure that is nesting a <code>Box</code> and a <code>Vec</code> (or vice versa)?</p>\n\n<p>It seems like in most situations where you want to store multiple fixed-size things on the heap, the <code>Box</code> is redundant, since it's only (?) role is to heap-allocate a ~single value, and a normal <code>Vec</code> is already heap allocating it's storage.</p>\n\n<p>Context: I am still wrapping my head around the roles of the various Rust types for building up data structures.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "edited": false, "score": 0, "creation_date": 1429841554, "post_id": 29837514, "comment_id": 47801681, "body": "I don&#39;t understanding what the compiler needs the <code>&lt;&#39;a&gt;</code> for.  I&#39;ve edited my question to (hopefully) explain why I&#39;m confused."}, {"owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "edited": false, "score": 0, "creation_date": 1429842459, "post_id": 29837514, "comment_id": 47801934, "body": "You have done so splendidly.  Your nonsense example makes it clear that there is much more than can be done with lifetime parameters than appear in my simple example."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1429846340, "post_id": 29837514, "comment_id": 47802872, "body": "Also consider what happens when you have a lifetime parameter on a struct that&#39;s used in a method <code>impl</code>; how else would the compiler know to whom the lifetime is supposed to be bound?"}, {"owner": {"reputation": 17728, "user_id": 10556, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9c5da6e05ae65fbd295344270feba072?s=128&d=identicon&r=PG", "display_name": "Ash Wilson", "link": "https://stackoverflow.com/users/10556/ash-wilson"}, "edited": false, "score": 0, "creation_date": 1429877097, "post_id": 29837514, "comment_id": 47819787, "body": "Oh wow, that&#39;s the first time I&#39;ve seen the &quot;outlives&quot; declaration for lifetime parameters. That&#39;s pretty neat."}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "edited": false, "score": 0, "creation_date": 1429889349, "post_id": 29837514, "comment_id": 47828975, "body": "It seems we both thought about the same example at the same time. :)"}, {"owner": {"reputation": 12040, "user_id": 510036, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b7c510641e6526d19abc93e866e75ac8?s=128&d=identicon&r=PG", "display_name": "Qix - MONICA WAS MISTREATED", "link": "https://stackoverflow.com/users/510036/qix-monica-was-mistreated"}, "edited": false, "score": 0, "creation_date": 1429893469, "post_id": 29837514, "comment_id": 47831661, "body": "Holy cow lifetimes make sense now. This is the most clear cut example of what lifetimes are; thank you."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 17, "last_activity_date": 1577896609, "last_edit_date": 1577896609, "creation_date": 1429841254, "answer_id": 29837514, "question_id": 29837398, "link": "https://stackoverflow.com/questions/29837398/why-does-the-lifetime-name-appear-as-part-of-the-function-type/29837514#29837514", "title": "Why does the lifetime name appear as part of the function type?", "body": "<blockquote>\n  <p>What does the annotation &lt;'a> after the function name mean?</p>\n</blockquote>\n\n<pre><code>fn substr&lt;'a&gt;(s: &amp;'a str, until: u32) -&gt; &amp;'a str;\n//       ^^^^\n</code></pre>\n\n<p>This is declaring a generic <em>lifetime parameter</em>. It's similar to a generic <em>type parameter</em> (often seen as <code>&lt;T&gt;</code>), in that the <strong>caller</strong> of the function gets to decide what the lifetime is. Like you said, the lifetime of the result will be the same as the lifetime of the first argument.</p>\n\n<p>All lifetime names are equivalent, except for one: <code>'static</code>. This lifetime is pre-set to mean \"guaranteed to live for the entire life of the program\". </p>\n\n<p>The most common lifetime parameter name is probably <code>'a</code>, but you can use any letter or string. Single letters are most common, but any <code>snake_case</code> identifier is acceptable.</p>\n\n<blockquote>\n  <p>Why does the compiler need it, and what does it do with it?</p>\n</blockquote>\n\n<p>Rust generally favors things to be explicit, unless there's a very good ergonomic benefit. For lifetimes, lifetime elision takes care of something like 85+% of cases, which seemed like a clear win.</p>\n\n<p>Type parameters live in the same namespace as other types \u2014 is <code>T</code> a generic type or did someone name a struct that? Thus type parameters need to have an explicit annotation that shows that <code>T</code> is a parameter and not a real type. However, lifetime parameters don't have this same problem, so that's not the reason.</p>\n\n<p>Instead, the main benefit of explicitly listing type parameters is because you can control how <em>multiple</em> parameters interact. A nonsense example:</p>\n\n<pre><code>fn better_str&lt;'a, 'b, 'c&gt;(a: &amp;'a str, b: &amp;'b str) -&gt; &amp;'c str\nwhere\n    'a: 'c,\n    'b: 'c,\n{\n    if a.len() &lt; b.len() {\n        a\n    } else {\n        b\n    }\n}\n</code></pre>\n\n<p>We have two strings and say that the input strings may have different lifetimes, but must both outlive the lifetime of the result value. </p>\n\n<p>Another example, as <a href=\"https://stackoverflow.com/questions/29837398/why-does-the-lifetime-name-appear-as-part-of-the-function-type/29837514#comment47802872_29837514\">pointed out by DK</a>, is that structs can have their own lifetimes. I made this example also a bit of nonsense, but it hopefully conveys the point:</p>\n\n<pre><code>struct Player&lt;'a&gt; {\n    name: &amp;'a str,\n}\n\nfn name&lt;'p, 'n&gt;(player: &amp;'p Player&lt;'n&gt;) -&gt; &amp;'n str {\n    player.name\n}\n</code></pre>\n\n<p>Lifetimes can be one of the more mind-bending parts of Rust, but they are pretty great when you start to grasp them.</p>\n"}, {"comments": [{"owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "edited": false, "score": 0, "creation_date": 1429845915, "post_id": 29837817, "comment_id": 47802775, "body": "I have to admit I don&#39;t understand the playpen example.  It&#39;s using lifetime elision, but my question is about explicit lifetimes."}, {"owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "reply_to_user": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "edited": false, "score": 0, "creation_date": 1429847505, "post_id": 29837817, "comment_id": 47803156, "body": "I didn&#39;t see the (1) part I think."}, {"owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "edited": false, "score": 0, "creation_date": 1429897091, "post_id": 29837817, "comment_id": 47833876, "body": "I edited my answer to add the (1) part.  That might be why you didn&#39;t see it."}], "tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 1, "last_activity_date": 1429843216, "creation_date": 1429843216, "answer_id": 29837817, "question_id": 29837398, "link": "https://stackoverflow.com/questions/29837398/why-does-the-lifetime-name-appear-as-part-of-the-function-type/29837817#29837817", "title": "Why does the lifetime name appear as part of the function type?", "body": "<p>The <code>&lt;'a&gt;</code> annotation just declares the lifetimes used in the function, exactly like generic parameters <code>&lt;T&gt;</code>. </p>\n\n<pre><code>fn subslice&lt;'a, T&gt;(s: &amp;'a [T], until: u32) -&gt; &amp;'a [T] { \\\\'\n    &amp;s[..until as usize]\n}\n</code></pre>\n\n<p>Note that in your example, all lifetimes can be inferred.</p>\n\n<pre><code>fn subslice&lt;T&gt;(s: &amp;[T], until: u32) -&gt; &amp;[T] {\n    &amp;s[..until as usize]\n}\n\nfn substr(s: &amp;str, until: u32) -&gt; &amp;str {\n    &amp;s[..until as usize]\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/GwWNYg\" rel=\"nofollow\">playpen example</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1429889425, "post_id": 29851211, "comment_id": 47829035, "body": "This is a great answer that goes into the meanings of lifetimes more than my answer! It also conveniently explains why my &quot;nonsense example&quot; is actually nonsense!"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429889489, "post_id": 29851211, "comment_id": 47829069, "body": "@Shepmaster: Thanks. :)"}, {"owner": {"reputation": 88, "user_id": 810926, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b73422de0cadfe740da5f1acdaedfb44?s=128&d=identicon&r=PG", "display_name": "L&#233;o", "link": "https://stackoverflow.com/users/810926/l%c3%a9o"}, "edited": false, "score": 0, "creation_date": 1440006393, "post_id": 29851211, "comment_id": 52098871, "body": "Is there any difference in semantics between <code>fn min&lt;&#39;a, &#39;b, &#39;c, T: Ord&gt;(x: &amp;&#39;a T, y: &amp;&#39;b T) -&gt; &amp;&#39;c T where &#39;a: &#39;c, &#39;b: &#39;c</code> and <code>fn min&lt;&#39;a, T: Ord&gt;(x: &amp;&#39;a T, y: &amp;&#39;a T) -&gt; &amp;&#39;a T { \u2026 }</code>? Or do they behave exactly the same way?"}, {"owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "reply_to_user": {"reputation": 88, "user_id": 810926, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b73422de0cadfe740da5f1acdaedfb44?s=128&d=identicon&r=PG", "display_name": "L&#233;o", "link": "https://stackoverflow.com/users/810926/l%c3%a9o"}, "edited": false, "score": 1, "creation_date": 1440105597, "post_id": 29851211, "comment_id": 52148411, "body": "@L&#233;o: It&#39;s practically the same with a different number of lifetime parameters. They both accept the same kinds of arguments."}], "tags": [], "owner": {"reputation": 25688, "user_id": 172531, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/16b8a9971551c67422fea478a6e73bae?s=128&d=identicon&r=PG", "display_name": "sellibitze", "link": "https://stackoverflow.com/users/172531/sellibitze"}, "is_accepted": true, "score": 34, "last_activity_date": 1519971079, "last_edit_date": 1519971079, "creation_date": 1429888457, "answer_id": 29851211, "question_id": 29837398, "link": "https://stackoverflow.com/questions/29837398/why-does-the-lifetime-name-appear-as-part-of-the-function-type/29851211#29851211", "title": "Why does the lifetime name appear as part of the function type?", "body": "<p>Let me expand on the previous answers\u2026</p>\n\n<blockquote>\n  <p>What does the annotation &lt;'a> after the function name mean?</p>\n</blockquote>\n\n<p>I wouldn't use the word \"annotation\" for that. Much like <code>&lt;T&gt;</code> introduces a generic <em>type</em> parameter, <code>&lt;'a&gt;</code> introduces a generic <em>lifetime</em> parameter. You can't use any generic parameters without introducing them first and for generic functions this introduction happens right after their name. You can think of a generic function as a family of functions. So, essentially, you get one function for every combination of generic parameters. <code>substr::&lt;'x&gt;</code> would be a specific member of that function family for some lifetime <code>'x</code>.</p>\n\n<p>If you're unclear on when and why we have to be explicit about lifetimes, read on\u2026</p>\n\n<p>A lifetime parameter is always associated with all reference types. When you write</p>\n\n<pre><code>fn main() {\n    let x = 28374;\n    let r = &amp;x;\n}\n</code></pre>\n\n<p>the compiler knows that x lives in the main function's scope enclosed with curly braces. Internally, it identifies this scope with some lifetime parameter. For us, it is unnamed. When you take the address of <code>x</code>, you'll get a value of a specific reference type. A reference type is kind of a member of a two dimensional family of reference types. One axis is the type of what the reference points to and the other axis is a lifetime that is used for two constraints:</p>\n\n<ol>\n<li>The lifetime parameter of a reference type represents an upper bound for how long you can hold on to that reference</li>\n<li>The lifetime parameter of a reference type represents a lower bound for the lifetime of the things you can make the reference point to.</li>\n</ol>\n\n<p>Together, these constraints play a vital role in Rust's memory safety story. The goal here is to avoid dangling references. We would like to rule out references that point to some memory region we are not allowed to use anymore because that thing it used to point to does not exist anymore.</p>\n\n<p>One potential source of confusion is probably the fact that lifetime parameters are invisible most of the time. But that does not mean they are not there. References <em>always</em> have a lifetime parameter in their type. But such a lifetime parameter does not have to have a name and most of the time we don't need to mention it anyways because the compiler can assign names for lifetime parameters automatically. This is called \"lifetime elision\". For example, in the following case, you don't <em>see</em> any lifetime parameters being mentioned:</p>\n\n<pre><code>fn substr(s: &amp;str, until: u32) -&gt; &amp;str {\u2026}\n</code></pre>\n\n<p>But it's okay to write it like this. It's actually a short-cut syntax for the more explicit</p>\n\n<pre><code>fn substr&lt;'a&gt;(s: &amp;'a str, until: u32) -&gt; &amp;'a str {\u2026}\n</code></pre>\n\n<p>Here, the compiler automatically assigns the same name to the \"input lifetime\" and the \"output lifetime\" because it's a very common pattern and most likely exactly what you want. Because this pattern is so common, the compiler lets us get away without saying anything about lifetimes. It <em>assumes</em> that this more explicit form is what we meant based on a couple of \"lifetime elision\" rules (which are at least documented <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0141-lifetime-elision.md\" rel=\"noreferrer\">here</a>)</p>\n\n<p>There are situations in which <em>explicit</em> lifetime parameters are <em>not</em> optional. For example, if you write</p>\n\n<pre><code>fn min&lt;T: Ord&gt;(x: &amp;T, y: &amp;T) -&gt; &amp;T {\n    if x &lt;= y {\n        x\n    } else {\n        y\n    }\n}\n</code></pre>\n\n<p>the compiler will complain because it will interpret the above declaration as</p>\n\n<pre><code>fn min&lt;'a, 'b, 'c, T: Ord&gt;(x: &amp;'a T, y: &amp;'b T) -&gt; &amp;'c T { \u2026 }\n</code></pre>\n\n<p>So, for each reference a separate lifetime parameter is introduced. But no information on how the lifetime parameters relate to each other is available in this signature. The user of this generic function could use <em>any</em> lifetimes. And that's a problem inside its body. We're trying to return either <code>x</code> or <code>y</code>. But the type of <code>x</code> is <code>&amp;'a T</code>. That's not compatible with the return type <code>&amp;'c T</code>. The same is true for <code>y</code>. Since the compiler knows nothing about how these lifetimes relate to each other, it's not safe to return these references as a reference of type <code>&amp;'c T</code>.</p>\n\n<p>Can it ever be safe to go from a value of type <code>&amp;'a T</code> to <code>&amp;'c T</code>? Yes. It's safe if the lifetime <code>'a</code> is equal <em>or greater</em> than the lifetime <code>'c</code>. Or in other words <code>'a: 'c</code>. So, we <em>could</em> write this</p>\n\n<pre><code>fn min&lt;'a, 'b, 'c, T: Ord&gt;(x: &amp;'a T, y: &amp;'b T) -&gt; &amp;'c T\n      where 'a: 'c, 'b: 'c\n{ \u2026 }\n</code></pre>\n\n<p>and get away with it without the compiler complaining about the function's body. But it's actually <em>unnecessarily</em> complex. We can also simply write</p>\n\n<pre><code>fn min&lt;'a, T: Ord&gt;(x: &amp;'a T, y: &amp;'a T) -&gt; &amp;'a T { \u2026 }\n</code></pre>\n\n<p>and use a single lifetime parameter for everything. The compiler is able to deduce <code>'a</code> as the minimum lifetime of the argument references at the call site just because we used the same lifetime name for both parameters. And this lifetime is precisely what we need for the return type.</p>\n\n<p>I hope this answers your question. :)\nCheers!</p>\n"}], "owner": {"reputation": 89316, "user_id": 238886, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG", "display_name": "Wayne Conrad", "link": "https://stackoverflow.com/users/238886/wayne-conrad"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1917, "favorite_count": 10, "accepted_answer_id": 29851211, "answer_count": 3, "score": 21, "last_activity_date": 1577896609, "creation_date": 1429840557, "last_edit_date": 1429841445, "question_id": 29837398, "link": "https://stackoverflow.com/questions/29837398/why-does-the-lifetime-name-appear-as-part-of-the-function-type", "title": "Why does the lifetime name appear as part of the function type?", "body": "<p>I believe that this function declaration tells Rust that the lifetime of the function's output is the same as the lifetime of it's <code>s</code> parameter:</p>\n\n<pre><code>fn substr&lt;'a&gt;(s: &amp;'a str, until: u32) -&gt; &amp;'a str;\n         ^^^^\n</code></pre>\n\n<p>It seems to me that the compiler only needs to know this(1):</p>\n\n<pre><code>fn substr(s: &amp;'a str, until: u32) -&gt; &amp;'a str;\n</code></pre>\n\n<p>What does the annotation <code>&lt;'a&gt;</code> after the function name mean?  Why does the compiler need it, and what does it do with it?</p>\n\n<hr>\n\n<p>(1): I know it needs to know even less, due to lifetime elision.  But this question is about specifying lifetime explicitly.</p>\n"}, {"tags": ["image", "rust", "procedural"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429840010, "post_id": 29836804, "comment_id": 47801270, "body": "BTW, questions will get better answers (and hence be more helpful to you) if they&#39;re specific, e.g. including <a href=\"http://mattgemmell.com/what-have-you-tried/\" rel=\"nofollow noreferrer\">what you have tried</a>, and points where you&#39;re confused/lost, e.g. maybe you don&#39;t know how to install the library, maybe you&#39;re not sure how to create an image to modify. I&#39;ve assumed the latter in my answer, but I&#39;m unsure! Be sure to clarify the question if you&#39;re still lost."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429842267, "post_id": 29836804, "comment_id": 47801868, "body": "Welcome to Stack Overflow! In addition to the existing advice, you should read <a href=\"http://stackoverflow.com/help/on-topic\">What topics can I ask about</a> and <a href=\"http://stackoverflow.com/help/how-to-ask\">How to ask a good question</a>. For example, it&#39;s unclear if you have any experience in procedural image generation in any language. Unfortunately, SO still isn&#39;t a good fit to answer that broad of a question either!"}, {"owner": {"reputation": 423, "user_id": 498916, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c92e05bbd345dfe577c437a3c4c77935?s=128&d=identicon&r=PG", "display_name": "Rik", "link": "https://stackoverflow.com/users/498916/rik"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429860564, "post_id": 29836804, "comment_id": 47808688, "body": "You&#39;re right, it was a very broad question. Thanks for being patient. @huon-dbaupp got it spot on though: what I wanted to know was how to create an image, edit it and save it out. The procedural stuff can come later. Thanks again."}], "answers": [{"comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1429872769, "post_id": 29837275, "comment_id": 47816840, "body": "On a side note, I wish things like &quot;elmesque&quot; where implemented against &quot;rust-image&quot; instead of requiring the more desktop-oriented parts of the Piston."}, {"owner": {"reputation": 9251, "user_id": 202083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5ec4abe66cb7af4c957e785cdc24449e?s=128&d=identicon&r=PG", "display_name": "Tristram Gr&#228;bener", "link": "https://stackoverflow.com/users/202083/tristram-gr%c3%a4bener"}, "edited": false, "score": 0, "creation_date": 1450883935, "post_id": 29837275, "comment_id": 56618121, "body": "Thanks a lot! that was the example that was missing in the documentation to get running!"}, {"owner": {"reputation": 233, "user_id": 4389564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iHnQR.png?s=128&g=1", "display_name": "Month", "link": "https://stackoverflow.com/users/4389564/month"}, "edited": false, "score": 7, "creation_date": 1479568064, "post_id": 29837275, "comment_id": 68618092, "body": "This code wont&#39; compile because now <code>Imagebuffer</code> requires two arguments: pixel type and container to store it. You should change to, for example, <code>let mut image = ImageBuffer::&lt;Rgb&lt;u8&gt;, Vec&lt;u8&gt; &gt;::new(WIDTH, HEIGHT);</code>"}, {"owner": {"reputation": 14299, "user_id": 791713, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/1d51e358999bd31439d3810486942e9b?s=128&d=identicon&r=PG", "display_name": "Niklas R", "link": "https://stackoverflow.com/users/791713/niklas-r"}, "edited": false, "score": 2, "creation_date": 1502294925, "post_id": 29837275, "comment_id": 78150923, "body": "I get &quot;expected 2 parameters&quot; for <code>.save()</code> using <code>image 0.15.0</code>. I can&#39;t get the function to work. Also tried <code>image.save(&quot;out.png&quot;, image::PNG)</code> and <code>image.save(&amp;Path::new(&quot;out.png), image::PNG)</code> :("}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 11, "last_activity_date": 1429839710, "creation_date": 1429839710, "answer_id": 29837275, "question_id": 29836804, "link": "https://stackoverflow.com/questions/29836804/how-do-i-procedurally-generate-images-using-rust-image/29837275#29837275", "title": "How do I procedurally generate images using rust-image?", "body": "<p>The place to begin is the <a href=\"http://www.piston.rs/image/image/\" rel=\"noreferrer\">docs</a> and <a href=\"https://github.com/PistonDevelopers/image\" rel=\"noreferrer\">the repository</a>.</p>\n\n<p>It's not immediately obvious from the landing page of the documentation, but the core type in <code>image</code> is <a href=\"http://www.piston.rs/image/image/struct.ImageBuffer.html\" rel=\"noreferrer\"><code>ImageBuffer</code></a>.</p>\n\n<p>The <a href=\"http://www.piston.rs/image/image/struct.ImageBuffer.html#method.new\" rel=\"noreferrer\"><code>new</code> function</a> allows one to construct an <code>ImageBuffer</code> representing an image with the given/width, storing pixels of a given type (e.g. <a href=\"http://www.piston.rs/image/image/struct.Rgb.html\" rel=\"noreferrer\">RGB</a>, or that <a href=\"http://www.piston.rs/image/image/struct.Rgba.html\" rel=\"noreferrer\">with transparency</a>). One can use methods like <a href=\"http://www.piston.rs/image/image/struct.ImageBuffer.html#method.pixels_mut\" rel=\"noreferrer\"><code>pixels_mut</code></a>, <code>get_pixel_mut</code> and <code>put_pixel</code> (the latter are below <code>pixels_mut</code> in the documentation) to modify the image. E.g.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate image;\n\nuse image::{ImageBuffer, Rgb};\n\nconst WIDTH: u32 = 10;\nconst HEIGHT: u32 = 10;\n\nfn main() {\n    // a default (black) image containing Rgb values\n    let mut image = ImageBuffer::&lt;Rgb&lt;u8&gt;&gt;::new(WIDTH, HEIGHT);\n\n    // set a central pixel to white\n    image.get_pixel_mut(5, 5).data = [255, 255, 255];\n\n    // write it out to a file\n    image.save(\"output.png\").unwrap();\n}\n</code></pre>\n\n<p>which looks like: <img src=\"https://i.stack.imgur.com/zKOfO.png\" alt=\"output\"></p>\n\n<p>The repo is particularly useful as a starting point, because it contains examples, in particular, it has <a href=\"https://github.com/PistonDevelopers/image/blob/master/examples/fractal.rs\" rel=\"noreferrer\">an example</a> of programmatically generating <a href=\"https://github.com/PistonDevelopers/image/blob/master/examples/fractal.png\" rel=\"noreferrer\">an image</a>. When using a new library, I'll open the docs, and, if confused, the repo specifically to look for examples.</p>\n"}, {"tags": [], "owner": {"reputation": 10672, "user_id": 996366, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/F8mcb.jpg?s=128&g=1", "display_name": "Eka", "link": "https://stackoverflow.com/users/996366/eka"}, "is_accepted": false, "score": 1, "last_activity_date": 1613817092, "creation_date": 1613817092, "answer_id": 66290520, "question_id": 29836804, "link": "https://stackoverflow.com/questions/29836804/how-do-i-procedurally-generate-images-using-rust-image/66290520#66290520", "title": "How do I procedurally generate images using rust-image?", "body": "<p>As @huon answer is 6 years old, I was getting errors reproducing the result, so I wrote this,</p>\n<pre><code>use image::{ImageBuffer, RgbImage};\n\nconst WIDTH:u32 = 10;\nconst HEIGHT:u32 = 10;\n\nfn main() {\n    let mut image: RgbImage = ImageBuffer::new(WIDTH, HEIGHT);\n    *image.get_pixel_mut(5, 5) = image::Rgb([255,255,255]);\n    image.save(&quot;output.png&quot;).unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 423, "user_id": 498916, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c92e05bbd345dfe577c437a3c4c77935?s=128&d=identicon&r=PG", "display_name": "Rik", "link": "https://stackoverflow.com/users/498916/rik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5751, "favorite_count": 0, "accepted_answer_id": 29837275, "answer_count": 2, "score": 10, "last_activity_date": 1613817092, "creation_date": 1429836220, "last_edit_date": 1429842091, "question_id": 29836804, "link": "https://stackoverflow.com/questions/29836804/how-do-i-procedurally-generate-images-using-rust-image", "title": "How do I procedurally generate images using rust-image?", "body": "<p>I'd like to learn Rust and thought it would be fun to procedurally generate images. I've no idea where to start though... <a href=\"https://github.com/PistonDevelopers/rust-image\" rel=\"noreferrer\">piston/rust-image</a>? But even with that where should I begin?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1429826582, "post_id": 29833110, "comment_id": 47797083, "body": "Convention would change <code>VAL</code>, <code>SB</code> and <code>WB</code> to things like <code>Value</code>, <code>Strong</code> and <code>Weak</code>."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 5, "last_activity_date": 1515555228, "last_edit_date": 1515555228, "creation_date": 1429823609, "answer_id": 29834411, "question_id": 29833110, "link": "https://stackoverflow.com/questions/29833110/traits-with-parameterized-associated-types/29834411#29834411", "title": "Traits with parameterized associated types", "body": "<p>The design means that <a href=\"https://play.rust-lang.org/?gist=d58447a6dc8d3c9f5a538696b9619317&amp;version=nightly\" rel=\"nofollow noreferrer\">you should be able to just write</a></p>\n\n<pre><code>fn bar&lt;T: MyTrait&gt;(rc_val: T::SB) {}\n</code></pre>\n\n<p>The trait implementation of <code>MyTrait</code> for <code>MyFoo</code> already specifies the type parameter for <code>SB</code>.</p>\n\n<p>If you want to connect <code>SB</code> and <code>VAL</code>, one can place trait bounds on <code>SB</code>, e.g.:</p>\n\n<pre><code>trait MyTrait {\n    type VAL;\n    type SB: Deref&lt;Target = Self::VAL&gt;;\n}\n</code></pre>\n"}], "owner": {"reputation": 523, "user_id": 1611416, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/8fe76a05a5c7124596566d5fdd64563c?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/1611416/simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 281, "favorite_count": 0, "accepted_answer_id": 29834411, "answer_count": 1, "score": 2, "last_activity_date": 1515555228, "creation_date": 1429818951, "last_edit_date": 1515555191, "question_id": 29833110, "link": "https://stackoverflow.com/questions/29833110/traits-with-parameterized-associated-types", "title": "Traits with parameterized associated types", "body": "<p>I come from a C++ background and was wondering if I could <a href=\"https://play.rust-lang.org/?gist=853059946a20e9b1cde7942efa4c7712&amp;version=nightly\" rel=\"nofollow noreferrer\">code up a trait for use in the <code>foo</code> and <code>bar</code> functions</a>:</p>\n\n<pre><code>#![feature(alloc)]\n\nuse std::rc::{Rc, Weak};\n\npub trait MyTrait {\n    /// Value type\n    type VAL;\n    /// Strongly boxed type\n    /// Will be constrained to something like Box, Rc, Arc\n    type SB;\n    /// Weakly boxed type\n    type WB;\n}\n\nstruct MyFoo;\n\nimpl MyTrait for MyFoo {\n    type VAL = i64;\n    type SB = Rc&lt;i64&gt;;\n    type WB = Weak&lt;i64&gt;;\n}\n\nfn foo&lt;T: MyTrait&gt;(value: T::VAL) {}\n// Uncomment\n// fn bar&lt;T: MyTrait&gt;(rc_val: T::SB&lt;T::VAL&gt;) {}\n\nfn main() {\n    let x = 100 as i64;\n    let y = Rc::new(200 as i64);\n    foo::&lt;MyFoo&gt;(x);\n    // Uncomment\n    // bar::&lt;MyFoo&gt;(y);\n\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p><code>foo</code> works, but the nested type argument <code>rc_val</code> in <code>bar</code> causes problems: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0109]: type parameters are not allowed on this type\n  --&gt; src/main.rs:25:34\n   |\n25 | fn bar&lt;T: MyTrait&gt;(rc_val: T::SB&lt;T::VAL&gt;) {}\n   |                                  ^^^^^^ type parameter not allowed\n</code></pre>\n\n<p>I saw something about <a href=\"https://botbot.me/mozilla/rust/msg/26182512/\" rel=\"nofollow noreferrer\">this</a> on the IRC channel related to <em>Higher Kinded Types</em>, but I'm not that familiar with functional programming. Can someone suggest a workaround for what I'm trying to do here? This code was tested in the <a href=\"https://play.rust-lang.org/?gist=853059946a20e9b1cde7942efa4c7712&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a> with the <code>nightly</code> build.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429824875, "post_id": 29830005, "comment_id": 47796188, "body": "Could you try calling <code>std::convert::From::from</code> directly (i.e. effectively expanding the macro) to help diagnose? <code>match s.parse() { Ok(f) =&gt; Ok(f), Err(e) =&gt; return Err(From::from(e)) }</code>."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429825120, "post_id": 29830005, "comment_id": 47796322, "body": "Yes \u2014 error message is the same, but red line pointer is now under <code>From::from</code>."}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "reply_to_user": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "edited": false, "score": 0, "creation_date": 1429825312, "post_id": 29830005, "comment_id": 47796437, "body": "I&#39;ve just tried the same code with <code>u64</code> type and <code>ParseIntError</code> error \u2014 it works! So it seems that my problem is related only to <code>ParseFloatError</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429825376, "post_id": 29830005, "comment_id": 47796472, "body": "I see the same error with <code>rustc 1.1.0-dev (69e47c77b 2015-04-23) (built 2015-04-23)</code>"}], "answers": [{"comments": [{"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1429831045, "post_id": 29835466, "comment_id": 47798769, "body": "Thanks for investigation! Maybe you could suggest some temporary workaround (except downgrading rust)? It seems that there are no ways to implement <code>From&lt;core::num::ParseIntError&gt;</code> for <code>Error</code>."}, {"owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "reply_to_user": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1429833004, "post_id": 29835466, "comment_id": 47799333, "body": "Could you be more specific about what you mean by &quot;no way&quot;? (I&#39;ve edited a paragraph with a work around into the end of my answer.)"}, {"owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "edited": false, "score": 0, "creation_date": 1429834220, "post_id": 29835466, "comment_id": 47799679, "body": "Oh, sorry, that definitely works. I did not load <code>core</code> crate."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 4, "last_activity_date": 1429832961, "last_edit_date": 1429832961, "creation_date": 1429828051, "answer_id": 29835466, "question_id": 29830005, "link": "https://stackoverflow.com/questions/29830005/try-macro-stopped-working-after-rust-upgrade/29835466#29835466", "title": "&quot;try!&quot; macro stopped working after Rust upgrade", "body": "<p>This looks like it is a bug: <code>std::num::ParseFloatError</code> and <code>&lt;f64 as FromStr&gt;::Err</code> are different types:</p>\n\n<ul>\n<li>the <code>impl</code> of <code>FromStr</code> for <code>f64</code> is <a href=\"https://github.com/rust-lang/rust/blob/24e4e60ae8579d674c1eebb0298ee61471ddb6e6/src/libcore/num/mod.rs#L1341-L1382\" rel=\"nofollow\">in <code>core</code></a>, and hence uses <a href=\"https://github.com/rust-lang/rust/blob/24e4e60ae8579d674c1eebb0298ee61471ddb6e6/src/libcore/num/mod.rs#L1512\" rel=\"nofollow\">a <code>ParseFloatError</code> type defined in that crate</a>, so any uses of <code>FromStr</code>/<code>.parse()</code> will get this type.</li>\n<li><code>std::num</code> defines a <a href=\"https://github.com/rust-lang/rust/blob/24e4e60ae8579d674c1eebb0298ee61471ddb6e6/src/libstd/num/mod.rs#L49\" rel=\"nofollow\">new <code>ParseFloatError</code> type</a>, so an import from <code>std::num</code> gets this one.</li>\n</ul>\n\n<p>The <code>impl From&lt;num::ParseFloatError&gt; for Error</code> is using the latter, while <code>&lt;f64 as FromStr&gt;::from_str(...)</code> is returning the former.</p>\n\n<p>I opened <a href=\"https://github.com/rust-lang/rust/issues/24748\" rel=\"nofollow\">#24748</a> about it. I also opened <a href=\"https://github.com/rust-lang/rust/issues/24747\" rel=\"nofollow\">#24747</a> about improving the diagnostics to make this easier to debug in future.</p>\n\n<p>One can work around this by insteading implementing the trait for <code>core::num::ParseFloatError</code>. You'll need to load the <code>core</code> crate with <code>extern crate core;</code> and will need some feature gates.</p>\n"}], "owner": {"reputation": 2156, "user_id": 4347341, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/OUTXT.jpg?s=128&g=1", "display_name": "swizard", "link": "https://stackoverflow.com/users/4347341/swizard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 342, "favorite_count": 0, "accepted_answer_id": 29835466, "answer_count": 1, "score": 4, "last_activity_date": 1429832961, "creation_date": 1429808546, "last_edit_date": 1429823836, "question_id": 29830005, "link": "https://stackoverflow.com/questions/29830005/try-macro-stopped-working-after-rust-upgrade", "title": "&quot;try!&quot; macro stopped working after Rust upgrade", "body": "<p>Here is a simple testcase, which still works on the <a href=\"http://is.gd/Cpn3Y8\" rel=\"nofollow\">playpen</a>:</p>\n\n<pre><code>use std::num;\nuse std::str::FromStr;\nuse std::convert::From;\n\n#[derive(Debug)]\nstruct Error(String);\n\nimpl From&lt;num::ParseFloatError&gt; for Error {\n    fn from(err: num::ParseFloatError) -&gt; Error {\n        Error(format!(\"{}\", err))\n    }\n}\n\nfn parse(s: &amp;String) -&gt; Result&lt;f64, Error&gt; {\n    Ok(try!(&lt;f64 as FromStr&gt;::from_str(&amp;s[..])))\n}\n\nfn main() {\n    println!(\"{:?}\", parse(&amp;\"10.01\".to_string()));\n}\n</code></pre>\n\n<p>However, after I built the latest rustc from git (now it's <code>rustc 1.1.0-dev (1114fcd94 2015-04-23)</code>), it stopped compiling with following error:</p>\n\n<pre><code>&lt;std macros&gt;:6:1: 6:32 error: the trait `core::convert::From&lt;core::num::ParseFloatError&gt;` is not implemented for the type `Error` [E0277]\n&lt;std macros&gt;:6 $ crate:: convert:: From:: from ( err ) ) } } )\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;std macros&gt;:1:1: 6:48 note: in expansion of try!\nexp.rs:15:8: 15:48 note: expansion site\nerror: aborting due to previous error\n</code></pre>\n\n<p>I'm unable to find out what's wrong. Why is the compiler unable to find my trait implementation? </p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1429779994, "post_id": 29818290, "comment_id": 47764022, "body": "what you need is a streaming iterator. Those aren&#39;t possible yet. But there might be an alternative. where are you getting the <code>params</code> iterator from? is it a map or a vector? If so, you can create a non-owning iterator from that and then map it to a <code>(&amp;str, &amp;str)</code> iterator"}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1429784891, "post_id": 29818290, "comment_id": 47767635, "body": "yes, it&#39;s actually from a vec![] creation, so I can change that param type..."}], "answers": [{"comments": [{"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429787363, "post_id": 29818920, "comment_id": 47769423, "body": "I&#39;m not familiar with the &amp;x[..] is that documented somewhere? I don&#39;t recall it in the book or other resources I&#39;ve read."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429787376, "post_id": 29818920, "comment_id": 47769437, "body": "this worked for me: <code>url.set_query_from_pairs(params.iter().map(|&amp;(ref k,ref v)| -&gt; (&amp;&#39;a str, &amp;&#39;a str) { (k,v) }));</code>"}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429787675, "post_id": 29818920, "comment_id": 47769630, "body": "to be clear, I switched my method signature to use &amp;&#39;a Vec and then made the &amp;str&#39;s in the mapping bind to that lifetime."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429789721, "post_id": 29818920, "comment_id": 47771228, "body": "@bluejekyll, <code>&amp;x[..]</code> is what we call a slicing syntax. <code>x[..]</code> is an indexing operation which takes a <code>FullRange</code> object (<code>..</code>) - for a <code>String</code> it means returning a <code>str</code> which correspond to the entire string. Then <code>&amp;</code> is used to obtain an <code>&amp;str</code>. You can also write e.g. <code>&amp;x[1..]</code> to slice a string from the second byte to the end. This syntax is described <a href=\"http://doc.rust-lang.org/1.0.0-beta/book/arrays-vectors-and-slices.html\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1429789787, "post_id": 29818920, "comment_id": 47771282, "body": "Your approach worked due to deref coercion - <code>k</code> and <code>v</code> are <code>&amp;String</code>s, and <code>&amp;String</code> can be automatically converted to <code>&amp;str</code> in certain contexts where the target type (<code>&amp;str</code> in this case) is known."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1429800465, "post_id": 29818920, "comment_id": 47780142, "body": "@bluejekyll it was added to <a href=\"http://doc.rust-lang.org/nightly/book/primitive-types.html#slices\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/book/primitive-types.html#slices</a> within the last week or so"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1429780547, "creation_date": 1429780547, "answer_id": 29818920, "question_id": 29818290, "link": "https://stackoverflow.com/questions/29818290/how-to-convert-an-iterator-on-a-tuple-of-string-string-to-an-iterator-of-st/29818920#29818920", "title": "How to convert an Iterator on a tuple of (String, String) to an Iterator of (&amp;str, &amp;str)?", "body": "<p>You can't have an iterator that (safely) yields references to any internal or owned state; the <code>Iterator</code> trait is just not designed to allow it.  These sorts of constructs are usually known as \"streaming iterators\", and they're something of a hole in the language/stdlib at the moment.</p>\n\n<p>Consider what happens to a <code>(String, String)</code> value as it flows through your <code>map</code> call.  Each tuple is returned from <code>I::next</code>, which causes ownership to pass into the closure you gave to <code>map</code>.  Thus, when you use <code>ref</code> in the closure, you're taking a reference to variables <em>which are local to the closure</em>.  You now construct a new tuple, return it and... because the closure owns the <code>String</code>s (they're being stored in <code>k</code> and <code>v</code>), they are destroyed, thus invalidating the references you tried to return.</p>\n\n<p>The problem is that there is <em>no way</em> to avoid taking ownership of the <code>(String, String)</code> items.</p>\n\n<p>Now, that having been said, you <em>can</em> cheat here.  All you need to do is guarantee that the <code>(String, String)</code> values continue to exist beyond each individual step in the iterator.  Thus:</p>\n\n<pre><code>let params: Vec&lt;_&gt; = params.collect();\nurl.set_query_from_pairs(params.iter().map(|&amp;(ref x, ref y)| (&amp;x[..], &amp;y[..])))\n</code></pre>\n\n<p>This works because <code>Vec::iter</code> gives us <code>Iterator&lt;Item=&amp;(String, String)&gt;</code>, from which we can borrow <em>without</em> taking ownership (which is retained by <code>params</code>).</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1429786966, "creation_date": 1429786966, "answer_id": 29821508, "question_id": 29818290, "link": "https://stackoverflow.com/questions/29818290/how-to-convert-an-iterator-on-a-tuple-of-string-string-to-an-iterator-of-st/29821508#29821508", "title": "How to convert an Iterator on a tuple of (String, String) to an Iterator of (&amp;str, &amp;str)?", "body": "<p>Since your <code>params</code> argument is created from a <code>Vec&lt;(String, String)&gt;</code> you can change your where clause to <code>where I: Iterator&lt;Item=(&amp;str, &amp;str)&gt;</code> and get the iterator by calling</p>\n\n<pre><code>your_vector.iter().map(|(a, b)|, (&amp;a[..], &amp;b[..])))\n</code></pre>\n\n<p>A simplified example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn test&lt;'a, I&gt;(it: I)\n    where I: Iterator&lt;Item=&amp;'a str&gt;\n{\n    for s in it {\n        dump(s);\n    }\n}\n\nfn dump(s: &amp;str) {\n    println!(\"{}\", s);\n}\n\nfn main() {\n    let v = vec![\"a\".to_string(), \"42\".to_string()];\n    test(v.iter().map(|s| &amp;s[..]));\n}\n</code></pre>\n"}], "owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1320, "favorite_count": 0, "accepted_answer_id": 29818920, "answer_count": 2, "score": 3, "last_activity_date": 1429842499, "creation_date": 1429779013, "last_edit_date": 1429842499, "question_id": 29818290, "link": "https://stackoverflow.com/questions/29818290/how-to-convert-an-iterator-on-a-tuple-of-string-string-to-an-iterator-of-st", "title": "How to convert an Iterator on a tuple of (String, String) to an Iterator of (&amp;str, &amp;str)?", "body": "<p>I'm having trouble converting from an Iterator of <code>(String, String)</code> to an Iterator of <code>(&amp;str, &amp;str)</code>. I'm using an external library, so can't change the signature of that, and not sure that I need to. Basically I have this function def:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use hyper;\n\nfn build_url&lt;'a, I&gt;(host: &amp;'a str, port: u16, path: &amp;'a str, params: I) -&gt; \n   hyper::Url where I: Iterator&lt;Item=(String, String)&gt; {\n\n       let mut url = hyper::Url::parse(&amp;format!(\"http://{h}:{p}/{pt}\",\n                                            h = self.etcd_host,\n                                            p = self.etcd_port,\n                                            pt = path));\n       if let Err(e) = url {\n           panic!(\"error parsing url: {}\", e);\n       }\n\n       let mut url = url.unwrap();\n\n       // fn set_query_from_pairs&lt;'a, I&gt;(&amp;mut self, pairs: I)\n       //  where I: Iterator&lt;Item=(&amp;'a str, &amp;'a str)&gt;\n       url.set_query_from_pairs(\n            params.map(|x: (String, String)| -&gt; \n                       (&amp;str, &amp;str) { let (ref k, ref v) = x; (k, v) } ));\n\n}\n</code></pre>\n\n<p>But I'm getting the dreaded: <code>error: 'x.0' does not live long enough</code></p>\n\n<p>I think the <code>ref</code> keyword in the let should have been the right thing here, i.e. keep the ownership with the Iterator, and just do a borrow. I get a similar issue if I get rid of <code>ref</code> in the let changing the let to this:</p>\n\n<pre><code>let (k, v) = x; (&amp;k, &amp;v)\n</code></pre>\n\n<p>Then <code>k</code> and <code>v</code> don't live long enough. Does anyone have a recommendation for fixing this?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 1804, "user_id": 616150, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/79b2a278bb1777cd16d0d311e90fed59?s=128&d=identicon&r=PG", "display_name": "Viktor Dahl", "link": "https://stackoverflow.com/users/616150/viktor-dahl"}, "edited": false, "score": 3, "creation_date": 1429787521, "post_id": 29818084, "comment_id": 47769532, "body": "I&#39;m not entirely sure it&#39;s what you&#39;re asking for, but you can use <a href=\"http://doc.crates.io/manifest.html#the-%5Bprofile.%2A%5D-sections\" rel=\"nofollow noreferrer\">profiles</a> to control how tests are built. <code>[profile.test] opt-level = 3</code> would enable full optimizations for your tests."}, {"owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "reply_to_user": {"reputation": 1804, "user_id": 616150, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/79b2a278bb1777cd16d0d311e90fed59?s=128&d=identicon&r=PG", "display_name": "Viktor Dahl", "link": "https://stackoverflow.com/users/616150/viktor-dahl"}, "edited": false, "score": 0, "creation_date": 1429790064, "post_id": 29818084, "comment_id": 47771496, "body": "@ViktorDahl Thanks, but it&#39;s not really what I&#39;m after: I was hoping to be able to change the configuration with which tests are built via some command line arg passed to cargo."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1429791756, "post_id": 29818084, "comment_id": 47772778, "body": "To satisfy my own curiosity, why do you want to do this? The main reason I can think is for running profiling tests, but those are already built with optimization."}, {"owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "edited": false, "score": 2, "creation_date": 1429792144, "post_id": 29818084, "comment_id": 47773133, "body": "I&#39;m used to C++ and found that some issues were only reproducible using release code.  They were always horrible to debug, but running tests in release (or preferably RelWIthDebInfo) was often invaluable.  I don&#39;t have a need yet, but I&#39;m anticipating one :)"}, {"owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "reply_to_user": {"reputation": 69264, "user_id": 256138, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ed9e8c0ff767e38f8fade11f5af00a45?s=128&d=identicon&r=PG", "display_name": "rubenvb", "link": "https://stackoverflow.com/users/256138/rubenvb"}, "edited": false, "score": 0, "creation_date": 1429800091, "post_id": 29818084, "comment_id": 47779785, "body": "@rubenvb I&#39;ll take the bait :) I disagree - often the issues were down to timing (things running significantly faster in release obviously) or code within <code>#ifdef NDEBUG</code> blocks containing bugs."}, {"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1544337169, "post_id": 29818084, "comment_id": 94236117, "body": "optimized code can have problems because of CPU bugs, OS bugs, library bugs, LLVM bugs, assembler bugs, linker bugs, etc etc. the code that goes out to customers should be the same code that passes test."}], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 21, "last_activity_date": 1525990137, "last_edit_date": 1525990137, "creation_date": 1429790787, "answer_id": 29822963, "question_id": 29818084, "link": "https://stackoverflow.com/questions/29818084/can-tests-be-built-in-release-mode-using-cargo/29822963#29822963", "title": "Can tests be built in release mode using Cargo?", "body": "<p><code>cargo test --release</code> exists, but it is slightly different than just enabling optimizations. For example, debug assertions become disabled. </p>\n\n<p>You can also set <code>opt-level</code> in <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-profile-sections\" rel=\"noreferrer\">the <code>[profile.test]</code> section</a> of your Cargo.toml, <a href=\"https://stackoverflow.com/questions/29818084/can-tests-be-built-in-release-mode-using-cargo#comment47769532_29818084\">as Viktor Dahl suggests</a>.</p>\n"}], "owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5531, "favorite_count": 1, "accepted_answer_id": 29822963, "answer_count": 1, "score": 22, "last_activity_date": 1525990137, "creation_date": 1429778484, "last_edit_date": 1429797371, "question_id": 29818084, "link": "https://stackoverflow.com/questions/29818084/can-tests-be-built-in-release-mode-using-cargo", "title": "Can tests be built in release mode using Cargo?", "body": "<p>I'm using <code>cargo build --release</code> to build my project in release configuration and <code>cargo test</code> to build and run my tests.</p>\n\n<p>However, I'd like to also build my tests in release mode; can this be done using cargo?</p>\n"}, {"tags": ["compiler-errors", "rust", "compiler-warnings"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 5, "creation_date": 1429771412, "post_id": 29814978, "comment_id": 47758484, "body": "You know, <code>-Wall</code> isn\u2019t actually \u201call warnings\u201d, for compatibility reasons. I believe that <code>-Weverything</code> honestly is every warning."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 12, "last_activity_date": 1564410395, "last_edit_date": 1564410395, "creation_date": 1429771691, "answer_id": 29815736, "question_id": 29814978, "link": "https://stackoverflow.com/questions/29814978/is-there-a-rustc-equivalent-of-wall-werror/29815736#29815736", "title": "Is there a rustc equivalent of -Wall -Werror?", "body": "<p>gcc\u2019s <code>-Werror</code> becomes <code>rustc --deny warnings</code> or the crate attribute <code>#![deny(warnings)]</code>. You can also pass the flag through an environment variable: <code>RUSTFLAGS=\"--deny warnings\"</code>.</p>\n\n<p><code>-Wall</code> or <code>-Weverything</code> aren\u2019t really necessary in Rust; most of the sorts of things that would be covered by it are already compilation errors or lints that default to deny or warn. You should understand that the lints are just that: <em>lints</em>. They are matters that are at least slightly, and often very, subjective. The lints that are allow by default should be so\u2014they\u2019re useful tools for specific purposes, but enabling the lot of them simply doesn\u2019t normally make sense. (The <code>box-pointers</code> lint, for example: in a certain type of library you may wish to be able to say \u201cI guarantee this uses no heap memory\u201d, but it\u2019s not something that\u2019s <em>bad</em>.)</p>\n\n<p>rustc is fairly conservative in the lints it includes; for more extensive linting, take a look at <a href=\"https://github.com/rust-lang/rust-clippy\" rel=\"nofollow noreferrer\">Clippy</a>.</p>\n"}], "owner": {"reputation": 8594, "user_id": 14456, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/hkLiL.jpg?s=128&g=1", "display_name": "Ian Kelling", "link": "https://stackoverflow.com/users/14456/ian-kelling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 712, "favorite_count": 0, "accepted_answer_id": 29815736, "answer_count": 1, "score": 10, "last_activity_date": 1564410395, "creation_date": 1429769012, "last_edit_date": 1564351711, "question_id": 29814978, "link": "https://stackoverflow.com/questions/29814978/is-there-a-rustc-equivalent-of-wall-werror", "title": "Is there a rustc equivalent of -Wall -Werror?", "body": "<p>First 10 minutes learning rust, I'm given 58 lint options and I'm thinking: gcc has a solution to this. To be clear: I want to enabled all warnings/lints (<code>-Wall</code>) and treat all warnings as hard errors (<code>-Werror</code>).</p>\n\n<p>Something that would go in the <code>.toml</code> file? A workaround?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 4, "creation_date": 1508688513, "post_id": 29815270, "comment_id": 80699381, "body": "<i><code>PathBuf</code> still implement <code>Into&lt;OsString&gt;</code></i> \u2190 this has been fixed in 1.14.0 :D. Nothing impl <code>Into&lt;*&gt;</code> in the standard library anymore."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 25, "last_activity_date": 1599660017, "last_edit_date": 1599660017, "creation_date": 1429769991, "answer_id": 29815270, "question_id": 29812530, "link": "https://stackoverflow.com/questions/29812530/when-should-i-implement-stdconvertfrom-vs-stdconvertinto/29815270#29815270", "title": "When should I implement std::convert::From vs std::convert::Into?", "body": "<p>TL;DR: prefer implementing <code>From</code>.</p>\n<hr />\n<p>Interestingly, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0529-conversion-traits.md\" rel=\"nofollow noreferrer\">the original RFC</a> about the <a href=\"http://doc.rust-lang.org/std/convert/index.html\" rel=\"nofollow noreferrer\"><code>std::convert</code></a> traits suggested the opposite blanket implementation:</p>\n<pre><code>impl&lt;T, U&gt; From&lt;T&gt; for U\nwhere\n    T: Into&lt;U&gt;\n</code></pre>\n<p>But on the PR implementing it, <a href=\"https://github.com/rust-lang/rust/pull/23538#issuecomment-85215534\" rel=\"nofollow noreferrer\">it was changed to the opposite</a>:</p>\n<blockquote>\n<p>Added <code>From</code> =&gt; <code>Into</code> implementation, which makes it possible to add conversions in both directions without running afoul of coherence. For example, we now have <code>From&lt;[T]&gt; for Vec&lt;T&gt;</code> where <code>T: Clone</code>, which yields the corresponding <code>Into</code> going in the other direction -- despite the fact that the two types live in different crates.</p>\n<p>I also believe this addresses a few concerns about things implementing <code>From</code> instead of <code>Into</code></p>\n</blockquote>\n<p>This last-moment change reflects that <code>From</code> and <code>Into</code> are basically equivalent. <code>From</code> was chosen as the preferred one as it was less restrictive from the &quot;type parameter vs. local type&quot; point of view.</p>\n<p>Before <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1410-2020-01-30\" rel=\"nofollow noreferrer\">Rust 1.41.0</a>, it wasn't possible to make a <code>impl&lt;'a, T&gt; Into&lt;Foo&gt; for &amp;'a [T]</code>, while <code>impl&lt;'a, T&gt; From&lt;&amp;'a [T]&gt; for Foo</code> was possible.</p>\n<p>The first attempt raised a <code>E0210</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct&lt;T&gt;`)\n --&gt; x.rs:3:10\n  |\n3 | impl&lt;'a, T&gt; Into&lt;Foo&gt; for &amp;'a [T] {\n  |          ^ type parameter `T` must be used as the type parameter for some local type\n  |\n  = note: only traits defined in the current crate can be implemented for a type parameter\n</code></pre>\n<p>In the standard library prior to Rust 1.14, there were only two examples of implementing <code>Into</code> and not <code>From</code>:</p>\n<ul>\n<li><code>impl Into&lt;Vec&lt;u8&gt;&gt; for String</code></li>\n<li><code>impl Into&lt;OsString&gt; for PathBuf</code></li>\n</ul>\n<p>I think these are the reflexion of the logic of their interfaces. <code>OsString</code> implements <code>From&lt;String&gt;</code> and <code>From&lt;T&gt; where T: AsRef&lt;OsStr&gt;</code>, because they are the natural things you'll want to build a <code>OsString</code> from.</p>\n<p>However, <code>PathBuf</code> still implements <code>Into&lt;OsString&gt;</code> as the reverse operation of its <code>From&lt;OsString&gt;</code> implementation, but this logic belongs to <code>PathBuf</code>, not <code>OsString</code>.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6617, "favorite_count": 3, "accepted_answer_id": 29815270, "answer_count": 1, "score": 39, "last_activity_date": 1599660017, "creation_date": 1429755975, "last_edit_date": 1599656759, "question_id": 29812530, "link": "https://stackoverflow.com/questions/29812530/when-should-i-implement-stdconvertfrom-vs-stdconvertinto", "title": "When should I implement std::convert::From vs std::convert::Into?", "body": "<p>I see that <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>std::convert::Into</code></a> has an implementation for anything that implements <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>std::convert::From</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T, U&gt; Into&lt;U&gt; for T\nwhere\n    U: From&lt;T&gt;, \n</code></pre>\n<p>In the Rust 1.0 standard library, there are many implementations of <code>From</code> while <code>Into</code> is only implemented in 3 places. This makes it seem like implementing <code>From</code> should be the default. I'm certain that there are times I would want to implement <code>Into</code> and not <code>From</code>, but I'm not seeing them.</p>\n"}]