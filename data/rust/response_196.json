[{"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1539170150, "post_id": 52738851, "comment_id": 92402472, "body": "I&#39;d say <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.and_then\" rel=\"nofollow noreferrer\"><code>and_then</code></a>s and/or <a href=\"https://rust-lang-nursery.github.io/edition-guide/rust-2018/error-handling-and-panics/the-question-mark-operator-for-easier-error-handling.html\" rel=\"nofollow noreferrer\"><code>?</code></a>s."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1539170295, "post_id": 52738851, "comment_id": 92402539, "body": "Look strange to use <code>as_ref()</code> in this context a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> would be appreciate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1539174958, "post_id": 52738851, "comment_id": 92405386, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/52738851/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. For example, <code>Use of undeclared type or module `error`</code> / <code>cannot find type `Node` in this scope</code> / <code>cannot find type `Value` in this scope</code>. Try to produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> or you can reproduce it in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 4, "last_activity_date": 1539174224, "creation_date": 1539174224, "answer_id": 52740201, "question_id": 52738851, "link": "https://stackoverflow.com/questions/52738851/how-do-i-make-a-long-sequence-of-chained-as-ref-unwraps-more-meaningful/52740201#52740201", "title": "How do I make a long sequence of chained as_ref().unwrap()s more meaningful?", "body": "<p>If you do not want this boilerplate, you can add more boilerplate to not see it, with the try operator (<code>?</code>). See this proof of concept:</p>\n\n<pre><code>#![feature(try_trait)]\n\nuse std::fmt;\nuse std::error::Error;\n\n#[derive(Debug)]\nstruct MyError;\n\nimpl Error for MyError {\n    //\n}\n\nimpl fmt::Display for MyError {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; Result&lt;(), fmt::Error&gt; {\n        write!(f, \"MyError\")\n    }\n}\n\nimpl From&lt;std::option::NoneError&gt; for MyError {\n    fn from(_: std::option::NoneError) -&gt; MyError {\n        MyError\n    }\n}\n\nimpl&lt;'a&gt; From&lt;&amp;'a std::io::Error&gt; for MyError {\n    fn from(_: &amp;'a std::io::Error) -&gt; MyError {\n        MyError\n    }\n}\n\nfn foo(i: &amp;Result&lt;Option&lt;i32&gt;, std::io::Error /* for example */&gt;) -&gt; Result&lt;&amp;i32, MyError&gt; {\n    Ok(i.as_ref()?.as_ref()?)\n}\n</code></pre>\n\n<p>Unfortunately, I think that you cannot remove the <code>as_ref</code> calls.</p>\n"}], "owner": {"reputation": 1747, "user_id": 215381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/4ab17df223036dd5a9e9e93696a76525?s=128&d=identicon&r=PG", "display_name": "sigrlami", "link": "https://stackoverflow.com/users/215381/sigrlami"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 2, "accepted_answer_id": 52740201, "answer_count": 1, "score": 1, "last_activity_date": 1539174905, "creation_date": 1539169685, "last_edit_date": 1539174905, "question_id": 52738851, "link": "https://stackoverflow.com/questions/52738851/how-do-i-make-a-long-sequence-of-chained-as-ref-unwraps-more-meaningful", "title": "How do I make a long sequence of chained as_ref().unwrap()s more meaningful?", "body": "<p>What's the idiomatic way in Rust to re-order sequence on <code>as_ref.unwrap()</code> in something more meaningful? I have a set of values returned from a database and handle them in a following way:</p>\n\n<pre><code>pub fn get_results(result: &amp;Result&lt;Option&lt;Vec&lt;Node&gt;&gt;, error::Error&gt;) -&gt; &amp;Vec&lt;Vec&lt;Value&gt;&gt; {\n    &amp;result\n        .as_ref()\n        .unwrap()\n        .as_ref()\n        .unwrap()\n        .first()\n        .unwrap()\n        .series\n        .as_ref()\n        .unwrap()\n        .first()\n        .as_ref()\n        .unwrap()\n        .values\n}\n</code></pre>\n\n<p>Maybe I can iterate with higher-over function or something else?</p>\n"}, {"tags": ["rust", "slice", "traits", "lifetime"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1539166234, "post_id": 52737608, "comment_id": 92400122, "body": "Vec already implement <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.as_slice\" rel=\"nofollow noreferrer\"><code>as_slice()</code></a> so I don&#39;t see the point. Do you need <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;Vec&lt;i8&gt;&gt;</code></a> ?"}, {"owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "edited": false, "score": 0, "creation_date": 1539168015, "post_id": 52737608, "comment_id": 92401198, "body": "Yeah, I left out the parts that make the Wrapper necessary. I tried to focus the code on the problem. I know that there are other ways to implement this, but I think the best design would be a wrapper and feel this should be possible."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1539175741, "post_id": 52737608, "comment_id": 92405889, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/39113649/implementing-index-trait-to-return-a-value-that-is-not-a-reference\">Implementing Index trait to return a value that is not a reference</a>"}], "answers": [{"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1539168531, "post_id": 52738387, "comment_id": 92401483, "body": "<code>Cow</code> is a run-time checked wrapper. It does not seem to relate to the question at all."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1539168618, "post_id": 52738387, "comment_id": 92401536, "body": "@E_net4 there was no restriction on compile-time, no? That being said, I didn&#39;t think it incurs any runtime penalties; can you provide some reference? I&#39;d like to know more."}, {"owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "edited": false, "score": 0, "creation_date": 1539168643, "post_id": 52738387, "comment_id": 92401550, "body": "Thanks for the answer. <code>Cow</code> is a good hint, but I really would like my own wrapper where I can implement own methods on. I left those out to focus the code on the problem."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1539169275, "post_id": 52738387, "comment_id": 92401931, "body": "Each time cow is written the struct need to check if it had clone the data or not."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1539176350, "post_id": 52738387, "comment_id": 92406325, "body": "To expand on the subject: <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a> is an enum. It contains either owned content or borrowed content, along with a discriminant value. This requires the program to check at run-time whether it is currently working with owned data or borrowed data."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1539168487, "last_edit_date": 1539168487, "creation_date": 1539168123, "answer_id": 52738387, "question_id": 52737608, "link": "https://stackoverflow.com/questions/52737608/how-can-i-make-an-indexable-wrapper-for-both-veci8-and-i8/52738387#52738387", "title": "How can I make an indexable wrapper for both `Vec&lt;i8&gt;` and `&amp;[i8]`?", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;[T]&gt;</code></a> is probably what you are after:</p>\n\n<blockquote>\n  <p>it can enclose and provide immutable access to borrowed data, and clone the data lazily when mutation or ownership is required</p>\n</blockquote>\n\n<pre><code>use std::borrow::Cow;\n\nfn main() {\n    let w1: Cow&lt;[i8]&gt; = vec![1i8, 2, 3].into();\n    let w2: Cow&lt;[i8]&gt; = (&amp;[1i8, 2, 3][..]).into();\n\n    println!(\"{:?}\", &amp;w1[1..2]);\n    println!(\"{:?}\", &amp;w2[1..2]);\n}\n</code></pre>\n\n<p>This provides a wrapper applicable to both owned vectors and borrowed slices without the need to reinvent the wheel :).</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 2, "last_activity_date": 1539175595, "creation_date": 1539175595, "answer_id": 52740643, "question_id": 52737608, "link": "https://stackoverflow.com/questions/52737608/how-can-i-make-an-indexable-wrapper-for-both-veci8-and-i8/52740643#52740643", "title": "How can I make an indexable wrapper for both `Vec&lt;i8&gt;` and `&amp;[i8]`?", "body": "<p>That original design is not possible. <a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code></a> expects the <code>index</code> method to return a reference to the value of type <code>Self::Output</code>:</p>\n\n<pre><code>fn index&lt;'a&gt;(&amp;'a self, index: Idx) -&gt; &amp;'a Self::Output;\n</code></pre>\n\n<p>I expanded the lifetime above to emphasize that the returned value <em>must live for as long as <code>self</code> itself</em>. This is achievable when the referenced value is contained in the callee, but this is not the case for a wrapped value. In one of your attempts:</p>\n\n<pre><code>fn index&lt;'a&gt;(&amp;'a self, range: ops::Range&lt;usize&gt;) -&gt; &amp;'a Self::Output {\n    &amp;Wrap::&lt;&amp;[i8]&gt;::new(&amp;self.0[range])\n}\n</code></pre>\n\n<p>This creates a reference to a <code>Wrap</code> object that only lives locally (and so does not outlive <code>'a</code>). This case would call for a different trait, such as <code>WrapIndex</code>, which would, regretfully, not feature the same syntactic sugar. It also cannot be generalized much without generic associated types (GATs).</p>\n\n<pre><code>pub trait WrapIndex&lt;Idx&gt; where\n    Idx: ?Sized, {\n    type Output: ?Sized;\n    fn wrap_index(&amp;self, index: Idx) -&gt; Wrap&lt;&amp;Self::Output&gt;;\n}\n</code></pre>\n\n<p>If you don't mind exposing all methods from a slice type into <code>Wrap</code>, you can also implement <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code></a> for that wrapper, thus obtaining indexing and slicing for free. </p>\n\n<pre><code>impl&lt;T&gt; Deref for Wrap&lt;T&gt;\nwhere T: Deref\n{\n    type Target = &lt;T as Deref&gt;::Target;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        self.0.deref()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1077, "user_id": 1531199, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ed66c228615fe1e780b7e994b6d2bbbb?s=128&d=identicon&r=PG", "display_name": "Philipp Br&#252;ll", "link": "https://stackoverflow.com/users/1531199/philipp-br%c3%bcll"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 315, "favorite_count": 0, "accepted_answer_id": 52740643, "answer_count": 2, "score": 0, "last_activity_date": 1539175595, "creation_date": 1539165727, "last_edit_date": 1539174643, "question_id": 52737608, "link": "https://stackoverflow.com/questions/52737608/how-can-i-make-an-indexable-wrapper-for-both-veci8-and-i8", "title": "How can I make an indexable wrapper for both `Vec&lt;i8&gt;` and `&amp;[i8]`?", "body": "<p>Consider the following code:</p>\n\n<pre><code>use std::ops;\n\nstruct Wrap&lt;T&gt;(T);\n\nimpl&lt;T&gt; Wrap&lt;T&gt; {\n    fn new(element: T) -&gt; Self {\n        Wrap(element)\n    }\n}\n\n// implementation of other methods that makes the wrapper necessary ;-)\n\nimpl ops::Index&lt;ops::Range&lt;usize&gt;&gt; for Wrap&lt;Vec&lt;i8&gt;&gt; {\n    type Output = Wrap&lt;&amp;[i8]&gt;;\n\n    fn index(&amp;self, range: ops::Range&lt;usize&gt;) -&gt; &amp;Self::Output {\n        &amp;Wrap::&lt;&amp;[i8]&gt;::new(&amp;self.0[range])\n    }\n}\n\nimpl ops::Index&lt;ops::Range&lt;usize&gt;&gt; for Wrap&lt;&amp;[i8]&gt; {\n    type Output = Wrap&lt;&amp;[i8]&gt;;\n\n    fn index(&amp;self, range: ops::Range&lt;usize&gt;) -&gt; &amp;Self::Output {\n        &amp;Wrap::&lt;&amp;[i8]&gt;::new(&amp;self.0[range])\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b735fb5dc8075a228f56d8e15d30e032&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>The compiler states:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n  --&gt; src/lib.rs:14:24\n   |\n14 |     type Output = Wrap&lt;&amp;[i8]&gt;;\n   |                        ^ expected lifetime parameter\n\nerror[E0106]: missing lifetime specifier\n  --&gt; src/lib.rs:21:45\n   |\n21 | impl ops::Index&lt;ops::Range&lt;usize&gt;&gt; for Wrap&lt;&amp;[i8]&gt; {\n   |                                             ^ expected lifetime parameter\n\nerror[E0106]: missing lifetime specifier\n  --&gt; src/lib.rs:22:24\n   |\n22 |     type Output = Wrap&lt;&amp;[i8]&gt;;\n   |                        ^ expected lifetime parameter\n</code></pre>\n\n<p>How should I set the lifetimes here? I want <code>Wrap</code> to work for owned <code>Vec</code>s as well as borrowed slices. What would be the best solution?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 2, "creation_date": 1539155495, "post_id": 52733670, "comment_id": 92393846, "body": "The root cause of the problem is that <code>chrono</code> doesn&#39;t implement <code>Iterator</code> for ranges of its date types."}, {"owner": {"reputation": 522, "user_id": 72423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aab725c3800e856b81ac6d9ee816e8?s=128&d=identicon&r=PG", "display_name": "JoeCamel", "link": "https://stackoverflow.com/users/72423/joecamel"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539156309, "post_id": 52733670, "comment_id": 92394316, "body": "I see, it&#39;s not that <code>itertools</code> are implemented for ranges, they are implemented for <code>Iterator</code> which is not always possible for a range (for example, <code>Range&lt;f32&gt;</code>) but it could be possible for <code>Range&lt;NaiveDate&gt;</code> but <code>chrono</code> doesn&#39;t implement it."}, {"owner": {"reputation": 522, "user_id": 72423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aab725c3800e856b81ac6d9ee816e8?s=128&d=identicon&r=PG", "display_name": "JoeCamel", "link": "https://stackoverflow.com/users/72423/joecamel"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1539158063, "post_id": 52733670, "comment_id": 92395274, "body": "More info <a href=\"https://github.com/chronotope/chrono/issues/152\" rel=\"nofollow noreferrer\">github.com/chronotope/chrono/issues/152</a>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1539161997, "post_id": 52733670, "comment_id": 92397464, "body": "What would be the result of such combination ?"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539172312, "post_id": 52733670, "comment_id": 92403699, "body": "It&#39;s an iterator over mathematical combinations, the subsets of the given size of elements of the iterator. I have no idea why you would need that for dates. On the other hand, simple ranges of dates would be quite useful for calendars."}, {"owner": {"reputation": 522, "user_id": 72423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aab725c3800e856b81ac6d9ee816e8?s=128&d=identicon&r=PG", "display_name": "JoeCamel", "link": "https://stackoverflow.com/users/72423/joecamel"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539294151, "post_id": 52733670, "comment_id": 92461333, "body": "@starblue Why would you need it for integers or any other type? :) In my case I&#39;m working with dates and I could do integer combinations and add them to the min date, but I was wondering why it&#39;s not possible in this more straightforward way. The answers below helped. When <code>Step</code> gets stable and if <code>chrono</code> implements it, then it should become possible I think."}], "answers": [{"comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539246548, "post_id": 52740693, "comment_id": 92434276, "body": "The formal orphan rule is in the coherence RFC 1023: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/&hellip;</a> (I hope I did&#39;t miss any updates. Rust really needs a formal language definition in a single document that is kept current with releases.)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539258368, "post_id": 52740693, "comment_id": 92441572, "body": "@starblue I&#39;m unclear as to why you are bringing up coherence here. It&#39;s perfectly coherent for a crate to produce a range that is iterable, but the key trait is unstable."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1539271859, "post_id": 52740693, "comment_id": 92450633, "body": "I wanted to check why the <code>chrono</code> crate can&#39;t implement the <code>Iterator</code> trait for the standard range type constructors. After all the newly defined date type <code>NaiveDate</code> appears, but below the <code>Range</code> type constructor. But indeed, if you apply the formal rule that is not sufficient to allow it. I put the link because it is remarkably hard to find the RFC via search, as there is a maze of discussions about modifying the orphan rule to allow more."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1539272225, "post_id": 52740693, "comment_id": 92450858, "body": "@starblue I see. Yes, the standard library <a href=\"https://doc.rust-lang.org/std/ops/struct.Range.html#impl-Iterator\" rel=\"nofollow noreferrer\">implements <code>Iterator for Range&lt;A: Step&gt;</code></a>, so a crate may not definine <code>Iterator</code> for <code>Range&lt;NaiveDate&gt;</code>. However, it can implement <code>Step</code> for <code>NaiveDate</code>, except that <code>Step</code> is unstable."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1539175761, "creation_date": 1539175761, "answer_id": 52740693, "question_id": 52733670, "link": "https://stackoverflow.com/questions/52733670/how-do-i-use-itertools-to-create-all-combinations-of-a-range-of-chrono-dates/52740693#52740693", "title": "How do I use Itertools to create all combinations of a range of Chrono dates?", "body": "<p>Itertools, as the name suggests, works on <em><code>Iterator</code>s</em>. It is <a href=\"https://stackoverflow.com/q/48321087/155423\">not possible</a> to create an iterable range of a type from outside of the standard library in stable Rust (version 1.29).</p>\n\n<p>Instead, we can create a custom iterator for a date range, based on <a href=\"https://stackoverflow.com/q/41679239/155423\">looping over dates</a></p>\n\n<pre><code>extern crate chrono; // 0.4.6\nextern crate itertools; // 0.7.8\n\nuse chrono::{Duration, NaiveDate};\nuse itertools::Itertools;\nuse std::mem;\n\nstruct DateRange(NaiveDate, NaiveDate);\n\nimpl Iterator for DateRange {\n    type Item = NaiveDate;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.0 &lt; self.1 {\n            let next = self.0 + Duration::days(1);\n            Some(mem::replace(&amp;mut self.0, next))\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let min = NaiveDate::from_ymd(2018, 10, 1);\n    let max = NaiveDate::from_ymd(2018, 10, 14);\n    let combinations: Vec&lt;_&gt; = DateRange(min, max).combinations(5).collect();\n    println!(\"{:?}\", combinations)\n}\n</code></pre>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/48321087/155423\">Iterating over a range of generic type</a></li>\n<li><a href=\"https://stackoverflow.com/q/41679239/155423\">Loop over date range</a></li>\n</ul>\n"}], "owner": {"reputation": 522, "user_id": 72423, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34aab725c3800e856b81ac6d9ee816e8?s=128&d=identicon&r=PG", "display_name": "JoeCamel", "link": "https://stackoverflow.com/users/72423/joecamel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1144, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1539175761, "creation_date": 1539151877, "last_edit_date": 1539175094, "question_id": 52733670, "link": "https://stackoverflow.com/questions/52733670/how-do-i-use-itertools-to-create-all-combinations-of-a-range-of-chrono-dates", "title": "How do I use Itertools to create all combinations of a range of Chrono dates?", "body": "<p>I'm trying to generate all combinations of a date range using <a href=\"https://docs.rs/itertools/0.7.8/itertools/trait.Itertools.html#method.combinations\" rel=\"nofollow noreferrer\">Rust itertools</a> but it says that trait bounds were not satisfied.</p>\n\n<pre><code>extern crate chrono;\nextern crate itertools;\n\nuse itertools::Itertools;\nuse chrono::prelude::*;\n\nfn main() {\n    let min = NaiveDate::from_ymd(2018, 10, 1);\n    let max = NaiveDate::from_ymd(2018, 10, 14);\n    let combinations = (min..=max).combinations(5);\n}\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `combinations` found for type `std::ops::RangeInclusive&lt;chrono::NaiveDate&gt;` in the current scope\n  --&gt; src/main.rs:46:36\n   |\n46 |     let combinations = (min..=max).combinations(5);\n   |                                    ^^^^^^^^^^^^\n   |\n   = note: the method `combinations` exists but the following trait bounds were not satisfied:\n           `std::ops::RangeInclusive&lt;chrono::NaiveDate&gt; : itertools::Itertools`\n           `&amp;std::ops::RangeInclusive&lt;chrono::NaiveDate&gt; : itertools::Itertools`\n           `&amp;mut std::ops::RangeInclusive&lt;chrono::NaiveDate&gt; : itertools::Itertools`\n</code></pre>\n\n<p>I would expect that <code>Itertools</code> were implemented for generic <code>RangeInclusive</code>. I am learning Rust so I might be missing something obvious.</p>\n"}, {"tags": ["rust", "serde", "borrowing"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1539150209, "post_id": 52733047, "comment_id": 92391422, "body": "<a href=\"https://serde.rs/impl-deserializer.html\" rel=\"nofollow noreferrer\">serde.rs/impl-deserializer.html</a>, it&#39;s not clear what you asking please include curent <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> that copy."}], "answers": [{"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": true, "score": 4, "last_activity_date": 1539152046, "last_edit_date": 1539152046, "creation_date": 1539151358, "answer_id": 52733564, "question_id": 52733047, "link": "https://stackoverflow.com/questions/52733047/how-to-borrow-a-field-for-serialization-but-create-it-during-deserialization/52733564#52733564", "title": "How to borrow a field for serialization but create it during deserialization?", "body": "<p>You could use a <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a>, which will be <code>Cow::Borrowed</code> when serializing and will deserialize as <code>Cow::Owned</code> when deserializing.</p>\n\n<pre><code>use std::borrow::Cow;\n\n#[derive(Serialize, Deserialize)]\nstruct Thing&lt;'a&gt; {\n    small_header: Header,\n    big_body: Cow&lt;'a, Body&gt;,\n}\n</code></pre>\n\n<p>Alternatively, you could serialize and deserialize as two independent data structures.</p>\n\n<pre><code>#[derive(Serialize)]\nstruct SerializeThing&lt;'a&gt; {\n    small_header: Header,\n    big_body: &amp;'a Body,\n}\n\n#[derive(Deserialize)]\nstruct DeserializeThing {\n    small_header: Header,\n    big_body: Body,\n}\n</code></pre>\n"}], "owner": {"reputation": 33, "user_id": 10471467, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/de7a69e2b1580a53f172beb9ec088c3d?s=128&d=identicon&r=PG&f=1", "display_name": "Seawaves32", "link": "https://stackoverflow.com/users/10471467/seawaves32"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 400, "favorite_count": 0, "accepted_answer_id": 52733564, "answer_count": 1, "score": 2, "last_activity_date": 1539496348, "creation_date": 1539148546, "last_edit_date": 1539176645, "question_id": 52733047, "link": "https://stackoverflow.com/questions/52733047/how-to-borrow-a-field-for-serialization-but-create-it-during-deserialization", "title": "How to borrow a field for serialization but create it during deserialization?", "body": "<p>I have a struct like this:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Thing {\n    pub small_header: Header,\n    pub big_body: Body,\n}\n</code></pre>\n\n<p>I want to serialize this <code>Thing</code> to send over the network. I already have a <code>Body</code> available but <strong>I can't move it</strong> (imagine I am doing something with it, and every now and then I receive a command to temporarily stop what I'm doing and send over whatever data I have now) and <strong>I can't copy it</strong> (it's too big, possibly hundreds of megabytes).</p>\n\n<p>So I'd like Serde to just borrow the one I have for serializing it, since it shouldn't need to be moved into a struct for that. If I rewrite <code>Thing</code> to take a reference, I obviously can't derive <code>Deserialize</code>!</p>\n\n<p>The workaround I've been using is just using an <code>Arc&lt;Body&gt;</code> in my code, so that I can work with the body in my normal logic and when I need to serialize it, I can just do a cheap clone and put the <code>Arc&lt;Body&gt;</code> into the struct for serialization. During deserialization Serde will make a new <code>Arc</code> with a refcount of 1.</p>\n\n<p>This still involves scattering <code>Arc</code> all over my code, which isn't great, not to mention the unnecessary (though minor) runtime cost. What is the correct solution for this use case?</p>\n\n<p>The funny thing is that if I didn't have to send a header, then this would be a non-issue since I could serialize by reference and deserialize by value, but the presence of a header makes this impossible. I feel like I'm missing something about how Serde borrows data here...</p>\n"}, {"tags": ["string", "error-handling", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "edited": false, "score": 0, "creation_date": 1539093410, "post_id": 52720868, "comment_id": 92370923, "body": "This example is useful, but still we need to specify the to_string description as hardcoded. Can we make a dynamically generated string description containing the enum type and the description of it inside of the formatter? I am looking for something like: write!(f,&quot;{} , {} &quot;,self.type,self.desc)"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "edited": false, "score": 0, "creation_date": 1539093958, "post_id": 52720868, "comment_id": 92371312, "body": "@AkinerAlkan in that case you might be interested in an error struct rather than an enum: <a href=\"https://play.rust-lang.org/?gist=488a9117d81e61b5ae02afed538b11d1&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 11, "last_activity_date": 1539092830, "last_edit_date": 1539092830, "creation_date": 1539087396, "answer_id": 52720868, "question_id": 52720831, "link": "https://stackoverflow.com/questions/52720831/how-can-i-add-the-to-string-functionality-to-an-enum/52720868#52720868", "title": "How can I add the to_string() functionality to an enum?", "body": "<p>Your enum should implement <a href=\"https://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code></a>; from <a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html\" rel=\"noreferrer\"><code>ToString</code></a> docs:</p>\n\n<blockquote>\n  <p>This trait is automatically implemented for any type which implements\n  the <code>Display</code> trait. As such, <code>ToString</code> shouldn't be implemented\n  directly: <code>Display</code> should be implemented instead, and you get the\n  <code>ToString</code> implementation for free.</p>\n</blockquote>\n\n<p>Edit: I have adjusted your playground example; I think you might be after something <a href=\"https://play.rust-lang.org/?gist=e64aacfacd620c5a12466ba556c49606&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"noreferrer\">like this</a>.</p>\n"}], "owner": {"reputation": 4195, "user_id": 6882497, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yMbwv.jpg?s=128&g=1", "display_name": "Akiner Alkan", "link": "https://stackoverflow.com/users/6882497/akiner-alkan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2224, "favorite_count": 1, "accepted_answer_id": 52720868, "answer_count": 1, "score": 7, "last_activity_date": 1539092830, "creation_date": 1539087280, "last_edit_date": 1539091405, "question_id": 52720831, "link": "https://stackoverflow.com/questions/52720831/how-can-i-add-the-to-string-functionality-to-an-enum", "title": "How can I add the to_string() functionality to an enum?", "body": "<p>I am trying to create <code>Error</code> enums that implement <code>to_string()</code>. I have tried to <code>derive(Debug)</code> for them but it doesn't seem to be enough.</p>\n\n<p>Here is the enum that I am working on:</p>\n\n<pre><code>#[derive(Debug, Clone)]\npub enum InnerError {\n    InnerErrorWithDescription(String),\n}\n\n#[derive(Debug, Clone)]\npub enum OuterError {\n    OuterErrorWithDescription(String),\n}\n</code></pre>\n\n<p>What I am trying to make is:</p>\n\n<pre><code>// result type &lt;T,InnerErrorWithDescription&gt;\nresult.map_err(|err| { Error::OuterErrorWithDescription(err.to_string())}) // .to_string() is not available\n</code></pre>\n\n<p>I could not manage to convert <code>InnerError</code> enum type to <code>OuterError</code>.</p>\n\n<p>What should I change to implement it?</p>\n\n<p>I have made an example for writing enum types and their values' here:</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6a3c4a17c3c28d7c571e221440ac197c&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"noreferrer\">Rust Playground</a> </p>\n\n<p>But, still I had to specify the type and it's description in match case, are there any more generic implementation? </p>\n"}, {"tags": ["rust", "nom"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1539093441, "post_id": 52720072, "comment_id": 92370948, "body": "Not 100% sure if I&#39;d call it a duplicate, but the root cause is the same as <a href=\"https://stackoverflow.com/questions/51257031/parsing-an-integer-with-nom/51265699\" title=\"parsing an integer with nom\">stackoverflow.com/questions/51257031/&hellip;</a>."}], "answers": [{"tags": [], "owner": {"reputation": 1101, "user_id": 8715470, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Dlyj0.jpg?s=128&g=1", "display_name": "Zarenor", "link": "https://stackoverflow.com/users/8715470/zarenor"}, "is_accepted": true, "score": 6, "last_activity_date": 1539092232, "creation_date": 1539092232, "answer_id": 52722460, "question_id": 52720072, "link": "https://stackoverflow.com/questions/52720072/why-does-my-nom-parser-not-consume-the-entire-input-leaving-the-last-piece-unpa/52722460#52722460", "title": "Why does my nom parser not consume the entire input, leaving the last piece unparsed?", "body": "<p>The issue you're running into is that Nom is designed to always assume that there may be more input, unless you tell it otherwise. Since you know your input here is complete, you need to feed the parsers your literal wrapped in a <code>CompleteByteSlice</code> (or if you used a <code>&amp;str</code>, a <code>CompleteStr</code>). These types are thin wrappers that Nom uses to indicate that we know there isn't more input coming. It will make it so a parser that fails to make a complete match returns an <code>Error</code> instead of an <code>Incomplete</code>, and in this case, will instruct the the parser to consume that final token, rather than ask for more characters.</p>\n"}, {"tags": [], "owner": {"reputation": 2882, "user_id": 544454, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/ieSjS.png?s=128&g=1", "display_name": "mchlstckl", "link": "https://stackoverflow.com/users/544454/mchlstckl"}, "is_accepted": false, "score": 1, "last_activity_date": 1539162661, "last_edit_date": 1539162661, "creation_date": 1539112802, "answer_id": 52727968, "question_id": 52720072, "link": "https://stackoverflow.com/questions/52720072/why-does-my-nom-parser-not-consume-the-entire-input-leaving-the-last-piece-unpa/52727968#52727968", "title": "Why does my nom parser not consume the entire input, leaving the last piece unparsed?", "body": "<p>For completeness, I implemented the following changes according to @Zarenor's answer and the parser now consumes the entire input.</p>\n\n<p><strong>changes to main.rs</strong></p>\n\n<pre><code>use nom::types::CompleteByteSlice;\nuse nom::IResult;\n\nnamed!(separator&lt;CompleteByteSlice, CompleteByteSlice&gt;, is_a!(\" ,\"));\nnamed!(not_separator&lt;CompleteByteSlice, CompleteByteSlice&gt;, is_not!(\" ,\"));\n\nfn token&lt;'a&gt;(input: CompleteByteSlice&lt;'a&gt;) -&gt; IResult&lt;CompleteByteSlice&lt;'a&gt;, Token&lt;'a&gt;&gt; {\n    alt!(input,\n        separator =&gt;     { | s: CompleteByteSlice&lt;'a&gt; | Token::Separator(s.0) } |\n        not_separator =&gt; { | n: CompleteByteSlice&lt;'a&gt; | Token::Field(n.0)     }\n    )\n}\n\nnamed!(sequence&lt;CompleteByteSlice, Vec&lt;Token&gt;&gt;, many1!(token));\n\npub fn scan(input: &amp;[u8]) -&gt; Vec&lt;Token&gt; {\n    let (_, seq) = sequence(CompleteByteSlice(input)).unwrap();\n    seq\n}\n</code></pre>\n"}], "owner": {"reputation": 2882, "user_id": 544454, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/ieSjS.png?s=128&g=1", "display_name": "mchlstckl", "link": "https://stackoverflow.com/users/544454/mchlstckl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 389, "favorite_count": 0, "accepted_answer_id": 52722460, "answer_count": 2, "score": 5, "last_activity_date": 1539162661, "creation_date": 1539084810, "last_edit_date": 1539112598, "question_id": 52720072, "link": "https://stackoverflow.com/questions/52720072/why-does-my-nom-parser-not-consume-the-entire-input-leaving-the-last-piece-unpa", "title": "Why does my nom parser not consume the entire input, leaving the last piece unparsed?", "body": "<p>I'm trying to split a log line on space and commas in order to create a <code>Vector</code> of <code>Token</code>s of <code>Field</code> and <code>Separator</code> as shown in the code below.</p>\n\n<p>My problem is that nom doesn't seem to consume the entire log line, it leaves the last part unparsed - in this case <code>08:33:58)</code>.</p>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>#![feature(rust_2018_preview)]\n\n#[macro_use] extern crate nom;\n\n#[derive(Debug, PartialEq)]\npub enum Token&lt;'a&gt; {\n    Separator(&amp;'a [u8]),\n    Field(&amp;'a [u8]),    \n}\n\nnamed!(separator, is_a!(\" ,\"));\n\nnamed!(not_sep, is_not!(\" ,\"));\n\nnamed!(\n    token&lt;Token&gt;,\n    alt_complete!(\n        separator =&gt; { |s| Token::Separator(s) } |\n        not_sep =&gt;   { |n| Token::Field(n) }\n    )\n);\n\nnamed!(sequence&lt;Vec&lt;Token&gt;&gt;, many1!(token));\n\n\npub fn scan(input: &amp;[u8]) -&gt; Vec&lt;Token&gt; {\n    let (_, seq) = sequence(input).unwrap();\n\n    seq\n}\n\nfn main() {\n}\n\n#[cfg(test)]\nmod tests {\n    use std::str;\n    use crate::Token;\n    use crate::scan;\n\n    #[test]\n    fn parse_stuff() {\n\n        let log = &amp;b\"docker INFO 2019-10-01 08:33:58,878 [1] schedule:run Running job Every 1 hour do _precache_systems_streaks() (last run: 2018-09-21 07:33:58, next run: 2018-09-21 08:33:58)\";\n\n        let seq = scan(&amp;log[..]);\n\n        for t in seq {\n            let text = match t {\n                Token::Field(data) =&gt; format!(\"f[{}]\", str::from_utf8(data).unwrap()),\n                Token::Separator(data) =&gt; format!(\"s[{}]\", str::from_utf8(data).unwrap()),\n            };\n\n            println!(\"{}\", text);\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\nnom = \"4.0\"\n</code></pre>\n\n<p><strong>output</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>f[docker]\ns[ ]\nf[INFO]\ns[ ]\nf[2019-10-01]\ns[ ]\nf[08:33:58]\ns[,]\nf[878]\ns[ ]\nf[[1]]\ns[ ]\nf[schedule:run]\ns[ ]\nf[Running]\ns[ ]\nf[job]\ns[ ]\nf[Every]\ns[ ]\nf[1]\ns[ ]\nf[hour]\ns[ ]\nf[do]\ns[ ]\nf[_precache_systems_streaks()]\ns[ ]\nf[(last]\ns[ ]\nf[run:]\ns[ ]\nf[2018-09-21]\ns[ ]\nf[07:33:58]\ns[, ]\nf[next]\ns[ ]\nf[run:]\ns[ ]\nf[2018-09-21]\ns[ ]\n</code></pre>\n"}, {"tags": ["math", "types", "rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1539083269, "post_id": 52719506, "comment_id": 92364352, "body": "<a href=\"https://github.com/rust-lang/rfcs/issues/671\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/issues/671</a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 3, "creation_date": 1539084788, "post_id": 52719506, "comment_id": 92365215, "body": "It is impossible to enforce this at compile-time. For example, if you receive an out-of-range value from a database query or user input. The old RFC that @Stargateur has linked discusses this a little. A future feature could have a compile error when it can be proven that the value is out of range (e.g. a literal) or could optimise the run-time checks when it can prove the value is in range. But the general case would always rely on run-time checks."}], "owner": {"reputation": 2192, "user_id": 2480092, "user_type": "registered", "accept_rate": 9, "profile_image": "https://www.gravatar.com/avatar/97f4cd231024913afd99cbe69655a963?s=128&d=identicon&r=PG", "display_name": "TheEnvironmentalist", "link": "https://stackoverflow.com/users/2480092/theenvironmentalist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 57, "favorite_count": 0, "closed_date": 1539087564, "answer_count": 0, "score": 3, "last_activity_date": 1539082998, "creation_date": 1539082998, "question_id": 52719506, "link": "https://stackoverflow.com/questions/52719506/using-the-type-system-to-enforce-coordinate-boundaries-in-rust", "closed_reason": "Duplicate", "title": "Using the type system to enforce coordinate boundaries in Rust", "body": "<p>I'm trying to take a page out of Haskell's book and use the Rust type system to ensure values used in a coordinate system remain within a certain range, and catch out-of-range errors at compile time.</p>\n\n<p>Imagine a coordinate pair type like this:</p>\n\n<pre><code>struct Coordinates {\n    x: i64,\n    y: i64,\n}\n</code></pre>\n\n<p>With such a system, any valid 64-bit signed integer could occupy my coordinate system, instead of, say, just <code>0-50</code>. I could put checks in the code throughout the use of this type to ensure coordinates stay within the \"valid\" range, but problems here would have to be caught at runtime, rather than compile time, and there's the possibility I'd miss some tricky way of sneaking in invalid values.</p>\n\n<p>Sure, it's a slightly convoluted example, but imagine if instead of coordinates on a map these were memory addresses on a RAM card. Suddenly the ability to mess with sneaking in values out of the allowed range could have disastrous security consequences, so why not solve this at compile time?</p>\n\n<p>Instead, I'd like to do something like this, dynamically generating bounded types at compile time:</p>\n\n<pre><code>struct Coordinates {\n    x: i64bounded!(-50, 100),\n    y: i64bounded!(-25, 75),\n}\n</code></pre>\n\n<p>Now I know that in order for this type to work, I'd need to overload all of the mathematical operators to add in bounds checks and, say, mark the variable as illegal somehow if it escaped the bounds so the compiler would complain. The real problem comes down to mathematical closure. The idea that there is the possibility for user-submitted values to cause a type error would likely require optionals to mark a variable as invalid, with all future steps rejecting use of a <code>None</code> optional value.</p>\n\n<p>Is it possible to do such a thing in Rust? How would you go about doing it?</p>\n"}, {"tags": ["struct", "reference", "rust"], "answers": [{"tags": [], "owner": {"reputation": 207, "user_id": 2519977, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e49452fdc198e591d73f5e373d860e23?s=128&d=identicon&r=PG", "display_name": "rudib", "link": "https://stackoverflow.com/users/2519977/rudib"}, "is_accepted": true, "score": 0, "last_activity_date": 1539112838, "creation_date": 1539112838, "answer_id": 52727977, "question_id": 52718513, "link": "https://stackoverflow.com/questions/52718513/using-a-struct-to-store-a-reference-to-a-non-copy-value/52727977#52727977", "title": "Using a struct to store a reference to a non-Copy value", "body": "<p>The problem is that <code>self.child</code> has to be consumed by <code>wait_with_output()</code>. This is why <code>self</code> must not be passed to <code>f2</code> by reference, but by value:</p>\n\n<pre><code>pub struct Shell {\n    child: std::process::Child,\n}\n\nimpl Shell {\n    pub fn init() -&gt; Shell {\n        let mut cmd = std::process::Command::new(\"Command\");\n        let process = cmd.spawn();\n        let new = Shell {\n            child: process.unwrap(),\n        };\n        new\n    }\n\n    pub fn f1(&amp;mut self) {\n        //do something with self\n    }\n\n    pub fn f2(mut self) {\n        {\n            let stdin = self.child.stdin.as_mut().unwrap();\n        }\n        let output = self.child.wait_with_output();\n    }\n}\n\nfn main() {\n    let mut shell = Shell::init();\n    shell.f1();\n    shell.f2();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f3e4888f62d9ab6f347ef24394c65a49&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">>Try it</a></p>\n\n<p>However this implies that <code>f2</code> must be the last function that accesses <code>self.child</code>.</p>\n"}], "owner": {"reputation": 207, "user_id": 2519977, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e49452fdc198e591d73f5e373d860e23?s=128&d=identicon&r=PG", "display_name": "rudib", "link": "https://stackoverflow.com/users/2519977/rudib"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 122, "favorite_count": 0, "accepted_answer_id": 52727977, "answer_count": 1, "score": 1, "last_activity_date": 1539113559, "creation_date": 1539079952, "last_edit_date": 1539113559, "question_id": 52718513, "link": "https://stackoverflow.com/questions/52718513/using-a-struct-to-store-a-reference-to-a-non-copy-value", "title": "Using a struct to store a reference to a non-Copy value", "body": "<p>I need an object that contains a reference to a process child and enables me to execute functions on it.</p>\n\n<pre><code>pub struct Shell {\n    child: std::process::Child,\n}\n\nimpl Shell {\n    pub fn init() -&gt; Shell {\n        let mut cmd = std::process::Command::new(\"Command\");\n        let process = cmd.spawn();\n        let new = Shell {\n            child: process.unwrap(),\n        };\n        new\n    }\n\n    pub fn f1(mut self) {\n        //do something with self\n    }\n\n    pub fn f2(mut self) {\n        {\n            let stdin = self.child.stdin.as_mut().unwrap();\n        }\n        let output = self.child.wait_with_output();\n    }\n}\n\nfn main() {\n    let mut shell = Shell::init();\n    shell.f1();\n    shell.f2();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `shell`\n  --&gt; src/main.rs:28:5\n   |\n27 |     shell.f1();\n   |     ----- value moved here\n28 |     shell.f2();\n   |     ^^^^^ value used here after move\n   |\n   = note: move occurs because `shell` has type `Shell`, which does not implement the `Copy` trait\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=15c6d6d6de6a3a403e56e783e022d6c7&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">>Try it</a></p>\n\n<p>The problem is that when I initialize my object, I can call functions on the object only once, because the value is moved on the first call due to standard Rust behaviour.</p>\n\n<p>A simple <code>#[derive(Copy, Clone)]</code> does not work here, because <a href=\"https://doc.rust-lang.org/std/process/struct.Child.html\" rel=\"nofollow noreferrer\"><code>std::process::Child</code></a> does not seem to implement the <code>Copy</code> trait. Is there a way to circumvent that or wrap it into something copy-able?</p>\n\n<h3>Test Implementations</h3>\n\n<p>When using a mutable reference as the function argument, the initial problem appears to be solved, however, it is then not possible to access the <code>self.child</code> more than once.</p>\n\n<pre><code>pub struct Shell {\n    child: std::process::Child,\n}\n\nimpl Shell {\n    pub fn init() -&gt; Shell {\n        let mut cmd = std::process::Command::new(\"Command\");\n        let process = cmd.spawn();\n        let new = Shell {\n            child: process.unwrap(),\n        };\n        new\n    }\n\n    pub fn f1(&amp;mut self) {\n        //do something with self\n    }\n\n    pub fn f2(&amp;mut self) {\n        {\n            let stdin = self.child.stdin.as_mut().unwrap();\n        }\n        let output = self.child.wait_with_output();\n    }\n}\n\nfn main() {\n    let mut shell = Shell::init();\n    shell.f1();\n    shell.f2();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:21:22\n   |\n21 |         let output = self.child.wait_with_output();\n   |                      ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=d97112e2ddaf5a57fb873450417a5aa1&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">>Try it</a></p>\n\n<p>Is there a way to solve that?</p>\n"}, {"tags": ["rust", "lifetime", "rust-actix"], "answers": [{"comments": [{"owner": {"reputation": 57, "user_id": 10431891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6c215ab9ab6acef162f26469c90a3b71?s=128&d=identicon&r=PG&f=1", "display_name": "Deveres", "link": "https://stackoverflow.com/users/10431891/deveres"}, "edited": false, "score": 0, "creation_date": 1539384608, "post_id": 52736535, "comment_id": 92497297, "body": "Thank you @attdona! Not only your answer solve my problem only, but now I have learn a different way to reason about lifetimes and ownership."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 2, "last_activity_date": 1539176513, "last_edit_date": 1539176513, "creation_date": 1539162401, "answer_id": 52736535, "question_id": 52717989, "link": "https://stackoverflow.com/questions/52717989/how-could-i-store-closures-and-use-them-with-actix-actors/52736535#52736535", "title": "How could I store closures and use them with Actix actors?", "body": "<p>Disclaimer: I'm not able to comment if this is a good design pattern for <a href=\"https://actix.rs/\" rel=\"nofollow noreferrer\">Actix</a> as I'm just beginning understanding the framework. </p>\n\n<p>As you have already discovered, the problem is related to lifetime requirements.</p>\n\n<p>The <a href=\"https://docs.rs/actix/0.7.4/actix/trait.Actor.html#method.create\" rel=\"nofollow noreferrer\"><code>Actor::create</code></a> method requires a <code>'static</code>  lifetime for the closure argument:</p>\n\n<pre><code>fn create&lt;F&gt;(f: F) -&gt; Addr&lt;Self&gt; \nwhere\n    Self: Actor&lt;Context = Context&lt;Self&gt;&gt;,\n    F: FnOnce(&amp;mut Context&lt;Self&gt;) -&gt; Self + 'static, \n</code></pre>\n\n<p><code>&amp;self.events[0]</code> does not satisfy the <code>'static</code> lifetime requirement.</p>\n\n<p>One solution is to move ownership of the <code>EventManager</code> object to <code>MyActor</code>:</p>\n\n<pre><code>use actix::*;\nuse actix_web::ws::{Client, Message, ProtocolError};\nuse futures::Future;\n\nstruct MyActor {\n    evm: EventManager,\n}\n\nimpl Actor for MyActor {\n    type Context = Context&lt;Self&gt;;\n}\n\nimpl StreamHandler&lt;Message, ProtocolError&gt; for MyActor {\n    fn handle(&amp;mut self, msg: Message, _ctx: &amp;mut Context&lt;Self&gt;) {\n        match msg {\n            Message::Text(text) =&gt; {\n                // just for sake of demo: execute all event handlers\n                for idx in 0..self.evm.events.len() {\n                    (self.evm.events[idx].handler)(text.clone())\n                }\n            }\n            _ =&gt; panic!(),\n        }\n    }\n}\n\npub struct Event {\n    handler: Box&lt;Fn(String) + 'static&gt;,\n}\n\npub struct EventManager {\n    events: Vec&lt;Event&gt;,\n}\n\nimpl EventManager {\n    pub fn new() -&gt; Self {\n        Self { events: vec![] }\n    }\n\n    pub fn capture&lt;F&gt;(&amp;mut self, function: F)\n    where\n        F: Fn(String) + 'static,\n    {\n        let event = Event {\n            handler: Box::new(function),\n        };\n        self.events.push(event);\n    }\n\n    pub fn run(self) {\n        let runner = System::new(\"example\");\n\n        Arbiter::spawn(\n            Client::new(\"http://127.0.0.1:8080/ws/\")\n                .connect()\n                .map(|(reader, _writer)| {\n                    MyActor::create(|ctx| {\n                        MyActor::add_stream(reader, ctx);\n\n                        // move event manager inside the actor\n                        MyActor { evm: self }\n                    });\n                }).map_err(|err| println!(\"FATAL: {}\", err)),\n        );\n\n        runner.run();\n    }\n}\n\npub fn ready() {\n    let mut client = EventManager::new();\n\n    client.capture(|data| println!(\"processing the data: {:?}\", data));\n    client.capture(|data| println!(\"processing AGAIN the data: {:?}\", data));\n    client.run();\n\n    // here run client is not more available: it was moved inside the actor\n}\n\nfn main() {\n    ready();\n}\n</code></pre>\n"}], "owner": {"reputation": 57, "user_id": 10431891, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6c215ab9ab6acef162f26469c90a3b71?s=128&d=identicon&r=PG&f=1", "display_name": "Deveres", "link": "https://stackoverflow.com/users/10431891/deveres"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 722, "favorite_count": 0, "accepted_answer_id": 52736535, "answer_count": 1, "score": 3, "last_activity_date": 1539384742, "creation_date": 1539078342, "last_edit_date": 1539384742, "question_id": 52717989, "link": "https://stackoverflow.com/questions/52717989/how-could-i-store-closures-and-use-them-with-actix-actors", "title": "How could I store closures and use them with Actix actors?", "body": "<p>I'm trying to use Actix to communicate capture events through WebSockets and process them using something like <a href=\"https://github.com/foochi/how-store-closures-with-actix\" rel=\"nofollow noreferrer\">https://github.com/foochi/how-store-closures-with-actix</a>. The idea is providing a library that can be used to store closures (events), and run them when a WebSockets text message is received.</p>\n\n<pre><code>use actix::*;\nuse actix_web::ws::{Client, Message, ProtocolError};\nuse futures::Future;\n\nstruct MyActor {\n    handler: Box&lt;Fn(String) + 'static&gt;,\n}\n\nimpl Actor for MyActor {\n    type Context = Context&lt;Self&gt;;\n}\n\nimpl StreamHandler&lt;Message, ProtocolError&gt; for MyActor {\n    fn handle(&amp;mut self, msg: Message, _ctx: &amp;mut Context&lt;Self&gt;) {\n        match msg {\n            Message::Text(text) =&gt; {\n                (self.handler)(text)\n            },\n            _ =&gt; panic!(),\n        }\n    }\n}\n\npub struct Event {\n    handler: Box&lt;Fn(String) + 'static&gt;,\n}\n\npub struct EventManager {\n    events: Vec&lt;Event&gt;,\n}\n\nimpl EventManager {\n\n    pub fn new() -&gt; Self {\n        Self { events: vec![] }\n    }\n\n    pub fn capture&lt;F&gt;(&amp;mut self, function: F)\n    where\n        F: for&lt;'h&gt; Fn(String) + 'static\n    {\n        let event = Event { handler: Box::new(function), };\n        self.events.push(event);\n    }\n\n    pub fn run(&amp;self) {\n        let runner = System::new(\"example\");\n        let event = &amp;self.events[0];\n\n        Arbiter::spawn(\n            Client::new(\"example\")\n                .connect()\n                .map(|(reader, _writer)| {\n                    MyActor::create(|ctx| {\n                        MyActor::add_stream(reader, ctx);\n                        MyActor { handler: event.handler }\n                    });\n                })\n                .map_err(|err| {})\n        );\n\n        runner.run();\n    }\n}\n</code></pre>\n\n<p>My problem is that I have this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; src/events.rs:48:22\n   |\n48 |         let event = &amp;self.events[0];\n   |                      ^^^^^^^^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 46:5...\n  --&gt; src/events.rs:46:5\n   |\n46 | /     pub fn run(&amp;self) {\n47 | |         let runner = System::new(\"example\");\n48 | |         let event = &amp;self.events[0];\n49 | |\n...  |\n62 | |         runner.run();\n63 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/events.rs:48:22\n   |\n48 |         let event = &amp;self.events[0];\n   |                      ^^^^^^^^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/events.rs:54:37: 57:22 reader:actix_web::ws::ClientReader, event:&amp;&amp;events::Event]` will meet its required lifetime bounds\n  --&gt; src/events.rs:54:21\n   |\n54 |                     MyActor::create(|ctx| {\n   |                     ^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I think that I partly understand the root cause: I'm trying to pass a reference (the event) to the <code>StreamHandler</code>, but the lifetimes don't match.</p>\n\n<p>How could I fix it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1539039174, "post_id": 52711038, "comment_id": 92348295, "body": "<i>It is not clear to me what &quot;trait bounds&quot; are</i> \u2014 a quick <a href=\"https://www.google.com/search?q=rust+%22trait+bounds%22\" rel=\"nofollow noreferrer\">search on the internet</a> quickly identifies a chapter in <i>The Rust Programming Language</i>. You can then read the <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-02-traits.html\" rel=\"nofollow noreferrer\">current version of that chapter</a>."}], "answers": [{"comments": [{"owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "edited": false, "score": 0, "creation_date": 1539040132, "post_id": 52711095, "comment_id": 92348498, "body": "Thanks for responding to my dumb question. Unfortunately, I had tried that formatting earlier and got a different error: <code>^^^^^ &#39;syn::Expr&#39; cannot be formatted using &#39;{:?}&#39; because it doesn&#39;t implement &#39;std::fmt::Debug&#39;</code>. It seems like I might be working with a non-standard <code>syn::Expr</code>? (note I did use <code>{:#?}</code>, but error is missing the hashtag)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "edited": false, "score": 1, "creation_date": 1539040729, "post_id": 52711095, "comment_id": 92348637, "body": "@ShawnTabrizi it&#39;s impossible to debug code that we cannot see. Please review what a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> is and how to produce and provide one. I can say that <a href=\"https://play.rust-lang.org/?gist=05630cb519d72d16f99dd58166a0d74a&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">the code provided compiles</a>."}, {"owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "edited": false, "score": 0, "creation_date": 1539056986, "post_id": 52711095, "comment_id": 92351824, "body": "Thanks Shepmaster, unfortunately I am too unfamiliar with the code base and Rust to reasonably come up with a mcve. That is my bad, and reflects itself in the quality of my post. I appreciate your responses"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "edited": false, "score": 2, "creation_date": 1539074182, "post_id": 52711095, "comment_id": 92358723, "body": "@ShawnTabrizi Take another look at this answer. I added a part about the <code>extra-traits</code> feature. I hope this helps."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1539074611, "post_id": 52711095, "comment_id": 92358997, "body": "@LukasKalbertodt Why this doesn&#39;t appear in the doc directly ? <a href=\"https://chrismorgan.info/blog/rust-cfg_attr.html\" rel=\"nofollow noreferrer\">&quot;When built, the documentation will then announce whether it was built with the foo feature enabled or disabled, which might be handy&quot;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1539089323, "post_id": 52711095, "comment_id": 92368029, "body": "@Stargateur it&#39;s actually documented <a href=\"https://docs.rs/syn/0.15.9/syn/#optional-features\" rel=\"nofollow noreferrer\">at the top-level of the crate</a>. You could file an issue with the library to add that info to each instance of the trait, but that would probably force the maintainers to no longer be able to use <code>#[derive(...)]</code>, which would be very annoying."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1539074155, "last_edit_date": 1539074155, "creation_date": 1539039340, "answer_id": 52711095, "question_id": 52711038, "link": "https://stackoverflow.com/questions/52711038/how-to-print-the-contents-of-a-synexpr-with-println/52711095#52711095", "title": "How to print the contents of a syn::Expr with println?", "body": "<p><a href=\"https://docs.rs/syn/0.15.9/syn/enum.Expr.html\" rel=\"nofollow noreferrer\"><code>syn::Expr</code></a> is documented as <a href=\"https://docs.rs/syn/0.15.9/syn/enum.Expr.html#impl-Debug\" rel=\"nofollow noreferrer\">implementing the <code>Debug</code> trait</a>, so you use the <code>Debug</code> formatter:</p>\n\n<pre><code>extern crate syn; // 0.15.4\n\nfn example(expr: syn::Expr) {\n    println!(\"{:#?}\", expr);\n}\n</code></pre>\n\n<p><strong>However</strong>, all <code>Debug</code> implementations in <code>syn</code> are guarded by the Cargo feature <code>extra-traits</code>. So in order to use those <code>Debug</code> impls, you have to specifically enable that feature in your <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]\nsyn = { version = \"0.15\", features = [\"extra-traits\"] }\n</code></pre>\n\n<p>You can read more about <code>syn</code>'s optional Cargo features <a href=\"https://github.com/dtolnay/syn#optional-features\" rel=\"nofollow noreferrer\">in their README</a>.</p>\n\n<hr>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/39039700/155423\">How do I print variables in Rust and have it show everything about that variable, like Ruby&#39;s .inspect?</a></li>\n<li><a href=\"https://stackoverflow.com/q/40100077/155423\">What is the difference between println&#39;s format styles?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27769681/155423\">Should I implement Display or ToString to render a type as a string?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30450399/155423\">Does println! borrow or own the variable?</a></li>\n</ul>\n"}], "owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 483, "favorite_count": 0, "accepted_answer_id": 52711095, "answer_count": 1, "score": 3, "last_activity_date": 1539074155, "creation_date": 1539038787, "last_edit_date": 1539039232, "question_id": 52711038, "link": "https://stackoverflow.com/questions/52711038/how-to-print-the-contents-of-a-synexpr-with-println", "title": "How to print the contents of a syn::Expr with println?", "body": "<p>I am trying to output the contents of a <code>syn::Expr</code> to the console, but get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `to_string` found for type `&amp;syn::Expr` in the current scope\n   --&gt; derive/src/lib.rs:165:40\n    |\n165 |                 println!(\"Expression: {:#?}\", expr.to_string());\n    |                                                    ^^^^^^^^^\n    |\n    = note: the method `to_string` exists but the following trait bounds were not satisfied:\n            `syn::Expr : std::string::ToString`\n            `&amp;syn::Expr : std::string::ToString`\n            `syn::Expr : std::string::ToString`\n</code></pre>\n\n<p>It is not clear to me what \"trait bounds\" are or how to satisfy them. Are there any easy ways to output the contents of this variable?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 1840, "user_id": 1917721, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/TgopK.png?s=128&g=1", "display_name": "HFBrowning", "link": "https://stackoverflow.com/users/1917721/hfbrowning"}, "edited": false, "score": 5, "creation_date": 1539037660, "post_id": 52710828, "comment_id": 92347944, "body": "You should have kept reading :)   &quot;For now, all you need to know is that like variables, references are immutable by default. Hence, you need to write <code>&amp;mut guess</code> rather than <code>&amp;guess</code> to make it mutable. (Chapter 4 will explain references more thoroughly.)&quot;"}, {"owner": {"reputation": 13759, "user_id": 1640606, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/2Jqez.jpg?s=128&g=1", "display_name": "samayo", "link": "https://stackoverflow.com/users/1640606/samayo"}, "reply_to_user": {"reputation": 1840, "user_id": 1917721, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/TgopK.png?s=128&g=1", "display_name": "HFBrowning", "link": "https://stackoverflow.com/users/1917721/hfbrowning"}, "edited": false, "score": 0, "creation_date": 1539037836, "post_id": 52710828, "comment_id": 92347982, "body": "yeah, i read that but I didn&#39;t want to skip the lesson, I&#39;m reading a page per day and not understanding now would mess up my rythm ... that doc was so thorough until that point :) ..."}], "answers": [{"comments": [{"owner": {"reputation": 13759, "user_id": 1640606, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/2Jqez.jpg?s=128&g=1", "display_name": "samayo", "link": "https://stackoverflow.com/users/1640606/samayo"}, "edited": false, "score": 0, "creation_date": 1539043513, "post_id": 52711186, "comment_id": 92349221, "body": "How does the first two lines make sense? if <code>foo</code> is type mutable, shouldn&#39;t it stay that way the entire cycle of process? thanks also for the answer"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13759, "user_id": 1640606, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/2Jqez.jpg?s=128&g=1", "display_name": "samayo", "link": "https://stackoverflow.com/users/1640606/samayo"}, "edited": false, "score": 0, "creation_date": 1539044079, "post_id": 52711186, "comment_id": 92349343, "body": "@ANW the type of <code>foo</code> is <code>i32</code> \u2014 mutability is not a property of that type. The type of the argument to <code>example</code> is <code>&amp;i32</code> and the type of the argument to <code>example2</code> is <code>&amp;mut i32</code>. Just because something is mutable doesn&#39;t mean that you always want to mutate it. Knowing that something cannot be changed is more powerful."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "reply_to_user": {"reputation": 13759, "user_id": 1640606, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/2Jqez.jpg?s=128&g=1", "display_name": "samayo", "link": "https://stackoverflow.com/users/1640606/samayo"}, "edited": false, "score": 2, "creation_date": 1539066191, "post_id": 52711186, "comment_id": 92354568, "body": "@ANW actually the type that counts here isn&#39;t the type of <code>foo</code>, but the type of the argument for <code>example1</code> and <code>example2</code>. Since the compiler knows that <code>example1</code> takes an <code>&amp;i32</code> parameter and <code>example2</code> takes an <code>&amp;mut i32</code>, the  <code>mut</code> in the function call is indeed redundant <b>for the compiler</b>. It is however useful <b>for the programmer who reads the code</b> who can then know at a glance if a function call risks mutating a parameter. Remember that you spend a lot more time reading than writing code."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1539043962, "last_edit_date": 1539043962, "creation_date": 1539040056, "answer_id": 52711186, "question_id": 52710828, "link": "https://stackoverflow.com/questions/52710828/why-does-rust-re-declare-mutability-when-taking-a-reference-to-a-mutable-variabl/52711186#52711186", "title": "Why does rust re-declare mutability when taking a reference to a mutable variable?", "body": "<p>Because you can have either an <em>immutable</em> reference to a mutable variable or a <em>mutable</em> reference to a mutable variable. The keyword <code>mut</code> selects which type of reference you'd like to create.</p>\n\n<pre><code>let mut foo = 1;\nexample1(&amp;foo);     // May not modify `foo`\nexample2(&amp;mut foo); // May modify `foo`\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/23574416/155423\">How do I pass a reference to mutable data in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28587698/155423\">What&#39;s the difference between placing &quot;mut&quot; before a variable name and after the &quot;:&quot;?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 3, "last_activity_date": 1539041493, "creation_date": 1539041493, "answer_id": 52711368, "question_id": 52710828, "link": "https://stackoverflow.com/questions/52710828/why-does-rust-re-declare-mutability-when-taking-a-reference-to-a-mutable-variabl/52711368#52711368", "title": "Why does rust re-declare mutability when taking a reference to a mutable variable?", "body": "<p>Remember that by default in Rust all is immutable, when you create a reference to something by using <code>&amp;</code> by default this create a reference to something immutable, at least for the reference, the value itself is allowed to be mutable, the real mutable state of the value doesn't matter.</p>\n\n<p>That is a little counter intuitive when you come from language where all is mutable. You don't need to explicitly tell that something is mutable, it's the default behavior. The need to explicitly write that a reference to something is immutable when we create it almost don't exist.</p>\n\n<p>So to create a reference to something mutable, one must explicitly use <code>&amp;mut</code>. This is a rule, the compiler know that the value can be mutate and could do it for you but Rust ask you to write it explicitly, it's as simple as that.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1539156517, "creation_date": 1539156517, "answer_id": 52734845, "question_id": 52710828, "link": "https://stackoverflow.com/questions/52710828/why-does-rust-re-declare-mutability-when-taking-a-reference-to-a-mutable-variabl/52734845#52734845", "title": "Why does rust re-declare mutability when taking a reference to a mutable variable?", "body": "<p><strong>TL;DR:</strong> This is a design decision. The Rust compiler could, reasonably, infer whether mutability is necessary or not; however to a human reader it may not be obvious.</p>\n\n<hr>\n\n<p><strong>Long Story</strong></p>\n\n<p>If you look at Rust's predecessors, you will find that the use of reference arguments in C++ is not universally appreciated. In C++:</p>\n\n<pre><code>foo.call(bar);\n</code></pre>\n\n<p>only the definition of <code>call</code> will let you know whether <code>bar</code> is passed by value, const reference or mutable reference. As a result, the <a href=\"https://google.github.io/styleguide/cppguide.html#Reference_Arguments\" rel=\"noreferrer\">Google Style Guide</a> is infamous for mandating pass-by-pointer for any modifiable argument, so as to distinguish <em>at the call side</em> whether a variable may be modified by the call, or not.</p>\n\n<p>In designing Rust, there has been a large and deliberate emphasis on explicitness. The reasoning is that code is read more often than it is written, and therefore syntax and semantics should be optimized for reading and understanding.</p>\n\n<p>There is a tension between explicitness and concision, so explicitness is not always preferred, but it often is.</p>\n\n<p>In the case of mutable references, given the rules surrounding borrow-checking and the impact of mutable borrows on them, explicitness was preferred.</p>\n"}], "owner": {"reputation": 13759, "user_id": 1640606, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/2Jqez.jpg?s=128&g=1", "display_name": "samayo", "link": "https://stackoverflow.com/users/1640606/samayo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 214, "favorite_count": 0, "answer_count": 3, "score": 3, "last_activity_date": 1575642107, "creation_date": 1539037147, "last_edit_date": 1575642107, "question_id": 52710828, "link": "https://stackoverflow.com/questions/52710828/why-does-rust-re-declare-mutability-when-taking-a-reference-to-a-mutable-variabl", "title": "Why does rust re-declare mutability when taking a reference to a mutable variable?", "body": "<p>I'm reading <a href=\"https://doc.rust-lang.org/book/2018-edition/ch02-00-guessing-game-tutorial.html\" rel=\"nofollow noreferrer\">chapter two of <em>The Rust Programming Language</em></a> and something I don't understand caught my eye in here: </p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin().read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n</code></pre>\n\n<p>On code line 5, it declares a mutable variable with <code>let mut guess = String::new()</code>, but on the next line the argument for <code>read_line()</code> also has  a <code>mut</code> keyword.</p>\n\n<p>If the variable was defined as mutable in the first place, then why do we use <code>mut</code> again instead of just using the reference like this: </p>\n\n<pre><code>io::stdin().read_line(&amp;guess).expect(\"Failed to read line\");\n</code></pre>\n\n<p>If the type is defined for the variable, then when we use reference, shouldn't the type (<code>mut</code>) exist by default? </p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1539031134, "post_id": 52709147, "comment_id": 92345721, "body": "Just as a note, I corrected your <code>&amp;String</code> -&gt; <code>&amp;str</code> which is the borrow type for <code>String</code>. I&#39;m not going to change your method names, but just know that in general the Rust style for getters is just the name of the variable rather than <code>get_variable</code>, so <code>Context::name(&amp;self)</code> rather than <code>Context::get_name(&amp;self)</code>. NBD, just thought you may want to know."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539031298, "post_id": 52709147, "comment_id": 92345795, "body": "@LinearZoetrope Thanks for the comment. Just curious is there any convention in Rust for the setter as well?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539031345, "post_id": 52709147, "comment_id": 92345817, "body": "I <b>think</b> <code>set_x</code> is the standard, but I&#39;m not sure. Personally I see <code>x_mut</code> which returns a mutable reference to the variable more often. (But obviously there are reasons you may want a setter and not to expose the raw variable)."}], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539032833, "post_id": 52709635, "comment_id": 92346421, "body": "With non-lexical lifetimes, you won&#39;t need to convert the code to a form that only requires a limited borrow.  The OP&#39;s code compiles without modification with NLLs enabled, since the minimum time a borrow is required is figured out automatically."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539033609, "post_id": 52709635, "comment_id": 92346678, "body": "<i>Rust can have some subtle bugs</i> \u2014 No, <i>Rust</i> doesn&#39;t have these bugs \u2014 your code has <b>undefined behavior</b> and every guarantee is thrown out the window."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539033706, "post_id": 52709635, "comment_id": 92346706, "body": "@Shepmaster I mean, IMO it&#39;s semantics. The Rust team is trying to work on intuiting when it&#39;s not allowed to pass <code>noalias</code> which could be considered an ergonomics feature or a bug fix depending on perspective."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539033794, "post_id": 52709635, "comment_id": 92346732, "body": "Maybe a better phrasing would be &quot;the compiler can introduce unexpected subtle bugs into the compiled code&quot;"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539033930, "post_id": 52709635, "comment_id": 92346785, "body": "It&#39;s certainly not &quot;undefined behavior&quot; in that it&#39;s <i>deliberately</i> left undefined by a spec writer. It&#39;s merely undefined-by-difficulty-of-solving, and they&#39;re trying to solve it as much as possible. I consider it a different situation than, say, panicking over an FFI boundary which is undefined because of differences in OSs and such."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1539034399, "post_id": 52709635, "comment_id": 92346971, "body": "Thanks for this answer. I still fight with the borrow checker. In my actual program, there is one more layer of indirection between get and set: I get the name of the context and feed it into a function and I update <code>foo</code> based on the function output. None of the methods you mentioned seem working for me :( I think I simplify my program a little bit too much."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1539034656, "post_id": 52709635, "comment_id": 92347065, "body": "My point is that if your code uses raw pointers to introduce mutable aliasing, that is <i>your code&#39;s fault</i>. There is no bug in the compiler, there is a bug in the code fed into the compiler. This code would erroneously claim &quot;this code upholds the guarantees required of a valid Rust program, just trust me&quot;. The compiler does not <i>introduce</i> anything, it trusts the code as it is instructed."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1539035277, "post_id": 52709635, "comment_id": 92347271, "body": "@zack Well, updated your question with a better <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> !"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539036348, "post_id": 52709635, "comment_id": 92347587, "body": "@Shepmaster Are you happier with the new wording?"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1539036426, "post_id": 52709635, "comment_id": 92347614, "body": "@zack These methods should work, it&#39;s a matter of exact structure and will require modification. it&#39;s going to be hard to help without a playground with an example. From the sounds of it, you can probably get around it with <code>if my_fn(context.get_name()) { ... }</code>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539036471, "post_id": 52709635, "comment_id": 92347629, "body": "@Shepmaster I read a few times that raw pointers are allowed to alias, and that Rust does not have the same kind of strict aliasing rules that C++ compilers have.  Of course this may lead to data races, but my understanding has been that mutable pointer aliasing isn&#39;t by itself undefined behaviour.  I may be wrong, though."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539036665, "post_id": 52709635, "comment_id": 92347689, "body": "Here&#39;s a quote from the <a href=\"https://doc.rust-lang.org/book/first-edition/raw-pointers.html\" rel=\"nofollow noreferrer\">old version of the book</a>: &quot;For example, * pointers are allowed to alias, allowing them to be used to write shared-ownership types.&quot;  I found similar statements in blog posts by lang-team members and other places."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539036716, "post_id": 52709635, "comment_id": 92347701, "body": "@SvenMarnach So, mutable pointer aliasing isn&#39;t strictly disallowed, it&#39;s when you convert a mutable pointer to a reference when passing into something like an <code>fn(a: &amp;mut T, b: &amp;T)</code> where <code>a</code> and <code>b</code> are the same address space. When compiling the function, it assumes that the references follow normal Rust rules, which means no aliasing.  Basically, if you&#39;re dealing with functions that take pointers, or using the pointers within the same code it&#39;s allowed, but you can easily footgun the second you start converting back to references (which you need to for a lot of Rust)."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539036966, "post_id": 52709635, "comment_id": 92347770, "body": "@LinearZoetrope It&#39;s clear that you need to keep up Rust&#39;s rules for references, but you are allowed to have multiple <code>*mut</code> pointers to the same memory.  Wouldn&#39;t that also be &quot;mutable pointer aliasing&quot;?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539037082, "post_id": 52709635, "comment_id": 92347794, "body": "Well, I saw your update to your answer \u2013 I guess we are on the same page.  Thanks for replying!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1539038932, "post_id": 52709635, "comment_id": 92348225, "body": "@SvenMarnach yes, <i>pointers</i> are allowed to mutably alias each other, <i>references</i> are not. Notably, you convert a pointer to a reference whenever you try to write to it (e.g. <code>unsafe { *foo = 0 }</code> or when you explicitly convert (<code>let x: &amp;mut _ = &amp;mut *foo;</code>). This answer talks about &quot;pointer aliasing&quot; which isn&#39;t a concern of Rust&#39;s, then suggests that the compiler introduces bugs, which is just not valid. That&#39;s like saying that a C compiler &quot;introduces bugs&quot; when you write code that dereferences NULL."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539039921, "post_id": 52709635, "comment_id": 92348455, "body": "I&#39;m not sure how you want me to word this, @Shepmaster. It&#39;s incredibly subtle behavior that a proper understanding of just takes more explanation than is appropriate within the answer. It&#39;s not strictly correct, no, but my wording gets the gist across for someone new enough to the language that they need 101 tips on appeasing the borrow checker."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1539040475, "post_id": 52709635, "comment_id": 92348578, "body": "I&#39;ve made edits which I believe appropriately cover the problem with unsafe code."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1539063058, "post_id": 52709635, "comment_id": 92353351, "body": "@LinearZoetrope Thanks for the comment. I&#39;ll try to experiment with your suggestion later today. I&#39;m using the <code>#![feature(nll)]</code> suggested in the other answer. I have a playground setup but it seems working. However, I&#39;m curious whether I need to add <code>#![feature(nll)]</code> for every <code>.rc</code> may involve (my actual implementations are in the separate crate)? Also, does <code>#![feature(nll)]</code> work fine with FFI functions as well (i.e. rust definitions from bindgen)?"}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 9, "last_activity_date": 1539040399, "last_edit_date": 1539040399, "creation_date": 1539030377, "answer_id": 52709635, "question_id": 52709147, "link": "https://stackoverflow.com/questions/52709147/how-to-workaround-the-coexistence-of-a-mutable-and-immutable-borrow/52709635#52709635", "title": "How to workaround the coexistence of a mutable and immutable borrow?", "body": "<p>This is a very broad question. The borrow checker is perhaps one of the most helpful features of Rust, but also the most prickly to deal with. Improvements to ergonomics are being made regularly, but sometimes situations like this happen.</p>\n\n<p>There are several ways to handle this and I'll try and go over the pros and cons of each:</p>\n\n<h2>I. Convert to a form that only requires a limited borrow</h2>\n\n<p>As you learn Rust, you slowly learn when borrows expire and how quickly. In this case, for instance, you could convert to</p>\n\n<pre><code>if context.get_name() == \"foo\" {\n    context.set_foo(4);\n}\n</code></pre>\n\n<p>The borrow expires in the if statement. This <strong>usually</strong> is the way you want to go, and as features such as non-lexical lifetimes get better, this option gets more palatable. For instance, the way you've currently written it will work when NLLs are available due to this construction being properly detected as a \"limited borrow\"! Reformulation will sometimes fail for strange reasons (especially if a statement requires a conjunction of mutable and immutable calls), but should be your first choice.</p>\n\n<h2>II. Use scoping hacks with expressions-as-statements</h2>\n\n<pre><code>let name_is_foo = {\n    let name = context.get_name();\n    name == \"foo\"\n};\n\nif name_is_foo {\n    context.set_foo(4);\n}\n</code></pre>\n\n<p>Rust's ability to use arbitrarily scoped statements that return values is <strong>incredibly</strong> powerful. If everything else fails, you can <em>almost</em> always use blocks to scope off your borrows, and only return a non-borrow flag value that you then use for your mutable calls. It's usually clearer to do method <strong>I.</strong> when available, but this one is useful, clear, and idiomatic Rust.</p>\n\n<h2>III. Create a \"fused method\" on the type</h2>\n\n<pre><code>   impl Context {\n      fn set_when_eq(&amp;mut self, name: &amp;str, new_foo: i32) {\n          if self.name == name {\n              self.foo = new_foo;\n          }\n      }\n   }\n</code></pre>\n\n<p>There are, of course, endless variations of this. The most general being a function that takes an <code>fn(&amp;Self) -&gt; Option&lt;i32&gt;</code>, and sets based on the return value of that closure (<code>None</code> for \"don't set\", <code>Some(val)</code> to set that val).</p>\n\n<p>Sometimes it's best to allow the struct to modify itself without doing the logic \"outside\". This is especially true of trees, but can lead to method explosion in the worst case, and of course isn't possible if operating on a foreign type you don't have control of.</p>\n\n<h2>IV. Clone</h2>\n\n<pre><code>let name = context.get_name().clone();\nif name == \"foo\" {\n    context.set_foo(4);\n}\n</code></pre>\n\n<p>Sometimes you have to do a quick clone. Avoid this when possible, but sometimes it's worth it to just throw in a <code>clone()</code> somewhere instead of spending 20 minutes trying to figure out how the hell to make your borrows work. Depends on your deadline, how expensive the clone is, how often you call that code, and so on.</p>\n\n<p>For instance, arguably excessive cloning of <code>PathBuf</code>s in CLI applications isn't horribly uncommon.</p>\n\n<h2>V. Use unsafe (<em>NOT RECOMMENDED</em>)</h2>\n\n<pre><code>let name: *const str = context.get_name();\nunsafe{\n    if &amp;*name == \"foo\" {\n        context.set_foo(4);\n    }\n}\n</code></pre>\n\n<p>This should almost never be used, but may be necessary in extreme cases, or for performance in cases where you're essentially forced to clone (this can happen with graphs or some wonky data structures). Always, always try your hardest to avoid this, but keep it in your toolbox in case you absolutely have to. </p>\n\n<p>Keep in mind that the compiler expects that the unsafe code you write upholds all the guarantees required of safe Rust code. An <code>unsafe</code> block indicates that while the compiler cannot verify the code is safe, the programmer has. If the programmer <em>hasn't</em> correctly verified it, the compiler is likely to produce code containing undefined behavior, which can lead to memory unsafety, crashes, etc., many of the things that Rust strives to avoid.</p>\n"}, {"comments": [{"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 1, "creation_date": 1539030725, "post_id": 52709639, "comment_id": 92345546, "body": "I&#39;m not sure I&#39;d bring in feature gates for something this simple unless you&#39;re already working in nightly. Also, purely IMO, due to the <code>_ =&gt; (),</code> case this really is more of an <code>if</code> situation than a <code>match</code> one though that&#39;s a preference thing."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539031184, "post_id": 52709639, "comment_id": 92345742, "body": "@LinearZoetrope Well, that really opinion-based, nll require nightly but that not &quot;unsafe&quot;. I just said that it was the simplest solution (and also to said that the code itself is ok just that compiler without nll don&#39;t allow it). And yes if... only one test is require a if is more fast to write than a match. There is always a lot of solution to one problem. I didn&#39;t claim to have list all of them, primary because I don&#39;t know all of them ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1539040625, "post_id": 52709639, "comment_id": 92348605, "body": "@LinearZoetrope no feature gates needed, just use Beta and edition 2018. NLL is on by default there and will be the default come December and edition 2018."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 4, "last_activity_date": 1539031395, "last_edit_date": 1539031395, "creation_date": 1539030400, "answer_id": 52709639, "question_id": 52709147, "link": "https://stackoverflow.com/questions/52709147/how-to-workaround-the-coexistence-of-a-mutable-and-immutable-borrow/52709639#52709639", "title": "How to workaround the coexistence of a mutable and immutable borrow?", "body": "<p>There is problably some answer that will already answer you, but there is a lot of case that trigger this error message so I will answer your specific case.</p>\n\n<p>The easier solution is to use <a href=\"https://stackoverflow.com/questions/50251487/what-are-non-lexical-lifetimes\"><code>#![feature(nll)]</code></a>, this will compile without problem.</p>\n\n<p>But you could fix the problem without nll, by using a simple match like this:</p>\n\n<pre><code>fn main() {\n    let mut context = Context {\n        name: \"MisterMV\".to_owned(),\n        foo: 42,\n    };\n    match context.get_name() {\n        \"foo\" =&gt; context.set_foo(4),\n        // you could add more case as you like\n        _ =&gt; (),\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 912, "user_id": 6792709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d5e86a4cf40fa66135705468f335a88e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarak", "link": "https://stackoverflow.com/users/6792709/jarak"}, "edited": false, "score": 0, "creation_date": 1539030514, "post_id": 52709656, "comment_id": 92345472, "body": "@LinearZoetrope beat me to it by a minute.  Looks like a much better answer, however."}], "tags": [], "owner": {"reputation": 912, "user_id": 6792709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d5e86a4cf40fa66135705468f335a88e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarak", "link": "https://stackoverflow.com/users/6792709/jarak"}, "is_accepted": false, "score": 2, "last_activity_date": 1539040570, "last_edit_date": 1539040570, "creation_date": 1539030472, "answer_id": 52709656, "question_id": 52709147, "link": "https://stackoverflow.com/questions/52709147/how-to-workaround-the-coexistence-of-a-mutable-and-immutable-borrow/52709656#52709656", "title": "How to workaround the coexistence of a mutable and immutable borrow?", "body": "<p>Prior to seeing @Stargateur's comment, I came up with the below which compiles fine, but does clone the name string:</p>\n\n<pre><code>struct Context {\n    name: String,\n    foo: i32,\n}\n\nimpl Context {\n    fn get_name(&amp;self) -&gt; String {\n        self.name.clone()\n    }\n    fn set_foo(&amp;mut self, num: i32) {\n        self.foo = num\n    }\n}\n\nfn main() {\n    let mut context = Context {\n        name: String::from(\"bill\"),\n        foo: 5,\n    };\n\n    let name = context.get_name();\n    if name == \"foo\" {\n        context.set_foo(4);\n    }\n    println!(\"Hello World!\");\n}\n</code></pre>\n\n<p>Working with @Stargateur's sample, it turns out there is a surprisingly simple solution to this particular problem - combine with the <code>get_name</code> with the <code>if</code>, e.g.</p>\n\n<pre><code>struct Context {\n    name: String,\n    foo: i32,\n}\n\nimpl Context {\n    fn get_name(&amp;self) -&gt; &amp;String {\n        &amp;self.name\n    }\n    fn set_foo(&amp;mut self, num: i32) {\n        self.foo = num\n    }\n}\n\nfn main() {\n    let mut context = Context {\n        name: \"MisterMV\".to_owned(),\n        foo: 42,\n    };\n    if context.get_name() == \"foo\" {\n        context.set_foo(4);\n    }\n}\n</code></pre>\n\n<p>I believe that this is because the variable for the <code>get_name</code> part has its lifetime clearly delineated, whereas when the <code>name</code> variable was separate, it essentially could have its value suddenly changed without an explicit mutation.</p>\n"}], "owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 449, "favorite_count": 0, "accepted_answer_id": 52709635, "answer_count": 3, "score": 4, "last_activity_date": 1539040570, "creation_date": 1539028105, "last_edit_date": 1539033523, "question_id": 52709147, "link": "https://stackoverflow.com/questions/52709147/how-to-workaround-the-coexistence-of-a-mutable-and-immutable-borrow", "title": "How to workaround the coexistence of a mutable and immutable borrow?", "body": "<p>I have a <code>Context</code> struct:</p>\n\n<pre><code>struct Context {\n    name: String,\n    foo: i32,\n}\n\nimpl Context {\n    fn get_name(&amp;self) -&gt; &amp;str {\n        &amp;self.name\n    }\n    fn set_foo(&amp;mut self, num: i32) {\n        self.foo = num\n    }\n}\n\nfn main() {\n    let mut context = Context {\n        name: \"MisterMV\".to_owned(),\n        foo: 42,\n    };\n    let name = context.get_name();\n    if name == \"foo\" {\n        context.set_foo(4);\n    }\n}\n</code></pre>\n\n<p>In a function, I need to first get the <code>name</code> of the <code>context</code> and update <code>foo</code> according to the <code>name</code> I have:</p>\n\n<pre><code>let name = context.get_name();\nif (name == \"foo\") {\n    context.set_foo(4);\n}\n</code></pre>\n\n<p>The code won't compile because <code>get_name()</code> takes <code>&amp;self</code> and <code>set_foo()</code> takes <code>&amp;mut self</code>. In other words, I have an immutable borrow for <code>get_name()</code> but I also have mutable borrow for <code>set_foo()</code> within the same scope, which is against <a href=\"https://doc.rust-lang.org/book/2018-edition/ch04-02-references-and-borrowing.html\" rel=\"nofollow noreferrer\">the rules of references</a>. </p>\n\n<blockquote>\n  <p>At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.</p>\n</blockquote>\n\n<p>The error looks like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `context` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:22:9\n   |\n20 |     let name = context.get_name();\n   |                ------- immutable borrow occurs here\n21 |     if name == \"foo\" {\n22 |         context.set_foo(4);\n   |         ^^^^^^^ mutable borrow occurs here\n23 |     }\n24 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>I'm wondering how can I workaround this situation?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1539016394, "post_id": 52706314, "comment_id": 92339426, "body": "Are the macros <b>required</b> to reproduce this problem? Is <code>Axiom</code> required to reproduce the problem? Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>, emphasis on <b>minimal</b>."}], "answers": [{"comments": [{"owner": {"reputation": 2559, "user_id": 1761795, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/5c38eefbb62d65c1d79682ad03cdfeed?s=128&d=identicon&r=PG", "display_name": "Phil Lord", "link": "https://stackoverflow.com/users/1761795/phil-lord"}, "edited": false, "score": 0, "creation_date": 1539017813, "post_id": 52706593, "comment_id": 92340050, "body": "As a second question, how did you work this out? I struggled hard with this, but couldn&#39;t find a way to get the compiler to tell me why the tuple wasn&#39;t a subclass of the thing I expected."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 2559, "user_id": 1761795, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/5c38eefbb62d65c1d79682ad03cdfeed?s=128&d=identicon&r=PG", "display_name": "Phil Lord", "link": "https://stackoverflow.com/users/1761795/phil-lord"}, "edited": false, "score": 0, "creation_date": 1539018056, "post_id": 52706593, "comment_id": 92340162, "body": "@PhilLord Just observation with a sufficiently experienced eye. Note that the compiler was already telling you the missing constraint: <code>(&amp;std::collections::BTreeSet&lt;Annotation&gt;,) : Render</code> was unsatisfied, which would either mean that the trait was not implemented for <code>(&amp;T,)</code> or that <code>BTreeSet</code> was not implementing it."}, {"owner": {"reputation": 2559, "user_id": 1761795, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/5c38eefbb62d65c1d79682ad03cdfeed?s=128&d=identicon&r=PG", "display_name": "Phil Lord", "link": "https://stackoverflow.com/users/1761795/phil-lord"}, "edited": false, "score": 0, "creation_date": 1539021828, "post_id": 52706593, "comment_id": 92341844, "body": "Yeah, guessed it was experience. Problem with the compiler is I knew what it was missing, but I couldn&#39;t see why, given there was a <code>impl</code> for <code>&amp;BTreeSet</code>. Anyway, thanks for the help. A bit more learned about rust."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 3, "last_activity_date": 1539017131, "last_edit_date": 1539017131, "creation_date": 1539016437, "answer_id": 52706593, "question_id": 52706314, "link": "https://stackoverflow.com/questions/52706314/type-matching-a-btreeset-inside-a-tuple-in-rust/52706593#52706593", "title": "Type matching a BTreeSet inside a tuple in Rust", "body": "<p>There is a gap in the implementation chain:</p>\n\n<pre><code>impl&lt;'a, T: Render&gt; Render for &amp;'a BTreeSet&lt;T&gt; {\n    // ....\n}\n\nimpl&lt;'a, A: Render&gt; Render for (&amp;'a A,) {\n    // ...\n}\n</code></pre>\n\n<p>The first <code>impl</code> provides <code>Render</code> for a <em>reference</em> to a <code>BTreeSet</code>, whereas the second one provides an implementation for a tuple of a <em>reference to something that implements</em> <code>Render</code>. Since <code>BTreeSet</code> itself does not implement <code>Render</code> (only a reference to it does!), the compiler will refuse to work.</p>\n\n<p>This is a situation where it's more ergonomic to abstract away from references, since <code>Render</code> appears to be fitting for any reference to another <code>Render</code>able value. Implement this trait for all references <code>&amp;T</code> where <code>T: Render</code>:</p>\n\n<pre><code>impl&lt;'a, T&gt; Render for &amp;'a T\nwhere\n    T: Render,\n{\n    fn render(&amp;self) {\n        (**self).render();\n    }\n}\n</code></pre>\n\n<p>The remaining implementations become slightly simpler as a consequence of this:</p>\n\n<pre><code>impl&lt;T&gt; Render for BTreeSet&lt;T&gt;\nwhere\n    T: Render,\n{\n    fn render(&amp;self) {}\n}\n\nimpl&lt;A&gt; Render for (A,)\nwhere\n    A: Render,\n{\n    fn render(&amp;self) {\n        (&amp;self.0).render();\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f35dc5387d4816def1e8826b41e0a7e7&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Working Playground</a></p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28799372/1233251\">When should I not implement a trait for references to implementors of that trait?</a></li>\n</ul>\n"}], "owner": {"reputation": 2559, "user_id": 1761795, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/5c38eefbb62d65c1d79682ad03cdfeed?s=128&d=identicon&r=PG", "display_name": "Phil Lord", "link": "https://stackoverflow.com/users/1761795/phil-lord"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 52706593, "answer_count": 1, "score": 1, "last_activity_date": 1539017131, "creation_date": 1539015216, "last_edit_date": 1539016303, "question_id": 52706314, "link": "https://stackoverflow.com/questions/52706314/type-matching-a-btreeset-inside-a-tuple-in-rust", "title": "Type matching a BTreeSet inside a tuple in Rust", "body": "<p>I have the code as follows (part of a larger library). The compiler is telling me that a tuple does not implement a trait, but I have both an implementation for a tuple and for the one element of that tuple. And it works with another type of tuple.</p>\n\n<p>Why does the tuple <code>(BTreeSet&lt;Annotation&gt;)</code> not get matched here?</p>\n\n<pre><code>use std::collections::BTreeSet;\n\npub struct Axiom {}\npub struct Annotation {}\n\npub struct AnnotatedAxiom {\n    pub axiom: Axiom,\n    pub annotation: BTreeSet&lt;Annotation&gt;,\n}\n\ntrait Render {\n    /// Render a entity to Write\n    fn render(&amp;self);\n}\n\nimpl&lt;'a, T: Render&gt; Render for &amp;'a BTreeSet&lt;T&gt; {\n    fn render(&amp;self) {}\n}\n\nimpl&lt;'a, A: Render&gt; Render for (&amp;'a A,) {\n    fn render(&amp;self) {\n        (&amp;self.0).render();\n    }\n}\n\n/// The types in `Render` are too long to type.\nmacro_rules! render {\n    ($type:ty, $self:ident,\n     $body:tt) =&gt; {\n\n        impl Render for $type {\n            fn render(&amp; $self)\n                $body\n        }\n    }\n}\n\nrender!{\n    Annotation, self,\n    {\n    }\n}\nrender!{\n    Axiom, self,\n    {\n    }\n}\n\nrender!{\n    AnnotatedAxiom, self,\n    {\n        // Axiom implements Render\n        (&amp;self.axiom).render();\n\n        // Annotation implements Render\n        (&amp;self.annotation).render();\n\n        // A 1-element tuple of Axiom implements Render\n        (&amp;self.axiom,).render();\n\n        // A 1-element tuple of Annotation does!?\n        (&amp;self.annotation,).render();\n\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=17fe19749ec41a799984df21be33ecf7&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `render` found for type `(&amp;std::collections::BTreeSet&lt;Annotation&gt;,)` in the current scope\n  --&gt; src/main.rs:62:29\n   |\n62 |         (&amp;self.annotation,).render();\n   |                             ^^^^^^\n   |\n   = note: the method `render` exists but the following trait bounds were not satisfied:\n           `(&amp;std::collections::BTreeSet&lt;Annotation&gt;,) : Render`\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `render`, perhaps you need to implement it:\n           candidate #1: `Render`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1538983018, "post_id": 52696907, "comment_id": 92320742, "body": "Please specify your actual question. (Do you want to know whether it is possible in general, or do you want to have docs why this does not work?)"}], "answers": [{"comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1538986114, "post_id": 52697820, "comment_id": 92322246, "body": "Note: in Rust 2018, you need to write <code>&amp;dyn Fn() -&gt; ()</code> or <code>&amp;impl Fn() -&gt; ()</code>."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 3, "creation_date": 1538986470, "post_id": 52697820, "comment_id": 92322432, "body": "No, you don&#39;t <b>need</b> to do that, but you can. <a href=\"https://play.rust-lang.org/?gist=ad8cae9dfda6281e579f286300e597ed&amp;version=beta&amp;mode=debug&amp;edition=2018\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> Do you have a link, that says anything else?"}, {"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1538986573, "post_id": 52697820, "comment_id": 92322476, "body": "@hellow my understanding is that the distinction should now be explicit and the implicit notation is or will be deprecated"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1538987548, "post_id": 52697820, "comment_id": 92323021, "body": "Should, then. I was under the impression that this kind of syntax-breaking change is exactly why the edition was made, but perhaps this was seen as too abrupt."}, {"owner": {"reputation": 797, "user_id": 4803321, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/26ViJ.png?s=128&g=1", "display_name": "\u5468\u6c49\u6210", "link": "https://stackoverflow.com/users/4803321/%e5%91%a8%e6%b1%89%e6%88%90"}, "edited": false, "score": 0, "creation_date": 1538988442, "post_id": 52697820, "comment_id": 92323532, "body": "@DenysS&#233;guret the book says <b>you can always pass a function pointer as an argument for a function that expects a closure</b>"}, {"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "reply_to_user": {"reputation": 797, "user_id": 4803321, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/26ViJ.png?s=128&g=1", "display_name": "\u5468\u6c49\u6210", "link": "https://stackoverflow.com/users/4803321/%e5%91%a8%e6%b1%89%e6%88%90"}, "edited": false, "score": 1, "creation_date": 1538988501, "post_id": 52697820, "comment_id": 92323562, "body": "@\u5468\u6c49\u6210 yes, but you were trying the reverse, which isn&#39;t possible."}, {"owner": {"reputation": 797, "user_id": 4803321, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/26ViJ.png?s=128&g=1", "display_name": "\u5468\u6c49\u6210", "link": "https://stackoverflow.com/users/4803321/%e5%91%a8%e6%b1%89%e6%88%90"}, "edited": false, "score": 0, "creation_date": 1538989693, "post_id": 52697820, "comment_id": 92324152, "body": "@DenysS&#233;guret yeah..that expression is fuzzy. It&#39;s better to say <b>you can always pass a function as an argument for a function that expects a closure</b>, or assuming that&#39;s right: <b>you can always pass a function pointer as an argument type for a function that expects a closure</b>"}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1539002169, "post_id": 52697820, "comment_id": 92331364, "body": "I tried <code>&amp;Fn ..</code>, <code>&amp;impl Fn ..</code> and <code>&amp;dyn Fn ..</code> All works. So what is the difference between them?"}, {"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "reply_to_user": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 1, "creation_date": 1539002580, "post_id": 52697820, "comment_id": 92331597, "body": "@Nawaz <code>&amp;Fn</code> is a shortcut for <code>&amp;dyn Fn</code> which is a dynamic dispatch (lighter in memory but slower)."}, {"owner": {"reputation": 325758, "user_id": 415784, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/2WX9Z.jpg?s=128&g=1", "display_name": "Nawaz", "link": "https://stackoverflow.com/users/415784/nawaz"}, "edited": false, "score": 0, "creation_date": 1539003970, "post_id": 52697820, "comment_id": 92332456, "body": "@DenysS&#233;guret: And <code>&amp;impl Fn</code> is static dispatch, I suppose? Can I use it without the <code>&amp;</code>? Would that work? If not, <b>why</b>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1539004350, "post_id": 52697820, "comment_id": 92332665, "body": "Taking a reference to the closure argument is pretty unusual. Normally this would be written as <code>fn wrap(c: impl Fn())</code>."}], "tags": [], "owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "is_accepted": true, "score": 19, "last_activity_date": 1539007497, "last_edit_date": 1539007497, "creation_date": 1538985574, "answer_id": 52697820, "question_id": 52696907, "link": "https://stackoverflow.com/questions/52696907/why-does-passing-a-closure-to-function-which-accepts-a-function-pointer-not-work/52697820#52697820", "title": "Why does passing a closure to function which accepts a function pointer not work?", "body": "<p>A closure isn't a function.</p>\n\n<p>You can pass a function to a function expecting a closure, but there's no reason for the reverse to be true.</p>\n\n<p>If you want to be able to pass both closures and functions as argument, just prepare it for closures.</p>\n\n<p>For example:</p>\n\n<pre><code>let a = String::from(\"abc\");\n\nlet x = || println!(\"x {}\", a);\n\nfn y() {\n    println!(\"y\")\n}\n\nfn wrap(c: impl Fn()) {\n    c()\n}\n\nwrap(x); // pass a closure\nwrap(y); // pass a function\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 3, "creation_date": 1539004799, "post_id": 52703106, "comment_id": 92332923, "body": "Can you really call it a closure if it doesn&#39;t close over anything ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 3, "creation_date": 1539005047, "post_id": 52703106, "comment_id": 92333054, "body": "@DenysS&#233;guret a tricky semantics question! I think you are right that technically it&#39;s not a closure, but it is using the closure <i>syntax</i>. Most programmers are OK with ignoring these specific details, letting the compiler figure out the best implementation."}, {"owner": {"reputation": 4465, "user_id": 4093378, "user_type": "registered", "accept_rate": 73, "profile_image": "https://lh3.googleusercontent.com/-fQvO8M4nxAQ/AAAAAAAAAAI/AAAAAAAAB-E/YauVVLfKB5U/photo.jpg?sz=128", "display_name": "Indiana Kernick", "link": "https://stackoverflow.com/users/4093378/indiana-kernick"}, "edited": false, "score": 0, "creation_date": 1606093485, "post_id": 52703106, "comment_id": 114847436, "body": "Just like C++! ;-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 20, "last_activity_date": 1539004238, "creation_date": 1539004238, "answer_id": 52703106, "question_id": 52696907, "link": "https://stackoverflow.com/questions/52696907/why-does-passing-a-closure-to-function-which-accepts-a-function-pointer-not-work/52703106#52703106", "title": "Why does passing a closure to function which accepts a function pointer not work?", "body": "<p>There are certain cases where you <strong>can</strong> pass a closure as a function pointer. This works:</p>\n\n<pre><code>fn main() {\n    let x = || {\n        let a = String::from(\"abc\");\n        println!(\"{}\", a);\n    };\n\n    fn wrap(c: fn()) {\n        c()\n    }\n\n    wrap(x);\n}\n</code></pre>\n\n<p>The important difference is that the closure is not allowed to capture <em>anything</em> from its environment. That means that we had to prevent the <code>String</code> from crossing the closure boundary.</p>\n\n<p>Any closure that doesn't capture environment can be trivially rewritten as a anonymous standalone function and then converted into a function pointer.</p>\n\n<p>Once you add an environment, it is no longer convertible and everything from <a href=\"https://stackoverflow.com/a/52697820/155423\">the existing answer</a> applies.</p>\n\n<p>Note that stating <code>-&gt; ()</code> is non-idiomatic as that's the default if nothing is specified.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1558-closure-to-fn-coercion.md\" rel=\"noreferrer\">RFC 1558 - Closure to <code>fn</code> Coercion</a></li>\n</ul>\n"}], "owner": {"reputation": 797, "user_id": 4803321, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/26ViJ.png?s=128&g=1", "display_name": "\u5468\u6c49\u6210", "link": "https://stackoverflow.com/users/4803321/%e5%91%a8%e6%b1%89%e6%88%90"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8792, "favorite_count": 2, "accepted_answer_id": 52697820, "answer_count": 2, "score": 28, "last_activity_date": 1539007497, "creation_date": 1538981786, "last_edit_date": 1539003755, "question_id": 52696907, "link": "https://stackoverflow.com/questions/52696907/why-does-passing-a-closure-to-function-which-accepts-a-function-pointer-not-work", "title": "Why does passing a closure to function which accepts a function pointer not work?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-05-advanced-functions-and-closures.html\" rel=\"noreferrer\">second edition of <em>The Rust Programming Language</em></a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Function pointers implement all three of the closure traits (<code>Fn</code>, <code>FnMut</code>, and <code>FnOnce</code>), <strong>so you can always pass a function pointer as an argument for a function that expects a closure</strong>. It\u2019s best to write functions using a generic type and one of the closure traits so your functions can accept either functions or closures. </p>\n</blockquote>\n\n<p>Passing a closure to a function which accepts a function pointer as an argument doesn't compile:</p>\n\n<pre><code>fn main() {\n    let a = String::from(\"abc\");\n\n    let x = || println!(\"{}\", a);\n\n    fn wrap(c: fn() -&gt; ()) -&gt; () {\n        c()\n    }\n\n    wrap(x);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:10\n   |\n10 |     wrap(x);\n   |          ^ expected fn pointer, found closure\n   |\n   = note: expected type `fn()`\n              found type `[closure@src/main.rs:4:13: 4:33 a:_]`\n</code></pre>\n\n<p>Why does this not work?</p>\n"}, {"tags": ["winapi", "rust", "widestring"], "comments": [{"owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "reply_to_user": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "edited": false, "score": 0, "creation_date": 1538983874, "post_id": 52693157, "comment_id": 92321142, "body": "@IInspectable I don&#39;t get it really. How can this question be considered the same as &quot;Calling the GetUserName WinAPI function with a mutable string doesn&#39;t populate the string&quot;?  The other title has nothing to do with what asked here. Only half of the answer code is similar. I raised both the question and made an answer explicitly to make it easy to find and easy to use."}, {"owner": {"reputation": 35031, "user_id": 1889329, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/57bec3f0b9c5879cdd9d9fa2e8629318?s=128&d=identicon&r=PG&f=1", "display_name": "IInspectable", "link": "https://stackoverflow.com/users/1889329/iinspectable"}, "edited": false, "score": 0, "creation_date": 1538985723, "post_id": 52693157, "comment_id": 92322065, "body": "There is no substantial difference between this question and the duplicate. Both try to access Windows APIs with equivalent interfaces, comprised of a pointer to buffer/size of buffer pair. If you wanted to provide a canonical Q&amp;A, you should have asked the generic question: How do you call a C API that returns a character string into a caller-provided buffer? If you insist, that this is not a duplicate, please explain the substantial difference."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1538988142, "post_id": 52693157, "comment_id": 92323366, "body": "also note that duplicate mean there is answer is in the other question that answer this question, duplicate doesn&#39;t mean your question is the exact same than the other. &quot;This question already has an answer here&quot; not &quot;This question has already been asked here&quot;"}, {"owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "edited": false, "score": 0, "creation_date": 1539001742, "post_id": 52693157, "comment_id": 92331093, "body": "Well OK, as you say. But I had serious trouble googling out this question, spent more than 2 hours opening multiple tabs and SO questions, experimenting with code, traversing stdlib code etc. The &quot;calling GetUserName WinAPI .... doesn&#39;t populate a string&quot; just doesn&#39;t speak, to my tastes. Maybe it&#39;s a problem of my understanding."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1539002958, "post_id": 52693157, "comment_id": 92331838, "body": "@VasyaNovikov that&#39;s why SO has duplicates at all. This question will now show up in searches for the terms that you used, and it will redirect people to the existing answer. This avoids fragmentation of answers while still increasing searchability."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1539003624, "post_id": 52693157, "comment_id": 92332254, "body": "@VasyaNovikov: It&#39;s also why, even though the question is closed, you can still receive upvotes for it. Such a redirection sign is welcome and helpful, thank you for your efforts in setting up."}, {"owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "edited": false, "score": 0, "creation_date": 1539015222, "post_id": 52693157, "comment_id": 92338948, "body": "I guess from this point of view, it could make sense. IDK whether the restriction of &quot;no new answers&quot; could have any downsides -- but maybe no. Anyway, at least one possible answer should surely be googleable now, so main point achieved anyway.)"}], "answers": [{"tags": [], "owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "is_accepted": false, "score": 0, "last_activity_date": 1538949960, "last_edit_date": 1538949960, "creation_date": 1538948397, "answer_id": 52693158, "question_id": 52693157, "link": "https://stackoverflow.com/questions/52693157/how-to-read-a-wide-string-into-a-buffer/52693158#52693158", "title": "How to read a &quot;wide&quot; string into a buffer?", "body": "<p>Example:</p>\n\n<pre><code>#[cfg(target_os = \"windows\")]\nfn get_window_name(max_size: i32) -&gt; String {\n    let mut vec = Vec::with_capacity(max_size as usize);\n    unsafe {\n        let hwnd = user32::GetForegroundWindow();\n        let err_code = user32::GetWindowTextW(hwnd, vec.as_mut_ptr(), max_size);\n        assert!(err_code != 0);\n        assert!(vec.capacity() &gt;= max_size as usize);\n        vec.set_len(max_size as usize);\n    };\n    String::from_utf16(&amp;vec).unwrap()\n}\n</code></pre>\n\n<p>Solution taken from <a href=\"https://stackoverflow.com/a/44710057/1091436\">Calling the GetUserName WinAPI function with a mutable string doesn't populate the string</a></p>\n"}], "owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 138, "favorite_count": 0, "closed_date": 1538953390, "answer_count": 1, "score": 1, "last_activity_date": 1538983744, "creation_date": 1538948397, "last_edit_date": 1538983744, "question_id": 52693157, "link": "https://stackoverflow.com/questions/52693157/how-to-read-a-wide-string-into-a-buffer", "closed_reason": "Duplicate", "title": "How to read a &quot;wide&quot; string into a buffer?", "body": "<p>The Windows API has functions like <a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-getwindowtextw\" rel=\"nofollow noreferrer\"><code>GetWindowTextW</code></a> that read a string into a buffer you provide. How do I provide such a buffer and then read a string from it in Rust?</p>\n\n<p>P.S.\nIn contrast to this question <a href=\"https://stackoverflow.com/questions/44709780/calling-the-getusername-winapi-function-with-a-mutable-string-doesnt-populate-t\">Calling the GetUserName WinAPI function with a mutable string doesn&#39;t populate the string</a>  this question focuses on string reading on Windows in general, and not a particular problem. Also, this question will hopefully be easily googled by keywords, answering what was asked for.</p>\n"}, {"tags": ["debugging", "rust", "gdb", "lldb", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1538920142, "last_edit_date": 1538920142, "creation_date": 1538919785, "answer_id": 52689084, "question_id": 52685869, "link": "https://stackoverflow.com/questions/52685869/is-there-a-way-to-directly-run-the-program-built-by-cargo-in-gdb-or-lldb/52689084#52689084", "title": "Is there a way to directly run the program built by Cargo in gdb or lldb?", "body": "<p>No, there's nothing like this currently built into Cargo.</p>\n\n<p>There's a few issues (<a href=\"https://github.com/rust-lang/cargo/issues/3670\" rel=\"noreferrer\">1</a>, <a href=\"https://github.com/rust-lang/cargo/issues/1924\" rel=\"noreferrer\">2</a>) to better support similar issues.</p>\n\n<p>The best thing you could do at the moment would be to write a <a href=\"https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands\" rel=\"noreferrer\">Cargo subcommand</a> that does exactly what you need.</p>\n\n<h3>A workaround</h3>\n\n<p>Without creating a subcommand, you can glue together a few features to get something close. </p>\n\n<p>Start by configuring <a href=\"https://stackoverflow.com/q/44947640/155423\">a custom runner</a> for your architecture.</p>\n\n<p><strong>.cargo/config</strong></p>\n\n<pre><code>[target.x86_64-apple-darwin]\nrunner = [\"/tmp/gg/debugger.sh\"]\n</code></pre>\n\n<p>Then write a little script to be the test runner. If an environment variable is set, it will start the debugger, otherwise it will just run the program:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>#!/bin/bash\n\nif [[ -z $DEBUG ]]; then\n    exec $*\nelse\n    exec lldb $*\nfi\n</code></pre>\n\n<p>Then you just need to set the variable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo test\n    Finished dev [unoptimized + debuginfo] target(s) in 0.04s\n     Running target/debug/deps/gg-e5d6c92730ca3c30\n\nrunning 0 tests\n\n$ DEBUG=1 cargo test\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running target/debug/deps/gg-e5d6c92730ca3c30\n(lldb) target create \"/private/tmp/gg/target/debug/deps/gg-e5d6c92730ca3c30\"\nCurrent executable set to '/private/tmp/gg/target/debug/deps/gg-e5d6c92730ca3c30' (x86_64).\n(lldb)\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44947640/155423\">How can I run cargo tests on another machine without the Rust compiler?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50707118/155423\">How to debug Rust unit tests on Windows?</a></li>\n</ul>\n"}], "owner": {"reputation": 8871, "user_id": 1132871, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/IO6V2.jpg?s=128&g=1", "display_name": "Alex", "link": "https://stackoverflow.com/users/1132871/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 545, "favorite_count": 2, "accepted_answer_id": 52689084, "answer_count": 1, "score": 13, "last_activity_date": 1541629490, "creation_date": 1538891921, "last_edit_date": 1541629490, "question_id": 52685869, "link": "https://stackoverflow.com/questions/52685869/is-there-a-way-to-directly-run-the-program-built-by-cargo-in-gdb-or-lldb", "title": "Is there a way to directly run the program built by Cargo in gdb or lldb?", "body": "<p>Is there a way to run the program built by Cargo immediately in <code>gdb</code>? <code>cargo</code> has lots of functions and can run the program, so it seems plausible.</p>\n\n<p>The expected command would be something like <code>cargo debug</code>. </p>\n"}, {"tags": ["generics", "rust", "polymorphism", "implicit-conversion"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1538898503, "post_id": 52685150, "comment_id": 92300217, "body": "The error  says that <code>FooImpl</code> doesn&#39;t implement <code>Bar</code> (which is required for your blanket impl of <code>IntoBaz</code>). Didn&#39;t you intend to do: <code>do_thing(&amp;FooWrapper(FooImpl));</code> ?"}, {"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1538910591, "post_id": 52685150, "comment_id": 92302895, "body": "No, because the goal is having the auto-coercion do that - I don&#39;t understand why, in this case, it doesn&#39;t."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1538911659, "post_id": 52685150, "comment_id": 92303149, "body": "<code>from()</code> or <code>into()</code> don&#39;t just get automagically called. You would need to do something like: <code>do_thing(&amp;FooWrapper::from(FooImpl));</code>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1538916275, "post_id": 52685150, "comment_id": 92304206, "body": "The only reasonable way of getting a user-defined automatic coercion is to implement <code>Deref</code> on some wrapper type, which will cause the wrapper to automatically decay to the wrapped type.  You can see the <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">full list of coercions in th Nomicon</a>."}, {"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "edited": false, "score": 0, "creation_date": 1538917281, "post_id": 52685150, "comment_id": 92304465, "body": "<code>from()</code> is sometimes called automatically by the language - and I&#39;m looking to avoid having to manually use the wrapper at the call site. It seems to me like there should be a way to use <code>From</code> or something similar to get around this coherence problem."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1538923699, "post_id": 52685150, "comment_id": 92306160, "body": "<i>&quot;<code>from()</code> is sometimes called automatically by the language&quot;</i> \u2014 It might appear to work with some libraries, but this is just those libraries requiring the argument to be <code>Into&lt;T&gt;</code> and calling <code>.into()</code> explicitly, just like the body of <code>do_thing</code> would have to."}], "answers": [{"comments": [{"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "edited": false, "score": 0, "creation_date": 1538946029, "post_id": 52689555, "comment_id": 92312534, "body": "I could do that for <code>FooImpl</code>, but it wouldn&#39;t solve the general problem I explain in the motivation, which needs the equivalent of two blanket-<code>impl</code>s. I&#39;m trying to avoid the overlap by having the type-checker pick the instance (basically by shortest coercion distance to the target type)."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 6, "last_activity_date": 1538923260, "creation_date": 1538923260, "answer_id": 52689555, "question_id": 52685150, "link": "https://stackoverflow.com/questions/52685150/why-isnt-from-automatically-used-for-coercing-to-trait-implementing-type/52689555#52689555", "title": "Why isn&#39;t `From` automatically used for coercing to trait implementing type", "body": "<p>Look at the error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `FooImpl: Bar` is not satisfied\n  --&gt; src/main.rs:48:5\n   |\n48 |     do_thing(&amp;FooImpl);\n   |     ^^^^^^^^ the trait `Bar` is not implemented for `FooImpl`\n   |\n   = note: required because of the requirements on the impl of `IntoBaz` for `FooImpl`\nnote: required by `do_thing`\n  --&gt; src/main.rs:45:1\n   |\n45 | fn do_thing&lt;B: IntoBaz&gt;(b: &amp;B) {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>It's saying that <code>FooImpl</code> doesn't have an implementation of <code>Bar</code>, which is a requirement of your blanket <code>IntoBaz for B</code> implementation.</p>\n\n<p>The <code>FooWrapper</code> implementation is not relevant because <code>FooImpl</code> is not the same as <code>FooWrapper</code>. The <code>From</code> and <code>Into</code> traits provide a way to convert between types, but it doesn't happen automatically.</p>\n\n<p>You might try adding an implementation for things that can be converted into <code>FooWrapper</code>, but this won't work because the implementations could overlap (and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"noreferrer\">specialization</a> is not stable yet).</p>\n\n<p>But you can define an <code>IntoBaz</code> implementation for just <code>FooImpl</code>:</p>\n\n<pre><code>impl IntoBaz for FooImpl {\n    fn into(self) -&gt; Baz {\n        IntoBaz::into(FooWrapper::from(self))\n    }\n}\n</code></pre>\n\n<p>Which will make your code compile:</p>\n\n<pre><code>fn main() {\n    do_thing(&amp;BarImpl);\n    do_thing(&amp;FooImpl);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "edited": false, "score": 0, "creation_date": 1539099403, "post_id": 52693194, "comment_id": 92374656, "body": "Thanks for an interesting suggestion. I tried a similar approach, but using an <code>B: Into&lt;I&gt;</code> followed by a custom <code>I: IntoBaz</code>, but the type-checker doesn&#39;t use the orphan rule in type inference, so it unfortunately didn&#39;t work.  Of course, this is just a lot of grief to try to avoid writing <code>&lt;method_name&gt;_io</code>, so I&#39;ll probably just end up doing that instead."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": false, "score": 3, "last_activity_date": 1538948763, "creation_date": 1538948763, "answer_id": 52693194, "question_id": 52685150, "link": "https://stackoverflow.com/questions/52685150/why-isnt-from-automatically-used-for-coercing-to-trait-implementing-type/52693194#52693194", "title": "Why isn&#39;t `From` automatically used for coercing to trait implementing type", "body": "<p><a href=\"https://stackoverflow.com/a/52689555/3650362\">PeterHall's answer</a> is completely correct about the question as asked. <code>From</code> and <code>Into</code> don't mean anything special on the type level.</p>\n\n<p>However, you might just have asked the question too narrowly. It looks like you want <code>do_thing(&amp;BarImpl)</code> and <code>do_thing(&amp;FooImpl)</code> to compile and do the \"right\" things. If that's all you need, there is a somewhat tricky alternative approach that could work: add a type parameter to <code>IntoBaz</code> and use different types to make the <code>impl</code>s non-overlapping.</p>\n\n<pre><code>trait IntoBaz&lt;T&gt; {\n    fn into_baz(self) -&gt; Baz;\n}\n\nstruct ByFoo;\nimpl&lt;F: Foo&gt; IntoBaz&lt;ByFoo&gt; for F {\n    fn into_baz(self) -&gt; Baz {\n        Baz\n    }\n}\n\nstruct ByBar;\nimpl&lt;B: Bar&gt; IntoBaz&lt;ByBar&gt; for B {\n    fn into_baz(self) -&gt; Baz {\n        Baz\n    }\n}\n</code></pre>\n\n<p><code>do_thing</code> can now be generic over <code>T</code>:</p>\n\n<pre><code>fn do_thing&lt;T, B: IntoBaz&lt;T&gt;&gt;(_: &amp;B) {}\n</code></pre>\n\n<p>When you call it, if there is only one <code>T</code> that works, the compiler will find it automatically.</p>\n\n<pre><code>fn main() {\n    do_thing(&amp;BarImpl);\n    do_thing(&amp;FooImpl);\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>I'm trying to add <code>io::Write</code> support to a library with <code>fmt::Write</code> support without introducing a breaking change.</p>\n</blockquote>\n\n<p>Unfortunately this suggestion is technically a breaking change. If there is some type that implements <em>both</em> <code>io::Write</code> and <code>fmt::Write</code>, then <code>do_thing(&amp;implements_both)</code> (which used to use <code>fmt::Write</code>) will now fail to compile due to ambiguity. But any place where the choice of trait is unambiguous will still compile as it did before, so the risk of breakage is much lower.</p>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/52281091/3650362\">Can I avoid eager ambiguity resolution for trait implementations with generics?</a></li>\n</ul>\n"}], "owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 101, "favorite_count": 0, "accepted_answer_id": 52689555, "answer_count": 2, "score": 4, "last_activity_date": 1545153360, "creation_date": 1538882076, "last_edit_date": 1545153360, "question_id": 52685150, "link": "https://stackoverflow.com/questions/52685150/why-isnt-from-automatically-used-for-coercing-to-trait-implementing-type", "title": "Why isn&#39;t `From` automatically used for coercing to trait implementing type", "body": "<p>I have two traits:</p>\n\n<pre><code>trait Foo {}\ntrait Bar {}\n\nstruct FooImpl;\nimpl Foo for FooImpl {}\n\nstruct BarImpl;\nimpl Bar for BarImpl {}\n</code></pre>\n\n<p>And a third type I want to convert into:</p>\n\n<pre><code>struct Baz;\n\ntrait IntoBaz {\n    fn into(self) -&gt; Baz;\n}\n</code></pre>\n\n<p>I can't define two <code>impl</code>s of <code>IntoBaz</code> for the two traits because of coherence, so I wrap one instead:</p>\n\n<pre><code>struct FooWrapper&lt;F&gt;(F)\nwhere\n    F: Sized;\n\nimpl&lt;F: Foo + Sized&gt; From&lt;F&gt; for FooWrapper&lt;F&gt; {\n    fn from(f: F) -&gt; FooWrapper&lt;F&gt; {\n        FooWrapper(f)\n    }\n}\n\nimpl&lt;F: Foo + Sized&gt; IntoBaz for FooWrapper&lt;F&gt; {\n    fn into(self) -&gt; Baz {\n        Baz\n    }\n}\n</code></pre>\n\n<p>And I don't wrap the other:</p>\n\n<pre><code>impl&lt;B: Bar&gt; IntoBaz for B {\n    fn into(self) -&gt; Baz {\n        Baz\n    }\n}\n\nfn do_thing&lt;B: IntoBaz&gt;(b: &amp;B) {}\n\nfn main() {\n    do_thing(&amp;BarImpl);\n}\n</code></pre>\n\n<p>So far so good, but why doesn't this line work?</p>\n\n<pre><code>fn main() {\n    do_thing(&amp;FooImpl);\n}\n</code></pre>\n\n<h1>Motivation</h1>\n\n<p>I'm trying to add <code>io::Write</code> support to a library with <code>fmt::Write</code> support without introducing a breaking change. </p>\n\n<p>The easiest way would be to define some internal <code>Write</code> trait which covers the shared behaviour, but the coherence problem means I can't just write <code>From&lt;io::Write&gt;</code> instances to the internal trait. </p>\n\n<p>I've tried wrapping <code>io::Write</code> instances, to make the coercion explicit so the compiler prioritises the shorter path and avoids the incoherence, but it won't auto-coerce using the <code>From</code> instance.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1538865743, "post_id": 52682628, "comment_id": 92295824, "body": "Even easier to use <code>bytes.iter().position(|&amp;b| b == b&#39; &#39;)</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1538868003, "post_id": 52682628, "comment_id": 92296179, "body": "@SvenMarnach good point! I just went to the chained form and stopped there ;-)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1583243480, "last_edit_date": 1583243480, "creation_date": 1538854118, "answer_id": 52682628, "question_id": 52682164, "link": "https://stackoverflow.com/questions/52682164/what-are-the-differences-between-using-and-to-compare-values-for-equality/52682628#52682628", "title": "What are the differences between using * and &amp; to compare values for equality?", "body": "<p>There is no difference, whatsoever, between these snippets. They generate the <strong>exact same assembly</strong>:</p>\n\n<pre><code>pub fn a(bytes: &amp;[u8]) -&gt; usize {\n    for (i, item) in bytes.iter().enumerate() {\n        if *item == b' ' {\n            return i;\n        }\n    }\n    0\n}\n\npub fn b(bytes: &amp;[u8]) -&gt; usize {\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n    0\n}\n\npub fn c(bytes: &amp;[u8]) -&gt; usize {\n    for (i, item) in bytes.iter().enumerate() {\n        if item == &amp;b' ' {\n            return i;\n        }\n    }\n    0\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>playground::a:\n    negq    %rsi\n    movq    $-1, %rax\n\n.LBB0_1:\n    leaq    (%rsi,%rax), %rcx\n    cmpq    $-1, %rcx\n    je  .LBB0_2\n    cmpb    $32, 1(%rdi,%rax)\n    leaq    1(%rax), %rax\n    jne .LBB0_1\n    retq\n\n.LBB0_2:\n    xorl    %eax, %eax\n    retq\n\n; The code is identical so the functions are aliased\n.set playground::b, playground::a\n.set playground::c, playground::a\n</code></pre>\n\n<p>For what it's worth, I'd write the function as</p>\n\n<pre><code>pub fn a(bytes: &amp;[u8]) -&gt; Option&lt;usize&gt; {\n    bytes.iter().position(|&amp;b| b == b' ')\n}\n</code></pre>\n\n<blockquote>\n  <p><code>iter()</code> [...] a reference to the element found in <code>bytes</code></p>\n</blockquote>\n\n<p>Yes, <code>iter</code> is typically a function that returns an iterator of references.</p>\n\n<blockquote>\n  <p>I need to either compare between</p>\n</blockquote>\n\n<p>Generally, you need to compare between two things <a href=\"https://stackoverflow.com/q/52656800/155423\">with the same amount of references</a> or sometimes one level of reference difference. How you achieve this is immaterial \u2014 referencing a value or dereferencing another, or dereferencing via <code>*</code> as an expression or via <code>&amp;</code> in a pattern. </p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/52656800/155423\">Can&#39;t compare `&amp;Thing` with `Thing`</a></li>\n</ul>\n"}], "owner": {"reputation": 225, "user_id": 1507041, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2c8f40af8dfa0fc2e02cf92976cecd09?s=128&d=identicon&r=PG", "display_name": "Matt", "link": "https://stackoverflow.com/users/1507041/matt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 172, "favorite_count": 1, "accepted_answer_id": 52682628, "answer_count": 1, "score": 5, "last_activity_date": 1583243480, "creation_date": 1538850748, "last_edit_date": 1538854534, "question_id": 52682164, "link": "https://stackoverflow.com/questions/52682164/what-are-the-differences-between-using-and-to-compare-values-for-equality", "title": "What are the differences between using * and &amp; to compare values for equality?", "body": "<p>I think I understand, at a very high level what the difference between <code>&amp;</code> and <code>*</code> in Rust is as it pertains to memory management.  </p>\n\n<p>What is the difference between the following code snippets.  Are there dangers to applying one approach versus the other?</p>\n\n<pre><code>for (i, item) in bytes.iter().enumerate() {\n    if *item == b' ' {\n        return i;\n    }\n}\n</code></pre>\n\n\n\n<pre><code>for (i, &amp;item) in bytes.iter().enumerate() {\n    if item == b' ' {\n        return i;\n    }\n}\n</code></pre>\n\n\n\n<pre><code>for (i, item) in bytes.iter().enumerate() {\n    if item == &amp;b' ' {\n        return i;\n    }\n}\n</code></pre>\n\n<p>As I understand it, when I return a value from <code>iter()</code> I am returning a reference to the element found in <code>bytes</code>. If I want to make a comparison on the item, I need to either compare between two references <code>&amp;u8</code> or I need to make <code>&amp;item</code> a reference itself so that when I call <code>item</code> it is of type <code>u8</code>, or I need to dereference <code>item</code> when I compare it so that <code>item</code> = <code>&amp;u8</code> -> <code>*item</code> = <code>u8</code>.</p>\n\n<ol>\n<li><p>When I run the code using <code>(i, &amp;item)</code>, when I call <code>item</code> later on, is this exactly the same thing as dereferencing in the second example, or is there a fundamental difference about how the compiler is interpreting the first code snippet and the second code snippet?</p></li>\n<li><p>Is there anything wrong with the third code snippet? I realize this is a bit of an opinion based question.  I realize that if I were to assign a value to another variable using <code>item</code> (or <code>*item</code>, or assigning the value as a reference) I would have different datatypes being returned later on.  Aside from managing your data types, is there anything else to keep in mind when considering if <code>item == &amp;b' '</code> is the right tool for the job?</p></li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1538846375, "post_id": 52681488, "comment_id": 92291320, "body": "Read the error message a little closer. Note the difference between <code>example.get(0)</code> and <code>example[0]</code>."}, {"owner": {"reputation": 53, "user_id": 6023419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c69baf7149b043831b9966f3e9ee4d80?s=128&d=identicon&r=PG&f=1", "display_name": "anghenfil", "link": "https://stackoverflow.com/users/6023419/anghenfil"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1538846755, "post_id": 52681488, "comment_id": 92291414, "body": "lol, tried example[0] before, didn&#39;t seem to work. Thank you."}], "answers": [{"comments": [{"owner": {"reputation": 53, "user_id": 6023419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c69baf7149b043831b9966f3e9ee4d80?s=128&d=identicon&r=PG&f=1", "display_name": "anghenfil", "link": "https://stackoverflow.com/users/6023419/anghenfil"}, "edited": false, "score": 0, "creation_date": 1538846914, "post_id": 52681568, "comment_id": 92291441, "body": "thank you, confused from Java, where you use get for ArrayLists/Vectors"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1538846924, "last_edit_date": 1538846924, "creation_date": 1538846648, "answer_id": 52681568, "question_id": 52681488, "link": "https://stackoverflow.com/questions/52681488/why-do-i-get-no-method-named-push-found-for-type-option-with-a-vector-of-vecto/52681568#52681568", "title": "Why do I get &quot;no method named push found for type Option&quot; with a vector of vectors?", "body": "<p>I highly recommend reading the documentation of types and methods before you use them. At the very least, look at the function's <em>signature</em>. For <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.get\" rel=\"nofollow noreferrer\"><code>slice::get</code></a>:</p>\n\n<pre><code>pub fn get&lt;I&gt;(&amp;self, index: I) -&gt; Option&lt;&amp;&lt;I as SliceIndex&lt;[T]&gt;&gt;::Output&gt;\nwhere\n    I: SliceIndex&lt;[T]&gt;,\n</code></pre>\n\n<p>While there's some generics happening here, the important part is that the return type is an <code>Option</code>. An <code>Option&lt;Vec&gt;</code> is not a <code>Vec</code>.</p>\n\n<p>Refer back to <a href=\"https://doc.rust-lang.org/book/second-edition/ch06-00-enums.html\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em>'s chapter on enums</a> for more information about enums, including <code>Option</code> and <code>Result</code>. If you wish to continue using the semantics of <code>get</code>, you will need to:</p>\n\n<ol>\n<li>Switch to <code>get_mut</code> as you want to mutate the inner vector.</li>\n<li>Make <code>example</code> mutable.</li>\n<li>Handle the case where the indexed value is missing. Here I use an <code>if let</code>.</li>\n</ol>\n\n\n\n<pre><code>let mut example: Vec&lt;_&gt; = std::iter::repeat_with(Vec::new).take(10).collect();\n\nif let Some(v) = example.get_mut(0) {\n    v.push(String::from(\"test\"));\n}\n</code></pre>\n\n<p>If you want to kill the program if the value is not present at the index, the shortest thing is to use the index syntax <code>[]</code>:</p>\n\n<pre><code>example[0].push(String::from(\"test\"));\n</code></pre>\n"}], "owner": {"reputation": 53, "user_id": 6023419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c69baf7149b043831b9966f3e9ee4d80?s=128&d=identicon&r=PG&f=1", "display_name": "anghenfil", "link": "https://stackoverflow.com/users/6023419/anghenfil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 761, "favorite_count": 0, "accepted_answer_id": 52681568, "answer_count": 1, "score": 0, "last_activity_date": 1538846924, "creation_date": 1538846122, "last_edit_date": 1538846431, "question_id": 52681488, "link": "https://stackoverflow.com/questions/52681488/why-do-i-get-no-method-named-push-found-for-type-option-with-a-vector-of-vecto", "title": "Why do I get &quot;no method named push found for type Option&quot; with a vector of vectors?", "body": "<p>I tried to use a <code>String</code> vector inside another vector:</p>\n\n<pre><code>let example: Vec&lt;Vec&lt;String&gt;&gt; = Vec::new();\n\nfor _number in 1..10 {\n    let mut temp: Vec&lt;String&gt; = Vec::new();\n    example.push(temp);\n}\n</code></pre>\n\n<p>I should have 10 empty <code>String</code> vectors inside my vector, but:</p>\n\n<pre><code>example.get(0).push(String::from(\"test\"));\n</code></pre>\n\n<p>fails with </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `push` found for type `std::option::Option&lt;&amp;std::vec::Vec&lt;std::string::String&gt;&gt;` in the current scope\n --&gt; src/main.rs:9:20\n  |\n9 |     example.get(0).push(String::from(\"test\"));\n  |                    ^^^^\n</code></pre>\n\n<p>Why does it fail? Is it even possible to have an vector \"inception\"?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1539068335, "post_id": 52679155, "comment_id": 92355521, "body": "Note: Unsized types are also notable for not being passable by value, which may limit one&#39;s options."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1539089464, "post_id": 52679155, "comment_id": 92368129, "body": "@MatthieuM. a good point! I assumed we were only taking into account places where both options were a viable possibility."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1538829333, "creation_date": 1538829333, "answer_id": 52679155, "question_id": 52678789, "link": "https://stackoverflow.com/questions/52678789/is-there-a-difference-between-borrowing-an-argument-as-mutable-and-taking-owners/52679155#52679155", "title": "Is there a difference between borrowing an argument as mutable and taking ownership of it and returning it?", "body": "<p>No, there's really not much difference in the capability of code using one or the other.</p>\n\n<p>Most of the benefits of one vs the other lie outside of pure capability:</p>\n\n<p>Taking a reference is often more ergonomic to the users of your code: they don't have to continue to remember to assign the return value of each function call.</p>\n\n<p>Taking a value vs. a reference is also often a better signal to your user about the intended usage of the code.</p>\n\n<p>There's a hierarchy of what types are interoperable. If you have ownership of a value, you can call a function that takes ownership, a mutable reference, or an immutable reference. If you have a mutable reference, you can call a function that takes a mutable reference or an immutable reference. If you have an immutable reference, you can only call a function that takes an immutable reference. Thus it's common to accept the most permissive type you can.</p>\n"}], "owner": {"reputation": 53, "user_id": 6023419, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c69baf7149b043831b9966f3e9ee4d80?s=128&d=identicon&r=PG&f=1", "display_name": "anghenfil", "link": "https://stackoverflow.com/users/6023419/anghenfil"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "accepted_answer_id": 52679155, "answer_count": 1, "score": 2, "last_activity_date": 1538829333, "creation_date": 1538826857, "last_edit_date": 1538828334, "question_id": 52678789, "link": "https://stackoverflow.com/questions/52678789/is-there-a-difference-between-borrowing-an-argument-as-mutable-and-taking-owners", "title": "Is there a difference between borrowing an argument as mutable and taking ownership of it and returning it?", "body": "<p>Consider:</p>\n\n<pre><code>fn main() {\n    let mut words: Vec&lt;String&gt; = Vec::new();\n    words.push(String::from(\"Example1\"));\n    do_something(&amp;mut words);\n\n    for word in words.iter() {\n        println!(\"{}\", word);\n    }\n}\n\nfn do_something(words: &amp;mut Vec&lt;String&gt;) {\n    //modify vector, maybe push something:\n    words.push(String::from(\"Example2\"));\n}\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>fn main() {\n    let mut words: Vec&lt;String&gt; = Vec::new();\n    words.push(String::from(\"Example1\"));\n    words = do_something(words);\n\n    for word in words.iter() {\n        println!(\"{}\", word);\n    }\n}\n\nfn do_something(mut words: Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    //modify vector, maybe push something:\n    words.push(String::from(\"Example2\"));\n    return words;\n}\n</code></pre>\n\n<p>Both solutions will print:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Example1\nExample2\n</code></pre>\n\n<p>Is there any difference? What should we use?</p>\n"}, {"tags": ["rust", "deadlock"], "comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 1, "creation_date": 1538822314, "post_id": 52677961, "comment_id": 92285222, "body": "For me your two variants don&#39;t make a difference. Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538828139, "post_id": 52677961, "comment_id": 92286595, "body": "Welcome to Stack Overflow! Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/52677961/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. For example, where does <code>ThreadPool</code> come from? Where is the code that constructs a <code>Node</code> and calls it? Why do the functions returning <code>bool</code> not return any values? Try to produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> or you can reproduce it in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1539001346, "post_id": 52677961, "comment_id": 92330839, "body": "This seems <i>really</i> racey. What if another thread mutates <code>self.protocol</code> in between <code>is_leader()</code> and <code>is_co_leader()</code>? I suspect you should only <code>lock()</code> once (and probably not release the lock until after the <code>if</code> statement)."}], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 2, "last_activity_date": 1539007203, "last_edit_date": 1539007203, "creation_date": 1538995506, "answer_id": 52700574, "question_id": 52677961, "link": "https://stackoverflow.com/questions/52677961/second-lock-on-same-variable-in-a-single-expression-blocks-indefinitely/52700574#52700574", "title": "Second lock on same variable in a single expression blocks indefinitely", "body": "<p>Here is an MCVE for your problem:</p>\n\n<pre><code>use std::sync::Mutex;\n\nfn main() {\n    let foo = Mutex::new(42i32);\n\n    let f1 = (*foo.lock().unwrap()).count_ones();\n    println!(\"f1: {}\", f1);\n    let f2 = (*foo.lock().unwrap()).count_zeros();\n    println!(\"f2: {}\", f2);\n\n    let tot = (*foo.lock().unwrap()).count_ones() + (*foo.lock().unwrap()).count_zeros();\n    println!(\"tot: {}\", tot);\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?gist=360524e23e47a345bf92700fcfd0511c&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>When running this code it will print <code>f1</code> and <code>f2</code>, then hang when trying to compute <code>tot</code>.</p>\n\n<p>The problem is that <code>Mutex::lock</code> returns a <code>MutexGuard</code> which releases the lock automatically when it goes out of scope. In the example above, the guards go out of scope at the end of the expressions in which they are used. So when I write:</p>\n\n<pre><code>let f1 = (*foo.lock().unwrap()).count_ones();\n</code></pre>\n\n<p>I acquire the lock, read the value, and release the lock. Therefore the lock is free when computing <code>f2</code>.</p>\n\n<p>However, when I write:</p>\n\n<pre><code>let tot = (*foo.lock().unwrap()).count_ones() + (*foo.lock().unwrap()).count_zeros();\n</code></pre>\n\n<p>I acquire the lock, read the value, try to acquire the lock again and only release both guards at the end of the line. This causes the code to deadlock when I try to acquire the lock for the second time without having released it first.</p>\n\n<p>Note as commented by trentcl that your two steps example is subject to race conditions if things are changed between the two times the mutex is locked. You should rather use something like this:</p>\n\n<pre><code>impl Node {\n    pub fn sign(&amp;mut self) {\n        let protocol_handler = Arc::clone(&amp;self.protocol);\n\n        self.thread_pool.execute(move || {\n            let handler = protocol_handler.lock().unwrap();\n\n            if !handler.is_leader &amp;&amp; !handler.is_co_leader {\n                // Either this will be executed\n            }\n\n            // or this ...\n        })\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 13, "user_id": 10465262, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/72673963fb88110f7b1bd84ed56fedf4?s=128&d=identicon&r=PG&f=1", "display_name": "raphael", "link": "https://stackoverflow.com/users/10465262/raphael"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 52700574, "answer_count": 1, "score": -2, "last_activity_date": 1539007203, "creation_date": 1538820697, "last_edit_date": 1538827959, "question_id": 52677961, "link": "https://stackoverflow.com/questions/52677961/second-lock-on-same-variable-in-a-single-expression-blocks-indefinitely", "title": "Second lock on same variable in a single expression blocks indefinitely", "body": "<p>I have a <code>Node</code> containing a <code>Mutex</code> on a shared <code>Protocol</code> which is in turn used among different threads within a thread pool:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\n\npub struct Node {\n    thread_pool: ThreadPool,\n    protocol: Arc&lt;Mutex&lt;Protocol&gt;&gt;,\n}\n\npub struct Protocol {}\nimpl Protocol {\n    pub fn is_leader(&amp;self) -&gt; bool {\n        // Do stuff...\n    }\n\n    pub fn is_co_leader(&amp;self) -&gt; bool {\n        // Do stuff...\n    }\n}\n</code></pre>\n\n<p>When I try to acquire a lock on the <code>protocol</code> of the <code>Node</code> within the same <code>if</code>-statement, the code within that statement is never executed.</p>\n\n<pre><code>impl Node {\n    pub fn sign(&amp;mut self) {\n        let protocol_handler = Arc::clone(&amp;self.protocol);\n\n        self.thread_pool.execute(move || {\n            if !protocol_handler.lock().unwrap().is_leader()\n                &amp;&amp; !protocol_handler.lock().unwrap().is_co_leader()\n            {\n                // This is never executed\n            }\n\n            // And this neither...\n        })\n    }\n}\n</code></pre>\n\n<p>However, if the values of the method invocations are assigned to two variables, everything works as intended:</p>\n\n<pre><code>impl Node {\n    pub fn sign(&amp;mut self) {\n        let protocol_handler = Arc::clone(&amp;self.protocol);\n\n        self.thread_pool.execute(move || {\n            let is_leader = protocol_handler.lock().unwrap().is_leader();\n            let is_co_leader = protocol_handler.lock().unwrap().is_co_leader();\n\n            if !is_leader &amp;&amp; !is_co_leader {\n                // Either this will be executed\n            }\n\n            // or this ...\n        })\n    }\n}\n</code></pre>\n\n<p>Is there any specific cause for Rust's behaviour to wait indefinitely in the first case?</p>\n"}, {"tags": ["iterator", "rust", "immutability"], "answers": [{"tags": [], "owner": {"reputation": 165, "user_id": 541254, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b910226ff1999f2ee7fde56670df8d74?s=128&d=identicon&r=PG", "display_name": "Andre Genereux", "link": "https://stackoverflow.com/users/541254/andre-genereux"}, "is_accepted": false, "score": 6, "last_activity_date": 1538792861, "creation_date": 1538792861, "answer_id": 52675203, "question_id": 52675202, "link": "https://stackoverflow.com/questions/52675202/why-does-it-look-like-i-can-consume-a-value-from-an-immutable-btreemap/52675203#52675203", "title": "Why does it look like I can consume a value from an immutable BTreeMap?", "body": "<p>After typing out the question, I figured out the answer. <code>IntoIterator</code> is implemented for <code>Vec</code>, but also for <code>&amp;Vec</code> and <code>&amp;mut Vec</code>. Rather than consuming the <code>Vec</code>, it consumes the reference and iterates over references to its elements. Very simple behavior, but I managed to do it in the most confusing way possible. </p>\n"}], "owner": {"reputation": 165, "user_id": 541254, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b910226ff1999f2ee7fde56670df8d74?s=128&d=identicon&r=PG", "display_name": "Andre Genereux", "link": "https://stackoverflow.com/users/541254/andre-genereux"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1538793140, "creation_date": 1538792861, "last_edit_date": 1538793140, "question_id": 52675202, "link": "https://stackoverflow.com/questions/52675202/why-does-it-look-like-i-can-consume-a-value-from-an-immutable-btreemap", "title": "Why does it look like I can consume a value from an immutable BTreeMap?", "body": "<p>I'm doing an Exercism exercise wherein I need to invert a map of scrabble scores; map of scores => letters becomes map of letters => scores. I came up with the following Rust code:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\npub fn transform(h: &amp;BTreeMap&lt;i32, Vec&lt;char&gt;&gt;) -&gt; BTreeMap&lt;char, i32&gt; {\n    h.iter()\n        .flat_map(|(&amp;score, letters)| {\n            letters\n                .into_iter()\n                .map(move |l| (l.to_ascii_lowercase(), score))\n        })\n        .collect()\n}\n</code></pre>\n\n<p>This works, but afterwards I realized it shouldn't. <code>h</code> is an immutable reference. <code>h.iter()</code> iterates over references to its entries, which should have the type <code>(&amp;i32, &amp;Vec&lt;char&gt;)</code>, but then I'm taking the <code>Vec</code> and consuming it with <code>into_iter()</code>. Rust does not complain, despite it being an immutable reference.</p>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["parallel-processing", "rust", "mpi", "cluster-computing", "hpc"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1539162792, "post_id": 52674966, "comment_id": 92397976, "body": "<i>which is understandable, since that&#39;s arguably not really the language&#39;s major focus, or at least wasn&#39;t back in the day</i> =&gt; I would rather say that distributed computing is more of a library concern than a language concern; if the language has good support for parallel execution (multi-threading), then distributed computing can be built on top. As for libraries for distributed computing: <a href=\"https://github.com/citybound/citybound\" rel=\"nofollow noreferrer\">CityBound</a> features a really neat actor system which distributes the computing cost across all players (and hosts) involved."}], "tags": [], "owner": {"reputation": 912, "user_id": 6792709, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d5e86a4cf40fa66135705468f335a88e?s=128&d=identicon&r=PG&f=1", "display_name": "Jarak", "link": "https://stackoverflow.com/users/6792709/jarak"}, "is_accepted": false, "score": 6, "last_activity_date": 1546825811, "last_edit_date": 1546825811, "creation_date": 1538789693, "answer_id": 52674966, "question_id": 52674215, "link": "https://stackoverflow.com/questions/52674215/how-is-distributed-memory-parallelism-handled-in-rust/52674966#52674966", "title": "How is distributed memory parallelism handled in Rust?", "body": "<p>To the best of my knowledge, there isn't really anything built into the language for distributed computing (which is understandable, since that's arguably not really the language's major focus, or at least wasn't back in the day).  I don't believe there's any particularly popular crate or another for distributed computing either.  <a href=\"https://crates.io/crates/actix\" rel=\"nofollow noreferrer\">Actix</a> is probably the only actor crate that has achieved any traction, and it supports HTTP, but I don't think it is targeted at HPC/supercomputer setups.  You also definitely would want to check out <a href=\"https://tokio.rs\" rel=\"nofollow noreferrer\">Tokio</a>, which seems to be pretty much <em>the</em> library for asynchronous programming in Rust, and is specifically targeted towards network IO operations.</p>\n\n<p>At the present point in time, if you're looking to replicate MPI, my guess would be that your best bet is to use FFI to a C-based MPI library.  It appears that there's been <a href=\"https://crates.io/search?q=mpi\" rel=\"nofollow noreferrer\">a handful of attempts</a> to create bindings to MPI for Rust, but I'm not sure that any of them are particularly complete.</p>\n"}], "owner": {"reputation": 5358, "user_id": 1932452, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/7dfca62a1e4eb69f39ce00152862c70e?s=128&d=identicon&r=PG", "display_name": "wyer33", "link": "https://stackoverflow.com/users/1932452/wyer33"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 510, "favorite_count": 0, "closed_date": 1538945955, "answer_count": 1, "score": 2, "last_activity_date": 1546825811, "creation_date": 1538780148, "last_edit_date": 1538780971, "question_id": 52674215, "link": "https://stackoverflow.com/questions/52674215/how-is-distributed-memory-parallelism-handled-in-rust", "closed_reason": "Needs more focus", "title": "How is distributed memory parallelism handled in Rust?", "body": "<p>How is distributed memory parallelism handled in Rust?  By that, I mean language constructs, libraries, or other features to handle computing on something like a cluster akin to what MPI provides C, but not necessarily using the same primitives or methodology.  In the Rustonomicon, I see a discussion of threads and concurrency, but I don't see any discussion on parallelizing across multiple computers.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1538776438, "post_id": 52673580, "comment_id": 92277113, "body": "Looks like you already got answers on the Forum."}], "answers": [{"comments": [{"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 2, "creation_date": 1538781509, "post_id": 52673798, "comment_id": 92278214, "body": "Your second example can be simplified: <code>let v: i32 = (1..5).collect::&lt;Vec&lt;i32&gt;&gt;().iter().map(|x| x.pow(2)).sum();</code>"}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": true, "score": 3, "last_activity_date": 1538785535, "last_edit_date": 1538785535, "creation_date": 1538777119, "answer_id": 52673798, "question_id": 52673580, "link": "https://stackoverflow.com/questions/52673580/how-can-a-range-be-used-in-a-vec/52673798#52673798", "title": "How can a range be used in a Vec?", "body": "<p>A range like <code>1..5</code> is already an iterator, so you do not have to call <code>iter()</code> to create one:</p>\n\n<pre><code>let v: i32 = (1..5).map(|x: i32| x.pow(2)).sum();\n</code></pre>\n\n<p>Also note that the references are gone because this iterator iterates over values.</p>\n\n<p>If you absolutly need a <code>Vec</code>, you need to collect the range into it first:</p>\n\n<pre><code>let v: i32 = (1..5)\n    .collect::&lt;Vec&lt;i32&gt;&gt;()\n    .iter()\n    .map(|&amp;x: &amp;i32| x.pow(2))\n    .sum();\n</code></pre>\n"}], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1787, "favorite_count": 0, "accepted_answer_id": 52673798, "answer_count": 1, "score": 1, "last_activity_date": 1538785535, "creation_date": 1538775541, "last_edit_date": 1538780804, "question_id": 52673580, "link": "https://stackoverflow.com/questions/52673580/how-can-a-range-be-used-in-a-vec", "title": "How can a range be used in a Vec?", "body": "<p>This code works fine:</p>\n\n<pre><code>fn main() {\n    let v: i32 = vec![1, 2, 3, 4, 5].iter().map(|&amp;x: &amp;i32| x.pow(2)).sum();\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<p>I tried to replace the <code>vec![1, 2, 3, 4, 5]</code> with <code>vec![1..5]</code> but <code>iter</code> and <code>map</code> did not work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0631]: type mismatch in closure arguments\n --&gt; src/main.rs:2:36\n  |\n2 |     let v: i32 = vec![1..5].iter().map(|&amp;x: &amp;i32| x.pow(2)).sum();\n  |                                    ^^^ ------------------- found signature of `for&lt;'r&gt; fn(&amp;'r i32) -&gt; _`\n  |                                    |\n  |                                    expected signature of `fn(&amp;std::ops::Range&lt;{integer}&gt;) -&gt; _`\n\nerror[E0599]: no method named `sum` found for type `std::iter::Map&lt;std::slice::Iter&lt;'_, std::ops::Range&lt;{integer}&gt;&gt;, [closure@src/main.rs:2:40: 2:59]&gt;` in the current scope\n --&gt; src/main.rs:2:61\n  |\n2 |     let v: i32 = vec![1..5].iter().map(|&amp;x: &amp;i32| x.pow(2)).sum();\n  |                                                             ^^^\n  |\n  = note: the method `sum` exists but the following trait bounds were not satisfied:\n          `std::iter::Map&lt;std::slice::Iter&lt;'_, std::ops::Range&lt;{integer}&gt;&gt;, [closure@src/main.rs:2:40: 2:59]&gt; : std::iter::Iterator`\n          `&amp;mut std::iter::Map&lt;std::slice::Iter&lt;'_, std::ops::Range&lt;{integer}&gt;&gt;, [closure@src/main.rs:2:40: 2:59]&gt; : std::iter::Iterator`\n</code></pre>\n\n<p>I've also <a href=\"https://users.rust-lang.org/t/working-with-range-in-vec/21027?u=hasanoryx\" rel=\"nofollow noreferrer\">asked this question on the Rust user's forum</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1538779678, "post_id": 52673527, "comment_id": 92277830, "body": "<code>recip</code> is not defined on <code>i32</code>. Your first code sample has a cast to <code>f32</code> while the second doesn&#39;t have that cast. Also, it doesn&#39;t make sense for <code>v</code> to be an <code>i32</code> either in the second sample."}], "answers": [{"tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": true, "score": 1, "last_activity_date": 1538804230, "creation_date": 1538804230, "answer_id": 52676051, "question_id": 52673527, "link": "https://stackoverflow.com/questions/52673527/how-can-i-call-reciprocal-on-the-result-of-calling-sum/52676051#52676051", "title": "How can I call `reciprocal` on the result of calling `sum`?", "body": "<p>I found the answer at the forum and like to share here:</p>\n\n<pre><code>fn main() {\n    let v = ((1..=5).map(|x: i32| x.pow(2)).sum::&lt;i32&gt;() as f32).recip();\n    println!(\"The answer is: {}\", v);\n}\n</code></pre>\n"}], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 54, "favorite_count": 0, "accepted_answer_id": 52676051, "answer_count": 1, "score": 0, "last_activity_date": 1538804230, "creation_date": 1538775242, "last_edit_date": 1538780674, "question_id": 52673527, "link": "https://stackoverflow.com/questions/52673527/how-can-i-call-reciprocal-on-the-result-of-calling-sum", "title": "How can I call `reciprocal` on the result of calling `sum`?", "body": "<p>This code gives the correct output of: <code>0.018181818</code></p>\n\n<pre><code>fn main() {\n    let v: i32 = vec![1, 2, 3, 4, 5].iter().map(|&amp;x: &amp;i32| x.pow(2)).sum();\n    println!(\"{}\", (v as f32).recip());\n}\n</code></pre>\n\n<p>When I tried to join them in single line, I failed as the output type after <code>sum</code> is different than the required input type of <code>recip</code>:</p>\n\n<pre><code>fn main() {\n    let v: i32 = vec![1, 2, 3, 4, 5]\n        .iter()\n        .map(|&amp;x: &amp;i32| x.pow(2))\n        .sum()\n        .recip();\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n --&gt; src/main.rs:2:18\n  |\n2 |       let v: i32 = vec![1, 2, 3, 4, 5]\n  |  __________________^\n3 | |         .iter()\n4 | |         .map(|&amp;x: &amp;i32| x.pow(2))\n5 | |         .sum()\n  | |______________^ cannot infer type for `S`\n  |\n  = note: type must be known at this point\n</code></pre>\n\n<p>I've also <a href=\"https://users.rust-lang.org/t/working-with-sum-and-reciprocal/21026?u=hasanoryx\" rel=\"nofollow noreferrer\">asked this question on the Rust user's forum</a>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 6798, "user_id": 4174897, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/gS0gI.jpg?s=128&g=1", "display_name": "Kyll", "link": "https://stackoverflow.com/users/4174897/kyll"}, "edited": false, "score": 1, "creation_date": 1538772275, "post_id": 52673059, "comment_id": 92275838, "body": "Can you elaborate on how your code &quot;doesn&#39;t work&quot;? What actually happened? If you got an exception/error, post the line it occurred on and the exception/error details. Please <a href=\"https://stackoverflow.com/posts/52673059/edit\">edit</a> these details in or we may not be able to help."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1538772850, "post_id": 52673059, "comment_id": 92276029, "body": "<a href=\"https://play.rust-lang.org/?gist=3866c1df93bfc1fe0c63bb881ee3a388&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1538773710, "post_id": 52673059, "comment_id": 92276334, "body": "@Stargateur what if my <code>vec!</code> is of integers?"}, {"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 1, "creation_date": 1538774594, "post_id": 52673059, "comment_id": 92276590, "body": "If they are integers, why are you using <code>powi</code>? That is for floating-point."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1538779899, "creation_date": 1538779899, "answer_id": 52674175, "question_id": 52673059, "link": "https://stackoverflow.com/questions/52673059/using-powi-when-iterating-over-the-elements-of-a-vec/52674175#52674175", "title": "Using powi when iterating over the elements of a Vec", "body": "<p>In the standard library, <code>powi</code> is only implemented for the two built-in floating point types:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.f32.html#method.powi\" rel=\"nofollow noreferrer\"><code>f32::powi</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/primitive.f64.html#method.powi\" rel=\"nofollow noreferrer\"><code>f64::powi</code></a></li>\n</ul>\n\n<p>If you wish to apply a power to an integer type, you want to use the inherent method <code>pow</code> (e.g. <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.pow\" rel=\"nofollow noreferrer\"><code>i32::pow</code></a>):</p>\n\n<pre><code>let v: i32 = vec![1i32, 2, 3].iter().map(|x| x.pow(2)).sum();\n</code></pre>\n"}], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 52674175, "answer_count": 1, "score": -2, "last_activity_date": 1538779899, "creation_date": 1538772203, "last_edit_date": 1538779634, "question_id": 52673059, "link": "https://stackoverflow.com/questions/52673059/using-powi-when-iterating-over-the-elements-of-a-vec", "title": "Using powi when iterating over the elements of a Vec", "body": "<p>This code works correctly and gives the result as <code>14</code>:</p>\n\n<pre><code>fn main() {\n    let v: i32 = vec![1, 2, 3].iter().map(|x| x * x).sum();\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b73b73b42dcbfc90d1da8f4a908e7bdf&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I'm trying to replace the <code>x * x</code> by <code>powi(2)</code> so I tried both options below, but neither of them work:</p>\n\n<pre><code>let v1: i32 = vec![1, 2, 3].iter().map(|x| x.powi(2)).sum();\n</code></pre>\n\n\n\n<pre><code>let v2: i32 = vec![1, 2, 3].iter().map(|&amp;x| &amp;x.powi(2)).sum();\n</code></pre>\n\n<p>I've also <a href=\"https://users.rust-lang.org/t/using-powi-with-vecc-elements/21023?u=hasanoryx\" rel=\"nofollow noreferrer\">posted this to the Rust user's forum</a>.</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1538769720, "post_id": 52672273, "comment_id": 92274889, "body": "Could you please provide a <a href=\"https://stackoverflow.com/help/mcve\">minimal example to reproduce the problem</a>, preferably with a playground link?  I can&#39;t see anything wrong with the code you showed.  (See also the <a href=\"https://stackoverflow.com/tags/rust/info\">Rust tag wiki</a> for more information.)"}, {"owner": {"reputation": 449, "user_id": 595897, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/8fe23c632def6105e80d760c41264969?s=128&d=identicon&r=PG", "display_name": "Clynamen", "link": "https://stackoverflow.com/users/595897/clynamen"}, "edited": false, "score": 0, "creation_date": 1538772611, "post_id": 52672273, "comment_id": 92275949, "body": "Here it is a link to a minimal example in the playground:   <a href=\"https://play.rust-lang.org/?gist=e4fd032ea8affeb0df985811c5798f5d&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 449, "user_id": 595897, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/8fe23c632def6105e80d760c41264969?s=128&d=identicon&r=PG", "display_name": "Clynamen", "link": "https://stackoverflow.com/users/595897/clynamen"}, "edited": false, "score": 0, "creation_date": 1538814333, "post_id": 52672273, "comment_id": 92283221, "body": "I am still thinking that the problem is in the fact that the compiler thinks that DogListAction may reference data from the iterator even after the function is called. I am trying to add explicit lifetime specification but with no luck so far"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1538822414, "post_id": 52672273, "comment_id": 92285248, "body": "@Clynamen, main problem here is that the code can potentially save short lived references to <code>dog_clone</code> elements in longer lived <code>dog_list_actions</code> elements."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1538823062, "post_id": 52672273, "comment_id": 92285417, "body": "If you replace <code>dog_clone.iter()</code> with <code>dogs.iter()</code>, the code will compile. You need to make signature of the function <code>on_dog_list()</code> express your intention to not save references the iterator produces."}, {"owner": {"reputation": 449, "user_id": 595897, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/8fe23c632def6105e80d760c41264969?s=128&d=identicon&r=PG", "display_name": "Clynamen", "link": "https://stackoverflow.com/users/595897/clynamen"}, "edited": false, "score": 0, "creation_date": 1538823372, "post_id": 52672273, "comment_id": 92285500, "body": "Thanks, I was thinking about that, but I don&#39;t know how to write that yet. What is the correct signature?"}], "answers": [{"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": true, "score": 3, "last_activity_date": 1538827684, "last_edit_date": 1538827684, "creation_date": 1538825024, "answer_id": 52678538, "question_id": 52672273, "link": "https://stackoverflow.com/questions/52672273/specify-that-lifetime-of-argument-lasts-for-function-call/52678538#52678538", "title": "Specify that lifetime of argument lasts for function call", "body": "<p>The problem here is that the code can potentially save short-lived references to <code>dog_clone</code> elements in the longer-lived <code>dog_list_actions</code>. We need to tell the compiler that we will not be saving references the iterator produces. It can be done like this:</p>\n\n<pre><code>trait DogListAction {\n    fn on_dog_list&lt;'a, I&gt;(&amp;'a mut self, dog_list: I)\n    where\n        I: Iterator&lt;Item = &amp;'a Dog&gt;;\n}\n</code></pre>\n\n<p>Now <code>Item</code>'s can live for the duration of <code>on_dog_list</code> call. In the original code they <strong>must</strong> live for longer duration.</p>\n\n<p>But this code creates another problem: we can't box the trait <code>DogListAction</code> anymore as it includes generic function. The usual approach here is to use a trait object:</p>\n\n<pre><code>trait DogListAction {\n    fn on_dog_list&lt;'a&gt;(&amp;'a mut self, dog_list: Box&lt;dyn Iterator&lt;Item = &amp;'a Dog&gt; + 'a&gt;);\n}\n</code></pre>\n\n<p>Note the second <code>'a</code> in <code>Box&lt;dyn Iterator&lt;Item = &amp;'a Dog&gt; + 'a&gt;</code>. Rust adds a <code>'static</code> trait bound to boxed trait objects by default and we don't want <code>'static</code> here.</p>\n\n<pre><code>#[derive(Clone)]\nstruct Dog {\n    name: &amp;'static str,\n}\n\ntrait DogListAction {\n    fn on_dog_list&lt;'a&gt;(&amp;'a mut self, dog_list: Box&lt;dyn Iterator&lt;Item = &amp;'a Dog&gt; + 'a&gt;);\n}\n\nstruct DogListActionExample {}\n\nimpl DogListAction for DogListActionExample {\n    fn on_dog_list&lt;'a&gt;(&amp;'a mut self, dog_list: Box&lt;dyn Iterator&lt;Item = &amp;'a Dog&gt; + 'a&gt;) {\n        for dog in dog_list {\n            println!(\"{}\", dog.name);\n        }\n    }\n}\n\nfn main() {\n    let dogs = vec![Dog { name: \"Pluto\" }, Dog { name: \"Lilly\" }];\n    let action_example = DogListActionExample {};\n    let mut dog_list_actions: Vec&lt;Box&lt;DogListAction&gt;&gt; = vec![Box::new(action_example)];\n    {\n        let dogs_clone = dogs.clone();\n        for dog_list_action in &amp;mut dog_list_actions {\n            dog_list_action.on_dog_list(Box::new(dogs_clone.iter()));\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c7b0ef2164407c5c3c84724658aca64e&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 449, "user_id": 595897, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/8fe23c632def6105e80d760c41264969?s=128&d=identicon&r=PG", "display_name": "Clynamen", "link": "https://stackoverflow.com/users/595897/clynamen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 609, "favorite_count": 0, "accepted_answer_id": 52678538, "answer_count": 1, "score": 3, "last_activity_date": 1538827684, "creation_date": 1538768178, "last_edit_date": 1538780071, "question_id": 52672273, "link": "https://stackoverflow.com/questions/52672273/specify-that-lifetime-of-argument-lasts-for-function-call", "title": "Specify that lifetime of argument lasts for function call", "body": "<p>I have a trait with a function that takes a reference to an iterator:</p>\n\n<pre><code>#[derive(Clone)]\nstruct Dog {\n    name: &amp;'static str,\n}\n\ntrait DogListAction&lt;'a, I&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a Dog&gt;,\n{\n    fn on_dog_list(&amp;mut self, dog_list: I);\n}\n\nstruct DogListActionExample {}\n\nimpl&lt;'a, I&gt; DogListAction&lt;'a, I&gt; for DogListActionExample\nwhere\n    I: Iterator&lt;Item = &amp;'a Dog&gt;,\n{\n    fn on_dog_list(&amp;mut self, dog_list: I) {\n        for dog in dog_list {\n            println!(\"{}\", dog.name);\n        }\n    }\n}\n\nfn main() {\n    let dogs = vec![Dog { name: \"Pluto\" }, Dog { name: \"Lilly\" }];\n    let mut action_example = DogListActionExample {};\n    let mut dog_list_actions: Vec&lt;Box&lt;DogListAction&lt;_&gt;&gt;&gt; = vec![Box::new(action_example)];\n    loop {\n        let dog_clone = dogs.clone();\n        for dog_list_action in &amp;mut dog_list_actions {\n            dog_list_action.on_dog_list(dog_clone.iter());\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e4fd032ea8affeb0df985811c5798f5d&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>It does not take any reference to the elements, so there is no need for it to last for more time than the function call. </p>\n\n<p>Due to my limited understanding of lifetimes, I do not know yet how to express this. Calling this function causes a compilation error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `dog_clone` does not live long enough\n  --&gt; src/main.rs:33:41\n   |\n33 |             dog_list_action.on_dog_list(dog_clone.iter());\n   |                                         ^^^^^^^^^ borrowed value does not live long enough\n34 |         }\n35 |     }\n   |     - `dog_clone` dropped here while still borrowed\n36 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>I guess the borrow checker thinks that data in <code>dog_clone</code> may be referenced after the function ends, but this is not the case.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1538759640, "post_id": 52669588, "comment_id": 92270637, "body": "This seems similar to <a href=\"https://stackoverflow.com/questions/49377231/when-to-use-rc-vs-box\">this</a>."}], "answers": [{"tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 3, "last_activity_date": 1538763578, "last_edit_date": 1538763578, "creation_date": 1538761672, "answer_id": 52670897, "question_id": 52669588, "link": "https://stackoverflow.com/questions/52669588/how-do-i-recursively-follow-a-self-referential-rc/52670897#52670897", "title": "How do I recursively follow a self-referential Rc?", "body": "<p>You should use references instead of trying to move values around.  This should work:</p>\n\n<pre><code>let mut head: &amp;Pathnode = &amp;node;\nwhile head.parent.is_some() {\n    head = head.parent.as_ref().unwrap();\n}\n</code></pre>\n\n<p>Your code calls <code>unwrap()</code> directly on <code>parent</code>, which consumes the <code>Option</code>.  It is not possible to move a field out of a struct.</p>\n\n<p>A nice alternative is to use <code>while let</code>:</p>\n\n<pre><code>let mut head: &amp;Pathnode = &amp;node;\nwhile let Some(ref parent) = head.parent  {\n    head = parent;\n}\n</code></pre>\n"}], "owner": {"reputation": 243, "user_id": 4261762, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IqlOi.png?s=128&g=1", "display_name": "Sinthorion", "link": "https://stackoverflow.com/users/4261762/sinthorion"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 1, "closed_date": 1538781344, "accepted_answer_id": 52670897, "answer_count": 1, "score": 1, "last_activity_date": 1538781305, "creation_date": 1538755783, "last_edit_date": 1538781305, "question_id": 52669588, "link": "https://stackoverflow.com/questions/52669588/how-do-i-recursively-follow-a-self-referential-rc", "closed_reason": "Duplicate", "title": "How do I recursively follow a self-referential Rc?", "body": "<p>I have a struct with an optional self-reference:</p>\n\n<pre><code>struct Pathnode {\n    pos: Pos,\n    parent: Option&lt;Rc&lt;Pathnode&gt;&gt;,\n}\n</code></pre>\n\n<p>I want to follow the <code>parent</code> reference until the first child before the root node (The root node has no parent). I tried the following code:</p>\n\n<pre><code>let mut head: Pathnode = node;\nwhile head.parent.is_some() {\n    head = *head.parent.unwrap();\n}\n</code></pre>\n\n<p>But this fails to compile with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n   --&gt; file.rs on line 134:24\n    |\n139 |                 head = *head.parent.unwrap();\n    |                        ^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>How can I get a <code>Pathnode</code> from the <code>Rc</code>? Alternatively, what other data type could I use for <code>head</code>? It's OK if I only get an immutable reference or similar at the end.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538749735, "post_id": 52667354, "comment_id": 92265439, "body": "<i>the same lifetime to its input variable and output type</i> \u2014 this is the most memory-efficient implementation possible. If you parse the words out of the string <code>[hello]{world}</code>, you could allocate new memory to store the words and copy them (<code>String</code>) or you could just reference the existing words in place (<code>&amp;str</code>)."}], "owner": {"reputation": 6440, "user_id": 592392, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3e43ec1d988a64c88e1f7e8a47ac6c1e?s=128&d=identicon&r=PG", "display_name": "jolivier", "link": "https://stackoverflow.com/users/592392/jolivier"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 27, "favorite_count": 0, "closed_date": 1538748885, "answer_count": 0, "score": 1, "last_activity_date": 1538749089, "creation_date": 1538748107, "last_edit_date": 1538749089, "question_id": 52667354, "link": "https://stackoverflow.com/questions/52667354/how-can-i-write-a-generic-function-that-works-for-deserializing-multiple-output", "closed_reason": "Duplicate", "title": "How can I write a generic function that works for deserializing multiple output types from TOML?", "body": "<p>I wrote a utility method that creates a configuration object from a TOML file:</p>\n\n<pre><code>pub fn read_common(path: &amp;str) -&gt; Result&lt;Config&gt; {\n    let content = read_file(path);\n    toml::from_str(&amp;content?).map_err(|e| {\n        Error::new(\n            ErrorKind::InvalidData,\n            format!(\n                \"Parsing failed at line {:?}, col {:?}\",\n                e.line_col().map(|p| p.0),\n                e.line_col().map(|p| p.1)\n            ),\n        )\n    })\n}\n</code></pre>\n\n<p><code>Config</code> is a simple deserializable struct:</p>\n\n<pre><code>#[derive(Deserialize)]\npub struct DatabaseConfig {\n    pub host: String,\n    pub port: u16,\n    pub database: String,\n    pub user: String,\n    pub password: String,\n}\n\n#[derive(Deserialize)]\npub struct Config {\n    pub database: DatabaseConfig,\n}\n</code></pre>\n\n<p>This compiles and runs fine (as it should, since this is almost copy-pasted from <a href=\"https://docs.rs/toml/0.4.8/toml/\" rel=\"nofollow noreferrer\">the toml crate's documentation</a>).</p>\n\n<p>I have multiple config files with each their corresponding matching struct, so I want to generify my <code>read_common</code> method (to reuse the same error handling in all other cases).</p>\n\n<p>I wrote this:</p>\n\n<pre><code>pub fn read&lt;'de, T&gt;(path: &amp;str) -&gt; Result&lt;T&gt;\nwhere\n    T: Deserialize&lt;'de&gt;,\n{\n    let content = read_file(path);\n    toml::from_str(&amp;content?).map_err(|e| {\n        Error::new(\n            ErrorKind::InvalidData,\n            format!(\n                \"Parsing failed at line {:?}, col {:?}\",\n                e.line_col().map(|p| p.0),\n                e.line_col().map(|p| p.1)\n            ),\n        )\n    })\n}\n</code></pre>\n\n<p><code>T</code> is the type of the configuration produced by the deserialization. I need to have it extend <code>Deserialize&lt;'..&gt;</code> so I need to give a lifetime here, but the full signature of <code>toml::from_str</code> is </p>\n\n<pre><code>pub fn from_str&lt;'de, T&gt;(s: &amp;'de str) -&gt; Result&lt;T, Error&gt;\nwhere\n    T: de::Deserialize&lt;'de&gt;,\n</code></pre>\n\n<p>In my understanding, my input string should have the same (or larger) lifetime than the produced deserialized object. Which of course it hasn't in my implementation since its lifetime ends at the end of my <code>read</code> method. The borrow checker thus complains (<code>borrowed value does not live long enough on &amp;content?</code>) and this implementation does not compile.</p>\n\n<p>How can I write a generic <code>read</code> version of my <code>read_common</code> that works for multiple output types?</p>\n\n<p>Additional questions I have about this issue:</p>\n\n<ul>\n<li>What happens with the lifetimes in <code>read_common</code>? The deserialized string is also short lived, how come this implementation compiles? I guess there is some tricks hidden in the <code>#[derive(Deserialize)]</code>.</li>\n<li>Why does <code>toml::from_str</code> give the same lifetime to its input variable and output type? For me the output should not refer to the input string once deserialization is finished, so why are there lifetimes in the method declaration?</li>\n</ul>\n"}, {"tags": ["syntax", "rust", "type-alias"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538703049, "post_id": 52656814, "comment_id": 92245059, "body": "Why do you have &quot;many instances of fully qualified syntax&quot; to start with?"}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538703374, "post_id": 52656814, "comment_id": 92245105, "body": "@Shepmaster I am using a library called <code>gfx-rs</code>, which has something called <code>hal</code> (hardware abstraction layer). <code>hal</code> is really a bunch of traits, and these traits are implemented by platform specific backends (e.g. vulkan, directx, etc.). Thus, I often have to write <code>&lt;gfx_vulkan::backend::Backend as hal::Backend&gt;::some_fn</code>, in order to get to the implementation of some particular function."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538703568, "post_id": 52656814, "comment_id": 92245133, "body": "None of that indicates why you have to use FQS instead of just calling the methods directly. Are there multiple traits defining <code>some_fn</code>?"}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538705935, "post_id": 52656814, "comment_id": 92245571, "body": "@Shepmaster This is something I do not quite understand about the library, because it seems to me that <code>hal</code> does not implement multiple traits defining some associated function, or type...however, the compiler complains about receiving an ambiguous type when FQS is left out. I have included an example of the error in the question now."}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538710158, "post_id": 52656814, "comment_id": 92246387, "body": "@Shepmaster so i was able to confirm that the error occurs not because there are multiple impls of some definition; here is a minimal example that reproduces the same error (courtesy of someone on the project&#39;s gitter): <a href=\"https://play.rust-lang.org/?gist=710159b24866cf75bff623947e57bbb4&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 5286, "user_id": 455770, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/mMHwz.jpg?s=128&g=1", "display_name": "Rots", "link": "https://stackoverflow.com/users/455770/rots"}, "edited": false, "score": 0, "creation_date": 1538705317, "post_id": 52657179, "comment_id": 92245468, "body": "so in OP&#39;s example you could just write <code>gfx_vulkan::backend::Backend::some_fn();</code> ?"}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 5286, "user_id": 455770, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/mMHwz.jpg?s=128&g=1", "display_name": "Rots", "link": "https://stackoverflow.com/users/455770/rots"}, "edited": false, "score": 0, "creation_date": 1538710446, "post_id": 52657179, "comment_id": 92246453, "body": "@Rots no, it doesn&#39;t seem like you can, i have added a MnWE to the question now"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1538721675, "post_id": 52657179, "comment_id": 92249580, "body": "That <a href=\"https://play.rust-lang.org/?gist=791a7c33e12203a3a17d18e2994db217&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">works with functions</a> but apparently not with associated types."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1538743919, "last_edit_date": 1538743919, "creation_date": 1538703504, "answer_id": 52657179, "question_id": 52656814, "link": "https://stackoverflow.com/questions/52656814/can-i-alias-fully-qualified-syntax/52657179#52657179", "title": "Can I alias fully qualified syntax?", "body": "<p>No, there is no way to alias the fully-qualified syntax. Doing so doesn't make sense to me as the whole <em>point</em> of this syntax is to be completely unambiguous.</p>\n\n<hr>\n\n<p>All of this assumes that you actually need fully-qualified syntax. As the name indicates, there's usually shorter ways of writing the code. These are all equivalent if no other traits defining <code>to_string</code> are in scope and the type itself doesn't implement a method of the same name:</p>\n\n<pre><code>&lt;i32 as ToString&gt;::to_string(&amp;42);\n</code></pre>\n\n\n\n<pre><code>ToString::to_string(&amp;42);\n</code></pre>\n\n\n\n<pre><code>i32::to_string(&amp;42);\n</code></pre>\n\n\n\n<pre><code>42.to_string();\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/44445730/155423\">How to call a method when a trait and struct use the same name?</a></li>\n<li><a href=\"https://stackoverflow.com/q/44953197/155423\">How do I disambiguate traits in Rust?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 4, "last_activity_date": 1538730589, "creation_date": 1538730589, "answer_id": 52662125, "question_id": 52656814, "link": "https://stackoverflow.com/questions/52656814/can-i-alias-fully-qualified-syntax/52662125#52662125", "title": "Can I alias fully qualified syntax?", "body": "<p>In your example, you can rename some of the parts so you can refer to them without conflicts in the shortened form:</p>\n\n<pre><code>use hal::Backend;\nuse back::Backend as BackendImpl;\n\nfn main() {\n    let d: &lt;BackendImpl as Backend&gt;::Device = 0;\n}\n</code></pre>\n\n<p>You may also consider defining a type alias, which is less ambiguous to access:</p>\n\n<pre><code>mod hal {\n    pub trait Backend {\n        type Device;\n    }\n}\n\nmod back {\n    pub struct Backend {}\n    pub type Device = i32;\n    impl ::hal::Backend for Backend {\n        type Device = Device;\n    }\n}\n\nfn main() {\n    let d: back::Device = 0;\n}\n</code></pre>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1529, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1576154783, "creation_date": 1538699863, "last_edit_date": 1546956269, "question_id": 52656814, "link": "https://stackoverflow.com/questions/52656814/can-i-alias-fully-qualified-syntax", "title": "Can I alias fully qualified syntax?", "body": "<p>I have some code where I have many instances of fully qualified syntax; as an example: </p>\n\n<pre><code>mod hal {\n    pub trait Backend {\n        type Device;\n    }\n}\n\nmod back {\n    pub struct Backend {}\n\n    impl ::hal::Backend for Backend {\n        type Device = i32;\n    }\n}\n\nfn main() {\n    let d: back::Backend::Device = 0;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=710159b24866cf75bff623947e57bbb4&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>In order to avoid errors like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0223]: ambiguous associated type\n  --&gt; src/main.rs:16:12\n   |\n16 |     let d: back::Backend::Device = 0;\n   |            ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n   |\n   = note: specify the type using the syntax `&lt;back::Backend as Trait&gt;::Device`\n</code></pre>\n\n<p>Is there a nice way in which I can alias <code>SomeType as SomeTrait</code>? Then, wherever this instance of fully qualified syntax is needed, I can write:</p>\n\n<p><code>&lt;S&gt;::associated_fn(...)</code></p>\n\n<p>Note that this error does not occur because there are actually multiple implementations of some trait's definition (which is what FQS is supposed to handle, according to <em>The Rust Programming Language</em>).</p>\n"}, {"tags": ["rust", "mocking"], "answers": [{"comments": [{"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1538705709, "post_id": 52657236, "comment_id": 92245527, "body": "Thanks, I derived <code>Clone</code> for <code>Thing</code>, but the clousour `` does not work yet. I got error: error[E0277]: the trait bound <code>mockers::matchers::BoolFnMatchArg&lt;Thing, [closure@src\\lib.rs:46:32: 46:65 thing:_]&gt;: mockers::MatchArg&lt;&amp;Thing&gt;</code> is not satisfied"}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1538706219, "post_id": 52657236, "comment_id": 92245618, "body": "I also tried <code>|t: &amp;Thing| t == &amp;thing</code> without derive <code>Clone</code> before your answer.  It just does not work!"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1538706356, "post_id": 52657236, "comment_id": 92245634, "body": "Shame on me for answering without testing!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1538703992, "creation_date": 1538703992, "answer_id": 52657236, "question_id": 52656800, "link": "https://stackoverflow.com/questions/52656800/cant-compare-thing-with-thing/52657236#52657236", "title": "Can&#39;t compare `&amp;Thing` with `Thing`", "body": "<p>The first thing (pun not intended) to notice is that <code>t.to_owned()</code> produces a <code>&amp;Thing</code>, not a <code>Thing</code> as you might have expected. That's because <code>Thing</code> doesn't implement <code>Clone</code>, and therefore it doesn't implement <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.ToOwned.html\" rel=\"nofollow noreferrer\"><code>ToOwned</code></a> either (because there is a blanket impl that implements <code>ToOwned</code> for all <code>Clone</code> types), which provides the <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.ToOwned.html#tymethod.to_owned\" rel=\"nofollow noreferrer\"><code>to_owned</code></a> method. But then why does the call still work? Because references implement <code>Clone</code>, so <code>&amp;Thing</code> implements <code>ToOwned</code>! This gives <code>to_owned</code> this signature:</p>\n\n<pre><code>fn to_owned(self: &amp;&amp;Thing) -&gt; &amp;Thing;\n</code></pre>\n\n<p>You can fix this by deriving <code>Clone</code> for <code>Thing</code>.</p>\n\n<p>However, you don't <em>need</em> to clone the <code>Thing</code> in order to compare it. You can instead compare two references to <code>Thing</code> (e.g. by writing <code>|t: &amp;Thing| t == &amp;thing</code>). <a href=\"https://doc.rust-lang.org/stable/std/cmp/trait.PartialEq.html#tymethod.eq\" rel=\"nofollow noreferrer\"><code>PartialEq::eq</code></a> (which the <code>==</code> operator translates to) takes its arguments by reference, and <a href=\"https://doc.rust-lang.org/1.29.1/src/core/cmp.rs.html#929-934\" rel=\"nofollow noreferrer\">references implement <code>PartialEq</code></a> by peeling off a layer of references (i.e. they don't compare the pointer values, unlike raw pointer types).</p>\n"}, {"comments": [{"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1538707340, "post_id": 52657278, "comment_id": 92245814, "body": "It worked, but the double &amp;&amp; I can&#39;t understand, would you like to give me some guidance?"}, {"owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "edited": false, "score": 0, "creation_date": 1538712484, "post_id": 52657278, "comment_id": 92246878, "body": "I found an explanation : <a href=\"https://stackoverflow.com/questions/43828013/why-is-being-used-here\" title=\"why is being used here\">stackoverflow.com/questions/43828013/why-is-being-used-here</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1538704883, "last_edit_date": 1538704883, "creation_date": 1538704311, "answer_id": 52657278, "question_id": 52656800, "link": "https://stackoverflow.com/questions/52656800/cant-compare-thing-with-thing/52657278#52657278", "title": "Can&#39;t compare `&amp;Thing` with `Thing`", "body": "<p>You cannot compare a <code>Thing</code> to a <code>&amp;Thing</code> using the default derivation of <code>PartialEq</code>:</p>\n\n<pre><code>#[derive(Debug, PartialEq)]\nstruct Thing(String);\n\nfn main() {\n    let t_val = Thing(String::new());\n    let t_ref = &amp;t_val;\n\n    t_val == t_ref;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:8:14\n  |\n8 |     t_val == t_ref;\n  |              ^^^^^ expected struct `Thing`, found &amp;Thing\n  |\n  = note: expected type `Thing`\n             found type `&amp;Thing`\n</code></pre>\n\n<p>To fix that error, you need to do one of two things:</p>\n\n<ol>\n<li><p>Match the reference level:</p>\n\n<ul>\n<li><p><code>t_val == *t_ref</code></p></li>\n<li><p><code>&amp;t_val == t_ref</code></p></li>\n</ul></li>\n<li><p>Implement equality for a mismatched number of references:</p>\n\n<pre><code>impl&lt;'a&gt; PartialEq&lt;&amp;'a Thing&gt; for Thing {\n    fn eq(&amp;self, other: &amp;&amp;'a Thing) -&gt; bool {\n        self == *other\n    }\n}\n\nimpl&lt;'a&gt; PartialEq&lt;Thing&gt; for &amp;'a Thing {\n    fn eq(&amp;self, other: &amp;Thing) -&gt; bool {\n        *self == other\n    }\n}\n</code></pre></li>\n</ol>\n\n<hr>\n\n<p>However, none of that solves <em>your actual problem</em>. You've misunderstood how the mockers library works; your closure is taking the wrong level of reference, and it needs to take ownership of the value to compare:</p>\n\n<pre><code>let expected_thing = thing.clone();\nscenario.expect(\n    dao.get_call(check(move |t: &amp;&amp;Thing| t == &amp;&amp;expected_thing))\n        .and_return(\"hello\".to_string()),\n);\n</code></pre>\n"}], "owner": {"reputation": 423, "user_id": 9354288, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/2dGbd.jpg?s=128&g=1", "display_name": "llxxbb", "link": "https://stackoverflow.com/users/9354288/llxxbb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1042, "favorite_count": 1, "accepted_answer_id": 52657278, "answer_count": 2, "score": 0, "last_activity_date": 1538704883, "creation_date": 1538699726, "last_edit_date": 1538702844, "question_id": 52656800, "link": "https://stackoverflow.com/questions/52656800/cant-compare-thing-with-thing", "title": "Can&#39;t compare `&amp;Thing` with `Thing`", "body": "<p>I know what the error means, but I can't fix it. I'm using <code>mockers</code> to test my work and I got stuck when trying to verify the struct parameter which was given to a mocked trait's function. The simplified code:</p>\n\n<pre><code>#[cfg(test)]\nextern crate mockers;\n#[cfg(test)]\nextern crate mockers_derive;\n\n#[cfg(test)]\nuse mockers_derive::mocked;\n\n#[derive(Ord, PartialOrd, Eq, PartialEq, Debug)]\npub struct Thing {\n    pub key: String,\n    pub class: String,\n}\n\n#[cfg_attr(test, mocked)]\npub trait DaoTrait {\n    fn get(&amp;self, thing: &amp;Thing) -&gt; String;\n}\n\nstruct DataService {\n    dao: Box&lt;DaoTrait&gt;,\n}\n\nimpl DataService {\n    pub fn get(&amp;self, thing: &amp;Thing) -&gt; String {\n        self.dao.get(thing)\n    }\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n    use mockers::matchers::eq;\n    use mockers::Scenario;\n\n    #[test]\n    fn my_test() {\n        use mockers::matchers::check;\n        let scenario = Scenario::new();\n        let mut dao = scenario.create_mock_for::&lt;DaoTrait&gt;();\n        let thing = Thing {\n            key: \"my test\".to_string(),\n            class: \"for test\".to_string(),\n        };\n\n        scenario.expect(\n            dao.get_call(check(|t: &amp;Thing| t.to_owned() == thing))\n                .and_return(\"hello\".to_string()),\n        );\n        let testee = DataService { dao: Box::new(dao) };\n\n        let rtn = testee.get(&amp;thing);\n        assert_eq!(rtn, \"hello\");\n    }\n}\n</code></pre>\n\n<p>I got the errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: unused import: `mockers::matchers::eq`\n  --&gt; src/main.rs:33:9\n   |\n33 |     use mockers::matchers::eq;\n   |         ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: #[warn(unused_imports)] on by default\n\nerror[E0277]: can't compare `&amp;Thing` with `Thing`\n  --&gt; src/main.rs:47:57\n   |\n47 |             dao.get_call(check(|t: &amp;Thing| t.to_owned() == thing))\n   |                                                         ^^ no implementation for `&amp;Thing == Thing`\n   |\n   = help: the trait `std::cmp::PartialEq&lt;Thing&gt;` is not implemented for `&amp;Thing`\n\nerror[E0277]: the trait bound `mockers::matchers::BoolFnMatchArg&lt;Thing, [closure@src/main.rs:47:32: 47:65 thing:_]&gt;: mockers::MatchArg&lt;&amp;Thing&gt;` is not satisfied\n  --&gt; src/main.rs:47:17\n   |\n47 |             dao.get_call(check(|t: &amp;Thing| t.to_owned() == thing))\n   |                 ^^^^^^^^ the trait `mockers::MatchArg&lt;&amp;Thing&gt;` is not implemented for `mockers::matchers::BoolFnMatchArg&lt;Thing, [closure@src/main.rs:47:32: 47:65 thing:_]&gt;`\n   |\n   = help: the following implementations were found:\n             &lt;mockers::matchers::BoolFnMatchArg&lt;T, F&gt; as mockers::MatchArg&lt;T&gt;&gt;\n</code></pre>\n\n<p>I viewed <code>check</code>'s source code :</p>\n\n<pre><code>pub fn check&lt;T, F: Fn(&amp;T) -&gt; bool&gt;(f: F) -&gt; BoolFnMatchArg&lt;T, F&gt; {\n    BoolFnMatchArg { func: f, _phantom: PhantomData }\n}\n</code></pre>\n\n<p>I think the closure <code>|t: &amp;Thing| t.to_owned() == thing</code> I had given is right. I also tried the following closures, but none of them worked.</p>\n\n<pre><code>|t: &amp;Thing| t == &amp;thing\n</code></pre>\n\n\n\n<pre><code>|t: &amp;Thing| *t == thing\n</code></pre>\n\n\n\n<pre><code>|t: Thing| t == thing\n</code></pre>\n\n<p>The Cargo.toml:</p>\n\n<pre><code>[dev-dependencies]\nmockers = \"0.12.1\"\nmockers_derive = \"0.12.1\"\n</code></pre>\n"}, {"tags": ["rust", "llvm"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538745299, "post_id": 52654660, "comment_id": 92262583, "body": "<code>-mgeneral-regs-only</code> isn&#39;t an LLVM backend parameter; it&#39;s a command line argument to clang. You need to find the actual backend parameter."}, {"owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538747865, "post_id": 52654660, "comment_id": 92264314, "body": "@Shepmaster any idea where to look for? I tried to look at output of clang compilation infomation; unfortunately I didn&#39;t show."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538749242, "post_id": 52654660, "comment_id": 92265178, "body": "Nope. My best guess is that you will need to read the source of clang to figure out how it does what it needs to."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538749395, "post_id": 52654660, "comment_id": 92265257, "body": "That being said, your latest edit has transformed a good question into not a good question. <b>You got an answer for how to pass a backend parameter to LLVM</b>, but have not upvoted it or accepted it, and now you have edited your question to be about two distinct things. I&#39;d suggest removing your edit and asking a new question (in <a href=\"https://stackoverflow.com/questions/tagged/clang\">clang</a> <a href=\"https://stackoverflow.com/questions/tagged/llvm\">llvm</a>) about how to map a generic clang command line argument to LLVM (or the specific one you are interested in)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538745332, "post_id": 52665505, "comment_id": 92262609, "body": "Note that <code>-mgeneral-regs-only</code> isn&#39;t an LLVM backend parameter; it&#39;s a command line argument to clang. Presumably this works if OP finds the right parameter."}], "tags": [], "owner": {"reputation": 1056, "user_id": 3497181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e384ad3cea4b2ccaf03271303a94f1f?s=128&d=identicon&r=PG&f=1", "display_name": "rnstlr", "link": "https://stackoverflow.com/users/3497181/rnstlr"}, "is_accepted": true, "score": 0, "last_activity_date": 1538744058, "last_edit_date": 1538744058, "creation_date": 1538742003, "answer_id": 52665505, "question_id": 52654660, "link": "https://stackoverflow.com/questions/52654660/how-do-i-pass-an-llvm-backend-parameter-to-xargo/52665505#52665505", "title": "How do I pass an LLVM backend parameter to Xargo?", "body": "<p>See <a href=\"https://github.com/japaric/xargo#compiling-the-sysroot-with-custom-rustc-flags\" rel=\"nofollow noreferrer\">the Xargo documentation about compiling the sysroot with custom <code>rustc</code> flags</a>. <code>rustc</code> allows setting LLVM flags via the <code>-C</code> switch:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ rustc -C help\n...\n-C            llvm-args=val -- a list of arguments to pass to llvm (space separated)\n...\n</code></pre>\n\n<p>You should be able to pass that in with <code>RUSTFLAGS='-C llvm-args=-mgeneral-regs-only' xargo build</code>.</p>\n"}], "owner": {"reputation": 961, "user_id": 5920297, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/80fc64c0293ff9460b4a8f127afdb8b2?s=128&d=identicon&r=PG&f=1", "display_name": "phodina", "link": "https://stackoverflow.com/users/5920297/phodina"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 361, "favorite_count": 0, "accepted_answer_id": 52665505, "answer_count": 1, "score": 5, "last_activity_date": 1538745376, "creation_date": 1538684789, "last_edit_date": 1538745376, "question_id": 52654660, "link": "https://stackoverflow.com/questions/52654660/how-do-i-pass-an-llvm-backend-parameter-to-xargo", "title": "How do I pass an LLVM backend parameter to Xargo?", "body": "<p>I'm compiling a Rust application for the AArch64 architecture and I need to pass the LLVM backend parameter <a href=\"https://clang.llvm.org/docs/UsersManual.html\" rel=\"nofollow noreferrer\"><code>-mgeneral-regs-only</code></a> so that the code uses only general purpose registers. </p>\n\n<p>How do I pass the parameter to Xargo as I need to cross-compile the application?</p>\n\n<p><a href=\"https://stackoverflow.com/a/52665505/155423\">As suggested</a>, I tried to run the command with <code>RUSTFLAGS</code> but got an error about unknown command line arguments:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>RUSTFLAGS='-C llvm-args=-mgeneral-regs-only' xargo build --target aarch64-unknown-none\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn't exit successfully: `rustc - --crate-name ___ --print=file-names -C llvm-args=-mgeneral-regs-only --sysroot /home/.xargo -Z force-unstable-if-unmarked --target aarch64-unknown-none --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro` (exit code: 1)\n--- stderr\nrustc: Unknown command line argument '-mgeneral-regs-only'.  Try: 'rustc -help'\nrustc: Did you mean '-mark-data-regions'?\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1538684490, "post_id": 52654356, "comment_id": 92240532, "body": "Environment variables are the usual way AFAIK. Why would you not want to use them?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1538684859, "post_id": 52654356, "comment_id": 92240691, "body": "Cool thanks! Just checking in case I missed something. :)"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 23, "favorite_count": 0, "closed_date": 1538684808, "answer_count": 0, "score": 1, "last_activity_date": 1538683467, "creation_date": 1538683467, "question_id": 52654356, "link": "https://stackoverflow.com/questions/52654356/passing-arguments-flags-to-build-rs", "closed_reason": "Duplicate", "title": "Passing arguments/flags to `build.rs`", "body": "<p>Is there an accepted way of threading through to <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\">Rust's <code>build.rs</code> build scripts</a> some sort of flag that could be specified at <code>cargo build</code>?</p>\n\n<p>Just to be clear, I realize that having custom flags to <code>cargo build</code> sounds like a generally bad idea (for instance, what flags are passed to dependencies?). My use case is mostly to support unusual debugging workflows for other people working on this project. For instance,</p>\n\n<ul>\n<li>specifying a custom include path</li>\n<li>indicating that a C/C++ library should be built from scratch (instead of just linking to an already installed version)</li>\n</ul>\n\n<p>Am I better off just passing this sort of information via an environment variable?</p>\n"}, {"tags": ["generics", "enums", "rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1538683333, "post_id": 52654284, "comment_id": 92240036, "body": "<code>fn print_name_from_enum&lt;T&gt;(hold: T)</code>, this does not say <code>print_name_from_enum</code> takes a parameter of type <code>Holder</code>, but rather any type with no constraint at all. Did you mean <code>print_name_from_enum&lt;T&gt;(hold: Holder&lt;T&gt;)</code>?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 2, "creation_date": 1538683527, "post_id": 52654284, "comment_id": 92240136, "body": "<i>&quot;a function which takes the enum, checks if it is of string type and prints it&quot;</i> \u2014 This isn&#39;t possible. For the function to take the enum, it must be known at compile-time what the parameter <code>T</code> is. So a function can&#39;t really &quot;test&quot; that - if it needs it to be a string then it will either compile or won&#39;t compile."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538686038, "post_id": 52654284, "comment_id": 92241174, "body": "<a href=\"https://play.rust-lang.org/?gist=53996aa7d42c97f6289e06935239b41f&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">The duplicates applied to your question</a>."}], "owner": {"reputation": 61, "user_id": 10458563, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beffb70905dcc44a5e9305b9879c97b4?s=128&d=identicon&r=PG&f=1", "display_name": "Benji Z.", "link": "https://stackoverflow.com/users/10458563/benji-z"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 652, "favorite_count": 0, "closed_date": 1538685754, "answer_count": 0, "score": 2, "last_activity_date": 1538689126, "creation_date": 1538683141, "last_edit_date": 1538689126, "question_id": 52654284, "link": "https://stackoverflow.com/questions/52654284/how-do-i-write-a-function-which-takes-a-generic-enum-and-prints-it-if-it-contain", "closed_reason": "Duplicate", "title": "How do I write a function which takes a generic enum and prints it if it contains a String?", "body": "<p>I have a generic enum:</p>\n\n<pre><code>enum Holder&lt;T&gt; {\n    None,\n    One(T),\n    Two(T, T),\n}\n</code></pre>\n\n<p>and I have placed two strings in it:</p>\n\n<pre><code>let two_strings = Holder::Two(String::from(\"abc\"), String::from(\"abc\"));\n</code></pre>\n\n<p>I want to write a function which takes the enum, checks if it is of type <code>String</code> and prints it:</p>\n\n<pre><code>fn print_name_from_enum&lt;T&gt;(hold: T) {\n    match hold {\n        Holder::Two(a, b) =&gt; println!(\"Your Name is {} {}\", a, b),\n    }\n}\n</code></pre>\n\n<p>The compiler complains because I do not specify the type of <code>holder</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/lib.rs:10:9\n   |\n10 |         Holder::Two(a, b) =&gt; println!(\"Your Name is {} {}\", a, b),\n   |         ^^^^^^^^^^^^^^^^^ expected type parameter, found enum `Holder`\n   |\n   = note: expected type `T`\n              found type `Holder&lt;_&gt;`\n</code></pre>\n\n<p>but if I give the type:</p>\n\n<pre><code>match hold {\n    Holder&lt;String&gt;::Two(a, b) =&gt; {\n        println!(\"Your Name is {} {}\", a, b)\n    }\n}\n</code></pre>\n\n<p>the compiler complains as well:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `=&gt;`, `@`, `if`, or `|`, found `&lt;`\n  --&gt; src/lib.rs:10:15\n   |\n10 |         Holder&lt;String&gt;::Two(a, b) =&gt; {\n   |               ^ expected one of `=&gt;`, `@`, `if`, or `|` here\n</code></pre>\n\n<p>How do I solve this issue? What am I doing wrong here?</p>\n\n<p><strong>Solution</strong></p>\n\n<p>Thanks to @mcarton I found the mistake. The way it should be is</p>\n\n<pre><code>fn print_name_from_enum&lt;T: ToString&gt;(hold: Holder&lt;T&gt;) {\n    match hold {\n        Holder::Two(a, b) =&gt; {\n            println!(\"Your Name is {first} {second}\", first = a.to_string(), \n                                                        second = b.to_string())\n        }\n        _ =&gt; {\n            println!(\"ooPPs.\")\n        }\n    }\n}\n</code></pre>\n\n<p>I need to add the enum type as an argument, and for T it has to be add that its function to_string() is implemented.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538679836, "post_id": 52653238, "comment_id": 92238430, "body": "Your usage of <code>mem::uninitialized</code> is completely inappropriate and dangerous."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538679895, "post_id": 52653238, "comment_id": 92238462, "body": "Your implementation of <code>bdev_name</code> easily creates memory leaks once it&#39;s called twice."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538679967, "post_id": 52653238, "comment_id": 92238502, "body": "I&#39;m new to Rust and I&#39;m working on the FFI with some C library. For C, I can do <code>struct AppContext hello_context = {}</code>. I&#39;m not sure what&#39;s the best way in Rust."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538680040, "post_id": 52653238, "comment_id": 92238528, "body": "Can you elaborate more on what memory leaks I can create and what&#39;s the approate way to implement it. I simply want to set some <code>char*</code> for the undelying C struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1538680327, "post_id": 52653238, "comment_id": 92238643, "body": "Presumably you should be setting those pointers to NULL so you know if they have been initialized or not. Uninitialized values can be <i>literally</i> any value that just happens to be in that chunk of memory at that point in time. Uninitialized memory is a classic door to allowing security vulnerabilities."}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538680882, "post_id": 52653238, "comment_id": 92238910, "body": "@Shepmaster I take a look at links that you listed. If I use extension trait, I think I still need to reimplement the <code>new</code> and <code>bdev_name</code> methods in the extension trait implementation? Is there any way to simply inherit not reimplement? Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1538681109, "post_id": 52653238, "comment_id": 92239010, "body": "Rust has no inheritance (<a href=\"https://stackoverflow.com/q/32736170/155423\">What is the best way to inherit a struct in Rust 1.3?</a> / <a href=\"https://stackoverflow.com/q/32552593/155423\">Is it possible for one struct to extend an existing struct, keeping all the fields?</a> / <a href=\"https://stackoverflow.com/q/39429218/155423\">How to avoid code duplication of different structs with semantically equal fields/properties?</a>). I don&#39;t know why you think you need to reimplement the methods."}], "owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 299, "favorite_count": 0, "closed_date": 1538679926, "answer_count": 0, "score": 0, "last_activity_date": 1538679962, "creation_date": 1538678389, "last_edit_date": 1538679772, "question_id": 52653238, "link": "https://stackoverflow.com/questions/52653238/is-there-any-way-i-can-add-custom-functions-to-a-predefined-struct", "closed_reason": "Duplicate", "title": "Is there any way I can add custom functions to a predefined struct?", "body": "<p>I have a struct that is used by different functions. Instead of passing the struct as input to the different functions, I think I can implement the struct with all the functions that need to access it. However, there are certain fixed basic functions that I want to provide so that whenever the struct is created, I don't have to implement the same set of functions over and over again.</p>\n\n<p>Put in another way, what I really want is the struct inheritance: I have certain set of methods associated with <code>struct</code> and user can add their custom functions to <code>struct</code> and allow them to access the data contained in data. Is there anyway able to do so?</p>\n\n<p>Concretely, suppose I have a struct called <code>AppContext</code> and the fixed set of functions are <code>new</code> and <code>bdev_name</code>:</p>\n\n<pre><code>pub struct AppContext {\n    bdev: *mut raw::spdk_bdev,\n    bdev_desc: *mut raw::spdk_bdev_desc,\n    bdev_io_channel: *mut raw::spdk_io_channel,\n    buff: *mut c_char,\n    bdev_name: *const c_char,\n}\n\nimpl AppContext {\n    pub fn new() -&gt; Self {\n        let context: AppContext;\n        unsafe {\n            context = mem::uninitialized();\n        }\n        context\n    }\n\n    pub fn bdev_name(&amp;mut self, name: &amp;str) {\n        self.bdev_name = CString::new(name)\n            .expect(\"Couldn't create a string\")\n            .into_raw()\n    }\n}\n</code></pre>\n\n<p>Now, when I use this struct, I do:</p>\n\n<pre><code>let mut context = AppContext::new();\ncontext.bdev_name(\"Nvme0n1\");\n</code></pre>\n\n<p>I want to add one extra function (say <code>end()</code>) that can work on the data within the context struct. However, <code>end()</code> is very domain specific function and needed in a specific module, and thus it's not a good idea to implement as part of the context struct. </p>\n\n<p>Is there any way I can workaround the issue (i.e. add custom function to predefined <code>struct</code>)?</p>\n"}, {"tags": ["compiler-errors", "rust", "pattern-matching", "associated-types"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538670793, "post_id": 52651566, "comment_id": 92234839, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/52651566/edit\">edit</a> your question to include it. We cannot tell what crates, types, traits, fields, etc. are present in the code. Try to produce something that reproduces your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> or you can reproduce it in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> as well."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538671412, "post_id": 52651566, "comment_id": 92235163, "body": "Yes, I&#39;m very sorry. I&#39;ve just been scratching my head for a long time while trying to find any clue about why my code doesn&#39;t compile and then kind of rushed at SO when I couldn&#39;t take it anymore."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1538671417, "post_id": 52651566, "comment_id": 92235170, "body": "The code you have provided does not compile due to syntax errors. Please try it yourself locally before posting it to ensure it produces the same error as you originally had."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538671653, "post_id": 52651566, "comment_id": 92235293, "body": "<i>scratching my head for a long time while trying to find any clue about why my code doesn&#39;t compile</i> \u2014 bluntly, if you had spent some of that time creating a MCVE, it&#39;s entirely likely you would have solved the problem yourself. In the rare case that you didn&#39;t, you&#39;d be eminently prepared to ask a question here, on an issue tracker, on a forum, to a fellow programmer, etc."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538671765, "post_id": 52651566, "comment_id": 92235345, "body": "Why are you using <code>core</code> instead of <code>std</code>? Why are you re-exporting crates? Why are you importing things and not using them? Since the code continues to not compile, I can only ask these vague questions based on non-idiomatic code choices."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538671810, "post_id": 52651566, "comment_id": 92235366, "body": "OK, this is embarrassing. I&#39;ve now pasted my entire module. Let me just be clear. The syntax is correct. The code compiles when the pattern match returns <code>Ok(c) =&gt; Ok(MSSQLConnection(c))</code>, but I expected it to compile asl well when using the associated type <code>Connection</code>, since <code>type Connection = MSSQLConnection</code>."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1538671827, "post_id": 52651566, "comment_id": 92235372, "body": "It&#39;s pretty much worth taking your time to write a good question from the start. While we do understand that you might have been troubled by this issue for a while, rushing the question is one of the things worth avoiding the most on SO. with that said, that error message seems to be just an attempt to look for the associated type <code>Connect</code> in the implementing type <code>MSSQLConnectionManager</code> rather than the implemented trait <code>ConnectionManager</code>. Does replacing <code>Ok(Self::Connection(c))</code> with <code>Ok(&lt;Self as r2d2::ManageConnection&gt;::Connection(c))</code> help?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538671980, "post_id": 52651566, "comment_id": 92235465, "body": "The code you have provided does not compile: <code>failed to resolve. Maybe a missing `extern crate core;`?</code>. If I change it to <code>std::</code> then the code compiles successfully. Please try it yourself locally before posting it to ensure it produces the same error as you originally had."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538672357, "post_id": 52651566, "comment_id": 92235632, "body": "The <code>core</code> vs <code>std</code> import is not the problem. It compiled with either for me. Do you want me to record my screen to prove it? I can understand why I should be scolded for posting a bad question but please don&#39;t assume I&#39;m lying. Rather just tell me if you think so. And the <code>core</code> import was just an artifact of CLion auto-import. I&#39;m using <code>rustc 1.29.1 (b801ae664 2018-09-20)</code>, btw."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1538672639, "post_id": 52651566, "comment_id": 92235762, "body": "@E_net4, No. I tried even though it seems to me like associated types are just declared in traits but defined in impls of them so it makes no sense to scope and cast like in your example. Finally, your suggestion yields this error: <code>error[E0575]: expected method or associated constant, found associated type &#39;r2d2::ManageConnection::Connection&#39;</code>"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1538672829, "post_id": 52651566, "comment_id": 92235854, "body": "It might be worth specifying a few more things about your project: Rust compiler version and the Cargo.lock come to mind. We are not implying that you&#39;re lying, but if we&#39;re grabbing the code that you have provided and we cannot reproduce the problem, we have no choice but to say there&#39;s a missing variable in the question."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1538672893, "post_id": 52651566, "comment_id": 92235888, "body": "@E_net4 OK, I&#39;ll try and wrap up a commit of a working, compiling version and then link you to the code."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538674144, "post_id": 52651566, "comment_id": 92236481, "body": "Here&#39;s <a href=\"https://github.com/brokenthorn/bizpharma_core\" rel=\"nofollow noreferrer\">a link to the code repository | bb42e59</a> so you can check it out. The master branch compiles for me and tests are all passing. I already mentioned that I&#39;m using Rust stable but I&#39;ll mention it again. Thanks."}], "answers": [{"comments": [{"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538675666, "post_id": 52652643, "comment_id": 92237124, "body": "So constructing through type aliases is not supported. Now that I understood the issue, I google&#39;d and <a href=\"https://doc.rust-lang.org/1.26.0/reference/items/type-aliases.html\" rel=\"nofollow noreferrer\">found this</a>: <code>A type alias [...] cannot be used to qualify the constructors</code>. So type aliases only help to shorten type definitions like those with several bounded types, resulting in a more concise type name. So they can only be used to define the type of a variable, a function return type or an argument type. Thanks for helping me understand this."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538676071, "post_id": 52652643, "comment_id": 92237311, "body": "@Paul That seems to me it. The key takeaway is that type aliases and associated types behave differently, despite syntactical similarities with each other."}, {"owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538676158, "post_id": 52652643, "comment_id": 92237349, "body": "But they share the same limitation that I listed, right?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "edited": false, "score": 0, "creation_date": 1538679078, "post_id": 52652643, "comment_id": 92238177, "body": "@brokenthorn Yes, that would be a common limitation."}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 3, "last_activity_date": 1538675115, "creation_date": 1538675115, "answer_id": 52652643, "question_id": 52651566, "link": "https://stackoverflow.com/questions/52651566/associated-type-not-found-in-the-current-scope-when-returning-from-pattern-match/52652643#52652643", "title": "Associated type not found in the current scope when returning from pattern match inside method", "body": "<p>Here is a minimal example that reproduces the same issue. Some type names were changed for clarity.</p>\n\n<pre><code>trait Manager {\n    type Connection;\n\n    fn connect(&amp;self) -&gt; Self::Connection;\n}\n\npub struct ConnectionId(usize);\n\npub struct FooManager;\n\nimpl Manager for FooManager {\n    type Connection = ConnectionId;\n\n    fn connect(&amp;self) -&gt; Self::Connection {\n        Self::Connection(5)\n    }\n}\n</code></pre>\n\n<p>The error emerges from attempting to use the associated type <code>Connection</code> like an alias to the concrete type <code>ConnectionId</code>, as defined by the implementation of <code>Manager</code>. However, associated types do not behave entirely like a type alias. Even though we can construct a <code>ConnectionId</code> (as it is a tuple struct, and we have visibility towards its member in this module), we cannot do that through the associated type <code>Self::Connection</code>. What we could do is access other symbols defined by its constraints. For example, if we had this:</p>\n\n<pre><code>trait Manager {\n    type Connection: Default;\n    // ...\n}\n</code></pre>\n\n<p>We would be able to call <code>default</code> from <code>Self::Connection</code>.</p>\n\n<p>As such, changing the expression <code>Ok(Self::Connection(c))</code> in the original example to <code>Ok(MSSQLConnection(c)),</code> is the right way to fix this. In the event that you need to abstract the type away even at this step, you can constrain the associated type to a new trait providing the necessary construction methods.</p>\n"}], "owner": {"reputation": 1679, "user_id": 267874, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/007a9c64b82a001443ff463ef326366b?s=128&d=identicon&r=PG", "display_name": "Paul-Sebastian Manole", "link": "https://stackoverflow.com/users/267874/paul-sebastian-manole"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1057, "favorite_count": 0, "accepted_answer_id": 52652643, "answer_count": 1, "score": -1, "last_activity_date": 1538675115, "creation_date": 1538670675, "last_edit_date": 1538674311, "question_id": 52651566, "link": "https://stackoverflow.com/questions/52651566/associated-type-not-found-in-the-current-scope-when-returning-from-pattern-match", "title": "Associated type not found in the current scope when returning from pattern match inside method", "body": "<p>I have <a href=\"https://github.com/brokenthorn/bizpharma_core\" rel=\"nofollow noreferrer\">this code (bb42e59)</a>:</p>\n\n<pre><code>pub extern crate r2d2;\npub extern crate tiberius;\npub extern crate futures;\n\nuse self::tiberius::BoxableIo;\nuse self::futures::prelude::*;\n\nuse core::fmt::Debug;\n#[allow(unused_imports)]\nuse std::error::Error;\n\ntype TiberiusConnection = self::tiberius::SqlConnection&lt;Box&lt;BoxableIo&gt;&gt;;\n\n#[derive(Debug)]\npub enum Errors { TiberiusError(tiberius::Error) }\n\n#[derive(Debug)]\npub struct MSSQLConnectionManagerError(Errors);\n\nimpl ::std::error::Error for MSSQLConnectionManagerError {\n    fn description(&amp;self) -&gt; &amp;str {\n        match self.0 {\n            Errors::TiberiusError(ref e) =&gt; {\n                match e {\n                    tiberius::Error::Io(e) =&gt; e.description(),\n                    tiberius::Error::Protocol(msg) =&gt; &amp;msg,\n                    tiberius::Error::Encoding(msg) =&gt; &amp;msg,\n                    tiberius::Error::Conversion(msg) =&gt; &amp;msg,\n                    tiberius::Error::Utf8(e) =&gt; e.description(),\n                    tiberius::Error::Utf16(e) =&gt; e.description(),\n                    tiberius::Error::ParseInt(e) =&gt; e.description(),\n                    // TODO: parse the server token if possible and report the actual error that occurred, like invalid login, etc.\n                    tiberius::Error::Server(_) =&gt; \"TDS token error occurred! When connecting, most often an invalid login.\",\n                    tiberius::Error::Canceled =&gt; \"Canceled!\",\n                }\n            }\n        }\n    }\n}\n\nimpl ::std::fmt::Display for MSSQLConnectionManagerError {\n    fn fmt(&amp;self, f: &amp;mut ::std::fmt::Formatter) -&gt; ::std::fmt::Result {\n        match self.0 { Errors::TiberiusError(ref e) =&gt; e.fmt(f), }\n    }\n}\n\npub struct MSSQLConnection(TiberiusConnection);\n\npub struct MSSQLConnectionManager { connection_string: String }\n\nimpl MSSQLConnectionManager {\n    pub fn new(connection_string: String) -&gt; MSSQLConnectionManager {\n        MSSQLConnectionManager { connection_string }\n    }\n\n    pub fn from_env() -&gt; Result&lt;MSSQLConnectionManager, ::std::env::VarError&gt; {\n        let connection_string = ::std::env::var(\"MSSQL_CONNECTION_STRING\")?;\n        Ok(MSSQLConnectionManager { connection_string })\n    }\n}\n\nimpl r2d2::ManageConnection for MSSQLConnectionManager {\n    type Connection = MSSQLConnection;\n    type Error = MSSQLConnectionManagerError;\n\n    fn connect(&amp;self) -&gt; Result&lt;Self::Connection, Self::Error&gt; {\n        let connection_result = TiberiusConnection::connect(&amp;self.connection_string)\n            .and_then(|c| Ok(c)).wait();\n        match connection_result {\n            Ok(c) =&gt; Ok(MSSQLConnection(c)),\n            Err(e) =&gt; Err(MSSQLConnectionManagerError(Errors::TiberiusError(e))),\n        }\n    }\n\n    fn is_valid(&amp;self, _conn: &amp;mut Self::Connection) -&gt; Result&lt;(), Self::Error&gt; {\n        // TODO: Fix this quick and dirty implementation by checking the result of a simple query.\n        Ok(())\n    }\n\n    fn has_broken(&amp;self, _conn: &amp;mut Self::Connection) -&gt; bool {\n        // TODO: Fix this quick and dirty implementation by checking underlying TCP socket state.\n        false\n    }\n}\n</code></pre>\n\n<p>The compiler complains about <code>Ok(c) =&gt; Ok(Self::Connection(c)),</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no associated item named `Connection` found for type `persistence::mssql::MSSQLConnectionManager` in the current scope\n  --&gt; src/persistence/mssql.rs:77:25\n   |\n56 | pub struct MSSQLConnectionManager { connection_string: String }\n   | --------------------------------- associated item `Connection` not found for this\n...\n77 |             Ok(c) =&gt; Ok(Self::Connection(c)),\n   |                         ^^^^^^^^^^^^^^^^ associated item not found in `persistence::mssql::MSSQLConnectionManager`\n</code></pre>\n\n<p>When I write it explicitly, like this:</p>\n\n<pre><code>match connection_result {\n    Ok(c) =&gt; Ok(MSSQLConnection(c)),\n    Err(e) =&gt; Err(MSSQLConnectionManagerError(Errors::TiberiusError(e))),\n}\n</code></pre>\n\n<p>Now it compiles successfully.\nI do get the same compiler error though if I try this with L10, by returning <code>Err(Self::Error(e))</code>.</p>\n\n<p>Why doesn't this work as I expect?</p>\n"}, {"tags": ["c", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1538670465, "post_id": 52651264, "comment_id": 92234671, "body": "From the documentation on <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.from_raw_parts\" rel=\"nofollow noreferrer\"><code>Vec::from_raw_parts</code></a>: <i>&quot;<code>ptr</code> needs to have been previously allocated via <code>String</code>/<code>Vec&lt;T&gt;</code> (at least, it&#39;s highly likely to be incorrect if it wasn&#39;t).&quot;</i> Generally, it is meant to be used as a way to recover a <code>Vec</code> that was previously disassembled/forgotten, not as a way to create vectors from an arbitrary memory buffer. As the answer suggests, turning these raw parts into a slice is most likely the right way to go."}], "answers": [{"comments": [{"owner": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "edited": false, "score": 1, "creation_date": 1538670730, "post_id": 52651347, "comment_id": 92234808, "body": "It worked. And I made the first pointer const, like you said. I didn&#39;t know some types manage and others don&#39;t. A lot to learn for rust :( Many thanks."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1538670580, "last_edit_date": 1538670580, "creation_date": 1538669891, "answer_id": 52651347, "question_id": 52651264, "link": "https://stackoverflow.com/questions/52651264/c-to-rust-and-back-pointer-being-freed-was-not-allocated-on-rust-side/52651347#52651347", "title": "C to Rust and back &quot;pointer being freed was not allocated&quot; on Rust side", "body": "<p>If you don't want Rust to deallocate your pointer, don't use types that own the allocation. <code>Vec</code> and <code>CString</code> both take ownership of the pointer and manage it. Presumably you were surprised to need to provide both a length and a capacity?</p>\n\n<p>Use <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\"><code>slice::from_raw_parts</code></a> instead:</p>\n\n<pre><code>extern crate libc;\nextern crate hex;\n\nuse std::ffi::CString;\nuse std::os::raw::c_char;\nuse std::slice;\n\n#[no_mangle]\npub unsafe extern \"C\" fn bytes_to_hex_string(bp: *mut u8, bp_size: usize, sp: *mut c_char) -&gt; i8 {\n    let p_vec = slice::from_raw_parts(bp, bp_size);\n\n    let str = hex::encode(p_vec);\n    let cs = CString::new(str).unwrap();\n\n    libc::strcpy(sp, cs.as_ptr());\n\n    return 1;\n}\n</code></pre>\n\n<p>I didn't test this, so I cannot say if your <code>strcpy</code> is correct. Panicking in a FFI function is undefined behavior, however. It's also surprising that you declare both pointers as mutable... You also don't need to import <code>Vec</code> as it's in the prelude.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"http://jakegoulding.com/rust-ffi-omnibus/slice_arguments/\" rel=\"nofollow noreferrer\">Slice arguments in <em>The Rust FFI Omnibus</em></a></li>\n</ul>\n"}], "owner": {"reputation": 773, "user_id": 4259003, "user_type": "registered", "accept_rate": 20, "profile_image": "https://graph.facebook.com/100008429016474/picture?type=large", "display_name": "Peter Prographo", "link": "https://stackoverflow.com/users/4259003/peter-prographo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 584, "favorite_count": 1, "accepted_answer_id": 52651347, "answer_count": 1, "score": 3, "last_activity_date": 1538670580, "creation_date": 1538669561, "last_edit_date": 1538669828, "question_id": 52651264, "link": "https://stackoverflow.com/questions/52651264/c-to-rust-and-back-pointer-being-freed-was-not-allocated-on-rust-side", "title": "C to Rust and back &quot;pointer being freed was not allocated&quot; on Rust side", "body": "<p>I'm trying to call some Rust code from C and get a result back, but I'm getting a \"pointer being freed was not allocated\" error on the Rust side. </p>\n\n<p>I want to call the <code>hex::encode</code> function. I pass in a pointer to some bytes, the length, and a pointer allocated in C with malloc. I want the result of the conversion passed back at this pointer.</p>\n\n<p>The Rust function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate libc;\n\nuse hex;\nuse std::ffi::CString;\nuse std::os::raw::c_char;\nuse std::vec::Vec;\nuse std::{ffi, ptr, slice};\n\n#[no_mangle]\npub extern \"C\" fn bytes_to_hex_string(bp: *mut u8, bp_size: usize, sp: *mut c_char) -&gt; i8 {\n    println!(\"1\");\n\n    let p_vec = unsafe { Vec::from_raw_parts(bp, bp_size, bp_size + 1) };\n\n    println!(\"2\");\n\n    let str = hex::encode(p_vec);\n\n    println!(\"3\");\n\n    let bytes = str.as_bytes();\n\n    println!(\"4\");\n\n    let cs = CString::new(bytes).unwrap(); // will fail if bytes has \"gap\" (null) in sequence\n\n    println!(\"5\");\n\n    unsafe {\n        libc::strcpy(sp, cs.as_ptr());\n    }\n\n    println!(\"6\");\n\n    return 1;\n}\n</code></pre>\n\n<p>Called from this C code:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint8_t bytes_to_hex( uint8_t *, unsigned int, char *);\n\nint main() {\n  char *ptr = \"Hello World!\";\n  char *hex = (char *)malloc(1000);\n  printf(\"about to call....\\n\");\n  bytes_to_hex_string((uint8_t*)ptr,strlen(ptr),hex); \n  printf(\"about to print....\\n\");\n  printf(\"%s\\n\",hex);\n  printf(\"about to free....\\n\");\n  free(hex);\n}\n</code></pre>\n\n<p>When I run the program:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ./a.out\nabout to call....\n1\n2\na.out(2941,0x7fffccae03c0) malloc: *** error for object 0x10afe2b80: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\nAbort trap: 6\n</code></pre>\n\n<p>It looks like the Rust code inside the hex crate is freeing the <code>ptr</code> pointer, is that right?</p>\n\n<p>Is there a way round this somehow? I would prefer for the allocation and freeing to happen in C, but I am open to any suggestions to solve this!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538669695, "post_id": 52651232, "comment_id": 92234261, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/42028470/155423\">Why is adding a lifetime to a trait with the plus operator (Iterator&lt;Item = &amp;Foo&gt; + &#39;a) needed?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/52651232/edit\">edit</a> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1538670152, "post_id": 52651232, "comment_id": 92234509, "body": "The duplicate applied to this question: the prototype for function <code>parse</code> can be expanded to <code>fn parse(tokens: Box&lt;Iterator&lt;Item = Token&gt; + &#39;static&gt;) -&gt; Program</code>, so it&#39;s expecting a <code>Box</code> containing a value with the static lifetime. Add a generic lifetime parameter to this function to make <code>parse</code> generic over any possible lifetime of the iterator."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1538670444, "post_id": 52651232, "comment_id": 92234658, "body": "It would be nice if the error message included some hints how it inferred the static lifetime."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1538670828, "post_id": 52651232, "comment_id": 92234858, "body": "@SvenMarnach Issue <a href=\"https://github.com/rust-lang/rust/issues/43531\" rel=\"nofollow noreferrer\">#43531</a> seems to focus on this concern."}], "owner": {"reputation": 2667, "user_id": 6078821, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/5fhDI.jpg?s=128&g=1", "display_name": "Andy Carlson", "link": "https://stackoverflow.com/users/6078821/andy-carlson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 28, "favorite_count": 0, "closed_date": 1538670934, "answer_count": 0, "score": 0, "last_activity_date": 1538669600, "creation_date": 1538669452, "last_edit_date": 1538669600, "question_id": 52651232, "link": "https://stackoverflow.com/questions/52651232/cannot-create-iterator-and-bind-to-a-local-variable", "closed_reason": "Duplicate", "title": "Cannot create iterator and bind to a local variable", "body": "<p>I'm implementing a basic code parser in Rust. I want to have an iterator over the tokens of the language. My custom iterator struct will have a borrow to the code <code>String</code> stored in another struct. Here is the implementation:</p>\n\n<pre><code>fn main() {\n    let tokenizer = Tokenizer {\n        code: String::from(\"foo + bar \"),\n    };\n    let token_iter = tokenizer.tokens();\n    let program = parse(Box::new(token_iter));\n    println!(\"{:?}\", program);\n}\n\n#[derive(Debug)]\nenum Token {\n    Symbol(&amp;'static str),\n    Identifier(String),\n}\n\nstruct Tokenizer {\n    code: String,\n}\n\nimpl Tokenizer {\n    fn tokens(&amp;self) -&gt; TokenIterator {\n        TokenIterator::new(&amp;self.code)\n    }\n}\n\nstruct TokenIterator&lt;'a&gt; {\n    code: &amp;'a str,\n}\n\nimpl&lt;'a&gt; TokenIterator&lt;'a&gt; {\n    fn new(code: &amp;'a str) -&gt; TokenIterator {\n        TokenIterator { code: code.trim() }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for TokenIterator&lt;'a&gt; {\n    type Item = Token;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.code.len() == 0 {\n            return None;\n        }\n        if self.code.starts_with(\"+\") {\n            self.code = &amp;self.code[1..].trim_left();\n            return Some(Token::Symbol(\"+\"));\n        }\n        let first_char = self.code.chars().nth(0).unwrap();\n        if first_char.is_alphabetic() || first_char == '_' {\n            let mut ident = String::new();\n            while self.code.chars().nth(0).unwrap().is_alphanumeric()\n                || self.code.chars().nth(0).unwrap() == '_'\n            {\n                ident.push(self.code.chars().nth(0).unwrap());\n                self.code = &amp;self.code[1..];\n            }\n            self.code = self.code.trim_left();\n            return Some(Token::Identifier(ident));\n        }\n        panic!(\"invalid syntax:\\n{}\", self.code)\n    }\n}\n\n#[derive(Debug)]\nstruct Program {\n    name: &amp;'static str,\n    tokens: Vec&lt;Token&gt;,\n}\n\nfn parse(tokens: Box&lt;Iterator&lt;Item = Token&gt;&gt;) -&gt; Program {\n    Program {\n        tokens: tokens.collect(),\n        name: \"foo\",\n    }\n}\n</code></pre>\n\n<p>The compiler does not let me create the iterator and bind it to a variable.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `tokenizer` does not live long enough\n --&gt; src/main.rs:5:26\n  |\n5 |         let token_iter = tokenizer.tokens();\n  |                          ^^^^^^^^^ borrowed value does not live long enough\n...\n8 |     }\n  |     - borrowed value only lives until here\n  |\n  = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>Why does the tokenizer need to live for the <code>'static</code> lifetime? And how come it compiles when I change the <code>main</code> function to consume the iterator in a loop without binding it to a local variable? This code works for some reason...</p>\n\n<pre><code>fn main() {\n    let tokenizer = Tokenizer {\n        code: String::from(\"foo + bar \"),\n    };\n    for token in tokenizer.tokens() {\n        println!(\"{:?}\", token);\n    }\n}\n</code></pre>\n"}, {"tags": ["types", "rust"], "answers": [{"comments": [{"owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "edited": false, "score": 0, "creation_date": 1538669168, "post_id": 52650769, "comment_id": 92234025, "body": "Hmm, <code>Real</code> <a href=\"https://docs.rs/alga/0.7.2/src/alga/general/real.rs.html#33\" rel=\"nofollow noreferrer\">requires <code>Copy</code></a> so that&#39;s already correctly bounded. <a href=\"https://docs.rs/nalgebra/0.16.4/src/nalgebra/base/dimension.rs.html#193-206\" rel=\"nofollow noreferrer\"><code>DimName</code></a> doesn&#39;t, but adding copy with <code>D: DimName + Copy</code> just gives me the same error. There&#39;s also the issue that I&#39;m trying to use <code>VectorN&lt;N, D&gt;</code> which doesn&#39;t let me add bounds on <code>R</code>, <code>C</code> or <code>S</code> as they&#39;re hidden by the alias. Do you have any other suggestions?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "edited": false, "score": 0, "creation_date": 1538669864, "post_id": 52650769, "comment_id": 92234341, "body": "@Bojangles Do not use the alias, use <code>Matrix&lt;N, D, U1, Owned&lt;N, D, U1&gt;&gt;</code>?"}, {"owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "edited": false, "score": 0, "creation_date": 1538691046, "post_id": 52650769, "comment_id": 92242925, "body": "Gave that a go too, still no dice. This is really confusing!"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 0, "last_activity_date": 1538668648, "last_edit_date": 1538668648, "creation_date": 1538667903, "answer_id": 52650769, "question_id": 52650456, "link": "https://stackoverflow.com/questions/52650456/error-when-deriving-copy-on-a-struct-containing-nalgebras-vectorn-type/52650769#52650769", "title": "Error when deriving Copy on a struct containing nalgebra&#39;s VectorN type", "body": "<p>Deriving <code>Copy</code> is special in this case, because <code>Matrix</code> is generic:</p>\n\n<pre><code>#[repr(C)]\n#[derive(Hash, Clone, Copy)]\npub struct Matrix&lt;N: Scalar, R: Dim, C: Dim, S&gt; {\n    /// The data storage that contains all the matrix components and informations about its number\n    /// of rows and column (if needed).\n    pub data: S,\n\n    _phantoms: PhantomData&lt;(N, R, C)&gt;,\n}\n</code></pre>\n\n<p>The marker <code>Copy</code> is implemented only if <code>N</code>, <code>R</code>, <code>C</code> and <code>S</code> are also <code>Copy</code>.</p>\n\n<p>Indeed, you can see this line in the <code>Matrix</code> documentation page:</p>\n\n<pre><code>impl&lt;N: Copy + Scalar, R: Copy + Dim, C: Copy + Dim, S: Copy&gt; Copy for Matrix&lt;N, R, C, S&gt;\n</code></pre>\n\n<p>As a simpler example, this code compiles fine:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct DummyWrapper&lt;T&gt;(T);\n\nfn main() {\n}\n</code></pre>\n\n<p>But of course, you can copy <code>DummyWrapper</code> only if <code>T</code> is copyable too:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nstruct DummyWrapper&lt;T&gt;(T);\n\nfn consume&lt;T&gt;(_t: T) {}\n\nfn main() {\n    // Ok\n    let a = DummyWrapper(42);\n    consume(a);\n    consume(a);\n\n    // Error: move occurs because `a` has type `DummyWrapper&lt;std::string::String&gt;`,\n    // which does not implement the `Copy` trait\n    let a = DummyWrapper(String::from(\"test\"));\n    consume(a);\n    consume(a);\n}\n</code></pre>\n\n<hr>\n\n<p>To make your struct copyable, I am only guessing, but you should add the following bounds:</p>\n\n<pre><code>N: Copy, D: Copy\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1538702975, "last_edit_date": 1538702975, "creation_date": 1538702539, "answer_id": 52657093, "question_id": 52650456, "link": "https://stackoverflow.com/questions/52650456/error-when-deriving-copy-on-a-struct-containing-nalgebras-vectorn-type/52657093#52657093", "title": "Error when deriving Copy on a struct containing nalgebra&#39;s VectorN type", "body": "<p>You must add the bound <code>Owned&lt;N, D&gt;: Copy</code>. <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/storage/type.Owned.html\" rel=\"nofollow noreferrer\"><code>Owned</code></a> is used as part of the <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/type.MatrixMN.html\" rel=\"nofollow noreferrer\"><code>MatrixMN</code></a> type alias. <code>Owned</code> ends up being a type alias for <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/struct.MatrixArray.html\" rel=\"nofollow noreferrer\"><code>MatrixArray</code></a>.</p>\n\n<pre><code>extern crate nalgebra;\n\nuse nalgebra::{DefaultAllocator, DimName, Real, VectorN};\nuse nalgebra::allocator::Allocator;\nuse nalgebra::storage::Owned;\n\n#[derive(Clone, Debug, Copy, PartialEq)]\npub struct LinearPathSegment&lt;N: Real, D: DimName&gt;\nwhere\n    DefaultAllocator: Allocator&lt;N, D&gt;,\n    Owned&lt;N, D&gt;: Copy,\n{\n    pub some_vec: VectorN&lt;N, D&gt;,\n    pub some_scalar: N,\n}\n</code></pre>\n\n<p><a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/trait.Real.html\" rel=\"nofollow noreferrer\"><code>Real</code></a> requires <code>Copy</code>, and <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/dimension/trait.DimName.html\" rel=\"nofollow noreferrer\"><code>DimName</code></a> requires <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/dimension/trait.Dim.html\" rel=\"nofollow noreferrer\"><code>Dim</code></a> which requires <code>Copy</code>, so <code>N</code> and <code>D</code> don't need to have an explicit <code>Copy</code> bound. But for some reason, the compiler is unable to prove that <code>MatrixArray</code> is <code>Copy</code>. I suspect this comes from the bound <code>GenericArray&lt;N, Prod&lt;R::Value, C::Value&gt;&gt;: Copy</code> in its <code>Copy</code> implementation.</p>\n\n<p>Another option is to add the bound <code>VectorN&lt;N, D&gt;: Copy</code>.</p>\n\n<p>Note that either option forces every use of your struct to meet that bound. If that's not what you want, you must write a manual impl for <code>Copy</code> with the appropriate bounds instead of deriving it.</p>\n\n<pre><code>impl&lt;N, D&gt; Copy for LinearPathSegment&lt;N, D&gt;\nwhere\n    N: Real,\n    D: DimName,\n    DefaultAllocator: Allocator&lt;N, D&gt;,\n    VectorN&lt;N, D&gt;: Copy,\n{\n}\n</code></pre>\n"}], "owner": {"reputation": 90923, "user_id": 383609, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/64555e5f0e0ee1ecbf3eaaf0dc137328?s=128&d=identicon&r=PG", "display_name": "Bojangles", "link": "https://stackoverflow.com/users/383609/bojangles"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 144, "favorite_count": 0, "accepted_answer_id": 52657093, "answer_count": 2, "score": 4, "last_activity_date": 1538702975, "creation_date": 1538666996, "last_edit_date": 1538681563, "question_id": 52650456, "link": "https://stackoverflow.com/questions/52650456/error-when-deriving-copy-on-a-struct-containing-nalgebras-vectorn-type", "title": "Error when deriving Copy on a struct containing nalgebra&#39;s VectorN type", "body": "<p>I'm attempting to use <a href=\"https://docs.rs/nalgebra/0.16.4/nalgebra/base/type.VectorN.html\" rel=\"nofollow noreferrer\">nalgebra's <code>VectorN</code></a> type to implement some dimension-agnostic calculations, but I'm getting some odd errors around the <code>Copy</code> trait. The below contrived test case demonstrates the problem:</p>\n\n<pre><code>extern crate nalgebra;\n\nuse nalgebra::allocator::Allocator;\nuse nalgebra::{DefaultAllocator, DimName, Real, VectorN};\n\n#[derive(Clone, Debug, Copy, PartialEq)]\npub struct LinearPathSegment&lt;N: Real, D: DimName&gt;\nwhere\n    DefaultAllocator: Allocator&lt;N, D&gt;,\n{\n    pub some_vec: VectorN&lt;N, D&gt;,\n    pub some_scalar: N,\n}\n</code></pre>\n\n<p><a href=\"https://github.com/jamwaffles/so-vector-copy-demonstration/commit/19de33dd22b57e2c2ec297f101b93935a4675b25\" rel=\"nofollow noreferrer\">Clone and run <code>cargo build</code> in this repo to reproduce</a></p>\n\n<p>The error output by the compiler (rustc 1.29.1 (b801ae664 2018-09-20)) is this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0204]: the trait `Copy` may not be implemented for this type\n  --&gt; src/lib.rs:6:24\n   |\n6  | #[derive(Clone, Debug, Copy, PartialEq)]\n   |                        ^^^^\n...\n11 |     pub some_vec: VectorN&lt;N, D&gt;,\n   |     --------------------------- this field does not implement `Copy`\n</code></pre>\n\n<p>I'm certain that <code>VectorN</code> does implement <code>Copy</code>; by following the type aliases through the chain <code>VectorN&lt;...&gt; -&gt; MatrixMN&lt;...&gt; -&gt; Matrix&lt;...&gt;</code> we see that <a href=\"https://docs.rs/nalgebra/0.16.4/src/nalgebra/base/matrix.rs.html#75\" rel=\"nofollow noreferrer\"><code>Copy</code> is <code>#[derive()]</code>d on <code>Matrix</code></a>, which should mean it is derived for <code>VectorN</code> too. Why is the compiler saying otherwise? What do I need to do to make <code>VectorN</code> copyable?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538666197, "post_id": 52650080, "comment_id": 92232187, "body": "<i><code>from_utf8()</code> would return the partially decoded string and the position of the decoding error</i> \u2014 <a href=\"https://doc.rust-lang.org/std/str/struct.Utf8Error.html#method.valid_up_to\" rel=\"nofollow noreferrer\">It does</a>."}, {"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538666414, "post_id": 52650080, "comment_id": 92232339, "body": "Yes it does return the position in <code>Utf8Error</code>, but not the partially decoded (valid) string."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538666500, "post_id": 52650080, "comment_id": 92232407, "body": "Then just slice the input and convert it with <code>from_utf8_unchecked</code>."}, {"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1538666715, "post_id": 52650080, "comment_id": 92232550, "body": "Ah yes I could do that. But unfortunately that requires an unsafe block, when it would be possible without an unsafe block if it was returned by the error."}, {"owner": {"reputation": 36166, "user_id": 393701, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/250889c646cd2a916920d9252f7c6f42?s=128&d=identicon&r=PG", "display_name": "SirDarius", "link": "https://stackoverflow.com/users/393701/sirdarius"}, "edited": false, "score": 1, "creation_date": 1538667427, "post_id": 52650080, "comment_id": 92233035, "body": "There&#39;s an interesting blog post related to this topic: <a href=\"https://www.fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust\" rel=\"nofollow noreferrer\">fpcomplete.com/blog/2018/07/streaming-utf8-haskell-rust</a>"}], "answers": [{"comments": [{"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "edited": false, "score": 0, "creation_date": 1538739828, "post_id": 52650745, "comment_id": 92259529, "body": "I was going to provide the input file, but I didn&#39;t see any way to attach the file on StackOverflow."}, {"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "edited": false, "score": 0, "creation_date": 1538739999, "post_id": 52650745, "comment_id": 92259617, "body": "I actually expected BufReader to act like a circular read buffer, but I now realise that it isn&#39;t designed to work that way."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1538668575, "last_edit_date": 1538668575, "creation_date": 1538667830, "answer_id": 52650745, "question_id": 52650080, "link": "https://stackoverflow.com/questions/52650080/why-does-calling-bufreaderfill-buf-after-calling-consume-return-fewer-bytes-th/52650745#52650745", "title": "Why does calling BufReader::fill_buf after calling consume return fewer bytes than I expect?", "body": "<p>I encourage you to learn how to produce a <a href=\"/help/mcve\">Minimal, Complete, and Verifiable example</a>. This is a valuable skill that professional programmers use to better understand problems and focus attention on the important aspects of a problem. For example, you didn't provide the actual input file, so it's very difficult for anyone to reproduce your behavior using the code you provided.</p>\n\n<p>After trial-and-error, I was able to reduce your problem down to this code:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut reader = io::BufReader::with_capacity(100, io::repeat(b'a'));\n\n    let a = reader.fill_buf()?.len();\n    reader.consume(98);\n    let b = reader.fill_buf()?.len();\n\n    println!(\"{}, {}\", a, b); // 100, 2\n\n    Ok(())\n}\n</code></pre>\n\n<p>Unfortunately for your case, this behavior is allowed by the contract of <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html\" rel=\"nofollow noreferrer\"><code>BufRead</code></a> and is in fact almost <em>required</em>. The point of a buffered reader is to avoid making calls to the underlying reader as much as possible. The trait does not know how many bytes you need to read, and it doesn't know that 2 bytes isn't enough and it should perform another call. Flipping it the other way, pretend you had only consumed 1 byte out of 100 \u2014 would you want all 99 of those remaining bytes to be copied in memory and then perform another underlying read? That would be slower than not using a <code>BufRead</code> in the first place!</p>\n\n<p>The trait also doesn't have any provisions for moving the remaining bytes in the buffer to the beginning and then filling the buffer again. This is something that seems like it could be added to the concrete <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\"><code>BufReader</code></a>, so you may wish to provide a pull request to add it.</p>\n\n<p>For now, I'd recommend using <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_exact\" rel=\"nofollow noreferrer\"><code>Read::read_exact</code></a> at the end of the buffer:</p>\n\n<pre><code>use std::io::{self, BufRead, Read};\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut reader = io::BufReader::with_capacity(100, io::repeat(b'a'));\n\n    let a = reader.fill_buf()?.len();\n    reader.consume(98);\n\n    let mut leftover = [0u8; 4]; // a single UTF-8 character is at most 4 bytes\n    // Assume we know we need 3 bytes based on domain knowledge\n    reader.read_exact(&amp;mut leftover[..3])?;\n\n    let b = reader.fill_buf()?.len();\n\n    println!(\"{}, {}\", a, b); // 100, 99\n\n    Ok(())\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/9533258/155423\">What is the maximum number of bytes for a UTF-8 encoded character?</a></li>\n</ul>\n"}], "owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 406, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1538668575, "creation_date": 1538665818, "last_edit_date": 1538666111, "question_id": 52650080, "link": "https://stackoverflow.com/questions/52650080/why-does-calling-bufreaderfill-buf-after-calling-consume-return-fewer-bytes-th", "title": "Why does calling BufReader::fill_buf after calling consume return fewer bytes than I expect?", "body": "<p>I am trying to implement streaming of UTF-8 characters from a file. This is what I've got so far, please excuse the ugly code for now.</p>\n\n<pre><code>use std::fs::File;\nuse std::io;\nuse std::io::BufRead;\nuse std::str;\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let mut reader = io::BufReader::with_capacity(100, File::open(\"utf8test.txt\")?);\n    loop {\n        let mut consumed = 0;\n        {\n            let buf = reader.fill_buf()?;\n            println!(\"buf len: {}\", buf.len());\n            match str::from_utf8(&amp;buf) {\n                Ok(s) =&gt; {\n                    println!(\"====\\n{}\", s);\n                    consumed = s.len();\n                }\n                Err(err) =&gt; {\n                    if err.valid_up_to() == 0 {\n                        println!(\"1. utf8 decoding failed!\");\n                    } else {\n                        match str::from_utf8(&amp;buf[..err.valid_up_to()]) {\n                            Ok(s) =&gt; {\n                                println!(\"====\\n{}\", s);\n                                consumed = s.len();\n                            }\n                            _ =&gt; println!(\"2. utf8 decoding failed!\"),\n                        }\n                    }\n                }\n            }\n        }\n        if consumed == 0 {\n            break;\n        }\n        reader.consume(consumed);\n        println!(\"consumed {} bytes\", consumed);\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>I have a test file with a multibyte character at offset 98 which fails to decode as it does not fit completely into my (arbitrarily-sized) 100 byte buffer. That's fine, I just ignore it and decode what is valid up to the start of that character.</p>\n\n<p>The problem is that after calling <code>consume(98)</code> on the <code>BufReader</code>, the next call to <code>fill_buf()</code> only returns 2 bytes... it seems to have not bothered to read any more bytes into the buffer. I don't understand why. Maybe I have misinterpreted the documentation.</p>\n\n<p>Here is the sample output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>buf len: 100\n====\nUTF-8 encoded sample plain-text file\n\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\nconsumed 98 bytes\nbuf len: 2\n1. utf8 decoding failed!\n</code></pre>\n\n<p>It would be nice if <code>from_utf8()</code> would return the partially decoded string and the position of the decoding error so I don't have to call it twice whenever this happens, but there doesn't seem to be such a function in the standard library (that I am aware of).</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1538657634, "post_id": 52646755, "comment_id": 92226294, "body": "Looks like that answer is obsolete, since it looks like CheckedAdd, etc. have been removed from Rust (the links return 404)."}, {"owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1538657675, "post_id": 52646755, "comment_id": 92226318, "body": "The second answer seems to be what I was looking for: <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html#method.overflowing_add\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/std/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 4, "last_activity_date": 1538660789, "last_edit_date": 1538660789, "creation_date": 1538656344, "answer_id": 52646814, "question_id": 52646755, "link": "https://stackoverflow.com/questions/52646755/checking-for-integer-overflow-in-rust/52646814#52646814", "title": "Checking for integer overflow in Rust", "body": "<p>The functions are named <code>checked_[operator]</code>. See <a href=\"https://doc.rust-lang.org/std/primitive.i32.html#method.checked_add\" rel=\"nofollow noreferrer\"><code>checked_add</code></a> for example:</p>\n\n<pre><code>fn main() {\n    let x: u8 = 255;\n    let y: u8 = 1;\n    let z = x.checked_add(y);\n\n    assert_eq!(z, None);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 992, "user_id": 3089519, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e1dc4dfcc798a49c1de0b2dcca4dee3c?s=128&d=identicon&r=PG", "display_name": "swalladge", "link": "https://stackoverflow.com/users/3089519/swalladge"}, "is_accepted": false, "score": 3, "last_activity_date": 1538658774, "last_edit_date": 1538658774, "creation_date": 1538658083, "answer_id": 52647424, "question_id": 52646755, "link": "https://stackoverflow.com/questions/52646755/checking-for-integer-overflow-in-rust/52647424#52647424", "title": "Checking for integer overflow in Rust", "body": "<p>The standard library integer types have <code>checked_*</code> methods for common operations, such as <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.checked_add\" rel=\"nofollow noreferrer\">checked_add</a> for addition, etc.</p>\n\n<p>Example from the docs:</p>\n\n<pre><code>assert_eq!((u32::max_value() - 2).checked_add(1), Some(u32::max_value() - 1));\nassert_eq!((u32::max_value() - 2).checked_add(3), None);\n</code></pre>\n\n<p>A working example with a similar construct as your example could be:</p>\n\n<pre><code>let x = u32::max_value() - 2;\nlet y = 3;\n\nmatch x.checked_add(y) {\n    Some(v) =&gt; {\n        println!(\"{} + {} = {}\", x, y, v);\n    }\n    None =&gt; {\n        println!(\"overflow!\");\n    }\n};\n</code></pre>\n"}], "owner": {"reputation": 649, "user_id": 452625, "user_type": "registered", "accept_rate": 36, "profile_image": "https://www.gravatar.com/avatar/31108d8fc464d4af7816a02406d9ddac?s=128&d=identicon&r=PG", "display_name": "Luke McCarthy", "link": "https://stackoverflow.com/users/452625/luke-mccarthy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5788, "favorite_count": 1, "closed_date": 1538658881, "accepted_answer_id": 52646814, "answer_count": 2, "score": 4, "last_activity_date": 1538660789, "creation_date": 1538656177, "question_id": 52646755, "link": "https://stackoverflow.com/questions/52646755/checking-for-integer-overflow-in-rust", "closed_reason": "Duplicate", "title": "Checking for integer overflow in Rust", "body": "<p>Is there a canonical way to explicitly check for integer overflow in Rust? I Googled around but couldn't find the answer.</p>\n\n<p>Something like:</p>\n\n<pre><code>match add_or_overflow(x, y) {\n  None    =&gt; println!(\"overflow!\"),\n  Some(z) =&gt; println!(\"{} + {} = {}\", x, y, z),\n}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>let x = OverflowChecked&lt;i32&gt;(_x);\nlet y = OverflowChecked&lt;i32&gt;(_y);\nmatch x + y {\n  OverflowChecked::Overflow =&gt; println!(\"overflow!\"),\n  OverflowChecked::Value(z) =&gt; println!(\"{} + {} = {}\", x, y, z),\n}\n</code></pre>\n\n<p>I could write this manually since Rust guarantees wrapping semantics, but I was just checking that there isn't some standard way to do this.</p>\n"}, {"tags": ["rust", "protocol-buffers"], "answers": [{"comments": [{"owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1538648408, "post_id": 52643887, "comment_id": 92220711, "body": "Thanks @Stargateur. This was what I was thinking as well. But was just to able to see anything around the parse_from_bytes method documentation."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 1, "last_activity_date": 1538663261, "last_edit_date": 1538663261, "creation_date": 1538647071, "answer_id": 52643887, "question_id": 52641836, "link": "https://stackoverflow.com/questions/52641836/how-can-i-use-protobufparse-from-bytes-for-a-rust-struct/52643887#52643887", "title": "How can I use protobuf::parse_from_bytes for a Rust struct?", "body": "<p>If I understand how this works, you can't implement this yourself: the API is designed to generate Rust code from a <code>.proto</code> file.</p>\n\n<p>The <a href=\"https://github.com/stepancheg/rust-protobuf/#invoke-protoc-programmatically-with-protoc-rust-crate-recommended\" rel=\"nofollow noreferrer\">doc</a> says that the recommended way is to use <a href=\"https://github.com/stepancheg/rust-protobuf/tree/master/protoc-rust\" rel=\"nofollow noreferrer\">protoc-rust</a> to generate the code.</p>\n\n<p>As for what to write in the <code>.proto</code> file, the <a href=\"https://developers.google.com/protocol-buffers/docs/overview\" rel=\"nofollow noreferrer\">doc</a> is here.</p>\n"}], "owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 306, "favorite_count": 1, "accepted_answer_id": 52643887, "answer_count": 1, "score": 0, "last_activity_date": 1538663261, "creation_date": 1538640058, "last_edit_date": 1538663222, "question_id": 52641836, "link": "https://stackoverflow.com/questions/52641836/how-can-i-use-protobufparse-from-bytes-for-a-rust-struct", "title": "How can I use protobuf::parse_from_bytes for a Rust struct?", "body": "<p>I have defined a <code>ProcessState</code> structure:</p>\n\n<pre><code>#[derive(Clone, Debug, PartialEq, Default)]\npub struct ProcessState {\n    pub file_sample: FileSample,\n    pub estimate: Estimate,\n    pub estimate_cache: HashMap&lt;String, Estimate&gt;,\n    pub total_count: u64,\n    pub systems: HashMap&lt;String, SystemState&gt;,\n    pub aggregate_clock: u64,\n    pub aggregate_mean: f64,\n    pub file_samples: VecDeque&lt;FileSample&gt;,\n}\n</code></pre>\n\n<p>How do I make use of the <a href=\"https://docs.rs/protobuf/*/protobuf/fn.parse_from_bytes.html\" rel=\"nofollow noreferrer\"><code>parse_from_bytes</code></a> function on this? Do I need to define a proto message for my structure in order to use this method?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5333, "user_id": 5182917, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/wKaT1.jpg?s=128&g=1", "display_name": "Anurag Awasthi", "link": "https://stackoverflow.com/users/5182917/anurag-awasthi"}, "edited": false, "score": 0, "creation_date": 1538633148, "post_id": 52639162, "comment_id": 92212403, "body": "I dont think you can delete crates once published,"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1538641361, "post_id": 52639162, "comment_id": 92216563, "body": "Prevention is possible: <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish--field-optional\" rel=\"nofollow noreferrer\"><code>publish = false</code></a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 8, "creation_date": 1538635133, "post_id": 52640114, "comment_id": 92213356, "body": "As a moderator, the idea of recommending violating the Code of Conduct does not sit well with me."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1538637642, "post_id": 52640114, "comment_id": 92214649, "body": "@MatthieuM. This code of conduct is only a private set of rules of a private company. There is nothing illegal in this recommendation."}, {"owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1538638436, "post_id": 52640114, "comment_id": 92215019, "body": "@MatthieuM. I said <i>as a last resort</i> (after the typo fix), for this very reason. Unfortunately, Crates.io does not document any other removal procedure."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1538638823, "post_id": 52640114, "comment_id": 92215242, "body": "Because there is no other removal procedure. This is by design: <a href=\"https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/\" rel=\"nofollow noreferrer\">to avoid breaking other packages</a>. Instead <code>cargo</code> allow you to <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html#cargo-yank\" rel=\"nofollow noreferrer\">yank a crate</a>."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 4, "creation_date": 1538639183, "post_id": 52640114, "comment_id": 92215430, "body": "@mcarton No, yank is not here for that, as doc said &quot;This feature is not intended for deleting accidentally uploaded secrets, for example.&quot;"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1538644468, "post_id": 52640114, "comment_id": 92218387, "body": "@FlorianWeimer: Just because there is no officially documented procedure does not mean that the administrators are not reasonable human beings; this is the Rust community we are talking about here. I find immediately recommending nuclear options as fallbacks (legal and CoC violations) to be quite unnecessary."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1538644533, "post_id": 52640114, "comment_id": 92218421, "body": "@Boiethios: Just because it&#39;s not illegal does not mean it&#39;s welcome."}], "tags": [], "owner": {"reputation": 26934, "user_id": 8316315, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d833a8a46fea39d7bfca1540ea9c07?s=128&d=identicon&r=PG&f=1", "display_name": "Florian Weimer", "link": "https://stackoverflow.com/users/8316315/florian-weimer"}, "is_accepted": false, "score": 1, "last_activity_date": 1538646712, "last_edit_date": 1538646712, "creation_date": 1538633513, "answer_id": 52640114, "question_id": 52639162, "link": "https://stackoverflow.com/questions/52639162/how-to-delete-a-published-crate-from-crates-io/52640114#52640114", "title": "How to delete a published crate from crates.io?", "body": "<p>The <a href=\"https://crates.io/policies\" rel=\"nofollow noreferrer\">Crates.io policies</a> say this under <em>Removal</em>:</p>\n\n<blockquote>\n  <p>We will do what the law requires us to do, and address flagrant violations of the Rust Code of Conduct. [\u2026] Crates.io will respect Mozilla Legal\u2019s decisions with regards to content that is hosted.</p>\n</blockquote>\n\n<p>I suggest to send mail to <code>help@crates.io</code> as a start, and if they prove uncooperative, escalate to Mozilla Legal.  Only as a last resort, add a deliberate Code of Conduct violation to trigger the removal.</p>\n\n<p><strong>EDIT</strong> I agree that this is not a desirable situation, so I submitted a <a href=\"https://github.com/rust-lang/crates.io/pull/1506\" rel=\"nofollow noreferrer\">pull request with a proposed policy change</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 1, "last_activity_date": 1538641432, "last_edit_date": 1538641432, "creation_date": 1538637602, "answer_id": 52641128, "question_id": 52639162, "link": "https://stackoverflow.com/questions/52639162/how-to-delete-a-published-crate-from-crates-io/52641128#52641128", "title": "How to delete a published crate from crates.io?", "body": "<p>You cannot delete a crate once it is published. However, you can <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html#cargo-yank\" rel=\"nofollow noreferrer\">yank it</a> to mark your crate as not usable: basically, nobody will use it, and no or few people will want to see the content. This policy allows to forbid the arbitrary breakage of other crates that use your package as a dependency.</p>\n\n<p>If you have code or information in this crate that you do not want to be public, refer to <a href=\"https://stackoverflow.com/a/52640114/4498831\">the other answer</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 16, "last_activity_date": 1538645683, "creation_date": 1538645683, "answer_id": 52643490, "question_id": 52639162, "link": "https://stackoverflow.com/questions/52639162/how-to-delete-a-published-crate-from-crates-io/52643490#52643490", "title": "How to delete a published crate from crates.io?", "body": "<h3>Prevention</h3>\n\n<p>To avoid this situation in the future, ensure that you include:</p>\n\n<pre><code>[package]\n# ...\npublish = false\n</code></pre>\n\n<p>in your crate's Cargo.toml. See <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish--field-optional\" rel=\"noreferrer\">documentation</a>.</p>\n\n<h3>Mitigation</h3>\n\n<p>Immediately <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html#cargo-yank\" rel=\"noreferrer\">yank</a> the crate using:</p>\n\n<pre><code>cargo yank --vers &lt;your-version&gt;\n</code></pre>\n\n<p>This will prevent any other crate to accidentally start depending on it.</p>\n\n<p>If any secret was accidentally published (passwords, keys, ...), consider them no longer secret and take appropriate steps to replace them with fresh ones.</p>\n\n<h3>Removal</h3>\n\n<p>Contact help at crates.io and explain the situation, asking for removal.</p>\n\n<p>If your explanation is well-founded, and the crate has not been downloaded and thus depended on, they have no reason to refuse helping.</p>\n\n<p>Please be patient; once the crate is yanked nobody can start depending on it anyway, so there should be little time pressure. Give the team a few days to actually perform the removal.</p>\n\n<p>If the matter is time sensitive for some reason, you can hop on IRC or Discourse and grab the attention of someone with the powers to perform the removal. Ask and you'll be directed to such a person.</p>\n"}], "owner": {"reputation": 291, "user_id": 9143626, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/43746df168c59ad554c770f60b805fa3?s=128&d=identicon&r=PG&f=1", "display_name": "Allen Lee", "link": "https://stackoverflow.com/users/9143626/allen-lee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2095, "favorite_count": 3, "answer_count": 3, "score": 10, "last_activity_date": 1538662799, "creation_date": 1538628231, "last_edit_date": 1538662799, "question_id": 52639162, "link": "https://stackoverflow.com/questions/52639162/how-to-delete-a-published-crate-from-crates-io", "title": "How to delete a published crate from crates.io?", "body": "<p>I have accidentally published my private crate to crates.io. How do I delete it? I checked the <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html\" rel=\"noreferrer\">documentation</a> but it seems like there is no way to delete a published crate. </p>\n"}]