[{"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 11, "last_activity_date": 1525023432, "last_edit_date": 1525023432, "creation_date": 1432158302, "answer_id": 30360936, "question_id": 30360269, "link": "https://stackoverflow.com/questions/30360269/why-does-a-for-loop-not-require-a-mutable-iterator/30360936#30360936", "title": "Why does a for loop not require a mutable iterator?", "body": "<p>That's exactly right. Since it's moved to the for loop, the for loop now owns it and can do whatever it wants with it, including \"making it\" mutable. Consider this analogous example, where we appear to be mutating <code>xs</code> despite it being immutable, but really it's because we're moving it, so the new owner is free to do with it whatever it wants, including re-binding it as mutable:</p>\n\n<pre><code>let xs: Vec&lt;i32&gt; = vec![1, 2, 3];\n\nfn append(v: Vec&lt;i32&gt;, x: i32) -&gt; Vec&lt;i32&gt; {\n    let mut my_v = v;\n    my_v.push(x);\n    my_v\n}\n\nlet appended = append(xs, 4);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=045ba44ab0a9fce81441&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Note that the function can be made shorter using the <code>mut</code> parameter convenience syntax:</p>\n\n<pre><code>fn append(mut v: Vec&lt;i32&gt;, x: i32) -&gt; Vec&lt;i32&gt; {\n    v.push(x);\n    v\n}\n</code></pre>\n\n<p>This is more or less explained <a href=\"https://doc.rust-lang.org/std/iter/#for-loops-and-intoiterator\" rel=\"nofollow noreferrer\">in the <code>iter</code> module's documentation</a>.</p>\n"}], "owner": {"reputation": 185, "user_id": 1525075, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d7ee8d588036ad4598f1495f277eba6?s=128&d=identicon&r=PG", "display_name": "Roy", "link": "https://stackoverflow.com/users/1525075/roy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 503, "favorite_count": 0, "accepted_answer_id": 30360936, "answer_count": 1, "score": 13, "last_activity_date": 1525023432, "creation_date": 1432155572, "last_edit_date": 1525023038, "question_id": 30360269, "link": "https://stackoverflow.com/questions/30360269/why-does-a-for-loop-not-require-a-mutable-iterator", "title": "Why does a for loop not require a mutable iterator?", "body": "<p>If I want to consume an iterator by hand, it has to be mutable:</p>\n\n<pre><code>let test = vec![1, 2, 3];\nlet mut test_mut = test.iter();\nwhile let Some(val) = test_mut.next() {\n    println!(\"{:?}\", val);\n}\n</code></pre>\n\n<p>But I can happily consume it with a <code>for</code> loop, even if it's immutable.</p>\n\n<pre><code>let test = vec![1, 2, 3];\nlet test_imm = test.iter();\nfor val in test_imm {\n    println!(\"{:?}\", val);\n}\n</code></pre>\n\n<p>I <em>think</em> this works because <code>test_imm</code> is moved into the for loop's block, so <code>test_imm</code> can't be used by the outer block any more and is (from the point of view of the outer block) immutable up until the for loop, and then it's inaccessible, so it's okay.</p>\n\n<p>Is that right? Is there more to be explained?</p>\n"}, {"tags": ["rust", "traits", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "edited": false, "score": 0, "creation_date": 1432147748, "post_id": 30356208, "comment_id": 48807771, "body": "Thanks a lot for that answer! I really missed that if lifetime is exposed, trait cannot be easily used as a type parameter."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 5, "last_activity_date": 1432141964, "creation_date": 1432141964, "answer_id": 30356208, "question_id": 30355949, "link": "https://stackoverflow.com/questions/30355949/what-are-reasons-for-fromstr-trait-not-exposing-lifetime/30356208#30356208", "title": "What are reasons for FromStr trait not exposing lifetime?", "body": "<p>Including the lifetime makes the trait more complicated and, more specifically, makes generic code using that trait more verbose (carrying around an unneeded lifetime). <code>fn foo&lt;T: FromStr&gt;</code> would <a href=\"http://is.gd/R5XDhJ\" rel=\"noreferrer\">no longer work</a>.</p>\n\n<p>It's also unnecessary for the intended uses of strings. Usually you <em>parse</em> from a string and use the result without worrying about the string. It's certainly easier to code that way. Many types don't need the lifetime anyway (see the long list of types implementing it).</p>\n\n<p>You can't implement <code>FromStr</code> for this type. What you can do is</p>\n\n<pre><code>impl&lt;'a&gt; From&lt;&amp;'a str&gt; for MyIterator&lt;'a&gt; { ... }\n</code></pre>\n\n<p>This gives you a lot of generic conversion machinery, just not the method <code>str::parse()</code>. Perhaps the name of that method is another argument for the omission of the lifetime.</p>\n"}], "owner": {"reputation": 499, "user_id": 4867446, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh3.googleusercontent.com/-sp2oLGjecIA/AAAAAAAAAAI/AAAAAAAAAIA/41wEvRe4avs/photo.jpg?sz=128", "display_name": "Slava Baginov", "link": "https://stackoverflow.com/users/4867446/slava-baginov"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 539, "favorite_count": 0, "accepted_answer_id": 30356208, "answer_count": 1, "score": 2, "last_activity_date": 1432141964, "creation_date": 1432141026, "last_edit_date": 1495540903, "question_id": 30355949, "link": "https://stackoverflow.com/questions/30355949/what-are-reasons-for-fromstr-trait-not-exposing-lifetime", "title": "What are reasons for FromStr trait not exposing lifetime?", "body": "<p>Rust FromStr trait is defined like this</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait FromStr {\n    type Err;\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt;;\n}\n</code></pre>\n\n<p>It does not name its lifetime and one cannot implement that trait for something containing reference to source string, for example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyIterator&lt;'a&gt; {\n    cur_pointer: &amp;'a str\n}\n\nimpl&lt;'a&gt; FromStr for MyIterator&lt;'a&gt; {\n    type Err = i32;\n    fn from_str(s: &amp;'a str) -&gt; Result&lt;Self, Self::Err&gt; {\n        Ok(MyIterator { cur_pointer: s })\n    }\n}\n</code></pre>\n\n<p>gives error</p>\n\n<pre><code>method `from_str` has an incompatible type for trait: expected bound lifetime parameter , found concrete lifetime [E0053]\n</code></pre>\n\n<p>By far I found no way to implement FromStr for MyIterator. I assume that is because original trait did not expose string's lifetime in its parameters.\nMy first question is: am I right that there is no way to implement FromStr for MyIterator? If I'm wrong, what is a way to do it (assuming MyIterator wants to keep reference to original string)?</p>\n\n<p>By now I found only this question: <a href=\"https://stackoverflow.com/questions/28931515/how-do-i-implement-fromstr-with-a-concrete-lifetime\">How do I implement FromStr with a concrete lifetime?</a>, but best answer starts with \"I don't believe that you can implement\", so I want to be sure this is really impossible in Rust 1.0.0. </p>\n\n<p>Now, if trait definition was like that:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait MyFromStr&lt;'a&gt; {\n    type Err;\n    fn from_str(s: &amp;'a str) -&gt; Result&lt;Self, Self::Err&gt;;\n}\n</code></pre>\n\n<p>one could implement it for types containing references to original string and not containing references to original string:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyIterator&lt;'a&gt; {\n    cur_pointer: &amp;'a str\n}\n\nimpl&lt;'a&gt; MyFromStr&lt;'a&gt; for MyIterator&lt;'a&gt; {\n    type Err = i32;\n    fn from_str(s: &amp;'a str) -&gt; Result&lt;Self, Self::Err&gt; {\n        Ok(MyIterator { cur_pointer: s })\n    }\n}\n\nstruct MyCopy {\n    val: String\n}\n\nimpl&lt;'a&gt; MyFromStr&lt;'a&gt; for MyCopy {\n    type Err = i32;\n    fn from_str(s: &amp;'a str) -&gt; Result&lt;Self, Self::Err&gt; {\n        Ok(MyCopy { val: s.to_string() })\n    }\n}\n</code></pre>\n\n<p>My second question is: is there any particular reason that trait FromStr does not expose lifetime? Maybe I misunderstand something about lifetimes and exposing lifetime has drawbacks?</p>\n"}, {"tags": ["input", "integer", "rust", "user-input"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1432143742, "post_id": 30355516, "comment_id": 48805432, "body": "I think it does run on stable if you only need to read one value at a time."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1432147846, "post_id": 30355516, "comment_id": 48807825, "body": "<code>text_io</code> dev here. @VladimirMatveev is right, <code>text_io</code> runs on stable if you don&#39;t read tuples but just a single value per <code>read!()</code> invocation. It actually requires nightly for multiple values. I&#39;ll update the github description."}, {"owner": {"reputation": 1885, "user_id": 5424731, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4bf3b6355750186d1dcef4fbed296d49?s=128&d=identicon&r=PG&f=1", "display_name": "joe_04_04", "link": "https://stackoverflow.com/users/5424731/joe-04-04"}, "edited": false, "score": 0, "creation_date": 1521536519, "post_id": 30355516, "comment_id": 85760535, "body": "Is there a better option now?  After 3 years of Rust being out, I would assume there would be better ways of inputting values into integer variables.  The solution suggested is what I encountered in the rust book, but its lengthy and feels a bit overkill for input.  The <code>text_io</code> suggestion is great, but I&#39;m not able to print statements out from functions before using <code>read!()</code>"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 1885, "user_id": 5424731, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4bf3b6355750186d1dcef4fbed296d49?s=128&d=identicon&r=PG&f=1", "display_name": "joe_04_04", "link": "https://stackoverflow.com/users/5424731/joe-04-04"}, "edited": false, "score": 0, "creation_date": 1521547533, "post_id": 30355516, "comment_id": 85768272, "body": "@joe_04_04 What do you mean by &quot;print statements out from functions before using <code>read!()</code> ?"}, {"owner": {"reputation": 1885, "user_id": 5424731, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4bf3b6355750186d1dcef4fbed296d49?s=128&d=identicon&r=PG&f=1", "display_name": "joe_04_04", "link": "https://stackoverflow.com/users/5424731/joe-04-04"}, "edited": false, "score": 0, "creation_date": 1521609351, "post_id": 30355516, "comment_id": 85798616, "body": "@DanielFath, if I use <code>println!()</code> before trying to use <code>read!()</code> from <code>text_io</code>, items that are supposed to print from <code>println!()</code> do not get printed until after the <code>read!()</code> method."}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": false, "score": 14, "last_activity_date": 1566225200, "last_edit_date": 1566225200, "creation_date": 1432139569, "answer_id": 30355516, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/30355516#30355516", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>Probably the easiest part would be to use the <a href=\"https://crates.io/crates/text_io\" rel=\"noreferrer\">text_io crate</a> and write:</p>\n\n<pre><code>#[macro_use]\nextern crate text_io;\n\nfn main() {\n    // read until a whitespace and try to convert what was read into an i32\n    let i: i32 = read!();\n    println!(\"Read in: {}\", i);\n}\n</code></pre>\n\n<p>If you need to read more than one value simultaneously, you might need to use Rust nightly.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/57501789/155423\">Is there a way to check that the user entered an integer with text_io&#39;s read!() macro?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "is_accepted": false, "score": 4, "last_activity_date": 1432140124, "creation_date": 1432140124, "answer_id": 30355673, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/30355673#30355673", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p><code>parse</code> is more or less the same; it\u2019s <code>read_line</code> that\u2019s unpleasant now.</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut s = String::new();\n    io::stdin().read_line(&amp;mut s).unwrap();\n\n    match s.trim_right().parse::&lt;i32&gt;() {\n        Ok(i) =&gt; println!(\"{} + 5 = {}\", i, i + 5),\n        Err(_) =&gt; println!(\"Invalid number.\"),\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2908, "user_id": 1220243, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/A8tm4.jpg?s=128&g=1", "display_name": "zero_cool", "link": "https://stackoverflow.com/users/1220243/zero-cool"}, "edited": false, "score": 0, "creation_date": 1522452341, "post_id": 30355925, "comment_id": 86173452, "body": "what about the use of unwrap()? how do you handle parse errors, and reporting them to stderr?"}, {"owner": {"reputation": 927, "user_id": 2057275, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/d48d0d144141bbc2e797b5a2f734836d?s=128&d=identicon&r=PG", "display_name": "raindev", "link": "https://stackoverflow.com/users/2057275/raindev"}, "reply_to_user": {"reputation": 2908, "user_id": 1220243, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/A8tm4.jpg?s=128&g=1", "display_name": "zero_cool", "link": "https://stackoverflow.com/users/1220243/zero-cool"}, "edited": false, "score": 0, "creation_date": 1578381703, "post_id": 30355925, "comment_id": 105410247, "body": "@zero_cool the errors are reported by handling <code>Result</code> produced by <code>parse()</code> with a <code>match</code>. <code>unwrap()</code> would cause the program to panic."}], "tags": [], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "is_accepted": true, "score": 52, "last_activity_date": 1521049747, "last_edit_date": 1521049747, "creation_date": 1432140931, "answer_id": 30355925, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/30355925#30355925", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>Here is a version with all optional type annotations and error handling which  may be useful for beginners like me:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut input_text = String::new();\n    io::stdin()\n        .read_line(&amp;mut input_text)\n        .expect(\"failed to read from stdin\");\n\n    let trimmed = input_text.trim();\n    match trimmed.parse::&lt;u32&gt;() {\n        Ok(i) =&gt; println!(\"your integer input: {}\", i),\n        Err(..) =&gt; println!(\"this was not an integer: {}\", trimmed),\n    };\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1460470873, "post_id": 36575651, "comment_id": 60750930, "body": "Come on, it&#39;s clearly different, and a complete answer makes it easier for the reader."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460470965, "post_id": 36575651, "comment_id": 60751017, "body": "It looks pretty identical to <a href=\"http://stackoverflow.com/a/30355925/155423\">the accepted answer</a> to me."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460472277, "post_id": 36575651, "comment_id": 60752102, "body": "Yeah, you have to get a string from the user and store that in a variable, that part is the same. The parsing part is more concise, as explained in my answer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460472667, "post_id": 36575651, "comment_id": 60752452, "body": "<i>The parsing part is more concise</i> \u2014 a comment along the lines of &quot;use <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.expect\" rel=\"nofollow noreferrer\"><code>Option::expect</code></a> instead of <code>match</code> to be more concise and fail in cases of error&quot; would be equivalent. <i>a complete answer makes it easier for the reader</i> \u2014 this answer is missing the required <code>use std::io</code> and <code>fn main</code> that the accepted answer has and a true beginner would want."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460473246, "post_id": 36575651, "comment_id": 60752956, "body": "Yeah, fair enough."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1460473326, "post_id": 36575651, "comment_id": 60753029, "body": "To be clear, feel free to leave the answer, other people may find it useful and upvote it. So long as there&#39;s prose to describe why it&#39;s different and better, it&#39;s a valid answer!"}], "tags": [], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "is_accepted": false, "score": 10, "last_activity_date": 1468418069, "last_edit_date": 1468418069, "creation_date": 1460469829, "answer_id": 36575651, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/36575651#36575651", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>Here are a few possibilities (Rust 1.7):</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut n = String::new();\n    io::stdin()\n        .read_line(&amp;mut n)\n        .expect(\"failed to read input.\");\n    let n: i32 = n.trim().parse().expect(\"invalid input\");\n    println!(\"{:?}\", n);\n\n    let mut n = String::new();\n    io::stdin()\n        .read_line(&amp;mut n)\n        .expect(\"failed to read input.\");\n    let n = n.trim().parse::&lt;i32&gt;().expect(\"invalid input\");\n    println!(\"{:?}\", n);\n\n    let mut n = String::new();\n    io::stdin()\n        .read_line(&amp;mut n)\n        .expect(\"failed to read input.\");\n    if let Ok(n) = n.trim().parse::&lt;i32&gt;() {\n        println!(\"{:?}\", n);\n    }\n}\n</code></pre>\n\n<p>These spare you the ceremony of pattern matching without depending on extra libraries. </p>\n"}, {"tags": [], "owner": {"reputation": 3085, "user_id": 7309666, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/be91537cdd23587efcab0afbe2ed0023?s=128&d=identicon&r=PG&f=1", "display_name": "coder3101", "link": "https://stackoverflow.com/users/7309666/coder3101"}, "is_accepted": false, "score": 7, "last_activity_date": 1615104053, "last_edit_date": 1615104053, "creation_date": 1564051250, "answer_id": 57200055, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/57200055#57200055", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>If you are looking for a way to read input for the purpose of competitive programming on websites like codeforces where you do not have access to <code>text_io</code>, this solution is for you.</p>\n<p>I use the following macro to read different values from <code>stdin</code>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io;\n\n#[allow(unused_macros)]\nmacro_rules! read {\n    ($out:ident as $type:ty) =&gt; {\n        let mut inner = String::new();\n        io::stdin().read_line(&amp;mut inner).expect(&quot;A String&quot;);\n        let $out = inner.trim().parse::&lt;$type&gt;().expect(&quot;Parseble&quot;);\n    };\n}\n\n#[allow(unused_macros)]\nmacro_rules! read_str {\n    ($out:ident) =&gt; {\n        let mut inner = String::new();\n        io::stdin().read_line(&amp;mut inner).expect(&quot;A String&quot;);\n        let $out = inner.trim();\n    };\n}\n\n#[allow(unused_macros)]\nmacro_rules! read_vec {\n    ($out:ident as $type:ty) =&gt; {\n        let mut inner = String::new();\n        io::stdin().read_line(&amp;mut inner).unwrap();\n        let $out = inner\n            .trim()\n            .split_whitespace()\n            .map(|s| s.parse::&lt;$type&gt;().unwrap())\n            .collect::&lt;Vec&lt;$type&gt;&gt;();\n    };\n}\n  \n</code></pre>\n<p>Use it as follow</p>\n<pre class=\"lang-rust prettyprint-override\"><code>\nfn main(){\n   read!(x as u32);\n   read!(y as f64);\n   read!(z as char);\n   println!(&quot;{} {} {}&quot;, x, y, z);\n\n   read_vec!(v as u32); // Reads space separated integers and stops when newline is encountered.\n   println!(&quot;{:?}&quot;, v);\n}\n\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 2, "last_activity_date": 1566210376, "creation_date": 1566210376, "answer_id": 57554881, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/57554881#57554881", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>You can create an extension method if you want a simple syntax:</p>\n\n<pre><code>use std::error::Error;\nuse std::io;\nuse std::str::FromStr;\n\ntrait Input {\n    fn my_read&lt;T&gt;(&amp;mut self) -&gt; io::Result&lt;T&gt;\n    where\n        T: FromStr,\n        T::Err: Error + Send + Sync + 'static;\n}\n\nimpl&lt;R&gt; Input for R where R: io::Read {\n    fn my_read&lt;T&gt;(&amp;mut self) -&gt; io::Result&lt;T&gt;\n    where\n        T: FromStr,\n        T::Err: Error + Send + Sync + 'static,\n    {\n        let mut buff = String::new();\n        self.read_to_string(&amp;mut buff)?;\n\n        buff.trim()\n            .parse()\n            .map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))\n    }\n}\n\n// Usage:\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    let input: i32 = io::stdin().my_read()?;\n\n    println!(\"{}\", input);\n\n    Ok(())\n}\n</code></pre>\n"}, {"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user5683940"}, "is_accepted": false, "score": 0, "last_activity_date": 1575750964, "creation_date": 1575750964, "answer_id": 59229963, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0/59229963#59229963", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>I would definitely use the file system Rust-Lang provides <code>std::fs</code> (See more here: <a href=\"https://doc.rust-lang.org/stable/std/fs/\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/stable/std/fs/</a>) But more particularly <a href=\"https://doc.rust-lang.org/stable/std/fs/fn.read_to_string.html\" rel=\"nofollow noreferrer\">https://doc.rust-lang.org/stable/std/fs/fn.read_to_string.html</a></p>\n\n<p>Let's say you just want to read input of a text file, try this : </p>\n\n<pre><code>use std::fs\nor\nuse std::fs::read_to_string\n\nfn main() {\n    println!(\"{}\", fs::read_to_string(\"input.txt\"));   \n}\n</code></pre>\n"}], "owner": {"reputation": 6638, "user_id": 8127, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/RZLo7.png?s=128&g=1", "display_name": "sundar - Remember Monica", "link": "https://stackoverflow.com/users/8127/sundar-remember-monica"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 24786, "favorite_count": 4, "accepted_answer_id": 30355925, "answer_count": 7, "score": 24, "last_activity_date": 1615104053, "creation_date": 1432138647, "last_edit_date": 1506529564, "question_id": 30355185, "link": "https://stackoverflow.com/questions/30355185/how-to-read-an-integer-input-from-the-user-in-rust-1-0", "title": "How to read an integer input from the user in Rust 1.0?", "body": "<p>Existing answers I've found are all based on <code>from_str</code> (such as  <a href=\"https://stackoverflow.com/q/25632070/155423\">Reading in user input from console once efficiently</a>), but apparently <code>from_str(x)</code> has changed into <code>x.parse()</code> in Rust 1.0. As a newbie, it's not obvious how the original solution should be adapted taking this change into account. </p>\n\n<p>As of Rust 1.0, what is the easiest way to get an integer input from the user? </p>\n"}, {"tags": ["struct", "clone", "rust", "traits", "cloneable"], "answers": [{"comments": [{"owner": {"reputation": 922, "user_id": 3402665, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/08Ff2.jpg?s=128&g=1", "display_name": "Oli", "link": "https://stackoverflow.com/users/3402665/oli"}, "edited": false, "score": 1, "creation_date": 1551741598, "post_id": 30353928, "comment_id": 96743401, "body": "Not sure if I should make another question or not but why does extending <code>Clone</code> mean that your trait is no longer object safe? What does that mean?"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 922, "user_id": 3402665, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/08Ff2.jpg?s=128&g=1", "display_name": "Oli", "link": "https://stackoverflow.com/users/3402665/oli"}, "edited": false, "score": 2, "creation_date": 1560950898, "post_id": 30353928, "comment_id": 99905333, "body": "@Oli <code>clone</code> returns <code>Self</code>. This is not allowed for a trait object because the size cannot be known at compile-time."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 43, "last_activity_date": 1606938116, "last_edit_date": 1606938116, "creation_date": 1432135340, "answer_id": 30353928, "question_id": 30353462, "link": "https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object/30353928#30353928", "title": "How to clone a struct storing a boxed trait object?", "body": "<p>There are a few problems.  The first is that there's nothing to require that an <code>Animal</code> also implements <code>Clone</code>.  You could fix this by changing the trait definition:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait Animal: Clone {\n    /* ... */\n}\n</code></pre>\n<p>This would cause <code>Animal</code> to no longer be object safe, meaning that <code>Box&lt;dyn Animal&gt;</code> will become invalid, so that's not great.</p>\n<p>What you <em>can</em> do is insert an additional step.  To whit (with additions from <a href=\"https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-trait-object#comment48814207_30353928\">@ChrisMorgan's comment</a>).</p>\n<pre class=\"lang-rust prettyprint-override\"><code>trait Animal: AnimalClone {\n    fn speak(&amp;self);\n}\n\n// Splitting AnimalClone into its own trait allows us to provide a blanket\n// implementation for all compatible types, without having to implement the\n// rest of Animal.  In this case, we implement it for all types that have\n// 'static lifetime (*i.e.* they don't contain non-'static pointers), and\n// implement both Animal and Clone.  Don't ask me how the compiler resolves\n// implementing AnimalClone for Animal when Animal requires AnimalClone; I\n// have *no* idea why this works.\ntrait AnimalClone {\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn Animal&gt;;\n}\n\nimpl&lt;T&gt; AnimalClone for T\nwhere\n    T: 'static + Animal + Clone,\n{\n    fn clone_box(&amp;self) -&gt; Box&lt;dyn Animal&gt; {\n        Box::new(self.clone())\n    }\n}\n\n// We can now implement Clone manually by forwarding to clone_box.\nimpl Clone for Box&lt;dyn Animal&gt; {\n    fn clone(&amp;self) -&gt; Box&lt;dyn Animal&gt; {\n        self.clone_box()\n    }\n}\n\n#[derive(Clone)]\nstruct Dog {\n    name: String,\n}\n\nimpl Dog {\n    fn new(name: &amp;str) -&gt; Dog {\n        Dog {\n            name: name.to_string(),\n        }\n    }\n}\n\nimpl Animal for Dog {\n    fn speak(&amp;self) {\n        println!(&quot;{}: ruff, ruff!&quot;, self.name);\n    }\n}\n\n#[derive(Clone)]\nstruct AnimalHouse {\n    animal: Box&lt;dyn Animal&gt;,\n}\n\nfn main() {\n    let house = AnimalHouse {\n        animal: Box::new(Dog::new(&quot;Bobby&quot;)),\n    };\n    let house2 = house.clone();\n    house2.animal.speak();\n}\n</code></pre>\n<p>By introducing <code>clone_box</code>, we can get around the problems with attempting to clone a trait object.</p>\n"}, {"comments": [{"owner": {"reputation": 2858, "user_id": 4070218, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/VNOHi.gif?s=128&g=1", "display_name": "jonny", "link": "https://stackoverflow.com/users/4070218/jonny"}, "edited": false, "score": 8, "creation_date": 1524657223, "post_id": 49515578, "comment_id": 87059003, "body": "I think it&#39;s important to note that this is a viable alternative <i>if and only if</i> the business logic doesn&#39;t need a true clone of the object, i.e. to reference a distinct copy of the object in memory. Rc merely clones the pointer, not the data itself."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 9, "last_activity_date": 1522161013, "last_edit_date": 1522161013, "creation_date": 1522160906, "answer_id": 49515578, "question_id": 30353462, "link": "https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object/49515578#49515578", "title": "How to clone a struct storing a boxed trait object?", "body": "<p>The <a href=\"https://stackoverflow.com/a/30353928/155423\">previous answer</a> correctly answers the question about storing a boxed trait object.</p>\n\n<p>Getting off topic with respect to the title, but not about the idiomatic way of using trait objects, an alternative solution could be use the <code>Rc</code> smart pointer instead of a <code>Box</code>: this avoids the workaround for getting around object safety:</p>\n\n<pre><code>#[derive(Clone)]\nstruct AnimalHouse {\n    animal: Rc&lt;Animal&gt;,\n}\n\nfn main() {\n    let house = AnimalHouse { animal: Rc::new(Dog::new(\"Bobby\")) };\n    let house2 = house.clone();\n    house2.animal.speak();\n}\n</code></pre>\n\n<p><strong>Note</strong>: <code>Rc&lt;T&gt;</code> is only for use in single-threaded scenarios; there's also <code>Arc&lt;T&gt;</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 21, "last_activity_date": 1595352687, "last_edit_date": 1595352687, "creation_date": 1528646572, "answer_id": 50785548, "question_id": 30353462, "link": "https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object/50785548#50785548", "title": "How to clone a struct storing a boxed trait object?", "body": "<p>My <a href=\"https://github.com/dtolnay/dyn-clone\" rel=\"noreferrer\"><strong><code>dyn-clone</code></strong></a> crate implements a reusable version of <a href=\"https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object/30353928#30353928\">DK.'s answer</a>. With it you can make your original code work with a bare minimum of changes.</p>\n<ul>\n<li>One line to add <code>DynClone</code> as a supertrait of <code>Animal</code>, requiring every animal implementation to be clonable.</li>\n<li>One line to generate an implementation of the standard library <code>Clone</code> for <code>Box&lt;dyn Animal&gt;</code>.</li>\n</ul>\n<hr />\n<pre><code>// [dependencies]\n// dyn-clone = &quot;1.0&quot;\n\nuse dyn_clone::{clone_trait_object, DynClone};\n\ntrait Animal: DynClone {\n    fn speak(&amp;self);\n}\n\nclone_trait_object!(Animal);\n\n#[derive(Clone)]\nstruct Dog {\n    name: String,\n}\n\nimpl Dog {\n    fn new(name: &amp;str) -&gt; Dog {\n        Dog { name: name.to_owned() }\n    }\n}\n\nimpl Animal for Dog {\n    fn speak(&amp;self) {\n        println!{&quot;{}: ruff, ruff!&quot;, self.name};\n    }\n}\n\n#[derive(Clone)]\nstruct AnimalHouse {\n    animal: Box&lt;dyn Animal&gt;,\n}\n\nfn main() {\n    let house = AnimalHouse {\n        animal: Box::new(Dog::new(&quot;Bobby&quot;)),\n    };\n    let house2 = house.clone();\n    house2.animal.speak();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 77, "user_id": 4409029, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/180a3a92dbaf9cd07205d0bb2abb3177?s=128&d=identicon&r=PG&f=1", "display_name": "Daniel Schaadt", "link": "https://stackoverflow.com/users/4409029/daniel-schaadt"}, "is_accepted": false, "score": 0, "last_activity_date": 1609330014, "creation_date": 1609330014, "answer_id": 65506685, "question_id": 30353462, "link": "https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object/65506685#65506685", "title": "How to clone a struct storing a boxed trait object?", "body": "<p>I've tried to use the solution from Dk as well as dtolnay in a situation where I need a struct with a member with box in a spawned task (via tokio). There I get errors that the struct is not send and sync. To avoid this, one could add send and sync in Dk clone traits. Maybe this could also be added to dyn_clone.</p>\n"}], "owner": {"reputation": 6827, "user_id": 1062636, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/88e94a1b7d952fb43245061ccc35f398?s=128&d=identicon&r=PG", "display_name": "Denis Kreshikhin", "link": "https://stackoverflow.com/users/1062636/denis-kreshikhin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9274, "favorite_count": 15, "accepted_answer_id": 30353928, "answer_count": 4, "score": 35, "last_activity_date": 1609330014, "creation_date": 1432134034, "last_edit_date": 1521935482, "question_id": 30353462, "link": "https://stackoverflow.com/questions/30353462/how-to-clone-a-struct-storing-a-boxed-trait-object", "title": "How to clone a struct storing a boxed trait object?", "body": "<p>I wrote a program that has the trait <code>Animal</code> and the struct <code>Dog</code> implementing the trait. It also has a struct <code>AnimalHouse</code> storing an animal as a trait object <code>Box&lt;Animal&gt;</code>.</p>\n\n<pre><code>trait Animal {\n    fn speak(&amp;self);\n}\n\nstruct Dog {\n    name: String,\n}\n\nimpl Dog {\n    fn new(name: &amp;str) -&gt; Dog {\n        return Dog {\n            name: name.to_string(),\n        };\n    }\n}\n\nimpl Animal for Dog {\n    fn speak(&amp;self) {\n        println!{\"{}: ruff, ruff!\", self.name};\n    }\n}\n\nstruct AnimalHouse {\n    animal: Box&lt;Animal&gt;,\n}\n\nfn main() {\n    let house = AnimalHouse {\n        animal: Box::new(Dog::new(\"Bobby\")),\n    };\n    house.animal.speak();\n}\n</code></pre>\n\n<p>It returns \"Bobby: ruff, ruff!\" as expected, but if I try to clone <code>house</code> the compiler returns errors:</p>\n\n<pre><code>fn main() {\n    let house = AnimalHouse {\n        animal: Box::new(Dog::new(\"Bobby\")),\n    };\n    let house2 = house.clone();\n    house2.animal.speak();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `clone` found for type `AnimalHouse` in the current scope\n  --&gt; src/main.rs:31:24\n   |\n23 | struct AnimalHouse {\n   | ------------------ method `clone` not found for this\n...\n31 |     let house2 = house.clone();\n   |                        ^^^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `clone`, perhaps you need to implement it:\n           candidate #1: `std::clone::Clone`\n</code></pre>\n\n<p>I tried to add <code>#[derive(Clone)]</code> before <code>struct AnimalHouse</code> and got another error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Animal: std::clone::Clone` is not satisfied\n  --&gt; src/main.rs:25:5\n   |\n25 |     animal: Box&lt;Animal&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `Animal`\n   |\n   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::boxed::Box&lt;Animal&gt;`\n   = note: required by `std::clone::Clone::clone`\n</code></pre>\n\n<p>How do I make the struct <code>AnimalHouse</code> cloneable? Is it idiomatic Rust to use a trait object actively, in general?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1432134530, "post_id": 30353268, "comment_id": 48799540, "body": "So currently (in the implementation above) <code>box x</code> is placement-new syntax?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 1, "creation_date": 1432134591, "post_id": 30353268, "comment_id": 48799586, "body": "@thirtythreeforty, yes, it is placement new syntax which is currently hardcoded to work with <code>Box</code>es only."}, {"owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "edited": false, "score": 0, "creation_date": 1432134701, "post_id": 30353268, "comment_id": 48799654, "body": "So eventually <code>Box</code> will be treated no more specially than any type I can create, and it will simply use other (post-1.0) language features."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 16, "last_activity_date": 1432133607, "creation_date": 1432133607, "answer_id": 30353268, "question_id": 30352802, "link": "https://stackoverflow.com/questions/30352802/what-does-the-box-keyword-do/30353268#30353268", "title": "What does the box keyword do?", "body": "<p>Before <code>box</code> was marked as unstable, it was used as a shorthand for calling <code>Box::new</code>. However, it's always been intended to be able to allocate <em>arbitrary types</em>, such as <code>Rc</code>, or to use arbitrary allocators. Neither of these have been finalized, so it wasn't marked as stable for the 1.0 release. This is done to prevent supporting a bad decision for all of Rust 1.x.</p>\n\n<p>For further reference, you can read the <a href=\"https://github.com/rust-lang/rfcs/blob/0806be4f282144cfcd55b1d20284b43f87cbe1c6/text/0809-box-and-in-for-stdlib.md\">RFC that changed the \"placement new\" syntax</a> and also feature gated it.</p>\n"}, {"comments": [{"owner": {"reputation": 16558, "user_id": 1804173, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/53f721a451a1c68caf8316cefcde3083?s=128&d=identicon&r=PG", "display_name": "bluenote10", "link": "https://stackoverflow.com/users/1804173/bluenote10"}, "edited": false, "score": 1, "creation_date": 1595062373, "post_id": 30353640, "comment_id": 111349188, "body": "<i>box does exactly what Box::new() does.</i> That is only true in theory, right? If I understand it correctly, there is a the practical difference that <a href=\"https://github.com/rust-lang/rust/issues/58570\" rel=\"nofollow noreferrer\"><code>box</code> can bypass stack allocation, but <code>Box::new</code> doesn&#39;t</a>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 10, "last_activity_date": 1432134482, "creation_date": 1432134482, "answer_id": 30353640, "question_id": 30352802, "link": "https://stackoverflow.com/questions/30352802/what-does-the-box-keyword-do/30353640#30353640", "title": "What does the box keyword do?", "body": "<p><code>box</code> does exactly what <code>Box::new()</code> does - it creates an owned box.</p>\n\n<p>I believe that you can't find implementation of <code>box</code> keyword because currently it is hardcoded to work with owned boxes, and <code>Box</code> type is a lang item:</p>\n\n<pre><code>#[lang = \"owned_box\"]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[fundamental]\npub struct Box&lt;T&gt;(Unique&lt;T&gt;);\n</code></pre>\n\n<p>Because it is a lang item, the compiler has special logic to handle its instantiation which it can link with <code>box</code> keyword.</p>\n\n<p>I believe that the compiler delegates box allocation to functions in <a href=\"http://doc.rust-lang.org/nightly/alloc/heap/\"><code>alloc::heap</code></a> module.</p>\n\n<p>As for what <code>box</code> keyword does and supposed to do in general, Shepmaster's answer describes perfectly.</p>\n"}, {"comments": [{"owner": {"reputation": 789, "user_id": 12291742, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/V1ofq.png?s=128&g=1", "display_name": "Ekrem Din&#231;el", "link": "https://stackoverflow.com/users/12291742/ekrem-din%c3%a7el"}, "edited": false, "score": 0, "creation_date": 1607707006, "post_id": 30356213, "comment_id": 115365894, "body": "&quot;Lang items&quot; link is broken."}], "tags": [], "owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "is_accepted": true, "score": 35, "last_activity_date": 1609873403, "last_edit_date": 1609873403, "creation_date": 1432141976, "answer_id": 30356213, "question_id": 30352802, "link": "https://stackoverflow.com/questions/30352802/what-does-the-box-keyword-do/30356213#30356213", "title": "What does the box keyword do?", "body": "<p><strong>NOTE:</strong> This reply is a bit old. Since it talks about internals and unstable features, things have changed a little bit. The basic mechanism remains the same though, so the answer is still capable of <em>explaining</em> the undelying mechanisms of <code>box</code>.</p>\n<p>What does <code>box x</code> usually uses to allocate and free memory?</p>\n<p>The answer is the functions marked with lang items <code>exchange_malloc</code> for allocation and <code>exchange_free</code> for freeing. You can see the implementation of those in the default standard library at <a href=\"https://github.com/rust-lang/rust/blob/cec980a1a706fd6afc27dd54c1eed7c51800d753/src/liballoc/heap.rs#L112\" rel=\"nofollow noreferrer\">heap.rs#L112</a> and <a href=\"https://github.com/rust-lang/rust/blob/cec980a1a706fd6afc27dd54c1eed7c51800d753/src/liballoc/heap.rs#L125\" rel=\"nofollow noreferrer\">heap.rs#L125</a>.</p>\n<p>In the end the <code>box x</code> syntax depends on the following lang items:</p>\n<ul>\n<li><code>owned_box</code> on a <code>Box</code> struct to encapsulate the allocated pointer. This struct does not need a <code>Drop</code> implementation, it is implemented automatically by the compiler.</li>\n<li><code>exchange_malloc</code> to allocate the memory.</li>\n<li><code>exchange_free</code> to free the previously allocated memory.</li>\n</ul>\n<p>This can be effectively seen in the <a href=\"https://doc.rust-lang.org/unstable-book/language-features/lang-items.html\" rel=\"nofollow noreferrer\">lang items</a> chapter of the unstable rust book using this <code>no_std</code> example:</p>\n<pre><code>#![feature(lang_items, box_syntax, start, no_std, libc)]\n#![no_std]\n\nextern crate libc;\n\nextern {\n    fn abort() -&gt; !;\n}\n\n#[lang = &quot;owned_box&quot;]\npub struct Box&lt;T&gt;(*mut T);\n\n#[lang = &quot;exchange_malloc&quot;]\nunsafe fn allocate(size: usize, _align: usize) -&gt; *mut u8 {\n    let p = libc::malloc(size as libc::size_t) as *mut u8;\n\n    // malloc failed\n    if p as usize == 0 {\n        abort();\n    }\n\n    p\n}\n#[lang = &quot;exchange_free&quot;]\nunsafe fn deallocate(ptr: *mut u8, _size: usize, _align: usize) {\n    libc::free(ptr as *mut libc::c_void)\n}\n\n#[start]\nfn main(argc: isize, argv: *const *const u8) -&gt; isize {\n    let x = box 1;\n\n    0\n}\n\n#[lang = &quot;stack_exhausted&quot;] extern fn stack_exhausted() {}\n#[lang = &quot;eh_personality&quot;] extern fn eh_personality() {}\n#[lang = &quot;panic_fmt&quot;] fn panic_fmt() -&gt; ! { loop {} }\n</code></pre>\n<p>Notice how <code>Drop</code> was not implemented for the <code>Box</code> struct? Well let's see the LLVM IR generated for <code>main</code>:</p>\n<pre><code>define internal i64 @_ZN4main20hbd13b522fdb5b7d4ebaE(i64, i8**) unnamed_addr #1 {\nentry-block:\n  %argc = alloca i64\n  %argv = alloca i8**\n  %x = alloca i32*\n  store i64 %0, i64* %argc, align 8\n  store i8** %1, i8*** %argv, align 8\n  %2 = call i8* @_ZN8allocate20hf9df30890c435d76naaE(i64 4, i64 4)\n  %3 = bitcast i8* %2 to i32*\n  store i32 1, i32* %3, align 4\n  store i32* %3, i32** %x, align 8\n  call void @&quot;_ZN14Box$LT$i32$GT$9drop.103617h8817b938807fc41eE&quot;(i32** %x)\n  ret i64 0\n}\n</code></pre>\n<p>The <code>allocate</code> (<code>_ZN8allocate20hf9df30890c435d76naaE</code>) was called as expected to build the <code>Box</code>, meanwhile... Look! A <code>Drop</code> method for the <code>Box</code> (<code>_ZN14Box$LT$i32$GT$9drop.103617h8817b938807fc41eE</code>)! Let's see the IR for this method:</p>\n<pre><code>define internal void @&quot;_ZN14Box$LT$i32$GT$9drop.103617h8817b938807fc41eE&quot;(i32**) unnamed_addr #0 {\nentry-block:\n  %1 = load i32** %0\n  %2 = ptrtoint i32* %1 to i64\n  %3 = icmp ne i64 %2, 2097865012304223517\n  br i1 %3, label %cond, label %next\n\nnext:                                             ; preds = %cond, %entry-    block\n  ret void\n\ncond:                                             ; preds = %entry-block\n  %4 = bitcast i32* %1 to i8*\n  call void @_ZN10deallocate20he2bff5e01707ad50VaaE(i8* %4, i64 4, i64 4)\n  br label %next\n}\n</code></pre>\n<p>There it is, <code>deallocate</code> (<code>ZN10deallocate20he2bff5e01707ad50VaaE</code>) being called on the compiler generated Drop!</p>\n<p>Notice even on the <a href=\"https://github.com/rust-lang/rust/blob/cec980a1a706fd6afc27dd54c1eed7c51800d753/src/liballoc/boxed.rs\" rel=\"nofollow noreferrer\">standard library</a> the <code>Drop</code> trait is not implemented by user-code. Indeed <code>Box</code> is a bit of a magical struct.</p>\n"}], "owner": {"reputation": 13479, "user_id": 1830736, "user_type": "registered", "accept_rate": 98, "profile_image": "https://i.stack.imgur.com/gwUf7.jpg?s=128&g=1", "display_name": "George Hilliard", "link": "https://stackoverflow.com/users/1830736/george-hilliard"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12047, "favorite_count": 8, "accepted_answer_id": 30356213, "answer_count": 3, "score": 55, "last_activity_date": 1609873403, "creation_date": 1432132510, "last_edit_date": 1432133350, "question_id": 30352802, "link": "https://stackoverflow.com/questions/30352802/what-does-the-box-keyword-do", "title": "What does the box keyword do?", "body": "<p>In Rust, we can use the <code>Box&lt;T&gt;</code> type to allocate things on the heap.  This type is used to safely abstract pointers to heap memory.  <code>Box&lt;T&gt;</code> is provided by the Rust standard library.</p>\n\n<p>I was curious about how <code>Box&lt;T&gt;</code> allocation is implemented, so I found <a href=\"https://github.com/rust-lang/rust/blob/master/src/liballoc/boxed.rs\" rel=\"noreferrer\">its source code</a>.  Here is the code for <code>Box&lt;T&gt;::new</code> (as of Rust 1.0):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T&gt; Box&lt;T&gt; {\n    /// Allocates memory on the heap and then moves `x` into it.\n    /// [...]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[inline(always)]\n    pub fn new(x: T) -&gt; Box&lt;T&gt; {\n        box x\n    }\n}\n</code></pre>\n\n<p>The only line in the implementation returns the value <code>box x</code>.  This <code>box</code> keyword is not explained anywhere in the official documentation; in fact it is only mentioned briefly on the <a href=\"https://doc.rust-lang.org/std/boxed/index.html\" rel=\"noreferrer\"><code>std::boxed</code></a> documentation page.</p>\n"}, {"tags": ["rust", "benchmarking"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432134114, "post_id": 30351225, "comment_id": 48799236, "body": "Note: SO does not deal in software recommendations, so asking for a crate is off-topic according to the guidelines. An open-ended question (such as your title) is however fine, so I suggest removing the mention to &quot;another crate&quot;."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432134570, "post_id": 30351225, "comment_id": 48799568, "body": "@MatthieuM. I was wondering if the functionality was moved to an external crate, but you make a valid point."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432134751, "post_id": 30351225, "comment_id": 48799703, "body": "@Shepmaster? Wait, so <code>rustc</code> doesn&#39;t run benchmarks?! I&#39;m asking, because if Cargo runs benchmarks I might be able to change stuff there or duplicate the way benchmarks are handled."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432137690, "post_id": 30351225, "comment_id": 48801817, "body": "@DanielFath it&#39;s a pedantic distinction. <code>rustc</code> is the Rust compiler, taking your source code and producing a binary. The compiler produces a binary that, when run, produces benchmarks. If you went with your terminology, then <code>rustc</code> would be responsible for <i>everything</i> that a compiled Rust program does :-)"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 0, "last_activity_date": 1565960736, "creation_date": 1565960736, "answer_id": 57525207, "question_id": 30351225, "link": "https://stackoverflow.com/questions/30351225/is-there-a-way-to-save-benchmark-results-as-json/57525207#57525207", "title": "Is there a way to save benchmark results as JSON?", "body": "<p>The default test harness <code>libtest</code> (this is what actually runs the tests) has a CLI parameter <code>--format</code>. It accepts the values <code>pretty</code> (default), <code>terse</code> and <code>json</code>.  However, the JSON output is still unstable (as of Rust 1.37) and thus requires a nightly compiler. To enable this unstable feature you additionally need the flag <code>-Z unstable-options</code>. Combining everything:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo bench -- --format=json -Z unstable-options\n</code></pre>\n\n<p>This outputs something like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    Finished release [optimized] target(s) in 0.02s\n     Running target/release/deps/foo-177d129f966b1f75\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 1 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"bench_foo\" }\n{ \"type\": \"bench\", \"name\": \"bench_foo\", \"median\": 10138124, \"deviation\": 165468 }\n{ \"type\": \"suite\", \"event\": \"ok\", \"passed\": 0, \"failed\": 0, \"allowed_fail\": 0, \"ignored\": 0, \"measured\": 1, \"filtered_out\": 0 }\n</code></pre>\n\n<p>This is probably not the same as the original <code>--save-metrics</code> flag, but it's at least something. </p>\n\n<p>It's also worth point out that some external benchmarking frameworks like <a href=\"https://github.com/bheisler/criterion.rs\" rel=\"nofollow noreferrer\">Criterion</a> will always save the raw data as JSON. So you might want to consider using this to do the statistical analysis yourself.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 143, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1565960736, "creation_date": 1432128747, "last_edit_date": 1432134608, "question_id": 30351225, "link": "https://stackoverflow.com/questions/30351225/is-there-a-way-to-save-benchmark-results-as-json", "title": "Is there a way to save benchmark results as JSON?", "body": "<p>This <a href=\"https://github.com/rust-lang/rust/issues/19145\" rel=\"nofollow\">commit (issue #19145)</a>, removed the <code>--save-metrics</code> option when running benchmarks. Is there a way to will generate JSON of the benchmark runs in a formal that is similar to <code>--save-metrics</code>?</p>\n"}, {"tags": ["garbage-collection", "rust", "allocation", "lifetime"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 34, "creation_date": 1432115647, "post_id": 30340815, "comment_id": 48785154, "body": "this is quite a bit wider than the usual scope of SO questions. I would suggest you try <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">users.rust-lang.org</a> instead"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 24, "creation_date": 1487007329, "post_id": 30340815, "comment_id": 71581314, "body": "Or <a href=\"http://codereview.stackexchange.com/\">codereview.stackexchange.com</a>"}, {"owner": {"reputation": 5453, "user_id": 827081, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/7893c5231bc7a9d4959d046e2604d939?s=128&d=identicon&r=PG", "display_name": "DanielM", "link": "https://stackoverflow.com/users/827081/danielm"}, "edited": false, "score": 12, "creation_date": 1523617750, "post_id": 30340815, "comment_id": 86645389, "body": "Out of interest, why would you self manage garbage collection? It seems like your fighting the way Rust is built to add a feature that isn&#39;t needed. Is it just a coding exercise? If you wanted to keep a note of stuff on the heap, a Vector of Boxes would be much safer wouldn&#39;t it?"}, {"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "reply_to_user": {"reputation": 5453, "user_id": 827081, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/7893c5231bc7a9d4959d046e2604d939?s=128&d=identicon&r=PG", "display_name": "DanielM", "link": "https://stackoverflow.com/users/827081/danielm"}, "edited": false, "score": 8, "creation_date": 1523636455, "post_id": 30340815, "comment_id": 86657907, "body": "@DanielM: This is in order to implement a runtime system for another language. This language, unlike Rust, has a tendency to make lots of very small allocations, which will quickly fragment the heap if a mark-compact collector is not used."}, {"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "edited": false, "score": 2, "creation_date": 1523636491, "post_id": 30340815, "comment_id": 86657923, "body": "I could \u201cjust\u201d use C... but I&#39;d rather not have to."}, {"owner": {"reputation": 5453, "user_id": 827081, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/7893c5231bc7a9d4959d046e2604d939?s=128&d=identicon&r=PG", "display_name": "DanielM", "link": "https://stackoverflow.com/users/827081/danielm"}, "edited": false, "score": 0, "creation_date": 1523796145, "post_id": 30340815, "comment_id": 86698622, "body": "The interface itself doesn&#39;t look unsafe, are you sure you can&#39;t wrap just the unsafe lines in an unsafe block?"}, {"owner": {"reputation": 1846, "user_id": 1601448, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/7d6abd2bfe7848e0693972db9f82c2e7?s=128&d=identicon&r=PG", "display_name": "Russell Greene", "link": "https://stackoverflow.com/users/1601448/russell-greene"}, "edited": false, "score": 13, "creation_date": 1545079597, "post_id": 30340815, "comment_id": 94494174, "body": "An interesting read for you might be withoutboats&#39; blog series on the garbage collector he wrote in rust. Here&#39;s a link to the frist one. <a href=\"https://boats.gitlab.io/blog/post/shifgrethor-i/\" rel=\"nofollow noreferrer\">boats.gitlab.io/blog/post/shifgrethor-i</a>"}, {"owner": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 0, "creation_date": 1557358168, "post_id": 30340815, "comment_id": 98741853, "body": "@pyon why bust your back to make it safe when it&#39;s going to be used from a runtime? (which is its own kind of safe interface) If you do give up on safety, why switch to C, even then?"}, {"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "reply_to_user": {"reputation": 842, "user_id": 1085128, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/9798134a47d85c790e2ee0da92f66a9e?s=128&d=identicon&r=PG", "display_name": "mako", "link": "https://stackoverflow.com/users/1085128/mako"}, "edited": false, "score": 2, "creation_date": 1559905143, "post_id": 30340815, "comment_id": 99574743, "body": "@mako: Runtimes are safe from the point of view of the user, in the sense that \u201cif it breaks, it&#39;s someone else&#39;s problem\u201d. But they are unsafe from the point of view of the implementor."}, {"owner": {"reputation": 1202, "user_id": 6619250, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/9f47e2aa5bd9841c653a46090c23692b?s=128&d=identicon&r=PG&f=1", "display_name": "hongsy", "link": "https://stackoverflow.com/users/6619250/hongsy"}, "edited": false, "score": 1, "creation_date": 1579359634, "post_id": 30340815, "comment_id": 105744116, "body": "Why is the API fundamentally unsafe?"}, {"owner": {"reputation": 337, "user_id": 13673517, "user_type": "registered", "profile_image": "https://graph.facebook.com/100000096398220/picture?type=large", "display_name": "David G. Pickett", "link": "https://stackoverflow.com/users/13673517/david-g-pickett"}, "edited": false, "score": 1, "creation_date": 1591299952, "post_id": 30340815, "comment_id": 110011956, "body": "Also you might want to check out Google&#39;s malloc() just made public -- high performance heap management through segregation."}], "owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 3563, "favorite_count": 10, "answer_count": 0, "score": 169, "last_activity_date": 1457285817, "creation_date": 1432099094, "last_edit_date": 1457285817, "question_id": 30340815, "link": "https://stackoverflow.com/questions/30340815/managing-the-lifetimes-of-garbage-collected-objects", "title": "Managing the lifetimes of garbage-collected objects", "body": "<p>I am making a simplistic <a href=\"https://gist.github.com/anonymous/79fb0bd4dc4d55e67e6b\" rel=\"noreferrer\">mark-and-compact garbage collector</a>. Without going too much into details, the API it exposes is like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// Describes the internal structure of a managed object.\npub struct Tag { ... }\n\n/// An unmanaged pointer to a managed object.\npub type Pointer = *mut usize;\n\n/// Mapping from old to new locations.\npub type Adjust = BTreeMap&lt;usize, Pointer&gt;;\n\n/// Mark this object and anything it points to as non-garbage.\npub unsafe fn survive(ptr: Pointer);\n\npub struct Heap { ... }\n\nimpl Heap {\n    pub fn new() -&gt; Heap;\n\n    // Allocate an object with the specified structure.\n    pub fn allocate(&amp;mut self, tag: Tag) -&gt; Pointer;\n\n    /// Move all live objects from `heap` into `self`.\n    puf unsafe fn reallocate(&amp;mut self, heap: Heap) -&gt; Adjust;\n}\n</code></pre>\n\n<p>This API is obviously fundamentally unsafe. I would like to rework the API (without changing the internals, which are just fine!) to account for the following facts:</p>\n\n<ol>\n<li><p>All <code>Pointer</code>s to (objects allocated in) a <code>Heap</code> become invalid when the heap is <code>merge</code>d into another heap.</p></li>\n<li><p><code>merge</code> returns an <code>Adjust</code> whose values are valid <code>Pointer</code>s to (objects allocated in) <code>self</code>.</p></li>\n</ol>\n\n<p>I have the following tentative solution:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// Replaces Pointer.\n#[derive(Copy, Clone)]\npub struct Object&lt;'a&gt; {\n    ptr: *mut AtomicUsize,\n    mark: PhantomData&lt;&amp;'a usize&gt;\n}\n\nimpl&lt;'a&gt; Object&lt;'a&gt; {\n    pub fn survive(self); // Now supposed to be perfectly safe!\n}\n\npub type Adjust&lt;'a&gt; = BTreeMap&lt;usize, Object&lt;'a&gt;&gt;;\n\npub struct Heap { ... }\npub struct Allocator&lt;'a&gt; { ... }\n\nimpl Heap {\n    fn allocator(&amp;'a self) -&gt; Allocator&lt;'a&gt;;\n    // The following doesn't work:\n    // \n    //  fn allocate(&amp;'a mut self) -&gt; Object&lt;'a&gt;;\n    //  fn reallocate(&amp;'a mut self, heap: Heap) -&gt; Adjust&lt;'a&gt;;\n    // \n    // Because it doesn't allow the user to allocate more\n    // than one `Object` at a time (!) in a `Heap`.\n}\n\nimpl&lt;'a&gt; Allocator&lt;'a&gt; {\n    // Note that the resulting `Object`s are tied to the `Heap`,\n    // but not to the allocator itself.\n    fn allocate(&amp;mut self, tag: Tag) -&gt; Object&lt;'a&gt;;\n    fn reallocate(&amp;mut self, heap: Heap) -&gt; Adjust&lt;'a&gt;;\n}\n</code></pre>\n\n<p>Is this design correct? If not, what needs to be changed?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1432108286, "post_id": 30339831, "comment_id": 48780192, "body": "Another use case is mathematical vectors of small arity. Like in a 2d or 3d vector processing library. Although you could also use a newtype for an array there."}], "answers": [{"comments": [{"owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 0, "creation_date": 1586044453, "post_id": 30343376, "comment_id": 107981404, "body": "Thx. What&#39;s the preference for <code>type Args = (i32, i32)</code> vs. <code>struct Args(i32, i32)</code>?"}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 1, "creation_date": 1586107357, "post_id": 30343376, "comment_id": 107998931, "body": "@HelinWang those are two different things. With <code>type</code> you define an alias (you create a different name for the same thing) and you can use one in any place you would use the other. See <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=617deb82495d71f83e54e36dbc11cdf7\" rel=\"nofollow noreferrer\">playground</a>"}, {"owner": {"reputation": 579, "user_id": 2873090, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b6ca02599d836c10ad5420f740311ef9?s=128&d=identicon&r=PG&f=1", "display_name": "catleeball", "link": "https://stackoverflow.com/users/2873090/catleeball"}, "edited": false, "score": 0, "creation_date": 1593895117, "post_id": 30343376, "comment_id": 110938837, "body": "Is there any significant difference in memory usage and allocation, beyond one stores field names? Or are they just two different ways to implement the same thing?"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 53, "last_activity_date": 1579525946, "last_edit_date": 1579525946, "creation_date": 1432108016, "answer_id": 30343376, "question_id": 30339831, "link": "https://stackoverflow.com/questions/30339831/what-are-some-use-cases-for-tuple-structs/30343376#30343376", "title": "What are some use cases for tuple structs?", "body": "<p>They are very similar to each other. </p>\n\n<p>Given the following <a href=\"https://play.rust-lang.org/?gist=a9d18a3f96af6f8a063bc6d404857eb7&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">definitions</a></p>\n\n<pre><code>struct TupleStruct(i32, i32);\nstruct NormalStruct {\n    a: i32,\n    b: i32,\n}\n</code></pre>\n\n<p>we can construct instances of structs and tuple structs as follows</p>\n\n<pre><code>let ts = TupleStruct(1, 2);\nlet ns = NormalStruct { a: 1, b: 2 };\n\n// shortcut to initialize the fields of a struct using the values of the\n// fields of another struct\nlet ns2 = NormalStruct { a: 5, ..ns };\nlet ts2 = TupleStruct { 0: 1, ..ts }; // for TupleStruct it needs curly brackets\n                                      // and implicit field names\n</code></pre>\n\n<p>Assignments work as follows</p>\n\n<pre><code>let TupleStruct(x, y) = ts;\nprintln!(\"x: {}, y: {}\", x, y);\n\nlet NormalStruct { a, b } = ns;\nprintln!(\"a: {}, b: {}\", a, b);\n</code></pre>\n\n<p>A <em>tuple struct</em>'s fields have implicit names (0, 1, ...). Hence, accessing fields is performed as follows</p>\n\n<pre><code>println!(\"Accessing ns by name - {}{}\", ns.a, ns.b);\nprintln!(\"accessing ts by name - {}{}\", ts.0, ts.1);\n</code></pre>\n\n<p>At least for documentation purposes, it's almost always clearer to assign explicit names to the fields of the struct. That's why in the Rust community I've seen many argue for always using a normal struct. </p>\n\n<p>However, there might be cases where the fields of the struct are inherently \"anonymous\", one notable case being the \"newtype\" (tuple struct with one field) where you're only wrapping an inner type.</p>\n\n<p>In that case, naming the inner field does not arguably provide any additional information. </p>\n\n<pre><code>struct Inches {\n    inner: i32,\n}\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>struct Inches(i32);\n</code></pre>\n\n<p>The <a href=\"https://doc.rust-lang.org/book/ch19-04-advanced-types.html#using-the-newtype-pattern-for-type-safety-and-abstraction\" rel=\"noreferrer\">section on structs on the Rust book</a> has more info on newtypes.</p>\n"}], "owner": {"reputation": 1230, "user_id": 3229983, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cc0eaa0499c55fb64131f77665af6574?s=128&d=identicon&r=PG&f=1", "display_name": "Anthony Calandra", "link": "https://stackoverflow.com/users/3229983/anthony-calandra"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12391, "favorite_count": 7, "accepted_answer_id": 30343376, "answer_count": 1, "score": 27, "last_activity_date": 1579525946, "creation_date": 1432092881, "question_id": 30339831, "link": "https://stackoverflow.com/questions/30339831/what-are-some-use-cases-for-tuple-structs", "title": "What are some use cases for tuple structs?", "body": "<p>The Rust book mentions that \"it is almost always better to use a struct than a tuple struct.\" Other than the newtype pattern, are there any other advantages of having unnamed fields? Seems to me like the newtype pattern is the only useful case of having tuple structs.</p>\n"}, {"tags": ["windows", "command-line", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1432090205, "post_id": 30339441, "comment_id": 48772677, "body": "You should edit your question to include what platform you are on. It is also helpful if you tell us what you have tried. Opening the command line is nothing special to Rust, and there are likely very good beginner resources for your platform."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1432093230, "post_id": 30339441, "comment_id": 48773408, "body": "See <a href=\"http://doc.rust-lang.org/stable/book/installing-rust.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/installing-rust.html</a> and <a href=\"http://doc.rust-lang.org/stable/book/hello-world.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/stable/book/hello-world.html</a>"}, {"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1432095090, "post_id": 30339441, "comment_id": 48773883, "body": "I have read both articles already, but after installing rust,, it says that it assumes I already know how to work the command line.  Anyways, I am on Windows, and using 64-bit release. I use shift+rmb inside the folder where the .rs file is located, and click open &quot;command window here&quot;. when i type &quot;rustc --version&quot; like the tutorial says to, it says that rustc is not an internal or external command. Also, I tried adding the rust folder and rust\\bin folder to path, but got the same error. I could not find even the most beginner things about rust, so I could not find an answer elsewhere."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1432098781, "post_id": 30339441, "comment_id": 48775034, "body": "I don&#39;t believe the Rust installer for Windows adds <code>rustc</code> to the system PATH by default; it might be easiest to re-install and make sure you do an &quot;advanced&quot; or &quot;custom&quot; install (whatever comes up) and ensure that you tell it to add rust to the PATH.  That way, <code>rustc</code> should work (if not immediately, then after a reboot)."}], "answers": [{"tags": [], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "is_accepted": false, "score": 0, "last_activity_date": 1432153115, "creation_date": 1432153115, "answer_id": 30359597, "question_id": 30339441, "link": "https://stackoverflow.com/questions/30339441/how-to-compile-the-examples-from-the-documentation/30359597#30359597", "title": "How to compile the examples from the documentation?", "body": "<p>I fixed the issue. For anyone who is wondering, if you are on Windows you just have to add the Rust bin file to the path. You can go to:\nControl Panels > System and Security > System > Advanced System Settings > Environment Variables. Then, scroll down to Path, and click edit. Add the path to the Rust/bin folder. I actually did this one time before I asked this question, but it was removed for some reason. Adding it backed worked for me.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 71, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1432153115, "creation_date": 1432089991, "last_edit_date": 1432142174, "question_id": 30339441, "link": "https://stackoverflow.com/questions/30339441/how-to-compile-the-examples-from-the-documentation", "title": "How to compile the examples from the documentation?", "body": "<p>I am following the Rust docs hello world program section, and I have it made and saved. Now it asks me to compile it by using the command line. However, it doesn't say where to start the command line from, or how to enable <code>rustc</code> command. I am hoping someone actually can answer this question, as I did not find much on the topic.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1466968367, "last_edit_date": 1466968367, "creation_date": 1432085264, "answer_id": 30338789, "question_id": 30338705, "link": "https://stackoverflow.com/questions/30338705/does-readread-guarantee-to-append-data-and-not-overwrite-any-existing-one/30338789#30338789", "title": "Does Read::read guarantee to append data and not overwrite any existing one?", "body": "<p>No, it does not guarantee that:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::str;\n\nfn main() {\n    let mut source1 = \"hello, world!\".as_bytes();\n    let mut source2 = \"moo\".as_bytes();\n\n    let mut dest = [0; 128];\n    source1.read(&amp;mut dest).unwrap();\n    source2.read(&amp;mut dest).unwrap();\n\n    let s = str::from_utf8(&amp;dest[..16]).unwrap();\n\n    println!(\"{:?}\", s)\n}\n</code></pre>\n\n<p>This prints</p>\n\n<pre><code>\"moolo, world!\\u{0}\\u{0}\\u{0}\"\n</code></pre>\n\n<p>Specifically, it cannot do what you want, based purely on the type signature:</p>\n\n<pre><code>fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt;;\n</code></pre>\n\n<p>All that the <code>read</code> method has access to is your mutable slice - there's nowhere to store information like \"how far in the buffer you are\". Furthermore, you aren't allowed to \"extend\" a mutable slice with more elements - you are only allowed to mutate the values within the slice.</p>\n\n<p>For your particular case, you may want to look at <a href=\"http://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_until\" rel=\"nofollow\"><code>BufRead::read_until</code></a>. Here's a barely-tested example:</p>\n\n<pre><code>use std::io::{BufRead,BufReader};\nuse std::str;\n\nfn main() {\n    let source1 = \"header 1\\r\\nheader 2\\r\\n\".as_bytes();\n    let mut reader = BufReader::new(source1);\n\n    let mut buf = vec![];\n    buf.reserve(128); // Maybe more efficient?\n\n    loop {\n        match reader.read_until(b'\\n', &amp;mut buf) {\n            Ok(0) =&gt; break,\n            Ok(_) =&gt; {},\n            Err(_) =&gt; panic!(\"Handle errors\"),\n        }\n\n        if buf.len() &lt; 2 { continue }\n\n        if buf[buf.len() - 2] == b'\\r' {\n            {\n                let s = str::from_utf8(&amp;buf).unwrap();\n                println!(\"Got a header {:?}\", s);\n            }\n            buf.clear();\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5307, "user_id": 1127635, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/386b2a9bdc91823e4688f0dcbdd2f9fb?s=128&d=identicon&r=PG", "display_name": "conradkleinespel", "link": "https://stackoverflow.com/users/1127635/conradkleinespel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 30338789, "answer_count": 1, "score": 2, "last_activity_date": 1466968367, "creation_date": 1432084748, "last_edit_date": 1466968321, "question_id": 30338705, "link": "https://stackoverflow.com/questions/30338705/does-readread-guarantee-to-append-data-and-not-overwrite-any-existing-one", "title": "Does Read::read guarantee to append data and not overwrite any existing one?", "body": "<p>I'm working on an SMTP library that reads lines over the network using a buffered reader.</p>\n\n<p>I want a nice, safe way to read data from the network, without depending on Rust internals to make sure the code works as expected. Specifically, I'm wondering if the <a href=\"http://doc.rust-lang.org/stable/std/io/trait.Read.html\" rel=\"nofollow\"><code>Read</code> trait</a> guarantees that data read with <a href=\"http://doc.rust-lang.org/stable/std/io/trait.Read.html#tymethod.read\" rel=\"nofollow\"><code>Read::read</code></a> is appended to the buffer passed as an argument rather than overwriting the buffer entirely.</p>\n\n<p>At the moment, <a href=\"https://github.com/conradkleinespel/rustastic-smtp/blob/927937d84649706c447fc63359318bb6d0c8bb3c/src/common/stream.rs#L138\" rel=\"nofollow\">I use a <code>Range</code></a> to make sure existing data is not overwritten without depending on Rust internals.</p>\n\n<p>However, given that Rust <a href=\"https://github.com/conradkleinespel/rustastic-smtp/blob/cd632f9db4b5bc5a9af28303362e96f1caa3131a/src/common/stream.rs#L131\" rel=\"nofollow\">used to have</a> a nice way to do what I want, I'm wondering if the current code can be improved, possibly removing the <code>unsafe</code> blocks too.</p>\n"}, {"tags": ["enums", "polymorphism", "rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432079345, "post_id": 30337719, "comment_id": 48770068, "body": "<i>then it seems like two expressions with different operators would be different types</i> - I think you need to post an example of this; I&#39;m not very sure what you mean."}, {"owner": {"reputation": 2598, "user_id": 218913, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/59b5bd7fe3da101beb97cfddfdb6f9e2?s=128&d=identicon&r=PG&f=1", "display_name": "williamg", "link": "https://stackoverflow.com/users/218913/williamg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432138582, "post_id": 30337719, "comment_id": 48802437, "body": "Well consider solution 3 in your answer. If I have two different unary operators, <code>A</code> and <code>B</code>, then some expressions would be <code>Expression&lt;A&gt;</code> and others would be <code>Expression&lt;B&gt;</code>. These are different types, right? As in suppose I had a vector of <code>Expression</code>s. That vector would have to be either a vector of <code>Expression&lt;A&gt;</code> or a vector of <code>Expression&lt;B&gt;</code>. It couldn&#39;t have both. Is that correct?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432143351, "post_id": 30337719, "comment_id": 48805203, "body": "Gotcha. As I understand it, you are correct. You <i>could</i> create a <code>Vec&lt;Expression&lt;&amp;UnaryOperator&gt;&gt;</code>, but there&#39;s certainly some extra hassle involved."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1432110198, "post_id": 30338006, "comment_id": 48781345, "body": "<i>This also has a known size (a pointer&#39;s worth).</i> =&gt; Actually, two pointers&#39; worth, those are fat pointers/references and contain both a pointer to the data part (which is heap-allocated) and a pointer to the v-table (ROM)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432143856, "post_id": 30338006, "comment_id": 48805505, "body": "@MatthieuM. ugh! I <i>always</i> get that wrong. Fixed now, and thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1432143969, "post_id": 30338006, "comment_id": 48805574, "body": "@MatthieuM. although, does the data part need to be <i>heap</i>-allocated? I know I&#39;ve seen a trait reference to something that seems to be on the stack like <code>let f1 = ImplementsFoo::new(); let f2: &amp;Foo = &amp;f1;</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1432144946, "post_id": 30338006, "comment_id": 48806160, "body": "The data part need not be allocated, the <code>&#39;a</code> in <code>Trait + &#39;a</code> refers to the lifetime of the data part actually (the v-table is <code>&#39;static</code>)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1432143235, "last_edit_date": 1495541160, "creation_date": 1432079207, "answer_id": 30338006, "question_id": 30337719, "link": "https://stackoverflow.com/questions/30337719/using-traits-as-types-in-enums/30338006#30338006", "title": "Using traits as types in enums", "body": "<p>Traits do not have a known size - they are <em>unsized</em>. To see why, check this out:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait AddOne {\n    fn add_one(&amp;self) -&gt; u8;\n}\n\nstruct Alpha {\n    a: u8,\n}\n\nstruct Beta {\n    a: [u8; 1024],\n}\n\nimpl AddOne for Alpha {\n    fn add_one(&amp;self) -&gt; { 0 }\n}\n\nimpl AddOne for Beta {\n    fn add_one(&amp;self) -&gt; { 0 }\n}\n</code></pre>\n\n<p>Both <code>Alpha</code> and <code>Beta</code> implement <code>AddOne</code>, so <em>how big should some arbitrary <code>AddOne</code> be</em>? Oh, and remember that other crates may implement your trait sometime in the future.</p>\n\n<p>That's why you get the first error. There are 3 main solutions (note that none of these solutions immediately fix your problem...):</p>\n\n<ol>\n<li>Use a <code>Box&lt;Trait&gt;</code>. This is kind-of-similar-but-different to languages like Java, where you just accept an interface. This has a known size (a pointer's worth) and owns the trait. This has the downside of requiring an allocation.</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    trait UnaryOperator {\n        fn apply(&amp;self, expr: Expression) -&gt; Expression;\n    }\n\n    pub enum Expression {\n        UnaryOp(Box&lt;UnaryOperator&gt;, Expression),\n        Value(i64)\n    }\n</code></pre>\n\n<ol start=\"2\">\n<li>Use a reference to the trait. This also has a known size (<s>a pointer's worth</s> two pointers' worth, see <a href=\"https://stackoverflow.com/questions/30337719/using-traits-as-types-in-enums?noredirect=1#comment48781345_30338006\">Matthieu M.'s comment</a>). The downside is that <em>something</em> has to own the object and you need to track the lifetime:</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    trait UnaryOperator {\n        fn apply&lt;'a&gt;(&amp;self, expr: Expression&lt;'a&gt;) -&gt; Expression&lt;'a&gt;;\n    }\n\n    pub enum Expression&lt;'a&gt; {\n        UnaryOp(&amp;'a UnaryOperator, Expression&lt;'a&gt;),\n        Value(i64)\n    }\n</code></pre>\n\n<ol start=\"3\">\n<li>Use a generic. This has a fixed size because each usage of the enum will have been specialized for the specific type. This has the downside of causing code bloat if you have many distinct specializations. <strong>Update</strong> As you point out, this means that <code>Expression&lt;A&gt;</code> and <code>Expression&lt;B&gt;</code> would have different types. Depending on your usage, this could be a problem. You wouldn't be able to <em>easily</em> create a <code>Vec&lt;Expression&lt;A&gt;&gt;</code> if you had both.</li>\n</ol>\n\n<pre class=\"lang-rust prettyprint-override\"><code>    trait UnaryOperator {\n        fn apply&lt;U&gt;(&amp;self, expr: Expression&lt;U&gt;) -&gt; Expression&lt;U&gt;;\n    }\n\n    pub enum Expression&lt;U&gt;\n        where U: UnaryOperator\n    {\n        UnaryOp(U, Expression&lt;U&gt;),\n        Value(i64)\n    }\n</code></pre>\n\n<p>Now, all of these fail as written because you have a <em>recursive type definition</em>. Let's look at this simplification:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Expression {\n    A(Expression),\n    B(u8),\n}\n</code></pre>\n\n<p>How big is <code>Expression</code>? Well, it needs to have enough space to hold... an <code>Expression</code>! Which needs to be able to hold an <code>Expression</code>.... you see where this is going.</p>\n\n<p>You need to add some amount of indirection here. Similar concepts to #1 and #2 apply - you can use a <code>Box</code> or a reference to get a fixed size:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>enum Expression {\n    A(Box&lt;Expression&gt;),\n    B(u8),\n}\n</code></pre>\n"}], "owner": {"reputation": 2598, "user_id": 218913, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/59b5bd7fe3da101beb97cfddfdb6f9e2?s=128&d=identicon&r=PG&f=1", "display_name": "williamg", "link": "https://stackoverflow.com/users/218913/williamg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 244, "favorite_count": 0, "accepted_answer_id": 30338006, "answer_count": 1, "score": 1, "last_activity_date": 1432143235, "creation_date": 1432077444, "last_edit_date": 1432078394, "question_id": 30337719, "link": "https://stackoverflow.com/questions/30337719/using-traits-as-types-in-enums", "title": "Using traits as types in enums", "body": "<p>Here's my code:</p>\n\n<pre><code>trait UnaryOperator {\n    fn apply(&amp;self, expr: Expression) -&gt; Expression;\n}\n\npub enum Expression {\n    UnaryOp(UnaryOperator, Expression),\n    Value(i64)\n}\n</code></pre>\n\n<p>Which gives the following errors:</p>\n\n<pre><code>error: the trait 'core::marker::sized' is not implemented for type 'parser::UnaryOperator'\nnote: 'parser::UnaryOperator' does not have a constant size known at compile-time\n</code></pre>\n\n<p>I'm not sure how to accomplish what I want. I've tried:</p>\n\n<pre><code>trait UnaryOperator: Sized {\n    ...\n}\n</code></pre>\n\n<p>As well as </p>\n\n<pre><code>pub enum Expression {\n    UnaryOp(UnaryOperator + Sized, Expression),\n    ...\n}\n</code></pre>\n\n<p>And neither solved the issue.</p>\n\n<p>I've seen ways to possibly accomplish what I want with generics, but then it seems like two expressions with different operators would be different types, but that's not what I want. I want all expressions to be the same type regardless of what the operators are.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1432079655, "post_id": 30336965, "comment_id": 48770150, "body": "Your first paragraph doesn\u2019t seem relevant to me. Rust could easily have allowed autoref everywhere; it was a conscious decision not to, because it tends to make code less clear."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1432101440, "post_id": 30336965, "comment_id": 48776086, "body": "@ChrisMorgan I think I&#39;m mostly trying to describe a better way to think about Rust&#39;s references, to set the stage so to speak. I was also getting at the fact that in C++ there&#39;s only <code>T &amp;</code> and <code>const T &amp;</code>, no <code>T &amp; &amp;</code> or anything."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 0, "last_activity_date": 1432073135, "creation_date": 1432073135, "answer_id": 30336965, "question_id": 30336354, "link": "https://stackoverflow.com/questions/30336354/automatic-borrowing-in-function-calls/30336965#30336965", "title": "Automatic Borrowing in Function Calls", "body": "<p>Although also written with <code>&amp;</code> and frequently called \"references\", these types in Rust are <em>pointers</em> in C++ parlance. They are first-class values, unlike C++ references, and as thus can (and must, in general) be created and dereferenced explicitly.</p>\n\n<p>Accessing fields and methods is a very common operation, however, and often you have <code>&amp;self</code>/<code>&amp;mut self</code> methods but own the object rather than just having a reference to it, or a reference to a struct whose fields you need to access. Requiring explicitly creating references and dereferencing them in those circumstances would result in a lot of line noise (especially because operator precedence is thus that you'd have to type <code>(&amp;foo).method()</code> or <code>(*foo).field</code>) for essentially no benefit: Taking a reference is free, and dereferencing to access is deemed worthy of a shortcut even in the spartan C language (<code>foo-&gt;field</code>). Therefore, when necessary, field access auto-dereferences (including though smart pointers, by the way) and method calls \"auto-references\".</p>\n\n<p>In other places (e.g. argument passing) this is far less commonly needed, and the explicitness is sometimes valuable for the reader. In general, the compiler can't figure out what you meant. This is exacerbated by the more recently added \"deref coercions\" where, for example, <code>&amp;x</code> for <code>x: Rc&lt;T&gt;</code> can result in a <code>&amp;T</code> rather than a <code>&amp;Rc&lt;T&gt;</code>. There are also tie-breakers for auto-deref but they are pretty clear and generally what you want.</p>\n"}], "owner": {"reputation": 428, "user_id": 4917890, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/29109f0a256a1fdbb598c890c8e18b5a?s=128&d=identicon&r=PG&f=1", "display_name": "Alex Ozdemir", "link": "https://stackoverflow.com/users/4917890/alex-ozdemir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 577, "favorite_count": 0, "accepted_answer_id": 30336965, "answer_count": 1, "score": 6, "last_activity_date": 1432073135, "creation_date": 1432070293, "question_id": 30336354, "link": "https://stackoverflow.com/questions/30336354/automatic-borrowing-in-function-calls", "title": "Automatic Borrowing in Function Calls", "body": "<p>I'm new to rust and I have a question regarding functions which borrow their arguments.</p>\n\n<p>In C++ a function's type signature alone specifies whether to take an argument by reference; the code which calls the function does not need to explicitly indicate that it is passing a reference. As an example:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>// The function signature indicates x should be passed by reference.\nvoid increment(int&amp; x) {\n    ++x;\n}\nvoid main() {\n    int y = 0;\n    increment(y); // y is implicitly passed by reference\n    // y is now 1\n}\n</code></pre>\n\n<p>Rust on the other hand does not seem to allow this. The following code will not compile:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>fn output(x: &amp;isize) {\n    println!(\"{}\", x);\n}\n\nfn main() {\n    let y: isize = 0;\n    output(y); // Error.\n    // output(&amp;y); &lt;- this is ok though\n}\n</code></pre>\n\n<p>When using method syntax through, if the function signature takes <code>&amp;self</code> or <code>&amp;mut self</code> then these borrows happen without the caller using <code>&amp;</code> or <code>&amp;mut</code>.</p>\n\n<p>Is there a reason that auto-borrowing doesn't happen for general function arguments, and if so why does it happen when using method syntax?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "reply_to_user": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "edited": false, "score": 0, "creation_date": 1432069532, "post_id": 30333969, "comment_id": 48766658, "body": "mark it as the answer, if it answered your question :)"}, {"owner": {"reputation": 3242, "user_id": 44000, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/47b18e559bb2c9c92abcf7a0de8d51db?s=128&d=identicon&r=PG", "display_name": "Milan", "link": "https://stackoverflow.com/users/44000/milan"}, "edited": false, "score": 1, "creation_date": 1481449007, "post_id": 30333969, "comment_id": 69375072, "body": "Any reason why you need to specify the lifetime on the keyword as well as on the typename?"}, {"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "reply_to_user": {"reputation": 3242, "user_id": 44000, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/47b18e559bb2c9c92abcf7a0de8d51db?s=128&d=identicon&r=PG", "display_name": "Milan", "link": "https://stackoverflow.com/users/44000/milan"}, "edited": false, "score": 1, "creation_date": 1481491271, "post_id": 30333969, "comment_id": 69387324, "body": "@Milan The first occurrence defines the lifetime. The second one is just one of many places where it can be used. The first occurrence is useful to have because there are more complex lifetime-defining constructs that can be used, such as lifetime bounds, e.g. <code>impl&lt;&#39;a, &#39;b, &#39;a: &#39;b&gt; Server&lt;&#39;a, &#39;b&gt; { ... }</code>. It&#39;s also where type parameters are defined, and they themselves can have trait bounds. In simple cases like this though it does feel repetitive, but at least it&#39;s consistent."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 3, "last_activity_date": 1432061956, "creation_date": 1432061956, "answer_id": 30333969, "question_id": 30333957, "link": "https://stackoverflow.com/questions/30333957/implementing-struct-that-has-lifetimes/30333969#30333969", "title": "Implementing struct that has lifetimes", "body": "<p>You need to have the lifetime annotation on the implementation as well.</p>\n\n<pre><code>impl&lt;'a&gt; Server&lt;'a&gt; {\n    fn connect() {\n        //stuff\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2088, "user_id": 4281998, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/q8Jvt.png?s=128&g=1", "display_name": "Brady Dean", "link": "https://stackoverflow.com/users/4281998/brady-dean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 906, "favorite_count": 1, "accepted_answer_id": 30333969, "answer_count": 1, "score": 4, "last_activity_date": 1432063991, "creation_date": 1432061908, "last_edit_date": 1432063991, "question_id": 30333957, "link": "https://stackoverflow.com/questions/30333957/implementing-struct-that-has-lifetimes", "title": "Implementing struct that has lifetimes", "body": "<p>Here's my code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Server&lt;'a&gt; {\n    port: &amp;'a u16,\n}\n\nimpl Server {\n    fn connect() {\n        //stuff\n    }\n}\n</code></pre>\n\n<p>The error I'm getting is with the <code>impl</code> block:</p>\n\n<pre><code>error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\n</code></pre>\n\n<p>I had to add a lifetime parameter to <code>Server</code> to allow the <code>u16</code> slice but I do not know how to add one for an <code>impl</code> block.</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 17, "creation_date": 1432109980, "post_id": 30333691, "comment_id": 48781198, "body": "Specifically: this is a case of <i>widening bound</i>; in general bounds impose <i>more</i> constraints however in the case of <code>Sized</code> it was decided that unless otherwise noted a generic <code>T</code> would be assumed to be <code>Sized</code> and the way to note it would be to mark it <code>?Sized</code> (maybe <code>Sized</code>)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 48, "last_activity_date": 1516129701, "last_edit_date": 1516129701, "creation_date": 1432061098, "answer_id": 30333691, "question_id": 30333607, "link": "https://stackoverflow.com/questions/30333607/what-does-the-question-mark-mean-in-a-type-parameter-bound/30333691#30333691", "title": "What does the question mark mean in a type parameter bound?", "body": "<p>It means that the trait is <em>optional</em>. The current syntax was introduced in the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0490-dst-syntax.md\" rel=\"noreferrer\">DST syntax RFC</a>.</p>\n\n<p>The only trait I am aware of that works for <code>?</code> is <code>Sized</code>.</p>\n\n<p>In this specific example, we can implement <code>BorrowMut</code> for <em>unsized types</em>, like <code>[T]</code> \u2014 note that there's no <code>&amp;</code> here!</p>\n\n<p>One built-in implementation makes use of that:</p>\n\n<pre><code>impl&lt;T&gt; BorrowMut&lt;[T]&gt; for Vec&lt;T&gt;\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/30333607/what-does-the-question-mark-mean-in-a-type-parameter-bound/30333691#comment48781198_30333691\">Matthieu M. adds</a>:</p>\n\n<blockquote>\n  <p>This is a case of a <em>widening bound</em>; in general bounds impose <em>more</em> constraints, but in the case of <code>Sized</code> it was decided that unless otherwise noted a generic <code>T</code> would be assumed to be <code>Sized</code>. The way to note the opposite would be to mark it <code>?Sized</code> (\"maybe <code>Sized</code>\"). </p>\n</blockquote>\n"}], "owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5860, "favorite_count": 8, "accepted_answer_id": 30333691, "answer_count": 1, "score": 56, "last_activity_date": 1516129701, "creation_date": 1432060841, "last_edit_date": 1516129532, "question_id": 30333607, "link": "https://stackoverflow.com/questions/30333607/what-does-the-question-mark-mean-in-a-type-parameter-bound", "title": "What does the question mark mean in a type parameter bound?", "body": "<p>I found the definition for <a href=\"http://doc.rust-lang.org/std/borrow/trait.BorrowMut.html\" rel=\"noreferrer\"><code>std::borrow::BorrowMut</code></a>:</p>\n\n<pre><code>pub trait BorrowMut&lt;Borrowed&gt;: Borrow&lt;Borrowed&gt;\nwhere\n    Borrowed: ?Sized,\n{\n    fn borrow_mut(&amp;mut self) -&gt; &amp;mut Borrowed;\n}\n</code></pre>\n\n<p>What does the question mark in front of <code>Sized</code> mean in this type parameter bound (<code>Borrowed: ?Sized</code>)?</p>\n\n<p>I consulted:</p>\n\n<ul>\n<li><a href=\"http://doc.rust-lang.org/stable/book/\" rel=\"noreferrer\">The Rust Programming Language</a>\u00b9 book, </li>\n<li><a href=\"https://doc.rust-lang.org/reference.html\" rel=\"noreferrer\">The Rust Reference</a>\u00b2, and also </li>\n<li><a href=\"https://stackoverflow.com/q/28044231/220060\">What does &quot;Sized is not implemented&quot; mean?</a> on Stack Overflow</li>\n</ul>\n\n<p>but didn't find an explanation. Please give a reference in your answer.</p>\n\n<p><hr>\u00b9 <sub>especially see section <a href=\"http://doc.rust-lang.org/stable/book/traits.html\" rel=\"noreferrer\">5.20 Traits</a></sub>\n<br>\u00b2 <sub>and section <a href=\"https://doc.rust-lang.org/reference.html#traits\" rel=\"noreferrer\">6.1.9 Traits</a></sub></p>\n"}, {"tags": ["multithreading", "rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1432052235, "creation_date": 1432052235, "answer_id": 30330963, "question_id": 30330697, "link": "https://stackoverflow.com/questions/30330697/extend-lifetime-of-a-variable-for-thread/30330963#30330963", "title": "Extend lifetime of a variable for thread", "body": "<p>The problem, fundamentally, is that <code>line</code> is a borrowed slice into <code>s</code>.  There's really nothing you can do here, since there's no way to guarantee that each <code>line</code> will not outlive <code>s</code> itself.</p>\n\n<p>Also, just to be clear: there is <em>absolutely no way</em> in Rust to \"extend the lifetime of a variable\".  It simply cannot be done.</p>\n\n<p>The simplest way around this is to go from <code>line</code> being <em>borrowed</em> to <em>owned</em>.  Like so:</p>\n\n<pre><code>use std::thread;\nfn main() {\n    let mut s: String = \"One\\nTwo\\nThree\\n\".into();\n    let k : Vec&lt;String&gt; = s.split(\"\\n\").map(|s| s.into()).collect();\n    for line in k {\n        thread::spawn(move || {\n            println!(\"nL: {:?}\", line);\n        });\n    }\n}\n</code></pre>\n\n<p>The <code>.map(|s| s.into())</code> converts from <code>&amp;str</code> to <code>String</code>.  Since a <code>String</code> owns its contents, it can be safely moved into each thread's closure, and will live independently of the thread that created it.</p>\n\n<p><strong>Note</strong>: you <em>could</em> do this in nightly Rust using the new scoped thread API, but that is still unstable.</p>\n"}], "owner": {"reputation": 173, "user_id": 959665, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/fe3c25cc6e69c20b78a3158d9011acc2?s=128&d=identicon&r=PG", "display_name": "Tyde", "link": "https://stackoverflow.com/users/959665/tyde"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 30330963, "answer_count": 1, "score": 2, "last_activity_date": 1432052235, "creation_date": 1432051497, "last_edit_date": 1432052069, "question_id": 30330697, "link": "https://stackoverflow.com/questions/30330697/extend-lifetime-of-a-variable-for-thread", "title": "Extend lifetime of a variable for thread", "body": "<p>I am reading a string from a file, splitting it by lines into a vector and then I want to do something with the extracted lines in separate threads. Like this:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::prelude::*;\nuse std::thread;\nfn main() {\n    match File::open(\"data\") {\n        Ok(mut result) =&gt; {\n            let mut s = String::new();\n            result.read_to_string(&amp;mut s);\n            let k : Vec&lt;_&gt; = s.split(\"\\n\").collect();\n            for line in k {\n                thread::spawn(move || {\n                    println!(\"nL: {:?}\", line);\n                });\n            }\n\n        }\n        Err(err) =&gt; {\n            println!(\"Error {:?}\",err);\n        }\n    }\n}\n</code></pre>\n\n<p>Of course this throws an error, because <code>s</code> will go out of scope before the threads are started: </p>\n\n<pre><code>s` does not live long enough\nmain.rs:9           let k : Vec&lt;_&gt; = s.split(\"\\n\").collect();\n                                     ^\n</code></pre>\n\n<p>What can I do now? I've tried many things like <code>Box</code> or <code>Arc</code>, but I couldn't get it working. I somehow need to create a copy of <code>s</code> which also lives in the threads. But how do I do that?</p>\n"}, {"tags": ["pointers", "rust", "ffi"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1432126733, "post_id": 30330519, "comment_id": 48793199, "body": "This doesn&#39;t work. It copies out the first word of <code>val</code> and stores it in v. Oh and if you want to store a pointer, store a pointer to something that actually lives -- such as a pointer to the <code>T</code> in a <code>Box&lt;T&gt;</code>."}, {"owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432134603, "post_id": 30330519, "comment_id": 48799596, "body": "&quot;Copying out the first word of <code>val</code>&quot; is what I want, as long as the type of <code>val</code> is exactly word-sized. The goal here is FFI interop with existing C code using data stored thus-wise."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432134804, "post_id": 30330519, "comment_id": 48799746, "body": "I don&#39;t think rust can do a restriction on <code>T</code>&#39;s size in general right now. However the assert is of course monomorphized and compiled at compile time, so at least there is no overhead."}, {"owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432139276, "post_id": 30330519, "comment_id": 48802835, "body": "Good point on the <code>assert!</code> getting resolved to a no-op or <code>panic!</code> at compile-time. If this sort of run-time check is in fact the best that Rust 1.0 can do, I&#39;ll accept that as an answer!"}, {"owner": {"reputation": 1218, "user_id": 3507731, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yXMo2.png?s=128&g=1", "display_name": "porglezomp", "link": "https://stackoverflow.com/users/3507731/porglezomp"}, "edited": false, "score": 1, "creation_date": 1441298476, "post_id": 30330519, "comment_id": 52632774, "body": "You could also write some <code>#[test]</code>s which contained those <code>assert!</code>s."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 5, "last_activity_date": 1526305534, "last_edit_date": 1526305534, "creation_date": 1474971123, "answer_id": 39721966, "question_id": 30330519, "link": "https://stackoverflow.com/questions/30330519/compile-time-generic-type-size-check/39721966#39721966", "title": "Compile-time generic type size check", "body": "<h2>Compile-time check?</h2>\n\n<blockquote>\n  <p>Is there a better way to do this, or is this run-time check the best Rust 1.0 supports?</p>\n</blockquote>\n\n<p>In general, <strong>there are some hacky solutions</strong> to do some kind of compile time testing of arbitrary conditions. For example, there is <a href=\"https://crates.io/crates/static_assertions\" rel=\"nofollow noreferrer\">the <code>static_assertions</code> crate</a> which offers some useful macros (including one macro similar to C++'s <code>static_assert</code>). However, this is <a href=\"https://nikolaivazquez.com/posts/programming/rust-static-assertions/\" rel=\"nofollow noreferrer\">hacky</a> and <strong>very limited</strong>. </p>\n\n<p>In your particular situation, I haven't found a way to perform the check at compile time. The root problem here is that <strong>you can't use <code>mem::size_of</code> or <code>mem::transmute</code> on a generic type</strong>. Related issues: <a href=\"https://github.com/rust-lang/rust/issues/43408\" rel=\"nofollow noreferrer\">#43408</a> and <a href=\"https://github.com/rust-lang/rust/issues/47966\" rel=\"nofollow noreferrer\">#47966</a>. For this reason, the <code>static_assertions</code> crate doesn't work either.</p>\n\n<p>If you think about it, this would also allow a kind of error very unfamiliar to Rust programmers: an error when instantiating a generic function with a specific type. This is well known to C++ programmers -- Rust's trait bounds are used to fix those often very bad and unhelpful error messages. In the Rust world, one would need to specify your requirement as trait bound: something like <code>where size_of::&lt;T&gt; == size_of::&lt;usize&gt;()</code>. </p>\n\n<p>However, this is currently not possible. There once was a fairly famous <a href=\"https://github.com/rust-lang/rfcs/pull/1657\" rel=\"nofollow noreferrer\">\"const-dependent type system\" RFC</a> which would allow these kinds of bounds, but got rejected for now. Support for these kinds of features are slowly but steadily progressing. \"Miri\" was merged into the compiler some time ago, allowing much more powerful constant evaluation. This is an enabler for many things, including <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md\" rel=\"nofollow noreferrer\">the \"Const Generics\" RFC</a>, which was actually merged. It is not yet implemented, but it is expected to land in 2018 or 2019. </p>\n\n<p>Unfortunately, it still doesn't enable the kind of bound you need. Comparing two const expressions for equality, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md#equality-of-two-abstract-const-expressions\" rel=\"nofollow noreferrer\">was purposefully left out of the main RFC</a> to be resolved in a future RFC. </p>\n\n<p>So it is to be expected that a bound similar to <code>where size_of::&lt;T&gt; == size_of::&lt;usize&gt;()</code> will eventually be possible. But this shouldn't be expected in the near future!</p>\n\n<hr>\n\n<h2>Workaround</h2>\n\n<p>In your situation, I would probably introduce an <em>unsafe</em> trait <code>AsBigAsUsize</code>. To implement it, you could write a macro <code>impl_as_big_as_usize</code> which performs a size check and implements the trait. Maybe something like this: </p>\n\n<pre><code>unsafe trait AsBigAsUsize: Sized {\n    const _DUMMY: [(); 0];\n}\n\nmacro_rules! impl_as_big_as_usize {\n    ($type:ty) =&gt; {\n        unsafe impl AsBigAsUsize for $type {\n            const _DUMMY: [(); 0] = \n                [(); (mem::size_of::&lt;$type&gt;() == mem::size_of::&lt;usize&gt;()) as usize];\n            // We should probably also check the alignment!\n        }\n    }\n}\n</code></pre>\n\n<p>This uses basically the same trickery as <code>static_assertions</code> is using. This works, because we never use <code>size_of</code> on a generic type, but only on concrete types of the macro invocation.</p>\n\n<p>So... this is obviously far from perfect. The user of your library has to invoke <code>impl_as_big_as_usize</code> once for every type they want to use in your data structure. But at least it's safe: as long as programmers only use the macro to impl the trait, the trait is in fact only implemented for types that have the same size as <code>usize</code>. Also, the error \"trait bound <code>AsBigAsUsize</code> is not satisfied\" is very understandable.</p>\n\n<hr>\n\n<h2>What about the run-time check?</h2>\n\n<p>As bluss said in the comments, in your <code>assert!</code> code, there is <strong>no <em>run-time check</em></strong>, because the optimizer constant-folds the check. Let's test that statement with this code:</p>\n\n<pre><code>#![feature(asm)]\n\nfn main() {\n    foo(3u64);\n    foo(true);\n}\n\n#[inline(never)]\nfn foo&lt;T&gt;(t: T) {\n    use std::mem::size_of;\n\n    unsafe { asm!(\"\" : : \"r\"(&amp;t)) }; // black box\n    assert!(size_of::&lt;usize&gt;() == size_of::&lt;T&gt;());\n    unsafe { asm!(\"\" : : \"r\"(&amp;t)) }; // black box\n}\n</code></pre>\n\n<p>The crazy <code>asm!()</code> expressions serve two purposes: </p>\n\n<ul>\n<li>\u201chiding\u201d <code>t</code> from LLVM, such that LLVM can't perform optimizations we don't want (like removing the whole function)</li>\n<li>marking specific spots in the resulting ASM code we'll be looking at</li>\n</ul>\n\n<p>Compile it with a nightly compiler (in a 64 bit environment!):</p>\n\n<pre><code>rustc -O --emit=asm test.rs\n</code></pre>\n\n<p>As usual, the resulting assembly code is hard to read; here are the important spots (with some cleanup):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>_ZN4test4main17he67e990f1745b02cE:  # main()\n    subq    $40, %rsp\n    callq   _ZN4test3foo17hc593d7aa7187abe3E\n    callq   _ZN4test3foo17h40b6a7d0419c9482E\n    ud2\n\n_ZN4test3foo17h40b6a7d0419c9482E: # foo&lt;bool&gt;()\n    subq    $40, %rsp\n    movb    $1, 39(%rsp)\n    leaq    39(%rsp), %rax\n    #APP\n    #NO_APP\n    callq   _ZN3std9panicking11begin_panic17h0914615a412ba184E\n    ud2\n\n_ZN4test3foo17hc593d7aa7187abe3E: # foo&lt;u64&gt;()\n    pushq   %rax\n    movq    $3, (%rsp)\n    leaq    (%rsp), %rax\n    #APP\n    #NO_APP\n    #APP\n    #NO_APP\n    popq    %rax\n    retq\n</code></pre>\n\n<p>The <code>#APP</code>-<code>#NO_APP</code> pair <em>is</em> our <code>asm!()</code> expression.</p>\n\n<ul>\n<li>The <code>foo&lt;bool&gt;</code> case: you can see that our first <code>asm!()</code> instruction is compiled, then an unconditioned call to <code>panic!()</code> is made and afterwards comes nothing (<code>ud2</code> just says \u201cthe program can never reach this spot, <code>panic!()</code> diverges\u201d).</li>\n<li>The <code>foo&lt;u64&gt;</code> case: you can see both <code>#APP</code>-<code>#NO_APP</code> pairs (both <code>asm!()</code> expressions) without anything in between. </li>\n</ul>\n\n<hr>\n\n<p>So yes: the compiler <strong>removes the check completely</strong>.</p>\n\n<p>It would be way better if the compiler would just refuse to compile the code. But this way we <em>at least</em> know, that there's no run-time overhead.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1525482075, "post_id": 50184379, "comment_id": 87386673, "body": "While this answer may or may not be true, in its current form it&#39;s so broad and lacking an example that it&#39;s hard to tell, which also means that it would be hard for someone to make actual use of this suggestion."}], "tags": [], "owner": {"reputation": 3142, "user_id": 2474792, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/327964b28dd74fd6bbbe669aac4edf04?s=128&d=identicon&r=PG", "display_name": "Demi", "link": "https://stackoverflow.com/users/2474792/demi"}, "is_accepted": false, "score": 1, "last_activity_date": 1525477710, "creation_date": 1525477710, "answer_id": 50184379, "question_id": 30330519, "link": "https://stackoverflow.com/questions/30330519/compile-time-generic-type-size-check/50184379#50184379", "title": "Compile-time generic type size check", "body": "<p>Contrary to the accepted answer, you <em>can</em> check at compile-time!</p>\n\n<p>The trick is to insert, when compiling with optimizations, a call to an undefined C function in the dead-code path.  You will get a linker error if your assertion would fail.</p>\n"}], "owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1931, "favorite_count": 2, "accepted_answer_id": 39721966, "answer_count": 2, "score": 20, "last_activity_date": 1526305534, "creation_date": 1432051048, "last_edit_date": 1495541706, "question_id": 30330519, "link": "https://stackoverflow.com/questions/30330519/compile-time-generic-type-size-check", "title": "Compile-time generic type size check", "body": "<p>I'm attempting to write Rust bindings for a C collection library (Judy Arrays [1]) which only provides itself room to store a pointer-width value. My company has a fair amount of existing code which uses this space to directly store non-pointer values such as pointer-width integers and small structs. I'd like my Rust bindings to allow type-safe access to such collections using generics, but am having trouble getting the pointer-stashing semantics working correctly.</p>\n\n<p>I have a basic interface working using <code>std::mem::transmute_copy()</code> to store the value, but that function explicitly does nothing to ensure the source and destination types are the same size.  I'm able to verify that collection type parameter is of a compatible size at run-time via an assertion, but I'd really like the check to somehow be at compile-time.</p>\n\n<p>Example code:</p>\n\n<pre><code>pub struct Example&lt;T&gt; {\n    v: usize,\n    t: PhantomData&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Example&lt;T&gt; {\n    pub fn new() -&gt; Example&lt;T&gt; {\n        assert!(mem::size_of::&lt;usize&gt;() == mem::size_of::&lt;T&gt;());\n        Example { v: 0, t: PhantomData }\n    }\n\n    pub fn insert(&amp;mut self, val: T) {\n        unsafe {\n            self.v = mem::transmute_copy(&amp;val);\n            mem::forget(val);\n        }\n    }\n}\n</code></pre>\n\n<p>Is there a better way to do this, or is this run-time check the best Rust 1.0 supports?</p>\n\n<p>(<a href=\"https://stackoverflow.com/questions/30328366/pointer-stashing-generics-via-memtransmute\">Related question</a>, explaining why I'm not using <code>mem::transmute()</code>.)</p>\n\n<p>[1] I'm aware of the existing rust-judy project, but it doesn't support the pointer-stashing I want, and I'm writing these new bindings largely as a learning exercise anyway.</p>\n"}, {"tags": ["pointers", "rust", "ffi"], "comments": [{"owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "edited": false, "score": 1, "creation_date": 1432050207, "post_id": 30328366, "comment_id": 48755169, "body": "Modified to just first question; will create new and link for second."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432050694, "post_id": 30328366, "comment_id": 48755500, "body": "An interesting question! It&#39;s almost like you want the ability to write <code>where sizeof(T) == sizeof(usize)</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432110978, "post_id": 30328366, "comment_id": 48781811, "body": "@Shepmaster: This would be tricky, because the link between the <code>where</code> clause and <code>transmute</code> would be slightly difficult to establish (especially if more general constraints can be used, like with <code>&lt;=</code> and <code>&gt;=</code>). On the other hand, it reminded me of: <a href=\"https://github.com/rust-lang/rfcs/issues/270\" rel=\"nofollow noreferrer\">RFC: Coercible and HasPrefix for Zero Cost Conversions</a>; the constraint could be enforceable for a <code>Transmutable&lt;X&gt; where mem::size_of::&lt;X&gt;() == mem::size_of::&lt;Self&gt;()</code> and then <code>transmute</code> from <code>T</code> to <code>usize</code> would require <code>T: Transmutable&lt;usize&gt;</code> =&gt; perfectly decidable."}], "answers": [{"comments": [{"owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "edited": false, "score": 0, "creation_date": 1432055209, "post_id": 30331733, "comment_id": 48758434, "body": "My goal is to have compile-time enforcement of size-compatibility, as <code>transmute()</code> does on bare values.  Transmuting references and adding run-time checks defeats the purpose."}, {"owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "edited": false, "score": 0, "creation_date": 1464451064, "post_id": 30331733, "comment_id": 62496950, "body": "Now that I have more Rust experience, I agree this is the way to go for now.  Assertions in construction methods can ensure the code is safe; the size-compatibility just can&#39;t be verified at compile-time."}, {"owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "reply_to_user": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "edited": false, "score": 0, "creation_date": 1464513450, "post_id": 30331733, "comment_id": 62510342, "body": "Reading this again after your comment, I believe you also need to verify the alignment requirements of the types. I updated the answer accordingly."}], "tags": [], "owner": {"reputation": 2891, "user_id": 135889, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/6660983655e40c381d6c93a2fffd42dd?s=128&d=identicon&r=PG", "display_name": "Ruud", "link": "https://stackoverflow.com/users/135889/ruud"}, "is_accepted": true, "score": 2, "last_activity_date": 1464513267, "last_edit_date": 1464513267, "creation_date": 1432054706, "answer_id": 30331733, "question_id": 30328366, "link": "https://stackoverflow.com/questions/30328366/pointer-stashing-generics-via-memtransmute/30331733#30331733", "title": "Pointer-stashing generics via `mem::transmute()`", "body": "<p>Instead of transmuting <code>T</code> to <code>usize</code> directly, you can transmute a <code>&amp;T</code> to <code>&amp;usize</code>:</p>\n\n<pre><code>pub fn insert(&amp;mut self, val: T) {\n    unsafe {\n        let usize_ref: &amp;usize = mem::transmute(&amp;val);\n        self.v = *usize_ref;\n    }\n}\n</code></pre>\n\n<p>Beware that this may read from an invalid memory location if the size of <code>T</code> is smaller than the size of <code>usize</code> or if the alignment requirements differ. This could cause a segfault. You can add an assertion to prevent this:</p>\n\n<pre><code>assert_eq!(mem::size_of::&lt;T&gt;(), mem::size_of::&lt;usize&gt;());\nassert!(mem::align_of::&lt;usize&gt;() &lt;= mem::align_of::&lt;T&gt;());\n</code></pre>\n"}], "owner": {"reputation": 4015, "user_id": 333504, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2da852ce11b8069172407bfc9bc20b8e?s=128&d=identicon&r=PG", "display_name": "llasram", "link": "https://stackoverflow.com/users/333504/llasram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 615, "favorite_count": 0, "accepted_answer_id": 30331733, "answer_count": 1, "score": 5, "last_activity_date": 1464513267, "creation_date": 1432045288, "last_edit_date": 1495541278, "question_id": 30328366, "link": "https://stackoverflow.com/questions/30328366/pointer-stashing-generics-via-memtransmute", "title": "Pointer-stashing generics via `mem::transmute()`", "body": "<p>I'm attempting to write Rust bindings for a C collection library (Judy Arrays [1]) which only provides itself room to store a pointer-width value.  My company has a fair amount of existing code which uses this space to directly store non-pointer values such as pointer-width integers and small structs.  I'd like my Rust bindings to allow type-safe access to such collections using generics, but am having trouble getting the pointer-stashing semantics working correctly.</p>\n\n<p>The <code>mem::transmute()</code> function seems like one potential tool for implementing the desired behavior, but attempting to use it on an instance of a parameterized type yield a confusing-to-me compilation error.</p>\n\n<p>Example code:</p>\n\n<pre><code>pub struct Example&lt;T&gt; {\n    v: usize,\n    t: PhantomData&lt;T&gt;,\n}\n\nimpl&lt;T&gt; Example&lt;T&gt; {\n    pub fn new() -&gt; Example&lt;T&gt; {\n        Example { v: 0, t: PhantomData }\n    }\n\n    pub fn insert(&amp;mut self, val: T) {\n        unsafe {\n            self.v = mem::transmute(val);\n        }\n    }\n}\n</code></pre>\n\n<p>Resulting error:</p>\n\n<pre><code>src/lib.rs:95:22: 95:36 error: cannot transmute to or from a type that contains type parameters in its interior [E0139]\nsrc/lib.rs:95             self.v = mem::transmute(val);\n                                   ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>Does this mean a type consisting only of a parameter \"contains type parameters in its interior\" and thus <code>transmute()</code> just won't work here? Any suggestions of the right way to do this?</p>\n\n<p>(<a href=\"https://stackoverflow.com/questions/30330519/compile-time-generic-type-size-check\">Related question</a>, attempting to achieve the same result, but not necessarily via <code>mem::transmute()</code>.)</p>\n\n<p>[1] I'm aware of the existing <code>rust-judy</code> project, but it doesn't support the pointer-stashing I want, and I'm writing these new bindings largely as a learning exercise anyway.</p>\n"}, {"tags": ["filter", "io", "rust"], "comments": [{"owner": {"reputation": 126499, "user_id": 1531124, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/zw18i.png?s=128&g=1", "display_name": "GhostCat", "link": "https://stackoverflow.com/users/1531124/ghostcat"}, "edited": false, "score": 2, "creation_date": 1432044691, "post_id": 30327997, "comment_id": 48750648, "body": "And what have you done so far? You should have enough experience to understand that SO is not a site where you just drop your work &quot;please do that for me&quot; on other people."}, {"owner": {"reputation": 2403, "user_id": 2685330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4e1223cc1e0a9b3459cabbd266c54c1?s=128&d=identicon&r=PG", "display_name": "Kozzi11", "link": "https://stackoverflow.com/users/2685330/kozzi11"}, "reply_to_user": {"reputation": 126499, "user_id": 1531124, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/zw18i.png?s=128&g=1", "display_name": "GhostCat", "link": "https://stackoverflow.com/users/1531124/ghostcat"}, "edited": false, "score": 0, "creation_date": 1432046889, "post_id": 30327997, "comment_id": 48752622, "body": "my fault I click post too early and do not realize It is missing my try"}], "answers": [{"comments": [{"owner": {"reputation": 2403, "user_id": 2685330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4e1223cc1e0a9b3459cabbd266c54c1?s=128&d=identicon&r=PG", "display_name": "Kozzi11", "link": "https://stackoverflow.com/users/2685330/kozzi11"}, "edited": false, "score": 0, "creation_date": 1432047824, "post_id": 30329127, "comment_id": 48753420, "body": "nice thanks a lot what do you think about this solution: <a href=\"http://www.abclinuxu.cz/zpravicky/rust-1.0#58\" rel=\"nofollow noreferrer\">abclinuxu.cz/zpravicky/rust-1.0#58</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2403, "user_id": 2685330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4e1223cc1e0a9b3459cabbd266c54c1?s=128&d=identicon&r=PG", "display_name": "Kozzi11", "link": "https://stackoverflow.com/users/2685330/kozzi11"}, "edited": false, "score": 0, "creation_date": 1432059019, "post_id": 30329127, "comment_id": 48760748, "body": "@Kozzi11, looks good. Formatting is a bit off though, and if you insist on using iterators you&#39;d better use some convenient iterator adapters from <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow noreferrer\">itertoos</a>, like <code>foreach()</code>, so you won&#39;t need to hackily force the iterator to run with <code>last()</code> or something."}, {"owner": {"reputation": 3653, "user_id": 786102, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/15fbc7eac0e190a249d7495cc9cdf156?s=128&d=identicon&r=PG", "display_name": "kralyk", "link": "https://stackoverflow.com/users/786102/kralyk"}, "edited": false, "score": 0, "creation_date": 1432071450, "post_id": 30329127, "comment_id": 48767530, "body": "@VladimirMatveev My formatting is unorthodox, yes :) Thanks for mentioning itertools, didn&#39;t know that..."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1432047662, "last_edit_date": 1432047662, "creation_date": 1432047318, "answer_id": 30329127, "question_id": 30327997, "link": "https://stackoverflow.com/questions/30327997/how-to-read-filter-and-modify-lines-from-a-file/30329127#30329127", "title": "How to read, filter and modify lines from a file", "body": "<p>Here you go:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main() {\n    let f = BufReader::new(File::open(\"/etc/passwd\").unwrap());\n    let it = f.lines()\n        .map(|line| line.unwrap())\n        .filter(|line| line.ends_with(\"/bin/bash\"))\n        .map(|line| line.split(\":\").next().unwrap().to_owned());\n    for p in it {\n        println!(\"{}\", p);\n    }\n}\n</code></pre>\n\n<p>This code allocates a separate string for each first splitted part though, but I don't think it is possible to avoid it without streaming iterators. And, of course, error handling here is really lax.</p>\n\n<p>I guess an imperative approach would be more idiomatic, especially in regard to error handling:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main() {\n    let f = BufReader::new(File::open(\"/etc/passwd\").unwrap());\n    for line in f.lines() {\n        match line {\n            Ok(line) =&gt; if line.ends_with(\"/bin/bash\") {\n                if let Some(name) = line.split(\":\").next() {\n                    println!(\"{}\", name);\n                } else {\n                    println!(\"Line does not contain ':'\");\n                }\n            },\n            Err(e) =&gt; panic!(\"Error reading file: {}\", e)\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2403, "user_id": 2685330, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c4e1223cc1e0a9b3459cabbd266c54c1?s=128&d=identicon&r=PG", "display_name": "Kozzi11", "link": "https://stackoverflow.com/users/2685330/kozzi11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1413, "favorite_count": 0, "accepted_answer_id": 30329127, "answer_count": 1, "score": 6, "last_activity_date": 1432047662, "creation_date": 1432044385, "last_edit_date": 1432046835, "question_id": 30327997, "link": "https://stackoverflow.com/questions/30327997/how-to-read-filter-and-modify-lines-from-a-file", "title": "How to read, filter and modify lines from a file", "body": "<p>How to do something similar to this D and Java code in Rust?</p>\n\n<p>Java:</p>\n\n<pre><code>import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main( String[] args ) throws IOException\n    {\n        Files.lines(Paths.get(\"/home/kozak/test.txt\"))\n            .filter(s -&gt; s.endsWith(\"/bin/bash\"))\n            .map(s -&gt; s.split(\":\", 2)[0])\n            .forEach(System.out::println);\n    }\n}\n</code></pre>\n\n<p>D language:</p>\n\n<pre><code>import std.algorithm;\nimport std.stdio;\n\nvoid main() {\n    File(\"/home/kozak/test.txt\")\n        .byLine\n        .filter!((s)=&gt;s.endsWith(\"/bin/bash\"))\n        .map!((s)=&gt;s.splitter(\":\").front)\n        .each!writeln;\n}\n</code></pre>\n\n<p>I try it, but I am lost with all this ownership stuff</p>\n\n<p>my rust code:</p>\n\n<pre><code>use std::io::BufReader;\nuse std::fs::File;\nuse std::io::BufRead;\nuse std::io::Lines;\n\nfn main() {\n    let file = match File::open(\"/etc/passwd\") {\n        Ok(file) =&gt; file,\n        Err(..)  =&gt; panic!(\"room\"),\n    };\n\n    let mut reader = BufReader::new(&amp;file);\n    for line in reader.lines().filter_map(\n        |x| if match x { Ok(v) =&gt; v.rmatches(\"/bin/bash\").count() &gt; 0, Err(e) =&gt; false}\n        { match x { Ok(v2) =&gt; Some(v2.split(\":\").next()), Err(e2) =&gt; None }} else\n        { None })\n    { \n            print!(\"{}\", line.unwrap() );\n\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 2, "last_activity_date": 1432040865, "creation_date": 1432040865, "answer_id": 30326557, "question_id": 30326322, "link": "https://stackoverflow.com/questions/30326322/how-to-implement-a-custom-allocator/30326557#30326557", "title": "How to implement a custom allocator?", "body": "<p>Funny thing is, the allocator you want is already available in <a href=\"http://doc.rust-lang.org/nightly/arena/index.html\" rel=\"nofollow\">arena</a> crate. It is unstable, so you have to use nightlies to use this crate. You can look at its <a href=\"https://github.com/rust-lang/rust/blob/master/src/libarena/lib.rs\" rel=\"nofollow\">sources</a> if you want to know how it is implemented.</p>\n"}, {"comments": [{"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1432052947, "post_id": 30326559, "comment_id": 48757068, "body": "The internal version isn&#39;t stable, but the external one on crates.io, which is the one you should be using, is."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 2, "last_activity_date": 1432040872, "creation_date": 1432040872, "answer_id": 30326559, "question_id": 30326322, "link": "https://stackoverflow.com/questions/30326322/how-to-implement-a-custom-allocator/30326559#30326559", "title": "How to implement a custom allocator?", "body": "<p>You may want to look at <a href=\"http://doc.rust-lang.org/nightly/arena/struct.TypedArena.html\" rel=\"nofollow\"><code>arena::TypedArena</code></a> in the standard library (<em>Note</em>: this is not stable and, as a result, is only available in nightly builds).</p>\n\n<p>If this doesn't fit your needs, you can always examine the source code (you can click the <code>[src]</code> link in the top right of the documentation) to see how it's done.</p>\n"}, {"comments": [{"owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432044194, "post_id": 30326582, "comment_id": 48750239, "body": "Thank you, this is exactly the same I want. Regarding the <code>box value</code> syntax, I think the syntax was in some older versions of Rust. Why was it removed and added again?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432045341, "post_id": 30326582, "comment_id": 48751229, "body": "@unnamed_addr it wasn&#39;t removed or added again ^_^. It was marked <i>unstable</i>, which means it cannot be used in a stable version of Rust (like 1.0 or 1.1.beta), but can be used in unstable versions (1.2.dev). It was marked unstable purely because the developers have yet to hammer out all the details about how placement new should work, and supporting it in 1.0 means they would have to support it for the entire lifetime of Rust 1.x."}, {"owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432049309, "post_id": 30326582, "comment_id": 48754573, "body": "Sorry I didn&#39;t notice it. In the hypothetical enhancement you wrote, isn&#39;t that <code>box my_allocator Foo(42)</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432050362, "post_id": 30326582, "comment_id": 48755274, "body": "@unnamed_addr it depends? In my example, I&#39;m assuming that there&#39;s some local variable called <code>my_arena</code> that can be used as an allocator, and in this case is an Arena-like allocator."}, {"owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432051024, "post_id": 30326582, "comment_id": 48755735, "body": "But doesn&#39;t <code>Box&lt;&gt;</code> free the memory when the variable goes out of scope? The objects allocated in the so-called &quot;arena&quot; can&#39;t be freed individually. So the <code>my_allocator</code> thing should implement a <code>free</code>-like method. Thus the hypothetical enhancement is something similar to how we pass custom allocators to STL containers. The word &quot;arena&quot; seems to be used only for allocators that don&#39;t allow objects to be destroyed individually, while the word &quot;allocator&quot; is more generic."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 1, "creation_date": 1432051339, "post_id": 30326582, "comment_id": 48755975, "body": "@unnamed_addr I think this discussion is part of the reason the <code>box</code> syntax is unstable ^_^. For example, should the <code>box</code> keyword always return a <code>Box</code> type? You may be interested in the <a href=\"https://github.com/rust-lang/rfcs/blob/0806be4f282144cfcd55b1d20284b43f87cbe1c6/text/0809-box-and-in-for-stdlib.md\" rel=\"nofollow noreferrer\">box syntax RFC</a> and the <a href=\"https://github.com/rust-lang/rfcs/blob/0806be4f282144cfcd55b1d20284b43f87cbe1c6/text/0469-feature-gate-box-patterns.md\" rel=\"nofollow noreferrer\">feature gating box RFC</a>."}, {"owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 0, "creation_date": 1432051422, "post_id": 30326582, "comment_id": 48756038, "body": "Sorry, I&#39;ve mistaken again."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "edited": false, "score": 1, "creation_date": 1432052414, "post_id": 30326582, "comment_id": 48756750, "body": "@unnamed_addr no worries - you aren&#39;t <i>mistaken</i>, it&#39;s just that this part of the language isn&#39;t completely fleshed out yet. Neither of us is right or wrong, because there isn&#39;t a &quot;right&quot; yet!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1432041370, "last_edit_date": 1432041370, "creation_date": 1432040928, "answer_id": 30326582, "question_id": 30326322, "link": "https://stackoverflow.com/questions/30326322/how-to-implement-a-custom-allocator/30326582#30326582", "title": "How to implement a custom allocator?", "body": "<p>It sounds like you want the <a href=\"https://crates.io/crates/typed-arena\">typed arena crate</a>, which is stable and can be used in Rust 1.0.</p>\n\n<pre><code>extern crate typed_arena;\n\n#[derive(Debug)]\nstruct Foo {\n    a: u8,\n    b: u8,\n}\n\nfn main() {\n    let allocator = typed_arena::Arena::new();\n    let f = allocator.alloc(Foo { a: 42, b: 101 });\n    println!(\"{:?}\", f)\n}\n</code></pre>\n\n<p>This does have limitations - all the objects must be the same. In my usage, I have a very small set of types that I wish to have, so I have just created a set of <code>Arena</code>s, one for each type.</p>\n\n<p>If that isn't suitable, you can look to <a href=\"http://doc.rust-lang.org/arena/struct.Arena.html\"><code>arena::Arena</code></a>, which is unstable and slower than a typed arena.</p>\n\n<p>The basic premise of both allocators is simple - you allow the arena to consume an item and it moves the bits around to its own memory allocation.</p>\n\n<p>Another meaning for the word \"allocator\" is what is used when you box a value. It is planned that Rust will gain support for \"placement new\" at some point, and the <code>box</code> syntax is reserved for that.</p>\n\n<p>In unstable versions of Rust, you can do something like <code>box Foo(42)</code>, and a (hypothetical) enhancement to that would allow you to say something like <code>box my_arena Foo(42)</code>, which would use the specified allocator. This capability is a few versions away from existing it seems.</p>\n"}], "owner": {"reputation": 837, "user_id": 4407235, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/852456ad707667cfbd432a0bebef780b?s=128&d=identicon&r=PG&f=1", "display_name": "unnamed_addr", "link": "https://stackoverflow.com/users/4407235/unnamed-addr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3455, "favorite_count": 2, "accepted_answer_id": 30326582, "answer_count": 3, "score": 5, "last_activity_date": 1432041370, "creation_date": 1432040289, "last_edit_date": 1432040742, "question_id": 30326322, "link": "https://stackoverflow.com/questions/30326322/how-to-implement-a-custom-allocator", "title": "How to implement a custom allocator?", "body": "<p>I am looking for a way to implement something like a memory pool in Rust. </p>\n\n<p>I want to allocate a set of related small objects in chunks, and delete the set of objects at once. The objects won't be freed separately. There are several benefits to this approach:</p>\n\n<ul>\n<li>It reduces fragmentation.</li>\n<li>It saves memory.</li>\n</ul>\n\n<p>Is there any way to create a allocator like this in Rust?</p>\n"}, {"tags": ["rust", "println"], "answers": [{"tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 110, "last_activity_date": 1554236675, "last_edit_date": 1554236675, "creation_date": 1432023178, "answer_id": 30320140, "question_id": 30320083, "link": "https://stackoverflow.com/questions/30320083/how-to-print-a-vec/30320140#30320140", "title": "How to print a Vec?", "body": "<pre><code>let v2 = vec![1; 10];\nprintln!(\"{:?}\", v2);\n</code></pre>\n\n<p><code>{}</code> is for strings and other values which can be displayed directly to the user. There's no single way to show a vector to a user.</p>\n\n<p>The <code>{:?}</code> formatter can be used to debug it, and it will look like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n</code></pre>\n\n<p><code>Display</code> is the trait that provides the method behind <code>{}</code>, and <code>Debug</code> is for <code>{:?}</code></p>\n"}, {"comments": [{"owner": {"reputation": 1011, "user_id": 1846758, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/51d73b3b1efd718864b0ee0438afe551?s=128&d=identicon&r=PG", "display_name": "highfly22", "link": "https://stackoverflow.com/users/1846758/highfly22"}, "edited": false, "score": 0, "creation_date": 1432026244, "post_id": 30320443, "comment_id": 48737172, "body": "Does the error E0210 mean that it is only allowed to implement trait Display in the file collections/vec.rs ?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1011, "user_id": 1846758, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/51d73b3b1efd718864b0ee0438afe551?s=128&d=identicon&r=PG", "display_name": "highfly22", "link": "https://stackoverflow.com/users/1846758/highfly22"}, "edited": false, "score": 1, "creation_date": 1432026598, "post_id": 30320443, "comment_id": 48737381, "body": "@highfly22: my understanding is that it should be in same crate, not necessarily the same file."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 1, "creation_date": 1457133014, "post_id": 30320443, "comment_id": 59284772, "body": "What? So I cannot ad-hoc add a Display trait impl in the module where I need it for a type in another crate?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "edited": false, "score": 3, "creation_date": 1457185918, "post_id": 30320443, "comment_id": 59297613, "body": "@BitTickler: No. The solution is to declare a new type: <code>struct Mine(That3rdPartyType);</code> and then <code>impl Display for Mine</code>."}, {"owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "edited": false, "score": 4, "creation_date": 1538475487, "post_id": 30320443, "comment_id": 92146674, "body": "Here is a &quot;newtype&quot; example: <a href=\"https://play.rust-lang.org/?gist=b28b96a28d081601e2e09b1fc26f8ade&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 65, "last_activity_date": 1554236604, "last_edit_date": 1554236604, "creation_date": 1432024164, "answer_id": 30320443, "question_id": 30320083, "link": "https://stackoverflow.com/questions/30320083/how-to-print-a-vec/30320443#30320443", "title": "How to print a Vec?", "body": "<blockquote>\n  <p>Does anyone implement this trait for <code>Vec&lt;T&gt;</code> ?</p>\n</blockquote>\n\n<p>No.</p>\n\n<p>And surprisingly, this is a demonstrably correct answer; which is rare since proving the absence of things is usually hard or impossible. So how can we be so certain?</p>\n\n<p>Rust has very strict coherence rules, the <code>impl Trait for Struct</code> can only be done:</p>\n\n<ul>\n<li>either in the same crate as <code>Trait</code></li>\n<li>or in the same crate as <code>Struct</code></li>\n</ul>\n\n<p>and nowhere else; let's <a href=\"https://play.rust-lang.org/?gist=6bd36ab0fcaafb97174c&amp;version=stable\" rel=\"noreferrer\">try it</a>:</p>\n\n<pre><code>impl&lt;T&gt; std::fmt::Display for Vec&lt;T&gt; {\n    fn fmt(&amp;self, _: &amp;mut std::fmt::Formatter) -&gt; Result&lt;(), std::fmt::Error&gt; {\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>yields:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct&lt;T&gt;`)\n --&gt; src/main.rs:1:1\n  |\n1 | impl&lt;T&gt; std::fmt::Display for Vec&lt;T&gt; {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n  |\n  = note: only traits defined in the current crate can be implemented for a type parameter\n</code></pre>\n\n<p>Furthermore, to use a trait, it needs to be in scope (and therefore, you need to be linked to its crate), which means that:</p>\n\n<ul>\n<li>you are linked both with the crate of <code>Display</code> and the crate of <code>Vec</code></li>\n<li>neither implement <code>Display</code> for <code>Vec</code></li>\n</ul>\n\n<p>and therefore leads us to conclude that no one implements <code>Display</code> for <code>Vec</code>.</p>\n\n<hr>\n\n<p>As a work around, as indicated by Manishearth, you can use the <code>Debug</code> trait, which is invokable via <code>\"{:?}\"</code> as a format specifier.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1479007472, "post_id": 30325430, "comment_id": 68376605, "body": "There&#39;s no requirement that you must know the <i>exact</i> type of the elements; you can <a href=\"http://play.integer32.com/?gist=38a0d87690419c4c1e7280c95e155d0b&amp;version=stable\" rel=\"nofollow noreferrer\">use a generic and allow any type that implements <code>Display</code></a>."}, {"owner": {"reputation": 4962, "user_id": 231441, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/P2kt4.png?s=128&g=1", "display_name": "zzeroo", "link": "https://stackoverflow.com/users/231441/zzeroo"}, "edited": false, "score": 1, "creation_date": 1538475410, "post_id": 30325430, "comment_id": 92146638, "body": "Unfortunately shepmasters gist isn&#39;t working anymore. I&#39;ve rebuild one from the examples here: <a href=\"https://play.rust-lang.org/?gist=b28b96a28d081601e2e09b1fc26f8ade&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "tags": [], "owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "is_accepted": false, "score": 23, "last_activity_date": 1479007393, "last_edit_date": 1479007393, "creation_date": 1432037916, "answer_id": 30325430, "question_id": 30320083, "link": "https://stackoverflow.com/questions/30320083/how-to-print-a-vec/30325430#30325430", "title": "How to print a Vec?", "body": "<p>If you know the type of the elements that the vector contains, you could make a struct that takes vector as an argument and implement <code>Display</code> for that struct.</p>\n\n<pre><code>use std::fmt::{Display, Formatter, Error};\n\nstruct NumVec(Vec&lt;u32&gt;);\n\nimpl Display for NumVec {\n    fn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result&lt;(), Error&gt; {\n        let mut comma_separated = String::new();\n\n        for num in &amp;self.0[0..self.0.len() - 1] {\n            comma_separated.push_str(&amp;num.to_string());\n            comma_separated.push_str(\", \");\n        }\n\n        comma_separated.push_str(&amp;self.0[self.0.len() - 1].to_string());\n        write!(f, \"{}\", comma_separated)\n    }\n}\n\nfn main() {\n    let numbers = NumVec(vec![1; 10]);\n    println!(\"{}\", numbers);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "is_accepted": false, "score": 8, "last_activity_date": 1488974969, "last_edit_date": 1488974969, "creation_date": 1488935853, "answer_id": 42661287, "question_id": 30320083, "link": "https://stackoverflow.com/questions/30320083/how-to-print-a-vec/42661287#42661287", "title": "How to print a Vec?", "body": "<p>Here is a one-liner which should also work for you:</p>\n\n<p><code>println!(\"[{}]\", v2.iter().fold(String::new(), |acc, &amp;num| acc + &amp;num.to_string() + \", \"));</code></p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6faf681b6de0705dc0fed980753a7a90&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Here</a> is \na runnable example.</p>\n\n<hr>\n\n<p>In my own case, I was receiving a <code>Vec&lt;&amp;str&gt;</code> from a function call.  I did not want to change the function signature to a custom type (for which I could implement the <code>Display</code> trait).</p>\n\n<p>For my one-of case, I was able to turn the display of my <code>Vec</code> into a one-liner which I used with <code>println!()</code> directly as follows:</p>\n\n<pre><code>println!(\"{}\", myStrVec.iter().fold(String::new(), |acc, &amp;arg| acc + arg));\n</code></pre>\n\n<p>(The lambda can be adapted for use with different data types, or for more concise <code>Display</code> trait implementations.)</p>\n"}], "owner": {"reputation": 1011, "user_id": 1846758, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/51d73b3b1efd718864b0ee0438afe551?s=128&d=identicon&r=PG", "display_name": "highfly22", "link": "https://stackoverflow.com/users/1846758/highfly22"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 47095, "favorite_count": 10, "accepted_answer_id": 30320443, "answer_count": 4, "score": 80, "last_activity_date": 1599928315, "creation_date": 1432022992, "last_edit_date": 1554236521, "question_id": 30320083, "link": "https://stackoverflow.com/questions/30320083/how-to-print-a-vec", "title": "How to print a Vec?", "body": "<p>I tried the following code:</p>\n\n<pre><code>fn main() {\n    let v2 = vec![1; 10];\n    println!(\"{}\", v2);\n}\n</code></pre>\n\n<p>But the compiler complains: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `std::vec::Vec&lt;{integer}&gt;` doesn't implement `std::fmt::Display`\n --&gt; src/main.rs:3:20\n  |\n3 |     println!(\"{}\", v2);\n  |                    ^^ `std::vec::Vec&lt;{integer}&gt;` cannot be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for `std::vec::Vec&lt;{integer}&gt;`\n  = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>Does anyone implement this trait for <code>Vec&lt;T&gt;</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 577, "user_id": 1629423, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24a2701c55cec3a586df7d0f6239792a?s=128&d=identicon&r=PG", "display_name": "deadfoxygrandpa", "link": "https://stackoverflow.com/users/1629423/deadfoxygrandpa"}, "edited": false, "score": 0, "creation_date": 1432025072, "post_id": 30320075, "comment_id": 48736357, "body": "Thanks, this was exactly what I was looking for!"}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 7, "last_activity_date": 1432022973, "creation_date": 1432022973, "answer_id": 30320075, "question_id": 30317170, "link": "https://stackoverflow.com/questions/30317170/how-to-block-until-one-of-two-receivers-has-available-data/30320075#30320075", "title": "How to block until one of two Receivers has available data?", "body": "<p>You want to use <a href=\"https://doc.rust-lang.org/nightly/std/macro.select!.html\"><code>select!()</code></a></p>\n\n<pre><code>fn run(mut self) {\n    // obtain parents\n    loop {\n        select! {\n           resp = parent1.recv() =&gt; match resp {...}\n           resp = parent2.recv() =&gt; match resp {...}\n        }\n    }\n\n}\n</code></pre>\n\n<p>If you have a dynamic number of channels to receive on, use <a href=\"https://doc.rust-lang.org/nightly/std/sync/mpsc/struct.Select.html\"><code>mpsc::Select</code></a></p>\n"}], "owner": {"reputation": 577, "user_id": 1629423, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24a2701c55cec3a586df7d0f6239792a?s=128&d=identicon&r=PG", "display_name": "deadfoxygrandpa", "link": "https://stackoverflow.com/users/1629423/deadfoxygrandpa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 100, "favorite_count": 0, "accepted_answer_id": 30320075, "answer_count": 1, "score": 4, "last_activity_date": 1432022973, "creation_date": 1432012076, "question_id": 30317170, "link": "https://stackoverflow.com/questions/30317170/how-to-block-until-one-of-two-receivers-has-available-data", "title": "How to block until one of two Receivers has available data?", "body": "<p>I'm new to Rust and trying to set up a one-directional graph of nodes using <code>Sender</code>s and <code>Receiver</code>s from <code>std::sync::mpsc</code>. Right now I have it working when each node has exactly one parent and one child, like this:</p>\n\n<pre><code>fn run(mut self) {\n    let parent = self.parent.unwrap();\n    loop {\n        match parent.recv() {\n            Ok(input) =&gt; {\n                self.value = (self.next_value)(input);\n                match self.kid {\n                    Some(ref k) =&gt; { k.send(self.value).unwrap(); },\n                    None =&gt; {}\n                }\n            },\n            Err(_) =&gt; {}\n        }\n    }\n\n}\n</code></pre>\n\n<p>But what I really want to do is have two parent nodes, where the <code>next_value</code> function is evaluated and the child nodes notified whenever <em>either</em> parent node sends out another value. I can't just use the blocking <code>recv()</code> method twice, and using polling and a non-blocking <code>try_recv()</code> call would probably work, but it seems really inefficient.</p>\n\n<p>Is there a better way to do this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432090614, "post_id": 30315600, "comment_id": 48772765, "body": "Oof! That RFC is a beast and honestly the only thing I took away from it (which is relevant to this question) is that you can&#39;t define a trait that is not yours (local to the trait) for a type that&#39;s not yours."}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432101583, "post_id": 30315600, "comment_id": 48776151, "body": "Am I the only one who feels that answers starting with &#39;nah&#39; are somewhat condescending, or at least a little too informal, no matter how correct its content may be? Also I admit I feel more strongly about this as @shepmaster has helped me more often I can count with highest quality answer that kept their style neutral, preventing oneself from feeling silly for asking."}, {"owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "edited": false, "score": 0, "creation_date": 1432103034, "post_id": 30315600, "comment_id": 48776860, "body": "That&#39;s something that can easily be fixed without needing to accuse me of being condescending, especially when my intention to help (and my answer history) shows that I&#39;m not like that. I mistakenly started my answer casually, where &quot;nah&quot; in this context was meant to convey a feeling of lamentation, as in, &quot;no and it&#39;s a shame that this isn&#39;t possible.&quot; Coherence (the subject of this question) is a source of such feelings in Rust. I don&#39;t see what about my answer gives the impression that I was being condescending, or trying to make Shep feel silly for asking."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1432143767, "post_id": 30315600, "comment_id": 48805449, "body": "Jorge Israel Pe&#241;a \u2014 no worries from my end. I understand that sometimes it&#39;s better to add a quick answer out there to get people rolling. I mostly wanted you to add a bit more prose to make the answer better at standing the test of time. @Byron&#39;s feelings are still valid though, and it wouldn&#39;t surprise me if there were other people that felt similar. It&#39;s a good thing for us all to keep in the back of our head!"}, {"owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "edited": false, "score": 0, "creation_date": 1432189975, "post_id": 30315600, "comment_id": 48823274, "body": "Please note that my comment is written to not accuse anyone, it&#39;s merely a question asking for feedback as err may well be on my side. The answer has since been edited and to my mind achieved the quality I know from SO. Even though it was left unspoken, I highly value the work of Jorge, who without doubt is a very acclaimed member of this community."}], "tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 1, "last_activity_date": 1432143808, "last_edit_date": 1432143808, "creation_date": 1432001190, "answer_id": 30315600, "question_id": 30315099, "link": "https://stackoverflow.com/questions/30315099/how-can-i-use-stdconvertinto-to-convert-something-that-might-fail/30315600#30315600", "title": "How can I use std::convert::Into to convert something that might fail?", "body": "<p>This isn't possible as-is due to coherence rules, which makes things like this pretty inconvenient, because you can't do it unless you create a newtype for one of the types, either the <code>Result</code> or the <code>&amp;str</code>. See <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1023-rebalancing-coherence.md\" rel=\"nofollow\">RFC #1023</a> for more information.</p>\n\n<p>In short, based on the new rules stipulated by that RFC, you cannot implement a trait that's not local to the crate for a type that's not local to the crate.</p>\n\n<blockquote>\n  <ol>\n  <li>Modify the orphan rules so that impls of remote traits require a local type that is either a struct/enum/trait defined in the current crate <code>LT = LocalTypeConstructor&lt;...&gt;</code> or a reference to a local type <code>LT = ... | &amp;LT | &amp;mut LT</code>.</li>\n  </ol>\n</blockquote>\n\n<p>So since you didn't create the <code>Into</code> trait in your crate nor the <code>Result</code> type, you get this error. Creating a new type fixes this because it basically wraps a non-local type in a local type.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 836, "favorite_count": 1, "accepted_answer_id": 30315600, "answer_count": 1, "score": 2, "last_activity_date": 1432143808, "creation_date": 1431996921, "question_id": 30315099, "link": "https://stackoverflow.com/questions/30315099/how-can-i-use-stdconvertinto-to-convert-something-that-might-fail", "title": "How can I use std::convert::Into to convert something that might fail?", "body": "<p>I would like a function that accepts a variety of types that can be converted to my specific type. In similar cases, I'd use <a href=\"http://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into\" rel=\"nofollow\"><code>std::convert::Into</code></a> (or <a href=\"http://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow\"><code>std::convert::From</code></a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct MyThing;\n\nimpl&lt;'a&gt; Into&lt;MyThing&gt; for &amp;'a str {\n    fn into(self) -&gt; MyThing { \n        MyThing\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>As an extra wrinkle, in my specific case, the conversion can potentially fail. Normally, I'd use <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"nofollow\"><code>Result</code></a> to represent an operation that may fail. Combining the two concepts together: </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct MyThing;\npub struct Error;\n\nimpl&lt;'a&gt; Into&lt;Result&lt;MyThing, Error&gt;&gt; for &amp;'a str {\n    fn into(self) -&gt; Result&lt;MyThing, Error&gt; { \n        if self.len() % 2 == 0 {\n            Ok(MyThing)\n        } else {\n            Err(Error)\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Unfortunately, this seems to run afoul of coherence rules:</p>\n\n<pre><code>error: the impl does not reference any types defined in this crate;\nonly traits defined in the current crate can be implemented for\narbitrary types [E0117]\n</code></pre>\n\n<p>I see that I could create my own specific trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyThing;\nstruct Error;\n\ntrait IntoMyThing {\n    fn into(self) -&gt; Result&lt;MyThing, Error&gt;;\n}\n\nimpl&lt;'a&gt; IntoMyThing for &amp;'a str {\n    fn into(self) -&gt; Result&lt;MyThing, Error&gt; { \n        if self.len() % 2 == 0 {\n            Ok(MyThing)\n        } else {\n            Err(Error)\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Or even a more-generic trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyThing;\nstruct Error;\n\ntrait MaybeInto&lt;T, E&gt; {\n    fn into(self) -&gt; Result&lt;T, E&gt;;\n}\n\nimpl&lt;'a&gt; MaybeInto&lt;MyThing, Error&gt; for &amp;'a str {\n    fn into(self) -&gt; Result&lt;MyThing, Error&gt; { \n        if self.len() % 2 == 0 {\n            Ok(MyThing)\n        } else {\n            Err(Error)\n        }\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>But is there any way to reuse components from the standard library to accomplish my goal?</p>\n"}, {"tags": ["python", "rust", "ctypes"], "answers": [{"tags": [], "owner": {"reputation": 103812, "user_id": 320726, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/02041b18199678d1f02e6d5040dbb907?s=128&d=identicon&r=PG", "display_name": "6502", "link": "https://stackoverflow.com/users/320726/6502"}, "is_accepted": false, "score": 6, "last_activity_date": 1431983916, "creation_date": 1431983916, "answer_id": 30312961, "question_id": 30312885, "link": "https://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function/30312961#30312961", "title": "Pass Python list to embedded Rust function", "body": "<p><code>ctypes</code> is about C bindings and in C there's no such a thing as a dynamic array.</p>\n\n<p>The closest object you can pass to a C function is a pointer to integer that however is not a dynamic array because</p>\n\n<ol>\n<li>It doesn't carry the size information</li>\n<li>You cannot grow or shrink the area, just access existing elements</li>\n</ol>\n\n<p>A simple alternative to passing pointers (and being very careful about not getting past the size) you could use instead is a function-based API.</p>\n\n<p>For example:</p>\n\n<pre><code>getNumberOfThings() -&gt; number\ngetThing(index) -&gt; thing\n</code></pre>\n\n<p>but the Python code would then become like</p>\n\n<pre><code>def func():\n    n = getNumberOfThings()\n    return [getThing(i) for i in range(n)]\n</code></pre>\n\n<p>The counterpart (passing a variable number of elements) would be</p>\n\n<pre><code>def func2(L):\n    setNumberOfThings(len(L))\n    for i, x in enumerate(L):\n        setThing(i, x)\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1431989593, "last_edit_date": 1495542805, "creation_date": 1431985440, "answer_id": 30313295, "question_id": 30312885, "link": "https://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function/30313295#30313295", "title": "Pass Python list to embedded Rust function", "body": "<p>Don't do this:</p>\n\n<pre><code>#[no_mangle]\npub extern fn my_func(my_vec: Vec&lt;i32&gt;) -&gt; i32 { ... }\n</code></pre>\n\n<p>You basically <em>never</em> want to accept or return an arbitrary Rust object in an <code>extern</code> function, only ones that are <a href=\"http://doc.rust-lang.org/std/raw/trait.Repr.html\" rel=\"nofollow noreferrer\"><code>Repr</code></a>. Instead, you should accept something that is representable by C. As <a href=\"https://stackoverflow.com/a/30312961/155423\">6502 says</a>, the best idea for this particular case would be to accept a pointer and a length.</p>\n\n<p>Rust's <code>Vec</code> is conceptually a pointer to data, a count, <strong>and a capacity</strong>. You are able to modify a <code>Vec</code> by adding or removing objects, which can cause reallocation to happen. This is doubly bad because it is likely that Python and Rust use different allocators that are not compatible with each other. Segfaults lie this way! You really want a <em>slice</em>.</p>\n\n<p>Instead, do something like this on the Rust side:</p>\n\n<pre><code>extern crate libc;\n\nuse libc::{size_t,int32_t};\nuse std::slice;\n\n#[no_mangle]\npub extern fn my_func(data: *const int32_t, length: size_t) -&gt; int32_t {\n    let nums = unsafe { slice::from_raw_parts(data, length as usize) };\n    nums.iter().fold(0, |acc, i| acc + i)\n}\n</code></pre>\n\n<p>Namely, you are using the guaranteed-to-match C types, and then converting the pointer and length to something Rust knows how to deal with.</p>\n\n<p>I'm no Pythonista, but this cobbled-together code (with help from <a href=\"https://stackoverflow.com/questions/4145775/how-do-i-convert-a-python-list-into-a-c-array-by-using-ctypes\">How do I convert a Python list into a C array by using ctypes?</a>) seems to work with the Rust I have above:</p>\n\n<pre><code>import ctypes\n\nlib = ctypes.cdll.LoadLibrary(\"./target/debug/libpython.dylib\")\nlib.my_func.argtypes = (ctypes.POINTER(ctypes.c_int32), ctypes.c_size_t)\n\nlist_to_sum = [1,2,3,4]\nc_array = (ctypes.c_int32 * len(list_to_sum))(*list_to_sum)\nprint lib.my_func(c_array, len(list_to_sum))\n</code></pre>\n\n<p>Of course, you probably want to wrap that to make it nicer for the caller of your code.</p>\n"}], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 907, "favorite_count": 3, "accepted_answer_id": 30313295, "answer_count": 2, "score": 11, "last_activity_date": 1431989593, "creation_date": 1431983467, "last_edit_date": 1431984748, "question_id": 30312885, "link": "https://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function", "title": "Pass Python list to embedded Rust function", "body": "<p>I am learning how to embed Rust functions in Python, and everything works fine if my inputs are <code>int</code>s, but not list. </p>\n\n<p>If my <code>lib.rs</code> file is:</p>\n\n<pre><code>#[no_mangle]\npub extern fn my_func(x: i32, y: i32) -&gt; i32 {\n    return x + y;\n}\n</code></pre>\n\n<p>I can use this as follows:</p>\n\n<pre><code>In [1]: from ctypes import cdll\n\nIn [2]: lib = cdll.LoadLibrary(\"/home/user/RustStuff/embed/target/release/libembed.so\")\n\nIn [3]: lib.my_func(5,6)\nOut[3]: 11\n</code></pre>\n\n<p>However if I change my <code>lib.rs</code> to:</p>\n\n<pre><code>#[no_mangle]\npub extern fn my_func(my_vec: Vec&lt;i32&gt;) -&gt; i32 {\n    let mut my_sum = 0;\n    for i in my_vec {\n        my_sum += i;\n    }\n    return my_sum;\n}\n</code></pre>\n\n<p>I can no longer use it in Python (this compiled fine):</p>\n\n<pre><code>In [1]: from ctypes import cdll\n\nIn [2]: lib = cdll.LoadLibrary(\"/home/user/RustStuff/embed/target/release/libembed.so\")\n\nIn [3]: lib.my_func([2,3,4])\n---------------------------------------------------------------------------\nArgumentError                             Traceback (most recent call last)\n&lt;ipython-input-3-454ffc5ba9dd&gt; in &lt;module&gt;()\n----&gt; 1 lib.my_func([2,3,4])\n\nArgumentError: argument 1: &lt;type 'exceptions.TypeError'&gt;: Don't know how to convert parameter 1\n</code></pre>\n\n<p>The reason, I though this could work is that Python's <code>list</code> and Rust's <code>Vec</code> are the both <em>dynamic arrays</em>, but apparently I am missing something here...</p>\n\n<p>Why does my attempt not work? What should I do to fix it?</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 5008, "user_id": 308118, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e55b33618800b7f1f0a7ac28a761c788?s=128&d=identicon&r=PG", "display_name": "Joshua Rodgers", "link": "https://stackoverflow.com/users/308118/joshua-rodgers"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 72, "favorite_count": 0, "closed_date": 1431979731, "answer_count": 0, "score": 3, "last_activity_date": 1431977326, "creation_date": 1431975411, "last_edit_date": 1431977326, "question_id": 30310895, "link": "https://stackoverflow.com/questions/30310895/object-safety-and-trait-inheritance", "closed_reason": "Duplicate", "title": "Object safety and trait inheritance", "body": "<p>I'm investigating object safety with traits in rust and based on the following piece of code, I have a couple of questions.</p>\n\n<pre><code>trait Foo {}\ntrait Bar : Foo {}\n\nstruct Baz;\n\nimpl Foo for Baz {}\n\nimpl Bar for Baz {}\n\nfn do_foo(_: &amp;Foo) {\n    println!(\"Doing foo stuff.\");\n}\n\nfn do_bar(_: &amp;Bar) {\n    println!(\"Doing bar tuff.\");\n}\n\nfn main() {\n    let x = Baz;\n\n    let y: &amp;Foo = &amp;x;\n    do_foo(y);\n\n    let y: &amp;Bar = &amp;x;\n    do_bar(y);\n    // do_foo(y); -- Does not compile with mismatched types error, Expected: &amp;Foo, found &amp;Bar\n}\n</code></pre>\n\n<ol>\n<li>Since <code>Bar</code> inherits from <code>Foo</code>, why is it not possible to coerce <code>&amp;Bar</code> to <code>&amp;Foo</code>?</li>\n<li>Is there a workaround to this issue that does not require declaring <code>do_foo</code> as generic? It may be the case that <code>do_foo</code> itself may need to exist on a object-safe trait.</li>\n</ol>\n"}, {"tags": ["file", "file-io", "path", "directory", "rust"], "comments": [{"owner": {"reputation": 4826, "user_id": 193789, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/a17cc57e47435930a48f7c80bcd53863?s=128&d=identicon&r=PG", "display_name": "kebs", "link": "https://stackoverflow.com/users/193789/kebs"}, "edited": false, "score": 0, "creation_date": 1431969749, "post_id": 30309100, "comment_id": 48713993, "body": "Unclear to me. Please give more details on the use case."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "reply_to_user": {"reputation": 4826, "user_id": 193789, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/a17cc57e47435930a48f7c80bcd53863?s=128&d=identicon&r=PG", "display_name": "kebs", "link": "https://stackoverflow.com/users/193789/kebs"}, "edited": false, "score": 0, "creation_date": 1431974850, "post_id": 30309100, "comment_id": 48716645, "body": "@kebs The main use case would be that if the user provided one file, or just all files in a directory of a certain type ie: <code>.&#47;*.js</code>, it it would only work through those files, but if the user wanted all files contained within a directory, I need to be able to go through it recursively( I know there is walk_dir that does this, but it is unstable). Or if the user combined both, and provided both a link to files, and a link to a directory."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431970763, "post_id": 30309566, "comment_id": 48714469, "body": "For reference, the Rust API docs have <a href=\"http://doc.rust-lang.org/std/fs/fn.metadata.html?search=dir\" rel=\"nofollow noreferrer\">reasonable search results</a> for &quot;dir&quot;. The third result at the time of writing is the solution in this answer."}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1431971181, "post_id": 30309566, "comment_id": 48714669, "body": "@Shepmaster Yeah, but to be fair, the second result is <code>PathExt::is_dir</code>, which is unstable and therefore probably not what the asker is looking for, even though it also does what they want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1431971345, "post_id": 30309566, "comment_id": 48714738, "body": "that&#39;s why I said &quot;reasonable&quot; not &quot;great&quot;. ^_^ Hopefully that will only get better! I mostly wanted to point out that the API reference can be a good resource as well."}, {"owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "edited": false, "score": 0, "creation_date": 1431974940, "post_id": 30309566, "comment_id": 48716692, "body": "I was looking in the Rust docs, but i was thinking it would be part of <code>std::fs::File</code>, or <code>std::path::Path</code>."}, {"owner": {"reputation": 7213, "user_id": 4126114, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/TUM6e.jpg?s=128&g=1", "display_name": "Shadi", "link": "https://stackoverflow.com/users/4126114/shadi"}, "edited": false, "score": 0, "creation_date": 1578387164, "post_id": 30309566, "comment_id": 105412329, "body": "For Rust 1.5+, PathBuf has <code>is_file</code>"}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 17, "last_activity_date": 1431970790, "last_edit_date": 1431970790, "creation_date": 1431970514, "answer_id": 30309566, "question_id": 30309100, "link": "https://stackoverflow.com/questions/30309100/how-to-check-if-a-given-path-is-a-file-or-directory/30309566#30309566", "title": "How to check if a given path is a file or directory?", "body": "<p>You should use <a href=\"http://doc.rust-lang.org/std/fs/fn.metadata.html\" rel=\"noreferrer\"><code>std::fs::metadata</code></a>:</p>\n\n<pre><code>use std::fs::metadata;\n\nfn main() {\n    let md = metadata(\".\").unwrap();\n    println!(\"is dir: {}\", md.is_dir());\n    println!(\"is file: {}\", md.is_file());\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>is dir: true\nis file: false\n</code></pre>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4315, "favorite_count": 0, "accepted_answer_id": 30309566, "answer_count": 1, "score": 9, "last_activity_date": 1431970790, "creation_date": 1431968936, "last_edit_date": 1431970594, "question_id": 30309100, "link": "https://stackoverflow.com/questions/30309100/how-to-check-if-a-given-path-is-a-file-or-directory", "title": "How to check if a given path is a file or directory?", "body": "<p>I'm building a program that should be able to take both paths to files (<code>*.*</code>), and directories (<code>./</code>, <code>..</code>). I want to be able to check if the path supplied is a file, or a directory.</p>\n"}, {"tags": ["regex", "vim", "rust", "vim-syntax-highlighting"], "answers": [{"comments": [{"owner": {"reputation": 813, "user_id": 1453453, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24d7111ef96c9534289fa27d069594e2?s=128&d=identicon&r=PG", "display_name": "aepsil0n", "link": "https://stackoverflow.com/users/1453453/aepsil0n"}, "edited": false, "score": 1, "creation_date": 1431991826, "post_id": 30309949, "comment_id": 48724166, "body": "Thanks for the answer and also to Chris for creating the PR."}], "tags": [], "owner": {"reputation": 28343, "user_id": 1890567, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/NSohE.png?s=128&g=1", "display_name": "FDinoff", "link": "https://stackoverflow.com/users/1890567/fdinoff"}, "is_accepted": true, "score": 3, "last_activity_date": 1431971904, "creation_date": 1431971904, "answer_id": 30309949, "question_id": 30308846, "link": "https://stackoverflow.com/questions/30308846/highlight-matching-angle-brackets-in-rust-syntax/30309949#30309949", "title": "Highlight matching angle-brackets in Rust syntax", "body": "<p>This is actually handled by the MatchParen plugin (comes with all vim installations).</p>\n\n<p>The MatchParen plugin uses a fixed list of syntax attributes to ignore when searching for the matching bracket (From around line 96 in <code>$VIMRUNTIME/plugin/matchparen.vim</code>)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  \" When not in a string or comment ignore matches inside them.\n  \" We match \"escape\" for special items, such as lispEscapeSpecial.\n  let s_skip ='synIDattr(synID(line(\".\"), col(\".\"), 0), \"name\") ' .\n    \\ '=~?  \"string\\\\|character\\\\|singlequote\\\\|escape\\\\|comment\"'\n  execute 'if' s_skip '| let s_skip = 0 | endif'\n</code></pre>\n\n<p><code>s_skip</code> is then passed to <code>searchpairpos</code> later on. It does not appear there is anyway to modify <code>s_skip</code> from outside the plugin.</p>\n\n<p>So if you change all instances of <code>rustArrow</code> to <code>rustArrowCharacter</code> the bracket highlighting will be correct. (There are three instances to change two in <code>syntax/rust.vim</code> and one <code>ftplugin/rust.vim</code>) The check just checks to see if string, character, singlequote, escape, or comment appear anywhere in the syntax attribute (case insensitive). If it does skip it when searching for matching brackets.</p>\n\n<p>I would recommend asking on vim-dev if matchparen can be patched so that custom syntax attributes can be added to the skip list.</p>\n"}], "owner": {"reputation": 813, "user_id": 1453453, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24d7111ef96c9534289fa27d069594e2?s=128&d=identicon&r=PG", "display_name": "aepsil0n", "link": "https://stackoverflow.com/users/1453453/aepsil0n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 546, "favorite_count": 0, "accepted_answer_id": 30309949, "answer_count": 1, "score": 3, "last_activity_date": 1431971904, "creation_date": 1431967956, "question_id": 30308846, "link": "https://stackoverflow.com/questions/30308846/highlight-matching-angle-brackets-in-rust-syntax", "title": "Highlight matching angle-brackets in Rust syntax", "body": "<p>Trying to fix <a href=\"https://github.com/rust-lang/rust.vim/issues/25\" rel=\"nofollow\">a bug</a> in Rust's vim plugin, I thought it might be worth getting some advice on this.</p>\n\n<p>Rust has generics denoted using angle brackets (<code>&lt;...&gt;</code>) similar to C++ or Java. However, it is possible that an arrow (<code>-&gt;</code>) might occur inside. As an example consider the expression</p>\n\n<pre><code>Box&lt;Fn(A) -&gt; B&gt;\n</code></pre>\n\n<p>When the cursor is over the opening bracket, vim highlights the arrow's <code>&gt;</code> instead of the closing bracket.</p>\n\n<p>Now I thought this happened because the syntax region matching did not special-case the possible existence of arrows. I tried to fix that by changing <code>end=/&gt;/</code> to <code>end=/-\\@&lt;!&gt;/</code> in its definition. But apparently that has no effect on parenthesis highlighting. Now I'm starting to think syntax regions have nothing to do with this.</p>\n\n<p>In summary my question is: How can you change the way parentheses are matched for highlighting?</p>\n"}, {"tags": ["rust", "imperative-programming", "imperative-languages"], "comments": [{"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432097381, "post_id": 30305974, "comment_id": 48774561, "body": "@Shepmaster yes, it works, but I cannot iterate through the tree. I edited to demonstrate an idea. It doesn&#39;t work but show what I&#39;m trying to get. But I think ket&#39;s answer allows me to do it."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1432106688, "post_id": 30305974, "comment_id": 48779175, "body": "I don&#39;t think my answer answers your question anymore. It might be one thing you wanted or a solution to your problem. But the answer to your question is given by @DK. You should be matching on the enum contents, not just the names"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1432119347, "post_id": 30305974, "comment_id": 48787779, "body": "@ker okay, I&#39;l mark his answer, if you will. Anyawy, both answers was very useful."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1431960100, "creation_date": 1431960100, "answer_id": 30306187, "question_id": 30305974, "link": "https://stackoverflow.com/questions/30305974/printing-a-tree-attempted-access-of-field-but-no-field-with-that-name-was-fou/30306187#30306187", "title": "Printing a tree \u2014 attempted access of field, but no field with that name was found", "body": "<p>Just because both variants of <code>Node</code> have a <code>value</code> field, doesn't mean you can access it directly.  You can get it by matching on the value (these are equivalent):</p>\n\n<pre><code>let value = match leaf {\n    Node::Branch { value, .. } =&gt; value,\n    Node::Leaf { value } =&gt; value,\n};\n\nlet value = match leaf {\n    Node::Branch { value, .. } | Node::Leaf { value } =&gt; value,\n};\n</code></pre>\n\n<p>But if you're going to do this a lot, you probably want to add a method:</p>\n\n<pre><code>impl Node {\n    pub fn get_value(&amp;self) -&gt; i32 {\n        match self {\n            &amp;Node::Branch { value, .. } =&gt; value,\n            &amp;Node::Leaf { value } =&gt; value,\n        }\n    }\n}\n</code></pre>\n\n<p>...which you can then use like so:</p>\n\n<pre><code>let value = leaf.get_value();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1431960196, "creation_date": 1431960196, "answer_id": 30306222, "question_id": 30305974, "link": "https://stackoverflow.com/questions/30305974/printing-a-tree-attempted-access-of-field-but-no-field-with-that-name-was-fou/30306222#30306222", "title": "Printing a tree \u2014 attempted access of field, but no field with that name was found", "body": "<p>Using my magic powers of intuition, I'm guessing you have some code like this:</p>\n\n<pre><code>enum Node {\n    Branch { value: i32 },\n    Leaf { value: i32 },\n}\n\nfn main() {\n    let leaf = Node::Leaf { value: 15 };\n\n    println!(\"{}\", leaf.value);\n}\n</code></pre>\n\n<p>Which indeed has the error:</p>\n\n<pre><code>&lt;anon&gt;:9:20: 9:30 error: attempted access of field `value` on type `Node`, but no field with that name was found\n&lt;anon&gt;:9     println!(\"{}\", leaf.value);\n                            ^~~~~~~~~~\n</code></pre>\n\n<p>The problem is that the type of <code>leaf</code> is <code>Node</code>, and <code>Node</code> has two variants, <code>Branch</code> or <code>Leaf</code>. There is no type called <code>Node::Branch</code> or <code>Node::Leaf</code>. You need to match on the enumeration to exhaustively handle all the cases:</p>\n\n<pre><code>enum Node {\n    Branch { value: i32 },\n    Leaf { value: i32 },\n}\n\nfn main() {\n    let leaf = Node::Leaf { value: 15 };\n\n    match leaf {\n        Node::Branch { value } =&gt; println!(\"Branch [{}]\", value),\n        Node::Leaf { value }   =&gt; println!(\"Leaf [{}]\", value),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 2, "last_activity_date": 1432106494, "last_edit_date": 1432106494, "creation_date": 1431961092, "answer_id": 30306565, "question_id": 30305974, "link": "https://stackoverflow.com/questions/30305974/printing-a-tree-attempted-access-of-field-but-no-field-with-that-name-was-fou/30306565#30306565", "title": "Printing a tree \u2014 attempted access of field, but no field with that name was found", "body": "<p>Since all your enum variants have the same field, you can extract the field into an outer struct and only keep the fields that differ inside the enum. This way you have direct access to the inner <code>value</code> field. When you want to find out whether your node is a <code>Branch</code> or a <code>Leaf</code>, you need to match on the <code>kind</code> field. Also I suggest to use an <code>Rc&lt;Node&gt;</code> instead of a <code>*const Node</code>, as accessing the value the <code>*const Node</code> points to requires unsafe code and will most likely get you into trouble in more complex code.</p>\n\n<pre><code>enum NodeKind {\n    Branch(*const Node),\n    Leaf,\n}\n\nuse NodeKind::*;\n\nstruct Node {\n    value: i32,\n    kind: NodeKind,\n}\n\nfn main() {\n    let leaf = Node{ value: 15, kind: Leaf };\n    let branch = Node { value: 10, kind: Branch(&amp;leaf) };\n    let root = Node { value: 50, kind: Branch(&amp;branch) };\n}\n</code></pre>\n\n<p>I think what you actually want is the following code: <a href=\"http://is.gd/rIKWm2\" rel=\"nofollow\">PlayPen</a></p>\n"}], "owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 527, "favorite_count": 0, "accepted_answer_id": 30306187, "answer_count": 3, "score": 1, "last_activity_date": 1432106601, "creation_date": 1431959510, "last_edit_date": 1432106601, "question_id": 30305974, "link": "https://stackoverflow.com/questions/30305974/printing-a-tree-attempted-access-of-field-but-no-field-with-that-name-was-fou", "title": "Printing a tree \u2014 attempted access of field, but no field with that name was found", "body": "<p>I'm am trying to write my first Rust program. I want to print a simple tree on the screen, but I cannot access a <code>value</code> property, it says </p>\n\n<blockquote>\n  <p>Error 1   attempted access of field <code>value</code> on type <code>Node</code>, but no field\n  with that name was found  c:\\users\\zhukovskiy\\documents\\visual studio\n  2013\\Projects\\rust_application1\\rust_application1\\src\\main.rs 21  20  rust_application1</p>\n</blockquote>\n\n<pre><code>use std::io;\n\nenum Node {\n    Branch { value: i32, next: *const Node },\n    Leaf { value: i32 }\n}\n\nfn main() {\n    let leaf = Node::Leaf { value: 15 };\n    let branch = Node::Branch { value: 10, next: &amp;leaf };\n    let root = Node::Branch { value: 50, next: &amp;branch };\n\n    let current = root;\n    loop {\n        match current {\n            Node::Branch =&gt; { println!(\"{}\", current.value); current = current.next; },\n            Node::Leaf =&gt; { println!(\"{}\", current.value); break; }, \n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1431959131, "post_id": 30304145, "comment_id": 48706954, "body": "A binding is just a name for a value, pointing the name to something else does not affect the value itself, which lives as it would have otherwise."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1585704251, "last_edit_date": 1585704251, "creation_date": 1431956117, "answer_id": 30304661, "question_id": 30304145, "link": "https://stackoverflow.com/questions/30304145/is-the-resource-of-a-shadowed-variable-binding-freed-immediately/30304661#30304661", "title": "Is the resource of a shadowed variable binding freed immediately?", "body": "<p>No, it is not freed immediately. Let's make the code tell us itself:</p>\n\n<pre><code>struct Foo(u8);\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping {}\", self.0)\n    }\n}\n\nfn main() {\n    let a = Foo(1);\n    let b = Foo(2);\n\n    println!(\"All done!\");\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>All done!\nDropping 2\nDropping 1\n</code></pre>\n\n<p>For me, this has come in handy in cases where you transform the variable into some sort of reference, but don't care about the original. For example:</p>\n\n<pre><code>fn main() {\n    let msg = String::from(\"   hello world   \\n\");\n    let msg = msg.trim();\n}\n</code></pre>\n"}], "owner": {"reputation": 3648, "user_id": 229499, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/33e440a0b5d5f4c6d961fd91dc243296?s=128&d=identicon&r=PG", "display_name": "Heiko Seeberger", "link": "https://stackoverflow.com/users/229499/heiko-seeberger"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 171, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1585704251, "creation_date": 1431954630, "question_id": 30304145, "link": "https://stackoverflow.com/questions/30304145/is-the-resource-of-a-shadowed-variable-binding-freed-immediately", "title": "Is the resource of a shadowed variable binding freed immediately?", "body": "<p>According to the Rust book, \"when a binding goes out of scope, the resource that they\u2019re bound to are freed\". Does that also apply to shadowing?</p>\n\n<p>Example:</p>\n\n<pre><code>fn foo() {\n    let v = vec![1, 2, 3];\n    // ... Some stuff\n    let v = vec![4, 5, 6]; // Is the above vector freed here?\n    // ... More stuff\n} // Or here?\n</code></pre>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1431901495, "post_id": 30292752, "comment_id": 48682036, "body": "It looks like you read the right page for parsing it. Did you see the <a href=\"http://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/index.html#parsing-a-str-to-json-and-reading-the-result\" rel=\"nofollow noreferrer\">example</a> down the page that looks like exactly what you want?"}, {"owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1431901720, "post_id": 30292752, "comment_id": 48682094, "body": "@squiguy Yeah I added <code>let obj = data.as_object().unwrap();</code> and got <code>thread &#39;&lt;main&gt;&#39; panicked at &#39;called </code>Option::unwrap()` on a <code>None</code> value&#39;, C:/bo t/slave/stable-dist-rustc-win-32/build/src/libcore\\option.rs&zwnj;&#8203;:362 }An unknown error occurred`"}], "answers": [{"comments": [{"owner": {"reputation": 1478, "user_id": 5090886, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/dbrza.jpg?s=128&g=1", "display_name": "FrickeFresh", "link": "https://stackoverflow.com/users/5090886/frickefresh"}, "edited": false, "score": 11, "creation_date": 1515754909, "post_id": 30293084, "comment_id": 83431280, "body": "Note that the rustc_serialize repo says it is deprecated now in favor of <a href=\"https://github.com/serde-rs/json\" rel=\"nofollow noreferrer\">github.com/serde-rs/json</a>"}], "tags": [], "owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "is_accepted": false, "score": 32, "last_activity_date": 1431904394, "creation_date": 1431904394, "answer_id": 30293084, "question_id": 30292752, "link": "https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file/30293084#30293084", "title": "How do I parse a JSON File?", "body": "<p>Solved by the many helpful members of the Rust community:</p>\n\n<pre><code>extern crate rustc_serialize;\nuse rustc_serialize::json::Json;\nuse std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let mut file = File::open(\"text.json\").unwrap();\n    let mut data = String::new();\n    file.read_to_string(&amp;mut data).unwrap();\n\n    let json = Json::from_str(&amp;data).unwrap();\n    println!(\"{}\", json.find_path(&amp;[\"Address\", \"Street\"]).unwrap());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 43, "last_activity_date": 1583162180, "last_edit_date": 1583162180, "creation_date": 1524261194, "answer_id": 49950214, "question_id": 30292752, "link": "https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file/49950214#49950214", "title": "How do I parse a JSON File?", "body": "<p>Serde is the preferred JSON serialization provider. You can <a href=\"https://stackoverflow.com/q/31192956/155423\">read the JSON text from a file a number of ways</a>. Once you have it as a string, use <a href=\"https://docs.serde.rs/serde_json/fn.from_str.html\" rel=\"noreferrer\"><code>serde_json::from_str</code></a>:</p>\n\n<pre><code>fn main() {\n    let the_file = r#\"{\n        \"FirstName\": \"John\",\n        \"LastName\": \"Doe\",\n        \"Age\": 43,\n        \"Address\": {\n            \"Street\": \"Downing Street 10\",\n            \"City\": \"London\",\n            \"Country\": \"Great Britain\"\n        },\n        \"PhoneNumbers\": [\n            \"+44 1234567\",\n            \"+44 2345678\"\n        ]\n    }\"#;\n\n    let json: serde_json::Value =\n        serde_json::from_str(the_file).expect(\"JSON was not well-formatted\");\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[dependencies]\nserde = { version = \"1.0.104\", features = [\"derive\"] }\nserde_json = \"1.0.48\"\n</code></pre>\n\n<p>You could even use something like <a href=\"https://docs.serde.rs/serde_json/fn.from_reader.html\" rel=\"noreferrer\"><code>serde_json::from_reader</code></a> to read directly from an opened <code>File</code>.</p>\n\n<p>Serde can be used for formats other than JSON and it can serialize and deserialize to a custom struct instead of an arbitrary collection:</p>\n\n<pre><code>use serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Person {\n    first_name: String,\n    last_name: String,\n    age: u8,\n    address: Address,\n    phone_numbers: Vec&lt;String&gt;,\n}\n\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Address {\n    street: String,\n    city: String,\n    country: String,\n}\n\nfn main() {\n    let the_file = /* ... */;\n\n    let person: Person = serde_json::from_str(the_file).expect(\"JSON was not well-formatted\");\n    println!(\"{:?}\", person)\n}\n</code></pre>\n\n<p>Check the <a href=\"https://serde.rs/\" rel=\"noreferrer\">Serde website</a> for more details.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1534386920, "post_id": 51868654, "comment_id": 90689444, "body": "An answer using serde_json is already present. Please <a href=\"https://stackoverflow.com/posts/51868654/edit\">edit</a> <i>this</i> answer to more clearly show what is different and useful that warrants repeating."}, {"owner": {"reputation": 972, "user_id": 4142459, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9dcb52dd46bfa991f3b524663657ac2?s=128&d=identicon&r=PG&f=1", "display_name": "Zargold", "link": "https://stackoverflow.com/users/4142459/zargold"}, "edited": false, "score": 1, "creation_date": 1547665737, "post_id": 51868654, "comment_id": 95273372, "body": "Unlike in other answer how to get the string from the file was not described. This is a full example of how to use serde to read from a separate file (foo.json) and take that string read_to_string and finally unwrap it. Also, the links to serde_json did not work nor did the example for serde_json::from_reader() work from the website."}], "tags": [], "owner": {"reputation": 925, "user_id": 4701228, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a51e05717e2b8a78ae0876d705757d41?s=128&d=identicon&r=PG&f=1", "display_name": "semore_1267", "link": "https://stackoverflow.com/users/4701228/semore-1267"}, "is_accepted": false, "score": 1, "last_activity_date": 1534385082, "creation_date": 1534385082, "answer_id": 51868654, "question_id": 30292752, "link": "https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file/51868654#51868654", "title": "How do I parse a JSON File?", "body": "<p>Upvoted the accepted answer (as it helps), but just adding my answer, using the widely used <a href=\"https://docs.serde.rs/serde_json/\" rel=\"nofollow noreferrer\">serde_json</a> crate referenced by @FrickeFresh</p>\n\n<p>Assuming your <code>foo.json</code> is</p>\n\n<pre><code>{\n    \"name\": \"Jane\",\n    \"age\": 11\n}\n</code></pre>\n\n<p>Implementation would look something like</p>\n\n<pre><code>extern crate serde;\nextern crate json_serde;\n#[macro_use] extern crate json_derive;\nuse std::fs::File;\nuse std::io::Read;\n\n#[derive(Serialize, Deserialize)]\nstruct Foo {\n    name: String,\n    age: u32,\n}\n\nfn main() {\n   let mut file = File::open(\"foo.json\").unwrap();\n   let mut buff = String::new();\n   file.read_to_string(&amp;mut buff).unwrap();\n\n   let foo: Foo = serde_json::from_str(&amp;buff).unwrap();\n   println!(\"Name: {}\", foo.name);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1540386989, "post_id": 52964674, "comment_id": 92846235, "body": "An answer using serde_json is already present. Please <a href=\"https://stackoverflow.com/posts/52964674/edit\">edit</a> this answer to more clearly show what is different and useful that warrants repeating."}], "tags": [], "owner": {"reputation": 3384, "user_id": 3805131, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/D2Gzu.jpg?s=128&g=1", "display_name": "tworec", "link": "https://stackoverflow.com/users/3805131/tworec"}, "is_accepted": false, "score": 13, "last_activity_date": 1541517411, "last_edit_date": 1541517411, "creation_date": 1540370996, "answer_id": 52964674, "question_id": 30292752, "link": "https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file/52964674#52964674", "title": "How do I parse a JSON File?", "body": "<p>There is a brief and complete example of how to read JSON from file in <a href=\"https://docs.serde.rs/serde_json/de/fn.from_reader.html\" rel=\"noreferrer\"><code>serde_json::de::from_reader</code></a> docs. </p>\n\n<p>Here is a short snippet for:</p>\n\n<ul>\n<li>reading a file</li>\n<li>parsing its contents as a JSON</li>\n<li>and extracting a field with the desired key</li>\n</ul>\n\n<p>Enjoy:</p>\n\n<pre><code>let file = fs::File::open(\"text.json\")\n    .expect(\"file should open read only\");\nlet json: serde_json::Value = serde_json::from_reader(file)\n    .expect(\"file should be proper JSON\");\nlet first_name = json.get(\"FirstName\")\n    .expect(\"file should have FirstName key\");\n</code></pre>\n"}], "owner": {"reputation": 1609, "user_id": 4233606, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/rh3M0.jpg?s=128&g=1", "display_name": "Vikaton", "link": "https://stackoverflow.com/users/4233606/vikaton"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 27531, "favorite_count": 11, "accepted_answer_id": 49950214, "answer_count": 4, "score": 50, "last_activity_date": 1583162180, "creation_date": 1431901210, "last_edit_date": 1431906182, "question_id": 30292752, "link": "https://stackoverflow.com/questions/30292752/how-do-i-parse-a-json-file", "title": "How do I parse a JSON File?", "body": "<p>I have this so far in my goal to Parse this JSON data in Rust:</p>\n\n<pre><code>extern crate rustc_serialize;\nuse rustc_serialize::json::Json;\nuse std::fs::File;\nuse std::io::copy;\nuse std::io::stdout;\n\nfn main() {\n    let mut file = File::open(\"text.json\").unwrap();\n    let mut stdout = stdout();\n    let mut str = &amp;copy(&amp;mut file, &amp;mut stdout).unwrap().to_string();\n    let data = Json::from_str(str).unwrap();\n}\n</code></pre>\n\n<p>and <code>text.json</code> is</p>\n\n<pre><code>{\n    \"FirstName\": \"John\",\n    \"LastName\": \"Doe\",\n    \"Age\": 43,\n    \"Address\": {\n        \"Street\": \"Downing Street 10\",\n        \"City\": \"London\",\n        \"Country\": \"Great Britain\"\n    },\n    \"PhoneNumbers\": [\n        \"+44 1234567\",\n        \"+44 2345678\"\n    ]\n}\n</code></pre>\n\n<p>What should be my next step into parsing it? My primary goal is to get JSON data like this, and parse a key from it, like Age.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1431903473, "creation_date": 1431903473, "answer_id": 30292990, "question_id": 30292426, "link": "https://stackoverflow.com/questions/30292426/how-to-implement-iterator-for-boxed-values/30292990#30292990", "title": "How to implement Iterator for boxed values?", "body": "<p>This comes down to Rust\u2019s ownership model and the distinction between copy and move semantics; <code>Box&lt;T&gt;</code> has move semantics, not implementing <code>Copy</code>, and so <code>return Some(self.number);</code> would move <code>self.number</code>, taking ownership of it; but this is not permitted because it would require consuming <code>self</code>, which is only taken by mutable reference.</p>\n\n<p>You have a few choices (where I write \u201cthe object with move semantics,\u201d I mean in this specific case <code>self.number</code>):</p>\n\n<ol>\n<li><p>Don\u2019t return the object with move semantics, return something else with copy semantics reference, such as a reference instead of the boxed value (returning a reference will require the iterator object to be different from the object being iterated over so that you can write the lifetime in <code>Item</code>; thus it doesn\u2019t apply to your specific use case) or the unboxed number.</p></li>\n<li><p>Construct a new value to return based on the object with move semantics:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Iterator for Numbers {\n    type Item = Box&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &gt; 0 {\n            self.count -= 1;\n            Some(Box::new(self.number))\n        } else {\n            None\n        }\n    }\n}\n</code></pre></li>\n<li><p>Clone the object with move semantics (this is a simplified form of the second option, really):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Iterator for Numbers {\n    type Item = Box&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &gt; 0 {\n            self.count -= 1;\n            Some(self.number.clone())\n        } else {\n            None\n        }\n    }\n}\n</code></pre></li>\n<li><p>Construct a new value to substitute in place of the object with move semantics:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\n\nimpl Iterator for Numbers {\n    type Item = Box&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &gt; 0 {\n            self.count -= 1;\n            let number = mem::replace(&amp;mut self.number, Box::new(0));\n            // self.number now contains 0\n            Some(number)\n        } else {\n            None\n        }\n    }\n}\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 6827, "user_id": 1062636, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/88e94a1b7d952fb43245061ccc35f398?s=128&d=identicon&r=PG", "display_name": "Denis Kreshikhin", "link": "https://stackoverflow.com/users/1062636/denis-kreshikhin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 124, "favorite_count": 0, "accepted_answer_id": 30292990, "answer_count": 1, "score": 2, "last_activity_date": 1431903473, "creation_date": 1431898694, "question_id": 30292426, "link": "https://stackoverflow.com/questions/30292426/how-to-implement-iterator-for-boxed-values", "title": "How to implement Iterator for boxed values?", "body": "<p>I have a struct that gives numbers by method <code>next</code> from trait <code>Iterator</code>:</p>\n\n<pre><code>struct Numbers{\n    number: usize,\n    count: usize\n}\n\nimpl Iterator for Numbers {\n    type Item = usize;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &gt; 0 {\n            self.count -= 1;\n            return Some(self.number);\n        }\n\n        return None;\n    }\n}\n\nfn main(){\n    let numbers = Numbers{\n        number: 777,\n        count: 10\n    };\n\n    for n in numbers {\n        println!{\"{:?}\", n};\n    }\n}\n</code></pre>\n\n<p>It's work properly with <code>usize</code> type.\nBut same code with Box type gives a compilation error:</p>\n\n<pre><code>struct Numbers{\n    number: Box&lt;usize&gt;,\n    count: usize\n}\n\nimpl Iterator for Numbers {\n    type Item = Box&lt;usize&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.count &gt; 0 {\n            self.count -= 1;\n            return Some(self.number);\n        }\n\n        return None;\n    }\n}\n\nfn main(){\n    let numbers = Numbers{\n        number: Box::new(777),\n        count: 10\n    };\n\n    for n in numbers {\n        println!{\"{:?}\", n};\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>./numbers.rs:12:25: 12:29 error: cannot move out of borrowed content</p>\n  \n  <p>./numbers.rs:12             return Some(self.number);</p>\n</blockquote>\n\n<p>How to implement Iterator for boxed values properly?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": false, "score": 8, "last_activity_date": 1431934145, "creation_date": 1431934145, "answer_id": 30297361, "question_id": 30291757, "link": "https://stackoverflow.com/questions/30291757/attaching-an-icon-resource-to-a-rust-application/30297361#30297361", "title": "Attaching an icon resource to a Rust application", "body": "<p>Rust has no notion of icon files for windows, so you would do it the same way as you do in C, albeit via the Rust foreign function interface (FFI). There exist FFI wrappers for windows APIs, notably <a href=\"https://github.com/retep998/winapi-rs\">winapi</a>.</p>\n\n<p><a href=\"https://github.com/klutzy/rust-windows/tree/master/examples\">Here</a> is an example that shows how to associate an icon with an executable (by way of an .rc file).</p>\n"}, {"tags": [], "owner": {"reputation": 1320, "user_id": 667338, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b729715ca114865faab890bbaf8c834f?s=128&d=identicon&r=PG", "display_name": "Fenhl", "link": "https://stackoverflow.com/users/667338/fenhl"}, "is_accepted": false, "score": 3, "last_activity_date": 1608606159, "last_edit_date": 1608606159, "creation_date": 1608556648, "answer_id": 65393488, "question_id": 30291757, "link": "https://stackoverflow.com/questions/30291757/attaching-an-icon-resource-to-a-rust-application/65393488#65393488", "title": "Attaching an icon resource to a Rust application", "body": "<h1>Windows</h1>\n<p>An easy way to set the icon for your <code>.exe</code> file is with the <a href=\"https://docs.rs/winres\" rel=\"nofollow noreferrer\">winres</a> crate. First, add winres as a build dependency:</p>\n<pre><code>[target.'cfg(windows)'.build-dependencies]\nwinres = &quot;0.1&quot;\n</code></pre>\n<p>Then, add a build script:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::io;\n#[cfg(windows)] use winres::WindowsResource;\n\nfn main() -&gt; io::Result&lt;()&gt; {\n    #[cfg(windows)] {\n        WindowsResource::new()\n            // This path can be absolute, or relative to your crate root.\n            .set_icon(&quot;assets/icon.ico&quot;)\n            .compile()?;\n    }\n    Ok(())\n}\n</code></pre>\n<p>Note that this does <strong>not</strong> update the icon shown in the taskbar or title bar. Setting that must be done via your GUI framework, e.g. <a href=\"https://docs.rs/iced\" rel=\"nofollow noreferrer\">iced</a> recently added <a href=\"https://docs.rs/iced/0.2.0/iced/window/struct.Settings.html#structfield.icon\" rel=\"nofollow noreferrer\">a way to configure this</a>.</p>\n<h1>macOS</h1>\n<p>To set the icon on macOS, you need to bundle the executable into an <code>.app</code>. An <code>.app</code> is actually a <strong>directory</strong>, not a file. It looks something like this:</p>\n<ul>\n<li>My App.app\n<ul>\n<li>Contents\n<ul>\n<li>Info.plist \u2014 This file includes information about your app, including the name of the binary and the location of the icon file:\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;key&gt;CFBundleExecutable&lt;/key&gt;\n&lt;string&gt;myapp&lt;/string&gt;\n&lt;key&gt;CFBundleIconFile&lt;/key&gt;\n&lt;string&gt;AppIcon.icns&lt;/string&gt;\n</code></pre>\n</li>\n<li>MacOS\n<ul>\n<li>myapp \u2014 The binary from <code>target/release</code></li>\n</ul>\n</li>\n<li>Resources\n<ul>\n<li>AppIcon.icns</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>macOS apps are typically distributed as <code>.dmg</code> files. A release script could build the binary, bundle it into an <code>.app</code>, and then bundle that into a <code>.dmg</code>, along with a symlink to <code>/Applications</code> to make it easier for the user to \u201cinstall\u201d the app by moving it there.</p>\n<p>Here are <a href=\"https://github.com/fenhl/oottracker/tree/137aa51d24bcc9634c774722b3d157e010a73263/assets/macos\" rel=\"nofollow noreferrer\">sample <code>.dmg</code> contents</a>, and <a href=\"https://github.com/fenhl/oottracker/blob/137aa51d24bcc9634c774722b3d157e010a73263/crate/oottracker-utils/src/release.rs#L246-L256\" rel=\"nofollow noreferrer\">the corresponding release script</a>.</p>\n"}], "owner": {"reputation": 501, "user_id": 2551298, "user_type": "registered", "accept_rate": 8, "profile_image": "https://graph.facebook.com/100000108838340/picture?type=large", "display_name": "Chris Root", "link": "https://stackoverflow.com/users/2551298/chris-root"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2861, "favorite_count": 0, "answer_count": 2, "score": 10, "last_activity_date": 1608606159, "creation_date": 1431894242, "question_id": 30291757, "link": "https://stackoverflow.com/questions/30291757/attaching-an-icon-resource-to-a-rust-application", "title": "Attaching an icon resource to a Rust application", "body": "<p>How do you attach an icon resource to a Rust application? I've seen how it's done in C but I'm not clear on how it works in Rust. This would be on Windows. I know that Linux and OS X work differently. If anyone has any tips on this for OS X that would be great too.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431934256, "post_id": 30293051, "comment_id": 48690950, "body": "Isn&#39;t <code>ident</code> too restrictive (in the first example)? It won&#39;t allow something like <code>other_module::Foo</code>. I guess it should be <code>path</code>."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431934624, "post_id": 30293051, "comment_id": 48691123, "body": "@VladimirMatveev: the trait bounds position doesn\u2019t like <code>path</code>. While not using the <code>items</code> workaround, using <code>ident</code> is your only choice."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 8, "last_activity_date": 1431904133, "creation_date": 1431904133, "answer_id": 30293051, "question_id": 30291584, "link": "https://stackoverflow.com/questions/30291584/macro-for-defining-trait-aliases/30293051#30293051", "title": "Macro for defining trait aliases", "body": "<p><code>expr</code> is an expression token tree, which clearly doesn\u2019t fit in the locations you have tried to place it. Remember that Rust macros are strongly typed: only the types of token trees expected at a given location are permitted.</p>\n\n<p>You\u2019ll need to use sequence repetition (<code>$(\u2026)*</code> <em>et al.</em>) of <code>ident</code> to achieve this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! trait_alias {\n    ($name:ident = $base1:ident + $($base2:ident +)+) =&gt; {\n        trait $name: $base1 $(+ $base2)+ { }\n        impl&lt;T: $base1 $(+ $base2)+&gt; $name for T { }\n    };\n}\n\ntrait Foo { }\ntrait Bar { }\n\ntrait_alias!(Alias = Foo + Bar +);\n</code></pre>\n\n<p>(You can\u2019t have the nicer <code>$base1:ident $(+ $base2:ident)+</code> or <code>$($base:ident)++</code> at present for technical reasons.)</p>\n\n<p>There is, however, a technique for cheating, making the macro parser accept things that it would not otherwise: passing them through another macro and forcing it to reinterpret the token trees as a different type. This can be used to good effect here:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! items {\n    ($($item:item)*) =&gt; ($($item)*);\n}\n\nmacro_rules! trait_alias {\n    ($name:ident = $($base:tt)+) =&gt; {\n        items! {\n            trait $name: $($base)+ { }\n            impl&lt;T: $($base)+&gt; $name for T { }\n        }\n    };\n}\n\ntrait Foo {}\ntrait Bar {}\n\ntrait_alias!(Alias = Foo + Bar);\n</code></pre>\n\n<p>Note, however, that it will shift syntax checking inside the macro, which is less optimal.</p>\n"}], "owner": {"reputation": 2734, "user_id": 973730, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ed204943500512835fc90fb9ac790367?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/973730/simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1348, "favorite_count": 1, "accepted_answer_id": 30293051, "answer_count": 1, "score": 6, "last_activity_date": 1431904133, "creation_date": 1431893115, "question_id": 30291584, "link": "https://stackoverflow.com/questions/30291584/macro-for-defining-trait-aliases", "title": "Macro for defining trait aliases", "body": "<p>According to this isuue <a href=\"https://github.com/rust-lang/rust/issues/8634\" rel=\"noreferrer\">issue</a> and this <a href=\"https://stackoverflow.com/questions/26070559/alias-on-compound-type-in-rust\">answered question</a> it is not possible to simply define a trait alias like:</p>\n\n<pre><code>trait Alias = Foo + Bar;\n</code></pre>\n\n<p>The workaround is a bit ugly:</p>\n\n<pre><code>trait Alias : Foo + Bar {}\nimpl&lt;T: Foo + Bar&gt; Alias for T {}\n</code></pre>\n\n<p>Therefore I want to define a macro for this. I tried</p>\n\n<pre><code>macro_rules! trait_alias {\n    ( $name : ident, $base : expr ) =&gt; {\n        trait $name : $base {}\n        impl&lt;T: $base&gt; $name for T {}\n    };\n}\n\ntrait Foo {}\ntrait Bar {}\n\ntrait_alias!(Alias, Foo + Bar);\n</code></pre>\n\n<p>But it fails with error:</p>\n\n<pre><code>src\\main.rs:5:17: 5:22 error: expected one of `?`, `where`, or `{`, found `Foo + Bar`\nsrc\\main.rs:5       trait $name : $base {}\n                                  ^~~~~\n</code></pre>\n\n<p>Probably <code>Foo + Bar</code> is not an expression. I tried several other variations but with no luck. Is it possible to define such a macro? How should it look like?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 8, "last_activity_date": 1431891327, "creation_date": 1431891327, "answer_id": 30291301, "question_id": 30291217, "link": "https://stackoverflow.com/questions/30291217/what-does-the-exclamation-point-mean-in-a-trait-implementation/30291301#30291301", "title": "What does the exclamation point mean in a trait implementation?", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md#default-and-negative-impls\">negative trait impl</a>, so you can read it as opting out of the <code>Send</code> trait.</p>\n"}, {"comments": [{"owner": {"reputation": 4229, "user_id": 9363973, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Cbbp7.png?s=128&g=1", "display_name": "MindSwipe", "link": "https://stackoverflow.com/users/9363973/mindswipe"}, "reply_to_user": {"reputation": 1285, "user_id": 1344375, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/87c20490a411ddddfbed35971db22bba?s=128&d=identicon&r=PG&f=1", "display_name": "mrnateriver", "link": "https://stackoverflow.com/users/1344375/mrnateriver"}, "edited": false, "score": 1, "creation_date": 1575452964, "post_id": 30296104, "comment_id": 104568314, "body": "@mrnateriver I just reviewed your edit and decided to keep the old syntax, but add the new syntax, as it is still experimental. Take a look and let me know if anything is missing/ wrong"}, {"owner": {"reputation": 1285, "user_id": 1344375, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/87c20490a411ddddfbed35971db22bba?s=128&d=identicon&r=PG&f=1", "display_name": "mrnateriver", "link": "https://stackoverflow.com/users/1344375/mrnateriver"}, "reply_to_user": {"reputation": 4229, "user_id": 9363973, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Cbbp7.png?s=128&g=1", "display_name": "MindSwipe", "link": "https://stackoverflow.com/users/9363973/mindswipe"}, "edited": false, "score": 1, "creation_date": 1575455298, "post_id": 30296104, "comment_id": 104569728, "body": "@MindSwipe sure, no problem. AFAI understand, this syntax is experimental for users, but it&#39;s used in <code>stdlib</code> without any attributes. But anyway, I&#39;ve started learning Rust just a week ago and I&#39;m still struggling to wrap my head around all the RFCs, experimental features, what&#39;s stable and what&#39;s not"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1575480602, "post_id": 30296104, "comment_id": 104584166, "body": "The &quot;new&quot; syntax is still nightly-only, but the old syntax is obsolete, so I have updated the question (again) to avoid misleading new readers, as well as correcting the semantics of auto trait implementation."}, {"owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1575483009, "post_id": 30296104, "comment_id": 104585440, "body": "I made this answer community wiki, thank you for the collaboration."}], "tags": [], "owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "is_accepted": true, "score": 18, "last_activity_date": 1575480917, "last_edit_date": 1575480917, "creation_date": 1431929119, "answer_id": 30296104, "question_id": 30291217, "link": "https://stackoverflow.com/questions/30291217/what-does-the-exclamation-point-mean-in-a-trait-implementation/30296104#30296104", "title": "What does the exclamation point mean in a trait implementation?", "body": "<p>It's a <strong>negative trait implementation</strong> for the <code>Send</code> trait as described in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\" rel=\"noreferrer\">RFC 19</a>.</p>\n\n<p>As a summary: The <code>Send</code> trait is an <strong>auto trait</strong>, which means it is automatically implemented for all types that only contain other <code>Send</code> types:</p>\n\n<pre><code>unsafe auto trait Send {}\n</code></pre>\n\n<p>(<code>Send</code> is also an <em>unsafe trait</em>, which means it is unsafe to implement, but that is not relevant to the question.)</p>\n\n<p>An <code>auto</code> trait may not define any methods, which also makes it a <em>marker trait</em>. (The syntax for defining auto traits is currently only available in the standard library or on the nightly compiler, but their semantics are stable.)</p>\n\n<p>To opt out of the automatic implementation of <code>Send</code>, you must write an explicit negative trait implementation:</p>\n\n<pre><code>impl !Send for MyType {}\n</code></pre>\n\n<p>This means that even though <code>MyType</code> only contains other types that are <code>Send</code>, <code>MyType</code> itself will not automatically implement <code>Send</code>.</p>\n\n<p>See also the answer to another question: <a href=\"https://stackoverflow.com/a/49710956/5877243\">What is an auto trait in Rust?</a></p>\n"}], "owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2985, "favorite_count": 3, "accepted_answer_id": 30296104, "answer_count": 2, "score": 18, "last_activity_date": 1575480917, "creation_date": 1431890911, "last_edit_date": 1508880136, "question_id": 30291217, "link": "https://stackoverflow.com/questions/30291217/what-does-the-exclamation-point-mean-in-a-trait-implementation", "title": "What does the exclamation point mean in a trait implementation?", "body": "<p>I found in the library reference for <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noreferrer\"><code>std::rc::Rc</code></a> this <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html#impl-Send\" rel=\"noreferrer\">trait implementation</a> </p>\n\n<pre><code>impl&lt;T&gt; !Send for Rc&lt;T&gt; \nwhere\n    T: ?Sized, \n</code></pre>\n\n<p><strong>What does the exclamation point in front of <code>Send</code> mean?</strong></p>\n\n<p>I consulted both <a href=\"https://doc.rust-lang.org/stable/book/first-edition/\" rel=\"noreferrer\">The Rust Programming Language</a>\u00b9 book and <a href=\"https://doc.rust-lang.org/reference/\" rel=\"noreferrer\">The Rust Reference</a>\u00b2, but didn't find an explanation. Please give a reference in your answer.</p>\n\n<p><hr>\u00b9 <sub>especially the [section <a href=\"https://doc.rust-lang.org/stable/book/first-edition/traits.html\" rel=\"noreferrer\">3.19 Traits</a></sub>\n<br>\u00b2 <sub>and sections <a href=\"https://doc.rust-lang.org/reference/items.html#traits\" rel=\"noreferrer\">5.1 Traits</a> and <a href=\"https://doc.rust-lang.org/reference/items.html#implementations\" rel=\"noreferrer\">5.1 Implementations</a></sub></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431905931, "post_id": 30290658, "comment_id": 48682921, "body": "Your example code doesn&#39;t reproduce the error you claim it does (it&#39;s not an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>). You may get more responses if it did. Additionally, the Rust style is 4-space indents."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431906661, "post_id": 30290658, "comment_id": 48683074, "body": "Since Chris Morgan has the answer covered, I&#39;ll also point out that your implementation of <code>add</code> has a type parameter <code>T</code> that shadows the type parameter of the struct, and in your implementation of <code>exec</code>, the type parameter <code>C</code> shadows the trait <code>C</code>, which leads to a potentially confusing error message."}, {"owner": {"reputation": 1299, "user_id": 216247, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/714f671da100ae1caacfae017ed07a3a?s=128&d=identicon&r=PG", "display_name": "scooterman", "link": "https://stackoverflow.com/users/216247/scooterman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431993626, "post_id": 30290658, "comment_id": 48724743, "body": "@Shepmaster, thanks for the feedback. In fact add didn&#39;t had a template, it was caused by a copy/paste error and class renaming (compiling this causes an error about shadowing just like you mentioned). Next time I&#39;ll try to create a MCVE to better reproduce the problem."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431906542, "post_id": 30293290, "comment_id": 48683043, "body": "I wish I could award an extra vote for option 2. ^_^"}, {"owner": {"reputation": 1299, "user_id": 216247, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/714f671da100ae1caacfae017ed07a3a?s=128&d=identicon&r=PG", "display_name": "scooterman", "link": "https://stackoverflow.com/users/216247/scooterman"}, "edited": false, "score": 0, "creation_date": 1431997552, "post_id": 30293290, "comment_id": 48725718, "body": "fantastic reply! thank you for this detailed explanation and for the link for your lib, that gives food for thought. One question, this kind of usage is idiomatic rust? My main idea here was to create a Bag collection where T would be identifiable (through Eq)."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1432002282, "post_id": 30293290, "comment_id": 48726751, "body": "Using trait objects is not particularly common, and exposing <code>Any</code> or things like it is not typically idiomatic. It can, however, be used very legitimately internally. AnyMap, for example, uses <code>Any</code> internally, but (unless you dive into the raw interface which is also now exposed for certain obscure situations) exposes an interface entirely devoid of <code>Any</code> trait objects."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 3, "last_activity_date": 1431906346, "creation_date": 1431906346, "answer_id": 30293290, "question_id": 30290658, "link": "https://stackoverflow.com/questions/30290658/enforce-eq-check-on-trait/30293290#30293290", "title": "Enforce Eq check on trait", "body": "<p>Let\u2019s look at the relevant definitions for <code>Eq</code>:</p>\n\n<pre><code>pub trait Eq: PartialEq&lt;Self&gt; {\n    \u2026\n}\n\npub trait PartialEq&lt;Rhs: ?Sized = Self&gt; {\n    fn eq(&amp;self, other: &amp;Rhs) -&gt; bool;\n    \u2026\n}\n</code></pre>\n\n<p>Now consider <code>MyStruct&lt;Box&lt;C&gt;&gt;</code>: the type that it wants to implement <code>Eq</code> is <code>Box&lt;C&gt;</code>, a boxed trait object. To implement <code>Eq</code>, <code>Box&lt;C&gt;</code> must first implement <code>PartialEq&lt;Box&lt;C&gt;&gt;</code>, like this:</p>\n\n<pre><code>impl PartialEq for Box&lt;C&gt; {\n    fn eq(&amp;self, other: &amp;Box&lt;C&gt;) -&gt; bool;\n}\n\nimpl Eq for Box&lt;C&gt; { }\n</code></pre>\n\n<p>That is, you must be able to compare an arbitrary <code>Box&lt;C&gt;</code> with any other arbitrary <code>Box&lt;C&gt;</code>. The boxed trait objects that you are comparing could be of different concrete types, here. Thus you need to write this implementation manually. In such cases, you will typically want the trait to include some way of normalising the form of the object into a concrete, comparable type; for some types this is obvious; if <code>AsRef&lt;T&gt;</code> was to have a <code>PartialEq</code> implementation added, the implementation to add would be fairly obvious:</p>\n\n<pre><code>impl&lt;T: PartialEq&gt; PartialEq for AsRef&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;AsRef&lt;T&gt;) -&gt; bool {\n        self.as_ref() == other.as_ref()\n    }\n}\n</code></pre>\n\n<p>(Note also that if <code>C</code> implements <code>PartialEq</code>, <code>Box&lt;C&gt;</code> does, so such implementations as we\u2019re discussing should go on the unboxed trait object, not on the boxed trait object.)</p>\n\n<p>Quite often, however, there is <em>not</em> an obvious and simple implementation. There are a few approaches you could take:</p>\n\n<ol>\n<li><p>Convert the objects (potentially expensively, though ideally cheaply) into some base type, e.g. a <code>String</code> which can then be compared;</p></li>\n<li><p>Give up;</p></li>\n<li><p>Constrain <code>C</code> to <code>'static</code> types and use some fancy <code>Any</code> magic to make it so that it uses the base type\u2019s <code>PartialEq</code> implementation, returning <code>false</code> if the two trait objects are not of the same concrete type. This one is a fairly useful one, so I\u2019ll give some code for it:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(core)]\n\nuse std::any::{Any, TypeId};\nuse std::mem;\n\nfn main() { }\n\ntrait PartialEqFromC {\n    fn eq_c(&amp;self, other: &amp;C) -&gt; bool;\n}\n\nimpl&lt;T: PartialEq + Any + C&gt; PartialEqFromC for T {\n    fn eq_c(&amp;self, other: &amp;C) -&gt; bool {\n        if other.get_type_id() == TypeId::of::&lt;Self&gt;() {\n            self == unsafe { *mem::transmute::&lt;&amp;&amp;C, &amp;&amp;Self&gt;(&amp;other) }\n        } else {\n            false\n        }\n    }\n}\n\ntrait C: Any + PartialEqFromC {\n}\n\nimpl PartialEq for C {\n    fn eq(&amp;self, other: &amp;C) -&gt; bool {\n        self.eq_c(other)\n    }\n}\n</code></pre>\n\n<p>Note that this example depends on the unstable feature <code>core</code> for <code>Any.get_type_id</code> and is thus tied to nightly only; this can be worked around by duplicating that definition from the <code>Any</code> trait into a new supertrait of <code>C</code> and could also be simplified by <a href=\"https://github.com/chris-morgan/mopa\" rel=\"nofollow\">mopafying the <code>C</code> trait</a>.</p></li>\n</ol>\n"}], "owner": {"reputation": 1299, "user_id": 216247, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/714f671da100ae1caacfae017ed07a3a?s=128&d=identicon&r=PG", "display_name": "scooterman", "link": "https://stackoverflow.com/users/216247/scooterman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 221, "favorite_count": 1, "accepted_answer_id": 30293290, "answer_count": 1, "score": 1, "last_activity_date": 1431993531, "creation_date": 1431887892, "last_edit_date": 1431993531, "question_id": 30290658, "link": "https://stackoverflow.com/questions/30290658/enforce-eq-check-on-trait", "title": "Enforce Eq check on trait", "body": "<p>Suppose the following objects:</p>\n\n<pre><code>pub struct MyStruct&lt;T&gt;{\n  items: Vec&lt;T&gt;\n}\n\npub impl&lt;T&gt; MyStruct&lt;T&gt; {\n  pub fn new() -&gt; MyStruct {\n     MyStruct{ items::new(); }\n  }\n  pub fn add(&amp;mut self, item: T) where T : Eq {\n    self.items.push(item);\n  }\n}\n\npub trait C {}\n\npub struct Another {\n  mystruct: MyStruct&lt;Box&lt;C&gt;&gt;\n}\n\npub impl Another {\n  pub fn exec&lt;C&gt;(&amp;mut self, c: C) where C: Eq + C {\n     self.mystruct.add(c);\n  }\n}\n</code></pre>\n\n<p>On exec I'm enforcing that C also is Eq, but I'm receiving the following error:</p>\n\n<pre><code> error: the trait `core::cmp::Eq` is not implemented for the type `C`\n</code></pre>\n\n<p>I had to make </p>\n\n<pre><code>pub impl&lt;T&gt; MyStruct&lt;T&gt; \n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>pub impl&lt;T : Eq&gt; MyStruct&lt;T&gt; \n</code></pre>\n\n<p>because since C is a trait I cant enforce Eq when using MyStruct::new, so I left the check for the type guard on the function. What's happening here?</p>\n"}, {"tags": ["rust", "move-semantics", "ownership"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431877759, "post_id": 30288782, "comment_id": 48674579, "body": "You may be interested in <a href=\"http://stackoverflow.com/a/24253573/155423\">Move vs Copy in Rust</a> or <a href=\"http://stackoverflow.com/q/29490670/155423\">How does Rust provide move semantics?</a>."}, {"owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "edited": false, "score": 0, "creation_date": 1431881999, "post_id": 30288782, "comment_id": 48675990, "body": "It looks like you already found your answer, but I am learning this stuff now as well and I found these resources to be very helpful <a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/ownership.html</a> and <a href=\"https://www.youtube.com/watch?v=WQbg6ZMQJvQ\" rel=\"nofollow noreferrer\">youtube.com/watch?v=WQbg6ZMQJvQ</a>"}], "answers": [{"comments": [{"owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 0, "creation_date": 1431879057, "post_id": 30288979, "comment_id": 48675021, "body": "It seems that the concept comes from C++11. I found a document about C++ move semantics: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1377.htm#Copy%20vs%20Move\" rel=\"nofollow noreferrer\">open-std.org/jtc1/sc22/wg21/docs/papers/2002/&hellip;</a>. Please note &#171;From a client code point of view, choosing move instead of copy means that you don&#39;t care what happens to the state of the source.&#187;. In Rust it means you are forbidden to use the source after a move."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 4, "creation_date": 1431879556, "post_id": 30288979, "comment_id": 48675171, "body": "I&#39;d also add that not only does moving out from a variable prevents its further usage, it also disables running a destructor on this variable. This is an important difference from C++ where AFAIK types must be explicitly designed to allow moves because their destructors will always be run, and so the move constructor has to make sure that the destructor won&#39;t do anything stupid."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "edited": false, "score": 4, "creation_date": 1431879583, "post_id": 30288979, "comment_id": 48675181, "body": "@nalply yes, C++11 certainly used the name &quot;move semantics&quot; and formally introduced it to the language, but the <i>concept</i> of move semantics has existed for a very long time. However, it was something that programmers had to track manually. The fact that Rust promotes this sticky topic to a first-class citizen and makes it harder to shoot yourself in the foot is one of the very intriguing parts of the language to me!"}, {"owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431881948, "post_id": 30288979, "comment_id": 48675969, "body": "@VladimirMatveev By doing nothing (see my answer) it also does not run a destructor on this variable."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1431883696, "post_id": 30288979, "comment_id": 48676581, "body": "@Shepmaster: Yes, contrary to C++, Rust implements an <a href=\"http://en.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems\" rel=\"nofollow noreferrer\">Affine Type System</a>, values may be used (or &quot;consumed&quot;) <i>at most once</i>. Thanks to that, Rust allows implementing &quot;state machines&quot; that are type checked by the compiler, and I have seen a number of libraries leveraging this already."}, {"owner": {"reputation": 9113, "user_id": 2097780, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/db5b03704c129196a4e9415e55413ce6?s=128&d=identicon&r=PG", "display_name": "kirbyfan64sos", "link": "https://stackoverflow.com/users/2097780/kirbyfan64sos"}, "edited": false, "score": 0, "creation_date": 1431903055, "post_id": 30288979, "comment_id": 48682366, "body": "I like this answer because it&#39;s good and because of your SO profile picture. ;) However, it should be mentioned that moves don&#39;t always copy. Although I don&#39;t often use Rust, I know that, in C++, if a vector&#39;s move constructor gets called, the whole point is that the possibly large internal array won&#39;t get copied."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9113, "user_id": 2097780, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/db5b03704c129196a4e9415e55413ce6?s=128&d=identicon&r=PG", "display_name": "kirbyfan64sos", "link": "https://stackoverflow.com/users/2097780/kirbyfan64sos"}, "edited": false, "score": 3, "creation_date": 1431906430, "post_id": 30288979, "comment_id": 48683017, "body": "@kirbyfan64sos being pedantic, the move <i>always</i> copies values (with the caveats about the optimizer I say in the post). However, values that have heap-allocated components (<code>Box</code>, <code>Vec</code>, <code>String</code>, so on) are built with a structure that conceptually has a pointer to the data. The <i>pointer</i> is copied, the <i>pointed-at</i> data is not (that&#39;s the realm of the <code>Clone</code> trait). Your point that the large allocation is not moved is correct though."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502742754, "post_id": 30288979, "comment_id": 78323099, "body": "&quot;When you move an item, you are transferring ownership of that item.&quot; I keep reading this, but it&#39;s not obvious why this is a desirable property."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502743630, "post_id": 30288979, "comment_id": 78323473, "body": "@weberc2 Inherently, it&#39;s not. It&#39;s more about how everything works together and what it enables. Since every value has a single owner, you know <i>at compile time</i> who is responsible for deallocating it. You don&#39;t need a garbage collector because the scope of the value is sufficient. Moving is simply the manifestation of how that ownership can be transferred."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 13, "last_activity_date": 1518205931, "last_edit_date": 1518205931, "creation_date": 1431878667, "answer_id": 30288979, "question_id": 30288782, "link": "https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust/30288979#30288979", "title": "What are move semantics in Rust?", "body": "<p>When you <em>move</em> an item, you are <em>transferring ownership</em> of that item. That's a key component of Rust.</p>\n\n<p>Let's say I had a struct, and then I assign the struct from one variable to another. By default, this will be a move, and I've transferred ownership. The compiler will track this change of ownership and prevent me from using the old variable any more:</p>\n\n<pre><code>pub struct Foo {\n    value: u8,\n}\n\nfn main() {\n    let foo = Foo { value: 42 };\n    let bar = foo;\n\n    println!(\"{}\", foo.value); // error: use of moved value: `foo.value`\n    println!(\"{}\", bar.value);\n}\n</code></pre>\n\n<blockquote>\n  <p>how it is implemented.</p>\n</blockquote>\n\n<p>Conceptually, moving something doesn't <em>need</em> to do anything. In the example above, there wouldn't be a reason to actually allocate space somewhere and then move the allocated data when I assign to a different variable. I don't actually know what the compiler does, and it probably changes based on the level of optimization.</p>\n\n<p>For practical purposes though, you can think that when you move something, the bits representing that item are duplicated as if via <code>memcpy</code>. This helps explain what happens when you pass a variable to a function that <em>consumes</em> it, or when you return a value from a function (again, the optimizer can do other things to make it efficient, this is just conceptually):</p>\n\n<pre><code>// Ownership is transferred from the caller to the callee\nfn do_something_with_foo(foo: Foo) {} \n\n// Ownership is transferred from the callee to the caller\nfn make_a_foo() -&gt; Foo { Foo { value: 42 } } \n</code></pre>\n\n<p>\"But wait!\", you say, \"<code>memcpy</code> only comes into play with types implementing <code>Copy</code>!\". This is mostly true, but the big difference is that when a type implements <code>Copy</code>, both the <em>source</em> and the <em>destination</em> are valid to use after the copy!</p>\n\n<p>One way of thinking of move semantics is the same as copy semantics, but with the added restriction that the thing being moved from is no longer a valid item to use.</p>\n\n<p>However, it's often easier to think of it the other way: The most basic thing that you can do is to move / give ownership away, and the ability to copy something is an additional privilege. That's the way that Rust models it.</p>\n\n<p>This is a tough question for me! After using Rust for a while the move semantics are natural. Let me know what parts I've left out or explained poorly.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1431883490, "post_id": 30289508, "comment_id": 48676512, "body": "Actually, Rust <i>might</i> do something. When you pass by value, in Rust, it <i>moves</i> the value into the function frame, in which case the move might end up being physical (<code>memcpy</code>)."}], "tags": [], "owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "is_accepted": false, "score": 1, "last_activity_date": 1431881687, "creation_date": 1431881687, "answer_id": 30289508, "question_id": 30288782, "link": "https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust/30289508#30289508", "title": "What are move semantics in Rust?", "body": "<p>Please let me answer my own question. I had trouble, but by asking a question here I did <a href=\"http://blog.codinghorror.com/rubber-duck-problem-solving/\" rel=\"nofollow\">Rubber Duck Problem Solving</a>. Now I understand:</p>\n\n<p>A <strong>move</strong> is a <strong>transfer of ownership</strong> of the value.</p>\n\n<p>For example the assignment <code>let x = a;</code> transfers ownership: At first <code>a</code> owned the value. After the <code>let</code> it's <code>x</code> who owns the value. Rust forbids to use <code>a</code> thereafter.</p>\n\n<p>In fact, if you do <code>println!(\"a: {:?}\", a);</code> after the <code>let</code>the Rust compiler says:</p>\n\n<pre><code>error: use of moved value: `a`\nprintln!(\"a: {:?}\", a);\n                    ^\n</code></pre>\n\n<p>Complete example:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Example { member: i32 }\n\nfn main() {\n    let a = Example { member: 42 }; // A struct is moved\n    let x = a;\n    println!(\"a: {:?}\", a);\n    println!(\"x: {:?}\", x);\n}\n</code></pre>\n\n<p>And what does this <strong>move</strong> mean?</p>\n\n<p>It seems that the concept comes from C++11. A <a href=\"http://blog.codinghorror.com/rubber-duck-problem-solving/\" rel=\"nofollow\">document about C++ move semantics</a> says: </p>\n\n<blockquote>\n  <p>From a client code point of view, choosing move instead of copy means that you don't care what happens to the state of the source.</p>\n</blockquote>\n\n<p>Aha. C++11 does not care what happens with source. So in this vein, Rust is free to decide to forbid to use the source after a move.</p>\n\n<p>And how it is implemented?</p>\n\n<p>I don't know. But I can imagine that Rust does literally nothing. <code>x</code> is just a different name for the same value. Names usually are compiled away (except of course debugging symbols). So it's the same machine code whether the binding has the name <code>a</code> or <code>x</code>.</p>\n\n<p>It seems C++ does the same in copy constructor elision.</p>\n\n<p>Doing nothing is the most efficient possible.</p>\n"}, {"tags": [], "owner": {"reputation": 67160, "user_id": 1078084, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/wApmM.jpg?s=128&g=1", "display_name": "Akavall", "link": "https://stackoverflow.com/users/1078084/akavall"}, "is_accepted": false, "score": 1, "last_activity_date": 1431885125, "last_edit_date": 1431885125, "creation_date": 1431883537, "answer_id": 30289815, "question_id": 30288782, "link": "https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust/30289815#30289815", "title": "What are move semantics in Rust?", "body": "<p>Passing a value to function, also results in transfer of ownership; it is very similar to other examples:</p>\n\n<pre><code>struct Example { member: i32 }\n\nfn take(ex: Example) {\n    // 2) Now ex is pointing to the data a was pointing to in main\n    println!(\"a.member: {}\", ex.member) \n    // 3) When ex goes of of scope so as the access to the data it \n    // was pointing to. So Rust frees that memory.\n}\n\nfn main() {\n    let a = Example { member: 42 }; \n    take(a); // 1) The ownership is transfered to the function take\n             // 4) We can no longer use a to access the data it pointed to\n\n    println!(\"a.member: {}\", a.member);\n}\n</code></pre>\n\n<p>Hence the expected error:</p>\n\n<pre><code>post_test_7.rs:12:30: 12:38 error: use of moved value: `a.member`\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 2, "creation_date": 1502742318, "post_id": 30290070, "comment_id": 78322859, "body": "What is the use case for affine types? Why is it useful to prevent multiple use of a value?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 2, "creation_date": 1502778661, "post_id": 30290070, "comment_id": 78332691, "body": "@weberc2: Imagine that you have a <code>String</code>, whose content is stored on the heap. By <i>moving</i> it, you avoid the need for reference counting or garbage collection, since no one can access the &quot;old&quot; binding. Well, turns out that there are other usecases for when you&#39;d like to avoid the &quot;old&quot; binding being reused. For example, in a state machine, once you transition out of a state it doesn&#39;t make sense to transition <i>again</i> for that state. Move semantics help model this at compile-time."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 1, "creation_date": 1502823842, "post_id": 30290070, "comment_id": 78357857, "body": "Regarding your string example, moving <i>creates</i> the use-after-free problem, it doesn&#39;t solve it. Normally, the order of events would be: allocate the String, call func1 with the string, call func2 with the string, destroy string. Moving just moves the destructor into func1, thereby preventing func2 from safely running. This is almost never what I want, and it precludes huge swaths of trivially-proven, valid programs. Maybe there are uses, but they seem few and far between--in particular, I&#39;m pretty sure I could make a statically-guaranteed state-machine in a language without affine types."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 2, "creation_date": 1502864816, "post_id": 30290070, "comment_id": 78370816, "body": "@weberc2: <i>in particular, I&#39;m pretty sure I could make a statically-guaranteed state-machine in a language without affine types</i> =&gt; if you do manage it, I&#39;d really like to know how (I&#39;ve got to use C++ at work, and could use more static guarantees). As for the <code>func1</code>, <code>func2</code>, note that with an affine type system you get a compile-time error, so there&#39;s no use-after-free issue; the solution is to pass by reference, or have <code>func1</code> return the string. The former requires borrow-checking to be safe, the latter some contortions."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502894708, "post_id": 30290070, "comment_id": 78391342, "body": "If I understand correctly, you can implement the state machine as functions which take an event as input and return another event-handling function as output. Regarding <code>func1</code>, <code>func2</code>, I agree that an affine type system prevents you from calling both functions, but the use-after-free can be statically avoided without precluding such a large swath of valid programs. If precluding those programs offered some greater safety, I could probably appreciate an affine type system, but it&#39;s not obvious to me that this is the case."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502903618, "post_id": 30290070, "comment_id": 78397113, "body": "@weberc2: I know only two ways to preclude use-after-free in a performant manner statically: affine types and memory regions (see the Cyclone language for the latter). And the latter does not work with unions/sum types. For example, in Rust <code>&amp;mut T</code> are affine, not <code>Copy</code>, to be able to guarantee memory safety, and I don&#39;t readily see how to do without. As for the state machine: one type per state, one function per transition (consume the state, maybe other arguments, and produces a new state)."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502905946, "post_id": 30290070, "comment_id": 78398410, "body": "All you have to do is that the free happens after the uses. Assuming an immutable <code>x</code>, invoking <code>foo(x); bar(x);</code> is guaranteed not to use-after-free so long as <code>foo</code> and <code>bar</code> don&#39;t spawn new threads. Also, I don&#39;t dispute that affine types permit safe state machines, I&#39;m just not convinced that it&#39;s the only way, and if it is, I&#39;m not convinced that it&#39;s a sufficiently useful property to justify the many inconveniences."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502907104, "post_id": 30290070, "comment_id": 78399034, "body": "@weberc2: I am afraid that you are forgetting all the cases where a reference to <code>x</code> is stowed away by either <code>foo</code> or <code>bar</code> (global variables, modifying other arguments, etc...). If arguments never escaped functions, of course such analysis would be easy. Unfortunately, such a language would probably be quite unwieldy. And when arguments can escape functions, then your analysis is too trivial I fear."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502909573, "post_id": 30290070, "comment_id": 78400204, "body": "Maybe. What is meant by &quot;modifying other arguments&quot;? How would this affect an immutable argument&#39;s lifetime? Regarding global variables, that certainly complicates the analysis, but it should still be fairly easy. Are there more complex cases where arguments escape functions?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502952367, "post_id": 30290070, "comment_id": 78414100, "body": "@weberc2: The term you are looking for is <a href=\"https://en.wikipedia.org/wiki/Escape_analysis\" rel=\"nofollow noreferrer\">Escape Analysis</a>. It used to be thought as &quot;certainly, that can&#39;t be hard&quot;, but nowadays the common wisdom is &quot;let&#39;s do our best, can&#39;t cover all cases anyway&quot;."}, {"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 0, "creation_date": 1502987720, "post_id": 30290070, "comment_id": 78438817, "body": "I agree, and I&#39;m not proposing covering every case, but to cover no cases makes the language prohibitively difficult IMHO. I don&#39;t mean this to be disparaging; I really like a lot about Rust and I want to use it, I just can&#39;t justify the time I spend fighting unnecessary compiler errors."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 29, "last_activity_date": 1572967342, "last_edit_date": 1572967342, "creation_date": 1431884883, "answer_id": 30290070, "question_id": 30288782, "link": "https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust/30290070#30290070", "title": "What are move semantics in Rust?", "body": "<p><strong>Semantics</strong></p>\n\n<p>Rust implements what is known as an <a href=\"http://en.wikipedia.org/wiki/Substructural_type_system#Affine_type_systems\" rel=\"noreferrer\">Affine Type System</a>:</p>\n\n<blockquote>\n  <p>Affine types are a version of linear types imposing weaker constraints, corresponding to affine logic. <strong>An affine resource can only be used once</strong>, while a linear one must be used once.</p>\n</blockquote>\n\n<p>Types that are not <code>Copy</code>, and are thus moved, are Affine Types: you may use them either once or never, nothing else.</p>\n\n<p>Rust qualifies this as a <em>transfer of ownership</em> in its Ownership-centric view of the world (*).</p>\n\n<p>(*) Some of the people working on Rust are much more qualified than I am in CS, and they knowingly implemented an Affine Type System; however contrary to Haskell which exposes the math-y/cs-y concepts, Rust tends to expose more pragmatic concepts.</p>\n\n<p><em>Note: it could be argued that Affine Types returned from a function tagged with <code>#[must_use]</code> are actually Linear Types from my reading.</em></p>\n\n<hr>\n\n<p><strong>Implementation</strong></p>\n\n<p>It depends. Please keep in mind than Rust is a language built for speed, and there are numerous optimizations passes at play here which will depend on the <em>compiler</em> used (rustc + LLVM, in our case).</p>\n\n<p>Within a function body (<a href=\"https://play.rust-lang.org/?gist=afa5671b59e4a1a6837582b0bf7bbafe&amp;version=stable&amp;mode=debug\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>fn main() {\n    let s = \"Hello, World!\".to_string();\n    let t = s;\n    println!(\"{}\", t);\n}\n</code></pre>\n\n<p>If you check the LLVM IR (in Debug), you'll see:</p>\n\n<pre><code>%_5 = alloca %\"alloc::string::String\", align 8\n%t = alloca %\"alloc::string::String\", align 8\n%s = alloca %\"alloc::string::String\", align 8\n\n%0 = bitcast %\"alloc::string::String\"* %s to i8*\n%1 = bitcast %\"alloc::string::String\"* %_5 to i8*\ncall void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %0, i64 24, i32 8, i1 false)\n%2 = bitcast %\"alloc::string::String\"* %_5 to i8*\n%3 = bitcast %\"alloc::string::String\"* %t to i8*\ncall void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %2, i64 24, i32 8, i1 false)\n</code></pre>\n\n<p>Underneath the covers, rustc invokes a <code>memcpy</code> from the result of <code>\"Hello, World!\".to_string()</code> to <code>s</code> and then to <code>t</code>. While it might seem inefficient, checking the same IR in Release mode you will realize that LLVM has completely elided the copies (realizing that <code>s</code> was unused).</p>\n\n<p>The same situation occurs when calling a function: in theory you \"move\" the object into the function stack frame, however in practice if the object is large the rustc compiler might switch to passing a pointer instead.</p>\n\n<p>Another situation is <em>returning</em> from a function, but even then the compiler might apply \"return value optimization\" and build directly in the caller's stack frame -- that is, the caller passes a pointer into which to write the return value, which is used without intermediary storage.</p>\n\n<p>The ownership/borrowing constraints of Rust enable optimizations that are difficult to reach in C++ (which also has RVO but cannot apply it in as many cases).</p>\n\n<p>So, the digest version:</p>\n\n<ul>\n<li>moving large objects is inefficient, but there are a number of optimizations at play that might elide the move altogether</li>\n<li>moving involves a <code>memcpy</code> of <code>std::mem::size_of::&lt;T&gt;()</code> bytes, so moving a large <code>String</code> is efficient because it only copies a couple bytes whatever the size of the allocated buffer they hold onto</li>\n</ul>\n"}], "owner": {"reputation": 20384, "user_id": 220060, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/56533d50fdfceb887852bf50be54678b?s=128&d=identicon&r=PG", "display_name": "nalply", "link": "https://stackoverflow.com/users/220060/nalply"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10712, "favorite_count": 14, "accepted_answer_id": 30290070, "answer_count": 4, "score": 28, "last_activity_date": 1572967342, "creation_date": 1431877573, "last_edit_date": 1545330338, "question_id": 30288782, "link": "https://stackoverflow.com/questions/30288782/what-are-move-semantics-in-rust", "title": "What are move semantics in Rust?", "body": "<p>In Rust, there are two possibilities to take a reference</p>\n\n<ol>\n<li><p><strong>Borrow</strong>, i.e., take a reference but don't allow mutating the reference destination. The <code>&amp;</code> operator borrows ownership from a value.</p></li>\n<li><p><strong>Borrow mutably</strong>, i.e., take a reference to mutate the destination. The <code>&amp;mut</code> operator mutably borrows ownership from a value.</p></li>\n</ol>\n\n<p>The <a href=\"https://doc.rust-lang.org/book/first-edition/references-and-borrowing.html#the-rules\" rel=\"noreferrer\">Rust documentation about borrowing rules</a> says:</p>\n\n<blockquote>\n  <p>First, any borrow must last for a scope no greater than that of the\n  owner. Second, you may have one or the other of these two kinds of\n  borrows, but not both at the same time:</p>\n  \n  <ul>\n  <li>one or more references (<code>&amp;T</code>) to a resource,</li>\n  <li>exactly one mutable reference (<code>&amp;mut T</code>).</li>\n  </ul>\n</blockquote>\n\n<p>I believe that taking a reference is creating a pointer to the value and accessing the value by the pointer. This could be optimized away by the compiler if there is a simpler equivalent implementation.</p>\n\n<p>However, I don't understand what <strong>move</strong> means and how it is implemented.</p>\n\n<p>For types implementing the <code>Copy</code> trait it means copying e.g. by assigning the struct member-wise from the source, or a <code>memcpy()</code>. For small structs or for primitives this copy is efficient.</p>\n\n<p>And for <strong>move</strong>?</p>\n\n<p>This question is not a duplicate of <a href=\"https://stackoverflow.com/q/3106110/220060\">What are move semantics?</a> because Rust and C++ are different languages and move semantics are different between the two.</p>\n"}, {"tags": ["rust", "trait-objects"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431882429, "post_id": 30289019, "comment_id": 48676128, "body": "That is exactly what is blocking me, yes."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 0, "last_activity_date": 1431878953, "creation_date": 1431878953, "answer_id": 30289019, "question_id": 30288005, "link": "https://stackoverflow.com/questions/30288005/how-to-get-the-v-ptr-for-a-given-trait-struct-combination/30289019#30289019", "title": "How to get the v-ptr for a given Trait/Struct combination?", "body": "<p>I don't believe this is currently possible.</p>\n\n<p>In order for this to work, you'd need to be able to constrain the <code>T</code> generic parameter to <em>only</em> accept traits.  You can't do this.  As a result, it won't ever let you do anything with <code>&amp;T</code> that depends on it being a trait, such as getting the vtable.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431882518, "post_id": 30289029, "comment_id": 48676157, "body": "Not as generic (unfortunately), as it cannot be called within a generic function, but it should be sufficient for my purpose. Thanks!"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 3, "last_activity_date": 1525024316, "last_edit_date": 1525024316, "creation_date": 1431878995, "answer_id": 30289029, "question_id": 30288005, "link": "https://stackoverflow.com/questions/30288005/how-to-get-the-v-ptr-for-a-given-trait-struct-combination/30289029#30289029", "title": "How to get the v-ptr for a given Trait/Struct combination?", "body": "<p>A possibility is to use a macro to do the magic job:</p>\n\n<pre><code>#![feature(raw)]\n\nmacro_rules! make_vptr(\n    ($S:ty, $T:ty) =&gt; ({\n        let s: &amp;$S = unsafe { ::std::mem::uninitialized() };\n        let t: &amp;$T = s;\n        let r: ::std::raw::TraitObject = unsafe { ::std::mem::transmute(t) };\n        r.vtable\n    })\n);\n</code></pre>\n\n<p>This code will not compile if <code>T</code> is not a trait (thanks to <code>transmute(..)</code> checking that <code>&amp;T</code> is a fat pointer) or if <code>T</code> is not implemented by <code>S</code> (thanks to the assignment).</p>\n\n<p>Then, it can be used directly:</p>\n\n<pre><code>use std::fmt::Display;\n\nfn main() {\n    let u32_display_vtable = make_vptr!(u32, Display);\n\n    let x = 42u32;\n\n    let disp: &amp;Display = unsafe {\n        ::std::mem::transmute(::std::raw::TraitObject {\n            data: &amp;x as *const _ as *mut _,\n            vtable: u32_display_vtable,\n        })\n    };\n\n    println!(\"{}\", disp);\n}\n</code></pre>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 0, "accepted_answer_id": 30289029, "answer_count": 2, "score": 2, "last_activity_date": 1525024316, "creation_date": 1431873654, "last_edit_date": 1512160483, "question_id": 30288005, "link": "https://stackoverflow.com/questions/30288005/how-to-get-the-v-ptr-for-a-given-trait-struct-combination", "title": "How to get the v-ptr for a given Trait/Struct combination?", "body": "<p>In Rust, a <code>&amp;T</code> where <code>T</code> is a <code>trait</code> is a fat reference, which actually corresponds to <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow\"><code>raw::TraitObject</code></a>:</p>\n\n<pre><code>pub struct TraitObject {\n    pub data: *mut (),\n    pub vtable: *mut (),\n}\n</code></pre>\n\n<p>Using <code>TraitObject</code>, one can de-construct and re-construct a <code>&amp;T</code> at leisure.</p>\n\n<p>However, while obtaining the <code>vtable</code> from de-constructing a <code>&amp;T</code> is easy, what if I never have the <code>&amp;T</code> in the first place, but just a <code>T</code> and <code>S</code>; essentially, something along the lines of:</p>\n\n<pre><code>fn make_vptr&lt;T: ?Sized, S&gt;() -&gt; *mut ();\n</code></pre>\n\n<p>How could I divine the v-ptr from there? Is there any intrinsic I could use?</p>\n\n<p><em>Note: the naive implementation of creating a <code>S</code> (or conjuring it from thin-air) and then making a <code>&amp;T</code> reference does not work; the compiler complains that <code>T</code> is not necessarily a <code>trait</code> and therefore that <code>&amp;T</code> is either one pointer or two pointers in size.</em></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 2, "last_activity_date": 1431873928, "creation_date": 1431873928, "answer_id": 30288069, "question_id": 30288001, "link": "https://stackoverflow.com/questions/30288001/the-trait-forr-coreopsfnmutr-k-t-is-not-implemented-for-the/30288069#30288069", "title": "the trait `for&lt;&#39;r&gt; core::ops::FnMut&lt;(&amp;&#39;r &amp;(K, T),)&gt;` is not implemented for the type `P`", "body": "<p>Well, the compiler already gave you a hint at the fix! You need to change the \"where\" clause from</p>\n\n<pre><code>fn find&lt;P&gt;(&amp;self, predicate: P) -&gt; Option&lt;&amp;(K, T)&gt; \n    where P: FnMut(&amp;(K, T)) -&gt; bool\n</code></pre>\n\n<p>to</p>\n\n<pre><code>fn find&lt;P&gt;(&amp;self, predicate: P) -&gt; Option&lt;&amp;(K, T)&gt; \n   where for&lt;'r&gt; P: FnMut(&amp;'r &amp;(K, T)) -&gt; bool\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 107, "user_id": 1225445, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9b2126d7d7e28eb17f309e9f3c16753?s=128&d=identicon&r=PG", "display_name": "xps_l502", "link": "https://stackoverflow.com/users/1225445/xps-l502"}, "edited": false, "score": 1, "creation_date": 1431874904, "post_id": 30288139, "comment_id": 48673561, "body": "I saw for&lt;&#39;r&gt; for the first time. How do we call this syntax? Could you point me out the websites or refereces which describe this syntax. Thanks."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 107, "user_id": 1225445, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9b2126d7d7e28eb17f309e9f3c16753?s=128&d=identicon&r=PG", "display_name": "xps_l502", "link": "https://stackoverflow.com/users/1225445/xps-l502"}, "edited": false, "score": 2, "creation_date": 1431875399, "post_id": 30288139, "comment_id": 48673730, "body": "@xps_l502 Those are known as <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0387-higher-ranked-trait-bounds.md\" rel=\"nofollow noreferrer\">higher-ranked trait bounds</a>"}, {"owner": {"reputation": 107, "user_id": 1225445, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9b2126d7d7e28eb17f309e9f3c16753?s=128&d=identicon&r=PG", "display_name": "xps_l502", "link": "https://stackoverflow.com/users/1225445/xps-l502"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431875570, "post_id": 30288139, "comment_id": 48673781, "body": "@Shepmaster Thank you!"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1431874271, "creation_date": 1431874271, "answer_id": 30288139, "question_id": 30288001, "link": "https://stackoverflow.com/questions/30288001/the-trait-forr-coreopsfnmutr-k-t-is-not-implemented-for-the/30288139#30288139", "title": "the trait `for&lt;&#39;r&gt; core::ops::FnMut&lt;(&amp;&#39;r &amp;(K, T),)&gt;` is not implemented for the type `P`", "body": "<p>Let's compare the bound on <code>P</code> and that required the compiler:</p>\n\n<pre><code>// P\n        FnMut(    &amp;(K, T)) -&gt; bool\n\n// required\nfor&lt;'r&gt; FnMut(&amp;'r &amp;(K, T)) -&gt; bool\n</code></pre>\n\n<p>If you change the <code>where</code> clause to match the signature asked for by the compiler, it works (<a href=\"http://is.gd/rEaIse\" rel=\"nofollow\">see here</a>).</p>\n\n<p>I believe the extra reference (and lifetime) are introduced by the use of <code>iter</code>, and thus linked to the lifetime of the iterator, but don't take my word for it.</p>\n\n<p>I would point out, though, that <code>Vec</code> has a <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.binary_search_by\" rel=\"nofollow\"><code>binary_search_by</code></a> which is bound to be more efficient than a linear <code>find</code>:</p>\n\n<pre><code>fn binary_search_by&lt;F&gt;(&amp;self, f: F) -&gt; Result&lt;usize, usize&gt;\n    where F: FnMut(&amp;T) -&gt; Ordering\n</code></pre>\n\n<p>You may wish to use that instead, since you went to the trouble of sorting it.</p>\n"}], "owner": {"reputation": 107, "user_id": 1225445, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9b2126d7d7e28eb17f309e9f3c16753?s=128&d=identicon&r=PG", "display_name": "xps_l502", "link": "https://stackoverflow.com/users/1225445/xps-l502"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 936, "favorite_count": 0, "accepted_answer_id": 30288139, "answer_count": 2, "score": 3, "last_activity_date": 1431874271, "creation_date": 1431873624, "question_id": 30288001, "link": "https://stackoverflow.com/questions/30288001/the-trait-forr-coreopsfnmutr-k-t-is-not-implemented-for-the", "title": "the trait `for&lt;&#39;r&gt; core::ops::FnMut&lt;(&amp;&#39;r &amp;(K, T),)&gt;` is not implemented for the type `P`", "body": "<p>I want a sorted vector of (Key, Type), which is sorted only by Key.</p>\n\n<p>I came up with the code below:</p>\n\n<pre><code>struct SortedVec&lt;K, T&gt; {\n    data: Vec&lt;(K, T)&gt;\n}\n\nimpl&lt;K: Ord, T&gt; SortedVec&lt;K, T&gt; {\n    fn new() -&gt; SortedVec&lt;K, T&gt; {\n        SortedVec { data: Vec::new() }\n    }\n\n    fn add(&amp;mut self, k: K, t: T) {\n        self.data.push((k, t));\n        self.data.sort_by(|a, b| a.0.cmp(&amp;b.0));\n    }\n\n    fn find&lt;P&gt;(&amp;self, predicate: P) -&gt; Option&lt;&amp;(K, T)&gt; where P: FnMut(&amp;(K, T)) -&gt; bool {\n        self.data.iter().find(predicate)\n    }\n}\n</code></pre>\n\n<p>But this doesn't compile with the following errors:</p>\n\n<pre><code>anon&gt;:16:30: 16:45 error: the trait `for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r &amp;(K, T),)&gt;` is not implemented for the type `P` [E0277]\nanon&gt;:16             self.data.iter().find(predicate)\n                                       ^~~~~~~~~~~~~~~\n&lt;anon&gt;:16:30: 16:45 error: the trait `for&lt;'r&gt; core::ops::FnOnce&lt;(&amp;'r &amp;(K, T),)&gt;` is not implemented for the type `P` [E0277]\n&lt;anon&gt;:16             self.data.iter().find(predicate)\n                                       ^~~~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>I can't find anything wrong with the type 'P'.</p>\n\n<p>How can I fix it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 16847, "user_id": 177776, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a5b92898d3543a8478d925617ecefe0?s=128&d=identicon&r=PG", "display_name": "Mirek Rusin", "link": "https://stackoverflow.com/users/177776/mirek-rusin"}, "edited": false, "score": 0, "creation_date": 1431914217, "post_id": 30286981, "comment_id": 48684497, "body": "Thanks for this answer. I really like it. I&#39;m marking @Shepmaster&#39;s answer because it&#39;s the recommended solution to this problem. It&#39;s better to highlight it for people who are looking for solution to this problem. Thank you."}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 4, "last_activity_date": 1431866600, "creation_date": 1431866600, "answer_id": 30286981, "question_id": 30286861, "link": "https://stackoverflow.com/questions/30286861/how-can-i-use-shared-logic-from-different-files/30286981#30286981", "title": "How can I use shared logic from different files?", "body": "<p>One solution is to create a library out of the shared code. This will allow you to use an <code>extern crate</code> declaration.</p>\n\n<pre><code>// euler/shared/shared.rs\npub fn foo() {\n    println!(\"shared::foo()\");\n}\n</code></pre>\n\n<p>To compile the lib:</p>\n\n<pre><code>$ cd euler/shared\n$ rustc --crate-type=lib shared.rs\n$ ls -l libshared.rlib                                                                                                \n-rw-r--r--  1 mdup  wheel  6758 May 17 14:38 libshared.rlib\n</code></pre>\n\n<p>Here is how you use it in \"client\" code:</p>\n\n<pre><code>// euler/001/main.rs\n\nextern crate shared;\n\nfn main() {\n  shared::foo();\n}\n</code></pre>\n\n<p>The compile the client:</p>\n\n<pre><code>$ cd euler/001\n$ rustc -L ../shared main.rs\n$ ls -l main\n-rwxr-xr-x  1 mdup  wheel  291420 May 17 14:42 main\n$ ./main\nshared::foo()\n</code></pre>\n\n<p>More info in <a href=\"http://rustbyexample.com\" rel=\"nofollow\">Rust By Example</a>, section \"Crates\", pages <a href=\"http://rustbyexample.com/crates/lib.html\" rel=\"nofollow\">\"Library\"</a> and <a href=\"http://rustbyexample.com/crates/link.html\" rel=\"nofollow\">\"extern crate\"</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "edited": false, "score": 0, "creation_date": 1431882528, "post_id": 30287635, "comment_id": 48676163, "body": "Indeed both the cargo approach and the manual link approach are correct, they all have their use cases! Manual linking is great for a one-off program (like Project Euler exercises), but when you first need to install a package you&#39;ll be glad to have invested in the cargo structure. +1"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1431871446, "last_edit_date": 1495542607, "creation_date": 1431871446, "answer_id": 30287635, "question_id": 30286861, "link": "https://stackoverflow.com/questions/30286861/how-can-i-use-shared-logic-from-different-files/30287635#30287635", "title": "How can I use shared logic from different files?", "body": "<p><a href=\"https://stackoverflow.com/a/30286981/155423\">mdup's answer</a> is correct, but I'd encourage you to use Cargo, Rust's package manager. It will do two very important things for you here:</p>\n\n<ol>\n<li>Set up the correct command line arguments to <code>rustc</code>.</li>\n<li>Automatically rebuild the dependent libraries when they change.</li>\n</ol>\n\n<p>Use <code>cargo new shared</code> and <code>cargo new --bin euler-001</code> to generate the right directory structure. Move your shared code to <code>shared/src/lib.rs</code> and your binaries to <code>euler-001/src/main.rs</code>:</p>\n\n<pre><code>.\n\u251c\u2500\u2500 euler-001\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Cargo.toml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 shared\n    \u251c\u2500\u2500 Cargo.toml\n    \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 lib.rs\n</code></pre>\n\n<p>Then, edit <code>euler-001/Cargo.toml</code> and add the dependencies section:</p>\n\n<pre><code>[dependencies.shared]\npath = \"../shared\"\n</code></pre>\n\n<p>And tweak your <code>main.rs</code> to know about the crate:</p>\n\n<pre><code>extern crate shared;\n\nfn main() {\n    shared::foo();\n}\n</code></pre>\n\n<p>Now, you can simply type <code>cargo run</code> in the <code>euler-001</code> directory:</p>\n\n<pre><code>$ cargo run\n   Compiling shared v0.1.0 (file:///private/tmp/play/euler-001)\n   Compiling euler-001 v0.1.0 (file:///private/tmp/play/euler-001)\n     Running `target/debug/euler-001`\nshared::foo()\n</code></pre>\n\n<p>Note that you don't have to remember command line arguments and things are compiled for you! Having a built-in package manager is great!</p>\n"}], "owner": {"reputation": 16847, "user_id": 177776, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6a5b92898d3543a8478d925617ecefe0?s=128&d=identicon&r=PG", "display_name": "Mirek Rusin", "link": "https://stackoverflow.com/users/177776/mirek-rusin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 128, "favorite_count": 1, "accepted_answer_id": 30287635, "answer_count": 2, "score": 1, "last_activity_date": 1431871446, "creation_date": 1431865686, "last_edit_date": 1431870999, "question_id": 30286861, "link": "https://stackoverflow.com/questions/30286861/how-can-i-use-shared-logic-from-different-files", "title": "How can I use shared logic from different files?", "body": "<p>Having shared logic in:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// euler/shared/lib.rs\n\npub fn foo() {\n    println!(\"shared::foo()\");\n}\n</code></pre>\n\n<p>How can I use it from different files:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// euler/001/main.rs\n\nuse super::shared; // error: unresolved import `super::shared`\n\nfn main() {\n  shared::foo(); // how to access it?\n}\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// euler/002/main.rs\n\nuse super::shared; // error: unresolved import `super::shared`\n\nfn main() {\n  shared::foo(); // how to access it?\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 0, "creation_date": 1431827113, "post_id": 30282497, "comment_id": 48663274, "body": "@Shepmaster it compiles because you don&#39;t run tests. If you try to run it properly or move the test code to <code>main()</code> you&#39;ll see the error: <a href=\"http://is.gd/GM2G3o\" rel=\"nofollow noreferrer\">is.gd/GM2G3o</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1431871626, "last_edit_date": 1495540340, "creation_date": 1431827858, "answer_id": 30282581, "question_id": 30282497, "link": "https://stackoverflow.com/questions/30282497/how-to-help-infer-the-type-for-generic-vector-when-comparing-equality/30282581#30282581", "title": "How to help infer the type for generic vector when comparing equality", "body": "<p>It's useful to <a href=\"https://stackoverflow.com/help/mcve\">create a MCVE</a> when debugging these types of things. Here's an example:</p>\n\n<pre><code>fn main() {\n    let vec = vec![1, 2, 3, 4];\n    assert_eq!([1,2,3,4], vec);\n}\n</code></pre>\n\n<p>With the error</p>\n\n<pre><code>&lt;std macros&gt;:5:8: 5:33 error: the trait `core::cmp::PartialEq&lt;collections::vec::Vec&lt;_&gt;&gt;` is not implemented for the type `[_; 4]` [E0277]\n&lt;std macros&gt;:5 if ! ( * left_val == * right_val ) {\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>So, there's some kind of error with <code>PartialEq</code>, let's try to reduce further:</p>\n\n<pre><code>fn main() {\n    let vec = vec![1, 2, 3, 4];\n    [1,2,3,4] == vec;\n}\n</code></pre>\n\n<p>With the same basic error:</p>\n\n<pre><code>&lt;anon&gt;:3:5: 3:21 error: the trait `core::cmp::PartialEq&lt;collections::vec::Vec&lt;_&gt;&gt;` is not implemented for the type `[_; 4]` [E0277]\n&lt;anon&gt;:3     [1,2,3,4] == vec;\n             ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>The <code>_</code> in <code>Vec&lt;_&gt;</code> means an as-yet-undermined type. Let's use explicit types to see if that's the problem:</p>\n\n<pre><code>fn main() {\n    let vec = vec![1u8, 2, 3, 4];\n    [1u8,2,3,4] == vec;\n}\n</code></pre>\n\n<p>Nope, still the same error:</p>\n\n<pre><code>&lt;anon&gt;:3:5: 3:23 error: the trait `core::cmp::PartialEq&lt;collections::vec::Vec&lt;u8&gt;&gt;` is not implemented for the type `[u8; 4]` [E0277]\n&lt;anon&gt;:3     [1u8,2,3,4] == vec;\n             ^~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Let's try flipping things around:</p>\n\n<pre><code>fn main() {\n    let vec = vec![1u8, 2, 3, 4];\n    vec == [1u8,2,3,4];\n}\n</code></pre>\n\n<p>Hmm. This works! Swapping the order in your original code also works.</p>\n\n<p>Of course, the big question left is <strong>why</strong>. Let's look at the <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">docs for <code>Vec</code></a>, specifically the section about <code>PartialEq</code>:</p>\n\n<pre><code>impl&lt;'a, 'b, A, B&gt; PartialEq&lt;[B; 4]&gt; for Vec&lt;A&gt;\n    where A: PartialEq&lt;B&gt;\n{\n    fn eq(&amp;self, other: &amp;[B; 4]) -&gt; bool { ... }\n}\n</code></pre>\n\n<p>So, you can test a <code>Vec&lt;A&gt;</code> to an <code>&amp;[B; 4]</code> for equality, if you can test <code>A</code> and <code>B</code> for equality. What about the other way around? The <a href=\"http://doc.rust-lang.org/std/primitive.array.html\" rel=\"nofollow noreferrer\">docs for arrays</a> don't mention <code>Vec</code> at all (which makes sense, as they are more of a core feature), and there aren't any inverse implementations of <code>PartialEq</code>. This certainly seems surprising, and I have no good explanation for why they aren't there...</p>\n\n<p>Ah, it appears this happened in <a href=\"https://github.com/rust-lang/rust/commit/5cf126ae2f6af1cdac901f6995e3c2bab35e587f\" rel=\"nofollow noreferrer\">this commit</a>. Here's the commit message:</p>\n\n<blockquote>\n  <p>The primary implementation which was lost was the ability to compare\n  <code>&amp;[T]</code> and <code>Vec&lt;T&gt;</code> (in that order).</p>\n  \n  <p>This change also modifies the <code>assert_eq!</code> macro to not consider\n  both directions of equality, only the one given in the left/right\n  forms to the macro. This modification is motivated due to the fact\n  that <code>&amp;[T] == Vec&lt;T&gt;</code> no longer compiles, causing hundreds of errors\n  in unit tests in the standard library (and likely throughout the\n  community as well).</p>\n</blockquote>\n\n<p><a href=\"https://stackoverflow.com/questions/30282497/how-to-help-infer-the-type-for-generic-vector-when-comparing-equality/30282603?noredirect=1#comment48665123_30282603\">Manishearth found</a> a <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\" rel=\"nofollow noreferrer\">comprehensive blog post</a> that describes the rationale behind this change in good detail!</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431828576, "post_id": 30282603, "comment_id": 48663507, "body": "Do you recall if this was a deliberate decision? It seems like we could add a few lines to the macros that generate all those methods for the reverse easily."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431828660, "post_id": 30282603, "comment_id": 48663515, "body": "@Shepmaster I don&#39;t know; but if it was deliberate I suspect it&#39;s because generic impls for arrays are hard."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431828837, "post_id": 30282603, "comment_id": 48663540, "body": "@Shepmaster I can only find <code>impl&lt;A, B&gt; PartialEq&lt;[B]&gt; for [A] where A: PartialEq&lt;B&gt;</code>. I suspect autoref/autoderef/coercions are at play here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431830040, "post_id": 30282603, "comment_id": 48663736, "body": "I found <a href=\"https://github.com/rust-lang/rust/commit/5cf126ae2f6af1cdac901f6995e3c2bab35e587f\" rel=\"nofollow noreferrer\">the commit</a>, but will readily admit I&#39;m not fully grokking the problem that was worked around."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431838622, "post_id": 30282603, "comment_id": 48665123, "body": "@Shepmaster Uh, yeah, complicated bit of history there. <a href=\"http://smallcultfollowing.com/babysteps/blog/2015/01/14/little-orphan-impls/\" rel=\"nofollow noreferrer\">This</a> might help :)"}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 2, "last_activity_date": 1431828142, "creation_date": 1431828142, "answer_id": 30282603, "question_id": 30282497, "link": "https://stackoverflow.com/questions/30282497/how-to-help-infer-the-type-for-generic-vector-when-comparing-equality/30282603#30282603", "title": "How to help infer the type for generic vector when comparing equality", "body": "<p>To expand on @Shepmaster's answer, the issue here is that the implementation for the <code>==</code> operator is asymmetric in this case. We have an <code>impl PartialEq&lt;Vec&lt;T&gt;&gt; for [T; n]</code>, but not the reverse. Perhaps we should have a reverse implementation, but generic array types aren't well supported yet.</p>\n\n<p>This wasn't an issue with inference at all, it was an issue of comparing two different types and Rust not having a symmetric implementation.</p>\n"}], "owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 412, "favorite_count": 0, "accepted_answer_id": 30282581, "answer_count": 2, "score": 3, "last_activity_date": 1431871626, "creation_date": 1431826769, "last_edit_date": 1431828811, "question_id": 30282497, "link": "https://stackoverflow.com/questions/30282497/how-to-help-infer-the-type-for-generic-vector-when-comparing-equality", "title": "How to help infer the type for generic vector when comparing equality", "body": "<p>I have the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct HeadTail&lt;T&gt;(T, Vec&lt;T&gt;);\n\nfn head_tail&lt;T : Clone&gt;(v: &amp;Vec&lt;T&gt;) -&gt; Option&lt;HeadTail&lt;T&gt;&gt; {\n    match v.len() {\n        0 =&gt; None,\n        _ =&gt; {\n            let mut tmp_v = v.clone();\n            let head = tmp_v.remove(0);\n            Some(HeadTail(head, tmp_v))\n        }\n    }\n}\n\n#[test]\nfn head_tail_many() {\n    let vec = vec![1, 2, 3, 4];\n    let result = head_tail(&amp;vec);\n\n    match result {\n        None =&gt; unreachable!(),\n        Some(HeadTail(head, tail)) =&gt; {\n            assert_eq!(1, head);\n            assert_eq!(3, tail.len());\n            assert_eq!([2, 3, 4], tail);\n        }\n    };\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/GM2G3o\" rel=\"nofollow\">Online demo with the problem</a></p>\n\n<p>And it fails with the following exception:</p>\n\n<pre><code>&lt;std macros&gt;:5:8: 5:33 error: the trait `core::cmp::PartialEq&lt;collections::vec::Vec&lt;_&gt;&gt;` is not implemented for the type `[_; 3]` [E0277]\n&lt;std macros&gt;:5 if ! ( * left_val == * right_val ) {\n</code></pre>\n\n<p>Why can Rust not infer the type in this case?</p>\n\n<p>What can I do to let it know it's any numeric type (eg <code>u8</code>)?</p>\n"}, {"tags": ["rust", "interior-mutability"], "answers": [{"comments": [{"owner": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "edited": false, "score": 0, "creation_date": 1431834990, "post_id": 30282105, "comment_id": 48664538, "body": "Hey thanks.  This is a great explanation.  I&#39;m still learning, so I&#39;ve been wrestling with the borrow checker, but of course this makes sense.  I suppose I don&#39;t quite understand why the RefCell makes the difference -- why doesn&#39;t the non-RefCell version also also cause problem for the same reason?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "edited": false, "score": 0, "creation_date": 1431866816, "post_id": 30282105, "comment_id": 48671343, "body": "@MarcMiller: I suppose that by now you have realized that Rust is all about ownership and borrowing. Normally, those get checked at compile-time, however there are constructs based on <code>unsafe</code> code which lie to the compiler and instead verify the correctness at run-time. <code>RefCell</code> is such a construct, and therefore introducing it changes the rules slightly; you can think of it as a Read-Write Mutex for single-threaded code."}, {"owner": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431889316, "post_id": 30282105, "comment_id": 48678520, "body": "@matthieu-m: Thank you for chiming in!  Could I trouble you to clarify?  Are you saying that the RefCell changes this to a sort-of writer lock instead of just a reader lock, even though I&#39;m not doing borrow_mut?  I just really don&#39;t want to have to clone my return values here since my objects can be quite large, so I&#39;m looking at possibly doing something like ref-counting: RefCell&lt;HashMap&lt;String, Rc&lt;String&gt;&gt; -- but that makes me feel like I&#39;m doing something way wrong.  Thanks."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "edited": false, "score": 0, "creation_date": 1431929626, "post_id": 30282105, "comment_id": 48688745, "body": "@MarcMiller: If you&#39;re not using <code>borrow_mut()</code> at all, then there&#39;s absolutely no point in using <code>RefCell</code>. Just store the <code>HashMap</code> directly in your <code>Frame</code>. If you want to avoid copies/clones, then return a reference, that&#39;s their purpose!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "edited": false, "score": 1, "creation_date": 1431929766, "post_id": 30282105, "comment_id": 48688821, "body": "@MarcMiller: <code>RefCell</code> is in essence a reader-writer lock, though not thread-safe; when you <code>.borrow_mut()</code> it checks that nobody else already has a borrow (writer requires exclusive access) and when you <code>.borrow()</code> it checks that no writer is active (reader get shared access). In order for the <code>RefCell</code> to guarantee writer exclusivity though, it means that what you borrow through <code>.borrow()</code> cannot live longer than the guard (<code>Ref&lt;&#39;a, T&gt;</code>), which is what you are experiencing here (since the guard does not live longer than your function). Returning a <code>Rc&lt;String&gt;</code> has advised works around this."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 16, "last_activity_date": 1535769746, "last_edit_date": 1535769746, "creation_date": 1431822578, "answer_id": 30282105, "question_id": 30281664, "link": "https://stackoverflow.com/questions/30281664/how-do-i-borrow-a-refcellhashmap-find-a-key-and-return-a-reference-to-the-re/30282105#30282105", "title": "How do I borrow a RefCell&lt;HashMap&gt;, find a key, and return a reference to the result?", "body": "<p>When you borrow from a <code>RefCell</code>, the reference you get has a shorter lifetime than the <code>RefCell</code>'s. That's because the reference's lifetime is restricted by the guard returned by <code>borrow()</code>. That guard ensures that nobody else can take a mutable reference to the value until the guard is dropped.</p>\n\n<p>However, you are trying to return a value without keeping a guard alive. If <code>Frame</code> had a method that took a <code>&amp;self</code> argument but tried to mutate the map (which is possible with <code>RefCell</code> &mdash; if you don't need to do that, then ditch the <code>RefCell</code> and write <code>&amp;mut self</code> on the methods that mutate the map), you could accidentally destroy a <code>String</code> that somebody else has a reference to. That is exactly the kind of errors that the borrow checker was designed to report!</p>\n\n<p>If the map values are effectively immutable (i.e. your type will not allow mutating the map's values), you could also wrap them in an <code>Rc</code> in your map. You could therefore return a clone of the <code>Rc&lt;String&gt;</code> (this only clones the reference-counted pointer, not the underlying string), which would let you release the borrow on the map before returning from the function.</p>\n\n<pre><code>struct Frame {\n    map: RefCell&lt;HashMap&lt;String, Rc&lt;String&gt;&gt;&gt;\n}\n\nimpl Frame {\n    fn lookup(&amp;self, k: &amp;String) -&gt; Option&lt;Rc&lt;String&gt;&gt; {\n        self.map.borrow().get(k).map(|x| x.clone())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 151, "user_id": 4907920, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-qNw_KnmYyAw/AAAAAAAAAAI/AAAAAAAABHY/mUzpP-j1CxI/photo.jpg?sz=128", "display_name": "Marc Miller", "link": "https://stackoverflow.com/users/4907920/marc-miller"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3183, "favorite_count": 2, "closed_date": 1531591938, "answer_count": 1, "score": 15, "last_activity_date": 1545155593, "creation_date": 1431817791, "last_edit_date": 1545155593, "question_id": 30281664, "link": "https://stackoverflow.com/questions/30281664/how-do-i-borrow-a-refcellhashmap-find-a-key-and-return-a-reference-to-the-re", "closed_reason": "Duplicate", "title": "How do I borrow a RefCell&lt;HashMap&gt;, find a key, and return a reference to the result?", "body": "<p>I have a <code>RefCell&lt;HashMap&gt;</code> and want to borrow the table, find a key, and return a reference to the result:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::collections::HashMap;\n\nstruct Frame {\n    map: RefCell&lt;HashMap&lt;String, String&gt;&gt;,\n}\n\nimpl Frame {\n    fn new() -&gt; Frame {\n        Frame {\n            map: RefCell::new(HashMap::new()),\n        }\n    }\n\n    fn lookup&lt;'a&gt;(&amp;'a self, k: &amp;String) -&gt; Option&lt;&amp;'a String&gt; {\n        self.map.borrow().get(k)\n    }\n}\n\nfn main() {\n    let f = Frame::new();\n    println!(\"{}\", f.lookup(&amp;\"hello\".to_string()).expect(\"blargh!\"));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=badd865fc0cf042e8eb71e1733ffb071&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>If I remove the <code>RefCell</code> then everything works okay:</p>\n\n<pre><code>struct Frame {\n    map: HashMap&lt;String, String&gt;,\n}\n\nimpl Frame {\n    fn lookup&lt;'a&gt;(&amp;'a self, k: &amp;String) -&gt; Option&lt;&amp;'a String&gt; {\n        self.map.get(k)\n    }\n}\n</code></pre>\n\n<p>What is the correct way to write the lookup function without copying the string in the hashtable?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 45996, "user_id": 164171, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/dec2e1cd575b184c3695fe6d18a24638?s=128&d=identicon&r=PG", "display_name": "static_rtti", "link": "https://stackoverflow.com/users/164171/static-rtti"}, "edited": false, "score": 2, "creation_date": 1434567661, "post_id": 30281235, "comment_id": 49839208, "body": "@static_rtti Can you explain further what part of <a href=\"http://stackoverflow.com/a/30285110/155423\">Levans&#39; answer</a> is unsuitable? <i>Surely a systems programming language ...</i> remember, that Rust is also to be used in environments where there is no launcher process (like a kernel)."}, {"owner": {"reputation": 45996, "user_id": 164171, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/dec2e1cd575b184c3695fe6d18a24638?s=128&d=identicon&r=PG", "display_name": "static_rtti", "link": "https://stackoverflow.com/users/164171/static-rtti"}, "edited": false, "score": 0, "creation_date": 1434614261, "post_id": 30281235, "comment_id": 49856929, "body": "I hadn&#39;t read it well enough, it sounds like what I want."}], "answers": [{"comments": [{"owner": {"reputation": 40442, "user_id": 15985, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/fb915f0b3a0a397891f4fd6dab6c2ac8?s=128&d=identicon&r=PG", "display_name": "Thomas Bratt", "link": "https://stackoverflow.com/users/15985/thomas-bratt"}, "edited": false, "score": 7, "creation_date": 1431814184, "post_id": 30281267, "comment_id": 48660673, "body": "Unfortunately it doesn&#39;t clean up and call destructors. I&#39;ll amend the question to mention that."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 40442, "user_id": 15985, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/fb915f0b3a0a397891f4fd6dab6c2ac8?s=128&d=identicon&r=PG", "display_name": "Thomas Bratt", "link": "https://stackoverflow.com/users/15985/thomas-bratt"}, "edited": false, "score": 0, "creation_date": 1431814686, "post_id": 30281267, "comment_id": 48660791, "body": "Any reason why you need the clean up to happen? Do you have destructors that do &quot;interesting&quot; stuff? If not, then letting the operating system clean up the process is often good enough."}, {"owner": {"reputation": 40442, "user_id": 15985, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/fb915f0b3a0a397891f4fd6dab6c2ac8?s=128&d=identicon&r=PG", "display_name": "Thomas Bratt", "link": "https://stackoverflow.com/users/15985/thomas-bratt"}, "edited": false, "score": 2, "creation_date": 1431814950, "post_id": 30281267, "comment_id": 48660855, "body": "I guess I&#39;m looking for a direct replacement for <code>return exit_code;</code> in C. I&#39;d like to avoid the possibility of not flushing to disk etc if at all possible."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 13, "last_activity_date": 1431814044, "creation_date": 1431814044, "answer_id": 30281267, "question_id": 30281235, "link": "https://stackoverflow.com/questions/30281235/how-to-cleanly-end-the-program-with-an-exit-code/30281267#30281267", "title": "How to cleanly end the program with an exit code?", "body": "<p><a href=\"http://doc.rust-lang.org/std/process/fn.exit.html\"><code>std::process::exit</code></a> exits the program with the specified exit code.</p>\n"}, {"comments": [{"owner": {"reputation": 4690, "user_id": 2019549, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/900a3735d55a0473c975ba9266bf0c68?s=128&d=identicon&r=PG", "display_name": "cambunctious", "link": "https://stackoverflow.com/users/2019549/cambunctious"}, "edited": false, "score": 0, "creation_date": 1603400087, "post_id": 30285110, "comment_id": 114034148, "body": "<code>set_exit_status</code> is deprecated"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 49, "last_activity_date": 1605520427, "last_edit_date": 1605520427, "creation_date": 1431852980, "answer_id": 30285110, "question_id": 30281235, "link": "https://stackoverflow.com/questions/30281235/how-to-cleanly-end-the-program-with-an-exit-code/30285110#30285110", "title": "How to cleanly end the program with an exit code?", "body": "<p>Building over the comments of <a href=\"https://stackoverflow.com/a/30281267/155423\">@FrancisGagn\u00e9 's answer</a>, if you are searching for an equivalent of C's <code>return exit_code</code>, you can artificially build it this way:</p>\n<pre><code>fn main() {\n    let exit_code = real_main();\n    std::process::exit(exit_code);\n}\n\nfn real_main() -&gt; i32 {\n    // the real program here\n}\n</code></pre>\n<p>This way, all the objects of your program will be in the scope of the <code>real_main()</code> function, and you can safely use <code>return exit_code;</code> in <code>main</code> while still having all destructors properly run.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 15, "last_activity_date": 1547427329, "creation_date": 1547427329, "answer_id": 54174631, "question_id": 30281235, "link": "https://stackoverflow.com/questions/30281235/how-to-cleanly-end-the-program-with-an-exit-code/54174631#54174631", "title": "How to cleanly end the program with an exit code?", "body": "<p>Since Rust 1.26, the <code>main</code> function is no longer limited to <code>()</code>: <code>main</code> can also return a <code>Result&lt;(), E&gt;</code> for any type <code>E: Debug</code>. An <code>Ok</code> value maps to <code>EXIT_SUCCESS</code> (which happens to be 0 on all platforms) and an <code>Err</code> value maps to <code>EXIT_FAILURE</code> (which happens to be 1 on all platforms). The error value is also automatically printed to the standard error stream.</p>\n\n<p>In the future, Rust will support even more return types for <code>main</code>. The <a href=\"https://doc.rust-lang.org/stable/std/process/trait.Termination.html\" rel=\"noreferrer\"><code>Termination</code></a> trait (unstable as of Rust 1.31.1) defines all of these types. The trait's job is to convert the value to an <code>i32</code> exit code. When <code>Termination</code> gets stabilized, applications will naturally be able to implement that trait themselves to provide their own result type.</p>\n"}], "owner": {"reputation": 40442, "user_id": 15985, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/fb915f0b3a0a397891f4fd6dab6c2ac8?s=128&d=identicon&r=PG", "display_name": "Thomas Bratt", "link": "https://stackoverflow.com/users/15985/thomas-bratt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11571, "favorite_count": 11, "accepted_answer_id": 30285110, "answer_count": 3, "score": 41, "last_activity_date": 1605520427, "creation_date": 1431813835, "last_edit_date": 1495541890, "question_id": 30281235, "link": "https://stackoverflow.com/questions/30281235/how-to-cleanly-end-the-program-with-an-exit-code", "title": "How to cleanly end the program with an exit code?", "body": "<p>Is there a way of returning an exit code in Rust 1.0?</p>\n\n<p>I've tried <code>env::set_exit_status(exit_code);</code> but this generates a compiler error.</p>\n\n<p>There is also this question: <a href=\"https://stackoverflow.com/questions/21569718/exit-rust-program-early\">Exit Rust program early</a> which is similar but asks about the case when the process has to be exited early.</p>\n\n<hr>\n\n<p><em>EDIT: I'm looking for a solution that will also allow the process to tidy up the stack, call destructors, etc.</em></p>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 170, "user_id": 4486445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f798528080fada2fc396548066c04b5f?s=128&d=identicon&r=PG&f=1", "display_name": "Gennady Proskurin", "link": "https://stackoverflow.com/users/4486445/gennady-proskurin"}, "edited": false, "score": 0, "creation_date": 1431806728, "post_id": 30280008, "comment_id": 48658626, "body": "This works, but this forces me to use atomic counter and, more important, this requires changing type of variable in many places (functions&#39; signatures). In real program variable s1 is created in one place, then it is passed through several function calls before it is passed to thread functions."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 170, "user_id": 4486445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f798528080fada2fc396548066c04b5f?s=128&d=identicon&r=PG&f=1", "display_name": "Gennady Proskurin", "link": "https://stackoverflow.com/users/4486445/gennady-proskurin"}, "edited": false, "score": 5, "creation_date": 1431807475, "post_id": 30280008, "comment_id": 48658882, "body": "@GennadyProskurin, because all threads are independent, there is simply no way to avoid <code>Arc</code>. The data has to be stored somewhere (i.e. someone has to own the data). Because threads are independent, it can&#39;t be owned by anyone of them - it would be possible then for this data to be destroyed while other threads still have a handle to it. If threads are <a href=\"http://doc.rust-lang.org/std/thread/fn.scoped.html\" rel=\"nofollow noreferrer\">scoped</a>, then this restriction could be lifted, but <code>scoped</code> API is unstable for an important <a href=\"https://github.com/rust-lang/rust/pull/24385\" rel=\"nofollow noreferrer\">reason</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 170, "user_id": 4486445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f798528080fada2fc396548066c04b5f?s=128&d=identicon&r=PG&f=1", "display_name": "Gennady Proskurin", "link": "https://stackoverflow.com/users/4486445/gennady-proskurin"}, "edited": false, "score": 1, "creation_date": 1431829606, "post_id": 30280008, "comment_id": 48663661, "body": "@GennadyProskurin in addition to Vladimir&#39;s usual spot-on advice, I can only offer the suggestion to create your own struct that wraps and hides the <code>Arc</code> and <code>S</code> structs. Then you can pass that struct around, and changes like this are less disruptive, as you&#39;ve separated concerns a bit."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1431805644, "last_edit_date": 1431805644, "creation_date": 1431805302, "answer_id": 30280008, "question_id": 30279919, "link": "https://stackoverflow.com/questions/30279919/how-can-i-pass-the-same-data-to-different-threads-without-copying-it/30280008#30280008", "title": "How can I pass the same data to different threads without copying it?", "body": "<p>I'd <strong>highly</strong> recommend reading <a href=\"http://doc.rust-lang.org/stable/book\"><em>The Rust Programming Language</em></a>, specifically the <a href=\"http://doc.rust-lang.org/stable/book/concurrency.html\">chapter on concurrency</a>. In it, you are introduced to <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\"><code>Arc</code></a>:</p>\n\n<pre><code>use std::sync::Arc;\n\nstruct S {\n    i: i32,\n}\n\nfn thr(s: &amp;S) {}\n\nfn main() {\n    let s1 = Arc::new(S { i: 1 });\n    thr(&amp;s1);\n\n    let s2 = s1.clone();\n    let t2 = std::thread::spawn(move || thr(&amp;s2));\n\n    let s3 = s1.clone();\n    let t3 = std::thread::spawn(move || thr(&amp;s3));\n\n    t2.join();\n    t3.join();\n}\n</code></pre>\n\n<p>Notably, when <code>Arc</code>s are cloned, they simply bump a reference count, not duplicate the contained data.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431827317, "post_id": 30281430, "comment_id": 48663310, "body": "&quot;<i>If this is C or C++</i>&quot; but it isn&#39;t... it&#39;s Rust. Did you mean to draw an analogy to C / C++? If so, I don&#39;t get it ^_^"}], "tags": [], "owner": {"reputation": 797, "user_id": 4905701, "user_type": "registered", "profile_image": "https://graph.facebook.com/10206378492964245/picture?type=large", "display_name": "Ron Kuper", "link": "https://stackoverflow.com/users/4905701/ron-kuper"}, "is_accepted": false, "score": 0, "last_activity_date": 1431815549, "creation_date": 1431815549, "answer_id": 30281430, "question_id": 30279919, "link": "https://stackoverflow.com/questions/30279919/how-can-i-pass-the-same-data-to-different-threads-without-copying-it/30281430#30281430", "title": "How can I pass the same data to different threads without copying it?", "body": "<p>If this is C or C++ the allocated memory won't go away until its explicitly freed, and also, unless the objects are declared threadlocal then all threads in your app can refer to them.</p>\n\n<p>In the code you wrote it seems your structure is on the stack rather than the heap, so once it goes out of scope that object pointer is invalid.</p>\n\n<p>The brutal way to deal with this, without ARC, is to simply allocate the object and the pass the allocated pointer to your threads. Some thread needs to be the one to ultimately delete it (that's where ARC is a good idea).</p>\n"}], "owner": {"reputation": 170, "user_id": 4486445, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f798528080fada2fc396548066c04b5f?s=128&d=identicon&r=PG&f=1", "display_name": "Gennady Proskurin", "link": "https://stackoverflow.com/users/4486445/gennady-proskurin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 139, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1431815549, "creation_date": 1431804853, "last_edit_date": 1431805041, "question_id": 30279919, "link": "https://stackoverflow.com/questions/30279919/how-can-i-pass-the-same-data-to-different-threads-without-copying-it", "title": "How can I pass the same data to different threads without copying it?", "body": "<p>Struct <code>S</code> may be actually some big data, for example a large <code>Vec</code>. If I have one thread and do not use the data after creating a thread, I can move data to it, but with two threads (or using the same data in main thread), it is impossible.</p>\n\n<pre><code>struct S {\n    i : i32,\n}\n\nfn thr(s : &amp;S)\n{\n}\n\nfn main()\n{\n    let s1 = S { i:1 };\n    thr(&amp;s1);\n    let t1 = std::thread::spawn(|| thr(&amp;s1)); // does not work\n    let t2 = std::thread::spawn(|| thr(&amp;s1)); // does not work\n    t1.join();\n    t2.join();\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1431801366, "post_id": 30279248, "comment_id": 48656991, "body": "TypeId uses intrinsics internally. Perhaps we should use <code>typeid(Box&lt;Trait&gt;)</code> to get TraitID?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1431801686, "post_id": 30279248, "comment_id": 48657070, "body": "@Manishearth: Clever! But I cannot manage to make it compile, unfortunately. (<code>Box&lt;T + &#39;static&gt;</code> =&gt; &quot;expected reference to a trait&quot;)"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431802405, "post_id": 30279526, "comment_id": 48657291, "body": "Nice; I was fiddling around with function pointers but this works nicely."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431802536, "post_id": 30279526, "comment_id": 48657320, "body": "@MatthieuM. Actually, I don&#39;t think we even need the  <code>Box</code>; <code>TypeId::of::&lt;T&gt;</code> should just work"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1431802628, "post_id": 30279526, "comment_id": 48657344, "body": "Actually... <code>unsafe { std::intrinsics::type_id::&lt;Clone&gt;() }</code> works out of the box. I feel a bit silly now for assuming that <code>TypeId</code> would not work..."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431802698, "post_id": 30279526, "comment_id": 48657371, "body": "@MatthieuM. yeah, that&#39;s basically what I&#39;m saying :)"}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 2, "last_activity_date": 1431803845, "last_edit_date": 1431803845, "creation_date": 1431802308, "answer_id": 30279526, "question_id": 30279248, "link": "https://stackoverflow.com/questions/30279248/how-to-implement-a-traitid/30279526#30279526", "title": "How to implement a TraitId?", "body": "<p>Abusing <code>TypeId</code> to get <code>TraitId</code> works.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(core)]\nfn main() {\n println!(\"{:?}\", trait_id::&lt;Clone&gt;());\n println!(\"{:?}\", trait_id::&lt;Sync&gt;());\n}\n\nuse std::marker::{Reflect};\nuse std::any::TypeId;\n\n#[derive(Clone, Copy, PartialEq, Eq, Debug)]\nstruct TraitId(TypeId);\n\nfn trait_id&lt;T: ?Sized + Reflect + 'static&gt;() -&gt; TraitId\n{\n    TraitId(TypeId::of::&lt;T&gt;())\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=%23!%5Bfeature(core)%5D%0Afn%20main()%20%7B%0A%20println!(%22%7B%3A%3F%7D%22%2C%20trait_id%3A%3A%3CClone%3E())%3B%0A%20println!(%22%7B%3A%3F%7D%22%2C%20trait_id%3A%3A%3CSync%3E())%3B%0A%7D%0A%0Ause%20std%3A%3Amarker%3A%3A%7BReflect%7D%3B%0Ause%20std%3A%3Aany%3A%3ATypeId%3B%0A%0A%23%5Bderive(Clone%2C%20Copy%2C%20PartialEq%2C%20Eq%2C%20Debug)%5D%0Astruct%20TraitId(TypeId)%3B%0A%0Afn%20trait_id%3CT%3A%20%3FSized%20%2B%20Reflect%20%2B%20%27static%3E()%20-%3E%20TraitId%0A%7B%0A%20%20%20%20TraitId(TypeId%3A%3Aof%3A%3A%3CT%3E())%0A%7D&amp;version=nightly\" rel=\"nofollow\">Playpen</a></p>\n"}], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "accepted_answer_id": 30279526, "answer_count": 1, "score": 1, "last_activity_date": 1431803845, "creation_date": 1431800758, "question_id": 30279248, "link": "https://stackoverflow.com/questions/30279248/how-to-implement-a-traitid", "title": "How to implement a TraitId?", "body": "<p>The <code>std::any</code> module contains a <code>TypeId</code>. I would like to implement an equivalent <code>TraitId</code>, that is some mean of uniquely identifying a trait.</p>\n\n<p>This implementation need not be \"entirely automated\", but it would be somewhat easier if I could rely on some automation and avoid attributing IDs myself.</p>\n\n<p>My \"best\" idea so far was to create a marker type for myself, then implement all traits on it (with a healthy abuse of <code>panic!()</code>) and then use <code>std::raw::TraitObject</code> to get the v-ptr out of the trait representation and use <em>that</em> as my unique identifier.</p>\n\n<pre><code>struct Marker;\n\n#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd)]\nstruct TraitId { id: *mut () }\n\nfn trait_id&lt;T: ?Sized&gt;() -&gt; TraitId\n    where Marker: T\n{\n    let m = Marker { a: 1 };\n    let t: &amp;T = &amp;m;\n    let id: u64 = unsafe {\n        let r: raw::TraitObject = mem::transmute(t);\n        mem::transmute(r.vtable)\n    };\n    TraitId { id: id }\n}\n</code></pre>\n\n<p>It seemed like a neat idea, right until (<a href=\"http://is.gd/33AJaz\" rel=\"nofollow\">link</a>):</p>\n\n<pre><code>&lt;anon&gt;:14:19: 14:20 error: `T` is not a trait\n&lt;anon&gt;:14     where Marker: T\n                            ^\n</code></pre>\n\n<p>Does anyone know how to either constraint <code>T</code> so it is a trait OR fabricate a (unique per trait) <code>TraitId</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1431791437, "creation_date": 1431791437, "answer_id": 30277708, "question_id": 30277495, "link": "https://stackoverflow.com/questions/30277495/how-to-append-all-elements-in-a-slice-to-a-vec/30277708#30277708", "title": "How to append all elements in a slice to a Vec?", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/iter/trait.Extend.html\"><code>Extend</code></a> trait, which <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.extend\"><code>Vec&lt;T&gt;</code> implements</a> (the trait is in the prelude, so you don\u2019t need to import it).</p>\n\n<pre><code>one_vec.extend(another_vec)\n</code></pre>\n"}], "owner": {"reputation": 4818, "user_id": 403018, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/nDDbs.jpg?s=128&g=1", "display_name": "Gerstmann", "link": "https://stackoverflow.com/users/403018/gerstmann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 369, "favorite_count": 0, "accepted_answer_id": 30277708, "answer_count": 1, "score": 4, "last_activity_date": 1431791437, "creation_date": 1431790305, "question_id": 30277495, "link": "https://stackoverflow.com/questions/30277495/how-to-append-all-elements-in-a-slice-to-a-vec", "title": "How to append all elements in a slice to a Vec?", "body": "<p>There's <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.push_all\" rel=\"nofollow\">Vec::push_all</a>, but it's marked unstable. There's also <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.append\" rel=\"nofollow\">Vec::append</a> that's similar, but is unstable as well.</p>\n\n<p>Do any alternatives exist at the moment?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 1, "creation_date": 1489192276, "post_id": 30276135, "comment_id": 72579274, "body": "Where can I learn more about how it disallows aliasing?  Can it use this to declare it as <code>noalias</code>?  <a href=\"https://github.com/rust-lang/rust/issues/31681\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/31681</a> seems to hint at a related feature from <code>&amp;mut</code> pointers.  But couldn&#39;t any <code>unsafe</code> block potentially alias?  If I write an <code>unsafe</code> block is it up to me to make sure I don&#39;t create an aliasing reference or dereference anything that aliases a <code>Cell</code> somewhere?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 4, "creation_date": 1489228229, "post_id": 30276135, "comment_id": 72586492, "body": "How it disallows aliasing: It doesn&#39;t let you get a reference (thus no pointer at all) to the value <b>in</b> the Cell. The last question is easy to answer: Yes, it is up to you, unsafe blocks are an explicit \u201ctrust the programmer\u201d escape hatch. As the saying goes <code>unsafe</code> blocks are not used to break Rust&#39;s invariants, but to uphold them manually."}, {"owner": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 1, "creation_date": 1489257458, "post_id": 30276135, "comment_id": 72596073, "body": "Is it just me or is that particular facet of the onus of <code>unsafe</code> blocks really subtle?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 1, "creation_date": 1489262823, "post_id": 30276135, "comment_id": 72597780, "body": "There are many reasons to avoid <code>unsafe</code> at all costs. You put yourself in position of responsibility for one, and another good reason is that the work to formalize the requirements on unsafe code blocks is not yet complete! It&#39;s a trust the programmer mode, in a language where we usually want the compiler to check our work."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 13359, "user_id": 489590, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e16b3d117fa188c4dbdafb8dc27a4df0?s=128&d=identicon&r=PG&f=1", "display_name": "Brian Cain", "link": "https://stackoverflow.com/users/489590/brian-cain"}, "edited": false, "score": 1, "creation_date": 1489262913, "post_id": 30276135, "comment_id": 72597803, "body": "Note that aliasing is normally reasoned about in terms of writing through one pointer while having another pointer that assumes the pointee doesn&#39;t change. Just pointer equality without any writes is not what we think of."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 21, "last_activity_date": 1530019540, "last_edit_date": 1530019540, "creation_date": 1431782170, "answer_id": 30276135, "question_id": 30275982, "link": "https://stackoverflow.com/questions/30275982/when-i-can-use-either-cell-or-refcell-which-should-i-choose/30276135#30276135", "title": "When I can use either Cell or RefCell, which should I choose?", "body": "<p>You should use <code>Cell</code>, if you can.</p>\n\n<p><code>Cell</code> uses no runtime checking at all. All it does is an encapsulation that disallows aliasing and tells the compiler that it is an internally mutable slot. In most cases, it should compile to code that is exactly the same as if the type without cell wrapping was there.</p>\n\n<p>By comparison, <code>RefCell</code> uses a simple usage counter to check borrowing vs. mutable borrowing at runtime, and that check can lead to a panic at runtime if you violate for example the exclusivity of mutable borrowing. The possible panic can be an impediment to optimization.</p>\n\n<p>There is at least one more difference. A <code>Cell</code> will never let you get a pointer to the stored value itself. So, if you need that, a <code>RefCell</code> is the only choice.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1431783137, "post_id": 30276150, "comment_id": 48651264, "body": "You can get value semantics with <code>RefCell</code> though: clone the initial state, work on it, and write back the modified state into the cell at the end."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1431795315, "post_id": 30276150, "comment_id": 48655120, "body": "@MatthieuM. but you cannot get reference semantics with <code>Cell</code>, correct?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1431799144, "post_id": 30276150, "comment_id": 48656359, "body": "@Shepmaster: Well, you can have references to the <code>Cell</code>. If you want a reference to the value you can use its <code>UnsafeCell</code> constituent, and the <code>UnsafeCell</code> can give you a pointer to the reference value... but it&#39;s unsafe (as per the name). So, no, <code>Cell</code> is not meant for manipulating references; it would not be safe otherwise, as it breaks out of the borrowing checks."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1431800442, "post_id": 30276150, "comment_id": 48656691, "body": "@MatthieuM. Indeed, <code>RefCell</code> allows you to get value semantics on data that is only <code>Clone</code> and not <code>Copy</code>, <i>as long as it is not borrowed elsewhere</i>. However, it also allows you to <i>force</i> reference semantics on <code>Copy</code> data, which was my point, as the question was supposing the type is <code>Copy</code>."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 37, "last_activity_date": 1431782276, "creation_date": 1431782276, "answer_id": 30276150, "question_id": 30275982, "link": "https://stackoverflow.com/questions/30275982/when-i-can-use-either-cell-or-refcell-which-should-i-choose/30276150#30276150", "title": "When I can use either Cell or RefCell, which should I choose?", "body": "<p>I think it is important to take into account the other semantic differences between <code>Cell</code> and <code>RefCell</code>:</p>\n\n<ul>\n<li><code>Cell</code> provides you values, <code>RefCell</code> with references</li>\n<li><code>Cell</code> never panics, <code>RefCell</code> can panic</li>\n</ul>\n\n<p>Let us imagine a situation where these differences matter:</p>\n\n<pre><code>let cell = Cell::new(foo);\n{\n    let mut value = cell.get();\n    // do some heavy processing on value\n    cell.set(value);\n}\n</code></pre>\n\n<p>In this case, if we imagine some complex workflow with a lot of callback and that <code>cell</code> is part of a global state, it is possible that the contents of <code>cell</code> are modified as a side effect of the \"heavy processing\", and these potential changes will be lost when <code>value</code> is written back in <code>cell</code>.</p>\n\n<p>On the other hand, a similar code using <code>RefCell</code>:</p>\n\n<pre><code>let cell = RefCell::new(foo);\n{\n    let mut_ref = cell.borrow_mut().unwrap();\n    // do some heavy processing on mut_ref\n}\n</code></pre>\n\n<p>In this case, any modification of <code>cell</code> as a side-effect of the \"heavy processing\" is forbidden, and would result into a panic. You thus are certain that the value of <code>cell</code> will not change without using <code>mut_ref</code></p>\n\n<p>I would decide which to use depending of the semantics of the value it holds, rather than simply the <code>Copy</code> trait. If both are acceptable, then <code>Cell</code> is lighter and safer than the other, and thus would be preferable.</p>\n"}, {"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 16, "last_activity_date": 1544192463, "last_edit_date": 1592644375, "creation_date": 1544192463, "answer_id": 53671414, "question_id": 30275982, "link": "https://stackoverflow.com/questions/30275982/when-i-can-use-either-cell-or-refcell-which-should-i-choose/53671414#53671414", "title": "When I can use either Cell or RefCell, which should I choose?", "body": "<p><strong>TL; DR</strong>: <code>Cell</code> when you can.</p>\n<hr />\n<p><strong>Long answer</strong>: <code>Cell</code> and <code>RefCell</code> have a similar name because they both permit the interior mutability, but they have a different purpose:</p>\n<h1><code>Cell</code></h1>\n<p>It is a wrapper around <code>T</code> that forbids to share it multiple times at once: you cannot borrow immutably the inner data. This wrapper does not have any overhead, but because of this limitation, you can only do the following operations:</p>\n<ul>\n<li>Set the inner value,</li>\n<li>Swap the inner value with something else,</li>\n<li>Copy the inner value (only when <code>T</code> is <code>Copy</code>able, thus).</li>\n</ul>\n<p>Thanks to its limitation, the <code>Cell</code> behaves like an exclusive borrow, <em>aka</em> a <code>&amp;mut T</code>. Therefore, it is always safe to change the inner value. To summarize:</p>\n<ul>\n<li>Advantage: no overhead</li>\n<li>Advantage: always mutable</li>\n<li>Limitation: some operations are impossible</li>\n</ul>\n<h1>\u00a0<code>RefCell</code></h1>\n<p>It is a wrapper around <code>T</code> that &quot;removes&quot; the compile-time borrow-checks: the operations that modify the inner value take a shared reference <code>&amp;self</code> to the <code>RefCell</code>. Normally, this would be unsafe, but each modifying operation firstly verify that the value was not previously borrowed. The exclusivity of a mutable borrow is verified at runtime.</p>\n<p>To summarize:</p>\n<ul>\n<li>Limitation: a very small overhead</li>\n<li>Limitation: not always mutable, if it was previously mutably borrowed (beware, some operations may panic in this case)</li>\n<li>Advantage: you are not limited with the operations that you can do</li>\n</ul>\n<h1>What should you chose?</h1>\n<p>The advantages and limitations are a mirror of each other. The answer to your question is: if the limitations of <code>Cell</code> do not bother you, use it, because beside this, it has only advantages. However, if you want a more flexible interior mutability, use <code>RefCell</code>.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10520, "favorite_count": 5, "accepted_answer_id": 30276150, "answer_count": 3, "score": 36, "last_activity_date": 1544192463, "creation_date": 1431781313, "question_id": 30275982, "link": "https://stackoverflow.com/questions/30275982/when-i-can-use-either-cell-or-refcell-which-should-i-choose", "title": "When I can use either Cell or RefCell, which should I choose?", "body": "<p>From the <a href=\"http://doc.rust-lang.org/std/cell/index.html\" rel=\"noreferrer\"><code>std::cell</code> documentation</a>, I see that <code>Cell</code> is \"only compatible with types that implement <code>Copy</code>\". This means I must use <code>RefCell</code> for non-<code>Copy</code> types.</p>\n\n<p>When I <em>do</em> have a <code>Copy</code> type, is there a benefit to using one type of cell over another? I assume the answer is \"yes\", because otherwise both types wouldn't exist! What are the benefits and tradeoffs of using one type over the other?</p>\n\n<p>Here's a silly, made-up example that uses both <code>Cell</code> and <code>RefCell</code> to accomplish the same goal:</p>\n\n<pre><code>use std::cell::{Cell,RefCell};\n\nstruct ThingWithCell {\n    counter: Cell&lt;u8&gt;,\n}\n\nimpl ThingWithCell {\n    fn new() -&gt; ThingWithCell {\n        ThingWithCell { counter: Cell::new(0) }\n    }\n\n    fn increment(&amp;self) {\n        self.counter.set(self.counter.get() + 1);\n    }\n\n    fn count(&amp;self) -&gt; u8 { self.counter.get() }\n}\n\nstruct ThingWithRefCell {\n    counter: RefCell&lt;u8&gt;,\n}\n\nimpl ThingWithRefCell {\n    fn new() -&gt; ThingWithRefCell {\n        ThingWithRefCell { counter: RefCell::new(0) }\n    }\n\n    fn increment(&amp;self) {\n        let mut counter = self.counter.borrow_mut();\n        *counter = *counter + 1;\n    }\n\n    fn count(&amp;self) -&gt; u8 { *self.counter.borrow_mut() }\n}\n\n\nfn main() {\n    let cell = ThingWithCell::new();\n    cell.increment();\n    println!(\"{}\", cell.count());\n\n    let cell = ThingWithRefCell::new();\n    cell.increment();\n    println!(\"{}\", cell.count());\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431783030, "post_id": 30274091, "comment_id": 48651221, "body": "There is currently a set of RFCs toward getting downcasting (in one way or another) in Rust. It will be possible one day, but not for now."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 8, "last_activity_date": 1431772904, "creation_date": 1431772904, "answer_id": 30274635, "question_id": 30274091, "link": "https://stackoverflow.com/questions/30274091/is-it-possible-to-check-if-an-object-implements-a-trait-at-runtime/30274635#30274635", "title": "Is it possible to check if an object implements a trait at runtime?", "body": "<p>As of 1.0, no.  Rust doesn't provide any dynamic downcasting support, with the exception of <code>Any</code>; however, that only allows you to downcast to a value's specific concrete type, not to arbitrary traits that said concrete type implements.</p>\n\n<p>I <em>believe</em> you could implement such casting manually, but that would require unsafe code that would be easy to get wrong; not the sort of thing I want to try and summarise in an SO answer.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 10, "last_activity_date": 1431779833, "last_edit_date": 1431779833, "creation_date": 1431779462, "answer_id": 30275713, "question_id": 30274091, "link": "https://stackoverflow.com/questions/30274091/is-it-possible-to-check-if-an-object-implements-a-trait-at-runtime/30275713#30275713", "title": "Is it possible to check if an object implements a trait at runtime?", "body": "<p>It is not possible to do this in Rust at present, nor is it likely to ever become possible; it is, however, possible to construct similar abstractions as part of your trait:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Actor {\n    fn health(&amp;self) -&gt; Option&lt;&amp;Health&gt;;\n}\n\ntrait Health { }\n\nimpl Actor for Monster {\n    fn health(&amp;self) -&gt; Option&lt;&amp;Health&gt; { Some(self) }\n}\n\nimpl Health for Monster { }\n\nimpl Actor for Plant {\n    fn health(&amp;self) -&gt; Option&lt;&amp;Health&gt; { None }\n}\n</code></pre>\n\n<p>Rust is expected to get negative bounds at some point; when that comes, you\u2019ll be able to have something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait MaybeImplements&lt;Trait: ?Sized&gt; {\n    fn as_trait_ref(&amp;self) -&gt; Option&lt;&amp;Trait&gt;;\n}\n\nmacro_rules! impl_maybe_implements {\n    ($trait_:ident) =&gt; {\n        impl&lt;T: $trait_&gt; MaybeImplements&lt;$trait_&gt; for T {\n            fn as_trait_ref(&amp;self) -&gt; Option&lt;&amp;$trait_&gt; {\n                Some(self)\n            }\n        }\n\n        impl&lt;T: !$trait_&gt; MaybeImplements&lt;$trait_&gt; for T {\n            fn as_trait_ref(&amp;self) -&gt; Option&lt;&amp;$trait_&gt; {\n                None\n            }\n        }\n    }\n}\n\nimpl_maybe_implements!(Health);\n\ntrait Actor: MaybeImplements&lt;Health&gt; {\n}\n\nlet health: Option&lt;&amp;Health&gt; = actor.as_trait_ref();\n</code></pre>\n\n<p>This will reduce the boilerplate from every implementation of a trait to just one per trait, but that stage is not yet upon us. Still, you could take the middle ground of the two approaches:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait MaybeImplements&lt;Trait: ?Sized&gt; {\n    fn as_trait_ref(&amp;self) -&gt; Option&lt;&amp;Trait&gt;;\n}\n\nmacro_rules! register_impl {\n    ($trait_:ident for $ty:ty) =&gt; {\n        impl MaybeImplements&lt;$trait_&gt; for $ty {\n            fn as_trait_ref(&amp;self) -&gt; Option&lt;$trait_&gt; {\n                Some(self)\n            }\n        }\n    }\n\n    (!$trait_:ident for $ty:ty) =&gt; {\n        impl MaybeImplements&lt;$trait_&gt; for $ty {\n            fn as_trait_ref(&amp;self) -&gt; Option&lt;$trait_&gt; {\n                None\n            }\n        }\n    }\n}\n\nregister_impl!(Health for Monster);\nregister_impl!(!Health for Plant);\n</code></pre>\n\n<p>Play around with different ways of handling it until you find something you like! The possibilities are limitless! <sub><sup>(Because Rust is Turing\u2010complete.)</sup></sub></p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7012, "favorite_count": 3, "answer_count": 2, "score": 15, "last_activity_date": 1431779833, "creation_date": 1431769274, "question_id": 30274091, "link": "https://stackoverflow.com/questions/30274091/is-it-possible-to-check-if-an-object-implements-a-trait-at-runtime", "title": "Is it possible to check if an object implements a trait at runtime?", "body": "<pre><code>trait Actor{\n    fn actor(&amp;self);\n}\ntrait Health{\n    fn health(&amp;self);\n}\nstruct Plant;\nimpl Actor for Plant{\n    fn actor(&amp;self){\n        println!(\"Plant Actor\");\n    }\n}\nstruct Monster{\n    health: f32\n}\nimpl Actor for Monster{\n    fn actor(&amp;self){\n        println!(\"Monster Actor\");\n    }\n}\nimpl Health for Monster{\n    fn health(&amp;self){\n        println!(\"Health: {}\",self.health);\n    }\n}\nfn main() {\n    let plant = Box::new(Plant);\n    let monster = Box::new(Monster{health: 100f32});\n\n    let mut actors : Vec&lt;Box&lt;Actor&gt;&gt; = Vec::new();\n    actors.push(plant);\n    actors.push(monster);\n\n    for a in &amp;actors{\n        a.actor();\n        /* Would this be possible?\n        let health = a.get_trait_object::&lt;Health&gt;();\n        match health{\n            Some(h) =&gt; {h.health();},\n            None =&gt; {println!(\"Has no Health trait\");}\n        }\n        */\n    }\n}\n</code></pre>\n\n<p>I am wondering if something like this could be possible?</p>\n\n<pre><code>let health = a.get_trait_object::&lt;Health&gt;();\nmatch health{\n    Some(h) =&gt; {h.health();},\n    None =&gt; {println!(\"Has no Health trait\");}\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1431778370, "post_id": 30274925, "comment_id": 48649727, "body": "Interesting. So in the first example, if the value is fixed at creation the compiler also takes the assignment in the method call into account to determine &#39;a. But the &#39;a still has to be at least as long as the lifetime of f."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1431778679, "post_id": 30274925, "comment_id": 48649825, "body": "@JonasTepe Yes, that&#39;s it."}, {"owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "edited": false, "score": 0, "creation_date": 1431779044, "post_id": 30274925, "comment_id": 48649959, "body": "And from that, the second example also makes perfect sense now. Thank you very much."}, {"owner": {"reputation": 3518, "user_id": 1080523, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/608ae546674d9a64d4ec87aa465a7795?s=128&d=identicon&r=PG", "display_name": "rethab", "link": "https://stackoverflow.com/users/1080523/rethab"}, "edited": false, "score": 0, "creation_date": 1608198118, "post_id": 30274925, "comment_id": 115511451, "body": "@Levans the example now compiles"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 6, "last_activity_date": 1506282965, "last_edit_date": 1506282965, "creation_date": 1431774781, "answer_id": 30274925, "question_id": 30273850, "link": "https://stackoverflow.com/questions/30273850/linking-the-lifetimes-of-self-and-a-reference-in-method/30274925#30274925", "title": "Linking the lifetimes of self and a reference in method", "body": "<blockquote>\n  <p>In the call to the method <code>set</code> the lifetime parameter on the impl block is used and the lifetime of the value of <code>w</code> is filled in for <code>'a</code> in the method signature.</p>\n</blockquote>\n\n<p>No. The value of the lifetime parameter <code>'a</code> is fixed at the creation of the <code>Foo</code> struct, and will never change as it is part of its type.</p>\n\n<p>In your case, the compiler actually choses for <code>'a</code> a value that is compatible with both the lifetimes of <code>v</code> and <code>w</code>. If that was not possible, it would fail, such as in this example:</p>\n\n<pre><code>fn main() {\n    let v = 5;\n    let mut f = Foo { x: &amp;v };\n\n    println!(\"f is {:?}\", f);\n    let w = 7;\n    f.set(&amp;w);\n\n    println!(\"now f is {:?}\", f);\n}\n</code></pre>\n\n<p>which outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `w` does not live long enough\n  --&gt; src/main.rs:21:1\n   |\n18 |     f.set(&amp;w);\n   |            - borrow occurs here\n...\n21 | }\n   | ^ `w` dropped here while still borrowed\n   |\n   = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>Exactly because the <code>'a</code> lifetime imposed by <code>v</code> is not compatible with the shorter lifetime of <code>w</code>.</p>\n\n<p>In the second example, by forcing the lifetime of <code>self</code> to be <code>'a</code> as well, you are tying the mutable borrow to the lifetime <code>'a</code> as well, and thus the borrow ends when all items of lifetime <code>'a</code> goes out of scope, namely <code>v</code> and <code>w</code>.</p>\n"}], "owner": {"reputation": 2922, "user_id": 929981, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/66Mz4.png?s=128&g=1", "display_name": "jtepe", "link": "https://stackoverflow.com/users/929981/jtepe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1534, "favorite_count": 3, "accepted_answer_id": 30274925, "answer_count": 1, "score": 12, "last_activity_date": 1506282965, "creation_date": 1431767508, "last_edit_date": 1506282890, "question_id": 30273850, "link": "https://stackoverflow.com/questions/30273850/linking-the-lifetimes-of-self-and-a-reference-in-method", "title": "Linking the lifetimes of self and a reference in method", "body": "<p>I have <a href=\"https://play.rust-lang.org/?gist=51474ebe468347034d0cbb930b619c9d&amp;version=nightly\" rel=\"noreferrer\">this piece of code</a>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Foo&lt;'a&gt; {\n    x: &amp;'a i32,\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn set(&amp;mut self, r: &amp;'a i32) {\n        self.x = r;\n    }\n}\n\nfn main() {\n    let v = 5;\n    let w = 7;\n    let mut f = Foo { x: &amp;v };\n\n    println!(\"f is {:?}\", f);\n\n    f.set(&amp;w);\n\n    println!(\"now f is {:?}\", f);\n}\n</code></pre>\n\n<p>My understanding is that in the first borrow of the value of <code>v</code>, the generic lifetime parameter <code>'a</code> on the struct declaration is filled in with the lifetime of the value of <code>v</code>. This means that the resulting <code>Foo</code> object must not live longer than this <code>'a</code> lifetime or that the value of <code>v</code> must live at least as long as the <code>Foo</code> object.</p>\n\n<p>In the call to the method <code>set</code>, the lifetime parameter on the <code>impl</code> block is used and the lifetime of the value of <code>w</code> is filled in for <code>'a</code> in the method signature. <code>&amp;mut self</code> is assigned a different lifetime by the compiler, which is the lifetime of <code>f</code> (the <code>Foo</code> object). If I switched the order of the bindings of <code>w</code> and <code>f</code> in the <code>main</code> function, this would result in an error.</p>\n\n<p>I wondered what would happen if I annotated the <code>&amp;mut self</code> reference with the same lifetime parameter <code>'a</code> as <code>r</code> in the <code>set</code> method:</p>\n\n<pre><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn set(&amp;'a mut self, r: &amp;'a i32) {\n        self.x = r;\n    }\n}\n</code></pre>\n\n<p>Which results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:21:31\n   |\n19 |     f.set(&amp;w);\n   |     - mutable borrow occurs here\n20 | \n21 |     println!(\"now f is {:?}\", f);\n   |                               ^ immutable borrow occurs here\n22 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>In contrast to the example above, <code>f</code> is still considered mutably borrowed by the time the second println! is called, so it cannot be borrowed simultaneously as immutable. </p>\n\n<p>How did this come to be?</p>\n\n<p>By not leaving off the lifetime annotation the compiler filled one in for me for <code>&amp;mut self</code> in the first example. This happens by the rules of lifetime elision. However by explicitly setting it to <code>'a</code> in the second example I linked the lifetimes of the value of <code>f</code> and the value of <code>w</code>.</p>\n\n<p>Is <code>f</code> considered borrowed by itself somehow?</p>\n\n<p>And if so, what is the scope of the borrow? Is it min(lifetime of <code>f</code>, lifetime of <code>w</code>) -> lifetime of <code>f</code>?</p>\n\n<p>I assume I haven't fully understood the <code>&amp;mut self</code> reference in the function call yet. I mean, the function returns, but <code>f</code> is still considered to be borrowed.</p>\n\n<p>I am trying to fully understand lifetimes. I am primarily looking for corrective feedback on my understanding of the concepts. I am grateful for every bit of advice and further clarification.</p>\n"}, {"tags": ["string", "substring", "rust"], "comments": [{"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 3, "creation_date": 1431761581, "post_id": 30272751, "comment_id": 48645133, "body": "For those who wonder: in this case, it is not an optimizations issue. Even with optimizations turned on the rust version is still very long to run."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431763980, "post_id": 30272751, "comment_id": 48645712, "body": "I <i>think</i> it could be that <code>contains</code> for strings takes additional actions to handle UTF-8 properly, however, when I went to check the speed of <code>contains</code> for regular slices I found out that Rust does not even have one o_O. My naive implementation still was very slow."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1431764576, "post_id": 30272751, "comment_id": 48645850, "body": "Tried this for myself; Ruby took 5s, Rust took <i>7 minutes</i>.  A quick squiz through Rust&#39;s implementation (see <a href=\"https://github.com/rust-lang/rust/blob/1.0.0/src/libcore/str/pattern.rs#L390\" rel=\"nofollow noreferrer\"><code>libcore&#47;str&#47;pattern.rs</code></a>) makes it look like Rust&#39;s searcher is <i>completely naive</i>.  If the Ruby implementation is doing anything even remotely clever, it wouldn&#39;t be surprising at all that Rust is so much slower.  Either way, looks worthy of a performance issue being filed."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431764713, "post_id": 30272751, "comment_id": 48645890, "body": "BTW, python version is also as fast as Ruby."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431764993, "post_id": 30272751, "comment_id": 48645952, "body": "And Java version is even faster, probably due to JIT optimizations (first few thousands checks are slower, others are blazingly fast). Indeed, it seems Rust std library could be optimized."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 9, "creation_date": 1431765209, "post_id": 30272751, "comment_id": 48646003, "body": "Filed an issue: <a href=\"https://github.com/rust-lang/rust/issues/25483\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/25483</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431781227, "post_id": 30272751, "comment_id": 48650675, "body": "Is the misspelling of <i>haystack</i> intentional ?"}, {"owner": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431812470, "post_id": 30272751, "comment_id": 48660289, "body": "@MatthieuM. Nope, fixed. :)"}], "answers": [{"comments": [{"owner": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "edited": false, "score": 0, "creation_date": 1435752160, "post_id": 31148276, "comment_id": 50330003, "body": "What would the Rust performance be if both the needle and haystack were random data, compared to Ruby? Is there something to be gained in that case by Rust&#39;s overall design?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "edited": false, "score": 0, "creation_date": 1435756196, "post_id": 31148276, "comment_id": 50332980, "body": "I think both should search for random needles much slower than the &quot;bb..&quot; in &quot;aa..&quot; query. I think they are on a level playing field. Note that the new string search in Rust is still written in bounds-checked safe Rust, and it seems to be very competitive anyway."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "edited": false, "score": 0, "creation_date": 1435756233, "post_id": 31148276, "comment_id": 50333013, "body": "I&#39;m interested if you do new performance comparisons between rust and ruby, using this new impl."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "edited": false, "score": 0, "creation_date": 1435756432, "post_id": 31148276, "comment_id": 50333192, "body": "By much slower I mean that on my laptop, the &quot;bb..&quot; in &quot;aa..&quot; query would bench at rejecting 30 GB of haystack per second (since it reads only a fraction of the bytes), while a more normal string search would bench at 300 MB haystack per second."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 6, "last_activity_date": 1435701904, "last_edit_date": 1435701904, "creation_date": 1435697511, "answer_id": 31148276, "question_id": 30272751, "link": "https://stackoverflow.com/questions/30272751/generating-strings-and-identifying-substrings-is-very-slow/31148276#31148276", "title": "Generating strings and identifying substrings is very slow", "body": "<p>A fix for this issue was merged today. That means it should be part of the next nightly, and will be expected to be released in Rust 1.3. The fix revived the <a href=\"http://www-igm.univ-mlv.fr/~lecroq/string/node26.html\">Two-way substring search</a> implementation that Rust used to have and adapted it to the new <a href=\"http://doc.rust-lang.org/nightly/std/str/pattern/trait.Pattern.html\">Pattern API</a> in the standard library.</p>\n\n<p>The Two-way algorithm is a good match for Rust's libcore since it is a linear time substring search algorithm that uses O(1) space and needs no dynamic allocation.</p>\n\n<p>The particular implementation contains a simple addition that will reject this particular query in the question extremely quickly (and no, it was not written because of this question, it was part of the old code too).</p>\n\n<p>During setup the searcher computes a kind of fingerprint for the needle: For each byte in the needle, take its low 6 bits, which is a number 0-63, then set the corresponding bit in the <code>u64</code> variable <code>byteset</code>.</p>\n\n<pre><code>let byteset = needle.iter().fold(0, |a, &amp;b| (1 &lt;&lt; ((b &amp; 0x3f) as usize)) | a);\n</code></pre>\n\n<p>Since the needle only contains 'b's, the value of byteset will have only the 34th bit set (<code>98 &amp; 63 == 34</code>).</p>\n\n<p>Now we can test any byte whether it can possibly be part of the needle or not. If its corresponding bit isn't set in <code>byteset</code>, the needle cannot match. Each byte we test in the haystack in this case will be 'a' (<code>97 &amp; 63 == 33</code>), and it can't match. So the algorithm will read a single byte, reject it, and then skip the needle's length.</p>\n\n<pre><code>fn byteset_contains(&amp;self, byte: u8) -&gt; bool {\n    (self.byteset &gt;&gt; ((byte &amp; 0x3f) as usize)) &amp; 1 != 0\n}\n\n// Quickly skip by large portions unrelated to our substring\nif !self.byteset_contains(haystack[self.position + needle.len() - 1]) {\n    self.position += needle.len();\n    continue 'search;\n}\n</code></pre>\n\n<p><a href=\"https://github.com/rust-lang/rust/blob/7fc0675f35b78d86ad2decd9fe22afd238eda274/src/libcore/str/pattern.rs#L864-L889\">From <code>libcore/str/pattern.rs</code> in rust-lang/rust</a></p>\n"}], "owner": {"reputation": 345, "user_id": 1889337, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1cf962e3407c13a8f3caa30ba8c1ed80?s=128&d=identicon&r=PG", "display_name": "Tasos Laskos", "link": "https://stackoverflow.com/users/1889337/tasos-laskos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 545, "favorite_count": 0, "accepted_answer_id": 31148276, "answer_count": 1, "score": 13, "last_activity_date": 1437303616, "creation_date": 1431759422, "last_edit_date": 1437303616, "question_id": 30272751, "link": "https://stackoverflow.com/questions/30272751/generating-strings-and-identifying-substrings-is-very-slow", "title": "Generating strings and identifying substrings is very slow", "body": "<p>I'd like to benchmark certain operations in Rust, but I seem to be having some trouble:</p>\n\n<pre><code>fn main(){\n\n    let needle   = (0..100).map(|_| \"b\").collect::&lt;String&gt;();\n    let haystack = (0..100_000).map(|_| \"a\").collect::&lt;String&gt;();\n\n    println!(\"Data ready.\");\n\n    for _ in 0..1_000_000 {\n        if haystack.contains( &amp;needle ) {\n            // Stuff...\n        }\n    }\n\n}\n</code></pre>\n\n<p>The above takes a very long time to complete while the same operation in Ruby finishes in around 4.5 seconds:</p>\n\n<pre><code>needle   = 'b' * 100\nhaystack = 'a' * 100_000\n\nputs 'Data ready.'\n\n1_000_000.times do\n    haystack.include? needle\nend\n</code></pre>\n\n<p>I can't help but think that I'm doing something fundamentally wrong.\nWhat would be the proper way to do this in Rust?</p>\n\n<pre><code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)\nruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 17, "last_activity_date": 1431788672, "last_edit_date": 1431788672, "creation_date": 1431761164, "answer_id": 30272974, "question_id": 30272673, "link": "https://stackoverflow.com/questions/30272673/how-to-get-subslices/30272974#30272974", "title": "How to get subslices?", "body": "<p>You use slicing syntax for that:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let data: &amp;[u8] = b\"12345678\";\n    println!(\"{:?} - {:?}\", &amp;data[..data.len()/2], &amp;data[data.len()/2..]);\n}\n</code></pre>\n\n<p>(try it <a href=\"http://is.gd/9q1DCD\">here</a>)</p>\n\n<p>The general syntax is</p>\n\n<pre><code>&amp;slice[start_idx..end_idx]\n</code></pre>\n\n<p>which gives a slice derived from <code>slice</code>, starting at <code>start_idx</code> and ending at <code>end_idx-1</code> (that is, item at the right index is not included). Either index could be omitted (even both), which would mean zero or slice length, correspondingly.</p>\n\n<p>Note that if you want to split a slice at some position into two slices, it is often better to use <code>split_at()</code> method:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let data = b\"12345678\";\nlet (left, right): (&amp;[u8], &amp;[u8]) = data.split_at(4);\n</code></pre>\n\n<p>Moreover, this is the only way to obtain two mutable slices out of another mutable slice:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut data: Vec&lt;u8&gt; = vec![1, 2, 3, 4, 5, 6, 7, 8];\nlet data_slice: &amp;mut [u8] = &amp;mut data[..];\nlet (left, right): (&amp;mut [u8], &amp;mut [u8]) = data_slice.split_at_mut(4);\n</code></pre>\n\n<p>However, these basic things are explained in <a href=\"http://doc.rust-lang.org/stable/book/\">the official book</a> on Rust. You should start from there if you want to learn Rust.</p>\n"}], "owner": {"reputation": 1479, "user_id": 4673683, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/106a6b52825462b10ef0904466351c00?s=128&d=identicon&r=PG", "display_name": "user19018", "link": "https://stackoverflow.com/users/4673683/user19018"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6717, "favorite_count": 0, "accepted_answer_id": 30272974, "answer_count": 1, "score": 10, "last_activity_date": 1492101889, "creation_date": 1431758807, "last_edit_date": 1492101889, "question_id": 30272673, "link": "https://stackoverflow.com/questions/30272673/how-to-get-subslices", "title": "How to get subslices?", "body": "<p>I have a variable <code>a</code> of type <code>&amp;[T]</code>; how can I get a reference to a subslice of <code>a</code>? </p>\n\n<p>As a concrete example, I'd like to get the first and second halves of <code>a</code>, provided <code>a.len()</code> is even.</p>\n"}, {"tags": ["macos", "rust"], "answers": [{"tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 3, "last_activity_date": 1431758195, "creation_date": 1431758195, "answer_id": 30272613, "question_id": 30271131, "link": "https://stackoverflow.com/questions/30271131/where-does-the-rust-macos-pkg-installer-install-to/30272613#30272613", "title": "Where does the Rust macOS pkg installer install to?", "body": "<p>I'm not sure of this, but I think you need to clone the source seperately. RustDT uses racer (I think) which needs uncompiled source code.</p>\n\n<p>Cloning <a href=\"http://github.com/rust-lang/rust/tree/stable\" rel=\"nofollow\">this branch on github</a> and pointing to it should do the trick. No need to build.</p>\n"}, {"tags": [], "owner": {"reputation": 226, "user_id": 2505233, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c31fd9bdfb590d7023076b8534e2eea1?s=128&d=identicon&r=PG", "display_name": "Dzmitry Misiuk", "link": "https://stackoverflow.com/users/2505233/dzmitry-misiuk"}, "is_accepted": true, "score": 6, "last_activity_date": 1506775038, "last_edit_date": 1506775038, "creation_date": 1431771340, "answer_id": 30274392, "question_id": 30271131, "link": "https://stackoverflow.com/questions/30271131/where-does-the-rust-macos-pkg-installer-install-to/30274392#30274392", "title": "Where does the Rust macOS pkg installer install to?", "body": "<p>Rust executable binaries (<code>rustc</code>, <code>cargo</code>, <code>rustdoc</code>) are installed to <code>/usr/local/bin</code> by default with the macOS installer. Rust libraries are installed to <code>/usr/local/lib/rustlib/</code>.</p>\n\n<p>To use RustDT, you should install Racer <a href=\"https://github.com/phildawes/racer\" rel=\"nofollow noreferrer\">following the instructions from the repository</a>.</p>\n\n<p>After Racer is installed, you should configure the path to <code>rustc</code>, <code>racer</code>, and the source files for Rust in the RustDT preferences. </p>\n"}, {"tags": [], "owner": {"reputation": 1805, "user_id": 5865712, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-Y5Rum91W6os/AAAAAAAAAAI/AAAAAAAAAGI/J3TK0_uwiHw/photo.jpg?sz=128", "display_name": "Chris Sharp", "link": "https://stackoverflow.com/users/5865712/chris-sharp"}, "is_accepted": false, "score": 1, "last_activity_date": 1506775084, "last_edit_date": 1506775084, "creation_date": 1506740606, "answer_id": 46499184, "question_id": 30271131, "link": "https://stackoverflow.com/questions/30271131/where-does-the-rust-macos-pkg-installer-install-to/46499184#46499184", "title": "Where does the Rust macOS pkg installer install to?", "body": "<p>The accepted answer is outdated. As of 9/29/2017 the following works for RustDT on a MacBook Pro running Sierra and using Eclipse Neon.</p>\n\n<p>Install the configuration tools <a href=\"https://github.com/RustDT/RustDT/blob/latest/documentation/UserGuide.md#configuration\" rel=\"nofollow noreferrer\">per this guide</a>. As you install each package, the last line of output before your terminal exits the process is the directory you need to use for the Rust preferences in RustDT. Take note of these. </p>\n\n<p>(I used the nightly build installer because there was a compiler error when installing 'Racer'. Your experience may vary.)</p>\n\n<p>In the Rust preferences, configure as follows and Eclipse will let you know if you're wrong. If you took notes on your installation locations you should be fine. Note: I've blotted out my username on my computer because it's a work machine. It's <code>/Users/your_username/path</code></p>\n\n<p><a href=\"https://i.stack.imgur.com/17SJj.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/17SJj.png\" alt=\"enter image description here\"></a></p>\n"}], "owner": {"reputation": 41627, "user_id": 239168, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/7a3ea02e7284280e5df3d01a28a26af5?s=128&d=identicon&r=PG", "display_name": "Eran Medan", "link": "https://stackoverflow.com/users/239168/eran-medan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3575, "favorite_count": 0, "accepted_answer_id": 30274392, "answer_count": 3, "score": 5, "last_activity_date": 1506775084, "creation_date": 1431742327, "last_edit_date": 1506775019, "question_id": 30271131, "link": "https://stackoverflow.com/questions/30271131/where-does-the-rust-macos-pkg-installer-install-to", "title": "Where does the Rust macOS pkg installer install to?", "body": "<p>I want to try the Eclipse-based Rust IDE <a href=\"https://github.com/RustDT/RustDT\" rel=\"nofollow\">RustDT</a> and it asks for the Rust installation and source directories. I assume the source directory is relative to the installation directory, but I have no clue where it is installed.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 3, "last_activity_date": 1431733816, "last_edit_date": 1431733816, "creation_date": 1431733467, "answer_id": 30270281, "question_id": 30270193, "link": "https://stackoverflow.com/questions/30270193/stdfsfile-documentation-try-e0308/30270281#30270281", "title": "std::fs::File + documentation + try! = E0308", "body": "<p>Let's have a look at the <code>try!()</code> macro:</p>\n\n<pre><code>macro_rules! try {\n    ($expr:expr) =&gt; (match $expr {\n        $crate::result::Result::Ok(val) =&gt; val,\n        $crate::result::Result::Err(err) =&gt; {\n            return $crate::result::Result::Err($crate::convert::From::from(err))\n        }\n    })\n}\n</code></pre>\n\n<p>As you can see, either <code>try!()</code> yields <code>val</code>  as an expression, either it returns an <code>Err</code> out of the function. So after the macro is processed, the unwrapped code looks like:</p>\n\n<pre><code>fn main() {\n    let mut f = (match File::create(\"foo\") {\n        Ok(val) =&gt; val,\n        Err(err) =&gt; {\n            return Err(...)\n        }\n    })\n}\n</code></pre>\n\n<p>Hopefully the error is obvious now: <code>main()</code> should return <code>()</code>, but you return an <code>Err</code> (which is of type <code>Result&lt;File&gt;</code>).</p>\n\n<p>The moral of the story is that you use <code>try!()</code> in the wrong scenario here. It should only be used inside a function which is already designed to return a <code>Result</code>, just like you would rethrow (bubble up) an exception in C++ or Java. In your case though, you need to explicitly deal with the error -- there's no bubbling up possible. A possible solution, though not very elegant, is to use <code>.unwrap()</code> to crash the program in case of an <code>Err</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 4, "last_activity_date": 1431733677, "creation_date": 1431733677, "answer_id": 30270306, "question_id": 30270193, "link": "https://stackoverflow.com/questions/30270193/stdfsfile-documentation-try-e0308/30270306#30270306", "title": "std::fs::File + documentation + try! = E0308", "body": "<p><a href=\"https://doc.rust-lang.org/std/macro.try!.html\" rel=\"nofollow\"><code>try!</code></a> is a macro that is to be used in functions that return a <code>Result</code>. Therefore, it cannot be used in the <code>main</code> function, because it returns unit (the empty tuple).</p>\n\n<p>Look at how it expands:</p>\n\n\n\n<pre><code>fn main() {\n    let mut f = match File::create(\"foo\") {\n        Ok(val) =&gt; val,\n        Err(err) =&gt; return Err(From::from(err)),\n    };\n}\n</code></pre>\n\n<p><a href=\"http://blog.burntsushi.net/rust-error-handling/\" rel=\"nofollow\">http://blog.burntsushi.net/rust-error-handling/</a> is a good article about error handling in Rust; for simple scripts like yours probably is, using <code>Result::unwrap</code> (<code>File::create(\"foo\").unwrap()</code>) is probably reasonable.</p>\n"}], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 644, "favorite_count": 1, "accepted_answer_id": 30270306, "answer_count": 2, "score": 3, "last_activity_date": 1431754193, "creation_date": 1431732718, "last_edit_date": 1431754193, "question_id": 30270193, "link": "https://stackoverflow.com/questions/30270193/stdfsfile-documentation-try-e0308", "title": "std::fs::File + documentation + try! = E0308", "body": "<p>I want to create an empty file, so I took <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"nofollow\">an example</a> and I used today's nightly build</p>\n\n<pre><code>use std::fs::File;\nuse std::io::prelude::*;\n\nfn main() {\n    let mut f = try!(File::create(\"foo\"));\n}\n</code></pre>\n\n<p>Running <code>rustc</code> has the errors:</p>\n\n<pre><code>&lt;std macros&gt;:5:8: 6:42 error: mismatched types:\n expected `()`,\n    found `core::result::Result&lt;_, _&gt;`\n(expected (),\n    found enum `core::result::Result`) [E0308]\n&lt;std macros&gt;:5 return $ crate:: result:: Result:: Err (\n&lt;std macros&gt;:6 $ crate:: convert:: From:: from ( err ) ) } } )\n&lt;std macros&gt;:1:1: 6:48 note: in expansion of try!\nfile_io.rs:5:17: 5:42 note: expansion site\n&lt;std macros&gt;:5:8: 6:42 help: pass `--explain E0308` to see a detailed explanation\nerror: aborting due to previous error\n</code></pre>\n\n<p>If I remove <code>try!</code>, it compiles, but how I should handle errors? And why is the example not compiled as is?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1431703018, "post_id": 30262970, "comment_id": 48625965, "body": "I thought the requirement was &quot;last&quot;, but anyway it&#39;s also the case here. I found <a href=\"https://www.reddit.com/r/rust/comments/357ji5/using_structs_with_a_dst_array_member/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/357ji5/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431703501, "post_id": 30262970, "comment_id": 48626303, "body": "In Rust, <i>arrays</i> have a fixed size, known at compile time. Thus you don&#39;t want an &quot;array&quot;. <code>&amp;[T]</code> is usually called a <i>slice</i>, I don&#39;t know how to pronounce <code>[T]</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431704179, "post_id": 30262970, "comment_id": 48626746, "body": "@Shepmaster I guess that would be &quot;unsized array&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": false, "score": 12, "last_activity_date": 1431703886, "last_edit_date": 1431703886, "creation_date": 1431703578, "answer_id": 30263270, "question_id": 30262970, "link": "https://stackoverflow.com/questions/30262970/array-as-a-struct-field/30263270#30263270", "title": "Array as a struct field", "body": "<p>If you don't know the size of the list in advance, you have two choices:</p>\n\n<ol>\n<li><code>&amp;[T]</code> which is just a reference to some piece of memory that you don't own</li>\n<li><code>Vec&lt;T&gt;</code> which is <em>your own</em> storage.</li>\n</ol>\n\n<p>The correct thing here is to use a <code>Vec</code>. Why? Because you want the children list (array of <code>Rc</code>) to be actually owned by the <code>TreeNode</code>. If you used a <code>&amp;[T]</code>, it means that someone else would be keeping the list, not the <code>TreeNode</code>. With some lifetime trickery, you could write some valid code but you would have to go very far to please the compiler because the borrowed reference would have to be valid at least as long as the <code>TreeNode</code>.</p>\n\n<p>Finally, a sentence in your question shows a misunderstanding:</p>\n\n<blockquote>\n  <p>However, the structure is immutable and I do not need an overallocated Vec.</p>\n</blockquote>\n\n<p>You confuse mutability and ownership. Sure you can have an immutable Vec. It seems like you want to avoid allocating memory from the heap, but that's not possible, precisely because you don't know the size of the children list. Now if you're concerned with overallocating, you can fine-tune the vector storage with methods like <code>with_capacity()</code> and <code>shrink_to_fit()</code>.</p>\n\n<p>A final note: if you actually know the size of the list because it is fixed at compile time, you just need to use a <code>[T; n]</code> where <code>n</code> is compile-time known. But that's not the same as <code>[T]</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 1479, "user_id": 4673683, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/106a6b52825462b10ef0904466351c00?s=128&d=identicon&r=PG", "display_name": "user19018", "link": "https://stackoverflow.com/users/4673683/user19018"}, "edited": false, "score": 0, "creation_date": 1431712410, "post_id": 30263497, "comment_id": 48631703, "body": "Thanks for mentioning the fatness of a pointer to <code>[T]</code>. I think this is a missing piece of information, as I saw it nowhere else."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 43, "last_activity_date": 1431704246, "creation_date": 1431704246, "answer_id": 30263497, "question_id": 30262970, "link": "https://stackoverflow.com/questions/30262970/array-as-a-struct-field/30263497#30263497", "title": "Array as a struct field", "body": "<p>Rust doesn't have the concept of a variable-length (stack) array, which you seem to be trying to use here.</p>\n\n<p>Rust has a couple different array-ish types.</p>\n\n<ul>\n<li><code>Vec&lt;T&gt;</code> (\"vector\"): Dynamically sized; dynamically allocated on the heap. This is <em>probably</em> what you want to use. Initialize it with <code>Vec::with_capacity(foo)</code> to avoid overallocation (this creates an empty vector with the given capacity).</li>\n<li><code>[T; n]</code> (\"array\"): Statically sized; lives on the stack. You need to know the size at compile time, so this won't work for you (unless I've misanalysed your situation).</li>\n<li><code>[T]</code> (\"slice\"): Unsized; usually used from <code>&amp;[T]</code>. This is a view into a contiguous set of <code>T</code>s in memory somewhere. You can get it by taking a reference to an array, or a vector (called \"taking a slice of an array/vector\"), or even taking a view into a subset of the array/vector. Being unsized, <code>[T]</code> can't be used directly as a variable (it can be used as a member of an unsized struct), but you can view it from behind a pointer. Pointers referring to <code>[T]</code> are <em>fat</em> ; i.e. they have an extra field for the length. <code>&amp;[T]</code> would be useful if you want to store a reference to an existing array; but I don't think that's what you want to do here.</li>\n</ul>\n"}], "owner": {"reputation": 1479, "user_id": 4673683, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/106a6b52825462b10ef0904466351c00?s=128&d=identicon&r=PG", "display_name": "user19018", "link": "https://stackoverflow.com/users/4673683/user19018"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 25725, "favorite_count": 4, "accepted_answer_id": 30263497, "answer_count": 2, "score": 23, "last_activity_date": 1431704352, "creation_date": 1431702535, "last_edit_date": 1431703939, "question_id": 30262970, "link": "https://stackoverflow.com/questions/30262970/array-as-a-struct-field", "title": "Array as a struct field", "body": "<p>I would like to create a non binary tree structure in Rust. Here is a try</p>\n\n<pre><code>struct TreeNode&lt;T&gt; {\n    tag : T,\n    father : Weak&lt;TreeNode&lt;T&gt;&gt;,\n    childrenlists : [Rc&lt;TreeNode&lt;T&gt;&gt;]\n}\n</code></pre>\n\n<p>Unfortunately, this does not compile.</p>\n\n<pre><code>main.rs:4:1: 8:2 error: the trait `core::marker::Sized` is not implemented for the type `[alloc::rc::Rc&lt;TreeNode&lt;T&gt;&gt;]` [E0277]\nmain.rs:4 struct TreeNode&lt;T&gt; {\nmain.rs:5     tag : T,\nmain.rs:6     father : Weak&lt;TreeNode&lt;T&gt;&gt;,\nmain.rs:7     childrenlist : [Rc&lt;TreeNode&lt;T&gt;&gt;]\nmain.rs:8 }\nmain.rs:4:1: 8:2 note: `[alloc::rc::Rc&lt;TreeNode&lt;T&gt;&gt;]` does not have a constant size known at compile-time\nmain.rs:4 struct TreeNode&lt;T&gt; {\nmain.rs:5     tag : T,\nmain.rs:6     father : Weak&lt;TreeNode&lt;T&gt;&gt;,\nmain.rs:7     childrenlist : [Rc&lt;TreeNode&lt;T&gt;&gt;]\nmain.rs:8 }\nerror: aborting due to previous error\n</code></pre>\n\n<p>The code compiles if we replace an array with a <code>Vec</code>. However, the structure is immutable and I do not need an overallocated <code>Vec</code>.</p>\n\n<p>I heard it could be possible to have a struct field with size unknown at compile time, provided it is unique. How can we do it?</p>\n"}, {"tags": ["reference", "rust", "dereference"], "answers": [{"comments": [{"owner": {"reputation": 18308, "user_id": 1375209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dweAo.png?s=128&g=1", "display_name": "toro2k", "link": "https://stackoverflow.com/users/1375209/toro2k"}, "edited": false, "score": 0, "creation_date": 1431700418, "post_id": 30261979, "comment_id": 48624173, "body": "Thank you! I just miss one thing: I&#39;ve found an implementation for <code>[T]</code> but not for <code>&amp;[T]</code>, is it the latter to get called? Why?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 18308, "user_id": 1375209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dweAo.png?s=128&g=1", "display_name": "toro2k", "link": "https://stackoverflow.com/users/1375209/toro2k"}, "edited": false, "score": 1, "creation_date": 1431700900, "post_id": 30261979, "comment_id": 48624513, "body": "@toro2k I added a bit more about that. Let me know if it helps!"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 2, "creation_date": 1431739327, "post_id": 30261979, "comment_id": 48641271, "body": "I don&#39;t think there&#39;s any auto-dereferencing (or auto-referencing), because <code>fmt::Debug::fmt()</code> takes <code>self</code> by reference, i.e. it expects a <code>&amp;[T]</code>, and it&#39;s given a <code>&amp;[T]</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1431754384, "last_edit_date": 1495540262, "creation_date": 1431699908, "answer_id": 30261979, "question_id": 30261815, "link": "https://stackoverflow.com/questions/30261815/understanding-the-debug-implementation-for-vect/30261979#30261979", "title": "Understanding the Debug implementation for Vec&lt;T&gt;", "body": "<p>In cases like this, I find it useful to make the compiler tell you what the type is. Just cause a type error and let the compiler diagnostics do it for you. The easiest way is to try to assign your item to something of type <code>()</code>:</p>\n\n<pre><code>fn main() {\n    let v = &amp;vec![1,2,3];\n    let () = v;\n    let () = &amp;**v;\n}\n</code></pre>\n\n<p>The errors are:</p>\n\n<pre><code>&lt;anon&gt;:3:9: 3:11 error: mismatched types:\n expected `&amp;collections::vec::Vec&lt;_&gt;`,\n    found `()`\n(expected &amp;-ptr,\n    found ()) [E0308]\n&lt;anon&gt;:3     let () = v;\n                 ^~\n&lt;anon&gt;:4:9: 4:11 error: mismatched types:\n expected `&amp;[_]`,\n    found `()`\n(expected &amp;-ptr,\n    found ()) [E0308]\n&lt;anon&gt;:4     let () = &amp;**v;\n                 ^~\n</code></pre>\n\n<p>Thus <code>v</code> is a <code>&amp;collections::vec::Vec&lt;_&gt;</code> and <code>&amp;**v</code> is a <code>&amp;[_]</code>.</p>\n\n<p>More detailed, <code>Vec</code> has this:</p>\n\n<pre><code>impl&lt;T&gt; Deref for Vec&lt;T&gt; {\n    type Target = [T];\n    // ...\n}\n</code></pre>\n\n<p>So, we dereference once to go from <code>&amp;Vec&lt;T&gt;</code> to a <code>Vec&lt;T&gt;</code>, dereference <em>again</em> to get a <code>[T]</code>, and then reference once to get a <code>&amp;[T]</code>.</p>\n\n<p><code>[T]</code> has this:</p>\n\n<pre><code>impl&lt;T&gt; Debug for [T] {\n    fn fmt(&amp;self, ...) ...;\n}\n</code></pre>\n\n<p><s>However, when searching for an appropriate method to call, Rust will <a href=\"https://stackoverflow.com/q/28519997/155423\">automatically attempt to dereference</a> the target. That means we can find the method on <code>[T]</code> from a <code>&amp;[T]</code>.</s></p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/30261815/understanding-the-debug-implementation-for-vect/30261979?noredirect=1#comment48641271_30261979\">corrected by Francis Gagn\u00e9</a>, <code>Debug::fmt</code> takes <code>&amp;self</code>, so directly calling it with a <code>&amp;[T]</code> finds the matching implementation. No need for any automatic referencing or dereferencing.</p>\n"}], "owner": {"reputation": 18308, "user_id": 1375209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dweAo.png?s=128&g=1", "display_name": "toro2k", "link": "https://stackoverflow.com/users/1375209/toro2k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 160, "favorite_count": 0, "accepted_answer_id": 30261979, "answer_count": 1, "score": 5, "last_activity_date": 1431754384, "creation_date": 1431699472, "last_edit_date": 1495542608, "question_id": 30261815, "link": "https://stackoverflow.com/questions/30261815/understanding-the-debug-implementation-for-vect", "title": "Understanding the Debug implementation for Vec&lt;T&gt;", "body": "<p>Trying to implement the <code>Debug</code> trait for a custom type I stumbled upon the implementation for <code>Vec&lt;T&gt;</code>. I have difficulties understanding how it works. </p>\n\n<p>The implementation goes like this:</p>\n\n<pre><code>impl&lt;T: fmt::Debug&gt; fmt::Debug for Vec&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        fmt::Debug::fmt(&amp;**self, f)\n    }\n}\n</code></pre>\n\n<p>I understand it calls the <code>fmt</code> implementation for some other type. What I cannot understand is what type it is. I've tried to figure it out with the help of <a href=\"https://stackoverflow.com/questions/28519997/what-are-rusts-exact-auto-dereferencing-rules\">another question</a>, and searching among the <a href=\"http://file:///home/toro2k/stuff/opt/rust/share/doc/rust/html/std/fmt/trait.Debug.html\" rel=\"nofollow noreferrer\">implementations of <code>Debug</code></a> for something that looks appropriate (maybe something like <code>&amp;[T]</code>), but with no success.</p>\n\n<p>What is the exact meaning of <code>&amp;**self</code> in this context? What implementation of <code>Debug</code> is being called?</p>\n"}, {"tags": ["java", "java-native-interface", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1431689819, "post_id": 30258427, "comment_id": 48616523, "body": "I can&#39;t give a full answer, but you appear to be assuming that <code>*const Any</code> is a regular pointer: <b>it is not</b>.  It is a pointer to a trait object, which means it is <i>twice the size of a regular pointer</i>.  You <i>should not</i> use <code>*const Any</code> to represent an &quot;arbitrary pointer&quot;; for that, you should either use <code>*const ()</code> or <code>*const c_void</code> (from the <code>libc</code> package).  As an aside: you can use <code>::std::mem::size_of&lt;T&gt;()</code> to get the size of a given type."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1431689849, "post_id": 30258427, "comment_id": 48616539, "body": "Please note that <code>Any</code> is a trait, and any pointer to a bare trait is a trait object, that is, it is in fact a &quot;fat&quot; pointer. For example, <a href=\"http://is.gd/tjze8D\" rel=\"nofollow noreferrer\">this</a> program prints 16 instead of 8. Hence it is unsuitable for usage as a <code>void*</code>-like pointer. You need e.g. <code>*mut ()</code> for it."}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 19, "last_activity_date": 1431692044, "last_edit_date": 1431692044, "creation_date": 1431691733, "answer_id": 30259186, "question_id": 30258427, "link": "https://stackoverflow.com/questions/30258427/calling-rust-from-java/30259186#30259186", "title": "Calling Rust from Java", "body": "<p>Apart from the problem that <code>*mut Any</code>/<code>*const Any</code> are fat pointers, there is also a fact that native JNI functions use <em>double indirection</em> when accessing <code>JNINativeInterface</code> structure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>struct JNINativeInterface_;\ntypedef const struct JNINativeInterface_ *JNIEnv;\njint (JNICALL *GetVersion)(JNIEnv *env);\n</code></pre>\n\n<p>Here, you can see that <code>JNIEnv</code> is a pointer to <code>JNINativeInterface_</code> structure which actually contains the fields you presented, and <code>GetVersion</code> accepts a pointer to <code>JNIEnv</code> - that is, it requires a pointer to a pointer to <code>JNINativeInterface_</code>. This Rust program works on my machine (Rust nightly is used but the same code would work in beta with an external libc crate):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![crate_type=\"dylib\"]\n#![feature(libc)]\nextern crate libc;\n\nuse libc::c_void;\n\n#[repr(C)]\npub struct JNINativeInterface {\n    reserved0: *mut c_void,\n    reserved1: *mut c_void,\n    reserved2: *mut c_void,\n    reserved3: *mut c_void,\n\n    GetVersion: extern fn(env: *mut JNIEnv) -&gt; i32,\n\n    _opaque_data: [u8; 1824]\n}\n\npub type JNIEnv = *const JNINativeInterface;\n\n#[no_mangle]\npub extern fn Java_tests_Test_helloJre(jre: *mut JNIEnv, class: *const c_void) {\n    println!(\"Invoked native method, jre: {:p}, class: {:p}\", jre, class);\n    unsafe {\n        let v = ((**jre).GetVersion)(jre);\n        println!(\"version: {:?}\", v);\n    }\n}\n</code></pre>\n\n<p>Java counterpart:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>package tests;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class Test {\n    public static native void helloJre();\n\n    public static void main(String[] args) {\n        Path p = Paths.get(\"libtest.dylib\");\n        System.load(p.toAbsolutePath().toString());\n        Test.helloJre();\n    }\n}\n</code></pre>\n\n<p>Invocation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>% javac tests/Test.java\n% java tests.Test\nInvoked native method, jre: 0x7f81240011e0, class: 0x10d9808d8\nversion: 65544\n</code></pre>\n\n<p>65544 is 0x10008, and indeed, I'm running this under Oracle JVM 1.8.</p>\n\n<p>I guess you can omit <code>_opaque_data</code> field as <code>JNINativeInterface</code> structure is always passed by pointer, so if you only need several <em>first</em> fields from the structure, you can declare only them and ignore the rest.</p>\n"}, {"comments": [{"owner": {"reputation": 777, "user_id": 4618966, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yVRFo.jpg?s=128&g=1", "display_name": "Bachrc", "link": "https://stackoverflow.com/users/4618966/bachrc"}, "edited": false, "score": 0, "creation_date": 1592991523, "post_id": 35519222, "comment_id": 110620730, "body": "Thanks for the example, the Rust business code shouldn&#39;t be adapting to applications consuming it. If you have some resources following this thinking, it would be really useful !"}], "tags": [], "owner": {"reputation": 1816, "user_id": 416868, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/1be757a1fd5dc23d08be959b100523a6?s=128&d=identicon&r=PG", "display_name": "Suresh", "link": "https://stackoverflow.com/users/416868/suresh"}, "is_accepted": false, "score": 17, "last_activity_date": 1455943745, "last_edit_date": 1455943745, "creation_date": 1455943542, "answer_id": 35519222, "question_id": 30258427, "link": "https://stackoverflow.com/questions/30258427/calling-rust-from-java/35519222#35519222", "title": "Calling Rust from Java", "body": "<p>A simpler approach would be to use <a href=\"https://github.com/jnr/jnr-ffi\" rel=\"noreferrer\">JnrFFI</a>. The JRuby project heavily uses JnrFFI and it is likely to form the basis for the new Java <a href=\"http://openjdk.java.net/jeps/191\" rel=\"noreferrer\">FFI JEP</a>. This basically eliminates writing all the JNI nonsense. Here is <a href=\"https://github.com/sureshg/java-rust-ffi\" rel=\"noreferrer\">sample code</a> that uses JnrFFI to call a Rust function from Java:</p>\n\n<p><strong>Java Code</strong></p>\n\n<pre><code>  public static interface RustLib {\n        int double_input(int i);\n    }\n    public static String getLibraryPath(String dylib) {\n        File f = new File(JavaRustFFI.class.getClassLoader().getResource(mapLibraryName(dylib)).getFile());\n        return f.getParent();\n    }\n    public static void main(String[] args) {\n        String dylib = \"double_input\";\n        System.setProperty(\"jnr.ffi.library.path\", getLibraryPath(dylib));\n        RustLib rlib = LibraryLoader.create(RustLib.class).load(dylib);\n        int r = rlib.double_input(20);\n        System.out.println(\"Result from rust double_input:  \" + r);\n    }\n</code></pre>\n\n<p><strong>Rust Code</strong></p>\n\n<pre><code>#[no_mangle]\npub extern fn double_input(input: i32) -&gt; i32 {\n    input * 2\n}\n</code></pre>\n\n<p>Here is the <a href=\"https://github.com/sureshg/java-rust-ffi\" rel=\"noreferrer\">full code</a></p>\n"}], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10059, "favorite_count": 11, "accepted_answer_id": 30259186, "answer_count": 2, "score": 37, "last_activity_date": 1455943745, "creation_date": 1431689467, "last_edit_date": 1495541338, "question_id": 30258427, "link": "https://stackoverflow.com/questions/30258427/calling-rust-from-java", "title": "Calling Rust from Java", "body": "<p>I am using Rust 1.0 beta and was able to create a small example for calling functions written in Rust from Java. I simply compiled the following Rust code in mylib.rs using rustc which produces a mylib.dll on Windows:</p>\n\n<pre><code>#![crate_type = \"dylib\"]\nuse std::any::Any;\n\n#[no_mangle]\npub extern fn Java_tests_Test_hello(env: *const Any, jclass: *const Any) {\n    println!(\"hello from rust\");\n}\n\n#[no_mangle]\npub extern fn Java_tests_Test_sum(env: *const Any, jclass: *const Any, a: i32, b: i32) -&gt; i32 {\n    return a + b;\n}\n</code></pre>\n\n<p>Then I can call these functions from a Java class tests.Test:</p>\n\n<pre><code>package tests;\n\nimport java.io.File;\n\npublic class Test {\n\n    public static native void hello();\n\n    public static native int sum(int a, int b);\n\n    public static void main(String[] args) {\n        File f = new File(\"mylib.dll\");\n        System.load(f.getAbsolutePath());\n        Test.hello();\n        System.out.println(Test.sum(20, 22));\n    }\n}\n</code></pre>\n\n<p>Running the Java main prints the expected result:</p>\n\n<pre><code>hello from rust\n42\n</code></pre>\n\n<p>In the Rust methods I declared <code>env</code> as a pointer to the <code>Any</code> type but in reality it is a C struct with pointers to functions as described in the <a href=\"http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html\" rel=\"noreferrer\">documentation (Code example 4-1)</a> which are required to exchange data with the Java runtime. </p>\n\n<p>From this <a href=\"https://stackoverflow.com/a/26118378/599575\">answer</a> I understood that such structs with function pointers should have a counterpart in the Rust code to call these functions. So I tried to implement such a struct setting all field values to <code>*mut Any</code> except for the <code>GetVersion</code> field: </p>\n\n<pre><code>#[repr(C)]\npub struct JavaEnv {\n\n    reserved0: *mut Any,\n    reserved1: *mut Any,\n    reserved2: *mut Any,\n    reserved3: *mut Any,\n    GetVersion: extern \"C\" fn(env: *mut JavaEnv) -&gt; i32,\n\n    DefineClass: *mut Any,\n    FindClass: *mut Any,  \n    \u2026\n</code></pre>\n\n<p>When I call the following function from Java which should call the GetVersion function, the JVM crashes:</p>\n\n<pre><code>#[no_mangle]\npub extern fn Java_tests_Test_helloJre(jre: *mut JavaEnv, class: *const Any) {\n    unsafe {\n        let v = ((*jre).GetVersion)(jre);\n        println!(\"version: {:?}\", v);\n    }\n}\n</code></pre>\n\n<p>How should I call the GetVersion function correctly? Note that I am really new to this kind of stuff so please feel free to edit this question if required.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1431674552, "creation_date": 1431674552, "answer_id": 30253812, "question_id": 30253554, "link": "https://stackoverflow.com/questions/30253554/newtype-pattern-of-the-combinations-of-rc-refcell-and-box/30253812#30253812", "title": "Newtype pattern of the combinations of Rc, RefCell and Box", "body": "<p>The problem is not so much with your <code>struct</code> itself, but with the <code>trait</code> you pass.</p>\n\n<p>Trait objects are dynamically sized objects (do not implement <code>Sized</code>).</p>\n\n<p>Normally, when you specify the bounds on a generic type (<code>T</code> here), you constrain it, however when <code>Sized</code> was introduced it was decided that it would be applied <em>as a default bound</em> because most generic code deals with <code>Sized</code> types and a result <code>T</code> alone means <code>T: Sized</code>.</p>\n\n<p>There is a special \"widening\" bound to say \"<code>T</code> may not be <code>Sized</code>\": <code>?Sized</code>, which you have to apply if you wish to be able to take <code>trait</code> objects. Adding it to your code:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\nstruct RcRefBox&lt;T: ?Sized&gt;(Rc&lt;RefCell&lt;Box&lt;T&gt;&gt;&gt;);  // ?Sized\n\nimpl&lt;T: ?Sized&gt; RcRefBox&lt;T&gt; {                     // ?Sized\n    fn new(value: Box&lt;T&gt;) -&gt; RcRefBox&lt;T&gt; {\n        RcRefBox(Rc::new(RefCell::new(value)))\n    }\n}\n\ntrait Interface {}\n\nstruct A;\nimpl Interface for A {}\n\nfn main() {\n    let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n}\n</code></pre>\n\n<p>makes it work (<a href=\"http://is.gd/pSZKK2\" rel=\"nofollow\">http://is.gd/pSZKK2</a>).</p>\n"}], "owner": {"reputation": 107, "user_id": 1225445, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e9b2126d7d7e28eb17f309e9f3c16753?s=128&d=identicon&r=PG", "display_name": "xps_l502", "link": "https://stackoverflow.com/users/1225445/xps-l502"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 312, "favorite_count": 1, "accepted_answer_id": 30253812, "answer_count": 1, "score": 0, "last_activity_date": 1431692000, "creation_date": 1431673666, "last_edit_date": 1431692000, "question_id": 30253554, "link": "https://stackoverflow.com/questions/30253554/newtype-pattern-of-the-combinations-of-rc-refcell-and-box", "title": "Newtype pattern of the combinations of Rc, RefCell and Box", "body": "<p>Because I don't want to type the code like <code>Rc::new(RefCell::new(Box::new(MyType::new(args...))))</code> again and again,\nI decided to create the newtype <code>RcRefBox</code> like below:</p>\n\n<pre><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\nstruct RcRefBox&lt;T&gt;(Rc&lt;RefCell&lt;Box&lt;T&gt;&gt;&gt;);\n\nimpl&lt;T&gt; RcRefBox&lt;T&gt; {\n    fn new(value: Box&lt;T&gt;) -&gt; RcRefBox&lt;T&gt; {\n        RcRefBox(Rc::new(RefCell::new(value)))\n    }\n}\n\ntrait Interface {}\n\nstruct A;\nimpl Interface for A {}\n\nfn main() {\n    let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n}\n</code></pre>\n\n<p>The code doesn't compile with the errors below:\n(Playpen: <a href=\"http://is.gd/ITiR8Q\" rel=\"nofollow\">http://is.gd/ITiR8Q</a>)</p>\n\n<pre><code>&lt;anon&gt;:19:16: 19:35 error: the trait `core::marker::Sized` is not implemented for the type `Interface` [E0277]\n&lt;anon&gt;:19     let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n                         ^~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:19:16: 19:35 note: `Interface` does not have a constant size known at compile-time\n&lt;anon&gt;:19     let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n                     ^~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:19:38: 19:51 error: the trait `core::marker::Sized` is not implemented for the type `Interface` [E0277]\n&lt;anon&gt;:19     let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n                                               ^~~~~~~~~~~~~\n&lt;anon&gt;:19:38: 19:51 note: `Interface` does not have a constant size known at compile-time\n&lt;anon&gt;:19     let iface: RcRefBox&lt;Interface&gt; = RcRefBox::new(Box::new(A));\n                                               ^~~~~~~~~~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>How can I fix those errors?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 14, "creation_date": 1431674177, "post_id": 30253422, "comment_id": 48607429, "body": "Rust has a different philosophy than Go: where Go is &quot;batteries included&quot;, Rust is &quot;do not pay for what you do not use&quot;. Thus, if you wish to print <code>MyStruct</code>, you have to ask the compiler to include the code to print it (or code it yourself)."}, {"owner": {"reputation": 2485, "user_id": 2780360, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/MIqzi.jpg?s=128&g=1", "display_name": "d8aninja", "link": "https://stackoverflow.com/users/2780360/d8aninja"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1552774866, "post_id": 30253422, "comment_id": 97141193, "body": "@MatthieuM. this is actually the right answer (with a great context in relation to Go).  Post and I&#39;ll upvote."}], "answers": [{"comments": [{"owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "edited": false, "score": 0, "creation_date": 1431765533, "post_id": 30253540, "comment_id": 48646086, "body": "can we use Debug trait for arrays?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "edited": false, "score": 0, "creation_date": 1431787274, "post_id": 30253540, "comment_id": 48652487, "body": "@tez the <code>Debug</code> trait is <a href=\"http://doc.rust-lang.org/std/fmt/trait.Debug.html\" rel=\"nofollow noreferrer\">already implemented for many types</a>, including arrays from 0 to 32 items, as well as slices and <code>Vec</code> of any length. The important thing is that the item <i>inside the container</i> must also implement <code>Debug</code>."}, {"owner": {"reputation": 967, "user_id": 2849127, "user_type": "registered", "accept_rate": 17, "profile_image": "https://i.stack.imgur.com/5rCha.png?s=128&g=1", "display_name": "phoenisx", "link": "https://stackoverflow.com/users/2849127/phoenisx"}, "edited": false, "score": 9, "creation_date": 1553168906, "post_id": 30253540, "comment_id": 97289268, "body": "It is also possible to pretty print in debug mode using the same trait <code>#[derive(Debug)]</code> as shown in above answer, while replacing <code>{:?}</code> with <code>{:#?}</code> in <code>println!</code> macro.  \t Details can be found in <a href=\"https://doc.rust-lang.org/book/ch05-02-example-structs.html#adding-useful-functionality-with-derived-traits\" rel=\"nofollow noreferrer\">Rust Book Ch-5</a>"}], "tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 103, "last_activity_date": 1431673626, "creation_date": 1431673626, "answer_id": 30253540, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays/30253540#30253540", "title": "How to print structs and arrays?", "body": "<p>You want to implement the <code>Debug</code> trait on your struct. Using <code>#[derive(Debug)]</code> is the easiest solution. Then you can print it with <code>{:?}</code>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct MyStruct{\n    a: i32,\n    b: i32\n}\n\nfn main() {\n    let x = MyStruct{ a: 10, b: 20 };\n    println!(\"{:?}\", x);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 13014, "user_id": 4140572, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/2uRSa.png?s=128&g=1", "display_name": "Angel Angel", "link": "https://stackoverflow.com/users/4140572/angel-angel"}, "is_accepted": false, "score": 12, "last_activity_date": 1459902966, "last_edit_date": 1495541827, "creation_date": 1459902750, "answer_id": 36439447, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays/36439447#36439447", "title": "How to print structs and arrays?", "body": "<p>As <a href=\"https://stackoverflow.com/a/30253540/155423\">mdup says</a>, you can use <code>Debug</code>, but you can also use the <a href=\"http://doc.rust-lang.org/std/fmt/trait.Display.html\" rel=\"noreferrer\"><code>Display</code></a> trait. You can create a custom output:</p>\n\n<pre><code>struct MyStruct {\n    a: i32,\n    b: i32\n}\n\nimpl std::fmt::Display for MyStruct {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(f, \"(value a: {}, value b: {})\", self.a, self.b)\n    }\n}\n\nfn main() {\n    let test = MyStruct { a: 0, b: 0 };\n\n    println!(\"Used Display: {}\", test);    \n}\n</code></pre>\n\n<p>Shell:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Used Display: (value a: 0, value b: 0)\n</code></pre>\n\n<p>For more information, you can look at the <a href=\"http://doc.rust-lang.org/std/fmt/index.html#formatting-traits\" rel=\"noreferrer\"><code>fmt</code> module documentation</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 354, "user_id": 2823526, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/y6Q8m.jpg?s=128&g=1", "display_name": "dtasev", "link": "https://stackoverflow.com/users/2823526/dtasev"}, "is_accepted": false, "score": 8, "last_activity_date": 1557995534, "last_edit_date": 1557995534, "creation_date": 1497117652, "answer_id": 44476447, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays/44476447#44476447", "title": "How to print structs and arrays?", "body": "<p>As no one here explicitly answers for arrays, to print out an array you need to specify the <code>{:?}</code>, also used to print debug output</p>\n\n<pre><code>let val = 3;\nlet length = 32; // the maximum that can be printed without error\nlet array1d = [val; length];\nlet array2d = [array1d; length]; // or [[3; 32]; 32];\nlet array3d = [array2d; length]; // or [[[3; 32]; 32]; 32];\n</code></pre>\n\n<p>However arrays where <code>length &gt; 32</code> will exit with an error:</p>\n\n<pre><code>let length = 33;\nlet array1d = [3; length];\nprintln(\"{:?}\", array1d);\n\nerror[E0277]: the trait bound `[{integer}; 33]: std::fmt::Debug` is not satisfied\n--&gt; src\\main.rs:6:22\n|\n|     println!(\"{:?}\", array1d);\n|                      ^^^^^^^ the trait `std::fmt::Debug` is not implemented for `[{integer}; 33]`\n</code></pre>\n\n<p>Longer arrays can be printed out with the approach from this answer: <a href=\"https://stackoverflow.com/questions/30901965/implement-debug-trait-for-large-array-type\">Implement Debug trait for large array type</a></p>\n"}, {"comments": [{"owner": {"reputation": 1037, "user_id": 3935427, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/4aJge.jpg?s=128&g=1", "display_name": "Roco CTZ", "link": "https://stackoverflow.com/users/3935427/roco-ctz"}, "edited": false, "score": 6, "creation_date": 1529634730, "post_id": 47985087, "comment_id": 88955493, "body": "This is not true for structs. It only works for arrays."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1552816458, "post_id": 47985087, "comment_id": 97147834, "body": "And it only works for arrays whose inner elements implement the <code>Debug</code> trait."}], "tags": [], "owner": {"reputation": 113, "user_id": 5640290, "user_type": "registered", "profile_image": "https://graph.facebook.com/10153826483713092/picture?type=large", "display_name": "Jenny Lian", "link": "https://stackoverflow.com/users/5640290/jenny-lian"}, "is_accepted": false, "score": 5, "last_activity_date": 1552816440, "last_edit_date": 1552816440, "creation_date": 1514335025, "answer_id": 47985087, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays/47985087#47985087", "title": "How to print structs and arrays?", "body": "<p>Actually just <code>{:?}</code> is sufficient.</p>\n\n<pre><code>let a = [1, 2, 3, 4, 5];\nlet complete = &amp;a[..];\nprintln! (\"{:?}\", a);\nprintln! (\"{:?}\", complete);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1, "user_id": 13792937, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40eb5b8fb0b983d34767e8a08124e51c?s=128&d=identicon&r=PG&f=1", "display_name": "Ian Githungo", "link": "https://stackoverflow.com/users/13792937/ian-githungo"}, "is_accepted": false, "score": 0, "last_activity_date": 1594889651, "last_edit_date": 1594889651, "creation_date": 1594889177, "answer_id": 62930915, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays/62930915#62930915", "title": "How to print structs and arrays?", "body": "<pre><code>#[derive(Debug)]\n struct Rectangle{\n       width: u32,\n       height: u32,\n  }\n\nfn main(){\n   let rec = Rectangle{\n      width: 50,\n      height: 30,\n   };\n\n   println!(&quot;The rectangle {:?} &quot;, rec);\n   println!(&quot;The area of the rectangle is {} pixels&quot;, \n   area_rectangle(&amp;rec));\n}\n\nfn area_rectangle(rectangle: &amp;Rectangle) -&gt; u32{\n    rectangle.width * rectangle.height\n}\n</code></pre>\n"}], "owner": {"reputation": 3963, "user_id": 1390726, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/c765305d9d8dfc09a2f352a5cdf51bdf?s=128&d=identicon&r=PG", "display_name": "tez", "link": "https://stackoverflow.com/users/1390726/tez"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 35226, "favorite_count": 7, "accepted_answer_id": 30253540, "answer_count": 5, "score": 61, "last_activity_date": 1594889651, "creation_date": 1431673238, "last_edit_date": 1459865986, "question_id": 30253422, "link": "https://stackoverflow.com/questions/30253422/how-to-print-structs-and-arrays", "title": "How to print structs and arrays?", "body": "<p>Go seems to be able to print structs and arrays directly.</p>\n\n<pre><code>struct MyStruct {\n    a: i32,\n    b: i32\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>let arr: [i32; 10] = [1; 10];\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1431678683, "post_id": 30252054, "comment_id": 48609721, "body": "The error says that <code>*req</code> is borrowed exactly because <code>req</code> is a reference. After all, you usually borrow some owned data the reference points at, not the reference itself."}], "answers": [{"comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1431679960, "post_id": 30254919, "comment_id": 48610418, "body": "Is there any way to return the connection and make the refactoring work? Or would I have to return the pool too in that case?"}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 1, "creation_date": 1431680141, "post_id": 30254919, "comment_id": 48610522, "body": "You will have a hard time returning both the pool and the connection, as their lifetimes are tied together. In this precise case of refactoring only two lines of code into a function, I don&#39;t see any better solution than not refactoring."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 2, "last_activity_date": 1431678550, "creation_date": 1431678550, "answer_id": 30254919, "question_id": 30252054, "link": "https://stackoverflow.com/questions/30252054/refactoring-messes-up-mutable-borrow-why/30254919#30254919", "title": "Refactoring messes up mutable borrow - why?", "body": "<p>That's actually exactly the meaning of the lifetime annotations. If you have a function having this prototype:</p>\n\n<pre><code>fn get_bar&lt;'a&gt;(&amp;'a Foo) -&gt; Bar&lt;'a&gt; { ... }\n</code></pre>\n\n<p>It means that the <code>Bar</code> object returned owns a lifetime tied to the one of the <code>Foo</code> object. As a consequence:</p>\n\n<ul>\n<li>the <code>Bar</code> objects borrows the <code>Foo</code> object as long as it is alive</li>\n<li>the <code>Bar</code> object is not allowed to outlive the <code>Foo</code> object.</li>\n</ul>\n\n<p>In your case, <code>connection</code> is of type <code>PooledConnection&lt;'a, ...&gt;</code>, where <code>'a</code> is the lifetime defined in <code>&amp;'a mut req</code>, it thus is considered as a mutable borrow of <code>req</code>.</p>\n\n<p>It worked before the refactoring, because the lifetime of <code>connection</code> is actually linked to the lifetime of <code>pool</code>, which didn't borrow <code>req</code> as it does not hold any lifetime parameter.</p>\n\n<p>As your refactoring forces <code>connection</code> to borrow <code>req</code>, which was not needed before, maybe it is not an appropriate refactoring.</p>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 153, "favorite_count": 0, "accepted_answer_id": 30254919, "answer_count": 1, "score": 3, "last_activity_date": 1431692068, "creation_date": 1431667449, "last_edit_date": 1431692068, "question_id": 30252054, "link": "https://stackoverflow.com/questions/30252054/refactoring-messes-up-mutable-borrow-why", "title": "Refactoring messes up mutable borrow - why?", "body": "<p>I'm trying to understand why does the following refactoring result in an error, even though it should effectively have the same behaviour:</p>\n\n<p>Before:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn req_handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let pool = req.get::&lt;Read&lt;Database&gt;&gt;().ok().expect(\"database component not initialised\");\n    let connection = pool.get().unwrap();\n\n    let maybe_id = req.extensions.get::&lt;Router&gt;().unwrap().find(\"id\");\n    ...\n</code></pre>\n\n<p>After:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn get_pool_connection&lt;'a, 'b, 'c&gt;(req: &amp;'a mut Request&lt;'b, 'c&gt;) -&gt; PooledConnection&lt;'a, PostgresConnectionManager&gt; {\n    let pool = req.get_ref::&lt;Read&lt;Database&gt;&gt;().ok().expect(\"database component not initialised\");\n    pool.get().unwrap()\n}\nfn req_handler(req: &amp;mut Request) -&gt;\u2000IronResult&lt;Response&gt; {\n    let connection = get_pool_connection(req);\n    let maybe_id = req.extensions.get::&lt;Router&gt;().unwrap().find(\"id\");\n</code></pre>\n\n<p>This results in error:</p>\n\n<pre><code>src/main.rs:64:20: 64:34 error: cannot borrow `req.extensions` as immutable because `*req` is also borrowed as mutable\nsrc/main.rs:64     let maybe_id = req.extensions.get::&lt;Router&gt;().unwrap().find(\"id\");\n                                  ^~~~~~~~~~~~~~\nsrc/main.rs:62:42: 62:45 note: previous borrow of `*req` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `*req` until the borrow ends\nsrc/main.rs:62     let connection = get_pool_connection(req);\n                                                        ^~~\nsrc/main.rs:76:2: 76:2 note: previous borrow ends here\nsrc/main.rs:61 fn req_handler(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n...\nsrc/main.rs:76 }\n</code></pre>\n\n<p>So the problem is that <code>get_pool_connection</code> borrows the request and gives back <code>connection</code> which prevents further <code>req</code> use. But why does this happen? <code>req</code> is guaranteed to use at least the same lifetime as the returned <code>PooledConnection</code>. It's not moved either, it was just passed as <code>&amp;mut</code>. So what prevents the request from being used?</p>\n\n<p>And why does the error say that <code>*req</code> was borrowed, when both local <code>req</code> and the function parameter are references?</p>\n\n<p>(relevant docs: <a href=\"http://ironframework.io/doc/iron/request/struct.Request.html\" rel=\"nofollow\">Request</a>, <a href=\"https://sfackler.github.io/r2d2/doc/r2d2/struct.Pool.html\" rel=\"nofollow\">Pool</a>)</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1431655196, "post_id": 30250318, "comment_id": 48601219, "body": "Ok, just too understand it better I looked at the &amp;str -&gt; String implementation - it&#39;s <code>&amp;&#39;a str</code> and not <code>&amp;&#39;a str&lt;&#39;a&gt;</code> - why is that?"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 1, "creation_date": 1431655495, "post_id": 30250318, "comment_id": 48601289, "body": "A <code>str</code> doesn&#39;t contain any internal references, whereas <code>Foo</code> does. I <i>think</i> that makes sense as an explanation? it may not."}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1431655767, "post_id": 30250318, "comment_id": 48601357, "body": "Yes, that&#39;s great. Thanks for taking the time to answer all those SO questions Steve!"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1431655994, "post_id": 30250318, "comment_id": 48601408, "body": "Any time! Other people spend a lot more time here than I do though :)"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 3, "last_activity_date": 1431656386, "last_edit_date": 1431656386, "creation_date": 1431655033, "answer_id": 30250318, "question_id": 30250263, "link": "https://stackoverflow.com/questions/30250263/lifetime-for-a-from-trait-implementation/30250318#30250318", "title": "Lifetime for a From trait implementation", "body": "<p>The lifetime is on the reference <em>to</em> the Row, but not the Row itself. To make a reproduction easier, I defined something that looks like a Row:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Foo&lt;'a&gt; {\n    s: &amp;'a str,\n} \n</code></pre>\n\n<p>When we impl, we need to do this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; From&lt;&amp;'a Foo&lt;'a&gt;&gt; for String {\n    fn from(row: &amp;Foo) -&gt; String {\n        row.s.to_string()\n    }\n}\n</code></pre>\n\n<p>Does that make sense? If you didn't have the reference:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; From&lt;Foo&lt;'a&gt;&gt; for String {\n</code></pre>\n"}], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "accepted_answer_id": 30250318, "answer_count": 1, "score": 1, "last_activity_date": 1431787349, "creation_date": 1431654642, "last_edit_date": 1431787349, "question_id": 30250263, "link": "https://stackoverflow.com/questions/30250263/lifetime-for-a-from-trait-implementation", "title": "Lifetime for a From trait implementation", "body": "<p>I'm having issues getting the lifetimes correct (again...) for a trait implementation.</p>\n\n<p>There's a postgres <a href=\"https://sfackler.github.io/rust-postgres/doc/postgres/struct.Row.html\" rel=\"nofollow\">Row</a> which I'd like to make convertible into my own structure like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; From&lt;&amp;'a Row&gt; for Video {\n    fn from(row: &amp;Row) -&gt; Video {\n        Video {\n            video_id: row.get(\"video_id\"),\n            ...\n        }\n    }\n}\n</code></pre>\n\n<p>But I get an error like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/entities.rs:46:19: 46:22 error: wrong number of lifetime parameters: expected 1, found 0 [E0107]\nsrc/entities.rs:46 impl&lt;'a&gt; From&lt;&amp;'a Row&gt; for Video {\n                                     ^~~\n</code></pre>\n\n<p>which doesn't make sense to me - the lifetime param is right there. What's missing?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "edited": false, "score": 1, "creation_date": 1431661911, "post_id": 30250591, "comment_id": 48602871, "body": "Thanks Shepmaster. In my haste I got the references wrong. By the way, an additional problem that I had in my own code (not here) is that my trait extended <code>PartialEq</code>, which I now know cannot be used in a trait object because eq takes <code>&amp;Self</code> as a parameter (even just a reference to <code>Self</code> is forbidden in trait objects)."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1431657666, "last_edit_date": 1431657666, "creation_date": 1431657061, "answer_id": 30250591, "question_id": 30249720, "link": "https://stackoverflow.com/questions/30249720/the-trait-a-is-not-implemented-for-the-type-a-a-a/30250591#30250591", "title": "The trait `A` is not implemented for the type `&amp;&#39;a A + &#39;a`", "body": "<p>I think you are adding an extra layer of indirection. The method call <code>self.delegate.next()</code> desugars into <code>Next::next(self.delegate)</code> in this case - no automatic referencing (mutable or otherwise) is needed.</p>\n\n<p>The error message is confusing because you have two levels of reference. Your trait is written: </p>\n\n<pre><code>trait Next {\n    fn next(&amp;mut self)\n}\n</code></pre>\n\n<p>Which means that you always have to pass in a <code>&amp;mut Foo</code>. However, you were taking a <em>second</em> mutable reference, making the argument type <code>&amp;mut &amp;mut NextImpl&lt;Type&gt;</code>. The first <code>&amp;mut</code> is matched by the function parameter, but then the <em>rest of the type</em> needs to implement <code>Next</code>. However, <code>&amp;mut NextImpl&lt;Type&gt;</code> does not implement that trait, only <code>NextImpl&lt;Type&gt;</code> does!</p>\n\n<p>Your <code>Sized</code> problem is very similar. The function is defined as</p>\n\n<pre><code>fn iterator_next2&lt;It: Iterator&gt;(iter: &amp;mut It) -&gt; Option&lt;It::Item&gt;\n</code></pre>\n\n<p>That is, it expects a mutable reference to <em>some</em> concrete type that implements <code>Iterator</code>. Your call passes a <code>&amp;mut Iterator</code> - a <em>trait object</em>. A trait object is a reference to something without a known size, it is only known to implement the methods of the trait. Since you don't care about the size of the thing being referred to, the correct option is to declare that, as you did:</p>\n\n<pre><code>fn iterator_next3&lt;It: Iterator + ?Sized&gt;(iter: &amp;mut It) -&gt; Option&lt;It::Item&gt; {\n    iter.next()\n}\n</code></pre>\n\n<p>This is super confusing, so let me know if I need to attempt to explain it differently.</p>\n"}], "owner": {"reputation": 15886, "user_id": 471341, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/166bdbf4351669bc37a0407d38b8cb88?s=128&d=identicon&r=PG", "display_name": "yonran", "link": "https://stackoverflow.com/users/471341/yonran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 594, "favorite_count": 0, "accepted_answer_id": 30250591, "answer_count": 1, "score": 3, "last_activity_date": 1431657666, "creation_date": 1431650265, "last_edit_date": 1431650529, "question_id": 30249720, "link": "https://stackoverflow.com/questions/30249720/the-trait-a-is-not-implemented-for-the-type-a-a-a", "title": "The trait `A` is not implemented for the type `&amp;&#39;a A + &#39;a`", "body": "<p>I\u2019m having trouble using a generic function that takes a generic trait object as a parameter. When I try to call the function, the compiler complains \u201cerror: the trait <code>Next</code> is not implemented for the type <code>&amp;'a mut Next&lt;Type=Type&gt; + 'a</code> [E0277]\u201d. In my opinion, the <code>Next</code> trait is object-safe for any parameter <code>Type</code>, so <code>Next</code> should be implemented by any <code>&amp;Next&lt;Type&gt;</code> (by my reading of <a href=\"http://huonw.github.io/blog/2015/01/object-safety/\" rel=\"nofollow\">Huon\u2019s Object-Safety article</a>); is there any way to check that it is object-safe?</p>\n\n<p>Incidentally, I\u2019m having no problem doing pretty much the same thing with an <code>Iterator</code>, and I don\u2019t know how that is different.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Next {\n    type Type;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Type&gt;;\n}\nstruct NextImpl&lt;Type&gt; {\n    next: Option&lt;Type&gt;,\n}\nimpl&lt;Type&gt; Next for NextImpl&lt;Type&gt; {\n    type Type = Type;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Type&gt; {\n        let mut ret = None;\n        std::mem::swap(&amp;mut self.next, &amp;mut ret);\n        ret\n    }\n}\n\nstruct DelegatingNext&lt;'a, Type&gt; {\n    delegate: &amp;'a mut Next&lt;Type=Type&gt;,\n}\nimpl&lt;'a, Type&gt; Next for DelegatingNext&lt;'a, Type&gt; {\n    type Type = Type;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Type&gt; {\n        self.delegate.next()\n\n        // error: the trait `Next` is not implemented for the type `&amp;'a mut Next&lt;Type=Type&gt; + 'a` [E0277]\n        // Next::next(&amp;mut self.delegate)\n        // ^~~~~~~~~~\n\n        // error: the trait `Next` is not implemented for the type `&amp;'a mut Next&lt;Type=Type&gt; + 'a` [E0277]\n        // if (true) {\n        // next_next1(&amp;mut self.delegate)\n        // ^~~~~~~~~~\n\n        // error: the trait `Next` is not implemented for the type `&amp;'a mut Next&lt;Type=Type&gt; + 'a` [E0277]\n        // next_next2(&amp;mut self.delegate)\n        //            ^~~~~~~~~~~~~~~~~~\n    }\n}\nfn next_next1&lt;'a, NextType: Next + ?Sized&gt;(m: &amp;'a mut NextType) -&gt; Option&lt;NextType::Type&gt; {\n    m.next()\n}\nfn next_next2&lt;'a, Type&gt;(m: &amp;'a mut Next&lt;Type=Type&gt;) -&gt; Option&lt;Type&gt; {\n    m.next()\n}\nstruct DelegatingIterator&lt;'b, T&gt; {\n    iter: &amp;'b mut Iterator&lt;Item=T&gt;,\n}\nimpl&lt;'b, T&gt; DelegatingIterator&lt;'b, T&gt; {\n    fn next(&amp;mut self) -&gt; Option&lt;T&gt; {\n        let iter: &amp;mut Iterator&lt;Item=T&gt; = self.iter;\n\n        iterator_next1(iter)\n\n        // error: the trait `core::marker::Sized` is not implemented for the type `core::iter::Iterator&lt;Item=T&gt;` [E0277]\n        // note: `core::iter::Iterator&lt;Item=T&gt;` does not have a constant size known at compile-time\n        // iterator_next2(iter)\n        // ^~~~~~~~~~~~~~\n\n        // OK\n        // iterator_next3(iter)\n\n        // OK\n        // iterator_next4(iter)\n    }\n}\nfn iterator_next1&lt;'a, T&gt;(iter: &amp;mut Iterator&lt;Item=T&gt;) -&gt; Option&lt;T&gt; {\n    iter.next()\n}\nfn iterator_next2&lt;It: Iterator&gt;(iter: &amp;mut It) -&gt; Option&lt;It::Item&gt; {\n    iter.next()\n}\nfn iterator_next3&lt;It: Iterator + ?Sized&gt;(iter: &amp;mut It) -&gt; Option&lt;It::Item&gt; {\n    iter.next()\n}\nfn iterator_next4&lt;'a, Item&gt;(iter: &amp;mut Iterator&lt;Item=Item&gt;) -&gt; Option&lt;Item&gt; {\n    iter.next()\n}\n\nfn main() {\n    let mut m = NextImpl {next: Some(\"hi\")};\n    let mut delegating_model = DelegatingNext {delegate: &amp;mut m};\n    assert!(Some(\"hi\") == delegating_model.next());\n    let v: Vec&lt;i32&gt; = vec!(1, 2, 3);\n    let mut iter = v.iter();\n    assert_eq!(Some(&amp;1), (DelegatingIterator {iter: &amp;mut iter }).next());\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431627257, "post_id": 30243857, "comment_id": 48589752, "body": "I guess that a mere availability of two mutable references to the same data would <i>not</i> introduce a data race just by itself :) at the very least, you need two threads to get a data race."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 4, "creation_date": 1431629851, "post_id": 30243857, "comment_id": 48591287, "body": "it may not be a data race, but still has problems, like iterator invalidation"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1431678168, "post_id": 30243857, "comment_id": 48609462, "body": "Yes, sure. I only argued against the &quot;data race&quot; term specifically."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 3, "last_activity_date": 1501357746, "last_edit_date": 1501357746, "creation_date": 1431625357, "answer_id": 30243857, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let/30243857#30243857", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>A mutable reference is a <em>very</em> strong guarantee: that there's only one pointer to a particular memory location. Since you've already had one <code>&amp;mut</code> borrow, you can't also have a second. That would introduce a data race in a multithreaded context, and iterator invalidation and other similar issues in a single-threaded context.</p>\n\n<p>Right now, borrows are based on lexical scope, and so the first borrow lasts until the end of the function, period. Eventually, we hope to relax this restriction, but it will take some work.</p>\n"}, {"comments": [{"owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "edited": false, "score": 1, "creation_date": 1431626395, "post_id": 30243978, "comment_id": 48589242, "body": "This works even if you remove the braces around the <code>if let</code> expression."}, {"owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "edited": false, "score": 0, "creation_date": 1431706190, "post_id": 30243978, "comment_id": 48628121, "body": "Answer accepted because you also gave a work around in addition to an explanation."}, {"owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "edited": false, "score": 0, "creation_date": 1431706670, "post_id": 30243978, "comment_id": 48628428, "body": "However I think the follow up question has not been answered fully. &quot;self remains borrowed as long as the return value from f1 is in scope.&quot; sounds like an artifact of the way the borrow checker works now. There are several different lifetimes conflated with each other here the <code>self.f1</code> borrow does not have the same lifetime as the <code>self.f3</code> borrow still they are represented by the same lifetime <code>&#39;a</code>."}], "tags": [], "owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "is_accepted": true, "score": 6, "last_activity_date": 1501359244, "last_edit_date": 1501359244, "creation_date": 1431625730, "answer_id": 30243978, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let/30243978#30243978", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>It's annoying, but you can work around this by introducing an inner scope and changing the control flow a bit:</p>\n\n<pre><code>fn f3(&amp;mut self) {\n    {\n        if let Some(x) = self.f1() {\n            // ...\n            return;\n        }\n    }\n    self.f2()\n}\n</code></pre>\n\n<p>As pointed out in the comments, this works without the extra braces.  This is because an <code>if</code> or <code>if...let</code> expression has an implicit scope, and the borrow lasts for this scope:</p>\n\n<pre><code>fn f3(&amp;mut self) {\n    if let Some(x) = self.f1() {\n        // ...\n        return;\n    }\n\n    self.f2()\n}\n</code></pre>\n\n<p>Here's a log of an IRC chat between Sandeep Datta and mbrubeck:</p>\n\n<blockquote>\n  <p><strong>mbrubeck:</strong> std:tr::Chars contains a borrowed reference to the string that created it. The full type name is <code>Chars&lt;'a&gt;</code>. So <code>f1(&amp;mut self) -&gt; Option&lt;Chars&gt;</code> without elision is <code>f1(&amp;'a mut self) -&gt; Option&lt;Chars&lt;'a&gt;&gt;</code> which means that <code>self</code> remains borrowed as long as\n  the return value from <code>f1</code> is in scope.</p>\n  \n  <p><strong>Sandeep Datta:</strong> Can I use 'b for self and 'a for Chars to avoid this problem?</p>\n  \n  <p><strong>mbrubeck:</strong> Not if you are actually returning an iterator over something from <code>self</code>. Though if you can make a function from <code>&amp;self -&gt; Chars</code> (instead of <code>&amp;mut self -&gt; Chars</code>) that would fix the issue.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 11, "last_activity_date": 1501357688, "last_edit_date": 1501357688, "creation_date": 1431626563, "answer_id": 30244219, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let/30244219#30244219", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>I put together an example to show off the scoping rules here:</p>\n\n<pre><code>struct Foo {\n    a: i32,\n}\n\nimpl Drop for Foo {\n    fn drop(&amp;mut self) {\n        println!(\"Foo: {}\", self.a);\n    }\n}\n\nfn generate_temporary(a: i32) -&gt; Option&lt;Foo&gt; {\n    if a != 0 { Some(Foo { a: a }) } else { None }\n}\n\nfn main() {\n    {\n        println!(\"-- 0\");\n        if let Some(foo) = generate_temporary(0) {\n            println!(\"Some Foo {}\", foo.a);\n        } else {\n            println!(\"None\");\n        }\n        println!(\"-- 1\");\n    }\n    {\n        println!(\"-- 0\");\n        if let Some(foo) = generate_temporary(1) {\n            println!(\"Some Foo {}\", foo.a);\n        } else {\n            println!(\"None\");\n        }\n        println!(\"-- 1\");\n    }\n    {\n        println!(\"-- 0\");\n        if let Some(Foo { a: 1 }) = generate_temporary(1) {\n            println!(\"Some Foo {}\", 1);\n        } else {\n            println!(\"None\");\n        }\n        println!(\"-- 1\");\n    }\n    {\n        println!(\"-- 0\");\n        if let Some(Foo { a: 2 }) = generate_temporary(1) {\n            println!(\"Some Foo {}\", 1);\n        } else {\n            println!(\"None\");\n        }\n        println!(\"-- 1\");\n    }\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>-- 0\nNone\n-- 1\n-- 0\nSome Foo 1\nFoo: 1\n-- 1\n-- 0\nSome Foo 1\nFoo: 1\n-- 1\n-- 0\nNone\nFoo: 1\n-- 1\n</code></pre>\n\n<p>In short, it seems that the expression in the <code>if</code> clause lives through both the <code>if</code> block and the <code>else</code> block.</p>\n\n<p>On the one hand it is not surprising since it is indeed required to live longer than the <code>if</code> block, but on the other hand it does indeed prevent useful patterns.</p>\n\n<p>If you prefer a visual explanation:</p>\n\n<pre><code>if let pattern = foo() {\n    if-block\n} else {\n    else-block\n}\n</code></pre>\n\n<p>desugars into:</p>\n\n<pre><code>{\n    let x = foo();\n    match x {\n    pattern =&gt; { if-block }\n    _ =&gt; { else-block }\n    }\n}\n</code></pre>\n\n<p>while you would prefer that it desugars into:</p>\n\n<pre><code>bool bypass = true;\n{\n    let x = foo();\n    match x {\n    pattern =&gt; { if-block }\n    _ =&gt; { bypass = false; }\n    }\n}\nif not bypass {\n    else-block\n}\n</code></pre>\n\n<p>You are not the first one being tripped by this, so this may be addressed at some point, despite changing the meaning of some code (guards, in particular).</p>\n"}, {"tags": [], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "is_accepted": false, "score": 3, "last_activity_date": 1501357896, "last_edit_date": 1501357896, "creation_date": 1431712282, "answer_id": 30265809, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let/30265809#30265809", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>Here is how you can get rid of the spurious errors. I am new to Rust so there may be serious errors in the following explanation.</p>\n\n<pre><code>use std::str::Chars;\n\nstruct A&lt;'a&gt; {\n    chars: Chars&lt;'a&gt;,\n}\n</code></pre>\n\n<p>The <code>'a</code> here is a lifetime parameter (just like template parameters in C++). Types can be parameterised by lifetimes in Rust.</p>\n\n<p>The <code>Chars</code> type also takes a lifetime parameter. What this implies is that the <code>Chars</code> type probably has a member element which needs a lifetime parameter. Lifetime parameters only make sense on references (since lifetime here actually means \"lifetime of a borrow\"). </p>\n\n<p>We know that <code>Chars</code> needs to keep a reference to the string from which it was created, <code>'a</code> will probably be used to denote the source string's lifetime.</p>\n\n<p>Here we simply supply <code>'a</code> as the lifetime parameter to <code>Chars</code> telling the Rust compiler that the lifetime of <code>Chars</code> is the same as the lifetime of the struct <code>A</code>. IMO \"lifetime 'a of type A\" should be read as \"lifetime 'a of the references contained in the struct A\".</p>\n\n<p>I think the struct implementation can be parameterised independently from the struct itself hence we need to repeat the parameters with the <code>impl</code> keyword. Here we bind the name 'a to the lifetime of the struct A.</p>\n\n<pre><code>impl&lt;'a&gt; A&lt;'a&gt; {\n</code></pre>\n\n<p>The name <code>'b</code> is introduced in the context of the function <code>f2</code>. Here it is used to bind with the lifetime of the reference <code>&amp;mut self</code>.</p>\n\n<pre><code>fn f2&lt;'b&gt;(&amp;'b mut self) {}\n</code></pre>\n\n<p>The name <code>'b</code> is introduced in the context of the function <code>f1</code>.This <code>'b</code> does not have a direct relationship with the <code>'b</code> introduced by <code>f2</code> above. </p>\n\n<p>Here it is used to bind with the lifetime of the reference <code>&amp;mut self</code>. Needless to say this reference also does not have any relationship with the <code>&amp;mut self</code> in the previous function, this is a new independent borrow of <code>self</code>.</p>\n\n<p>Had we not used explicit lifetime annotation here Rust would have used its lifetime elision rules to arrive at the following function signature...</p>\n\n<pre><code>//fn f1&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;Chars&lt;'a&gt;&gt;\n</code></pre>\n\n<p>As you can see this binds the lifetime of the reference <code>&amp;mut self</code> parameter to the lifetime of the <code>Chars</code> object being returned from this function (this <code>Chars</code> object need not be the same as <code>self.chars</code>) this is absurd since the returned <code>Chars</code> will outlive the <code>&amp;mut self</code> reference. Hence we need to separate the two lifetimes as follows...</p>\n\n<pre><code>fn f1&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;Chars&lt;'a&gt;&gt; {\n    self.chars.next();\n</code></pre>\n\n<p>Remember <code>&amp;mut self</code> is a borrow of <code>self</code> and anything referred to by <code>&amp;mut self</code> is also a borrow. Hence we cannot return <code>Some(self.chars)</code> here. <code>self.chars</code> is not ours to give (Error: cannot move out of borrowed content.). </p>\n\n<p>We need to create a clone of <code>self.chars</code> so that it can be given out.</p>\n\n<pre><code>Some(self.chars.clone())\n</code></pre>\n\n<p>Note here the returned <code>Chars</code> has the same lifetime as the struct A.</p>\n\n<p>And now here is <code>f3</code> unchanged and without compilation errors!</p>\n\n<pre><code>fn f3&lt;'b&gt;(&amp;'b mut self)  {\n    if let Some(x) = self.f1() { //This is ok now\n\n    } else {\n        self.f2() //This is also ok now\n    }\n}\n</code></pre>\n\n<p>The main function just for completeness...</p>\n\n<pre><code>fn main() {\n    let mut a = A { chars:\"abc\".chars() };\n\n    a.f3();\n\n    for c in a.chars {\n        print!(\"{}\", c);\n    }\n}\n</code></pre>\n\n<p>I have updated the code the make the lifetime relationships clearer.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1544025219, "creation_date": 1544025219, "answer_id": 53636084, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let/53636084#53636084", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>As of Rust 2018, available in Rust 1.31, the <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=1a09e7ce2bac27db09b8c215fac82e2f\" rel=\"nofollow noreferrer\">original code will work as-is</a>. This is because Rust 2018 enables <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a>.</p>\n"}], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2994, "favorite_count": 2, "accepted_answer_id": 30243978, "answer_count": 5, "score": 12, "last_activity_date": 1544025219, "creation_date": 1431624534, "last_edit_date": 1501357383, "question_id": 30243606, "link": "https://stackoverflow.com/questions/30243606/why-is-a-borrow-still-held-in-the-else-block-of-an-if-let", "title": "Why is a borrow still held in the else block of an if let?", "body": "<p>Why does the call <code>self.f2()</code> in the following code trip the borrow checker? Isn't the else block in a different scope? This is quite a  conundrum!</p>\n\n<pre><code>use std::str::Chars;\n\nstruct A;\n\nimpl A {\n    fn f2(&amp;mut self) {}\n\n    fn f1(&amp;mut self) -&gt; Option&lt;Chars&gt; {\n        None\n    }\n\n    fn f3(&amp;mut self) {\n        if let Some(x) = self.f1() {\n\n        } else {\n            self.f2()\n        }\n    }\n}\n\nfn main() {\n    let mut a = A;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=233df12995163bd046c1102cbc6e7e23&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src/main.rs:16:13\n   |\n13 |         if let Some(x) = self.f1() {\n   |                          ---- first mutable borrow occurs here\n...\n16 |             self.f2()\n   |             ^^^^ second mutable borrow occurs here\n17 |         }\n   |         - first borrow ends here\n</code></pre>\n\n<p>Doesn't the scope of the borrow for self begin and end with the <code>self.f1()</code> call? Once the call from <code>f1()</code> has returned <code>f1()</code> is not using self anymore hence the borrow checker should not have any problem with the second borrow. Note the following code fails too...</p>\n\n<pre><code>// ...\nif let Some(x) = self.f1() {\n    self.f2()\n}\n// ...\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ea17e84ea5fb55c9aed6aa62b17cdaf4&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<p>I think the second borrow should be fine here since <code>f1</code> and <code>f3</code> are not using <code>self</code> at the same time as <code>f2</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3648, "user_id": 1118660, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/aaef8abaea3dc9d8ad119ceba8900aac?s=128&d=identicon&r=PG", "display_name": "Jason Watkins", "link": "https://stackoverflow.com/users/1118660/jason-watkins"}, "edited": false, "score": 1, "creation_date": 1431624046, "post_id": 30243100, "comment_id": 48587895, "body": "<code>HashMap</code>s are inherently unordered collections, and <code>BTree</code>s are inherently ordered by their keys. It doesn&#39;t actually make sense to talk about ordering either type by insertion order."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 3648, "user_id": 1118660, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/aaef8abaea3dc9d8ad119ceba8900aac?s=128&d=identicon&r=PG", "display_name": "Jason Watkins", "link": "https://stackoverflow.com/users/1118660/jason-watkins"}, "edited": false, "score": 0, "creation_date": 1490442443, "post_id": 30243100, "comment_id": 73120423, "body": "@JasonWatkins There are variants of <code>HashMap</code> that natively retain insertion order as a consequence of their design. For example, Python 3.6 made hash tables more compact by splitting the table into a dense array of entries and a sparse array of indices. This saves space, speeds up iteration, and <a href=\"http://stackoverflow.com/questions/39980323/dictionaries-are-ordered-in-cpython-3-6\">maintains insertion order</a>, although the latter is still considered an implementation detail."}], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 4, "creation_date": 1461594026, "post_id": 30243273, "comment_id": 61256089, "body": "If external crates are allowed, the <a href=\"https://crates.io/crates/linked-hash-map\" rel=\"nofollow noreferrer\">linked-hash-map</a> crate is such a collection tracking insertion order."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1431623438, "creation_date": 1431623438, "answer_id": 30243273, "question_id": 30243100, "link": "https://stackoverflow.com/questions/30243100/how-do-i-sort-a-map-by-order-of-insertion/30243273#30243273", "title": "How do I sort a map by order of insertion?", "body": "<p>The default collections do not track order of insertion. If you wish to sort by that, you will need to either find a different collection that <em>does</em> track it, or track it yourself.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1431625572, "creation_date": 1431625572, "answer_id": 30243926, "question_id": 30243100, "link": "https://stackoverflow.com/questions/30243100/how-do-i-sort-a-map-by-order-of-insertion/30243926#30243926", "title": "How do I sort a map by order of insertion?", "body": "<p>Associative containers (containers that map a key to a value) usually use one of two strategies to be able to look-up a key efficiently:</p>\n\n<ul>\n<li>either they sort the keys according to some comparison operation</li>\n<li>or they hash the keys according to some hashing operation</li>\n</ul>\n\n<p>Here, you have the two archetypes: <code>BTree</code> sorts the key and <code>HashMap</code> hashes them.</p>\n\n<hr>\n\n<p>If you <em>solely</em> wish to track the order of insertion, then an associative container is the wrong choice of container, what you wish for is a sequence container such as <code>std::vec::Vec</code>: always push the items at the end, and you can iterate over them in the order they were inserted.</p>\n\n<p><em>Note: I advice writing a wrapper to prevent unwanted insertions anywhere else.</em></p>\n\n<hr>\n\n<p>If, on the other hand, you want to have an associative container which <em>also</em> tracks insertion order, then what you are asking for does not exist yet in Rust as far as I know.</p>\n\n<p>In C++, the go-to solution is called Boost.MultiIndex which allows you to create a container which you can query in multiple different ways; it is a quite complex piece of software, as you can see yourself if you browse its source. It might come to Rust, in time, but if you need something now you will have to hand-roll your own solution I fear; you can use the Boost code as a lean-to, although from experience it can be hard to read/understand.</p>\n"}, {"tags": [], "owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "is_accepted": false, "score": 1, "last_activity_date": 1617038831, "creation_date": 1617038831, "answer_id": 66858810, "question_id": 30243100, "link": "https://stackoverflow.com/questions/30243100/how-do-i-sort-a-map-by-order-of-insertion/66858810#66858810", "title": "How do I sort a map by order of insertion?", "body": "<p>None of the standard library collections maintain a consistent order. You can instead use <code>IndexMap</code> from the <a href=\"https://github.com/bluss/indexmap\" rel=\"nofollow noreferrer\"><code>indexmap</code></a> crate, which preserves insertion order as long as you don't call <code>remove</code>.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use indexmap::indexmap;\n\nlet map = indexmap! {\n    &quot;Z&quot; =&gt; 1,\n    &quot;T&quot; =&gt; 2,\n    &quot;R&quot; =&gt; 3,\n    &quot;P&quot; =&gt; 4,\n    &quot;K&quot; =&gt; 5,\n    &quot;W&quot; =&gt; 6,\n};\n    \nfor (k, v) in map {\n    println!(&quot;{}: {}&quot;, k, v);\n}\n\n// Z: 1\n// T: 2\n// R: 3\n// P: 4\n// K: 5\n// W: 6\n</code></pre>\n<p>It accomplishes this by storing a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys. This mean that lookups may be <em>slower</em> than the standard <code>HashMap</code>, but iteration and removal is very <em>fast</em>.</p>\n"}], "owner": {"reputation": 113, "user_id": 4900730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c0feecb58c40a85ad526f6bd849c9344?s=128&d=identicon&r=PG&f=1", "display_name": "Flammantis", "link": "https://stackoverflow.com/users/4900730/flammantis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6353, "favorite_count": 2, "accepted_answer_id": 30243273, "answer_count": 3, "score": 11, "last_activity_date": 1617038831, "creation_date": 1431622911, "last_edit_date": 1490398848, "question_id": 30243100, "link": "https://stackoverflow.com/questions/30243100/how-do-i-sort-a-map-by-order-of-insertion", "title": "How do I sort a map by order of insertion?", "body": "<p>I have tried using <code>HashMap</code> and <code>BTreeMap</code> for this but neither have worked:</p>\n\n<pre><code>use std::collections::{BTreeMap, HashMap};\n\nfn main() {\n    let mut btreemap = BTreeMap::new();\n    println!(\"BTreeMap\");\n    btreemap.insert(\"Z\", \"1\");\n    btreemap.insert(\"T\", \"2\");\n    btreemap.insert(\"R\", \"3\");\n    btreemap.insert(\"P\", \"4\");\n    btreemap.insert(\"K\", \"5\");\n    btreemap.insert(\"W\", \"6\");\n    btreemap.insert(\"G\", \"7\");\n    btreemap.insert(\"C\", \"8\");\n    btreemap.insert(\"A\", \"9\");\n    btreemap.insert(\"D\", \"0\");\n    for (key, value) in btreemap {\n        println!(\"{} {}\", key, value);\n    }\n    println!(\"Hash Map\");\n    let mut hashmap = HashMap::new();\n    hashmap.insert(\"Z\", \"1\");\n    hashmap.insert(\"T\", \"2\");\n    hashmap.insert(\"R\", \"3\");\n    hashmap.insert(\"P\", \"4\");\n    hashmap.insert(\"K\", \"5\");\n    hashmap.insert(\"W\", \"6\");\n    hashmap.insert(\"G\", \"7\");\n    hashmap.insert(\"C\", \"8\");\n    hashmap.insert(\"A\", \"9\");\n    hashmap.insert(\"D\", \"0\");\n    for (key, value) in hashmap {\n        println!(\"{} {}\", key, value);\n    }\n}\n</code></pre>\n\n<p>When I run this via the <a href=\"https://play.rust-lang.org/?gist=f3ce2fc0fd28716006398233c02c1fe7&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Rust playground</a>, I get a result that is not sorted by order of insertion; <code>BTreeMap</code> appears to be ordered alphabetically (prints <code>A  C  D  G  K  P  R  T  W  Z</code>, along with the numbers) and <code>HashMap</code> seems to be ordered randomly (prints <code>Z A C D R P T G WK</code> ). </p>\n\n<p>I've looked through the Rust standard library documentation and I don't see any other maps.</p>\n"}, {"tags": ["arrays", "heap", "rust"], "answers": [{"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1431624268, "post_id": 30243055, "comment_id": 48588036, "body": "Note that there is <code>box</code> syntax which is supposed to help with this but it is unstable now and I&#39;m not sure if it supports direct heap placement of arrays yet."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 3, "creation_date": 1432639977, "post_id": 30243055, "comment_id": 48995265, "body": "You should be able to use <code>vec![10.0; 1024 * 1024]</code>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 19, "last_activity_date": 1546267494, "last_edit_date": 1546267494, "creation_date": 1431622783, "answer_id": 30243055, "question_id": 30242770, "link": "https://stackoverflow.com/questions/30242770/how-to-allocate-arrays-on-the-heap-in-rust-1-0/30243055#30243055", "title": "How to allocate arrays on the heap in Rust 1.0?", "body": "<p>The problem is that the array is being passed to the <code>Box::new</code> function as an argument, which means it has to be created <em>first</em>, which means it has to be created <em>on the stack</em>.</p>\n\n<p>You're asking the compiler to create <em>8 megabytes</em> of data on the stack: that's what's overflowing it.</p>\n\n<p>The solution is to not use a fixed-size array at all, but a <code>Vec</code>.  The simplest way I can think of to make a <code>Vec</code> of 8 million <code>10.0</code> is this:</p>\n\n<pre><code>fn main() {\n    const SIZE: usize = 1024 * 1024;\n    let v = vec![10.0; SIZE];\n}\n</code></pre>\n\n<p>Or, if for some reason you'd rather use iterators:</p>\n\n<pre><code>use std::iter::repeat;\n\nfn main() {\n    const SIZE: usize = 1024 * 1024;\n    let v: Vec&lt;_&gt; = repeat(10.0).take(SIZE).collect();\n}\n</code></pre>\n\n<p>This <em>should</em> only perform a single heap allocation.</p>\n\n<p>Note that you can subsequently take a <code>Vec</code> and turn it into a <code>Box&lt;[_]&gt;</code> by using the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_boxed_slice\" rel=\"nofollow noreferrer\"><code>into_boxed_slice</code></a> method.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/33704592/155423\">Performance comparison of a Vec and a boxed slice</a></li>\n</ul>\n"}], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4473, "favorite_count": 1, "accepted_answer_id": 30243055, "answer_count": 1, "score": 14, "last_activity_date": 1546267494, "creation_date": 1431621920, "last_edit_date": 1496935112, "question_id": 30242770, "link": "https://stackoverflow.com/questions/30242770/how-to-allocate-arrays-on-the-heap-in-rust-1-0", "title": "How to allocate arrays on the heap in Rust 1.0?", "body": "<p>There is already a <a href=\"https://stackoverflow.com/questions/26637158/stack-overflow-with-large-fixed-size-array-in-rust-0-13\">question</a> for this but related to Rust 0.13 and the syntax seems to have changed. From the current <a href=\"http://doc.rust-lang.org/1.0.0-beta/book/pointers.html#cheat-sheet\" rel=\"noreferrer\">documentation</a> I understood that creating an array on the heap would be something like this:</p>\n\n<pre><code>fn main() {\n    const SIZE: usize = 1024 * 1024;\n    Box::new([10.0; SIZE]);\n}\n</code></pre>\n\n<p>But when I run this program I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread '&lt;main&gt;' has overflowed its stack\n</code></pre>\n\n<p>What am I doing wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431617585, "post_id": 30241134, "comment_id": 48583908, "body": "For reference, this isn&#39;t an issue with non-primitives, this is an issue with any type that has <i>generic types</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431617666, "post_id": 30241134, "comment_id": 48583975, "body": "And for extreme pedanticness, the name is <a href=\"http://en.wikipedia.org/wiki/Fibonacci\" rel=\"nofollow noreferrer\">Fibonacci</a>, with one &quot;b&quot;. ^_^"}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431617679, "post_id": 30241134, "comment_id": 48583985, "body": "@Shepmaster thanks - I&#39;m sure the &quot;generic types&quot; bit will make sense to me when I get beyond &quot;Xtreme N00b&quot; level. :)"}, {"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1431617782, "post_id": 30241134, "comment_id": 48584047, "body": "@Shepmaster Well, they did force me to misspell &quot;standard&quot; as &quot;std&quot;. :)"}], "answers": [{"comments": [{"owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "edited": false, "score": 0, "creation_date": 1431617579, "post_id": 30241258, "comment_id": 48583905, "body": "&quot;it...tells you that you need 2 type arguments&quot; - ah, I thought it meant I needed two for the definition of <code>fibbonacci</code>, not for the HashMap. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1500330976, "last_edit_date": 1500330976, "creation_date": 1431617421, "answer_id": 30241258, "question_id": 30241134, "link": "https://stackoverflow.com/questions/30241134/how-do-i-specify-that-a-function-takes-a-hashmap/30241258#30241258", "title": "How do I specify that a function takes a HashMap?", "body": "<p>Let's check out the compiler error message for this code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn fibbonacci(n: i32, cache: HashMap) -&gt; i32 {}\n\nfn main() {}\n</code></pre>\n\n<p>We get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected at least 2, found 0\n --&gt; src/main.rs:3:29\n  |\n3 | fn fibonacci(n: i32, cache: HashMap) -&gt; i32 {}\n  |                             ^^^^^^^ expected at least 2 type arguments\n</code></pre>\n\n<p>Note that it points directly to the issue and tells you that you need 2 <em>type arguments</em>. Rust requires that function arguments and return values be fully spelled out, there is no type inference at this point.</p>\n\n<p>I don't know what you want the keys and values to be, so I'll assume <code>i32</code>:</p>\n\n<pre><code>fn fibonacci(n: i32, cache: HashMap&lt;i32, i32&gt;) -&gt; i32 { 0 }\n</code></pre>\n\n<p>More verbosely, <a href=\"http://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\"><code>HashMap</code> has two <em>generic type parameters</em></a>, referred to as <code>K</code> and <code>V</code> (but see note below). To reference a concrete type of <code>HashMap</code>, you need to specify what <code>K</code> and <code>V</code> are. You can also use more <em>generic</em> types but place <em>trait bounds</em> on the generics. This is a bit more advanced, and you don't need to worry about it to get started with Rust!</p>\n\n<p><strong>note</strong> - <code>HashMap</code> actually has 3 type parameters, but the third has a default value and isn't often used. That type parameter allows controlling the hashing algorithm used.</p>\n"}], "owner": {"reputation": 113292, "user_id": 4376, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b9c927e051202fc198e70659d9827d2f?s=128&d=identicon&r=PG", "display_name": "Nathan Long", "link": "https://stackoverflow.com/users/4376/nathan-long"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2065, "favorite_count": 1, "answer_count": 1, "score": 4, "last_activity_date": 1500330976, "creation_date": 1431617101, "last_edit_date": 1431617471, "question_id": 30241134, "link": "https://stackoverflow.com/questions/30241134/how-do-i-specify-that-a-function-takes-a-hashmap", "title": "How do I specify that a function takes a HashMap?", "body": "<p>How do I specify a non-primitive type as a Rust function parameter - specifically, a <code>HashMap</code>? For example:</p>\n\n<pre><code>use std::collections::HashMap;\n\n// a main function that would call fibbonacci...\n\n// Here the hashmap would be used for memoizing;\n// maybe ugly, but it's a first attempt\nfn fibbonacci(n: i32, cache: ??) -&gt; i32 {\n}\n</code></pre>\n\n<p>I've tried:</p>\n\n<ul>\n<li><code>cache: Hashmap</code> => <code>wrong number of type arguments: expected at least 2, found 0</code></li>\n<li><code>cache: &lt;HashMap&gt;</code> => <code>error: expected ::, found )</code></li>\n<li><code>cache: std::collections::HashMap</code> => <code>wrong number of type arguments: expected at least 2, found 0</code></li>\n</ul>\n\n<p><img src=\"https://i.stack.imgur.com/DNRwW.jpg\" alt=\"Dog wearing a tie with paws on a computer keyboard and tongue hanging out - &quot;I have no idea what I&#39;m doing&quot;\"></p>\n\n<p>This is with Rust 1.0.0.beta.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1431610604, "creation_date": 1431610604, "answer_id": 30238816, "question_id": 30238570, "link": "https://stackoverflow.com/questions/30238570/implement-trait-for-trait-with-static-function/30238816#30238816", "title": "Implement trait for trait with static function", "body": "<p>It comes down to a matter known as <em>object safety</em>, which you can find information of in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\" rel=\"noreferrer\">RFC 255</a>; Huon has <a href=\"http://huonw.github.io/blog/2015/01/object-safety/\" rel=\"noreferrer\">a good explanation of object safety in his blog</a>, too.</p>\n\n<p>Basically, making a trait object requires an implied definition of the trait for its own trait object; in this case, that would be <code>impl&lt;'a, T&gt; Trait&lt;T&gt; for Trait&lt;T&gt; + 'a</code>. If it is possible to write meaningful definitions of all the methods, then a trait is object safe. Static methods don\u2019t make sense in this context\u2014what would the body of <code>fn equality() -&gt; bool</code> be, with no <code>Self</code> type around to call the <code>equality</code> method on? It would need to pull a boolean out of thin air, which it respectfully declines to do.</p>\n"}, {"comments": [{"owner": {"reputation": 197, "user_id": 1849431, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/3a349d50001ce31e35e2888c83114c12?s=128&d=identicon&r=PG", "display_name": "hpohl", "link": "https://stackoverflow.com/users/1849431/hpohl"}, "edited": false, "score": 1, "creation_date": 1431612939, "post_id": 30239602, "comment_id": 48580657, "body": "Yes, I knew that already. The static method was originally called new, so staticness was required."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 0, "last_activity_date": 1431612781, "creation_date": 1431612781, "answer_id": 30239602, "question_id": 30238570, "link": "https://stackoverflow.com/questions/30238570/implement-trait-for-trait-with-static-function/30239602#30239602", "title": "Implement trait for trait with static function", "body": "<p>Expanding on Chris' answer, what you probably want is <code>fn equality(&amp;self) -&gt; bool</code>. <code>fn equality() -&gt; bool</code> is a static method, also known as an associated function. It is called as <code>Trait::equality()</code>, not <code>obj.equality()</code>, and can't access the fields and methods of the object it is called on.</p>\n"}], "owner": {"reputation": 197, "user_id": 1849431, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/3a349d50001ce31e35e2888c83114c12?s=128&d=identicon&r=PG", "display_name": "hpohl", "link": "https://stackoverflow.com/users/1849431/hpohl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1572, "favorite_count": 0, "accepted_answer_id": 30238816, "answer_count": 2, "score": 2, "last_activity_date": 1431612781, "creation_date": 1431609941, "question_id": 30238570, "link": "https://stackoverflow.com/questions/30238570/implement-trait-for-trait-with-static-function", "title": "Implement trait for trait with static function", "body": "<pre><code>trait Trait&lt;T&gt; {\n    fn equality() -&gt; bool;\n}\n\nimpl&lt;T&gt; PartialEq for Trait&lt;T&gt; {\n    fn eq(&amp;self, other: &amp;Trait&lt;T&gt;) -&gt; bool {\n        self.equality()\n    }\n}\n</code></pre>\n\n<p>Results in</p>\n\n<pre><code>main.rs:5:23: 5:31 error: the trait `Trait` cannot be made into an object [E0372]\nmain.rs:5 impl&lt;T&gt; PartialEq for Trait&lt;T&gt; {\n</code></pre>\n\n<p>Removing the static method makes it compilable. Methods with &amp;self parameter compile, too.</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1431593789, "post_id": 30232890, "comment_id": 48568781, "body": "The right way is not to panic in the first place but to use proper error handling, returning errors and that sort of thing."}, {"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1431596823, "post_id": 30232890, "comment_id": 48570533, "body": "This is great, but it&#39;s easy to forget verifying an integer division. And it is easy to get a panic for out of bounds accessing elements in a vector with [ ]. Those are a couple of examples. Rust do a great job on compiling checking, but it doesn&#39;t force us to verify bounds on vector access (when using &#39;[ ]&#39; neither force verification on integer division."}, {"owner": {"reputation": 817, "user_id": 3848441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6199c18fbe4695e7ea294cdf4053d3f7?s=128&d=identicon&r=PG&f=1", "display_name": "PEPP", "link": "https://stackoverflow.com/users/3848441/pepp"}, "edited": false, "score": 3, "creation_date": 1431601327, "post_id": 30232890, "comment_id": 48573194, "body": "Division error or out of bounds accesses are logical errors and should be fixed. I understand that it may be inconvenient that the program aborts but in C(++) it would crash anyway."}, {"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431601666, "post_id": 30232890, "comment_id": 48573386, "body": "That&#39;s something I don&#39;t like in C++. C++ has a lot of undefined behaviour and crashes. I like the idea of a compiler checking and warning about possible dangling pointers, null pointers, unchecked access, etc... In C++ I work with a wrapper of stl containers in order to avoid undefined behaviour with iterators."}], "answers": [{"comments": [{"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431600987, "post_id": 30233278, "comment_id": 48573002, "body": "I like the Resutl, Option, and try! error control, but you can write code not compabible with it.    Even more, in some cases, it&#39;s easier to write code producing panics than code with error control.    A couple of examples is division and out of bounds in vector.    It&#39;s easier to make a division with operator / than calling checked_div.    It&#39;s easier to call my_vector[n] than  my_vector.as_slice.get(2).And compiler don&#39;t warn you.    as_slice is marked unstable... Unstable: waiting on RFC revision"}, {"owner": {"reputation": 7982, "user_id": 2679626, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/1ae2587956371769336745ff9ef4dab0?s=128&d=identicon&r=PG", "display_name": "Denilson Amorim", "link": "https://stackoverflow.com/users/2679626/denilson-amorim"}, "edited": false, "score": 1, "creation_date": 1431609297, "post_id": 30233278, "comment_id": 48578152, "body": "Again, as @PEEP pointed out in the OP comments, if you have a unintended division by zero or out of bounds access, you have a logic error in your program, which you must correct."}, {"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431610338, "post_id": 30233278, "comment_id": 48578824, "body": "I absolutly agree. In C++ a dangling pointer a race condition accessing to some data, etc... are also program logic errors and they have to be fixed. But I don&#39;t like when the program stops or crash due to a logic error."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431610391, "post_id": 30233278, "comment_id": 48578857, "body": "@JoseLuis <code>my_vector.as_slice().get(2)</code> can be written simply as <code>my_vector.get(2)</code> due to autoderef. <code>as_slice()</code> itself can always be replaced by <code>[..]</code>, i.e. <code>my_vector[..][2]</code>.  Panics in a single threaded program should always indicate bugs OR a wanted crash.  Panics in a multithreaded program additionally can be used to bring a thread down (intentionally). Don&#39;t use them for C++-style exception handling; Rust isn&#39;t designed for that."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 2, "creation_date": 1431610426, "post_id": 30233278, "comment_id": 48578887, "body": "If you treat Rust as if it&#39;s C++ and program with the same paradigms; stuff isn&#39;t going to work."}, {"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431620080, "post_id": 30233278, "comment_id": 48585517, "body": "@Manishearth  thanks for your answer.  That&#39;s the point. I don&#39;t want to work with Rust as I do in C++, but I want to avoid program stopping due to simple errors on it. I like Rust avoiding dangling pointers, null pointers, race condicions, etc... I just want to know what&#39;s the right way to deal with these kind of errors that generate panics and program stopping."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "reply_to_user": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431623158, "post_id": 30233278, "comment_id": 48587362, "body": "@JoseLuis You should use the non panicky versions of the API. Yes, in some cases it&#39;s more verbose, but the choice of verbosity is usually made in situations where a failure is almost always indicative of a bug."}, {"owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "edited": false, "score": 0, "creation_date": 1431623221, "post_id": 30233278, "comment_id": 48587409, "body": "Also, there&#39;s not many other ways to structure the <code>&#47;</code> operator -- would you have it output NaN? What about integer division? It would be much, much worse to output an <code>Option</code>"}, {"owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "edited": false, "score": 0, "creation_date": 1431800797, "post_id": 30233278, "comment_id": 48656797, "body": "Thanks for all the answers. I think that, if it&#39;s critical to avoid program stopping, creating a thread is the way to avoid it and deal with potential program defects which could throw a panic and stop the hole program."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": false, "score": 7, "last_activity_date": 1431594171, "creation_date": 1431594171, "answer_id": 30233278, "question_id": 30232890, "link": "https://stackoverflow.com/questions/30232890/what-is-the-right-way-to-capture-panics/30233278#30233278", "title": "What is the right way to capture panics?", "body": "<p>Rust panics aren't intended to be caught in most cases. Unstable Rust provides this functionality, but you should only be using it if you have a really complex situation (say, you're writing a test harness for other Rust programs and need to hook into the panic handler) where you can't bubble up the error.</p>\n\n<p>In Rust, error handling is done by returning <a href=\"https://doc.rust-lang.org/nightly/std/result/enum.Result.html\"><code>Result&lt;T,E&gt;</code></a>s (sometimes <code>Option&lt;T&gt;</code>, bubbling them up with <code>try!()</code>, and handling them with <code>match</code>.</p>\n\n<p>Most panicky methods have non-panicky versions; for example a checked version of divide is <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html#method.checked_div\"><code>checked_div()</code></a>, and you can use <code>try!</code> to return the errors from the string parsing.</p>\n"}], "owner": {"reputation": 21, "user_id": 4898984, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OYH1OWVHATg/AAAAAAAAAAI/AAAAAAAAAC4/gs2Dc4mWF-k/photo.jpg?sz=128", "display_name": "Jose Luis", "link": "https://stackoverflow.com/users/4898984/jose-luis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1431609063, "creation_date": 1431592845, "last_edit_date": 1431609063, "question_id": 30232890, "link": "https://stackoverflow.com/questions/30232890/what-is-the-right-way-to-capture-panics", "title": "What is the right way to capture panics?", "body": "<p>Frequently we don't want our program stopping due to out of bounds, division by 0 or similar panics. However, <code>std::thread::catch_panic</code> is marked us unstable. We could write...</p>\n\n<pre><code>let result = Thread::scoped(move || {\n        make_a_division_for_ever()\n    }).join();\n    if result.is_ok() {\n        println!(\"Finished OK\");\n    }\n</code></pre>\n\n<p>Is this the right way to capture panics (like division by 0 or out of bounds)?</p>\n\n<p>A complete example...</p>\n\n<pre><code>use std::thread::Thread;\n\nfn main() {\n    println!(\"Make divisions for ever\");\n\n    loop {\n        let result = Thread::scoped(move || {\n            make_a_division_for_ever()\n        }).join();\n        if result.is_ok() {\n            println!(\"Finished OK\");\n        }\n        else {\n            println!(\"It CRASHED!!!  restarting...\");\n        }\n    }\n\n}\n\nfn make_a_division_for_ever() {\n    loop {\n        println!(\"Enter divisor...\");\n        let line = std::io::stdin()\n                .read_line()\n                .ok()\n                .expect(\"error reading line\");\n\n        let divisor = line.trim()\n                .parse::&lt;u32&gt;()\n                .expect(\"\nI coudn't parse your line as an string. I'm going to die\nI showed things closer than orion belt...\n        \");\n\n        println!(\"readed {}\", divisor);\n\n        let dangerous =  1_000_000 / divisor;\n\n        println!(\"DIV RESULT... {}\", dangerous);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "visual-studio-code"], "answers": [{"comments": [{"owner": {"reputation": 1315, "user_id": 812906, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/uy9sl.jpg?s=128&g=1", "display_name": "Dragonborn", "link": "https://stackoverflow.com/users/812906/dragonborn"}, "edited": false, "score": 0, "creation_date": 1431591533, "post_id": 30232470, "comment_id": 48567599, "body": "can we install this atom plugin to VSCode?"}], "tags": [], "owner": {"reputation": 226, "user_id": 2505233, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c31fd9bdfb590d7023076b8534e2eea1?s=128&d=identicon&r=PG", "display_name": "Dzmitry Misiuk", "link": "https://stackoverflow.com/users/2505233/dzmitry-misiuk"}, "is_accepted": false, "score": 1, "last_activity_date": 1431591233, "last_edit_date": 1495540313, "creation_date": 1431591233, "answer_id": 30232470, "question_id": 30232236, "link": "https://stackoverflow.com/questions/30232236/how-can-we-edit-rust-files-in-vscode/30232470#30232470", "title": "How can we edit Rust files in VSCode?", "body": "<p>For now VSCode doesn't support plugins <a href=\"https://stackoverflow.com/questions/30224784/visual-studio-code-plugins-format-spell-check\">Visual Studio Code Plugins (Format / Spell Check)</a></p>\n\n<p>I know that there is Rust plugin for Atom IDE <a href=\"https://github.com/zargony/atom-language-rust\" rel=\"nofollow noreferrer\">https://github.com/zargony/atom-language-rust</a> and VSCode is based on Atom.</p>\n"}, {"comments": [{"owner": {"reputation": 331, "user_id": 4894695, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OzkxP.jpg?s=128&g=1", "display_name": "Erich Gamma", "link": "https://stackoverflow.com/users/4894695/erich-gamma"}, "edited": false, "score": 2, "creation_date": 1433339668, "post_id": 30277046, "comment_id": 49310365, "body": "Rust syntax coloring is  now included in VS Code 0.3.0"}], "tags": [], "owner": {"reputation": 331, "user_id": 4894695, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OzkxP.jpg?s=128&g=1", "display_name": "Erich Gamma", "link": "https://stackoverflow.com/users/4894695/erich-gamma"}, "is_accepted": true, "score": 7, "last_activity_date": 1431787596, "creation_date": 1431787596, "answer_id": 30277046, "question_id": 30232236, "link": "https://stackoverflow.com/questions/30232236/how-can-we-edit-rust-files-in-vscode/30277046#30277046", "title": "How can we edit Rust files in VSCode?", "body": "<p>Support for Rust syntax coloring will be in the next VSCode update.</p>\n\n<p>\"VSCode is based on Atom\". This is not accurate. VSCode is built on top of the <a href=\"https://github.com/atom/electron\" rel=\"noreferrer\">Electron</a> (was the AtomShell), the editor and workbench are a totally different code based (the <a href=\"http://channel9.msdn.com/Series/Visual-Studio-Online-Monaco\" rel=\"noreferrer\">Monaco editor</a>)</p>\n"}], "owner": {"reputation": 1315, "user_id": 812906, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/uy9sl.jpg?s=128&g=1", "display_name": "Dragonborn", "link": "https://stackoverflow.com/users/812906/dragonborn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 579, "favorite_count": 0, "closed_date": 1432095480, "accepted_answer_id": 30277046, "answer_count": 2, "score": 1, "last_activity_date": 1431787596, "creation_date": 1431590392, "question_id": 30232236, "link": "https://stackoverflow.com/questions/30232236/how-can-we-edit-rust-files-in-vscode", "closed_reason": "Not suitable for this site", "title": "How can we edit Rust files in VSCode?", "body": "<p>I like the new VSCode and would love to use it for Rust programming. Are there any rust plugins available?</p>\n"}, {"tags": ["linux", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1431573020, "post_id": 30228598, "comment_id": 48560733, "body": "And for good measure, although this question is about Linux, OS X users can use <code>DYLD_LIBRARY_PATH</code> to the same end."}, {"owner": {"reputation": 18308, "user_id": 1375209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dweAo.png?s=128&g=1", "display_name": "toro2k", "link": "https://stackoverflow.com/users/1375209/toro2k"}, "edited": false, "score": 1, "creation_date": 1431611528, "post_id": 30228598, "comment_id": 48579641, "body": "On my system (Debian Jessie) this doesn&#39;t work, I have to use the path up to the <code>lib</code> component, i.e. <code>&quot;$LD_LIBRARY_PATH:~&#47;local&#47;lib&quot;</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 9, "last_activity_date": 1431669697, "last_edit_date": 1431669697, "creation_date": 1431572933, "answer_id": 30228598, "question_id": 30228493, "link": "https://stackoverflow.com/questions/30228493/is-it-possible-to-install-rust-on-linux-without-admin-privileges/30228598#30228598", "title": "Is it possible to install Rust on Linux without admin privileges?", "body": "<p>If you specify a different prefix, you need to set the <code>LD_LIBRARY_PATH</code> environment variable. This is a colon-separated list (like <code>PATH</code>) which is typically not set. You\u2019ll want something like this in your shell config:</p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:~/local/lib\"\n</code></pre>\n"}], "owner": {"reputation": 2918, "user_id": 1176502, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/772d111e6536ebb183c39d866b3e2274?s=128&d=identicon&r=PG", "display_name": "talloaktrees", "link": "https://stackoverflow.com/users/1176502/talloaktrees"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1093, "favorite_count": 0, "accepted_answer_id": 30228598, "answer_count": 1, "score": 8, "last_activity_date": 1432047443, "creation_date": 1431572065, "last_edit_date": 1432047443, "question_id": 30228493, "link": "https://stackoverflow.com/questions/30228493/is-it-possible-to-install-rust-on-linux-without-admin-privileges", "title": "Is it possible to install Rust on Linux without admin privileges?", "body": "<p>version: 1.0.0 beta 5</p>\n\n<p>I have gotten as as far as running the install.sh script with the argument \"--prefix=$HOME/local\" (installing to my home directory)</p>\n\n<p>and this works fine, but ldconfig (part of the install.sh process) fails because of lack of root privileges, and then rustc is unable to find the libraries</p>\n\n<pre><code>rustc: error while loading shared libraries: librustc_driver-4e7c5e5c.so: cannot open shared object file: No such file or directory\n</code></pre>\n"}]