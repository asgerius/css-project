[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1479872315, "post_id": 34722500, "comment_id": 68736855, "body": "I created a generic version of this function that can take a <code>GenericImage</code> and a <code>Pixel</code> because I needed it to draw lines in <code>Rgba</code> and <code>Rgb</code> images: <a href=\"https://gist.github.com/maxbeutel/0ec4ad067d0d7975c105b23496044580\" rel=\"nofollow noreferrer\">gist.github.com/maxbeutel/0ec4ad067d0d7975c105b23496044580</a>"}], "tags": [], "owner": {"reputation": 15722, "user_id": 284318, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1e0588e345236881aff23040eb1d5dc3?s=128&d=identicon&r=PG", "display_name": "Danilo Bargen", "link": "https://stackoverflow.com/users/284318/danilo-bargen"}, "is_accepted": false, "score": 4, "last_activity_date": 1452520336, "last_edit_date": 1452520336, "creation_date": 1452518095, "answer_id": 34722500, "question_id": 34440429, "link": "https://stackoverflow.com/questions/34440429/draw-a-line-in-a-bitmap-possibly-with-piston/34722500#34722500", "title": "Draw a line in a bitmap (possibly with piston)", "body": "<p>If you drop the width requirement and don't need antialiasing either, you could use something like <a href=\"https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm\" rel=\"nofollow noreferrer\">Bresenham's line algorithm</a> (also on <a href=\"http://rosettacode.org/wiki/Bitmap/Bresenham%27s_line_algorithm\" rel=\"nofollow noreferrer\">Rosetta Code</a>):</p>\n\n<pre><code>extern crate image;\n\nuse image::RgbImage;\n\nfn draw_line(img: &amp;mut RgbImage, x0: i64, y0: i64, x1: i64, y1: i64) {\n\n    // Create local variables for moving start point\n    let mut x0 = x0;\n    let mut y0 = y0;\n\n    // Get absolute x/y offset\n    let dx = if x0 &gt; x1 { x0 - x1 } else { x1 - x0 };\n    let dy = if y0 &gt; y1 { y0 - y1 } else { y1 - y0 };\n\n    // Get slopes\n    let sx = if x0 &lt; x1 { 1 } else { -1 };\n    let sy = if y0 &lt; y1 { 1 } else { -1 };\n\n    // Initialize error\n    let mut err = if dx &gt; dy { dx } else {-dy} / 2;\n    let mut err2;\n\n    loop {\n        // Set pixel\n        img.get_pixel_mut(x0 as u32, y0 as u32).data = [255, 255, 255];\n\n        // Check end condition\n        if x0 == x1 &amp;&amp; y0 == y1 { break };\n\n        // Store old error\n        err2 = 2 * err;\n\n        // Adjust error and start position\n        if err2 &gt; -dx { err -= dy; x0 += sx; }\n        if err2 &lt; dy { err += dx; y0 += sy; }\n    }\n\n}\n\nfn main() {\n    let mut img = RgbImage::new(256, 256);\n\n    draw_line(&amp;mut img, 10, 10, 246, 128);\n    draw_line(&amp;mut img, 128, 10, 10, 246);\n\n    img.save(\"output.png\").unwrap();\n}\n</code></pre>\n\n<p>Output:</p>\n\n<p><a href=\"https://i.stack.imgur.com/t4hP7.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/t4hP7.png\" alt=\"enter image description here\"></a></p>\n\n<p>As a primitive form of adding thickness, you could repeat drawing the line with some offset. Alternatively, draw a filled rectangle where the height of the rectangle corresponds to the thickness of the desired line.</p>\n\n<p>There's a ticket open in the <a href=\"https://github.com/PistonDevelopers/imageproc/issues/97\" rel=\"nofollow noreferrer\">imageproc</a> project to add anti aliased line drawing support: <a href=\"https://github.com/PistonDevelopers/imageproc/issues/97\" rel=\"nofollow noreferrer\">https://github.com/PistonDevelopers/imageproc/issues/97</a></p>\n"}, {"tags": [], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "is_accepted": true, "score": 2, "last_activity_date": 1499240697, "creation_date": 1499240697, "answer_id": 44919983, "question_id": 34440429, "link": "https://stackoverflow.com/questions/34440429/draw-a-line-in-a-bitmap-possibly-with-piston/44919983#44919983", "title": "Draw a line in a bitmap (possibly with piston)", "body": "<p>In addition to the great answer above: there is now direct support for drawing lines and many more shapes (even texts) in the <a href=\"https://github.com/PistonDevelopers/imageproc\" rel=\"nofollow noreferrer\">imageproc</a> library (see also the examples there):</p>\n\n<pre><code>extern crate image;\nextern crate imageproc;\n\nuse image::{Rgb, RgbImage};\nuse imageproc::drawing::draw_line_segment_mut;\n\nfn main() {\n    let mut img = RgbImage::new(100, 100);\n    draw_line_segment_mut(\n        &amp;mut img,\n        (5f32, 5f32),              // start point\n        (95f32, 95f32),            // end point\n        Rgb([69u8, 203u8, 133u8]), // RGB colors\n    );\n    img.save(\"output.png\").unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 9251, "user_id": 202083, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5ec4abe66cb7af4c957e785cdc24449e?s=128&d=identicon&r=PG", "display_name": "Tristram Gr&#228;bener", "link": "https://stackoverflow.com/users/202083/tristram-gr%c3%a4bener"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2142, "favorite_count": 0, "accepted_answer_id": 44919983, "answer_count": 2, "score": 4, "last_activity_date": 1499240697, "creation_date": 1450889974, "last_edit_date": 1450892155, "question_id": 34440429, "link": "https://stackoverflow.com/questions/34440429/draw-a-line-in-a-bitmap-possibly-with-piston", "title": "Draw a line in a bitmap (possibly with piston)", "body": "<p>I want to draw a line in a bitmap, e.g. from pixel (10, 10) to pixel (90, 90). The line must have a specific width.</p>\n\n<p>Using piston image, I am able to draw a single pixel:</p>\n\n<pre><code>let mut image = ImageBuffer::&lt;image::Rgb&lt;u8&gt;&gt;::new(100, 100);\nimage.get_pixel_mut(5, 5).data = [255, 255, 255];\nimage.save(\"output.png\");\n</code></pre>\n\n<p>However there is no method to draw a line.</p>\n\n<p>I suppose I have to use piston::graphics for that, but I can\u2019t find any ressource how to do it (any example involves a window that provides a context on which graphics works on).</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1450892772, "post_id": 34440323, "comment_id": 56623514, "body": "Since the vector is a collection of <code>String</code>s and not used after spawning the threads, I&#39;d just move <code>arg</code> as-is into the thread - <a href=\"http://is.gd/CMhQ7t\" rel=\"nofollow noreferrer\">example</a>. In fact, I might even eschew the collection into the <code>Vec</code> at all - <a href=\"http://is.gd/vQcgWI\" rel=\"nofollow noreferrer\">example</a>."}, {"owner": {"reputation": 7881, "user_id": 409475, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/K4GzT.jpg?s=128&g=1", "display_name": "Ernest", "link": "https://stackoverflow.com/users/409475/ernest"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450909670, "post_id": 34440323, "comment_id": 56631210, "body": "Thank you @Shepmaster and aepsil0n, it really clicked for me this time. <a href=\"http://aturon.github.io/crossbeam-doc/crossbeam/struct.Scope.html#method.spawn\" rel=\"nofollow noreferrer\">crossbeam::Scope.spawn()</a> also nicely explains this very problem."}], "tags": [], "owner": {"reputation": 813, "user_id": 1453453, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/24d7111ef96c9534289fa27d069594e2?s=128&d=identicon&r=PG", "display_name": "aepsil0n", "link": "https://stackoverflow.com/users/1453453/aepsil0n"}, "is_accepted": true, "score": 9, "last_activity_date": 1450890484, "last_edit_date": 1450890484, "creation_date": 1450889538, "answer_id": 34440323, "question_id": 34439977, "link": "https://stackoverflow.com/questions/34439977/lifetime-of-variables-passed-to-a-new-thread/34440323#34440323", "title": "Lifetime of variables passed to a new thread", "body": "<p>The problem lies in spawning a background thread. When you call <code>thread::spawn</code> you effectively have to pass ownership of any resource used in it to the thread, as it might run indefinitely, which means that its lifetime must be <code>'static</code>.</p>\n\n<p>There are two options to resolve that: the simplest one would be to pass ownership. Your code here</p>\n\n<pre><code>let new_arg = arg.to_string() + \"foo\";\nt.send(arg);\n</code></pre>\n\n<p>looks like you actually wanted to send <code>new_arg</code>, in which case you could just create the owned result of <code>arg.to_string()</code> before spawning the thread, thus eliminating the need to pass the reference <code>arg</code>.</p>\n\n<p>Another slightly more involved idea, that might be useful at some point though, are scoped threads as implemented in <a href=\"https://crates.io/crates/crossbeam/\">crossbeam</a> for example. These are bound to an explicit scope, where you spawn them and are joined together at the end. This looks somewhat like this:</p>\n\n<pre><code>crossbeam::scope(|scope| {\n    scope.spawn(|| {\n        println!(\"Hello from a scoped thread!\");\n    });\n});\n</code></pre>\n\n<p>Have a look at <a href=\"http://aturon.github.io/crossbeam-doc/crossbeam/struct.Scope.html\">the docs</a> for further details.</p>\n"}], "owner": {"reputation": 7881, "user_id": 409475, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/K4GzT.jpg?s=128&g=1", "display_name": "Ernest", "link": "https://stackoverflow.com/users/409475/ernest"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1941, "favorite_count": 0, "accepted_answer_id": 34440323, "answer_count": 1, "score": 5, "last_activity_date": 1517839506, "creation_date": 1450888195, "last_edit_date": 1517839506, "question_id": 34439977, "link": "https://stackoverflow.com/questions/34439977/lifetime-of-variables-passed-to-a-new-thread", "title": "Lifetime of variables passed to a new thread", "body": "<p>I have trouble compiling this program:</p>\n\n<pre><code>use std::env;\nuse std::sync::mpsc;\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let args: Vec&lt;_&gt; = env::args().skip(1).collect();\n\n    let (tx, rx) = mpsc::channel();\n\n    for arg in &amp;args {\n        let t = tx.clone();\n\n        thread::spawn(move || {\n            thread::sleep(Duration::from_millis(50));\n            let _new_arg = arg.to_string() + \"foo\";\n            t.send(arg);\n        });\n    }\n\n    for _ in &amp;args {\n        println!(\"{}\", rx.recv().unwrap());\n    }\n}\n</code></pre>\n\n<p>I read all arguments from the command line and emulate doing some work on each argument in the thread. Then I print out the results of this work, which I do using a channel.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `args` does not live long enough\n  --&gt; src/main.rs:11:17\n   |\n11 |     for arg in &amp;args {\n   |                 ^^^^ does not live long enough\n...\n24 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>If I understood well.. the lifetime of <code>args</code> must be <code>static</code> (i.e. the entire time of program execution), while it only lives within the scope of <code>main</code> function (?). I don't understand the reason behind this, and how I could fix it.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 0, "creation_date": 1450887844, "post_id": 34439755, "comment_id": 56620606, "body": "Is there a way to make this work with <code>a = Default::default();</code> instead of <code>a.field = 0</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "edited": false, "score": 1, "creation_date": 1450890549, "post_id": 34439755, "comment_id": 56622278, "body": "@andreyg yes. <code>*a = Default::default();</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1450887438, "creation_date": 1450887438, "answer_id": 34439755, "question_id": 34439585, "link": "https://stackoverflow.com/questions/34439585/writing-to-array-inside-an-interator/34439755#34439755", "title": "Writing to array inside an interator", "body": "<blockquote>\n  <p>Is it possible to gain write access to array elements via an iterator?</p>\n</blockquote>\n\n<p>Yes, but you have to use an iterator that returns mutable references. In this case, use <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter_mut\" rel=\"nofollow\">iter_mut</a>, not <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter\" rel=\"nofollow\"><code>iter</code></a>.</p>\n"}], "owner": {"reputation": 1091, "user_id": 3745005, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/yvS7i.png?s=128&g=1", "display_name": "andrey", "link": "https://stackoverflow.com/users/3745005/andrey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 68, "favorite_count": 0, "accepted_answer_id": 34439755, "answer_count": 1, "score": 1, "last_activity_date": 1450887438, "creation_date": 1450886826, "question_id": 34439585, "link": "https://stackoverflow.com/questions/34439585/writing-to-array-inside-an-interator", "title": "Writing to array inside an interator", "body": "<p>Is it possible to gain write access to array elements via an iterator?:</p>\n\n<pre><code>#[derive(Default)]\nstruct Struct {\n    field: i32,\n}\n\nfn main() {\n    let mut array: [Struct; 2] = [Default::default(), Default::default()];\n    array[0].field = 2;\n    array[1].field = 3;\n    foo(&amp;mut array);\n    println!(\"[0]: {}\", array[0].field);\n    println!(\"[1]: {}\", array[1].field);\n}\n\nfn foo(array: &amp;mut [Struct]) {\n    for (i, a) in array.iter().enumerate() {\n        if a.field &gt; 2 {\n            println!(\"Setting [{}] to zero.\", i);\n            a.field = 0;\n        }\n    }\n}\n</code></pre>\n\n<p>Is this an idiomatic approach to solving the problem?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1450919532, "post_id": 34438755, "comment_id": 56634100, "body": "Very interesting question! <code>Self</code> in the trait block is <code>Foo</code> and <code>Self</code> in the <code>impl</code> block is <code>Foo + &#39;static</code> ..."}], "answers": [{"comments": [{"owner": {"reputation": 27478, "user_id": 183120, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fc147f814e1473bb6105db3d924fb590?s=128&d=identicon&r=PG", "display_name": "legends2k", "link": "https://stackoverflow.com/users/183120/legends2k"}, "edited": false, "score": 0, "creation_date": 1591799700, "post_id": 34439129, "comment_id": 110194602, "body": "Your answer is in a sense better. It answers the central part of the doubt up front.  The intricate details can follow, but the main idea is to be put upfront; the other answer does it reversed."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1450962131, "last_edit_date": 1450962131, "creation_date": 1450885388, "answer_id": 34439129, "question_id": 34438755, "link": "https://stackoverflow.com/questions/34438755/why-would-i-implement-methods-on-a-trait-instead-of-as-part-of-the-trait/34439129#34439129", "title": "Why would I implement methods on a trait instead of as part of the trait?", "body": "<p>I <em>suspect</em> that the reason is very simple: may be overridden or not?</p>\n\n<p>A method implemented in a <code>trait</code> block can be overridden by implementors of the <code>trait</code>, it just provides a default.</p>\n\n<p>On the other hand, a method implemented in an <code>impl</code> block cannot be overridden.</p>\n\n<p><strike>If this reasoning is right, then the error you get for <code>y.foo_in_impl()</code> is just a lack of polish: it should have worked.</strike> <em>See Francis Gagn\u00e9's more complete answer on the interaction with lifetimes.</em></p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 30, "last_activity_date": 1586104285, "last_edit_date": 1586104285, "creation_date": 1450923603, "answer_id": 34446463, "question_id": 34438755, "link": "https://stackoverflow.com/questions/34438755/why-would-i-implement-methods-on-a-trait-instead-of-as-part-of-the-trait/34446463#34446463", "title": "Why would I implement methods on a trait instead of as part of the trait?", "body": "<p>When you define a trait named <code>Foo</code> that can be made into an object, Rust also defines a trait object type named <code>dyn Foo</code>. In older versions of Rust, this type was only called <code>Foo</code> (see <a href=\"https://stackoverflow.com/q/50650070/3650362\">What does \"dyn\" mean in a type?</a>). For backwards compatibility with these older versions, <code>Foo</code> still works to name the trait object type, although <code>dyn</code> syntax should be used for new code.</p>\n\n<p>Trait objects have a lifetime parameter that designates the shortest of the implementor's lifetime parameters. To specify that lifetime, you write the type as <code>dyn Foo + 'a</code>.</p>\n\n<p>When you write <code>impl dyn Foo {</code> (or just <code>impl Foo {</code> using the old syntax), you are not specifying that lifetime parameter, and it defaults to <code>'static</code>. This note from the compiler on the <code>y.foo_in_impl();</code> statement hints at that:</p>\n\n<blockquote>\n  <p>note: borrowed value must be valid for the static lifetime...</p>\n</blockquote>\n\n<p>All we have to do to make this more permissive is to write a generic <code>impl</code> over any lifetime:</p>\n\n<pre><code>impl&lt;'a&gt; dyn Foo + 'a {\n    fn foo_in_impl(&amp;self) { println!(\"in impl\") }\n}\n</code></pre>\n\n<p>Now, notice that the <code>self</code> argument on <code>foo_in_impl</code> is a borrowed pointer, which has a lifetime parameter of its own. The type of <code>self</code>, in its full form, looks like <code>&amp;'b (dyn Foo + 'a)</code> (the parentheses are required due to operator precedence). A <code>Box&lt;u8&gt;</code> owns its <code>u8</code> &ndash; it doesn't borrow anything &ndash;, so you can create a <code>&amp;(dyn Foo + 'static)</code> out of it. On the other hand, <code>&amp;42u8</code> creates a <code>&amp;'b (dyn Foo + 'a)</code> where <code>'a</code> is not <code>'static</code>, because <code>42u8</code> is put in a hidden variable on the stack, and the trait object borrows this variable. (That doesn't really make sense, though; <code>u8</code> doesn't borrow anything, so its <code>Foo</code> implementation should always be compatible with <code>dyn Foo + 'static</code>... the fact that <code>42u8</code> is borrowed from the stack should affect <code>'b</code>, not <code>'a</code>.)</p>\n\n<p>Another thing to note is that trait methods are polymorphic, even when they have a default implementation and they're not overridden, while inherent methods on a trait objects are monomorphic (there's only one function, no matter what's behind the trait). For example:</p>\n\n<pre><code>use std::any::type_name;\n\ntrait Foo {\n    fn foo_in_trait(&amp;self)\n    where\n        Self: 'static,\n    {\n        println!(\"{}\", type_name::&lt;Self&gt;());\n    }\n}\n\nimpl dyn Foo {\n    fn foo_in_impl(&amp;self) {\n        println!(\"{}\", type_name::&lt;Self&gt;());\n    }\n}\n\nimpl Foo for u8 {}\nimpl Foo for u16 {}\n\nfn main() {\n    let x = Box::new(42u8) as Box&lt;dyn Foo&gt;;\n    x.foo_in_trait();\n    x.foo_in_impl();\n\n    let x = Box::new(42u16) as Box&lt;Foo&gt;;\n    x.foo_in_trait();\n    x.foo_in_impl();\n}\n</code></pre>\n\n<p>Sample output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>u8\ndyn playground::Foo\nu16\ndyn playground::Foo\n</code></pre>\n\n<p>In the trait method, we get the type name of the underlying type (here, <code>u8</code> or <code>u16</code>), so we can conclude that the type of <code>&amp;self</code> will vary from one implementer to the other (it'll be <code>&amp;u8</code> for the <code>u8</code> implementer and <code>&amp;u16</code> for the <code>u16</code> implementer \u2013 not a trait object). However, in the inherent method, we get the type name of <code>dyn Foo</code> (<code>+ 'static</code>), so we can conclude that the type of <code>&amp;self</code> is always <code>&amp;dyn Foo</code> (a trait object).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4592, "favorite_count": 10, "accepted_answer_id": 34446463, "answer_count": 2, "score": 43, "last_activity_date": 1608887312, "creation_date": 1450884126, "last_edit_date": 1546368862, "question_id": 34438755, "link": "https://stackoverflow.com/questions/34438755/why-would-i-implement-methods-on-a-trait-instead-of-as-part-of-the-trait", "title": "Why would I implement methods on a trait instead of as part of the trait?", "body": "<p>While trying to understand the <code>Any</code> trait better, I saw that it <a href=\"https://github.com/rust-lang/rust/blob/1.31.1/src/libcore/any.rs#L146\" rel=\"noreferrer\">has an <code>impl</code> block for the trait itself</a>. I don't understand the purpose of this construct, or even if it has a specific name.</p>\n\n<p>I made a little experiment with both a \"normal\" trait method and a method defined in the <code>impl</code> block:</p>\n\n<pre><code>trait Foo {\n    fn foo_in_trait(&amp;self) {\n        println!(\"in foo\")\n    }\n}\n\nimpl dyn Foo {\n    fn foo_in_impl(&amp;self) {\n        println!(\"in impl\")\n    }\n}\n\nimpl Foo for u8 {}\n\nfn main() {\n    let x = Box::new(42u8) as Box&lt;dyn Foo&gt;;\n    x.foo_in_trait();\n    x.foo_in_impl();\n\n    let y = &amp;42u8 as &amp;dyn Foo;\n    y.foo_in_trait();\n    y.foo_in_impl(); // May cause an error, see below\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>Editor's note</strong></p>\n  \n  <p>In versions of Rust up to and including Rust 1.15.0, the line\n  <code>y.foo_in_impl()</code> causes the error:</p>\n  \n  <pre class=\"lang-none prettyprint-override\"><code>error: borrowed value does not live long enough\n  --&gt; src/main.rs:20:14\n   |\n20 |     let y = &amp;42u8 as &amp;Foo;\n   |              ^^^^ does not live long enough\n...\n23 | }\n   | - temporary value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n  \n  <p>This error is no longer present in subsequent versions, but the\n  concepts explained in the answers are still valid.</p>\n</blockquote>\n\n<p>From this limited experiment, it seems like methods defined in the <code>impl</code> block are more restrictive than methods defined in the <code>trait</code> block. It's likely that there's something extra that doing it this way unlocks, but I just don't know what it is yet! ^_^</p>\n\n<p>The sections from <em>The Rust Programming Language</em> on <a href=\"https://doc.rust-lang.org/stable/book/ch10-02-traits.html\" rel=\"noreferrer\">traits</a> and <a href=\"https://doc.rust-lang.org/stable/book/ch17-02-trait-objects.html\" rel=\"noreferrer\">trait objects</a> don't make any mention of this. Searching the Rust source itself, it seems like only <code>Any</code> and <a href=\"https://doc.rust-lang.org/std/error/trait.Error.html\" rel=\"noreferrer\"><code>Error</code></a> use this particular feature. I've not seen this used in the handful of crates where I have looked at the source code.</p>\n"}, {"tags": ["windows", "notepad++", "rust"], "comments": [{"owner": {"reputation": 313, "user_id": 4179490, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nFIlM.jpg?s=128&g=1", "display_name": "Desaroll", "link": "https://stackoverflow.com/users/4179490/desaroll"}, "edited": false, "score": 1, "creation_date": 1450875349, "post_id": 34435031, "comment_id": 56613215, "body": "I&#39;m not familiar to rust, but try with this: <a href=\"https://gist.github.com/heimp/6502384\" rel=\"nofollow noreferrer\">gist.github.com/heimp/6502384</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1450879676, "post_id": 34435031, "comment_id": 56615711, "body": "A simple internet search for  &quot;notepad++ rust&quot; returns at least two links at the top with code that say they do exactly what you ask."}, {"owner": {"reputation": 41, "user_id": 5711007, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1009df20f0760d95b3caf142ff37797d?s=128&d=identicon&r=PG&f=1", "display_name": "Nehru", "link": "https://stackoverflow.com/users/5711007/nehru"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450880586, "post_id": 34435031, "comment_id": 56616206, "body": "@Shepmaster : But how do you add it to?"}, {"owner": {"reputation": 112016, "user_id": 15031, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dfc9c03509b7d2d1646b21cb8de8ec5a?s=128&d=identicon&r=PG", "display_name": "Jonathan Lonowski", "link": "https://stackoverflow.com/users/15031/jonathan-lonowski"}, "edited": false, "score": 1, "creation_date": 1450934510, "post_id": 34435031, "comment_id": 56637237, "body": "@Nehru One of the options <a href=\"https://github.com/pfalabella/Rust-notepadplusplus#readme\" rel=\"nofollow noreferrer\">gives steps for using/adding it</a>."}], "answers": [{"tags": [], "owner": {"reputation": 4893, "user_id": 899227, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/WHwW6.png?s=128&g=1", "display_name": "roeland", "link": "https://stackoverflow.com/users/899227/roeland"}, "is_accepted": false, "score": 5, "last_activity_date": 1493471989, "last_edit_date": 1493471989, "creation_date": 1450952447, "answer_id": 34451206, "question_id": 34435031, "link": "https://stackoverflow.com/questions/34435031/adding-rust-programming-language-syntax-to-notepad/34451206#34451206", "title": "Adding Rust (programming language) syntax to Notepad++?", "body": "<p>You can use Notepad++ to edit the source files, nothing else is needed.</p>\n\n<p>If you want syntax coloring, <a href=\"https://github.com/pfalabella/Rust-notepadplusplus\" rel=\"nofollow noreferrer\">a syntax file is available</a>, the README has an explanation on how to import the XML file.</p>\n\n<p>For compiling and running the code, you can just use the command line. </p>\n\n<p>I don't think there is a plugin for code completion yet, but it could be implemented with <a href=\"https://github.com/phildawes/racer\" rel=\"nofollow noreferrer\">racer</a>.</p>\n\n<p>I like Notepad++, but there are more plugins for Sublime Text, Atom, or VS Code. You can also use Visual Studio.</p>\n"}], "owner": {"reputation": 41, "user_id": 5711007, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1009df20f0760d95b3caf142ff37797d?s=128&d=identicon&r=PG&f=1", "display_name": "Nehru", "link": "https://stackoverflow.com/users/5711007/nehru"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4724, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1583174510, "creation_date": 1450871238, "last_edit_date": 1450879598, "question_id": 34435031, "link": "https://stackoverflow.com/questions/34435031/adding-rust-programming-language-syntax-to-notepad", "title": "Adding Rust (programming language) syntax to Notepad++?", "body": "<p>I would like to use Notepad++ as I learn Rust. Is it possible to do this? If it is, how do I do it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1450859944, "post_id": 34430429, "comment_id": 56604143, "body": "No; unstable features are strictly disabled on stable and beta builds."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1450865742, "post_id": 34430429, "comment_id": 56607379, "body": "The easiest way would be to have an old 1.6 around from when your code worked I guess :x"}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1450866698, "post_id": 34430429, "comment_id": 56608010, "body": "@MatthieuM. It turns out you can get the old distros, which was mostly what I needed. I grabbed the 1.6 nightly from the night before 1.6 was officially made &quot;beta&quot; here <a href=\"http://static.rust-lang.org/dist/2015-12-09/index.html\" rel=\"nofollow noreferrer\">static.rust-lang.org/dist/2015-12-09/index.html</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1450867365, "post_id": 34430429, "comment_id": 56608417, "body": "@Jsor: Great! Then I think you should submit this as a self-answer to your question."}], "answers": [{"tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 6, "last_activity_date": 1450868389, "creation_date": 1450868389, "answer_id": 34434168, "question_id": 34430429, "link": "https://stackoverflow.com/questions/34430429/is-there-any-way-to-get-unstable-features-on-the-compiler-versions-in-stable-or/34434168#34434168", "title": "Is there any way to get unstable features on the compiler versions in stable or beta?", "body": "<p>You cannot (trivially) compile any stable version of Rust to use unstable features. Nor can you download the stable version as if it were unstable. However, Rust's downloads has a set of <a href=\"http://static.rust-lang.org/dist/index.html\" rel=\"noreferrer\">archives</a>.</p>\n\n<p>By checking when the most recent release happened:</p>\n\n<p><a href=\"https://i.stack.imgur.com/dJfYk.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/dJfYk.png\" alt=\"Date\"></a></p>\n\n<p>I could figure out what day the current Beta was technically a Nightly. Now, presuming there wasn't a major bugfix between the previous Nightly and Beta releases of 1.6, I went to the folder (in this case, December 9, 2015) and downloaded the corresponding Nightly installer from the list.</p>\n\n<p>There are folders going back to 2014-11-07, so if you need a specific version of Rust from the past to compile your code, you can likely find it there.</p>\n"}], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 572, "favorite_count": 1, "accepted_answer_id": 34434168, "answer_count": 1, "score": 3, "last_activity_date": 1450868389, "creation_date": 1450854604, "question_id": 34430429, "link": "https://stackoverflow.com/questions/34430429/is-there-any-way-to-get-unstable-features-on-the-compiler-versions-in-stable-or", "title": "Is there any way to get unstable features on the compiler versions in stable or beta?", "body": "<p>I'm in a bit of a bind right now. My personal code relies on <code>rand</code>, which is currently not compiling on Nightly 1.7, but does work on Beta 1.6 and stable. </p>\n\n<p>However, my work also uses unstable features such as <code>box</code> syntax/patterns/raw and <code>convert</code> in a way that can't (easily) be refactored out. Is there any way, including by compiling from source, to get Rust 1.6 \"as if\" it were a nightly? I'm on Windows (10)/MSYS 2 if that complicates things any, such as building the source.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1450801430, "post_id": 34419561, "comment_id": 56581720, "body": "possible duplicate of <a href=\"http://stackoverflow.com/questions/25246443/rust-downcasting-and-boxany\" title=\"rust downcasting and boxany\">stackoverflow.com/questions/25246443/&hellip;</a>"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1450805009, "post_id": 34419561, "comment_id": 56583845, "body": "I think it&#39;s related but not exactly the same. In addition it&#39;s 1.5 years old so the chances are high that something changed about that ;)"}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "reply_to_user": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 0, "creation_date": 1450807317, "post_id": 34419561, "comment_id": 56585062, "body": "The closest thing I found was this <a href=\"http://stackoverflow.com/questions/27073799/rust-vector-of-traits-cast-each-trait?rq=1\" title=\"rust vector of traits cast each trait\">stackoverflow.com/questions/27073799/&hellip;</a>  But it ends with a compiler bug (unfortunately without a link) and is kind of old, too."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1450833071, "post_id": 34419561, "comment_id": 56595468, "body": "@Christoph Shepmaster has given you several options (and Paolo gave you the jackhammer - use wisely), but without some context about what these traits <i>mean</i> it&#39;s hard to give concrete answers about how to model the solution. The first, and most often best, instinct is an enum, but whether (and how) that&#39;s a fit for your problem is really up in the air."}], "answers": [{"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450811267, "post_id": 34422602, "comment_id": 56587101, "body": "But couldn&#39;t the <code>data</code> part of the <code>TraitObject</code> be transmuted to the <code>struct</code> and once we have the struct we can safely cast into the other trait?   Well, but even if that worked it won&#39;t for stable rust. So, is there a pattern other than the one I described with my <code>FooOrBar</code> trait to handle such cases where we need to iterate over a bunch of trait objects but treat some of them slightly different?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1450865333, "post_id": 34422602, "comment_id": 56607120, "body": "I would not that C++ also uses a v-table and stores run-time type information there on top of the regular list of virtual methods, so the use of a v-table in itself does not preclude down-casting. It is just that Rust does not store such information."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1581368711, "last_edit_date": 1581368711, "creation_date": 1450810426, "answer_id": 34422602, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits/34422602#34422602", "title": "Can I cast between two traits?", "body": "<p>No. There is no way to cast between two unrelated traits. To understand why, we have to understand how trait objects are implemented. To start with, let's look at <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow noreferrer\"><code>TraitObject</code></a>. </p>\n\n<p><code>TraitObject</code> is a reflection of how trait objects are actually implemented. They are composed of two pointers: <code>data</code> and <code>vtable</code>. The <code>data</code> value is just a reference to the original object:</p>\n\n<pre><code>#![feature(raw)]\n\nuse std::{mem, raw};\n\ntrait Foo {}\nimpl Foo for u8 {}\n\nfn main() {\n    let i = 42u8;\n    let t = &amp;i as &amp;dyn Foo;\n    let to: raw::TraitObject = unsafe { mem::transmute(t) };\n\n    println!(\"{:p}\", to.data);\n    println!(\"{:p}\", &amp;i);\n}\n</code></pre>\n\n<p><code>vtable</code> points to a table of function pointers. This table contains references to each implemented trait method, ordered by some compiler-internal manner.</p>\n\n<p>For this hypothetical input</p>\n\n<pre><code>trait Foo {\n    fn one(&amp;self);\n}\n\nimpl Foo for u8 {\n    fn one(&amp;self) { println!(\"u8!\") }\n}\n</code></pre>\n\n<p>The table is something like this pseudocode</p>\n\n<pre><code>const FOO_U8_VTABLE: _ = [impl_of_foo_u8_one];\n</code></pre>\n\n<p>A trait object knows a pointer to the data and a pointer to a list of methods that make up that trait. From this information, there is <strong>no way</strong> to get any other piece of data.</p>\n\n<p>Well, <em>almost</em> no way. As you might guess, you can add a method to the vtable that returns a <em>different</em> trait object. In computer science, all problems can be solved by adding another layer of indirection (except too many layers of indirection).</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/28632968/155423\">Why doesn&#39;t Rust support trait object upcasting?</a></li>\n</ul>\n\n<blockquote>\n  <p>But couldn't the <code>data</code> part of the <code>TraitObject</code> be transmuted to the struct</p>\n</blockquote>\n\n<p>Not safely, no. A trait object contains no information about the original type. All it has is a raw pointer containing an address in memory. You could <em>unsafely</em> transmute it to a <code>&amp;Foo</code> or a <code>&amp;u8</code> or a <code>&amp;()</code>, but neither the compiler nor the runtime data have any idea what concrete type it originally was.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow noreferrer\"><code>Any</code> trait</a> actually does this by also tracking the type ID of the original struct. If you ask for a reference to the correct type, the trait will transmute the data pointer for you.</p>\n\n<blockquote>\n  <p>Is there a pattern other than the one I described with my <code>FooOrBar</code> trait to handle such cases where we need to iterate over a bunch of trait objects but treat some of them slightly different?</p>\n</blockquote>\n\n<ul>\n<li><p>If you own these traits, then you can add <code>as_foo</code> to the <code>Bar</code> trait and vice versa.</p></li>\n<li><p>You could create an enum that holds either a <code>Box&lt;dyn Foo&gt;</code> or a <code>Box&lt;dyn Bar&gt;</code> and then pattern match.</p></li>\n<li><p>You could move the body of <code>bar</code> into the body of <code>foo</code> for that implementation.</p></li>\n<li><p>You could implement a third trait <code>Quux</code> where calling <code>&lt;FooStruct as Quux&gt;::quux</code> calls <code>Foo::foo</code> and calling <code>&lt;BarStruct as Quux&gt;::quux</code> calls <code>Bar::foo</code> followed by <code>Bar::bar</code>. </p></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450879886, "post_id": 34424986, "comment_id": 56615835, "body": "Interesting approach but as you noted it&#39;s not exactly what I need because I have to decide for <code>Foo</code> or <code>Bar</code> but can&#39;t handle a type as being both <code>Foo</code> and <code>Bar</code> at the same time."}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 2, "last_activity_date": 1450820887, "creation_date": 1450820887, "answer_id": 34424986, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits/34424986#34424986", "title": "Can I cast between two traits?", "body": "<p>so... I don't think this is exactly what you want, but it's the closest I can get.</p>\n\n<pre><code>// first indirection: trait objects\nlet sf: Box&lt;Foo&gt; = Box::new(SomeFoo);\nlet sb: Box&lt;Bar&gt; = Box::new(SomeFooBar);\n\n// second level of indirection: Box&lt;Any&gt; (Any in this case\n// is the first Box with the trait object, so we have a Box&lt;Box&lt;Foo&gt;&gt;\nlet foos: Vec&lt;Box&lt;Any&gt;&gt; = vec![Box::new(sf), Box::new(sb)];\n\n// downcasting to the trait objects\nfor foo in foos {\n    match foo.downcast::&lt;Box&lt;Foo&gt;&gt;() {\n        Ok(f) =&gt; f.do_foo(),\n        Err(other) =&gt; {\n            if let Ok(bar) = other.downcast::&lt;Box&lt;Bar&gt;&gt;() {\n                    bar.do_bar();\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>note that we can call <code>SomeFooBar</code> as a <code>Box&lt;Bar&gt;</code> only because we stored it as a <code>Box&lt;Bar&gt;</code> in the first place. So this is still not what you want (<code>SomeFooBar</code> is a <code>Foo</code> too, but you can't convert it to a <code>Box&lt;Foo&gt;</code> any longer, so we're not really converting one trait to the other)</p>\n"}, {"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450880425, "post_id": 34433143, "comment_id": 56616119, "body": "That&#39;s interesting. Can you elaborate on the <code>TypeId</code> part a bit? Maybe with a bit of code to demonstrate it, I think I haven&#39;t fully groked how that workaround is supposed to work."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450880940, "post_id": 34433143, "comment_id": 56616412, "body": "@Christoph: I linked to <code>std::any::Any</code> which uses <code>TypeId</code> in the background, or you can check the github repository I linked to to see how to create your own downcasting facilities based on <code>TypeId</code>... but really I just mentioned either for completeness. <code>Any</code> does not allow downcasting, it just allows retrieving the original type, and <code>rust-poly</code> is a proof of concept. The only current generic work-around is to build downcasting in a trait, that&#39;s what Servo does."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450882665, "post_id": 34433143, "comment_id": 56617435, "body": "Ok, thank you. I hope to see Rust improve on that front in the future. I updated my question with the solution that I went for in the meantime."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450883090, "post_id": 34433143, "comment_id": 56617678, "body": "@Christoph: Ah! Please do not mix question and answer in the question! Instead, you can perfectly post an answer to your own question with the solution; I think the solution you chose is indeed quite idiomatic. For the record though, I am not myself a fan of downcasting (because it introduces brittleness) so I do not miss it and would quite favor never having it."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450883999, "post_id": 34433143, "comment_id": 56618155, "body": "Sorry, corrected it ;) I actually don&#39;t need downcasting that often either. I&#39;ll see how I manage without it ;)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1450880638, "last_edit_date": 1450880638, "creation_date": 1450865219, "answer_id": 34433143, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits/34433143#34433143", "title": "Can I cast between two traits?", "body": "<p>The short answer is: there is extremely limited support for downcasting at the moment in the language.</p>\n\n<hr>\n\n<p>The long answer is that being able to downcast is not seen as high-priority for both technical and philosophical reasons:</p>\n\n<ul>\n<li>from a technical stand-point, there are workarounds for most if not all situations</li>\n<li>from a philosophical stand-point, downcasting leads to more brittle software (as you unexpectedly start relying on implementation details)</li>\n</ul>\n\n<p>There have been multiple proposals, and I myself <a href=\"https://github.com/matthieu-m/rust-poly\" rel=\"nofollow\">participated</a>, but for now none has been selected and it is unclear whether Rust will ever get downcasting or if it does what its limitations will be.</p>\n\n<p>In the mean time, you have essentially two workarounds:</p>\n\n<ol>\n<li><p>Use <code>TypeId</code>: each type has an associated <code>TypeId</code> value which can be queried, then you can build a type-erased container such as <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow\"><code>Any</code></a> and query whether the type it holds is a specific X. Behind the scenes <code>Any</code> will simply check the <code>TypeId</code> of this X against the <code>TypeId</code> of the value stored.</p></li>\n<li><p>Create a specific <code>trait</code>, as you did.</p></li>\n</ol>\n\n<p>The latter is more open-ended, and notably can be used with traits, whereas the former is limited to concrete types.</p>\n"}, {"tags": [], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "is_accepted": false, "score": 2, "last_activity_date": 1581368443, "last_edit_date": 1581368443, "creation_date": 1450883774, "answer_id": 34438660, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits/34438660#34438660", "title": "Can I cast between two traits?", "body": "<p>Here is what I did.</p>\n\n<p>I added an <code>as_bar</code> method to the <code>Foo</code> trait that returns an <code>Option&lt;&amp;Bar&gt;</code>. I gave the trait a default implementation to return <code>None</code> so that there is little to no inconvenience for <code>Foo</code> implementers that don't bother about <code>Bar</code>.</p>\n\n<pre><code>trait Foo {\n    fn do_foo(&amp;self);\n\n    fn as_bar(&amp;self) -&gt; Option&lt;&amp;dyn Bar&gt; {\n        None\n    }\n}\n</code></pre>\n\n<p>I overwrite that method for the <code>SomeFooBar</code> struct which implements both <code>Foo</code> and <code>Bar</code> to return <code>Some(self)</code>:</p>\n\n<pre><code>impl Foo for SomeFooBar {\n    fn do_foo(&amp;self) {\n        println!(\"doing foo\");\n    }\n\n    fn as_bar(&amp;self) -&gt; Option&lt;&amp;dyn Bar&gt; {\n        Some(self)\n    }\n}\n</code></pre>\n\n<p>Which makes the calling code look pretty much the way I want it to look.</p>\n\n<pre><code>fn main() {\n    let foos: Vec&lt;Box&lt;dyn Foo&gt;&gt; = vec![Box::new(SomeFoo), Box::new(SomeFooBar)];\n\n    for foo in foos {\n        foo.do_foo();\n\n        if let Some(bar) = foo.as_bar() {\n            bar.do_bar();\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8b92e55d587228bb55e70ddcab6a7cb5\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I would love to see Rust improve on this part in the future, but it's a solution I can totally live with for my case.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1581368465, "last_edit_date": 1581368465, "creation_date": 1581368131, "answer_id": 60158273, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits/60158273#60158273", "title": "Can I cast between two traits?", "body": "\n\n<p>The only solution that I found originally is to introduce a third trait <code>FooOrBar</code> with explicit converter methods and implement that for both types. It doesn't feel like the right tool for the job though.</p>\n\n<pre><code>trait FooOrBar {\n    fn to_bar(&amp;self) -&gt; Option&lt;&amp;dyn Bar&gt;;\n    fn to_foo(&amp;self) -&gt; Option&lt;&amp;dyn Foo&gt;;\n}\n\nimpl FooOrBar for SomeFooBar {\n    fn to_bar(&amp;self) -&gt; Option&lt;&amp;dyn Bar&gt; {\n        Some(self)\n    }\n\n    fn to_foo(&amp;self) -&gt; Option&lt;&amp;dyn Foo&gt; {\n        None\n    }\n}\n\nimpl FooOrBar for SomeFoo {\n    fn to_bar(&amp;self) -&gt; Option&lt;&amp;dyn Bar&gt; {\n        None\n    }\n\n    fn to_foo(&amp;self) -&gt; Option&lt;&amp;dyn Foo&gt; {\n        Some(self)\n    }\n}\n\nfn main() {\n    let foos: Vec&lt;Box&lt;dyn FooOrBar&gt;&gt; = vec![Box::new(SomeFoo), Box::new(SomeFooBar)];\n\n    for foo in foos {\n        foo.to_foo().map(|foo| foo.do_foo());\n        foo.to_bar().map(|foo| foo.do_bar());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3870, "favorite_count": 0, "accepted_answer_id": 34422602, "answer_count": 5, "score": 6, "last_activity_date": 1581368711, "creation_date": 1450799281, "last_edit_date": 1581367998, "question_id": 34419561, "link": "https://stackoverflow.com/questions/34419561/can-i-cast-between-two-traits", "title": "Can I cast between two traits?", "body": "<p>Is there a way to cast from one trait to another?</p>\n\n<p>I have the traits <code>Foo</code> and <code>Bar</code> and a <code>Vec&lt;Box&lt;dyn Foo&gt;&gt;</code>. I know some of the items in the <code>Vec</code> implement the <code>Bar</code> trait, but is there any way I could target them?</p>\n\n<p>I don't understand if this is possible or not.</p>\n\n<pre><code>trait Foo {\n    fn do_foo(&amp;self);\n}\n\ntrait Bar {\n    fn do_bar(&amp;self);\n}\n\nstruct SomeFoo;\n\nimpl Foo for SomeFoo {\n    fn do_foo(&amp;self) {\n        println!(\"doing foo\");\n    }\n}\n\nstruct SomeFooBar;\n\nimpl Foo for SomeFooBar {\n    fn do_foo(&amp;self) {\n        println!(\"doing foo\");\n    }\n}\n\nimpl Bar for SomeFooBar {\n    fn do_bar(&amp;self) {\n        println!(\"doing bar\");\n    }\n}\n\nfn main() {\n    let foos: Vec&lt;Box&lt;dyn Foo&gt;&gt; = vec![Box::new(SomeFoo), Box::new(SomeFooBar)];\n\n    for foo in foos {\n        foo.do_foo();\n\n        // if let Some(val) = foo.downcast_whatever::&lt;Bar&gt;() {\n        //     val.bar();\n        // }\n    }\n}\n\n[Playground](https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8b637bddc4fc923ce705e84ad1d783d4)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1450774652, "creation_date": 1450774652, "answer_id": 34411903, "question_id": 34410928, "link": "https://stackoverflow.com/questions/34410928/is-there-a-better-way-of-getting-mutable-references-to-disjoint-struct-fields/34411903#34411903", "title": "Is there a better way of getting mutable references to disjoint struct fields?", "body": "<p>You don't need to newtype a tuple, you can just create a tuple-struct directly:</p>\n\n<pre><code>struct FooBar(Foo, Bar);\n</code></pre>\n\n<p>Then you can write your code pretty concisely as </p>\n\n<pre><code>fn foobar(&amp;mut self) {\n    self.0.foo(&amp;mut self.1);\n    println!(\"foobar\");\n}\n</code></pre>\n\n<p>by using tuple indexing instead of a let binding.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1450863383, "creation_date": 1450863383, "answer_id": 34432525, "question_id": 34410928, "link": "https://stackoverflow.com/questions/34410928/is-there-a-better-way-of-getting-mutable-references-to-disjoint-struct-fields/34432525#34432525", "title": "Is there a better way of getting mutable references to disjoint struct fields?", "body": "<p>Rust's borrow analysis natively supports borrowing disjoint fields.</p>\n\n<p>You can use either a tuple-like <code>struct</code> or a regular <code>struct</code>, and it all just works:</p>\n\n<pre><code>struct Foo;\n\nimpl Foo {\n    fn foo(&amp;mut self, bar: &amp;mut Bar) {\n        bar.bar();\n    }\n}\n\nstruct Bar;\n\nimpl Bar {\n    fn bar(&amp;mut self) {\n        println!(\"bar\")\n    }\n}\n\nstruct Tupled(Foo, Bar);\n\nimpl Tupled {\n    fn foobar(&amp;mut self) {\n        self.0.foo(&amp;mut self.1);\n    }\n}\n\nstruct Named {\n    foo: Foo,\n    bar: Bar,\n}\n\nimpl Named {\n    fn foobar(&amp;mut self) {\n        self.foo.foo(&amp;mut self.bar);\n    }\n}\n\nfn main() {\n    let mut tupled = Tupled(Foo, Bar);\n    tupled.foobar();\n\n    let mut named = Named{ foo: Foo, bar: Bar };\n    named.foobar();\n}\n</code></pre>\n\n<p>This compiles and runs <a href=\"https://play.rust-lang.org/?gist=3534b79d06acc59f6023&amp;version=stable\" rel=\"nofollow\">in the playground</a>.</p>\n"}], "owner": {"reputation": 539, "user_id": 4313261, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh4.googleusercontent.com/-Vrtl0r4nCmI/AAAAAAAAAAI/AAAAAAAAAHM/fVptHJkPAsY/photo.jpg?sz=128", "display_name": "crhino", "link": "https://stackoverflow.com/users/4313261/crhino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 542, "favorite_count": 0, "accepted_answer_id": 34432525, "answer_count": 2, "score": 3, "last_activity_date": 1450863383, "creation_date": 1450770863, "last_edit_date": 1450793421, "question_id": 34410928, "link": "https://stackoverflow.com/questions/34410928/is-there-a-better-way-of-getting-mutable-references-to-disjoint-struct-fields", "title": "Is there a better way of getting mutable references to disjoint struct fields?", "body": "<p>I have some Rust code that I find to be pretty smelly. I want to get mutable references from the fields of a struct at the same time, but of course Rust does not allow more than one mutable reference at the same time.</p>\n\n<p>What I have been doing currently is basically making a newtype of a tuple and then pattern matching the two different types out into separate <code>ref mut</code> patterns. Not a huge fan of the way this looks in practice.</p>\n\n<pre><code>struct Foo;\n\nimpl Foo {\n    fn foo(&amp;mut self, bar: &amp;mut Bar) {\n        bar.bar();\n    }\n}\n\nstruct Bar;\n\nimpl Bar {\n    fn bar(&amp;mut self) {\n        println!(\"bar\")\n    }\n}\n\nstruct FooBar((Foo, Bar));\n\nimpl FooBar {\n    fn foobar(&amp;mut self) {\n        let &amp;mut FooBar((ref mut foo, ref mut bar)) = self;\n        foo.foo(bar);\n        println!(\"foobar\");\n    }\n}\n\nfn main() {\n    let mut foobar = FooBar((Foo, Bar));\n    foobar.foobar();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=struct%20Foo%3B%0A%0Aimpl%20Foo%20%7B%0A%20%20%20%20fn%20foo%28%26mut%20self%2C%20bar%3A%20%26mut%20Bar%29%20%7B%0A%20%20%20%20%20%20%20%20bar.bar%28%29%3B%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20Bar%3B%0A%0Aimpl%20Bar%20%7B%0A%20%20%20%20fn%20bar%28%26mut%20self%29%20%7B%0A%20%20%20%20%20%20%20%20println!%28%22bar%22%29%0A%20%20%20%20%7D%0A%7D%0A%0Astruct%20FooBar%28%28Foo%2C%20Bar%29%29%3B%0A%0Aimpl%20FooBar%20%7B%0A%20%20%20%20fn%20foobar%28%26mut%20self%29%20%7B%0A%20%20%20%20%20%20%20%20let%20%26mut%20FooBar%28%28ref%20mut%20foo%2C%20ref%20mut%20bar%29%29%20%3D%20self%3B%0A%20%20%20%20%20%20%20%20foo.foo%28bar%29%3B%0A%20%20%20%20%20%20%20%20println!%28%22foobar%22%29%3B%0A%20%20%20%20%7D%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20mut%20foobar%20%3D%20FooBar%28%28Foo%2C%20Bar%29%29%3B%0A%20%20%20%20foobar.foobar%28%29%3B%0A%7D&amp;version=stable\" rel=\"nofollow\">Rust Playground</a></p>\n\n<p>Is there a better way I should be doing this? Or perhaps some ideas about general ways to structure the code so that I do not need this newtype?</p>\n"}, {"tags": ["function", "rust", "permutation"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450793383, "post_id": 34409175, "comment_id": 56576468, "body": "You forgot to include the code for <code>to_vec</code> and <code>reverse</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450795623, "post_id": 34409175, "comment_id": 56577856, "body": "Which Rosetta Code snippet did you start from? None of the ones I have found seem to match your code at all. Checking if <code>i</code>is even / odd only occurs in a small handful (like Swift or Powershell), but those use a &quot;swap&quot; construct that you don&#39;t"}], "answers": [{"tags": [], "owner": {"reputation": 32558, "user_id": 101090, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/066290971688c0a44cc4159a9f210dcf?s=128&d=identicon&r=PG", "display_name": "Jorge Israel Pe&#241;a", "link": "https://stackoverflow.com/users/101090/jorge-israel-pe%c3%b1a"}, "is_accepted": true, "score": 5, "last_activity_date": 1450764350, "creation_date": 1450764350, "answer_id": 34409438, "question_id": 34409175, "link": "https://stackoverflow.com/questions/34409175/function-that-returns-all-permutations/34409438#34409438", "title": "Function that returns all permutations", "body": "<p>Take a look at the <a href=\"https://crates.io/crates/permutohedron/\" rel=\"noreferrer\">permutohedron</a> crate which does what you want. Take a look at its <a href=\"https://github.com/bluss/permutohedron/blob/master/benches/bench.rs\" rel=\"noreferrer\">benchmarks</a> or <a href=\"https://github.com/bluss/permutohedron/blob/master/src/lib.rs#L168\" rel=\"noreferrer\">tests</a> to see how you can use it.</p>\n\n<p>Basically you give a <code>&amp;mut</code> of your data to the construction of a <code>Heap</code>, then you can call <code>next_permutation()</code> on it to get an <code>Option</code> of a mutable reference to the permuted data. It's an <code>Option</code> so that <code>None</code> can signal that there are no remaining permutations. Note that <code>Heap</code> also implements <code>Iterator</code>, so you can just use <code>for permutation in heap { ... }</code> as well.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1450795945, "creation_date": 1450795945, "answer_id": 34418518, "question_id": 34409175, "link": "https://stackoverflow.com/questions/34409175/function-that-returns-all-permutations/34418518#34418518", "title": "Function that returns all permutations", "body": "<blockquote>\n  <p>This code has an arithmetic overflow error</p>\n</blockquote>\n\n<p>If I make minimal changes (see below) to even get your code to compile, I get this error:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'arithmetic operation overflowed', &lt;anon&gt;:26\n</code></pre>\n\n<p><strong>Read</strong> the error \u2014 it <em>tells you what line is causing the problem</em>. Looking at line 26, I see this:</p>\n\n<pre><code>items.push(item[item.len() - 1]);\n</code></pre>\n\n<p>Your <code>item.len()</code> is zero, and you are trying to subtract 1 from that. That causes a crash. Don't do that.</p>\n\n<hr>\n\n<pre><code>fn permutations_(sequence: Vec&lt;i32&gt;) -&gt; Vec&lt;Vec&lt;i32&gt;&gt; {\n    if sequence.len() == 0 {\n        let x: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![]];\n        return x\n    }\n\n    let mut result: Vec&lt;Vec&lt;i32&gt;&gt; = Vec::new();\n\n    for (i, item) in permutations_(sequence[0..sequence.len() - 1].into()).iter().enumerate() {\n        let mut n = (0..item.len() + 1).collect::&lt;Vec&lt;usize&gt;&gt;();\n        if i % 2 == 0 {\n            n.reverse();\n        }\n\n        for k in n {\n            let mut items = Vec::new();\n\n            for x in &amp;item[0..k] {\n                items.push(*x);\n            }\n\n            items.push(item[item.len() - 1]);\n\n            for x in &amp;item[k..item.len()] {\n                items.push(*x);\n            }\n\n            result.push(items);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    println!(\"{:?}\", permutations_(vec![1]))\n}\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5269, "favorite_count": 0, "accepted_answer_id": 34409438, "answer_count": 2, "score": 2, "last_activity_date": 1607985360, "creation_date": 1450762968, "last_edit_date": 1450793344, "question_id": 34409175, "link": "https://stackoverflow.com/questions/34409175/function-that-returns-all-permutations", "title": "Function that returns all permutations", "body": "<p>I want to make a function to return all permutations of a sequence. I took an example from Rosetta Code and tried to write it in Rust, but it will not work. When I try to fix it I either cause an overflow or break it again. This code has an arithmetic overflow error:</p>\n\n<pre><code>fn permutations_(sequence: Vec&lt;i32&gt;) -&gt; Vec&lt;Vec&lt;i32&gt;&gt; {\n    if sequence.len() == 0 {\n        let x: Vec&lt;Vec&lt;i32&gt;&gt; = vec![vec![]];\n        return x\n    }\n\n    let mut result: Vec&lt;Vec&lt;i32&gt;&gt; = Vec::new();\n\n    for (i, item) in permutations_(to_vec(&amp;sequence[0..sequence.len() - 1])).iter().enumerate() {\n\n        let mut n = reverse(&amp;(0..item.len() + 1).collect::&lt;Vec&lt;usize&gt;&gt;());\n\n        if i % 2 != 0 {\n            n = (0..item.len() + 1).collect::&lt;Vec&lt;usize&gt;&gt;();\n        }\n\n        for k in n {\n            let mut items = Vec::new();\n\n            for x in &amp;item[0..k] {\n                items.push(*x);\n            }\n\n            items.push(item[item.len() - 1]);\n\n            for x in &amp;item[k..item.len()] {\n                items.push(*x);\n            }\n\n            result.push(items);\n        }\n    }\n\n    result\n}\n</code></pre>\n\n<p>If there is a better way to do this I would like to know, otherwise I need ideas on how to fix this.</p>\n"}, {"tags": ["arrays", "rust", "move"], "answers": [{"comments": [{"owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "edited": false, "score": 0, "creation_date": 1450760226, "post_id": 34406459, "comment_id": 56558947, "body": "Thank you. So there is no safe way to do it from an <code>Array</code> alone, but using an <code>ArrayVec</code> may be a compromise between that and a <code>Vec</code>."}, {"owner": {"reputation": 1612, "user_id": 1195206, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/2ab66abdb13bc2575a785248776ea7ee?s=128&d=identicon&r=PG&f=1", "display_name": "jbatez", "link": "https://stackoverflow.com/users/1195206/jbatez"}, "edited": false, "score": 1, "creation_date": 1521388619, "post_id": 34406459, "comment_id": 85699543, "body": "Thanks for adding the <code>ptr::read</code> solution. It makes the intent more clear than <code>replace</code> + <code>uninitialized</code> or the alternative I was using, <code>transmute_copy</code>."}, {"owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 0, "creation_date": 1526371827, "post_id": 34406459, "comment_id": 87706286, "body": "You should mention that <code>mem::forget</code> should be used after writing uninitialized memory to the array."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 0, "creation_date": 1526388713, "post_id": 34406459, "comment_id": 87717211, "body": "@torkleyy well, both <code>unsafe</code> solutions are broken on purpose. <code>mem::forget</code> would be correct, but only if <b>all</b> the values were successfully moved out. That&#39;s what the entire point about arrayvec is for: getting the details right is really hard."}, {"owner": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 0, "creation_date": 1526390856, "post_id": 34406459, "comment_id": 87718826, "body": "Yeah, I know, that&#39;s exactly what I&#39;m doing though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 959, "user_id": 6779010, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/i7Jj0.png?s=128&g=1", "display_name": "torkleyy", "link": "https://stackoverflow.com/users/6779010/torkleyy"}, "edited": false, "score": 0, "creation_date": 1526391493, "post_id": 34406459, "comment_id": 87719323, "body": "@torkleyy then you are <i>recreating</i> arrayvec. The point of my answer is to tell people to use the premade solution. Don&#39;t reinvent the wheel."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1619113263, "last_edit_date": 1619113263, "creation_date": 1450742630, "answer_id": 34406459, "question_id": 34406251, "link": "https://stackoverflow.com/questions/34406251/how-do-i-move-values-out-of-an-array-one-at-a-time/34406459#34406459", "title": "How do I move values out of an array one at a time?", "body": "<h1>Rust 1.51</h1>\n<p>You can use <a href=\"https://doc.rust-lang.org/1.51.0/std/array/struct.IntoIter.html\" rel=\"nofollow noreferrer\"><code>std::array::IntoIter</code></a> to get a by-value array iterator:</p>\n<pre><code>use std::array::IntoIter;\n\nstruct Foo;\nfn bar(_: Foo) {}\n\nfn main() {\n    let v: [Foo; 3] = [Foo, Foo, Foo];\n\n    for a in IntoIter::new(v) {\n        bar(a);\n    }\n}\n</code></pre>\n<h1>Previous Rust versions</h1>\n<p>The core thing you would need is some way of getting the value out of the array without moving it.</p>\n<p>This can be done using <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\" rel=\"nofollow noreferrer\"><code>mem::transmute</code></a> to convert the array to an array of <a href=\"https://doc.rust-lang.org/std/mem/union.MaybeUninit.html\" rel=\"nofollow noreferrer\"><code>mem::MaybeUninit</code></a>, then using <a href=\"https://doc.rust-lang.org/std/ptr/fn.read.html\" rel=\"nofollow noreferrer\"><code>ptr::read</code></a> to leave the value in the array but get an owned value back:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let one = unsafe {\n    let v = mem::transmute::&lt;_, [MaybeUninit&lt;Foo&gt;; 3]&gt;(v);\n    ptr::read(&amp;v[0]).assume_init()\n};\nbar(one);\n</code></pre>\n<p>It's just a matter of doing this a few times in a loop and you are good to go.</p>\n<p>There's just one tiny problem: you see that <code>unsafe</code>? You guessed it; this is totally, horribly broken in the wider case:</p>\n<ul>\n<li><code>MaybeUninit</code> does nothing when it is dropped; this can lead to memory leaks.</li>\n<li>If a panic happens in the middle of moving the values out (such as somewhere within the <code>bar</code> function), the array will be in a partially-uninitialized state. This is another (subtle) path where the <code>MaybeUninit</code> can be dropped, so now we have to know which values the array still owns and which have been moved out. We are responsible for freeing the values we still own and not the others.</li>\n<li>Nothing prevents us from accidentally accessing the newly-invalidated values in the array ourselves.</li>\n</ul>\n<p>The right solution is to <em>track</em> how many of the values in the array are valid / invalid. When the array is dropped, you can drop the remaining valid items and ignore the invalid ones. It'd also be really nice if we could make this work for arrays of different sizes...</p>\n<p>Which is where <a href=\"https://crates.io/crates/arrayvec\" rel=\"nofollow noreferrer\">arrayvec</a> comes in. It doesn't have the <em>exact</em> same implementation (because it's smarter), but it does have the same semantics:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use arrayvec::ArrayVec; // 0.5.2\n\n#[derive(Debug)]\nstruct Foo;\n\nfn bar(foo: Foo) {\n    println!(&quot;{:?}&quot;, foo)\n}\n\nfn main() {\n    let v = ArrayVec::from([Foo, Foo, Foo]);\n\n    for f in v {\n        bar(f);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450793246, "post_id": 34409552, "comment_id": 56576382, "body": "And <code>Option::take</code> <a href=\"https://github.com/rust-lang/rust/blob/1.5.0/src/libcore/option.rs#L689-L691\" rel=\"nofollow noreferrer\">is implemented</a> with <code>mem::replace</code> ^_^. <code>Option</code> has a value that can always be created and that is suitable as a &quot;dummy&quot; or &quot;no-op&quot; value (<code>None</code>)."}, {"owner": {"reputation": 25867, "user_id": 17027, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/fb75fbfd9dd8d93d49ff88c152d82c92?s=128&d=identicon&r=PG", "display_name": "Mahmoud Al-Qudsi", "link": "https://stackoverflow.com/users/17027/mahmoud-al-qudsi"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1502990794, "post_id": 34409552, "comment_id": 78440449, "body": "@shepmaster the difference is the lack of unsafe code in your project."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25867, "user_id": 17027, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/fb75fbfd9dd8d93d49ff88c152d82c92?s=128&d=identicon&r=PG", "display_name": "Mahmoud Al-Qudsi", "link": "https://stackoverflow.com/users/17027/mahmoud-al-qudsi"}, "edited": false, "score": 0, "creation_date": 1502997503, "post_id": 34409552, "comment_id": 78444038, "body": "@MahmoudAl-Qudsi I&#39;m not sure I follow you. <b>All</b> the solutions (this one and the two in my answer) use unsafe code, the only difference is where it is. This one is in the standard library. Mine has the inline one and one in a crate."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 8, "last_activity_date": 1450764888, "creation_date": 1450764888, "answer_id": 34409552, "question_id": 34406251, "link": "https://stackoverflow.com/questions/34406251/how-do-i-move-values-out-of-an-array-one-at-a-time/34409552#34409552", "title": "How do I move values out of an array one at a time?", "body": "<p>You may use array of <code>Option&lt;Foo&gt;</code> instead array of <code>Foo</code>. It has some memory penalty of course. Function <a href=\"https://doc.rust-lang.org/stable/core/option/enum.Option.html#method.take\"><code>take()</code></a> replaces value in array with <code>None</code>.</p>\n\n<pre><code>#[derive(Debug)]\nstruct Foo;\n\n// A method that needs an owned Foo\nfn bar(foo: Foo) { println!(\"{:?}\", foo); }\n\nfn main() {\n    let mut v  = [Some(Foo),Some(Foo),Some(Foo)];\n\n    for a in &amp;mut v {\n        a.take().map(|x| bar(x));\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "edited": false, "score": 0, "creation_date": 1618838622, "post_id": 51988086, "comment_id": 118716427, "body": "&quot;However, this solution does not scale well if the array is big.&quot; Are you referring to scaling in terms of performance or just that it is annoying to write out?"}], "tags": [], "owner": {"reputation": 79096, "user_id": 865874, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/ACMnN.png?s=128&g=1", "display_name": "rodrigo", "link": "https://stackoverflow.com/users/865874/rodrigo"}, "is_accepted": false, "score": 2, "last_activity_date": 1610248067, "last_edit_date": 1610248067, "creation_date": 1535034243, "answer_id": 51988086, "question_id": 34406251, "link": "https://stackoverflow.com/questions/34406251/how-do-i-move-values-out-of-an-array-one-at-a-time/51988086#51988086", "title": "How do I move values out of an array one at a time?", "body": "<p>Using the <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em> feature</a> (available since <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1310-2018-12-06\" rel=\"nofollow noreferrer\">Rust 1.31.0</a>) and a <em>fixed-length slice pattern</em> (available since <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1260-2018-05-10\" rel=\"nofollow noreferrer\">Rust 1.26.0</a>) you can move out of an array:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\nstruct Foo;\n\nfn bar(foo: Foo) {\n    println!(&quot;{:?}&quot;, foo);\n}\n\nfn main() {\n    let v: [Foo; 3] = [Foo, Foo, Foo];\n    let [a, b, c] = v;\n\n    bar(a);\n    bar(b);\n    bar(c);\n}\n</code></pre>\n<p>However, this solution does not scale well if the array is big.</p>\n<p>An alternative, if you don't mind the extra allocation, is to box the array and convert it into a <code>Vec</code>:</p>\n<pre><code>fn main() {\n    let v: [Foo; 3] = [Foo, Foo, Foo];\n    let v = Vec::from(Box::new(v) as Box&lt;[_]&gt;);\n\n    for a in v {\n        bar(a);\n    }\n}\n</code></pre>\n<p>If the array is very big, that may be an issue. But then, if the array is very big, you should not be creating it in the stack in the first place!</p>\n"}], "owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4020, "favorite_count": 3, "accepted_answer_id": 34406459, "answer_count": 3, "score": 23, "last_activity_date": 1619113263, "creation_date": 1450741441, "last_edit_date": 1589296134, "question_id": 34406251, "link": "https://stackoverflow.com/questions/34406251/how-do-i-move-values-out-of-an-array-one-at-a-time", "title": "How do I move values out of an array one at a time?", "body": "<p>I have ownership of an array of size 3 and I would like to iterate on it, moving the elements out as I go. Basically, I would like to have <code>IntoIterator</code> implemented for a fixed-sized array.</p>\n\n<p>Since arrays don't implement this trait in the standard library (I understand why), is there a workaround to get the desired effect? My objects are not <code>Copy</code> nor <code>Clone</code>. I'd be okay creating a <code>Vec</code> from the array and then iterating into the <code>Vec</code>, but I'm not even sure how to do that.</p>\n\n<p>(For information, I'd like to fulfill an array of <a href=\"http://carllerche.github.io/eventual/eventual/struct.Complete.html\" rel=\"noreferrer\"><code>Complete</code></a>)</p>\n\n<p>Here is a simple example of the situation (with a naive <code>iter()</code> attempt):</p>\n\n<pre><code>// No-copy, No-clone struct\n#[derive(Debug)]\nstruct Foo;\n\n// A method that needs an owned Foo\nfn bar(foo: Foo) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    let v: [Foo; 3] = [Foo, Foo, Foo];\n\n    for a in v.iter() {\n        bar(*a);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=20b774c1b0c2e004b8bf40505526b59d&amp;version=stable\" rel=\"noreferrer\">playground</a></p>\n\n<p>Gives</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:14:13\n   |\n14 |         bar(*a);\n   |             ^^ cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["iterator", "rust", "match"], "answers": [{"comments": [{"owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "edited": false, "score": 0, "creation_date": 1450732066, "post_id": 34403814, "comment_id": 56550482, "body": "Thanks for the tips :)"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1450735420, "post_id": 34403814, "comment_id": 56551974, "body": "I might be mistaken, but isn&#39;t it preferred to use <code>&amp;*x</code> over <code>&amp;x[..]</code> nowadays?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1450736810, "post_id": 34403814, "comment_id": 56552546, "body": "@Veedrac good point! I&#39;m not sure <i>which</i> is more idiomatic. I think I picked up <code>&amp;x[..]</code> in The Days Before 1.0, and haven&#39;t thought too much about it since. Both should compile to the same code, so it&#39;s a matter of what looks more obvious, I guess."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1450730951, "last_edit_date": 1495535298, "creation_date": 1450729656, "answer_id": 34403814, "question_id": 34403514, "link": "https://stackoverflow.com/questions/34403514/sized-is-not-implemented-for-the-type-str-when-matching-against-a-string-liter/34403814#34403814", "title": "&quot;Sized is not implemented for the type str&quot; when matching against a string literal?", "body": "<p>I assume you've read other <a href=\"https://stackoverflow.com/q/28044231/155423\">questions</a> about the <a href=\"https://stackoverflow.com/q/28175528/155423\">error</a>, so I'll just cover this specific case.</p>\n\n<p>You want to use <code>&amp;arg[..]</code> instead of <code>&amp;arg</code>:</p>\n\n<pre><code>fn without_xxx(args: Args) -&gt; Vec&lt;String&gt; {\n    let mut out = vec![];\n    let mut xxx = false;\n\n    for arg in args {\n        match &amp;arg[..] {\n             \"-\" =&gt; xxx = true,\n            _ =&gt; out.push(arg)\n        }\n    }\n\n    out\n}\n</code></pre>\n\n<p>I'll admit that the error is a strange one. Here's what I think is happening:</p>\n\n<p>When you do <code>&amp;arg</code>, you are taking a reference to a <code>String</code>. <code>String</code>s implement <a href=\"http://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref&lt;Target = str&gt;</code></a>, which means they can participate in <em>deref coercions</em>. </p>\n\n<p>The match arm is of type <code>&amp;str</code>. When comparing the two types, the compiler sees you have a <code>&amp;String</code> and are trying to match it to a <code>&amp;str</code>. It automatically dereferences both values and applies deref coercions. However, a <code>str</code> cannot be a standalone type, thus you get the error.</p>\n\n<p>Using <code>&amp;arg[..]</code> triggers the <a href=\"http://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"nofollow noreferrer\"><code>Index</code></a> trait instead. This produces a <code>&amp;str</code>, and thus the match arm doesn't do any automatic dereferencing or coercion.</p>\n\n<p>Additionally:</p>\n\n<ol>\n<li>There's no need for an explicit type on <code>output</code></li>\n<li>Use implicit returns at the end of functions / closures.</li>\n<li>There's no need to call <code>to_string</code> because <code>arg</code> is already a <code>String</code>.</li>\n</ol>\n\n<hr>\n\n<p>For fun, here's a version that uses <code>filter_map</code>, <code>collect</code>, and just a plain <code>if</code>:</p>\n\n<pre><code>fn without_xxx(args: Args) -&gt; Vec&lt;String&gt; {\n    let mut xxx = false;\n\n    let out = args.filter_map(|a| {\n        if a == \"-\" {\n            xxx = true;\n            None\n        } else {\n            Some(a)\n        }\n    }).collect();\n\n    // I assume you do something with `xxx` here\n\n    out\n}\n</code></pre>\n\n<p>This <em>may</em> have a performance benefit as it can <em>potentially</em> allocate an upper-bound for the size of the vector.</p>\n\n<p>Another version:</p>\n\n<pre><code>fn without_xxx(args: Args) -&gt; Vec&lt;String&gt; {\n    let mut xxx = false;\n\n    let out = args.filter(|a| {\n        let matched = a == \"-\";\n        xxx = xxx || matched;\n        !matched\n    }).collect();\n\n    // I assume you do something with `xxx` here\n\n    out\n}\n</code></pre>\n"}], "owner": {"reputation": 57337, "user_id": 69742, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/6fc5e3f98fb1113576b50672ae42c05c?s=128&d=identicon&r=PG", "display_name": "Earlz", "link": "https://stackoverflow.com/users/69742/earlz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2011, "favorite_count": 0, "accepted_answer_id": 34403814, "answer_count": 1, "score": 0, "last_activity_date": 1450730951, "creation_date": 1450728341, "last_edit_date": 1450729695, "question_id": 34403514, "link": "https://stackoverflow.com/questions/34403514/sized-is-not-implemented-for-the-type-str-when-matching-against-a-string-liter", "title": "&quot;Sized is not implemented for the type str&quot; when matching against a string literal?", "body": "<p>I'm having trouble with some Rust code. I have a fairly simple function, but it throws errors in code that seems to be unrelated:</p>\n\n<pre><code>use std::env::Args;\nfn without_xxx(args: Args) -&gt; Vec&lt;String&gt;{\n    let mut out: Vec&lt;String&gt; = vec![];\n    let mut xxx = false;\n    for arg in args{\n        match &amp;arg{\n             \"-\" =&gt; xxx=true, //this line\n            _ =&gt; out.push(arg.to_string())\n        }\n    }\n    return out;\n}\n</code></pre>\n\n<p>If you comment out the marked line, there will be no error shown. However, with that simple line, it reveals this cryptic set of errors:</p>\n\n<pre><code>&lt;anon&gt;:7:9: 12:10 error: the trait `core::marker::Sized` is not implemented for the type `str` [E0277]\n&lt;anon&gt;: 7         for arg in args{\n&lt;anon&gt;: 8             match &amp;arg{\n&lt;anon&gt;: 9                 \"-\" =&gt; xxx=true,\n&lt;anon&gt;:10                 _ =&gt; out.push(arg.to_string())\n&lt;anon&gt;:11             }\n&lt;anon&gt;:12         }\n&lt;anon&gt;:7:9: 12:10 help: see the detailed explanation for E0277\n&lt;anon&gt;:7:9: 12:10 note: `str` does not have a constant size known at compile-time\n&lt;anon&gt;:7:9: 12:10 note: required by `core::option::Option::Some`\n&lt;anon&gt;:7:13: 7:16 error: the trait `core::marker::Sized` is not implemented for the type `str` [E0277]\n&lt;anon&gt;:7         for arg in args{\n                     ^~~\n&lt;anon&gt;:7:13: 7:16 help: see the detailed explanation for E0277\n&lt;anon&gt;:7:13: 7:16 note: `str` does not have a constant size known at compile-time\n&lt;anon&gt;:7:13: 7:16 note: all local variables must have a statically known size\n&lt;anon&gt;:7:9: 12:10 error: type mismatch resolving `&lt;std::env::Args as core::iter::Iterator&gt;::Item == str`:\n expected struct `collections::string::String`,\n    found str [E0271]\n&lt;anon&gt;: 7         for arg in args{\n&lt;anon&gt;: 8             match &amp;arg{\n&lt;anon&gt;: 9                 \"-\" =&gt; xxx=true,\n&lt;anon&gt;:10                 _ =&gt; out.push(arg.to_string())\n&lt;anon&gt;:11             }\n&lt;anon&gt;:12         }\n&lt;anon&gt;:7:9: 12:10 help: see the detailed explanation for E0271\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450728896, "post_id": 34403155, "comment_id": 56548885, "body": "Your title says &quot;custom linker&quot; but the question seems to be asking about completely implementing a build system like Make. You may want to try to sync these two things up. Additionally, this isn&#39;t really what <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow noreferrer\">build scripts are for</a>, which probably explains the recursive issue."}, {"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1451009250, "post_id": 34403155, "comment_id": 56661050, "body": "@Sephmaster Would it be at better question if I only ask to use another linker?"}], "answers": [{"comments": [{"owner": {"reputation": 24901, "user_id": 198927, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/eExki.jpg?s=128&g=1", "display_name": "Petrus Theron", "link": "https://stackoverflow.com/users/198927/petrus-theron"}, "edited": false, "score": 0, "creation_date": 1544438699, "post_id": 39320804, "comment_id": 94262632, "body": "Where should I put this config file?"}, {"owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "reply_to_user": {"reputation": 24901, "user_id": 198927, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/eExki.jpg?s=128&g=1", "display_name": "Petrus Theron", "link": "https://stackoverflow.com/users/198927/petrus-theron"}, "edited": false, "score": 0, "creation_date": 1544452193, "post_id": 39320804, "comment_id": 94269939, "body": "IIRC the .cargo directory goes in the root of your project. i.e the same directory as your Cargo.toml file. The config file goes in the .cargo directory."}, {"owner": {"reputation": 4260, "user_id": 5581893, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/362f3794da7a74277b3b2fb0b6b5b8ab?s=128&d=identicon&r=PG", "display_name": "datdinhquoc", "link": "https://stackoverflow.com/users/5581893/datdinhquoc"}, "edited": false, "score": 0, "creation_date": 1590108953, "post_id": 39320804, "comment_id": 109563148, "body": "how to specify linker for all types  of targets?"}], "tags": [], "owner": {"reputation": 663, "user_id": 3821428, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61091f94cc81be8e6caa0fb4c6b15ddc?s=128&d=identicon&r=PG", "display_name": "Dave Hylands", "link": "https://stackoverflow.com/users/3821428/dave-hylands"}, "is_accepted": false, "score": 3, "last_activity_date": 1473020708, "last_edit_date": 1473020708, "creation_date": 1473018047, "answer_id": 39320804, "question_id": 34403155, "link": "https://stackoverflow.com/questions/34403155/use-cargo-with-a-custom-linker/39320804#39320804", "title": "Use Cargo with a custom linker", "body": "<p>You can specify a custom linker in the .cargo/config file. <a href=\"https://github.com/hackndev/zinc/blob/master/.cargo/config\" rel=\"nofollow\">See this</a> as an example:</p>\n\n<pre><code>[target.thumbv7em-none-eabi]\nlinker = \"arm-none-eabi-gcc\"\nar = \"arm-none-eabi-ar\"\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3248, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1473020708, "creation_date": 1450726820, "question_id": 34403155, "link": "https://stackoverflow.com/questions/34403155/use-cargo-with-a-custom-linker", "title": "Use Cargo with a custom linker", "body": "<p>I would like to use <code>cargo</code> to build projects requiring a custom compilation (calling the assembler, the linker, \u2026).</p>\n\n<p>I was able to do this with a build script, but it is not perfect. For instance, to build the code from this <a href=\"http://blog.theincredibleholk.org/blog/2013/11/18/booting-to-rust/\" rel=\"nofollow\">tutorial</a>, I made the following build script:</p>\n\n<pre><code>use std::fs::create_dir;\nuse std::process::Command;\n\nfn main() {\n    build();\n    link();\n    iso();\n}\n\nfn build() {\n    Command::new(\"cargo\")\n        .current_dir(\"uefi_app\")\n        .args(&amp;[\"rustc\", \"--\", \"--emit\", \"obj\"])\n        .status().unwrap();\n}\n\nfn iso() {\n    let disk_file = \"target/debug/disk.img\";\n    let disk_dir = \"target/debug/disk\";\n    let efi_boot = disk_dir.to_owned() + \"/efi/boot\";\n    let copy_dest = efi_boot.clone() + \"/bootx64.efi\";\n\n    let dd_of = \"of=\".to_owned() + disk_file;\n    Command::new(\"dd\")\n        .args(&amp;[\"if=/dev/zero\", &amp;dd_of, \"bs=512\", \"count=93750\"])\n        .status().unwrap();\n\n    Command::new(\"parted\")\n        .args(&amp;[disk_file, \"-s\", \"-a\", \"minimal\", \"mklabel\", \"gpt\"])\n        .status().unwrap();\n\n    Command::new(\"parted\")\n        .args(&amp;[disk_file, \"-s\", \"-a\", \"minimal\", \"mkpart\", \"EFI\", \"FAT16\", \"2048s\", \"93716s\"])\n        .status().unwrap();\n\n    Command::new(\"parted\")\n        .args(&amp;[disk_file, \"-s\", \"-a\", \"minimal\", \"toggle\", \"1\", \"boot\"])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"losetup\", \"--offset\", \"1048576\", \"--sizelimit\", \"46934528\", \"/dev/loop0\", disk_file])\n        .status().unwrap();\n\n    let _ = create_dir(disk_dir);\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"mkdosfs\", \"-F\", \"32\", \"/dev/loop0\"])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"mount\", \"/dev/loop0\", disk_dir])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"mkdir\", \"-p\", &amp;efi_boot])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"cp\", \"target/debug/boot.efi\", &amp;copy_dest])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"umount\", disk_dir])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"losetup\", \"-d\", \"/dev/loop0\"])\n        .status().unwrap();\n\n    Command::new(\"sudo\")\n        .args(&amp;[\"rm\", \"-R\", disk_dir])\n        .status().unwrap();\n}\n\nfn link() {\n    Command::new(\"x86_64-efi-pe-ld\")\n        .args(&amp;[\"--oformat\", \"pei-x86-64\", \"--subsystem\", \"10\", \"-pie\", \"-e\", \"efi_main\", \"uefi_app/target/debug/uefi_app.o\", \"-o\", \"target/debug/boot.efi\"]).output().unwrap();\n}\n</code></pre>\n\n<p>You can see the complete crate <a href=\"https://github.com/antoyo/uefi_rust\" rel=\"nofollow\">here</a>.</p>\n\n<p>Another example is <a href=\"https://github.com/antoyo/os_in_rust\" rel=\"nofollow\">this crate</a> for the OS tutorials from <a href=\"http://os.phil-opp.com/\" rel=\"nofollow\">here</a>.</p>\n\n<p>This require a separate crate because running cargo in a build script seems to trigger an infinite loop.</p>\n\n<p>The issue with this build script is that I need to run <code>cargo clean</code> everytime I update the code of the crate compiled by the build script.</p>\n\n<p>How could I use cargo to automate such a compilation?</p>\n\n<p>What I want is just typing <code>cargo run</code> and get an ISO (or harddrive file) and launch the VM.</p>\n"}, {"tags": ["json", "rust", "encode", "serde"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1450713837, "post_id": 34399461, "comment_id": 56540806, "body": "what&#39;s wrong with serializing and then draining?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1570024292, "last_edit_date": 1570024292, "creation_date": 1450715793, "answer_id": 34400370, "question_id": 34399461, "link": "https://stackoverflow.com/questions/34399461/what-is-the-idiomatic-way-to-encode-an-iterator-with-serde-json/34400370#34400370", "title": "What is the idiomatic way to encode an iterator with serde_json?", "body": "<p>Draining iterators are an interesting beast. They allow you to chunk out a part of a collection, taking ownership of some but not necessarily all of the items in the collection. They also allow you to do this in a reasonably efficient manner. For example, a vector could move the trailing data <em>en masse</em> with a single <code>memcpy</code>.</p>\n\n<p>However, serde doesn't natively support serializing iterators (for a good reason, keep reading). You can look at the the <a href=\"https://docs.rs/serde/1.0.101/serde/trait.Serialize.html\" rel=\"nofollow noreferrer\"><code>Serialize</code> trait</a> to see the types of things it supports.</p>\n\n<p>You'd have to implement this yourself:</p>\n\n<pre><code>use serde::{Deserialize, Serialize}; // 1.0.101\nuse std::{cell::RefCell, vec};\n\nstruct DrainIteratorAdapter&lt;'a, T&gt;(RefCell&lt;vec::Drain&lt;'a, T&gt;&gt;);\n\nimpl&lt;'a, T: 'a&gt; serde::Serialize for DrainIteratorAdapter&lt;'a, T&gt;\nwhere\n    T: serde::Serialize,\n{\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: serde::Serializer,\n    {\n        serializer.collect_seq(self.0.borrow_mut().by_ref())\n    }\n}\n\nfn main() {\n    let mut points = vec![Point::new(1, 2), Point::new(-2, -1), Point::new(0, 0)];\n    let adapter = DrainIteratorAdapter(RefCell::new(points.drain(..)));\n\n    println!(\"{}\", serde_json::to_string(&amp;adapter).unwrap());\n}\n</code></pre>\n\n<p>The core hard part is that serialization is supposed to not have any side-effects. This is a very reasonable decision. However, whenever you call <code>next</code> on an iterator, you have to mutate it in order to update the state. To combine these two mismatched concepts, we have to use something like a <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>.</p>\n\n<p>Beyond that, it's just a matter of implementing the <a href=\"https://docs.rs/serde/1.0.101/serde/trait.Serialize.html\" rel=\"nofollow noreferrer\"><code>serde::Serialize</code> trait</a>. Since we own neither <code>serde::Serialize</code> or <code>vec::Drain</code>, we have to create a <em>newtype</em> to place the implementation on.</p>\n\n<p>We can generalize this solution to apply to any iterator. This happens to make it read a bit nicer, in my opinion:</p>\n\n<pre><code>use serde::{Deserialize, Serialize}; // 1.0.101\nuse std::cell::RefCell;\n\nstruct IteratorAdapter&lt;I&gt;(RefCell&lt;I&gt;);\n\nimpl&lt;I&gt; IteratorAdapter&lt;I&gt; {\n    fn new(iterator: I) -&gt; Self {\n        Self(RefCell::new(iterator))\n    }\n}\n\nimpl&lt;I&gt; serde::Serialize for IteratorAdapter&lt;I&gt;\nwhere\n    I: Iterator,\n    I::Item: serde::Serialize,\n{\n    fn serialize&lt;S&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt;\n    where\n        S: serde::Serializer,\n    {\n        serializer.collect_seq(self.0.borrow_mut().by_ref())\n    }\n}\n</code></pre>\n\n<p>What's the downside to this solution? <strong>Serializing the same value twice has different results!</strong> If we simply serialize and print the value twice, we get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[{\"x\":1,\"y\":2},{\"x\":-2,\"y\":-1},{\"x\":0,\"y\":0}]\n[]\n</code></pre>\n\n<p>This is because iterators are transient beasts - once they have read one value, it's gone! This is a nice trap waiting for you to fall into it.</p>\n\n<hr>\n\n<p>In your example, none of this really makes sense. You have access to the entire <code>Vec</code>, so you might as well serialize it (or a slice of it) at that point. Additionally, there's no reason (right now) to <code>drain</code> the entire collection. That would be equivalent to just calling <code>into_iter</code>.</p>\n"}], "owner": {"reputation": 3270, "user_id": 131320, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c284673fa8884e78784d8fe0b64fd066?s=128&d=identicon&r=PG", "display_name": "mikeycgto", "link": "https://stackoverflow.com/users/131320/mikeycgto"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1398, "favorite_count": 1, "accepted_answer_id": 34400370, "answer_count": 1, "score": 5, "last_activity_date": 1570024292, "creation_date": 1450712866, "last_edit_date": 1538857049, "question_id": 34399461, "link": "https://stackoverflow.com/questions/34399461/what-is-the-idiomatic-way-to-encode-an-iterator-with-serde-json", "title": "What is the idiomatic way to encode an iterator with serde_json?", "body": "<p>I'm trying to <code>drain()</code> a <code>vec</code> in Rust and encode the results as a JSON string. What's the best, idiomatic way to do this?</p>\n\n<pre><code>#![feature(custom_derive, plugin)]\n#![plugin(serde_macros)]\n\nextern crate serde;\nextern crate serde_json;\n\n#[derive(Serialize, Deserialize, Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Point {\n    pub fn new(x: i32, y: i32) -&gt; Point {\n        Point {\n            x: x,\n            y: y\n        }\n    }\n}\n\nfn main() {\n    let mut points = vec![Point::new(1,2), Point::new(-2,-1), Point::new(0, 0)];\n    let mut drain = points.drain(..);\n\n    println!(\"{}\", serde_json::to_string(&amp;drain).unwrap());\n}\n</code></pre>\n"}, {"tags": ["memory", "dynamic", "rust", "allocation"], "comments": [{"owner": {"reputation": 768, "user_id": 2921084, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4b9735ab2730192bb7724211bab7719e?s=128&d=identicon&r=PG&f=1", "display_name": "hurnhu", "link": "https://stackoverflow.com/users/2921084/hurnhu"}, "edited": false, "score": 0, "creation_date": 1450712751, "post_id": 34399277, "comment_id": 56540132, "body": "The arrays sections from here (<a href=\"http://rustbyexample.com/primitives/array.html\" rel=\"nofollow noreferrer\">rustbyexample.com/primitives/array.html</a>) might be able to help you."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 6, "creation_date": 1450714527, "post_id": 34399277, "comment_id": 56541208, "body": "I would point out that this is terrible C++ code (the presence of <code>delete</code> is a give-away). Idiomatic C++ would be <code>std::vector&lt;double&gt; A; for (int i = 0; i &lt; 1000; ++i) { A.push_back(i); }</code>: no explicit memory manipulation!"}], "answers": [{"comments": [{"owner": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 5, "creation_date": 1515415207, "post_id": 34399451, "comment_id": 83279228, "body": "The question asks for an array and provides the C++ equivalent as an example, while this answer instead covers a dynamic collection type. This also spans the first two google results for allocating an array in rust, but I don&#39;t believe that this answers the question."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 2, "creation_date": 1515415570, "post_id": 34399451, "comment_id": 83279447, "body": "@Score_Under: Except the C++ code is using a dynamically-allocated array, so there&#39;s almost no practical difference.  A direct translation would be unsafe and unidiomatic.  Also, considering the original asker accepted the answer as given, I&#39;d say it <i>does</i> answer the question they intended to ask."}, {"owner": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 2, "creation_date": 1515416716, "post_id": 34399451, "comment_id": 83280112, "body": "The array in the question is allocated at runtime, but otherwise it is a fixed array (without the ability to resize, append, etc). Rust does have an equivalent type, and it is required for some standard library functions (e.g. when reading in bulk from a file)."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 1, "creation_date": 1515421947, "post_id": 34399451, "comment_id": 83283176, "body": "@Score_Under: Rust does not, in general, have a way of reliably allocating fixed-sized arrays on the heap, <i>except</i> by going through <code>Vec</code>, at which point there&#39;s not much benefit in getting bogged down talking about types that only have niche uses.  Also, there&#39;s no indication in the question that the use of a fixed size is even important.  As for the standard library requiring fixed-sized arrays, you&#39;re going to have to specify because I&#39;m not aware of any."}, {"owner": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 0, "creation_date": 1515422780, "post_id": 34399451, "comment_id": 83283748, "body": "<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/io/trait.Read.html#tymethod.read</a> The <code>read</code> method (to perform partial reads of a file) requires an array of u8, and will not accept a vec of u8. The equivalent accepting vec, <code>read_to_end</code>, does not allow you to specify the amount of data you wish to read."}, {"owner": {"reputation": 7106, "user_id": 104261, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e5ae0d2b7c7ecaf15f87c6e7c0cf2210?s=128&d=identicon&r=PG", "display_name": "Taras Alenin", "link": "https://stackoverflow.com/users/104261/taras-alenin"}, "reply_to_user": {"reputation": 1025, "user_id": 1091693, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ced72bd821f098b6ff818e4b1d8904a2?s=128&d=identicon&r=PG", "display_name": "Score_Under", "link": "https://stackoverflow.com/users/1091693/score-under"}, "edited": false, "score": 1, "creation_date": 1538620396, "post_id": 34399451, "comment_id": 92209171, "body": "@Score_Under that is a slice not an array in the function you are referring to <code>fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt;</code>"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 14, "last_activity_date": 1609951987, "last_edit_date": 1609951987, "creation_date": 1450712818, "answer_id": 34399451, "question_id": 34399277, "link": "https://stackoverflow.com/questions/34399277/how-do-i-allocate-an-array-at-runtime-in-rust/34399451#34399451", "title": "How do I allocate an array at runtime in Rust?", "body": "<p>Based on your question, I'd recommend reading the <a href=\"http://doc.rust-lang.org/book/\" rel=\"nofollow noreferrer\">Rust Book</a> if you haven't done so already.  Idiomatic Rust will almost <em>never</em> involve manually freeing memory.</p>\n<p>As for the equivalent to a dynamic array, you want <a href=\"https://doc.rust-lang.org/book/ch08-01-vectors.html\" rel=\"nofollow noreferrer\">a vector</a>.  Unless you're doing something unusual, you should avoid pointer arithmetic in Rust.  You can write the above code variously as:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// Pre-allocate space, then fill it.\nlet mut a = Vec::with_capacity(1000);\nfor i in 0..1000 {\n    a.push(i as f64);\n}\n\n// Allocate and initialise, then overwrite\nlet mut a = vec![0.0f64; 1000];\nfor i in 0..1000 {\n    a[i] = i as f64;\n}\n\n// Construct directly from iterator.\nlet a: Vec&lt;f64&gt; = (0..1000).map(|n| n as f64).collect();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1555341067, "post_id": 55691988, "comment_id": 98067240, "body": "See also <a href=\"https://stackoverflow.com/q/27859822/155423\">Is it possible to have stack allocated arrays with the size determined at runtime in Rust?</a>; <a href=\"https://stackoverflow.com/q/41710952/155423\">Allocate array onto heap with size known at runtime</a>; <a href=\"https://stackoverflow.com/q/53691012/155423\">Is there any way to allocate a standard Rust array directly on the heap, skipping the stack entirely?</a>; <a href=\"https://stackoverflow.com/q/25805174/155423\">Creating a fixed-size array on heap in Rust</a>; <a href=\"https://stackoverflow.com/q/30242770/155423\">How to allocate arrays on the heap in Rust 1.0?</a>, etc."}], "tags": [], "owner": {"reputation": 178, "user_id": 6859408, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/abc70e685ce2eab6ca60f25f1e04f6f7?s=128&d=identicon&r=PG&f=1", "display_name": "Information Aether", "link": "https://stackoverflow.com/users/6859408/information-aether"}, "is_accepted": false, "score": 9, "last_activity_date": 1555340994, "last_edit_date": 1555340994, "creation_date": 1555340388, "answer_id": 55691988, "question_id": 34399277, "link": "https://stackoverflow.com/questions/34399277/how-do-i-allocate-an-array-at-runtime-in-rust/55691988#55691988", "title": "How do I allocate an array at runtime in Rust?", "body": "<p>It is completely possible to allocate a fixed-sized array on the heap:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let a = Box::new([0.0f64; 1000]);\n</code></pre>\n\n<p>Because of deref coercion, you can still use this as an array:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for i in 0..1000 {\n    a[i] = i as f64;\n}\n</code></pre>\n\n<p>You can manually free it by doing:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>std::mem::drop(a);\n</code></pre>\n\n<p><code>drop</code> takes ownership of the array, so this is completely safe. As mentioned in the other answer, it is almost never necessary to do this, the box will be freed automatically when it goes out of scope. </p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user5280366"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10270, "favorite_count": 1, "accepted_answer_id": 34399451, "answer_count": 2, "score": 5, "last_activity_date": 1609951987, "creation_date": 1450712237, "last_edit_date": 1450713541, "question_id": 34399277, "link": "https://stackoverflow.com/questions/34399277/how-do-i-allocate-an-array-at-runtime-in-rust", "title": "How do I allocate an array at runtime in Rust?", "body": "<p>Once I have allocated the array, how do I manually free it? Is pointer arithmetic possible in unsafe mode? </p>\n\n<p>Like in C++:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>double *A=new double[1000];\ndouble *p=A;\nint i;\nfor(i=0; i&lt;1000; i++)\n{\n     *p=(double)i;\n      p++;\n}\ndelete[] A;\n</code></pre>\n\n<p>Is there any equivalent code in Rust?</p>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450705169, "post_id": 34395981, "comment_id": 56535157, "body": "You are never putting back the left fork. Thus everyone takes the left fork and waits for 150 ms. Then everone has the left fork and noone can take the right fork except for &quot;Gilles Deleuze&quot;. In fact the only reason this doesn&#39;t deadlock is that &quot;Michale Foucault&quot;&#39;s left fork is also &quot;Judith Butler&quot;&#39;s left fork and his right fork is also &quot;Emma Goldmann&quot;&#39;s right fork."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450705915, "post_id": 34395981, "comment_id": 56535599, "body": "@ker: Note that the example comes straight from the Rust book <a href=\"https://doc.rust-lang.org/book/dining-philosophers.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/dining-philosophers.html</a> and I agree it seems bizarre... Oh, and Michel Foucault should likely have the forks (4, 0) and not (0, 4) and when I do so I hit a deadlock in the playpen :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450706337, "post_id": 34395981, "comment_id": 56535868, "body": "@ker: Ah, never mind, apparently Michel Foucault is left-handed, though I do not see how this helps exactly..."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1450706867, "post_id": 34395981, "comment_id": 56536197, "body": "it helps in that 4/5 philosophers take the left fork first, thus there&#39;s one fork left, on the left side of Michel Foucault, thus there&#39;s a fork someone can take into their right hand. -&gt; no deadlock"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1450707994, "post_id": 34395981, "comment_id": 56536897, "body": "@ker: Yes, I meant I did not see how it helped answering the question (I did get it solved the problem itself). On the other hand, I played around on the playpen and the executions are always very deterministic. Even when two possible events could occur (either Judith or Michel can grab Fork 0 first), only one of them ever occurred across a (small) sample of executions and I had to take matters into my own hands (introducing targeted sleeps) to shuffle the order. Also... this solution seems inconsistent with the output presented in the book, as it leaves little room for concurrency."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1450707781, "creation_date": 1450707781, "answer_id": 34397886, "question_id": 34395981, "link": "https://stackoverflow.com/questions/34395981/dining-philosophers-from-rust-documentation-do-not-eat-concurrently/34397886#34397886", "title": "Dining philosophers from Rust documentation do not eat concurrently", "body": "<p>The implementation of the problem and the suggested output do not match because of the sleep between picking forks.</p>\n\n<p>I am unsure as to why <em>Michel Foucault</em> always starts first (probably the way thread dispatch works), but the rest is easily explained.</p>\n\n<p>Due to the pause (*) between grabbing the main-hand and off-hand forks, there are two phases:</p>\n\n<ul>\n<li>Phase 1: grab your main-hand fork</li>\n<li>Phase 2: grab your off-hand fork</li>\n</ul>\n\n<p>After phase 1:</p>\n\n<ul>\n<li>Fork 0 is in the hand of either Michel Foucault or Judith Butler</li>\n<li>Fork 1 is in the hand of Gilles Deleuze</li>\n<li>Fork 2 is in the hand of Karl Marx</li>\n<li>Fork 3 is in the hand of Emma Goldman</li>\n</ul>\n\n<p>Now, note that only Fork 4 is available for grab!</p>\n\n<p>We have two cases in Phase 2:</p>\n\n<p>a) Judith grabbed the Fork 0\n b) Michel grabbed the Fork 0</p>\n\n<p>Starting with (a):</p>\n\n<ul>\n<li>All philosophers are blocked except Emma, who grabs Fork 4</li>\n<li>When Emma is done, she releases Fork 3, which Karl immediately grabs</li>\n<li>When Karl is done...</li>\n<li>Finally, Judith is done, she releases Fork 0, and Michel eats</li>\n</ul>\n\n<p>In case (a), only one philosopher can eat at any given time.</p>\n\n<p><em>Note: I forced the case by pausing Michel for 150ms before letting him grab his first fork.</em></p>\n\n<p>The case (b) is more complicated as once again we have a race, this time between Emma and Michel to grab Fork 4. We are gentlemen, so Emma will go first and the case of Michel grabbing Fork 4 is now named (c):</p>\n\n<ul>\n<li>Emma grabs Fork 4, all other philosophers are now blocked</li>\n<li>When Emma is done, she releases Fork 3 and 4, both Michel and Karl jump on them</li>\n<li>When Michel is done, he releases Forks 0 and 4, Judith immediately grabs it... and starts waiting; nobody cares about Fork 4 now</li>\n<li>When Karl is done, he releases Fork 2, which Gilles immediately grabs</li>\n<li>When Gilles is done, he releases Fork 1, which Judith immediately grabs</li>\n<li>When Judith is done, all 5 have eaten</li>\n</ul>\n\n<p>We observe very limited concurrency here: Emma hits first, and only when she is finished do we have two parallel streams, one with Michel, and one going Karl > Gilles > Judith.</p>\n\n<p><em>Note: I forced the case by pausing Michel for 150ms before letting him grab his second fork.</em></p>\n\n<p>Finally, we have case (c):</p>\n\n<ul>\n<li>Michel grabs Fork 4, all other philosophers are now blocked</li>\n<li>When Michel is done, he releases Fork 4 and 0, which are grabbed respectively by Emma and Judith; Judith is still blocked (first sleeping, then waiting for Fork 1) but Emma starts eating</li>\n<li>When Emma is done...</li>\n</ul>\n\n<p>And here again, no concurrency at all.</p>\n\n<p>(*) This is not actually guaranteed, but 150ms being a long time computer-wise, unless the machine is very loaded, it will just happen.</p>\n\n<hr>\n\n<p>While the solution proposed by the book does work (there is no deadlock whatever the circumstances), it does not exhibit much concurrency, so it is more an exhibit of Rust than an exhibit of concurrency... but then, it is the Rust book and not the concurrency one!</p>\n\n<p>I do not understand why Michel's thread is systematically scheduled first on the playpen; but it can easily be countered by making him sleep specifically.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1450709736, "post_id": 34398313, "comment_id": 56538062, "body": "In the playpen, Michel Foucault always starts before Judith Butler; I wonder what degree of parallelism the playpen offers..."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1450834451, "post_id": 34398313, "comment_id": 56595726, "body": "@MatthieuM.: The playpen caches a program&#39;s output for a certain time. If you run the exact same program multiple times, you&#39;ll get the output from the cache."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1450859633, "post_id": 34398313, "comment_id": 56604004, "body": "@FrancisGagn&#233;: I know, I cheated by tweaking the program (adding spaces/comments) between runs after I realized it. The time difference between the return of a cached display and a real display was rather obvious."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1450709098, "creation_date": 1450709098, "answer_id": 34398313, "question_id": 34395981, "link": "https://stackoverflow.com/questions/34395981/dining-philosophers-from-rust-documentation-do-not-eat-concurrently/34398313#34398313", "title": "Dining philosophers from Rust documentation do not eat concurrently", "body": "<p>This is a semi-common question for this example. Programmers tend to think of threads as \"random\" because threads <em>usually</em> have differing start times and run lengths. Most usages of threads also don't lock a shared resource for the entire life of the thread. Remember that threads are sort-of deterministic, because they are scheduled by an algorithm.</p>\n\n<p>In this example, the main thread creates a whole bunch of threads and adds them to a queue managed by the operating system. Eventually, the main thread is blocked or is interrupted by the scheduler. The scheduler looks through the queue of threads and asks the \"first\" one if it can run. If it is runnable, then it is run for a time slice or until it is blocked.</p>\n\n<p>The \"first\" thread is up to the OS. Linux, for example, has multiple tweakable schedulers that allow you to prioritize which threads run. The scheduler can also choose to interrupt a thread earlier or later</p>\n\n<p>If you add a print at the very beginning of the thread, you can see that the threads do start in a different order. Here's a table of which thread starts first, based on 100 runs: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>| Position | Emma Goldman | Gilles Deleuze | Judith Butler | Karl Marx | Michel Foucault |\n|----------+--------------+----------------+---------------+-----------+-----------------|\n|        1 |            4 |              9 |            81 |         5 |               1 |\n|        2 |            5 |             66 |             9 |        17 |               3 |\n|        3 |           19 |             14 |             5 |        49 |              13 |\n|        4 |           46 |              9 |             3 |        20 |              22 |\n|        5 |           26 |              2 |             2 |         9 |              61 |\n</code></pre>\n\n<p>If I'm doing my statistics correctly, the most common starting order is:</p>\n\n<ol>\n<li>Judith Butler </li>\n<li>Gilles Deleuze </li>\n<li>Karl Marx </li>\n<li>Emma Goldman </li>\n<li>Michel Foucault </li>\n</ol>\n\n<p>Note that this matches the sequence of philosophers defined in the code!</p>\n\n<p>Also note that the algorithm itself imposes an ordering. All but one philosopher picks up the fork on the left hand first, then waits a bit. If the threads run in order, then each one in turn is waiting on the one before it. Most of the threads have a dependence on the thread sitting to the \"left\". If we pictured a circular table with everyone holding a left fork (a deadlock), and we picked one person to give an extra fork to (breaking the deadlock), then you can see there would be a cascade of people able to eat.</p>\n\n<p>Also remember that <code>println!</code> uses standard out; a mutable global resource that must be protected by a mutex. As such, printing can cause the thread to be blocked and rescheduled.</p>\n\n<p>I am on OS X, which likely explains the order that I semi-consistently get that is different from yours.</p>\n"}], "owner": {"reputation": 191, "user_id": 4313550, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/840d70062d48dd04df28fff3d07ef6d3?s=128&d=identicon&r=PG&f=1", "display_name": "TheBender", "link": "https://stackoverflow.com/users/4313550/thebender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1010, "favorite_count": 0, "accepted_answer_id": 34397886, "answer_count": 2, "score": 7, "last_activity_date": 1450709098, "creation_date": 1450701741, "last_edit_date": 1450706481, "question_id": 34395981, "link": "https://stackoverflow.com/questions/34395981/dining-philosophers-from-rust-documentation-do-not-eat-concurrently", "title": "Dining philosophers from Rust documentation do not eat concurrently", "body": "<p>I'm trying to follow the <a href=\"https://doc.rust-lang.org/book/dining-philosophers.html\">dining philosophers example</a> from the Rust documentation. Final code from the link:</p>\n\n<pre><code>use std::thread;\nuse std::sync::{Mutex, Arc};\n\nstruct Philosopher {\n    name: String,\n    left: usize,\n    right: usize,\n}\n\nimpl Philosopher {\n    fn new(name: &amp;str, left: usize, right: usize) -&gt; Philosopher {\n        Philosopher {\n            name: name.to_string(),\n            left: left,\n            right: right,\n        }\n    }\n\n    fn eat(&amp;self, table: &amp;Table) {\n        let _left = table.forks[self.left].lock().unwrap();\n        thread::sleep_ms(150);\n        let _right = table.forks[self.right].lock().unwrap();\n\n        println!(\"{} is eating.\", self.name);\n\n        thread::sleep_ms(1000);\n\n        println!(\"{} is done eating.\", self.name);\n    }\n}\n\nstruct Table {\n    forks: Vec&lt;Mutex&lt;()&gt;&gt;,\n}\n\nfn main() {\n    let table = Arc::new(Table { forks: vec![\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n        Mutex::new(()),\n    ]});\n\n    let philosophers = vec![\n        Philosopher::new(\"Judith Butler\", 0, 1),\n        Philosopher::new(\"Gilles Deleuze\", 1, 2),\n        Philosopher::new(\"Karl Marx\", 2, 3),\n        Philosopher::new(\"Emma Goldman\", 3, 4),\n        Philosopher::new(\"Michel Foucault\", 0, 4),\n    ];\n\n    let handles: Vec&lt;_&gt; = philosophers.into_iter().map(|p| {\n        let table = table.clone();\n\n        thread::spawn(move || {\n            p.eat(&amp;table);\n        })\n    }).collect();\n\n    for h in handles {\n        h.join().unwrap();\n    }\n}\n</code></pre>\n\n<p>Running this produces the following output:</p>\n\n<pre><code>Michel Foucault is eating.\nMichel Foucault is done eating.\nEmma Goldman is eating.\nEmma Goldman is done eating.\nKarl Marx is eating.\nKarl Marx is done eating.\nGilles Deleuze is eating.\nGilles Deleuze is done eating.\nJudith Butler is eating.\nJudith Butler is done eating.\n</code></pre>\n\n<p>According to the documentation, the philosophers should be able to eat at the same time. Desired result is something like this:</p>\n\n<pre><code>Gilles Deleuze is eating.\nEmma Goldman is eating.\nEmma Goldman is done eating.\nGilles Deleuze is done eating.\nJudith Butler is eating.\nKarl Marx is eating.\nJudith Butler is done eating.\nMichel Foucault is eating.\nKarl Marx is done eating.\nMichel Foucault is done eating.\n</code></pre>\n\n<p>Unfortunately, this does not happen no matter how often the code is being executed.</p>\n\n<p>I'm currently using <code>rustc 1.5.0 (3d7cd77e4 2015-12-04)</code> on Windows, but the problem occurs on the Rust playground as well. Feel free to <a href=\"http://is.gd/QOvOw0\">try it yourself</a>.</p>\n"}, {"tags": ["emacs", "rust", "dot-emacs"], "comments": [{"owner": {"reputation": 12066, "user_id": 96740, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/cf8a610127d1108dfe67f673320b5fe5?s=128&d=identicon&r=PG", "display_name": "cpjolicoeur", "link": "https://stackoverflow.com/users/96740/cpjolicoeur"}, "edited": false, "score": 0, "creation_date": 1452111334, "post_id": 34395636, "comment_id": 57029760, "body": "I&#39;m having a somewhat related issue with the rust layer, but I have <code>(setq-default rust-enable-racer nil)</code> meaning it shouldn&#39;t use racer for auto completion at all and I get the same warning"}], "answers": [{"tags": [], "owner": {"reputation": 827, "user_id": 962163, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f6cfe6e59978b1bb04311df2d846c579?s=128&d=identicon&r=PG", "display_name": "limon", "link": "https://stackoverflow.com/users/962163/limon"}, "is_accepted": false, "score": 1, "last_activity_date": 1459913766, "creation_date": 1459913766, "answer_id": 36441011, "question_id": 34395636, "link": "https://stackoverflow.com/questions/34395636/when-trying-to-use-company-rust-company-cannot-find-racer-even-when-provided-a/36441011#36441011", "title": "When trying to use company-rust, company cannot find racer even when provided a correct path", "body": "<pre><code>(setq company-racer-executable \"path/to/your/racer\")\n</code></pre>\n"}], "owner": {"reputation": 11, "user_id": 5703296, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-Fgk8pf9x2aU/AAAAAAAAAAI/AAAAAAAAAFg/Mv-vTEcFuuQ/photo.jpg?sz=128", "display_name": "Aza Sambesi", "link": "https://stackoverflow.com/users/5703296/aza-sambesi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1459913766, "creation_date": 1450700676, "question_id": 34395636, "link": "https://stackoverflow.com/questions/34395636/when-trying-to-use-company-rust-company-cannot-find-racer-even-when-provided-a", "title": "When trying to use company-rust, company cannot find racer even when provided a correct path", "body": "<p>I'm having some issues getting company-rust to work the way it should. It loads fine initially, then dies with this error when I attempt to actually use it: </p>\n\n<blockquote>\n  <p>deferred error : (file-error \"Searching for program\" \"no such file or directory\" \"racer\") </p>\n</blockquote>\n\n<p>The path is correct and I can <a href=\"http://puu.sh/m3ryx/c7ebb8facf.png\" rel=\"nofollow\">use it in <code>eshell</code></a>. I'm on most-recent OSX, with the <code>railwaycat/emacs-mac-port</code> as emacs.</p>\n\n<p>My <a href=\"https://gist.github.com/Az4reus/1fff3487ef8320149eca\" rel=\"nofollow\">init.el</a> is here, and I'm not quite sure of what is causing it, and I'm kind of out of ideas. </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1450637638, "last_edit_date": 1495540324, "creation_date": 1450636078, "answer_id": 34384326, "question_id": 34384089, "link": "https://stackoverflow.com/questions/34384089/how-can-i-modify-a-slice-that-is-a-function-parameter/34384326#34384326", "title": "How can I modify a slice that is a function parameter?", "body": "<p>If you need to modify an immutable slice, <a href=\"https://stackoverflow.com/a/34384487/234590\">see Cornstalks's answer</a>.</p>\n\n<p>You cannot modify a mutable slice in safe Rust. When you take a subslice of a mutable slice, you effectively borrow from the original slice. This means that the subslice must not outlive the original slice.</p>\n\n<p>You want something that looks like this:</p>\n\n<pre><code>fn pop_front(slice: &amp;mut &amp;mut [i32]) {\n    *slice = &amp;mut slice[1..];\n}\n</code></pre>\n\n<p>but the subslice <code>slice[1..]</code> is only valid until the end of the function, and which point the borrow will end and the original slice (the <code>slice</code> parameter) will be usable again.</p>\n\n<p>We can use some <code>unsafe</code> code to construct manually the slice we want:</p>\n\n<pre><code>use std::slice;\n\nfn pop_front(slice: &amp;mut &amp;mut [i32]) {\n    let ptr = slice.as_mut_ptr();\n    let len = slice.len();\n    *slice = unsafe { slice::from_raw_parts_mut(ptr.offset(1), len - 1) };\n}\n\nfn main() {\n    let mut slice = &amp;mut [0, 1, 2, 3][..];\n    pop_front(&amp;mut slice);\n    println!(\"{:?}\", slice);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/0svRzz\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>This program outputs:</p>\n\n<pre><code>[1, 2, 3]\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1450637433, "post_id": 34384487, "comment_id": 56510399, "body": "This mutates an immutable slice, not a mutable slice. It&#39;s not clear from the question what was the OP&#39;s need..."}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1450637790, "post_id": 34384487, "comment_id": 56510514, "body": "@FrancisGagn&#233;: this is what I was trying to ask for in my question, though to be honest I&#39;m using mutable slices in my real code so your answer was very helpful there. I was having a hard time trying to sensibly talk about mutable immutable slices in my question, because &quot;mutable immutable&quot; sounds nonsensical (but is probably the correct term)."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1450637970, "post_id": 34384487, "comment_id": 56510566, "body": "Your <code>pop_front</code> takes a mutable <i>reference</i> to an immutable <i>slice</i>. My <code>pop_front</code> takes a mutable reference to a mutable slice."}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1450638151, "post_id": 34384487, "comment_id": 56510619, "body": "@FrancisGagn&#233;: that wording sounds much better. Thanks for all your help! I wish I had more than one upvote to give you."}], "tags": [], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "is_accepted": false, "score": 3, "last_activity_date": 1450637826, "last_edit_date": 1495540324, "creation_date": 1450637152, "answer_id": 34384487, "question_id": 34384089, "link": "https://stackoverflow.com/questions/34384089/how-can-i-modify-a-slice-that-is-a-function-parameter/34384487#34384487", "title": "How can I modify a slice that is a function parameter?", "body": "<p>Using part of <a href=\"https://stackoverflow.com/a/34384326/1287251\">Francis Gagn\u00e9's answer</a> (I didn't think of trying <code>&amp;mut &amp;</code>), I was able to get it working without using <code>unsafe</code> code:</p>\n\n<pre><code>fn pop_front(mut slice: &amp;mut &amp;[i32]) {\n    *slice = &amp;slice[1..];\n}\n\nfn main() {\n    let mut slice = &amp;[0, 1, 2, 3][..];\n    pop_front(&amp;mut slice);\n    println!(\"{:?}\", slice);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/wOfEq1\" rel=\"nofollow noreferrer\">Output</a>:</p>\n\n<pre><code>[1, 2, 3]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 12, "last_activity_date": 1597763594, "last_edit_date": 1597763594, "creation_date": 1450688304, "answer_id": 34391983, "question_id": 34384089, "link": "https://stackoverflow.com/questions/34384089/how-can-i-modify-a-slice-that-is-a-function-parameter/34391983#34391983", "title": "How can I modify a slice that is a function parameter?", "body": "<p>As others have said, the core idea here is to take a <code>&amp;mut &amp;... [T]</code> (where <code>...</code> is <code>mut</code> or empty) and read/write to the internal slice. The other answers demonstrate it is possible for <code>&amp;mut &amp;[T]</code> in safe code, and possible for <code>&amp;mut &amp;mut [T]</code> with unsafe code, but they don't explain why there's the difference... and <code>&amp;mut &amp;mut [T]</code> is possible with safe code too.</p>\n<p>In explicit-lifetime terms, the nested reference is something like <code>&amp;'a mut &amp;'b ... [T]</code> for some lifetimes <code>'a</code> and '<code>b</code>, and the goal here is to get a <code>&amp;'b ... [T]</code>, slice it and write that into the <code>&amp;'a mut</code>.</p>\n<p>For <code>&amp;'a mut &amp;'b [T]</code>, this is easy: <code>&amp;[T]</code> is copy, so writing <code>*slice = &amp;slice[1..]</code> will effectively copy the <code>&amp;'b [T]</code> out of the <code>&amp;mut</code> and then, later, overwrite the existing value with the shorter one. The copy means that one literally gets a <code>&amp;'b [T]</code> to operate with, and so there's no direct connection between that and the <code>&amp;'a mut</code>, and hence it is legal to mutate. It is effectively something like</p>\n<pre><code>fn pop_front&lt;'a, 'b&gt;(slice: &amp;'a mut &amp;'b[i32]) {\n    // *slice = &amp;slice[1..] behaves like\n    let value: &amp;'b [i32] = *slice;\n    *slice = &amp;value[1..]\n}\n</code></pre>\n<p>(I've labelled the lifetimes and annotated the type to tie into my explanation, but this is not required for the code to work.)</p>\n<p>For <code>&amp;'a mut &amp;'b mut [T]</code> things are a little trickier: <code>&amp;mut [T]</code> cannot be copied: dereferencing won't copy, it will reborrow to give a <code>&amp;'a mut [T]</code> i.e. the slice has a lifetime that is connected to the <em>outer</em> <code>&amp;'a mut</code>, not the inner <code>&amp;'b mut [T]</code>. This means the sliced reference has a shorter lifetime than the type it is trying to overwrite, so it's invalid to store the slice into that position. In other words:</p>\n<pre><code>fn pop_front&lt;'a, 'b&gt;(slice: &amp;'a mut &amp;'b mut [i32]) {\n    let value: &amp;'a mut [i32] = &amp;mut **slice;\n    *slice = &amp;mut value[1..] // error\n}\n</code></pre>\n<p>The way to do this safely for <code>&amp;'a mut &amp;'b mut [T]</code> is to get the internal slice out of the reference with that <code>'b</code> lifetime. This requires keeping track of the &quot;one owner&quot; rule, doing no borrowing, and the best function for this sort of ownership manipulation is <a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>mem::replace</code></a>. It allows us to extract the inner <code>&amp;'b mut [T]</code> by swapping it with some placeholder, which we can then overwrite with the short version. The best/only placeholder is an empty array: writing <code>&amp;mut []</code> can be a <code>&amp;'c mut [X]</code> for any type <code>X</code> and any lifetime <code>'c</code>, since there's no data to store and so nothing needs initialisation, and no data will ever become invalid. In particular, it can be a <code>&amp;'b mut [T]</code>:</p>\n<pre><code>fn pop_front&lt;'a, 'b&gt;(slice: &amp;'a mut &amp;'b mut [i32]) {\n    let value: &amp;'b mut [i32] = mem::replace(slice, &amp;mut []);\n    *slice = &amp;mut value[1..]\n}\n</code></pre>\n<p>Since <code>&amp;mut[T]</code> implements <code>Default</code>, we can also use <a href=\"https://doc.rust-lang.org/std/mem/fn.take.html\" rel=\"nofollow noreferrer\"><code>mem::take</code></a>:</p>\n<pre><code>fn pop_front&lt;'a, 'b&gt;(slice: &amp;'a mut &amp;'b mut [i32]) {\n    let value: &amp;'b mut [i32] = mem::take(slice);\n    *slice = &amp;mut value[1..]\n}\n</code></pre>\n<p>(As above, I've made things more explicit than necessary.)</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/61195410/155423\">Why can&#39;t I assign one dereference of a reference of a reference to another when the outer lifetimes differ?</a></li>\n<li><a href=\"https://stackoverflow.com/q/32165917/3650362\">Why does linking lifetimes matter only with mutable references?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27098694/155423\">How can I swap in a new value for a field in a mutable reference to a structure?</a></li>\n</ul>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3243, "favorite_count": 2, "accepted_answer_id": 34391983, "answer_count": 3, "score": 9, "last_activity_date": 1597763594, "creation_date": 1450634539, "last_edit_date": 1595437561, "question_id": 34384089, "link": "https://stackoverflow.com/questions/34384089/how-can-i-modify-a-slice-that-is-a-function-parameter", "title": "How can I modify a slice that is a function parameter?", "body": "<p>Parameters can be passed to functions and modified:</p>\n<pre><code>fn set_42(int: &amp;mut i32) {\n    *int += 42;\n}\n\nfn main() {\n    let mut int = 0;\n    set_42(&amp;mut int);\n    println!(&quot;{:?}&quot;, int);\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=5b4bf5e3c01b23722360836b11658b06\" rel=\"nofollow noreferrer\">Output</a>:</p>\n<pre><code>42\n</code></pre>\n<hr />\n<p>Changing the code to use a slice fails with a whole bunch of errors:</p>\n<pre><code>fn pop_front(slice: &amp;mut [i32]) {\n    *slice = &amp;{slice}[1..];\n}\n\nfn main() {\n    let mut slice = &amp;[0, 1, 2, 3][..];\n    pop_front(&amp;mut slice);\n    println!(&quot;{:?}&quot;, slice);\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a11eea7cc0ce87f2fc090af821250337\" rel=\"nofollow noreferrer\">Output</a>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:2:14\n  |\n2 |     *slice = &amp;{ slice }[1..];\n  |              ^^^^^^^^^^^^^^^\n  |              |\n  |              expected slice `[i32]`, found `&amp;[i32]`\n  |              help: consider removing the borrow: `{ slice }[1..]`\n\nerror[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n --&gt; src/main.rs:2:5\n  |\n2 |     *slice = &amp;{ slice }[1..];\n  |     ^^^^^^ doesn't have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `[i32]`\n  = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n  = note: the left-hand-side of an assignment must have a statically known size\n</code></pre>\n<hr />\n<p>If we try using a mutable slice (which isn't what I really want; I don't want to modify the values within the slice, I just want to modify the slice itself so it covers a smaller range of elements) and a mutable parameter, it has no effect on the original slice:</p>\n<pre><code>fn pop_front(mut slice: &amp;mut [i32]) {\n    slice = &amp;mut {slice}[1..];\n}\n\nfn main() {\n    let mut slice = &amp;mut [0, 1, 2, 3][..];\n    pop_front(&amp;mut slice);\n    println!(&quot;{:?}&quot;, slice);\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6ceac9eee130dab8f82f667acd11efea\" rel=\"nofollow noreferrer\">Output</a>:</p>\n<pre><code>[0, 1, 2, 3]\n</code></pre>\n<hr />\n<p>Is there a way to modify a slice that's a function parameter? I don't want to modify the elements within the slice; I just want to modify the range of the slice itself so it becomes a smaller &quot;sub-slice&quot;.</p>\n"}, {"tags": ["c", "rust"], "comments": [{"owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "edited": false, "score": 0, "creation_date": 1450604790, "post_id": 34379641, "comment_id": 56500957, "body": "Have you seen this? <a href=\"https://codeseekah.com/2015/01/25/rusts-osargs-to-cs-argv/\" rel=\"nofollow noreferrer\">codeseekah.com/2015/01/25/rusts-osargs-to-cs-argv</a>"}, {"owner": {"reputation": 14609, "user_id": 667648, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/mTpbt.jpg?s=128&g=1", "display_name": "Dair", "link": "https://stackoverflow.com/users/667648/dair"}, "reply_to_user": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "edited": false, "score": 0, "creation_date": 1450605430, "post_id": 34379641, "comment_id": 56501108, "body": "@JohnZwinck: I get an unresolved import <code>std::os::args_as_bytes</code>. I tried using a nightly and beta build. Neither of them could find it."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1450606964, "post_id": 34379641, "comment_id": 56501433, "body": "Just to be clear: <code>~</code> was removed from the language quite some time ago.  It turned (variously) into <code>Box</code>, <code>Vec</code>, and <code>String</code>, depending on context.  If you see it in example code, it&#39;s out of date and probably not very useful."}], "answers": [{"comments": [{"owner": {"reputation": 100, "user_id": 2352259, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b118dc1a567c055976442f8f38576967?s=128&d=identicon&r=PG", "display_name": "aidanhs", "link": "https://stackoverflow.com/users/2352259/aidanhs"}, "edited": false, "score": 0, "creation_date": 1486522279, "post_id": 34379937, "comment_id": 71377472, "body": "You should push <code>ptr::null()</code> to the end of <code>c_args</code> (and then subtract 1 from <code>.len()</code>) as C code may (validly) rely on a NULL sentinel at the end of argv."}], "tags": [], "owner": {"reputation": 854, "user_id": 3989982, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6941e7388870864da83acedf9e9c7693?s=128&d=identicon&r=PG&f=1", "display_name": "Tibor Benke", "link": "https://stackoverflow.com/users/3989982/tibor-benke"}, "is_accepted": true, "score": 8, "last_activity_date": 1450607945, "last_edit_date": 1450607945, "creation_date": 1450606632, "answer_id": 34379937, "question_id": 34379641, "link": "https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents/34379937#34379937", "title": "How do I convert Rust `Args` into the argc and argv C equivalents?", "body": "<p>My answer works with the current stable Rust (1.5) and probably with beta and nightly.</p>\n\n<p>The following Rust code calls the <code>foo(argc, argv)</code> function implemented in C. The signature of <code>foo</code> is very similar to a <code>main</code> function.</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>extern crate libc;\n\nuse libc::c_char;\nuse libc::c_int;\n\nuse std::ffi::CString;\n\n#[link(name=\"foo\")]\nextern \"C\" {\n    fn foo(argc: c_int, argv: *const *const c_char);\n}\n\nfn main() {\n    // create a vector of zero terminated strings\n    let args = std::env::args().map(|arg| CString::new(arg).unwrap() ).collect::&lt;Vec&lt;CString&gt;&gt;();\n    // convert the strings to raw pointers\n    let c_args = args.iter().map(|arg| arg.as_ptr()).collect::&lt;Vec&lt;*const c_char&gt;&gt;();\n    unsafe {\n        // pass the pointer of the vector's internal buffer to a C function\n        foo(c_args.len() as c_int, c_args.as_ptr());\n    };\n}\n</code></pre>\n\n<p>Note, that the C side only <strong>borrows</strong> the pointers to the strings. If you want to store them, use <code>strdup()</code> on them.</p>\n\n<p>I also used <code>unwrap()</code> on <code>CString</code> instances. If your string contains 0 bytes, it will  return an error, see <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.new\" rel=\"noreferrer\">https://doc.rust-lang.org/stable/std/ffi/struct.CString.html#method.new</a>.</p>\n\n<p>Proof:</p>\n\n<p>I put this code into a cargo project, and added <code>libc</code> as a dependency. \nThe <code>foo()</code> function looks like this:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n\nvoid foo(int argc, char* argv[]) {\n    int i;\n\n    for (i = 0; i &lt; argc; i++) {\n        printf(\"argv[%d]: %s\\n\", i, argv[i]);\n    }\n}\n</code></pre>\n\n<p>I compiled this code with:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>gcc foo.c -o libfoo.so -shared -fPIC\n</code></pre>\n\n<p>Then copied <code>libfoo.so</code> under <code>target/debug/deps</code> (just to be in the library search path). Then I run my cargo project:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ cargo run the quick brown fox\n   Compiling args v0.1.0 (file:///home/tibi/Codes/Rust/argv/args)\n     Running `target/debug/args the quick brown fox`\nargv[0]: target/debug/args\nargv[1]: the\nargv[2]: quick\nargv[3]: brown\nargv[4]: fox\n</code></pre>\n"}], "owner": {"reputation": 14609, "user_id": 667648, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/mTpbt.jpg?s=128&g=1", "display_name": "Dair", "link": "https://stackoverflow.com/users/667648/dair"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2024, "favorite_count": 3, "accepted_answer_id": 34379937, "answer_count": 1, "score": 5, "last_activity_date": 1450623151, "creation_date": 1450604206, "last_edit_date": 1450623151, "question_id": 34379641, "link": "https://stackoverflow.com/questions/34379641/how-do-i-convert-rust-args-into-the-argc-and-argv-c-equivalents", "title": "How do I convert Rust `Args` into the argc and argv C equivalents?", "body": "<p>I am using a C API (in particular <code>MPI_Init</code>) that needs <code>int argc, char **argv</code>. I am trying to generate an equivalent <code>argc, argv</code> with the following code:</p>\n\n<pre><code>let argc = std::env::args().len() as c_int;\nlet c_strs: ~[CString] = std::env:args().map(|s: &amp; &amp;str| s.to_c_str());\nlet mut argv: ~[*c_char] = c_strs.map(|c: &amp;CString| c.with_ref(|ptr| ptr));\nif null_terminate {\n    argv.push(std::ptr::null());\n}\n</code></pre>\n\n<p>By adapting <a href=\"https://github.com/rust-lang/rust/issues/9564\" rel=\"nofollow\">this discussion on Github</a>.</p>\n\n<p>It fails with:</p>\n\n<pre><code>error: expected type, found `~`\nsrc/lib.rs:37   let c_strs: ~[CString] = std::env::args().map(|s: &amp; &amp;str| s.to_c_str());\n                            ^\n</code></pre>\n\n<p>I got rid of the <code>~</code> and then it could not find <code>to_c_str()</code> and was unsure what to replace <code>to_c_str</code> with, <code>to_raw()</code> (for instance) failed.</p>\n\n<p>Does anyone know of a way to convert <code>Args</code> to a more C friendly format?</p>\n"}, {"tags": ["rust", "ffi", "libc", "out-parameters"], "answers": [{"tags": [], "owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "is_accepted": false, "score": 2, "last_activity_date": 1601514612, "last_edit_date": 1601514612, "creation_date": 1450573989, "answer_id": 34377078, "question_id": 34377051, "link": "https://stackoverflow.com/questions/34377051/how-can-i-initialize-sigset-t-or-other-variables-used-as-out-parameters-in-rus/34377078#34377078", "title": "How can I initialize sigset_t or other variables used as &quot;out parameters&quot; in Rust?", "body": "<p>How about using <a href=\"https://doc.rust-lang.org/std/mem/fn.zeroed.html\" rel=\"nofollow noreferrer\"><code>mem::zeroed</code></a>? The docs even say:</p>\n<blockquote>\n<p>This is useful for FFI functions sometimes, but should generally be avoided.</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1601649023, "last_edit_date": 1601649023, "creation_date": 1450574373, "answer_id": 34377103, "question_id": 34377051, "link": "https://stackoverflow.com/questions/34377051/how-can-i-initialize-sigset-t-or-other-variables-used-as-out-parameters-in-rus/34377103#34377103", "title": "How can I initialize sigset_t or other variables used as &quot;out parameters&quot; in Rust?", "body": "<p>The standard library defines a couple of types and functions to deal with initialization. They are generic, so they can be used to initialize values of any type.</p>\n<p>Modern Rust suggests using <a href=\"https://doc.rust-lang.org/std/mem/union.MaybeUninit.html\" rel=\"nofollow noreferrer\"><code>MaybeUninit</code></a> in most cases. Applied to your case, it would look something like:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem::MaybeUninit;\n\nlet mut new_action: libc::sigaction = MaybeUninit::zeroed().assume_init();\nlet mut old_action: libc::sigaction = MaybeUninit::zeroed().assume_init();\n</code></pre>\n<p><code>MaybeUninit</code> was stabilized in Rust 1.36. Before that, you could use  <a href=\"https://doc.rust-lang.org/std/mem/fn.uninitialized.html\" rel=\"nofollow noreferrer\"><code>std::mem::uninitialized()</code></a>, which gives you an uninitialized value. LLVM will consider the contents to be undefined, and will perform aggressive optimizations based on this. You <em>must</em> initialize any value before it's read.</p>\n<p>More appropriate to your case, there's <a href=\"https://doc.rust-lang.org/std/mem/fn.zeroed.html\" rel=\"nofollow noreferrer\"><code>std::mem::zeroed()</code></a>, which gives you a value whose storage is filled with zeroes. This function is <code>unsafe</code> because such a value is not necessarily legal for all types. <code>zeroed()</code> is appropriate for &quot;plain old data&quot; (POD) types. Applied to your case, it would look something like:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\n\nlet mut new_action: libc::sigaction = mem::zeroed();\nlet mut old_action: libc::sigaction = mem::zeroed();\n</code></pre>\n"}], "owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 757, "favorite_count": 1, "accepted_answer_id": 34377103, "answer_count": 2, "score": 2, "last_activity_date": 1601649023, "creation_date": 1450573710, "last_edit_date": 1601515092, "question_id": 34377051, "link": "https://stackoverflow.com/questions/34377051/how-can-i-initialize-sigset-t-or-other-variables-used-as-out-parameters-in-rus", "title": "How can I initialize sigset_t or other variables used as &quot;out parameters&quot; in Rust?", "body": "<p>I'm trying to learn more about FFI in Rust and linking with C libraries, specifically <code>libc</code>. While on my &quot;quest&quot;, I came across the following problem.</p>\n<h3>Normal pattern in C</h3>\n<pre class=\"lang-c prettyprint-override\"><code>void(* sig_set(int sig, void(*handler)(int))) {\n    // uninitialized sigaction structs\n    struct sigaction new_action, old_action;\n\n    // assign options to new action\n    new_action.sa_flags = SA_RESTART;\n    new_action.sa_handler = handler;\n    sigemptyset(&amp;new_action.sa_mask);\n\n    if(sigaction(sig, &amp;new_action, &amp;old_action) &lt; 0) {\n        fprintf(stderr, &quot;Error: %s!\\n&quot;, &quot;signal error&quot;);\n        exit(1);\n    }\n    return old_action.sa_handler;\n}\n</code></pre>\n<h3>Attempt in Rust</h3>\n<pre class=\"lang-rust prettyprint-override\"><code>use libc; // 0.2.77\n\nfn sig_init(sig: i32, handler: fn(i32) -&gt; ()) -&gt; usize {\n    unsafe {\n        let mut new_action: libc::sigaction;\n        let mut old_action: libc::sigaction;\n\n        new_action.sa_flags = 0x10000000;\n        new_action.sa_sigaction = handler as usize;\n        libc::sigemptyset(&amp;mut new_action.sa_mask as *mut libc::sigset_t);\n\n        libc::sigaction(\n            sig,\n            &amp;mut new_action as *mut libc::sigaction,\n            &amp;mut old_action as *mut libc::sigaction,\n        );\n        old_action.sa_sigaction\n    }\n}\n</code></pre>\n<p>The compiler will throw the following error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0381]: assign to part of possibly-uninitialized variable: `new_action`\n --&gt; src/lib.rs:8:9\n  |\n8 |         new_action.sa_flags = 0x10000000;\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `new_action`\n\nerror[E0381]: borrow of possibly-uninitialized variable: `old_action`\n  --&gt; src/lib.rs:15:13\n   |\n15 |             &amp;mut old_action as *mut libc::sigaction,\n   |             ^^^^^^^^^^^^^^^ use of possibly-uninitialized `old_action`\n</code></pre>\n<p>This makes sense as very bad things could happen if <code>sigemptyset</code> were to read from <code>sa_mask</code>. So I tried the following on line 3 of the above.</p>\n<pre><code>let mut new_action: libc::sigaction = libc::sigaction {\n    sa_sigaction: handler as usize,\n    sa_flags: 0x10000000,\n    sa_mask: mask,\n};\n</code></pre>\n<p>This will not work as <code>_restorer</code> is missing in the above example, but <code>_restorer</code> is private. How would I get around this problem or a similar situation? Would you use something like <code>mem::transmute</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "edited": false, "score": 1, "creation_date": 1450774233, "post_id": 34375741, "comment_id": 56564557, "body": "if the Iterator does not need to be returned from a function, the second solution can also be done with a reference: <a href=\"http://is.gd/wkGZVp\" rel=\"nofollow noreferrer\">playground</a>. The inconvenience is that <code>&amp;Iterator</code> (unlike <code>Box&lt;Iterator&gt;</code>) does not <code>impl Iterator</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1450561710, "creation_date": 1450561710, "answer_id": 34375741, "question_id": 34374980, "link": "https://stackoverflow.com/questions/34374980/creating-an-iterator-that-either-steps-upwards-or-downwards/34375741#34375741", "title": "Creating an iterator that either steps upwards or downwards", "body": "<p>The direct solution is to simply create an iterator that can either count upwards or downwards. Use an <code>enum</code> to choose between the types:</p>\n\n<pre><code>use std::ops::Range;\nuse std::iter::Rev;\n\nenum Foo {\n    Upwards(Range&lt;u8&gt;),\n    Downwards(Rev&lt;Range&lt;u8&gt;&gt;),\n}\n\nimpl Foo {\n    fn new(min: u8, limit: u8, max: u8, go_up: bool) -&gt; Foo {\n        if go_up {\n          Foo::Upwards(min..limit)\n        } else {\n          Foo::Downwards((limit..max).rev())\n        }\n    }\n}\n\nimpl Iterator for Foo {\n    type Item = u8;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        match *self {\n            Foo::Upwards(ref mut i) =&gt; i.next(),\n            Foo::Downwards(ref mut i) =&gt; i.next(),\n        }\n    }\n}\n\nfn main() {\n    for i in Foo::new(1, 5, 10, true) { \n        println!(\"{}\", i);\n    }\n\n    for i in Foo::new(1, 5, 10, false) { \n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>Another pragmatic solution that introduces a little bit of indirection is to <code>Box</code> the iterators:</p>\n\n<pre><code>fn thing(min: u8, limit: u8, max: u8, go_up: bool) -&gt; Box&lt;Iterator&lt;Item = u8&gt;&gt; {\n    if go_up {\n      Box::new(min..limit)\n    } else {\n      Box::new((limit..max).rev())\n    }\n}\n\nfn main() {\n    for i in thing(1, 5, 10, true) { \n        println!(\"{}\", i);\n    }\n\n    for i in thing(1, 5, 10, false) { \n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1450574124, "post_id": 34376490, "comment_id": 56495717, "body": "Ugh, <code>size_hint</code>. I always forget to forward that. I really need to write a <code>delegate_trait</code> compiler magic..."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1450567787, "creation_date": 1450567787, "answer_id": 34376490, "question_id": 34374980, "link": "https://stackoverflow.com/questions/34374980/creating-an-iterator-that-either-steps-upwards-or-downwards/34376490#34376490", "title": "Creating an iterator that either steps upwards or downwards", "body": "<p>Personally, your solution</p>\n\n<pre><code>iter = if go_up {\n  (min as i64 .. limit as i64).step_by(1)\n} else {\n  (limit as i64 .. max as i64).step_by(-1)\n};\n</code></pre>\n\n<p>is a better option than Shepmaster's first example, since it's more complete (eg. there's a <code>size_hint</code>), it's more likely to be correct by virtue of being a standard tool and it's faster to write.</p>\n\n<p>It's true that this is unstable, but there's nothing stopping you from just copying <a href=\"https://doc.rust-lang.org/src/core/iter.rs.html#3139-3142\" rel=\"nofollow\">the source</a> in the meantime. That gives you a nice upgrade path for when this eventually gets stabilized.</p>\n\n<p>The <code>enum</code> wrapper technique is great in more complex cases, though, but in this case I'd be tempted to KISS.</p>\n"}], "owner": {"reputation": 3536, "user_id": 1371116, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61e179a755e44f07873b2ccd75771123?s=128&d=identicon&r=PG", "display_name": "Isaac", "link": "https://stackoverflow.com/users/1371116/isaac"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "accepted_answer_id": 34375741, "answer_count": 2, "score": 1, "last_activity_date": 1450567787, "creation_date": 1450556293, "last_edit_date": 1450561867, "question_id": 34374980, "link": "https://stackoverflow.com/questions/34374980/creating-an-iterator-that-either-steps-upwards-or-downwards", "title": "Creating an iterator that either steps upwards or downwards", "body": "<p>I'd ideally like to have something like the following:</p>\n\n<pre><code>iter = if go_up {\n  (min .. limit)\n} else {\n  (limit .. max).rev()\n};\n</code></pre>\n\n<p>to create an iterator that either counts up or down to some limit, depending on the situation. However, because <code>Range</code> and <code>Rev</code> are different types, I can't do this. I can use the <code>step_by</code> feature, but because my limits are an unsigned data-type, I then also have to cast everything. The best I have so far is:</p>\n\n<pre><code>#![feature(step_by)]\niter = if go_up {\n  (min as i64 .. limit as i64).step_by(1)\n} else {\n  (limit as i64 .. max as i64).step_by(-1)\n};\n</code></pre>\n\n<p>but this requires both unstable features, and shoehorning my types. It seems like there should be a neater way to do this; does anyone know one?</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450551536, "post_id": 34374236, "comment_id": 56490341, "body": "Interesting. So basically you can use <code>UFCS</code> only when the trait method takes some sort of <code>self</code> like here? <a href=\"http://is.gd/36zFFZ\" rel=\"nofollow noreferrer\">is.gd/36zFFZ</a>"}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450552224, "post_id": 34374236, "comment_id": 56490549, "body": "Oh, it sure is possible. See my edit. I didn&#39;t go into details because your example was so minimal I thought you were using the wrong tool for the job."}, {"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450552659, "post_id": 34374236, "comment_id": 56490692, "body": "Oh, that&#39;s even more interesting! I&#39;m really just poking around with language features ;)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1450552166, "last_edit_date": 1450552166, "creation_date": 1450551281, "answer_id": 34374236, "question_id": 34374149, "link": "https://stackoverflow.com/questions/34374149/what-type-annotations-does-rust-want-for-this-ufcs-call/34374236#34374236", "title": "What type annotations does Rust want for this UFCS call?", "body": "<p>You cannot call a trait method without specifying on which implementation you wish to call it. It doesn't matter that the method has a default implementation.</p>\n\n<p>An actual UFCS call looks like this:</p>\n\n<pre><code>trait FooPrinter {\n    fn print()  {\n        println!(\"hello\");\n    }\n}\n\nimpl FooPrinter for () {}\n\nfn main () {\n    &lt;() as FooPrinter&gt;::print();\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/fAyAWm\" rel=\"nofollow\">playground</a></p>\n\n<p>If you don't need polymorphism on this method, move it to a <code>struct</code> or <code>enum</code>, or make it a global function.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 107, "favorite_count": 0, "accepted_answer_id": 34374236, "answer_count": 1, "score": 1, "last_activity_date": 1450552166, "creation_date": 1450550686, "question_id": 34374149, "link": "https://stackoverflow.com/questions/34374149/what-type-annotations-does-rust-want-for-this-ufcs-call", "title": "What type annotations does Rust want for this UFCS call?", "body": "<p>Sorry, I'm probably missing something <strong>super</strong> obvious. I wonder why I can't call my trait method like this. Shouldn't this be the standard UFCS.</p>\n\n<pre><code>trait FooPrinter {\n    fn print ()  {\n        println!(\"hello\");\n    }\n}\n\nfn main () {\n    FooPrinter::print();\n}\n</code></pre>\n\n<p>Playpen: <a href=\"http://is.gd/ZPu9iP\" rel=\"nofollow\">http://is.gd/ZPu9iP</a></p>\n\n<p>I get the following error</p>\n\n<pre><code>error: type annotations required: cannot resolve `_ : FooPrinter`\n</code></pre>\n"}, {"tags": ["macros", "pattern-matching", "rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 23, "last_activity_date": 1591111500, "last_edit_date": 1591111500, "creation_date": 1450546881, "answer_id": 34373576, "question_id": 34373169, "link": "https://stackoverflow.com/questions/34373169/how-do-i-create-a-rust-macro-with-optional-parameters-using-repetitions/34373576#34373576", "title": "How do I create a Rust macro with optional parameters using repetitions?", "body": "<p>The first edition of the Rust book has a <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html\" rel=\"noreferrer\">rather long chapter on macros</a>, but the section on repetitions is a bit shy on examples...</p>\n\n<p>There are several ways to handle optional arguments in macros. If you have an optional argument that can only occur once, then you shouldn't use repetitions: you should instead define multiple patterns in your macro, like this:</p>\n\n<pre><code>macro_rules! single_opt {\n    ($mand_1:expr, $mand_2:expr) =&gt; {\n        single_opt!($mand_1, $mand_2, \"Default\")\n    };\n    ($mand_1:expr, $mand_2:expr, $opt:expr) =&gt; {\n        println!(\"1. {} 2. {}, 3. {}\", $mand_1, $mand_2, $opt)\n    };\n}\n\nfn main() {\n    single_opt!(4, 4);\n}\n</code></pre>\n\n<p>If you want to allow an arbitrary number of arguments, then you need repetition. Your original macro doesn't work because you put the comma outside the repetition, so you'd have to invoke the macro as <code>single_opt!(4,4,);</code>. See <a href=\"https://stackoverflow.com/q/43143327/155423\">How to allow optional trailing commas in macros?</a> for a related case.</p>\n\n<p>If you have a fixed number of arguments followed by a repetition, you can put the comma inside the repetition as the first token:</p>\n\n<pre><code>macro_rules! single_opt {\n    ($mand_1:expr, $mand_2:expr $(, $opt:expr)*) =&gt; {\n        println!(\"1. {} 2. {}, 3. {}\", $mand_1, $mand_2, $($opt),*)\n    };\n}\n</code></pre>\n\n<p>However, it doesn't work in this specific case:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: 3 positional arguments in format string, but there are 2 arguments\n --&gt; src/main.rs:3:22\n  |\n3 |         println!(\"1. {} 2. {}, 3. {}\", $mand_1, $mand_2, $($opt),*)\n  |                      ^^    ^^     ^^\n...\n8 |     single_opt!(4, 4);\n  |     ------------------\n  |     |\n  |     in this macro invocation\n  |     in this macro invocation\n  |     in this macro invocation\n  |\n  = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n</code></pre>\n\n<p>So we'll have to go back to defining two patterns:</p>\n\n<pre><code>macro_rules! single_opt {\n    ($mand_1:expr, $mand_2:expr) =&gt; {\n        single_opt!($mand_1, $mand_2, \"Default\")\n    };\n    ($mand_1:expr, $mand_2:expr, $($opt:expr),*) =&gt; {\n        {\n            println!(\"1. {} 2. {}\", $mand_1, $mand_2);\n            $(\n                println!(\"opt. {}\", $opt);\n            )*\n        }\n    };\n}\n\nfn main() {\n    single_opt!(4, 4, 1, 2);\n}\n</code></pre>\n\n<p>A repetition takes the form <code>$( PATTERN ) SEPARATOR COUNT</code>, where <code>PATTERN</code> is the pattern you want to repeat, <code>SEPARATOR</code> is an optional token that separates each repetition (here, it's <code>,</code>) and <code>COUNT</code> is either <code>*</code> for \"zero or more occurrences\" or <code>+</code> for \"one or more occurrences\".</p>\n\n<p>Then, in the macro expansion, we need a repetition block to be able to access <code>$opt</code>. The syntax is exactly the same, but note that the separator doesn't have to be the same (here, there's no separator in the expansion).</p>\n"}], "owner": {"reputation": 2419, "user_id": 2094707, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/69d58eb588b8c86d9d7f3df2da72d2a0?s=128&d=identicon&r=PG", "display_name": "Stein", "link": "https://stackoverflow.com/users/2094707/stein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9830, "favorite_count": 3, "answer_count": 1, "score": 16, "last_activity_date": 1591111500, "creation_date": 1450544319, "last_edit_date": 1450551150, "question_id": 34373169, "link": "https://stackoverflow.com/questions/34373169/how-do-i-create-a-rust-macro-with-optional-parameters-using-repetitions", "title": "How do I create a Rust macro with optional parameters using repetitions?", "body": "<p>I'm currently looking into Rust macros and I can not find any detailed documentation on repetitions. I would like to create macros with optional parameters. This would be my idea:</p>\n\n<pre><code>macro_rules! single_opt {\n    ($mand_1, $mand_2, $($opt:expr)* ) =&gt;{\n        match $opt {\n            Some(x) =&gt; println!(\"1. {} 2. {}, 3. {}\", $mand_1, $mand_2, x);\n            None =&gt; single_opt!($mand_1, $mand_2, \"Default\");\n        }\n    }\n}\n\nfn main() {\n    single_opt!(4,4);\n}\n</code></pre>\n\n<p>This <a href=\"http://smallcultfollowing.com/rust-int-variations/imem-umem/guide-macros.html#invocation\" rel=\"noreferrer\">example</a> seems to be outdated, since I can not compile it. The Rust book mentions this topic just very briefly. How do I get this example to work?</p>\n"}, {"tags": ["rust", "rust-crates", "rustdoc"], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1450550923, "post_id": 34374166, "comment_id": 56490139, "body": "I was just about to post this as an answer. I will give this the answer and add my solution as a separate answer."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1568820928, "last_edit_date": 1592644375, "creation_date": 1450550794, "answer_id": 34374166, "question_id": 34372423, "link": "https://stackoverflow.com/questions/34372423/cant-use-a-dependent-crate-in-rust-documentation-tests/34374166#34374166", "title": "Can&#39;t use a dependent crate in Rust documentation tests", "body": "<p>From <a href=\"http://doc.rust-lang.org/1.30.0/book/first-edition/documentation.html\" rel=\"noreferrer\"><em>The Rust Programming Language</em>, first edition</a> chapter on <a href=\"http://doc.rust-lang.org/1.30.0/book/first-edition/documentation.html#documentation-as-tests\" rel=\"noreferrer\">documentation</a>:</p>\n<blockquote>\n<p>Here's the full algorithm rustdoc uses to preprocess examples:</p>\n<ol>\n<li>Any leading <code>#![foo]</code> attributes are left intact as crate attributes.</li>\n<li>Some common allow attributes are inserted, including <code>unused_variables</code>, <code>unused_assignments</code>, <code>unused_mut</code>, <code>unused_attributes</code>, and <code>dead_code</code>. Small examples often trigger these lints.</li>\n<li>If the example does not contain <code>extern crate</code>, then <code>extern crate &lt;mycrate&gt;;</code> is inserted.</li>\n<li>Finally, if the example does not contain <code>fn main</code>, the remainder of the text is wrapped in <code>fn main() { your_code }</code></li>\n</ol>\n</blockquote>\n<p>Point #3 is relevant here. When you have <strong>no</strong> <code>extern crate</code> lines, your crate is automatically added. Once you add the first <code>extern crate</code>, <em>no crates</em> will be automatically added \u2014\u00a0that includes your crate!</p>\n<p>You will need to add <code>extern crate</code> lines for both <code>regex</code> and <code>rusty_nltk</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "is_accepted": false, "score": 4, "last_activity_date": 1450564690, "last_edit_date": 1450564690, "creation_date": 1450551001, "answer_id": 34374202, "question_id": 34372423, "link": "https://stackoverflow.com/questions/34372423/cant-use-a-dependent-crate-in-rust-documentation-tests/34374202#34374202", "title": "Can&#39;t use a dependent crate in Rust documentation tests", "body": "<p>After being pointed to the docs, I solved it by wrapping a <code>main</code> around my code with <code>extern crate</code>s:</p>\n\n<pre><code>/// Return a list of the offsets of the tokens in `s`, as a sequence of `(start, end)`\n/// tuples, by splitting the string at each successive match of `regex`.\n///\n/// # Examples\n///\n/// To return a list of spans based on whitespaces:\n///\n/// ```\n/// extern crate regex;\n/// extern crate rusty_nltk;\n/// use rusty_nltk::tokenize::util::regexp_span_tokenize;\n/// use regex::Regex;\n///\n/// fn main() {\n///   let s = \"Good muffins cost $3.88\\nin New York.  Please buy me\n///           two of them.\\n\\nThanks.\";\n///   let regex = Regex::new(r\"\\s\").unwrap();\n///   let spans = regexp_span_tokenize(s, &amp;regex);\n/// }\n/// ```\n</code></pre>\n\n<p>I decided to change my doc style to include <code>main</code>s for all examples, but if this isn't your style, you can add <code>#</code> before code to hide it from docs.</p>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 645, "favorite_count": 0, "accepted_answer_id": 34374166, "answer_count": 2, "score": 6, "last_activity_date": 1568820928, "creation_date": 1450539384, "last_edit_date": 1507910643, "question_id": 34372423, "link": "https://stackoverflow.com/questions/34372423/cant-use-a-dependent-crate-in-rust-documentation-tests", "title": "Can&#39;t use a dependent crate in Rust documentation tests", "body": "<p>I'm trying to write docs for a project I'm writing in Rust. One of the docs requires using <code>regex::Regex</code>. Here's the doc I'm trying to write:</p>\n\n<pre><code>/// Return a list of the offsets of the tokens in `s`, as a sequence of `(start, end)`\n/// tuples, by splitting the string at each successive match of `regex`.\n///\n/// # Examples\n///\n/// ```\n/// use rusty_nltk::tokenize::util::regexp_span_tokenize;\n/// use regex::Regex;\n///\n/// let s = \"Good muffins cost $3.88\\nin New York.  Please buy me\n///         two of them.\\n\\nThanks.\";\n/// let regex = regex::Regex::new(r\"\\s\").unwrap();\n/// let spans = regexp_span_tokenize(s, regex).unwrap();\n/// ```\n</code></pre>\n\n<p>It gives me this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>---- tokenize::util::regexp_span_tokenize_0 stdout ----\n    &lt;anon&gt;:4:9: 4:14 error: unresolved import `regex::Regex`. Maybe a missing `extern crate regex`? [E0432]\n&lt;anon&gt;:4     use regex::Regex;\n                 ^~~~~\nerror: aborting due to previous error\n</code></pre>\n\n<p>But when I add <code>extern crate regex;</code>, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>---- tokenize::util::regexp_span_tokenize_0 stdout ----\n    &lt;anon&gt;:3:9: 3:19 error: unresolved import `rusty_nltk::tokenize::util::regexp_span_tokenize`. Maybe a missing `extern crate rusty_nltk`? [E0432]\n&lt;anon&gt;:3     use rusty_nltk::tokenize::util::regexp_span_tokenize;\n                 ^~~~~~~~~~\n&lt;anon&gt;:4:9: 4:14 error: unresolved import `regex::Regex`. Did you mean `self::regex`? [E0432]\n&lt;anon&gt;:4     use regex::Regex;\n                 ^~~~~\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>Some relevant parts of relevant files are:</p>\n\n<h1>src/lib.rs:</h1>\n\n<pre><code>extern crate regex;\npub mod tokenize;\n</code></pre>\n\n<h1>src/tokenize/mod.rs:</h1>\n\n<pre><code>extern crate regex;\npub mod util;\n</code></pre>\n\n<h1>(Top of) src/tokenize/util.rs:</h1>\n\n<pre><code>extern crate regex; \nuse regex::Regex;\n</code></pre>\n\n<p>What am I doing wrong with the layout of my project?</p>\n"}, {"tags": ["operator-overloading", "rust", "stringstream"], "answers": [{"comments": [{"owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "edited": false, "score": 0, "creation_date": 1450569451, "post_id": 34370466, "comment_id": 56494982, "body": "+1 @DK Thank you for the answer. So that means external cloning of String <code>a</code> is both necessary and implies no waste of cycles."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 5, "last_activity_date": 1450526323, "creation_date": 1450526323, "answer_id": 34370466, "question_id": 34370277, "link": "https://stackoverflow.com/questions/34370277/e0369-when-concatenating-string-references/34370466#34370466", "title": "E0369 when concatenating string references", "body": "<p>If you check the documentation for the <a href=\"http://doc.rust-lang.org/std/ops/trait.Add.html\"><code>Add</code></a> trait (or the current <a href=\"http://doc.rust-lang.org/nightly/std/ops/trait.Add.html\">nightly docs for <code>Add</code></a>), you will see:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; Add&lt;&amp;'a str&gt; for String\n</code></pre>\n\n<p>This is the <em>only</em> implementation of <code>Add</code> for <code>String</code>.  This signature means it takes the left-hand side <em>by value</em>, not by reference, hence the need to call <code>clone()</code>.</p>\n\n<p>To clarify, <code>Add&lt;&amp;str&gt;</code> for <code>String</code> is just a wrapper around <code>String::push_str</code>, which appends to the end of a <code>String</code>, re-using the existing allocation.  Doing this through an immutable pointer is <em>impossible</em>, and doing it through a mutable pointer would be <em>really</em> weird and counter to reasonable expectations.  Thus, it requires the LHS to be passed by value.</p>\n\n<p>Depending on who you ask, the <code>+</code> operator being defined for <em>any</em> form of <code>String</code> is a wart, so whether or not additional forms get defined is... well, an open question as far as I know.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1450574558, "creation_date": 1450574558, "answer_id": 34377124, "question_id": 34370277, "link": "https://stackoverflow.com/questions/34370277/e0369-when-concatenating-string-references/34377124#34377124", "title": "E0369 when concatenating string references", "body": "<p>A <code>&amp;String</code> is a very strange thing. You almost always should prefer <code>&amp;str</code>.</p>\n\n<p>What caught my eye is you saying</p>\n\n<blockquote>\n  <p>So that means external cloning of String <code>a</code> is both necessary and implies no waste of cycles.</p>\n</blockquote>\n\n<p>Well, you are wasting cycles - <code>&amp;i.to_string()</code> allocates and then discards its buffer.</p>\n\n<p><code>to_string</code> is part of the trait <a href=\"https://doc.rust-lang.org/beta/std/string/trait.ToString.html\" rel=\"nofollow\"><code>ToString</code></a>. It's implemented by default for <code>Display</code> types as</p>\n\n<pre><code>impl&lt;T: fmt::Display + ?Sized&gt; ToString for T {\n    #[inline]\n    fn to_string(&amp;self) -&gt; String {\n        use core::fmt::Write;\n        let mut buf = String::new();\n        let _ = buf.write_fmt(format_args!(\"{}\", self));\n        buf.shrink_to_fit();\n        buf\n    }\n}\n</code></pre>\n\n<p>Note that this is writing directly into a <code>String</code>. You can do the same for <code>foo</code> like</p>\n\n<pre><code>use std::fmt::Write;\n\nfn foo(a: &amp;str, i: i32) -&gt; String {\n    let mut buf: String = a.into();\n    write!(&amp;mut buf, \"{}\", i).unwrap();\n    buf\n}\n</code></pre>\n\n<p>Even better would be to intelligently preallocate <code>buf</code> to a sufficient size. This is a worst <code>a.len() + 11</code>, since <code>i</code> will contribute at most 11 characters to the string. You might be able to do better if you know <code>i</code> is in a more restricted range.</p>\n\n<pre><code>use std::fmt::Write;\n\nfn foo(a: &amp;str, i: i32) -&gt; String {\n    let mut buf = String::with_capacity(a.len() + 11);\n    write!(&amp;mut buf, \"{}{}\", a, i).unwrap();\n    buf\n}\n</code></pre>\n\n<p>You might at this point be wondering why am I doing this. That is a reasonable question.</p>\n\n<p>I don't know.</p>\n"}, {"tags": [], "owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "is_accepted": false, "score": 0, "last_activity_date": 1450656334, "last_edit_date": 1450656334, "creation_date": 1450641040, "answer_id": 34385151, "question_id": 34370277, "link": "https://stackoverflow.com/questions/34370277/e0369-when-concatenating-string-references/34385151#34385151", "title": "E0369 when concatenating string references", "body": "<p>Unbeknown to @DK and @Veedrac they collectively actually answered my motivating challenge behind my question. </p>\n\n<p>I wanted a simple way to build Strings for my pet project in the way I am used to with C++ <code>stringstream</code>. The answer from @DK implies that I need to use an reference vector to forward a mutable reference of my string. The answer from @Veedrac shows ways to generically append to the String. </p>\n\n<p>For anyone interested in a toy example of how C++ stringstream can be emulated, I copy the code here.</p>\n\n<pre><code>use std::ops::Shl;\nuse std::fmt::Write;\nuse std::fmt::Display;\n\n// Mutable reference vector\nstruct Mr&lt;'a, T: 'a&gt; {\n    mr: &amp;'a mut T\n}\n\n// Implements Shl trait for String reference vector Mr&lt;String&gt;\nimpl&lt;'a, U: Display&gt; Shl&lt;U&gt; for Mr&lt;'a, String&gt; {\n    type Output = Self;\n    fn shl(self, other: U) -&gt; Self {\n        write!(self.mr, \"{}\", other);\n        self\n    }\n }\n\n #[test]\n fn test_shl() {\n     let mut s = String::new();\n\n     // Emulates C++ stringstream\n     Mr{mr: &amp;mut s} &lt;&lt; \"The \" &lt;&lt; \"answer \" &lt;&lt; \"is \"&lt;&lt; 40 + 2;\n\n     assert!(s == \"The answer is 42\");\n }\n</code></pre>\n"}], "owner": {"reputation": 261, "user_id": 1942629, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/5faf5fd185d8abe20ba323bd6209737d?s=128&d=identicon&r=PG", "display_name": "ebaklund", "link": "https://stackoverflow.com/users/1942629/ebaklund"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "answer_count": 3, "score": 3, "last_activity_date": 1450656334, "creation_date": 1450525187, "last_edit_date": 1450641140, "question_id": 34370277, "link": "https://stackoverflow.com/questions/34370277/e0369-when-concatenating-string-references", "title": "E0369 when concatenating string references", "body": "<p>The example below shows two functions <code>foo()</code> and <code>bar()</code> that attempt to concatenate two strings. The code will not compile if the left-hand side <code>+</code> argument is a <code>&amp;String</code>.</p>\n\n<p>This is exemplified in <code>foo()</code> which fails to compile with error message <strong>[E0369]</strong>. The function <code>bar()</code> shows that I can bail out of the situation by cloning the LHS argument. My intuition suggests that this cloning should be redundant.</p>\n\n<p>Why do I have to <code>clone()</code> the LHS argument? Is this a reflection of the current implementation state of the Rust <code>+</code>-operator or is there an intentional deeper thinking behind it?</p>\n\n<pre><code>// rustc 1.7.0-nightly (110df043b 2015-12-13)\n\nfn foo(a: &amp;String, i: i32) -&gt; String {\n    a + &amp;i.to_string() // .. '+' cannot be applied to type &amp; .. String [E0369]\n}\n\nfn bar(a: &amp;String, i: i32) -&gt; String { \n    a.clone() + &amp;i.to_string() // Ok\n}\n\n#[test]\nfn my_test() {\n    assert!(foo(&amp;\"s\".to_string(), 42) == \"s42\"); // fn foo(..) failed to compile\n    assert!(bar(&amp;\"s\".to_string(), 42) == \"s42\"); // Ok\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "edited": false, "score": 0, "creation_date": 1450551266, "post_id": 34372198, "comment_id": 56490242, "body": "Great answer as usual! The missing <code>&amp;self</code> was a sloppy me with the example. It kinda led me to another question haha <a href=\"http://stackoverflow.com/questions/34374149/what-type-annotations-does-rust-want-for-this-ufcs-call\" title=\"what type annotations does rust want for this ufcs call\">stackoverflow.com/questions/34374149/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1450537958, "creation_date": 1450537958, "answer_id": 34372198, "question_id": 34365935, "link": "https://stackoverflow.com/questions/34365935/is-there-a-way-to-omit-the-lifetimes-for-the-trait-here/34372198#34372198", "title": "Is there a way to omit the lifetimes for the trait here?", "body": "<p>There is no one-size-fits-all solution. As a trait author, you have to think about what you are attempting to do and what you want to achieve. </p>\n\n<p>If you want the ability to correlate a values lifetime with the lifetime parameters of a struct, then you must put the lifetime on the trait. This would <em>generally</em> be done because your trait has multiple methods that are expected to operate on the same value with lifetimes. This might something like a getter / setter pair. In some code I have written, I'm passing in <code>&amp;str</code> references that I hold onto for a while before \"finalizing\" them. If you need to store the reference for any reason, then you will need to have lifetimes on the trait.</p>\n\n<p>In your case, you have a constructor method that needs to know of the lifetimes if the struct does. You can separate that function from the rest of the trait, if it's truly distinct. In your example, the <code>work_with_inner</code> method doesn't accept a <code>self</code> argument, so that would be <strong>very</strong> distinct. If you used <code>self</code> but didn't need to interact with the lifetimes from <code>Inner</code>, it can still help:</p>\n\n<pre><code>trait WorkerBuilder&lt;'a, 'b&gt; {\n    fn new(inner: Inner&lt;'a, 'b&gt;) -&gt; Self;\n}\n\ntrait Worker {\n    fn do_work(&amp;self);\n}\n\n#[derive(Debug)]\nstruct Inner&lt;'a, 'b&gt;{\n    foo: &amp;'a str,\n    bar: &amp;'b str,\n}\n\n// This does track `Inner`\n#[derive(Debug)]\nstruct SomeWorker&lt;'a, 'b&gt;(Inner&lt;'a, 'b&gt;);\n\nimpl&lt;'a, 'b&gt; WorkerBuilder&lt;'a, 'b&gt; for SomeWorker&lt;'a, 'b&gt; {\n    fn new(inner: Inner&lt;'a, 'b&gt;) -&gt; SomeWorker&lt;'a, 'b&gt; {\n        SomeWorker(inner)\n    }\n}\n\nimpl&lt;'a, 'b&gt; Worker for SomeWorker&lt;'a, 'b&gt; {\n    fn do_work(&amp;self) { println!(\"Doing work, {:?}\", self.0) }\n}\n\n// This doesn't track `Inner`\n#[derive(Debug)]\nstruct DumbWorker;\n\nimpl&lt;'a, 'b&gt; WorkerBuilder&lt;'a, 'b&gt; for DumbWorker {\n    fn new(inner: Inner&lt;'a, 'b&gt;) -&gt; DumbWorker {\n        DumbWorker\n    }\n}\n\nfn main () {}\n</code></pre>\n\n<p>You'll see I also applied one thing that you <em>can</em> do to reduce the number of lifetimes. If you have a struct that is just references (or references and other small <code>Copy</code> types), there is no need to pass a reference to <em>that</em> struct. References are copyable, and tracking the lifetime of the containing struct isn't useful.</p>\n\n<hr>\n\n<p>Editorial \u2014 I don't feel like \"constructor\" methods are generally useful in a trait. You often want to provide a different set or parameters, which is why you have different types in the first place. Perhaps your real code is using something other than a constructor in the trait though.</p>\n"}], "owner": {"reputation": 21581, "user_id": 288703, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1bb69b75c5e73a7c9f4ebbc4835d622f?s=128&d=identicon&r=PG", "display_name": "Christoph", "link": "https://stackoverflow.com/users/288703/christoph"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 34372198, "answer_count": 1, "score": 2, "last_activity_date": 1450537958, "creation_date": 1450484872, "last_edit_date": 1450529194, "question_id": 34365935, "link": "https://stackoverflow.com/questions/34365935/is-there-a-way-to-omit-the-lifetimes-for-the-trait-here", "title": "Is there a way to omit the lifetimes for the trait here?", "body": "<p>I'm fighting with lifetimes again. Or actually, I kinda won the fight but I'm not sure if the outcome is the intended way to handle it.</p>\n\n<p>Say I have a struct with two lifetimes: <code>Inner&lt;'a, 'b&gt;</code>. Now I want to write a trait that defines a <code>new(inner: &amp;Inner) -&gt; Self</code> method. The implementer should be free to store the reference to <code>Inner</code> internally and define other methods to work on it.</p>\n\n<p>I came up with this (it works!) but I have a couple of questions</p>\n\n<pre><code>struct Inner&lt;'a, 'b&gt;{\n    foo: &amp;'a str,\n    bar: &amp;'b str\n}\n\ntrait Worker&lt;'data, 'a, 'b&gt; {\n    fn new (inner: &amp;'data Inner&lt;'a, 'b&gt;) -&gt; Self;\n    fn work_with_inner () { println!(\"works on inner\");}\n}\n\nstruct SomeWorker&lt;'inner, 'a:'inner, 'b:'inner&gt; {\n    inner: &amp;'inner Inner&lt;'a, 'b&gt;\n}\n\nimpl&lt;'data, 'a, 'b&gt; Worker&lt;'data, 'a, 'b&gt; for SomeWorker&lt;'data, 'a, 'b&gt; {\n    fn new (inner: &amp;'data Inner&lt;'a, 'b&gt;) -&gt; Self {\n        SomeWorker {\n            inner: inner\n        }\n    }\n}\n\nfn main () {\n}\n</code></pre>\n\n<p>Playpen: <a href=\"http://is.gd/A3ol4w\" rel=\"nofollow\">http://is.gd/A3ol4w</a></p>\n\n<ol>\n<li><p>in terms of lifetimes, can this be simplified? In particular, I was wondering if the trait really needs to define all those lifetimes or if there's a way to only define them on the struct?</p></li>\n<li><p>if there's no way to omit the lifetimes on the trait does that mean it's a best practice to specify all possible lifetimes on a trait to have the most flexibility for the implementer? I mean, if the <code>SomeWorker</code> struct would not want to store the reference to <code>Inner</code>, the whole thing, including the trait, could be much simpler.</p></li>\n</ol>\n\n<p>See, no lifetimes at all.</p>\n\n<pre><code>struct Inner&lt;'a, 'b&gt;{\n    foo: &amp;'a str,\n    bar: &amp;'b str\n}\n\ntrait Worker {\n    fn new (inner: &amp;Inner) -&gt; Self;\n    fn work_with_inner () { println!(\"works on inner\");}\n}\n\nstruct SomeWorker;\n\nimpl Worker for SomeWorker {\n    fn new (inner: &amp;Inner) -&gt; Self {\n        SomeWorker\n    }\n}\n\nfn main () {\n}\n</code></pre>\n\n<p>Playpen: <a href=\"http://is.gd/NzigjX\" rel=\"nofollow\">http://is.gd/NzigjX</a></p>\n\n<p>This is why I'm asking myself if as a trait author I should assume that all methods that take references may end up being stored on a field by the trait implementer and therefore I need to specify all the lifetimes on the trait to make that possible for implementors.</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "edited": false, "score": 2, "creation_date": 1450475110, "post_id": 34364132, "comment_id": 56471265, "body": "Thanks! For some reason generics chapter in the docs doesn&#39;t say anything about parameter type inference."}, {"owner": {"reputation": 9895, "user_id": 452775, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/88963e7cc58eabf150447e7b78a24793?s=128&d=identicon&r=PG", "display_name": "Lii", "link": "https://stackoverflow.com/users/452775/lii"}, "edited": false, "score": 0, "creation_date": 1502559373, "post_id": 34364132, "comment_id": 78264441, "body": "Is there any documentation somewhere specifically about the <code>_</code> syntax? I can&#39;t find any. I only find text where it is used when iterators are explained."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 9895, "user_id": 452775, "user_type": "registered", "accept_rate": 63, "profile_image": "https://www.gravatar.com/avatar/88963e7cc58eabf150447e7b78a24793?s=128&d=identicon&r=PG", "display_name": "Lii", "link": "https://stackoverflow.com/users/452775/lii"}, "edited": false, "score": 0, "creation_date": 1502798841, "post_id": 34364132, "comment_id": 78342565, "body": "@Lii I think that&#39;s the only place it&#39;s mentioned right now. The issue on github for documenting the feature has been closed adding that paragraph to the iterators section: <a href=\"https://github.com/rust-lang/rust/pull/22293\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/22293</a>"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": true, "score": 22, "last_activity_date": 1450482958, "last_edit_date": 1450482958, "creation_date": 1450473779, "answer_id": 34364132, "question_id": 34363984, "link": "https://stackoverflow.com/questions/34363984/what-is-vec/34364132#34364132", "title": "What is Vec&lt;_&gt;?", "body": "<p>It means \"Rust compiler, infer what type goes into the <code>Vec</code>\". And it is indeed analogous to the unused variable in Python (and in Rust itself), in that it represents a placeholder for a type, like it can represent a placeholder for a variable name.</p>\n\n<p>You can find an explanation in <em>The Rust Programming Language</em> chapter about <a href=\"https://doc.rust-lang.org/book/iterators.html#consumers\">iterator consumers</a>:</p>\n\n<blockquote>\n  <p>Using a _ will let you provide a partial hint:</p>\n  \n  <p><code>let one_to_one_hundred = (1..101).collect::&lt;Vec&lt;_&gt;&gt;();</code> This says\n  \"Collect into a <code>Vec&lt;T&gt;</code>, please, but infer what the <code>T</code> is for me.\" <code>_</code> is\n  sometimes called a \"type placeholder\" for this reason.</p>\n</blockquote>\n"}], "owner": {"reputation": 5417, "user_id": 1823524, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/uScxd.jpg?s=128&g=1", "display_name": "Amomum", "link": "https://stackoverflow.com/users/1823524/amomum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2538, "favorite_count": 3, "accepted_answer_id": 34364132, "answer_count": 1, "score": 21, "last_activity_date": 1450483016, "creation_date": 1450472848, "last_edit_date": 1450483016, "question_id": 34363984, "link": "https://stackoverflow.com/questions/34363984/what-is-vec", "title": "What is Vec&lt;_&gt;?", "body": "<p>I have seen <code>Vec&lt;_&gt;</code> a couple of times already. For example:</p>\n\n<pre><code>let a = \"line1\\r\\nline2\\nline3\";\nprintln!(\"{:?}\", a.lines().collect::&lt;Vec&lt;_&gt;&gt;());\n</code></pre>\n\n<p>But what does that 'uncertain face' <code>&lt;_&gt;</code> mean? </p>\n\n<p>I'm used to a typename in angle brackets, but what type can that be?\nThe only meaning of underscore that I'm aware of is from Python as a name for an unused variable.</p>\n"}, {"tags": ["rust", "command-line-arguments"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450466168, "post_id": 34362094, "comment_id": 56467093, "body": "Note that <code>&amp;args[1..args.len()]</code> can just be written as <code>&amp;args[1..]</code>."}], "answers": [{"comments": [{"owner": {"reputation": 1105, "user_id": 1602188, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b0184f77943bdb15eb24f0f2e6e1080d?s=128&d=identicon&r=PG", "display_name": "marshallm", "link": "https://stackoverflow.com/users/1602188/marshallm"}, "edited": false, "score": 0, "creation_date": 1450469380, "post_id": 34362453, "comment_id": 56468688, "body": "That explains it, thank you. I also learned several new things: args.len() is optional in a slice, skip(1), how to make the compiler tell us the types, and the purpose of the tildes in the error messages. Awesome!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1450466506, "last_edit_date": 1495541745, "creation_date": 1450466011, "answer_id": 34362453, "question_id": 34362094, "link": "https://stackoverflow.com/questions/34362094/mismatched-types-when-building-a-stdprocesscommand-in-a-loop/34362453#34362453", "title": "Mismatched types when building a std::process::Command in a loop", "body": "<p>If we check out the full error provided by the compiler, that may help shed light:</p>\n\n<pre><code>error: mismatched types:\n expected `std::process::Command`,\n    found `&amp;mut std::process::Command`\n(expected struct `std::process::Command`,\n    found &amp;-ptr) [E0308]\n\ncommand = command.arg(arg);\n          ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>The compiler is pointing to the entire right hand side of the expression. This indicates that something is wrong with the <em>return value</em> of the <code>arg</code> call. Let's check out the <a href=\"http://doc.rust-lang.org/std/process/struct.Command.html#method.arg\" rel=\"nofollow noreferrer\">documentation for <code>arg</code></a>:</p>\n\n<pre><code>fn arg&lt;S: AsRef&lt;OsStr&gt;&gt;(&amp;mut self, arg: S) -&gt; &amp;mut Command\n</code></pre>\n\n<p>So, <code>arg</code> operates on a mutable reference to <code>self</code>, accepts an <code>arg</code> parameter, and <em>returns</em> a mutable reference to itself. Let's change your code a bit to test our hypothesis. We will use a trick to <a href=\"https://stackoverflow.com/q/21747136/155423\">make the compiler tell us the types of variables</a>:</p>\n\n<pre><code>for arg in &amp;args[1..args.len()] {\n    let _: () = command;\n    let _: () = command.arg(arg);\n}\n</code></pre>\n\n<p>This yields the errors:</p>\n\n<pre><code>error: mismatched types:\n expected `()`,\n    found `std::process::Command`\n\nlet _: () = command;\n            ^~~~~~~\n\nerror: mismatched types:\n expected `()`,\n    found `&amp;mut std::process::Command`\n\nlet _: () = command.arg(arg);\n            ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Hah, we got it! We are trying to store a <code>&amp;mut Command</code> into a variable of type <code>Command</code>. Not gonna work! Since this instance of the builder pattern mutates the builder, we don't have to do anything special to preserve it:</p>\n\n<pre><code>use std::env;\nuse std::process::Command;\n\nfn main() {\n    let mut command = Command::new(\"/usr/bin/x-terminal-emulator\");\n\n    for arg in env::args().skip(1) {\n        command.arg(arg);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>There is another style of the builder pattern that accepts <code>self</code> by value and the returns it by value. In that case, you <strong>would</strong> have to keep track of the builder between each step, and your code would have worked as-is.</p>\n"}], "owner": {"reputation": 1105, "user_id": 1602188, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b0184f77943bdb15eb24f0f2e6e1080d?s=128&d=identicon&r=PG", "display_name": "marshallm", "link": "https://stackoverflow.com/users/1602188/marshallm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 226, "favorite_count": 0, "accepted_answer_id": 34362453, "answer_count": 1, "score": 3, "last_activity_date": 1450466506, "creation_date": 1450464378, "last_edit_date": 1450466281, "question_id": 34362094, "link": "https://stackoverflow.com/questions/34362094/mismatched-types-when-building-a-stdprocesscommand-in-a-loop", "title": "Mismatched types when building a std::process::Command in a loop", "body": "<p>I'm new to Rust, trying to learn safe programming by working with the borrow checker. One thing I tried was to construct a <a href=\"http://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow\"><code>std::process::Command</code></a> based on input.</p>\n\n<p>If I just wanted to do what all the examples in the documentation assume I want to do and just run a command with arguments that I know at coding time, it works fine:</p>\n\n<pre><code>use std::process::Command;\n\nfn main() {\n    let mut command = Command::new(\"/usr/bin/x-terminal-emulator\")\n                              .arg(\"-e\")\n                              .arg(\"editor\")\n                              .output()\n                              .unwrap();\n}\n</code></pre>\n\n<p>I'm trying to run a command that I build at runtime. In order to do this, I need to separate the construction of the <code>Command</code> struct from the building of its arguments. When I do it this way, the compiler complains about mismatched types:</p>\n\n<pre><code>use std::env::args;\nuse std::process::Command;\n\nfn main() {\n    let args = args().collect::&lt;Vec&lt;_&gt;&gt;();\n    let mut command = Command::new(\"/usr/bin/x-terminal-emulator\");\n\n    for arg in &amp;args[1..args.len()] {\n        command = command.arg(arg);\n    }\n}\n</code></pre>\n\n<p>The error I get is</p>\n\n<blockquote>\n  <p>mismatched types: expected <code>std::process::Command</code>, found <code>&amp;mut std::process::Command</code></p>\n</blockquote>\n\n<p>Looking at the documentation for <a href=\"http://doc.rust-lang.org/std/process/struct.Command.html#method.arg\" rel=\"nofollow\"><code>std::process::Command::arg</code></a>, it says that it expects a <code>&amp;mut self</code> and returns a <code>&amp;mut Command</code>. According to the compiler, that's exactly what it's getting. Is the documentation wrong, or (far more likely) am I misunderstanding something here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1450460038, "post_id": 34360699, "comment_id": 56463916, "body": "The reason you cannot find how to asynchronously read a file with mio is because it is explicitly listed as a non-goal for that project. ^_^"}, {"owner": {"reputation": 61429, "user_id": 572743, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/9941673f566f229bc536c1c2b558884e?s=128&d=identicon&r=PG&f=1", "display_name": "Damon", "link": "https://stackoverflow.com/users/572743/damon"}, "edited": false, "score": 5, "creation_date": 1450461005, "post_id": 34360699, "comment_id": 56464435, "body": "Can&#39;t tell much about Rust, but from an operating system point of view (this is true for the vast majority of, if not all, mainstream systems) creating a thread is by far the best solution. Asynchronous I/O is either implemented poorly, useless, or not working at all on all mainstream operating systems (regardless of what claims they make)."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1450478561, "post_id": 34360699, "comment_id": 56472545, "body": "You could try <code>madvise</code> with <code>MADV_WILLNEED</code>. In Rust it&#39;ll be in the <code>libc</code> crate (<a href=\"https://crates.io/crates/libc/\" rel=\"nofollow noreferrer\">crates.io/crates/libc</a>; <a href=\"http://rust-lang-nursery.github.io/libc/x86_64-unknown-linux-gnu/libc/fn.madvise.html\" rel=\"nofollow noreferrer\">rust-lang-nursery.github.io/libc/x86_64-unknown-linux-gnu/li&zwnj;&#8203;bc/&hellip;</a>)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1463058011, "post_id": 37176892, "comment_id": 61907989, "body": "Could you cite some sources that suggest that <b>io</b> from the standard library, is not planning on supporting this?"}], "tags": [], "owner": {"reputation": 1093, "user_id": 3642914, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/034a47abb43659aba14fef3ff0eff17c?s=128&d=identicon&r=PG", "display_name": "Leonora Tindall", "link": "https://stackoverflow.com/users/3642914/leonora-tindall"}, "is_accepted": false, "score": 2, "last_activity_date": 1463024811, "creation_date": 1463024811, "answer_id": 37176892, "question_id": 34360699, "link": "https://stackoverflow.com/questions/34360699/how-to-asynchronously-read-a-file/37176892#37176892", "title": "How to asynchronously read a file?", "body": "<p>I would suggest simply spinning off another thread yourself. <code>io</code> is not planning to do this, and making your own async loader allows you to have complete control over how and when reads/writes happen, which is important if performance is your goal (as I would imagine it is, if you need async disk I/O). You can choose whether to write/read single bytes, single lines, or to accumulate blocks and write those. If you application is waiting on something else at other times, like the network, you could choose to write to disk then, for example.</p>\n"}, {"tags": [], "owner": {"reputation": 1665, "user_id": 1792831, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gPL8D.png?s=128&g=1", "display_name": "xx1xx", "link": "https://stackoverflow.com/users/1792831/xx1xx"}, "is_accepted": true, "score": 2, "last_activity_date": 1569541562, "creation_date": 1569541562, "answer_id": 58126034, "question_id": 34360699, "link": "https://stackoverflow.com/questions/34360699/how-to-asynchronously-read-a-file/58126034#58126034", "title": "How to asynchronously read a file?", "body": "<p>Use tokio::fs::read:</p>\n\n<pre><code>use tokio::prelude::Future;\n\nfn main() {\n    let task = tokio::fs::read(\"/proc/cpuinfo\").map(|data| {\n        // do something with the contents of the file ...\n        println!(\"contains {} bytes\", data.len());\n        println!(\"{:?}\", String::from_utf8(data));\n    }).map_err(|e| {\n        // handle errors\n        eprintln!(\"IO error: {:?}\", e);\n    });\n    tokio::run(task);\n}\n</code></pre>\n"}], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2319, "favorite_count": 0, "accepted_answer_id": 58126034, "answer_count": 2, "score": 5, "last_activity_date": 1569541562, "creation_date": 1450458898, "last_edit_date": 1450459900, "question_id": 34360699, "link": "https://stackoverflow.com/questions/34360699/how-to-asynchronously-read-a-file", "title": "How to asynchronously read a file?", "body": "<p>I could create a separate thread to act as an I/O queue, but I'm not sure whether this is the best way. It looks like the best.</p>\n\n<p>I do not know how to load a local file with <a href=\"https://github.com/carllerche/mio\" rel=\"noreferrer\">mio</a>.</p>\n"}, {"tags": ["c", "linker", "rust", "dynamic-linking"], "comments": [{"owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "edited": false, "score": 1, "creation_date": 1450450353, "post_id": 34358084, "comment_id": 56458031, "body": "If you&#39;re on a *nix-like system, try running <code>ldd your-exe</code> on both versions and compare.  The C version will definitely not report a dependency on <code>libwayland-client</code> - what about the Rust version?"}, {"owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "reply_to_user": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "edited": false, "score": 0, "creation_date": 1450450892, "post_id": 34358084, "comment_id": 56458330, "body": "Good comment! I used <code>RTLD_LAZY</code> which means &quot;resolve undefined symbols as code from the dynamic library is executed&quot; taken from the following documentation <a href=\"http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html\" rel=\"nofollow noreferrer\">here</a>. I didn&#39;t use <code>pwl_display_connect</code>, as this is an example, so I suspect if you were to use <code>RTLD_NOW</code> it would report a dependency, but I could be wrong."}, {"owner": {"reputation": 205167, "user_id": 4323, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/qqgFU.png?s=128&g=1", "display_name": "John Zwinck", "link": "https://stackoverflow.com/users/4323/john-zwinck"}, "edited": false, "score": 1, "creation_date": 1450451089, "post_id": 34358084, "comment_id": 56458443, "body": "You&#39;re wrong, the C program would not statically depend on <code>libwayland-client</code> even if you did use <code>RTLD_NOW</code>."}, {"owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450453986, "post_id": 34358084, "comment_id": 56460308, "body": "@Shepmaster is correct when it fails it shows the command used with the output <code>-l&lt;name&gt;</code>. Thanks!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1502800774, "last_edit_date": 1502800774, "creation_date": 1450454933, "answer_id": 34359620, "question_id": 34358084, "link": "https://stackoverflow.com/questions/34358084/how-do-the-inner-workings-of-the-rust-link-attribute-compare-to-linking-in-c/34359620#34359620", "title": "How do the inner workings of the Rust link attribute compare to linking in C?", "body": "<p>I don't <strong>know</strong> this to be true, I'm simply basing this answer based on the compiler's output.</p>\n\n<p>I am on OS X and do not have anything Wayland-related installed. If I take your code and compile it with <code>cargo build --verbose</code>, I get this output (cleaned up a bit):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling wat v0.1.0 (file:///private/tmp/wat)\n     Running `rustc src/main.rs --crate-name wat --crate-type bin -g --out-dir /private/tmp/wat/target/debug --emit=dep-info,link -L dependency=/private/tmp/wat/target/debug -L dependency=/private/tmp/wat/target/debug/deps`\nerror: linking with `cc` failed: exit code: 1\nnote: \"cc\" \"-m64\" \"-L\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib\" \"/private/tmp/wat/target/debug/wat.0.o\" \"-o\" \"/private/tmp/wat/target/debug/wat\" \"-Wl,-dead_strip\" \"-nodefaultlibs\" \"-L\" \"/private/tmp/wat/target/debug\" \"-L\" \"/private/tmp/wat/target/debug/deps\" \"-L\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib\" \"-l\" \"wayland-client\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libstd-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libcollections-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librustc_unicode-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/librand-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liballoc-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liballoc_jemalloc-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/liblibc-ca1c970e.rlib\" \"/Users/shep/Projects/rust/x86_64-apple-darwin/stage2/lib/rustlib/x86_64-apple-darwin/lib/libcore-ca1c970e.rlib\" \"-l\" \"System\" \"-l\" \"pthread\" \"-l\" \"c\" \"-l\" \"m\" \"-l\" \"compiler-rt\"\nnote: ld: library not found for -lwayland-client\n</code></pre>\n\n<p>A few highlights from that:</p>\n\n<blockquote>\n  <p><code>\"cc\" [...] \"-l\" \"wayland-client\"</code></p>\n  \n  <p><code>ld: library not found for -lwayland-client</code></p>\n</blockquote>\n\n<p>From that output, I believe that this is doing normal compile-time linking to a dynamic library, not run-time loading of a dynamic library.</p>\n\n<hr>\n\n<p>Run-time loading of a dynamic library used to be handled by <a href=\"http://doc.rust-lang.org/std/dynamic_lib/index.html\" rel=\"nofollow noreferrer\"><code>std::dynamic_lib</code></a>, but one should now use a crate. I'm not sure what crate is best, but I did find <a href=\"https://github.com/nagisa/rust_libloading/\" rel=\"nofollow noreferrer\">libloading</a>.</p>\n\n<hr>\n\n<p>As some editorial, I would suggest creating <a href=\"http://doc.crates.io/build-script.html#-sys-packages\" rel=\"nofollow noreferrer\">a <code>mylibrary-sys</code> crate</a> that simply exposes the direct FFI bindings. In that crate, use <a href=\"http://doc.crates.io/build-script.html#the-links-manifest-key\" rel=\"nofollow noreferrer\">the <code>links</code> key</a> to specify that you are linking to a native library. This allows Cargo to ensure that the native library is only linked to once. Then you don't need any attributes.</p>\n"}], "owner": {"reputation": 1174, "user_id": 4450336, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/FvdBD.jpg?s=128&g=1", "display_name": "Daniel Robertson", "link": "https://stackoverflow.com/users/4450336/daniel-robertson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 466, "favorite_count": 1, "accepted_answer_id": 34359620, "answer_count": 1, "score": 5, "last_activity_date": 1502800774, "creation_date": 1450449728, "last_edit_date": 1450450384, "question_id": 34358084, "link": "https://stackoverflow.com/questions/34358084/how-do-the-inner-workings-of-the-rust-link-attribute-compare-to-linking-in-c", "title": "How do the inner workings of the Rust link attribute compare to linking in C?", "body": "<p>I am seriously impressed with how easy the <code>link</code> attribute makes linking to shared libraries. However, I am curious about the the details of the attribute and how it compares to linking in C. For instance, given the following Rust code</p>\n\n<pre><code>#[allow(bad_style)]\n\nstruct wl_display;\n\nfn main() {\n    #[link(name=\"wayland-client\", kind=\"dylib\")]\n    extern {\n        fn wl_display_connect(name: *const u8) -&gt; *mut wl_display;\n    }\n\n    // do work\n}\n</code></pre>\n\n<p>Would it translate closer to something like the following C code?</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;dlfcn.h&gt;\n\nstruct wl_display;\n\nint main() {\n    struct wl_display* (*pwl_display_connect)(const char *name);\n    char* error;\n\n    void* handle = dlopen(\"/usr/lib/libwayland-client.so\", RTLD_LAZY);\n\n    if(!handle) {\n        fprintf(stderr, \"Error opening lib: %s\\n\", dlerror());\n        exit(1);\n    }\n\n    pwl_display_connect = dlsym(handle, \"wl_display_connect\");\n\n    // do work\n\n    if(!pwl_display_connect) {\n        fprintf(stderr, \"Error loading function: %s\\n\", dlerror());\n        exit(1);\n    }\n\n    if(dlclose(handle) &lt; 0) {\n        fprintf(stderr, \"Error closing lib: %s\\n\", dlerror());\n        exit(1);\n    }\n\n    return 0;\n}\n</code></pre>\n\n<p>compiled with with</p>\n\n<pre><code>clang -o test test.c -ldl # or your cc of choice\n</code></pre>\n\n<p>Or would it translate to something like using <code>clang &lt;other stuff&gt; -lwayland-core</code>? Or am I entirely wrong and headed in the wrong direction?</p>\n\n<p>The following is the only documentation I found from reading through the <a href=\"https://doc.rust-lang.org/reference.html\" rel=\"nofollow\">The Rust Reference</a></p>\n\n<blockquote>\n  <p><code>link</code> - indicate that a native library should be linked to for the\n  declarations in this block to be linked correctly. <code>link</code> supports an\n  optional <code>kind</code> key with three possible values: <code>dylib</code>, <code>static</code>, and\n  <code>framework.</code></p>\n</blockquote>\n\n<h3>Edit:</h3>\n\n<p><a href=\"https://doc.rust-lang.org/stable/book/README.html\" rel=\"nofollow\">The Rust Programming Language</a> has some more information under <a href=\"https://doc.rust-lang.org/stable/book/advanced-linking.html\" rel=\"nofollow\">Advanced Linking</a></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450448736, "post_id": 34355386, "comment_id": 56457015, "body": "What is strange is that if the struct doesn&#39;t store a <code>&amp;mut</code>, then you <a href=\"http://is.gd/pbhLxP\" rel=\"nofollow noreferrer\">don&#39;t need the <code>&#39;a</code> at all</a>. That seems a little odd."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450451131, "post_id": 34355386, "comment_id": 56458468, "body": "Not at all. If you could call <code>as_read()</code> multiple times, you&#39;d end up with two <code>&amp;mut</code> to the i32. You can see that you can use @Wavin&#39;s code if you reborrow as immutable in <code>as_read</code>: <a href=\"http://is.gd/Nt66hL\" rel=\"nofollow noreferrer\">is.gd/Nt66hL</a> this would probably be the better answer. I&#39;ll update my code"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450451249, "post_id": 34355386, "comment_id": 56458516, "body": "<i>you&#39;d end up with two &amp;mut to the i32</i> \u2014 I must be missing how. Since <code>Read</code> only stores an immutable reference, I&#39;d expect the mutable -&gt; immutable reborrow to happen automatically. Also I <b>totally</b> did <code>&amp;*self.x</code> and it didn&#39;t work. Now I&#39;m going crazy."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450451347, "post_id": 34355386, "comment_id": 56458568, "body": "uhm. right, no Idea what&#39;s going on. There&#39;s probably already an issue about this... but I can&#39;t find it right now"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450451721, "post_id": 34355386, "comment_id": 56458834, "body": "Ah, your version works because you have <code>&amp;&#39;db self</code>. While I understand how that would work, I feel like just <code>&amp;self</code> should work as well. Lifetime elision would insert a <code>&#39;a</code> for <code>self</code>, but it doesn&#39;t matter because we are copying the inner reference and its lifetime. Maybe the copy doesn&#39;t work <i>because</i> of the <code>mut</code>?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450451945, "post_id": 34355386, "comment_id": 56458969, "body": "<code>&amp;mut</code> is always reborrowed or moved, but can&#39;t be copied. I guess rustc can&#39;t figure out <code>&#39;a:&#39;db</code> even though that should be obvious here."}, {"owner": {"reputation": 161, "user_id": 5694976, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4b4b319a7aaea4e071576652f35efd13?s=128&d=identicon&r=PG&f=1", "display_name": "Wavin", "link": "https://stackoverflow.com/users/5694976/wavin"}, "edited": false, "score": 0, "creation_date": 1450468843, "post_id": 34355386, "comment_id": 56468407, "body": "the issue now is that <code>&#39;a</code> is declared to outlive <code>&#39;db</code>, which it definitely doesn&#39;t. <code>&#39;a</code> is a temporary object created in a function call to another object (<code>Write</code>) which itself outlives <code>db</code>."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1450440523, "creation_date": 1450440523, "answer_id": 34355386, "question_id": 34355078, "link": "https://stackoverflow.com/questions/34355078/passing-on-lifetimes-of-underlying-reference-fields/34355386#34355386", "title": "Passing on lifetimes of underlying reference fields?", "body": "<p>The point the compiler is trying to get across is that <code>&amp;'db self</code> actually means <code>self: &amp;'db Write&lt;'db&gt;</code>. This means that you tie the reference AND the type to the same lifetime. What you actually want in your case is <code>self: &amp;'a Write&lt;'db&gt;</code> where <code>'a</code> lives just for the <code>as_read</code> function. To be able to return a <code>'db</code> reference from a <code>'a</code> reference, you need to specify that <code>'a</code> lives at least as long as <code>'db</code> by constraining <code>'a: 'db</code>.</p>\n\n<pre><code>fn as_read&lt;'a: 'db&gt;(self: &amp;'a Write&lt;'db&gt;) -&gt; Read&lt;'db&gt; {\n    Read{x: self.x}\n}\n\npub fn get&lt;'a: 'db&gt;(self: &amp;'a Write&lt;'db&gt;) -&gt; &amp;'db i32 { self.as_read().get() }\n</code></pre>\n\n<p>or more concisely</p>\n\n<pre><code>fn as_read&lt;'a: 'db&gt;(&amp;'a self) -&gt; Read&lt;'db&gt; {\n    Read{x: self.x}\n}\n\npub fn get&lt;'a: 'db&gt;(&amp;'a self) -&gt; &amp;'db i32 { self.as_read().get() }\n</code></pre>\n\n<p><a href=\"http://is.gd/urbO47\" rel=\"nofollow\">Try it out in the Playground</a></p>\n"}], "owner": {"reputation": 161, "user_id": 5694976, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4b4b319a7aaea4e071576652f35efd13?s=128&d=identicon&r=PG&f=1", "display_name": "Wavin", "link": "https://stackoverflow.com/users/5694976/wavin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1450440523, "creation_date": 1450439541, "last_edit_date": 1450440100, "question_id": 34355078, "link": "https://stackoverflow.com/questions/34355078/passing-on-lifetimes-of-underlying-reference-fields", "title": "Passing on lifetimes of underlying reference fields?", "body": "<p>I'm trying to make two structs that operate on an underlying dataset; one providing immutable \"read\" operations, the other allowing modification. For this to work, I need to be able to use the read functions from within the modifying object - as such I create a temporary new read object within the modifier function with a view onto the underlying data. </p>\n\n<p>Here's some code:</p>\n\n<pre><code>struct Read&lt;'db&gt; {\n    x: &amp;'db i32\n}\n\nimpl&lt;'db&gt; Read&lt;'db&gt; {\n    pub fn get(&amp;'db self) -&gt; &amp;'db i32 { self.x }\n}\n\nstruct Write&lt;'db&gt; {\n    x: &amp;'db mut i32\n}\n\nimpl&lt;'db&gt; Write&lt;'db&gt; {\n    fn new(x: &amp;mut i32) -&gt; Write { Write{x: x} }\n\n    fn as_read(&amp;'db self) -&gt; Read&lt;'db&gt; {\n        Read{x: self.x}\n    }\n\n    pub fn get(&amp;'db self) -&gt; &amp;'db i32 { self.as_read().get() }\n}    \n\n\nfn main() {\n    let mut x = 69i32;\n    let y = Write::new(&amp;mut x);\n    println!(\"{}\", y.get());\n}\n</code></pre>\n\n<p>It doesn't compile - it seems that despite my best efforts, the lifetime of the reference returned from <code>Read::get</code> is bound to the <code>Write::get</code>'s scope, rather than the <code>Write</code>'s <code>'db</code> lifetime. How can I make it compile? (And, is what I want to do possible? Is it the simplest/most concise way of doing it?)</p>\n"}, {"tags": ["api", "rust", "twitch"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450447214, "post_id": 34355070, "comment_id": 56456042, "body": "Please take some time to create high-value questions. It is expected that you ask <a href=\"http://meta.stackexchange.com/q/39223/281829\">a single question</a> that <a href=\"http://stackoverflow.com/help/how-to-ask\">has effort put into it to make it good</a>. Provide a title that <i>indicates your question</i>. Use tags that help refine your question - why is this tagged <code>c++</code> if the question has <i>nothing</i> to do with C++? Asking if you should use a library is <a href=\"http://stackoverflow.com/help/on-topic\">off-topic</a>. If you don&#39;t want to follow SO rules, the <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust User forum</a> may be more suitable."}, {"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450450078, "post_id": 34355070, "comment_id": 56457863, "body": "@Shepmaster Yes, the title is vague. In the body of the question, I&#39;m uncertain about my own approach and ask if I should change my approach by changing the crate or if I should continue. The question is tagged with c++ because stackoverflow tag suggestion recommended that. The question was apparently clear enough because Robin Krahl answered it perfectly."}], "answers": [{"comments": [{"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "edited": false, "score": 0, "creation_date": 1450442240, "post_id": 34355782, "comment_id": 56453090, "body": "That&#39;s probably the reason why I could not find how to manipulate it. I was just assuming that I could. If I try your code sample I receive an error about that Json type does not implement the &#39;get&#39; method."}, {"owner": {"reputation": 5158, "user_id": 1829930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d00937426fde9e00fe46a57043c00eeb?s=128&d=identicon&r=PG", "display_name": "Robin Krahl", "link": "https://stackoverflow.com/users/1829930/robin-krahl"}, "reply_to_user": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "edited": false, "score": 0, "creation_date": 1450442514, "post_id": 34355782, "comment_id": 56453244, "body": "@AdrianZ. I\u2019m sorry, it should be <code>find</code>. I\u2019ll correct it."}, {"owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "edited": false, "score": 0, "creation_date": 1450442681, "post_id": 34355782, "comment_id": 56453344, "body": "Thanks, that worked fine. Do you know any other crates that could potentially help with this project?"}], "tags": [], "owner": {"reputation": 5158, "user_id": 1829930, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d00937426fde9e00fe46a57043c00eeb?s=128&d=identicon&r=PG", "display_name": "Robin Krahl", "link": "https://stackoverflow.com/users/1829930/robin-krahl"}, "is_accepted": true, "score": 2, "last_activity_date": 1450442528, "last_edit_date": 1450442528, "creation_date": 1450441870, "answer_id": 34355782, "question_id": 34355070, "link": "https://stackoverflow.com/questions/34355070/manipulate-result-type-with-json-as-content/34355782#34355782", "title": "Manipulate Result type with JSON as content", "body": "<p>The <code>Result</code> type does not help you here \u2013 it just stores arbitrary data and is used for error handling (instead of exceptions). But you can use the <a href=\"https://doc.rust-lang.org/rustc-serialize/rustc_serialize/json/index.html\" rel=\"nofollow\"><code>rustc_serialize</code></a> crate to parse the string returned by the <code>Result</code>:</p>\n\n<pre><code>extern crate rustc_serialize;\nuse rustc_serialize::json::Json;\n\nfn main() {\n    let response_result = /* ... */;\n    let data = response_result.unwrap();\n    let json = Json::from_str(&amp;data).unwrap();\n    println!(\"{}\", json.find(\"status\").unwrap());\n}\n</code></pre>\n"}], "owner": {"reputation": 844, "user_id": 3658288, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/9b8039bc450532453f00c018b6b9a1d6?s=128&d=identicon&r=PG", "display_name": "Adrian Z.", "link": "https://stackoverflow.com/users/3658288/adrian-z"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 52, "favorite_count": 0, "accepted_answer_id": 34355782, "answer_count": 1, "score": -1, "last_activity_date": 1450450299, "creation_date": 1450439514, "last_edit_date": 1495535283, "question_id": 34355070, "link": "https://stackoverflow.com/questions/34355070/manipulate-result-type-with-json-as-content", "title": "Manipulate Result type with JSON as content", "body": "<p>This is a follow-up on the question <a href=\"https://stackoverflow.com/questions/34279141/why-do-i-get-a-list-of-numbers-instead-of-json-when-using-the-twitch-api-via-rus?noredirect=1#comment56300639_34279141\">Why do I get a list of numbers instead of JSON when using the Twitch API via Rust?</a> If I use the solution suggested in the previous post:</p>\n\n<blockquote>\n  <p>Use the <code>response.get_body()</code> method to get a list of byte number which can be converted to a <code>Result</code> with <code>from_utf8()</code> method.</p>\n</blockquote>\n\n<p>This returns a <code>Result</code> with everything in it. I'm not sure how to manipulate it. I was hoping I could use it like an array but the <a href=\"https://doc.rust-lang.org/std/result/\" rel=\"nofollow noreferrer\">docs</a> and <a href=\"http://rustbyexample.com/std/result.html\" rel=\"nofollow noreferrer\">rustbyexample</a> don't seem to explain it. What is the purpose of a <code>Result</code> type?</p>\n\n<p><a href=\"https://bitbucket.org/snippets/adrianz/Gddeb\" rel=\"nofollow noreferrer\">This is the exact response</a> that I'm getting from the body after converting it to UTF-8.</p>\n"}, {"tags": ["functional-programming", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450448025, "post_id": 34350237, "comment_id": 56456558, "body": "FYI <code>&amp;Fn(...) -&gt; ...</code> isn&#39;t a function pointer, it&#39;s a reference to a trait object. <code>let z: fn(i32) -&gt; i32 = ...</code> would be a function pointer."}], "answers": [{"tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 1, "last_activity_date": 1450423544, "creation_date": 1450423544, "answer_id": 34350411, "question_id": 34350237, "link": "https://stackoverflow.com/questions/34350237/lifetime-of-function-behaves-differently-in-function-pointer-assignment-and-init/34350411#34350411", "title": "Lifetime of function behaves differently in function pointer assignment and initialization", "body": "<p>Can it be linked to <code>const</code> vs <code>static</code>?</p>\n\n<pre><code>static i:usize = 0usize;\n\nfn test_Functor()\n{\n    // case 2. Assignment\n    let myFunctor: &amp;usize;\n    myFunctor= &amp;i ;\n\n}\n</code></pre>\n\n<p>It compiles when <code>i</code> is <code>static</code> but not when i is <code>const</code>. \nFrom the <a href=\"https://doc.rust-lang.org/book/const-and-static.html\" rel=\"nofollow\">book</a>, it is said that static aren't inlined ...</p>\n"}, {"comments": [{"owner": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "edited": false, "score": 0, "creation_date": 1450430884, "post_id": 34352077, "comment_id": 56446224, "body": "In your example it works as you say. But the point is the lifetime of the constant 3 is in the same stack as &#39;a&#39;. However, fx is a function defined in the module which will be not gone even after the scope of test_Functor."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "edited": false, "score": 2, "creation_date": 1450431756, "post_id": 34352077, "comment_id": 56446790, "body": "Yes, lifetimes are a bit too strict in some scenarios; they start with a binding and they end at the end of the block containing the binding, so they can reject valid code on some occasions. In the rust-lang/rust and rfcs repos you may find mentions of &quot;non-lexical&quot; lifetimes, that should make the compiler smarter, but I&#39;m not sure if/how that work is proceeding"}, {"owner": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "edited": false, "score": 0, "creation_date": 1450433377, "post_id": 34352077, "comment_id": 56447727, "body": "Thanks. I did not know the &quot;lexical/non-lexical lifetime&quot; causes I am new to rust. Will read more on it. But in my example above I think lexically the compiler should already know very clear that &#39;fx&#39; has longer lifetime then &#39;myFunctor&#39;. Another point is I believe there is no difference in term of lifetime between case 1 and case 2. That is inconsistency there."}, {"owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "reply_to_user": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "edited": false, "score": 0, "creation_date": 1450443171, "post_id": 34352077, "comment_id": 56453605, "body": "@palazzotrain I added an alternative that should work in your case"}, {"owner": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "edited": false, "score": 0, "creation_date": 1451964303, "post_id": 34352077, "comment_id": 56952999, "body": "thanks it works. <a href=\"https://github.com/rust-lang/rust/issues/30456\" rel=\"nofollow noreferrer\">rust-lang issues confirmed that this is not bug</a>"}], "tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 4, "last_activity_date": 1450443128, "last_edit_date": 1450443128, "creation_date": 1450430019, "answer_id": 34352077, "question_id": 34350237, "link": "https://stackoverflow.com/questions/34350237/lifetime-of-function-behaves-differently-in-function-pointer-assignment-and-init/34352077#34352077", "title": "Lifetime of function behaves differently in function pointer assignment and initialization", "body": "<p>I think it is not a bug. Note that it is also producing the same error without function pointers.</p>\n\n<pre><code>// this compiles\nlet a: &amp;i32 = &amp;3;\n</code></pre>\n\n<p>vs </p>\n\n<pre><code>let a: &amp;i32;\na = &amp;3;\n   //^ error: borrowed value does not live long enough\n</code></pre>\n\n<p>The two pieces of code above are not equivalent. A lifetime starts at the point where you bind a variable (<code>let a: &amp;32</code>), not where you assign it (<code>a = &amp;3</code>). If you split the two, like in the second case, you're saying that the lifetime for the &amp;i32 is expected to start at the <code>let a: &amp;i32</code> line, which the compiler can't guarantee in the general case.</p>\n\n<p>For instance, imagine if you did:</p>\n\n<pre><code>// does not compile\nlet a: &amp;i32;\n{\n    let b = 3;\n    a = &amp;b;\n} // b is out of scope, so a can't still contain a live reference here\n</code></pre>\n\n<p>you CAN make this work, but you explicitly need to tell the compiler that b is static (the static lifetime outlives everything), like this:</p>\n\n<pre><code>   let a: &amp;i32;\n   static b: i32 = 3;\n   a = &amp;b;\n</code></pre>\n\n<p>or (in your original case):</p>\n\n<pre><code>let myFunctor: &amp;Fn(i32) -&gt; i32;\nstatic F: fn(i32) -&gt; i32 = fx;\n\nmyFunctor= &amp;F;\n</code></pre>\n"}], "owner": {"reputation": 2597, "user_id": 4049331, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/2a4959cceb8c3c98065763a771bb04e8?s=128&d=identicon&r=PG&f=1", "display_name": "palazzo train", "link": "https://stackoverflow.com/users/4049331/palazzo-train"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 220, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1450443128, "creation_date": 1450422829, "last_edit_date": 1450423833, "question_id": 34350237, "link": "https://stackoverflow.com/questions/34350237/lifetime-of-function-behaves-differently-in-function-pointer-assignment-and-init", "title": "Lifetime of function behaves differently in function pointer assignment and initialization", "body": "<p>See the below example</p>\n\n<pre><code>fn fx(x: i32) -&gt; i32\n{\n    x\n}\n\nfn test_Functor()\n{\n    // case 1. Initialization\n    let myFunctor: &amp;Fn(i32) -&gt; i32 = &amp;fx ;\n\n    // case 2. Assignment\n    //let myFunctor: &amp;Fn(i32) -&gt; i32;\n    //myFunctor= &amp;fx ;\n\n}\n</code></pre>\n\n<p>This can compile. \nIf I comment case 1 and uncomment case 2. I got an error</p>\n\n<pre><code>   Compiling study_rust v0.0.1 (main.rs)\nsrc/main.rs:45:17: 45:19 error: borrowed value does not live long enough\nsrc/main.rs:45     myFunctor= &amp;fx ;\n                               ^~\nsrc/main.rs:44:36: 47:2 note: reference must be valid for the block suffix following statement 0 at 44:35...\nsrc/main.rs:44     let myFunctor: &amp;Fn(i32) -&gt; i32;\nsrc/main.rs:45     myFunctor= &amp;fx ;\nsrc/main.rs:46\nsrc/main.rs:47 }\nsrc/main.rs:45:5: 45:21 note: ...but borrowed value is only valid for the statement at 45:4\nsrc/main.rs:45     myFunctor= &amp;fx ;\n                   ^~~~~~~~~~~~~~~~\nsrc/main.rs:45:5: 45:21 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:45     myFunctor= &amp;fx ;\n                   ^~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `study_rust`.\n</code></pre>\n\n<p>Why? Is it a bug?\nI am using rustc 1.5.0</p>\n\n<pre><code>rustc 1.5.0 (3d7cd77e4 2015-12-04)\n</code></pre>\n"}, {"tags": ["sockets", "io", "rust", "virtual-memory"], "comments": [{"owner": {"reputation": 1, "user_id": 1197465, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2bc5e1494b7ec49d9455c71d513e6091?s=128&d=identicon&r=PG", "display_name": "user887591", "link": "https://stackoverflow.com/users/1197465/user887591"}, "edited": false, "score": 0, "creation_date": 1514168438, "post_id": 34345319, "comment_id": 113426955, "body": "I&#39;m afraid it&#39;s not a programming language specified feature to support memory mapped socket. The following doc may help you. <a href=\"https://www.kernel.org/doc/Documentation/networking/packet_mmap.txt\" rel=\"nofollow noreferrer\">kernel.org/doc/Documentation/networking/packet_mmap.txt</a>"}, {"owner": {"reputation": 574, "user_id": 7347121, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-WELgbb5w_7U/AAAAAAAAAAI/AAAAAAAAAAo/7u7M99npwYM/photo.jpg?sz=128", "display_name": "z0rberg&#39;s", "link": "https://stackoverflow.com/users/7347121/z0rbergs"}, "edited": false, "score": 0, "creation_date": 1601483404, "post_id": 34345319, "comment_id": 113426928, "body": "<a href=\"https://www.complang.tuwien.ac.at/syro/thesis.html\" rel=\"nofollow noreferrer\">complang.tuwien.ac.at/syro/thesis.html</a> In case someone&#39;s interested, this guy solved OP&#39;s problem and also provided a patch for Kernel 2.0.36."}], "answers": [{"tags": [], "owner": {"reputation": 288867, "user_id": 207421, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/5cfe5f7d64f44be04f147295f5c7b88e?s=128&d=identicon&r=PG", "display_name": "user207421", "link": "https://stackoverflow.com/users/207421/user207421"}, "is_accepted": true, "score": 5, "last_activity_date": 1450391391, "creation_date": 1450391391, "answer_id": 34345502, "question_id": 34345319, "link": "https://stackoverflow.com/questions/34345319/is-it-possible-to-memory-map-a-socket-to-virtual-memory/34345502#34345502", "title": "Is it possible to memory map a socket to virtual memory?", "body": "<p>No. It doesn't make sense. A socket is not a random access device, and the length of the mapping is undefined.</p>\n"}, {"comments": [{"owner": {"reputation": 18530, "user_id": 3344003, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/988af95d5692ee66b1fc2fe725ba738e?s=128&d=identicon&r=PG&f=1", "display_name": "user3344003", "link": "https://stackoverflow.com/users/3344003/user3344003"}, "reply_to_user": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 0, "creation_date": 1450625693, "post_id": 34363600, "comment_id": 56506563, "body": "What happens when the memory mapped file fills up?"}, {"owner": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 0, "creation_date": 1450644981, "post_id": 34363600, "comment_id": 56512768, "body": "It just is full? I don&#39;t see a problem. You just would have to remap to access more."}, {"owner": {"reputation": 18530, "user_id": 3344003, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/988af95d5692ee66b1fc2fe725ba738e?s=128&d=identicon&r=PG&f=1", "display_name": "user3344003", "link": "https://stackoverflow.com/users/3344003/user3344003"}, "reply_to_user": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 0, "creation_date": 1450649234, "post_id": 34363600, "comment_id": 56514005, "body": "That assumes a contiguous range of pages is available when you need more."}, {"owner": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "edited": false, "score": 0, "creation_date": 1450702895, "post_id": 34363600, "comment_id": 56533808, "body": "It wouldn&#39;t any more than allocating the memory if it weren&#39;t a socket would."}], "tags": [], "owner": {"reputation": 18530, "user_id": 3344003, "user_type": "registered", "accept_rate": 52, "profile_image": "https://www.gravatar.com/avatar/988af95d5692ee66b1fc2fe725ba738e?s=128&d=identicon&r=PG&f=1", "display_name": "user3344003", "link": "https://stackoverflow.com/users/3344003/user3344003"}, "is_accepted": false, "score": 3, "last_activity_date": 1450471157, "creation_date": 1450471157, "answer_id": 34363600, "question_id": 34345319, "link": "https://stackoverflow.com/questions/34345319/is-it-possible-to-memory-map-a-socket-to-virtual-memory/34363600#34363600", "title": "Is it possible to memory map a socket to virtual memory?", "body": "<p>When you create a memory mapped file, you specify what file, and what range of data in the file is to be mapped. The area of the file that is mapped is fixed. If the memory mapped file grows (for whatever reason) the new data does not get mapped.</p>\n\n<p>In many systems memory mapped files are implemented the same way as paging. Instead of mapping the virtual memory to a page file, it gets mapped to the file selected by the caller.</p>\n\n<p>What you are asking for does not make sense because you are asking for variable length data to be used with a fixed length data construct.</p>\n"}], "owner": {"reputation": 11531, "user_id": 2558778, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/8673885f9ba1bd1424015567ef6833f5?s=128&d=identicon&r=PG&f=1", "display_name": "Jeroen", "link": "https://stackoverflow.com/users/2558778/jeroen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 706, "favorite_count": 0, "accepted_answer_id": 34345502, "answer_count": 2, "score": 0, "last_activity_date": 1601483404, "creation_date": 1450390614, "last_edit_date": 1450401091, "question_id": 34345319, "link": "https://stackoverflow.com/questions/34345319/is-it-possible-to-memory-map-a-socket-to-virtual-memory", "title": "Is it possible to memory map a socket to virtual memory?", "body": "<p>I am looking for something similar to memory mapping a file. It would make the virtual memory match the output of the socket byte-to-byte, and would block when no new bytes have been received. Is this possible? </p>\n\n<p>I am looking specifically for a solution for Rust, but if anyone knows another language that has a feature like this, I might be able to interface with it.</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 13, "last_activity_date": 1450339123, "creation_date": 1450339123, "answer_id": 34329393, "question_id": 34329210, "link": "https://stackoverflow.com/questions/34329210/call-static-method-from-trait-on-generic-type/34329393#34329393", "title": "Call static method from trait on generic type", "body": "<blockquote>\n  <p>When I try to call the <code>function</code> method on the generic type, ...</p>\n</blockquote>\n\n<p>Two things: first of all, depending on how you want to look at it, <code>function</code> <em>isn't</em> a method.  It's just a function that happens to live in the trait's namespace (<em>a.k.a.</em> an \"associated function\").</p>\n\n<p>Secondly, you're <em>not</em> trying to call <code>function</code> on the type, you're calling it on a value of that type.  This is impossible because, again, it's not a method; it doesn't have a <code>self</code> parameter.</p>\n\n<p>The solution is to <em>actually</em> call the <code>function</code> associated function on the generic type, which looks like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn call_method&lt;T: MyTrait&gt;(object: T) {\n    let x = T::function(2);\n}\n</code></pre>\n\n<p>Sometimes, this won't be specific enough.  If you need to be more specific, you can <em>also</em> write the above as:</p>\n\n<pre><code>fn call_method&lt;T: MyTrait&gt;(object: T) {\n    let x = &lt;T as MyTrait&gt;::function(2);\n}\n</code></pre>\n\n<p>The two are semantically <em>identical</em>; it's just that the second is more specific and more likely to resolve when you have lots of traits involved.</p>\n"}, {"comments": [{"owner": {"reputation": 81, "user_id": 7324205, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Wvr4o.jpg?s=128&g=1", "display_name": "Meet Sinojia", "link": "https://stackoverflow.com/users/7324205/meet-sinojia"}, "edited": false, "score": 0, "creation_date": 1595337425, "post_id": 59495031, "comment_id": 111434817, "body": "From <code>main</code> function, <code>call_method</code> function can then be called as <code>call_method::&lt;Dummy&gt;()</code>."}], "tags": [], "owner": {"reputation": 14666, "user_id": 12637, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/2f3ca6058f9534dfed473cf31341c644?s=128&d=identicon&r=PG", "display_name": "Omar Abid", "link": "https://stackoverflow.com/users/12637/omar-abid"}, "is_accepted": false, "score": 3, "last_activity_date": 1577409760, "creation_date": 1577409760, "answer_id": 59495031, "question_id": 34329210, "link": "https://stackoverflow.com/questions/34329210/call-static-method-from-trait-on-generic-type/59495031#59495031", "title": "Call static method from trait on generic type", "body": "<p>Following on DK. answer, you don't actually need to pass \"object: T\" as an argument to your function.</p>\n\n<p>You can just do</p>\n\n<pre><code>fn call_method&lt;T: MyTrait&gt;() {\n    let x = T::function(2);\n}\n</code></pre>\n\n<p>In fact, if I got it right, you are not passing this struct to the function but merely linking it through the T, so there is no move/borrow semantics involved. <em>But I might be wrong here</em>.</p>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3849, "favorite_count": 1, "accepted_answer_id": 34329393, "answer_count": 2, "score": 10, "last_activity_date": 1577409760, "creation_date": 1450338398, "last_edit_date": 1495540813, "question_id": 34329210, "link": "https://stackoverflow.com/questions/34329210/call-static-method-from-trait-on-generic-type", "title": "Call static method from trait on generic type", "body": "<p>I have a trait with one function that does not take <code>self</code> as an argument:</p>\n\n<pre><code>trait MyTrait {\n    fn function(x: i32) -&gt; i32;\n}\n\nstruct Dummy;\n\nimpl MyTrait for Dummy {\n    fn function(x: i32) -&gt; i32 {\n        x * 2\n    }\n}\n\nfn call_method&lt;T: MyTrait&gt;(object: T) {\n    let x = object.function(2);\n}\n\nfn main() {}\n</code></pre>\n\n<p>The user of the library is required to implement the trait for any type, usually an empty struct. One of my functions accepts a generic type that implements <code>MyTrait</code>. When I try to call the <code>function</code> method on the generic type, it gives me this error:</p>\n\n<blockquote>\n  <p>error: no method named <code>function</code> found for type <code>T</code> in the current scope</p>\n</blockquote>\n\n<p>I tried the solution in the answer to <a href=\"https://stackoverflow.com/questions/20342436/rust-invoke-trait-method-on-generic-type-parameter\">this question</a>, but I get the same error. How can I call a static method on a generic type?</p>\n"}, {"tags": ["static", "rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 2, "creation_date": 1450339263, "post_id": 34327706, "comment_id": 56400286, "body": "- <i>in my understanding, since all the Items are allocated with boxes in the heap, a reference to it should always be valid</i> - <code>Vec</code> will <code>drop</code> the <code>Box</code>es if they are removed or replaced, so no, they aren&#39;t always valid. <code>Box</code> makes no difference here. <code>Arc</code> would. Or if the <code>Item</code>s somehow had a <code>&#39;static</code> lifetime."}, {"owner": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1450361295, "post_id": 34327706, "comment_id": 56414464, "body": "@ArtemGr I thought <code>Vec</code> owns those boxes and the <code>Item</code>s. Unless I remove or set elements in the <code>Vec</code>, the boxes are always valid. I can ensure that I won&#39;t mutate those elements once they are inserted, but how can I let the compiler know this?"}], "answers": [{"comments": [{"owner": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "edited": false, "score": 0, "creation_date": 1450833919, "post_id": 34337846, "comment_id": 56595617, "body": "Thanks for the explanation. I tried the code, and it was quite surprising that when I expected that those type casts and intermediate values will be opt&#39;d out by rustc or llvm eventually, they all exist in the final machine code :/"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "edited": false, "score": 0, "creation_date": 1450839431, "post_id": 34337846, "comment_id": 56596930, "body": "@qinsoon <a href=\"https://gist.github.com/shepmaster/5293f546e7d2dc1ab039\" rel=\"nofollow noreferrer\">here&#39;s the LLVM IR and assembly</a> that I generated. Can you help point me to where all the casts are? I mostly see references to the locking / unlocking / panicking when failing to lock."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1450364934, "last_edit_date": 1495541745, "creation_date": 1450364934, "answer_id": 34337846, "question_id": 34327706, "link": "https://stackoverflow.com/questions/34327706/get-reference-to-an-element-of-a-global-vector/34337846#34337846", "title": "Get reference to an element of a global vector", "body": "<p>Compiling the code gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: missing lifetime specifier [E0106]\n    fn get_a_certain_item() -&gt; &amp;Item {\n                               ^~~~~\nhelp: run `rustc --explain E0106` to see a detailed explanation\nhelp: this function's return type contains a borrowed value,\n      but there is no value for it to be borrowed from\nhelp: consider giving it a 'static lifetime\n</code></pre>\n\n<p>In Rust, lifetimes are simply parameterized placeholders, just like generic types (<a href=\"https://stackoverflow.com/a/31612025/155423\">see this answer for more info</a>). That means that every returned reference must have a lifetime that corresponds to some input reference. Your function doesn't have that.</p>\n\n<p><strong>If</strong> it were possible for the lifetimes to not correspond, then you'd be able to have code that returned a lifetime that could be whatever the <em>caller</em> wanted it to be. This is generally nonsense, as the reference will stop being valid at some point and thus you'd be breaking the memory safety rules.</p>\n\n<p>What I just said is true, but leaves off one small but important corner case: the <code>'static</code> lifetime. This is a built-in lifetime that corresponds to items compiled into the code. Normally this means global variables defined with <code>static</code> or references to literal values. These values exist before <code>main</code> is called and are destroyed after <code>main</code> has ended. It is impossible to actually create such values during the runtime of your program.</p>\n\n<p>Note that the error message makes reference to the <code>'static</code> lifetime. However, if you just add this lifetime, you will get a different error:</p>\n\n<pre><code>error: borrowed value does not live long enough\n    &amp;VEC.read().unwrap()[1]\n     ^~~~~~~~~~~~~~~~~~~\nnote: reference must be valid for the static lifetime...\nnote: ...but borrowed value is only valid for the block at [...]\n</code></pre>\n\n<p>This is because the compiler <em>cannot</em> ensure that the value will last for the entire length of the program. In fact, it can only ensure it will last for the duration of the function call.</p>\n\n<p>As the programmer, you may know (or think you know) better than the compiler. That's what the <code>unsafe</code> escape hatch is for. This allows you to do things that the compiler cannot verify. It does <strong>not</strong> allow you to break memory safety; it's just up to the programmer to ensure memory safety instead of the compiler.</p>\n\n<p>In your case, if you can guarantee that items from the vector are <strong>never</strong> dropped, and that you <strong>always</strong> use a <code>Box</code>, then it <strong>should</strong> be safe to pretend that references to the <code>Item</code> are <code>'static</code>.</p>\n\n<p>A <code>Box</code>ed value is allocated on the heap, and the memory is never moved after the initial creation. Since items in the vector are not dropped, the <code>Box</code> will never be freed. </p>\n\n<p>Here's a verbose example of implementing the method:</p>\n\n<pre><code>fn get_a_certain_item() -&gt; &amp;'static Item {\n    // Best practice: put a paragraph explaining why this isn't\n    // actually unsafe.\n    unsafe {\n        let as_ref: &amp;Box&lt;Item&gt; = &amp;VEC.read().unwrap()[1];\n        let as_ref2: &amp;Item = &amp;**as_ref;\n        let as_raw = as_ref2 as *const _;\n        let unsafe_ref = &amp;* as_raw;\n        unsafe_ref\n    }\n}\n</code></pre>\n\n<p>Converting the reference to a raw pointer throws away the lifetime. When we reconstitute it we can make up whatever lifetime we want.</p>\n\n<hr>\n\n<p>For what it is worth, I don't think it is worth it in this case. If I actually have a global variable, I want that to be front-and-center in my code as I view it as an ugly wart. I'd much rather create a type that owned a <code>RwLock&lt;Vec&lt;Box&lt;Item&gt;&gt;&gt;</code>, make a global of that type, then parameterize my code to accept a reference to that type. Then I lock the global when I need it and pass the reference into functions.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450377187, "post_id": 34341538, "comment_id": 56424998, "body": "I have a feeling that the vector isn&#39;t truly immutable, it&#39;s just append-only."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1450377563, "post_id": 34341538, "comment_id": 56425188, "body": "@Shepmaster Wow, that&#39;s cool. If the vector is append-only then I&#39;d be looking for <a href=\"http://en.cppreference.com/w/cpp/container/deque\" rel=\"nofollow noreferrer\">en.cppreference.com/w/cpp/container/deque</a> in Rust."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 1, "last_activity_date": 1450451335, "last_edit_date": 1450451335, "creation_date": 1450376193, "answer_id": 34341538, "question_id": 34327706, "link": "https://stackoverflow.com/questions/34327706/get-reference-to-an-element-of-a-global-vector/34341538#34341538", "title": "Get reference to an element of a global vector", "body": "<blockquote>\n  <p>I can ensure that I won't mutate those elements once they are inserted</p>\n</blockquote>\n\n<p>You can, can you?</p>\n\n<p>But even if you really really can ensure that the vector will never be mutated, it's still a good practice to use the type system in such a way as to make the illegal states and operations <em>impossible</em>.</p>\n\n<p>In this case, you can hide the <code>Vec</code> in a module, then any user of that module won't be able to mutate the <code>Vec</code> and ruin your invariants.</p>\n\n<pre><code>#[macro_use]\nextern crate lazy_static;\n\n// Hides the gory details from the user of the API.\npub mod items {\n    use std::mem::transmute;\n\n    pub struct Item {\n        pub id: usize\n    }\n\n    lazy_static! {\n        static ref VEC : Vec&lt;Item&gt; = vec![\n            Item { id: 0 },\n            Item { id: 1 },\n            Item { id: 2 }];\n    }\n\n    pub fn get_an_item (idx: usize) -&gt; Option&lt;&amp;'static Item&gt; {\n        // As Shepmaster has pointed out, Rust is smart enough to detect\n        // that the vector is immutable and allow the 'static lifetime:\n        VEC.get(idx)\n\n        // And when it isn't that smart, we can use `unsafe`\n        // to tell the compiler that the 'static lifetime is okay:\n        /*\n        match VEC.get (idx) {\n            Some (item) =&gt; {\n                // `unsafe` means \"safe, scout's honor\", cf. http://doc.rust-lang.org/book/unsafe.html\n                let item: &amp;'static Item = unsafe {transmute (item)};\n                Some (item)\n            },\n            None =&gt; None\n        }\n        */\n    }\n}\n\nfn main() {\n    let ref_b = items::get_an_item (1) .expect (\"!1\");\n    assert_eq! (ref_b.id, 1);\n}\n</code></pre>\n\n<p>Note that, since the <code>Vec</code> is immutable, there's no need to <code>Box</code> the <code>Item</code>s. This might be nice from the data-driven, cache locality perspective.</p>\n\n<p>And if a user of this module tries for an undefined behavior with a code like this <code>items::VEC.push (items::Item {id: 3});</code> he'll get an \"<em>error: static <code>VEC</code> is private</em>\".</p>\n"}], "owner": {"reputation": 1271, "user_id": 897956, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/910d6b81ae077c4af8d627a7cdab6520?s=128&d=identicon&r=PG", "display_name": "qinsoon", "link": "https://stackoverflow.com/users/897956/qinsoon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 636, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1450451335, "creation_date": 1450332421, "last_edit_date": 1450360464, "question_id": 34327706, "link": "https://stackoverflow.com/questions/34327706/get-reference-to-an-element-of-a-global-vector", "title": "Get reference to an element of a global vector", "body": "<p>This is a minimal example that I struggled to get right. </p>\n\n<p>I am trying to maintain a global <code>Vec&lt;Box&lt;Item&gt;&gt;</code>, the id of the <code>Item</code> is its index. When I want to fetch a reference to the <code>Item</code>, I can always get its id from somewhere, then get a reference by id (as <code>ref_a</code> in the code). But I would prefer directly getting the reference to the <code>Item</code> and pass it around (like <code>ref_b</code>), or even save it somewhere instead of saving the id. But my code doesn't work. </p>\n\n<p>I see that in <code>get_a_certain_item()</code>, the return value <code>&amp;Item</code> would have the same lifetime as <code>VEC.read()</code> thus it is not valid to let the reference escape. However, in my understanding, since all the <code>Item</code>s are allocated with boxes in the heap, a reference to it should always be valid. There should be no harm to let the reference live longer than the read guard. </p>\n\n<p>If I am not writing the code right, I guess there should be some idiomatic way to do this in Rust. I would appreciate some help. </p>\n\n<pre><code>// lazy_static = \"0.1.15\"\n#[macro_use]\nextern crate lazy_static;\n\nuse std::sync::RwLock;\n\nstruct Item {\n    id: usize\n}\n\nlazy_static! {\n    static ref VEC : RwLock&lt;Vec&lt;Box&lt;Item&gt;&gt;&gt; = RwLock::new(vec![\n        Box::new(Item { id: 0 }), \n        Box::new(Item { id: 1 }), \n        Box::new(Item { id: 2 })]);\n}\n\nfn get_a_certain_item() -&gt; &amp;Item {\n    &amp; VEC.read().unwrap()[1]\n}\n\nfn get_a_certain_item_by_id() -&gt; usize {\n    1\n}\n\nfn main() {\n    // this works, but verbose\n    let ref_a = {&amp; VEC.read().unwrap()[get_a_certain_item_by_id()]};\n\n    // this doesn't work\n    let ref_b = get_a_certain_item();\n}\n</code></pre>\n"}]