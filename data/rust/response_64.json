[{"tags": ["function", "pointers", "rust"], "answers": [{"comments": [{"owner": {"reputation": 13, "user_id": 3476244, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eaa118908aedc6b0ada1276cf569df43?s=128&d=identicon&r=PG&f=1", "display_name": "ZOTTCE", "link": "https://stackoverflow.com/users/3476244/zottce"}, "edited": false, "score": 0, "creation_date": 1459376407, "post_id": 36320613, "comment_id": 60264826, "body": "Yes, this code work, but how I said I want a generic function. I don&#39;t know how to do it."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 0, "last_activity_date": 1459375692, "creation_date": 1459375692, "answer_id": 36320613, "question_id": 36320479, "link": "https://stackoverflow.com/questions/36320479/how-to-get-a-pointer-to-function-as-u32/36320613#36320613", "title": "How to get a pointer to function as u32?", "body": "<p>You probably want to cast the function pointer to <code>usize</code> rather than <code>u32</code>.</p>\n\n<pre><code>fn foo(ptr: fn()) {\n    let n = ptr as usize;\n    println!(\"{}\", n);\n}\n\nfn a() {}\n\nfn b() {}\n\nfn main() {\n    foo(a);\n    foo(b);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1459386559, "creation_date": 1459386559, "answer_id": 36322486, "question_id": 36320479, "link": "https://stackoverflow.com/questions/36320479/how-to-get-a-pointer-to-function-as-u32/36322486#36322486", "title": "How to get a pointer to function as u32?", "body": "<p>You can't.</p>\n\n<p><code>T</code> could be anything; it could be a function pointer, a <code>u32</code>, an <code>i32</code>, an <code>f64</code>, a <code>String</code>, a <code>Box&lt;[Arc&lt;Mutex&lt;Vec&lt;&amp;[Box&lt;Goombah&gt;]&gt;&gt;&gt;]&gt;</code>, or even <code>()</code>: nothing at all.  The compiler has no way of knowing if the transmute is even remotely <em>possible</em>, let alone <em>correct</em>.</p>\n\n<p>This is because you <em>do not</em> have a function taking a \"pointer to function\".  You have a function taking an \"absolutely anything\".  If you're treating Rust generics like C++/D templates, you need to understand that they do not work the same way.  Rust checks its templates at <em>definition</em> time based on what you've told it about the types involved.  For example, the only thing you can do with a completely generic <code>T</code> is move it.  That you've instantiated the generic function such that <code>T</code> is a function type is irrelevant: by the time that happens, Rust will have already decided whether or not the generic code is valid or not.</p>\n\n<blockquote>\n  <p>To use a different analogy: Rust generics are to C++ templates what C++ typing is to Python typing: static and done ahead-of-time instead of ad-hoc and done on-demand.</p>\n</blockquote>\n\n<p>So, how do you specify that you want some kind of pointer-to-function?  You can't.</p>\n\n<p>There is no way to specify any arbitrary kind of function pointer.  Rust doesn't have variadic generics, so you can't express the idea of a variable number of types, which you'd need for the argument list.</p>\n\n<p>There are the <code>Fn*</code> traits, but using those is only going to make the situation worse.  Since you haven't explained <em>why</em> you're trying to do this, it's hard to know what you should be doing instead.</p>\n\n<p>What you <em>can</em> do is ask for a specific <em>shape</em> of function pointer.</p>\n\n<pre><code>fn getter_0_args&lt;R&gt;(f: fn() -&gt; R) { ... }\nfn getter_2_args&lt;A0, A1, R&gt;(f: fn(A0, A1) -&gt; R) { ... }\n</code></pre>\n\n<p>Or you could just do the cast in the <em>calling</em> code:</p>\n\n<pre><code>getter_1_arg(f as fn(_) -&gt; _ as usize)\n</code></pre>\n\n<p>(I'm using <code>_</code> here to let inference fill in the argument and return types for me.)</p>\n\n<p>Which brings me to my last point: using transmute for this is <em>entirely</em> unnecessary when <code>as</code> works <em>just fine</em>.  Also, using <code>u32</code> for this is <em>wrong</em>: you should be using <code>usize</code> or <code>isize</code> for pointer- and length-sized things.</p>\n"}, {"tags": [], "owner": {"reputation": 106, "user_id": 5554486, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/82ac6d32c6695d300aa7cb476f2d75ea?s=128&d=identicon&r=PG&f=1", "display_name": "Jascha", "link": "https://stackoverflow.com/users/5554486/jascha"}, "is_accepted": false, "score": 0, "last_activity_date": 1459420617, "last_edit_date": 1459420617, "creation_date": 1459420138, "answer_id": 36330815, "question_id": 36320479, "link": "https://stackoverflow.com/questions/36320479/how-to-get-a-pointer-to-function-as-u32/36330815#36330815", "title": "How to get a pointer to function as u32?", "body": "<p><code>fn</code>-pointers don't seem to implement any useful common trait you can rely on as a bound. It would be nice if they at least implemented <code>Into&lt;usize&gt;</code> or <code>Into&lt;*mut T&gt;</code>, but since they don't, the trick is to create your own trait and use some macro magic to implement it for all <code>fn</code>-pointers up to a certain arity. This is how I did it for <a href=\"https://github.com/Jascha-N/minhook-rs/blob/master/src/function.rs\" rel=\"nofollow\">minhook-rs</a>. </p>\n\n<p>Here is a simplified implementation:</p>\n\n<pre><code>use std::mem;\n\npub trait Function: Sized {\n    unsafe fn from_usize(value: usize) -&gt; Self;\n    fn to_usize(&amp;self) -&gt; usize;\n}\n\nmacro_rules! impl_function {\n    (recurse: () ($($ty:ident),*)) =&gt; {\n        impl_function!(impl_cc: ($($ty),*));\n    };\n    (recurse: ($hd:ident $(, $tl:ident)*) ($($ty:ident),*)) =&gt; {\n        impl_function!(impl_cc: ($($ty),*));\n        impl_function!(recurse: ($($tl),*) ($($ty,)* $hd));\n    };\n\n    (impl_cc: ($($ty:ident),*)) =&gt; {\n        impl_function!(impl_fun: ($($ty),*) (                  fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"cdecl\"    fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"stdcall\"  fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"fastcall\" fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"win64\"    fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"C\"        fn($($ty),*) -&gt; Ret));\n        // impl_function!(impl_fun: ($($ty),*) (extern \"system\"   fn($($ty),*) -&gt; Ret));\n\n        // Uncomment/add more if needed\n    };\n\n    (impl_fun: ($($ty:ident),*) ($fn_type:ty)) =&gt; {\n        impl&lt;Ret, $($ty),*&gt; Function for $fn_type {\n            unsafe fn from_usize(value: usize) -&gt; Self {\n                mem::transmute(value)\n            }\n\n            fn to_usize(&amp;self) -&gt; usize {\n                *self as usize\n            }\n        }\n    };\n\n    ($($ty:ident),*) =&gt; {\n        impl_function!(recurse: ($($ty),*) ());\n    };\n}\n\n// Implement Function for up to 12 arguments\nimpl_function!(A, B, C, D, E, F, G, H, I, J, K, L);\n\nfn getter_of_functions&lt;F: Function&gt;(function: F) {\n    let fun_ptr = function.to_usize();\n    println!(\"{:x}\", fun_ptr);\n}\n\nfn function() {\n    println!(\"hello ...\");\n}\n\nfn main() {\n    getter_of_functions(function as fn());\n}\n</code></pre>\n\n<p>As has been stated before, you should use <code>usize</code> as opposed to <code>u32</code>.</p>\n"}], "owner": {"reputation": 13, "user_id": 3476244, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eaa118908aedc6b0ada1276cf569df43?s=128&d=identicon&r=PG&f=1", "display_name": "ZOTTCE", "link": "https://stackoverflow.com/users/3476244/zottce"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 861, "favorite_count": 0, "accepted_answer_id": 36322486, "answer_count": 3, "score": 1, "last_activity_date": 1459420617, "creation_date": 1459375102, "last_edit_date": 1459377778, "question_id": 36320479, "link": "https://stackoverflow.com/questions/36320479/how-to-get-a-pointer-to-function-as-u32", "title": "How to get a pointer to function as u32?", "body": "<p>How can I get a pointer to function as <code>u32</code> value?  </p>\n\n<p>I have a function that taking a pointer to function:  </p>\n\n<pre><code>fn getter_of_functions&lt;T&gt;(pointer: T) {\n    // ...\n    /* \n\n    This code don't compile ...\n    let fun_ptr: u32 = unsafe {\n        mem::transmute::&lt;T, u32&gt;(callback)\n    };\n\n    */\n}\n\nfn function() {\n    println!(\"hello ...\");\n}\n\ngetter_of_functions(function);\n</code></pre>\n\n<p>How to get it (I have to have a generic function)? Often error I had is: </p>\n\n<pre><code>cannot transmute to or from a type that contains unsubstituted type parameters\n</code></pre>\n"}, {"tags": ["image", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1459371883, "post_id": 36317461, "comment_id": 60262711, "body": "Initial compile for image and its deps, 2:15.20elapsed, recompile time for just changing that simple lib.rs file, 0:22.58elapsed. Indeed not so good, and this is with a debug build! But I have an idea how to improve it.."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1459372850, "post_id": 36317461, "comment_id": 60263225, "body": "<a href=\"https://github.com/PistonDevelopers/image/pull/518\" rel=\"nofollow noreferrer\">PR&#39;d</a> to fix that particular problem.."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1459372954, "post_id": 36317461, "comment_id": 60263265, "body": "@bluss I hope you write an answer describing the problem and the fix in addition to your commit message ;-)"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1459456067, "post_id": 36317461, "comment_id": 60308013, "body": "The PR was contribution enough I think. Besides, how can I answer a user that doesn&#39;t pose a question? :D"}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 1, "last_activity_date": 1459366515, "creation_date": 1459366515, "answer_id": 36318103, "question_id": 36317461, "link": "https://stackoverflow.com/questions/36317461/compiling-a-program-using-pistons-image-crate-is-slow/36318103#36318103", "title": "Compiling a program using Piston&#39;s image crate is slow", "body": "<p>We are continually working on improving the speed of the compiler, but some crates are slower to compile than others. I don't know much about this particular crate, but this just might be the case for now.</p>\n"}, {"tags": [], "owner": {"reputation": 236, "user_id": 6069818, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a8d21e059f672c38a3609d3876a4c6c1?s=128&d=identicon&r=PG&f=1", "display_name": "qthree", "link": "https://stackoverflow.com/users/6069818/qthree"}, "is_accepted": true, "score": 2, "last_activity_date": 1459372889, "last_edit_date": 1459372889, "creation_date": 1459372546, "answer_id": 36319905, "question_id": 36317461, "link": "https://stackoverflow.com/questions/36317461/compiling-a-program-using-pistons-image-crate-is-slow/36319905#36319905", "title": "Compiling a program using Piston&#39;s image crate is slow", "body": "<p>You make a local inner crate and place <code>extern crate image</code> inside  it. As long as the inner crate doesn't change, compilation of the root crate will be fast (2 secs).</p>\n\n<p><strong>root/Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\nwrapper = { path = \"wrapper\" }\n</code></pre>\n\n<p><strong>root/src/main.rs</strong></p>\n\n<pre><code>extern crate wrapper;\n\nfn main() {\n    let _img = wrapper::open();\n}\n</code></pre>\n\n<p><strong>root/wrapper/Cargo.toml</strong></p>\n\n<pre><code>[dependencies]\nimage = \"*\"\n</code></pre>\n\n<p><strong>root/wrapper/src/lib.rs</strong></p>\n\n<pre><code>extern crate image;\n\npub use image::{ImageResult, DynamicImage};\n\npub fn open() -&gt; ImageResult&lt;DynamicImage&gt; {\n    image::open(\"example.jpg\")\n}\n</code></pre>\n"}], "owner": {"reputation": 118, "user_id": 4207988, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fg6fh.png?s=128&g=1", "display_name": "El&#228;m&#228;&#228;ns&#228; Kyll&#228;stynyt", "link": "https://stackoverflow.com/users/4207988/el%c3%a4m%c3%a4%c3%a4ns%c3%a4-kyll%c3%a4stynyt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 492, "favorite_count": 0, "accepted_answer_id": 36319905, "answer_count": 2, "score": 2, "last_activity_date": 1459372889, "creation_date": 1459364413, "last_edit_date": 1459365702, "question_id": 36317461, "link": "https://stackoverflow.com/questions/36317461/compiling-a-program-using-pistons-image-crate-is-slow", "title": "Compiling a program using Piston&#39;s image crate is slow", "body": "<p>I'm using Piston's image crate to read the dimensions and the color of each pixel of a JPEG image, but compiling the program is really slow.</p>\n\n<p>Here is my example program:</p>\n\n<pre><code>extern crate image;\n\nfn main() {\n    let img = image::open(\"example.jpg\");\n}\n</code></pre>\n\n<p>Compiling this using <strong>cargo build</strong> or <strong>cargo build --release</strong> takes at least 13 seconds every time I've modified the source code!</p>\n\n<p>Output of <strong>rustc --version</strong>: <code>rustc 1.7.0 (a5d1e7a59 2016-02-29)</code></p>\n\n<p>Output of <strong>cargo --version</strong>: <code>cargo 0.8.0-nightly (28a0cbb 2016-01-17)</code></p>\n\n<p>I'm using Ubuntu 15.10.</p>\n"}, {"tags": ["closures", "rust", "higher-order-functions"], "answers": [{"comments": [{"owner": {"reputation": 5359, "user_id": 582917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/98a347823cd1db90af884b227a29c29e?s=128&d=identicon&r=PG", "display_name": "CMCDragonkai", "link": "https://stackoverflow.com/users/582917/cmcdragonkai"}, "edited": false, "score": 0, "creation_date": 1459319791, "post_id": 36301278, "comment_id": 60226961, "body": "Thanks it makes a lot of sense now. It&#39;s like <code>FnOnce</code> is a typeclass constraint (using haskell terminology), and typeclass constraints are not used the same as a concrete type. Like <code>f :: (Class a) =&gt; a -&gt; b</code> versus <code>f :: Class a -&gt; b</code>. The second form wouldn&#39;t type check because <code>Class</code> has a kind of <code>* -&gt; Constraint</code>, not a kind of <code>*</code>. Anyway, <code>apply_once3</code> is therefore non-sensical. But there are other trait objects as you say where it does work like <code>&amp;FnMut</code>, whereas <code>&amp;FnOnce</code> doesn&#39;t work due to borrowing."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 0, "creation_date": 1459361683, "post_id": 36301278, "comment_id": 60256478, "body": "Yes, traits and type classes are very similar"}], "tags": [], "owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "is_accepted": true, "score": 3, "last_activity_date": 1459319285, "creation_date": 1459319285, "answer_id": 36301278, "question_id": 36300988, "link": "https://stackoverflow.com/questions/36300988/closure-trait-bounds-in-type-variables-versus-closure-trait-bounds-in-arguments/36301278#36301278", "title": "Closure Trait Bounds in Type Variables versus Closure Trait Bounds in Arguments on Higher Order Functions", "body": "<blockquote>\n  <p>Googling around, I can't find anything that talks about the difference\n  between putting a trait bound on the argument versus putting it on the\n  type variables.</p>\n</blockquote>\n\n<p>This isn't actually what you're doing in the third one. Let's work with something simpler:</p>\n\n<p><code>fn do_something&lt;C: Clone&gt;(x: C);\nfn do_something&lt;C&gt;(x: C) where C: Clone;</code></p>\n\n<p><code>fn do_something(x: Clone)</code></p>\n\n<p>The first two are actually the same thing, <code>where</code> is just syntactic sugar to make functions with non-trivial trait bounds easier to read, but both are saying \"I am writing a function that will later be specialized for a type implementing the Clone trait\".</p>\n\n<p>The last one is saying</p>\n\n<p>\"I want x, which is literally the Clone trait.\"</p>\n\n<p>Maybe that's confusing, let me elaborate, anything with angle brackets can be thought of as a <strong>schematic</strong> for a function, it's saying that for a given type satisfying certain requirements, the compiler can generate a function with the following code. This prevents us from writing:</p>\n\n<p><code>fn do_something(x: f64);\nfn do_something(x: Vec&lt;usize&gt;);</code></p>\n\n<p>And so on. Note the lack of angle brackets. If there are no angle brackets, you're not writing a schematic, you're telling the compiler the <strong>exact</strong> type you want. Now, <code>Clone</code> is a type... but it's a trait. Traits are not like structs. In fact, you were asking for a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">Trait Object</a>, which can only be passed by reference since they're not sized.</p>\n\n<p>You weren't actually asking for an object that <strong>implements</strong> FnOnce, you were actually asking for what's effectively the \"platonic form\" of FnOnce, which isn't something you can pass around, since it's more of an abstract concept than an actual thing. You can pass in <code>&amp;FnOnce</code>, which is saying \"a pointer to any random, arbitrary thing that happens to be an FnOnce\", but that has some tradeoffs (I recommend reading the link about trait objects, or finding other SO answers on them, which covers them in more detail than is appropriate here).</p>\n\n<p>So the short version: anything in the function signature is a concrete type, and anything in angle brackets (and/or a where clause) is a constraint on one of those concrete types.</p>\n"}, {"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 2, "last_activity_date": 1459319501, "creation_date": 1459319501, "answer_id": 36301332, "question_id": 36300988, "link": "https://stackoverflow.com/questions/36300988/closure-trait-bounds-in-type-variables-versus-closure-trait-bounds-in-arguments/36301332#36301332", "title": "Closure Trait Bounds in Type Variables versus Closure Trait Bounds in Arguments on Higher Order Functions", "body": "<p>When you use <code>apply_once1</code>, the type variable <code>F</code> is instantiated with a concrete function type of a known size.</p>\n\n<p>In <code>apply_once3</code>, the <code>FnOnce(T1) -&gt; T2</code> is the type of a trait object, which doesn't have a known size, because a single instance of <code>apply_once3</code> can be called with different functions.</p>\n\n<p>See <a href=\"https://doc.rust-lang.org/book/closures.html#taking-closures-as-arguments\" rel=\"nofollow\">this section of the Rust book</a>.</p>\n"}], "owner": {"reputation": 5359, "user_id": 582917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/98a347823cd1db90af884b227a29c29e?s=128&d=identicon&r=PG", "display_name": "CMCDragonkai", "link": "https://stackoverflow.com/users/582917/cmcdragonkai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 424, "favorite_count": 0, "accepted_answer_id": 36301278, "answer_count": 2, "score": 2, "last_activity_date": 1459341247, "creation_date": 1459318195, "last_edit_date": 1459341247, "question_id": 36300988, "link": "https://stackoverflow.com/questions/36300988/closure-trait-bounds-in-type-variables-versus-closure-trait-bounds-in-arguments", "title": "Closure Trait Bounds in Type Variables versus Closure Trait Bounds in Arguments on Higher Order Functions", "body": "<p>Why is that these 2 work:</p>\n\n<pre><code>fn apply_once1&lt;F: FnOnce(T1) -&gt; T2, T1, T2&gt; (f: F, x: T1) -&gt; T2 {\n    f(x)\n}\n\nfn apply_once2&lt;F, T1, T2&gt; (f: F, x: T1) -&gt; T2 \n    where F: FnOnce(T1) -&gt; T2 \n{\n    f(x)\n}\n</code></pre>\n\n<p>But this one doesn't compile:</p>\n\n<pre><code>fn apply_once3&lt;T1, T2&gt; (f: FnOnce(T1) -&gt; T2, x: T1) -&gt; T2 {\n    f(x)\n}\n</code></pre>\n\n<p>It complains of:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait `core::marker::Sized` is not implemented for the type `core::ops::FnOnce(T1) -&gt; T2 + 'static` [E0277]\n    once3&lt;T1, T2&gt; (f: FnOnce(T1) -&gt; T2, x: T1) -&gt; T2 {\n                   ^\nhelp: see the detailed explanation for E0277\nnote: `core::ops::FnOnce(T1) -&gt; T2 + 'static` does not have a constant size known at compile-time\nnote: all local variables must have a statically known size\n</code></pre>\n\n<p>I understand that <code>FnOnce</code> might not have statically known size, so normally I would fix that with <code>&amp;</code> swapping the variable for a reference instead, so the size is now known. But I don't understand why <code>apply_once1</code> and <code>apply_once2</code> can get away with it?</p>\n\n<p>Searching around, I can't find anything that talks about the difference between putting a trait bound on the argument versus putting it on the type variables.</p>\n"}, {"tags": ["rust", "parser-combinators"], "answers": [{"comments": [{"owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "edited": false, "score": 0, "creation_date": 1459351622, "post_id": 36309413, "comment_id": 60249759, "body": "Ah, I had misunderstood <code>recognize!</code>. Thank you!"}, {"owner": {"reputation": 15070, "user_id": 388427, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/a43a07bc90818154ff9c8d4af7c23502?s=128&d=identicon&r=PG", "display_name": "Sergey", "link": "https://stackoverflow.com/users/388427/sergey"}, "edited": false, "score": 0, "creation_date": 1476574681, "post_id": 36309413, "comment_id": 67404598, "body": "What if I have <code>&lt;&amp;str, &amp;str&gt;</code>, not <code>&lt;&amp;[u8], &amp;str&gt;</code>? I get <code>error: no method named `offset` found for type `&amp;str` in the current scope</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1459342229, "creation_date": 1459342229, "answer_id": 36309413, "question_id": 36300373, "link": "https://stackoverflow.com/questions/36300373/capture-the-entire-contiguous-matched-input-with-nom/36309413#36309413", "title": "Capture the entire contiguous matched input with nom", "body": "<p>It appears as if you want <a href=\"http://rust.unhandledexpression.com/nom/macro.recognize!.html\" rel=\"nofollow\"><code>recognized!</code></a>:</p>\n\n<blockquote>\n  <p>if the child parser was successful, return the consumed input as produced value</p>\n</blockquote>\n\n<p>And an example:</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nuse nom::IResult;\n\nfn main() {\n    assert_eq!(aaabccc(b\"aaabcccddd\"), IResult::Done(&amp;b\"ddd\"[..], \"aaabccc\"));\n}\n\nnamed!(aaabccc &lt;&amp;[u8], &amp;str&gt;,\n   map_res!(\n       recognize!(\n           chain!(\n               take_while!(is_a) ~\n               tag!(\"b\") ~\n               take_while!(is_c),\n               || {}\n           )\n       ),\n       std::str::from_utf8\n   )\n);\n\nfn is_a(l: u8) -&gt; bool {\n   match l {\n       b'a' =&gt; true,\n       _ =&gt; false,\n   }\n}\n\nfn is_c(l: u8) -&gt; bool {\n    match l {\n        b'c' =&gt; true,\n        _ =&gt; false,\n    }\n}\n</code></pre>\n\n<p>I'm not sure if <code>chain!</code> is the best way of combining sequential parsers if you don't care for the values, but it works in this case.</p>\n"}], "owner": {"reputation": 3471, "user_id": 314318, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/e0ed39dc4ab81e6c35f2681503b7c62a?s=128&d=identicon&r=PG", "display_name": "troutwine", "link": "https://stackoverflow.com/users/314318/troutwine"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 719, "favorite_count": 0, "accepted_answer_id": 36309413, "answer_count": 1, "score": 5, "last_activity_date": 1459342240, "creation_date": 1459315558, "last_edit_date": 1459342240, "question_id": 36300373, "link": "https://stackoverflow.com/questions/36300373/capture-the-entire-contiguous-matched-input-with-nom", "title": "Capture the entire contiguous matched input with nom", "body": "<p>I'm looking to apply a series of <a href=\"https://github.com/Geal/nom\" rel=\"nofollow\">nom</a> parsers and return the complete <code>&amp;str</code> that matches. I want to match strings of the form <code>a+bc+</code>. Using the existing <a href=\"http://rust.unhandledexpression.com/nom/macro.chain!.html\" rel=\"nofollow\"><code>chain!</code> macro</a> I can get pretty close:</p>\n\n<pre><code>named!(aaabccc &lt;&amp;[u8], &amp;str&gt;,\n   map_res!(\n       chain!(\n           a: take_while!(is_a) ~\n               tag!(\"b\") ~\n               take_while!(is_c) ,\n           || {a}\n           ),\n       from_utf8\n   ));\n</code></pre>\n\n<p>where</p>\n\n<pre><code>fn is_a(l: u8) -&gt; bool {\n   match l {\n       b'a' =&gt; true,\n       _ =&gt; false,\n   }\n}\n\nfn is_c(l: u8) -&gt; bool {\n    match l {\n        b'c' =&gt; true,\n        _ =&gt; false,\n    }\n}\n</code></pre>\n\n<p>Say we have 'aaabccc' as input. The above parser will match the input but only 'aaa' will be returned. What I would like to do is return 'aaabccc', the original input. </p>\n\n<p><code>chain!</code> is not the right macro for this, but there was not another that seemed more correct. What would the best way to do this be? </p>\n\n<hr>\n\n<p>At the time of this writing I'm using nom <code>1.2.2</code> and rustc <code>1.9.0-nightly (a1e29daf1 2016-03-25)</code>.</p>\n"}, {"tags": ["memory-management", "types", "rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1459297460, "post_id": 36297464, "comment_id": 60219640, "body": "I am not very well-versed in algorithms for longest common subsequence, but it surprises me that you had to copy a <code>T</code>. You can take references to any particular element of the slice and take any sub-slice as you want, shouldn&#39;t that be enough?"}, {"owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "edited": false, "score": 0, "creation_date": 1459299383, "post_id": 36297464, "comment_id": 60220115, "body": "@delnan It was this particular bit of code that did it, when I tried to push seq1[i] onto the return vector... any thoughts would be super helpful!!        let mut q = *backtrack_with_index(c,seq1,seq2,i-1,j-1);       q.push((seq1[i], i));       Box::new(q)"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1459299792, "post_id": 36297464, "comment_id": 60220215, "body": "<code>&amp;seq1[i]</code> will give you a reference. You will have to change the type of the vector, of course. Also, general advice: Don&#39;t use <code>Box&lt;T&gt;</code> when <code>T</code> works (and it works almost always except for trait objects and recursive types). It&#39;s just unnecessary clutter and indirection. For <code>T: Sized</code>, for purposes of ownership, borrow checking, moves, etc., <code>Box&lt;T&gt;</code> is exactly equivalent to <code>T</code>. I am 90% sure that you don&#39;t need a single Box anywhere in this algorithm."}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1459326622, "post_id": 36297464, "comment_id": 60230864, "body": "Can you more clearly specify what you want to call your algorithm on, and more importantly what you want it to return?"}, {"owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1459371258, "post_id": 36297464, "comment_id": 60262342, "body": "@SebastianRedl The algorithm would be called on a large dataset, hence the preference to use pointers instead of moving around the actual (quite large) objects. Think of my goal as making a simple &quot;service&quot;: a request is asynchronously received, processed by this algorithm, and then its response rendered to (say) JSON and pushed back over the wire. In this case, what are the best practices?"}], "owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 94, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1459321353, "creation_date": 1459297230, "last_edit_date": 1459298256, "question_id": 36297464, "link": "https://stackoverflow.com/questions/36297464/when-to-use-references-versus-types-versus-boxes-and-slices-versus-vectors-as-ar", "title": "When to use references versus types versus boxes and slices versus vectors as arguments and return types?", "body": "<p>I've been working with Rust the past few days to build a new library (related to abstract algebra) and I'm struggling with some of the best practices of the language. For example, I implemented a longest common subsequence function taking <code>&amp;[&amp;T]</code> for the sequences. I figured this was Rust convention, as it avoided copying the data (<code>T</code>, which may not be easily copy-able, or may be big). When changing my algorithm to work with simpler <code>&amp;[T]</code>'s, which I needed elsewhere in my code, I was forced to put the <code>Copy</code> type constraint in, since it needed to copy the <code>T</code>'s and not just copy a reference.</p>\n\n<p>So my higher-level question is: what are the best-practices for passing data between threads and structures in long-running processes, such as a server that responds to queries requiring big data crunching? Any specificity at all would be extremely helpful as I've found very little. Do you generally want to pass parameters by reference? Do you generally want to avoid returning references as I read in the Rust book? Is it better to work with <code>&amp;[&amp;T]</code> or <code>&amp;[T]</code> or <code>Vec&lt;T&gt;</code> or <code>Vec&lt;&amp;T&gt;</code>, and why? Is it better to return a <code>Box&lt;T&gt;</code> or a <code>T</code>? I realize the word \"better\" here is considerably ill-defined, but hope you'll understand my meaning -- what pitfalls should I consider when defining functions and structures to avoid realizing my stupidity later and having to refactor everything?</p>\n\n<p>Perhaps another way to put it is, what \"algorithm\" should my brain follow to determine where I should use references vs. boxes vs. plain types, as well as slices vs. arrays vs. vectors? I hesitate to start using references and <code>Box&lt;T&gt;</code> returns everywhere, as I think that'd get me a sort of \"Java in Rust\" effect, and that's not what I'm going for!</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1459317679, "post_id": 36297596, "comment_id": 60225907, "body": "Why isn&#39;t <code>#[derive(PartialEq)]</code> implemented?"}, {"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1459333649, "post_id": 36297596, "comment_id": 60235860, "body": "@starblue What do you mean? As far as I know, <code>#[derive(PartialEq)]</code> produces LLVM directly from the compiler, so there is no Rust code to inspect. I wanted to create an impl that produces the same output, as much as possible, as a base for modification."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 5, "creation_date": 1459361776, "post_id": 36297596, "comment_id": 60256524, "body": "It produces rust code, you just don&#39;t see it because it happens during compilation, rather than being in the source."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 39, "last_activity_date": 1550595598, "last_edit_date": 1550595598, "creation_date": 1459298149, "answer_id": 36297596, "question_id": 36297412, "link": "https://stackoverflow.com/questions/36297412/how-to-implement-partialeq-for-an-enum/36297596#36297596", "title": "How to implement PartialEq for an enum?", "body": "<p>Normally, you would just use <code>#[derive(PartialEq)]</code>, like so:</p>\n\n<pre><code>#[derive(PartialEq)]\nenum Either&lt;T, U&gt; {\n    Left(T),\n    Right(U),\n}\n</code></pre>\n\n<p>This will generate the code to implement the trait for you. <a href=\"https://doc.rust-lang.org/book/appendix-03-derivable-traits.html#partialeq-and-eq-for-equality-comparisons\" rel=\"noreferrer\"><em>The Rust Programming Language</em> describes the implementation details</a>.</p>\n\n<hr>\n\n<p>Sometimes, you want to implement the trait directly. This may be because the default version is either too specific or too generic.</p>\n\n<p>The error in your case is that you you need to pattern match the references instead of trying to dereference them:</p>\n\n<pre><code>impl&lt;T: PartialEq, U: PartialEq&gt; PartialEq for Either&lt;T, U&gt; {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        use Either::*;\n\n        match (self, other) {\n            (&amp;Left(ref a), &amp;Left(ref b)) =&gt; a == b,\n            (&amp;Right(ref a), &amp;Right(ref b)) =&gt; a == b,\n            _ =&gt; false,\n        }\n    }\n}\n</code></pre>\n\n<p>When you create a tuple, you would be moving the dereferenced item into the tuple, giving up ownership. When you have a <code>match *foo</code>, you don't have to give up the ownership.</p>\n\n<p>In modern Rust, you can write the same thing with less noise because more implicit referencing / dereferencing occurs when pattern matching:</p>\n\n<pre><code>impl&lt;T: PartialEq, U: PartialEq&gt; PartialEq for Either&lt;T, U&gt; {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        use Either::*;\n        match (self, other) {\n            (Left(a), Left(b)) =&gt; a == b,\n            (Right(a), Right(b)) =&gt; a == b,\n            _ =&gt; false,\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15119, "favorite_count": 0, "accepted_answer_id": 36297596, "answer_count": 1, "score": 23, "last_activity_date": 1550595598, "creation_date": 1459296877, "last_edit_date": 1550595421, "question_id": 36297412, "link": "https://stackoverflow.com/questions/36297412/how-to-implement-partialeq-for-an-enum", "title": "How to implement PartialEq for an enum?", "body": "<p>I have the following definition:</p>\n\n<pre><code>enum Either&lt;T, U&gt; {\n    Left(T),\n    Right(U),\n}\n</code></pre>\n\n<p>How would I get the equivalent of <code>#[derive(PartialEq)]</code> for this type? I would like to use a <code>match</code> expression, like:</p>\n\n<pre><code>impl&lt;T: PartialEq, U: PartialEq&gt; PartialEq for Either&lt;T, U&gt; {\n    fn eq(&amp;self, other: &amp;Either&lt;T, U&gt;) -&gt; bool {\n        use Either::*;\n        match (*self, *other) {\n            (Left(ref a), Left(ref b)) =&gt; a == b,\n            (Right(ref a), Right(ref b)) =&gt; a == b,\n            _ =&gt; false,\n        }\n    }\n}\n</code></pre>\n\n<p>This consumes both <code>*self</code> and <code>*other</code>, even though I only need it for the <code>match</code> expression, causing the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/lib.rs:9:16\n  |\n9 |         match (*self, *other) {\n  |                ^^^^^ cannot move out of borrowed content\n\nerror[E0507]: cannot move out of borrowed content\n --&gt; src/lib.rs:9:23\n  |\n9 |         match (*self, *other) {\n  |                       ^^^^^^ cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["rust", "stdin", "rust-cargo"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1459288417, "post_id": 36295576, "comment_id": 60216590, "body": "Can\u2019t reproduce on nightly from a week ago, updating to confirm\u2026"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1459289552, "post_id": 36295576, "comment_id": 60217068, "body": "Still can\u2019t reproduce with latest nightly, using <code>rustc</code> or <code>rustc -O</code>."}, {"owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1459289603, "post_id": 36295576, "comment_id": 60217087, "body": "@ChrisMorgan Okay it is working fine when I use <code>rustc</code> but not when I use <code>cargo run</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459294880, "post_id": 36295576, "comment_id": 60218898, "body": "Please <a href=\"https://stackoverflow.com/posts/36295576/edit\">edit</a> your question to include the version of cargo that you are using: <code>cargo --version</code>."}], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 1, "last_activity_date": 1459297995, "creation_date": 1459297995, "answer_id": 36297570, "question_id": 36295576, "link": "https://stackoverflow.com/questions/36295576/reading-from-stdin-reads-no-data-when-run-with-cargo-run-and-rust-1-9-nightly/36297570#36297570", "title": "Reading from stdin reads no data when run with `cargo run` and Rust 1.9 nightly", "body": "<p>This bug was just filed: <a href=\"https://github.com/rust-lang/cargo/issues/2530\" rel=\"nofollow\">https://github.com/rust-lang/cargo/issues/2530</a></p>\n\n<p>Seems like the same issue. Probably a bug.</p>\n"}], "owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 479, "favorite_count": 0, "accepted_answer_id": 36297570, "answer_count": 1, "score": 2, "last_activity_date": 1459359093, "creation_date": 1459287506, "last_edit_date": 1459359093, "question_id": 36295576, "link": "https://stackoverflow.com/questions/36295576/reading-from-stdin-reads-no-data-when-run-with-cargo-run-and-rust-1-9-nightly", "title": "Reading from stdin reads no data when run with `cargo run` and Rust 1.9 nightly", "body": "<p>Update: This seems to be a cargo bug. See the answer link for more details.</p>\n\n<p>I upgraded from Rust 1.6 to 1.9 in order to use a package. However, the terminal no longer waits for input when reading from standard input. This issue seems to only be with <code>cargo run</code> (cargo 0.10.0-nightly (25e1301 2016-03-25)); everything works fine when I run the binary file directly.</p>\n\n<p>I am using almost the same example as the one given on the <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html\" rel=\"nofollow\">documentation for <code>Stdin</code></a>:</p>\n\n<pre><code>use std::io;\n\nlet mut input = String::new();\nmatch io::stdin().read_line(&amp;mut input) {\n    Ok(n) =&gt; {\n        println!(\"{} bytes read\", n);\n        println!(\"{}\", input);\n    }\n    Err(error) =&gt; println!(\"error: {}\", error),\n}\n</code></pre>\n\n<p>Running this example with <code>cargo run</code> prints <code>0 bytes read</code>.</p>\n\n<p>I have both the 1.6 and 1.9 compiler on my computer and the code works with  1.6 just fine. I tried using 1.9 on both Windows and Linux with the same results. </p>\n\n<p>Why is this happening and how should stdin be handled in Rust 1.9?</p>\n"}, {"tags": ["rust", "iron"], "comments": [{"owner": {"reputation": 3059, "user_id": 1242944, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/Kyln0.jpg?s=128&g=1", "display_name": "Tommi", "link": "https://stackoverflow.com/users/1242944/tommi"}, "edited": false, "score": 1, "creation_date": 1459270705, "post_id": 36290284, "comment_id": 60206405, "body": "Also it would be awesome if the guy who clicked downvote will explain what exactly I did wrong when created this question."}], "answers": [{"comments": [{"owner": {"reputation": 3059, "user_id": 1242944, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/Kyln0.jpg?s=128&g=1", "display_name": "Tommi", "link": "https://stackoverflow.com/users/1242944/tommi"}, "edited": false, "score": 0, "creation_date": 1459273203, "post_id": 36291098, "comment_id": 60207895, "body": "Thank you, it works. Actually it was exactly what I wanted to do, but for unknown reason I did <code>res: &amp;mut Response</code> instead, and this, obviously, is illegal. My understanding of Rust syntax is a big mess for now because I tried to read too much info in a short time period."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1459301053, "post_id": 36291098, "comment_id": 60220530, "body": "The left hand side of an argument in a function declaration is a pattern, so just like <code>let mut res = \u2026</code> would work to make a mutable binding, <code>mut res</code> works to make a mutable binding."}, {"owner": {"reputation": 1279, "user_id": 5130134, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/uNgFI.png?s=128&g=1", "display_name": "NotBad4U", "link": "https://stackoverflow.com/users/5130134/notbad4u"}, "edited": false, "score": 1, "creation_date": 1488364230, "post_id": 36291098, "comment_id": 72194305, "body": "Instead of use Hyper dependecie, you can do it like that:   <code>use iron::headers::{ AccessControlAllowOrigin }; </code>          <code>res.headers.set(AccessControlAllowOrigin::Any); </code>"}], "tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": true, "score": 4, "last_activity_date": 1459272493, "creation_date": 1459272493, "answer_id": 36291098, "question_id": 36290284, "link": "https://stackoverflow.com/questions/36290284/how-to-add-a-header-in-irons-aftermiddleware/36291098#36291098", "title": "How to add a header in Iron&#39;s AfterMiddleware?", "body": "<p>Simplest solution</p>\n\n<blockquote>\n  <p>use <code>mut</code> variable</p>\n</blockquote>\n\n<pre><code>struct CorsMiddleware;\n\nimpl AfterMiddleware for CorsMiddleware {\n    fn after(&amp;self, req: &amp;mut Request, mut res: Response) -&gt; IronResult&lt;Response&gt; {\n        res.headers.set(hyper::header::AccessControlAllowOrigin::Any);\n        Ok(res)\n    }\n}\n</code></pre>\n\n<p>In Rust when you are the owner of data you can do anything with them, so this should solve your problem.</p>\n"}], "owner": {"reputation": 3059, "user_id": 1242944, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/Kyln0.jpg?s=128&g=1", "display_name": "Tommi", "link": "https://stackoverflow.com/users/1242944/tommi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 765, "favorite_count": 0, "accepted_answer_id": 36291098, "answer_count": 1, "score": 2, "last_activity_date": 1459272529, "creation_date": 1459269910, "last_edit_date": 1459272015, "question_id": 36290284, "link": "https://stackoverflow.com/questions/36290284/how-to-add-a-header-in-irons-aftermiddleware", "title": "How to add a header in Iron&#39;s AfterMiddleware?", "body": "<p>I want to add <code>Access-Control-Allow-Origin: *</code> for every response my app will make.</p>\n\n<p>According to <a href=\"http://ironframework.io/doc/iron/middleware/trait.AfterMiddleware.html\" rel=\"nofollow\">the docs</a>, <code>AfterMiddleware</code> is exactly for this </p>\n\n<blockquote>\n  <p>In the common case, a complete response is generated by the Chain's Handler and AfterMiddleware simply do post-processing of that Response, such as <strong>adding headers</strong> or logging.</p>\n</blockquote>\n\n<p>So I tried to use this like:</p>\n\n<pre><code>struct CorsMiddleware;\n\nimpl AfterMiddleware for CorsMiddleware {\n    fn after(&amp;self, req: &amp;mut Request, res: Response) -&gt; IronResult&lt;Response&gt; {\n        res.headers.set(hyper::header::AccessControlAllowOrigin::Any);\n        Ok(res)\n    }\n}\n</code></pre>\n\n<p>But I get the error <code>cannot borrow immutable field \"res.headers\" as mutable</code>. I'm not sure if this caused by immutable <code>Response</code> variable type, but as this is the trait function signature, I can't change it. So, how am I supposed to mutate something immutable? It would be weird to copy the whole response just to add one header, if that's even possible.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459271885, "post_id": 36286630, "comment_id": 60207102, "body": "<i>And if it&#39;s not the same then what&#39;s the difference?</i> \u2014 <a href=\"http://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type\">When is it appropriate to use an associated type versus a generic type?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 5, "last_activity_date": 1459260949, "creation_date": 1459260949, "answer_id": 36286952, "question_id": 36286630, "link": "https://stackoverflow.com/questions/36286630/what-does-type-item-in-the-iterator-trait-mean/36286952#36286952", "title": "What does `type Item` in the `Iterator` trait mean", "body": "<p><strong>TL;DR</strong>: The <code>type Item;</code> in <code>Iterator</code> is an <em>associated</em> type.</p>\n\n<hr>\n\n<p>Rust generics have both Input and Output types:</p>\n\n<ul>\n<li>Input types are those specified in the declaration of the trait (<code>trait X&lt;T, U&gt;</code> has <code>T</code> and <code>U</code> as input types) plus <code>Self</code> (the concrete type for which the trait is being implemented)</li>\n<li>Output types are those specified in the definition of the trait via <code>type X;</code></li>\n</ul>\n\n<p>The RFC that introduced associated items is <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md\" rel=\"noreferrer\">RFC 195: Associated Items</a>. Specifically, its <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0195-associated-items.md#motivation\" rel=\"noreferrer\">motivation</a> section cites the benefits of having associated traits.</p>\n\n<p>For me, the most important point is <strong>unicity</strong>: a single type is defined for any given implementation of the trait, which allows cleanly powering the <code>Deref</code> or <code>Index</code> trait for example. In a world where <code>Deref</code> or <code>Index</code> could yield many possible types, type inference would be even more complicated.</p>\n"}], "owner": {"reputation": 739, "user_id": 845762, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/da8c63db24d7e098f7b06185e8d1dbbb?s=128&d=identicon&r=PG", "display_name": "xudifsd", "link": "https://stackoverflow.com/users/845762/xudifsd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 508, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1459271900, "creation_date": 1459260118, "last_edit_date": 1459271900, "question_id": 36286630, "link": "https://stackoverflow.com/questions/36286630/what-does-type-item-in-the-iterator-trait-mean", "title": "What does `type Item` in the `Iterator` trait mean", "body": "<p>The <code>Iterator</code> trait is defined as follows:</p>\n\n<pre><code>pub trait Iterator {\n    type Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n</code></pre>\n\n<p>What does <code>type Item;</code> mean? And how to call it?</p>\n\n<p>Is the definition above equivalent to this one?</p>\n\n<pre><code>pub trait Iterator&lt;T&gt; {\n    fn next(&amp;mut self) -&gt; Option&lt;T&gt;;\n}\n</code></pre>\n\n<p>If it's the same why declare it that way? And if it's not the same then what's the difference?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1459258208, "creation_date": 1459258208, "answer_id": 36285793, "question_id": 36285396, "link": "https://stackoverflow.com/questions/36285396/whats-the-alternative-to-u32bits-in-a-const/36285793#36285793", "title": "What&#39;s the alternative to u32::BITS in a const?", "body": "<p>The general answer is to define your own constant:</p>\n\n<pre><code>const U32_BITS: usize = 32;\n</code></pre>\n\n<p>for the special case of <code>usize::BITS</code> or <code>isize::BITS</code>, you will need to use conditional compilation.</p>\n\n<pre><code>#[cfg(target_pointer_width = \"32\")]\nconst USIZE_BITS: usize = 32;\n#[cfg(target_pointer_width = \"64\")]\nconst USIZE_BITS: usize = 64;\n</code></pre>\n"}], "owner": {"reputation": 9885, "user_id": 1039947, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/eYRpr.png?s=128&g=1", "display_name": "kmp", "link": "https://stackoverflow.com/users/1039947/kmp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "accepted_answer_id": 36285793, "answer_count": 1, "score": 4, "last_activity_date": 1459258208, "creation_date": 1459257304, "last_edit_date": 1459257992, "question_id": 36285396, "link": "https://stackoverflow.com/questions/36285396/whats-the-alternative-to-u32bits-in-a-const", "title": "What&#39;s the alternative to u32::BITS in a const?", "body": "<p>I have a bit of code that does this:</p>\n\n<pre><code>const MY_CRAZY_CONSTANT: u32 = 1 &lt;&lt; (u32::BITS - 1); \n</code></pre>\n\n<p>I tried to compile it using Rust nightly (2016-03-29) and it fails with the message:</p>\n\n<pre><code>error: no associated item named `BITS` found for type `u32` in the current scope\n</code></pre>\n\n<p>I see that it was deprecated and I see there was an RFC (<a href=\"https://github.com/rust-lang/rfcs/pull/591\" rel=\"nofollow\">Sizeof, alignof, offsetof, typeof #591</a>) talking about adding a sizeof keyword etc, but that is closed: postponed.</p>\n\n<p>I guess the deprecation has come to fruition in the nightly channel in that it has been removed and I know I can do the following, but to do that I would need to remove my const, which I would rather not do.</p>\n\n<pre><code>mem::size_of::&lt;u32&gt;() * 8\n</code></pre>\n\n<p>So, is it now the case that I must remove my const and re-structure my code or is there some other way to achieve what I had originally?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 4762509, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9a05352b9f269d1f752794094dfb082?s=128&d=identicon&r=PG&f=1", "display_name": "seb_odessa", "link": "https://stackoverflow.com/users/4762509/seb-odessa"}, "edited": false, "score": 0, "creation_date": 1459259235, "post_id": 36285373, "comment_id": 60198154, "body": "Thanks a lot, this works on simplified example. I will try to applay to real and I will update if this approach will fail."}], "tags": [], "owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "is_accepted": false, "score": 2, "last_activity_date": 1459257241, "creation_date": 1459257241, "answer_id": 36285373, "question_id": 36285157, "link": "https://stackoverflow.com/questions/36285157/how-to-declare-that-the-methods-argument-implements-specific-trait/36285373#36285373", "title": "How to declare that the method&#39;s argument implements specific trait", "body": "<p>Your <code>name</code> method needs a <code>self</code> parameter:</p>\n\n<pre><code>pub trait HasName {\n    fn name(&amp;self) -&gt; String;\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1459257251, "creation_date": 1459257251, "answer_id": 36285377, "question_id": 36285157, "link": "https://stackoverflow.com/questions/36285157/how-to-declare-that-the-methods-argument-implements-specific-trait/36285377#36285377", "title": "How to declare that the method&#39;s argument implements specific trait", "body": "<p>Because you have defined an <em>associated function</em>, not a method \u2014 there is no <code>self</code> parameter.</p>\n\n<p>Either you want</p>\n\n<pre><code>fn run(arg: T) {\n    println!(\"{}\", T::name());\n} \n</code></pre>\n\n<p>or you want</p>\n\n<pre><code>trait HasName {\n    fn name(&amp;self) -&gt; String;\n}\n</code></pre>\n\n<p>Both are valid concepts representing different things. For example, an associated function would be useful for constructors. The <a href=\"http://doc.rust-lang.org/std/default/trait.Default.html\"><code>Default</code> trait</a> is a good example of this.</p>\n"}], "owner": {"reputation": 61, "user_id": 4762509, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c9a05352b9f269d1f752794094dfb082?s=128&d=identicon&r=PG&f=1", "display_name": "seb_odessa", "link": "https://stackoverflow.com/users/4762509/seb-odessa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 1, "answer_count": 2, "score": 2, "last_activity_date": 1459257251, "creation_date": 1459256739, "last_edit_date": 1459257098, "question_id": 36285157, "link": "https://stackoverflow.com/questions/36285157/how-to-declare-that-the-methods-argument-implements-specific-trait", "title": "How to declare that the method&#39;s argument implements specific trait", "body": "<p>Can't understand that I am doing wrong:</p>\n\n<pre><code>pub trait HasName {\n    fn name() -&gt; String;\n}\n\npub struct WorkerHandler&lt;T: HasName&gt; {\n    arg: T,\n}\n\nimpl&lt;T: HasName&gt; WorkerHandler&lt;T&gt; {\n    pub fn run(arg: T) {\n        println!(\"{}\", arg.name());\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>This causes the error:</p>\n\n<pre><code>error: no method named `name` found for type `T` in the current scope\n         println!(\"{}\", arg.name());\n                            ^~~~~~\n</code></pre>\n\n<p>The real case is a bit more complex, but I wish to explain to <code>run</code> that <code>T</code> implements <code>HasName</code> trait.</p>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459257904, "post_id": 36285577, "comment_id": 60197129, "body": "Interesting. The error message is not very useful here, I wonder if that can be improved."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 2, "last_activity_date": 1459257862, "last_edit_date": 1459257862, "creation_date": 1459257712, "answer_id": 36285577, "question_id": 36284637, "link": "https://stackoverflow.com/questions/36284637/how-do-i-write-a-function-that-can-compose-fnmut-closures/36285577#36285577", "title": "How do I write a function that can compose `FnMut` closures?", "body": "<p>Local variables <code>f</code> and <code>g</code> must be mutable:</p>\n\n<pre><code>fn compose&lt;'a, T1, T2, T3, F1, F2&gt;(mut f: F1, mut g: F2) -&gt; Box&lt;FnMut(T1) -&gt; T3 + 'a&gt;\n    where F1: FnMut(T1) -&gt; T2 + 'a,\n          F2: FnMut(T2) -&gt; T3 + 'a\n{\n    Box::new(move |x| g(f(x)))\n}\n</code></pre>\n"}], "owner": {"reputation": 5359, "user_id": 582917, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/98a347823cd1db90af884b227a29c29e?s=128&d=identicon&r=PG", "display_name": "CMCDragonkai", "link": "https://stackoverflow.com/users/582917/cmcdragonkai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 354, "favorite_count": 0, "accepted_answer_id": 36285577, "answer_count": 1, "score": 0, "last_activity_date": 1459257862, "creation_date": 1459255403, "last_edit_date": 1459257468, "question_id": 36284637, "link": "https://stackoverflow.com/questions/36284637/how-do-i-write-a-function-that-can-compose-fnmut-closures", "title": "How do I write a function that can compose `FnMut` closures?", "body": "<p>Here's a <code>compose</code> function that can compose <code>Fn</code> closures:</p>\n\n<pre><code>fn compose&lt;'a, T1, T2, T3, F1, F2&gt;(f: F1, g: F2) -&gt; Box&lt;Fn(T1) -&gt; T3 + 'a&gt;\n    where F1: Fn(T1) -&gt; T2 + 'a,\n          F2: Fn(T2) -&gt; T3 + 'a\n{\n    box move |x| g(f(x))\n}\n</code></pre>\n\n<p>How do I make it so that this compose function can take <code>FnMut</code> closures? I tried:</p>\n\n<pre><code>fn compose&lt;'a, T1, T2, T3, F1, F2&gt;(f: F1, g: F2) -&gt; Box&lt;FnMut(T1) -&gt; T3 + 'a&gt;\n    where F1: FnMut(T1) -&gt; T2 + 'a,\n          F2: FnMut(T2) -&gt; T3 + 'a\n{\n    box move |x| g(f(x))\n}\n</code></pre>\n\n<p>But it complains about: </p>\n\n<pre><code>error: cannot borrow captured outer variable in an `FnMut` closure as mutable\n         box move |x| g(f(x))\n                      ^\nerror: cannot borrow captured outer variable in an `FnMut` closure as mutable\n         box move |x| g(f(x))\n                        ^\n</code></pre>\n\n<p>Extending this, can it be made to work with <code>FnOnce</code> closures?</p>\n"}, {"tags": ["rust", "ownership", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459273147, "post_id": 36281585, "comment_id": 60207860, "body": "Hint: What would happen to your <code>nodes</code> iterator if inserting into <code>node</code> via <code>entry</code> had to reallocate the storage? Additionally, should the newly-inserted node be included in the iterator or not?"}], "answers": [{"comments": [{"owner": {"reputation": 45996, "user_id": 164171, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/dec2e1cd575b184c3695fe6d18a24638?s=128&d=identicon&r=PG", "display_name": "static_rtti", "link": "https://stackoverflow.com/users/164171/static-rtti"}, "edited": false, "score": 0, "creation_date": 1585309165, "post_id": 36292031, "comment_id": 107720097, "body": "Is this still true? Sounds like a major limitation for a high-performance language such as Rust..."}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 3, "last_activity_date": 1459275587, "last_edit_date": 1459275587, "creation_date": 1459275239, "answer_id": 36292031, "question_id": 36281585, "link": "https://stackoverflow.com/questions/36281585/how-can-a-nested-loop-with-mutations-on-a-hashmap-be-achieved-in-rust/36292031#36292031", "title": "How can a nested loop with mutations on a HashMap be achieved in Rust?", "body": "<p>You can't insert or delete elements in a data structure while you are iterating over it.</p>\n\n<p>As far as I know Rust iterators don't support modification either (like Java iterators' <code>remove()</code>).</p>\n\n<p>So you are left with these options:</p>\n\n<ul>\n<li><p>If there are only a few modifications, you can collect them and execute them after the iteration is finished.</p></li>\n<li><p>If most of the data structure is modified, or if it is small enough that the overhead of copying doesn't matter, you can create a new, modified data structure that replaces the original one after the iteration. This is usually the idiomatic solution, using higher-order functions on iterators like <code>map</code>, <code>flat_map</code> or <code>filter</code>.</p></li>\n</ul>\n"}], "owner": {"reputation": 85, "user_id": 5785325, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/763660a76ab272d7a7008b519052559d?s=128&d=identicon&r=PG&f=1", "display_name": "Pascalito", "link": "https://stackoverflow.com/users/5785325/pascalito"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 655, "favorite_count": 0, "accepted_answer_id": 36292031, "answer_count": 1, "score": 5, "last_activity_date": 1459275587, "creation_date": 1459246956, "last_edit_date": 1459257775, "question_id": 36281585, "link": "https://stackoverflow.com/questions/36281585/how-can-a-nested-loop-with-mutations-on-a-hashmap-be-achieved-in-rust", "title": "How can a nested loop with mutations on a HashMap be achieved in Rust?", "body": "<p>I have the following (trimmed down) Rust code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct Node {\n    weight:   f64,\n    outbound: f64,\n}\n\nstruct Graph {\n    edges: HashMap&lt;u32, HashMap&lt;u32, f64&gt;&gt;,\n    nodes: HashMap&lt;u32, Node&gt;,\n}\n\nimpl Graph {\n    fn mutate(&amp;mut self) {\n        for (key, value) in self.nodes.iter() {\n            if self.edges.contains_key(key) {\n                for (target, weight) in self.edges[key].iter() {\n                    self.nodes.entry(*target).or_insert(Node::new()).weight;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>However, I cannot get the code to compile due to Rust ownership rules (<a href=\"https://play.rust-lang.org/?gist=4ef99860a4b9c195a057&amp;version=stable\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>graph.rs:88:25: 88:35 error: cannot borrow `self.nodes` as mutable because it is also borrowed as immutable [E0502]\ngraph.rs:88                         self.nodes.entry(*target).or_insert(Node::new()).weight;\n                                    ^~~~~~~~~~\n</code></pre>\n\n<p>If I change the first loop to use <code>HashMap::iter_mut()</code> instead, I get a different error (<a href=\"https://play.rust-lang.org/?gist=754af4806b7ffc10fa2f&amp;version=stable\" rel=\"nofollow\">playground</a>):</p>\n\n<pre><code>graph.rs:88:25: 88:35 error: cannot borrow `self.nodes` as mutable more than once at a time [E0499]\ngraph.rs:88                         self.nodes.entry(*target).or_insert(Node::new()).weight;\n                                    ^~~~~~~~~~\n</code></pre>\n\n<p>How can this kind of nested loop with mutations be achieved in Rust?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "is_accepted": true, "score": 0, "last_activity_date": 1459282729, "last_edit_date": 1459282729, "creation_date": 1459280723, "answer_id": 36293746, "question_id": 36279582, "link": "https://stackoverflow.com/questions/36279582/how-to-iteratively-search-and-remove-from-a-list-when-not-using-the-standard-lib/36293746#36293746", "title": "How to iteratively search and remove from a list when not using the standard library", "body": "<p>I got a recursive version working (pasted here for reference for others) but can someone help me convert it to be iterative: I'd rather not be limited by the stack size, if possible.</p>\n\n<pre><code>// This code is placed in the public domain\nstruct Node&lt;'a&gt; {\n    val : i32,\n    next : Option&lt;&amp;'a mut Node&lt;'a&gt; &gt;,\n}\nstruct List&lt;'a&gt; {\n    glob : Option&lt;&amp;'a mut Node&lt;'a&gt; &gt;,\n}\n\n\nstruct AllocatedList&lt;'a&gt; {\n   el0 : Node&lt;'a&gt;,\n   el1 : Node&lt;'a&gt;,\n   el2 : Node&lt;'a&gt;,\n   el3 : Node&lt;'a&gt;,\n   el4 : Node&lt;'a&gt;,\n   el5 : Node&lt;'a&gt;,\n   el6 : Node&lt;'a&gt;,\n   el7 : Node&lt;'a&gt;,\n   sentinel : Node&lt;'a&gt;,\n   list : List&lt;'a&gt;,\n}\n  fn remove_cur&lt;'a&gt;(mut iter : &amp;mut Option&lt;&amp;mut Node&lt;'a&gt; &gt;) -&gt; &amp;'a mut Node&lt;'a&gt; {\n      match *iter {\n        Some(ref mut glob_next) =&gt; {\n             let rest : Option&lt;&amp;'a mut Node &lt;'a&gt; &gt;;\n             match glob_next.next {\n                 Some(ref mut root_cell) =&gt; {\n                    rest = std::mem::replace(&amp;mut root_cell.next, None);\n                 },\n                 None =&gt; rest = None,\n             }\n             match std::mem::replace(&amp;mut glob_next.next, rest) {\n                Some(mut root_cell) =&gt;\n                {\n                   return root_cell;\n                },\n                None =&gt; panic!(\"Empty list\"),\n             }\n        },\n        None =&gt; panic!(\"List not initialized\"),\n     }\n  }\n\n  fn remove_search_recursive&lt;'a&gt; (mut node : &amp;mut Option&lt;&amp;mut Node &lt;'a&gt; &gt;, searched:i32) -&gt; &amp;'a mut Node&lt;'a&gt; {\n    let mut found : bool = false;\n    {\n        match *node {\n            Some(ref mut cur_cell) =&gt; {\n                match cur_cell.next {\n                    Some(ref item) =&gt; {\n                        if item.val == searched {\n                               found = true;\n                        }\n                    },\n                    None =&gt; panic!(\"Not found\"),\n                 }\n                 if !found {\n                    return remove_search_recursive(&amp;mut cur_cell.next, searched);\n                 }\n            },\n            None =&gt; panic!(\"Not impl\"),\n        }\n    }\n    if found {\n       return remove_cur(node);\n    }\n    panic!(\"Not impl\");\n }\n\nimpl&lt;'a&gt; List&lt;'a&gt; {\n  fn remove_first(self : &amp;mut List&lt;'a&gt;) -&gt; &amp;'a mut Node&lt;'a&gt; {\n      return remove_cur(&amp;mut self.glob);\n  }\n  fn remove_search_recursive(self : &amp;mut List&lt;'a&gt;, searched:i32) -&gt; &amp;'a mut Node&lt;'a&gt; {\n     return remove_search_recursive(&amp;mut self.glob, searched);\n  }\n}\nfn main() {\n    let mut a : AllocatedList = AllocatedList{\n        el0 : Node{val : 0, next : None},\n        el1 : Node{val : 1, next : None},\n        el2 : Node{val : 2, next : None},\n        el3 : Node{val : 3, next : None},\n        el4 : Node{val : 4, next : None},\n        el5 : Node{val : 5, next : None},\n        el6 : Node{val : 6, next : None},\n        el7 : Node{val : 7, next : None},\n        sentinel : Node {val : -1, next : None},\n        list : List{glob:None},\n    };\n    a.el6.next = Some(&amp;mut a.el7);\n    a.el5.next = Some(&amp;mut a.el6);\n    a.el4.next = Some(&amp;mut a.el5);\n    a.el3.next = Some(&amp;mut a.el4);\n    a.el2.next = Some(&amp;mut a.el3);\n    a.el1.next = Some(&amp;mut a.el2);\n    a.el0.next = Some(&amp;mut a.el1);\n    a.sentinel.next = Some(&amp;mut a.el0);\n    a.list.glob = Some(&amp;mut a.sentinel);\n    let removed_el = a.list.remove_first();\n    println!(\"Removed {:?}\", removed_el.val);\n    let removed_el = a.list.remove_first();\n    println!(\"Removed {:?}\", removed_el.val);\n\n    let removed_x = a.list.remove_search_recursive(5);\n    println!(\"Removed {:?}\", removed_x.val);\n    let removed_y = a.list.remove_search_recursive(3);\n    println!(\"Removed {:?}\", removed_y.val);\n}\n</code></pre>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 36293746, "answer_count": 1, "score": 1, "last_activity_date": 1459282747, "creation_date": 1459241557, "last_edit_date": 1459282747, "question_id": 36279582, "link": "https://stackoverflow.com/questions/36279582/how-to-iteratively-search-and-remove-from-a-list-when-not-using-the-standard-lib", "title": "How to iteratively search and remove from a list when not using the standard library", "body": "<p>I'm trying to write a simple loop without recursion to traverse through a Rust list (first node is a sentinel) and remove an element (not the sentinel) from it.</p>\n\n<p>I've managed to successfully write a <code>remove_first</code> function that works on its own, but trying to iterate through the list is causing me issues with the borrow checker:</p>\n\n<p>Here's the program:</p>\n\n<pre><code>// This code is placed in the public domain\nstruct Node&lt;'a&gt; {\n    val : i32,\n    next : Option&lt;&amp;'a mut Node&lt;'a&gt; &gt;,\n}\nstruct List&lt;'a&gt; {\n    glob : Option&lt;&amp;'a mut Node&lt;'a&gt; &gt;,\n}\n\n\nstruct AllocatedList&lt;'a&gt; {\n   el0 : Node&lt;'a&gt;,\n   el1 : Node&lt;'a&gt;,\n   el2 : Node&lt;'a&gt;,\n   el3 : Node&lt;'a&gt;,\n   el4 : Node&lt;'a&gt;,\n   el5 : Node&lt;'a&gt;,\n   el6 : Node&lt;'a&gt;,\n   sentinel : Node&lt;'a&gt;,\n   list : List&lt;'a&gt;,\n}\n  fn remove_cur&lt;'a&gt;(mut iter : &amp;mut Option&lt;&amp;mut Node&lt;'a&gt; &gt;) -&gt; &amp;'a mut Node&lt;'a&gt; {\n      match *iter {\n        Some(ref mut glob_next) =&gt; {\n             let rest : Option&lt;&amp;'a mut Node &lt;'a&gt; &gt;;\n             match glob_next.next {\n                 Some(ref mut root_cell) =&gt; {\n                    rest = std::mem::replace(&amp;mut root_cell.next, None);\n                 },\n                 None =&gt; rest = None,\n             }\n             match std::mem::replace(&amp;mut glob_next.next, rest) {\n                Some(mut root_cell) =&gt;\n                {\n                   return root_cell;\n                },\n                None =&gt; panic!(\"Empty list\"),\n             }\n        },\n        None =&gt; panic!(\"List not initialized\"),\n     }\n  }\n\nimpl&lt;'a&gt; List&lt;'a&gt; {\n  fn remove_first(self : &amp;mut List&lt;'a&gt;) -&gt; &amp;'a mut Node&lt;'a&gt; {\n      return remove_cur(&amp;mut self.glob);\n  }\n\n  fn remove_search(self : &amp;mut List&lt;'a&gt;, searched:i32) -&gt; &amp;'a mut Node&lt;'a&gt; {\n      let mut list_iter : &amp;mut Option&lt;&amp;'a mut Node&lt;'a&gt; &gt; = &amp;mut self.glob;\n      loop {\n          match *list_iter {\n              Some(ref mut cur_cell) =&gt; {\n                match cur_cell.next {\n                   Some(ref item) =&gt; {\n                       if cur_cell.val == searched {\n                            break;\n                       }\n                   },\n                   None=&gt;{},\n                  }\n                  list_iter = &amp;mut cur_cell.next;\n              },\n              None =&gt; { // use whatever is available if nothing matches well\n                  panic!(\"Not found\");\n              },\n         }\n    }\n    return remove_cur(list_iter);\n }\n}\n\nfn main() {\n    let mut a : AllocatedList = AllocatedList{\n        el0 : Node{val : 0, next : None},\n        el1 : Node{val : 1, next : None},\n        el2 : Node{val : 2, next : None},\n        el3 : Node{val : 3, next : None},\n        el4 : Node{val : 4, next : None},\n        el5 : Node{val : 5, next : None},\n        el6 : Node{val : 6, next : None},\n        sentinel : Node {val : -1, next : None},\n        list : List{glob:None},\n    };\n    a.el5.next = Some(&amp;mut a.el6);\n    a.el4.next = Some(&amp;mut a.el5);\n    a.el3.next = Some(&amp;mut a.el4);\n    a.el2.next = Some(&amp;mut a.el3);\n    a.el1.next = Some(&amp;mut a.el2);\n    a.el0.next = Some(&amp;mut a.el1);\n    a.sentinel.next = Some(&amp;mut a.el0);\n    a.list.glob = Some(&amp;mut a.sentinel);\n    let removed_el = a.list.remove_first();\n    println!(\"Removed {:?}\", removed_el.val);\n    let removed_el = a.list.remove_first();\n    println!(\"Removed {:?}\", removed_el.val);\n\n    let removed_x = a.list.remove_search(5);\n    println!(\"Removed {:?}\", removed_x.val);\n}\n</code></pre>\n\n<p>And the error is:</p>\n\n<pre><code>52:36 error: cannot borrow `list_iter.0` as mutable more than once at a time [E0499]\n          Some(ref mut cur_cell) =&gt; {\n               ^~~~~~~~~~~~~~~~\n69:3 note: previous borrow ends here\n     fn remove_search(self : &amp;mut List&lt;'a&gt;, searched:i32) -&gt; &amp;'a mut Node&lt;'a&gt; {\n\n61:49 error: cannot assign to `list_iter` because it is borrowed [E0506]\n              list_iter = &amp;mut cur_cell.next;\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n52:36 note: borrow of `list_iter` occurs here\n             Some(ref mut cur_cell) =&gt; {\n                  ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>Is there any recipe I can follow or any change I can make in my code (needs to work with nostdlib) to iterate through this list?</p>\n\n<p>I'd rather not use recursion as it may get rather large in practice and I don't wish to overflow the stack.</p>\n"}, {"tags": ["git", "dependencies", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1459187162, "post_id": 36267607, "comment_id": 60162861, "body": "Please provide an <a href=\"/help/mcve\">MCVE</a>. In this case, a minimized version of your <code>Cargo.toml</code> and your <code>build.rs</code> would be a good start. As currently stated, your question doesn&#39;t make sense \u2014 you can&#39;t add non-Rust code as a Cargo dependency."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1459239967, "post_id": 36267607, "comment_id": 60184458, "body": "Judging from the code, it uses CMake to build. Cargo-ifying may either be trivial or serious work. The only way to know is to try."}], "answers": [{"tags": [], "owner": {"reputation": 61809, "user_id": 245706, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/e714b10afcc8d86b0fcfe79c02e6c61b?s=128&d=identicon&r=PG", "display_name": "AndiDog", "link": "https://stackoverflow.com/users/245706/andidog"}, "is_accepted": true, "score": 2, "last_activity_date": 1459423271, "creation_date": 1459423271, "answer_id": 36331963, "question_id": 36267607, "link": "https://stackoverflow.com/questions/36267607/is-it-possible-to-compile-an-external-git-repository-that-doesnt-contain-cargo/36331963#36331963", "title": "Is it possible to compile an external git repository that doesn&#39;t contain Cargo.toml with Cargo?", "body": "<p>Since SFML is not a Rust project, you of course cannot directly build it with <code>cargo</code>. However within <code>build.rs</code>, you can easily <a href=\"https://doc.rust-lang.org/std/process/struct.Command.html\" rel=\"nofollow\">run</a> the respective CMake commands to perform the build. Afterwards, you probably want to add something to the linker search path \u2013 something along these lines:</p>\n\n<pre><code>// build.rs\nprintln!(\"cargo:rustc-link-search=native=/search/path/to/add\");\nprintln!(\"cargo:rustc-link-lib=static=sfml\");\n</code></pre>\n"}], "owner": {"reputation": 193, "user_id": 1941280, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/26647042ac8d5aa0a1841694fe4cb876?s=128&d=identicon&r=PG", "display_name": "Kerollmops", "link": "https://stackoverflow.com/users/1941280/kerollmops"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 0, "accepted_answer_id": 36331963, "answer_count": 1, "score": -1, "last_activity_date": 1459423271, "creation_date": 1459186675, "last_edit_date": 1459186954, "question_id": 36267607, "link": "https://stackoverflow.com/questions/36267607/is-it-possible-to-compile-an-external-git-repository-that-doesnt-contain-cargo", "title": "Is it possible to compile an external git repository that doesn&#39;t contain Cargo.toml with Cargo?", "body": "<p>I am trying to clone the <a href=\"https://github.com/SFML/SFML\" rel=\"nofollow\">SFML github repo</a> in my local project directory and build it using the build.rs Cargo solution and I get this error:</p>\n\n<blockquote>\n  <p>Could not find Cargo.toml</p>\n</blockquote>\n\n<p>I didn't find any way to fetch a repo that doesn't contain a Cargo.toml config file from my own Cargo.toml config!</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "is_accepted": true, "score": 5, "last_activity_date": 1459176530, "creation_date": 1459176530, "answer_id": 36264749, "question_id": 36264348, "link": "https://stackoverflow.com/questions/36264348/is-it-possible-to-have-a-vector-of-tuples-that-are-varying-length/36264749#36264749", "title": "Is it possible to have a vector of tuples that are varying length?", "body": "<p>Use a <a href=\"https://doc.rust-lang.org/book/enums.html\" rel=\"noreferrer\">enum</a> with variants for each desired tuple length (and each allowed combination of component types if necessary). </p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 701, "favorite_count": 1, "accepted_answer_id": 36264749, "answer_count": 1, "score": 3, "last_activity_date": 1459176530, "creation_date": 1459175116, "last_edit_date": 1459175230, "question_id": 36264348, "link": "https://stackoverflow.com/questions/36264348/is-it-possible-to-have-a-vector-of-tuples-that-are-varying-length", "title": "Is it possible to have a vector of tuples that are varying length?", "body": "<p>Something like this:</p>\n\n<pre><code>let vector = vec![(1, 2), (\"A\", 2, 3)];\n</code></pre>\n\n<p>If this isn't possible, what other alternatives could I use? For the sake of example, assume the length of the vector is unknown and the length of tuples is between 1 - 5 elements.</p>\n"}, {"tags": ["rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1459171778, "post_id": 36263123, "comment_id": 60154761, "body": "I don&#39;t think it&#39;s worth a full answer, but this is what the <a href=\"https://crates.io/crates/scan-rules\" rel=\"nofollow noreferrer\"><code>scan-rules</code></a> crate was designed for."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1578074276, "last_edit_date": 1578074276, "creation_date": 1459170731, "answer_id": 36263123, "question_id": 36262937, "link": "https://stackoverflow.com/questions/36262937/how-can-i-pattern-match-on-a-vector-of-string-slices-and-extract-values/36263123#36263123", "title": "How can I pattern match on a vector of string slices and extract values?", "body": "<blockquote>\n  <ol>\n  <li>This code produces error <code>error: slice pattern syntax is experimental (see issue #23121)</code> so I'm assuming I have to use nightly for it to work? Do I have to import any additional module for it as well?</li>\n  </ol>\n</blockquote>\n\n<p>Before <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1260-2018-05-10\" rel=\"nofollow noreferrer\">Rust 1.26</a> you have to use a nightly compiler and add <code>#![feature(slice_patterns)]</code> to your crate root. As of Rust 1.26, your original code works as-is.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>Is there a similarly simple approach that wouldn't require nightly?</li>\n  </ol>\n</blockquote>\n\n<p>In your example, you branch depending on length of the resulting vector. So of course you can just <code>match v.len()</code>. Once you know the length of the vector, you can access it with <code>[]</code>. To bind those to nice names, you can do it like this:</p>\n\n<pre><code>match v.len() {\n    4 =&gt; {\n        let (letter, x1, x2, x3) = (v[0], v[1], v[2], v[3]);\n        // ...\n    }\n    // ...\n}\n</code></pre>\n\n<p>It's certainly not as nice as the slice pattern, but at least it works on stable Rust before the desired syntax was available.</p>\n\n<blockquote>\n  <ol start=\"3\">\n  <li>Is there an elegant way to do further matching to pull integer values? For instance is it possible to convert vector into tuple so that (\"A\", 1, 2, 3, 4) would match and (\"A\", 1, 2, \"D\") wouldn't?</li>\n  </ol>\n</blockquote>\n\n<p>You can't really do type conversions within pattern matching. Converting slices into tuples doesn't work either -- both things are pretty different types. Slices are homogeneous and their length is not known at compile time; tuples can hold variables of different types and their length has to be known at compile time. </p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2393, "favorite_count": 1, "accepted_answer_id": 36263123, "answer_count": 1, "score": 1, "last_activity_date": 1578074276, "creation_date": 1459170119, "last_edit_date": 1578074129, "question_id": 36262937, "link": "https://stackoverflow.com/questions/36262937/how-can-i-pattern-match-on-a-vector-of-string-slices-and-extract-values", "title": "How can I pattern match on a vector of string slices and extract values?", "body": "<p>I have a string input that needs to be split into values and pattern matched, so I'm looking for the best way to do that.</p>\n\n<p>This is what I've got so far.</p>\n\n<pre><code>fn main() {\n    let s: &amp;str = \"A 1 2 3 4\";\n\n    let v: Vec&lt;&amp;str&gt; = s.split(\" \").collect();\n\n    match &amp;v[..] {\n        [letter, x1, x2, x3] =&gt; println!(\"{:?}\", letter), //do something with values\n        [letter, x1, x2, x3, x4] =&gt; println!(\"{:?}\", letter), //do something with values\n        _ =&gt; println!(\"no match\"),\n    }\n}\n</code></pre>\n\n<p>I have several issues with this approach:</p>\n\n<ol>\n<li>This code produces error <code>error: slice pattern syntax is experimental (see issue #23121)</code> so I'm assuming I have to use nightly for it to work? Do I have to import any additional module for it as well?</li>\n<li>Is there a similarly simple approach that wouldn't require nightly?</li>\n<li>Is there an elegant way to do further matching to pull integer values? For instance is it possible to convert vector into tuple so that <code>(\"A\", 1, 2, 3, 4)</code> would match and <code>(\"A\", 1, 2, \"D\")</code> wouldn't?</li>\n</ol>\n"}, {"tags": ["loops", "enums", "hashmap", "iteration", "rust"], "answers": [{"comments": [{"owner": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "edited": false, "score": 0, "creation_date": 1459280968, "post_id": 36264920, "comment_id": 60212792, "body": "Thank you! Your explanation in 1. is the reason I tried to use .iter() (because it returns references).  I found the manual extremely confusing on the whole &amp;, &amp;mut, ref and * and the places you can use them. It&#39;s very clear what they do when used in function arguments and calling parameters, but I would have never tried to use &amp;mut after a for...in, or a * after match..."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1459177080, "last_edit_date": 1495541733, "creation_date": 1459177080, "answer_id": 36264920, "question_id": 36262867, "link": "https://stackoverflow.com/questions/36262867/recursively-visiting-enums-in-a-hashmap/36264920#36264920", "title": "Recursively visiting enums in a Hashmap", "body": "<p>There are several issues with your code. Here is a working version with numbered changes:</p>\n\n<pre><code>fn process(index: &amp;mut Dir) {\n    //             ^^^-- #2\n    for (_, child) in &amp;mut index.children {\n        //             ^^^-- #1\n        match *child {\n            //^-- #3\n            Item::File(ref mut f) =&gt; {\n                //     ^^^-- #4\n                f.do_something();\n            },\n            Item::Dir(ref mut d) =&gt; {\n                //    ^^^-- #4\n                process(d);\n            }\n        }\n    }\n}\n</code></pre>\n\n<ol>\n<li>Saying <code>for /* ... */ in index.children</code> tries to move <code>children</code> into the iteration. There are already <a href=\"https://stackoverflow.com/questions/33836892/expected-ptr-found-tuple-while-iterating-over-an-array-of-tuples/33841530#33841530\">some</a> <a href=\"https://stackoverflow.com/questions/35376286/using-moved-values-in-a-function/35378203\">answers</a> on SO explaining why that's the case. We want to iterate without consuming, but be able to mutate the values.</li>\n<li>Because of (1.) the function also needs to have a <em>mutable</em> reference to the <code>Dir</code></li>\n<li><code>child</code> is a mutable reference of type <code>&amp;mut Item</code> (because that's what the iterator yields). The patterns in the match block (<code>Item::File(/* ... */)</code> for example) have the type <code>Item</code>. This is a type mismatch (your second compiler error). We can resolve that by dereferencing <code>child</code> with <code>*</code>.</li>\n<li>So the <code>match</code> block matches on <code>Item</code>, but we do not actually own the item and can't move out of it. To prevent a move, we add the <code>ref</code> keyword. Now <code>f</code> and <code>d</code> are references and we avoided a move.</li>\n</ol>\n"}], "owner": {"reputation": 4239, "user_id": 635786, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e04f3a3d7dcc1cec8a99fe22ecdb6215?s=128&d=identicon&r=PG", "display_name": "Shu", "link": "https://stackoverflow.com/users/635786/shu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 133, "favorite_count": 0, "accepted_answer_id": 36264920, "answer_count": 1, "score": 0, "last_activity_date": 1459177080, "creation_date": 1459169896, "question_id": 36262867, "link": "https://stackoverflow.com/questions/36262867/recursively-visiting-enums-in-a-hashmap", "title": "Recursively visiting enums in a Hashmap", "body": "<p>I modeled a filesystem-like structure with an enum, two structs and a BTreeMap, like this (simplified):</p>\n\n<pre><code>pub enum Item {\n    Dir(Dir),\n    File(File),\n}\n\nstruct Dir {\n    ...\n    children: BTreeMap&lt;String, Item&gt;,\n}\n\nstruct File {\n    ...\n}\n</code></pre>\n\n<p>Now I need to loop over a Dir and do some operation on every File. I tried this:</p>\n\n<pre><code>fn process(index: &amp;Dir) {\n    for (_, child) in index.children {\n        match child {\n            Item::File(mut f) =&gt; {\n                let xyz = ...;\n                f.do_something(xyz);\n            },\n            Item::Dir(d) =&gt; {\n                process(&amp;d);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>but I get:</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\n       for (_, child) in index.children {\n                         ^~~~~\n</code></pre>\n\n<p>I also tried</p>\n\n<pre><code>for (_, child) in index.children.iter() {\n</code></pre>\n\n<p>but then I get</p>\n\n<pre><code>error: mismatched types:\n expected `&amp;Item`,\n    found `Item`\n(expected &amp;-ptr,\n    found enum `Item`) [E0308]\nsrc/...  Item::File(mut a) =&gt; {\n         ^~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I tried several combinations:</p>\n\n<pre><code>for (_, child) in &amp;(index.children)\nfor (_, child) in index.children.iter().as_ref()\n\nmatch(child) { Item::File(&amp;mut f) =&gt;\nmatch(child) { Item::File(ref mut f) =&gt;\n</code></pre>\n\n<p>and so on, but couldn't find a way to make the borrow checker happy.</p>\n\n<p>Any help is much appreciated.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": false, "score": 1, "last_activity_date": 1459166964, "creation_date": 1459166964, "answer_id": 36262017, "question_id": 36261590, "link": "https://stackoverflow.com/questions/36261590/type-mismatch-error-while-reading-stdin-lines/36262017#36262017", "title": "type mismatch error while reading stdin lines", "body": "<p>When matching on a string.. you'll need to perhaps slice it to match against string literals, as you're attempting to match a <code>String</code> against a <code>&amp;str</code>.</p>\n\n<pre><code>Ok(val) =&gt; match &amp;val[..] { // &lt;---- note the ampersand and the square brackets with two dots inside\n</code></pre>\n\n<p>Also, once you do this, the compiler will probably complain about your <code>\"q\"</code> pattern being unreachable. This is because your \"catch-all\" (the underscore) is before the explicit <code>\"q\"</code> match... so just re-order them.</p>\n\n<p>It becomes:</p>\n\n<pre><code>match line {\n    Ok(val) =&gt; match &amp;val[..] {\n        // The lines below are re-ordered\n        \"q\" =&gt; std::process::exit(0),\n        v @ _ =&gt; println!(\"{:?}\", v)\n    },\n    _ =&gt; println!(\"ERROR\")\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1459166984, "creation_date": 1459166984, "answer_id": 36262020, "question_id": 36261590, "link": "https://stackoverflow.com/questions/36261590/type-mismatch-error-while-reading-stdin-lines/36262020#36262020", "title": "type mismatch error while reading stdin lines", "body": "<h3>Explanation</h3>\n\n<p>This slightly confusing error message is a result of Rust's way to do type inference. Rust doesn't know what type <code>line</code> has, when it looks at the first line of the loop. So it tries to figure out with the loop body:</p>\n\n<pre><code>match line {\n    Ok(val) =&gt; /* ... */\n    _ =&gt; /* ... /*\n}\n</code></pre>\n\n<p>With this information <code>rustc</code> knows that the type of <code>line</code> is at least <code>Result&lt;_, _&gt;</code> where <code>_</code> are types still unknown to the compiler. So it tries to figure that last bit out:</p>\n\n<pre><code>Ok(val) =&gt; match val {\n    v @ _ =&gt; println!(\"{:?}\", v),\n    \"q\" =&gt; std::process::exit(0)\n},\n</code></pre>\n\n<p>The bound <code>val</code> corresponds to the first type parameter of the <code>Result</code>. So what is <code>val</code> here. You match <code>val</code> against <code>\"q\"</code>. The latter expression is of type <code>&amp;str</code>, so the compiler assumes that <code>val</code> is also of type <code>&amp;str</code>. Thus <code>line</code> has the type <code>Result&lt;&amp;str, _&gt;</code> (<code>_</code> is still unknown, but that doesn't matter now).</p>\n\n<p>Now <code>rustc</code> tries to figure out how to use the result of <code>stdin.lock().lines()</code> as an iterator that yields <code>Result&lt;&amp;str, _&gt;</code>. This is impossible for the compiler, since <a href=\"https://doc.rust-lang.org/std/io/struct.Lines.html\" rel=\"nofollow\"><code>std::io::Lines</code></a> always yields <code>Result&lt;String, io::Error&gt;</code>.</p>\n\n<p>To get better error messages, you can state the type of the iterator explicitly (in this case: rebind it):</p>\n\n<pre><code>for line in stdin.lock().lines() {\n    let line: io::Result&lt;String&gt; = line;\n    // ...\n}\n</code></pre>\n\n<p>This results in</p>\n\n<blockquote>\n<pre><code> &lt;anon&gt;:12:17: 12:20 error: mismatched types:\n  expected `collections::string::String`,\n     found `&amp;'static str`\n (expected struct `collections::string::String`,\n     found &amp;-ptr) [E0308]\n &lt;anon&gt;:12                 \"q\" =&gt; std::process::exit(0),\n                           ^~~\n</code></pre>\n</blockquote>\n\n<h3>Solution</h3>\n\n<p>There are obviously many solutions. Here you can see one that I like, because it helps <code>rustc</code> to figure out the type on its own:</p>\n\n<pre><code>for line in stdin.lock().lines() {\n    match line {\n        Ok(val) =&gt; match val.as_str() {    // &lt;-- note the `as_str()`\n            \"q\" =&gt; std::process::exit(0),\n            v @ _ =&gt; println!(\"{:?}\", v),\n        },\n        _ =&gt; println!(\"ERROR\")\n    }\n}\n</code></pre>\n\n<p><em>(I also moved the <code>\"q\"</code> arm to the top -- otherwise it's unreachable)</em></p>\n"}, {"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 1, "last_activity_date": 1459167002, "creation_date": 1459167002, "answer_id": 36262024, "question_id": 36261590, "link": "https://stackoverflow.com/questions/36261590/type-mismatch-error-while-reading-stdin-lines/36262024#36262024", "title": "type mismatch error while reading stdin lines", "body": "<p>The problem is that the compiler is trying to match <code>val</code>, which is a <code>String</code>, against the pattern <code>\"q\"</code>, which is a <code>&amp;str</code>. This gives you a mismatch.</p>\n\n<p>Instead, write <code>match val.as_str()</code> so the types match up. Maybe instead converting the string literal to a <code>String</code> would also work, but that would be a useless heap allocation.</p>\n\n<p>Second, the pattern <code>v @ _</code> is redundant. You're saying \"match anything, and give it the name <code>v</code>\". But a simple <code>v</code> pattern does the same thing.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 127, "favorite_count": 1, "accepted_answer_id": 36262024, "answer_count": 3, "score": 0, "last_activity_date": 1459167002, "creation_date": 1459165275, "question_id": 36261590, "link": "https://stackoverflow.com/questions/36261590/type-mismatch-error-while-reading-stdin-lines", "title": "type mismatch error while reading stdin lines", "body": "<p>I have no idea why this simple example is not working:</p>\n\n<pre><code>use std::io;\nuse std::io::prelude::*;\n\nfn main() {\n\n    let stdin = io::stdin();\n\n    for line in stdin.lock().lines() {\n        match line {\n            Ok(val) =&gt; match val {\n                v @ _ =&gt; println!(\"{:?}\", v),\n                \"q\" =&gt; std::process::exit(0)\n            },\n            _ =&gt; println!(\"ERROR\")\n        }\n    }\n\n}\n</code></pre>\n\n<p>The error is:</p>\n\n<pre><code>src/main.rs:8:5: 16:6 error: type mismatch resolving `&lt;std::io::Lines&lt;std::io::stdio::StdinLock&lt;'_&gt;&gt; as core::iter::Iterator&gt;::Item == core::result::Result&lt;&amp;str, _&gt;`:\n expected struct `collections::string::String`,\n    found &amp;-ptr [E0271]\nsrc/main.rs: 8     for line in stdin.lock().lines() {\nsrc/main.rs: 9         match line {\nsrc/main.rs:10             Ok(val) =&gt; match val {\nsrc/main.rs:11                 v @ _ =&gt; println!(\"{:?}\", v),\nsrc/main.rs:12                 \"q\" =&gt; std::process::exit(0)\nsrc/main.rs:13             },\n               ...\n</code></pre>\n\n<p>I'm just trying to echo stdin lines entered and exit the application if the line equals \"q\".</p>\n"}, {"tags": ["generics", "rust", "unsafe"], "answers": [{"comments": [{"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "edited": false, "score": 0, "creation_date": 1459159558, "post_id": 36259414, "comment_id": 60148398, "body": "Wow, that&#39;s nice to know, I planned on learning compiler plugins with this project :) And uh, you probably already knew, but you can avoid the cast with Any::downcast_ref(&amp;self.health) instead, which is even cleaner. Thanks!"}, {"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "edited": false, "score": 0, "creation_date": 1459166346, "post_id": 36259414, "comment_id": 60151678, "body": "This should probably be another question, but do you any way this can be used in trait objects? I mean, I probably should&#39;ve thought of that first."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "edited": false, "score": 0, "creation_date": 1459167467, "post_id": 36259414, "comment_id": 60152291, "body": "@Shien It&#39;s difficult. You would need to return the component as a trait object, too. But as you said, it&#39;s enough for another question -- maybe in the Rust user forum, instead of SO..."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1459160055, "last_edit_date": 1459160055, "creation_date": 1459157080, "answer_id": 36259414, "question_id": 36258917, "link": "https://stackoverflow.com/questions/36258917/is-there-a-way-to-switch-on-return-types-so-that-the-compiler-knows-that-the-ret/36259414#36259414", "title": "Is there a way to switch on return types so that the compiler knows that the return type and matched type are the same?", "body": "<p>You can do it like this:</p>\n\n<pre><code>fn get&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n    if let Some(health) = Any::downcast_ref::&lt;T&gt;(&amp;self.health) {\n        Some(&amp;health)\n    }\n    else if let Some(position) = Any::downcast_ref::&lt;T&gt;(&amp;self.position) {\n        Some(&amp;position)\n    } else { \n        None \n    }\n}\n</code></pre>\n\n<p>Note that I also removed the explicit lifetime from the function header (in the trait definition, too). Lifetime elision works in this case, as the output-lifetime is bound to the input-lifetime (<code>self</code>).</p>\n\n<p>The above code is pretty verbose and has a lot of duplicate code. So it could be useful to write a simple macro for it:</p>\n\n<pre><code>macro_rules! entity_match {\n    ($self_:ident; $($entity:ident),*) =&gt; {{\n        $(if let Some(inner) = Any::downcast_ref::&lt;T&gt;(&amp;$self_.$entity) {\n            return Some(&amp;inner);\n        })*\n        None\n    }}\n}\n\nimpl Entity for Pig {\n    fn get&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        entity_match!(self; health, position)\n    }\n}\n</code></pre>\n\n<p>As a little note: I think it would be pretty nice to use compiler plugins here, to mark some struct members as entities in the struct definition.</p>\n"}], "owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 61, "favorite_count": 0, "accepted_answer_id": 36259414, "answer_count": 1, "score": 1, "last_activity_date": 1459172922, "creation_date": 1459154866, "last_edit_date": 1459172922, "question_id": 36258917, "link": "https://stackoverflow.com/questions/36258917/is-there-a-way-to-switch-on-return-types-so-that-the-compiler-knows-that-the-ret", "title": "Is there a way to switch on return types so that the compiler knows that the return type and matched type are the same?", "body": "<p>How can I avoid using unsafe code in the code below? It's meant to be part of an entity-component-system library. More generally, is there a way to switch on return types in Rust in a way that the compiler will know inside the block that the return type and matched type are the same?</p>\n\n<pre><code>use std::any::{Any, TypeId};\nuse std::mem;\n\n#[derive(Debug)] struct Health(f64);\n#[derive(Debug)] struct Position([f64; 3]);\n\ntrait Entity {\n    fn get&lt;'a, T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;'a T&gt;;\n}\n\n#[derive(Debug)]\nstruct Pig {\n    health: Health,\n    position: Position,\n}\n\nimpl Entity for Pig {\n    fn get&lt;'a, T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;'a T&gt; {\n        if TypeId::of::&lt;T&gt;() == TypeId::of::&lt;Health&gt;() {\n            Some(unsafe {mem::transmute(&amp;self.health)})\n        } else if TypeId::of::&lt;T&gt;() == TypeId::of::&lt;Position&gt;() {\n            Some(unsafe {mem::transmute(&amp;self.position)})\n        } else { None }\n    }\n}\n\nfn main() {\n    let waddles = Pig {\n        health: Health(2.0),\n        position: Position([1.0, 2.0, 3.0]),\n    };\n\n    println!(\"Waddles' Health: {:?}\", waddles.get::&lt;Health&gt;());\n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/d60625ae7f7539a58603\" rel=\"nofollow\">gist</a></p>\n"}, {"tags": ["rust", "initializer-list", "static-initializer"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459169733, "post_id": 36258417, "comment_id": 60153508, "body": "Related: <a href=\"http://stackoverflow.com/questions/33751796/is-there-a-way-to-count-with-macros\">Is there a way to count with macros</a>, tl;dr -&gt; not with regular macros."}], "answers": [{"comments": [{"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1459154288, "post_id": 36258710, "comment_id": 60146099, "body": "That&#39;s a really cool lib--unfortunately I did forget to mention that I want to refrain from unsafe territory, especially for 3rd party code"}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1459154329, "post_id": 36258710, "comment_id": 60146114, "body": "I actually only need a list interface...I wonder if I could use a few macros to generate a list of size N maybe some sort of intrusive thing with an Option next"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "edited": false, "score": 0, "creation_date": 1459157030, "post_id": 36258710, "comment_id": 60147227, "body": "@hellcatv if you use std library even in the slightest, you will depend on unsafe code. Almost all useful abstractions (collections, memory management, I/O, threading, etc.) are based on unsafe code and can&#39;t really be done without it. There is nothing wrong in using safe interfaces around unsafe internals. You don&#39;t have to use <code>unsafe</code> yourself."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": false, "score": 3, "last_activity_date": 1578414098, "last_edit_date": 1578414098, "creation_date": 1459153893, "answer_id": 36258710, "question_id": 36258417, "link": "https://stackoverflow.com/questions/36258417/using-a-macro-to-initialize-a-big-array-of-non-copy-elements/36258710#36258710", "title": "Using a macro to initialize a big array of non-Copy elements", "body": "<p>The problem with these macros is that the former one does not produce valid syntactic forms in Rust - two expressions combined by a comma is not a valid form by itself. The fact that it is \"injected\" into square brackets in another macro is irrelevant.</p>\n\n<p>Frankly, I don't know how to do it properly with regular arrays. Absence of numbers as generic parameters is a well-known problem which precludes lots of useful patterns. If they were supported, for example, it would be possible to have a function like this one:</p>\n\n<pre><code>fn make_array&lt;T, N: usize, F&gt;(f: F) -&gt; [T; N] where F: FnMut() -&gt; T\n</code></pre>\n\n<p>which creates an array of arbitrary size, filling it with the result of function invocation:</p>\n\n<pre><code>let array: [_; 64] = make_array(|| AllocatedMemory::&lt;u8&gt;{ mem: &amp;mut [] })\n</code></pre>\n\n<p>But alas, no such thing is available in Rust yet. You have to use dynamic structures like <code>Vec</code> instead. You can also try <a href=\"https://crates.io/crates/arrayvec\" rel=\"nofollow noreferrer\">arrayvec</a>, which provides a <code>Vec</code>-like API for some fixed-size arrays; using it you can do something like this:</p>\n\n<pre><code>use arrayvec::ArrayVec; // 0.5.1\n\nfn main() {\n    let mut array = ArrayVec::&lt;[_; 64]&gt;::new();\n    for _ in 0..array.len() {\n        array.push(AllocatedMemory::&lt;u8&gt; { mem: &amp;mut [] });\n    }\n    let array = array.into_inner(); // array: [AllocatedMemory&lt;u8&gt;; 64]\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/26757355/155423\">How do I collect into an array?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1459158157, "last_edit_date": 1459158157, "creation_date": 1459157533, "answer_id": 36259524, "question_id": 36258417, "link": "https://stackoverflow.com/questions/36258417/using-a-macro-to-initialize-a-big-array-of-non-copy-elements/36259524#36259524", "title": "Using a macro to initialize a big array of non-Copy elements", "body": "<p>The problem is that <a href=\"https://danielkeep.github.io/tlborm/book/mbe-syn-expansion.html\" rel=\"noreferrer\">the expansion of a macro absolutely <em>must</em> be a complete and independently valid grammar element</a>.  You can't expand to <code>a, b</code> any more than you can expand to <code>42 +</code>.  There is also no way to (statically) concatenate or cons arrays in Rust; the entire array initialiser must be expanded to in <em>one</em> step.</p>\n\n<p>This can be done using macros with <a href=\"https://danielkeep.github.io/tlborm/book/pat-push-down-accumulation.html\" rel=\"noreferrer\">push-down accumulation</a>.  The trick is that you pass the not-yet-syntactically-valid partial array expression <em>down</em> the recursion, instead of constructing on the way back out.  When you reach the bottom of the expansion, you emit the now complete expression all at once.</p>\n\n<p>Here's a macro that supports arrays of length 0 through 8, and powers of 2 up to 64:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! array {\n    (@accum (0, $($_es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@as_expr [$($body)*])};\n    (@accum (1, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (0, $($es),*) -&gt; ($($body)* $($es,)*))};\n    (@accum (2, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (0, $($es),*) -&gt; ($($body)* $($es,)* $($es,)*))};\n    (@accum (3, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (2, $($es),*) -&gt; ($($body)* $($es,)*))};\n    (@accum (4, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (2, $($es,)* $($es),*) -&gt; ($($body)*))};\n    (@accum (5, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (4, $($es),*) -&gt; ($($body)* $($es,)*))};\n    (@accum (6, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (4, $($es),*) -&gt; ($($body)* $($es,)* $($es,)*))};\n    (@accum (7, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (4, $($es),*) -&gt; ($($body)* $($es,)* $($es,)* $($es,)*))};\n    (@accum (8, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (4, $($es,)* $($es),*) -&gt; ($($body)*))};\n    (@accum (16, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (8, $($es,)* $($es),*) -&gt; ($($body)*))};\n    (@accum (32, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (16, $($es,)* $($es),*) -&gt; ($($body)*))};\n    (@accum (64, $($es:expr),*) -&gt; ($($body:tt)*))\n        =&gt; {array!(@accum (32, $($es,)* $($es),*) -&gt; ($($body)*))};\n\n    (@as_expr $e:expr) =&gt; {$e};\n\n    [$e:expr; $n:tt] =&gt; { array!(@accum ($n, $e) -&gt; ()) };\n}\n\nfn main() {\n    let ones: [i32; 64] = array![1; 64];\n    println!(\"{:?}\", &amp;ones[..]);\n}\n</code></pre>\n\n<p>The strategy here is to multiply the size of the input on powers of two, and add the remainder for non-powers of two.  This is to stave off the macro recursion limit (I believe the default is 64) by making sure <code>$n</code> drops in value quickly.</p>\n\n<p>Just to forestall the frequent follow-up question: <em>no</em>, you can't simplify this with arithmetic; you can't <em>do</em> arithmetic in macros.  :)</p>\n\n<p><strong>Addendum</strong>: If you're not sure how this works, you can pass <code>-Z trace-macros</code> to <code>rustc</code> when compiling and see each macro invocation that gets expanded.  Using <code>array![1; 6]</code> as an example, you get something like this:</p>\n\n<pre><code>array! { 1 ; 6 }\narray! { @ accum ( 6 , 1 ) -&gt; (  ) }\narray! { @ accum ( 4 , 1 ) -&gt; ( 1 , 1 , ) }\narray! { @ accum ( 2 , 1 , 1 ) -&gt; ( 1 , 1 , ) }\narray! { @ accum ( 0 , 1 , 1 ) -&gt; ( 1 , 1 , 1 , 1 , 1 , 1 , ) }\narray! { @ as_expr [ 1 , 1 , 1 , 1 , 1 , 1 , ] }\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1578413869, "post_id": 59632115, "comment_id": 105426674, "body": "See also <a href=\"https://stackoverflow.com/a/31361031/155423\">What is the proper way to initialize a fixed length array?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1578413947, "post_id": 59632115, "comment_id": 105426718, "body": "I would recommend that most people do <b>not</b> use this answer. <code>ArrayVec</code>, as shown in <a href=\"https://stackoverflow.com/a/36258710/155423\">Vladimir Matveev&#39;s answer</a>, does the unsafe code under the hood and provides a nicer API."}], "tags": [], "owner": {"reputation": 21, "user_id": 723458, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a31a60fc46ad3706b1295c328e8cf97b?s=128&d=identicon&r=PG", "display_name": "ronlobo", "link": "https://stackoverflow.com/users/723458/ronlobo"}, "is_accepted": false, "score": 0, "last_activity_date": 1578413590, "creation_date": 1578413590, "answer_id": 59632115, "question_id": 36258417, "link": "https://stackoverflow.com/questions/36258417/using-a-macro-to-initialize-a-big-array-of-non-copy-elements/59632115#59632115", "title": "Using a macro to initialize a big array of non-Copy elements", "body": "<p>A <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=bafb8c439b849f60d67665ca9e146b5f\" rel=\"nofollow noreferrer\">\"safe\" implementation</a> which runs on stable, heavily inspired by <a href=\"https://www.reddit.com/r/rust/comments/29ymbx/a_macro_to_fill_a_fixed_length_array/\" rel=\"nofollow noreferrer\">Reddit</a>:</p>\n\n<pre><code>// #![feature(core_intrinsics)]\n// use std::ptr;\nuse std::mem;\nuse std::mem::MaybeUninit;\n\ntype MyStructValue = Vec&lt;usize&gt;;\ntype UsizeToVecBuilder = Box&lt;dyn Fn(usize) -&gt; Vec&lt;usize&gt;&gt;;\n\n#[derive(Debug)]\nstruct MyStruct {\n    value: MyStructValue,\n}\n\nmacro_rules! make_array {\n    ([$t:ident; $n:expr], $constructor:expr, $builder:expr) =&gt; {{\n        let mut data: [MaybeUninit&lt;$t&gt;; $n] = unsafe { MaybeUninit::uninit().assume_init() };\n\n        let mut i: usize = 0;\n        for elem in &amp;mut data[..] {\n            *elem = MaybeUninit::new($constructor(i, $builder));\n            i += 1;\n        }\n\n        unsafe { mem::transmute::&lt;_, [$t; $n]&gt;(data) }\n    }};\n}\n\nfn main() {\n    println!(\n        \"{:?}\",\n        make_array!(\n            [MyStruct; 5],\n            |i, b: UsizeToVecBuilder| MyStruct { value: b(i) },\n            Box::new(|i| (0..i + 1).collect())\n        )\n    );\n}\n\n// unstable version: (see reddit: https://www.reddit.com/r/rust/comments/29ymbx/a_macro_to_fill_a_fixed_length_array/)\n//\n// macro_rules! make_array {\n//     ($n:expr, $constructor:expr) =&gt; {{\n//         let mut items: [_; $n] = unsafe { mem::uninitialized() };\n//         for i in 0..$n {\n//             let val = $constructor(i);\n//             unsafe {\n//                 std::intrinsics::volatile_copy_nonoverlapping_memory(\n//                     &amp;mut items[i], &amp;val, 1\n//                 );\n//                 // ptr::copy_nonoverlapping_memory(&amp;mut items[i], &amp;val, 1);\n//                 mem::forget(val);\n//             }\n//         }\n//         items\n//     }}\n// }\n\n// fn main() {\n// unstable version:\n// println!(\"{:?}\", make_array!(5, |i| MyStruct { value: i }));\n// }\n</code></pre>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1526, "favorite_count": 0, "accepted_answer_id": 36259524, "answer_count": 3, "score": 4, "last_activity_date": 1578414098, "creation_date": 1459152587, "last_edit_date": 1459172736, "question_id": 36258417, "link": "https://stackoverflow.com/questions/36258417/using-a-macro-to-initialize-a-big-array-of-non-copy-elements", "title": "Using a macro to initialize a big array of non-Copy elements", "body": "<p>I'm trying to initialize a big array of elements with the same initializer. 64 elements is just an example \u2014 I want to make it at least 16k. Unfortunately a simple</p>\n\n<pre><code>let array : [AllocatedMemory&lt;u8&gt;; 64] = [AllocatedMemory::&lt;u8&gt;{mem:&amp;mut []};64];\n</code></pre>\n\n<p>won't work because the <code>AllocatedMemory</code> struct does not implement <code>Copy</code></p>\n\n<pre><code>error: the trait `core::marker::Copy` is not implemented for the type `AllocatedMemory&lt;'_, u8&gt;` [E0277]\nlet array : [AllocatedMemory&lt;u8&gt;; 64] = [AllocatedMemory::&lt;u8&gt;{mem:&amp;mut []}; 64];\n                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>So I tried macros to no avail:</p>\n\n<pre><code>struct AllocatedMemory&lt;'a, T: 'a&gt; {\n    mem: &amp;'a mut [T],\n}\n\nmacro_rules! init_memory_helper {\n    (1, $T : ty) =&gt; { AllocatedMemory::&lt;$T&gt;{mem: &amp;mut []} };\n    (2, $T : ty) =&gt; { init_memory_helper!(1, $T), init_memory_helper!(1, $T) };\n    (4, $T : ty) =&gt; { init_memory_helper!(2, $T), init_memory_helper!(2, $T) };\n    (8, $T : ty) =&gt; { init_memory_helper!(4, $T), init_memory_helper!(4, $T) };\n    (16, $T : ty) =&gt; { init_memory_helper!(8, $T), init_memory_helper!(8, $T) };\n    (32, $T : ty) =&gt; { init_memory_helper!(16, $T), init_memory_helper!(16, $T) };\n    (64, $T : ty) =&gt; { init_memory_helper!(32, $T), init_memory_helper!(32, $T) };\n}\n\nmacro_rules! init_memory {\n    (1, $T : ty) =&gt; { [init_memory_helper!(1, $T)] };\n    (2, $T : ty) =&gt; { [init_memory_helper!(2, $T)] };\n    (4, $T : ty) =&gt; { [init_memory_helper!(4, $T)] };\n    (8, $T : ty) =&gt; { [init_memory_helper!(8, $T)] };\n    (16, $T : ty) =&gt; { [init_memory_helper!(16, $T)] };\n    (32, $T : ty) =&gt; { [init_memory_helper!(32, $T)] };\n    (64, $T : ty) =&gt; { [init_memory_helper!(64, $T)] };\n}\n\nfn main() {\n    let array: [AllocatedMemory&lt;u8&gt;; 64] = init_memory!(64, u8);\n    println!(\"{:?}\", array[0].mem.len());\n}\n</code></pre>\n\n<p>The error message is</p>\n\n<pre><code>error: macro expansion ignores token `,` and any following\n    (64, $T : ty) =&gt; { init_memory_helper!(32, $T), init_memory_helper!(32, $T) };\nnote: caused by the macro expansion here; the usage of `init_memory_helper!` is likely invalid in expression context\n</code></pre>\n\n<p>Is there any way to initialize this array without cut and pasting every initializer?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1459109576, "post_id": 36251992, "comment_id": 60133835, "body": "That would&#39;ve been a very good question, didn&#39;t it look incomplete. ;)"}, {"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1459110094, "post_id": 36251992, "comment_id": 60134038, "body": "That&#39;s weird. It was giving me issues while saving it too. Hangon a second :/"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459113206, "post_id": 36251992, "comment_id": 60135140, "body": "Please provide an <a href=\"/help/mcve\">MCVE</a> of your problem. One line of your code references <code>title_data</code>, but that&#39;s never defined anywhere. Ideally, provide code that reproduces the error on <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">the Rust Playground</a>"}], "answers": [{"comments": [{"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1459153391, "post_id": 36257994, "comment_id": 60145758, "body": "Unfortunately, I can&#39;t unwrap the result - <code>from_raw_parts</code> is giving me a slice <i>containing</i> results: <code>error: no method named &#39;unwrap&#39; found for type &#39;&amp;[core::result::Result&lt;u8, std::io::error::Error&gt;]&#39; in the current scope</code>"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 1, "creation_date": 1459167876, "post_id": 36257994, "comment_id": 60152508, "body": "See, that&#39;s why you should have written a complete example. I can only guess that <code>bytes</code> returns <code>Option&lt;Result&lt;u8, Error&gt;&gt;</code>s."}, {"owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "edited": false, "score": 0, "creation_date": 1459168537, "post_id": 36257994, "comment_id": 60152835, "body": "It doesn&#39;t. <a href=\"https://doc.rust-lang.org/std/io/struct.Bytes.html#method.take\" rel=\"nofollow noreferrer\">It returns <code>std::iter::Take</code></a>"}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 0, "last_activity_date": 1459150561, "creation_date": 1459150561, "answer_id": 36257994, "question_id": 36251992, "link": "https://stackoverflow.com/questions/36251992/casting-a-vecu8-to-a-u16/36257994#36257994", "title": "Casting a Vec&lt;u8&gt; to a &amp;[u16]", "body": "<p>There are two errors. First, you need to <code>.unwrap()</code> your <code>Result</code> (of <code>from_raw_parts(..)</code>, I presume), second the length is too large, because a <code>u16</code> takes twice the space of a <code>u8</code>, so you need to divide by 2.</p>\n"}, {"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 2, "creation_date": 1459169179, "post_id": 36258732, "comment_id": 60153194, "body": "because it&#39;s an IO iterator and IO operations can fail. Would you prefer your application to quit with a panic just because some file could no longer be read?"}], "tags": [], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "is_accepted": false, "score": 1, "last_activity_date": 1459154022, "creation_date": 1459154022, "answer_id": 36258732, "question_id": 36251992, "link": "https://stackoverflow.com/questions/36251992/casting-a-vecu8-to-a-u16/36258732#36258732", "title": "Casting a Vec&lt;u8&gt; to a &amp;[u16]", "body": "<p>In the end I mapped unwrap over the iterator, though I'm still confused as to why an iterator needs to consist of results.</p>\n\n<pre><code>let title_data = Vec::from_iter(bytes.take(title_length).map(|x| x.unwrap()));\nlet title: &amp;[u16] = unsafe {\n    std::slice::from_raw_parts(title_data.as_ptr() as *const u16, title_data.len() / 2)\n};\nlet title = String::from_utf16_lossy(title);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 482, "user_id": 5286593, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-TEsNm6kITnY/AAAAAAAAAAI/AAAAAAAAAPA/fyrLkdEoX40/photo.jpg?sz=128", "display_name": "AldaronLau", "link": "https://stackoverflow.com/users/5286593/aldaronlau"}, "is_accepted": false, "score": 2, "last_activity_date": 1563918144, "creation_date": 1563918144, "answer_id": 57172592, "question_id": 36251992, "link": "https://stackoverflow.com/questions/36251992/casting-a-vecu8-to-a-u16/57172592#57172592", "title": "Casting a Vec&lt;u8&gt; to a &amp;[u16]", "body": "<h1>With Safe Code</h1>\n\n<p>Just in case you need to do it safely,</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let title = Vec::from_iter(bytes.take(title_length));\nlet title: Vec&lt;u16&gt; = title\n    .chunks_exact(2)\n    .into_iter()\n    .map(|a| u16::from_ne_bytes([a[0], a[1]]))\n    .collect();\nlet title = title.as_slice();\nlet title = String::from_utf16_lossy(title);\n</code></pre>\n\n<p>Note that this will allocate memory, and do an extra copy (which the unsafe alternatives don't do).</p>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2939, "favorite_count": 1, "closed_date": 1563921869, "answer_count": 3, "score": 4, "last_activity_date": 1563918144, "creation_date": 1459108935, "last_edit_date": 1459112919, "question_id": 36251992, "link": "https://stackoverflow.com/questions/36251992/casting-a-vecu8-to-a-u16", "closed_reason": "Duplicate", "title": "Casting a Vec&lt;u8&gt; to a &amp;[u16]", "body": "<p>I have a <code>Vec&lt;u8&gt;</code> of bytes read from a file - the bytes are a text format (probably UTF-16 or some other silly 2 byte format) and I want to turn it into UTF-8.</p>\n\n<pre><code>let title = Vec::from_iter(bytes.take(title_length));\n// Some Vec&lt;u8&gt; to &amp;[u16] magic\nlet title = String::from_utf16_lossy(title);\n</code></pre>\n\n<p>Currently I'm using this rather dirty code:</p>\n\n<pre><code>let title: &amp;[u16] = unsafe { std::slice::from_raw_parts(title_data.as_ptr(), title_data.len()) };\n</code></pre>\n\n<p>While this should work I'm getting errors probably due to the <code>take()</code> call:</p>\n\n<pre><code>error: mismatched types:\n expected `*const u16`,\n    found `*const core::result::Result&lt;u8, std::io::error::Error&gt;`\n(expected u16,\n    found enum `core::result::Result`) [E0308]\n</code></pre>\n\n<p>Should I <code>map</code> the <code>take</code> iterator or something?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459112371, "post_id": 36251379, "comment_id": 60134846, "body": "<a href=\"http://meta.stackexchange.com/q/39223/281829\">One post with multiple questions or multiple posts?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1459112553, "last_edit_date": 1592644375, "creation_date": 1459112553, "answer_id": 36252631, "question_id": 36251379, "link": "https://stackoverflow.com/questions/36251379/why-doesnt-debug-assert-print-anything-when-the-first-argument-is-true/36252631#36252631", "title": "Why doesn&#39;t `debug_assert` print anything when the first argument is true?", "body": "<p>Because that's what it's supposed to do? From the <a href=\"http://doc.rust-lang.org/std/macro.debug_assert!.html\" rel=\"nofollow noreferrer\">documentation of <code>debug_assert!</code></a></p>\n<blockquote>\n<p>Ensure that a boolean expression is true at runtime.</p>\n<p>This will invoke the panic! macro if the provided expression cannot be evaluated to true at runtime.</p>\n</blockquote>\n<p>And you said</p>\n<blockquote>\n<p>the <code>if</code> condition evaluates to <code>true</code></p>\n</blockquote>\n<p>Because the condition is true, and the assertion ensures that it is true, then the assertion doesn't fail.</p>\n"}], "owner": {"reputation": 4655, "user_id": 238631, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/964be6c91230958b16680799436d57b0?s=128&d=identicon&r=PG", "display_name": "Soham Dasgupta", "link": "https://stackoverflow.com/users/238631/soham-dasgupta"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1459112595, "creation_date": 1459105433, "last_edit_date": 1459112595, "question_id": 36251379, "link": "https://stackoverflow.com/questions/36251379/why-doesnt-debug-assert-print-anything-when-the-first-argument-is-true", "title": "Why doesn&#39;t `debug_assert` print anything when the first argument is true?", "body": "<p>When I run this code and provide no input when asked for <code>lname</code>, then the <code>if</code> condition evaluates to true and executes the line <code>println!(\"lname is empty\");</code> but why doesn't the <code>debug_assert</code> print anything?</p>\n\n<pre><code>use std::io;\n\nstruct Test {\n    fname: String,\n    lname: String,\n}\n\nfn main() {\n    println!(\"Enter your point!\");\n\n    println!(\"Please input fname: \");\n\n    let mut p = Test { fname: String::new(), lname: String::new() };    \n\n    io::stdin().read_line(&amp;mut p.fname).expect(\"something went wrong!\");\n\n    println!(\"Please input lname: \");\n\n    io::stdin().read_line(&amp;mut p.lname).expect(\"something went wrong!\");\n\n    let p = Test { fname: p.fname.trim().to_string(), lname: p.lname.trim().to_string() };\n\n    if p.lname == \"\" {\n        println!(\"lname is empty\");\n    }\n\n    if p.fname == \"\" {\n        println!(\"fname is empty\");\n    }\n\n    debug_assert!(p.lname == \"\", \"Last name is empty\");\n\n    println!(\"Full name: {} {}\", p.fname, p.lname);\n}\n</code></pre>\n\n<p>Additionally, is shadowing the previous variable <code>p</code> to remove the line line breaks at the end a good way to do this?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": 4, "last_activity_date": 1459099018, "creation_date": 1459099018, "answer_id": 36250262, "question_id": 36250091, "link": "https://stackoverflow.com/questions/36250091/how-do-i-write-the-signature-of-a-function-that-displays-an-error-and-exits-the/36250262#36250262", "title": "How do I write the signature of a function that displays an error and exits the program?", "body": "<p>You can add the return type <code>!</code> to <code>error_out</code> to indicate that it doesn't return. Then its type doesn't matter and it is OK to call it in <code>unwrap_or_else</code>:</p>\n\n<pre><code>use std::process::exit;\n\nfn error_out(e: &amp;str) -&gt; ! {\n    writeln!(&amp;mut stderr(), \"{}\", e).expect(format!(\"Failed to print error: {}\", e).as_str());\n    exit(1);\n}\n\nfn main() {\n    let filename: String = env::args().nth(1).unwrap_or_else(|| error_out(\"No filename provided\"));\n    println!(\"{}\", filename);\n}\n</code></pre>\n"}], "owner": {"reputation": 9666, "user_id": 506962, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/72d17716d70c471dead0bd8c6c8e15f8?s=128&d=identicon&r=PG&f=1", "display_name": "J V", "link": "https://stackoverflow.com/users/506962/j-v"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 36250262, "answer_count": 1, "score": 2, "last_activity_date": 1459112211, "creation_date": 1459097954, "last_edit_date": 1459112211, "question_id": 36250091, "link": "https://stackoverflow.com/questions/36250091/how-do-i-write-the-signature-of-a-function-that-displays-an-error-and-exits-the", "title": "How do I write the signature of a function that displays an error and exits the program?", "body": "<p>There are tons of articles on error handling in Rust, but they all seem to result in returning an error object causing a panic or something like that.</p>\n\n<p>I want to check user input for an error, so I can't just pass it down the stack and I can't just panic (It's hardly user friendly)</p>\n\n<p>Currently I'm using an empty <code>if let</code> with an <code>else</code> block to handle this, but it seems ugly and awkward. In the mountain of convenience methods in <code>Option</code> and <code>Result</code>, is there nothing that allows me to call a final method?</p>\n\n<p><code>unwrap_or_else</code> just complains that the closure return value is the wrong type.</p>\n\n<pre><code>use std::io::{stderr, Write};\nuse std::env;\nuse std::process::exit;\n\nfn error_out(e: &amp;str) {\n    writeln!(&amp;mut stderr(), \"{}\", e).expect(format!(\"Failed to print error: {}\", e).as_str());\n    exit(1);\n}\n\nfn main() {\n    if let Some(filename) = env::args().nth(1) {} else {\n        error_out(\"No filename provided\");\n    };\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "owner": {"reputation": 1845, "user_id": 716390, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/03291df3e8db07ec188e120f66624272?s=128&d=identicon&r=PG", "display_name": "kriomant", "link": "https://stackoverflow.com/users/716390/kriomant"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 223, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1459134204, "creation_date": 1459096096, "last_edit_date": 1459134204, "question_id": 36249770, "link": "https://stackoverflow.com/questions/36249770/is-it-possible-to-expand-a-tuple-expression-into-a-comma-separated-list-in-a-rus", "title": "Is it possible to expand a tuple expression into a comma-separated list in a Rust syntax extension with quasiquoting?", "body": "<p>I'm writing a syntax extension for Rust and I want to generate a tuple expression using <code>quote_expr!</code>. What I do now is:</p>\n\n<pre><code>let tuple_values: Vec&lt;P&lt;Expr&gt;&gt; = ...;\nlet tuple_expr: cx.expr_tuple(sp, tuple_value);\nlet e = quote_stmt!(cx, let v = $tuple_expr);\n</code></pre>\n\n<p>It works, but I want to write something like:</p>\n\n<pre><code>let tuple_values: Vec&lt;P&lt;Expr&gt;&gt; = ...;\nlet e = quote_stmt!(cx, let v = ($tuple_values..));\n</code></pre>\n\n<p>i.e. expand <code>tuple_values</code> into a comma-separated list. Is it possible?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4204, "user_id": 1385087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20dd8c0e6b00089d1a8f39b54c3d46e3?s=128&d=identicon&r=PG", "display_name": "Konstantin V. Salikhov", "link": "https://stackoverflow.com/users/1385087/konstantin-v-salikhov"}, "edited": false, "score": 0, "creation_date": 1459096475, "post_id": 36249693, "comment_id": 60129198, "body": "There are <code>binary_search</code> and <code>insert</code> methods implemented for Vec. So just find the proper index and insert your new element there."}, {"owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "reply_to_user": {"reputation": 4204, "user_id": 1385087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20dd8c0e6b00089d1a8f39b54c3d46e3?s=128&d=identicon&r=PG", "display_name": "Konstantin V. Salikhov", "link": "https://stackoverflow.com/users/1385087/konstantin-v-salikhov"}, "edited": false, "score": 0, "creation_date": 1459096873, "post_id": 36249693, "comment_id": 60129340, "body": "What makes this question bad?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1459102284, "post_id": 36249693, "comment_id": 60131275, "body": "@SoniEx2 I&#39;m not sure why people down-voted it, but please add some code. This would name certain variables -- answers could easily refer to those names. You could also ask &quot;What&#39;s the <b>best</b> [or <b>shortest</b>] way to...&quot;."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1459112823, "post_id": 36249693, "comment_id": 60135002, "body": "This question is equivalent to &quot;what&#39;s the most efficient way to hammer in nails with a screwdriver?&quot;. Inserting into the middle of the vector <b>requires</b> you to move all the subsequent items down, which will always be an O(n) operation. Use a datastructure that maintains the sorted nature. A <a href=\"http://doc.rust-lang.org/std/collections/struct.BinaryHeap.html\" rel=\"nofollow noreferrer\"><code>BinaryHeap</code></a> is one possibility."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459134712, "post_id": 36249693, "comment_id": 60140234, "body": "Related question about <a href=\"http://stackoverflow.com/q/28678615/155423\">inserting <i>multiple</i> items into the middle of a vector</a>"}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 31, "last_activity_date": 1459164589, "last_edit_date": 1459164589, "creation_date": 1459117866, "answer_id": 36253479, "question_id": 36249693, "link": "https://stackoverflow.com/questions/36249693/whats-the-most-efficient-way-to-insert-an-element-into-a-sorted-vector/36253479#36253479", "title": "What&#39;s the most efficient way to insert an element into a sorted vector?", "body": "<p>The task consists of two steps: finding the insert-position with <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.binary_search\" rel=\"noreferrer\"><code>binary_search</code></a> and inserting with <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.insert\" rel=\"noreferrer\"><code>Vec::insert()</code></a>: </p>\n\n<pre><code>match v.binary_search(&amp;new_elem) {\n    Ok(pos) =&gt; {} // element already in vector @ `pos` \n    Err(pos) =&gt; v.insert(pos, new_elem),\n}\n</code></pre>\n\n<p>If you want to allow duplicate elements in your vector and thus want to insert already existing elements, you can write it even shorter:</p>\n\n<pre><code>let pos = v.binary_search(&amp;new_elem).unwrap_or_else(|e| e);\nv.insert(pos, new_elem);\n</code></pre>\n\n<hr>\n\n<p><strong>But</strong>: be aware that this has a runtime complexity of O(n). To insert into the middle, the vector has to move every element right of your insert-position one to the right.</p>\n\n<p>So you <strong>shouldn't</strong> use it to insert more than a few elements into a vector, which isn't tiny in size. Particularly, you <strong>shouldn't</strong> use this method to sort a vector, as this insertion sort algorithm runs in O(n\u00b2). </p>\n\n<p>A <a href=\"https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html\" rel=\"noreferrer\"><code>BinaryHeap</code></a> might be a better choice in such a situation. Each insert (<code>push</code>) has a runtime complexity of just O(log n) instead of O(n). You can even convert it into a sorted <code>Vec</code> with <code>into_sorted_vec()</code>, if you so desire. You can also continue to use the heap instead of converting it.</p>\n"}], "owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8623, "favorite_count": 0, "accepted_answer_id": 36253479, "answer_count": 1, "score": 14, "last_activity_date": 1519844000, "creation_date": 1459095634, "last_edit_date": 1519844000, "question_id": 36249693, "link": "https://stackoverflow.com/questions/36249693/whats-the-most-efficient-way-to-insert-an-element-into-a-sorted-vector", "title": "What&#39;s the most efficient way to insert an element into a sorted vector?", "body": "<p>I have a sorted <code>v: Vec&lt;EventHandler&lt;T&gt;&gt;</code> and I want to insert an element into it while keeping it sorted. What's the most efficient way to do so? Rust doesn't seem to have a built-in way to do it.</p>\n\n<p><code>EventHandler&lt;T&gt;</code> is as follows:</p>\n\n<pre><code>struct EventHandler&lt;T: Event + ?Sized&gt; {\n    priority: i32,\n    f: fn(&amp;mut T),\n}\n</code></pre>\n\n<p>Because of how sorting works, inserting and sorting would be inefficient, with <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by\" rel=\"noreferrer\"><code>O(n log n)</code> time complexity and <code>2*n</code> allocation cost</a>.</p>\n"}, {"tags": ["io", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459134563, "post_id": 36245551, "comment_id": 60140214, "body": "<i>If</i> you are looking for a review of your code, then Code Review may be a better location. Please read the <a href=\"http://meta.codereview.stackexchange.com/q/5777/32521\">guide for Code Review for SO users</a> to see if your question would make more sense over there."}], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 3, "last_activity_date": 1459111763, "last_edit_date": 1459111763, "creation_date": 1459069800, "answer_id": 36245673, "question_id": 36245551, "link": "https://stackoverflow.com/questions/36245551/less-verbose-way-to-write-all-to-a-write-in-rust/36245673#36245673", "title": "Less verbose way to write_all to a Write in Rust", "body": "<p>The documentation is wrong. <code>std::io::Write::write_all</code> <em>does</em> retry if <code>std::io::Write::write</code> returns <code>ErrorKind::Interrupted</code>, as can be seen <a href=\"https://github.com/rust-lang/rust/blob/1.7.0/src/libstd/io/mod.rs#L983-L994\" rel=\"nofollow\">in the source</a>:</p>\n\n<pre><code>fn write_all(&amp;mut self, mut buf: &amp;[u8]) -&gt; Result&lt;()&gt; {\n    while !buf.is_empty() {\n        match self.write(buf) {\n            Ok(0) =&gt; return Err(Error::new(ErrorKind::WriteZero,\n                                           \"failed to write whole buffer\")),\n            Ok(n) =&gt; buf = &amp;buf[n..],\n            Err(ref e) if e.kind() == ErrorKind::Interrupted =&gt; {}\n            Err(e) =&gt; return Err(e),\n        }\n    }\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 466, "favorite_count": 0, "accepted_answer_id": 36245673, "answer_count": 1, "score": 1, "last_activity_date": 1459134436, "creation_date": 1459068735, "last_edit_date": 1459134436, "question_id": 36245551, "link": "https://stackoverflow.com/questions/36245551/less-verbose-way-to-write-all-to-a-write-in-rust", "title": "Less verbose way to write_all to a Write in Rust", "body": "<p>I created a helper to write all data in a slice to a <code>Write</code> type but it's very verbose and easy to get wrong. I was wondering if there's a better way to ignore the <code>ErrorKind::Interrupted</code> (from a <code>EINTR</code>).</p>\n\n<pre><code>fn _write_all&lt;OutputType&gt; (w : &amp;mut OutputType, buf : &amp;[u8]) -&gt; Result&lt;(), io::Error&gt;\nwhere OutputType: Write {\n    let mut total_written : usize = 0;\n    while total_written &lt; buf.len() {\n        match w.write(&amp;buf[total_written..]) {\n            Err(e) =&gt; {\n                match e.kind() {\n                    ErrorKind::Interrupted =&gt; continue,\n                    _ =&gt; return Err(e),\n                }\n            },\n            Ok(cur_written) =&gt; {\n                if cur_written == 0 {\n                     return Err(Error::new(ErrorKind::UnexpectedEof, \"Write EOF\"));\n                }\n                total_written += cur_written;\n            }\n        }\n    }\n    Ok(())\n}\n</code></pre>\n\n<p>I have a feeling most users are going to use the <code>try!</code> macro and simply ignore <code>ErrorKind::Interrupted</code> and be surprised when programs start to fail simply due to a busy system with an <code>EINTR</code>.</p>\n\n<p>If there's a better way to write this I would be very keen to hear about it.</p>\n\n<p>A similar problem happens with input, including the nested match.</p>\n\n<p>For the record, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0517-io-os-reform.md\" rel=\"nofollow\">RFC 517 (IO / OS Reform)</a> states that <code>write_all</code> ignores <code>EINTR</code> errors, but <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#method.write_all\" rel=\"nofollow\">the documentation for <code>Write::write_all</code></a> mentions that <code>write_all</code> returns the first error encountered, requiring a similar loop as presented.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "edited": false, "score": 0, "creation_date": 1459070570, "post_id": 36245705, "comment_id": 60121311, "body": "What is wrong with this reasoning: Suppose I have an <code>Arc</code> pointing to <code>[1,2,3]</code> with a reference count 1. I make a clone and dereference to make reference count 2, then slice to make a reference to <code>[2,3]</code>, and finally wrap it up with an <code>Arc::new</code>. The <code>Arc</code> for <code>[2,3]</code> will have reference count 1, even though there is another reference to the data from <code>[1,2,3]</code>, but the backing array can&#39;t be dropped until both refs are lost. If the <code>Arc</code> for <code>[2,3]</code> is dropped, this will cause the rc for <code>[1,2,3]</code> to drop back to 1, allowing the backing array to be dropped after losing the first ref."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "edited": false, "score": 0, "creation_date": 1459071053, "post_id": 36245705, "comment_id": 60121457, "body": "@MarioCarneiro That&#39;s just not how pointers <i>work</i>.  For that to be possible, you&#39;d have to have both <code>Arc</code>s pointing to the same <code>ArcInner</code> (so they share the reference count), whilst having different <code>data</code> fields.  It&#39;s fundamentally impossible.  The reference counts and the data being stored are <i>one and the same</i>.  The only way for this to work is to do what <code>owning_ref</code> does: store <i>both</i> the ref-counted data itself <i>and</i> the subset of that data you&#39;re interested in."}, {"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "edited": false, "score": 0, "creation_date": 1459071306, "post_id": 36245705, "comment_id": 60121532, "body": "This might be a confusion on my part, but I thought that a <code>[T]</code> was a pair of pointers to the start and end of the array, or something like that. So the slices corresponding to <code>[1,2,3]</code> and <code>[2,3]</code> would not be the same data, but would be pointing to the same data. The <code>Arc</code>s would keep these pointers instead of the data itself. Or are you saying that they are holding the whole array next to the reference counts? (P.S.: I think I will use <code>owning_ref</code> since it seems that they have solved my exact problem.)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "edited": false, "score": 0, "creation_date": 1459071426, "post_id": 36245705, "comment_id": 60121560, "body": "@MarioCarneiro No, <code>[T]</code> <i>is</i> the data.  Think about it like this: <code>&amp;[T]</code> is comprised of a pointer to the first element and the number of elements.  <code>[T]</code> is what that pointer is pointing at.  <code>ArcInner</code> contains the <i>actual</i> data, right there.  That&#39;s what I meant when I said it was being stored inline."}, {"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "edited": false, "score": 0, "creation_date": 1459071617, "post_id": 36245705, "comment_id": 60121616, "body": "Ooohh... now it makes more sense why <code>Arc::new</code> can&#39;t work here, since the length of the slice isn&#39;t even stored in the struct. Thanks!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1459070007, "creation_date": 1459070007, "answer_id": 36245705, "question_id": 36245170, "link": "https://stackoverflow.com/questions/36245170/how-to-take-a-subslice-of-an-arct/36245705#36245705", "title": "How to take a subslice of an Arc&lt;[T]&gt;", "body": "<p>You can't.</p>\n\n<p>To explain why, let's look at what <code>Arc</code> actually is under the covers.</p>\n\n<pre><code>pub struct Arc&lt;T: ?Sized&gt; {\n    ptr: Shared&lt;ArcInner&lt;T&gt;&gt;,\n}\n</code></pre>\n\n<p><code>Shared&lt;T&gt;</code> is an internal wrapper type that essentially amounts to \"<code>*const T</code>, but can't be zero\"; so it's basically a <code>&amp;T</code> without a lifetime.  This means that you can't adjust the slice at this level; if you did, you'd end up trying to point to an <code>ArcInner</code> that doesn't exist.  Thus, if this is possible, it must involve some manipulation of the <code>ArcInner</code>.</p>\n\n<p><code>ArcInner&lt;T&gt;</code> is defined as follows:</p>\n\n<pre><code>struct ArcInner&lt;T: ?Sized&gt; {\n    strong: atomic::AtomicUsize,\n    weak: atomic::AtomicUsize,\n    data: T,\n}\n</code></pre>\n\n<p><code>strong</code> and <code>weak</code> are just the number of strong and weak handles to this allocation respectively.  <code>data</code> is the actual contents of the allocation, stored inline.  And <em>that's the problem.</em></p>\n\n<p>In order for your code to work as you want, <code>Arc</code> would not only have to refer to <code>data</code> by another pointer (rather than storing it inline), but it would also have to store the reference counts and data in different places, so that you could take a slice of the data, but retain the same reference counts.</p>\n\n<p>So you can't do what you're asking.</p>\n\n<hr>\n\n<p>One thing you can do <em>instead</em> is to store the slicing information <em>alongside</em> the <code>Arc</code>.  The <a href=\"https://crates.io/crates/owning_ref\" rel=\"nofollow\"><code>owning_ref</code></a> crate has <a href=\"http://kimundi.github.io/owning-ref-rs/owning_ref/index.html#atomic-reference-counted-slices-that-share-ownership-of-the-backing-storage\" rel=\"nofollow\">an example that does exactly this</a>.</p>\n"}], "owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 393, "favorite_count": 0, "accepted_answer_id": 36245705, "answer_count": 1, "score": 0, "last_activity_date": 1459070007, "creation_date": 1459065785, "question_id": 36245170, "link": "https://stackoverflow.com/questions/36245170/how-to-take-a-subslice-of-an-arct", "title": "How to take a subslice of an Arc&lt;[T]&gt;", "body": "<pre><code>fn subslice(a: Arc&lt;[T]&gt;, begin: usize, end: usize) -&gt; Arc&lt;[T]&gt; {\n    Arc::new(a[begin..end])\n}\n</code></pre>\n\n<p>The above \"obvious implementation\" of the subslicing operation for <code>Arc&lt;[T]&gt;</code> does not work because <code>a[begin..end]</code> has type <code>[T]</code>, which is unsized. <code>Arc&lt;T&gt;</code> has the curious property that the type itself does not require <code>T: Sized</code>, but the constructor <code>Arc::new</code> does, so I'm at a loss for how to construct this subslice.</p>\n"}, {"tags": ["rust", "slice", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 163028, "user_id": 477878, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qounX.jpg?s=128&g=1", "display_name": "Joachim Isaksson", "link": "https://stackoverflow.com/users/477878/joachim-isaksson"}, "edited": false, "score": 2, "creation_date": 1459063226, "post_id": 36244793, "comment_id": 60119647, "body": "<a href=\"https://play.rust-lang.org/?gist=f40ec2e627267bd62b4a&amp;version=stable\" rel=\"nofollow noreferrer\">A simple playground showing how to use it</a>"}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 16, "last_activity_date": 1459085787, "last_edit_date": 1459085787, "creation_date": 1459062603, "answer_id": 36244793, "question_id": 36244762, "link": "https://stackoverflow.com/questions/36244762/how-to-operate-on-2-mutable-slices-of-a-rust-array/36244793#36244793", "title": "How to operate on 2 mutable slices of a Rust array?", "body": "<blockquote>\n  <p>Is there anything unsafe about having two mutable references to nonoverlapping slices of the same array?</p>\n</blockquote>\n\n<p>There isn't, but Rust's type system cannot currently detect that you're taking mutable references to two non-overlapping parts of a slice. As this is a common use case, Rust provides a safe function to do exactly what you want: <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut\" rel=\"noreferrer\"><code>std::slice::split_at_mut</code></a>.</p>\n\n<blockquote>\n  <p><code>fn split_at_mut(&amp;mut self, mid: usize) -&gt; (&amp;mut [T], &amp;mut [T])</code></p>\n  \n  <p>Divides one <code>&amp;mut</code> into two at an index.</p>\n  \n  <p>The first will contain all indices from <code>[0, mid)</code> (excluding the index\n  <code>mid</code> itself) and the second will contain all indices from <code>[mid, len)</code>\n  (excluding the index <code>len</code> itself).</p>\n</blockquote>\n"}, {"tags": [], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "is_accepted": false, "score": 3, "last_activity_date": 1459063567, "creation_date": 1459063567, "answer_id": 36244898, "question_id": 36244762, "link": "https://stackoverflow.com/questions/36244762/how-to-operate-on-2-mutable-slices-of-a-rust-array/36244898#36244898", "title": "How to operate on 2 mutable slices of a Rust array?", "body": "<p>The final code is:</p>\n\n<pre><code>fn main() {\n    let mut mem : [i32; 2048] = [1; 2048];\n    let (mut array0, mut array1) = mem[..].split_at_mut(768);\n    array0[0] = 4;\n    println!(\"{:?} {:?}\", array0[0], array1[0]);\n}\n</code></pre>\n\n<p>Wow that was such a perfect match. Thanks for finding this!</p>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1817, "favorite_count": 1, "accepted_answer_id": 36244793, "answer_count": 2, "score": 8, "last_activity_date": 1499954226, "creation_date": 1459062278, "last_edit_date": 1499954226, "question_id": 36244762, "link": "https://stackoverflow.com/questions/36244762/how-to-operate-on-2-mutable-slices-of-a-rust-array", "title": "How to operate on 2 mutable slices of a Rust array?", "body": "<p>I have a function that needs to operate on two parts of a single array.\nThe purpose is to be able to build an <code>#[nostd]</code> allocator that can return a variable slice of a bigger array to the caller and hang on to the remainder of the array for future allocations.</p>\n\n<p>Here's example code that fails:</p>\n\n<pre><code>fn split&lt;'a&gt;(mut item: &amp;'a mut [i32], place: usize) -&gt; (&amp;'a mut [i32], &amp;'a mut [i32]) {\n    (&amp;mut item[0..place], &amp;mut item[place..])\n}\n\nfn main() {\n    let mut mem: [i32; 2048] = [1; 2048];\n    let (mut array0, mut array1) = split(&amp;mut mem[..], 768);\n    array0[0] = 4;\n    println!(\"{:?} {:?}\", array0[0], array1[0]);\n}\n</code></pre>\n\n<p>the error is as follows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*item` as mutable more than once at a time\n --&gt; src/main.rs:2:32\n  |\n2 |     (&amp;mut item[0..place], &amp;mut item[place..])\n  |           ----                 ^^^^ second mutable borrow occurs here\n  |           |\n  |           first mutable borrow occurs here\n3 | }\n  | - first borrow ends here\n</code></pre>\n\n<p>This pattern also can be helpful for in-place quicksort, etc.</p>\n\n<p>Is there anything unsafe about having two mutable references to nonoverlapping slices of the same array? If there's no way in pure Rust, is there a \"safe\" <code>unsafe</code> incantation that will allow it to proceed?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 21316, "user_id": 526217, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/db561d0fda29a204506bdadd6b802047?s=128&d=identicon&r=PG", "display_name": "evilone", "link": "https://stackoverflow.com/users/526217/evilone"}, "is_accepted": true, "score": 1, "last_activity_date": 1459112016, "last_edit_date": 1459112016, "creation_date": 1459060419, "answer_id": 36244577, "question_id": 36244068, "link": "https://stackoverflow.com/questions/36244068/how-to-make-rust-btreemapget-return-a-string/36244577#36244577", "title": "How to make Rust BTreeMap::get return a String?", "body": "<p>The <code>get()</code> function returns an <code>Option</code> type with a reference to the value corresponding to the key. So you have stored a <code>String</code> on the heap and this function returns a reference to that <code>String</code> based on the key.</p>\n\n<p>I made your example a little shorter. You had an uninitialized <code>BTreeMap</code>, so I initialized it first - <code>let mut map: BTreeMap&lt;String, String&gt; = BTreeMap::new();</code>. In your case you can easily use an <code>if let</code> statement.</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn main() {\n    let mut map: BTreeMap&lt;String, String&gt; = BTreeMap::new();\n    map.insert(\"name\".into(), \"aho\".into());\n\n    if let Some(name) = map.get(\"name\") {\n        println!(\"welcome, {}\", name);\n    } else {\n        println!(\"welcome, stranger\");\n    }\n}\n</code></pre>\n\n<p>But if you really want to return a <code>String</code> value, you must first extract the <code>Some(name)</code> part of the <code>Option</code> type and then clone it using a <code>clone()</code> function. Because <code>BTreeMap</code> owns this <code>String</code> value, you can't move it out without cloning it. <code>clone()</code> makes a copy of the original value.</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn main() {\n    let mut map: BTreeMap&lt;String, String&gt; = BTreeMap::new();\n    map.insert(\"name\".into(), \"aho\".into());\n\n    if let Some(name) = map.get(\"name\") {\n        let name: String = name.clone();\n        println!(\"welcome, {}\", name);\n    } else {\n        println!(\"welcome, stranger\");\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2735, "user_id": 1498303, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4e0e6cbfe2aae8f0feca2872f9363779?s=128&d=identicon&r=PG", "display_name": "songhir", "link": "https://stackoverflow.com/users/1498303/songhir"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 584, "favorite_count": 0, "accepted_answer_id": 36244577, "answer_count": 1, "score": -1, "last_activity_date": 1459112016, "creation_date": 1459055513, "last_edit_date": 1459111912, "question_id": 36244068, "link": "https://stackoverflow.com/questions/36244068/how-to-make-rust-btreemapget-return-a-string", "title": "How to make Rust BTreeMap::get return a String?", "body": "<pre><code>use std::collections::btree_map::BTreeMap;\nfn main() {\n    let mut map: BTreeMap&lt;String, String&gt;;\n    map.insert(\"name\".to_string(), \"aho\".to_string());\n    let name: String = map.get(\"name\");\n    println!(\"welcom, {}\", name);\n}\n</code></pre>\n\n<p><code>cargo build</code>:</p>\n\n<pre><code>src/main.rs:5:24: 5:39 error: mismatched types:\n expected `collections::string::String`,\n    found `core::option::Option&lt;&amp;collections::string::String&gt;`\n(expected struct `collections::string::String`,\n    found enum `core::option::Option`) [E0308]\nsrc/main.rs:5     let name: String = map.get(\"name\");\n                                     ^~~~~~~~~~~~~~~\nsrc/main.rs:5:24: 5:39 help: run `rustc --explain E0308` to see a detailed explanation\nerror: aborting due to previous error\nCould not compile `hello_world`.\n</code></pre>\n"}, {"tags": ["macros", "rust", "metaprogramming", "hygiene"], "answers": [{"comments": [{"owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "edited": false, "score": 0, "creation_date": 1459056854, "post_id": 36242507, "comment_id": 60118483, "body": "Thanks. So it&#39;s by design. &quot;if you you introduce an item in a macro you presumably want to actually use it,&quot; Well, I guess that&#39;s not how we are supposed to use what&#39;s advertised as a hygienic macro system..."}, {"owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "reply_to_user": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "edited": false, "score": 0, "creation_date": 1459061448, "post_id": 36242507, "comment_id": 60119303, "body": "@nodakai Sorry, I missed &quot;outside the macro&quot; there. In your case, if you put <code>println!(&quot;X = {}&quot;, X);</code> after the last <code>m!(3)</code>, what do you expect it to print?"}, {"owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "edited": false, "score": 0, "creation_date": 1459062299, "post_id": 36242507, "comment_id": 60119482, "body": "I&#39;d expect a &quot;unknown variable X&quot; error when I heard Rust macros were hygienic."}, {"owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "reply_to_user": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "edited": false, "score": 0, "creation_date": 1459080812, "post_id": 36242507, "comment_id": 60123976, "body": "And that <i>is</i> what you&#39;d get for a variable (<code>let</code> binding), but <code>const</code> doesn&#39;t introduce one."}], "tags": [], "owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "is_accepted": true, "score": 2, "last_activity_date": 1564628634, "last_edit_date": 1564628634, "creation_date": 1459038581, "answer_id": 36242507, "question_id": 36240846, "link": "https://stackoverflow.com/questions/36240846/why-does-macro-hygiene-not-prevent-collisions-between-multiple-const-definitions/36242507#36242507", "title": "Why does macro hygiene not prevent collisions between multiple const definitions?", "body": "<p>From <em>The Rust Programming Language</em> (first edition)'s <a href=\"https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html#hygiene\" rel=\"nofollow noreferrer\">section on macro hygiene</a>:</p>\n\n<blockquote>\n  <p>This [i.e. renaming] holds for <code>let</code> bindings and loop labels, but not for items</p>\n</blockquote>\n\n<p>The Rust reference defines <a href=\"https://doc.rust-lang.org/reference/items.html\" rel=\"nofollow noreferrer\">items</a>:</p>\n\n<blockquote>\n  <p>An <em>item</em> is a component of a crate. Items are organized within a crate\n  by a nested set of modules. Every crate has a single \"outermost\"\n  anonymous module; all further items within the crate have paths within\n  the module tree of the crate.</p>\n  \n  <p>Items are entirely determined at compile-time, generally remain fixed\n  during execution, and may reside in read-only memory.</p>\n  \n  <p>There are several kinds of items:</p>\n  \n  <ul>\n  <li>modules</li>\n  <li><code>extern crate</code> declarations</li>\n  <li><code>use</code> declarations</li>\n  <li>function definitions</li>\n  <li>type definitions</li>\n  <li>struct definitions</li>\n  <li>enumeration definitions</li>\n  <li>union definitions</li>\n  <li><strong>constant items</strong></li>\n  <li>static items</li>\n  <li>trait definitions</li>\n  <li>implementations</li>\n  <li><code>extern</code> blocks</li>\n  </ul>\n</blockquote>\n\n<p>This makes sense: if you you introduce an item in a macro you presumably want to actually use it from other items/modules/crates (and thus outside the macro), but you can't if you don't know its name, so the compiler can't rename it.</p>\n"}], "owner": {"reputation": 6841, "user_id": 1190965, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/3e74ed8e572542a718df5f15ead40581?s=128&d=identicon&r=PG", "display_name": "nodakai", "link": "https://stackoverflow.com/users/1190965/nodakai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 255, "favorite_count": 0, "accepted_answer_id": 36242507, "answer_count": 1, "score": 2, "last_activity_date": 1564628724, "creation_date": 1459026048, "last_edit_date": 1564628724, "question_id": 36240846, "link": "https://stackoverflow.com/questions/36240846/why-does-macro-hygiene-not-prevent-collisions-between-multiple-const-definitions", "title": "Why does macro hygiene not prevent collisions between multiple const definitions?", "body": "<p>I thought \"hygiene\" would prevent collisions between <code>X</code>s defined within my macro <code>m!</code> but that turned out not to be the case.  What am I misunderstanding?</p>\n\n<pre><code>macro_rules! m {\n    ($e:expr) =&gt; {\n        const X: i32 = $e;\n    };\n}\n\nm!(0);\nm!(1);\n\nfn main() {\n    m!(2);\n    m!(3);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fe02c9f349fea876d79db29b64a60c5a\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0428]: the name `X` is defined multiple times\n --&gt; src/main.rs:3:9\n  |\n3 |         const X: i32 = $e;\n  |         ^^^^^^^^^^^^^^^^^^\n  |         |\n  |         `X` redefined here\n  |         previous definition of the value `X` here\n...\n7 | m!(0);\n  | ------ in this macro invocation\n  |\n  = note: `X` must be defined only once in the value namespace of this module\n</code></pre>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1459000069, "post_id": 36235990, "comment_id": 60102549, "body": "I suspect that by taking a reference to <code>word</code>, this would be much faster than cloning the iterator. Do you think it&#39;s better to continue to use a move closure or to use the other answer (which changes the type of the closure parameter and clones the iterator)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1459000478, "post_id": 36235990, "comment_id": 60102680, "body": "@erip <i>than cloning the iterator</i> \u2014 it&#39;s not the entire iterator that is cloned; it&#39;s just an additional adapter that clones each element as it is yielded. My hope and gut feeling is that the two solutions would be equally performant. <b>I</b> believe that this solution would be more idiomatic in this case. Note that you don&#39;t need a <code>move</code> closure anyway (I&#39;ve updated)."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1459000516, "post_id": 36235990, "comment_id": 60102699, "body": "Thanks for the tips. Very helpful and comprehensive."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1459000692, "post_id": 36235990, "comment_id": 60102760, "body": "I also think this is more idiomatic. Remove the type annotations wherever possible... (IMO :3)"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 3, "creation_date": 1459000733, "post_id": 36235990, "comment_id": 60102779, "body": "Regarding the last note: you can also move the additional <code>sorted_chars</code> function definition into the other function. Avoids global namespace clutter."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1459000971, "last_edit_date": 1459000971, "creation_date": 1458999751, "answer_id": 36235990, "question_id": 36235708, "link": "https://stackoverflow.com/questions/36235708/how-do-i-capture-variables-outside-the-scope-of-a-closure-in-rust/36235990#36235990", "title": "How do I capture variables outside the scope of a closure in Rust?", "body": "<p>This doesn't have anything to do with capturing variables in the closure. Let's check out the error message again, reformatted a bit:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>type mismatch:\n    the type `[closure@&lt;anon&gt;:5:25: 14:6 s_sorted:_, s:_]`\n    implements the trait `for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r str,)&gt;`,\n    but the trait `core::ops::FnMut&lt;(&amp;&amp;str,)&gt;` is required\n    (expected &amp;-ptr, found str)\n</code></pre>\n\n<p>And more clearly:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>found:    for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r str,)&gt;\nexpected:         core::ops::FnMut&lt;(&amp;&amp;str,)&gt;\n</code></pre>\n\n<p>And zooming in even further:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>found:    &amp;'r str\nexpected: &amp;&amp;str\n</code></pre>\n\n<p>The culprit is this: <code>|word: &amp;str|</code>.</p>\n\n<p>You have declared that your closure accepts a string slice, but <strong>that's not what the iterator yields</strong>. <code>v</code> is a slice of <code>&amp;str</code>, and an iterator over a slice returns references to the items in the slice. Each iterator element is a <code>&amp;&amp;str</code>.</p>\n\n<p>Change your closure to <code>|&amp;word|</code> and it will work. This uses pattern matching to dereference the closure argument once before the value is bound to <code>word</code>. Equivalently (but less idiomatically), you could use <code>|word|</code> and then <code>*word</code> inside the closure.</p>\n\n<hr>\n\n<p>Additionally...</p>\n\n<ol>\n<li><p>You don't need to restrict yourself to <code>'static</code> strings:</p>\n\n<pre><code>pub fn anagrams_for&lt;'a&gt;(s: &amp;str, v: &amp;[&amp;'a str]) -&gt; Vec&lt;&amp;'a str&gt; {\n</code></pre></li>\n<li><p>It doesn't need to be a <code>move</code> closure.</p></li>\n<li>Extract the logic of creating the vector of sorted chars. This helps ensure that the logic stays consistent between the two <em>and</em> means you don't have to declare those vectors as mutable for longer than needed.</li>\n</ol>\n\n\n\n<pre><code>fn sorted_chars(s: &amp;str) -&gt; Vec&lt;char&gt; { \n    let mut s_sorted: Vec&lt;_&gt; = s.to_lowercase().chars().collect();\n    s_sorted.sort();\n    s_sorted\n}\n\npub fn anagrams_for&lt;'a&gt;(s: &amp;str, v: &amp;[&amp;'a str]) -&gt; Vec&lt;&amp;'a str&gt; {\n    let s_sorted = sorted_chars(s);\n\n    v.iter().filter_map(|&amp;word| {\n        let word_sorted = sorted_chars(word);\n\n        if word_sorted == s_sorted &amp;&amp; s.to_lowercase() != word.to_lowercase() {\n            Some(word)\n        } else {\n            None\n        }\n    }).collect()\n}\n\nfn main() {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1458999816, "post_id": 36235992, "comment_id": 60102465, "body": "Well that was pretty silly. Would you mind adding why the <code>cloned</code> call is needed as an edit?"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 3, "last_activity_date": 1459000224, "last_edit_date": 1459000224, "creation_date": 1458999758, "answer_id": 36235992, "question_id": 36235708, "link": "https://stackoverflow.com/questions/36235708/how-do-i-capture-variables-outside-the-scope-of-a-closure-in-rust/36235992#36235992", "title": "How do I capture variables outside the scope of a closure in Rust?", "body": "<p>The issue here is that you are attempting to create a <code>Vec&lt;&amp;'static str&gt;</code> from a sequence of <code>&amp;&amp;'static str</code>.</p>\n\n<pre><code>pub fn anagrams_for(s: &amp;'static str, v: &amp;[&amp;'static str]) -&gt; Vec&lt;&amp;'static str&gt; {\n    let mut s_sorted: Vec&lt;_&gt; = s.to_lowercase().chars().collect();\n    s_sorted.sort();\n\n    v.iter().cloned().filter_map(|word: &amp;'static str| {\n        let mut word_sorted: Vec&lt;_&gt; = word.to_lowercase().chars().collect();\n        word_sorted.sort();\n\n        if word_sorted == s_sorted &amp;&amp; s.to_lowercase() != word.to_lowercase() {\n            Some(word)\n        } else {\n            None\n        }\n    }).collect()\n}\n</code></pre>\n\n<p>The <code>cloned</code> call is necessary to go from a <code>&amp;&amp;'static str</code> to a <code>&amp;'static str</code>. This is an inexpensive operation since a <code>&amp;str</code> is just a pointer to some utf8 sequence, plus a length.</p>\n\n<p>Edit: actually an even better solution is to clone as late as possible</p>\n\n<pre><code>v.iter().filter_map(move |word: &amp;&amp;'static str| { // &lt;--- adapted the type to what is actually received\n    let mut word_sorted: Vec&lt;_&gt; = word.to_lowercase().chars().collect();\n    word_sorted.sort();\n\n    if word_sorted == s_sorted &amp;&amp; s.to_lowercase() != word.to_lowercase() {\n        Some(word.clone()) // &lt;--- moved clone operation here\n    } else {\n        None\n    }\n}).collect()\n</code></pre>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 791, "favorite_count": 0, "accepted_answer_id": 36235990, "answer_count": 2, "score": 1, "last_activity_date": 1459000971, "creation_date": 1458997958, "question_id": 36235708, "link": "https://stackoverflow.com/questions/36235708/how-do-i-capture-variables-outside-the-scope-of-a-closure-in-rust", "title": "How do I capture variables outside the scope of a closure in Rust?", "body": "<p>I'm writing a case-insensitive anagram finder given a word and a list of words. I have the following code:</p>\n\n<pre><code>pub fn anagrams_for(s: &amp;'static str, v: &amp;[&amp;'static str]) -&gt; Vec&lt;&amp;'static str&gt; {\n    let mut s_sorted: Vec&lt;_&gt; = s.to_lowercase().chars().collect();\n    s_sorted.sort();\n\n    v.iter().filter_map(move |word: &amp;str| {\n        let mut word_sorted: Vec&lt;_&gt; = word.to_lowercase().chars().collect();\n        word_sorted.sort();\n\n        if word_sorted == s_sorted &amp;&amp; s.to_lowercase() != word.to_lowercase() {\n            Some(word)\n        } else {\n            None\n        }\n    }).collect()\n}\n</code></pre>\n\n<p>The logic of this is to sort the lowercase given word, and for each word in the vector, do the same. If the words are different pre-sort (to eliminate self-anagrams) but are the same post-sort, add it to the output.</p>\n\n<p>The above seems to have problems capturing <code>s</code> and <code>s_sorted</code> from the surrounding scope, though, because when I compile I get the following error:</p>\n\n<blockquote>\n  <p>error: type mismatch: the type <code>[closure@src/lib.rs:23:25: 32:6 s_sorted:_, s:_]</code> implements the trait <code>for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r str,)&gt;</code>, but the trait <code>core::ops::FnMut&lt;(&amp;&amp;str,)&gt;</code> is required (expected &amp;-ptr, found str)</p>\n</blockquote>\n\n<p>When I looked at the description of this error type ([E0281]), I found the following TL;DR:</p>\n\n<blockquote>\n  <p>The issue in this case is that <code>foo</code> is defined as accepting a <code>Fn</code> with no\n  arguments, but the closure we attempted to pass to it requires one argument.</p>\n</blockquote>\n\n<p>This is confusing because I thought <a href=\"https://doc.rust-lang.org/book/closures.html#move-closures\" rel=\"nofollow\">move closures capture variables</a> from the surrounding scope.</p>\n\n<p>What am I missing?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1458997580, "creation_date": 1458997580, "answer_id": 36235654, "question_id": 36235377, "link": "https://stackoverflow.com/questions/36235377/what-is-the-best-way-to-be-aware-of-the-loss-of-precision-when-converting-a-usiz/36235654#36235654", "title": "What is the best way to be aware of the loss of precision when converting a usize to a f64 in Rust?", "body": "<p>Well, 64-bit floating point representation is accurate to <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format#IEEE_754_double-precision_binary_floating-point_format:_binary64\" rel=\"nofollow\">15\u201317 significant decimal digits</a>, so you can estimate potential inaccuracy based on that. You <em>could</em> get more fancy to saying that such-and-such a float representation has a margin of error of <code><em>x</em></code>, so that that particular bit sequence represents values in the range <code>self - <em>x</em></code> to <code>self + <em>x</em></code>, but that\u2019s so rarely a useful concept that you won\u2019t be likely to find much code to assist you on it.</p>\n"}, {"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1458998731, "creation_date": 1458998731, "answer_id": 36235828, "question_id": 36235377, "link": "https://stackoverflow.com/questions/36235377/what-is-the-best-way-to-be-aware-of-the-loss-of-precision-when-converting-a-usiz/36235828#36235828", "title": "What is the best way to be aware of the loss of precision when converting a usize to a f64 in Rust?", "body": "<p>The <a href=\"https://crates.io/crates/conv\" rel=\"nofollow\"><code>conv</code></a> crate was designed to handle this.  The <code>ValueFrom</code>/<code>ValueInto</code> traits perform value-preserving conversions that will return an error if the input value cannot be exactly represented in the output type.  For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/*!\nAdd this to your `Cargo.toml`:\n\n```cargo\n[dependencies]\nconv = \"0.3.2\"\n```\n*/\nextern crate conv;\n\nuse conv::prelude::*;\n\nfn main() {\n    let a = std::u32::MAX;\n    println!(\"u32::MAX -&gt; f32: {:?}\", a.value_as::&lt;f32&gt;());\n    println!(\"u32::MAX -&gt; f64: {:?}\", a.value_as::&lt;f64&gt;());\n}\n</code></pre>\n\n<p>Outputs:</p>\n\n<pre><code>u32::MAX -&gt; f32: Err(PosOverflow(..))\nu32::MAX -&gt; f64: Ok(4294967295)\n</code></pre>\n\n<p>Alternately, you can replicate the checking <code>conv</code> does by hand: check that the input integer does not fall outside the range of integers the floating point type can exactly represent.  Specifically:</p>\n\n<ul>\n<li><code>f32</code>: \u00b116,777,215</li>\n<li><code>f64</code>: \u00b19,007,199,254,740,991</li>\n</ul>\n"}], "owner": {"reputation": 2481, "user_id": 327786, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/ZmpBr.jpg?s=128&g=1", "display_name": "TlmaK0", "link": "https://stackoverflow.com/users/327786/tlmak0"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 0, "accepted_answer_id": 36235828, "answer_count": 2, "score": 2, "last_activity_date": 1459111557, "creation_date": 1458995864, "last_edit_date": 1459111557, "question_id": 36235377, "link": "https://stackoverflow.com/questions/36235377/what-is-the-best-way-to-be-aware-of-the-loss-of-precision-when-converting-a-usiz", "title": "What is the best way to be aware of the loss of precision when converting a usize to a f64 in Rust?", "body": "<p>This code:</p>\n\n<pre><code>use std::usize;\n\nfn main() {\n    fn main() {\n    let a = usize::MAX;\n    println!(\"{:?}\", a );\n    println!(\"{:?}\", a as f64 );\n}\n</code></pre>\n\n<p>returns </p>\n\n<pre><code>18446744073709551615\n18446744073709552000\n</code></pre>\n\n<p>what is the best way to be aware of this loss of precision?</p>\n"}, {"tags": ["rust", "lifetime", "object-lifetime", "lifetime-scoping"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1458990470, "post_id": 36233735, "comment_id": 60099736, "body": "I have not looked at it in detail but this looks like a linked list. A typical beginner mistake when trying build a linked list is for the parent node to borrow the child node with &amp; or &amp;mut rather than owning it with Box&lt;Node&gt;. Is this of any help?"}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1459015288, "post_id": 36233735, "comment_id": 60107870, "body": "That is helpful; however, I want to do this without requiring on the libstd crate...so Box, I believe, won&#39;t work for me here."}, {"owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1459015332, "post_id": 36233735, "comment_id": 60107890, "body": "That said, I&#39;m happy to have the lifetime of everything borrowed on the list to exist on the stack before anything is used. So I&#39;m not actually violating ownership here... the design is has a bunch of cells with the same lifetime living outside of the scope of the list structure. Then the list structure can simply make them refer to one another.  The problem that starblue pointed out is that you can&#39;t have 2 items on the stack come alive at &quot;the same time&quot; so then you can&#39;t have the later item refer to the earlier item."}], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 2, "last_activity_date": 1459003139, "creation_date": 1459003139, "answer_id": 36236571, "question_id": 36233735, "link": "https://stackoverflow.com/questions/36233735/lifetime-errors-with-a-simple-resource-allocator-struct/36236571#36236571", "title": "Lifetime errors with a simple resource Allocator struct", "body": "<p>The problem is that you always use the same lifetime <code>'a</code>. This forces <code>cell0</code> and <code>cell1</code> to have the same lifetime, which is not possible, because one has to be defined first. If you read the error message carefully you can see that it complains about the lifetime of the second not including the statement defining the first cell.</p>\n\n<p>I don't know if this is a bug or misfeature which implements lifetimes to strictly, or if it is inherent in the lifetime type system (I haven't seen a formal definition yet).</p>\n\n<p>I also don't know how to fix it. I fixed a similar problem in some example code I had by introducing additional lifetime variables, but I couldn't make it work for your code.</p>\n"}, {"tags": [], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "is_accepted": true, "score": 0, "last_activity_date": 1459059988, "creation_date": 1459059988, "answer_id": 36244532, "question_id": 36233735, "link": "https://stackoverflow.com/questions/36233735/lifetime-errors-with-a-simple-resource-allocator-struct/36244532#36244532", "title": "Lifetime errors with a simple resource Allocator struct", "body": "<p>Thanks to starblue's pointer, I decided to force the lifetimes of the allocator and cells to be the same by placing them into a struct and putting that struct on the stack.\nThe final result is here:</p>\n\n<pre><code>// This code is placed in the public domain\nstruct AllocatedMemory&lt;'a&gt; {\n   mem : &amp;'a mut [u8],\n   next : Option&lt;&amp;'a mut AllocatedMemory &lt;'a&gt; &gt;,\n}\nstruct Alloc&lt;'a&gt; {\n  glob : Option&lt;&amp;'a mut AllocatedMemory &lt;'a&gt; &gt;,\n}\n\nimpl&lt;'a&gt; Alloc &lt;'a&gt; {\n  fn alloc_cell(self : &amp;mut Alloc&lt;'a&gt;) -&gt; &amp;'a mut AllocatedMemory&lt;'a&gt; {\n      match self.glob {\n        Some(ref mut glob_next) =&gt; {\n             let rest : Option&lt;&amp;'a mut AllocatedMemory &lt;'a&gt; &gt;;\n             match glob_next.next {\n                 Some(ref mut root_cell) =&gt; {\n                    rest = std::mem::replace(&amp;mut root_cell.next, None);\n                 },\n                 None =&gt; rest = None,\n             }\n             match std::mem::replace(&amp;mut glob_next.next, rest) {\n                Some(mut root_cell) =&gt;\n                {\n                 return root_cell;\n                },\n                None =&gt; panic!(\"OOM\"),\n             }\n        },\n        None =&gt; panic!(\"Allocator not initialized\"),\n     }\n  }\n  fn free_cell(self : &amp;mut Alloc&lt;'a&gt;,\n               mut val : &amp; 'a mut AllocatedMemory&lt;'a&gt;) {\n      match self.glob {\n          Some(ref mut glob_next) =&gt; {\n              match std::mem::replace(&amp;mut glob_next.next ,None) {\n                  Some(mut x) =&gt; {\n                      let _discard = std::mem::replace(&amp;mut val.next, Some(x));\n                  },\n                  None =&gt; {},\n              }\n              glob_next.next = Some(val);\n           },\n           None =&gt; panic!(\"Allocator not initialized\"),\n      }\n  }\n}\nstruct AllocatorGlobalState&lt;'a&gt;{\n  cell1 : AllocatedMemory&lt;'a&gt;,\n  cell0 : AllocatedMemory&lt;'a&gt;,\n  sentinel : AllocatedMemory&lt;'a&gt;,\n  allocator :Alloc&lt;'a&gt;,\n\n}\nfn main() {\n  let mut buffer0 : [u8; 1024] = [0; 1024];\n  let mut buffer1 : [u8; 1024] = [0; 1024];\n  let mut sentinel_buffer : [u8; 1] = [0];\n  let mut ags : AllocatorGlobalState = AllocatorGlobalState {\n  cell1 : AllocatedMemory{mem: &amp;mut buffer1[0..1024],\n                          next: None},\n  cell0 : AllocatedMemory{mem: &amp;mut buffer0[0..1024],\n                          next: None},\n  sentinel : AllocatedMemory{mem: &amp;mut sentinel_buffer[0..1], next: None},\n  allocator : Alloc {glob : None},\n  };\n  ags.allocator.glob = Some(&amp;mut ags.sentinel);\n  ags.allocator.free_cell(&amp;mut ags.cell1);\n  ags.allocator.free_cell(&amp;mut ags.cell0);\n  {\n  let mut x = ags.allocator.alloc_cell();\n  x.mem[0] = 4;\n  let mut y = ags.allocator.alloc_cell();\n  y.mem[0] = 4;\n  ags.allocator.free_cell(y);\n  let mut z = ags.allocator.alloc_cell();\n  z.mem[0] = 8;\n  //y.mem[0] = 5; // &lt;-- this is an error (use after free)\n  }\n}\n</code></pre>\n\n<p>I needed to add the sentinel struct to avoid double borrowing of ags.allocator when doing multiple allocations.</p>\n\n<pre><code>cell.rs:65:19: 65:32 help: run `rustc --explain E0499` to see a detailed explanation\ncell.rs:62:19: 62:32 note: previous borrow of `ags.allocator` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ags.allocator` until the borrow ends\n</code></pre>\n\n<p>With the sentinel being stored in Alloc I can guarantee that I never modify <code>glob</code> after the function returns.</p>\n"}], "owner": {"reputation": 483, "user_id": 4280035, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e442215473aa322da127ee74c79c7477?s=128&d=identicon&r=PG&f=1", "display_name": "hellcatv", "link": "https://stackoverflow.com/users/4280035/hellcatv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 1, "accepted_answer_id": 36244532, "answer_count": 2, "score": 1, "last_activity_date": 1459059988, "creation_date": 1458984869, "last_edit_date": 1458997785, "question_id": 36233735, "link": "https://stackoverflow.com/questions/36233735/lifetime-errors-with-a-simple-resource-allocator-struct", "title": "Lifetime errors with a simple resource Allocator struct", "body": "<p>I'm trying to make a simple allocator that allocates and deallocates buffers from a fixed pool of buffers.</p>\n\n<pre><code>struct AllocatedMemory&lt;'a&gt; {\n    mem: &amp;'a mut [u8],\n    next: Option&lt;&amp;'a mut AllocatedMemory&lt;'a&gt;&gt;,\n}\n\nstruct Alloc&lt;'a&gt; {\n    glob: Option&lt;&amp;'a mut AllocatedMemory&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Alloc&lt;'a&gt; {\n    fn alloc_cell(mut self: &amp;mut Alloc&lt;'a&gt;) -&gt; &amp;mut AllocatedMemory&lt;'a&gt; {\n        let rest: Option&lt;&amp;'a mut AllocatedMemory&lt;'a&gt;&gt;;\n        match self.glob {\n            Some(ref mut root_cell) =&gt; {\n                rest = std::mem::replace(&amp;mut root_cell.next, None);\n            }\n            None =&gt; rest = None,\n        }\n        match std::mem::replace(&amp;mut self.glob, rest) {\n            Some(mut root_cell) =&gt; {\n                return root_cell;\n            }\n            None =&gt; panic!(\"OOM\"),\n        }\n    }\n\n    fn free_cell(mut self: &amp;mut Alloc&lt;'a&gt;, mut val: &amp;'a mut AllocatedMemory&lt;'a&gt;) {\n        match std::mem::replace(&amp;mut self.glob, None) {\n            Some(mut x) =&gt; {\n                let discard = std::mem::replace(&amp;mut val.next, Some(x));\n                let rest: Option&lt;&amp;'a mut AllocatedMemory&lt;'a&gt;&gt;;\n            }\n            None =&gt; {}\n        }\n        self.glob = Some(val);\n    }\n}\n\nfn main() {\n    let mut buffer0: [u8; 1024] = [0; 1024];\n    let mut buffer1: [u8; 1024] = [0; 1024];\n    {\n        let mut cell1: AllocatedMemory = AllocatedMemory {\n            mem: &amp;mut buffer1[0..1024],\n            next: None,\n        };\n        let mut cell0: AllocatedMemory = AllocatedMemory {\n            mem: &amp;mut buffer0[0..1024],\n            next: None,\n        };\n        let mut allocator = Alloc { glob: None };\n        allocator.free_cell(&amp;mut cell1); //populate allocator with a cell\n        allocator.free_cell(&amp;mut cell0); //populate allocator with another cell (why does this fail?)\n\n        let mut x = allocator.alloc_cell();\n        allocator.free_cell(x);\n        let mut y = allocator.alloc_cell();\n        let mut z = allocator.alloc_cell();\n        allocator.free_cell(y);\n        allocator.free_cell(z);\n    }\n}\n</code></pre>\n\n<p>The error is</p>\n\n<pre><code>error: `cell0` does not live long enough\n     allocator.free_cell(&amp;mut cell0); //populate allocator with another cell (why does this fail?)\n</code></pre>\n\n<p>when I simply remove <code>cell0</code> and only have <code>cell1</code> available to my cell pool then the following errors happens:</p>\n\n<pre><code>error: allocator does not live long enough\n         let mut x = allocator.alloc_cell();\n                     ^~~~~~~~~\nnote: reference must be valid for the block suffix following statement 0 at 46:69...\n                                                          next: None};\n         let mut cell0 : AllocatedMemory = AllocatedMemory{mem: &amp;mut buffer0[0..1024],\n                                                          next: None};\n         let mut allocator = Alloc {glob : None};\n         allocator.free_cell(&amp;mut cell1); //populate allocator with a cell\n         //allocator.free_cell(&amp;mut cell0); //populate allocator with another cell (why does this fail?)\n\nnote: ...but borrowed value is only valid for the block suffix following statement 2 at 49:48\n         let mut allocator = Alloc {glob : None};\n         allocator.free_cell(&amp;mut cell1); //populate allocator with a cell\n         //allocator.free_cell(&amp;mut cell0); //populate allocator with another cell (why does this fail?)\n\n         let mut x = allocator.alloc_cell();\n         allocator.free_cell(x);\n               ...\nerror: aborting due to previous error\n</code></pre>\n\n<p>Does anyone have a recommendation on how to fix this code so it compiles and may have 2+ items in the free list?</p>\n\n<p>I want to populate a list of references to arrays and then be able to pop them - use them for a while and place the used/finished value back onto the freelist.</p>\n\n<p>The motivation here is to build a library that uses the <code>#![nostd]</code> directive, so it needs an allocator interface to operate properly.</p>\n"}, {"tags": ["reference", "rust", "immutability", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458996766, "post_id": 36233193, "comment_id": 60101527, "body": "Duplicate of <a href=\"http://stackoverflow.com/q/31503488/155423\">Why is it possible to implement Read on an immutable reference to File?</a>."}, {"owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1459066295, "post_id": 36233193, "comment_id": 60120297, "body": "@Shepmaster I originally thought TcpStream works in the different way from File. But after reading Lukas Kalbertodt&#39;s answer, I suddenly realized the idea behind it is the same. Thank you for your link."}], "answers": [{"comments": [{"owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "edited": false, "score": 0, "creation_date": 1459067306, "post_id": 36234081, "comment_id": 60120552, "body": "I totally didn&#39;t expect <code>self</code> is a <code>&amp;mut &amp; TcpStream</code>!! But, what exactly is it ? I mean... what is a mutable reference to a reference ? If I called <code>self.something</code>, would that have the same effect when <code>self</code> was a <code>TcpStream</code> or a <code>&amp;TcpStream</code> ?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "edited": false, "score": 0, "creation_date": 1459122881, "post_id": 36234081, "comment_id": 60137825, "body": "@YushanLin <i>would that have the same effect</i> -&gt; in this case yes. The dot-syntax does a few things, like deref-coercions. This topic is too big for a follow up comment ^_^"}, {"owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "edited": false, "score": 0, "creation_date": 1459144371, "post_id": 36234081, "comment_id": 60142500, "body": "Ok. Thanks for your reply. Your supplement about why <code>Read</code> can be implemeneted for an immutable reference is useful !! Your answer helps me a lot."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1458987178, "creation_date": 1458987178, "answer_id": 36234081, "question_id": 36233193, "link": "https://stackoverflow.com/questions/36233193/why-can-i-just-pass-an-immutable-reference-to-bufreader-instead-of-a-mutable-re/36234081#36234081", "title": "Why can I just pass an immutable reference to BufReader, instead of a mutable reference?", "body": "<p><strong>Quick anser</strong>: we pass a <code>&amp;TcpStream</code> as <code>R: Read</code>, not <code>TcpStream</code>. Thus <code>self</code> in <code>Read::read</code> is <code>&amp;mut &amp; TcpStream</code>, not <code>&amp;mut TcpStream</code>. <code>Read</code> is implement for <code>&amp;TcpStream</code> as you can see <a href=\"https://doc.rust-lang.org/std/net/struct.TcpStream.html\" rel=\"nofollow\">in the documentation</a>. </p>\n\n<p>Look at this working code:</p>\n\n<pre><code>let stream = TcpStream::connect(\"...\").unwrap();\nlet mut buf = [0; 100];\nRead::read(&amp;mut (&amp;stream), &amp;mut buf);\n</code></pre>\n\n<p>Note that <code>stream</code> is not even bound as <code>mut</code>, because we use it immutably, just having a mutable reference to the immutable one.</p>\n\n<hr>\n\n<p><strong>Next</strong>, you could ask why <code>Read</code> can be implemented for <code>&amp;TcpStream</code>, because it's necessary to mutate <em>something</em> during the read operation.</p>\n\n<p>This is where the nice Rust-world \ud83c\udf08 \u262e ends, and the evil C-/operating system-world starts \ud83d\ude08. For example, on Linux you have a simple integer as \"file descriptor\" for the stream. You can use this for all operations on the stream, including reading and writing. Since you pass the integer by value (it's also a <code>Copy</code>-type), it doesn't matter if you have a mutable or immutable reference to the integer as you can just copy it.</p>\n\n<p>Therefore a minimal amount of synchronization has to be done by the operating system or by the Rust <code>std</code> implementation, because usually it's strange and dangerous to mutate through an immutable reference. This behavior is called \"interior mutability\" and you can read a little bit more about it...</p>\n\n<ul>\n<li>in <a href=\"https://doc.rust-lang.org/std/cell/index.html\" rel=\"nofollow\">the <code>cell</code> documentation</a></li>\n<li>in <a href=\"https://doc.rust-lang.org/book/mutability.html#interior-vs-exterior-mutability\" rel=\"nofollow\">the book \ud83d\udcd6</a></li>\n</ul>\n"}], "owner": {"reputation": 45, "user_id": 6112860, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-rORBn25WeNY/AAAAAAAAAAI/AAAAAAAAAGw/C2Yd2crT_rk/photo.jpg?sz=128", "display_name": "Yushan Lin", "link": "https://stackoverflow.com/users/6112860/yushan-lin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1132, "favorite_count": 3, "closed_date": 1472233665, "accepted_answer_id": 36234081, "answer_count": 1, "score": 4, "last_activity_date": 1472178298, "creation_date": 1458980940, "last_edit_date": 1495540866, "question_id": 36233193, "link": "https://stackoverflow.com/questions/36233193/why-can-i-just-pass-an-immutable-reference-to-bufreader-instead-of-a-mutable-re", "closed_reason": "Duplicate", "title": "Why can I just pass an immutable reference to BufReader, instead of a mutable reference?", "body": "<p>I am writing a simple TCP-based echo server. When I tried to use <code>BufReader</code> and <code>BufWriter</code> to read from and write to a <code>TcpStream</code>, I found that passing a <code>TcpStream</code> to <code>BufReader::new()</code> by value moves its ownership so that I couldn't pass it to a <code>BufWriter</code>. Then, I found an answer in <a href=\"https://stackoverflow.com/questions/35869078/if-bufreader-takes-ownership-of-a-stream-how-can-i-read-and-write-lines-on-it/35869336\">this thread</a> that solves the problem:</p>\n\n<pre><code>fn handle_client(stream: TcpStream) {\n    let mut reader = BufReader::new(&amp;stream);\n    let mut writer = BufWriter::new(&amp;stream);\n\n    // Receive a message\n    let mut message = String::new();\n    reader.read_line(&amp;mut message).unwrap();\n\n    // ingored\n}\n</code></pre>\n\n<p>This is simple and it works. However, I can not quite understand why this code works. Why can I just pass an immutable reference to <code>BufReader::new()</code>, instead of a mutable reference ?</p>\n\n<p>The whole program can be found <a href=\"https://github.com/SLMT/rust-examples/blob/c95ddba4d71795e22c47c4140dcf900a2440c412/tcp-server/src/main.rs\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p><strong>More Details</strong></p>\n\n<p>In the above code, I used <code>reader.read_line(&amp;mut message)</code>. So I opened the source code of <code>BufRead</code> in Rust standard library and saw this:</p>\n\n<pre><code>fn read_line(&amp;mut self, buf: &amp;mut String) -&gt; Result&lt;usize&gt; {\n    // ignored\n    append_to_string(buf, |b| read_until(self, b'\\n', b))\n}\n</code></pre>\n\n<p>Here we can see that it passes the self (which may be a <code>&amp;mut BufReader</code> in my case) to <code>read_until()</code>. Next, I found the following code in the same file:</p>\n\n<pre><code>fn read_until&lt;R: BufRead + ?Sized&gt;(r: &amp;mut R, delim: u8, buf: &amp;mut Vec&lt;u8&gt;)\n                                   -&gt; Result&lt;usize&gt; {\n    let mut read = 0;\n    loop {\n        let (done, used) = {\n            let available = match r.fill_buf() {\n                Ok(n) =&gt; n,\n                Err(ref e) if e.kind() == ErrorKind::Interrupted =&gt; continue,\n                Err(e) =&gt; return Err(e)\n            };\n            match memchr::memchr(delim, available) {\n                Some(i) =&gt; {\n                    buf.extend_from_slice(&amp;available[..i + 1]);\n                    (true, i + 1)\n                }\n                None =&gt; {\n                    buf.extend_from_slice(available);\n                    (false, available.len())\n                }\n            }\n        };\n        r.consume(used);\n        read += used;\n        if done || used == 0 {\n            return Ok(read);\n        }\n    }\n}\n</code></pre>\n\n<p>In this part, there are two places using the <code>BufReader</code>: <code>r.fill_buf()</code> and <code>r.consume(used)</code>. I thought <code>r.fill_buf()</code> is what I want to see. Therefore, I went to the code of <code>BufReader</code> in Rust standard library and found this:</p>\n\n<pre><code>fn fill_buf(&amp;mut self) -&gt; io::Result&lt;&amp;[u8]&gt; {\n    // ignored\n    if self.pos == self.cap {\n        self.cap = try!(self.inner.read(&amp;mut self.buf));\n        self.pos = 0;\n    }\n    Ok(&amp;self.buf[self.pos..self.cap])\n}\n</code></pre>\n\n<p>It seems like it uses <code>self.inner.read(&amp;mut self.buf)</code> to read the data from <code>self.inner</code>. Then, we take a look at the structure of <code>BufReader</code> and the <code>BufReader::new()</code>:</p>\n\n<pre><code>pub struct BufReader&lt;R&gt; {\n    inner: R,\n    buf: Vec&lt;u8&gt;,\n    pos: usize,\n    cap: usize,\n}\n\n// ignored\nimpl&lt;R: Read&gt; BufReader&lt;R&gt; {\n    // ignored\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn new(inner: R) -&gt; BufReader&lt;R&gt; {\n        BufReader::with_capacity(DEFAULT_BUF_SIZE, inner)\n    }\n\n    // ignored\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn with_capacity(cap: usize, inner: R) -&gt; BufReader&lt;R&gt; {\n        BufReader {\n            inner: inner,\n            buf: vec![0; cap],\n            pos: 0,\n            cap: 0,\n        }\n    }\n\n    // ignored\n}\n</code></pre>\n\n<p>From the above code, we can know that <code>inner</code> is a type which implements <code>Read</code>. In my case, the <code>inner</code> may be a <code>&amp;TcpStream</code>.</p>\n\n<p>I knew the signature of <code>Read.read()</code> is:</p>\n\n<pre><code>fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; Result&lt;usize&gt;\n</code></pre>\n\n<p>It requires a <strong>mutable</strong> reference here, but I only lent it an <strong>immutable</strong> reference. Is this supposed to be a problem when the program reaches <code>self.inner.read()</code> in <code>fill_buf()</code> ? </p>\n"}, {"tags": ["caching", "rust", "static-members"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458958708, "post_id": 36230889, "comment_id": 60092854, "body": "Duplicate of <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">How do I create a global, mutable singleton?</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458958836, "post_id": 36230889, "comment_id": 60092869, "body": "Or you can alter the signature of <code>cached_expensive</code> to accept the cache as another parameter."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458958994, "post_id": 36230889, "comment_id": 60092902, "body": "I don&#39;t think this is a duplicate. My question is specifically about caching and, while my starting point is a global, mutable singleton, that is incidental and a good solution might explain how (for example) a <code>RefCell</code> or <code>Mutex</code> could make this better, or offer a completely different alternative structurally."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458959219, "post_id": 36230889, "comment_id": 60092956, "body": "I disagree, but I won&#39;t use the magic dupehammer until others agree with me. In short, there&#39;s <i>nowhere</i> else to store data. Either you pass in a place to store it (via an explicit argument or implicitly via <code>self</code>) or it has to be stored in global storage. The latter has the restriction that you are required to handle concurrent access to the cache."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458959460, "post_id": 36230889, "comment_id": 60093008, "body": "While I&#39;m not quite able to reason it out right now, I have a feeling that the proposed <code>unsafe</code> block in the question doesn&#39;t uphold the safety guarantees that it is required to. For example, I&#39;m pretty sure that concurrent calls to the function can have partial reads/writes to the storage (as there&#39;s no mutual exclusion), causing strange behavior in arbitrary circumstances."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458959668, "post_id": 36230889, "comment_id": 60093044, "body": "@Shepmaster Yes, this was my concern, which led me to post the question. I have read the question that you linked to as a dupe, and it&#39;s actually very helpful. The <code>Arc&lt;Mutex&lt;..&gt;&gt;</code> construction looks like what I need. But I am going to rethink if I can&#39;t just do this differently. I&#39;m coming into an existing codebase, so it&#39;s not so straightforward.."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458960817, "post_id": 36230889, "comment_id": 60093283, "body": "@Shepmaster is right. Your code as written will permit unsynchronized reads/writes to the same location in memory. The <code>lazy_static</code> approach in the question linked is probably what you want. (To a first approximation. There may be faster approaches...)"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460651083, "post_id": 36628640, "comment_id": 60853394, "body": "So you agree this is a duplicate of <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\">How do I create a global, mutable singleton?</a> as suggested in the comments?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1460651319, "post_id": 36628640, "comment_id": 60853558, "body": "Yes. But I decide to write the answer to show that the global variable can be declared inside the function, so the scope is local."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1460650747, "creation_date": 1460650747, "answer_id": 36628640, "question_id": 36230889, "link": "https://stackoverflow.com/questions/36230889/what-is-the-idiomatic-way-to-implement-caching-on-a-function-that-is-not-a-struc/36628640#36628640", "title": "What is the idiomatic way to implement caching on a function that is not a struct method?", "body": "<p>I think the best alternative is to use a global variable with a mutex. Using lazy_static makes it easy and allows the \"global\" declaration inside the function</p>\n\n<pre><code>pub fn cached_expensive(n: u64) -&gt; u64 {\n    use std::sync::Mutex;\n    lazy_static! {\n        static ref LAST_VAL: Mutex&lt;Option&lt;(u64, u64)&gt;&gt; = Mutex::new(None);\n    }\n    let mut last = LAST_VAL.lock().unwrap();\n    let r = last.and_then(|(k, v)| {\n        if k == n {\n            Some((n, v))\n        } else {\n            None\n        }\n    }).or_else(|| Some((n, get_expensive_value(n))));\n    let (_, v) = r.unwrap();\n    *last = r;\n    v\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 496, "user_id": 3283654, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a4020e2f314034d159cd6973930c8c78?s=128&d=identicon&r=PG&f=1", "display_name": "zakum1", "link": "https://stackoverflow.com/users/3283654/zakum1"}, "is_accepted": false, "score": 1, "last_activity_date": 1540822437, "creation_date": 1540822437, "answer_id": 53047383, "question_id": 36230889, "link": "https://stackoverflow.com/questions/36230889/what-is-the-idiomatic-way-to-implement-caching-on-a-function-that-is-not-a-struc/53047383#53047383", "title": "What is the idiomatic way to implement caching on a function that is not a struct method?", "body": "<p>You can also check out the <a href=\"https://github.com/jaemk/cached\" rel=\"nofollow noreferrer\">cached</a> project / crate. It memoizes the function with a simple macro.</p>\n"}], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2798, "favorite_count": 0, "accepted_answer_id": 36628640, "answer_count": 2, "score": 7, "last_activity_date": 1540822437, "creation_date": 1458958560, "question_id": 36230889, "link": "https://stackoverflow.com/questions/36230889/what-is-the-idiomatic-way-to-implement-caching-on-a-function-that-is-not-a-struc", "title": "What is the idiomatic way to implement caching on a function that is not a struct method?", "body": "<p>I have an expensive function like this:</p>\n\n<pre><code>pub fn get_expensive_value(n: u64): u64 {\n   let ret = 0;\n   for 0 .. n {\n       // expensive stuff\n   }\n   ret\n}\n</code></pre>\n\n<p>And it gets called very frequently with the same argument. It's pure, so that means it will return the same result and can make use of a cache. </p>\n\n<p>If this was a struct method, I would add a member to the struct that acts as a cache, but it isn't. So my option seems to be to use a static:</p>\n\n<pre><code>static mut LAST_VAL: Option&lt;(u64, u64)&gt; = None;\n\npub fn cached_expensive(n: u64) -&gt; u64 {\n   unsafe {\n       LAST_VAL = LAST_VAL.and_then(|(k, v)| {\n           if k == n {\n              Some((n,v))\n           } else {\n              None\n           }\n       }).or_else(|| {\n           Some((n, get_expensive_value(n)))\n       });\n       let (_, v) = LAST_VAL.unwrap();\n       v\n   }\n}\n</code></pre>\n\n<p>Now, I've had to use <code>unsafe</code>. Instead of the <code>static mut</code>, I could put a <code>RefCell</code> in a <code>const</code>. But I'm not convinced that is any safer - it just avoids having to use the <code>unsafe</code> block. I thought about a <code>Mutex</code>, but I don't think that will get me thread safety either.</p>\n\n<p>Redesigning the code to use a struct for storage is not really an option.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 59, "user_id": 4300322, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/5ede371d8a141c56717e9d3ee676e1db?s=128&d=identicon&r=PG&f=1", "display_name": "HPerin", "link": "https://stackoverflow.com/users/4300322/hperin"}, "edited": false, "score": 0, "creation_date": 1458996149, "post_id": 36231042, "comment_id": 60101339, "body": "Yeah, i tried that, it solves the errors, but new ones appear."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1458960090, "creation_date": 1458960090, "answer_id": 36231042, "question_id": 36230782, "link": "https://stackoverflow.com/questions/36230782/unable-to-use-macros-from-the-rsfuzzy-crate/36231042#36231042", "title": "Unable to use macros from the rsfuzzy crate", "body": "<p>The \"rsfuzzy\" crate exhibits poor coding practices which seem to be causing this problem. Here's an example of <a href=\"https://github.com/auseckas/rsfuzzy/blob/8dcfba6c7393af6ef7445641aa44b2c3d03448da/src/lib.rs#L261-L281\" rel=\"nofollow\">the first macro I found</a>:</p>\n\n<pre><code>#[macro_export]\nmacro_rules! fz_input_var {\n    ( $( $x:expr ),* ) =&gt; {\n        {\n            let mut vars: Vec&lt;fuzzy::mf::MfType&gt; = Vec::new();\n            $(\n                let value = match $x.0 {\n                    \"triangle\" =&gt; fuzzy::mf::Triangle::new($x.1, $x.2),\n                    \"trapezoid\" =&gt; fuzzy::mf::Trapezoid::new($x.1, $x.2),\n                    \"up\" =&gt; fuzzy::mf::Up::new($x.1, $x.2),\n                    \"down\" =&gt; fuzzy::mf::Down::new($x.1, $x.2),\n                    _ =&gt; return Err(TXParserError::from_complex(\"No MF found for type\", $x.0))\n\n                };\n               vars.push(value);\n\n            )*\n            fuzzy::InputVar::new(vars)\n        }\n    };\n}\n</code></pre>\n\n<p>You can see that the macro <strong>hardcodes</strong> the name of the crate to be <code>fuzzy</code>. A better-written crate solves this problem via the <a href=\"http://doc.rust-lang.org/stable/book/macros.html#the-variable-crate\" rel=\"nofollow\"><code>$crate</code> macro variable</a>.</p>\n\n<p>You should submit a pull request or issue to the original project. As a workaround in the meantime, you can rename the crate when you import it:</p>\n\n<pre><code>extern crate rsfuzzy as fuzzy;\n</code></pre>\n"}], "owner": {"reputation": 59, "user_id": 4300322, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/5ede371d8a141c56717e9d3ee676e1db?s=128&d=identicon&r=PG&f=1", "display_name": "HPerin", "link": "https://stackoverflow.com/users/4300322/hperin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "answer_count": 1, "score": -4, "last_activity_date": 1459895163, "creation_date": 1458957568, "last_edit_date": 1459895163, "question_id": 36230782, "link": "https://stackoverflow.com/questions/36230782/unable-to-use-macros-from-the-rsfuzzy-crate", "title": "Unable to use macros from the rsfuzzy crate", "body": "<p>I have a project that tries to use a macro from <a href=\"https://github.com/auseckas/rsfuzzy\" rel=\"nofollow\">rsfuzzy</a>:</p>\n\n<pre><code>#[macro_use]\nextern crate rsfuzzy;\n\nfn main() {\n    fz_input_var!();\n}\n</code></pre>\n\n<p>When I compile, I get errors like:</p>\n\n<pre><code>&lt;rsfuzzy macros&gt;:3:22: 3:41 error: failed to resolve. Use of undeclared type or module `fuzzy::mf` [E0433]\n&lt;rsfuzzy macros&gt;:3 let mut vars : Vec &lt; fuzzy:: mf:: MfType &gt; = Vec:: new (  ) ; $ (\n</code></pre>\n\n<p>When i use the 'extern crate rsfuzzy as fuzzy' as sugested, i get another list of errors:</p>\n\n<pre><code>failed to resolve. Use of undeclared type or module `TXParserError` [E0433]at line 9 col 1 in &lt;rsfuzzy macros&gt;\nunresolved name `TXParserError::from_complex` [E0425]at line 9 col 1 in &lt;rsfuzzy macros&gt;\n                                        ^~~~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust", "move-semantics", "ownership-semantics"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1458958200, "post_id": 36230710, "comment_id": 60092770, "body": "Would you mind simplifying your example? Would be great to make the <code>Employee</code> struct less complex and at least to remove the lifetime. <code>struct Employee { age: i32 }</code> would be enough, for example."}, {"owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458961815, "post_id": 36230710, "comment_id": 60093462, "body": "@LukasKalbertodt - yes I have simplified the example."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 11, "creation_date": 1458959048, "post_id": 36230828, "comment_id": 60092911, "body": "Minor nit: AIUI, there&#39;s no guarantee that the values will <i>actually</i> be moved, but the semantics are such that you have to assume that they are. For example, the compiler is free to rewrite <code>do_something</code> to accept a reference to <code>b</code> in order to prevent copying bits around. The important thing is that the code behaves <i>as if</i> the bits were moved."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 15, "last_activity_date": 1458957944, "creation_date": 1458957944, "answer_id": 36230828, "question_id": 36230710, "link": "https://stackoverflow.com/questions/36230710/how-does-rust-move-stack-variables-that-are-not-copyable/36230828#36230828", "title": "How does Rust move stack variables that are not Copyable?", "body": "<blockquote>\n  <p>Does it physically get moved to <code>do_something()</code>'s stack frame?</p>\n</blockquote>\n\n<p>Yes. Non-<code>Copy</code> types are physically moved exactly like <code>Copy</code> types are: with a <code>memcpy</code>. You already understood that primitive <code>Copy</code>-types are copied into the new location (new stack frame for example) byte-by-byte.</p>\n\n<p>Now consider this implementation of <code>Box</code>:</p>\n\n<pre><code>struct Box&lt;T&gt; {\n    ptr: *const T,\n}\n</code></pre>\n\n<p>When you have</p>\n\n<pre><code>let b = Box::new(27i32);\ndo_something(b);    // `b` is moved into `do_something`\n</code></pre>\n\n<p>then an <code>i32</code> is allocated on the heap and the <code>Box</code> saves the raw pointer to that heap allocated memory. Note that the <code>Box</code> directly (the raw pointer inside) is directly on the stack, not on the heap! Just the <code>i32</code> is on the heap.</p>\n\n<p>When the <code>Box</code> is moved, it is <code>memcpy</code>ed, as I just said. This means that the stack contents are copied (!!)... thus just the pointer is copied byte-by-byte. There isn't a second version of the <code>i32</code>! </p>\n\n<p>There is no difference between <code>Copy</code> and non-<code>Copy</code> types when it comes to moving physically. The only difference is that the compiler enforces different rules upon those types.</p>\n"}], "owner": {"reputation": 9369, "user_id": 71079, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/3e302415f77b6c398abc0b16efc653f3?s=128&d=identicon&r=PG", "display_name": "Ralph Caraveo", "link": "https://stackoverflow.com/users/71079/ralph-caraveo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1561, "favorite_count": 3, "accepted_answer_id": 36230828, "answer_count": 1, "score": 20, "last_activity_date": 1458961706, "creation_date": 1458956798, "last_edit_date": 1458961706, "question_id": 36230710, "link": "https://stackoverflow.com/questions/36230710/how-does-rust-move-stack-variables-that-are-not-copyable", "title": "How does Rust move stack variables that are not Copyable?", "body": "<p>There is a great example of Rust's move semantics documented here: <a href=\"http://rustbyexample.com/scope/move.html\" rel=\"noreferrer\">Rust Move Semantics</a> on the Rust By Example website.</p>\n\n<p>I have a basic understanding of both cases demonstrated. The first being how a primitive can have a new alias and the original can still be used because the end result is a copy seeing as <code>i32</code> utilizes the <code>Copy</code> trait. This makes good sense to me.</p>\n\n<p>Additionally, for many good reasons the second example makes sense in terms of having multiple aliases that refer to an <code>i32</code> on the heap.  Rust enforces ownership rules and therefore the original alias cannot be used now that a new binding has been created.  This helps prevent data-races, double frees, etc.</p>\n\n<p>But it would seem there is a third case which is not talked about. <strong>How does Rust implement moves of stack allocated structs that do not implement the <code>Copy</code> trait?</strong>  This is illustrated with the following code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Employee{\n    age: i32,\n}\n\nfn do_something(m: Employee){\n    println!(\"{:?}\", m);\n}\n\nfn main() {\n    let x = Employee {\n        age: 25,\n    };\n\n    do_something(x);\n\n    //compiler error below because x has moved\n    do_something(x);\n}\n</code></pre>\n\n<p>This I know: In the case above, <strong>Rust will allocate the <code>Employee</code> on the stack</strong>.  The above struct <strong>does not implement the <code>Copy</code> trait</strong> and therefore will not be copied when assigned to a new alias.  This is very confusing to me because if the <code>Employee</code> struct is allocated on the stack and also does not implement the <code>Copy</code> trait where/how does it move?  Does it physically get moved to <code>do_something()</code>'s stack frame?</p>\n\n<p>Any help is appreciated in explaining this conundrum.</p>\n"}, {"tags": ["functional-programming", "rust"], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1458957629, "post_id": 36230698, "comment_id": 60092672, "body": "<code>filter_map</code> is cute, but if it returns <code>Optional&lt;U&gt;</code> and I want to only return the anagrams, I&#39;d have to issue another <code>filter</code> checking <code>is_some</code>. This seems unnecessary. +1 for the tips and tricks!"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1458958115, "post_id": 36230698, "comment_id": 60092759, "body": "What? No I think you misunderstood. <code>filter_map</code> already applies a filter and only retains the <code>Some(..)</code> elements and also unwraps those. Look at the examples in the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow noreferrer\">documentation</a>"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1458958179, "post_id": 36230698, "comment_id": 60092767, "body": "Whoops! Indeed, I did misunderstand... Sorry about that!"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1458958300, "post_id": 36230698, "comment_id": 60092786, "body": "No problem :) Also: to get useful remarks on your code, you can ask on <a href=\"http://codereview.stackexchange.com/questions/tagged/rust\">codereview</a>"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 0, "creation_date": 1458958347, "post_id": 36230698, "comment_id": 60092793, "body": "Yes, I typically try to ask there (not as often as I should, perhaps), but I thought since this was syntax related, better to post here."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1458957132, "last_edit_date": 1458957132, "creation_date": 1458956687, "answer_id": 36230698, "question_id": 36230664, "link": "https://stackoverflow.com/questions/36230664/how-can-i-handle-if-may-be-missing-an-else-clause-when-using-an-if-inside-of-a/36230698#36230698", "title": "How can I handle &quot;if may be missing an else clause&quot; when using an if inside of a map?", "body": "<p>As you noticed, the problem is that in the non-anagram-case your closure (the <code>|| { ... }</code> block) doesn't return a value. </p>\n\n<p>You can solve this by using <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map\" rel=\"nofollow\"><code>filter_map</code></a> instead of <code>map</code>. That function takes a closure that returns <code>Option&lt;U&gt;</code> instead of <code>U</code>, so the last expression of your closure looks something like:</p>\n\n<pre><code>if /* ... */ {\n    Some(word)\n} else {\n    None\n} \n</code></pre>\n\n<hr>\n\n<p>Unrelated to the main question, some notes on your code:</p>\n\n<ul>\n<li>You can remove the <code>.to_string()</code> calls before <code>.to_lowercase()</code> calls. the latter method belongs to the type <code>str</code>, so it works fine. Calling <code>to_string()</code> adds unnecessary allocations.</li>\n<li>the <code>&amp;</code> in front of the closure (<code>&amp;|...|</code>) can most probably be removed...</li>\n<li>... as can the <code>: &amp;str</code> type annotation in the closures argument list</li>\n</ul>\n"}], "owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 630, "favorite_count": 0, "accepted_answer_id": 36230698, "answer_count": 1, "score": 1, "last_activity_date": 1458958396, "creation_date": 1458956339, "last_edit_date": 1458958396, "question_id": 36230664, "link": "https://stackoverflow.com/questions/36230664/how-can-i-handle-if-may-be-missing-an-else-clause-when-using-an-if-inside-of-a", "title": "How can I handle &quot;if may be missing an else clause&quot; when using an if inside of a map?", "body": "<p>I'm working on a code challenge which will detect case-insensitive anagrams of a given word from a list of words. </p>\n\n<p>My first cut is to use something like this:</p>\n\n<pre><code>pub fn anagrams_for(s: &amp;'static str, v: &amp;[&amp;'static str]) -&gt; Vec&lt;&amp;'static str&gt; {\n    let mut outputs: Vec&lt;&amp;str&gt; = vec![];\n\n    // Find the case-insensitive, sorted word to check\n    let mut s_sorted: Vec&lt;_&gt; = s.to_string().to_lowercase().chars().collect();\n    s_sorted.sort();\n\n    for word in v {\n        // Case-desensitize and sort each word in the slice\n        let mut word_sorted: Vec&lt;_&gt; = word.to_string().to_lowercase().chars().collect();\n        word_sorted.sort();\n\n        // if the case-insensitive words are the same post sort and not presort (to avoid self-anagrams), add it to the vector\n        if word_sorted == s_sorted &amp;&amp; s.to_string().to_lowercase() != word.to_string().to_lowercase() {\n            outputs.push(word)\n        }\n    }\n    outputs\n}\n</code></pre>\n\n<p>This works as expected, but is not very idiomatic. I'm now trying a second iteration which uses more functional features of Rust:</p>\n\n<pre><code>pub fn anagrams_for(s: &amp;'static str, v: &amp;[&amp;'static str]) -&gt; Vec&lt;&amp;'static str&gt; {\n    let mut s_sorted: Vec&lt;_&gt; = s.to_string().to_lowercase().chars().collect();\n    s_sorted.sort();\n\n    v.iter().map(&amp;|word: &amp;str| {\n        let mut word_sorted: Vec&lt;_&gt; = word.to_string().to_lowercase().chars().collect();\n        word_sorted.sort();\n\n        if word_sorted == s_sorted &amp;&amp; s.to_string().to_lowercase() != word.to_string().to_lowercase() {\n            word\n        } \n    }).collect()\n}\n</code></pre>\n\n<p>I'm currently getting a few errors (most of which I could likely resolve), but the one I'm interested in solving is</p>\n\n<blockquote>\n<pre><code>if may be missing an else clause:\n expected `()`,\n    found `&amp;str`\n(expected (),\n    found &amp;-ptr) [E0308]\n</code></pre>\n</blockquote>\n\n<p>This is because in the case of a non-anagram, <code>map</code> attempts to push something into the vector (seemingly <code>()</code>). </p>\n\n<p>How can I handle this? It's possible that <code>map</code> isn't the best idiom because it requires some operation to be performed on <em>each</em> element in a list, not a subset (maybe <code>filter</code>?).</p>\n"}, {"tags": ["module", "rust", "visibility", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1458957387, "creation_date": 1458957387, "answer_id": 36230763, "question_id": 36230543, "link": "https://stackoverflow.com/questions/36230543/unresolved-import-when-using-an-item-from-a-nested-module/36230763#36230763", "title": "&quot;unresolved import&quot; when using an item from a nested module", "body": "<p>Think of Rust modules as being like a directory tree.  Modules are directories, everything else is a file [1].  <code>::</code> is basically <code>/</code>.</p>\n\n<p>So, you have <em>this</em> structure:</p>\n\n<pre><code>/ (crate root)\n \u2514\u252c\u2500 sub_module\n  \u2502   \u2514\u252c\u2500 sub_sub_module\n  \u2502    \u2502   \u2514\u2500\u2500 a_structure\n  \u2502    \u2514\u2500 a_structure [x]\n  \u251c\u2500 a_structure\n  \u2514\u2500 main\n</code></pre>\n\n<p>The problem is in how you define the <code>a_structure [x]</code> \"symlink\".  As explained in the book, <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html#re-exporting-with-pub-use\" rel=\"nofollow\"><code>use</code> paths in Rust are absolute</a>, meaning in this analogy that they <em>all</em> implicitly start with <code>/</code>.  Meaning that <code>use sub_sub_module::a_structure</code> is referring to <code>/sub_sub_module/a_structure</code>, which <em>doesn't exist</em>.</p>\n\n<p>The solution is to use a relative path by explicitly starting the path with <code>self</code> (effectively <code>.</code>) or <code>super</code> (effectively <code>..</code>).  You want <code>./sub_sub_module/a_structure</code>, so the path in Rust should be <code>self::sub_sub_module::a_structure</code>.  A full, compiling (with warnings) example looks like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod sub_module {\n    pub mod sub_sub_module {\n        pub struct a_structure {\n            some_field: i32,\n        }\n    }\n\n    pub use self::sub_sub_module::a_structure;\n}\n\nuse sub_module::a_structure;\n\nfn main() {\n    let x: a_structure = panic!(\"TODO\");\n}\n</code></pre>\n\n<p>You should also note that paths used anywhere <em>outside</em> of a <code>use</code> have the exact opposite default: they are relative to the containing module by default.  If you <em>want</em> an absolute path in that case, you need to explicitly ask for one by starting the path with <code>::</code> (just like a filesystem path that is, by default, interpreted as relative).</p>\n\n<p><em>Aside</em>: The conventional style is to use <code>PascalCase</code> for type names.  Also, I had to remove the type parameter because it wasn't being used.</p>\n\n<hr>\n\n<p>[1]: This is, in fact, a lie, as you can have items associated with <em>other</em> items.  For example, associated <code>const</code>s, while unstable, <em>are</em> a thing.  I suppose you could think of them in terms of resource forks or something, I don't know; it's just a metaphor!</p>\n"}], "owner": {"reputation": 23, "user_id": 4880802, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-N0zocGyCLmY/AAAAAAAAAAI/AAAAAAAABbs/PF6k0cmLP5Q/photo.jpg?sz=128", "display_name": "tqoitc", "link": "https://stackoverflow.com/users/4880802/tqoitc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1466, "favorite_count": 0, "accepted_answer_id": 36230763, "answer_count": 1, "score": 2, "last_activity_date": 1458958263, "creation_date": 1458955111, "last_edit_date": 1458958263, "question_id": 36230543, "link": "https://stackoverflow.com/questions/36230543/unresolved-import-when-using-an-item-from-a-nested-module", "title": "&quot;unresolved import&quot; when using an item from a nested module", "body": "<p>I have a small program that I've been trying to get working, but I keep getting unresolved import messages.</p>\n\n<p>main.rs:</p>\n\n<pre><code>mod sub_module;\nuse sub_module::a_structure;\n\nfn main() {\n    let x: a_structure = /* init code */;\n}\n</code></pre>\n\n<p>sub_module.rs:</p>\n\n<pre><code>pub mod sub_sub_module;\n\npub use sub_sub_module::a_structure;\n</code></pre>\n\n<p>sub_sub_module.rs:</p>\n\n<pre><code>pub struct a_structure&lt;T&gt; {\n    some_field: i32,\n}\n</code></pre>\n\n<p>However, on executing <code>cargo build</code> I get an \"unresolved import <code>sub_sub_module::a_structure</code>\". Everything I've found regarding visibility says that this should work however it doesn't. What am I missing here?</p>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458931933, "post_id": 36225868, "comment_id": 60083247, "body": "I&#39;m very confused by what you are asking. As you note, the compiler prevents this code from compiling. The comment refers to what <i>might</i> happen if the compiler allowed it, but since the compiler doesn&#39;t, it doesn&#39;t matter. The comment could say &quot;Now <code>p</code> contains my phone number and the winning lottery numbers&quot; and be equally as valid."}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458932219, "post_id": 36225868, "comment_id": 60083412, "body": "I just want to understand what disaster the compiler prevented from happening. Yeah, practically it doesn&#39;t matter, but the insight is still valuable."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1458933355, "creation_date": 1458933355, "answer_id": 36226445, "question_id": 36225868, "link": "https://stackoverflow.com/questions/36225868/what-disaster-does-the-compiler-prevent-by-disallowing-assigning-to-a-borrowed-v/36226445#36226445", "title": "What disaster does the compiler prevent by disallowing assigning to a borrowed value?", "body": "<p>Let's make up a memory layout for the types involved. <code>IntOrString</code> will have one byte to determine which variant it is (<code>0</code> = number, <code>1</code> = string), followed by 4 bytes that will either be a number or the address to the beginning of a set of UTF-8 characters.</p>\n\n<p>Let's allocate <code>s</code> in memory at 0x100. The variant is at 0x100 and the value is at 0x101, 0x102, 0x103, 0x104. Additionally, let's say that the contents of the value is the pointer <code>0xABCD</code>; this is where the bytes of the string live. </p>\n\n<p>When the match arm <code>IntOrString::S(ref p)</code> is used, <code>p</code> will be set to the value <code>0x101</code> - it's a reference to the value and the value starts at 0x101. When you try to use <code>p</code>, the processor will go to the address <code>0x101</code>, read the value (an address), and then read the data from that address.</p>\n\n<p><strong>If</strong> the compiler allowed you to change <code>s</code> at this point, then the new bytes of the new data would replace the value stored at <code>0x101</code>. In the example, the \"address\" stored at the value would now point to somewhere arbitrary (<code>0xDEADBEEF</code>). If we tried to use the \"string\", we'd start reading bytes of memory that are highly unlikely to correspond to UTF-8 data.</p>\n\n<p>None of this is academic, this exact kind of problem can occur in a well-formed C program. In the <strong>good</strong> cases, the program will crash. In bad cases, it's possible to read data in the program you aren't supposed to. It's even possible to inject shellcode that then gives an attacker the ability to run code <em>they</em> wrote inside your program.</p>\n\n<hr>\n\n<p>Note that the memory layout above is <em>very</em> simplified, and an actual <code>String</code> is larger and more complicated.</p>\n"}], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 36226445, "answer_count": 1, "score": 1, "last_activity_date": 1512313932, "creation_date": 1458930988, "last_edit_date": 1512313932, "question_id": 36225868, "link": "https://stackoverflow.com/questions/36225868/what-disaster-does-the-compiler-prevent-by-disallowing-assigning-to-a-borrowed-v", "title": "What disaster does the compiler prevent by disallowing assigning to a borrowed value?", "body": "<p>An example from <a href=\"https://dl.dropboxusercontent.com/u/854167/programming_in_rust/programming_in_rust.pdf\" rel=\"nofollow noreferrer\">Programming in Rust (PDF)</a>: </p>\n\n<pre><code>#[derive(Debug)]\nenum IntOrString {\n    I(isize),\n    S(String),\n}\n\nfn corrupt_enum() {\n    let mut s = IntOrString::S(String::new());\n    match s {\n        IntOrString::I(_) =&gt; (),\n        IntOrString::S(ref p) =&gt; {\n            s = IntOrString::I(0xdeadbeef);\n            // Now p is a &amp;String, pointing at memory\n            // that is an int of our choosing!\n        }\n    }\n}\n\ncorrupt_enum();\n</code></pre>\n\n<p>The compiler does not allow this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `s` because it is borrowed\n  --&gt; src/main.rs:13:17\n   |\n12 |             IntOrString::S(ref p) =&gt; {\n   |                            ----- borrow of `s` occurs here\n13 |                 s = IntOrString::I(0xdeadbeef);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `s` occurs here\n</code></pre>\n\n<p>But suppose it did; how is it that </p>\n\n<blockquote>\n  <p>Now <code>p</code> is a <code>&amp;String</code>, pointing at memory that is an int of our choosing!</p>\n</blockquote>\n\n<p>is a bad thing? </p>\n"}, {"tags": ["closures", "rust", "higher-order-functions"], "comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 1, "creation_date": 1458916336, "post_id": 36221430, "comment_id": 60075170, "body": "Both take_while and filter receive a reference. In this example, in take_while the reference is destructured with |&amp;n|, and in filter the reference is dereferenced with *n."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1527257591, "last_edit_date": 1527257591, "creation_date": 1458915979, "answer_id": 36221816, "question_id": 36221430, "link": "https://stackoverflow.com/questions/36221430/why-does-the-closure-for-take-while-take-its-argument-by-reference/36221816#36221816", "title": "Why does the closure for `take_while` take its argument by reference?", "body": "<p>The implementation of <a href=\"https://github.com/rust-lang/rust/blob/1.26.0/src/libcore/iter/mod.rs#L2112-L2125\" rel=\"nofollow noreferrer\"><code>Iterator::take_while</code></a> is quite illuminating:</p>\n\n<pre><code>fn next(&amp;mut self) -&gt; Option&lt;I::Item&gt; {\n    if self.flag {\n        None\n    } else {\n        self.iter.next().and_then(|x| {\n            if (self.predicate)(&amp;x) {\n                Some(x)\n            } else {\n                self.flag = true;\n                None\n            }\n        })\n    }\n}\n</code></pre>\n\n<p>If the value returned from the underlying iterator were directly passed to the predicate, then ownership of the value would also be transferred. After the predicate was called, there would no longer be a value to return from the <code>TakeWhile</code> adapter if the predicate were true!</p>\n"}], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 419, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1527257591, "creation_date": 1458914523, "last_edit_date": 1458916053, "question_id": 36221430, "link": "https://stackoverflow.com/questions/36221430/why-does-the-closure-for-take-while-take-its-argument-by-reference", "title": "Why does the closure for `take_while` take its argument by reference?", "body": "<p>Here is an example from <a href=\"http://rustbyexample.com/fn/hof.html\" rel=\"nofollow\">Rust by Example</a>: </p>\n\n<pre><code>fn is_odd(n: u32) -&gt; bool {\n    n % 2 == 1\n}\n\nfn main() {\n    println!(\"Find the sum of all the squared odd numbers under 1000\");\n    let upper = 1000;\n\n    // Functional approach\n    let sum_of_squared_odd_numbers: u32 =\n        (0..).map(|n| n * n)             // All natural numbers squared\n             .take_while(|&amp;n| n &lt; upper) // Below upper limit\n             .filter(|n| is_odd(*n))     // That are odd\n             .fold(0, |sum, i| sum + i); // Sum them\n    println!(\"functional style: {}\", sum_of_squared_odd_numbers);\n}\n</code></pre>\n\n<p>Why does the closure for <code>take_while</code> take its argument by reference, while all the others take by value?</p>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458914304, "post_id": 36221302, "comment_id": 60074094, "body": "What do you mean by &quot;the argument is taken by value&quot;? Are you talking about <code>f: F</code>?"}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458914345, "post_id": 36221302, "comment_id": 60074114, "body": "Yes. F takes argument by value."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458914884, "post_id": 36221302, "comment_id": 60074388, "body": "Could you clarify what you think should be done instead of using <code>FnMut</code>?"}, {"owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458915135, "post_id": 36221302, "comment_id": 60074507, "body": "Sure, please see my edit."}], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 8, "last_activity_date": 1458915841, "creation_date": 1458915841, "answer_id": 36221775, "question_id": 36221302, "link": "https://stackoverflow.com/questions/36221302/why-bother-using-fnmut-if-the-argument-is-taken-by-value/36221775#36221775", "title": "Why bother using `FnMut` if the argument is taken by value?", "body": "<p>The distinction between <code>FnOnce</code>, <code>FnMut</code> and <code>Fn</code> is how the function accesses its environment (move, mutable reference, shared reference, respectively). It has nothing to do with accessing the function's arguments.</p>\n\n<p><code>FnMut</code> is needed here, because the <code>any</code> method may need to call the function multiple times.</p>\n\n<p>There is a <a href=\"https://doc.rust-lang.org/nightly/book/closures.html#closure-implementation\" rel=\"noreferrer\">paragraph in the Rust book about the implementation of closures</a>. It shows the differences in the <code>self</code> argument, which essentially is a <code>struct</code> that contains the environment. </p>\n"}, {"comments": [{"owner": {"reputation": 15754, "user_id": 9835872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PN0Lq.jpg?s=128&g=1", "display_name": "ruohola", "link": "https://stackoverflow.com/users/9835872/ruohola"}, "edited": false, "score": 0, "creation_date": 1575231394, "post_id": 36221918, "comment_id": 104486960, "body": "Why couldn&#39;t <code>any</code> be defined to take a <code>Fn</code> closure?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 15754, "user_id": 9835872, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PN0Lq.jpg?s=128&g=1", "display_name": "ruohola", "link": "https://stackoverflow.com/users/9835872/ruohola"}, "edited": false, "score": 0, "creation_date": 1575239115, "post_id": 36221918, "comment_id": 104489121, "body": "@ruohola Oof, what an old and not so great answer by me. Regarding your question: because <code>FnMut</code> allows the user to do more things (i.e. mutate its environment). While it&#39;s usually not required and doesn&#39;t make a lot of sense, we can still give this power to the user of <code>any</code>, because why not?"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1458916335, "creation_date": 1458916335, "answer_id": 36221918, "question_id": 36221302, "link": "https://stackoverflow.com/questions/36221302/why-bother-using-fnmut-if-the-argument-is-taken-by-value/36221918#36221918", "title": "Why bother using `FnMut` if the argument is taken by value?", "body": "<blockquote>\n  <p>Why bother use FnMut if the argument is taken by value, since the arg cannot be mutated anyways? </p>\n</blockquote>\n\n<p>The example you linked is kind of incorrect, as the method definition should look like this:</p>\n\n<pre><code>fn any&lt;F&gt;(&amp;mut self, mut f: F) -&gt; bool  // note the `mut f: F`\n    where F: FnMut(Self::Item) -&gt; bool {}\n</code></pre>\n\n<p><em>(compare <a href=\"https://github.com/rust-lang/rust/blob/f1578d37dc844ffeefcabc30960784082c3c54fa/src/libcore/iter.rs#L1696-L1706\" rel=\"nofollow\">the <code>std</code> implementation</a>)</em></p>\n\n<p>This change, however, does not change how the <code>any</code> method can be used! The <code>mut</code> is merely part of the variable binding (which is only important for the method impl) and not part of the type. Taking something by value gives us complete control over the variable -- if we want to mutate the variable, we can do so, but we have to bind it mutably.</p>\n\n<hr>\n\n<blockquote>\n  <p>In fact, why is FnMut even allowed here?</p>\n</blockquote>\n\n<p>You can have trait bounds that <em>would</em> allow all kinds of operations with a type, even if you can't use those operations due to lacking access to the variable. See:</p>\n\n<pre><code>fn foo&lt;T: Iterator&lt;Item=i32&gt;&gt;(it: &amp;T) {}\n</code></pre>\n\n<p>This is valid, but not useful, because as soon as you want to do something usable with the iterator (like calling <code>next</code>):</p>\n\n<pre><code>it.next();\n</code></pre>\n\n<p>You will get a compiler error, since you can't call a <code>&amp;mut self</code> method on an immutable borrow. So the example you linked only works, because the function body doesn't use the functionality of <code>FnMut</code>.</p>\n"}], "owner": {"reputation": 19680, "user_id": 562222, "user_type": "registered", "accept_rate": 57, "profile_image": "https://i.stack.imgur.com/jgGXb.jpg?s=128&g=1", "display_name": "qed", "link": "https://stackoverflow.com/users/562222/qed"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 416, "favorite_count": 0, "answer_count": 2, "score": 5, "last_activity_date": 1458916335, "creation_date": 1458914021, "last_edit_date": 1458916255, "question_id": 36221302, "link": "https://stackoverflow.com/questions/36221302/why-bother-using-fnmut-if-the-argument-is-taken-by-value", "title": "Why bother using `FnMut` if the argument is taken by value?", "body": "<p>Here is an example from <a href=\"http://rustbyexample.com/fn/closures/closure_examples/iter_any.html\" rel=\"noreferrer\">Rust by Example</a>: </p>\n\n<pre><code>pub trait Iterator {\n    // The type being iterated over.\n    type Item;\n\n    // `any` takes `&amp;mut self` meaning the caller may be borrowed\n    // and modified, but not consumed.\n    fn any&lt;F&gt;(&amp;mut self, f: F) -&gt; bool where\n        // `FnMut` meaning any captured variable may at most be\n        // modified, not consumed. `Self::Item` states it takes\n        // arguments to the closure by value.\n        F: FnMut(Self::Item) -&gt; bool {}\n}\n</code></pre>\n\n<p>Why bother using <code>FnMut</code> if the argument is taken by value, since the argument cannot be mutated anyways? In fact, why is <code>FnMut</code> even allowed here? It seems only <code>FnOnce</code> <a href=\"http://rustbyexample.com/fn/closures/input_parameters.html\" rel=\"noreferrer\">is permitted to do this</a>:</p>\n\n<blockquote>\n  <p>It has been noted that Rust chooses how to capture variables on the\n  fly without annotation. This is all very convenient in normal usage\n  however when writing functions, this ambiguity is not allowed. The\n  closure's complete type, including which capturing type, must be\n  annotated. The manner of capture a closure uses is annotated as one of\n  the following <code>trait</code>s:</p>\n  \n  <ul>\n  <li><code>Fn</code>: takes captures by reference (<code>&amp;T</code>) </li>\n  <li><code>FnMut</code>: takes captures by mutable reference (<code>&amp;mut T</code>) </li>\n  <li><code>FnOnce</code>: takes captures by value (<code>T</code>)</li>\n  </ul>\n</blockquote>\n"}, {"tags": ["pointers", "networking", "types", "casting", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458913065, "post_id": 36217936, "comment_id": 60073425, "body": "<i>due to a bug on the server side, I can&#39;t do it with multiple calls</i> \u2014 just because you write it in one call doesn&#39;t mean that the server will read it in one call. That&#39;s up to how the network routes packets between the machines."}, {"owner": {"reputation": 1127, "user_id": 4295805, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/g7bWV.jpg?s=128&g=1", "display_name": "Leontyev Georgiy", "link": "https://stackoverflow.com/users/4295805/leontyev-georgiy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458922571, "post_id": 36217936, "comment_id": 60078482, "body": "I know this. Thing is, morons who developed the server side, did actually expect whole structure to come at once. If this isn&#39;t the case, it crashes. It is good that 24 bytes is something that is expected to come in a single packet unless explicitly noted... And this is what I was trying to avoid."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1127, "user_id": 4295805, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/g7bWV.jpg?s=128&g=1", "display_name": "Leontyev Georgiy", "link": "https://stackoverflow.com/users/4295805/leontyev-georgiy"}, "edited": false, "score": 0, "creation_date": 1458927831, "post_id": 36219686, "comment_id": 60081210, "body": "@LeontyevGeorgiy if the answer worked for you, make sure to upvote and accept it."}, {"owner": {"reputation": 1127, "user_id": 4295805, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/g7bWV.jpg?s=128&g=1", "display_name": "Leontyev Georgiy", "link": "https://stackoverflow.com/users/4295805/leontyev-georgiy"}, "edited": false, "score": 0, "creation_date": 1459007900, "post_id": 36219686, "comment_id": 60105288, "body": "I can&#39;t publicly upvote it; ain&#39;t got 15 reputation yet."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 3, "last_activity_date": 1458913012, "last_edit_date": 1458913012, "creation_date": 1458907872, "answer_id": 36219686, "question_id": 36217936, "link": "https://stackoverflow.com/questions/36217936/write-a-struct-with-multiple-variables-into-a-single-byte-array/36219686#36219686", "title": "Write a struct with multiple variables into a single byte array", "body": "<p>Something like this should be a good start.</p>\n\n<p>You need to use the <a href=\"https://github.com/BurntSushi/byteorder\" rel=\"nofollow\">byteorder crate</a> to handle endianness and write bytes to a stream.</p>\n\n<p>The <code>element</code> type can be conveniently represented as enum on the Rust side.</p>\n\n<pre><code>extern crate byteorder;\n\nuse std::net::TcpStream;\nuse byteorder::{ByteOrder, BigEndian, WriteBytesExt};\nuse std::io::Write;\n\nenum Element {\n    A(i32),\n    B(f64)\n}\n\nimpl Element {\n    fn write_to_buffer&lt;T: ByteOrder&gt;(&amp;self, buffer: &amp;mut [u8; 12]) {\n        let mut buffer = &amp;mut buffer[..];\n        match *self {\n            Element::A(n) =&gt; {\n                buffer.write_i32::&lt;T&gt;(0).unwrap();\n                buffer.write_i32::&lt;T&gt;(n).unwrap();\n            },\n            Element::B(n) =&gt; {\n                buffer.write_i32::&lt;T&gt;(1).unwrap();\n                buffer.write_f64::&lt;T&gt;(n).unwrap();\n            },\n        }\n    }\n}\n\nfn main() {\n    let mut stream = TcpStream::connect(\"127.0.0.1:1234\").unwrap();\n\n    let mut buffer = [0u8; 12];\n\n    let b = Element::B(317.98);\n\n    b.write_to_buffer::&lt;BigEndian&gt;(&amp;mut buffer);\n\n    stream.write(&amp;buffer).unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 1127, "user_id": 4295805, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/g7bWV.jpg?s=128&g=1", "display_name": "Leontyev Georgiy", "link": "https://stackoverflow.com/users/4295805/leontyev-georgiy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 193, "favorite_count": 0, "accepted_answer_id": 36219686, "answer_count": 1, "score": 0, "last_activity_date": 1458925206, "creation_date": 1458900710, "last_edit_date": 1458925206, "question_id": 36217936, "link": "https://stackoverflow.com/questions/36217936/write-a-struct-with-multiple-variables-into-a-single-byte-array", "title": "Write a struct with multiple variables into a single byte array", "body": "<p>I want to create a byte storage for the following structure and put both variables (<code>tag</code> and <code>i</code>/<code>d</code>) into the storage. Then I want to write the storage into the <code>TcpStream</code> in a single write; due to a bug on the server side, I can't do it with multiple calls.</p>\n\n<p>I need to use a C-style API that involves unions. The total structure size is 12 bytes:</p>\n\n<pre><code>struct element {\n    int tag;\n    union {\n        int i; double d;\n    } data;\n}\n</code></pre>\n\n<p>How do I do it? Maybe there's a better way of doing it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458913364, "post_id": 36213630, "comment_id": 60073593, "body": "<i>but I think that&#39;d run into the same issues</i> \u2014 did you try this? Why do you think it would have the same issues?"}, {"owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458919756, "post_id": 36213630, "comment_id": 60076996, "body": "@Shepmaster I assumed if I allocated the i64&#39;s in the new function, on the stack, it would get pissed. But it seems that it works. I&#39;m guessing this is because I am giving ownership back to the caller, so the borrow checker doesn&#39;t get upset, i.e. there&#39;s no borrow? Is that kind of solution more idiomatic than using a containing heap-allocated structure like Box or Cell?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1458920053, "post_id": 36213630, "comment_id": 60077144, "body": "You are correct that there is no borrowing involved: you allocate the <code>i64</code>s on the stack, then transfer ownership of them to the <code>Vec</code>, and then transfer ownership of the <code>Vec</code> back to the caller. <i>more idiomatic than using a containing heap-allocated structure</i> \u2014 a <code>Vec</code> <b>is</b> a &quot;containing heap-allocated structure&quot;. I would say it is more idiomatic to use a <code>Vec</code> in this case than a <code>Box</code> or <code>Cell</code>. In this specific example, you could also return an array <code>[i64; 5]</code> since you know how many numbers you will be returning."}], "answers": [{"comments": [{"owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "edited": false, "score": 0, "creation_date": 1458919976, "post_id": 36214110, "comment_id": 60077103, "body": "Thank you so much for this. Makes it a million times clearer, and glad to know I wasn&#39;t crazy! I thought it seemed like the idea was often to avoid things like Box, but if they have no overhead, who cares then i guess? Only question is, would it be considered &quot;more idiomatic&quot; to return a Vec&lt;i64&gt; with i64&#39;s made within the fn? To avoid heap-allocating stuff?"}, {"owner": {"reputation": 1064, "user_id": 865424, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/032f47cb2908b013d42a4614bcc94bb5?s=128&d=identicon&r=PG", "display_name": "B. Striegel", "link": "https://stackoverflow.com/users/865424/b-striegel"}, "reply_to_user": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "edited": false, "score": 0, "creation_date": 1458943663, "post_id": 36214110, "comment_id": 60088803, "body": "@William, re: <code>Vec&lt;i64&gt;</code> being the most idiomatic approach, the answer is yes, and I&#39;ve updated the above to reflect that. My example using <code>Box</code> was just to make sure that it was clear that there are many ways to use the heap. If you had a function that wanted to &quot;return new data&quot; and there <i>wasn&#39;t</i> already a <code>Vec</code> being returned, then <code>Box</code> is what you&#39;d use in lieu of it."}, {"owner": {"reputation": 1064, "user_id": 865424, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/032f47cb2908b013d42a4614bcc94bb5?s=128&d=identicon&r=PG", "display_name": "B. Striegel", "link": "https://stackoverflow.com/users/865424/b-striegel"}, "reply_to_user": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "edited": false, "score": 0, "creation_date": 1458943917, "post_id": 36214110, "comment_id": 60088899, "body": "@William also, I wouldn&#39;t say that <code>Box</code> has <i>no</i> overhead, because a heap allocation does have more overhead than a stack allocation. If you <i>really</i> need maximum performance (but beware of premature optimization etc etc), you should consider the C-style approach where you pass in a reference to memory allocated in an earlier stack frame. I&#39;ll even update the C-style example to use stack-allocated arrays rather than <code>Vec</code> to illustrate this."}], "tags": [], "owner": {"reputation": 1064, "user_id": 865424, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/032f47cb2908b013d42a4614bcc94bb5?s=128&d=identicon&r=PG", "display_name": "B. Striegel", "link": "https://stackoverflow.com/users/865424/b-striegel"}, "is_accepted": false, "score": 5, "last_activity_date": 1458944079, "last_edit_date": 1458944079, "creation_date": 1458880827, "answer_id": 36214110, "question_id": 36213630, "link": "https://stackoverflow.com/questions/36213630/how-to-return-new-data-from-a-function-as-a-reference-without-borrow-checker-iss/36214110#36214110", "title": "How to return new data from a function as a reference without borrow checker issues?", "body": "<p>EDIT: I only just realized that you wrote \"I'm aware there's Box, Copy etc type workaround but I'm mostly interested in an idiomatic rust solution\", but I've already typed the whole answer. :P And the solutions below <em>are</em> idiomatic Rust, this is all just how memory works! Don't go trying to return pointers to stack-allocated data in C or C++, because even if the compiler doesn't stop you, that doesn't mean anything good will come of it. ;)</p>\n\n<hr>\n\n<p>Any time that you return a reference, that reference <em>must</em> have been a parameter to the function. In other words, if you're returning references to data, all that data must have been allocated <em>outside</em> of the function. You seem to understand this, I just want to make sure it's clear. :)</p>\n\n<p>There are many potential ways of solving this problem depending on what your use case is.</p>\n\n<p>In this particular example, because you don't need <code>x</code> for anything afterward, you can just give ownership to <code>foo</code> without bothering with references at all:</p>\n\n<pre><code>fn foo(x: i64) -&gt; Vec&lt;i64&gt; {\n    std::iter::repeat(x * 2).take(5).collect()\n}\n\nfn main() {\n    let x = 5;\n    println!(\"{:?}\", foo(x));\n}\n</code></pre>\n\n<p>But let's say that you don't want to pass ownership into <code>foo</code>. You <em>could</em> still return a vector of references as long as you didn't want to mutate the underlying value:</p>\n\n<pre><code>fn foo(x: &amp;i64) -&gt; Vec&lt;&amp;i64&gt; {\n    std::iter::repeat(x).take(5).collect()\n}\n\nfn main() {\n    let x = 5;\n    println!(\"{:?}\", foo(&amp;x));\n}\n</code></pre>\n\n<p>...and likewise you could mutate the underlying value as long as you didn't want to hand out new pointers to it:</p>\n\n<pre><code>fn foo(x: &amp;mut i64) -&gt; &amp;mut i64 {\n    *x *= 2;\n    x\n}\n\nfn main() {\n    let mut x = 5;\n    println!(\"{:?}\", foo(&amp;mut x));\n}\n</code></pre>\n\n<p>...but of course, you want to do both. So if you're allocating memory and you want to return it, then you need to do it somewhere other than the stack. One thing you can do is just stuff it on the heap, using <code>Box</code>:</p>\n\n<pre><code>// Just for illustration, see the next example for a better approach\nfn foo(x: &amp;i64) -&gt; Vec&lt;Box&lt;i64&gt;&gt; {\n    std::iter::repeat(Box::new(x * 2)).take(5).collect()\n}\n\nfn main() {\n    let x = 5;\n    println!(\"{:?}\", foo(&amp;x));\n}\n</code></pre>\n\n<p>...though with the above I just want to make sure you're aware of <code>Box</code> as a general means of using the heap. Truthfully, simply using a <code>Vec</code> means that your data will be placed on the heap, so this works:</p>\n\n<pre><code>fn foo(x: &amp;i64) -&gt; Vec&lt;i64&gt; {\n    std::iter::repeat(x * 2).take(5).collect()\n}\n\nfn main() {\n    let x = 5;\n    println!(\"{:?}\", foo(&amp;x));\n}\n</code></pre>\n\n<p>The above is probably the most idiomatic example here, though as ever your use case might demand something different.</p>\n\n<p>Alternatively, you could pull a trick from C's playbook and pre-allocate the memory <em>outside</em> of <code>foo</code>, and then pass in a reference to it:</p>\n\n<pre><code>fn foo(x: &amp;i64, v: &amp;mut [i64; 5]) {\n    for i in v {\n        *i = x * 2;\n    }\n}\n\nfn main() {\n    let x = 5;\n    let mut v = [0; 5];  // fixed-size array on the stack\n    foo(&amp;x, &amp;mut v);\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>Finally, if the function <em>must</em> take a reference as its parameter <em>and</em> you must mutate the referenced data <em>and</em> you must copy the reference itself <em>and</em> you must return these copied references, then you can use <code>Cell</code> for this:</p>\n\n<pre><code>use std::cell::Cell;\n\nfn foo(x: &amp;Cell&lt;i64&gt;) -&gt; Vec&lt;&amp;Cell&lt;i64&gt;&gt; {\n    x.set(x.get() * 2);\n    std::iter::repeat(x).take(5).collect()\n}\n\nfn main() {\n    let x = Cell::new(5);\n    println!(\"{:?}\", foo(&amp;x));\n}\n</code></pre>\n\n<p><code>Cell</code> is both efficient and non-surprising, though note that <code>Cell</code> works only on types that implement the <code>Copy</code> trait (which all the primitive numeric types do). If your type doesn't implement <code>Copy</code> then you can still do this same thing with <code>RefCell</code>, but it imposes a slight runtime overhead and opens up the possibilities for panics at runtime if you get the \"borrowing\" wrong.</p>\n"}], "owner": {"reputation": 317, "user_id": 933350, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/a06c60d631247a67d9df2d5cd3c36e07?s=128&d=identicon&r=PG", "display_name": "William", "link": "https://stackoverflow.com/users/933350/william"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 282, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1458944079, "creation_date": 1458877179, "last_edit_date": 1458913216, "question_id": 36213630, "link": "https://stackoverflow.com/questions/36213630/how-to-return-new-data-from-a-function-as-a-reference-without-borrow-checker-iss", "title": "How to return new data from a function as a reference without borrow checker issues?", "body": "<p>I'm writing a function that takes a reference to an integer and returns a vector of that integer times 2, 5 times. I think that'd look something like:</p>\n\n<pre><code>fn foo(x: &amp;i64) -&gt; Vec&lt;&amp;i64&gt; {\n    let mut v = vec![];\n    for i in 0..5 {\n        let q = x * 2;\n        v.push(&amp;q);\n    }\n    v\n}\n\nfn main() {\n    let x = 5;\n    let q = foo(&amp;x);\n    println!(\"{:?}\", q);\n}\n</code></pre>\n\n<p>The borrow checker goes nuts because I define a new variable, it's allocated on the stack, and goes out of scope at the end of the function. </p>\n\n<p>What do I do? Certainly I can't go through life without writing functions that create new data! I'm aware there's <code>Box</code>, and <code>Copy</code>-type workarounds, but I'm interested in an idiomatic Rust solution.</p>\n\n<p>I realize I could return a <code>Vec&lt;i64&gt;</code> but I think that'd run into the same issues? Mainly trying to come up with an \"emblematic\" problem for the general issue :)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1458873636, "post_id": 36212045, "comment_id": 60059351, "body": "No. See a plethora of existing questions about this topic: <a href=\"http://stackoverflow.com/q/27535289/155423\">1</a>, <a href=\"http://stackoverflow.com/q/26329231/155423\">2</a>, <a href=\"http://stackoverflow.com/q/27646925/155423\">3</a>, <a href=\"http://stackoverflow.com/q/31904842/155423\">4</a>, and so on. You want the <a href=\"https://github.com/Kimundi/rfcs/blob/conservative-impl-trait-the/text/0000-conservative-impl-trait.md\" rel=\"nofollow noreferrer\">&quot;abstract return types&quot; RFC</a> (sometimes called &quot;impl trait&quot;). Please pick the most useful question and mark this as a duplicate of that."}, {"owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1458874933, "post_id": 36212045, "comment_id": 60059636, "body": "@Shepmaster Actually, I was looking for the &quot;newtype&quot; and &quot;type alias&quot; methods in [1]. (Although the impl trait approach will also be nice when it lands.) Closing as dupe..."}], "owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "closed_date": 1458875031, "answer_count": 0, "score": 2, "last_activity_date": 1458864247, "creation_date": 1458864247, "question_id": 36212045, "link": "https://stackoverflow.com/questions/36212045/how-to-create-composite-iterators-with-simple-types", "closed_reason": "Duplicate", "title": "How to create composite iterators with simple types", "body": "<p>Iterators in Rust are very convenient and powerful, and in particular they are designed to be easily composable, as in this example from the docs:</p>\n\n<pre><code>let iter = [1, 4, 2, 3].iter()\n        .cloned()\n        .inspect(|x| println!(\"about to filter: {}\", x))\n        .filter(|&amp;x| x % 2 == 0)\n        .inspect(|x| println!(\"made it through filter: {}\", x));\n</code></pre>\n\n<p>There is a drawback, however. Note that <code>iter</code> here has no stated type. The reason is because the type is something horrible; if I try it I get the type:</p>\n\n<pre><code>iter: core::iter::Inspect&lt;\n        core::iter::Filter&lt;\n          core::iter::Inspect&lt;\n            core::iter::Cloned&lt;core::slice::Iter&lt;'a, usize&gt;&gt;,\n            [closure@test.rs:...]&gt;,\n          [closure@test.rs:...]&gt;,\n        [closure@test.rs:...]&gt;\n</code></pre>\n\n<p>In fact, because of the closure types I can't even type this in if I wanted to. (I could circumvent this problem by defining the functions with explicit names.) By comparison to Java, this seems overly complex, since it could just promote the types to <code>Iterator&lt;T&gt;</code> each time, but this is necessary for Rust's monomorphism + static dispatch to work.</p>\n\n<p>Suppose I wanted to define this as an iterator adapter, that is:</p>\n\n<pre><code>fn adapter&lt;'a, I: Sized + Iterator&lt;Self=&amp;'a usize&gt;&gt;(i: I) -&gt; MyAdapter&lt;'a, I&gt; {\n    i.cloned()\n        .inspect(|x| println!(\"about to filter: {}\", x))\n        .filter(|&amp;x| x % 2 == 0)\n        .inspect(|x| println!(\"made it through filter: {}\", x))\n}\n</code></pre>\n\n<p>I don't want to expose to the clients of my code the details of the interior adapter chain, instead giving it the new name <code>MyAdapter&lt;'a, I&gt;</code>, but I also don't want to write my own <code>next()</code> method since I already have a perfectly good composite implementation. Is there a way to satisfy both these goals, and still have a static dispatch?</p>\n"}, {"tags": ["rust", "blocking", "resume"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1458870735, "post_id": 36211529, "comment_id": 60058670, "body": "Is <code>mio</code> too heavy for this use?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1458873405, "post_id": 36211529, "comment_id": 60059286, "body": "@WiSaGaN MIO expressly does not handle async IO for files. A good read on the <a href=\"http://blog.libtorrent.org/2012/10/asynchronous-disk-io/\" rel=\"nofollow noreferrer\">background of async file IO</a>."}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1458874170, "post_id": 36211529, "comment_id": 60059477, "body": "@Shepmaster OP does not need async IO as it seems. Non-blocking IO can be achieved by using <code>mio</code> with a <code>RawFd</code> <code>Evented</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1458875110, "post_id": 36211529, "comment_id": 60059670, "body": "@WiSaGaN any idea if that will work on all primary platforms (Linux, Windows, OS X)?"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1458875207, "post_id": 36211529, "comment_id": 60059690, "body": "@Shepmaster no, it&#39;s just that OP is using <code>&#47;dev&#47;input&#47;fs0</code>, so at least it is not Windows. :p"}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1587127015, "last_edit_date": 1587127015, "creation_date": 1462562311, "answer_id": 37079900, "question_id": 36211529, "link": "https://stackoverflow.com/questions/36211529/how-can-i-force-a-thread-that-is-blocked-reading-from-a-file-to-resume-in-rust/37079900#37079900", "title": "How can I force a thread that is blocked reading from a file to resume in Rust?", "body": "<p>The idea is to call <code>File::read</code> only when there is available data. If there is no available data, we check a flag to see if the main thread requested to stop. If not, wait and try again.</p>\n\n<p>Here is an example using <a href=\"https://crates.io/crates/nonblock\" rel=\"nofollow noreferrer\">nonblock</a> crate:</p>\n\n<pre><code>extern crate nonblock;\n\nuse std::fs::File;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\nuse nonblock::NonBlockingReader;\n\nfn main() {\n    let f = File::open(\"/dev/stdin\").expect(\"open failed\");\n    let mut reader = NonBlockingReader::from_fd(f).expect(\"from_fd failed\");\n\n    let exit = Arc::new(Mutex::new(false));\n    let texit = exit.clone();\n\n    println!(\"start reading, type something and enter\");\n\n    thread::spawn(move || {\n        let mut buf: Vec&lt;u8&gt; = Vec::new();\n        while !*texit.lock().unwrap() {\n            let s = reader.read_available(&amp;mut buf).expect(\"io error\");\n            if s == 0 {\n                if reader.is_eof() {\n                    println!(\"eof\");\n                    break;\n                }\n            } else {\n                println!(\"read {:?}\", buf);\n                buf.clear();\n            }\n            thread::sleep(Duration::from_millis(200));\n        }\n        println!(\"stop reading\");\n    });\n\n    thread::sleep(Duration::from_secs(5));\n\n    println!(\"closing file\");\n    *exit.lock().unwrap() = true;\n\n    thread::sleep(Duration::from_secs(2));\n    println!(\"\\\"stop reading\\\" was printed before the main exit!\");\n}\n\nfn read_async&lt;F&gt;(file: File, fun: F) -&gt; thread::JoinHandle&lt;()&gt;\n    where F: Send + 'static + Fn(&amp;Vec&lt;u8&gt;)\n{\n    let mut reader = NonBlockingReader::from_fd(file).expect(\"from_fd failed\");\n    let mut buf: Vec&lt;u8&gt; = Vec::new();\n    thread::spawn(move || {\n        loop {\n            let s = reader.read_available(&amp;mut buf).expect(\"io error\");\n            if s == 0 {\n                if reader.is_eof() {\n                    break;\n                }\n            } else {\n                fun(&amp;buf);\n                buf.clear();\n            }\n            thread::sleep(Duration::from_millis(100));\n        }\n    })\n}\n</code></pre>\n\n<p>Here is an example using <a href=\"http://linux.die.net/man/2/poll\" rel=\"nofollow noreferrer\"><code>poll</code></a> binding of <a href=\"https://crates.io/crates/nix\" rel=\"nofollow noreferrer\">nix</a> crate. The function <code>poll</code> waits (with timeout) for specific events:</p>\n\n<pre><code>extern crate nix;\n\nuse std::io::Read;\nuse std::os::unix::io::AsRawFd;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::time::Duration;\n\nuse nix::poll;\n\nfn main() {\n    let mut f = std::fs::File::open(\"/dev/stdin\").expect(\"open failed\");\n    let mut pfd = poll::PollFd {\n        fd: f.as_raw_fd(),\n        events: poll::POLLIN, // is there input data?\n        revents: poll::EventFlags::empty(),\n    };\n\n    let exit = Arc::new(Mutex::new(false));\n    let texit = exit.clone();\n\n    println!(\"start reading, type something and enter\");\n\n    thread::spawn(move || {\n        let timeout = 100; // millisecs\n        let mut s = unsafe { std::slice::from_raw_parts_mut(&amp;mut pfd, 1) };\n        let mut buffer = [0u8; 10];\n        loop {\n            if poll::poll(&amp;mut s, timeout).expect(\"poll failed\") != 0 {\n                let s = f.read(&amp;mut buffer).expect(\"read failed\");\n                println!(\"read {:?}\", &amp;buffer[..s]);\n            }\n            if *texit.lock().unwrap() {\n                break;\n            }\n        }\n        println!(\"stop reading\");\n    });\n\n    thread::sleep(Duration::from_secs(5));\n\n    println!(\"closing file\");\n    *exit.lock().unwrap() = true;\n\n    thread::sleep(Duration::from_secs(2));\n    println!(\"\\\"stop reading\\\" was printed before the main exit!\");\n\n}\n</code></pre>\n"}], "owner": {"reputation": 111, "user_id": 4032476, "user_type": "registered", "accept_rate": 25, "profile_image": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=128", "display_name": "Pentagolo", "link": "https://stackoverflow.com/users/4032476/pentagolo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 811, "favorite_count": 0, "answer_count": 1, "score": 9, "last_activity_date": 1587127015, "creation_date": 1458861067, "last_edit_date": 1458873342, "question_id": 36211529, "link": "https://stackoverflow.com/questions/36211529/how-can-i-force-a-thread-that-is-blocked-reading-from-a-file-to-resume-in-rust", "title": "How can I force a thread that is blocked reading from a file to resume in Rust?", "body": "<p>Because Rust does not have have the built-in ability to read from a file in a non-blocking manner, I have to spawn a thread which reads the file <code>/dev/input/fs0</code> in order to get joystick events. Suppose the joystick is unused (nothing to read), so the reading thread is blocked while reading from the file.</p>\n\n<p>Is there a way for the main thread to force the blocking read of the reading thread to resume, so the reading thread may exit cleanly?</p>\n\n<p>In other languages, I would simply close the file in the main thread. This would force the blocking read to resume. But I have not found a way to do so in Rust, because reading requires a mutable reference to the file.</p>\n"}, {"tags": ["multithreading", "concurrency", "closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1148, "user_id": 1718518, "user_type": "registered", "accept_rate": 46, "profile_image": "https://www.gravatar.com/avatar/2e0bb9684b8efbf6aed5efa3fd883126?s=128&d=identicon&r=PG", "display_name": "Josh Hansen", "link": "https://stackoverflow.com/users/1718518/josh-hansen"}, "edited": false, "score": 0, "creation_date": 1458928402, "post_id": 36213377, "comment_id": 60081489, "body": "crossbeam looks like what I&#39;m looking for. One question: if crossbeam was basically booted from Rust 1.0 due to soundness issues, have those issues been resolved in the library as it now stands?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1148, "user_id": 1718518, "user_type": "registered", "accept_rate": 46, "profile_image": "https://www.gravatar.com/avatar/2e0bb9684b8efbf6aed5efa3fd883126?s=128&d=identicon&r=PG", "display_name": "Josh Hansen", "link": "https://stackoverflow.com/users/1718518/josh-hansen"}, "edited": false, "score": 0, "creation_date": 1458929424, "post_id": 36213377, "comment_id": 60081964, "body": "@JoshHansen yes. There&#39;s lots of background information for the curious. The <a href=\"https://github.com/rust-lang/rust/issues/24292\" rel=\"nofollow noreferrer\">original issue</a> and the related <a href=\"https://github.com/rust-lang/rfcs/pull/1084\" rel=\"nofollow noreferrer\">RFC</a> are very complete. IIRC, there was one issue that was fixed in Rust proper to allow some of these to be built on top, but I can&#39;t find the exact link now."}, {"owner": {"reputation": 1148, "user_id": 1718518, "user_type": "registered", "accept_rate": 46, "profile_image": "https://www.gravatar.com/avatar/2e0bb9684b8efbf6aed5efa3fd883126?s=128&d=identicon&r=PG", "display_name": "Josh Hansen", "link": "https://stackoverflow.com/users/1718518/josh-hansen"}, "edited": false, "score": 0, "creation_date": 1458943512, "post_id": 36213377, "comment_id": 60088736, "body": "Thanks for the additional context. I ended up using crossbeam which basically seems to be working."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1540844148, "last_edit_date": 1540844148, "creation_date": 1458874999, "answer_id": 36213377, "question_id": 36211389, "link": "https://stackoverflow.com/questions/36211389/can-a-rust-closure-be-used-by-multiple-threads/36213377#36213377", "title": "Can a Rust closure be used by multiple threads?", "body": "<p>The ultimate problem revolves around <em>who owns the closure</em>. The code as written states that ownership of the closure is transferred to <code>average</code>. This function then tries to give the closure to multiple threads, which fails as you have seen, as you can't give one item to multiple children.</p>\n\n<blockquote>\n  <p>but closures don't implement <code>Copy</code> so no luck</p>\n</blockquote>\n\n<p>As of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1260-2018-05-10\" rel=\"noreferrer\">Rust 1.26.0</a>, closures <em>do</em> implement <code>Clone</code> and <code>Copy</code> if all of the captured variables do. This means your final example code now works as-is:</p>\n\n<pre><code>fn average&lt;F: Fn(f64) -&gt; f64 + Send + 'static + Copy&gt;(f: F) -&gt; f64 { /* ... */ }\n</code></pre>\n\n<p>However, it's possible that your closures won't implement <code>Copy</code> or <code>Clone</code>.</p>\n\n<p>You cannot give out a reference to the closure owned by <code>average</code> because the thread created with <code>thread::spawn</code> may outlive the call to <code>average</code>. When <code>average</code> exits, any stack-allocated variables will be destroyed. Any use of them would cause memory unsafety, which Rust aims to prevent.</p>\n\n<p>One solution is to use an <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a>. This will allow multiple shared owners of a single resource in a multithreaded context. When the wrapped closure is cloned, only a new reference is created. When all references disappear, the object is freed.</p>\n\n<pre><code>use std::{\n    sync::{mpsc, Arc},\n    thread,\n};\n\nconst THREAD_COUNT: u64 = 4;\n\nfn average&lt;F&gt;(f: F) -&gt; f64\nwhere\n    F: Fn(f64) -&gt; f64 + Send + Sync + 'static,\n{\n    let (tx, rx) = mpsc::channel();\n    let f = Arc::new(f);\n\n    for id in 0..THREAD_COUNT {\n        let thread_tx = tx.clone();\n        let f = f.clone();\n        thread::spawn(move || {\n            thread_tx.send(f(id as f64)).unwrap();\n        });\n    }\n\n    let mut total = 0.0;\n    for _ in 0..THREAD_COUNT {\n        total += rx.recv().unwrap();\n    }\n\n    total / THREAD_COUNT as f64\n}\n\nfn main() {\n    average(|x| x);\n}\n</code></pre>\n\n<p>A more standard solution is to use <em>scoped threads</em>. These threads are guaranteed to exit by a certain time, which allows you to pass references that outlive the threads to the threads.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32750829/155423\">How can I pass a reference to a stack variable to a thread?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33818141/155423\">How do I pass disjoint slices from a vector to different threads?</a></li>\n</ul>\n"}], "owner": {"reputation": 1148, "user_id": 1718518, "user_type": "registered", "accept_rate": 46, "profile_image": "https://www.gravatar.com/avatar/2e0bb9684b8efbf6aed5efa3fd883126?s=128&d=identicon&r=PG", "display_name": "Josh Hansen", "link": "https://stackoverflow.com/users/1718518/josh-hansen"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4525, "favorite_count": 2, "accepted_answer_id": 36213377, "answer_count": 1, "score": 8, "last_activity_date": 1540844148, "creation_date": 1458860282, "last_edit_date": 1540843860, "question_id": 36211389, "link": "https://stackoverflow.com/questions/36211389/can-a-rust-closure-be-used-by-multiple-threads", "title": "Can a Rust closure be used by multiple threads?", "body": "<p>I'd like the ability to have multiple threads evaluate the same closure. The application I have in mind is parallelized numerical integration, so a situation where the function domain can be easily split into N chunks and handed to threads.</p>\n\n<p>This is a simple function that evaluates the provided closure multiple times and averages the result:</p>\n\n<pre><code>use std::sync::mpsc;\nuse std::thread;\n\nconst THREAD_COUNT: u64 = 4;\n\nfn average&lt;F: Fn(f64) -&gt; f64&gt;(f: F) -&gt; f64 {\n    let (tx, rx) = mpsc::channel();\n    for id in 0..THREAD_COUNT {\n        let thread_tx = tx.clone();\n        thread::spawn(move || {\n            thread_tx.send(f(id as f64));\n        });\n    }\n\n    let mut total = 0.0;\n    for id in 0..THREAD_COUNT {\n        total += rx.recv().unwrap();\n    }\n    total / THREAD_COUNT as f64\n}\n\nfn main() {\n    average(|x: f64| -&gt; f64 { x });\n}\n</code></pre>\n\n<p>When I compile I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `F` cannot be sent between threads safely\n  --&gt; src/main.rs:10:9\n   |\n10 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^ `F` cannot be sent between threads safely\n   |\n   = help: within `[closure@src/main.rs:10:23: 12:10 thread_tx:std::sync::mpsc::Sender&lt;f64&gt;, f:F, id:u64]`, the trait `std::marker::Send` is not implemented for `F`\n   = help: consider adding a `where F: std::marker::Send` bound\n   = note: required because it appears within the type `[closure@src/main.rs:10:23: 12:10 thread_tx:std::sync::mpsc::Sender&lt;f64&gt;, f:F, id:u64]`\n   = note: required by `std::thread::spawn`\n</code></pre>\n\n<p>So I add <code>+ Send</code> to the bounds on <code>F</code> and get a new error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the parameter type `F` may not live long enough\n  --&gt; src/main.rs:10:9\n   |\n6  | fn average&lt;F: Fn(f64) -&gt; f64 + Send&gt;(f: F) -&gt; f64 {\n   |            -- help: consider adding an explicit lifetime bound `F: 'static`...\n...\n10 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^\n   |\nnote: ...so that the type `[closure@src/main.rs:10:23: 12:10 thread_tx:std::sync::mpsc::Sender&lt;f64&gt;, f:F, id:u64]` will meet its required lifetime bounds\n  --&gt; src/main.rs:10:9\n   |\n10 |         thread::spawn(move || {\n   |         ^^^^^^^^^^^^^\n</code></pre>\n\n<p>So I add <code>+ 'static</code> to <code>F</code> and get this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: capture of moved value: `f`\n  --&gt; src/main.rs:11:28\n   |\n10 |         thread::spawn(move || {\n   |                       ------- value moved (into closure) here\n11 |             thread_tx.send(f(id as f64));\n   |                            ^ value captured here after move\n   |\n   = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>So I add <code>+ Copy</code> to <code>F</code> and get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait `core::marker::Copy` is not implemented for the type `[closure@src/test.rs:115:11: 115:26]\n</code></pre>\n\n<p>It seems every thread wants its own copy of the closure (because of <code>move</code>) but closures don't implement <code>Copy</code> so no luck. It seems strange to me because if the closures are never mutating state then what's the safety issue with multiple threads accessing them?</p>\n\n<p>I can get the code to work by providing a regular function instead of a closure, but this makes my code non-generic, i.e. it only works for a specific function instead of for anything that's <code>Fn(f64) -&gt; f64</code>. And for the type of integration I'm doing, the functions integrated often have certain fixed variables mixed with the variable of integration, so it would seem natural to capture the fixed variables with a closure.</p>\n\n<p>Is there some way to make this kind of multithreaded function evaluation work in a generic manner? Am I just thinking about things wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 0, "creation_date": 1458858440, "post_id": 36210397, "comment_id": 60055248, "body": "As listed in <code>rust-usb</code>&#39;s README: <a href=\"https://github.com/dcuddeback/libusb-rs\" rel=\"nofollow noreferrer\">github.com/dcuddeback/libusb-rs</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1458873167, "post_id": 36210397, "comment_id": 60059233, "body": "What have you tried? Asking for suggestions for libraries is <a href=\"http://stackoverflow.com/help/on-topic\">off topic of SO</a>."}], "answers": [{"tags": [], "owner": {"reputation": 943, "user_id": 6423998, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-ELwqByL1DRk/AAAAAAAAAAI/AAAAAAAACJA/iiaY9iDLjpE/photo.jpg?sz=128", "display_name": "Dylan McNamee", "link": "https://stackoverflow.com/users/6423998/dylan-mcnamee"}, "is_accepted": false, "score": 1, "last_activity_date": 1557549366, "creation_date": 1557549366, "answer_id": 56087230, "question_id": 36210397, "link": "https://stackoverflow.com/questions/36210397/interfacing-with-usb-devices-in-rust/56087230#56087230", "title": "Interfacing with USB devices in Rust?", "body": "<p>There are a number of wrappers to the C libusb library, including <a href=\"https://github.com/dcuddeback/libusb-rs\" rel=\"nofollow noreferrer\">libusb = \"0.3.0\"</a> and <a href=\"https://github.com/kevinmehall/rust-usb\" rel=\"nofollow noreferrer\">usb = \"0.2.2\".</a> I haven't used either yet, but since your question came up first in my search, I thought I'd log these two answers here.</p>\n"}, {"tags": [], "owner": {"reputation": 1075, "user_id": 410020, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/a18ef2892f9bccd8a493ef07650bf211?s=128&d=identicon&r=PG", "display_name": "Tamschi", "link": "https://stackoverflow.com/users/410020/tamschi"}, "is_accepted": false, "score": 0, "last_activity_date": 1576166659, "creation_date": 1576166659, "answer_id": 59308555, "question_id": 36210397, "link": "https://stackoverflow.com/questions/36210397/interfacing-with-usb-devices-in-rust/59308555#59308555", "title": "Interfacing with USB devices in Rust?", "body": "<p>I tried to use the <a href=\"https://crates.io/crates/usb\" rel=\"nofollow noreferrer\">usb</a> and <a href=\"https://crates.io/crates/libusb\" rel=\"nofollow noreferrer\">libusb</a> crates, but couldn't get my program to build correctly with the VS 2019 toolchain. <a href=\"https://crates.io/crates/rusb\" rel=\"nofollow noreferrer\">rusb</a> seems to have (roughly?) the same interface but downloads and builds <em>libusb</em> automatically, which worked for me without additional configuration.</p>\n"}], "owner": {"reputation": 621, "user_id": 5665872, "user_type": "registered", "accept_rate": 50, "profile_image": "https://lh5.googleusercontent.com/-zgQc2CUwwKs/AAAAAAAAAAI/AAAAAAAABKE/Dh96hNnK8Qs/photo.jpg?sz=128", "display_name": "Fluffy", "link": "https://stackoverflow.com/users/5665872/fluffy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2746, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1576166659, "creation_date": 1458855375, "last_edit_date": 1458873086, "question_id": 36210397, "link": "https://stackoverflow.com/questions/36210397/interfacing-with-usb-devices-in-rust", "title": "Interfacing with USB devices in Rust?", "body": "<p>I'm trying to figure out how to interface with a USB device in Rust. Does anyone have a solution? I found a package called usb-rust, but it was deprecated.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1458847225, "post_id": 36207839, "comment_id": 60050020, "body": "If the problem is with the <code>doc!</code> macro of the bson crate, and potentially its interaction with the <code>regex</code> crate, then there is nothing specific to MongoDB here. Please produce a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, where minimal means removing all the extra fluff (MongoDB, connecting to other servers, ...) and complete means adding back the imports that you use so we do not have to guess which crate you depend on."}, {"owner": {"reputation": 2479, "user_id": 3666882, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/4d6c91065605fbddcd17db1556134b37?s=128&d=identicon&r=PG&f=1", "display_name": "Rodrigo", "link": "https://stackoverflow.com/users/3666882/rodrigo"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1458848058, "post_id": 36207839, "comment_id": 60050485, "body": "@MatthieuM. I can make it work if I don&#39;t try to add the regex result. I&#39;ve added the crates I&#39;m using"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1458877143, "post_id": 36207839, "comment_id": 60060078, "body": "@user3666882 Listen to what MattheiuM. is saying. There&#39;s no reason to be including HTTP fetches or <code>let coll = ...</code> or any of that if the error is with <code>doc!</code>."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1458877248, "post_id": 36207839, "comment_id": 60060097, "body": "Does <code>fn main() { doc! { &quot;value&quot; =&gt; Some(&quot;foo&quot;) }; }</code> replicate the error?"}], "owner": {"reputation": 2479, "user_id": 3666882, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/4d6c91065605fbddcd17db1556134b37?s=128&d=identicon&r=PG&f=1", "display_name": "Rodrigo", "link": "https://stackoverflow.com/users/3666882/rodrigo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 387, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1458849040, "creation_date": 1458845335, "last_edit_date": 1458849040, "question_id": 36207839, "link": "https://stackoverflow.com/questions/36207839/how-can-i-convert-an-optionstr-to-bson", "title": "How can I convert an Option&lt;&amp;str&gt; to BSON?", "body": "<p>Here is my Rust program:</p>\n\n<pre><code>#[macro_use(bson, doc)]\nextern crate bson;\nextern crate mongodb;\n\nextern crate hyper;\nextern crate regex;\n\nuse std::io::Read;\n\n// Hyper\nuse hyper::Client;\nuse hyper::header::Connection;\n\n// Regex\nuse regex::Regex;\n\n// MongoDB\nuse mongodb::{Client as MongoClient, ThreadedClient};\nuse mongodb::db::ThreadedDatabase;\nuse mongodb::error::Result as MongoResult;\n\n// bson\nuse bson::{Bson, Document};\nuse bson::oid::ObjectId;\n\nfn main() {\n    // Create a client.\n    let client = Client::new();\n\n    // Creating an outgoing request.\n    let mut res = client.get(\"https://en.wikipedia.org/wiki/List_of_films:_J%E2%80%93K\")\n        // set a header\n        .header(Connection::close())\n        // let 'er go!\n        .send().unwrap();\n\n    // Read the Response.\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body).unwrap();\n\n    // Regex out the li tags with movies names\n    let re = Regex::new(\"&lt;li&gt;&lt;i&gt;&lt;a href=\\\"[^\\\"]+\\\" title=\\\"[^\\\"]+\\\"&gt;(?P&lt;title&gt;[^&lt;]+)\").unwrap();\n    for caps in re.captures_iter(&amp;body) {\n        // Connect to database\n        let mclient = MongoClient::connect(\"localhost\", 27017)\n                          .ok()\n                          .expect(\"Error establishing connection.\");\n\n        // The titles collection\n        let coll = mclient.db(\"rust-test-titles\").collection(\"titles\");\n\n        let title = caps.name(\"title\");\n\n        let doc = doc!{\"value\" =&gt; title};\n\n        // Insert our title\n        coll.insert_one(doc.clone(), None)\n            .ok()\n            .expect(\"Failed to insert document.\");\n    }\n}\n</code></pre>\n\n<p>When I try to compile this I get the error:</p>\n\n<pre><code>error: the trait `core::convert::From&lt;core::option::Option&lt;&amp;str&gt;&gt;` is not implemented for the type `bson::bson::Bson` [E0277]\n&lt;bson macros&gt;:10 $ val : expr ) =&gt; { { :: std:: convert:: From:: from ( $ val ) } } ;\n</code></pre>\n\n<p>How can I convert <code>title</code> so <code>bson</code> won't throw an error?</p>\n"}, {"tags": ["macos", "rust"], "comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 1, "creation_date": 1458870922, "post_id": 36201217, "comment_id": 60058723, "body": "I&#39;m not familiar with <code>osx</code> framework, but have you tried to add <code>println!(&quot;cargo:rustc-link-search=native={}&quot;, some_dir);</code> in your <code>build.rs</code>?"}, {"owner": {"reputation": 141, "user_id": 6109559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a75f46e638510ff98485b30b2d62c6a7?s=128&d=identicon&r=PG&f=1", "display_name": "jonas-k", "link": "https://stackoverflow.com/users/6109559/jonas-k"}, "reply_to_user": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 0, "creation_date": 1459173914, "post_id": 36201217, "comment_id": 60155925, "body": "Thanks for the response. I also thought that the build script might be the right place to solve the problem, but unfortunately the linker seems to ignore the println statements in the build rs. I checked that build.rs is actually executed and that the output is: &quot;cargo:rustc-link-search=native=/System/Library/PrivateFrame&zwnj;&#8203;works&quot;. I also tried a version with a tailing &quot;/&quot;"}], "answers": [{"tags": [], "owner": {"reputation": 141, "user_id": 6109559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a75f46e638510ff98485b30b2d62c6a7?s=128&d=identicon&r=PG&f=1", "display_name": "jonas-k", "link": "https://stackoverflow.com/users/6109559/jonas-k"}, "is_accepted": true, "score": 3, "last_activity_date": 1461494994, "creation_date": 1461494994, "answer_id": 36822124, "question_id": 36201217, "link": "https://stackoverflow.com/questions/36201217/how-to-link-against-frameworks-that-are-not-in-the-standard-location/36822124#36822124", "title": "How to link against frameworks that are not in the standard location?", "body": "<p>I found out that WiSaGaN's suggestion was quite close to the solution: It works if you use search=framework in the build.rs.\nThe solution was to use the following build.rs:</p>\n\n<pre><code>fn main()\n{\n    println!(\"cargo:rustc-link-search=framework={}\", \"/System/Library/PrivateFrameworks\");\n}\n</code></pre>\n\n<p>Thank you, WiSaGaN!</p>\n\n<p>Using this build.rs you can link as usual:</p>\n\n<pre><code>#[link(name = \"MultitouchSupport\", kind = \"framework\")]\n</code></pre>\n"}], "owner": {"reputation": 141, "user_id": 6109559, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a75f46e638510ff98485b30b2d62c6a7?s=128&d=identicon&r=PG&f=1", "display_name": "jonas-k", "link": "https://stackoverflow.com/users/6109559/jonas-k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 554, "favorite_count": 0, "accepted_answer_id": 36822124, "answer_count": 1, "score": 11, "last_activity_date": 1461494994, "creation_date": 1458825592, "last_edit_date": 1458826843, "question_id": 36201217, "link": "https://stackoverflow.com/questions/36201217/how-to-link-against-frameworks-that-are-not-in-the-standard-location", "title": "How to link against frameworks that are not in the standard location?", "body": "<p>I tried to link against a private framework in <code>/System/Library/PrivateFrameworks</code> using</p>\n\n<pre><code>#[link(name = \"MultitouchSupport\", kind = \"framework\")]\n</code></pre>\n\n<p>But the linker tells me that the MultitouchSupport framework was not found. I also tried</p>\n\n<pre><code>#[link(name = \"/System/Library/PrivateFrameworks/MultitouchSupport\", kind = \"framework\")]\n</code></pre>\n\n<p>and</p>\n\n<pre><code>#[link(name = \"/System/Library/PrivateFrameworks/MultitouchSupport.framework\", kind = \"framework\")]\n</code></pre>\n\n<p>with the file extension, but neither work.</p>\n\n<p>Is it even possible to link against frameworks that are not in the standard location of <code>/System/Library/Frameworks</code>?</p>\n"}, {"tags": ["xcode", "rust"], "comments": [{"owner": {"reputation": 443227, "user_id": 341994, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fbb4d027695dfdf76bf448b15d7e306a?s=128&d=identicon&r=PG", "display_name": "matt", "link": "https://stackoverflow.com/users/341994/matt"}, "edited": false, "score": 1, "creation_date": 1458825528, "post_id": 36200142, "comment_id": 60035612, "body": "How would Xcode suddenly and magically know how to compile and debug Rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 443227, "user_id": 341994, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fbb4d027695dfdf76bf448b15d7e306a?s=128&d=identicon&r=PG", "display_name": "matt", "link": "https://stackoverflow.com/users/341994/matt"}, "edited": false, "score": 7, "creation_date": 1458826601, "post_id": 36200142, "comment_id": 60036364, "body": "@matt presumably in the same way that other IDEs can gain support for a new language: by being built to be extendable in the first place and then someone (or a group) produces a template, plug-in, extension, or whatever is appropriate that teaches the IDE how to do all the interesting IDE things. For example, <a href=\"https://github.com/intellij-rust/intellij-rust\" rel=\"nofollow noreferrer\">IntelliJ has some amount of Rust support</a>, Atom <a href=\"https://atom.io/packages/build-cargo\" rel=\"nofollow noreferrer\">has</a> some <a href=\"https://github.com/zargony/atom-language-rust\" rel=\"nofollow noreferrer\">packages</a>, and there are <a href=\"https://www.rust-lang.org/ides.html\" rel=\"nofollow noreferrer\">plans for other IDEs</a> too."}, {"owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "reply_to_user": {"reputation": 443227, "user_id": 341994, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/fbb4d027695dfdf76bf448b15d7e306a?s=128&d=identicon&r=PG", "display_name": "matt", "link": "https://stackoverflow.com/users/341994/matt"}, "edited": false, "score": 0, "creation_date": 1458853660, "post_id": 36200142, "comment_id": 60053350, "body": "@matt can you provide an explanation why it is impossible?"}, {"owner": {"reputation": 4311, "user_id": 1317564, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf1e12a76e72dcbae8e6e0f8c2ea73ed?s=128&d=identicon&r=PG", "display_name": "Learn OpenGL ES", "link": "https://stackoverflow.com/users/1317564/learn-opengl-es"}, "edited": false, "score": 1, "creation_date": 1477320765, "post_id": 36200142, "comment_id": 67706237, "body": "There&#39;s <a href=\"https://github.com/youknowone/rust-xcode-langspec\" rel=\"nofollow noreferrer\">github.com/youknowone/rust-xcode-langspec</a>, but it looks pretty old. Might be other projects like that around, too."}], "owner": {"reputation": 3299, "user_id": 230504, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/acadd9b0700b9fcdfbc74aa6faffeb86?s=128&d=identicon&r=PG", "display_name": "Leonardo Marques", "link": "https://stackoverflow.com/users/230504/leonardo-marques"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1939, "favorite_count": 0, "answer_count": 0, "score": 10, "last_activity_date": 1465909722, "creation_date": 1458822228, "last_edit_date": 1464179822, "question_id": 36200142, "link": "https://stackoverflow.com/questions/36200142/is-it-possible-to-use-xcode-to-develop-applications-in-languages-other-than-objc", "title": "Is it possible to use Xcode to develop applications in languages other than ObjC, C, C++, assembly and Swift?", "body": "<p>As a concrete example, can I add a template for Rust that will allow me to develop, compile, and debug the application from inside Xcode?</p>\n\n<p>My guess is that I would need to build a new Project Template that would configure all the needed XCode parameters like Build Settings, Build Phases, etc.. Setting up the compiler for the new language and supporting the new language characteristics (maybe a language that works on top of LLVM would be easier). </p>\n\n<p>I noticed there is a file type selection box in the file inspector.\n<a href=\"https://i.stack.imgur.com/aWszZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/aWszZ.png\" alt=\"enter image description here\"></a></p>\n\n<p>Could I add languages to this list?</p>\n"}, {"tags": ["reference", "rust", "lifetime"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1458783509, "post_id": 36191749, "comment_id": 60018346, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/31252851/expanding-rust-lifetime\">Expanding Rust Lifetime</a>"}], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 4, "last_activity_date": 1458783985, "creation_date": 1458783985, "answer_id": 36191872, "question_id": 36191749, "link": "https://stackoverflow.com/questions/36191749/how-to-create-a-struct-with-a-vector-of-references/36191872#36191872", "title": "How to create a struct with a vector of references?", "body": "<p>You probably don't actually want to return references out... but you could box them instead and have them own the boxed value:</p>\n\n<pre><code>fn main() {\n    println!(\"RUST PLEASE\");\n}\n\nstruct Help {\n    list: Vec&lt;Box&lt;Traits&gt;&gt;\n}\n\nimpl Help {\n    fn new() -&gt; Help {\n        Help { list: vec![Box::new(Test)] }\n    }\n}\n\ntrait Traits {\n    fn mice(&amp;self);\n}\n\nstruct Test;\nimpl Traits for Test {\n    fn mice(&amp;self) { print!(\"WHY\"); }\n}\n</code></pre>\n\n<p>Your <code>Help</code> struct then owns a vector of boxed values that you can then reference going forward.</p>\n\n<p><a href=\"https://play.rust-lang.org/?code=fn%20main()%20%7B%0D%0A%20%20%20%20println!(%22RUST%20PLEASE%22)%3B%0D%0A%7D%0D%0A%0D%0Astruct%20Help%20%7B%0D%0A%20%20%20%20list%3A%20Vec%3CBox%3CTraits%3E%3E%0D%0A%7D%0D%0A%0D%0Aimpl%20Help%20%7B%0D%0A%20%20%20%20fn%20new()%20-%3E%20Help%20%7B%0D%0A%20%20%20%20%20%20%20%20Help%20%7B%20list%3A%20vec!%5BBox%3A%3Anew(Test)%5D%20%7D%0D%0A%20%20%20%20%7D%0D%0A%7D%0D%0A%0D%0Atrait%20Traits%20%7B%0D%0A%20%20%20%20fn%20mice(%26self)%3B%0D%0A%7D%0D%0A%0D%0Astruct%20Test%3B%0D%0Aimpl%20Traits%20for%20Test%20%7B%0D%0A%20%20%20%20fn%20mice(%26self)%20%7B%20print!(%22WHY%22)%3B%20%7D%0D%0A%7D&amp;version=stable\" rel=\"nofollow\">Playpen link</a></p>\n"}], "owner": {"reputation": 87, "user_id": 1509269, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e58c2c683127038a83145aec1ed9181c?s=128&d=identicon&r=PG", "display_name": "Jason Tan", "link": "https://stackoverflow.com/users/1509269/jason-tan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3865, "favorite_count": 1, "accepted_answer_id": 36191872, "answer_count": 1, "score": 6, "last_activity_date": 1458826191, "creation_date": 1458783005, "last_edit_date": 1458826191, "question_id": 36191749, "link": "https://stackoverflow.com/questions/36191749/how-to-create-a-struct-with-a-vector-of-references", "title": "How to create a struct with a vector of references?", "body": "<p>Rust seems like such an optimal language - I should've known fighting the compiler would be the price. I'm trying to create a constructor for a struct, and I'm getting <code>does not live long enough</code> errors.</p>\n\n<p>Distilled to the barest of bones, I have:</p>\n\n<pre><code>fn main() {\n    println!(\"RUST PLEASE\");\n}\n\nstruct Help&lt;'a&gt; {\n    list: Vec&lt;&amp;'a Traits&gt;\n}\n\nimpl&lt;'a&gt; Help&lt;'a&gt; {\n    fn new() -&gt; Help&lt;'a&gt; {\n        Help { list: vec![&amp;Test] }\n    }\n}\n\ntrait Traits {\n    fn mice(&amp;self);\n}\n\nstruct Test;\nimpl Traits for Test {\n    fn mice(&amp;self) { print!(\"WHY\"); }\n}\n</code></pre>\n\n<p>So, I'm doing this because that vector <code>list</code> is supposed to hold a list of trait objects. It (supposedly) holds heterogeneously any class that implements the supplied trait. As I understand it, that means I have to use references so the vector has a real size to work with. And since it's a reference, the lifetime has to be there to ensure they live and die together.</p>\n\n<p>The thing is, I know what's wrong. In <code>new</code>, that <code>Test</code> belongs in the <code>new</code> scope, and I try to pass its reference up and out of the function. If I do that, <code>Test</code> goes out of scope and the reference is bad. So what do I do? How can I get the object to last the lifetime of <code>Help</code>? After all, there's really no one to own it.</p>\n\n<p>Also, if anybody has any tips in general on how to return references out of a function in general, I'd be very happy to hear them.</p>\n\n<p><strong>EDIT</strong> This is not the same as simply passing up ownership of the object; I can't do that because the vector <em>needs</em> a reference instead of an object on the stack. The answer by Simon is probably what I'm looking for - I had forgotten I could box things up like that.</p>\n"}]