[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1467244296, "post_id": 38111574, "comment_id": 63657282, "body": "Pretty sure serde could be useful here if a compiler plugin/nightly is acceptable."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1467246896, "post_id": 38111574, "comment_id": 63657912, "body": "@mcarton are you aware of a serde adaptor for generic bytes? Or do you think OP would have to write such an adaptor?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1467247890, "post_id": 38111574, "comment_id": 63658142, "body": "what do you mean? serde itself can serialize from/to <code>Vec&lt;u8&gt;</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1467248109, "post_id": 38111574, "comment_id": 63658189, "body": "@mcarton interesting! I assumed that serde could output a struct using something like JSON or XML or MessagePack to a <code>Vec&lt;u8&gt;</code>, but didn&#39;t know that there was a mode to smush all the bytes of a struct together. How would I tell serde to output OP&#39;s data without any serialization format?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1467242079, "last_edit_date": 1495541784, "creation_date": 1467242079, "answer_id": 38111574, "question_id": 38111486, "link": "https://stackoverflow.com/questions/38111486/how-do-i-iterate-over-elements-of-a-struct-in-rust/38111574#38111574", "title": "How do I iterate over elements of a struct in Rust?", "body": "<blockquote>\n  <p>Is there a way to iterate over the fields</p>\n</blockquote>\n\n<p>No. You have to implement it yourself, or find a macro / compiler plugin that will do it for you.</p>\n\n<p>See <a href=\"https://stackoverflow.com/q/29148544/155423\">How to iterate or map over tuples?</a> for a similar question.</p>\n\n<p>Think about how iterators work. An iterator has to yield a <strong>single</strong> type for each iteration. What would that type be for your struct composed of at least 3 different types?</p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 1, "last_activity_date": 1467350433, "creation_date": 1467350433, "answer_id": 38137583, "question_id": 38111486, "link": "https://stackoverflow.com/questions/38111486/how-do-i-iterate-over-elements-of-a-struct-in-rust/38137583#38137583", "title": "How do I iterate over elements of a struct in Rust?", "body": "<p><a href=\"https://github.com/TyOverby/bincode\" rel=\"nofollow\">Bincode</a> does this.</p>\n\n<pre><code>let packet = KeyExchangePacket { /* ... */ };\nlet size_limit = bincode::SizeLimit::Infinite;\nlet encoded: Vec&lt;u8&gt; = bincode::serde::serialize(&amp;packet, size_limit).unwrap();\n</code></pre>\n\n<p>From the readme:</p>\n\n<blockquote>\n  <p>The encoding (and thus decoding) proceeds unsurprisingly -- primitive types are encoded according to the underlying Writer, tuples and structs are encoded by encoding their fields one-by-one, and enums are encoded by first writing out the tag representing the variant and then the contents.</p>\n</blockquote>\n"}], "owner": {"reputation": 83, "user_id": 4316738, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-jU_A1Zj6Dfk/AAAAAAAAAAI/AAAAAAAAAeE/QXjKijuEw8Y/photo.jpg?sz=128", "display_name": "William Murphy", "link": "https://stackoverflow.com/users/4316738/william-murphy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8595, "favorite_count": 1, "accepted_answer_id": 38111574, "answer_count": 2, "score": 8, "last_activity_date": 1467350433, "creation_date": 1467241643, "last_edit_date": 1467242040, "question_id": 38111486, "link": "https://stackoverflow.com/questions/38111486/how-do-i-iterate-over-elements-of-a-struct-in-rust", "title": "How do I iterate over elements of a struct in Rust?", "body": "<p>I'm writing a small client/server program for encrypted network communications and have the following struct to allow the endpoints to negotiate capabilities.</p>\n\n<pre><code>struct KeyExchangePacket {\n    kexinit: u8,\n    replay_cookie: [u8; 32],\n    kex_algorithms: String,\n    kgen_algorithms: String,\n    encryption_algorithms: String,\n    mac_algorithms: String,\n    compression_algorithms: String,\n    supported_languages: String,\n}\n</code></pre>\n\n<p>I need to convert the fields into bytes in order to send them over a <code>TcpStream</code>, but I currently have to convert them one at a time.</p>\n\n<pre><code>send_buffer.extend_from_slice(kex_algorithms.as_bytes());\nsend_buffer.extend_from_slice(kgen_algorithms.as_bytes());\netc...\n</code></pre>\n\n<p>Is there a way to iterate over the fields and push their byte values into a buffer for sending?</p>\n"}, {"tags": ["reference", "rust", "mutable", "borrowing"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 1, "last_activity_date": 1467238404, "last_edit_date": 1467238404, "creation_date": 1467237618, "answer_id": 38110777, "question_id": 38110390, "link": "https://stackoverflow.com/questions/38110390/elegant-way-to-borrow-and-return-a-mutable-reference-in-rust/38110777#38110777", "title": "Elegant way to borrow and return a mutable reference in Rust", "body": "<blockquote>\n  <p>The workaround with boolean values is because I would be borrowing multiple times if I return <code>Some(self)</code> from within the match block</p>\n</blockquote>\n\n<p>Another option is to replace <code>self</code> temporally, so <code>v</code> can take the ownership of the vector (avoiding the borrow). After adding the new item to <code>v</code>, we reconstruct the <code>self</code> value:</p>\n\n<pre><code>// the lifetime 'a can be omitted\npub fn push&lt;T&gt;(&amp;mut self, value: T) -&gt; Option&lt;&amp;mut Value&gt;\n    where T: Into&lt;Value&gt;\n{\n    // replace put Value::Null on self and return the old value\n    match ::std::mem::replace(self, Value::Null) {\n        Value::Array(mut v) =&gt; {\n            v.push(value.into());\n            *self = Value::Array(v);\n            Some(self)\n        },\n        _ =&gt; None,\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 175, "user_id": 4497948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aeee848bb04d07d93fb31fe3124f08c5?s=128&d=identicon&r=PG", "display_name": "skanur", "link": "https://stackoverflow.com/users/4497948/skanur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2959, "favorite_count": 1, "accepted_answer_id": 38110777, "answer_count": 1, "score": 1, "last_activity_date": 1467238404, "creation_date": 1467235920, "question_id": 38110390, "link": "https://stackoverflow.com/questions/38110390/elegant-way-to-borrow-and-return-a-mutable-reference-in-rust", "title": "Elegant way to borrow and return a mutable reference in Rust", "body": "<p>I'm trying to return a mutable reference after doing some operation on it. This is best explained by a piece of code:</p>\n\n<pre><code>#[derive(PartialEq)]\npub enum Value {\n    Null,\n    Array(Vec&lt;Value&gt;),\n}\n\nimpl Value {\n    pub fn new() -&gt; Value {\n        Value::Array(Vec::new())\n    }\n\n    pub fn push&lt;'a, T&gt; (&amp;'a mut self, value: T) -&gt; Option&lt;&amp;'a mut Value&gt;\n    where T:Into&lt;Value&gt; {\n        let temp = match *self {\n            Value::Array(ref mut vec) =&gt; {\n                vec.push(value.into());\n                true\n            },\n            _ =&gt; false,\n        };\n        if temp {\n            Some(self)\n        } else {\n            None\n        }\n    }\n}\n\n#[test]\nfn push_test() {\n    let mut val = Value::new();\n    val.push(Value::Null);\n    assert!(val == Value::Array(vec![Value::Null]));\n}\n</code></pre>\n\n<p>The play version is <a href=\"https://play.rust-lang.org/?gist=9e1436c862d0a4c5b1096343720c33d3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">here</a>. The workaround with boolean values is because I would be borrowing multiple times if I return <code>Some(self)</code> from within the <code>match</code> block. Is there an elegant way to implement the <code>push</code> function without using boolean values? If its possible to retain the function signature then its a bonus. Thank you!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 6, "creation_date": 1467223257, "post_id": 38106639, "comment_id": 63647505, "body": "The problem here is actually orphan rule, not coherence rule :). You can check the explanation with <code>rustc --explain E0210</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1467270691, "post_id": 38106639, "comment_id": 63665125, "body": "@kennytm: Shouldn&#39;t that be an answer (with some elaboration)?"}], "answers": [{"tags": [], "owner": {"reputation": 574, "user_id": 566234, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3c1e7d744f8b073e6ca1581aaeff8e0a?s=128&d=identicon&r=PG", "display_name": "James Gilles", "link": "https://stackoverflow.com/users/566234/james-gilles"}, "is_accepted": true, "score": 4, "last_activity_date": 1469221856, "last_edit_date": 1469221856, "creation_date": 1469221176, "answer_id": 38535140, "question_id": 38106639, "link": "https://stackoverflow.com/questions/38106639/why-do-the-coherence-rules-raise-the-error-the-type-parameter-must-be-used-as-t/38535140#38535140", "title": "Why do the coherence rules raise the error &quot;the type parameter must be used as the type parameter for some local type&quot;?", "body": "<p>It does boil down to \"there's a good reason\", but the good reason isn't all that complicated.</p>\n\n<p>Here's the problem. Imagine I've got a library crate:</p>\n\n<pre><code>// library.rs\npub struct Dog;\npub trait Speak {\n    fn speak(&amp;self);\n}\n</code></pre>\n\n<p>And two crates that use that library crate.</p>\n\n<pre><code>// bark.rs\nextern crate library;\nimpl library::Speak for library::Dog {\n    fn speak(&amp;self) {\n        println!(\"woof\");\n    }\n}\n</code></pre>\n\n\n\n<pre><code>// woof.rs\nextern crate library;\nimpl library::Speak for library::Dog {\n    fn speak(&amp;self) {\n        println!(\"bark\");\n    }\n}\n</code></pre>\n\n<p>Now, for some reason, I want to use both of these libraries:</p>\n\n<pre><code>// main.rs\nextern crate library;\nextern crate woof;\nextern crate bark;\n\nfn main() {\n   let rex = library::Dog;\n   rex.speak();\n}\n</code></pre>\n\n<p>What should this program output? There are two equally valid, indistinguishable implementations of <code>library::Speak</code> for <code>library::Dog</code>; there isn't a right answer. What's worse, if I depended on <code>woof</code> originally, and added <code>bark</code> later, my code would stop compiling, or - worse - start transparently doing the wrong thing. Conflicting trait impls are a Bad Thing\u2122.</p>\n\n<p>It gets worse when you add generics. If you have:</p>\n\n<pre><code>// barkgeneric.rs\nextern crate library;\nimpl&lt;T&gt; library::Speak for T {\n    fn speak(&amp;self) {\n        println!(\"woof\");\n    }\n}\n</code></pre>\n\n\n\n<pre><code>// woofgeneric.rs\nextern crate library;\nimpl&lt;T&gt; library::Speak for T {\n    fn speak(&amp;self) {\n        println!(\"bark\");\n    }\n}\n</code></pre>\n\n<p>You now have an <em>infinite</em> number of conflicting trait impls. Whoops.</p>\n\n<p>To avoid this problem, we have the orphan rules. The idea of the orphan rules is to make sure that any <code>impl Trait for Type</code> has one, and only one, place it can be put. That way, we don't have to worry about impl conflicts; they should be straight-up impossible, if the orphan rules are set up correctly.</p>\n\n<p>The rules boil down to: when you <code>impl</code> a trait for a type, either the trait or the type has to come from the current crate. This makes all of my conflicting examples not work. <code>woof.rs</code> can't implement <code>library::speak</code> for <code>library::Dog</code>, because it neither of them come from its crate.</p>\n\n<p>Similarly, you can't <code>impl&lt;T&gt; Index&lt;Bounded&gt; for [T; 4];</code>, because <code>[T; 4]</code> doesn't come from your crate, and <code>rustc</code> has decided that <code>Index&lt;Bounded&gt;</code> doesn't count as coming from your crate either. </p>\n\n<p>It does, however, let your <code>impl Index&lt;Bounded&gt; for [i32; 4]</code> through, because in this case <code>Index&lt;Bounded&gt;</code> does come from you. It's possible that's a bug, but it's also possible that it's just intended behavior; the orphan rules are slightly more complex than what I've stated here, and they might be interacting in weird ways.</p>\n\n<p>For more specifics, see <a href=\"https://doc.rust-lang.org/error-index.html#E0117\" rel=\"nofollow\"><code>rustc --explain E0117</code></a>, <a href=\"https://doc.rust-lang.org/error-index.html#E0210\" rel=\"nofollow\"><code>rustc --explain E0210</code></a>.</p>\n"}], "owner": {"reputation": 647, "user_id": 4037231, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fe12602a9e9ca343dc477b81e1244b1b?s=128&d=identicon&r=PG&f=1", "display_name": "kmky", "link": "https://stackoverflow.com/users/4037231/kmky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 496, "favorite_count": 1, "accepted_answer_id": 38535140, "answer_count": 1, "score": 6, "last_activity_date": 1527262855, "creation_date": 1467222083, "last_edit_date": 1527262855, "question_id": 38106639, "link": "https://stackoverflow.com/questions/38106639/why-do-the-coherence-rules-raise-the-error-the-type-parameter-must-be-used-as-t", "title": "Why do the coherence rules raise the error &quot;the type parameter must be used as the type parameter for some local type&quot;?", "body": "<p>Why does code example 1 compile but example 2 gives a compilation error?</p>\n\n<p>Example 1:</p>\n\n<pre><code>use std::ops::Index;\n\nstruct Bounded {\n    idx: usize,\n}\n\nimpl Index&lt;Bounded&gt; for [i32; 4] {\n    type Output = i32;\n\n    fn index(&amp;self, b: Bounded) -&gt; &amp;i32 {\n        unsafe { self.get_unchecked(b.idx) }\n    }\n}\n</code></pre>\n\n<p>Example 2:</p>\n\n<pre><code>use std::ops::Index;\n\nstruct Bounded {\n    idx: usize,\n}\n\nimpl&lt;T&gt; Index&lt;Bounded&gt; for [T; 4] {\n    type Output = T;\n\n    fn index(&amp;self, b: Bounded) -&gt; &amp;T {\n        unsafe { self.get_unchecked(b.idx) }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g. `MyStruct&lt;T&gt;`)\n --&gt; src/main.rs:7:1\n  |\n7 | impl&lt;T&gt; Index&lt;Bounded&gt; for [T; 4] {\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n  |\n  = note: only traits defined in the current crate can be implemented for a type parameter\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 707, "user_id": 1153097, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eeb19ad4acff26fd3561972d494f1e05?s=128&d=identicon&r=PG", "display_name": "RazrFalcon", "link": "https://stackoverflow.com/users/1153097/razrfalcon"}, "edited": false, "score": 0, "creation_date": 1467221640, "post_id": 38105993, "comment_id": 63646524, "body": "Thanks for detailed explanation, but as I understand, I should return <code>Ref&lt;NodeData&gt;</code>, not <code>Ref&lt;String&gt;</code>, which I need. NodeData must be private. About design - I don&#39;t know. I&#39;m trying to implement simple DOM structure without unsafe, using only existing methods/structs, and not via creating everything from scratch. And <code>RefCell</code> is only way I find to implement mutable data."}, {"owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "reply_to_user": {"reputation": 707, "user_id": 1153097, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eeb19ad4acff26fd3561972d494f1e05?s=128&d=identicon&r=PG", "display_name": "RazrFalcon", "link": "https://stackoverflow.com/users/1153097/razrfalcon"}, "edited": false, "score": 1, "creation_date": 1467277436, "post_id": 38105993, "comment_id": 63669191, "body": "@RazrFalcon Use the <code>map</code> function to get only the text: <code>Ref::map(self.0.borrow(), |n| &amp;n.text)</code>"}, {"owner": {"reputation": 707, "user_id": 1153097, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eeb19ad4acff26fd3561972d494f1e05?s=128&d=identicon&r=PG", "display_name": "RazrFalcon", "link": "https://stackoverflow.com/users/1153097/razrfalcon"}, "reply_to_user": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "edited": false, "score": 0, "creation_date": 1467280607, "post_id": 38105993, "comment_id": 63671473, "body": "@Arjan Thanks! That&#39;s exactly what I want. Only difference between my current implementation, that uses Rc, is that I need two methods: regular and _mut. As far as I understand - there is no performance cost for Ref::map, because it&#39;s just a wrapper, right?"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1467219927, "creation_date": 1467219927, "answer_id": 38105993, "question_id": 38105624, "link": "https://stackoverflow.com/questions/38105624/getting-reference-to-object-behind-rc/38105993#38105993", "title": "Getting reference to object behind Rc", "body": "<h3>Explanation</h3>\n\n<p>The problem here is that you are managing something (<code>NodeData</code>) within a <code>RefCell</code>. In order for <code>RefCell</code> to work, it can't give out references without limitations. Instead the only way to obtain a reference to the inner data is by using a scope guard. From the <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code> documentation</a>:</p>\n\n<pre><code>fn borrow(&amp;self) -&gt; Ref&lt;T&gt;\n</code></pre>\n\n<p>Instead of returning <code>&amp;T</code> like you would expect, a <code>Ref</code> is returned. This <code>Ref</code> object in turn can give you a reference via the <code>deref</code>-operator method. But the returned reference is only valid as long as the <code>Ref</code> object lives! That way the <code>RefCell</code> can keep track of all its borrows.</p>\n\n<h3>Possible solutions</h3>\n\n<p>You could just return the <code>Ref</code> object, the user would be able to use it nearly as a simple <code>&amp;String</code>. However, this can easily lead to panics because the user borrows it accidentally again. Look at this:</p>\n\n<pre><code>let text = my_node.text();\nprintln!(\"the text is {} chars long\", text.len());\nmy_node.set_text(\"hi\".into());   // boom!\n</code></pre>\n\n<p>The problem is that the inner value of the <code>RefCell</code> is considered borrowed immutably as long as a <code>Ref</code> object is alive. In this case <code>text</code> is a <code>Ref</code> object and thus borrows the inner value. In <code>set_text</code> you attempt to borrow the inner value mutably.</p>\n\n<hr>\n\n<p>Of course you could also implement some utility functions yourself, as you already said (2.).</p>\n\n<p>Honestly, <strong>I would say that you should rethink your design</strong>. Is a <code>RefCell</code> really needed? Often it's not. And usually <code>RefCells</code> are used only for private, hidden variables and never exposed to the user. The problems mentioned above are one reason for not doing it.</p>\n\n<p>Of course this answer is not very satisfying, but I think there is no better solution. </p>\n\n<h3>Additional hints</h3>\n\n<ul>\n<li>A <code>&amp;String</code> reference is not more powerful than a <code>&amp;str</code> reference. So usually only <code>&amp;str</code> are used. The same goes for <code>&amp;Vec&lt;T&gt;</code> (hardly used) and <code>&amp;[T]</code>. Note that this is only valid for immutable references -- <code>&amp;mut String</code> is a whole lot more powerful than <code>&amp;mut str</code>.</li>\n</ul>\n"}], "owner": {"reputation": 707, "user_id": 1153097, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eeb19ad4acff26fd3561972d494f1e05?s=128&d=identicon&r=PG", "display_name": "RazrFalcon", "link": "https://stackoverflow.com/users/1153097/razrfalcon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 813, "favorite_count": 0, "accepted_answer_id": 38105993, "answer_count": 1, "score": 2, "last_activity_date": 1467219927, "creation_date": 1467218772, "question_id": 38105624, "link": "https://stackoverflow.com/questions/38105624/getting-reference-to-object-behind-rc", "title": "Getting reference to object behind Rc", "body": "<p>I'm trying to implement simple DOM structure, but getting confused with rust(or not) memory model.</p>\n\n<p>Here is simple example:</p>\n\n<pre><code>struct NodeData {\n    text: String,\n}\n\nstruct Node(Rc&lt;RefCell&lt;NodeData&gt;&gt;);\n\nimpl Node {\n    fn new() -&gt; Node {\n        Node(Rc::new(RefCell::new(NodeData {\n            text: String::new()\n        })))\n    }\n\n    fn set_text(&amp;self, text: String) {\n        self.0.borrow_mut().text = text;\n    }\n\n    // it works, but has unneeded, expensive clone\n    // pub fn text(&amp;self) -&gt; String {\n    //     self.0.borrow().text.clone()\n    // }\n\n    pub fn text(&amp;self) -&gt; &amp;String {\n        // ???\n    }\n}\n\nfn main() {\n    let node = Node::new();\n    node.set_text(\"text\".to_string());\n    if node.text() == \"text\" {\n        println!(\"equal\");\n    }\n}\n</code></pre>\n\n<p>I don't understand how to get reference to <em>text</em> field, not it's copy.</p>\n\n<p>I see only two alternatives:</p>\n\n<ol>\n<li>Using <code>RcString(Rc&lt;RefCell&lt;String&gt;&gt;)</code> instead of raw <code>String</code>. But it will produce a lot of boilerplate code and some overhead.</li>\n<li>Implementing method like <code>is_text_equal(&amp;self, text: &amp;String)</code>. But it's ugly.</li>\n</ol>\n\n<p>Also, there is possibility, that I'm doing something totally wrong.</p>\n"}, {"tags": ["string", "count", "compare", "rust"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1467217019, "post_id": 38104809, "comment_id": 63643719, "body": "Are you looking for edit distance? There are a smattering of crates that provide routines to compute that, typically using the Levenshtein algorithm."}, {"owner": {"reputation": 42880, "user_id": 982161, "user_type": "registered", "accept_rate": 63, "profile_image": "https://i.stack.imgur.com/kutcC.png?s=128&g=1", "display_name": "\u03a6Xoc\u0119 \uc6c3 \u041fepe&#250;pa \u30c4", "link": "https://stackoverflow.com/users/982161/%ce%a6xoc%c4%99-%ec%9b%83-%d0%9fepe%c3%bapa-%e3%83%84"}, "edited": false, "score": 0, "creation_date": 1467218214, "post_id": 38104809, "comment_id": 63644462, "body": "nope, you can/need to write one yourself"}], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1467217403, "post_id": 38105111, "comment_id": 63643979, "body": "ha hamming would be exactly the thing I have to do - but using a crate for solve this exercise would be kinda cheaty. But I&#39;ll take a look at their solution. Mybe I can find the function/method I&#39;m looking for. thx"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1467217082, "creation_date": 1467217082, "answer_id": 38105111, "question_id": 38104809, "link": "https://stackoverflow.com/questions/38104809/is-there-a-function-that-returns-the-count-of-differences-between-two-strings/38105111#38105111", "title": "Is there a function that returns the count of differences between two strings?", "body": "<p>You can use the <a href=\"https://crates.io/crates/strsim\" rel=\"nofollow\"><code>strsim</code></a> crate. It offers various string difference methods like Hamming, Levenshtein, Damerau-Levenshtein, Jaro, and Jaro-Winkler. I personally like the Damerau-Levenshtein difference, which counts the number of adjacent characters you need to swap and the number of characters you need to remove, insert or replace to turn one of the strings into the other.</p>\n\n<pre><code>extern crate strsim;\nlet difference = strsim::damerau_levenshtein(a, b);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 2, "last_activity_date": 1467217583, "creation_date": 1467217583, "answer_id": 38105268, "question_id": 38104809, "link": "https://stackoverflow.com/questions/38104809/is-there-a-function-that-returns-the-count-of-differences-between-two-strings/38105268#38105268", "title": "Is there a function that returns the count of differences between two strings?", "body": "<p>Implementation of Hamming distance is trivial:</p>\n\n<pre><code>str_a.chars().zip(str_b.chars()).filter(|x| x.0!=x.1).count()\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 73, "favorite_count": 0, "accepted_answer_id": 38105268, "answer_count": 2, "score": -1, "last_activity_date": 1467217583, "creation_date": 1467216267, "last_edit_date": 1467216696, "question_id": 38104809, "link": "https://stackoverflow.com/questions/38104809/is-there-a-function-that-returns-the-count-of-differences-between-two-strings", "title": "Is there a function that returns the count of differences between two strings?", "body": "<p>I'm about to compare to string of equal length. Then I need to count the differences they have. I would start doing that by hand - but since there is such a toolbox of methods I wonder if there is a function that may count the differences that occured anyhow? Or create a collection which I can count the elements in?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1467187056, "post_id": 38090359, "comment_id": 63622229, "body": "It should work. This works too: <code>let mut x = Box::new((3, 5)); let next = &amp;mut x; let (ref mut a, ref mut b) = *ref_mut.deref_mut();</code> (strangely it doesn&#39;t work with <code>**ref_mut</code> on the rhs...). It should be safe and should work without unsafe code, but I too can&#39;t get it to work right now :/"}], "tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 1, "last_activity_date": 1467174238, "creation_date": 1467174238, "answer_id": 38090359, "question_id": 38089723, "link": "https://stackoverflow.com/questions/38089723/how-to-implement-an-iterator-of-mutable-references-to-the-values-in-the-right-ed/38090359#38090359", "title": "How to implement an iterator of mutable references to the values in the right edges of a Binary Search Tree?", "body": "<p>I <em>think</em> you cannot split <code>self</code> into 2 mutable objects (one for the <code>Item</code>, one for <code>self</code> itself) without using some unsafe code.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467206785, "post_id": 38097079, "comment_id": 63635766, "body": "Excellent link! It had not occurred to me that one could write this safely (of course, the OP&#39;s tree structure is lacking the back reference needed for full iteration)."}, {"owner": {"reputation": 1439, "user_id": 368860, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f5de40a1513d2e1edaa47aa26703f8ff?s=128&d=identicon&r=PG", "display_name": "Alessandro Stamatto", "link": "https://stackoverflow.com/users/368860/alessandro-stamatto"}, "edited": false, "score": 0, "creation_date": 1467209036, "post_id": 38097079, "comment_id": 63637778, "body": "Nice! I didn&#39;t realize that by using Tree&lt;T&gt; I was using an unnecessary Box.   I still cannot fully visualize the borrow rules in action, but in the share borrow iterator (&amp;T) I did not caught the unnecessary Box because my code worked - probably because there&#39;s no problem in immutable borrowing more than once."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1528982568, "post_id": 38097079, "comment_id": 88719735, "body": "Wow, that was buried in the original question \u2014 I read it multiple times over many months and never noticed it. I&#39;ve edited the question to be more obvious. Sorry for the noise!"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 7, "last_activity_date": 1528982387, "last_edit_date": 1528982387, "creation_date": 1467196491, "answer_id": 38097079, "question_id": 38089723, "link": "https://stackoverflow.com/questions/38089723/how-to-implement-an-iterator-of-mutable-references-to-the-values-in-the-right-ed/38097079#38097079", "title": "How to implement an iterator of mutable references to the values in the right edges of a Binary Search Tree?", "body": "<p>You need to change the type of the field <code>IterMut::next</code> to <code>Option&lt;&amp;'a mut Node&lt;T&gt;&gt;</code>:</p>\n\n<pre><code>pub struct IterMut&lt;'a, T: 'a&gt; {\n    next: Option&lt;&amp;'a mut Node&lt;T&gt;&gt;,\n}\n\nimpl&lt;'a, T&gt; Iterator for IterMut&lt;'a, T&gt; {\n    type Item = &amp;'a mut T;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.next.take().map(|node| {\n            self.next = node.right.0.as_mut().map(|node| &amp;mut **node);\n            &amp;mut node.elem\n        })\n\n    }\n}\n</code></pre>\n\n<p>You can find more useful information about the implementation of the mutable iterator for recursive data structures <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/second-iter-mut.html\" rel=\"nofollow noreferrer\">in the IterMut chapter of <em>Learning Rust With Entirely Too Many Linked Lists</em></a>.</p>\n"}], "owner": {"reputation": 1439, "user_id": 368860, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f5de40a1513d2e1edaa47aa26703f8ff?s=128&d=identicon&r=PG", "display_name": "Alessandro Stamatto", "link": "https://stackoverflow.com/users/368860/alessandro-stamatto"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1044, "favorite_count": 1, "accepted_answer_id": 38097079, "answer_count": 2, "score": 5, "last_activity_date": 1528982718, "creation_date": 1467169867, "last_edit_date": 1528982718, "question_id": 38089723, "link": "https://stackoverflow.com/questions/38089723/how-to-implement-an-iterator-of-mutable-references-to-the-values-in-the-right-ed", "title": "How to implement an iterator of mutable references to the values in the right edges of a Binary Search Tree?", "body": "<p>I implemented a simple Binary Search Tree in Rust (following CIS 198, it's great), and for learning I'm doing iterators that just run through the right edges. </p>\n\n<p>I could not implement an iterator that gives mutable references. I tried a lot of ways, but none were accepted by Rust compiler. The code I need help is the one below (<a href=\"https://gist.github.com/astamatto/ad05770ec285c07ae046cbcdd3e53345\" rel=\"noreferrer\">while I made a gist with the complete code here</a>): </p>\n\n<pre><code>#[derive(Debug)]\npub struct Tree&lt;T&gt;(Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;);\n\n#[derive(Debug)]\npub struct Node&lt;T&gt; {\n    elem: T,\n    left: Tree&lt;T&gt;,\n    right: Tree&lt;T&gt;,\n}\n\n// MUTABLE BORROW STRUCT\npub struct IterMut&lt;'a, T: 'a&gt; {\n    next: &amp;'a mut Tree&lt;T&gt;,\n}\n\n// MUTABLE BORROW NEXT (I'M STUCK HERE, NOTHING WORKS)\nimpl&lt;'a, T&gt; Iterator for IterMut&lt;'a, T&gt; {\n    type Item = &amp;'a mut T;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        // 1 try: cannot infer lifetime\n        self.next.0.as_mut().map(|node| {\n            self.next = &amp;mut node.right;\n            &amp;mut node.elem\n        })\n\n        // 2 try: node.right, node.elem does not live long enough\n        self.next.0.take().map(|node| {\n            self.next = &amp;mut node.right;\n            &amp;mut node.elem\n        })\n    }\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 31438, "user_id": 908939, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/etRsI.jpg?s=128&g=1", "display_name": "Trevor Hickey", "link": "https://stackoverflow.com/users/908939/trevor-hickey"}, "is_accepted": true, "score": 17, "last_activity_date": 1467159556, "last_edit_date": 1467159556, "creation_date": 1467159141, "answer_id": 38088268, "question_id": 38088067, "link": "https://stackoverflow.com/questions/38088067/equivalent-of-func-or-function-in-rust/38088268#38088268", "title": "Equivalent of __func__ or __FUNCTION__ in Rust?", "body": "<p>There was an <a href=\"https://github.com/rust-lang/rfcs/pull/466\" rel=\"noreferrer\">RFC</a> about this, but it was never agreed upon or implemented.  </p>\n\n<p>The rationale for its absence:  </p>\n\n<blockquote>\n  <p>\"In general I don't think any of us have given an inordinate amount of\n  thought to these \"debugging related\" macros in terms of long term\n  stability. Most of them seem fairly harmless, but committing to\n  provide all of them for all Rust programs forever is a strong\n  commitment to make. We may want to briefly consider the story of these\n  macros in conjunction with considering adding this new macro.\"</p>\n</blockquote>\n\n<p>Maybe Rust will have something comparable in the future,<br>\nbut for now you will need to rely on your own tagging.</p>\n\n<p><em>side note:</em> <code>__FUNCTION__</code> is non standard, <code>__func__</code> exists in C99 / C++11.</p>\n"}, {"comments": [{"owner": {"reputation": 3690, "user_id": 382213, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/768f2c9fe4f18067f17e5684f23bf5b8?s=128&d=identicon&r=PG", "display_name": "Dan Aloni", "link": "https://stackoverflow.com/users/382213/dan-aloni"}, "edited": false, "score": 0, "creation_date": 1516568948, "post_id": 40234666, "comment_id": 83730443, "body": "Please note that this implementation also has the limitation that it cannot currently be used to build static values, e.g: <code>static name : &amp;&#39;static str = function!();</code>"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 23, "last_activity_date": 1581515224, "last_edit_date": 1581515224, "creation_date": 1477383002, "answer_id": 40234666, "question_id": 38088067, "link": "https://stackoverflow.com/questions/38088067/equivalent-of-func-or-function-in-rust/40234666#40234666", "title": "Equivalent of __func__ or __FUNCTION__ in Rust?", "body": "<p>You can hack one together with <code>std::any::type_name</code>.</p>\n\n<pre><code>macro_rules! function {\n    () =&gt; {{\n        fn f() {}\n        fn type_name_of&lt;T&gt;(_: T) -&gt; &amp;'static str {\n            std::any::type_name::&lt;T&gt;()\n        }\n        let name = type_name_of(f);\n        &amp;name[..name.len() - 3]\n    }}\n}\n</code></pre>\n\n<p>Note that this gives a full pathname, so <code>my::path::my_func</code> instead of just <code>my_func</code>. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=df5975cd589ae7286a769e1c70e7715d\" rel=\"noreferrer\">A demo is available.</a></p>\n"}, {"tags": [], "owner": {"reputation": 81, "user_id": 12864941, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cadf90c6865bbc898bcf15725249a76?s=128&d=identicon&r=PG&f=1", "display_name": "Alexis", "link": "https://stackoverflow.com/users/12864941/alexis"}, "is_accepted": false, "score": 3, "last_activity_date": 1600183406, "last_edit_date": 1600183406, "creation_date": 1600183263, "answer_id": 63904992, "question_id": 38088067, "link": "https://stackoverflow.com/questions/38088067/equivalent-of-func-or-function-in-rust/63904992#63904992", "title": "Equivalent of __func__ or __FUNCTION__ in Rust?", "body": "<p>Adding to <a href=\"https://stackoverflow.com/a/40234666/155423\">Veedrac's answer</a>, you can get the function's name without its full path by adding this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! function {\n    () =&gt; {{\n        fn f() {}\n        fn type_name_of&lt;T&gt;(_: T) -&gt; &amp;'static str {\n            std::any::type_name::&lt;T&gt;()\n        }\n        let name = type_name_of(f);\n\n        // Find and cut the rest of the path\n        match &amp;name[..name.len() - 3].rfind(':') {\n            Some(pos) =&gt; &amp;name[pos + 1..name.len() - 3],\n            None =&gt; &amp;name[..name.len() - 3],\n        }\n    }};\n}\n</code></pre>\n<p>You will get <code>my_func</code> instead of <code>my::path::my_func</code> for example.</p>\n"}], "owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4390, "favorite_count": 4, "accepted_answer_id": 38088268, "answer_count": 3, "score": 24, "last_activity_date": 1600183406, "creation_date": 1467157739, "last_edit_date": 1483699598, "question_id": 38088067, "link": "https://stackoverflow.com/questions/38088067/equivalent-of-func-or-function-in-rust", "title": "Equivalent of __func__ or __FUNCTION__ in Rust?", "body": "<p>In C and C++ you can get the name of the currently executing function through the <code>__func__</code> macro with C99 &amp; C++11 and <code>___FUNCTION___</code> for MSVC.</p>\n\n<p>Is there an equivalent of this in Rust?</p>\n\n<p>Example of <code>__func__</code> in C:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include \"stdio.h\"\n\nvoid funny_hello() {\n    printf (\"Hello from %s\\n\", __func__);\n}\n\nint main() {\n    funny_hello();\n}\n</code></pre>\n\n<p>Outputs <code>Hello from funny_hello</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4616, "user_id": 1626199, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PP46y.jpg?s=128&g=1", "display_name": "Noctua", "link": "https://stackoverflow.com/users/1626199/noctua"}, "edited": false, "score": 0, "creation_date": 1467127264, "post_id": 38078936, "comment_id": 63596897, "body": "do you use <code>self</code> in the events execution? If not, not taking it as a parameter might solve your problem."}, {"owner": {"reputation": 193, "user_id": 2544133, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8044b5403b1476d59316cd98141259aa?s=128&d=identicon&r=PG", "display_name": "m0drzew", "link": "https://stackoverflow.com/users/2544133/m0drzew"}, "reply_to_user": {"reputation": 4616, "user_id": 1626199, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/PP46y.jpg?s=128&g=1", "display_name": "Noctua", "link": "https://stackoverflow.com/users/1626199/noctua"}, "edited": false, "score": 0, "creation_date": 1467127531, "post_id": 38078936, "comment_id": 63597112, "body": "@Noctua, I forgot to write it in post, but yes, I&#39;m using self in event execution."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 5, "last_activity_date": 1559958312, "last_edit_date": 1559958312, "creation_date": 1467129225, "answer_id": 38080921, "question_id": 38078936, "link": "https://stackoverflow.com/questions/38078936/borrowing-reference-in-structure/38080921#38080921", "title": "Borrowing reference in structure", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rust/issues/21906\" rel=\"nofollow noreferrer\">known issue</a> in the borrow checker (<a href=\"https://internals.rust-lang.org/t/relaxing-the-borrow-checker-for-fn-mut-self-t/3256\" rel=\"nofollow noreferrer\">more discussion on internals</a>). You cannot have a function taking a <code>&amp;mut T</code> to an object and returning a <code>&amp;T</code> without losing the ability to access the object again until the <code>&amp;T</code> goes out of scope. You can't work around it due to the way <code>inotify</code> is implemented.</p>\n\n<p>But you <a href=\"https://github.com/hannobraun/inotify-rs/issues/35\" rel=\"nofollow noreferrer\">can ask the <code>inotify</code> authors</a> to create a <code>get_available_notifications</code> method that doesn't fetch new data. This way you can call <code>available_notifications</code> once and drop the returned value. Then call <code>get_available_notifications</code> (which doesn't take <code>&amp;mut INotify</code>, but just <code>&amp;INotify</code>) and work from there.</p>\n"}, {"comments": [{"owner": {"reputation": 193, "user_id": 2544133, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8044b5403b1476d59316cd98141259aa?s=128&d=identicon&r=PG", "display_name": "m0drzew", "link": "https://stackoverflow.com/users/2544133/m0drzew"}, "edited": false, "score": 0, "creation_date": 1467190644, "post_id": 38080934, "comment_id": 63624563, "body": "Okay, I tried to rewrite my code, and now I have <code>&#39;self&#39; does not live long enough</code> in second line in <code>check_for_events</code> function."}, {"owner": {"reputation": 7543, "user_id": 1794051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4fc6d765eadabca02bdd7b44d6504720?s=128&d=identicon&r=PG", "display_name": "val", "link": "https://stackoverflow.com/users/1794051/val"}, "edited": false, "score": 0, "creation_date": 1467194708, "post_id": 38080934, "comment_id": 63627414, "body": "I think my code might be incorrect in returning <code>&amp;self</code>: returning <code>self</code> (declared as <code>&amp;Self</code>) seems to work fine though: <a href=\"https://play.rust-lang.org/?gist=eba3afdc098f5a0ceb1802e0cedbf757&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground link</a>"}, {"owner": {"reputation": 193, "user_id": 2544133, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8044b5403b1476d59316cd98141259aa?s=128&d=identicon&r=PG", "display_name": "m0drzew", "link": "https://stackoverflow.com/users/2544133/m0drzew"}, "edited": false, "score": 0, "creation_date": 1467196003, "post_id": 38080934, "comment_id": 63628277, "body": "<code>fn check_for_events(&amp;mut self) -&gt; (&amp;Self, &amp;[inotify::wrapper::Event]) {         let events = self.inotify.available_events().unwrap();         (self, events)     }</code>   In second line <code>cannot borrow &#39;*self&#39; as immutable because &#39;self.inotify&#39; is also borrowed as mutable</code> and in first line <code>previous borrow of &#39;self.inotify occurs here</code>"}], "tags": [], "owner": {"reputation": 7543, "user_id": 1794051, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4fc6d765eadabca02bdd7b44d6504720?s=128&d=identicon&r=PG", "display_name": "val", "link": "https://stackoverflow.com/users/1794051/val"}, "is_accepted": false, "score": 7, "last_activity_date": 1467129260, "creation_date": 1467129260, "answer_id": 38080934, "question_id": 38078936, "link": "https://stackoverflow.com/questions/38078936/borrowing-reference-in-structure/38080934#38080934", "title": "Borrowing reference in structure", "body": "<p>One thing you <em>could</em> do, although it's not very elegant, is to have your mutable method consume its mutable borrow and <em>return</em> an immutable one that you can then use:</p>\n\n<pre><code>pub fn resolving_events(&amp;mut self) {\n    let (slf, events) = self.check_for_events();\n    slf.events_execution(events);\n\n}\n\nfn check_for_events(&amp;mut self) -&gt; (&amp;Self, &amp;[inotify::wrapper::Event]) {\n    let events = self.inotify.available_events().unwrap();\n    (&amp;self, events)\n}\n</code></pre>\n\n<p>I've made a small proof-of-concept on the <a href=\"https://play.rust-lang.org/?gist=2adb2226d07a9ac56d7a6a39e57e3053&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a> (using vecs of <code>u64</code> as the mutable state, but the principle is similar). It might be cleaner to refactor your code so that some external client can (mutably) borrow the <code>Notifier</code>, produce the events, release the borrow, and borrow it (immutably) to process them...</p>\n"}], "owner": {"reputation": 193, "user_id": 2544133, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/8044b5403b1476d59316cd98141259aa?s=128&d=identicon&r=PG", "display_name": "m0drzew", "link": "https://stackoverflow.com/users/2544133/m0drzew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 589, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1559958312, "creation_date": 1467123946, "last_edit_date": 1467125697, "question_id": 38078936, "link": "https://stackoverflow.com/questions/38078936/borrowing-reference-in-structure", "title": "Borrowing reference in structure", "body": "<p>I'm trying to put in one structure information about inotify events and hashmap with inotify watch id as key and name of the file as value. </p>\n\n<pre><code>extern crate inotify;\nuse inotify::INotify;\nuse std::sync::{Arc, Mutex};\nuse std::collections::HashMap;\n\nstruct Notificator {\n    inotify: INotify,\n    watch_service: Arc&lt;Mutex&lt;HashMap&lt;inotify::wrapper::Watch, Arc&lt;String&gt;&gt;&gt;&gt;,\n}\n\nimpl Notificator {\n    pub fn new() -&gt; Notificator {\n        Notificator {\n            inotify: INotify::init().unwrap(),\n            watch_service: Arc::new(Mutex::new(HashMap::new())),\n        }\n    }\n\n    pub fn resolving_events(&amp;mut self) {\n        {\n            let mut events = self.check_for_events();\n            self.events_execution(events);\n        }\n\n    }\n\n    fn check_for_events(&amp;mut self) -&gt; &amp;[inotify::wrapper::Event] {\n        self.inotify.available_events().unwrap()\n    }\n\n    fn events_execution(&amp;self, events: &amp;[inotify::wrapper::Event]) {\n        for event in events.iter() {\n\n        }\n    }\n}\n</code></pre>\n\n<p>During compilation I am receiving an error </p>\n\n<pre><code>src/main.rs:204:13: 204:17 error: cannot borrow `*self` as immutable because it is also borrowed as mutable [E0502]\nsrc/main.rs:204             self.events_execution(events);\n</code></pre>\n\n<p>I thought the best solution would be to separate somehow inotify variable in Notificator structure with watch_service, but I can't dereference <code>self.check_for_events();</code> because I receive</p>\n\n<pre><code>src/main.rs:203:17: 203:27 error: the trait bound `[inotify::wrapper::Event]: std::marker::Sized` is not satisfied [E0277]\nsrc/main.rs:203             let mut events = *self.check_for_events();\n</code></pre>\n\n<p>I understand the core of the problem: I'm trying to borrow reference by <code>check_for_events</code> and then using it as parameter in <code>events_execution</code> which also requires <code>self</code> as parameter, but I have no idea how to resolve it.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 1, "last_activity_date": 1467122203, "creation_date": 1467122203, "answer_id": 38078246, "question_id": 38078058, "link": "https://stackoverflow.com/questions/38078058/how-to-write-a-method-that-adds-self-as-a-mutable-trait-reference-to-a-collect/38078246#38078246", "title": "How to write a method that adds `self` as a mutable trait reference to a collection?", "body": "<p>I've modified your program to include explicit lifetime <code>&lt;'a, 'b&gt;</code> which leads to successful compilation.</p>\n\n<pre><code>trait Foo { }\n\nstruct Bar&lt;'a&gt; {\n    pub handlers: Vec&lt;&amp;'a mut Foo&gt;,\n}\n\nstruct Stu;\n\nimpl Foo for Stu { }\n\nimpl Stu {\n    fn add&lt;'a,'b&gt; (&amp;'a mut self, bar: &amp;'b mut Bar&lt;'a&gt;) {\n        bar.handlers.push(self);\n    }\n}\nfn main(){\n    println!(\"{:?}\", \"success\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1467127266, "creation_date": 1467127266, "answer_id": 38080227, "question_id": 38078058, "link": "https://stackoverflow.com/questions/38078058/how-to-write-a-method-that-adds-self-as-a-mutable-trait-reference-to-a-collect/38080227#38080227", "title": "How to write a method that adds `self` as a mutable trait reference to a collection?", "body": "<p>Read the error method more carefully:</p>\n\n<blockquote>\n  <p>the trait bound <code>&amp;mut Stu: Foo</code> is not satisfied</p>\n</blockquote>\n\n<p>versus:</p>\n\n<blockquote>\n<pre><code>impl Foo for Stu { }\n</code></pre>\n</blockquote>\n\n<p>You have implemented <code>Foo</code> for <code>Stu</code>, not for <code>&amp;mut Stu</code>.</p>\n\n<p>In Rust, a value, immutable reference and mutable reference are three distinct entities, and you can implement a trait for either of them independently.</p>\n\n<hr>\n\n<p>The second corner case is that <code>&amp;mut self</code> is not pattern matching. In regular pattern matching, <code>&amp;mut a: &amp;mut A</code> means that <code>a</code> is of type <code>A</code>, and indeed the <em>other</em> parameters are so treated.</p>\n\n<p>However, confusingly, <code>&amp;mut self</code> is just syntactic sugar for <code>self: &amp;mut Self</code>...</p>\n\n<p>So the type of <code>self</code> here is <code>&amp;mut Stu</code>, and therefore you should not qualify it further in the <code>push</code> call.</p>\n\n<hr>\n\n<p>Therefore, you have to correct your code to:</p>\n\n<pre><code>impl Stu {\n    fn add(&amp;mut self, bar: &amp;mut Bar) {\n        bar.handlers.push(self);\n    }\n}\n</code></pre>\n\n<p>At this point, you will get an error about lifetime constraints: it is not guaranteed here that <code>self</code> will outlive <code>Bar</code>. You need to annotate it (use the same lifetime) to make it work:</p>\n\n<pre><code>impl Stu {\n    fn add&lt;'a&gt;(&amp;'a mut self, bar: &amp;mut Bar&lt;'a&gt;) {\n        bar.handlers.push(self);\n    }\n}\n</code></pre>\n\n<p><em>Note: when annotating lifetimes, it is unnecessary to annotate them all; it's only necessary to insert a name for those that you want to constrain.</em></p>\n"}], "owner": {"reputation": 131, "user_id": 2934618, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48ef01edfb3e68e12da6a8e977cdbcb5?s=128&d=identicon&r=PG", "display_name": "loggerhead", "link": "https://stackoverflow.com/users/2934618/loggerhead"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 293, "favorite_count": 0, "accepted_answer_id": 38080227, "answer_count": 2, "score": 0, "last_activity_date": 1467127266, "creation_date": 1467121720, "last_edit_date": 1467123269, "question_id": 38078058, "link": "https://stackoverflow.com/questions/38078058/how-to-write-a-method-that-adds-self-as-a-mutable-trait-reference-to-a-collect", "title": "How to write a method that adds `self` as a mutable trait reference to a collection?", "body": "<p>I have a trait <code>Foo</code> and a struct <code>Bar</code>. <code>Bar</code> has a <code>Vec</code> field which holds any reference that implements <code>Foo</code>.</p>\n\n<pre><code>trait Foo { }\n\nstruct Bar&lt;'a&gt; {\n    handlers: Vec&lt;&amp;'a mut Foo&gt;,\n}\n</code></pre>\n\n<p>I have another struct <code>Stu</code> which implements <code>Foo</code>, and has a method <code>add</code> to add itself to <code>bar</code>.</p>\n\n<pre><code>struct Stu { }\n\nimpl Foo for Stu { }\n\nimpl Stu {\n    fn add(&amp;mut self, bar: &amp;mut Bar) {\n        bar.handlers.push(&amp;mut self);\n    }\n}\n</code></pre>\n\n<p>Because there are many kinds of structs that implement <code>Foo</code> and the actions finished in <code>add</code> method are varied and I need a struct that holds all of them (which is <code>Bar</code> here), I wrote the above code. But the compiler complains: </p>\n\n<blockquote>\n  <p>the trait bound <code>&amp;mut Stu: Foo</code> is not satisfied</p>\n</blockquote>\n\n<p>How can I fix this or realize my desired end goal? </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1467109802, "creation_date": 1467109802, "answer_id": 38073715, "question_id": 38072757, "link": "https://stackoverflow.com/questions/38072757/what-is-the-difference-between-using-a-type-as-a-different-name-and-a-type-alias/38073715#38073715", "title": "What is the difference between using a type as a different name and a type alias?", "body": "<p>In case of simple types, like in your example, there doesn't seem to be any semantic difference. Moreover, there is a direct analogue with <code>use</code> to <code>pub type</code>, it's <code>pub use</code>:</p>\n\n<pre><code>// will be available to other modules\npub use hyper::status::StatusCode as Error;\n</code></pre>\n\n<p>However, there are differences in more complex cases. For example, you can define generic type aliases or aliases for specialized generic types:</p>\n\n<pre><code>type Result&lt;T&gt; = ::std::result::Result&lt;T, MyError&gt;;\n\ntype OptionI32 = Option&lt;i32&gt;;\n</code></pre>\n\n<p>The general idea is that you usually use type aliases because they are more powerful and suggest the intent more clearly, like with <code>Result</code>, and you use <code>use .. as ..</code> when you only want to import that specific name but it conflicts with something which is already in the current namespace:</p>\n\n<pre><code>use std::io::Read as StdRead;\n\ntrait Read: StdRead { ... }\n</code></pre>\n\n<p>Note that using path-qualified identifiers should be preferred to <code>use</code> renaming. The above is better written as</p>\n\n<pre><code>use std::io;\n\ntrait Read: io::Read { ... }\n</code></pre>\n\n<p>(unless <code>Read</code> methods are used for some concrete type in the same file, of course).</p>\n\n<p>Using <code>use .. as ..</code> as a substitute for <code>type</code> (in case where it is possible) is uncommon and I think it should be avoided.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 265, "favorite_count": 0, "accepted_answer_id": 38073715, "answer_count": 1, "score": 7, "last_activity_date": 1467120557, "creation_date": 1467107312, "last_edit_date": 1467120557, "question_id": 38072757, "link": "https://stackoverflow.com/questions/38072757/what-is-the-difference-between-using-a-type-as-a-different-name-and-a-type-alias", "title": "What is the difference between using a type as a different name and a type alias?", "body": "<p>What is the difference between</p>\n\n<pre><code>use hyper::status::StatusCode as Error;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>type Error = hyper::status::StatusCode;\n</code></pre>\n\n<p>Are the any more differences between them except that <code>type</code> can be also <code>pub type</code>? What are the benefits between using one or another?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4192, "user_id": 1423876, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Pba13.jpg?s=128&g=1", "display_name": "comrade", "link": "https://stackoverflow.com/users/1423876/comrade"}, "edited": false, "score": 1, "creation_date": 1467103750, "post_id": 38071167, "comment_id": 63580160, "body": "Better post this question to <a href=\"http://codereview.stackexchange.com/\">Code Review</a>"}, {"owner": {"reputation": 5435, "user_id": 540837, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/t1Q1b.png?s=128&g=1", "display_name": "Pimgd", "link": "https://stackoverflow.com/users/540837/pimgd"}, "edited": false, "score": 4, "creation_date": 1467110259, "post_id": 38071167, "comment_id": 63584459, "body": "hypothetical code is off topic at Code Review, so don&#39;t post this question there"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1467113411, "post_id": 38071167, "comment_id": 63586502, "body": "Does <code>BigInt</code> implement <code>Copy</code>?  If not then you probably derive <code>Copy</code> anyway."}, {"owner": {"reputation": 9, "user_id": 6522182, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d9e1476668e40641b16ca5289800244a?s=128&d=identicon&r=PG&f=1", "display_name": "frlk", "link": "https://stackoverflow.com/users/6522182/frlk"}, "edited": false, "score": 0, "creation_date": 1467118442, "post_id": 38071167, "comment_id": 63590187, "body": "BigInt does not implement Copy. I am not sure to understand what do you mean by &quot;probably derive it anyway&quot;, can you elaborate ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4192, "user_id": 1423876, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Pba13.jpg?s=128&g=1", "display_name": "comrade", "link": "https://stackoverflow.com/users/1423876/comrade"}, "edited": false, "score": 1, "creation_date": 1467120802, "post_id": 38071167, "comment_id": 63591960, "body": "@comrade you should probably read <a href=\"http://meta.codereview.stackexchange.com/q/5777/32521\">A guide to Code Review for Stack Overflow users</a> before suggesting that something applies there ;-)"}, {"owner": {"reputation": 4192, "user_id": 1423876, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Pba13.jpg?s=128&g=1", "display_name": "comrade", "link": "https://stackoverflow.com/users/1423876/comrade"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467123358, "post_id": 38071167, "comment_id": 63593910, "body": "@Shepmaster sure, thanks :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467126756, "post_id": 38071167, "comment_id": 63596544, "body": "@frlk: Chris meant that even if you try to <code>#[derive(Copy)]</code> on <code>BigStruct</code>, rustc will not because this is only possible if all data members are <code>Copy</code> already."}], "answers": [{"tags": [], "owner": {"reputation": 9, "user_id": 6522182, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d9e1476668e40641b16ca5289800244a?s=128&d=identicon&r=PG&f=1", "display_name": "frlk", "link": "https://stackoverflow.com/users/6522182/frlk"}, "is_accepted": false, "score": 0, "last_activity_date": 1467379129, "creation_date": 1467379129, "answer_id": 38146508, "question_id": 38071167, "link": "https://stackoverflow.com/questions/38071167/is-only-using-references-the-most-idiomatic-efficient-for-big-structures/38146508#38146508", "title": "Is only using references the most idiomatic/efficient for &quot;big&quot; structures?", "body": "<p>Two (partial) solutions that may solve the initial problem : </p>\n\n<p><strong>Go full references but not as described in the question</strong> </p>\n\n<ul>\n<li>Manipulate only <code>&amp;BigStruct</code> ; </li>\n<li>Pass <code>&amp;BigStruct</code> as function parameters ; </li>\n<li>Override operators only for <code>&amp;BigStruct</code>. </li>\n</ul>\n\n<p>The previous example would be : </p>\n\n<pre><code>let b1: &amp;BigStruct = &amp;BigStruct { ... } \nlet b2: &amp;BigStruct = &amp;BigStruct { ... } \nlet b3: &amp;BigStruct = &amp;(b1 + b2) \n</code></pre>\n\n<p>The main problem of this approach is that functions and operators will return <code>BigStruct</code> rather than <code>&amp;BigStruct</code> which is not convenient for users especially when doing arithmetic (it forces to add a <code>&amp;</code> every time an operation is performed). </p>\n\n<p><strong>Use owned pointers</strong> </p>\n\n<p>This use-case may be a legitimate exception for using pointers for efficiency as mentionned in <a href=\"http://words.steveklabnik.com/pointers-in-rust-a-guide\" rel=\"nofollow\">Pointers in Rust : a guide</a>. Concretely, we can : </p>\n\n<ul>\n<li>Manipulate only <code>Box&lt;BigStruct&gt;</code> ; </li>\n<li>Pass and return <code>Box&lt;BigStruct&gt;</code> in function ; </li>\n<li>Override operators only for <code>Box&lt;BigStruct&gt;</code>. </li>\n</ul>\n\n<p>The previous example would be : </p>\n\n<pre><code>let b1: Box&lt;BigStruct&gt; = Box::new(BigStruct { ... }) \nlet b2: Box&lt;BigStruct&gt; = Box::new(BigStruct { ... }) \nlet b3: Box&lt;BigStruct&gt; = b1 + b2 \n</code></pre>\n\n<p>In this case, arithmetic is very straighforward. This approach has nevertheless some drawbacks : </p>\n\n<ul>\n<li>Working explicitely with pointers is not idiomatic Rust ; </li>\n<li>Returning pointers from functions is considered a poor Rust practice. </li>\n</ul>\n"}], "owner": {"reputation": 9, "user_id": 6522182, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d9e1476668e40641b16ca5289800244a?s=128&d=identicon&r=PG&f=1", "display_name": "frlk", "link": "https://stackoverflow.com/users/6522182/frlk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 120, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1467379129, "creation_date": 1467103183, "last_edit_date": 1467120743, "question_id": 38071167, "link": "https://stackoverflow.com/questions/38071167/is-only-using-references-the-most-idiomatic-efficient-for-big-structures", "title": "Is only using references the most idiomatic/efficient for &quot;big&quot; structures?", "body": "<p>Consider the case of a \"big\" structure such as one containing several <code>BigInt</code> variables. For example:</p>\n\n<pre><code>struct BigStruct {\n    x: BigInt,\n    y: BigInt,\n    z: BigInt,\n}\n</code></pre>\n\n<p>My current understanding of Rust is the following:</p>\n\n<ol>\n<li>I should not implement Copy on such a structure.</li>\n<li>I should manipulate it through references.</li>\n</ol>\n\n<p>Both of these are for performance reasons.</p>\n\n<p>This structure is mainly read-only as its parameters generally don't change once they have been set. Nevertheless, elements of that structure are often used to generate new ones (through operator overriding) as in the following example:</p>\n\n<pre><code>let b1: BigStruct = BigStruct { ... } // Rarely change\nlet b2: BigStruct = BigStruct { ... } // Rarely change\nlet b3: BigStruct = &amp;b1 + &amp;b2 // Often combined by operations\n</code></pre>\n\n<p>Can you confirm that my approach (no <code>Copy</code>, all references) is the most idiomatic/efficient for this use case? It seems to have at least two drawbacks:</p>\n\n<ul>\n<li><p>If someone want to use my code, they will need to think whether they should use a reference or not from context. I would like to hide this complexity to have the simplest API possible.</p></li>\n<li><p>I must override each operator twice. For instance, I must provide <code>Add&lt;Self&gt;</code> and <code>Add&lt;&amp;Self&gt;</code> to override addition.</p></li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1467107013, "post_id": 38065331, "comment_id": 63582351, "body": "Are you really sure you want to ask about &quot;idiomatic&quot; and not &quot;performance&quot; or &quot;simplifying the bounds&quot;? Because idioms are very much <i>subjective</i>, and I am afraid that both alternatives could be recommended and no definite objective answer exists.... in which case your question is primed for closure (Primarily Opinion-based)."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467147927, "post_id": 38065331, "comment_id": 63608861, "body": "@MatthieuM. I assumed there were some guide lines for what idiomatic Rust code should look like, I rephrased the question and added an example."}], "answers": [{"comments": [{"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 1, "creation_date": 1467105294, "post_id": 38065373, "comment_id": 63581229, "body": "Could you explain why you would recommend that?"}, {"owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "reply_to_user": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1467132706, "post_id": 38065373, "comment_id": 63600409, "body": "I&#39;d recommend it because it uses more memory to create a whole new vector, which is what happens when you copy a vector. If you needn&#39;t create a new vector, don&#39;t."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1467148766, "post_id": 38065373, "comment_id": 63609220, "body": "<i>which is what happens when you copy a vector</i> \u2014 which can be up to the whims of an optimizing compiler, if it decides that it could be simplified."}], "tags": [], "owner": {"reputation": 6596, "user_id": 5021321, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/29f10a1b457e63d44e3a221e89e32c17?s=128&d=identicon&r=PG", "display_name": "Eli Sadoff", "link": "https://stackoverflow.com/users/5021321/eli-sadoff"}, "is_accepted": false, "score": 5, "last_activity_date": 1467075810, "last_edit_date": 1467075810, "creation_date": 1467074801, "answer_id": 38065373, "question_id": 38065331, "link": "https://stackoverflow.com/questions/38065331/should-i-borrow-or-copy-my-small-data-types/38065373#38065373", "title": "Should I borrow or copy my small data types?", "body": "<p>I'd recommend borrowing in this scenario because it does not seem like ownership is a concern. So, I guess your code would look like</p>\n\n<pre><code>struct Vec {\n    data: [f32; 3],\n}\n\nimpl Vec {\n    fn dot(&amp;self, other: &amp;Vec) -&gt; f32 {..}\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1467182444, "creation_date": 1467182444, "answer_id": 38092105, "question_id": 38065331, "link": "https://stackoverflow.com/questions/38065331/should-i-borrow-or-copy-my-small-data-types/38092105#38092105", "title": "Should I borrow or copy my small data types?", "body": "<p>Rust is not a pure academic language with lofty aesthetics goals and a singular purpose. Rust is a systems programming language, which implies pragmatism.</p>\n\n<p>The general rule of thumb is that your interface should correctly document <em>ownership</em>:</p>\n\n<ul>\n<li>pass by value when you give up ownership</li>\n<li>pass by reference (possibly mutable) when you temporarily relinquish ownership</li>\n</ul>\n\n<p>however the <code>Copy</code> trait is the perfect example of pragmatism at play. It recognizes that passing by reference can be cumbersome (does anyone want to type <code>(&amp;1 + &amp;x) * &amp;y</code>?) and therefore creates an escape hatch for types that do not need to be affine (ie, no special action on destruction).</p>\n\n<p>As a result, semantically, if your type can be <em>guaranteed</em> to be and remain <code>Copy</code>, then marking it as such gives users some leeway on its use which can improve ergonomics. I would encourage you to mark it, then, though with the reminder that later removing the <code>Copy</code> trait would be a backward incompatible change.</p>\n\n<p>Once a type is <code>Copy</code>, I would not hesitate to take advantage of the fact and pass it by value. After all, if the type is never passed by value then there was no point in making it <code>Copy</code> in the first place.</p>\n\n<hr>\n\n<p>The only caveat would be performance reason.</p>\n\n<p><code>Copy</code> does <em>not</em> force a copy, it merely allows it. This means that an optimizer has all latitude to use a copy... or not.</p>\n\n<p>For small types the performance is unlikely to be much different whatever happens; for bigger types I would encourage benchmarking various interfaces if performance matters. <code>Vec</code> is only 1.5x the size of a pointer/reference on 64-bits architectures, so it really is in a gray area. Sometimes copying will be slower (larger copy) but sometimes the benefits of having a local copy will enable optimizations that would not be triggered with a pointer.</p>\n\n<p>However such benchmarking is fraught with peril, notably because it hugely depends on whether the function is inlined, or not (given more or less leeway for removing copies).</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 769, "favorite_count": 0, "accepted_answer_id": 38092105, "answer_count": 2, "score": 6, "last_activity_date": 1467182444, "creation_date": 1467074464, "last_edit_date": 1467147585, "question_id": 38065331, "link": "https://stackoverflow.com/questions/38065331/should-i-borrow-or-copy-my-small-data-types", "title": "Should I borrow or copy my small data types?", "body": "<pre><code>struct Vec {\n    data: [f32; 3],\n}\n\nimpl Vec {\n    fn dot(&amp;self, other: &amp;Vec) -&gt; f32 {\n        ..\n    }\n    // vs\n    fn dot(self, other: Vec) -&gt; f32 {\n        ..\n    }\n}\n</code></pre>\n\n<p>I am currently writing a vector math library and I am wondering if I should borrow or copy my vector types.</p>\n\n<p>At the moment I implement <code>Copy</code> for <code>Vec</code> which makes the API a bit nicer because you don't have to write <code>&amp;</code> all the time.</p>\n\n<p>But it requires much more complex constraints, because now all my constraints also need to satisfy <code>Copy</code>.</p>\n\n<p>Which one potentially yields better performance and why?</p>\n\n<p>Which one potentially yields better ergonomics and why?</p>\n\n<p>Edit:</p>\n\n<p>I have created a small <a href=\"https://github.com/MaikKlein/vector_bench\" rel=\"nofollow\">microbenchmark</a></p>\n\n<pre><code>test bref_f32 ... bench:   2,736,055 ns/iter (+/- 364,885)\ntest bref_f64 ... bench:   4,872,076 ns/iter (+/- 436,928)\ntest copy_f32 ... bench:   2,708,568 ns/iter (+/- 31,162)\ntest copy_f64 ... bench:   4,890,014 ns/iter (+/- 553,050)\n</code></pre>\n\n<p>It seems that there is no difference between <code>ref</code> and <code>copy</code> for this example in terms of performance.</p>\n\n<p><code>Copy</code> seems to yield better ergonomics for library users.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467049068, "post_id": 38059862, "comment_id": 63558852, "body": "The code as presented <a href=\"https://play.rust-lang.org/?gist=2231a51461b58d0c6cea11aa9166db08&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">compiles successfully</a>, and changing all the <code>BinaryTree::Empty</code> to <code>Empty</code> also works. Can you clarify what the problem is?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467049259, "post_id": 38059862, "comment_id": 63558942, "body": "<code>maxi</code> is a built in function in <a href=\"http://doc.rust-lang.org/std/cmp/fn.max.html\" rel=\"nofollow noreferrer\">the standard library</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467049666, "post_id": 38059862, "comment_id": 63559158, "body": "Perhaps your code isn&#39;t at the root but is in a module? If so this may be a duplicate of <a href=\"http://stackoverflow.com/q/33948293/155423\">this</a>, or <a href=\"http://stackoverflow.com/q/31035491/155423\">this</a> or <a href=\"http://stackoverflow.com/q/26224947/155423\">this</a>?"}], "answers": [{"tags": [], "owner": {"reputation": 39, "user_id": 4593517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8828f0e6b6192d042881aedf07f1eec4?s=128&d=identicon&r=PG&f=1", "display_name": "Guinness", "link": "https://stackoverflow.com/users/4593517/guinness"}, "is_accepted": false, "score": 0, "last_activity_date": 1467050850, "creation_date": 1467050850, "answer_id": 38060447, "question_id": 38059862, "link": "https://stackoverflow.com/questions/38059862/generic-enums-and-impl-unable-to-use-use/38060447#38060447", "title": "Generic enums and impl, unable to use use", "body": "<p>Thanks to the comment of Shepmaster, I found out the issue.</p>\n\n<p>The path must be absolute when using <code>use</code></p>\n\n<p>Changing <code>use BinaryTree::*;</code> to <code>use trees::BinaryTree::*;</code> solves the issue.</p>\n\n<p>This problem is solved.</p>\n"}], "owner": {"reputation": 39, "user_id": 4593517, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8828f0e6b6192d042881aedf07f1eec4?s=128&d=identicon&r=PG&f=1", "display_name": "Guinness", "link": "https://stackoverflow.com/users/4593517/guinness"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1083, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1467050850, "creation_date": 1467048516, "last_edit_date": 1467050244, "question_id": 38059862, "link": "https://stackoverflow.com/questions/38059862/generic-enums-and-impl-unable-to-use-use", "title": "Generic enums and impl, unable to use use", "body": "<p>I am quite new to Rust, and I tried to implement generic binary trees.\nI used <a href=\"http://rustbyexample.com/custom_types/enum/testcase_linked_list.html\" rel=\"nofollow\">this code</a> as a reference for enums and impl.</p>\n\n<p>Here, <code>use List::*;</code> seems to refer to the enum below.</p>\n\n<p>Here is my code for my trees:</p>\n\n<pre><code>use BinaryTree::*;\n\nenum BinaryTree&lt;T&gt; {\n    Empty,\n    Node(Box&lt;(T, BinaryTree&lt;T&gt;, BinaryTree&lt;T&gt;)&gt;),\n}\n\nimpl&lt;T: Ord&gt; BinaryTree&lt;T&gt; {\n    fn add(&amp;mut self, value: T) {\n        match *self {                                         \n            BinaryTree::Empty =&gt; {\n                *self = BinaryTree::Node(Box::new((value, BinaryTree::Empty, BinaryTree::Empty)))\n            }                              \n            BinaryTree::Node(ref mut node) =&gt; {\n                if value &lt;= node.0 {\n                    node.1.add(value);\n                } else {\n                    node.2.add(value);\n                }\n            }                                             \n        }\n    }\n\n    fn height(&amp;self) -&gt; i32 {\n        match *self {                                         \n            BinaryTree::Empty =&gt; -1i32,                       \n            BinaryTree::Node(ref node) =&gt; 1i32 + maxi(node.1.height(), node.2.height()), \n        }\n    }\n\n    fn size(&amp;self) -&gt; i32 {\n        match *self {                                         \n            BinaryTree::Empty =&gt; 0i32,                        \n            BinaryTree::Node(ref node) =&gt; 1i32 + node.1.size() + node.2.size(),           \n        }\n    }\n}\n\nfn maxi(x: i32, y: i32) -&gt; i32 {\n    if x &gt; y {\n        x\n    } else {\n        y\n    }\n}\n</code></pre>\n\n<p>Then cargo exits with this error:</p>\n\n<pre><code>error: unresolved import `BinaryTree::*`. Maybe a missing `extern crate BinaryTree`? [E0432]\nuse BinaryTree::*;\n    ^~~~~~~~~~\n</code></pre>\n\n<p>According to what I understood in the example of the linked lists, rustc should understand that <code>use BinaryTree::*;</code> is the enum I define below. This could help changing all the <code>BinaryTree::Empty</code> to <code>Empty</code> and <code>BinaryTree::Node(...)</code> to <code>Node(...)</code>.</p>\n\n<p>Edit:</p>\n\n<p>Since I would like to developp a library and use multiple files, I work in src/trees.rs</p>\n\n<p>in main.rs, I have only (for now)</p>\n\n<pre><code>mod trees;\n\nfn main() {}\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "is_accepted": false, "score": 3, "last_activity_date": 1467022088, "creation_date": 1467022088, "answer_id": 38051180, "question_id": 38050995, "link": "https://stackoverflow.com/questions/38050995/how-can-the-location-of-cargos-configuration-directory-be-overridden/38051180#38051180", "title": "How can the location of Cargo&#39;s configuration directory be overridden?", "body": "<p>The default location can be changed by means of the environment variable <code>$CARGO_HOME</code>, it overrides the default location which is <code>$HOME/.cargo</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467037535, "post_id": 38051424, "comment_id": 63551573, "body": "+1 for the mention of configuration files; checking in the configuration in the project is very helpful for contributors!"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": true, "score": 17, "last_activity_date": 1546364579, "last_edit_date": 1546364579, "creation_date": 1467022781, "answer_id": 38051424, "question_id": 38050995, "link": "https://stackoverflow.com/questions/38050995/how-can-the-location-of-cargos-configuration-directory-be-overridden/38051424#38051424", "title": "How can the location of Cargo&#39;s configuration directory be overridden?", "body": "<blockquote>\n  <h3>Environment variables Cargo reads</h3>\n  \n  <p>You can override these environment variables to change Cargo's\n  behavior on your system:</p>\n  \n  <ul>\n  <li><code>CARGO_HOME</code> \u2014 Cargo maintains a local cache of the registry index and of git   checkouts of crates.  By default these are stored under\n  <code>$HOME/.cargo</code>, but   this variable overrides the location of this\n  directory. Once a crate is cached   it is not removed by the clean\n  command.</li>\n  <li><code>CARGO_TARGET_DIR</code> \u2014 Location of where to place all generated artifacts,   relative to the current working directory.</li>\n  <li><code>RUSTC</code> \u2014 Instead of running <code>rustc</code>, Cargo will execute this specified   compiler instead.</li>\n  <li><code>RUSTC_WRAPPER</code> \u2014 Instead of simply running <code>rustc</code>, Cargo will execute this   specified wrapper instead, passing as its commandline\n  arguments the rustc   invocation, with the first argument being rustc.</li>\n  <li><code>RUSTDOC</code> \u2014 Instead of running <code>rustdoc</code>, Cargo will execute this specified   <code>rustdoc</code> instance instead.</li>\n  <li><code>RUSTDOCFLAGS</code> \u2014 A space-separated list of custom flags to pass to all <code>rustdoc</code>   invocations that Cargo performs. In contrast with\n  <code>cargo rustdoc</code>, this is   useful for passing a flag to <em>all</em>\n  <code>rustdoc</code> instances.</li>\n  <li><code>RUSTFLAGS</code> \u2014 A space-separated list of custom flags to pass to all compiler   invocations that Cargo performs. In contrast with <code>cargo rustc</code>,\n  this is   useful for passing a flag to <em>all</em> compiler\n  instances.</li>\n  <li><code>CARGO_INCREMENTAL</code> \u2014 If this is set to 1 then Cargo will force incremental   compilation to be enabled for the current compilation,\n  and when set to 0 it   will force disabling it. If this env var isn't\n  present then cargo's defaults   will otherwise be used.</li>\n  <li><code>CARGO_CACHE_RUSTC_INFO</code> \u2014 If this is set to 0 then Cargo will not try to cache   compiler version information.</li>\n  </ul>\n</blockquote>\n\n<p><a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-reads\" rel=\"noreferrer\">The Cargo documentation</a></p>\n\n<hr>\n\n<blockquote>\n  <h3>Hierarchical structure</h3>\n  \n  <p>Cargo allows local configuration for a particular package as well as\n  global configuration, like git. Cargo extends this to a hierarchical\n  strategy. If, for example, Cargo were invoked in\n  <code>/projects/foo/bar/baz</code>, then the following configuration files would\n  be probed for and unified in this order:</p>\n  \n  <ul>\n  <li><code>/projects/foo/bar/baz/.cargo/config</code></li>\n  <li><code>/projects/foo/bar/.cargo/config</code></li>\n  <li><code>/projects/foo/.cargo/config</code></li>\n  <li><code>/projects/.cargo/config</code></li>\n  <li><code>/.cargo/config</code></li>\n  <li><code>$HOME/.cargo/config</code></li>\n  </ul>\n  \n  <p>With this structure, you can specify configuration per-package, and\n  even possibly check it into version control. You can also specify\n  personal defaults with a configuration file in your home directory.</p>\n</blockquote>\n\n<p><a href=\"http://doc.crates.io/config.html#hierarchical-structure\" rel=\"noreferrer\">The Cargo documentation</a></p>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4755, "favorite_count": 4, "accepted_answer_id": 38051424, "answer_count": 2, "score": 8, "last_activity_date": 1546364633, "creation_date": 1467021609, "last_edit_date": 1546364633, "question_id": 38050995, "link": "https://stackoverflow.com/questions/38050995/how-can-the-location-of-cargos-configuration-directory-be-overridden", "title": "How can the location of Cargo&#39;s configuration directory be overridden?", "body": "<p>It seems that the default behavior of Cargo when searching for its configuration directory is to look in the current user's home directory (<code>~/.cargo</code> on my system). How can this behavior be modified to make Cargo look in a user-supplied directory instead?</p>\n"}, {"tags": ["size", "rust", "primitive-types"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1467410691, "post_id": 38047167, "comment_id": 63738098, "body": "This is related to <a href=\"http://stackoverflow.com/q/36924530/5189607\">stackoverflow.com/q/36924530/5189607</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1542144741, "post_id": 38047167, "comment_id": 93461357, "body": "See also <a href=\"https://stackoverflow.com/q/47705093/155423\">What is the correct type for returning a C99 <code>bool</code> to Rust via the FFI?</a>."}], "answers": [{"comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1467017814, "post_id": 38048914, "comment_id": 63538504, "body": "In particular <a href=\"https://github.com/rust-lang/rfcs/pull/954#issuecomment-83811006\" rel=\"nofollow noreferrer\">this comment</a> which explicitly states that they don&#39;t want to tie down the representation."}], "tags": [], "owner": {"reputation": 5589, "user_id": 225703, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f53318df972a9be25d0cebf34d0420b6?s=128&d=identicon&r=PG", "display_name": "Andrew Lygin", "link": "https://stackoverflow.com/users/225703/andrew-lygin"}, "is_accepted": true, "score": 26, "last_activity_date": 1589279510, "last_edit_date": 1589279510, "creation_date": 1467015346, "answer_id": 38048914, "question_id": 38047167, "link": "https://stackoverflow.com/questions/38047167/is-bool-guaranteed-to-be-1-byte/38048914#38048914", "title": "Is bool guaranteed to be 1 byte?", "body": "<p>Rust emits <code>i1</code> to LLVM for <code>bool</code> and relies on whatever it produces. LLVM uses <code>i8</code> (one byte) to represent <code>i1</code> in memory for all the platforms supported by Rust for now. On the other hand, there's no certainty about the future, since the Rust developers have been refusing to commit to the particular <code>bool</code> representation so far.</p>\n\n<p>So, it's guaranteed by the current implementation but not guaranteed by any specifications.</p>\n\n<p>You can find more details in <a href=\"https://github.com/rust-lang/rfcs/pull/954\" rel=\"nofollow noreferrer\">this RFC discussion</a> and the linked PR and issue.</p>\n\n<p>Edit: Please, see the answer below for more information about changes introduced in Rust since this answer had been published.</p>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 9, "last_activity_date": 1607441235, "last_edit_date": 1607441235, "creation_date": 1542130437, "answer_id": 53286603, "question_id": 38047167, "link": "https://stackoverflow.com/questions/38047167/is-bool-guaranteed-to-be-1-byte/53286603#53286603", "title": "Is bool guaranteed to be 1 byte?", "body": "<p>While historically there was a wish to avoid committing to a more specific representation, it was eventually <a href=\"https://github.com/rust-lang/rust/pull/46176#issuecomment-359593446\" rel=\"nofollow noreferrer\">decided in January 2018</a> that <code>bool</code> should provide the following guarantees:</p>\n<ul>\n<li>The definition of <code>bool</code> is equivalent to the C99 definition of <code>_Bool</code>\n<ul>\n<li>In turn, for all currently supported platforms, the size of <code>bool</code> is exactly 1.</li>\n</ul>\n</li>\n</ul>\n<p>The documentation has been updated accordingly. In the <a href=\"https://doc.rust-lang.org/reference/types/boolean.html\" rel=\"nofollow noreferrer\">Rust reference</a>, <code>bool</code> is defined as thus:</p>\n<blockquote>\n<p>The <code>bool</code> type is a datatype which can be either <code>true</code> or <code>false</code>. The boolean type uses one byte of memory. [...]</p>\n</blockquote>\n<p>It has also been documented since 1.25.0 that the output of <a href=\"https://doc.rust-lang.org/std/mem/fn.size_of.html\" rel=\"nofollow noreferrer\"><code>std::mem::size_of::&lt;bool&gt;()</code></a> is 1.</p>\n<p>As such, one can indeed rely on <code>bool</code> being 1 byte (and if this is ever to change, it will be a pretty loud change).</p>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/8014161/155423\">In C how much space does a bool (boolean) take up? Is it 1 bit, 1 byte or something else?</a></li>\n<li><a href=\"https://stackoverflow.com/q/4626815/155423\">Why is a boolean 1 byte and not 1 bit of size?</a> (C++)</li>\n</ul>\n"}], "owner": {"reputation": 31438, "user_id": 908939, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/etRsI.jpg?s=128&g=1", "display_name": "Trevor Hickey", "link": "https://stackoverflow.com/users/908939/trevor-hickey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3839, "favorite_count": 2, "accepted_answer_id": 38048914, "answer_count": 2, "score": 24, "last_activity_date": 1607441235, "creation_date": 1467008819, "last_edit_date": 1467035610, "question_id": 38047167, "link": "https://stackoverflow.com/questions/38047167/is-bool-guaranteed-to-be-1-byte", "title": "Is bool guaranteed to be 1 byte?", "body": "<p>The <a href=\"https://doc.rust-lang.org/reference.html#primitive-types\" rel=\"noreferrer\">Rust documentation</a> is vague on <code>bool</code>'s size.<br>\nIs it guaranteed to be 1 byte, or is it unspecified like in C++? </p>\n\n<pre><code>fn main() {\n    use std::mem;\n    println!(\"{}\",mem::size_of::&lt;bool&gt;()); //always 1?\n}\n</code></pre>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1467068572, "post_id": 38046966, "comment_id": 63567910, "body": "So, just to be clear, <code>.or_else()</code> is no substitute for <code>try!()</code>?"}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": true, "score": 8, "last_activity_date": 1467008044, "creation_date": 1467008044, "answer_id": 38046966, "question_id": 38046593, "link": "https://stackoverflow.com/questions/38046593/why-is-or-else-formulated-to-be-called-twice/38046966#38046966", "title": "Why is .or_else() formulated to be called twice?", "body": "<p>The example may be a bit unfortunate, because it tries to show at the same time how does <code>or_else</code> work, and why would you use it.</p>\n\n<p>To split it into two parts. First what does <code>or_else</code> actually do. If you get call it on <code>Ok</code> value, it passes the <code>Ok</code> value. If you call it on <code>Err</code> value, it executes the function. This example should be enough:</p>\n\n<pre><code>Ok(2).or_else(sq), Ok(2) // not called\nOk(2).or_else(err), Ok(2) // not called\nErr(2).or_else(sq), Ok(4) // called, succeeds\nErr(2).or_else(err), Err(3) // called, fails\n</code></pre>\n\n<p>Now, the why would you use it part. Imagine you're doing some operation which has many alternative approaches. For example you're trying to install some package on linux, but don't care which package manager is available - you're just going to brute-force it. With all the functions returning <code>Result&lt;...&gt;</code> you could do this:</p>\n\n<pre><code>install_with_apt().\n    or_else(install_with_yum).\n    or_else(install_with_pacman).\n    or_else(install_with_dnf).\n    or_else...\n</code></pre>\n\n<p>You'll know that if you got back <code>Ok</code>, at least one of those succeeded and if you get back <code>Err</code> all of them failed. The doubled <code>.or_else()</code> usage in the example if likely just trying to show you can easily chain this call.</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 72, "favorite_count": 0, "accepted_answer_id": 38046966, "answer_count": 1, "score": 0, "last_activity_date": 1467008044, "creation_date": 1467006063, "last_edit_date": 1592644375, "question_id": 38046593, "link": "https://stackoverflow.com/questions/38046593/why-is-or-else-formulated-to-be-called-twice", "title": "Why is .or_else() formulated to be called twice?", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html#method.or_else\" rel=\"nofollow noreferrer\"><code>Result</code> docs</a> give the following explanation for the <code>.or_else()</code> method:</p>\n<blockquote>\n<p><code>fn or_else&lt;F, O: FnOnce(E) -&gt; Result&lt;T, F&gt;&gt;(self, op: O) -&gt; Result&lt;T, F&gt;</code></p>\n<p>Calls op if the result is Err, otherwise returns the Ok value of self.</p>\n<p>This function can be used for control flow based on result values.</p>\n<p>Examples</p>\n<p><code>fn sq(x: u32) -&gt; Result&lt;u32, u32&gt; { Ok(x * x) }</code></p>\n<p><code>fn err(x: u32) -&gt; Result&lt;u32, u32&gt; { Err(x) }</code></p>\n<p><code>assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));</code></p>\n<p><code>assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));</code></p>\n<p><code>assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));</code></p>\n<p><code>assert_eq!(Err(3).or_else(err).or_else(err), Err(3));</code></p>\n</blockquote>\n<p>I <em>think</em> can parse the <code>or_else</code> type annotation with more whitespace:</p>\n<pre><code>fn or_else&lt;F,                           // F being the return type of the Result?\n           O: FnOnce(E) -&gt; Result&lt;T, F&gt; // the function to run instead if error\n          &gt; \n           (self, op: O)                // arguments to the `.or_else()` method\n-&gt; Result&lt;T, F&gt;                         // return type is again Result\n</code></pre>\n<p>Assuming I've got that right, does that mean <code>.or_else()</code> simply gives you a <code>Result</code> with the <code>Error</code> replaced with the return value of the <code>op</code> function?</p>\n<p>I can understand returning a <code>Result</code> yet again, since all code downstream of possibly error-throwing code is &quot;stained&quot; with the possibility of further errors (and it's up to the caller to handle that). But why the doubled calls in the examples? There are a couple different permutations, but I'm not sure what they're trying to show (or if that doubled <code>or_else()</code> pattern is idiomatic).</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 29, "last_activity_date": 1468586391, "last_edit_date": 1468586391, "creation_date": 1467000153, "answer_id": 38045743, "question_id": 38045700, "link": "https://stackoverflow.com/questions/38045700/how-do-i-declare-multiple-mutable-variables-at-the-same-time/38045743#38045743", "title": "How do I declare multiple mutable variables at the same time?", "body": "<p>The proper syntax is </p>\n\n<pre><code>let (mut a, mut b, mut c) = (1, 0.0, 3);\n</code></pre>\n\n<p>Mutability is a property of the binding, and <code>a</code>, <code>b</code>, and <code>c</code> are all different bindings, each bound to a specific element of the tuple after the pattern has been matched. Thus they can be individually made mutable.</p>\n\n<p>If you wanted to specify the type, you could do that too:</p>\n\n<pre><code>let (mut a, mut b, mut c): (u8, f32, i32) = (1, 0.0, 3); \n</code></pre>\n\n<p>For numeric literals, you could also use the suffix form:</p>\n\n<pre><code>let (mut a, mut b, mut c) = (1u8, 0.0f32, 3i32);\n</code></pre>\n\n<p>Of course, there's no reason to do this for the example code; it's much simpler to just have 3 separate statements.</p>\n\n<blockquote>\n  <p>declare multiple constants</p>\n</blockquote>\n\n<p>These aren't constants, they are just immutable variables. A <code>const</code> is a different concept.</p>\n"}], "owner": {"reputation": 345, "user_id": 2179079, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ebbf8303d2f09da0b0a55ef801b58597?s=128&d=identicon&r=PG", "display_name": "KDN", "link": "https://stackoverflow.com/users/2179079/kdn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3840, "favorite_count": 0, "accepted_answer_id": 38045743, "answer_count": 1, "score": 15, "last_activity_date": 1468592338, "creation_date": 1466999852, "last_edit_date": 1468592338, "question_id": 38045700, "link": "https://stackoverflow.com/questions/38045700/how-do-i-declare-multiple-mutable-variables-at-the-same-time", "title": "How do I declare multiple mutable variables at the same time?", "body": "<p>I can declare multiple constants like this:</p>\n\n<pre><code>let (a, b, c) = (1, 0.0, 3);\n</code></pre>\n\n<p>But why can't I do this with mutable variables?</p>\n\n<p><code>let mut (a, b, c) = (1, 0.0, 3);</code> throws a compile error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected identifier, found `(`\n --&gt; &lt;anon&gt;:2:13\n2 |&gt;     let mut (a, b, c) = (1, 0.0, 3);\n  |&gt;             ^\n</code></pre>\n"}, {"tags": ["rust", "binary-search-tree"], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 6515237, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/18781bea67592cf6da3fdd40fe39316e?s=128&d=identicon&r=PG&f=1", "display_name": "brodie", "link": "https://stackoverflow.com/users/6515237/brodie"}, "edited": false, "score": 0, "creation_date": 1467002021, "post_id": 38044190, "comment_id": 63531633, "body": "Thanks! Is there a way to do it which is not recursive?"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 4, "last_activity_date": 1466984605, "creation_date": 1466984605, "answer_id": 38044190, "question_id": 38043377, "link": "https://stackoverflow.com/questions/38043377/cannot-borrow-node-as-mutable-more-than-once-while-implementing-a-binary-search/38044190#38044190", "title": "Cannot borrow node as mutable more than once while implementing a binary search tree", "body": "<p>Rust's compiler isn't sophisticated enough (yet?) to handle this situation. Rust sees that you're trying to borrow the same value mutably more than once, because it sees a repeated mutable borrow on the same variable in a loop. Of course, that's not what you're trying to do, as you want to reassign the variable on each iteration, but Rust doesn't support assigning to a variable that's being borrowed.</p>\n\n<p>What we need to do instead is have intermediate variables so that the compiler can track the borrows correctly. How do we create an indeterminate amount of variables? With recursion!</p>\n\n<pre><code>impl BinarySearchTree {\n    pub fn insert(&amp;mut self, key: i32) {\n        fn insert_node(node: &amp;mut OptNode, key: i32) {\n            if let Some(ref mut boxed_node) = *node {\n                match key.cmp(&amp;boxed_node.key) {\n                    Ordering::Less =&gt; insert_node(&amp;mut boxed_node.left, key),\n                    Ordering::Greater =&gt; insert_node(&amp;mut boxed_node.right, key),\n                    Ordering::Equal =&gt; return,\n                }\n            } else {\n                *node = Some(Box::new(Node { key: key, left: None, right: None}));\n            }\n        }\n\n        insert_node(&amp;mut self.root, key)\n    }\n}\n</code></pre>\n\n<p>Note: although this algorithm is tail-recursive, Rust doesn't optimize this into tail calls, so it could cause a stack overflow in degenerate cases.</p>\n"}, {"comments": [{"owner": {"reputation": 20854, "user_id": 240950, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/4b022f0d3cc5b2d5253295dd446b627d?s=128&d=identicon&r=PG", "display_name": "Zaur Nasibov", "link": "https://stackoverflow.com/users/240950/zaur-nasibov"}, "edited": false, "score": 0, "creation_date": 1527246284, "post_id": 38048416, "comment_id": 88066936, "body": "Could you please elaborate on why <code>{node}.as_mut()...</code> works, but <code>node.as_mut()...</code> ends up in borrowing errors?"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 3, "last_activity_date": 1527268436, "last_edit_date": 1527268436, "creation_date": 1467013446, "answer_id": 38048416, "question_id": 38043377, "link": "https://stackoverflow.com/questions/38043377/cannot-borrow-node-as-mutable-more-than-once-while-implementing-a-binary-search/38048416#38048416", "title": "Cannot borrow node as mutable more than once while implementing a binary search tree", "body": "<p>Without recursion:</p>\n\n<pre><code>pub fn insert(&amp;mut self, key: i32) {\n    let mut node = &amp;mut self.root;\n    loop {\n        node = match node.as_ref().map(|n| key.cmp(&amp;n.key)) {\n            Some(Ordering::Less) =&gt; &amp;mut { node }.as_mut().unwrap().left,\n            Some(Ordering::Equal) =&gt; return,\n            Some(Ordering::Greater) =&gt; &amp;mut { node }.as_mut().unwrap().right,\n            None =&gt; {\n                *node = Some(Box::new(Node {\n                    key: key,\n                    left: None,\n                    right: None,\n                }));\n                return;\n            }\n        };\n    }\n}\n</code></pre>\n\n<p>The <code>unwrap()</code> is safe here.</p>\n\n<blockquote>\n  <p>Could you please elaborate on why <code>{node}.as_mut()...</code> works</p>\n</blockquote>\n\n<p><code>node</code> is a mutable reference (<code>&amp;mut Option&lt;Box&lt;Node&gt;&gt;</code>). It can not be copied. </p>\n\n<pre><code>let temp = node;\n</code></pre>\n\n<p>Here <code>node</code> was <strong>moved</strong> into <code>temp</code>. This is exactly what we need to avoid assigning to the borrowed <code>node</code>. We can <strong>move</strong> <code>node</code> to the new temporary variable and borrow it.</p>\n\n<pre><code>// ...\nSome(Ordering::Less) =&gt; {\n    let temp = node;\n    &amp;mut temp.as_mut().unwrap().left\n}\n// ...\n</code></pre>\n\n<p>Compact notation:</p>\n\n<pre><code>// ...\nSome(Ordering::Less) =&gt;  &amp;mut { let temp = node; temp }.as_mut().unwrap().left,\n// ...\n</code></pre>\n\n<p>The expressions <code>{ node }</code> and <code>{ let temp = node; temp }</code> are equivalent, but in the first case the <code>node</code> <strong>moves</strong> to an implicit temporary variable.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1527268323, "creation_date": 1527268323, "answer_id": 50534028, "question_id": 38043377, "link": "https://stackoverflow.com/questions/38043377/cannot-borrow-node-as-mutable-more-than-once-while-implementing-a-binary-search/50534028#50534028", "title": "Cannot borrow node as mutable more than once while implementing a binary search tree", "body": "<p>As <a href=\"https://stackoverflow.com/a/38044190/155423\">Francis Gagn\u00e9 said</a></p>\n\n<blockquote>\n  <p>Rust's compiler isn't sophisticated enough (yet?) </p>\n</blockquote>\n\n<p>That sophistication <em>is</em> coming, and it's called <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a>. With them enabled, your original code works as-is: </p>\n\n<pre><code>#![feature(nll)]\n\nuse std::cmp::Ordering;\n\npub struct BinarySearchTree {\n    root: OptNode,\n    size: u32,\n}\n\ntype OptNode = Option&lt;Box&lt;Node&gt;&gt;;\n\nstruct Node {\n    key: i32,\n    left: OptNode,\n    right: OptNode,\n}\n\nimpl BinarySearchTree {\n    pub fn new() -&gt; Self {\n        BinarySearchTree {\n            root: None,\n            size: 0,\n        }\n    }\n\n    pub fn is_empty(&amp;self) -&gt; bool {\n        self.size == 0\n    }\n\n    pub fn size(&amp;self) -&gt; u32 {\n        self.size\n    }\n\n    pub fn contains(&amp;self, key: i32) -&gt; bool {\n        let mut node = &amp;self.root;\n        while let Some(ref boxed_node) = *node {\n            match key.cmp(&amp;boxed_node.key) {\n                Ordering::Less =&gt; node = &amp;boxed_node.left,\n                Ordering::Greater =&gt; node = &amp;boxed_node.right,\n                Ordering::Equal =&gt; return true,\n            }\n        }\n\n        false\n    }\n\n    pub fn insert(&amp;mut self, key: i32) {\n        let mut node = &amp;mut self.root;\n        while let Some(ref mut boxed_node) = *node {\n            match key.cmp(&amp;boxed_node.key) {\n                Ordering::Less =&gt; node = &amp;mut boxed_node.left,\n                Ordering::Greater =&gt; node = &amp;mut boxed_node.right,\n                Ordering::Equal =&gt; return,\n            }\n        }\n\n        *node = Some(Box::new(Node {\n            key: key,\n            left: None,\n            right: None,\n        }));\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 61, "user_id": 6515237, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/18781bea67592cf6da3fdd40fe39316e?s=128&d=identicon&r=PG&f=1", "display_name": "brodie", "link": "https://stackoverflow.com/users/6515237/brodie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 663, "favorite_count": 0, "answer_count": 3, "score": 5, "last_activity_date": 1527268436, "creation_date": 1466976611, "last_edit_date": 1527268164, "question_id": 38043377, "link": "https://stackoverflow.com/questions/38043377/cannot-borrow-node-as-mutable-more-than-once-while-implementing-a-binary-search", "title": "Cannot borrow node as mutable more than once while implementing a binary search tree", "body": "<p>I'm trying to implement a binary search tree in Rust and I am running into problems with inserting an element. What is an idiomatic way of doing this in Rust?</p>\n\n<p>Here is my implementation:</p>\n\n<pre><code>use std::cmp::Ordering;\n\npub struct BinarySearchTree {\n    root: OptNode,\n    size: u32,\n}\n\ntype OptNode = Option&lt;Box&lt;Node&gt;&gt;;\n\nstruct Node {\n    key: i32,\n    left: OptNode,\n    right: OptNode,\n}\n\nimpl BinarySearchTree {\n    pub fn new() -&gt; Self {\n        BinarySearchTree {\n            root: None,\n            size: 0,\n        }\n    }\n\n    pub fn is_empty(&amp;self) -&gt; bool {\n        self.size == 0\n    }\n\n    pub fn size(&amp;self) -&gt; u32 {\n        self.size\n    }\n\n    pub fn contains(&amp;self, key: i32) -&gt; bool {\n        let mut node = &amp;self.root;\n        while let Some(ref boxed_node) = *node {\n            match key.cmp(&amp;boxed_node.key) {\n                Ordering::Less =&gt; node = &amp;boxed_node.left,\n                Ordering::Greater =&gt; node = &amp;boxed_node.right,\n                Ordering::Equal =&gt; return true,\n            }\n        }\n\n        false\n    }\n\n    pub fn insert(&amp;mut self, key: i32) {\n        let mut node = &amp;mut self.root;\n        while let Some(ref mut boxed_node) = *node {\n            match key.cmp(&amp;boxed_node.key) {\n                Ordering::Less =&gt; node = &amp;mut boxed_node.left,\n                Ordering::Greater =&gt; node = &amp;mut boxed_node.right,\n                Ordering::Equal =&gt; return,\n            }\n        }\n\n        *node = Some(Box::new(Node {\n            key: key,\n            left: None,\n            right: None,\n        }));\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>Here are the errors I'm getting:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `node.0` as mutable more than once at a time\n  --&gt; src/main.rs:47:24\n   |\n47 |         while let Some(ref mut boxed_node) = *node {\n   |                        ^^^^^^^^^^^^^^^^^^ mutable borrow starts here in previous iteration of loop\n...\n60 |     }\n   |     - mutable borrow ends here\n\nerror[E0506]: cannot assign to `node` because it is borrowed\n  --&gt; src/main.rs:49:35\n   |\n47 |         while let Some(ref mut boxed_node) = *node {\n   |                        ------------------ borrow of `node` occurs here\n48 |             match key.cmp(&amp;boxed_node.key) {\n49 |                 Ordering::Less =&gt; node = &amp;mut boxed_node.left,\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `node` occurs here\n\nerror[E0506]: cannot assign to `node` because it is borrowed\n  --&gt; src/main.rs:50:38\n   |\n47 |         while let Some(ref mut boxed_node) = *node {\n   |                        ------------------ borrow of `node` occurs here\n...\n50 |                 Ordering::Greater =&gt; node = &amp;mut boxed_node.right,\n   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `node` occurs here\n\nerror[E0506]: cannot assign to `*node` because it is borrowed\n  --&gt; src/main.rs:55:9\n   |\n47 |           while let Some(ref mut boxed_node) = *node {\n   |                          ------------------ borrow of `*node` occurs here\n...\n55 | /         *node = Some(Box::new(Node {\n56 | |             key: key,\n57 | |             left: None,\n58 | |             right: None,\n59 | |         }));\n   | |___________^ assignment to borrowed `*node` occurs here\n</code></pre>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": false, "score": 8, "last_activity_date": 1467150840, "last_edit_date": 1467150840, "creation_date": 1466978135, "answer_id": 38043560, "question_id": 38043201, "link": "https://stackoverflow.com/questions/38043201/rust-function-does-not-have-static-lifetime/38043560#38043560", "title": "Rust function does not have static lifetime?", "body": "<p>The type of <code>&amp;dox</code> is not <code>&amp;Fn(u8) -&gt; u8</code> (or even <code>&amp;fn(u8) -&gt; u8</code>), it is merely <em>coercible to</em> <code>&amp;Fn(u8) -&gt; u8</code>. Therefore, you're actually taking the address of a temporary. Temporaries aren't promoted to <code>'static</code> lifetime even if they could, in principle, be <code>'static</code>. For example this code doesn't work either:</p>\n\n<pre><code>fn main() {\n    let a: &amp;'static i32 = &amp;5;\n}\n</code></pre>\n\n<p>There are some workarounds for this. Normally one can just explicitly create a <code>static</code> variable and take the reference to that:</p>\n\n<pre><code>fn main() {\n    static FIVE: i32 = 5;\n    let a: &amp;'static i32 = &amp;FIVE;\n}\n</code></pre>\n\n<p>In your specific case that doesn't work directly because <code>Fn(u8) -&gt; u8</code> is an unsized type (a trait, specifically) so you can't just put that in a <code>static</code>. You can do this:</p>\n\n<pre><code>fn main() {\n    static DOX: fn(u8) -&gt; u8 = dox; // note: fn, not Fn\n    let a: &amp;'static Fn(u8) -&gt; u8 = &amp;DOX;\n}\n</code></pre>\n\n<p>However, a static reference to a <code>Fn*</code> trait object is a rather silly thing. Closures which can be <code>'static</code> references are extremely rare, so you might just as well use a plain <code>fn(u8) -&gt; u8</code> type and sidestep the whole lifetime business.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1530991520, "creation_date": 1530991520, "answer_id": 51226325, "question_id": 38043201, "link": "https://stackoverflow.com/questions/38043201/rust-function-does-not-have-static-lifetime/51226325#51226325", "title": "Rust function does not have static lifetime?", "body": "<p>As of Rust 1.21, \"static promotion\" is performed automatically and your original code compiles as-is.</p>\n\n<p>This code compiles as well:</p>\n\n<pre><code>fn main() {\n    let a: &amp;'static i32 = &amp;5;\n}\n</code></pre>\n\n<p>Additionally, closures which do not capture anything from their environment can be automatically converted to function pointers, so you don't need to create a separate function, either:</p>\n\n<pre><code>fn main() {\n    let cb: fn(u8) -&gt; u8 = |x| x * 2;\n}\n</code></pre>\n"}], "owner": {"reputation": 1117, "user_id": 1810193, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/4ff490527b19b60e12e2520654cf54ef?s=128&d=identicon&r=PG", "display_name": "Philippe", "link": "https://stackoverflow.com/users/1810193/philippe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 922, "favorite_count": 2, "accepted_answer_id": 51226325, "answer_count": 2, "score": 8, "last_activity_date": 1530991520, "creation_date": 1466975305, "last_edit_date": 1466978317, "question_id": 38043201, "link": "https://stackoverflow.com/questions/38043201/rust-function-does-not-have-static-lifetime", "title": "Rust function does not have static lifetime?", "body": "<p>I am trying to make this simple code compile:</p>\n\n<pre><code>fn dox(x: u8) -&gt; u8 { x*2 }\n\nfn main() {\n    let cb: &amp;'static (Fn(u8) -&gt; u8) = &amp;dox;\n}\n</code></pre>\n\n<p>But it fails with Rust 1.9:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>x.rs:4:40: 4:43 error: borrowed value does not live long enough\nx.rs:4     let cb: &amp;'static (Fn(u8) -&gt; u8) = &amp;dox;\n                                              ^~~\nnote: reference must be valid for the static lifetime...\nx.rs:4:44: 5:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 4:43\nx.rs:4     let cb: &amp;'static (Fn(u8) -&gt; u8) = &amp;dox;\nx.rs:5 }\nerror: aborting due to previous error\n</code></pre>\n\n<p>How is it possible that a free function does not have static lifetime? How could this code be unsafe?</p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 136, "user_id": 3494994, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001848251958/picture?type=large", "display_name": "Dr. Sahib", "link": "https://stackoverflow.com/users/3494994/dr-sahib"}, "edited": false, "score": 0, "creation_date": 1466971393, "post_id": 38042592, "comment_id": 63525281, "body": "Why don&#39;t you declare the HashMap as global?"}, {"owner": {"reputation": 844, "user_id": 937801, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1934360dfa60b4d41c568d01ce5ec927?s=128&d=identicon&r=PG", "display_name": "forTruce", "link": "https://stackoverflow.com/users/937801/fortruce"}, "reply_to_user": {"reputation": 136, "user_id": 3494994, "user_type": "registered", "profile_image": "https://graph.facebook.com/100001848251958/picture?type=large", "display_name": "Dr. Sahib", "link": "https://stackoverflow.com/users/3494994/dr-sahib"}, "edited": false, "score": 1, "creation_date": 1466972189, "post_id": 38042592, "comment_id": 63525488, "body": "@Dr.Sahib I generally try to avoid global state. Also, I read the following SO post that recommended minimizing the use of global state: <a href=\"http://stackoverflow.com/questions/27791532/how-do-i-create-a-global-mutable-singleton\" title=\"how do i create a global mutable singleton\">stackoverflow.com/questions/27791532/&hellip;</a>. So I was attempting to do it without global state."}, {"owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "edited": false, "score": 0, "creation_date": 1466987819, "post_id": 38042592, "comment_id": 63528792, "body": "Just noting that nightly Rust gives a lot better error message here: &quot;expected a closure that implements the <code>Fn</code> trait, but this closure only implements <code>FnMut</code>&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 844, "user_id": 937801, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1934360dfa60b4d41c568d01ce5ec927?s=128&d=identicon&r=PG", "display_name": "forTruce", "link": "https://stackoverflow.com/users/937801/fortruce"}, "edited": false, "score": 0, "creation_date": 1466994813, "post_id": 38044568, "comment_id": 63530164, "body": "Thanks! Your explanations really helped."}, {"owner": {"reputation": 24901, "user_id": 198927, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/eExki.jpg?s=128&g=1", "display_name": "Petrus Theron", "link": "https://stackoverflow.com/users/198927/petrus-theron"}, "edited": false, "score": 1, "creation_date": 1542628459, "post_id": 38044568, "comment_id": 93623877, "body": "Thanks, @krdln. Could you update this sample for the latest Hyper 0.12.x?"}], "tags": [], "owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "is_accepted": true, "score": 10, "last_activity_date": 1518530342, "last_edit_date": 1518530342, "creation_date": 1466989016, "answer_id": 38044568, "question_id": 38042592, "link": "https://stackoverflow.com/questions/38042592/how-do-i-share-a-hashmap-between-hyper-handlers/38044568#38044568", "title": "How do I share a HashMap between Hyper handlers?", "body": "<p>Please include all the necessary <code>use</code> declarations next time, thanks!</p>\n\n<p>If you're using nightly Rust, the error message is a less cryptic:</p>\n\n<blockquote>\n  <p>expected a closure that implements the <code>Fn</code>trait, but this closure only implements <code>FnMut</code></p>\n</blockquote>\n\n<p>That means that Hyper needs the closure to be shared between threads, so the closure needs to use its environment only via immutable or shared methods \u2013 so the usage of <code>&amp;mut short_uris</code> is the offender here. To provide shared threadsafe mutability in Rust, you should use <code>Mutex</code> or <code>RwLock</code>.</p>\n\n<p>Please note that you <em>don't</em> need <code>Arc</code> here \u2013 Hyper manages the ownership of the closure itself (probably by wrapping the closure in <code>Arc</code> under the hood, or using something like scoped-threads).</p>\n\n<p>There's also second issue with your code \u2013 you use <code>HashMap&lt;&amp;str, &amp;str&gt;</code>. <code>&amp;str</code> is a borrowed reference. Each time when you have something borrowed in Rust, you should ask yourself\u00a0\u2013 from where? Here you try to borrow from really short-lived strings \u2013 <code>key.to_string()</code> and <code>body.to_string()</code>. It just can't work. Just make your hashmap fully owned \u2013 <code>HashMap&lt;String, String&gt;</code>. Here's the version of your code which compiles:</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::server::{Request, Response, Server};\nuse std::collections::HashMap;\nuse hyper::status::StatusCode;\nuse hyper::uri::RequestUri::AbsolutePath;\nuse hyper::header::Location;\nuse std::io::prelude::*;\n\nfn post(mut req: Request, mut res: Response, short_uris: &amp;mut HashMap&lt;String, String&gt;) {\n    let mut body = String::new();\n    match req.read_to_string(&amp;mut body) {\n        Ok(_) =&gt; {\n            let key = short_uris.len();\n            short_uris.insert(key.to_string(), body);\n            *res.status_mut() = StatusCode::Created;\n            res.start()\n                .unwrap()\n                .write(&amp;key.to_string().into_bytes())\n                .unwrap();\n        }\n        Err(_) =&gt; *res.status_mut() = StatusCode::BadRequest,\n    }\n}\n\nfn get(req: Request, mut res: Response, short_uris: &amp;HashMap&lt;String, String&gt;) {\n    match req.uri {\n        AbsolutePath(ref path) =&gt; match short_uris.get(path) {\n            Some(short_uri) =&gt; {\n                *res.status_mut() = StatusCode::MovedPermanently;\n                res.headers_mut().set(Location(short_uri.to_string()));\n            }\n            None =&gt; *res.status_mut() = StatusCode::NotFound,\n        },\n        _ =&gt; *res.status_mut() = StatusCode::BadRequest,\n    }\n}\n\nfn main() {\n    let mut short_uris: HashMap&lt;String, String&gt; = HashMap::new();\n    short_uris.insert(\"/example\".into(), \"http://www.example.com\".into());\n    let short_uris = std::sync::RwLock::new(short_uris);\n    Server::http(\"0.0.0.0:3001\")\n        .unwrap()\n        .handle(move |req: Request, mut res: Response| match req.method {\n            hyper::Post =&gt; post(req, res, &amp;mut short_uris.write().unwrap()),\n            hyper::Get =&gt; get(req, res, &amp;short_uris.read().unwrap()),\n            _ =&gt; *res.status_mut() = StatusCode::MethodNotAllowed,\n        })\n        .unwrap();\n}\n</code></pre>\n\n<p>I've also got rid of the unnecessary <code>.clone()</code> in the <code>get</code> function.</p>\n\n<p>Please note that this code, while compiles, is not perfect yet \u2013 the <code>RwLock</code> locks should last shorter (<code>get</code> and <code>post</code> should take <code>&amp;RwLock&lt;HashMap&lt;String,String&gt;&gt;</code> as an argument and perform the locking by themselves). The <code>.unwrap()</code> also may be handled in a better way. You can also consider using some lockless concurrent hashmap, there should be some crates for that, but I'm not into the topic, so I won't recommend any.</p>\n"}], "owner": {"reputation": 844, "user_id": 937801, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/1934360dfa60b4d41c568d01ce5ec927?s=128&d=identicon&r=PG", "display_name": "forTruce", "link": "https://stackoverflow.com/users/937801/fortruce"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1559, "favorite_count": 0, "accepted_answer_id": 38044568, "answer_count": 1, "score": 7, "last_activity_date": 1518530428, "creation_date": 1466970886, "last_edit_date": 1518530428, "question_id": 38042592, "link": "https://stackoverflow.com/questions/38042592/how-do-i-share-a-hashmap-between-hyper-handlers", "title": "How do I share a HashMap between Hyper handlers?", "body": "<p>I'm attempting to learn Rust by implementing a simple in-memory URL shortener with Hyper 0.10. I'm running into an issue that I think is caused by trying to close over a mutable <code>HashMap</code> in my handler:</p>\n\n<pre><code>fn post(mut req: Request, mut res: Response, short_uris: &amp;mut HashMap&lt;&amp;str, &amp;str&gt;) {\n    let mut body = String::new();\n    match req.read_to_string(&amp;mut body) {\n        Ok(_) =&gt; {\n            let key = short_uris.len();\n            short_uris.insert(&amp;key.to_string(), &amp;body.to_string());\n            *res.status_mut() = StatusCode::Created;\n            res.start().unwrap().write(&amp;key.to_string().into_bytes());\n        },\n        Err(_) =&gt; *res.status_mut() = StatusCode::BadRequest\n    }\n}\n\nfn get(req: Request, mut res: Response, short_uris: &amp;HashMap&lt;&amp;str, &amp;str&gt;) {\n    match req.uri.clone() {\n        AbsolutePath(path) =&gt; {\n            match short_uris.get::&lt;str&gt;(&amp;path) {\n                Some(short_uri) =&gt; {\n                    *res.status_mut() = StatusCode::MovedPermanently;\n                    res.headers_mut().set(Location(short_uri.to_string()));\n                },\n                None =&gt; *res.status_mut() = StatusCode::NotFound\n            }\n        },\n        _ =&gt; *res.status_mut() = StatusCode::BadRequest\n    }\n}\n\nfn main() {\n    let mut short_uris: HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n    short_uris.insert(\"/example\", \"http://www.example.com\");\n    Server::http(\"0.0.0.0:3001\").unwrap().handle(move |req: Request, mut res: Response| {\n        match req.method {\n            hyper::Post =&gt; post(req, res, &amp;mut short_uris),\n            hyper::Get =&gt; get(req, res, &amp;short_uris),\n            _ =&gt; *res.status_mut() = StatusCode::MethodNotAllowed\n        }\n    }).unwrap();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:42:40: 42:46 error: the trait bound `for&lt;'r, 'r, 'r&gt; [closure@src/main.rs:42:47: 48:3 short_uris:std::collections::HashMap&lt;&amp;str, &amp;str&gt;]: std::ops::Fn&lt;(hyper::server::Request&lt;'r, 'r&gt;, hyper::server::Response&lt;'r&gt;)&gt;` is not satisfied [E0277]\nsrc/main.rs:42  Server::http(\"0.0.0.0:3001\").unwrap().handle(move |req: Request, mut res: Response| {\n</code></pre>\n\n<p>Do I need to use an <code>Arc</code> to share the <code>HashMap</code> between threads? If so, what would that look like? Also, I could be totally wrong about the issue. The error message is very cryptic to me.</p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466968629, "post_id": 38041828, "comment_id": 63524414, "body": "&quot;additional data&quot; is a very generic concept. Are you really asking if a macro can make an arbitrary number of functions based on the macro input?"}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466968699, "post_id": 38041828, "comment_id": 63524443, "body": "@Shepmaster Yes I basically want to generate permutations of the macro input."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1466968719, "post_id": 38041828, "comment_id": 63524458, "body": "Then the answer is <a href=\"http://stackoverflow.com/q/27415011/155423\">basically no</a>. (Or <a href=\"http://stackoverflow.com/q/24905160/155423\">this</a>). (Or <a href=\"http://stackoverflow.com/q/23061702/155423\">this</a>)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467000477, "post_id": 38041828, "comment_id": 63531277, "body": "If you agree that this is a duplicate, feel free to mark it as whichever one was most useful. If you don&#39;t, <a href=\"https://stackoverflow.com/posts/38041828/edit\">edit</a> your question to explain the differences."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467010530, "post_id": 38041828, "comment_id": 63534529, "body": "@Shepmaster: I note that none of the duplicates mentions the use of a build script (which, in Rust, is quite more handy than in other languages due to being integrated to the build system). It could potentially be a reasonable alternative... depending on the specifics of the problem."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467064078, "post_id": 38041828, "comment_id": 63566476, "body": "@MatthieuM. a good point! The downside is that you are going to have to treat all the Rust code as plain text. I think you can feel free to add that answer here or on any of the others."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467097664, "post_id": 38041828, "comment_id": 63576411, "body": "@Shepmaster: The previous questions you linked present examples that are more &quot;in situ&quot; in the middle of existing code so I think I&#39;ll answer this one instead."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1467097952, "creation_date": 1467097952, "answer_id": 38069407, "question_id": 38041828, "link": "https://stackoverflow.com/questions/38041828/can-a-macro-generate-additional-data/38069407#38069407", "title": "Can a macro generate additional data?", "body": "<p>Rust supports 3 methods of code generation:</p>\n\n<ul>\n<li>macros declared with <code>macro!</code></li>\n<li>procedural macros relying on plugins (unstable)</li>\n<li><code>build.rs</code></li>\n</ul>\n\n<p>The latter is a built-in <a href=\"http://doc.crates.io/build-script.html\" rel=\"nofollow\">build script</a> specifically supporting code generation/3rd-party libraries build (such as C libraries).</p>\n\n<p>In your case, you are specifically interesting in the <a href=\"http://doc.crates.io/build-script.html#case-study-code-generation\" rel=\"nofollow\">Code Generation</a> part, which is simple enough (quoting the docs):</p>\n\n<blockquote>\n<pre><code>// build.rs\n\nuse std::env;\nuse std::fs::File;\nuse std::io::Write;\nuse std::path::Path;\n\nfn main() {\n    let out_dir = env::var(\"OUT_DIR\").unwrap();\n    let dest_path = Path::new(&amp;out_dir).join(\"hello.rs\");\n    let mut f = File::create(&amp;dest_path).unwrap();\n\n    f.write_all(b\"\n        pub fn message() -&gt; &amp;'static str {\n            \\\"Hello, World!\\\"\n        }\n    \").unwrap();\n}\n</code></pre>\n</blockquote>\n\n<p>Given this, you can automatically generate any <code>.rs</code> file before the build starts without encountering the macro hygiene issue or having to rely on a nightly compiler.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 177, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1467097952, "creation_date": 1466966002, "last_edit_date": 1466977779, "question_id": 38041828, "link": "https://stackoverflow.com/questions/38041828/can-a-macro-generate-additional-data", "title": "Can a macro generate additional data?", "body": "<pre><code>foo!(x, y, z);\n// expands to\nfn xx(self) -&gt; T {..}\nfn xy(self) -&gt; T {..}\n...\nfn xxx(self) -&gt; T {..}\nfn xxy(self) -&gt; T {..}\nfn xyz(self) -&gt; T {..}\nfn xzx(self) -&gt; T {..}\n//and so on\n...\n</code></pre>\n\n<p>Is it possible for macros to generate additional data? I would like to implement vector swizzling. There are many combinations for a Vector4. 4 + 2^2 + 3^3 + 4^4 = 291 combinations</p>\n\n<p>I haven't done anything with macros besides simple substitution, so I am wondering if something like that could be expressed or do I need compiler plugins for that?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466963217, "post_id": 38041354, "comment_id": 63522716, "body": "What result do you want when <code>foo</code> is passed one or more <code>NaN</code>s?"}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466963422, "post_id": 38041354, "comment_id": 63522790, "body": "@Shepmaster I don&#39;t know, I guess the same way that <code>Float</code> handles Nans and Infs."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467010105, "post_id": 38041492, "comment_id": 63534351, "body": "Note: it might be worth demonstrating how to implement <code>Min</code> automatically for any type implementing <code>Ord</code>; it would be simpler than enumerating all integral types."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467063983, "post_id": 38041492, "comment_id": 63566438, "body": "@MatthieuM. won&#39;t we run into <a href=\"https://play.rust-lang.org/?gist=4722b115be2efd7b1a28fdc326e5d20d&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">conflicting trait implementations</a>? At least until specialization..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467096906, "post_id": 38041492, "comment_id": 63575947, "body": "Ah! I misunderstood. When the OP stated &quot;doesn&#39;t work&quot; I thought that <code>min</code> (and <code>Ord</code>) were not implemented for <code>f32</code>. Since they are, indeed you would need specialization..."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1492093956, "post_id": 38041492, "comment_id": 73851078, "body": "Since specialization has been implemented \u2014 no, specialization won&#39;t solve the conflicting trait problem (as <code>f32: !Ord</code>), you additionally need <a href=\"https://github.com/rust-lang/rfcs/pull/1148\" rel=\"nofollow noreferrer\">mutually exclusive traits</a>. @MatthieuM."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1466963941, "last_edit_date": 1495541386, "creation_date": 1466963941, "answer_id": 38041492, "question_id": 38041354, "link": "https://stackoverflow.com/questions/38041354/how-to-call-min-on-a-generic-type-that-could-be-either-an-integer-or-float/38041492#38041492", "title": "How to call `min` on a generic type that could be either an integer or float?", "body": "<p>Create your own trait that defines the behavior of the various types:</p>\n\n<pre><code>trait Min {\n    fn min(self, other: Self) -&gt; Self;\n}\n\nimpl Min for u8 {\n    fn min(self, other: u8) -&gt; u8 { ::std::cmp::min(self, other) }\n}\n\nimpl Min for f32 {\n    fn min(self, other: f32) -&gt; f32 { f32::min(self, other) }\n}\n\nfn foo&lt;T&gt;(v1: T, v2: T)\n    where T: Min\n{\n   let new_min = Min::min(v1, v2);\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/questions/28247990/how-to-do-a-binary-search-on-a-vec-of-floats\">mentioned</a> in <a href=\"https://stackoverflow.com/questions/26489701/in-rust-f64-and-f32-dont-implement-total-ordering-via-ord-trait-why-this-restr\">other places</a>, floating point comparisons <a href=\"http://floating-point-gui.de/\" rel=\"nofollow noreferrer\">are hard</a>. </p>\n\n<p>There's no <strong>one</strong> answer to what the result of <code>min(NaN, 0.0)</code> should be, so it's up to you to decide. If you decide that <code>NaN</code> is less than or greater than all other numbers, great! Maybe it's equal to zero! Maybe you should assert that there will <em>never</em> be a <code>NaN</code>...</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 612, "favorite_count": 0, "accepted_answer_id": 38041492, "answer_count": 1, "score": 1, "last_activity_date": 1466963941, "creation_date": 1466963029, "last_edit_date": 1466963180, "question_id": 38041354, "link": "https://stackoverflow.com/questions/38041354/how-to-call-min-on-a-generic-type-that-could-be-either-an-integer-or-float", "title": "How to call `min` on a generic type that could be either an integer or float?", "body": "<p>What do I do when I want to call min on integers and floats? For example consider this:</p>\n\n<pre><code>fn foo&lt;T&gt;(v1: T, v2: T)\n    where ???\n{\n   ....\n   let new_min = min(v1, v2);\n   ....\n}\n</code></pre>\n\n<p>The problem is that <a href=\"https://doc.rust-lang.org/std/cmp/fn.min.html\" rel=\"nofollow\">min</a> doesn't work for <code>f32</code>. There is <a href=\"http://rust-num.github.io/num/num/trait.Float.html#tymethod.min\" rel=\"nofollow\">another min</a> for floats.</p>\n\n<p>How would I solve this problem?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1466964376, "post_id": 38041331, "comment_id": 63523086, "body": "Can you compile Rust code other than Racer? For example, try <code>cargo install cargo-edit</code>. Although Racer needs the source code of std, the error message sounds like <i>the compiler</i> can&#39;t find the std <i>binaries</i>, so it can&#39;t even compiler Racer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467010009, "post_id": 38041331, "comment_id": 63534316, "body": "@delnan: Apparently even &quot;Hello, world!&quot; does not compile, so I would tend to agree that the issue here is <code>rustc</code> not knowing where the <code>std</code> crate is."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1470010118, "post_id": 38041331, "comment_id": 64758411, "body": "You could try using <a href=\"https://www.rustup.rs/\" rel=\"nofollow noreferrer\">rustup</a>."}, {"owner": {"reputation": 810, "user_id": 6454387, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/836f5a3c702c54cee8bffccf5a61916c?s=128&d=identicon&r=PG&f=1", "display_name": "ljeabmreosn", "link": "https://stackoverflow.com/users/6454387/ljeabmreosn"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1470027975, "post_id": 38041331, "comment_id": 64761698, "body": "@Chris Morgan thanks for suggesting rustup; I&#39;ll look in to it!"}], "answers": [{"tags": [], "owner": {"reputation": 1260, "user_id": 163945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98fecb78708315771d919e80d741006b?s=128&d=identicon&r=PG", "display_name": "Matthew Hannigan", "link": "https://stackoverflow.com/users/163945/matthew-hannigan"}, "is_accepted": true, "score": 2, "last_activity_date": 1470089570, "last_edit_date": 1470089570, "creation_date": 1470038575, "answer_id": 38693753, "question_id": 38041331, "link": "https://stackoverflow.com/questions/38041331/rust-compiler-cant-find-crate-for-std/38693753#38693753", "title": "Rust compiler can&#39;t find crate for &#39;std&#39;", "body": "<p>The following will work for the simplest of compilations.\nAssuming you extracted the tar file to, say</p>\n\n<pre><code>$HOME/rust-1.10.0-x86_64-unknown-linux-gnu\n</code></pre>\n\n<p>Then run </p>\n\n<pre><code>arch=x86_64-unknown-linux-gnu\ndl=$HOME/rust-1.10.0-$arch\n$dl/rustc/bin/rustc -L $dl/rustc/lib \\\n    -L $dl/rust-std-$arch/lib/rustlib/$arch/lib \\\n    hello.rs\n</code></pre>\n\n<p>But I'm sure a better way would be to run rustup as Chris Morgan suggest.</p>\n\n<p>Coupla more points</p>\n\n<ol>\n<li>You shouldn't compile code as root.</li>\n<li>You may have to relogin or run bash -l to get the environment setup by rustup. </li>\n</ol>\n\n<p>(Fellow rust newb here)</p>\n"}], "owner": {"reputation": 810, "user_id": 6454387, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/836f5a3c702c54cee8bffccf5a61916c?s=128&d=identicon&r=PG&f=1", "display_name": "ljeabmreosn", "link": "https://stackoverflow.com/users/6454387/ljeabmreosn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7957, "favorite_count": 0, "accepted_answer_id": 38693753, "answer_count": 1, "score": 6, "last_activity_date": 1501386245, "creation_date": 1466962940, "last_edit_date": 1501386245, "question_id": 38041331, "link": "https://stackoverflow.com/questions/38041331/rust-compiler-cant-find-crate-for-std", "title": "Rust compiler can&#39;t find crate for &#39;std&#39;", "body": "<p>I recently downloaded and unpacked the Rust Language from <a href=\"https://www.rust-lang.org/downloads.html\" rel=\"nofollow\">this site</a> (Linux 64-bit). </p>\n\n<p>I then installed Rust using the given script in the download <code>install.sh</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>root@kali:~# /root/rust-1.9.0-x86_64-unknown-linux-gnu/install.sh\ninstall: uninstalling component 'rustc'\ninstall: creating uninstall script at /usr/local/lib/rustlib/uninstall.sh\ninstall: installing component 'rustc'\ninstall: installing component 'rust-std-x86_64-unknown-linux-gnu'\ninstall: installing component 'rust-docs'\ninstall: installing component 'cargo'\n\n    Rust is ready to roll.\n</code></pre>\n\n<p>I am trying to install a crate with cargo, but I keep running into this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>root@kali:~# cargo install racer\n    Updating registry `https://github.com/rust-lang/crates.io-index`\n   Compiling winapi v0.2.7\n   Compiling bitflags v0.5.0\nerror: can't find crate for `std` [E0463]\nerror: aborting due to previous error\nBuild failed, waiting for other jobs to finish...\nerror: can't find crate for `std` [E0463]\nerror: aborting due to previous error\nerror: failed to compile `racer v1.2.10`, intermediate artifacts can be found at `/root/target-install`\n</code></pre>\n\n<p><code>cargo install cargo-edit</code> failed with the same result as above, so it's not limited to one particular package.</p>\n\n<p>Even putting a simple program:</p>\n\n<pre><code>fn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>in a file named <code>hello.rs</code> and running <code>rustc hello.rs</code> does not compile; it gives the same error: <code>error: can't find crate for 'std' [E0463]</code>.</p>\n\n<p>The download came with a directory named <code>rust-std-x86_64-unknown-linux-gnu</code>, which I assume is the std crate. How do I instruct rustc to find this directory when trying to locate the std crate?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 3, "creation_date": 1576043632, "post_id": 38040431, "comment_id": 104765798, "body": "E.g. In bash,  <code>RUSTFLAGS=&quot;-C opt-level=3 -C debuginfo=0&quot; cargo build --release</code> will build an optimized (for speed) release build stripped of debug symbols (for size)."}, {"owner": {"reputation": 3258, "user_id": 13378247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10d7d5a6636d8776427782cf74f9bba7?s=128&d=identicon&r=PG&f=1", "display_name": "GirkovArpa", "link": "https://stackoverflow.com/users/13378247/girkovarpa"}, "edited": false, "score": 0, "creation_date": 1613461025, "post_id": 38040431, "comment_id": 117074597, "body": "Does not work.  Still contains hardcoded pathnames in debug information in the executable; e.g. <code>a Display implementation returned an error unexpectedly C:\\\\Users\\\\...</code>"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 34, "last_activity_date": 1544468468, "last_edit_date": 1544468468, "creation_date": 1466957146, "answer_id": 38040431, "question_id": 38040327, "link": "https://stackoverflow.com/questions/38040327/how-to-pass-rustc-flags-to-cargo/38040431#38040431", "title": "How to pass rustc flags to cargo?", "body": "<p>You can pass flags through Cargo by several different means:</p>\n\n<ul>\n<li><code>cargo rustc</code>, which only affects your crate and not its dependencies.</li>\n<li>The <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html\" rel=\"noreferrer\"><code>RUSTFLAGS</code></a> environment variable, which affects dependencies as well.</li>\n<li>Some flags have a proper Cargo option, e.g., <code>-C lto</code> and <code>-C panic=abort</code> can be specified in the <code>Cargo.toml</code> file.</li>\n<li>Add flags in <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"noreferrer\"><code>.cargo/config</code></a> using one of the <code>rustflags=</code> keys.</li>\n</ul>\n\n<hr>\n\n<p>However, in your specific case of configuring lints, you don't need to use compiler flags; you can also enable and disable lints directly in the source code using attributes. This may in fact be a better option as it's more robust, more targeted, and doesn't require you to alter your build system setup:</p>\n\n<pre><code>#![deny(some_lint)] // deny lint in this module and its children\n\n#[allow(another_lint)] // allow lint in this function\nfn foo() {\n    ...\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25877285/155423\">How to disable unused code warnings in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14447, "favorite_count": 7, "accepted_answer_id": 38040431, "answer_count": 1, "score": 22, "last_activity_date": 1544468468, "creation_date": 1466956513, "question_id": 38040327, "link": "https://stackoverflow.com/questions/38040327/how-to-pass-rustc-flags-to-cargo", "title": "How to pass rustc flags to cargo?", "body": "<p>I am trying to disable dead code warnings. I tried the following</p>\n\n<pre><code>cargo build -- -A dead_code\n</code></pre>\n\n<blockquote>\n  <p>\u279c  rla git:(master) \u2717 cargo build -- -A dead_code\n  error: Invalid arguments.</p>\n</blockquote>\n\n<p>So I am wondering how would I pass rustc arguments to cargo?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466942321, "post_id": 38038258, "comment_id": 63516287, "body": "Maybe something like using the <code>unsafe</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1466952165, "post_id": 38038258, "comment_id": 63519002, "body": "I would 100% recommend not using <code>unsafe</code> here. I don&#39;t believe it&#39;s needed, and it&#39;s highly likely that using it will lead to memory errors."}, {"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466952323, "post_id": 38038258, "comment_id": 63519065, "body": "@Shepmaster Crutch for create nice API."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 1, "creation_date": 1466952409, "post_id": 38038258, "comment_id": 63519094, "body": "@Lupe Show us what you really want, not using dummy names like <code>Abc</code> <code>Zxc</code> <code>Baz</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 1, "creation_date": 1467009863, "post_id": 38038258, "comment_id": 63534233, "body": "@Lupe: I don&#39;t mean to demean you however, what is the chance, given that you did not know about the difference between using a generic with a bound and a trait object, that you would know the subtleties of Rust sufficiently well to maintain its invariants manually in an <code>unsafe</code> block? I&#39;ve been using Rust for a while, and each time I&#39;ve used <code>unsafe</code> and convinced myself that it looked good, coming back some time later I discovered a broken invariant. I urge you not to underestimate the difficulty of writing safe <code>unsafe</code> code."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 2, "last_activity_date": 1466941970, "creation_date": 1466941970, "answer_id": 38038258, "question_id": 38038124, "link": "https://stackoverflow.com/questions/38038124/save-trait-bar-foo-in-struct-abcfoo/38038258#38038258", "title": "Save `trait Bar: Foo {}` in `struct Abc&lt;Foo&gt;`", "body": "<p><code>Zxc</code> and <code>Baz</code> are unrelated types, you cannot assign one to the other. </p>\n\n<p>If you want <code>Abc</code> to be able store both of them using the \"base class\" <code>Foo</code>, use a <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">trait object</a>, e.g.</p>\n\n<pre><code>struct Abc {\n    f: Box&lt;Foo&gt;\n}\n// ^ Abc is not a template. \n\nimpl Abc {\n    fn bared&lt;B: Bar + 'static&gt;(&amp;mut self, b: B) {\n        self.f = Box::new(b);\n    }\n    // ^ maybe you want to change it to take `b: Box&lt;Bar&gt;`\n    //   it depends on how you want to expose the API.\n}\n\nfn main() {\n    let mut abc = Abc { f: Box::new(Zxc) };\n    abc.bared(Baz);\n}\n</code></pre>\n\n<p>However, Rust's OOP paradigm is different from Java's, a trait object may not be the best solution. Perhaps you should show the actual problem you want to solve.</p>\n"}, {"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 1, "last_activity_date": 1466943439, "creation_date": 1466943439, "answer_id": 38038441, "question_id": 38038124, "link": "https://stackoverflow.com/questions/38038124/save-trait-bar-foo-in-struct-abcfoo/38038441#38038441", "title": "Save `trait Bar: Foo {}` in `struct Abc&lt;Foo&gt;`", "body": "<p>You haven't declared a type which can store anything which implements <code>Foo</code>; you've declared a kind of factory for making types which can store any particular object of a type which implements <code>Foo</code>.</p>\n\n<p>Going through some of your code:</p>\n\n<pre><code>struct Abc&lt;F: Foo&gt; {\n    f: F\n}\n</code></pre>\n\n<p>This translates roughly as \"Give me a type <code>F</code> which implements <code>Foo</code>, and I'll create a type <code>Abc&lt;F&gt;</code> which stores one\".</p>\n\n<p>When you use it:</p>\n\n<pre><code>let mut abc = Abc { f: Box::new(Zxc) };\n</code></pre>\n\n<p>Adding back in the types inferred by the compiler:</p>\n\n<pre><code>let mut abc: Abc&lt;Zxc&gt; = Abc { f: Box::new(Zxc) };\n</code></pre>\n\n<p>So the type of <code>abc.f</code> is <code>Box&lt;Zxc&gt;</code> - <em>not</em> <code>Box&lt;Foo&gt;</code>.</p>\n\n<p>So now you have an <code>Abc&lt;Zxc&gt;</code> - not a generic <code>Abc</code> (you can't create a concrete object until you specify the type parameter <code>F</code>).</p>\n\n<p>Now it should be clear why you can't use it with <code>Baz</code>.</p>\n\n<p>Now getting to the actual error:</p>\n\n<pre><code>&lt;anon&gt;:17:18: 17:19 error: mismatched types:  expected `F`,\n    found `B` (expected type parameter,\n    found a different type parameter) [E0308] &lt;anon&gt;:17         self.f = b;\n                           ^ &lt;anon&gt;:17:18: 17:19 help: see the detailed explanation for E0308 error: aborting due to previous error\n</code></pre>\n\n<p>The error is not actually on the call to <code>abc.bared</code>; it's the definition:</p>\n\n<pre><code>// In the impl of Abc&lt;F&gt;\nfn bared&lt;B: Bar + 'static&gt;(&amp;mut self, b: B) {\n    self.f = Box::new(b);\n}\n</code></pre>\n\n<p>This method says it takes any type <code>B</code>, which implements <code>Bar</code> but may not be related to <code>F</code> at all, and stores it in the <code>self.f</code>, which is of type <code>Box&lt;F&gt;</code>.  You can't assign a <code>Box&lt;B&gt;</code> to a <code>Box&lt;F&gt;</code> as they are different types.</p>\n\n<p>As @kennytm says you can store different types by making the field a trait object (<code>Box&lt;Foo&gt;</code>), which is more similar to a base class pointer in other languages.</p>\n"}, {"comments": [{"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466951651, "post_id": 38039182, "comment_id": 63518834, "body": "<code>Abc&lt;Zxc&gt;</code> is sized 0 bytes, does this mean that the compiler optimizes such builder and inlined puts <code>Abc&lt;Zxc&gt;</code> in place of the call?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466952334, "post_id": 38039182, "comment_id": 63519072, "body": "@Lupe <a href=\"https://twitter.com/JakeGoulding/status/738568045623431168\" rel=\"nofollow noreferrer\">I&#39;ve been very impressed</a> with the level of inlining that the compiler has done with builders I&#39;ve created before."}, {"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466953006, "post_id": 38039182, "comment_id": 63519281, "body": "Does it make sense to write <code>fn foo(mut self) -&gt; Self</code>, thereby showing for user that a change is necessary?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466955730, "post_id": 38039182, "comment_id": 63520223, "body": "@Lupe that particular syntax wouldn&#39;t allow the type to be changed - <code>Self</code> is fixed at call time."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1466952259, "last_edit_date": 1466952259, "creation_date": 1466949243, "answer_id": 38039182, "question_id": 38038124, "link": "https://stackoverflow.com/questions/38038124/save-trait-bar-foo-in-struct-abcfoo/38039182#38039182", "title": "Save `trait Bar: Foo {}` in `struct Abc&lt;Foo&gt;`", "body": "<p>In addition to the other answers, if you are attempting to construct the builder pattern, you may want to change your <code>bared</code> method to take the builder by value and then return a new type:</p>\n\n<pre><code>impl&lt;F: Foo&gt; Abc&lt;F&gt; {\n    fn bared&lt;B: Bar&gt;(self, b: B) -&gt; Abc&lt;B&gt; {\n        Abc { f: b }\n    }\n}\n</code></pre>\n\n<p>This changes the concrete type from <code>Abc&lt;Zxc&gt;</code> to <code>Abc&lt;Baz&gt;</code> in the call to <code>bared</code>:</p>\n\n<pre><code>let abc = Abc { f: Zxc };\nlet def = abc.bared(Baz);\n</code></pre>\n"}], "owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 69, "favorite_count": 0, "answer_count": 3, "score": 0, "last_activity_date": 1466952259, "creation_date": 1466940990, "last_edit_date": 1466948934, "question_id": 38038124, "link": "https://stackoverflow.com/questions/38038124/save-trait-bar-foo-in-struct-abcfoo", "title": "Save `trait Bar: Foo {}` in `struct Abc&lt;Foo&gt;`", "body": "<pre><code>trait Foo {}\ntrait Bar: Foo {}\n\nstruct Zxc;\nimpl Foo for Zxc {}\n\nstruct Baz;\nimpl Bar for Baz {}\nimpl Foo for Baz {}    \n\nstruct Abc&lt;F: Foo&gt; {\n    f: F\n}\nimpl&lt;F: Foo&gt; Abc&lt;F&gt; {\n    fn bared&lt;B: Bar&gt;(&amp;mut self, b: B) {\n        self.f = b;\n    }\n}\n\nfn main() {\n    let mut abc = Abc { f: Zxc };\n    abc.bared(Baz);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c49b23450c827642ec2ef25d26123de7&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Try it on the playground</a>.</p>\n\n<p><code>Abc</code> stores the <code>Foo</code> trait; <code>abc.bared(Baz)</code> taking <code>Baz</code>, which implements <code>Foo</code> and <code>Bar</code>, but there is a type-mismatch error when saving <code>Baz</code> in the <code>Abc</code>. How to fix it?</p>\n"}, {"tags": ["json", "serialization", "rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1466948888, "last_edit_date": 1466948888, "creation_date": 1466942091, "answer_id": 38038277, "question_id": 38037235, "link": "https://stackoverflow.com/questions/38037235/handling-mixed-object-arrays-in-serde/38038277#38038277", "title": "Handling mixed object arrays in Serde", "body": "<p>There's a few ways to solve this. The easiest, if you have few variants, is to simply implement <code>Deserialize</code> manually like so:</p>\n\n<pre><code>impl serde::de::Deserialize for Structs {\n    fn deserialize&lt;D&gt;(deserializer: &amp;mut D) -&gt; Result&lt;Self, D::Error&gt;\n        where D: serde::Deserializer,\n    {\n        deserializer.deserialize(Visitor)\n    }\n}\n\nstruct Visitor;\n\nimpl serde::de::Visitor for Visitor {\n    type Value = Structs;\n\n    fn visit_map&lt;V&gt;(&amp;mut self, mut visitor: V) -&gt; Result&lt;Structs, V::Error&gt;\n        where V: serde::de::MapVisitor,\n    {\n        let s: String = try!(visitor.visit_key()).expect(\"got struct with no fields\");\n        let val = match &amp;s as &amp;str {\n            \"name\" =&gt; {\n                Ok(Structs::Foo(Foo {\n                    name: try!(visitor.visit_value()),\n                    baz: {\n                        let s: String = try!(visitor.visit_key()).expect(\"baz field\");\n                        assert_eq!(&amp;s, \"baz\");\n                        try!(visitor.visit_value())\n                    },\n                }))\n            },\n            \"baz\" =&gt; {\n                Ok(Structs::Foo(Foo {\n                    baz: try!(visitor.visit_value()),\n                    name: {\n                        let s: String = try!(visitor.visit_key()).expect(\"name field\");\n                        assert_eq!(&amp;s, \"name\");\n                        try!(visitor.visit_value())\n                    },\n                }))\n            },\n            \"quux\" =&gt; {\n                Ok(Structs::Bar(Bar {\n                    quux: try!(visitor.visit_value())\n                }))\n            },\n            other =&gt; panic!(\"no struct has field `{}`\", other),\n        };\n        try!(visitor.end());\n        val\n    }\n}\n</code></pre>\n\n<p>The problem with this implementation is that it obviously doesn't scale. What you can do instead, is to create a new <code>Deserializer</code> that you give the first field name that was found and override the <code>deserialize_map</code> method to process the various structs through a custom <code>MapVisitor</code>.</p>\n\n<p>If you feel that this is a common case supported by other serialization frameworks, feel free to post a bug report on the <code>serde</code> repository or the <code>serde-json</code> repository. I'm sure there's a way to automatically generate such an implementation, but it's not trivial for sure.</p>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 888, "favorite_count": 0, "accepted_answer_id": 38038277, "answer_count": 1, "score": 5, "last_activity_date": 1538856731, "creation_date": 1466934790, "last_edit_date": 1538856731, "question_id": 38037235, "link": "https://stackoverflow.com/questions/38037235/handling-mixed-object-arrays-in-serde", "title": "Handling mixed object arrays in Serde", "body": "<p>Expanding on my <a href=\"https://stackoverflow.com/questions/37870428/convert-two-types-into-a-single-type-with-serde\">previous question</a>, how do you handle an array that contains mixed <code>structs</code> that are both valid? I've tried looking at the <a href=\"https://serde-rs.github.io/json/src/serde_json/src/value.rs.html#74-98\" rel=\"nofollow noreferrer\"><code>serde_json::Value</code></a> source. However it doesn't handle the case of two different <code>structs</code>.</p>\n\n<p>I can't simply merge them, and use Options over their properties as that would make the single <code>struct</code> unwieldy, and it is important for them to be distinct.</p>\n\n<h2>Rust structs</h2>\n\n<pre><code>#[derive(Clone, Debug, Deserialize)]\nstruct WebResponse {\n    foo: Vec&lt;Structs&gt;,\n}\n\nenum Structs {\n    Foo(Foo),\n    Bar(Bar),\n}\n\n#[derive(Clone, Debug, Deserialize)]\nstruct Foo {\n    name: String,\n    baz: Vec&lt;String&gt;,\n}\n\n#[derive(Clone, Debug, Deserialize)]\nstruct Bar {\n    quux: u64\n}\n</code></pre>\n\n<h2>Example JSON</h2>\n\n<pre><code>{\n    \"foo\": [\n        {\n            \"name\": \"John\",\n            \"baz\": [\"Lorem\", \"Ipsum\"]\n        },\n        {\n            \"quux\": 17\n        }\n    ]\n}\n</code></pre>\n"}, {"tags": ["pointers", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1466939604, "post_id": 38034953, "comment_id": 63515545, "body": "While taking a mutable reference to a mutable reference is not useful and demonstrates some confusion, it is usually not a type error, since deref coercions can turn <code>&amp;mut &amp;mut T</code> into <code>&amp;mut T</code>, at least when the compiler knows that <code>&amp;mut T</code> is expected."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 810, "user_id": 6454387, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/836f5a3c702c54cee8bffccf5a61916c?s=128&d=identicon&r=PG&f=1", "display_name": "ljeabmreosn", "link": "https://stackoverflow.com/users/6454387/ljeabmreosn"}, "edited": false, "score": 0, "creation_date": 1466948803, "post_id": 38034953, "comment_id": 63517963, "body": "@ljeabmreosn yes, that was sleepy typing last night. Fixed now, and update with delnan&#39;s comments."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1597771778, "last_edit_date": 1597771778, "creation_date": 1466911703, "answer_id": 38034953, "question_id": 38034912, "link": "https://stackoverflow.com/questions/38034912/how-do-i-recursively-pass-a-mutable-reference/38034953#38034953", "title": "How do I recursively pass a mutable reference?", "body": "<blockquote>\n<pre><code>fn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n</code></pre>\n</blockquote>\n<p><code>fibs</code> is <em>already</em> a mutable reference. In the function, you say <code>&amp;mut fibs</code>, which would get a mutable reference to a mutable reference. That's not useful, and doesn't match the correct type. Instead, pass <code>fibs</code> directly.</p>\n<p>Then you have to split out the two child calls:</p>\n<pre><code>fn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n    if !fibs.contains_key(&amp;n) {\n        let a = fib(n - 1, fibs);\n        let b = fib(n - 2, fibs);\n        fibs.insert(n, a + b);\n    }\n    *fibs.get(&amp;n).unwrap()\n}\n</code></pre>\n<p>This last bit is a limitation of the borrow checker \u2014 nested method calls with <code>&amp;mut</code> receivers result in borrowing errors, but separating them into separate statements fixes the issue.</p>\n<hr />\n<p>As <a href=\"https://stackoverflow.com/questions/38034912/references-in-rust/38034953#comment63515545_38034953\">delnan points out</a>:</p>\n<blockquote>\n<p>While taking a mutable reference to a mutable reference is not useful and demonstrates some confusion, it is usually not a type error, since deref coercions can turn <code>&amp;mut &amp;mut T</code> into <code>&amp;mut T</code>, at least when the compiler knows that <code>&amp;mut T</code> is expected.</p>\n</blockquote>\n<p>This is reflected in what the compiler error messages say:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `fibs` as mutable, as it is not declared as mutable\n  --&gt; src/main.rs:22:35\n   |\n20 | fn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n   |                ---- help: consider changing this to be mutable: `mut fibs`\n21 |     if !fibs.contains_key(&amp;n) {\n22 |         fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n   |                                   ^^^^^^^^^ cannot borrow as mutable\n</code></pre>\n<p>Indeed, making the suggested change allows the code to proceed to the next error. However, having nested references like this overcomplicates things, so it's preferred to keep to the appropriate amount of references.</p>\n"}], "owner": {"reputation": 810, "user_id": 6454387, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/836f5a3c702c54cee8bffccf5a61916c?s=128&d=identicon&r=PG&f=1", "display_name": "ljeabmreosn", "link": "https://stackoverflow.com/users/6454387/ljeabmreosn"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1260, "favorite_count": 0, "accepted_answer_id": 38034953, "answer_count": 1, "score": 2, "last_activity_date": 1597771778, "creation_date": 1466911055, "last_edit_date": 1592423064, "question_id": 38034912, "link": "https://stackoverflow.com/questions/38034912/how-do-i-recursively-pass-a-mutable-reference", "title": "How do I recursively pass a mutable reference?", "body": "<p>I am attempting to solve <a href=\"https://projecteuler.net/problem=2\" rel=\"nofollow noreferrer\">this problem</a> in Rust.</p>\n\n<p>Here is my non-compiling Rust code:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    // initialize HashMap\n    let mut fibs: HashMap&lt;u32, u32&gt; = HashMap::new();\n    fibs.insert(0, 1);\n    fibs.insert(1, 1);\n    let mut n = 1;\n    let mut sum = 0;\n    while fib(n, &amp;mut fibs) &lt; 4000000 {\n        sum += if fib(n, &amp;mut fibs) % 2 == 0 {\n            fib(n, &amp;mut fibs)\n        } else {\n            0\n        };\n        n += 1;\n    }\n    println!(\"{}\", sum);\n}\n\nfn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n    if !fibs.contains_key(&amp;n) {\n        fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n    }\n    *fibs.get(&amp;n).unwrap()\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `fibs` as mutable, as it is not declared as mutable\n  --&gt; src/main.rs:22:35\n   |\n20 | fn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n   |                ---- help: consider changing this to be mutable: `mut fibs`\n21 |     if !fibs.contains_key(&amp;n) {\n22 |         fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n   |                                   ^^^^^^^^^ cannot borrow as mutable\n\nerror[E0499]: cannot borrow `fibs` as mutable more than once at a time\n  --&gt; src/main.rs:22:35\n   |\n22 |         fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n   |         ---- ------               ^^^^^^^^^ second mutable borrow occurs here\n   |         |    |\n   |         |    first borrow later used by call\n   |         first mutable borrow occurs here\n\nerror[E0596]: cannot borrow `fibs` as mutable, as it is not declared as mutable\n  --&gt; src/main.rs:22:59\n   |\n20 | fn fib(n: u32, fibs: &amp;mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n   |                ---- help: consider changing this to be mutable: `mut fibs`\n21 |     if !fibs.contains_key(&amp;n) {\n22 |         fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n   |                                                           ^^^^^^^^^ cannot borrow as mutable\n\nerror[E0499]: cannot borrow `fibs` as mutable more than once at a time\n  --&gt; src/main.rs:22:59\n   |\n22 |         fibs.insert(n, fib(n - 1, &amp;mut fibs) + fib(n - 2, &amp;mut fibs));\n   |         ---- ------ first borrow later used by call       ^^^^^^^^^ second mutable borrow occurs here\n   |         |\n   |         first mutable borrow occurs here\n</code></pre>\n\n<p>The Rust to Python3 translation looks like this:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>def main():\n    fibs = {}\n    fibs[0] = 1\n    fibs[1] = 1\n    n = 1\n    summ = 0\n    while fib(n, fibs) &lt; 4000000:\n        summ += fib(n, fibs) if fib(n, fibs) % 2 == 0 else 0\n        n+=1\n    print(summ)\n    print(fibs)\ndef fib(n, fibs):\n    if n not in fibs:\n        fibs[n] = fib(n-1, fibs) + fib(n-2, fibs)\n    return fibs[n]\nmain()\n</code></pre>\n\n<p>I understand that this particular implementation is not ideal, but I am solely trying to learn the language. I am trying to only pass a reference of the hashmap to the function. Without changing the approach to solving this problem, how can I use mutable <code>HashMap</code> references, if it's even possible?</p>\n"}, {"tags": ["vector", "static", "global-variables", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466890346, "post_id": 38033092, "comment_id": 63506460, "body": "<i>Would the best course of action be to make the variable in <code>main()</code> and pass a pointer to the functions that need it?</i> \u2014 100% yes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466890389, "post_id": 38033092, "comment_id": 63506473, "body": "<i>When given a destructor...</i> - did you mean <b>constructor</b>? A <i>destructor</i> is code that is run when the object is deallocated."}, {"owner": {"reputation": 801, "user_id": 5388567, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/d0171125d3261a31e3ab7792913f74c8?s=128&d=identicon&r=PG", "display_name": "Valkyrie", "link": "https://stackoverflow.com/users/5388567/valkyrie"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466890568, "post_id": 38033092, "comment_id": 63506513, "body": "@Shepmaster thanks for the affirmation of my pointer idea, and yes, you&#39;re correct, I guess I was thinking destructor due to the error"}], "owner": {"reputation": 801, "user_id": 5388567, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/d0171125d3261a31e3ab7792913f74c8?s=128&d=identicon&r=PG", "display_name": "Valkyrie", "link": "https://stackoverflow.com/users/5388567/valkyrie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 20, "favorite_count": 0, "closed_date": 1466890311, "answer_count": 0, "score": 0, "last_activity_date": 1466890807, "creation_date": 1466889774, "last_edit_date": 1466890807, "question_id": 38033092, "link": "https://stackoverflow.com/questions/38033092/defining-static-vectors", "closed_reason": "Duplicate", "title": "Defining static vectors", "body": "<p>I'm attempting to define a static <code>Vec</code> with a struct of my own design for global use in my program (and yes, it does need to be mutable), but I get one of two errors. When given a constructor, the compiler complains and doesn't compile:</p>\n\n<pre><code>static mut stamps: Vec&lt;StampedData&gt; = Vec::new();\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: mutable statics are not allowed to have destructors [E0397]\nstatic mut stamps: Vec&lt;StampedData&gt; = Vec::new();\n                                      ^~~~~~~~~~\nerror: statics are not allowed to have destructors [E0493]\nstatic mut stamps: Vec&lt;StampedData&gt; = Vec::new();\n                                      ^~~~~~~~~~\nerror: function calls in statics are limited to struct and enum constructors [E0015]\nstatic mut stamps: Vec&lt;StampedData&gt; = Vec::new();\n                                      ^~~~~~~~~~\nnote: a limited form of compile-time function evaluation is available on a nightly compiler via `const fn`\nstatic mut stamps: Vec&lt;StampedData&gt; = Vec::new();\n                                      ^~~~~~~~~~\n</code></pre>\n\n<p>and when I omit the constructor as I would in, say, Java, I get another complaint:</p>\n\n<pre><code>static mut stamps: Vec&lt;StampedData&gt;;\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `!`, `+`, `::`, or `=`, found `;`\nstatic mut stamps: Vec&lt;StampedData&gt;;\n                                   ^\n</code></pre>\n\n<p>I understand from these errors that I can't declare globally, then initialize later, nor can I initialize a static, mutable vector. Would the best course of action be to make the variable in <code>main()</code> and pass a pointer to the functions that need it?</p>\n"}, {"tags": ["rust", "idioms"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1466886266, "post_id": 38032651, "comment_id": 63505476, "body": "Potential duplicate of <a href=\"http://stackoverflow.com/q/29206540/155423\">stackoverflow.com/q/29206540/155423</a> or <a href=\"http://stackoverflow.com/q/29307474/155423\">stackoverflow.com/q/29307474/155423</a>."}, {"owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466886546, "post_id": 38032651, "comment_id": 63505581, "body": "@Shepmaster <a href=\"http://stackoverflow.com/questions/29307474/convert-buffer-u8-to-integer-i32#29307474\">this one</a> seems to provide an alternative to the method used, but do you know if it (1) has additional runtime overhead or (2) is actually idiomatic?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466887195, "post_id": 38032651, "comment_id": 63505739, "body": "It&#39;s certainly idiomatic (byteorder is a very popular crate). Because it&#39;s so popular, I&#39;d expect that it has been optimized thoroughly while still being correct. For example, I&#39;d worry about your original code if the pointer isn&#39;t properly aligned, depending on the architecture."}], "owner": {"reputation": 381, "user_id": 5133242, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/7joIv.jpg?s=128&g=1", "display_name": "Liam", "link": "https://stackoverflow.com/users/5133242/liam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "closed_date": 1466894829, "answer_count": 0, "score": 0, "last_activity_date": 1466889222, "creation_date": 1466886147, "last_edit_date": 1466889222, "question_id": 38032651, "link": "https://stackoverflow.com/questions/38032651/using-pointer-casting-to-change-the-type-of-data-in-memory", "closed_reason": "Duplicate", "title": "Using pointer casting to change the \u201ctype\u201d of data in memory", "body": "<p>This question is about idiomatic Rust.</p>\n\n<p>Let's say I have a file and I want to read a certain number of bytes from it:</p>\n\n<pre><code>use std::io::prelude::*;\nuse std::fs::File;\n\nlet mut f = File::open(\"foo.txt\").unwrap();\nlet mut buffer: [u8;54] = [0; 54];\nf.read_exact(&amp;mut buffer).unwrap();\n</code></pre>\n\n<p>Now I know that the bytes at offset 14 contain a 32-bit integer (not worrying about endianness).</p>\n\n<p>I have been reading the integer the same way that I would in C/C++: by getting a pointer to the first byte that I want and then casting it to the integer type that I want:</p>\n\n<pre><code>let ptr_to_first_byte = &amp;buffer[14] as *const u8;\nlet ptr_to_int = ptr_to_first_byte as *const u32;\n</code></pre>\n\n<p>Or, in one go:</p>\n\n<pre><code>let my_int_ptr: *const u32 = (&amp;buffer[14] as *const u8) as *const u32;\n</code></pre>\n\n<p>Now to access the integer, I can dereference the pointer:</p>\n\n<pre><code>let my_int: u32;\nunsafe {\n    my_int = *ptr_to_int;\n}\n</code></pre>\n\n<p>I am curious if this is the way to idiomatically do this in Rust. Is there a way to access the integer value without using unsafe?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1472032451, "post_id": 38031957, "comment_id": 65585841, "body": "@Shepmaster re-reading the question, I think it&#39;s more related to stackoverflow.com/questions/31276059 instead. AFAICT the crux of the issue is that Karl wants to trim the string in-place, but the .trim() method returns a slice."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1472046446, "post_id": 38031957, "comment_id": 65595747, "body": "@LambdaFairy although <code>trim</code> removes from the left and the right, and most of those answers only allow for trimming from the right."}, {"owner": {"reputation": 586, "user_id": 1851299, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/48f1b68613624f02bb48475995be8289?s=128&d=identicon&r=PG", "display_name": "Karl M. Davis", "link": "https://stackoverflow.com/users/1851299/karl-m-davis"}, "reply_to_user": {"reputation": 11412, "user_id": 617159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/fc43cf2d76ce0981a21c0e5a817f96f5?s=128&d=identicon&r=PG", "display_name": "Lambda Fairy", "link": "https://stackoverflow.com/users/617159/lambda-fairy"}, "edited": false, "score": 0, "creation_date": 1472067810, "post_id": 38031957, "comment_id": 65608937, "body": "@LambdaFairy: Yeah, I don&#39;t have the code in question in front of me right now, but the question and answer you referenced there do seem more correct. Thanks!"}], "owner": {"reputation": 586, "user_id": 1851299, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/48f1b68613624f02bb48475995be8289?s=128&d=identicon&r=PG", "display_name": "Karl M. Davis", "link": "https://stackoverflow.com/users/1851299/karl-m-davis"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 749, "favorite_count": 0, "closed_date": 1513613453, "answer_count": 0, "score": 1, "last_activity_date": 1522748604, "creation_date": 1466881248, "last_edit_date": 1522748604, "question_id": 38031957, "link": "https://stackoverflow.com/questions/38031957/how-do-i-return-a-new-str-slice-from-a-rust-function", "closed_reason": "Duplicate", "title": "How do I return a new &amp;str slice from a Rust function?", "body": "<p>This is a total Rust newbie question here, so I'd greatly appreciate anyone being patient enough to explain this to me. I've got the following code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let api_key = match read_api_key(Path::new(\"../stockfighter-api.key\")) {\n        Ok(key) =&gt; key,\n        Err(_) =&gt; panic!(\"Unable to read key!\"),\n    };\n    println!(\"API Key: {}\", api_key);\n}\n\nfn read_api_key(path: &amp;Path) -&gt; Result&lt;String, io::Error&gt; {\n    let mut f = File::open(path)?;\n    let mut buffer = String::new();\n    f.read_to_string(&amp;mut buffer)?;\n\n    Ok(buffer.trim().to_string())\n}\n</code></pre>\n\n<p>But the final call to <code>.to_string()</code> in my function there seems superfluous to me: why allocate a second <code>String</code> in that function, when there's already one there that I just need part of? However, if I try to rewrite the function like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn read_api_key(path: &amp;Path) -&gt; Result&lt;&amp;str, io::Error&gt; {\n    let mut f = File::open(path)?;\n    let mut buffer = String::new();\n    f.read_to_string(&amp;mut buffer)?;\n\n    Ok(buffer.trim())\n}\n</code></pre>\n\n<p>I end up with the following error:</p>\n\n<pre><code>src/main.rs:31:8: 31:14 error: `buffer` does not live long enough\nsrc/main.rs:31     Ok(buffer.trim())\n                      ^~~~~~\n</code></pre>\n\n<p>And the error makes sense to me, but I don't know how to avoid the second <code>String</code> allocation any other way...</p>\n\n<p>Can anyone walk me through what I'm missing or misunderstanding here?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466877147, "post_id": 38031280, "comment_id": 63502883, "body": "Incidentally, there&#39;s no need for <code>let x: i32 =</code> - that type will be inferred and you can just say <code>let x =</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1466876955, "creation_date": 1466876955, "answer_id": 38031302, "question_id": 38031280, "link": "https://stackoverflow.com/questions/38031280/how-to-ignore-a-member-of-a-struct-like-enum-variant-in-pattern-matching/38031302#38031302", "title": "How to ignore a member of a struct-like enum variant in pattern matching?", "body": "<blockquote>\n  <p>I know I can ignore struct members after a certain point with:</p>\n</blockquote>\n\n<p>The <code>..</code> is not positional. It just means \"all the other fields\":</p>\n\n<pre><code>Foo::Bar { b, .. } =&gt; b * b,\n</code></pre>\n"}], "owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2341, "favorite_count": 1, "accepted_answer_id": 38031302, "answer_count": 1, "score": 9, "last_activity_date": 1466877043, "creation_date": 1466876789, "last_edit_date": 1466877043, "question_id": 38031280, "link": "https://stackoverflow.com/questions/38031280/how-to-ignore-a-member-of-a-struct-like-enum-variant-in-pattern-matching", "title": "How to ignore a member of a struct-like enum variant in pattern matching?", "body": "<p>How do I remove the <code>unused_variables</code> warning from the following code?</p>\n\n<pre><code>pub enum Foo {\n    Bar {\n        a: i32,\n        b: i32,\n        c: i32,\n    },\n    Baz,\n}\n\nfn main() {\n    let myfoo = Foo::Bar { a: 1, b: 2, c: 3 };\n    let x: i32 = match myfoo {\n        Foo::Bar { a, b, c } =&gt; b * b,\n        Foo::Baz =&gt; -1,\n    };\n    assert_eq!(x, 4);\n}\n</code></pre>\n\n<p>I know I can ignore struct members after a certain point with:</p>\n\n<pre><code>Foo::Bar { a, .. } =&gt; // do stuff with 'a'\n</code></pre>\n\n<p>But I can't find documentation anywhere that explains how to ignore individual struct members.</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=7016ceb97f3c088fba1be57a73ff3fee&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Code on Rust Playground</a></p>\n"}, {"tags": ["callback", "rust"], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466852261, "post_id": 38027653, "comment_id": 63495607, "body": "The problem is that <code>Foo</code> is an public user API."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466852474, "post_id": 38027653, "comment_id": 63495669, "body": "You do not need to modify <code>Foo</code>, only closures - arguments of the <code>Bar::new()</code>"}, {"owner": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466853342, "post_id": 38027653, "comment_id": 63495911, "body": "But <code>Foo</code> will be used in other places, to get ref need write <code>&amp;foo.borrow()</code> - that&#39;s a lot. To solve the problem, may using <code>Fn</code>, not <code>FnMut</code>. Then <code>RefCell</code> will be within <code>Foo</code>, but all methods must be called using <code>&amp;self</code> - this crutch will be visible in the user API....."}, {"owner": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466862312, "post_id": 38027653, "comment_id": 63498437, "body": "The second example is not suitable, because will be other objects that will need to be edited in callbacks. I think that the function signature is <code>fn bar(pattern: Foo, ..)</code>, i.e. <code>struct Foo(u32); fn bar(Foo(x): Foo) { println!(&quot;{}&quot;, x) }</code> is completely correct. But in the method syntax <code>self</code> is reserved. All of the following are true: <code>fn bar(self: Self)</code>, <code>fn bar(self: &amp;mut Self)</code>, <code>fn bar(mut self: &amp;mut Self)</code>, <code>fn bar(self: Box&lt;Self&gt;)</code>...  Why work with <code>Box</code>? Maybe to this pattern will turn unsafe magic? Or hide <code>RefCell</code>?"}, {"owner": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466864733, "post_id": 38027653, "comment_id": 63499117, "body": "In method syntax <code>&amp;mut</code> self makes borrowing. The std has a trait <code>std::borrow::BorrowMut</code>, which theoretically is possible to implement, but I failed spoof lifetime."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "edited": false, "score": 0, "creation_date": 1466873213, "post_id": 38027653, "comment_id": 63501667, "body": "It seems I can do nothing more to help. You would be better to create a new code example that better reflects your problem. Or create a new question linked to this."}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 4, "last_activity_date": 1541777078, "last_edit_date": 1541777078, "creation_date": 1466851849, "answer_id": 38027653, "question_id": 38027461, "link": "https://stackoverflow.com/questions/38027461/how-can-callbacks-with-captured-mutable-variables-be-treated-like-normal-mutable/38027653#38027653", "title": "How can callbacks with captured mutable variables be treated like normal mutable borrows?", "body": "<p>You can use <a href=\"http://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>:</p>\n\n<pre><code>let foo = RefCell::new(Foo);\n\n{\n    let bar1 = Bar::new(|| foo.borrow_mut().modify());\n    let bar2 = Bar::new(|| foo.borrow_mut().modify());\n    init(&amp;mut [bar1, bar2]);\n}\n\nlet mut foo = foo.into_inner(); // extract foo to use in external API\n</code></pre>\n\n<p>Be careful with <code>borrow_mut()</code>, it panics if the value is currently borrowed.</p>\n\n<hr>\n\n<p>If you can change <code>Bar</code> and <code>init()</code>, you can pass value <code>foo</code> to the <code>init()</code> separate from the method <code>modify()</code>:</p>\n\n<pre><code>struct Bar&lt;'a&gt; {\n    callback: Box&lt;FnMut(&amp;mut Foo) + 'a&gt;,\n}\nimpl&lt;'a&gt; Bar&lt;'a&gt; {\n    fn new&lt;F: FnMut(&amp;mut Foo) + 'a&gt;(f: F) -&gt; Bar&lt;'a&gt; {\n        Bar {\n            callback: Box::new(f),\n        }\n    }\n}\n\nfn init(bars: &amp;mut [Bar], arg: &amp;mut Foo) {\n    for b in bars {\n        (*b.callback)(arg);\n    }\n}\n</code></pre>\n\n\n\n<pre><code>let mut bar1 = Bar::new(|x| x.modify());\nlet mut bar2 = Bar::new(Foo::modify); // you can pass it without closure\ninit(&amp;mut [bar1, bar2], &amp;mut foo);\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 6511390, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9052efcc50fb3e8a069362f24799af60?s=128&d=identicon&r=PG&f=1", "display_name": "Zibaha", "link": "https://stackoverflow.com/users/6511390/zibaha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 2, "answer_count": 1, "score": 4, "last_activity_date": 1541777078, "creation_date": 1466850650, "last_edit_date": 1541776971, "question_id": 38027461, "link": "https://stackoverflow.com/questions/38027461/how-can-callbacks-with-captured-mutable-variables-be-treated-like-normal-mutable", "title": "How can callbacks with captured mutable variables be treated like normal mutable borrows?", "body": "<p><code>Foo</code> can be modified using the method <code>.modify()</code>:</p>\n\n<pre><code>struct Foo;\nimpl Foo {\n    fn modify(&amp;mut self) {}\n}\n</code></pre>\n\n<p><code>Bar</code> stores a callback:</p>\n\n<pre><code>struct Bar&lt;'a&gt; {\n    callback: Box&lt;FnMut() + 'a&gt;,\n}\nimpl&lt;'a&gt; Bar&lt;'a&gt; {\n    fn new&lt;F: FnMut() + 'a&gt;(f: F) -&gt; Bar&lt;'a&gt; {\n        Bar {\n            callback: Box::new(f),\n        }\n    }\n}\n</code></pre>\n\n<p><code>init()</code> takes a slice of <code>Bar</code> and executes their callbacks:</p>\n\n<pre><code>fn init(bars: &amp;mut [Bar]) {\n    for b in bars {\n        (*b.callback)();\n    }\n}\n</code></pre>\n\n<p>And now the most interesting:</p>\n\n<p>Changing <code>Foo</code> in a loop works fine; on each iteration of the loop <code>foo</code> is mutably borrowed and <code>.modify()</code> is called:</p>\n\n<pre><code>fn main() {\n    let mut foo = Foo;\n\n    for _ in 0..10 {\n        foo.modify();\n    }\n}\n</code></pre>\n\n<p>Changing <code>Foo</code> inside of the callbacks does not work:</p>\n\n<pre><code>fn main() {\n    let mut foo = Foo;\n\n    let mut bar1 = Bar::new(|| foo.modify());\n    let mut bar2 = Bar::new(|| foo.modify());\n\n    init(&amp;mut [bar1, bar2]);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=dc51a0408bd67eaf9f9500b5c0cfc536&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Try it on the playground</a>, \nit has an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `foo` as mutable more than once at a time\n  --&gt; src/main.rs:27:29\n   |\n26 |     let mut bar1 = Bar::new(|| foo.modify());\n   |                             -- --- previous borrow occurs due to use of `foo` in closure\n   |                             |\n   |                             first mutable borrow occurs here\n27 |     let mut bar2 = Bar::new(|| foo.modify());\n   |                             ^^ --- borrow occurs due to use of `foo` in closure\n   |                             |\n   |                             second mutable borrow occurs here\n...\n30 | }\n   | - first borrow ends here\n</code></pre>\n\n<p>How to implement a similar guarantee for item 2? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 327, "user_id": 1954355, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/9316a697f30054e3672ac1c0fb7813be?s=128&d=identicon&r=PG", "display_name": "graeme", "link": "https://stackoverflow.com/users/1954355/graeme"}, "edited": false, "score": 0, "creation_date": 1466918389, "post_id": 38025554, "comment_id": 63510904, "body": "Ooh, associated constants, those are exactly what I want. I figured that such a thing wasn&#39;t possible. I was thinking about having the enum, and then redefining all the enum values as well as the duplicates as constants, maybe inside a mod block."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 14, "last_activity_date": 1520895663, "last_edit_date": 1520895663, "creation_date": 1466834889, "answer_id": 38025554, "question_id": 38025330, "link": "https://stackoverflow.com/questions/38025330/multiple-enum-variants-with-same-value/38025554#38025554", "title": "Multiple enum variants with same value?", "body": "<p><code>enum</code> variants <em>cannot</em> have the same tag value as other variants. As of Rust 1.20, you can use associated constants. This lets you use <code>Nums::FIRST_NUM</code>, <em>etc.</em></p>\n\n<pre><code>pub enum Nums {\n    Num1 = 0,\n    Num2 = 1,\n    Num3 = 2,\n    Num4 = 3,\n    Num5 = 4,\n}\n\nimpl Nums {\n    pub const FIRST_NUM: Nums = Nums::Num1;\n    pub const MIDDLE_NUM: Nums = Nums::Num3;\n    pub const LAST_NUM: Nums = Nums::Num5;\n}\n</code></pre>\n\n<p>Before that, you will need to use constants:</p>\n\n<pre><code>pub const FIRST_NUM: Nums = Nums::Num1;\npub const MIDDLE_NUM: Nums = Nums::Num3;\npub const LAST_NUM: Nums = Nums::Num5;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1520895755, "last_edit_date": 1520895755, "creation_date": 1466869561, "answer_id": 38030163, "question_id": 38025330, "link": "https://stackoverflow.com/questions/38025330/multiple-enum-variants-with-same-value/38030163#38030163", "title": "Multiple enum variants with same value?", "body": "<p>You can also add methods to the <code>enum</code>:</p>\n\n<pre><code>pub enum Nums {\n    Num1 = 0,\n    Num2 = 1,\n    Num3 = 2,\n    Num4 = 3,\n    Num5 = 4,\n}\n\nimpl Nums {\n    pub fn first()  -&gt; Self { Nums::Num1 }\n    pub fn middle() -&gt; Self { Nums::Num3 }\n    pub fn last()   -&gt; Self { Nums::Num5 }\n}\n\nfn main() {\n    println!(\"{}\", Nums::first() as u8);\n}\n</code></pre>\n"}], "owner": {"reputation": 327, "user_id": 1954355, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/9316a697f30054e3672ac1c0fb7813be?s=128&d=identicon&r=PG", "display_name": "graeme", "link": "https://stackoverflow.com/users/1954355/graeme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1327, "favorite_count": 0, "accepted_answer_id": 38025554, "answer_count": 2, "score": 5, "last_activity_date": 1520895755, "creation_date": 1466832688, "question_id": 38025330, "link": "https://stackoverflow.com/questions/38025330/multiple-enum-variants-with-same-value", "title": "Multiple enum variants with same value?", "body": "<p>What is the best way to have multiple enum variants that are the same value? This is an example of what I would like, except that Rust doesn't like it.</p>\n\n<pre><code>pub enum Nums {\n    Num1            = 0,\n    Num2            = 1,\n    Num3            = 2,\n    Num4            = 3,\n    Num5            = 4,\n\n    FirstNum        = 0,\n    MiddleNum       = 2,\n    LastNum         = 4,\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 4, "last_activity_date": 1593526552, "last_edit_date": 1593526552, "creation_date": 1466819017, "answer_id": 38024188, "question_id": 38024059, "link": "https://stackoverflow.com/questions/38024059/how-can-i-specialize-a-method-for-a-specific-generic-type/38024188#38024188", "title": "How can I specialize a method for a specific generic type?", "body": "<p>You are trying to specialize a method defined in an inherent <code>impl</code>, rather than specializing a method defined in a trait. This appears to not be supported at the moment, even after adding <code>default</code> to the &quot;non special&quot; <code>length</code> method. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">RFC 1210</a> mentions inherent <code>impl</code>s as a possible extension, which I understand as not being considered for implementation at the moment.</p>\n<p>As a workaround, consider moving your method to a trait. This requires specialization to be enabled to work, so you'll need to use a nightly compiler until the feature is stabilized.</p>\n<p>Instead of defining the default implementation on the trait, we define it in the general <code>impl</code>. We need to add the <code>default</code> contextual keyword to that function.</p>\n<pre><code>#![feature(specialization)]\n\ntrait VectorExt&lt;T&gt;\nwhere\n    T: Float,\n{\n    fn length(&amp;self) -&gt; T;\n}\n\nimpl&lt;T, Type&gt; VectorExt&lt;T&gt; for Vector&lt;T, Type&gt;\nwhere\n    T: Float,\n{\n    default fn length(&amp;self) -&gt; T {\n        println!(&quot;NON SPECIAL&quot;);\n        T::one()\n    }\n}\n\nimpl&lt;T&gt; VectorExt&lt;T&gt; for Vector&lt;T, Unit&gt;\nwhere\n    T: Float,\n{\n    fn length(&amp;self) -&gt; T {\n        println!(&quot;SPECIAL&quot;);\n        T::one()\n    }\n}\n\n// This `impl` is not strictly necessary,\n// but it will let users of your type\n// use the `length` method\n// without having to `use` the `VectorExt` trait.\nimpl&lt;T, Type&gt; Vector&lt;T, Type&gt;\nwhere\n    T: Float,\n{\n    fn length(&amp;self) -&gt; T\n    where\n        Self: VectorExt&lt;T&gt;,\n    {\n        VectorExt::&lt;T&gt;::length(self)\n        // can also be written as: &lt;Self as VectorExt&lt;T&gt;&gt;::length(self)\n    }\n}\n</code></pre>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=da0dbf4dcecfc5bfa64f24499bcf851b\" rel=\"nofollow noreferrer\">playground</a></p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 458, "favorite_count": 0, "accepted_answer_id": 38024188, "answer_count": 1, "score": 2, "last_activity_date": 1593526552, "creation_date": 1466817477, "last_edit_date": 1593526313, "question_id": 38024059, "link": "https://stackoverflow.com/questions/38024059/how-can-i-specialize-a-method-for-a-specific-generic-type", "title": "How can I specialize a method for a specific generic type?", "body": "<p>I want to define methods for <code>Untyped</code> and <code>Unit</code> or basically every type, but I want to specialize a few methods just for <code>Unit</code>.</p>\n<p>The problem is that Rust doesn't allow two implementations here. I am using Rust 1.9, do I need to enable specialzation or is this just not possible?</p>\n<pre><code>use num::Float; // 0.2.1\nuse std::marker::PhantomData;\n\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Untyped;\n\n#[derive(Copy, Clone, Eq, PartialEq)]\npub struct Unit;\n\nstruct Vector&lt;T, Type&gt; {\n    data: [T; 3],\n    _m: PhantomData&lt;Type&gt;,\n}\n\nimpl&lt;T&gt; Vector&lt;T, Unit&gt;\nwhere\n    T: Float,\n{\n    fn length(&amp;self) -&gt; T {\n        println!(&quot;SPECIAL&quot;);\n        T::one()\n    }\n}\n\nimpl&lt;T, Type&gt; Vector&lt;T, Type&gt;\nwhere\n    T: Float,\n{\n    fn length(&amp;self) -&gt; T {\n        println!(&quot;NON SPECIAL&quot;);\n        T::one()\n    }\n}\n\nfn main() {\n    let v = Vector::&lt;f32, Untyped&gt; {\n        data: [1., 2., 3.],\n        _m: PhantomData,\n    };\n    let v1 = Vector::&lt;f32, Unit&gt; {\n        data: [1., 2., 3.],\n        _m: PhantomData,\n    };\n    let l = v.length();\n    let l1 = v1.length();\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0592]: duplicate definitions with name `length`\n  --&gt; src/main.rs:19:5\n   |\n19 | /     fn length(&amp;self) -&gt; T {\n20 | |         println!(&quot;SPECIAL&quot;);\n21 | |         T::one()\n22 | |     }\n   | |_____^ duplicate definitions for `length`\n...\n29 | /     fn length(&amp;self) -&gt; T {\n30 | |         println!(&quot;NON SPECIAL&quot;);\n31 | |         T::one()\n32 | |     }\n   | |_____- other definition for `length`\n</code></pre>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466840122, "post_id": 38023871, "comment_id": 63492848, "body": "Unfortunately, .entry() isn&#39;t right for what this function needs to do. I&#39;m aware of the non-lexical scopes issue, and usually I can work around it, but in this case, I haven&#39;t been able to come up with something that doesn&#39;t do a bunch of duplicated work, no matter how ugly the workaround is... Also usually adding a scope works around the issue, but here it doesn&#39;t; even moving one borrow to another function doesn&#39;t help."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 19, "last_activity_date": 1558142302, "last_edit_date": 1558142302, "creation_date": 1466876184, "answer_id": 38031183, "question_id": 38023871, "link": "https://stackoverflow.com/questions/38023871/returning-a-reference-from-a-hashmap-or-vec-causes-a-borrow-to-last-beyond-the-s/38031183#38031183", "title": "Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it&#39;s in?", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rust/issues/21906#issuecomment-73296543\" rel=\"noreferrer\">known issue</a> that will be solved by <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a>, which is itself predicated on <a href=\"http://blog.rust-lang.org/2016/04/19/MIR.html\" rel=\"noreferrer\">MIR</a>. If it so happens that you are inserting to the same key that you are looking up, I'd encourage you to <a href=\"https://stackoverflow.com/q/28512394/155423\">use the entry API</a> instead.</p>\n\n<p>You can add a smidgen of inefficiency to work around this for now. </p>\n\n<h1><code>HashMap</code></h1>\n\n<p>The general idea is to add a boolean that tells you if a value was present or not. This boolean does not hang on to a reference, so there is no borrow:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn do_stuff(map: &amp;mut BTreeMap&lt;i32, i32&gt;, key: i32) -&gt; Option&lt;&amp;i32&gt; {\n    if map.contains_key(&amp;key) {\n        return map.get(&amp;key);\n    }\n\n    map.insert(0, 0);\n    None\n}\n\nfn main() {\n    let mut map = BTreeMap::new();\n    do_stuff(&amp;mut map, 42);\n    println!(\"{:?}\", map)\n}\n</code></pre>\n\n<h1><code>Vec</code></h1>\n\n<p>Similar cases can be solved by using the index of the element instead of the reference. Like the case above, this can introduce a bit of inefficiency due to the need to check the slice bounds again.</p>\n\n<p>Instead of</p>\n\n<pre><code>fn find_or_create_five&lt;'a&gt;(container: &amp;'a mut Vec&lt;u8&gt;) -&gt; &amp;'a mut u8 {\n    match container.iter_mut().find(|e| **e == 5) {\n        Some(element) =&gt; element,\n        None =&gt; {\n            container.push(5);\n            container.last_mut().unwrap()\n        }\n    }\n}\n</code></pre>\n\n<p>You can write:</p>\n\n<pre><code>fn find_or_create_five&lt;'a&gt;(container: &amp;'a mut Vec&lt;u8&gt;) -&gt; &amp;'a mut u8 {\n    let idx = container.iter().position(|&amp;e| e == 5).unwrap_or_else(|| {\n        container.push(5);\n        container.len() - 1    \n    });\n    &amp;mut container[idx]\n}\n</code></pre>\n\n<h1>Non-Lexical Lifetimes</h1>\n\n<p>These types of examples are one of the primary cases in <a href=\"https://rust-lang.github.io/rfcs/2094-nll.html\" rel=\"noreferrer\">the NLL RFC</a>: <a href=\"https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions\" rel=\"noreferrer\">Problem case #3: conditional control flow across functions</a>.</p>\n\n<p>Unfortunately, this specific case isn't ready as of Rust 1.34. If you opt in to the experimental <code>-Zpolonius</code> feature in nightly, each of these original examples compile as-is:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn do_stuff(map: &amp;mut BTreeMap&lt;i32, i32&gt;, key: i32) -&gt; Option&lt;&amp;i32&gt; {\n    if let Some(key) = map.get(&amp;key) {\n        return Some(key);\n    }\n\n    map.insert(0, 0);\n    None\n}\n</code></pre>\n\n<pre><code>fn find_or_create_five(container: &amp;mut Vec&lt;u8&gt;) -&gt; &amp;mut u8 {\n    match container.iter_mut().find(|e| **e == 5) {\n        Some(element) =&gt; element,\n        None =&gt; {\n            container.push(5);\n            container.last_mut().unwrap()\n        }\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/q/47395171/155423\">How to update-or-insert on a Vec?</a></p>\n\n<p>This is the same problem <em>without</em> returning the reference, which does work with the implementation of NLL available in Rust 1.32.</p></li>\n<li><p><a href=\"https://stackoverflow.com/q/50519147/155423\">Double mutable borrow error in a loop happens even with NLL on</a></p>\n\n<p>This problem but in a slightly more complicated case.</p></li>\n<li><p><a href=\"https://stackoverflow.com/q/50440074/155423\">When is it necessary to circumvent Rust&#39;s borrow checker?</a></p>\n\n<p>The ultimate escape hatch.</p></li>\n</ul>\n"}], "owner": {"reputation": 748, "user_id": 91909, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/546f20e4042e433d9bcbf0dc6c1a1cf5?s=128&d=identicon&r=PG", "display_name": "Bill Fraser", "link": "https://stackoverflow.com/users/91909/bill-fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3500, "favorite_count": 8, "accepted_answer_id": 38031183, "answer_count": 1, "score": 23, "last_activity_date": 1558142302, "creation_date": 1466815149, "last_edit_date": 1549996790, "question_id": 38023871, "link": "https://stackoverflow.com/questions/38023871/returning-a-reference-from-a-hashmap-or-vec-causes-a-borrow-to-last-beyond-the-s", "title": "Returning a reference from a HashMap or Vec causes a borrow to last beyond the scope it&#39;s in?", "body": "<p>I've got a persistent compile error where Rust complains that I have an immutable borrow while I'm trying to mutably borrow, but the immutable borrow is from another scope, and I'm not bringing anything across from it.</p>\n\n<p>I have some code that checks for a value in a map, and if it's present, returns it, otherwise it needs to mutate the map in various ways. The problem is that I can't seem to find a way to get Rust let me do both, even though the two operations are totally separate.</p>\n\n<p>Here's some nonsensical code that follows the same structure as my code and exhibits the problem:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\nfn do_stuff(map: &amp;mut BTreeMap&lt;i32, i32&gt;, key: i32) -&gt; Option&lt;&amp;i32&gt; {\n    // extra scope in vain attempt to contain the borrow\n    {\n        // borrow immutably\n        if let Some(key) = map.get(&amp;key) {\n            return Some(key);\n        }\n    }\n\n    // now I'm DONE with the immutable borrow, but rustc still thinks it's borrowed\n\n    map.insert(0, 0); // borrow mutably, which errors\n    None\n}\n</code></pre>\n\n<p>This errors out with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n  --&gt; src/lib.rs:14:5\n   |\n3  | fn do_stuff(map: &amp;mut BTreeMap&lt;i32, i32&gt;, key: i32) -&gt; Option&lt;&amp;i32&gt; {\n   |                  - let's call the lifetime of this reference `'1`\n...\n7  |         if let Some(key) = map.get(&amp;key) {\n   |                            --- immutable borrow occurs here\n8  |             return Some(key);\n   |                    --------- returning this value requires that `*map` is borrowed for `'1`\n...\n14 |     map.insert(0, 0); // borrow mutably, which errors\n   |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n</code></pre>\n\n<p>This doesn't make any sense to me. How does the immutable borrow outlive that scope?! One branch of that <code>match</code> exits the function via <code>return</code>, and the other does nothing and leaves the scope.</p>\n\n<p>I've seen this happen before where I was mistakenly smuggling the borrow out of the scope in some other variable, but that's not the case here!</p>\n\n<p>True, the borrow is escaping the scope via the <code>return</code> statement, but it's ridiculous that that blocks borrowing farther down in the function -- the program cannot possibly return AND keep going! If I return something else there, the error goes away, so I think this is what the borrow checker is getting hung up on. This feels like a bug to me.</p>\n\n<p>Unfortunately, I've been unable to find any way to rewrite this without hitting the same error, so it's a particularly nasty bug if that's the case.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 482, "user_id": 1201945, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/953c11442115a18da0b9d841e17620c1?s=128&d=identicon&r=PG", "display_name": "hannu40k", "link": "https://stackoverflow.com/users/1201945/hannu40k"}, "edited": false, "score": 0, "creation_date": 1537109628, "post_id": 38023576, "comment_id": 91655200, "body": "For others stumbling on this issue, I recommend reading <a href=\"https://aochagavia.github.io/blog/exploring-rusts-unspecified-drop-order/\" rel=\"nofollow noreferrer\">aochagavia.github.io/blog/&hellip;</a>"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 10, "last_activity_date": 1537109625, "last_edit_date": 1537109625, "creation_date": 1466811901, "answer_id": 38023576, "question_id": 38023291, "link": "https://stackoverflow.com/questions/38023291/does-not-live-long-enough-error-in-same-function/38023576#38023576", "title": "&quot;does not live long enough&quot; error in same function", "body": "<p>Variables declared in the same block are dropped in the reverse order that they are declared.  In your code, <code>bar</code> is dropped before <code>foobar</code>:</p>\n\n<pre><code>fn main() {\n    let mut foobar = vec![\"foo\"]; // &lt;---------| 0\n    let bar = \"bar\".to_string();  // &lt;--| 1    |\n    foobar.push(&amp;bar);            //    | bar  | foobar\n                                  // &lt;--|      |\n                                  // &lt;---------|\n    // In the error message\n    // 0 is called \"block suffix following statement 0\", and\n    // 1 is called \"block suffix following statement 1\"\n}\n</code></pre>\n\n<p>You are pushing a <em>reference</em> to <code>bar</code> in <code>foobar</code>, so you have to ensure that <code>bar</code> lives at least as long as <code>foobar</code>. But because <code>bar</code> is declared after <code>foobar</code>, <code>bar</code>'s lifetime is actually shorter than <code>foobar</code>'s, which means that <code>foobar</code> contains a dangling reference for a short moment.</p>\n\n<p>To make the code compile, declare <code>bar</code> before <code>foobar</code>:</p>\n\n<pre><code>fn main() {\n    let bar = \"bar\".to_string();\n    let mut foobar = vec![\"foo\"];\n    foobar.push(&amp;bar);\n}\n</code></pre>\n\n<p>or opt in to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2094-nll.md\" rel=\"nofollow noreferrer\">non-lexical lifetimes</a>:</p>\n\n<pre><code>#![feature(nll)]\n\nfn main() {\n    let mut foobar = vec![\"foo\"];\n    let bar = \"bar\".to_string();\n    foobar.push(&amp;bar);\n}\n</code></pre>\n\n<p>Although this still has a dangling reference, it doesn't matter because dropping a reference does nothing; the <code>Vec</code> doesn't need to use the value of the references it contains when it's dropped.</p>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 261, "favorite_count": 1, "accepted_answer_id": 38023576, "answer_count": 1, "score": 6, "last_activity_date": 1537112059, "creation_date": 1466809558, "last_edit_date": 1537112059, "question_id": 38023291, "link": "https://stackoverflow.com/questions/38023291/does-not-live-long-enough-error-in-same-function", "title": "&quot;does not live long enough&quot; error in same function", "body": "<p>I expected this code to work because all bindings are in the same scope:</p>\n\n<pre><code>fn main() {\n    let mut foobar = vec![\"foo\"];\n    let bar = \"bar\".to_string();\n    foobar.push(&amp;bar);\n}\n</code></pre>\n\n<p>But I am getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `bar` does not live long enough\n --&gt; baz.rs:4:18\n  |&gt;\n4 |&gt;     foobar.push(&amp;bar);\n  |&gt;                  ^^^\nnote: reference must be valid for the block suffix following statement 0 at 2:33...\n --&gt; baz.rs:2:34\n  |&gt;\n2 |&gt;     let mut foobar = vec![\"foo\"];\n  |&gt;                                  ^\nnote: ...but borrowed value is only valid for the block suffix following statement 1 at 3:32\n --&gt; baz.rs:3:33\n  |&gt;\n3 |&gt;     let bar = \"bar\".to_string();\n  |&gt;                                 ^\n\nerror: aborting due to previous error\n</code></pre>\n"}, {"tags": ["generics", "rust", "slice", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466785208, "post_id": 38015506, "comment_id": 63477741, "body": "It doesn&#39;t matter that it&#39;s a slice or a vec or a hashmap or a string or ...; if the trait and type aren&#39;t owned by you, you can&#39;t implement one for the other."}, {"owner": {"reputation": 2072, "user_id": 295615, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c45d42c18f8ad23051712d837788f8c2?s=128&d=identicon&r=PG", "display_name": "Alexander Battisti", "link": "https://stackoverflow.com/users/295615/alexander-battisti"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466787416, "post_id": 38015506, "comment_id": 63478859, "body": "so the accepted answer for a possible workaround by wrapping the types in a new struct type in &quot;How do I implement a trait I don&#39;t own for a type I don&#39;t own?&quot; is wrong?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466787718, "post_id": 38015506, "comment_id": 63479046, "body": "I don&#39;t understand how that conclusion was arrived at. Wrapping one type in another (the <i>newtype</i> pattern) means that <i>you own the wrapping type</i>. You can implement a trait you don&#39;t own for a type you do own."}, {"owner": {"reputation": 2072, "user_id": 295615, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c45d42c18f8ad23051712d837788f8c2?s=128&d=identicon&r=PG", "display_name": "Alexander Battisti", "link": "https://stackoverflow.com/users/295615/alexander-battisti"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466788894, "post_id": 38015506, "comment_id": 63479596, "body": "My question is about syntax only. How does the signature for the trait implementation look, when using the new type pattern for wrapping a slice type in the context of wanting to implement the Sub trait."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466789231, "post_id": 38015506, "comment_id": 63479756, "body": "Interesting - this question, as currently written, does not make that very clear. I would encourage you to ask a new question along the lines of &quot;How do I create a newtype for a slice&quot;. Feel free to include the context from this question (&quot;In order to implement <code>Sub</code> ...&quot;). Make sure you include your attempt(s) at getting the syntax to work. I&#39;m sure that question will get answered quickly."}, {"owner": {"reputation": 2072, "user_id": 295615, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c45d42c18f8ad23051712d837788f8c2?s=128&d=identicon&r=PG", "display_name": "Alexander Battisti", "link": "https://stackoverflow.com/users/295615/alexander-battisti"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466869870, "post_id": 38015506, "comment_id": 63500639, "body": "ok, thank you for the tip!"}], "owner": {"reputation": 2072, "user_id": 295615, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/c45d42c18f8ad23051712d837788f8c2?s=128&d=identicon&r=PG", "display_name": "Alexander Battisti", "link": "https://stackoverflow.com/users/295615/alexander-battisti"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 302, "favorite_count": 0, "closed_date": 1466777781, "answer_count": 0, "score": 0, "last_activity_date": 1466784352, "creation_date": 1466777537, "last_edit_date": 1495542779, "question_id": 38015506, "link": "https://stackoverflow.com/questions/38015506/implementing-sub-trait-for-slices", "closed_reason": "Duplicate", "title": "Implementing Sub trait for slices", "body": "<p>Is it possible to implement the <code>std::ops::Sub</code> trait for slices in Rust? And if so how would I do that?</p>\n\n<p>I tried the following: </p>\n\n<pre><code>use std::ops::Sub;\n\nimpl &lt;'a, 'b, T&gt; Sub&lt;&amp;'a [T]&gt; for &amp;'b [T] {\n    type Output = Vec&lt;T&gt;;\n    fn sub(self, rhs: &amp;[T]) -&gt; Vec&lt;T&gt; {\n        difference(self, rhs)\n    }\n}\n</code></pre>\n\n<p>with <code>difference</code> having the signature:</p>\n\n<pre><code>difference&lt;T: PartialEq + Copy&gt;(xs: &amp;[T], ys: &amp;[T]) -&gt; Vec&lt;T&gt;\n</code></pre>\n\n<p>compiling it results in the following error message:</p>\n\n<pre><code>error: type parameter `T` must be used as the type parameter for some local type \n    (e.g. `MyStruct&lt;T&gt;`); only traits defined in the current crate \n    can be implemented for a type parameter [E0210]\nimpl &lt;'a, 'b, T&gt; Sub&lt;&amp;'a [T]&gt; for &amp;'b [T] {\n^\n</code></pre>\n\n<p>running then <code>rust --explain E0210</code> to get further information I can kinda understand the problem, but I am confused about how the syntax would look like when using the <code>struct MyType&lt;T&gt;(T);</code> workaround described in the detailed explanation.</p>\n\n<p>In difference to the question found <a href=\"https://stackoverflow.com/questions/25413201/how-do-i-implement-a-trait-i-dont-own-for-a-type-i-dont-own\">How do I implement a trait I don't own for a type I don't own?</a> my problem is I do not want this for vector types, but for slice types for which the syntax seems to be different enough that this answer is not really helpful.</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1466781579, "last_edit_date": 1466781579, "creation_date": 1466778380, "answer_id": 38015772, "question_id": 38015498, "link": "https://stackoverflow.com/questions/38015498/how-do-i-create-a-builder-that-takes-a-type-that-implements-asref-for-a-slice-of/38015772#38015772", "title": "How do I create a builder that takes a type that implements AsRef for a slice of `&amp;str`?", "body": "<p>The code tries to transfer ownership of the array to the function <code>abc([])</code>, take a reference to the array (<code>s.as_ref()</code>), then it <strong>throws away the array</strong>, which would leave a pointer to undefined memory. Rust does not allow you to do that.</p>\n\n<blockquote>\n  <p>I did it: <code>self.s = Some(unsafe { std::mem::transmute(s.as_ref()) });</code></p>\n</blockquote>\n\n<p>This is a <strong>very bad idea</strong>. As mentioned above, you now have a reference to an array that no longer exists. That memory is allowed to have <em>anything</em> placed there in the future, and accessing the pointer will, in the <strong>best</strong> case, cause your program to crash, but could also continue executing but with nonsense data.</p>\n\n<p>Only use <code>unsafe</code> code when you understand all the consequences.</p>\n"}, {"comments": [{"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466781415, "post_id": 38016124, "comment_id": 63475524, "body": "How to impl <code>AsRef</code> for <code>str</code>? <code>impl&lt;&#39;a, S: AsRef&lt;[AsRef&lt;str&gt;]&gt;&gt; Builder&lt;S&gt; {</code> don&#39;t work."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466781762, "post_id": 38016124, "comment_id": 63475742, "body": "I considered suggesting something like this, but since <code>s</code> is wrapped in an <code>Option</code> it seems like the builder should be able to be called without <code>abc</code>. Try that, and you&#39;ll see the type cannot be inferred. You could make a default value of <code>S</code> or start with an empty array or something. If you <i>always</i> need to call <code>abc</code>, then it should be provided as part of the builder&#39;s constructor and all of this is easier."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466783284, "post_id": 38016124, "comment_id": 63476620, "body": "@Lupe Can you clarify what you want with an example?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466783585, "post_id": 38016124, "comment_id": 63476792, "body": "Would suggest a <code>match</code> and <code>Some(ref s)</code>.  Also think OP wants to pass a <code>Vec&lt;String&gt;</code>."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466783781, "post_id": 38016124, "comment_id": 63476905, "body": "@Shepmaster Thanks for the observation. I updated the answer. One limitation is that the fields of <code>Builder</code> must be copied one by one. There was a thread in users.rust-lang.org (I think) about the impossibility of doing <code>A{ x = 2, ..a }</code> if <code>a: A</code> and <code>x</code> with different generic type, but I didn&#39;t find it now."}, {"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466785998, "post_id": 38016124, "comment_id": 63478168, "body": "@malbarbo I want to call the function like this: <code>abc([String::from(&quot;123&quot;), &quot;321&quot;])</code>. Does this mean that the implement <code>AsRef</code> to <code>str</code> will have to re-create the array of references? Or it is possible to do it at compile time?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1466786403, "post_id": 38016124, "comment_id": 63478399, "body": "Arrays in Rust are homogeneous, you cannot have an array with  <code>String</code>s and <code>&amp;str</code>s. What you want cannot be done at compile time, not with arrays."}, {"owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466787037, "post_id": 38016124, "comment_id": 63478694, "body": "@malbarbo <code>String::as_ref()</code> == <code>&amp;str</code>. That is, the array will contain only <code>&amp;str</code>."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "edited": false, "score": 0, "creation_date": 1466790435, "post_id": 38016124, "comment_id": 63480369, "body": "@Lupe You cannot write <code>[String::from(&quot;123&quot;), &quot;321&quot;]</code> anywhere in the code, it will not compile. If you have to mix <code>String</code>&#39;s with <code>&amp;str</code>&#39;s in an array you have three options: 1) get <code>&amp;str</code> from the <code>String</code> (<code>[&amp;s, &quot;321&quot;]</code>). 2) create a <code>String</code> from the <code>&amp;str</code> (<code>[s, &quot;321&quot;.to_string()]</code>). 3) create a <code>Cow&lt;str&gt;</code> for each <code>String</code> and <code>&amp;str</code> (<code>[Cow::Owned(s), Cow::Borrowed(&quot;321&quot;)]</code>)."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1466783947, "last_edit_date": 1466783947, "creation_date": 1466779398, "answer_id": 38016124, "question_id": 38015498, "link": "https://stackoverflow.com/questions/38015498/how-do-i-create-a-builder-that-takes-a-type-that-implements-asref-for-a-slice-of/38016124#38016124", "title": "How do I create a builder that takes a type that implements AsRef for a slice of `&amp;str`?", "body": "<p>A workaround is to make <code>Builder</code> be generic over <code>S</code> and be the owner of parameter <code>s</code>:</p>\n\n<pre><code>struct Builder&lt;S&gt; {\n    s: Option&lt;S&gt;,\n}\n\nimpl&lt;'a&gt; Builder&lt;[&amp;'a str; 0]&gt; {\n    fn new() -&gt; Self {\n        Builder { s: None }\n    }\n}\n\nimpl&lt;'a, S: AsRef&lt;[&amp;'a str]&gt;&gt; Builder&lt;S&gt; {\n    fn abc&lt;T: AsRef&lt;[&amp;'a str]&gt;&gt;(self, s: T) -&gt; Builder&lt;T&gt; {\n        Builder {\n            // copy other fields, x: self.x, ...\n            // and replace s\n            s: Some(s)\n        }\n    }\n\n    fn print_s(&amp;self) {\n        // example of using s\n        if let Some(ref s) = self.s {\n            println!(\"{:?}\", s.as_ref()); // S::as_ref\n        } else {\n            println!(\"None\");\n        }\n    }\n}\n</code></pre>\n\n<p>Now <code>abc</code> can be called with different parameter types:</p>\n\n<pre><code>fn main() {\n    Builder::new().print_s();\n    Builder::new().abc([]).print_s();\n    Builder::new().abc([\"a\", \"b\"]).print_s();\n    Builder::new().abc(&amp;[\"a\", \"b\", \"c\"]).print_s();\n    Builder::new().abc(vec![\"a\"]).print_s();\n}\n</code></pre>\n"}], "owner": {"reputation": 15, "user_id": 5555566, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/065e46380a29be3a076e535b0dc1bb70?s=128&d=identicon&r=PG&f=1", "display_name": "Lupe", "link": "https://stackoverflow.com/users/5555566/lupe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 59, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1466783947, "creation_date": 1466777526, "last_edit_date": 1466781842, "question_id": 38015498, "link": "https://stackoverflow.com/questions/38015498/how-do-i-create-a-builder-that-takes-a-type-that-implements-asref-for-a-slice-of", "title": "How do I create a builder that takes a type that implements AsRef for a slice of `&amp;str`?", "body": "<p>I am calling a function that takes a <code>&amp;[&amp;str]</code>. As it is more convenient to write <code>[\"aa\", \"bb\"]</code>, instead of <code>&amp;[\"aa\", \"bb\"]</code>, I decided to add <code>AsRef</code>:</p>\n\n<pre><code>struct Builder&lt;'a&gt; {\n    s: Option&lt;&amp;'a [&amp;'a str]&gt;,\n}\n\nimpl&lt;'a&gt; Builder&lt;'a&gt; {\n    fn new() -&gt; Builder&lt;'a&gt; {\n        Builder { s: None }\n    }\n\n    fn abc&lt;S&gt;(&amp;mut self, s: S) -&gt; &amp;mut Self\n        where S: AsRef&lt;[&amp;'a str]&gt; + 'a\n    {\n        self.s = Some(s.as_ref());\n        self\n    }\n\n    fn build(&amp;self) -&gt; u32 {\n        0\n    }\n}\n\nfn main() {\n    Builder::new().abc([]).build();\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=45b3e93d119d36b6cf46b1205cb2a4df&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>But there is a problem with lifetime:</p>\n\n<pre><code>error: `s` does not live long enough\n        self.s = Some(s.as_ref());\n                      ^\nnote: reference must be valid for the lifetime 'a as defined on the block at 12:4...\n    {\n        self.s = Some(s.as_ref());\n        self\n    }\nnote: ...but borrowed value is only valid for the scope of parameters for function at 12:4\n    {\n        self.s = Some(s.as_ref());\n        self\n    }\n</code></pre>\n"}, {"tags": ["rust", "coercion"], "answers": [{"tags": [], "owner": {"reputation": 748, "user_id": 2128597, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000157613328/picture?type=large", "display_name": "\u76db\u5b89\u5b89", "link": "https://stackoverflow.com/users/2128597/%e7%9b%9b%e5%ae%89%e5%ae%89"}, "is_accepted": false, "score": 0, "last_activity_date": 1466774266, "last_edit_date": 1466774266, "creation_date": 1466761960, "answer_id": 38010504, "question_id": 38010241, "link": "https://stackoverflow.com/questions/38010241/what-is-rfc-401s-coerce-inner-useful-for/38010504#38010504", "title": "What is RFC 401&#39;s coerce_inner useful for?", "body": "<p>They are used to turn a struct/tuple with sized \"tail\" into an unsized one.</p>\n"}], "owner": {"reputation": 748, "user_id": 2128597, "user_type": "registered", "accept_rate": 64, "profile_image": "https://graph.facebook.com/100000157613328/picture?type=large", "display_name": "\u76db\u5b89\u5b89", "link": "https://stackoverflow.com/users/2128597/%e7%9b%9b%e5%ae%89%e5%ae%89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 58, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1466774266, "creation_date": 1466761192, "last_edit_date": 1592644375, "question_id": 38010241, "link": "https://stackoverflow.com/questions/38010241/what-is-rfc-401s-coerce-inner-useful-for", "title": "What is RFC 401&#39;s coerce_inner useful for?", "body": "<p>I'm reading Rust's <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0401-coercions.md\" rel=\"nofollow noreferrer\">RFC 0401</a> and see this:</p>\n<blockquote>\n<p>coerce_inner(<code>Foo&lt;..., T, ...&gt;</code>) = <code>Foo&lt;..., coerce_inner(T), ...&gt;</code> where <code>Foo</code> is a struct and only the last field has type <code>T</code> and <code>T</code> is not part of the type of any other fields;</p>\n<p>coerce_inner(<code>(..., T)</code>) = <code>(..., coerce_inner(T))</code>.</p>\n</blockquote>\n<p>It this up-to-date information? If so, what is this useful for?</p>\n"}, {"tags": ["hashmap", "rust", "borrowing"], "answers": [{"comments": [{"owner": {"reputation": 31, "user_id": 6507720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffe49a917febf4a4f02d9d28146a151b?s=128&d=identicon&r=PG&f=1", "display_name": "B. Wang", "link": "https://stackoverflow.com/users/6507720/b-wang"}, "edited": false, "score": 0, "creation_date": 1466764120, "post_id": 38008829, "comment_id": 63465047, "body": "Thank you @delnan! Your answer did clarify me why I would get the error. However <code>map.insert(data[0].clone(), data[1].clone());</code> doesn&#39;t work. I managed to get arround the error by changing <code>let mut map = HashMap::&lt;&amp;str, &amp;str&gt;::new();</code> to <code>let mut map = HashMap::&lt;String, String&gt;::new();</code> and using <code>map.insert(data[0].to_owned(), data[1].to_owned());</code>. Is there a better solution which doens&#39;t involve allocating extra memory?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 31, "user_id": 6507720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffe49a917febf4a4f02d9d28146a151b?s=128&d=identicon&r=PG&f=1", "display_name": "B. Wang", "link": "https://stackoverflow.com/users/6507720/b-wang"}, "edited": false, "score": 0, "creation_date": 1466771627, "post_id": 38008829, "comment_id": 63469363, "body": "@B.Wang Oh sorry that was a brain fart on my part. And no, there is no good way to avoid allocating extra memory. Fundamentally, there needs to be a <code>String</code> to own the data the <code>&amp;str</code>s point at, and it can&#39;t be <code>input</code> since that one gets overwritten repeatedly. You <i>could</i> put the <code>String</code>s into a separate vector (using <code>mem::replace</code> and an empty stirng), but this still requires allocating the vector. Note though that you won&#39;t have two copies of all data in memory, since <code>input</code> is recycled."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 6, "last_activity_date": 1466756764, "creation_date": 1466756764, "answer_id": 38008829, "question_id": 38008547, "link": "https://stackoverflow.com/questions/38008547/confusion-about-rust-hashmap-and-string-borrowing/38008829#38008829", "title": "Confusion about Rust HashMap and String borrowing", "body": "<p><code>split_whitespace()</code> doesn't give you two new <code>String</code>s containing (copies of) the non-whitespace parts of the input. Instead you get two references into the memory managed by <code>input</code>, of type <code>&amp;str</code>. So when you then try to clear <code>input</code> and read the next line of input into it, you try overwriting memory that's still being used by the hash map.</p>\n\n<p>Why does <code>split_whitespace</code> (and many other string methods, I should add) complicate matters by returning <code>&amp;str</code>? Because it's often enough, and in those cases it avoid unnecessary copies. In this specific case however, it's probably best to explicitly copy the relevant parts of the string:</p>\n\n<pre><code>map.insert(data[0].clone(), data[1].clone());\n</code></pre>\n"}], "owner": {"reputation": 31, "user_id": 6507720, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ffe49a917febf4a4f02d9d28146a151b?s=128&d=identicon&r=PG&f=1", "display_name": "B. Wang", "link": "https://stackoverflow.com/users/6507720/b-wang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1526, "favorite_count": 0, "accepted_answer_id": 38008829, "answer_count": 1, "score": 3, "last_activity_date": 1466775586, "creation_date": 1466755514, "last_edit_date": 1466775586, "question_id": 38008547, "link": "https://stackoverflow.com/questions/38008547/confusion-about-rust-hashmap-and-string-borrowing", "title": "Confusion about Rust HashMap and String borrowing", "body": "<p>This program accepts an integer N, followed by N lines containing two strings separated by a space. I want to put those lines into a <code>HashMap</code> using the first string as the key and the second string as the value:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::io;\n\nfn main() {\n    let mut input = String::new();\n    io::stdin().read_line(&amp;mut input)\n        .expect(\"unable to read line\");\n    let desc_num: u32 = match input.trim().parse() {\n        Ok(num) =&gt; num,\n        Err(_) =&gt; panic!(\"unable to parse\")\n    };\n\n    let mut map = HashMap::&lt;&amp;str, &amp;str&gt;::new();\n    for _ in 0..desc_num {\n        input.clear();\n        io::stdin().read_line(&amp;mut input)\n            .expect(\"unable to read line\");\n        let data = input.split_whitespace().collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n        println!(\"{:?}\", data);\n        // map.insert(data[0], data[1]);\n    }\n}\n</code></pre>\n\n<p>The program works as intended:</p>\n\n<pre><code>3\na 1\n[\"a\", \"1\"]\nb 2\n[\"b\", \"2\"]\nc 3\n[\"c\", \"3\"]\n</code></pre>\n\n<p>When I try to put those parsed strings into a <code>HashMap</code> and uncomment <code>map.insert(data[0], data[1]);</code>, the compilation fails with this error:</p>\n\n<pre><code>error: cannot borrow `input` as mutable because it is also borrowed as immutable [E0502]\n        input.clear();\n        ^~~~~\nnote: previous borrow of `input` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `input` until the borrow ends\n        let data = input.split_whitespace().collect::&lt;Vec&lt;&amp;str&gt;&gt;();\n                   ^~~~~\nnote: previous borrow ends here\nfn main() {\n...\n}\n^\n</code></pre>\n\n<p>I don't understand why this error would come up, since I think the <code>map.insert()</code> expression doesn't borrow the string <code>input</code> at all.</p>\n"}, {"tags": ["rust", "ffi", "jack"], "answers": [{"comments": [{"owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "edited": false, "score": 0, "creation_date": 1466814981, "post_id": 38009142, "comment_id": 63488903, "body": "Makes sense now, thanks! The warning in the docs is good. From the RFC proposal it seems many beginners (like me) struggle with this. Would it make sense to &quot;encourage&quot; users to use a naming convention for raw pointers, i.e. issue a warning if raw pointers do not end in &quot;*_ptr&quot;. Maybe in the long run that would increase alertness regarding correct memory management, and would prompt people to not rely on the compiler to error if something is wrong. More advance people could disable the warning."}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 6, "last_activity_date": 1466768712, "last_edit_date": 1466768712, "creation_date": 1466757877, "answer_id": 38009142, "question_id": 38007154, "link": "https://stackoverflow.com/questions/38007154/jack-audio-client-name-longer-than-4-characters-breaks-client/38009142#38009142", "title": "Jack audio client name longer than 4 characters breaks client", "body": "<p><code>let name = CString::new(\"yass\").unwrap().as_ptr();</code> allocates a string, gets a pointer to it... then throws away the string, so you get a use-after-free.  Don't do this.  Write <code>let name = CString::new(\"yass\").unwrap();</code>, then use <code>name.as_ptr()</code>.  See also <a href=\"https://doc.rust-lang.org/nightly/std/ffi/struct.CStr.html#method.as_ptr\" rel=\"nofollow\"><code>CStr::as_ptr</code></a> and <a href=\"https://github.com/rust-lang/rfcs/pull/1642\" rel=\"nofollow\">this</a> RFC proposal.</p>\n\n<p>Any suggestions to improve the documentation would be welcome.</p>\n"}], "owner": {"reputation": 373, "user_id": 5101356, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/afc758f07608f93dfb31bbde7d87b5a6?s=128&d=identicon&r=PG&f=1", "display_name": "poidl", "link": "https://stackoverflow.com/users/5101356/poidl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 38009142, "answer_count": 1, "score": 4, "last_activity_date": 1466774448, "creation_date": 1466750686, "last_edit_date": 1466774448, "question_id": 38007154, "link": "https://stackoverflow.com/questions/38007154/jack-audio-client-name-longer-than-4-characters-breaks-client", "title": "Jack audio client name longer than 4 characters breaks client", "body": "<p>Trying to use the JACK-AUDIO-CONNECTION-KIT from Rust (<a href=\"http://jackaudio.org/api/group__ClientFunctions.html#gabbd2041bca191943b6ef29a991a131c5\" rel=\"nofollow\">documentation</a>), I run into problems calling</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>jack_client_t* jack_client_open (   const char *    client_name,\n                                    jack_options_t  options,\n                                    jack_status_t *     status,\n                                    ... )   \n</code></pre>\n\n<p>In Rust I use</p>\n\n<pre><code>#[link(name = \"jack\")]\nextern \"C\" {\n    pub fn jack_client_open(name: *const libc::c_char,\n                        options: JackOptions,\n                        status: &amp;JackStatus)\n                        -&gt; *mut JackClientT;\n}\n</code></pre>\n\n<p>(<a href=\"https://github.com/poidl/yassyhost/tree/b4af0d7322d6cdcd4d343356055bc8f6cce15b8b\" rel=\"nofollow\">complete code</a>)</p>\n\n<p>When I use a <code>name</code> with four characters it works, e.g.</p>\n\n<pre><code>let name = CString::new(\"yass\").unwrap().as_ptr();\n</code></pre>\n\n<p>but if I use 5 or more characters it doesn't work. In the JACK docs linked to above, it says that the name can be at most <code>int jack_client_name_size()</code> characters long, which is 64 in my case. Why does this happen?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 5, "last_activity_date": 1466749790, "creation_date": 1466749790, "answer_id": 38006912, "question_id": 38006421, "link": "https://stackoverflow.com/questions/38006421/rust-borrow-checker-only-complains-about-borrowing-as-mutable-multiple-times-whe/38006912#38006912", "title": "Rust Borrow checker only complains about borrowing as mutable multiple times when a function that returns a reference with the same lifetime assigned", "body": "<p>This is about the scope of the borrow, and whether you keep the borrow alive.  In most of the above calls, <code>some_val</code> is borrowed during the function call, but returned afterwards when the function returns.</p>\n\n<p>In the exception case:</p>\n\n<pre><code>let num_again = borrow_lifetime(&amp;mut life_val); //Borrow, assign lifetime result\n</code></pre>\n\n<p>You're borrowing <code>life_val</code> during the call to <code>borrow_lifetime</code>, but since the return value has the same lifetime as the parameter (<code>'a</code>), the borrow's scope is extended to include the lifetime of <code>num_again</code>, ie until the end of the function.  It would be unsafe to borrow <code>life_val</code> again, since <code>num_again</code> is still a reference into it.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1534365166, "last_edit_date": 1534365166, "creation_date": 1466772539, "answer_id": 38013838, "question_id": 38006421, "link": "https://stackoverflow.com/questions/38006421/rust-borrow-checker-only-complains-about-borrowing-as-mutable-multiple-times-whe/38013838#38013838", "title": "Rust Borrow checker only complains about borrowing as mutable multiple times when a function that returns a reference with the same lifetime assigned", "body": "<p><a href=\"https://stackoverflow.com/a/38006912/155423\">Chris already gave the gist of it</a>, but I think it is worth explaining further.</p>\n\n<p>There are <strong>2</strong> ways to transfer ownership in Rust:</p>\n\n<ul>\n<li><strong>moving</strong> is a <strong>permanent</strong> transfer</li>\n<li><strong>borrowing</strong> is a <strong>temporary</strong> transfer, ownership is expected to be returned</li>\n</ul>\n\n<p>Rust, like many other languages, models time passing using a stack of <em>lexical scopes</em>. As a result, <em>for now</em>, a borrow starts where it is created and extend until the end of its scope.</p>\n\n<hr>\n\n<p>Thus, the questions of when a borrow ends is akin to asking what scope is the borrow created in.</p>\n\n<p>Let's review your example with numbered lines:</p>\n\n<pre><code>fn main() {\n    let mut some_val = NoLifetime {};                // 1\n    borrow_mut_function(&amp;mut some_val);              // 2\n    borrow_mut_function(&amp;mut some_val);              // 3\n                                                     // \n    let num = 5;                                     // 4\n    let mut life_val = WithLifetime { field: &amp;num }; // 5\n    borrow_lifetime(&amp;mut life_val);                  // 6\n    borrow_lifetime(&amp;mut life_val);                  // 7\n                                                     //\n    let num_again = borrow_lifetime(&amp;mut life_val);  // 8\n    borrow_lifetime(&amp;mut life_val);                  // 9\n}\n</code></pre>\n\n<p>When a function is called, the argument is borrowed:</p>\n\n<ul>\n<li>at least for the duration of the function call</li>\n<li>up to the moment the result is dropped, <em>if</em> the result shares a lifetime with the argument</li>\n</ul>\n\n<p>So, let's look at this:</p>\n\n<ul>\n<li><p>on line (2) and (3) you call <code>borrow_mut_function</code> which returns a <code>String</code>: the result does not share any lifetime with the argument, so the argument is only borrowed for the lifetime of the function call.</p></li>\n<li><p>on line (6) and (7) you call <code>borrow_lifetime</code> which returns a <code>&amp;'a i32</code>: the result shares a lifetime with the argument, so the argument is borrowed until the end of the scope of the result... which is immediately since the result is not used.</p></li>\n<li><p>on line (8) you call <code>borrow_lifetime</code> which returns a <code>&amp;'a i32</code> and you <em>assign</em> the result to <code>num_again</code>: the result shares a lifetime with the argument, so the argument is borrowed until the end of the scope of <code>num_again</code>.</p></li>\n<li><p>on line (9) you call <code>borrow_lifetime</code> however its argument is still borrow by <code>num_again</code> so the call is illegal.</p></li>\n</ul>\n\n<p>That's it, this is how Rust works today.</p>\n\n<hr>\n\n<p>In the future, there is a call for <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical borrows</em></a>. That is, the compiler would realize that:</p>\n\n<ul>\n<li><code>num_again</code> is never used</li>\n<li><code>num_again</code> does not have a specific destructor (no <code>Drop</code> implementation)</li>\n</ul>\n\n<p>and could therefore decide that its borrow ends sooner than the end of the lexical scope.</p>\n"}], "owner": {"reputation": 1725, "user_id": 537028, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8a215a6c1e1fcef0635918a0e2d08e66?s=128&d=identicon&r=PG", "display_name": "chamakits", "link": "https://stackoverflow.com/users/537028/chamakits"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 405, "favorite_count": 0, "accepted_answer_id": 38013838, "answer_count": 2, "score": 1, "last_activity_date": 1534365166, "creation_date": 1466747563, "last_edit_date": 1466752019, "question_id": 38006421, "link": "https://stackoverflow.com/questions/38006421/rust-borrow-checker-only-complains-about-borrowing-as-mutable-multiple-times-whe", "title": "Rust Borrow checker only complains about borrowing as mutable multiple times when a function that returns a reference with the same lifetime assigned", "body": "<p>I'm having problem with some Rust code where I'm being allowed to borrow something as mutable more than once on certain conditions (first confusing part), but not others.</p>\n\n<p>I've written the following example to illustrate:\n(<a href=\"https://play.rust-lang.org/?gist=087ce79c06b64c13ca07967e22dcb88d&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<pre><code>struct NoLifetime {}\nstruct WithLifetime &lt;'a&gt; {\n    pub field: &amp;'a i32\n}\n\nfn main() {\n    let mut some_val = NoLifetime {};\n    borrow_mut_function(&amp;mut some_val);\n    borrow_mut_function(&amp;mut some_val); // Borrowing as mutable for the second time.\n\n    let num = 5;\n    let mut life_val = WithLifetime { field: &amp;num };\n    borrow_lifetime(&amp;mut life_val);\n    borrow_lifetime(&amp;mut life_val); // Borrowing as mutable for the second time.\n\n    let num_again = borrow_lifetime(&amp;mut life_val); // Borrow, assign lifetime result\n    borrow_lifetime(&amp;mut life_val); // Compiler: cannot borrow `life_val` as mutable more than once\n}\n\nfn borrow_mut_function(val_in: &amp;mut NoLifetime) -&gt; String {\n    \"abc\".to_string()\n}\nfn borrow_lifetime&lt;'a&gt;(val_in: &amp;'a mut WithLifetime) -&gt; &amp;'a i32 {\n    val_in.field\n}\n</code></pre>\n\n<p>If you see, I can borrow both <code>some_val</code>, and <code>life_val</code> as mutable more than once.  However, after assigning the return value of <code>borrow_lifetime</code>, I can no longer borrow.</p>\n\n<p>My questions are the following:</p>\n\n<ol>\n<li>From 'The Rules' about Borrowing in the <a href=\"https://doc.rust-lang.org/book/references-and-borrowing.html\" rel=\"nofollow\">Rust Book</a>, I'm supposed to have 'exactly one mutable reference' in scope to the same value.  However, in the code above I'm borrowing as mutable every time I call a <code>borrow_</code> function.</li>\n<li>Why is the same type of borrowing not allowed when I have a function that returns something with the same lifetime as the parameter, and I assign that parameter.</li>\n</ol>\n\n<p>Any help would be appreciated. I imagine what is happening here is that I am misunderstanding what 'borrowing as mutable' really means, and when to determine that something is being borrowed as mutable.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 1, "creation_date": 1466747850, "post_id": 38006412, "comment_id": 63456390, "body": "I think this should work: <code>redis::cmd(&quot;RANDOMKEY&quot;).query::&lt;()&gt;(&amp;con).unwrap();</code>."}, {"owner": {"reputation": 2291, "user_id": 1752333, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1009edfa56c5a71d0e6de2738342bee7?s=128&d=identicon&r=PG", "display_name": "scorix", "link": "https://stackoverflow.com/users/1752333/scorix"}, "reply_to_user": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "edited": false, "score": 0, "creation_date": 1466748096, "post_id": 38006412, "comment_id": 63456495, "body": "Yes it works. Cool! Would you write an answer that I can accept it?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1466770399, "post_id": 38006713, "comment_id": 63468630, "body": "This is correct, but I&#39;d say the original version is more idiomatic most of the time."}], "tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 4, "last_activity_date": 1466748934, "creation_date": 1466748934, "answer_id": 38006713, "question_id": 38006412, "link": "https://stackoverflow.com/questions/38006412/how-can-i-remove-let/38006713#38006713", "title": "How can I remove `let _ : () = ...`?", "body": "<p><code>redis::Cmd::query</code> is defined as:</p>\n\n<pre><code>fn query&lt;T: FromRedisValue&gt;(&amp;self, con: &amp;ConnectionLike) -&gt; RedisResult&lt;T&gt;\n</code></pre>\n\n<p>You just need to make the <code>T</code> here <code>()</code> to get the same behaviour as annotating the value of <code>query(...).unwrap()</code> to be <code>T</code>. This should work:</p>\n\n<pre><code>redis::cmd(\"RANDOMKEY\").query::&lt;()&gt;(&amp;con).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 2291, "user_id": 1752333, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1009edfa56c5a71d0e6de2738342bee7?s=128&d=identicon&r=PG", "display_name": "scorix", "link": "https://stackoverflow.com/users/1752333/scorix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 0, "accepted_answer_id": 38006713, "answer_count": 1, "score": 2, "last_activity_date": 1466774668, "creation_date": 1466747512, "last_edit_date": 1466774668, "question_id": 38006412, "link": "https://stackoverflow.com/questions/38006412/how-can-i-remove-let", "title": "How can I remove `let _ : () = ...`?", "body": "<p>Here is my code, and this works:</p>\n\n<pre><code>extern crate redis;\n\n// connect to redis\nfn establish_connection() -&gt; redis::Connection {\n    let client = redis::Client::open(\"redis://ip:port/0\").unwrap();\n    client.get_connection().unwrap()\n}\n\nfn main() {\n    let con : redis::Connection = establish_connection();\n    let _ : () = redis::cmd(\"RANDOMKEY\").query(&amp;con).unwrap();\n}\n</code></pre>\n\n<p>But this one doesn't work:</p>\n\n<pre><code>//...\n\nfn main() {\n    let con : redis::Connection = establish_connection();\n    redis::cmd(\"RANDOMKEY\").query(&amp;con).unwrap();\n}\n</code></pre>\n\n<p>It raises an error while compiling:</p>\n\n<pre><code>error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n    redis::cmd(\"FLUSHALL\").query(&amp;con).unwrap();\n                           ^~~~~\nhelp: run `rustc --explain E0282` to see a detailed explanation\n</code></pre>\n\n<p>Do I have to write <code>let _ : () = ...</code>? How can I remove it?</p>\n"}, {"tags": ["string", "for-loop", "rust", "variable-assignment"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1466752445, "post_id": 38006071, "comment_id": 63458502, "body": "Just a comment about your code, unrelated to the question: you can remove those explicit <code>String</code> type annotations, when your right-hand-side already is a string (which it is in case of using <code>to_string()</code>)."}, {"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1466756518, "post_id": 38006071, "comment_id": 63460719, "body": "I keep it for readability...I dont like inference much in every case...want to see the type at all times"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1466766924, "post_id": 38006071, "comment_id": 63466558, "body": "I can completely understand that, but it is pretty important to settle on one coding style within the community such that everyone can quickly read everyone else&#39;s code, even if it feels wrong for newcomers of a language. But this is nothing to settle in the SO comment section :)"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1466746037, "creation_date": 1466746037, "answer_id": 38006156, "question_id": 38006071, "link": "https://stackoverflow.com/questions/38006071/string-return-value-does-not-get-assigned-within-for-loop-in-rust/38006156#38006156", "title": "String return value does not get assigned within for-loop in Rust", "body": "<p>Because that's not how ranges work; it's got nothing to do with the strings.  If you run the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    for i in 8..6 {\n        println!(\"a: {}\", i);\n    }\n    for i in (8..6).rev() {\n        println!(\"b: {}\", i);\n    }\n    for i in 6..8 {\n        println!(\"c: {}\", i);\n    }\n    for i in (6..8).rev() {\n        println!(\"d: {}\", i);\n    }\n}\n</code></pre>\n\n<p>You get the following output:</p>\n\n<pre><code>c: 6\nc: 7\nd: 7\nd: 6\n</code></pre>\n\n<p>Ranges <strong>only</strong> count up, they never count down.  <code>rev</code> reverses the order of the sequence you give it; it doesn't turn an empty sequence into a non-empty one.</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "accepted_answer_id": 38006156, "answer_count": 1, "score": 0, "last_activity_date": 1466752294, "creation_date": 1466745559, "last_edit_date": 1466752294, "question_id": 38006071, "link": "https://stackoverflow.com/questions/38006071/string-return-value-does-not-get-assigned-within-for-loop-in-rust", "title": "String return value does not get assigned within for-loop in Rust", "body": "<p>Given this code-snippet:</p>\n\n<pre><code>pub fn verse(start_bottles: i32) -&gt; String {\n    let mut song_template: String = \"%1 of beer on the wall, %2 of beer.\\n%3, %4 of beer on the wall.\\n\".to_string();\n\n    match start_bottles {\n        0 =&gt; lyrics_no_bottles(&amp;mut song_template),\n        1 =&gt; lyrics_one_bottle(&amp;mut song_template),\n        2 =&gt; lyrics_two_bottles(&amp;mut song_template),\n        _ =&gt; lyrics_more_bottles(&amp;mut song_template, start_bottles)\n    }\n    song_template\n}\n\npub fn sing(first: i32, last: i32) -&gt; String {\n    let mut song: String = \"\".to_string();\n    for num in (8..6).rev() {\n        song = verse(1);\n    }\n    song\n}\n</code></pre>\n\n<p>As I output <code>verse(1)</code> it works fine - the tested string appears and is complete. But when I assign the result of <code>verse(1)</code> to the <code>String</code> binding <code>song</code>, <code>song</code> seems to be empty? I do not understand this behaviour.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466708374, "post_id": 37999617, "comment_id": 63443584, "body": "I need to access by string to values, and remove by list. this is why I must use both for better performance. And I may mutablity is another key is needed."}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466708505, "post_id": 37999617, "comment_id": 63443664, "body": "Using only a map rather than both a map and a list would actually have better performance than what you are trying to do here."}, {"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466708705, "post_id": 37999617, "comment_id": 63443789, "body": "I will lost the sequence of my data by insertion."}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466708834, "post_id": 37999617, "comment_id": 63443857, "body": "If you need mutability, you can use a <code>RefCell</code> but I wouldn&#39;t recommend it."}, {"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466708990, "post_id": 37999617, "comment_id": 63443954, "body": "I know about RefCell but is not efficient. I think I have to do it unsafely."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 1, "creation_date": 1466709376, "post_id": 37999617, "comment_id": 63444167, "body": "Note that if you need performance, a linked list is rarely the way to go, especially since you only <code>{pop,push}_back</code>. You could store a <code>HashMap&lt;String, *const Data&gt;&gt;</code> and use some <code>unsafe</code> blocks. As long as you ensure that the list and the map are synced this will be a safe wrapper for you particular data structure."}, {"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466710380, "post_id": 37999617, "comment_id": 63444742, "body": "I need a priority queue which is element will removed from any where, this is why i need a Linkedlist. so because I gonna remove from anywhere of my sequential collection, link list will perform better in my use case, by the way my question is to have shared references in to collection and the sample is not giving of the details of the things I will need in the future. But surly I need these work together."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 1, "creation_date": 1466749520, "post_id": 37999617, "comment_id": 63457053, "body": "@NavidNabavi: Don&#39;t be sure about linked-list performing better for removals in the middle; the performance benefits only kick in for <i>large</i> lists, so you would have to measure the performance compared to a <code>Vec</code> (and especially, if order does not matter, <code>Vec::swap_remove</code> which is O(1) too)."}, {"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466752952, "post_id": 37999617, "comment_id": 63458802, "body": "Gonna remove from the middle and add to the front in every access and it is growing."}, {"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466755725, "post_id": 37999617, "comment_id": 63460316, "body": "The size gonna grow to 1M data. I can handle this in Go, C++ or things like nodejs or python. but I preferred rust to some learning reasons."}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": false, "score": 1, "last_activity_date": 1466707973, "creation_date": 1466707973, "answer_id": 37999617, "question_id": 37998942, "link": "https://stackoverflow.com/questions/37998942/share-a-reference-variable-in-two-collections/37999617#37999617", "title": "Share a reference variable in two collections", "body": "<p>Personally, I would use <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> instead of <code>Box</code>.</p>\n\n<p>Alternatively, you could store indexes into your list as the value type of your hash map (i.e. use <code>HashMap&lt;String, usize&gt;</code> instead of <code>HashMap&lt;String, Box&lt;Data&gt;&gt;</code>.</p>\n\n<p>Depending on what you are trying to do, it might be a better idea to only have either a list or a map, and not both.</p>\n"}, {"comments": [{"owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 0, "creation_date": 1466756074, "post_id": 38008207, "comment_id": 63460472, "body": "What about performance issues in <code>RefCell</code> as I know it has <code>RWLock</code> for items. Isn&#39;t that bad in huge amount data?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "edited": false, "score": 2, "creation_date": 1466757216, "post_id": 38008207, "comment_id": 63461025, "body": "@NavidNabavi It&#39;s semantically like a RWLock in that it allows many readers but only one writer. But unlike locks, it doesn&#39;t need to work across threads, so acquiring a mutable reference is literally an ordinary non-atomic memory access (close to the very data you&#39;ll later access so it&#39;s practically free) and a conditional jump. This is dirt cheap, the only potential slowdown is because it takes an additional word of memory, which may hurt the cache. But why don&#39;t you benchmark it and see for yourself?"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1511621747, "last_edit_date": 1511621747, "creation_date": 1466754397, "answer_id": 38008207, "question_id": 37998942, "link": "https://stackoverflow.com/questions/37998942/share-a-reference-variable-in-two-collections/38008207#38008207", "title": "Share a reference variable in two collections", "body": "<p>The idea of storing a single item in multiple collections simultaneously is not new... and is not simple.</p>\n\n<p>The common idea to sharing elements is either doing it unsafely (knowing how many collections there are) or doing it with a shared pointer.</p>\n\n<p>There is a some inefficiency in just blindly using regular collections with a shared pointer:</p>\n\n<ul>\n<li>Node based collections mean you have a double indirection</li>\n<li>Switching from one view to the other require finding the element all over again</li>\n</ul>\n\n<p>In Boost.MultiIndex (C++), the paradigm used is to create an intrusive node to wrap the value, and then link this node in the various views. The trick (and difficulty) is to craft the intrusive node in a way that allows getting to the surrounding elements to be able to \"unlink\" it in O(1) or O(log N).</p>\n\n<p>It would be quite <code>unsafe</code> to do so, and I don't recommend attempting it unless you are ready to spend significant time on it.</p>\n\n<p>Thus, for a quick solution:</p>\n\n<pre><code>type Node = Rc&lt;RefCell&lt;Data&gt;&gt;;\n\nstruct Holder {\n    list: LinkedList&lt;Node&gt;,\n    map: HashMap&lt;String, Node&gt;,\n}\n</code></pre>\n\n<p>As long as you do not need to remove by <code>url</code>, this is efficient enough.</p>\n\n<hr>\n\n<p>Complete example:</p>\n\n<pre><code>use std::collections::{HashMap, LinkedList};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct Data {\n    url: String,\n    access: u64,\n}\n\ntype Node = Rc&lt;RefCell&lt;Data&gt;&gt;;\n\nstruct Holder {\n    list: LinkedList&lt;Node&gt;,\n    map: HashMap&lt;String, Node&gt;,\n}\n\nimpl Holder {\n    fn push(&amp;mut self, d: Data) {\n        let url = d.url.to_owned();\n        let node = Rc::new(RefCell::new(d));\n        self.list.push_back(Rc::clone(&amp;node));\n        self.map.insert(url, node);\n    }\n\n    fn remove_last(&amp;mut self) {\n        if let Some(node) = self.list.back() {\n            self.map.remove(&amp;node.borrow().url);\n        }\n        self.list.pop_back();\n    }\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 626, "favorite_count": 3, "accepted_answer_id": 38008207, "answer_count": 2, "score": 6, "last_activity_date": 1511621791, "creation_date": 1466705591, "last_edit_date": 1511621791, "question_id": 37998942, "link": "https://stackoverflow.com/questions/37998942/share-a-reference-variable-in-two-collections", "title": "Share a reference variable in two collections", "body": "<p>I am trying to share a reference in two collections: a map and a list. I want to push to both of the collections and remove from the back of the list and remove from the map too. This code is just a sample to present what I want to do, it doesn't even compile!</p>\n\n<p>What is the right paradigm to implement this? What kind of guarantees are the best practice?</p>\n\n<pre><code>use std::collections::{HashMap, LinkedList};\n\nstruct Data {\n    url: String,\n    access: u64,\n}\n\nstruct Holder {\n    list: LinkedList&lt;Box&lt;Data&gt;&gt;,\n    map: HashMap&lt;String, Box&lt;Data&gt;&gt;,\n}\n\nimpl Holder {\n    fn push(&amp;mut self, d: Data) {\n        let boxed = Box::new(d);\n        self.list.push_back(boxed);\n        self.map.insert(d.url.to_owned(), boxed);\n    }\n\n    fn remove_last(&amp;mut self) {\n        if let Some(v) = self.list.back() {\n            self.map.remove(&amp;v.url);\n        }\n        self.list.pop_back();\n    }\n}\n</code></pre>\n"}, {"tags": ["redis", "rust"], "answers": [{"comments": [{"owner": {"reputation": 582, "user_id": 244203, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1e27f00c6bff59054876e48cb279516?s=128&d=identicon&r=PG", "display_name": "cmedeiros", "link": "https://stackoverflow.com/users/244203/cmedeiros"}, "edited": false, "score": 0, "creation_date": 1466873028, "post_id": 38015201, "comment_id": 63501598, "body": "Here it is: <a href=\"https://github.com/mitsuhiko/redis-rs/issues/95\" rel=\"nofollow noreferrer\">github.com/mitsuhiko/redis-rs/issues/95</a> Thank you for your support."}, {"owner": {"reputation": 582, "user_id": 244203, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1e27f00c6bff59054876e48cb279516?s=128&d=identicon&r=PG", "display_name": "cmedeiros", "link": "https://stackoverflow.com/users/244203/cmedeiros"}, "edited": false, "score": 0, "creation_date": 1467024653, "post_id": 38015201, "comment_id": 63542777, "body": "mitsuhiko (redis-rs creator) already fixed it, and should be on the next release"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1466875112, "last_edit_date": 1466875112, "creation_date": 1466776688, "answer_id": 38015201, "question_id": 37995426, "link": "https://stackoverflow.com/questions/37995426/wrong-number-of-arguments-when-using-mget-with-redis-rs/38015201#38015201", "title": "Wrong number of arguments when using mget with redis-rs", "body": "<p>Running your program against a netcat server shows the following requests made:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>*3\n$3\nGET\n$12\nrandom_key_1\n$12\nrandom_key_2\n</code></pre>\n\n<p>The <code>GET</code> command should be an <code>MGET</code>.</p>\n\n<hr>\n\n<p>I believe this to be a <a href=\"https://github.com/mitsuhiko/redis-rs/blob/9e4f975e62d7f64dc672ee0f40f1628a4defe41c/src/types.rs#L518-L532\" rel=\"nofollow\">bug in the implementation</a>:</p>\n\n<pre><code>impl&lt;T: ToRedisArgs&gt; ToRedisArgs for Vec&lt;T&gt; {\n    fn to_redis_args(&amp;self) -&gt; Vec&lt;Vec&lt;u8&gt;&gt; {\n        ToRedisArgs::make_arg_vec(self)\n    }\n}\n\nimpl&lt;'a, T: ToRedisArgs&gt; ToRedisArgs for &amp;'a [T] {\n    fn to_redis_args(&amp;self) -&gt; Vec&lt;Vec&lt;u8&gt;&gt; {\n        ToRedisArgs::make_arg_vec(*self)\n    }\n\n    fn is_single_arg(&amp;self) -&gt; bool {\n        ToRedisArgs::is_single_vec_arg(*self)\n    }\n}\n</code></pre>\n\n<p>Under the hood, the library inspects the key type to know if it's multivalued or not, using <code>ToRedisArgs::is_single_arg</code>, which has a default implementation of <code>true</code>. </p>\n\n<p>As you can see, a slice implements <code>ToRedisArgs::is_single_arg</code>, but a <code>Vec</code> does not. This also suggests a workaround: treat the vector like a slice:</p>\n\n<pre><code>redis_conn.get(&amp;*keys_to_get)\n</code></pre>\n\n<p><a href=\"https://github.com/mitsuhiko/redis-rs/issues/95\" rel=\"nofollow\">This issue has now been filed with the library</a>.</p>\n"}], "owner": {"reputation": 582, "user_id": 244203, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d1e27f00c6bff59054876e48cb279516?s=128&d=identicon&r=PG", "display_name": "cmedeiros", "link": "https://stackoverflow.com/users/244203/cmedeiros"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 790, "favorite_count": 0, "accepted_answer_id": 38015201, "answer_count": 1, "score": 3, "last_activity_date": 1466875112, "creation_date": 1466694392, "last_edit_date": 1466775734, "question_id": 37995426, "link": "https://stackoverflow.com/questions/37995426/wrong-number-of-arguments-when-using-mget-with-redis-rs", "title": "Wrong number of arguments when using mget with redis-rs", "body": "<p>I'm trying to access Redis using Rust with the following:</p>\n\n<pre><code>extern crate redis;\n\nuse redis::{Client, Commands, Connection, RedisResult};\n\nfn main() {\n\n    let redis_client = Client::open(\"redis://127.0.0.1/\").unwrap();\n    let redis_conn = redis_client.get_connection().unwrap();\n\n    let mut keys_to_get = vec![];\n    keys_to_get.push(\"random_key_1\".to_string());\n    keys_to_get.push(\"random_key_2\".to_string());\n    let redis_result: String = redis_conn.get(keys_to_get).unwrap();\n}\n</code></pre>\n\n<p>When I run <code>cargo run</code> I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>     Running `target/debug/test_resdis`\nthread '&lt;main&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: An error was signalled by the server: wrong number of arguments for 'get' command', ../src/libcore/result.rs:746\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nerror: Process didn't exit successfully: `target/debug/test_resdis` (exit code: 101)\n</code></pre>\n\n<p>Am I doing something wrong, or is it a bug?</p>\n"}, {"tags": ["unit-testing", "testing", "rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1466694011, "post_id": 37993886, "comment_id": 63434127, "body": "Can&#39;t you move that funcionality into <code>src&#47;lib.rs</code> and then use it in <code>tests&#47;lib.rs</code>?"}, {"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1466695012, "post_id": 37993886, "comment_id": 63434908, "body": "@DanielFath I tried this and annotated with <code>#[test]</code> to avoid compiling into release-binary and received this error: &quot;functions used as tests must have signature fn()  -&gt; ()&quot;"}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1466695416, "post_id": 37993886, "comment_id": 63435237, "body": "Can you try putting <code>#cfg(not(test))</code> that will remove your code, during non-test phases."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1466696176, "post_id": 37993886, "comment_id": 63435808, "body": "I think you mean <code>#[cfg(test)]</code>.  I tend to have a <code>#[cfg(test)] mod tests</code> in my lib.rs (or submodules), into which I put all the unit test functions and any utilities they need."}, {"owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1466697291, "post_id": 37993886, "comment_id": 63436585, "body": "@ChrisEmerson Ahh this seems to work. If you put it in an answer, I can mark it."}], "answers": [{"comments": [{"owner": {"reputation": 6345, "user_id": 483347, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/c2d980bc16657b17b4869229796fcd9d?s=128&d=identicon&r=PG", "display_name": "weberc2", "link": "https://stackoverflow.com/users/483347/weberc2"}, "edited": false, "score": 3, "creation_date": 1502149129, "post_id": 37996631, "comment_id": 78074294, "body": "What about integration tests? I need to integrate with a database, but I don&#39;t want to have to create a dependency just for tests. Integration tests work well for my problem up until I need to reuse utility functions. I guess I&#39;ll go and create a testutil crate..."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 6, "last_activity_date": 1466697785, "creation_date": 1466697785, "answer_id": 37996631, "question_id": 37993886, "link": "https://stackoverflow.com/questions/37993886/where-should-i-put-test-utility-functions-in-rust/37996631#37996631", "title": "Where should I put test utility functions in Rust?", "body": "<p>What I do is put my unit tests with any other utilities into a submodule protected with <code>#[cfg(test)]</code>:</p>\n\n<pre><code>#[cfg(test)]\nmod tests {  // The contents could be a separate file if it helps organisation\n    // Not a test, but available to tests.\n    fn some_utility(s: String) -&gt; u32 {\n        ...\n    }\n\n    #[test]\n    fn test_foo() {\n        assert_eq!(...);\n    }\n    // more tests\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 22921, "user_id": 229753, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/f443a82ac96270394a6965323142601b?s=128&d=identicon&r=PG", "display_name": "Tobu", "link": "https://stackoverflow.com/users/229753/tobu"}, "edited": false, "score": 0, "creation_date": 1585937924, "post_id": 56613994, "comment_id": 107950708, "body": "<a href=\"https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute\" rel=\"nofollow noreferrer\">Test mode</a> (the rustc --test flag) also seems to be enabled for benches. It doesn&#39;t seem to be enabled for <a href=\"https://github.com/rust-fuzz/honggfuzz-rs\" rel=\"nofollow noreferrer\">honggfuzz-rs</a> targets however."}, {"owner": {"reputation": 3542, "user_id": 2984585, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d8b299670c2e1512831e7d2026a8d350?s=128&d=identicon&r=PG", "display_name": "ditoslav", "link": "https://stackoverflow.com/users/2984585/ditoslav"}, "edited": false, "score": 0, "creation_date": 1607363361, "post_id": 56613994, "comment_id": 115243408, "body": "for some reason this just doesnt work for me"}], "tags": [], "owner": {"reputation": 1461, "user_id": 2351010, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3fe05f1f2ca588ee9984cafd0865b490?s=128&d=identicon&r=PG", "display_name": "MPlanchard", "link": "https://stackoverflow.com/users/2351010/mplanchard"}, "is_accepted": false, "score": 5, "last_activity_date": 1560631054, "creation_date": 1560631054, "answer_id": 56613994, "question_id": 37993886, "link": "https://stackoverflow.com/questions/37993886/where-should-i-put-test-utility-functions-in-rust/56613994#56613994", "title": "Where should I put test utility functions in Rust?", "body": "<p>You can import from your <code>#[cfg(test)]</code> modules from other <code>#[cfg(test)]</code> modules, so, for example, in <code>main.rs</code> or in some other module, you can do something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[cfg(test)]\npub mod test_util {\n    pub fn return_two() -&gt; usize { 2 }\n}\n</code></pre>\n\n<p>and then from anywhere else in your project:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[cfg(test)]\nmod test {\n    use crate::test_util::return_two;\n\n    #[test]\n    fn test_return_two() {\n        assert_eq!(return_two(), 2);\n    }\n}\n\n</code></pre>\n"}], "owner": {"reputation": 3493, "user_id": 1049866, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Afe2j.png?s=128&g=1", "display_name": "PureW", "link": "https://stackoverflow.com/users/1049866/purew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2249, "favorite_count": 4, "accepted_answer_id": 37996631, "answer_count": 2, "score": 11, "last_activity_date": 1560631054, "creation_date": 1466690505, "last_edit_date": 1466698604, "question_id": 37993886, "link": "https://stackoverflow.com/questions/37993886/where-should-i-put-test-utility-functions-in-rust", "title": "Where should I put test utility functions in Rust?", "body": "<p>I have the following code defining a path where generated files can be placed:</p>\n\n<pre><code>fn gen_test_dir() -&gt; tempdir::TempDir {                                        \n    tempdir::TempDir::new_in(Path::new(\"/tmp\"), \"filesyncer-tests\").unwrap()   \n} \n</code></pre>\n\n<p>This function is defined in <code>tests/lib.rs</code>, used in the tests in that file and I would also like to use it in the unit tests located in <code>src/lib.rs</code>. </p>\n\n<p>Is this possible to achieve without compiling the utility functions into the non-test binary and without duplicating code?</p>\n"}, {"tags": ["rust", "iron", "rust-diesel"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1466723428, "post_id": 37993668, "comment_id": 63450617, "body": "I could be wrong (I&#39;m not near my Rust environment atm) but don&#39;t you have to implement a <code>typemap</code> trait or something similar to be able to store it in the request extensions?"}, {"owner": {"reputation": 586, "user_id": 2595915, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/37828cd0104bbc094c6d37dbc667ed84?s=128&d=identicon&r=PG", "display_name": "NeuroXc", "link": "https://stackoverflow.com/users/2595915/neuroxc"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1466724350, "post_id": 37993668, "comment_id": 63450855, "body": "Yes, I have one implemented (I didn&#39;t post it here for brevity). The issue here is that I can&#39;t initialize a <code>BeforeMiddleware</code> with a <code>diesel::pg::PgConnection</code> because <code>PgConnection</code> doesn&#39;t implement <code>Sync</code>. I was hoping someone knew of a workaround to this limitation."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1466725316, "post_id": 37993668, "comment_id": 63451080, "body": "Having not used <code>diesel</code> myself I&#39;m not sure. However, the fact it uses any of the <code>Cell</code> types or even an unsynchronized smart pointer like <code>Rc</code> will cause it to automatically fail the ability to implement <code>Sync</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1466775394, "creation_date": 1466775394, "answer_id": 38014778, "question_id": 37993668, "link": "https://stackoverflow.com/questions/37993668/injecting-a-diesel-connection-into-an-iron-middleware/38014778#38014778", "title": "Injecting a Diesel connection into an Iron middleware", "body": "<p>Since there isn't enough code provided for me to reproduce your issue, I've made this:</p>\n\n<pre><code>use std::cell::Cell;\n\ntrait Middleware: Sync {}\n\nstruct Unsharable(Cell&lt;bool&gt;);\n\nimpl Middleware for Unsharable {}\n\nfn main() {}\n</code></pre>\n\n<p>which has the same error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::cell::Cell&lt;bool&gt;: std::marker::Sync` is not satisfied [E0277]\nimpl Middleware for Unsharable {}\n     ^~~~~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: `std::cell::Cell&lt;bool&gt;` cannot be shared between threads safely\nnote: required because it appears within the type `Unsharable`\nnote: required by `Middleware`\n</code></pre>\n\n<p>You can solve the problem by changing the type to make it cross-thread compatible:</p>\n\n<pre><code>use std::sync::Mutex;\n\nstruct Sharable(Mutex&lt;Unsharable&gt;);\n\nimpl Middleware for Sharable {}\n</code></pre>\n\n<p>Note that Rust has done a <strong>very good thing for you</strong>: it prevented you from using a type that is unsafe to be called in multiple threads.</p>\n\n<hr>\n\n<blockquote>\n  <p>In writing my tests, I'd like to be able to inject a connection into the request so that I can wrap the entire test case in a transaction (even if there is more than one request in the test case).</p>\n</blockquote>\n\n<p>I'd suggest that it's possible an architectural change would be even better. Separate the domains of \"web framework\" from your \"database\". The authors of <a href=\"https://rads.stackoverflow.com/amzn/click/com/0321503627\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\"><em>Growing Object-Oriented Software, Guided by Tests</em></a> (a highly recommended book) advocate for this style.</p>\n\n<p>Pull apart your code such that there is a method that simply accepts some type that can start / end a transaction, write the interesting stuff there, and test it thoroughly. Then have just enough glue code in the web layer to create a transaction object, then call the next layer down.</p>\n"}, {"tags": [], "owner": {"reputation": 3368, "user_id": 385966, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?s=128&d=identicon&r=PG", "display_name": "sgrif", "link": "https://stackoverflow.com/users/385966/sgrif"}, "is_accepted": false, "score": 6, "last_activity_date": 1521067285, "last_edit_date": 1521067285, "creation_date": 1471431328, "answer_id": 38994672, "question_id": 37993668, "link": "https://stackoverflow.com/questions/37993668/injecting-a-diesel-connection-into-an-iron-middleware/38994672#38994672", "title": "Injecting a Diesel connection into an Iron middleware", "body": "<p><a href=\"https://stackoverflow.com/a/38014778/321731\">This answer</a> will certainly solve the problem, but it's not optimal. As mentioned, you can't share a single connection as it's not thread safe. However, while wrapping it in a <code>Mutex</code> makes it thread-safe, it would force all the server threads to use a <em>single</em> connection. Instead, you want to use a connection pool.</p>\n\n<p>You can accomplish this with the <a href=\"https://crates.io/crates/r2d2\" rel=\"nofollow noreferrer\">r2d2</a> and <a href=\"https://crates.io/crates/r2d2-diesel\" rel=\"nofollow noreferrer\">r2d2-diesel</a> crates. This will establish multiple connections as needed, and reuse them when possible in a thread safe manner. </p>\n"}], "owner": {"reputation": 586, "user_id": 2595915, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/37828cd0104bbc094c6d37dbc667ed84?s=128&d=identicon&r=PG", "display_name": "NeuroXc", "link": "https://stackoverflow.com/users/2595915/neuroxc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1519, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1521067285, "creation_date": 1466690001, "last_edit_date": 1474080880, "question_id": 37993668, "link": "https://stackoverflow.com/questions/37993668/injecting-a-diesel-connection-into-an-iron-middleware", "title": "Injecting a Diesel connection into an Iron middleware", "body": "<p>In writing my tests, I'd like to be able to inject a connection into the request so that I can wrap the entire test case in a transaction (even if there is more than one request in the test case).</p>\n\n<p>I've attempted to do this using a <code>BeforeMiddleware</code> which I can link in my test cases to insert a connection, as such:</p>\n\n<pre><code>pub type DatabaseConnection = PooledConnection&lt;ConnectionManager&lt;PgConnection&gt;&gt;;\n\npub struct DatabaseOverride {\n    conn: DatabaseConnection,\n}\n\nimpl BeforeMiddleware for DatabaseOverride {\n    fn before(&amp;self, req: &amp;mut Request) -&gt; IronResult&lt;()&gt; {\n        req.extensions_mut().entry::&lt;DatabaseOverride&gt;().or_insert(self.conn);\n        Ok(())\n    }\n}\n</code></pre>\n\n<p>However, I'm encountering a compile error in trying to do this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the trait bound `std::rc::Rc&lt;diesel::pg::connection::raw::RawConnection&gt;: std::marker::Sync` is not satisfied [E0277]\nimpl BeforeMiddleware for DatabaseOverride {\n     ^~~~~~~~~~~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: `std::rc::Rc&lt;diesel::pg::connection::raw::RawConnection&gt;` cannot be shared between threads safely\nnote: required because it appears within the type `diesel::pg::PgConnection`\nnote: required because it appears within the type `r2d2::Conn&lt;diesel::pg::PgConnection&gt;`\nnote: required because it appears within the type `std::option::Option&lt;r2d2::Conn&lt;diesel::pg::PgConnection&gt;&gt;`\nnote: required because it appears within the type `r2d2::PooledConnection&lt;r2d2_diesel::ConnectionManager&lt;diesel::pg::PgConnection&gt;&gt;`\nnote: required because it appears within the type `utility::db::DatabaseOverride`\nnote: required by `iron::BeforeMiddleware`\n\nerror: the trait bound `std::cell::Cell&lt;i32&gt;: std::marker::Sync` is not satisfied [E0277]\nimpl BeforeMiddleware for DatabaseOverride {\n     ^~~~~~~~~~~~~~~~\nhelp: run `rustc --explain E0277` to see a detailed explanation\nnote: `std::cell::Cell&lt;i32&gt;` cannot be shared between threads safely\nnote: required because it appears within the type `diesel::pg::PgConnection`\nnote: required because it appears within the type `r2d2::Conn&lt;diesel::pg::PgConnection&gt;`\nnote: required because it appears within the type `std::option::Option&lt;r2d2::Conn&lt;diesel::pg::PgConnection&gt;&gt;`\nnote: required because it appears within the type `r2d2::PooledConnection&lt;r2d2_diesel::ConnectionManager&lt;diesel::pg::PgConnection&gt;&gt;`\nnote: required because it appears within the type `utility::db::DatabaseOverride`\nnote: required by `iron::BeforeMiddleware`\n</code></pre>\n\n<p>Is there a way around this with diesel's connections? I've found several examples on Github to do this using the <code>pg</code> crate, but I'd like to keep using diesel.</p>\n"}, {"tags": ["string", "reference", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1466691649, "post_id": 37993679, "comment_id": 63432296, "body": "&gt; <code>regex::Captures::iter_named</code> also requires a <code>&amp;&#39;t self</code>, that is, <code>&amp;caps</code> must have lifetime <code>&#39;t</code> (<code>&#39;a</code>). But <a href=\"https://doc.rust-lang.org/regex/regex/struct.Regex.html#method.captures\" rel=\"nofollow noreferrer\">the <code>captures</code> function</a> should return something with a lifetime of <code>&#39;t</code>, right?"}, {"owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "edited": false, "score": 0, "creation_date": 1466694022, "post_id": 37993679, "comment_id": 63434139, "body": "You may not have total answered my question about lifetimes, but you have solved the underlying problem. :)"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1466694422, "last_edit_date": 1466694422, "creation_date": 1466690028, "answer_id": 37993679, "question_id": 37993013, "link": "https://stackoverflow.com/questions/37993013/regex-captures-dont-live-as-long-as-i-think-they-should/37993679#37993679", "title": "Regex captures don&#39;t live as long as I think they should", "body": "<p>Your reasoning is right, but you forgot a detail:</p>\n\n<blockquote>\n  <p><code>regex::Regex::captures</code> return value has a lifetime of <code>'t</code>, which is the same lifetime as the string, in this case, that means <code>'a</code>, the <code>regex::Captures::iter_named</code>* returned value also has the same lifetime of <code>'t</code>, which is <code>'a</code> in this case, and that means the <code>(name, value)</code> for that thing should also be <code>'t</code>, which in this case is <code>'a</code>. </p>\n</blockquote>\n\n<p>* <code>regex::Captures::iter_named</code> also requires a <code>&amp;'t self</code>, that is, <code>&amp;caps</code> must have lifetime <code>'t</code> (<code>'a</code> in this case). </p>\n\n<p>Note that the compiler is not complaining about <code>results</code> but about <code>caps</code>. <code>regex::Regex::captures</code> returns <code>caps: Captures&lt;'a&gt;</code>, that means that caps holds something with lifetime <code>'a</code>. But to call <code>regex::Captures::iter_named</code> it is necessary to have a reference with lifetime <code>'a</code> (<code>iter_named</code> parameter is <code>&amp;'a self = &amp;'a Captures&lt;'a&gt;</code>). <strong>Although <code>caps</code> holds something with lifetime <code>'a</code>, it does not have lifetime <code>'a</code></strong> (the lifetime is only the <code>Some</code> arm).</p>\n\n<hr>\n\n<p>I don't know how <code>iter_named</code> handle capture with empty names, but here is an implementation that returns only named captures:</p>\n\n<pre><code>extern crate regex;\n\nuse std::collections::HashMap;\nuse regex::Regex;\n\nfn get_matches&lt;'a&gt;(line: &amp;'a str, re: &amp;'a Regex) -&gt; HashMap&lt;&amp;'a str, &amp;'a str&gt; {\n    let mut results = HashMap::new();\n\n    match re.captures(line) {\n        None =&gt; {\n            return results;\n        }\n        Some(caps) =&gt; {\n            for name in re.capture_names() {\n                if let Some(name) = name {\n                    if let Some(value) = caps.name(name) {\n                        results.insert(name, value);\n                    }\n                }\n            }\n        }\n    }\n\n    results\n}\n</code></pre>\n\n<p>This maybe slower than <code>iter_named</code>.</p>\n"}], "owner": {"reputation": 48136, "user_id": 161922, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/16e12e337f6edc3750681492656097ed?s=128&d=identicon&r=PG", "display_name": "Rory", "link": "https://stackoverflow.com/users/161922/rory"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 1, "accepted_answer_id": 37993679, "answer_count": 1, "score": 4, "last_activity_date": 1466698489, "creation_date": 1466688372, "last_edit_date": 1466698489, "question_id": 37993013, "link": "https://stackoverflow.com/questions/37993013/regex-captures-dont-live-as-long-as-i-think-they-should", "title": "Regex captures don&#39;t live as long as I think they should", "body": "<p>I'm trying to write a Rust function that takes a regex, and a string/str and returns a <code>HashMap</code> of all the named captures in that regex. Here's the code:</p>\n\n<pre><code>use std::collections::HashMap;\nuse regex::Regex;\n\nfn get_matches&lt;'a&gt;(line: &amp;'a str, re: &amp;Regex) -&gt; HashMap&lt;&amp;'a str, &amp;'a str&gt; {\n    let mut results = HashMap::new();\n\n    match re.captures(line) {\n        None =&gt; { return results; },\n        Some(caps) =&gt; {\n            for (name, value) in caps.iter_named() {\n                if let Some(value) = value {\n                    results.insert(name, value);\n                }\n            }\n        }\n    }\n\n    results\n}\n</code></pre>\n\n<p>And I get this compiler error (Rust 1.9.0):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `caps` does not live long enough\n      for (name, value) in caps.iter_named() {\n                           ^~~~\nnote: reference must be valid for the lifetime 'a as defined on the block at 6:79...\n    fn get_matches&lt;'a&gt;(line: &amp;'a str, re: &amp;Regex) -&gt; HashMap&lt;&amp;'a str, &amp;'a str&gt; {\n        let mut results = HashMap::new();\n\n        match re.captures(line) {\n            None =&gt; { return results; },\n            Some(caps) =&gt; {\n    ...\nnote: ...but borrowed value is only valid for the match at 9:8\n        match re.captures(line) {\n            None =&gt; { return results; },\n            Some(caps) =&gt; {\n                for (name, value) in caps.iter_named() {\n                    if let Some(value) = value {\n                        results.insert(name, value);\n        ...\n</code></pre>\n\n<p>However, I don't understand. <a href=\"https://doc.rust-lang.org/regex/regex/struct.Regex.html#method.captures\" rel=\"nofollow\"><code>regex::Regex::captures</code> return value has a lifetime of <code>'t</code>, which is the same lifetime as the string</a>, in this case, that means <code>'a'</code>, the <a href=\"https://doc.rust-lang.org/regex/regex/struct.Captures.html#method.iter_named\" rel=\"nofollow\"><code>regex::Captures::iter_named</code> returned value also has the same lifetime of <code>'t</code></a>, which is <code>'a</code> in this case, and that means the <a href=\"https://doc.rust-lang.org/regex/regex/struct.SubCapturesNamed.html\" rel=\"nofollow\"><code>(name, value)</code> for that thing</a> should also be <code>'t</code>, which in this case is <code>'a</code>.</p>\n\n<p>My function definition has a <code>HashMap</code> that uses that <code>'a</code> lifetime, so shouldn't it all Just Work(tm)? I think I understand why you can't use a local variable, unless you return it, but in this case, I'm using references which should live long enough, right?</p>\n\n<p>I suppose I could <code>.clone()</code> everything to <code>String</code>, but I'm curious if I can write this with just references. Isn't that supposed to be more efficient? I'm a little new to Rust, so I'm trying to grok things and do things in a proper, advanced way.</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 1, "last_activity_date": 1466687082, "creation_date": 1466687082, "answer_id": 37992510, "question_id": 37992440, "link": "https://stackoverflow.com/questions/37992440/borrowed-value-does-not-live-long-enough-string-slice-into-hashmap/37992510#37992510", "title": "Borrowed value does not live long enough - string slice into HashMap", "body": "<p>The strings needs an owner:</p>\n\n<pre><code>fn lyrics_more_bottles(song_template:&amp;mut String, number:i32){\n    let mut start_bottles = format!(\"{} bottles\", number); // own them as `String`\n    let mut remaining_num = format!(\"{} bottles\", number);\n    let mut template_partials:HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n\n    template_partials.insert(\"start\", &amp;start_bottles); // &amp;String -&gt; &amp;str is implicit\n    template_partials.insert(\"repeat\", &amp;start_bottles);\n    template_partials.insert(\"remaining\", &amp;remaining_num);\n    template_partials.insert(\"message\", \"Take one down and pass it around\");\n\n    resolve_template(song_template, template_partials);\n}\n</code></pre>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 620, "favorite_count": 0, "accepted_answer_id": 37992510, "answer_count": 1, "score": 0, "last_activity_date": 1466687082, "creation_date": 1466686901, "question_id": 37992440, "link": "https://stackoverflow.com/questions/37992440/borrowed-value-does-not-live-long-enough-string-slice-into-hashmap", "title": "Borrowed value does not live long enough - string slice into HashMap", "body": "<p>I can't get my function to be compiled. It always complains about the borrowed value not living long enough. I already switched order of the HashMap with the string slices because I thought destruction order would affect that the HashMap would live one step longer than the string slices put in. But even after the change it still does not work:</p>\n\n<p><strong>CODE</strong></p>\n\n<pre><code>fn lyrics_more_bottles(song_template:&amp;mut String, number:i32){\n    let mut start_bottles:&amp;str = format!(\"{} bottles\", number).as_str();\n    let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\n    let mut template_partials:HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\n\n    template_partials.insert(\"start\", start_bottles);\n    template_partials.insert(\"repeat\", start_bottles);\n    template_partials.insert(\"remaining\", remaining_num);\n    template_partials.insert(\"message\", \"Take one down and pass it around\");\n\n    resolve_template(song_template, template_partials);\n}\n</code></pre>\n\n<p>ERROR_MSG:</p>\n\n<pre><code>lib.rs:45:34: 45:63 error: borrowed value does not live long enough\nlib.rs:45     let mut start_bottles:&amp;str = format!(\"{} bottles\", number).as_str();\n                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlib.rs:45:34: 45:63 note: in this expansion of format! (defined in &lt;std macros&gt;)\nlib.rs:45:73: 55:2 note: reference must be valid for the block suffix following statement 0 at 45:72...\nlib.rs:45     let mut start_bottles:&amp;str = format!(\"{} bottles\", number).as_str();\nlib.rs:46     let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\nlib.rs:47     let mut template_partials:HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\nlib.rs:48 \nlib.rs:49     template_partials.insert(\"start\", start_bottles);\nlib.rs:50     template_partials.insert(\"repeat\", start_bottles);\n          ...\nlib.rs:45:5: 45:73 note: ...but borrowed value is only valid for the statement at 45:4\nlib.rs:45     let mut start_bottles:&amp;str = format!(\"{} bottles\", number).as_str();\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlib.rs:45:5: 45:73 help: consider using a `let` binding to increase its lifetime\nlib.rs:45     let mut start_bottles:&amp;str = format!(\"{} bottles\", number).as_str();\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlib.rs:46:34: 46:63 error: borrowed value does not live long enough\nlib.rs:46     let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\n                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlib.rs:46:34: 46:63 note: in this expansion of format! (defined in &lt;std macros&gt;)\nlib.rs:46:73: 55:2 note: reference must be valid for the block suffix following statement 1 at 46:72...\nlib.rs:46     let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\nlib.rs:47     let mut template_partials:HashMap&lt;&amp;str, &amp;str&gt; = HashMap::new();\nlib.rs:48 \nlib.rs:49     template_partials.insert(\"start\", start_bottles);\nlib.rs:50     template_partials.insert(\"repeat\", start_bottles);\nlib.rs:51     template_partials.insert(\"remaining\", remaining_num);\n          ...\nlib.rs:46:5: 46:73 note: ...but borrowed value is only valid for the statement at 46:4\nlib.rs:46     let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nlib.rs:46:5: 46:73 help: consider using a `let` binding to increase its lifetime\nlib.rs:46     let mut remaining_num:&amp;str = format!(\"{} bottles\", number).as_str();\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust", "mutable", "borrowing"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 8, "last_activity_date": 1466673059, "creation_date": 1466673059, "answer_id": 37987151, "question_id": 37986640, "link": "https://stackoverflow.com/questions/37986640/cannot-obtain-a-mutable-reference-when-iterating-a-recursive-structure-cannot-b/37987151#37987151", "title": "Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time", "body": "<p>You can use recursion to satisfy the borrow checker. This has the disadvantage of creating a stack frame for every item in your list. If your list is long, this will definitely run into a stack overflow. LLVM will optimize the <code>Node::back</code> method into a loop (see the LLVM IR generated on the <a href=\"https://play.rust-lang.org/?gist=eed22f0922b5d137e44b5eb4c1685ff1&amp;version=nightly&amp;backtrace=0\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre><code>impl Node {\n    fn back(&amp;mut self) -&gt; &amp;mut Link {\n        match self.next {\n            Some(ref mut node) =&gt; node.back(),\n            None =&gt; &amp;mut self.next,\n        }\n    }\n}\n\nimpl Recursive {\n    fn back(&amp;mut self) -&gt; Option&lt;&amp;mut Link&gt; {\n        self.root.as_mut().map(|node| node.back())\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2866, "user_id": 1522056, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/OJh0k.jpg?s=128&g=1", "display_name": "Fabian Knorr", "link": "https://stackoverflow.com/users/1522056/fabian-knorr"}, "edited": false, "score": 0, "creation_date": 1466673538, "post_id": 37987197, "comment_id": 63418886, "body": "Awesome! Just so that I understand what&#39;s happening here: 1) <code>anchor</code> has the initial reference 2) <code>tmp</code> is moved from <code>anchor</code>, which means that <code>anchor</code> ist not a reference any more 3) <code>tmp</code> can be safely borrowed from as it is dropped as soon as the loop iteration ends"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2866, "user_id": 1522056, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/OJh0k.jpg?s=128&g=1", "display_name": "Fabian Knorr", "link": "https://stackoverflow.com/users/1522056/fabian-knorr"}, "edited": false, "score": 1, "creation_date": 1466673814, "post_id": 37987197, "comment_id": 63419074, "body": "The most awesome, here, is that I initially forgot the <code>anchor = tmp;</code> in the <code>else</code> branch and rustc raised an error for it... anyway, yes the idea is that you cannot re-assign <code>anchor</code> while it is borrowed, so we transfer the reference to <code>tmp</code> and then borrow <code>tmp</code> to assign <code>anchor</code>."}, {"owner": {"reputation": 2866, "user_id": 1522056, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/OJh0k.jpg?s=128&g=1", "display_name": "Fabian Knorr", "link": "https://stackoverflow.com/users/1522056/fabian-knorr"}, "edited": false, "score": 0, "creation_date": 1466674531, "post_id": 37987197, "comment_id": 63419566, "body": "This can actually be written pretty concisely because we can call <code>is_some()</code> on <code>anchor</code> before moving it. I&#39;ve edited your post."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1466676062, "post_id": 37987197, "comment_id": 63420678, "body": "Here&#39;s a version of your solution without temporaries or unwrap: <a href=\"https://play.rust-lang.org/?gist=2018fad3cac6c2fd9bdf62e211433ee6&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2866, "user_id": 1522056, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/OJh0k.jpg?s=128&g=1", "display_name": "Fabian Knorr", "link": "https://stackoverflow.com/users/1522056/fabian-knorr"}, "edited": false, "score": 2, "creation_date": 1466682927, "post_id": 37987197, "comment_id": 63425394, "body": "@FabianKnorr: I don&#39;t like using <code>unwrap</code> where I can avoid it, because while it is safe, it&#39;s also a source of (potential) crash."}, {"owner": {"reputation": 4235, "user_id": 210029, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/5603b531354ca5e45c7adebaf6a7bdd3?s=128&d=identicon&r=PG&f=1", "display_name": "Marcus", "link": "https://stackoverflow.com/users/210029/marcus"}, "edited": false, "score": 0, "creation_date": 1602966290, "post_id": 37987197, "comment_id": 113888690, "body": "As of Oct/2020, the <code>&amp;mut</code> in front of <code>Some</code> (in the second version) is not needed. Was it ever needed and/or does it have some illustrative purpose?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4235, "user_id": 210029, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/5603b531354ca5e45c7adebaf6a7bdd3?s=128&d=identicon&r=PG&f=1", "display_name": "Marcus", "link": "https://stackoverflow.com/users/210029/marcus"}, "edited": false, "score": 0, "creation_date": 1603021052, "post_id": 37987197, "comment_id": 113898635, "body": "@Marcus: It was needed before <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2005-match-ergonomics.md\" rel=\"nofollow noreferrer\">Match Ergonomics</a> was implemented. It&#39;s still valid, because that&#39;s what <i>really</i> happens behind the scenes."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 21, "last_activity_date": 1530383296, "last_edit_date": 1530383296, "creation_date": 1466673168, "answer_id": 37987197, "question_id": 37986640, "link": "https://stackoverflow.com/questions/37986640/cannot-obtain-a-mutable-reference-when-iterating-a-recursive-structure-cannot-b/37987197#37987197", "title": "Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time", "body": "<p>It is possible... but I wish I had a more elegant solution.</p>\n\n<p>The trick is NOT to borrow from <code>anchor</code>, and therefore to juggle between two accumulators:</p>\n\n<ul>\n<li>one holding the reference to the current node</li>\n<li>the other being assigned the reference to the next node</li>\n</ul>\n\n<p>This leads me to:</p>\n\n<pre><code>impl Recursive {\n    fn back(&amp;mut self) -&gt; &amp;mut Link {\n        let mut anchor = &amp;mut self.root;\n\n        loop {\n            let tmp = anchor;\n            if let Some(ref mut node) = *tmp {\n                anchor = &amp;mut node.next;\n            } else {\n                anchor = tmp;\n                break;\n            }\n        }\n\n        anchor\n    }\n}\n</code></pre>\n\n<p>Not exactly pretty, but this is something the borrow checker can get behind so \u00af\\_(\u30c4)_/\u00af.</p>\n\n<p>@ker has improved on this by creating an unnamed temporary:</p>\n\n<pre><code>impl Recursive {\n    fn back(&amp;mut self) -&gt; &amp;mut Link {\n        let mut anchor = &amp;mut self.root;\n\n        loop {\n            match {anchor} {\n                &amp;mut Some(ref mut node) =&gt; anchor = &amp;mut node.next,\n                other =&gt; return other,\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The trick here is that using <code>{anchor}</code> <em>moves</em> the content of <code>anchor</code> into an unnamed temporary on which the match executes. Therefore, in the <code>match</code> block we are not borrowing from <code>anchor</code> but from the temporary, leaving us free to modify <code>anchor</code>. See the related blog post <a href=\"https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/\" rel=\"noreferrer\">Stuff the Identity Function Does (in Rust)</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1466675249, "creation_date": 1466675249, "answer_id": 37988032, "question_id": 37986640, "link": "https://stackoverflow.com/questions/37986640/cannot-obtain-a-mutable-reference-when-iterating-a-recursive-structure-cannot-b/37988032#37988032", "title": "Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time", "body": "<p>It works:</p>\n\n<pre><code>fn back(&amp;mut self) -&gt; &amp;mut Link {\n    let mut anchor = &amp;mut self.root;\n    while anchor.is_some(){\n        anchor = &amp;mut {anchor}.as_mut().unwrap().next;\n    }\n    anchor\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1574258810, "last_edit_date": 1574258810, "creation_date": 1526660913, "answer_id": 50415664, "question_id": 37986640, "link": "https://stackoverflow.com/questions/37986640/cannot-obtain-a-mutable-reference-when-iterating-a-recursive-structure-cannot-b/50415664#50415664", "title": "Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time", "body": "<p>The original code works as-is once <a href=\"https://stackoverflow.com/q/50251487/155423\">non-lexical lifetimes</a> are enabled:</p>\n\n<pre><code>type Link = Option&lt;Box&lt;Node&gt;&gt;;\n\nstruct Node {\n    next: Link,\n}\n\nstruct Recursive {\n    root: Link,\n}\n\nimpl Recursive {\n    fn back(&amp;mut self) -&gt; &amp;mut Link {\n        let mut anchor = &amp;mut self.root;\n        while let Some(node) = anchor {\n            anchor = &amp;mut node.next;\n        }\n        anchor\n    }\n}\n</code></pre>\n\n<p>Non-lexical lifetimes increases the precision of the compiler's borrow checker, allowing it to see that the mutable borrow of <code>anchor</code> is no longer used. We can also simplify the keywords in the <code>if let</code> due to recent language changes.</p>\n"}], "owner": {"reputation": 2866, "user_id": 1522056, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/OJh0k.jpg?s=128&g=1", "display_name": "Fabian Knorr", "link": "https://stackoverflow.com/users/1522056/fabian-knorr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3828, "favorite_count": 6, "accepted_answer_id": 37987197, "answer_count": 4, "score": 24, "last_activity_date": 1574258810, "creation_date": 1466671854, "last_edit_date": 1520887558, "question_id": 37986640, "link": "https://stackoverflow.com/questions/37986640/cannot-obtain-a-mutable-reference-when-iterating-a-recursive-structure-cannot-b", "title": "Cannot obtain a mutable reference when iterating a recursive structure: cannot borrow as mutable more than once at a time", "body": "<p>I'm trying to navigate a recursive data structure iteratively in order to insert elements at a certain position. To my limited understanding, this means taking a mutable reference to the root of the structure and successively replacing it by a reference to its follower:</p>\n\n<pre><code>type Link = Option&lt;Box&lt;Node&gt;&gt;;\n\nstruct Node {\n    next: Link\n}\n\nstruct Recursive {\n    root: Link\n}\n\nimpl Recursive {\n    fn back(&amp;mut self) -&gt; &amp;mut Link {\n        let mut anchor = &amp;mut self.root;\n        while let Some(ref mut node) = *anchor {\n            anchor = &amp;mut node.next;\n        }\n        anchor\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=119706859a0013c7f11dd8ad9c284386&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">(Rust playground link)</a></p>\n\n<p>However, this fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `anchor.0` as mutable more than once at a time\n  --&gt; src/main.rs:14:24\n   |\n14 |         while let Some(ref mut node) = *anchor {\n   |                        ^^^^^^^^^^^^\n   |                        |\n   |                        second mutable borrow occurs here\n   |                        first mutable borrow occurs here\n...\n18 |     }\n   |     - first borrow ends here\n\nerror[E0506]: cannot assign to `anchor` because it is borrowed\n  --&gt; src/main.rs:15:13\n   |\n14 |         while let Some(ref mut node) = *anchor {\n   |                        ------------ borrow of `anchor` occurs here\n15 |             anchor = &amp;mut node.next;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `anchor` occurs here\n\nerror[E0499]: cannot borrow `*anchor` as mutable more than once at a time\n  --&gt; src/main.rs:17:9\n   |\n14 |         while let Some(ref mut node) = *anchor {\n   |                        ------------ first mutable borrow occurs here\n...\n17 |         anchor\n   |         ^^^^^^ second mutable borrow occurs here\n18 |     }\n   |     - first borrow ends here\n</code></pre>\n\n<p>This makes sense as both <code>anchor</code> and <code>node</code> refer to the same structure, but I actually don't care about <code>anchor</code> any more after destructuring it.</p>\n\n<p>How could <code>back()</code> be implemented correctly using safe Rust?</p>\n"}, {"tags": ["json", "rust", "serde"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1466672140, "post_id": 37986118, "comment_id": 63417931, "body": "why are you using <code>git</code> dependencies? you should be using them through crates.io."}, {"owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1466672926, "post_id": 37986118, "comment_id": 63418462, "body": "Because if I use crate: I get another error. @ker I have now updated the question."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1466674923, "post_id": 37986118, "comment_id": 63419843, "body": "run <code>cargo update</code> (the issue you are seeing was fixed yesterday, and only occurs on nightly) or use the stable compiler"}], "answers": [{"tags": [], "owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "is_accepted": false, "score": 2, "last_activity_date": 1501166690, "creation_date": 1501166690, "answer_id": 45354119, "question_id": 37986118, "link": "https://stackoverflow.com/questions/37986118/trait-bound-serialize-is-not-satisfied-even-though-the-type-has-deriveserialize/45354119#45354119", "title": "Trait bound Serialize is not satisfied even though the type has derive(Serialize)", "body": "<p>As of <code>rustc 1.20.0-nightly</code>, <code>serde 1.0.11</code> and <code>serde-json 1.0.2</code>, this code compiles without a problem. </p>\n\n<p>On a side note, you really should use crates.io dependencies instead of git ones.</p>\n"}], "owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1224, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1538856839, "creation_date": 1466670537, "last_edit_date": 1538856839, "question_id": 37986118, "link": "https://stackoverflow.com/questions/37986118/trait-bound-serialize-is-not-satisfied-even-though-the-type-has-deriveserialize", "title": "Trait bound Serialize is not satisfied even though the type has derive(Serialize)", "body": "<p>I'm trying to serialize JSON using serde macros but I only get this error:</p>\n\n<pre><code>src/models/pulse.rs:89:28: 89:49 error: the trait bound `models::pulse::Pulse: serde::ser::Serialize` is not satisfied [E0277]\nsrc/models/pulse.rs:89      if let Ok(bulk_string) = serde_json::to_string(&amp;self) {\n                                                     ^~~~~~~~~~~~~~~~~~~~~\nsrc/models/pulse.rs:89:28: 89:49 help: run `rustc --explain E0277` to see a detailed explanation\nsrc/models/pulse.rs:89:28: 89:49 note: required because of the requirements on the impl of `serde::ser::Serialize` for `&amp;mut models::pulse::Pulse`\nsrc/models/pulse.rs:89:28: 89:49 note: required by `serde_json::to_string`\n</code></pre>\n\n<p>I don't seem to have anything wrong in the code.</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\npub struct Pulse {\n    #[serde(skip_serializing_if=\"Option::is_none\")]\n    id: Option&lt;u64&gt;,\n\n    #[serde(skip_serializing_if=\"Option::is_none\")]\n    category: Option&lt;i64&gt;,\n\n    #[serde(skip_serializing_if=\"Option::is_none\")]\n    title: Option&lt;String&gt;,\n\n}\n</code></pre>\n\n<p>Is it an dependency error? Or is the something wrong with my code? I use </p>\n\n<pre><code>[dependencies.serde]\ngit = \"https://github.com/serde-rs/serde.git\"\n[dependencies.serde_macros]\ngit = \"https://github.com/serde-rs/serde.git\"\n[dependencies.serde_json]\ngit = \"https://github.com/serde-rs/json.git\"\n</code></pre>\n\n<p>I got a question why I use git dependencies. The reason is that I get:</p>\n\n<pre><code>/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-\n\n0.18.0/src/mac.rs:6:5: 6:39 error: unresolved import `syntax::feature_gate::GatedCfgAttr`. There is no `GatedCfgAttr` in `syntax::feature_gate`. Did you mean to use `GatedCfg`? [E0432]\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:6 use syntax::feature_gate::GatedCfgAttr;\n                                                                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:6:5: 6:39 help: run `rustc --explain E0432` to see a detailed explanation\n   Compiling num-traits v0.1.32\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:113:18: 113:81 error: this function takes 4 parameters but 5 parameters were supplied [E0061]\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:113     let mut cx = ExtCtxt::new(sess, cfg, ecfg, feature_gated_cfgs, macro_loader);\n                                                                                                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:113:18: 113:81 help: run `rustc --explain E0061` to see a detailed explanation\n/.cargo/registry/src/github.com-1ecc6299db9ec823/aster-0.18.0/src/mac.rs:113:18: 113:81 note: the following parameter types were expected: &amp;syntax::parse::ParseSess, std::vec::Vec&lt;syntax::ptr::P&lt;syntax::codemap::Spanned&lt;syntax::ast::MetaItemKind&gt;&gt;&gt;, syntax::ext::expand::ExpansionConfig&lt;'_&gt;, &amp;mut syntax::ext::base::MacroLoader\n</code></pre>\n\n<p>I think the problem could be that you need to use nightly.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 1298, "user_id": 5359024, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d1759b2f59cd77b2fc7fb059f0679312?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/5359024/michael-pittino"}, "is_accepted": false, "score": 0, "last_activity_date": 1466667891, "creation_date": 1466667891, "answer_id": 37985233, "question_id": 37984922, "link": "https://stackoverflow.com/questions/37984922/build-only-lib-target/37985233#37985233", "title": "Build only `lib` target", "body": "<p>Just figured it: Rename the <code>src/main.rs</code> to <code>src/lib.rs</code> and it only builds the <code>lib</code> target!</p>\n"}, {"comments": [{"owner": {"reputation": 1298, "user_id": 5359024, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d1759b2f59cd77b2fc7fb059f0679312?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/5359024/michael-pittino"}, "edited": false, "score": 0, "creation_date": 1466699966, "post_id": 37995767, "comment_id": 63438257, "body": "That answer is way more informative than mine, thanks :)"}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 1, "last_activity_date": 1466698877, "last_edit_date": 1466698877, "creation_date": 1466695332, "answer_id": 37995767, "question_id": 37984922, "link": "https://stackoverflow.com/questions/37984922/build-only-lib-target/37995767#37995767", "title": "Build only `lib` target", "body": "<p>Cargo builds files using convention over configuration approach. When it finds a <code>main.rs</code> it builds an executable, and when it encounters <code>lib.rs</code> it expects to build a library.</p>\n\n<p>Calling your lib <code>main</code> managed to confuse Cargo. The only solution I managed to find is to either change name of your crate from <code>name = \"main\"</code> to <code>name = \"foo\"</code> (and then rename your <code>main.rs</code> into <code>foo.rs</code>) or to change its name to <code>lib.rs</code>, as you did.</p>\n"}], "owner": {"reputation": 1298, "user_id": 5359024, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d1759b2f59cd77b2fc7fb059f0679312?s=128&d=identicon&r=PG&f=1", "display_name": "Michael Pittino", "link": "https://stackoverflow.com/users/5359024/michael-pittino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 286, "favorite_count": 0, "accepted_answer_id": 37995767, "answer_count": 2, "score": 0, "last_activity_date": 1466698877, "creation_date": 1466666957, "last_edit_date": 1466667439, "question_id": 37984922, "link": "https://stackoverflow.com/questions/37984922/build-only-lib-target", "title": "Build only `lib` target", "body": "<p>I want to build a dynamic link library (<code>dll</code>).<br>\nMy <code>Cargo.toml</code> currently looks like this: </p>\n\n<pre><code>[package]\nname = \"sample\"\nversion = \"0.1.0\"\nauthors = [\"author\"]\n\n[lib]\nname = \"main\"\ncrate-type = [\"dylib\"]\n\n[dependencies]\n</code></pre>\n\n<p>I use VS Code with the <code>RustyCode</code> plugin as my IDE on windows.\nWhen I run the build command this builds into a <code>sample.exe</code> and <code>main.dll</code>.<br>\nI know I can run <code>cargo build --lib</code> to only build my <code>lib</code> target but I dont have access to this command inside VS Code (afaik).\nIs there anyway to specify that I only want to build the <code>lib</code> target in my <code>Cargo.toml</code> file so I can use the VS Code build command which runs <code>cargo build</code>/<code>cargo run</code>?</p>\n"}]