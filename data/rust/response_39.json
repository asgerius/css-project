[{"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1444270709, "last_edit_date": 1444270709, "creation_date": 1444255010, "answer_id": 33003084, "question_id": 33003020, "link": "https://stackoverflow.com/questions/33003020/cannot-display-a-socketaddr-returned-by-peer-addr/33003084#33003084", "title": "Cannot display a SocketAddr returned by peer_addr()", "body": "<p>If you read the compiler error carefully you can see, that your variable is of the type <code>core::result::Result&lt;std::net::addr::SocketAddr, std::io::error::Error&gt;</code>. You need to get the <code>SocketAddr</code> out of there. Sadly, the <a href=\"https://doc.rust-lang.org/std/net/struct.TcpStream.html#method.peer_addr\" rel=\"nofollow\">documentation</a> does not specify when an <code>Err</code> value is returned. The easiest solution:</p>\n\n<pre><code>println!(\"New client {}\", stream.peer_addr().unwrap());\n</code></pre>\n\n<p>Of course <code>unwrap()</code> is evil and you should do proper error handling here!</p>\n"}], "owner": {"reputation": 93, "user_id": 5298807, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e4981d06c6ca1e77d7729cd3d0a83d96?s=128&d=identicon&r=PG&f=1", "display_name": "Embedded Android", "link": "https://stackoverflow.com/users/5298807/embedded-android"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 355, "favorite_count": 0, "accepted_answer_id": 33003084, "answer_count": 1, "score": 0, "last_activity_date": 1444270709, "creation_date": 1444254759, "question_id": 33003020, "link": "https://stackoverflow.com/questions/33003020/cannot-display-a-socketaddr-returned-by-peer-addr", "title": "Cannot display a SocketAddr returned by peer_addr()", "body": "<p>I'm trying to print the address returned by peer_addr() of a TcpStream but Rust gives the error:</p>\n\n<blockquote>\n  <p>error: the trait <code>core::fmt::Display</code> is not implemented for the type <code>core::result::Result&lt;std::net::addr::SocketAddr, std::io::error::Error&gt;</code> [E0277]\n  src/main.rs:29     format!(\"New client {}\", stream.peer_addr());</p>\n</blockquote>\n\n<p>According to the <a href=\"https://doc.rust-lang.org/std/net/enum.SocketAddr.html\" rel=\"nofollow\">documentation</a> Display is implemented.</p>\n\n<p>Code is as follows:</p>\n\n<pre><code>use std::net::{TcpListener, TcpStream};\nuse std::thread;\n\nfn main()\n{\n    let listener = TcpListener::bind(\"127.0.0.1:80\").unwrap();\n\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) =&gt; {\n                thread::spawn(move|| {\n                    // connection succeeded\n                    handle_client(stream)\n                });\n            }\n            Err(e) =&gt; {\n                println!(\"Accept err {}\", e);\n            }\n        }\n    }\n\n    // close the socket server\n    drop(listener);\n}\n\nfn handle_client(stream: TcpStream) {\n    println!(\"New client {}\", stream.peer_addr());\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1444233100, "post_id": 32996686, "comment_id": 53818474, "body": "However, a clone is not necessarily cheap. If possible, other methods should be preferred here..."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1444233856, "post_id": 32996686, "comment_id": 53819008, "body": "@LukasKalbertodt: I realized with this method, I could take out the extra clone in the lambda. After doing that, don&#39;t we end up with the same number of clones as when using the <code>as_ref</code> method? Namely, one?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1444234361, "post_id": 32996686, "comment_id": 53819350, "body": "Absolutely true. I just thought that the <code>clone</code> inside the  lambda was just an example and OP might want to change it to something more sensible. Currently the <code>and_then</code> in your answer does nothing... :/"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1444234561, "post_id": 32996686, "comment_id": 53819481, "body": "@LukasKalbertodt: Well I figured that too. In order to do something similar to what he was doing with his integer example, he might do something like <code>f + &quot;one&quot;</code>, or some other modifying operation on the string. Either way, you need to clone the String at some point. I&#39;m just doing it earlier."}], "tags": [], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "is_accepted": false, "score": 0, "last_activity_date": 1444233293, "last_edit_date": 1444233293, "creation_date": 1444232632, "answer_id": 32996686, "question_id": 32996364, "link": "https://stackoverflow.com/questions/32996364/is-there-a-way-to-shorten-match-expressions-of-non-copy-types-using-optionand/32996686#32996686", "title": "Is there a way to shorten match expressions of non-Copy types using Option::and_then?", "body": "<p>You could just clone foo, and call <code>and_then</code> on the result.</p>\n\n<pre><code>let bar = foo.clone().and_then (|f| Some (f));\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1536705960, "last_edit_date": 1536705960, "creation_date": 1444232739, "answer_id": 32996734, "question_id": 32996364, "link": "https://stackoverflow.com/questions/32996364/is-there-a-way-to-shorten-match-expressions-of-non-copy-types-using-optionand/32996734#32996734", "title": "Is there a way to shorten match expressions of non-Copy types using Option::and_then?", "body": "<p>You want to use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>Option::as_ref</code></a>:</p>\n\n<pre><code>fn main() {\n    let foo = Some(\"bla\".to_string());\n    let bar = foo.as_ref().and_then(|f| Some(f.clone()));\n    println!(\"Foo: {:?}\", foo);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 14, "last_activity_date": 1536706005, "last_edit_date": 1536706005, "creation_date": 1444232817, "answer_id": 32996757, "question_id": 32996364, "link": "https://stackoverflow.com/questions/32996364/is-there-a-way-to-shorten-match-expressions-of-non-copy-types-using-optionand/32996757#32996757", "title": "Is there a way to shorten match expressions of non-Copy types using Option::and_then?", "body": "<h3>Explanation</h3>\n\n<p>First of all: The method you actually want to use is <code>map</code> here, since you only want to change the inner value. <code>and_then</code> is useful if you create another <code>Option</code> in the closure.</p>\n\n<p>To answer your question: It's correct that you can't access <code>foo</code> anymore. If you look at the function declaration...</p>\n\n<pre><code>fn and_then&lt;U, F: FnOnce(T) -&gt; Option&lt;U&gt;&gt;(self, f: F) -&gt; Option&lt;U&gt;\n//                                        ^^^^\n</code></pre>\n\n<p>... you see that the first argument is <code>self</code>. This means that the method consumes <code>self</code> (acquires the ownership) so <code>foo</code> is moved into the method and can't be used anymore.</p>\n\n<h3>Solution</h3>\n\n<p>If you only need <code>bar</code> afterwards (which is usually the case), you should just print <code>bar</code>. If you really need <code>foo</code>, too, you can do this:</p>\n\n<pre><code>let bar = foo.as_ref().map(|s| s.clone());\n</code></pre>\n\n<p><code>as_ref</code> creates a new <code>Option</code> that only holds a reference to the original inner variable. References are <code>Copy</code> types, so that <code>Option</code> can be safely consumed by <code>map</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 0, "last_activity_date": 1444250055, "creation_date": 1444250055, "answer_id": 33001968, "question_id": 32996364, "link": "https://stackoverflow.com/questions/32996364/is-there-a-way-to-shorten-match-expressions-of-non-copy-types-using-optionand/33001968#33001968", "title": "Is there a way to shorten match expressions of non-Copy types using Option::and_then?", "body": "<p>Option implements Clone which works as you would expect.</p>\n\n<pre><code>let foo = Some(\"bla\".to_string());\nlet bar = foo.clone();\n</code></pre>\n"}], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1759, "favorite_count": 0, "accepted_answer_id": 32996757, "answer_count": 4, "score": 9, "last_activity_date": 1536706005, "creation_date": 1444231739, "last_edit_date": 1536705916, "question_id": 32996364, "link": "https://stackoverflow.com/questions/32996364/is-there-a-way-to-shorten-match-expressions-of-non-copy-types-using-optionand", "title": "Is there a way to shorten match expressions of non-Copy types using Option::and_then?", "body": "<p>The <code>Option::and_then</code> function allows simplifying this code:</p>\n\n<pre><code>let foo = Some(1);\nlet bar = match foo {\n    Some(i) =&gt; Some(i + 1),\n    None =&gt; None,\n};\nprintln!(\"Foo: {:?}\", foo);\n</code></pre>\n\n<p>into this:</p>\n\n<pre><code>let foo = Some(1);\nlet bar = foo.and_then(|i| Some(i + 1));\nprintln!(\"Foo: {:?}\", foo);\n</code></pre>\n\n<p>If I try the same thing with <code>String</code>s, it doesn't compile:</p>\n\n<pre><code>let foo = Some(\"bla\".to_string());\nlet bar = foo.and_then(|ref f| Some(f.clone()));\nprintln!(\"Foo: {:?}\", foo);\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `foo`\n --&gt; src/main.rs:4:27\n  |\n3 |     let bar = foo.and_then(|ref f| Some(f.clone()));\n  |               --- value moved here\n4 |     println!(\"Foo: {:?}\", foo);\n  |                           ^^^ value used here after move\n  |\n  = note: move occurs because `foo` has type `std::option::Option&lt;std::string::String&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>However, the corresponding <code>match</code> expression works:</p>\n\n<pre><code>let foo = Some(\"bla\".to_string());\nlet bar = match foo {\n    Some(ref f) =&gt; Some(f.clone()),\n    None =&gt; None,\n};\nprintln!(\"Foo: {:?}\", foo);\n</code></pre>\n\n<p>Is there a way to shorten this match expression like my first example with integers?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2e6cd89e667d7e6c0dad6b9be0d0e8ab&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Code on playground</a></p>\n\n<ul>\n<li><p>In this minimal example, I could have used <code>map</code>, but in my real code I'm calling another function that returns an <code>Option</code> so I really need <code>and_then</code>. It's just that I didn't want to over-complicate the example with an extra function that didn't affect the problem.</p></li>\n<li><p>I really need to use <code>foo</code> afterwards, otherwise there wouldn't be any problem (actually, <code>foo</code> is captured by a closure that I need to use more than once, and Man! did I have a hard time tracking down why the compiler kept refusing my code! The error <code>the trait FnMut... is not implemented for the type [closure@...]</code> doesn't give much indication into why it isn't).</p></li>\n<li><p>I used <code>clone</code> in the example because I wanted a simple operation using the string. In the real code, <code>foo</code> is not a string (it's a <code>Regex</code>) and I'm not cloning it in the closure (I'm applying it on a string and processing the results). Moreover, this code will be called a large number of times so avoiding unnecessary allocations and copies is important.</p></li>\n</ul>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 8807, "user_id": 64120, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cc060db2b5331d8cbbfe080cec4add6f?s=128&d=identicon&r=PG", "display_name": "Mark Rendle", "link": "https://stackoverflow.com/users/64120/mark-rendle"}, "edited": false, "score": 1, "creation_date": 1444223338, "post_id": 32991066, "comment_id": 53810789, "body": "Sir, you are a gentleman and a scholar. Great answer. I am in your debt."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1444219091, "last_edit_date": 1444219091, "creation_date": 1444217458, "answer_id": 32991066, "question_id": 32989440, "link": "https://stackoverflow.com/questions/32989440/how-can-i-convert-toml-rs-result-to-stdcollectionshashmap/32991066#32991066", "title": "How can I convert toml-rs result to std::collections::HashMap", "body": "<p>If your data structure has fixed known depth, then all you need is just to pass a correct type to <code>toml::decode()</code>:</p>\n\n<pre><code>let value: toml::Value = toml::Value::Table(Parser::new(input).parse().unwrap());\nlet data: HashMap&lt;String, Vec&lt;u32&gt;&gt; = toml::decode(value).unwrap();\n</code></pre>\n\n<p>The code above would parse a document like</p>\n\n<pre><code>x = [1, 2, 3]\ny = [4, 5, 6]\n</code></pre>\n\n<p>However, as far as I can see, rustache provides some kind of builder structure which supports arbitrary nesting. In that case you would need to \"apply\" <code>toml::Value</code> to <code>rustache::HashBuilder</code>. You don't need to use <code>Decodable</code> for this (though you probably can, with some newtypes) - you just need to write a couple of simple functions:</p>\n\n<pre><code>fn toml_into_hashbuilder&lt;'a&gt;(value: toml::Table, mut hb: rustache::HashBuilder&lt;'a&gt;) -&gt; rustache::HashBuilder&lt;'a&gt; {\n    for (k, v) in value {\n        match v {\n            toml::Value::String(s) =&gt; hb.insert_string(k, s),\n            toml::Value::Integer(i) =&gt; hb.insert_int(k, i),\n            toml::Value::Float(f) =&gt; hb.insert_float(k, f),\n            toml::Value::Boolean(b) =&gt; hb.insert_bool(k, b),\n            toml::Value::Datetime(s) =&gt; hb.insert_string(k, s),\n            toml::Value::Array(arr) =&gt; hb.insert_vector(k, |vb| toml_into_vecbuilder(arr.clone(), vb)),\n            toml::Value::Table(tbl) =&gt; hb.insert_hash(k, |hb| toml_into_hashbuilder(tbl.clone(), hb))\n        }\n    }\n    hb\n}\n\nfn toml_into_vecbuilder&lt;'a&gt;(value: toml::Array, mut vb: rustache::VecBuilder&lt;'a&gt;) -&gt; rustache::VecBuilder&lt;'a&gt; {\n    for v in value {\n        match v {\n            toml::Value::String(s) =&gt; vb.push_string(s),\n            toml::Value::Integer(i) =&gt; vb.push_int(i),\n            toml::Value::Float(f) =&gt; vb.push_float(f),\n            toml::Value::Boolean(b) =&gt; vb.push_bool(b),\n            toml::Value::Datetime(s) =&gt; vb.push_string(s),\n            toml::Value::Array(arr) =&gt; vb.push_vector(|vb| toml_into_vecbuilder(arr.clone(), vb)),\n            toml::Value::Table(tbl) =&gt; vb.push_hash(|hb| toml_into_hashbuilder(tbl.clone(), hb))\n        }\n    }\n    vb\n}\n\nlet value: toml::Table = Parser::new(input).parse().unwrap();\nlet hb = toml_into_hashbuilder(value, rustache::HashBuilder::new());\nlet result = rustache::render_text(your_template, hb);\n</code></pre>\n\n<p>There are unfortunate clones when handling nested tables and arrays - this is a consequence of <a href=\"https://github.com/rustache/rustache/issues/130\">an issue</a> in rustache. If it is fixed, <code>clone()</code> could be removed, and the closures should be made <code>move</code> then.</p>\n"}], "owner": {"reputation": 8807, "user_id": 64120, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cc060db2b5331d8cbbfe080cec4add6f?s=128&d=identicon&r=PG", "display_name": "Mark Rendle", "link": "https://stackoverflow.com/users/64120/mark-rendle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1346, "favorite_count": 1, "accepted_answer_id": 32991066, "answer_count": 1, "score": 6, "last_activity_date": 1460995403, "creation_date": 1444212358, "last_edit_date": 1460995403, "question_id": 32989440, "link": "https://stackoverflow.com/questions/32989440/how-can-i-convert-toml-rs-result-to-stdcollectionshashmap", "title": "How can I convert toml-rs result to std::collections::HashMap", "body": "<p>I'm new to Rust and trying to build something simple to get going. I want to load data from a <code>.toml</code> file and use <a href=\"https://rustache.github.io/\" rel=\"nofollow\">rustache</a> to render out some text from it.</p>\n\n<p>Rustache appears to take a HashMap as its data source, and I'm sure from looking at the <a href=\"http://alexcrichton.com/toml-rs/toml/index.html\" rel=\"nofollow\">toml-rs</a> docs that I should be able to convert its <code>Table</code> and <code>Array</code> types to <code>HashMap</code>s and <code>Vec</code>s, and I suspect it's got something to do with <code>Decoder</code>, but I can't figure it out.</p>\n\n<p>If somebody could provide a short example of how to do this I would be very grateful.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1444241346, "post_id": 32986624, "comment_id": 53823501, "body": "I tried to use this signature: <code>fn rc4&lt;R: Read, W: Write&gt;(key: &amp;[u8], input: R, output: W)</code> but had to change it to <code>fn rc4&lt;R: Read, W: Write&gt;(key: &amp;[u8], input: R, mut output: W)</code> to get it to compile. The signature of <code>write</code> requires a mut borrow of <code>self</code>. The reason I didn&#39;t need a mut borrow of input is because the <code>Read.bytes()</code> iterator does not require self to be mut or even a borrow, for some reason. Not sure how that works."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "edited": false, "score": 0, "creation_date": 1444250031, "post_id": 32986624, "comment_id": 53828731, "body": "Yes, indeed you&#39;re right about <code>mut output</code>. As for why <code>bytes()</code> works, that&#39;s because it <i>consumes</i> the <code>Read</code> instance it is called on. It then can do whatever it wants to, including storing the consumed value inside a mutable slot, making it mutable."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1444250081, "last_edit_date": 1444250081, "creation_date": 1444204249, "answer_id": 32986624, "question_id": 32985838, "link": "https://stackoverflow.com/questions/32985838/allocate-based-on-arguments/32986624#32986624", "title": "Allocate based on arguments", "body": "<p>The following code works:</p>\n\n<pre><code>use std::io;\nuse std::io::{BufReader, Read, Write};\nuse std::fs::File;\n\nfn rc4(key: &amp;[u8], input: &amp;mut Read, output: &amp;mut Write) {\n    // Read and write here                                                                                                                                                                           \n}\n\nfn main() {\n    let mut input: Box&lt;Read&gt; = match Some(\"file-from-parser.txt\") {\n        Some(ifname) =&gt; Box::new(BufReader::new(File::open(ifname).unwrap())),\n        None =&gt; Box::new(io::stdin()),\n    };\n\n    rc4(&amp;[1u8, 2, 3], &amp;mut input, &amp;mut io::stdout());\n}\n</code></pre>\n\n<p>Note that there is absolutely no reason to use <code>borrow_mut()</code> because references to <code>Box</code> pointers are automatically coerced to references to their internals when necessary. Also, it would be more idiomatic to make <code>rc4</code> consume references to generic types instead of trait objects:</p>\n\n<pre><code>fn rc4&lt;R: Read, W: Write&gt;(key: &amp;[u8], input: &amp;mut R, output: &amp;mut W)\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>fn rc4&lt;R: Read, W: Write&gt;(key: &amp;[u8], input: R, output: W)\n</code></pre>\n\n<p>(this works because <code>&amp;mut R</code> is <code>Read</code> if <code>R</code> is <code>Read</code>, and the same thing holds for <code>Write</code>; you would probably need to write <code>mut input: R</code> and/or <code>mut output: W</code> depending on the API you use)</p>\n\n<p>The code above will work without changes with both these signatures.</p>\n\n<p>As for why <code>borrow_mut()</code> does not work, I don't have any ideas. It looks to me that it should work. Maybe this is some kind of interaction with the fact that <code>Box&lt;Read&gt;</code> is a trait object.</p>\n\n<p>Also, there is a way to avoid <code>Box</code> entirely:</p>\n\n<pre><code>fn main() {\n    let mut i1;\n    let mut i2;\n    let mut input: &amp;mut Read = match Some(\"file-from-parser.txt\") {\n        Some(ifname) =&gt; {\n            i1 = BufReader::new(File::open(ifname).unwrap());\n            &amp;mut i1\n        }\n        None =&gt; {\n            i2 = io::stdin();\n            &amp;mut i2\n        }\n    };\n\n    rc4(&amp;[1, 2, 3], input, &amp;mut io::stdout());\n}\n</code></pre>\n\n<p>Here we store each reader in separate variables and return a reference to one of them.</p>\n"}], "owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 32986624, "answer_count": 1, "score": 4, "last_activity_date": 1444250081, "creation_date": 1444201664, "question_id": 32985838, "link": "https://stackoverflow.com/questions/32985838/allocate-based-on-arguments", "title": "Allocate based on arguments", "body": "<p>I'm trying to write a program which takes input from either a file or standard in, depending on whether a command line argument is passed. To do this, I'm using getopts, which allows you to get an <code>Option&lt;String&gt;</code> with the value of the argument. If the value is <code>Some(filename)</code> I want to open that file and create a buffered reader over it. If it's <code>None</code>, I want to set the stream to stdin.</p>\n\n<pre><code>let input: Box&lt;Read&gt; = match matches.opt_str(\"i\") {\n    Some(ifname) =&gt; Box::new(BufReader::new(File::open(ifname).unwrap())),\n    None =&gt; Box::new(io::stdin()),\n};\n</code></pre>\n\n<p>So, the type of input either needs to be <code>&amp;read</code> or <code>Box&lt;Read&gt;</code>, since <code>Stdin</code> and <code>BufReader</code> are incompatible types. Obviously <code>&amp;Read</code> won't work since there's no variable actually owning the object that stays in scope for long enough. So I tried using <code>Box&lt;Read&gt;</code>, but this still gives me an error about <code>input</code> not living long enough.</p>\n\n<p>What would be the rust (rusty? rustic?) way of doing something like this?</p>\n\n<p>MCVE:</p>\n\n<pre><code>use std::io;\nuse std::borrow::BorrowMut;\nuse std::io::{BufReader,BufWriter,Read,Write};\nuse std::fs::File;\n\nfn rc4(key: &amp;[u8], input: &amp;mut Read, output: &amp;mut Write) {\n    // Read and write here                                                                                                                                                                           \n}\n\nfn main() {\n    let mut input: Box&lt;Read&gt; = match Some(\"file-from-parser.txt\") {\n        Some(ifname) =&gt; Box::new(BufReader::new(File::open(ifname).unwrap())),\n        None =&gt; Box::new(io::stdin()),\n    };\n\n    rc4(&amp;[1u8, 2, 3], input.borrow_mut(), &amp;mut io::stdout());\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444174901, "post_id": 32981382, "comment_id": 53788447, "body": "Threads can be started from other threads. There&#39;s no way to statically know which thread is spawning a thread, so the conservative (read <i>safe</i>) solution is to require that all references must have the &#39;static lifetime. Items created in <code>main</code> do not have that lifetime as they are destroyed before main exits."}], "answers": [{"comments": [{"owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "edited": false, "score": 0, "creation_date": 1444513013, "post_id": 32981598, "comment_id": 53938299, "body": "<a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\">Here is the reference</a> to the documentation of <code>std::thread::spawn</code>"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1444175526, "creation_date": 1444175526, "answer_id": 32981598, "question_id": 32981382, "link": "https://stackoverflow.com/questions/32981382/thread-references-require-static-lifetime/32981598#32981598", "title": "Thread references require static lifetime?", "body": "<p>In its essence, the <code>Arc</code> and <code>Mutex</code> wrapping is superfluous: you are passing a reference to something on the local stack. When you spawn a thread with <code>std::thread::spawn</code>, there is nothing linking the lifetimes together; the main thread is quite at liberty to conclude and free anything in it\u2014in this case, including <code>a</code>\u2014before any other threads it spawns even <em>start</em> executing; thus in this case <code>a</code> could refer to freed memory by the time the spawned thread does anything, leaving <code>c_clone</code> as a dangling pointer. This is why the environment of the closure of a spawned thread must be <code>'static</code>.</p>\n"}], "owner": {"reputation": 2567, "user_id": 994206, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/699bacad8f85a069dda312cc29e03baa?s=128&d=identicon&r=PG", "display_name": "Mokosha", "link": "https://stackoverflow.com/users/994206/mokosha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1495, "favorite_count": 0, "accepted_answer_id": 32981598, "answer_count": 1, "score": 4, "last_activity_date": 1444178958, "creation_date": 1444173927, "last_edit_date": 1444178958, "question_id": 32981382, "link": "https://stackoverflow.com/questions/32981382/thread-references-require-static-lifetime", "title": "Thread references require static lifetime?", "body": "<p>While it makes sense intuitively that references passed to spawned threads need to have static lifetimes, I'm unclear about what exactly is making the following code not compile:</p>\n\n<pre><code>use std::sync::Arc;\nuse std::sync::Mutex;\n\nstruct M;\n\nfn do_something(m : Arc&lt;Mutex&lt;&amp;M&gt;&gt;) {\n    println!(\"Ha, do nothing!\");\n}\n\nfn main() {\n    let a = M;\n    {\n        let c : Arc&lt;Mutex&lt;&amp;M&gt;&gt; = Arc::new(Mutex::new(&amp;a));\n        for i in 0..2 {\n            let c_clone = c.clone();\n            ::std::thread::spawn(move || do_something(c_clone));\n        }\n    }\n}\n</code></pre>\n\n<p>Compiling this small program gives the following error:</p>\n\n<pre><code>$ rustc -o test test.rs\ntest.rs:13:55: 13:56 error: `a` does not live long enough\ntest.rs:13         let c : Arc&lt;Mutex&lt;&amp;M&gt;&gt; = Arc::new(Mutex::new(&amp;a));\n                                                             ^\nnote: reference must be valid for the static lifetime...\n</code></pre>\n\n<p>It seems to me that the variable <code>a</code> will out-live <code>c_clone</code>, which is what matters in this case...? Hopefully someone can help me understand what I'm missing!</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1444093360, "post_id": 32959840, "comment_id": 53745338, "body": "I believe it should be possible since there is a <code>concat_idents</code> macro in <code>syntax::ext</code> which creates a new identifier. I tried to do the same thing as the code from this macro, but I get the same error."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "edited": false, "score": 0, "creation_date": 1444117658, "post_id": 32959840, "comment_id": 53753564, "body": "@antoyo: There is a difference between referring to an external identifier and creating a new one; for one thing, in the latter case, you know that the created identifier should be injected in the syntactical scope of the macro."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 4, "last_activity_date": 1444117544, "last_edit_date": 1444117544, "creation_date": 1444090678, "answer_id": 32959840, "question_id": 32959672, "link": "https://stackoverflow.com/questions/32959672/use-a-program-identifier-in-a-syntax-extension/32959840#32959840", "title": "Use a program identifier in a syntax extension", "body": "<p>I don't believe so.  The problem is that in order for you to match the existing <code>name</code> identifier, you <em>need</em> to know its syntax context: identifier equality compares both the textual name <em>and</em> the syntax context exactly.</p>\n\n<p>This is a problem because you are not told, and have no way of knowing, what the surrounding syntax context <em>is</em>.</p>\n\n<p>If you want to refer to it, you <em>have</em> to pass the identifier into the macro.</p>\n"}, {"tags": [], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "is_accepted": false, "score": 0, "last_activity_date": 1444142856, "creation_date": 1444142856, "answer_id": 32972964, "question_id": 32959672, "link": "https://stackoverflow.com/questions/32959672/use-a-program-identifier-in-a-syntax-extension/32972964#32972964", "title": "Use a program identifier in a syntax extension", "body": "<p>As I send other identifiers as parameters to the macro, I was able to use an external identifier.</p>\n\n<p>I needed to get the <code>SyntaxContext</code> from the call site:</p>\n\n<pre><code>fn expand_my_macro(cx: &amp;mut ExtCtxt, sp: Span, args: &amp;[TokenTree]) -&gt; Box&lt;MacResult + 'static&gt; {\n    if let TokenTree::TtToken(_, Token::Ident(ident, _)) = args[0] {\n        let name_ident = Ident::new(intern(\"name\"), ident.ctxt);\n        MacEager::expr(cx.expr_ident(sp, name_ident)))\n    }\n    DummyResult::any(sp)\n}\n</code></pre>\n\n<p>This can be used like this:</p>\n\n<pre><code>fn test() {\n    let name = \"test\";\n    let result = my_macro!(foo);\n}\n</code></pre>\n"}], "owner": {"reputation": 8813, "user_id": 389119, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/05241abffd72dcdcd1dc9d6833706ba9?s=128&d=identicon&r=PG", "display_name": "antoyo", "link": "https://stackoverflow.com/users/389119/antoyo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "accepted_answer_id": 32959840, "answer_count": 2, "score": 0, "last_activity_date": 1444142856, "creation_date": 1444089233, "question_id": 32959672, "link": "https://stackoverflow.com/questions/32959672/use-a-program-identifier-in-a-syntax-extension", "title": "Use a program identifier in a syntax extension", "body": "<p>In a Rust syntax extension, how could I use an identifier from the program's scope?</p>\n\n<p>For instance, let's say I have the following code:</p>\n\n<pre><code>fn test() {\n    let name = \"test\";\n    let result = my_macro!();\n}\n</code></pre>\n\n<p>I tried to define the procedural macro as following:</p>\n\n<pre><code>fn expand_my_macro(cx: &amp;mut ExtCtxt, sp: Span, args: &amp;[TokenTree]) -&gt; Box&lt;MacResult + 'static&gt; {\n    MacEager::expr(cx.expr_ident(sp, Ident::with_empty_ctxt(intern(\"name\"))))\n}\n</code></pre>\n\n<p>But, I get the following error:</p>\n\n<pre><code>error: unresolved name `name` [E0425]\n</code></pre>\n\n<p>in the user code.</p>\n\n<p>I know that normal Rust macro are hygienic, but what about procedural macro?</p>\n\n<p>Is there a way to do this without having to pass the variable <code>name</code> as an argument?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1506611026, "post_id": 32956193, "comment_id": 79899859, "body": "There is <a href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html#method.repeat\" rel=\"nofollow noreferrer\"><code>str::repeat()</code></a> now, so you can write <code>&quot;abc&quot;.repeat(100)</code> to generate a <code>String</code> with your repeated data. A bit cleaner than the <code>iter::repeat()</code> version :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 20, "last_activity_date": 1606316240, "last_edit_date": 1606316240, "creation_date": 1444072621, "answer_id": 32956193, "question_id": 32956050, "link": "https://stackoverflow.com/questions/32956050/how-to-create-a-static-string-at-compile-time/32956193#32956193", "title": "How to create a static string at compile time", "body": "<p>You cannot do such a thing in stable Rust. Your example of <code>1000 * &quot;abc&quot;</code> is not run at &quot;compile time&quot; in Python either, as far as I understand Python.</p>\n<h3>Including a file</h3>\n<p>If it <em>has</em> to be static, you could use a <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"nofollow noreferrer\">Cargo build script</a>. This is a bit of Rust code that can do lots of things before your code is actually compiled. Specifically, you could write a source file out that has your string and then use <a href=\"https://doc.rust-lang.org/std/macro.include_str.html\" rel=\"nofollow noreferrer\"><code>include_str!</code></a> to bring it into your crate:</p>\n<p><strong>build.rs</strong></p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::{\n    env, error::Error, fs::File, io::{BufWriter, Write}, path::Path,\n};\n\nfn main() -&gt; Result&lt;(), Box&lt;Error&gt;&gt; {\n    let out_dir = env::var(&quot;OUT_DIR&quot;)?;\n    let dest_path = Path::new(&amp;out_dir).join(&quot;long_string.txt&quot;);\n    let mut f = BufWriter::new(File::create(&amp;dest_path)?);\n\n    let long_string = &quot;abc&quot;.repeat(100);\n    write!(f, &quot;{}&quot;, long_string)?;\n\n    Ok(())\n}\n</code></pre>\n<p><strong>lib.rs</strong></p>\n<pre class=\"lang-rust prettyprint-override\"><code>static LONG_STRING: &amp;'static str = include_str!(concat!(env!(&quot;OUT_DIR&quot;), &quot;/long_string.txt&quot;));\n</code></pre>\n<h3>Lazy initialization</h3>\n<p>You could create a <a href=\"https://crates.io/crates/once_cell\" rel=\"nofollow noreferrer\">once_cell</a> or <a href=\"https://crates.io/crates/lazy_static\" rel=\"nofollow noreferrer\">lazy_static</a> value that would create your string at runtime, but only once.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use once_cell::sync::Lazy; // 1.5.2\n\nstatic LONG_STR: Lazy&lt;String&gt; = Lazy::new(|| &quot;abc&quot;.repeat(5000));\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27221504/155423\">How can you make a safe static singleton in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/27791532/155423\">How do I create a global, mutable singleton?</a></li>\n</ul>\n<h3>The far future</h3>\n<p>At some point, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0911-const-fn.md\" rel=\"nofollow noreferrer\">RFC 911</a> will be fully implemented. This, plus a handful of additional RFCs, each adding new functionality, will allow you to be able to write something like:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// Does not work yet!\nstatic LONG_STR: String = &quot;abc&quot;.repeat(1000);\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1444073838, "post_id": 32956502, "comment_id": 53737987, "body": "Care to show an example for <code>concat!</code> that equates to <code>1000 * &quot;abc&quot;</code>? ^_^"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1444074315, "post_id": 32956502, "comment_id": 53738239, "body": "I&#39;m trying to create a &quot;string multiplication&quot; macro that uses <code>concat!</code> for 20 minutes now... sadly, I am heavily distracted and I haven&#39;t succeed yet :&lt;  ... (yet!)"}, {"owner": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "edited": false, "score": 1, "creation_date": 1444297699, "post_id": 32956502, "comment_id": 53847961, "body": "Here is my attempt: <a href=\"http://is.gd/fK8YIh\" rel=\"nofollow noreferrer\">is.gd/fK8YIh</a> First macro I ever wrote in any language so no idea if any good."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "edited": false, "score": 1, "creation_date": 1444301657, "post_id": 32956502, "comment_id": 53850639, "body": "@JohanLarsson The problem is, that OP wants a static string that is created at compile time. Your macro works, but does everything at runtime and returns a <code>String</code>..."}, {"owner": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "edited": false, "score": 0, "creation_date": 1444308008, "post_id": 32956502, "comment_id": 53855000, "body": "Ok, thanks for the review, was just a shot in the dark."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 14, "last_activity_date": 1444073724, "creation_date": 1444073724, "answer_id": 32956502, "question_id": 32956050, "link": "https://stackoverflow.com/questions/32956050/how-to-create-a-static-string-at-compile-time/32956502#32956502", "title": "How to create a static string at compile time", "body": "<p>There are quite a few ways to do that.\nYou could load a pre-generated string from file if you like:</p>\n\n<pre><code>const DATA: &amp;'static str = include_str!(\"filename.txt\");\n</code></pre>\n\n<p>Or to do it during compilation you can use <code>concat!</code>:</p>\n\n<pre><code>const DATA: &amp;'static str = concat!(\"abc\", \"abc\");\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9811, "user_id": 168717, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/851da71d0192b0e34ac44dd6c98c31d2?s=128&d=identicon&r=PG", "display_name": "AkiRoss", "link": "https://stackoverflow.com/users/168717/akiross"}, "is_accepted": false, "score": 1, "last_activity_date": 1591971569, "creation_date": 1591971569, "answer_id": 62346213, "question_id": 32956050, "link": "https://stackoverflow.com/questions/32956050/how-to-create-a-static-string-at-compile-time/62346213#62346213", "title": "How to create a static string at compile time", "body": "<p>Not proud of this answer :D but I wanted to to give a different perspective.</p>\n\n<p>By using macro-rules, you can easily define static concatenation by composition. In this case, I define 100 * str = 4 * 25 * str = 4 * 5 * 5 * str. You could also do 100 * str = 10 * 10 * str, in less lines (but more columns :))</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! rep {\n    ($t:expr, 4) =&gt; { concat!($t, $t, $t, $t) };\n    ($t:expr, 5) =&gt; { concat!($t, $t, $t, $t, $t) };\n    ($t:expr, 25) =&gt; { rep!(rep!($t, 5), 5) };\n    ($t:expr, 100) =&gt; { rep!(rep!($t, 25), 4) };\n}\n\n\nfn main() {\n    assert_eq!(rep!(\"x\", 100).len(), 100);\n}\n</code></pre>\n\n<p>Since macros work on language elements, it's not possible to use a counter and simple recursively call the macro like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! does_not_work {\n    ($t:expr, 1) =&gt; { $t };\n    ($t:expr, $n:) =&gt; { concat!($t, does_not_work!($t, $n-1)) };\n}\n</code></pre>\n\n<p>But recursively composing the macro should do the trick in this simple case. I didn't try using different macro_rules patterns or other kind of macros, but it should be possible to do something more elegant.</p>\n"}], "owner": {"reputation": 1488, "user_id": 2417347, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6be6de9a9f6d32c008ea322627ffacd6?s=128&d=identicon&r=PG", "display_name": "mhristache", "link": "https://stackoverflow.com/users/2417347/mhristache"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9543, "favorite_count": 1, "accepted_answer_id": 32956193, "answer_count": 3, "score": 27, "last_activity_date": 1606316240, "creation_date": 1444072116, "last_edit_date": 1444072464, "question_id": 32956050, "link": "https://stackoverflow.com/questions/32956050/how-to-create-a-static-string-at-compile-time", "title": "How to create a static string at compile time", "body": "<p>I want to create a long <code>&amp;'static str</code> made of repeating sequences of chars, e.g. <code>abcabcabc...</code> </p>\n\n<p>Is there a way in Rust to do this via an expression, e.g. something like <code>long_str = 1000 * \"abc\"</code> in Python, or do I have to generate it in Python and copy/paste it in the Rust code?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444049634, "post_id": 32949036, "comment_id": 53722860, "body": "This is going to be a duplicate of <a href=\"http://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">this question</a>"}, {"owner": {"reputation": 788, "user_id": 1597483, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e765507065df32bc4885689d92760889?s=128&d=identicon&r=PG", "display_name": "insanebits", "link": "https://stackoverflow.com/users/1597483/insanebits"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1444050321, "post_id": 32949036, "comment_id": 53723362, "body": "@Shepmaster Yes it&#39;s a variation of the same question, but it doesn&#39;t have a solution, I would like to know how one can solve it. The main requirement is to have an access to the storage structure from an item inside storage."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1444050512, "post_id": 32949036, "comment_id": 53723505, "body": "<a href=\"http://stackoverflow.com/questions/27001067/how-can-i-make-a-structure-with-internal-references/27011347#27011347\" title=\"how can i make a structure with internal references\">stackoverflow.com/questions/27001067/&hellip;</a> is actually closer. especially since it has the answer to this question: use reference counted boxes"}, {"owner": {"reputation": 788, "user_id": 1597483, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e765507065df32bc4885689d92760889?s=128&d=identicon&r=PG", "display_name": "insanebits", "link": "https://stackoverflow.com/users/1597483/insanebits"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1444051116, "post_id": 32949036, "comment_id": 53723956, "body": "@ker, that&#39;s actually quite close to what I need:) I will add an answer if I get it working unless someone else answers it :)"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 3, "last_activity_date": 1444051138, "creation_date": 1444051138, "answer_id": 32949677, "question_id": 32949036, "link": "https://stackoverflow.com/questions/32949036/how-can-i-have-a-container-where-the-items-have-access-to-the-container/32949677#32949677", "title": "How can I have a container where the items have access to the container?", "body": "<blockquote>\n  <p>This is required because widget may need to modify other widget on some event. For example: user clicks button and as a consequence editor text will get updated. </p>\n</blockquote>\n\n<p>Just because this is how most GUI operates in OO languages does not mean that this is how it must be done.</p>\n\n<p>In this specific case, a simple solution is to:</p>\n\n<ol>\n<li>Store as widget ID the ID of the editor box.</li>\n<li>Post an event into some event queue, indicating the update to be performed and the widget (by ID) on which to perform it.</li>\n</ol>\n\n<p>Thus, at any point in time, at most one mutable handle on a widget exists in the system, which avoids aliasing and keeps Rust happy.</p>\n\n<p><em>Note: this answer assumes that you do not need a synchronous response from the editor widget, if you do and use such a system, you fall into callback hell.</em></p>\n"}, {"comments": [{"owner": {"reputation": 788, "user_id": 1597483, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e765507065df32bc4885689d92760889?s=128&d=identicon&r=PG", "display_name": "insanebits", "link": "https://stackoverflow.com/users/1597483/insanebits"}, "edited": false, "score": 0, "creation_date": 1444052520, "post_id": 32949842, "comment_id": 53724911, "body": "that will be way better approach than going against the rust memory safety. It&#39;s not that easy shifting your mindset coming from the OO background.. I will accept it as an answer. Thanks for your effort!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 788, "user_id": 1597483, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e765507065df32bc4885689d92760889?s=128&d=identicon&r=PG", "display_name": "insanebits", "link": "https://stackoverflow.com/users/1597483/insanebits"}, "edited": false, "score": 1, "creation_date": 1444053637, "post_id": 32949842, "comment_id": 53725685, "body": "<i>going against the rust memory safety</i> \u2014 to be clear, there&#39;s nothing <b>unsafe</b> about using <code>Rc&lt;RefCell&lt;T&gt;&gt;</code>, it simply defers enforcing that memory safety from compile-time to runtime."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1444116829, "post_id": 32949842, "comment_id": 53753116, "body": "@Shepmaster: On the other hand, while it&#39;s safe, it&#39;s very easy to end up with a reference cycle somewhere and leaking memory, which is annoying."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1444061605, "last_edit_date": 1495542143, "creation_date": 1444051664, "answer_id": 32949842, "question_id": 32949036, "link": "https://stackoverflow.com/questions/32949036/how-can-i-have-a-container-where-the-items-have-access-to-the-container/32949842#32949842", "title": "How can I have a container where the items have access to the container?", "body": "<blockquote>\n  <p>How can I have a container where the items have access to the container?</p>\n</blockquote>\n\n<p>You <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">cannot do this with references</a>. You could do this with <a href=\"https://stackoverflow.com/questions/27001067/how-can-i-make-a-structure-with-internal-references/27011347#27011347\">reference-counted boxed values</a>.</p>\n\n<p>However, you can still solve your problem by thinking in a different way...</p>\n\n<blockquote>\n  <p>each widget needs access to that container. Each widget may need to modify other widgets on some event</p>\n</blockquote>\n\n<p>If it fits with your problem domain, it's much cleaner to simply post events in a one-directional flow of data:</p>\n\n<pre><code>// Create meaningful events with data pertinent to those events.\nenum Event {\n    UpdateText,\n    Click,\n}\n\nstruct Events(Vec&lt;Event&gt;);\n\nimpl Events {\n    fn push(&amp;mut self, event: Event) { self.0.push(event) }\n}\n\ntrait Widget {\n    fn event_happened(&amp;mut self, event: &amp;Event, triggered_events: &amp;mut Events);\n    fn draw(&amp;self);\n}\n\nstruct Widgets(Vec&lt;Box&lt;Widget&gt;&gt;);\n\nstruct TextField(String);\n\nimpl Widget for TextField {\n    fn event_happened(&amp;mut self, event: &amp;Event, _: &amp;mut Events) {\n        match *event {\n            Event::UpdateText =&gt; self.0.push_str(\"event\"),\n            _ =&gt; (),\n        }\n    }\n\n    fn draw(&amp;self) {\n        println!(\"Drawing text: {}\", self.0);\n    }\n}\n\nstruct Button;\n\nimpl Widget for Button {\n    fn event_happened(&amp;mut self, event: &amp;Event, triggered_events: &amp;mut Events) {\n        match *event {\n            Event::Click =&gt; triggered_events.push(Event::UpdateText),\n            _ =&gt; (),\n        }\n    }\n\n    fn draw(&amp;self) {\n        println!(\"Drawing button\");\n    }\n}\n\nfn main() {\n    let mut events = Events(vec![]);\n\n    let mut widgets = Widgets(vec![\n        Box::new(TextField(String::new())),\n        Box::new(Button),\n    ]);\n\n    // This would probably loop forever until a shutdown event was posted\n    for i in 0..10 {\n        for widget in &amp;widgets.0 {\n            widget.draw();\n        }\n\n        // Fake a click at some point\n        if i == 0 {\n            events.push(Event::Click);\n        }\n\n        let mut next_events = Events(vec![]);\n        for event in &amp;events.0 {\n            for widget in &amp;mut widgets.0 {\n                widget.event_happened(event, &amp;mut next_events);\n            }\n        }\n        events = next_events;\n    }\n}\n</code></pre>\n\n<p>To be clear, this is what <a href=\"https://stackoverflow.com/a/32949677/155423\">Matthieu M.</a> was suggesting (without a target ID); I just had already typed out the example so I wanted to post it anyway ^_^.</p>\n"}], "owner": {"reputation": 788, "user_id": 1597483, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e765507065df32bc4885689d92760889?s=128&d=identicon&r=PG", "display_name": "insanebits", "link": "https://stackoverflow.com/users/1597483/insanebits"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 1, "accepted_answer_id": 32949842, "answer_count": 2, "score": 2, "last_activity_date": 1444061605, "creation_date": 1444049260, "last_edit_date": 1444050757, "question_id": 32949036, "link": "https://stackoverflow.com/questions/32949036/how-can-i-have-a-container-where-the-items-have-access-to-the-container", "title": "How can I have a container where the items have access to the container?", "body": "<p>I am trying to implement a container which holds a list of GUI widgets where each widget needs access to that container. Each widget may need to modify other widgets on some event. For example, when a user clicks button the editor text will get updated. </p>\n\n<p>I could use a boxed <code>HashMap</code> but it doesn't solve the problem. What would be the easiest way to achieve what I need?</p>\n\n<p>Here is what I currently have, it doesn't compile but you will get the idea:</p>\n\n<pre><code>use std::collections::HashMap;\n\nstruct SharedItem&lt;'a&gt; {\n    pub value: String,\n    pub store: &amp;'a HashMap&lt;String, SharedItem&lt;'a&gt;&gt;,\n}\n\nfn trigger_button(button: &amp;SharedItem) {\n    // use case where SharedItem has to be mutable\n    let mut editor = button.store.get(&amp;\"editor\".to_string()).unwrap();\n    editor.value = \"value inserted by button\".to_string();\n}\n\nfn main() {\n    // map shared items by their name\n    let mut shared_store: HashMap&lt;String, SharedItem&gt; = HashMap::new();\n\n    // create components\n    let editor = SharedItem {\n        value: \"editable content\".to_string(),\n        store: &amp;shared_store,\n    };\n\n    let button = SharedItem {\n        value: \"button\".to_string(),\n        store: &amp;shared_store,\n    };\n\n    shared_store.insert(\"button\".to_string(), button);\n    shared_store.insert(\"editor\".to_string(), editor);\n\n    // now update the editor by triggering button\n    trigger_button(shared_store.get(&amp;\"button\".to_string()).unwrap());\n}\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "edited": false, "score": 0, "creation_date": 1444022820, "post_id": 32941748, "comment_id": 53708694, "body": "Not in that case, unfortunately. It is just a synthetic example, but in working code it is not possible. Well, thank you for answer, it shows my mistake."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 2, "last_activity_date": 1444022482, "creation_date": 1444022482, "answer_id": 32941748, "question_id": 32941667, "link": "https://stackoverflow.com/questions/32941667/how-to-use-constructs-defined-in-module-in-exporting-macro-implicitly/32941748#32941748", "title": "How to use constructs defined in module in exporting macro implicitly", "body": "<p>Because you can't call trait methods without <code>use</code>ing the trait.  That's got nothing to do with macros\u2014it's just a standard rule in Rust.</p>\n\n<p>Maybe you want the macro to generate an inherent impl instead?  <em>i.e.</em></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T&gt; $n&lt;T&gt; where T: Copy {\n    pub fn new(x: T) -&gt; Self {\n        $n { x: x }\n    }\n}\n</code></pre>\n\n<p>instead of what you have currently.</p>\n"}], "owner": {"reputation": 1688, "user_id": 4229810, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c09f7aa43a0c778154ee7bb5f169802b?s=128&d=identicon&r=PG", "display_name": "Lodin", "link": "https://stackoverflow.com/users/4229810/lodin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 0, "accepted_answer_id": 32941748, "answer_count": 1, "score": 0, "last_activity_date": 1444022482, "creation_date": 1444021824, "question_id": 32941667, "link": "https://stackoverflow.com/questions/32941667/how-to-use-constructs-defined-in-module-in-exporting-macro-implicitly", "title": "How to use constructs defined in module in exporting macro implicitly", "body": "<p>Trying to export a macro from module. Macro generates structure implementing some traits defined in module. Is there a way to get macro without importing that traits manually?\n</p>\n\n<pre><code>// src/lib.rs\n#![crate_name=\"macro_test\"]\n#![crate_type=\"lib\"]\n#![crate_type=\"rlib\"]\n\npub trait B&lt;T&gt; where T: Copy {\n    fn new(x: T) -&gt; Self;\n}\n\n#[macro_export]\nmacro_rules! test {\n    ( $n:ident ) =&gt; {\n        struct $n&lt;T&gt; where T: Copy {\n            x: T\n        }\n\n        impl&lt;T&gt; B&lt;T&gt; for $n&lt;T&gt; where T: Copy {\n            fn new(x: T) -&gt; Self {\n                $n { x: x }\n            }\n        }\n    } \n}\n\n// tests/test_simple.rs\n#[macro_use]\nextern crate macro_test;\n\ntest!(Test);\n\n#[test]\nfn test_macro() {\n    let a = Test::&lt;i32&gt;::new(1);\n}\n</code></pre>\n\n<p>In that case I get an error:</p>\n\n<pre><code>&lt;macro_test macros&gt;:2:54: 2:61 error: use of undeclared trait name `B` [E0405]\n&lt;macro_test macros&gt;:2 struct $ n &lt; T &gt; where T : Copy { x : T } impl &lt; T &gt; B &lt; T &gt; for $ n &lt; T &gt;\n</code></pre>\n\n<p>If I rewrite the trait implementation with <code>$crate</code> variable:\n</p>\n\n<pre><code>impl&lt;T&gt; $crate::B&lt;T&gt; for $n&lt;T&gt; where T: Copy {\n</code></pre>\n\n<p>error message changes to next:</p>\n\n<pre><code>tests\\test_simple.rs:8:13: 8:29 error: no associated item named `new` found for type `Test&lt;i32&gt;` in the current scope\ntests\\test_simple.rs:8     let a = Test::&lt;i32&gt;::new(1);\n                               ^~~~~~~~~~~~~~~~\ntests\\test_simple.rs:8:13: 8:29 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:\ntests\\test_simple.rs:8:13: 8:29 help: candidate #1: use `macro_test::B`\n</code></pre>\n\n<p>Why does it happen?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1444007617, "post_id": 32940019, "comment_id": 53705507, "body": "While I like this as a simpler way to make the code work, it doesn&#39;t answer my actual question."}, {"owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "reply_to_user": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1444007729, "post_id": 32940019, "comment_id": 53705529, "body": "@Cornstalks: To answer your actual question, then: no, you can\u2019t do that, and there\u2019s almost never any need to. Even if you couldn\u2019t get an iterable out of a readable, you could just put <code>byte[0]</code> into another variable and use that."}, {"owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "edited": false, "score": 0, "creation_date": 1444008959, "post_id": 32940019, "comment_id": 53705731, "body": "Cool, thanks! That&#39;s a great comment and I think it would be awesome if you could edit it into your answer. As is, I&#39;m going to accept this, but that comment really completes things for me. Thanks!"}], "tags": [], "owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "is_accepted": false, "score": 5, "last_activity_date": 1518098973, "last_edit_date": 1518098973, "creation_date": 1444007359, "answer_id": 32940019, "question_id": 32939974, "link": "https://stackoverflow.com/questions/32939974/can-i-create-a-mutable-slice-mut-u8-from-a-single-byte-u8/32940019#32940019", "title": "Can I create a mutable slice &amp;mut [u8] from a single byte (u8)?", "body": "<p>To answer your actual question: no, you can\u2019t do that, and there\u2019s almost never any need to. Even if you couldn\u2019t get an iterable out of a readable, you could just put <code>byte[0]</code> into another variable and use that. </p>\n\n<p>Instead, you can use <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.bytes\" rel=\"nofollow noreferrer\">the <code>Bytes</code> iterator</a>:</p>\n\n<pre><code>let byte: u8 = io::stdin().bytes().next().unwrap();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1533235126, "last_edit_date": 1533235126, "creation_date": 1444009861, "answer_id": 32940245, "question_id": 32939974, "link": "https://stackoverflow.com/questions/32939974/can-i-create-a-mutable-slice-mut-u8-from-a-single-byte-u8/32940245#32940245", "title": "Can I create a mutable slice &amp;mut [u8] from a single byte (u8)?", "body": "<h3>Rust 1.28+</h3>\n\n<p><a href=\"https://doc.rust-lang.org/std/slice/fn.from_mut.html\" rel=\"noreferrer\"><code>slice::from_mut</code></a> is back and it's stable!</p>\n\n<pre><code>use std::{\n    io::{self, Read},\n    slice,\n};\n\nfn main() {\n    let mut byte = 0;\n    let bytes_read = io::stdin().read(slice::from_mut(&amp;mut byte)).unwrap();\n    if bytes_read == 1 {\n        println!(\"read byte: {:?}\", byte);\n    }\n}\n</code></pre>\n\n<h3>Rust 1.0+</h3>\n\n<blockquote>\n  <p>But that's kinda weird feeling throughout the rest of the code, and it would be more natural to use a single <code>u8</code> rather than a <code>[u8; 1]</code> that I have to index into.</p>\n</blockquote>\n\n<p>Creating an array of length 1 would be the most natural way of doing it:</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn main() {\n    let mut bytes = [0];\n    let bytes_read = io::stdin().read(&amp;mut bytes).unwrap();\n    let valid_bytes = &amp;bytes[..bytes_read];\n    println!(\"read bytes: {:?}\", valid_bytes);\n}\n</code></pre>\n\n<p>However, it <em>is possible</em> to unsafely create a slice from a reference to a single value:</p>\n\n<pre><code>use std::io::{self, Read};\nuse std::slice;\n\nfn mut_ref_slice&lt;T&gt;(x: &amp;mut T) -&gt; &amp;mut [T] {\n    // It's important to wrap this in its own function because this is\n    // the only way to tell the borrow checker what the resulting slice\n    // will refer to. Otherwise you might get mutable aliasing or a\n    // dangling pointer which is what Rust is trying to avoid.\n    unsafe { slice::from_raw_parts_mut(x, 1) }\n}\n\nfn main() {\n    let mut byte = 0u8;\n    let bytes_read = io::stdin().read(mut_ref_slice(&amp;mut byte)).unwrap();\n    if bytes_read != 0 {\n        println!(\"byte: {}\", byte);\n    }\n}\n</code></pre>\n\n<p>Remember that a slice is basically two things: a pointer to an area of memory and a length. With a slice of length one, you simply need to add a length to a mutable reference and bam! you got yourself a slice.</p>\n\n<p>Earlier versions of Rust had the <a href=\"https://github.com/rust-lang/rust/blob/1.4.0/src/libcore/slice.rs#L1413-L1427\" rel=\"noreferrer\"><code>ref_slice</code> and <code>mut_ref_slice</code> functions</a>. They were removed because their utility was not yet proven (this isn't a common problem), but they were safe to call. The functions were moved to the <a href=\"https://crates.io/crates/ref_slice\" rel=\"noreferrer\">ref_slice crate</a>, so if you'd like to continue using them, that's one possibility.</p>\n"}], "owner": {"reputation": 34083, "user_id": 1287251, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/IQkBy.png?s=128&g=1", "display_name": "Cornstalks", "link": "https://stackoverflow.com/users/1287251/cornstalks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2052, "favorite_count": 1, "accepted_answer_id": 32940245, "answer_count": 2, "score": 9, "last_activity_date": 1556264690, "creation_date": 1444006929, "last_edit_date": 1556264690, "question_id": 32939974, "link": "https://stackoverflow.com/questions/32939974/can-i-create-a-mutable-slice-mut-u8-from-a-single-byte-u8", "title": "Can I create a mutable slice &amp;mut [u8] from a single byte (u8)?", "body": "<p>Sometimes I want to read a single byte from a <code>std::io::Read</code>er. If I try to do this:</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn main() {\n    let mut byte: u8 = 0;\n    io::stdin().read(&amp;mut byte).unwrap();\n    println!(\"byte: {}\", byte);\n}\n</code></pre>\n\n<p>I get the following error (which is clear, as <code>byte</code> is not a slice):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:6:22\n  |\n6 |     io::stdin().read(&amp;mut byte).unwrap();\n  |                      ^^^^^^^^^ expected slice, found u8\n  |\n  = note: expected type `&amp;mut [u8]`\n             found type `&amp;mut u8`\n</code></pre>\n\n<p>Is there a way I can keep <code>byte</code> as a simple <code>u8</code> and just take a slice of it, which I can then pass to <code>read()</code>? The obvious way to make this code work is to use an array of length 1:</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn main() {\n    let mut byte: [u8; 1] = [0];\n    io::stdin().read(&amp;mut byte).unwrap();\n    println!(\"byte: {}\", byte[0]);\n}\n</code></pre>\n\n<p>But that's kinda weird feeling throughout the rest of the code, and it would be more natural to use a single <code>u8</code> rather than a <code>[u8; 1]</code> that I have to index into.</p>\n\n<p>If it's not possible to create a slice from the simple <code>u8</code> that's okay, but I don't know if it's possible or not and would like to know.</p>\n"}, {"tags": ["random", "rust"], "answers": [{"comments": [{"owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "edited": false, "score": 0, "creation_date": 1444009011, "post_id": 32939816, "comment_id": 53705740, "body": "Thanks for the note. I figured it was using the same seed. So I looked at the documentation a bit closer and one thing is confusing. So if I want to generate a new series of random numbers, then I need to change the seed each time. However, if I use the rng to generate a set of random seeds, then I will get the same seeds each time. So I can never really get away from the deterministic side of the pseudo random generator. Other languages don&#39;t seem to have this constraint, meaning that the seed can be manually set if desired, but is otherwise is random. Is there no way to do this in Rust?"}, {"owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "edited": false, "score": 0, "creation_date": 1444011419, "post_id": 32939816, "comment_id": 53706155, "body": "Oh thanks @Shepmaster. Yep, I have to use the rgsl crate because it has a function for generating binomial random variables. This is really helpful though. I get how this works now."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1444009441, "last_edit_date": 1592644375, "creation_date": 1444005188, "answer_id": 32939816, "question_id": 32939688, "link": "https://stackoverflow.com/questions/32939688/rust-gsl-library-always-returns-the-same-number-for-a-random-number-generator/32939816#32939816", "title": "Rust GSL library always returns the same number for a random number generator", "body": "<p>The documentation for <a href=\"http://rust-ci.org/GuillaumeGomez/rust-GSL/doc/rgsl/types/rng/struct.RngType.html#method.env_setup\" rel=\"nofollow noreferrer\"><code>env_setup</code></a> explains everything you need to know:</p>\n<blockquote>\n<p>This function reads the environment variables <code>GSL_RNG_TYPE</code> and <code>GSL_RNG_SEED</code> and uses their values to set the corresponding library variables <code>gsl_rng_default</code> and <code>gsl_rng_default_seed</code></p>\n<p>If you don\u2019t specify a generator for <code>GSL_RNG_TYPE</code> then <code>gsl_rng_mt19937</code> is used as the default. <strong>The initial value of <code>gsl_rng_default_seed</code> is zero.</strong></p>\n</blockquote>\n<p>(Emphasis mine)</p>\n<p>Like all software random number generators, this is really an algorithm that produces <em>pseudo</em> random numbers. The algorithm and the initial seed uniquely identify a sequence of these numbers. Since the seed is always the same, the first (and second, third, ...) number in the sequence will always be the same.</p>\n<blockquote>\n<p>So if I want to generate a new series of random numbers, then I need to change the seed each time. However, if I use the rng to generate a set of random seeds, then I will get the same seeds each time.</p>\n</blockquote>\n<p>That's correct.</p>\n<blockquote>\n<p>Other languages don't seem to have this constraint, meaning that the seed can be manually set if desired, but is otherwise is random.</p>\n</blockquote>\n<p>A classical way to do this is to seed your RNG with the current time. This produces an &quot;acceptable&quot; seed for many cases. You can also get access to <em>true</em> random data from the operating system and use that as a seed or mix it in to produce more random data.</p>\n<blockquote>\n<p>Is there no way to do this in Rust?</p>\n</blockquote>\n<p>This is a <strong>very different question</strong>. If you <em>just</em> want a random number generator in Rust, use the <a href=\"https://github.com/rust-lang-nursery/rand\" rel=\"nofollow noreferrer\">rand crate</a>. This uses techniques like I described above.</p>\n<p>You could even do something crazy like using random values from the rand crate to seed your other random number generator. I just assumed that there is some important reason you are using that crate instead of rand.</p>\n"}], "owner": {"reputation": 7076, "user_id": 1610428, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/e6gnk.jpg?s=128&g=1", "display_name": "krishnab", "link": "https://stackoverflow.com/users/1610428/krishnab"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 571, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1446581427, "creation_date": 1444003918, "last_edit_date": 1446581427, "question_id": 32939688, "link": "https://stackoverflow.com/questions/32939688/rust-gsl-library-always-returns-the-same-number-for-a-random-number-generator", "title": "Rust GSL library always returns the same number for a random number generator", "body": "<p>I am using the <code>rgsl</code> library in Rust that wraps functions from the C GSL math libraries. I was using a random number generator function, but I am always getting the same exact value whenever I generate a new random number. I imagine that the number should vary upon each run of the function. Is there something that I am missing? Do I need to set a new random seed each time or such?</p>\n\n<pre><code>extern crate rgsl;\n\nuse rgsl::Rng;\n\nfn main() {\n    rgsl::RngType::env_setup();\n\n    let t = rgsl::rng::default();\n    let r = Rng::new(&amp;t).unwrap()\n\n    let val = rgsl::randist::binomial::binomial(&amp;r, 0.01f64, 1u32);\n    print!(\"{}\",val);\n}\n</code></pre>\n\n<p>The value I keep getting is <code>1</code>, which seems really high considering the probability of obtaining a <code>1</code> is <code>0.01.</code> </p>\n"}, {"tags": ["glsl", "rust", "glium"], "answers": [{"comments": [{"owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "edited": false, "score": 0, "creation_date": 1444292788, "post_id": 33003172, "comment_id": 53844582, "body": "Thanks, this set me on my way to resolving this. I&#39;ve updated the question to reflect my progress."}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": false, "score": 1, "last_activity_date": 1444255376, "creation_date": 1444255376, "answer_id": 33003172, "question_id": 32938673, "link": "https://stackoverflow.com/questions/32938673/passing-an-arbitrarily-sized-object-to-a-fragment-shader-using-a-uniformbuffer-i/33003172#33003172", "title": "Passing an arbitrarily sized object to a fragment shader using a UniformBuffer in Glium", "body": "<p>The issue you're running into has to do with how uniforms are allocated.  <code>uint values[128];</code> doesn't have the memory layout you think it does; it actually has the same memory layout as <code>uint4 values[128]</code>.  See <a href=\"https://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt\" rel=\"nofollow\">https://www.opengl.org/registry/specs/ARB/uniform_buffer_object.txt</a> sub-section 2.15.3.1.2.</p>\n"}], "owner": {"reputation": 889, "user_id": 1879192, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/54f9ed64051a86b03fe99f82805ac6d5?s=128&d=identicon&r=PG", "display_name": "Thierry", "link": "https://stackoverflow.com/users/1879192/thierry"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 529, "favorite_count": 0, "answer_count": 1, "score": 5, "last_activity_date": 1444292752, "creation_date": 1443994576, "last_edit_date": 1444292752, "question_id": 32938673, "link": "https://stackoverflow.com/questions/32938673/passing-an-arbitrarily-sized-object-to-a-fragment-shader-using-a-uniformbuffer-i", "title": "Passing an arbitrarily sized object to a fragment shader using a UniformBuffer in Glium", "body": "<p>My question came up while experimenting with a bunch of different techniques, none of which I have much experience with. Sadly, I don't even know whether I'm making a silly logic mistake, whether I'm using the <code>glium</code> crate wrong, whether I'm messing up in <code>GLSL</code>, etc. Regardless, I managed to start a new Rust project from scratch, working towards a minimal example showing my issue, and the problem reproduces <em>on my computer</em> at least.</p>\n\n<p>The minimal example ends up being difficult to explain, though, so I first make an even more minimal example which does do what I want it to do, albeit by hacking bits and being limited to 128 elements (four times 32 bits, in a <code>GLSL</code> <code>uvec4</code>). From this, the step up to the version in which my problem arises is rather simple.</p>\n\n<h1>A working version, with simple <code>uniform</code> and bit-shifting</h1>\n\n<p>The program creates a single rectangle on the screen, with texture coordinates from <code>0.0</code> to <code>128.0</code> horizontally. The program contains one vertex shader for the rectangle, and a fragment shader that uses the texture coordinates to draw vertical stripes on the rectangle: if the texture coordinate (clamped to an <code>uint</code>) is odd, it draws one color, when the texture coordinate is even, it draws another color.</p>\n\n<pre><code>// GLIUM, the crate I'll use to do \"everything OpenGL\"\n#[macro_use]\nextern crate glium;\n\n// A simple struct to hold the vertices with their texture-coordinates.\n// Nothing deviating much from the tutorials/crate-documentation.\n#[derive(Copy, Clone)]\nstruct Vertex {\n    position: [f32; 2],\n    tex_coords: [f32; 2],\n}\n\nimplement_vertex!(Vertex, position, tex_coords);\n\n\n// The vertex shader's source. Does nothing special, except passing the\n// texture coordinates along to the fragment shader.\nconst VERTEX_SHADER_SOURCE: &amp;'static str = r#\"\n    #version 140\n\n    in vec2 position;\n    in vec2 tex_coords;\n    out vec2 preserved_tex_coords;\n\n    void main() {\n        preserved_tex_coords = tex_coords;\n        gl_Position = vec4(position, 0.0, 1.0);\n    }\n\"#;\n\n// The fragment shader. uses the texture coordinates to figure out which color to draw.\nconst FRAGMENT_SHADER_SOURCE: &amp;'static str =  r#\"\n    #version 140\n\n    in vec2 preserved_tex_coords;\n    // FIXME: Hard-coded max number of elements. Replace by uniform buffer object\n    uniform uvec4 uniform_data;\n    out vec4 color;\n\n    void main() {\n        uint tex_x = uint(preserved_tex_coords.x);\n        uint offset_in_vec = tex_x / 32u;\n        uint uint_to_sample_from = uniform_data[offset_in_vec];\n        bool the_bit = bool((uint_to_sample_from &gt;&gt; tex_x) &amp; 1u);\n        color = vec4(the_bit ? 1.0 : 0.5, 0.0, 0.0, 1.0);\n    }\n\"#;\n\n// Logic deciding whether a certain index corresponds with a 'set' bit on an 'unset' one.\n// In this case, for the alternating stripes, a trivial odd/even test.\nfn bit_should_be_set_at(idx: usize) -&gt; bool {\n    idx % 2 == 0\n}\n\nfn main() {\n    use glium::DisplayBuild;\n    let display = glium::glutin::WindowBuilder::new().build_glium().unwrap();\n\n    // Sets up the vertices for a rectangle from -0.9 till 0.9 in both dimensions.\n    // Texture coordinates go from 0.0 till 128.0 horizontally, and from 0.0 till\n    // 1.0 vertically.\n    let vertices_buffer = glium::VertexBuffer::new(\n        &amp;display,\n        &amp;vec![Vertex { position: [ 0.9, -0.9], tex_coords: [  0.0, 0.0] },\n              Vertex { position: [ 0.9,  0.9], tex_coords: [  0.0, 1.0] },\n              Vertex { position: [-0.9, -0.9], tex_coords: [128.0, 0.0] },\n              Vertex { position: [-0.9,  0.9], tex_coords: [128.0, 1.0] }]).unwrap();\n    // The rectangle will be drawn as a simple triangle strip using the vertices above.\n    let indices_buffer = glium::IndexBuffer::new(&amp;display,\n                                                 glium::index::PrimitiveType::TriangleStrip,\n                                                 &amp;vec![0u8, 1u8, 2u8, 3u8]).unwrap();\n    // Compiling the shaders defined statically above.\n    let shader_program = glium::Program::from_source(&amp;display,\n                                                     VERTEX_SHADER_SOURCE,\n                                                     FRAGMENT_SHADER_SOURCE,\n                                                     None).unwrap();\n\n    // Some hackyy bit-shifting to get the 128 alternating bits set up, in four u32's,\n    // which glium manages to send across as an uvec4.\n    let mut uniform_data = [0u32; 4];\n    for idx in 0..128 {\n        let single_u32 = &amp;mut uniform_data[idx / 32];\n        *single_u32 = *single_u32 &gt;&gt; 1;\n        if bit_should_be_set_at(idx) {\n            *single_u32 = *single_u32 | (1 &lt;&lt; 31);\n        }\n    }\n\n    // Trivial main loop repeatedly clearing, drawing rectangle, listening for close event.\n    loop {\n        use glium::Surface;\n        let mut frame = display.draw();\n        frame.clear_color(0.0, 0.0, 0.0, 1.0);\n        frame.draw(&amp;vertices_buffer, &amp;indices_buffer, &amp;shader_program,\n                   &amp;uniform! { uniform_data: uniform_data },\n                   &amp;Default::default()).unwrap();\n        frame.finish().unwrap();\n\n        for e in display.poll_events() { if let glium::glutin::Event::Closed = e { return; } }\n    }\n}\n</code></pre>\n\n<h1>But this isn't good enough...</h1>\n\n<p>This program works, and shows the rectangle with alternating stripes, but has the clear limitation of being limited to 128 stripes (or 64 stripes, I guess. The other 64 are \"the background of the rectangle\"). To allow arbitrarily many stripes (or, in general, to pass arbitrarily much data to a fragment shader), <a href=\"https://www.opengl.org/wiki/Interface_Block_(GLSL)\" rel=\"nofollow\">uniform buffer objects</a> can be used, <a href=\"http://tomaka.github.io/glium/glium/uniforms/index.html\" rel=\"nofollow\">which glium exposes</a>. The <a href=\"https://github.com/tomaka/glium/blob/master/examples/gpgpu.rs\" rel=\"nofollow\">most relevant example in the glium repo</a> sadly fails to compile on my machine: the <code>GLSL</code> version is not supported, the <code>buffer</code> keyword is a syntax error in the supported versions, compute shaders in general are not supported (using glium, on my machine), and neither are headless render contexts.</p>\n\n<h1>A not-so-much working version, with buffer <code>uniform</code></h1>\n\n<p>So, with no way of starting from that example, I had to start from scratch using the documentation. For the example above, I came up with the following:</p>\n\n<pre><code>// Nothing changed here...\n#[macro_use]\nextern crate glium;\n\n#[derive(Copy, Clone)]\nstruct Vertex {\n    position: [f32; 2],\n    tex_coords: [f32; 2],\n}\n\nimplement_vertex!(Vertex, position, tex_coords);\n\n\nconst VERTEX_SHADER_SOURCE: &amp;'static str = r#\"\n    #version 140\n\n    in vec2 position;\n    in vec2 tex_coords;\n    out vec2 preserved_tex_coords;\n\n    void main() {\n        preserved_tex_coords = tex_coords;\n        gl_Position = vec4(position, 0.0, 1.0);\n    }\n\"#;\n// ... up to here.\n\n// The updated fragment shader. This one uses an entire uint per stripe, even though only one\n// boolean value is stored in each.\nconst FRAGMENT_SHADER_SOURCE: &amp;'static str =  r#\"\n    #version 140\n    // examples/gpgpu.rs uses\n    //     #version 430\n    //     buffer layout(std140);\n    // but that shader version is not supported by my machine, and the second line is\n    // a syntax error in `#version 140`\n\n    in vec2 preserved_tex_coords;\n\n    // Judging from the GLSL standard, this is what I have to write:\n    layout(std140) uniform;\n    uniform uniform_data {\n        // TODO: Still hard-coded max number of elements, but now arbitrary at compile-time.\n        uint values[128];\n    };\n    out vec4 color;\n\n    // This one now becomes much simpler: get the coordinate, clamp to uint, index into\n    // uniform using tex_x, cast to bool, choose color.\n    void main() {\n        uint tex_x = uint(preserved_tex_coords.x);\n        bool the_bit = bool(values[tex_x]);\n        color = vec4(the_bit ? 1.0 : 0.5, 0.0, 0.0, 1.0);\n    }\n\"#;\n\n\n// Mostly copy-paste from glium documentation: define a Data type, which stores u32s,\n// make it implement the right traits\nstruct Data {\n    values: [u32],\n}\n\nimplement_buffer_content!(Data);\nimplement_uniform_block!(Data, values);\n\n\n// Same as before\nfn bit_should_be_set_at(idx: usize) -&gt; bool {\n    idx % 2 == 0\n}\n\n// Mostly the same as before\nfn main() {\n    use glium::DisplayBuild;\n    let display = glium::glutin::WindowBuilder::new().build_glium().unwrap();\n\n    let vertices_buffer = glium::VertexBuffer::new(\n        &amp;display,\n        &amp;vec![Vertex { position: [ 0.9, -0.9], tex_coords: [  0.0, 0.0] },\n              Vertex { position: [ 0.9,  0.9], tex_coords: [  0.0, 1.0] },\n              Vertex { position: [-0.9, -0.9], tex_coords: [128.0, 0.0] },\n              Vertex { position: [-0.9,  0.9], tex_coords: [128.0, 1.0] }]).unwrap();\n    let indices_buffer = glium::IndexBuffer::new(&amp;display,\n                                                 glium::index::PrimitiveType::TriangleStrip,\n                                                 &amp;vec![0u8, 1u8, 2u8, 3u8]).unwrap();\n    let shader_program = glium::Program::from_source(&amp;display,\n                                                     VERTEX_SHADER_SOURCE,\n                                                     FRAGMENT_SHADER_SOURCE,\n                                                     None).unwrap();\n\n\n    // Making the UniformBuffer, with room for 128 4-byte objects (which u32s are).\n    let mut buffer: glium::uniforms::UniformBuffer&lt;Data&gt; =\n              glium::uniforms::UniformBuffer::empty_unsized(&amp;display, 4 * 128).unwrap();\n    {\n        // Loop over all elements in the buffer, setting the 'bit'\n        let mut mapping = buffer.map();\n        for (idx, val) in mapping.values.iter_mut().enumerate() {\n            *val = bit_should_be_set_at(idx) as u32;\n            // This _is_ actually executed 128 times, as expected.\n        }\n    }\n\n    // Iterating again, reading the buffer, reveals the alternating 'bits' are really\n    // written to the buffer.\n\n    // This loop is similar to the original one, except that it passes the buffer\n    // instead of a [u32; 4].\n    loop {\n        use glium::Surface;\n        let mut frame = display.draw();\n        frame.clear_color(0.0, 0.0, 0.0, 1.0);\n        frame.draw(&amp;vertices_buffer, &amp;indices_buffer, &amp;shader_program,\n                   &amp;uniform! { uniform_data: &amp;buffer },\n                   &amp;Default::default()).unwrap();\n        frame.finish().unwrap();\n\n        for e in display.poll_events() { if let glium::glutin::Event::Closed = e { return; } }\n    }\n}\n</code></pre>\n\n<p>I would expect this to produce the same striped rectangle (or give some error, or crash if something I did was wrong). Instead, it shows the rectangle, with the right-most quarter in solid bright red (i.e., \"the bit seemed set when the fragment shader read it\") and the remaining three quarters darker red (i.e., \"the bit was unset when the fragment shader read it\").</p>\n\n<h1>Update since original posting</h1>\n\n<p>I'm really stabbing in the dark here, so thinking it might be a low level bug with memory ordering, endianness, buffer over-/underrun, etc. I tried various ways of filling 'neighboring' memory locations with easily discernible bit-patterns (e.g. one bit in every three set, one in every four, two set followed by two unset, etc.). This did not change the output.</p>\n\n<p>One of the obvious ways to get memory 'near' the <code>uint values[128]</code> is to put it into the <code>Data</code> struct, just in front of the <code>values</code> (behind the <code>values</code> is not allowed, as <code>Data</code>'s <code>values: [u32]</code> is dynamically sized). As stated above, this does not change the output. However, putting a properly filled <code>uvec4</code> inside the <code>uniform_data</code> buffer, and using a <code>main</code> function similar to the first example's <strong>does</strong> produce the original result. This shows that the <code>glium::uniforms::UniformBuffer&lt;Data&gt;</code> <em>in se</em> <strong>does</strong> work.</p>\n\n<p>I've hence updated the title to reflect that the problem seems to lie somewhere else.</p>\n\n<h1>After Eli's answer</h1>\n\n<p>@Eli Friedman's answer helped me progress towards a solution, but I'm not quite there yet.</p>\n\n<p>Allocating and filling a buffer four times as large did change the output, from a quarter filled rectangle to a fully filled rectangle. Oops, that's not what I wanted. My shader is now reading from the right memory words, though. All those words should have been filled up with the right bit pattern. Still, no part of the rectangle became striped. Since <code>bit_should_be_set_at</code> should set every other bit, I developed the hypothesis that what was going on is the following:</p>\n\n<pre><code>Bits: 1010101010101010101010101010101010101\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: all bits set\n</code></pre>\n\n<p>To test this hypothesis, I changed <code>bit_should_be_set_at</code> to return <code>true</code> on multiples of 3, 4, 5, 6, 7 and 8. The results coincide with my hypothesis:</p>\n\n<pre><code>Bits: 1001001001001001001001001001001001001\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: first bit set, then repeating two unset, one set.\n\nBits: 1000100010001000100010001000100010001\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: all bits set\n\nBits: 1000010000100001000010000100001000010\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: first bit set, then repeating four unset, one set.\n\nBits: 1000001000001000001000001000001000001\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: first bit set, then repeating two unset, one set.\n\nBits: 1000000100000010000001000000100000010\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: first bit set, then repeating six unset, one set.\n\nBits: 1000000010000000100000001000000010000\nSeen: ^   ^   ^   ^   ^   ^   ^   ^   ^   ^   \nWhat it looks like: first bit set, then every other bit set.\n</code></pre>\n\n<p>Does this hypothesis make sense? And regardless: does it look like the issue is with setting the data up (at the Rust side), or with reading it back out (at the GLSL side)?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1550007743, "last_edit_date": 1550007743, "creation_date": 1443978443, "answer_id": 32936064, "question_id": 32935808, "link": "https://stackoverflow.com/questions/32935808/generate-sequential-ids-for-each-instance-of-a-struct/32936064#32936064", "title": "Generate sequential IDs for each instance of a struct", "body": "<blockquote>\n  <p>nor are global mutable variables safe</p>\n</blockquote>\n\n<p>Your C++ example seems like it would have thread-safety issues, but I don't know enough C++ to be sure.</p>\n\n<p>However, only <em>unsynchronized</em> global mutable variables are trouble. If you don't care about cross-thread issues, you can use a thread-local:</p>\n\n<pre><code>use std::cell::Cell;\n\n#[derive(Debug)]\nstruct Monster {\n    id: usize,\n    health: u8,\n}\n\nthread_local!(static MONSTER_ID: Cell&lt;usize&gt; = Cell::new(0));\n\nimpl Monster {\n    fn new(health: u8) -&gt; Monster {\n        MONSTER_ID.with(|thread_id| {\n            let id = thread_id.get();\n            thread_id.set(id + 1);\n            Monster { id, health }\n        })\n    }\n}\n\nfn main() {\n    let gnome = Monster::new(41);\n    let troll = Monster::new(42);\n\n    println!(\"gnome {:?}\", gnome);\n    println!(\"troll {:?}\", troll);\n}\n</code></pre>\n\n<p>If you do want something that works better with multiple threads, check out <a href=\"https://stackoverflow.com/a/32936288/155423\">bluss' answer</a>, which shows how to use an atomic variable.</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 17, "last_activity_date": 1550007566, "last_edit_date": 1550007566, "creation_date": 1443979846, "answer_id": 32936288, "question_id": 32935808, "link": "https://stackoverflow.com/questions/32935808/generate-sequential-ids-for-each-instance-of-a-struct/32936288#32936288", "title": "Generate sequential IDs for each instance of a struct", "body": "<p>Atomic variables can live in statics, so you can use it relatively straightforwardly (the downside is that you have global state).</p>\n\n<p>Example code: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ce3f2b51c1cd07a09e39f00e74d260a0\" rel=\"noreferrer\">(playground link)</a></p>\n\n<pre><code>use std::{\n    sync::atomic::{AtomicUsize, Ordering},\n    thread,\n};\n\nstatic OBJECT_COUNTER: AtomicUsize = AtomicUsize::new(0);\n\n#[derive(Debug)]\nstruct Object(usize);\n\nimpl Object {\n    fn new() -&gt; Self {\n        Object(OBJECT_COUNTER.fetch_add(1, Ordering::SeqCst))\n    }\n}\n\nfn main() {\n    let threads = (0..10)\n        .map(|_| thread::spawn(|| Object::new()))\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    for t in threads {\n        println!(\"{:?}\", t.join().unwrap());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1154, "user_id": 2718447, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/beb3947f85f2dcb663e9566b48c60a1c?s=128&d=identicon&r=PG", "display_name": "anjruu", "link": "https://stackoverflow.com/users/2718447/anjruu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1904, "favorite_count": 2, "accepted_answer_id": 32936064, "answer_count": 2, "score": 13, "last_activity_date": 1550007743, "creation_date": 1443976752, "last_edit_date": 1443978041, "question_id": 32935808, "link": "https://stackoverflow.com/questions/32935808/generate-sequential-ids-for-each-instance-of-a-struct", "title": "Generate sequential IDs for each instance of a struct", "body": "<p>I'm writing a system where I have a collection of <code>Object</code>s, and each <code>Object</code> has a unique integral ID. Here's how I would do it in C++:</p>\n\n<pre><code>class Object {\npublic:\n  Object(): id_(nextId_++) { }\n\nprivate:\n  int id_;\n  static int nextId_;\n}\n\nint Object::nextId_ = 1;\n</code></pre>\n\n<p>This is obviously not thread_safe, but if I wanted it to be, I could make <code>nextId_</code> an <code>std::atomic_int</code>, or wrap a mutex around the <code>nextId_++</code> expression. </p>\n\n<p>How would I do this in (preferably safe) Rust? There's no static struct members, nor are global mutable variables safe. I could always pass <code>nextId</code> into the <code>new</code> function, but these objects are going to be allocated in a number of places, and I would prefer not to pipe the <code>nextId</code> number hither and yon. Thoughts?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "edited": false, "score": 0, "creation_date": 1443967671, "post_id": 32934310, "comment_id": 53694155, "body": "Ok, was just curious and had the feeling of missing something obvious."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "edited": false, "score": 0, "creation_date": 1443967726, "post_id": 32934310, "comment_id": 53694176, "body": "@JohanLarsson oh, look at my last edit; it might be up your alley."}, {"owner": {"reputation": 13885, "user_id": 1509695, "user_type": "registered", "accept_rate": 38, "profile_image": "https://www.gravatar.com/avatar/04a3ca8cd41bf8e170b901072fcc667f?s=128&d=identicon&r=PG", "display_name": "matanster", "link": "https://stackoverflow.com/users/1509695/matanster"}, "edited": false, "score": 0, "creation_date": 1599237068, "post_id": 32934310, "comment_id": 112722366, "body": "mildly related: <a href=\"https://stackoverflow.com/questions/63744854/how-to-link-gtk-from-rust\" title=\"how to link gtk from rust\">stackoverflow.com/questions/63744854/how-to-link-gtk-from-ru&zwnj;&#8203;st</a>"}, {"owner": {"reputation": 4913, "user_id": 1146094, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/4b24c43824d179acb4c0dff101823534?s=128&d=identicon&r=PG", "display_name": "SwiftD", "link": "https://stackoverflow.com/users/1146094/swiftd"}, "edited": false, "score": 0, "creation_date": 1613751557, "post_id": 32934310, "comment_id": 117181295, "body": "im just finding my way around rust and this seems like a strange omission from cargo - still, solution found, ty"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1609249600, "last_edit_date": 1609249600, "creation_date": 1443967529, "answer_id": 32934310, "question_id": 32934293, "link": "https://stackoverflow.com/questions/32934293/is-there-a-command-to-automatically-add-a-crate-to-my-cargo-toml/32934310#32934310", "title": "Is there a command to automatically add a crate to my Cargo.toml?", "body": "<p>No, there is no such thing built in to Cargo. There is only a <code>cargo install</code> subcommand which installs the binaries of a crate <em>system-wide</em>.</p>\n<p>New third-party <a href=\"https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands\" rel=\"nofollow noreferrer\">Cargo subcommands</a> can be created, and <a href=\"https://github.com/killercup/cargo-edit\" rel=\"nofollow noreferrer\">cargo edit</a>, does what you want.</p>\n<p>These cargo subcommands can then be installed by <code>cargo install</code>, in a fun meta circle!</p>\n<pre class=\"lang-none prettyprint-override\"><code>% cargo install cargo-edit\n\n# Now `cargo add` is available\n% cargo add mycrate\n</code></pre>\n"}], "owner": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1261, "favorite_count": 0, "accepted_answer_id": 32934310, "answer_count": 1, "score": 9, "last_activity_date": 1609249600, "creation_date": 1443967383, "last_edit_date": 1460995423, "question_id": 32934293, "link": "https://stackoverflow.com/questions/32934293/is-there-a-command-to-automatically-add-a-crate-to-my-cargo-toml", "title": "Is there a command to automatically add a crate to my Cargo.toml?", "body": "<p>I expected there to be something like: <code>cargo install stopwatch</code> but could not find it in the docs.</p>\n\n<p>Finding the package version and manually adding the package to .toml:</p>\n\n<pre><code>[dependencies]\nstopwatch=\"0.0.6\"\n</code></pre>\n\n<p>Does not feel automated enough. :)</p>\n"}, {"tags": ["arrays", "rust"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1444035298, "post_id": 32933817, "comment_id": 53714254, "body": "Maybe also important to note: <code>&amp;mut [&amp;Trait]</code> is a slice of references to elements of types that implement <code>Trait</code>. The elements are stored somewhere else and not contiguously in the array (which would be impossible since arrays are homogeneous). To sort an array of references is rarely what a user wants."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 7, "last_activity_date": 1535215131, "last_edit_date": 1535215131, "creation_date": 1443963976, "answer_id": 32933817, "question_id": 32932375, "link": "https://stackoverflow.com/questions/32932375/how-to-pass-an-array-of-objects-implementing-a-certain-trait-to-a-function/32933817#32933817", "title": "How to pass an array of objects implementing a certain trait to a function?", "body": "<p>Syntax isn't really the problem here. I'll try to explain why what you want to do is a bit dodgy, so you probably won't get this to work with trait objects:</p>\n\n<p>The argument of your <code>sort</code> function has the type <code>&amp;mut [&amp;std::cmp::PartialOrd]</code>. In general, <code>&amp;mut [&amp;Trait]</code>) means \"a mutable slice of values of any type at all, as long as they implement <code>Trait</code>\". Note, however, that the values in the slice may have <em>different</em> types. The question arising from this is: what should happen in <code>sort</code> if the slice contains values of different values, e.g. <code>Float</code> and <code>String</code>? Just because floats can be compared and strings can be compared does not mean that you can meaningfully compare a float to a string. This is basically what the error message is pointing out.</p>\n\n<p>The syntax you're using is fine. For example, the following (which might sort the array by the string representation of the elements) compiles:</p>\n\n<pre><code>fn sort(arr: &amp;mut [&amp;ToString]) {\n    // sort by string representation\n}\n</code></pre>\n\n<p>But what you probably actually want to do is just use a generic function as follows (since dynamic dispatch doesn't really make much sense here):</p>\n\n<pre><code>fn sort&lt;T: PartialOrd&gt;(arr: &amp;mut [T]) {\n    // do the sorting\n}\n</code></pre>\n\n<p>This is similar to your original code, but it defines <code>sort</code> for any type <code>T</code> that implements <code>PartialOrd</code>. The important difference to your code is that the elements in the slice all have to be of the same type, so the issue what to do with values of different types doesn't arise.</p>\n"}, {"tags": [], "owner": {"reputation": 627, "user_id": 3987763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5edbe17788bc835fa4f08ac4977e67d1?s=128&d=identicon&r=PG&f=1", "display_name": "basic_bgnr", "link": "https://stackoverflow.com/users/3987763/basic-bgnr"}, "is_accepted": false, "score": 3, "last_activity_date": 1535220455, "last_edit_date": 1535220455, "creation_date": 1443964830, "answer_id": 32933937, "question_id": 32932375, "link": "https://stackoverflow.com/questions/32932375/how-to-pass-an-array-of-objects-implementing-a-certain-trait-to-a-function/32933937#32933937", "title": "How to pass an array of objects implementing a certain trait to a function?", "body": "<p>The issue is the function definition.</p>\n\n<pre><code>fn sort(arr: &amp;mut [&amp;std::cmp::PartialOrd]) {\n    // actual sorting\n}\n</code></pre>\n\n<p>If you modify your function to include a type parameter, you can compile the program:</p>\n\n<pre><code>fn sort&lt;T&gt;(arr: &amp;mut [T])\nwhere\n    T: PartialOrd,\n{\n}\n\nfn main() {}\n</code></pre>\n\n<p>Note that you are not actually passing an <em>array</em> but a <em>slice</em>. In Rust, an array is defined by the type it holds as well as its length.</p>\n\n<pre><code>a: [i32; 10] // defines an array that stores `i32` and has length 10\na: [i32] // defines a slice of i32\n</code></pre>\n\n<p>Also note that the <code>PartialOrd</code> trait is included by default when the program is compiled, so there's no need to use a fully qualified name. You can use <code>PartialOrd</code> rather than <code>std::cmp::PartialOrd</code>. See <a href=\"https://doc.rust-lang.org/std/prelude/index.html\" rel=\"nofollow noreferrer\"><code>std::prelude</code></a>.</p>\n"}], "owner": {"reputation": 632, "user_id": 4308511, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56c3c96e5374a48aa733565f9e61711d?s=128&d=identicon&r=PG&f=1", "display_name": "Jakub", "link": "https://stackoverflow.com/users/4308511/jakub"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1484, "favorite_count": 0, "accepted_answer_id": 32933817, "answer_count": 2, "score": 6, "last_activity_date": 1535220455, "creation_date": 1443953700, "last_edit_date": 1535220301, "question_id": 32932375, "link": "https://stackoverflow.com/questions/32932375/how-to-pass-an-array-of-objects-implementing-a-certain-trait-to-a-function", "title": "How to pass an array of objects implementing a certain trait to a function?", "body": "<p>To learn Rust syntax, I've decided to implement a function sorting a passed-in array:</p>\n\n<pre><code>fn sort(array) {\n    // actual sorting\n}\n</code></pre>\n\n<p>In <a href=\"https://stackoverflow.com/questions/24831828/how-do-i-pass-an-array-to-a-function-in-rust-and-change-its-content\">this question</a> I found out how to pass an array and change its content, but besides this the array must consist of types that can be compared. I've found the <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"nofollow noreferrer\"><code>std::cmp::PartialOrd</code></a> trait and figured out that the elements of an array need to implement it.</p>\n\n<p>By connecting this knowledge with the paragraph about <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html#dynamic-dispatch\" rel=\"nofollow noreferrer\">dynamic dispatch</a> in the Rust book I've built something like this:</p>\n\n<pre><code>use std::cmp;\n\nfn sort(arr: &amp;mut [&amp;std::cmp::PartialOrd]) {\n    // actual sorting\n}\n</code></pre>\n\n<p>This doesn't compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0393]: the type parameter `Rhs` must be explicitly specified\n --&gt; src/lib.rs:3:21\n  |\n3 | fn sort(arr: &amp;mut [&amp;std::cmp::PartialOrd]) {\n  |                     ^^^^^^^^^^^^^^^^^^^^ missing reference to `Rhs`\n  |\n  = note: because of the default `Self` reference, type parameters must be specified on object types\n</code></pre>\n\n<p>Is there a correct syntax to achieve passing an array of objects implementing a certain trait to a function?</p>\n"}, {"tags": ["string", "vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "edited": false, "score": 0, "creation_date": 1443937929, "post_id": 32930327, "comment_id": 53686871, "body": "Looks great. Thank you so much for clarifying why I need to store the string version."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443962030, "post_id": 32930327, "comment_id": 53692503, "body": "Isn&#39;t this whole point of the <code>Iterator::size_hint</code> method? So that you don&#39;t have to pre calculate vector lengths yourself?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443963579, "post_id": 32930327, "comment_id": 53692939, "body": "@Shepmaster Yes, except it&#39;s impossible for <code>chars</code> to know how many code points it&#39;s going to decode, so it can&#39;t possibly tell <code>Vec</code> how big it needs to be."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443966635, "post_id": 32930327, "comment_id": 53693832, "body": "<a href=\"http://is.gd/BCVmeW\" rel=\"nofollow noreferrer\">Not so</a>. It&#39;s actually trivial to know the <b>bounds</b> of the number of characters in a UTF-8 string, which is what <code>size_hint</code> allows for."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443968313, "post_id": 32930327, "comment_id": 53694337, "body": "@Shepmaster <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcollections/vec.rs#L1232-L1233\" rel=\"nofollow noreferrer\"><code>FromIterator for Vec</code></a> only uses the lower bound, <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/str/mod.rs#L407\" rel=\"nofollow noreferrer\"><code>Chars</code></a> provides both.  In this case, the lower bound will be roughly one quarter of the actual number, which <code>Vec</code> will round up to (in the case of 42) 2, which means it will have to resize at <i>least</i> once.  I still consider my code more correct if you&#39;re trying to minimise reallocations.  :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443968703, "post_id": 32930327, "comment_id": 53694456, "body": "Hmm. I guess it has to pick either the min or the max, although I&#39;m surprised that the max is completely ignored. I would have expected something along the lines of <code>max.unwrap_or(min + 1)</code>, as avoiding reallocation seems to save more."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443968778, "post_id": 32930327, "comment_id": 53694478, "body": "Also, your last example returns items in reverse order; was that intentional?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1443968917, "post_id": 32930327, "comment_id": 53694523, "body": "@Shepmaster Of... of course it was!  Uh... but I&#39;m just going to... change that.  For consistency!  Definitely <i>not</i> because I completely screwed it up... <i>whistles</i>"}, {"owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "edited": false, "score": 0, "creation_date": 1443977004, "post_id": 32930327, "comment_id": 53697011, "body": "Is it just me or is doing this overly complicated? Is it this difficult in C? Just trying to decide if it is the language that makes this difficult or the lack of a std lib or just how low level the language is. If it is similar in C or C++ then no big deal, if not then why is rust more complicated?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "edited": false, "score": 0, "creation_date": 1443980469, "post_id": 32930327, "comment_id": 53698103, "body": "@electrometro I think it&#39;s just you.  The first solution isn&#39;t that bad: it has two extra steps on account of Rust needing you to turn the string into an iterator explicitly and convert from <code>char</code>s to strings.  The last solution is more or less what you&#39;d do in C.  Depends on how much efficiency you need."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1443969112, "last_edit_date": 1443969112, "creation_date": 1443936200, "answer_id": 32930327, "question_id": 32929916, "link": "https://stackoverflow.com/questions/32929916/convert-int-to-a-vector-of-strings/32930327#32930327", "title": "Convert int to a vector of strings", "body": "<p>Ok, the first problem is that you don't store the result of <code>x.to_string()</code> anywhere.  As such, it will cease to exist at the end of the expression, meaning that <code>values</code> will be trying to reference a value that no longer exists.  Hence the error.  The simplest solution is to just store the temporary string somewhere so that it continues to exist:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n    let x_str = x.to_string();\n    let values: Vec&lt;&amp;str&gt; = x_str.split(|c: char| c.is_alphabetic()).collect();\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>Second problem: this outputs <code>[\"42\"]</code> because you told it to split on letters.  You probably meant to use <code>is_numeric</code>:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n    let x_str = x.to_string();\n    let values: Vec&lt;&amp;str&gt; = x_str.split(|c: char| c.is_numeric()).collect();\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>Third problem: this outputs <code>[\"\", \"\", \"\"]</code>, because those are the three strings <em>between</em> numeric characters.  Split's argument is the <em>separator</em>.  Thus, the third problem is that you're using entirely the wrong method to begin with.</p>\n\n<p>The closest <em>direct</em> equivalent to the Python code you listed would be:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n    let values: Vec&lt;String&gt; = x.to_string().chars().map(|c| c.to_string()).collect();\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>At last, it outputs: <code>[\"4\", \"2\"]</code>.</p>\n\n<p>But, this is horribly inefficient: this takes the integer, allocates an intermediate buffer, prints the integer to it, turns it into a string.  It takes each code point in that string, allocates an intermediate buffer, prints the code point to it, turns it into a string.  Then it collects all these strings into a <code>Vec</code>, possibly reallocating more than once.</p>\n\n<p>It <em>works</em>, but is a bit wasteful.  If you don't care about waste, you can stop reading now.</p>\n\n<p>You can make things a bit less wasteful by collecting code points instead of strings:</p>\n\n<pre><code>fn main() {\n    let x = 42;\n    let values: Vec&lt;char&gt; = x.to_string().chars().collect();\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>This outputs: <code>['4', '2']</code>.  Note the different quotes because we're using <code>char</code> instead of <code>String</code>.</p>\n\n<p>We can remove the intermediate allocations from <code>Vec</code> resizing by pre-allocating its storage, which gives us this version:</p>\n\n<pre><code>fn main() {\n    let x = 42u32; // no negatives!\n    let values = {\n        if x == 0 {\n            vec!['0']\n        } else {\n            // pre-allocate Vec so there's no resizing\n            let digits = 1 + (x as f64).log10() as u32;\n            let mut cs = Vec::with_capacity(digits as usize);\n            let mut div = 10u32.pow(digits - 1);\n            while div &gt; 0 {\n                cs.push((b'0' + ((x / div) % 10) as u8) as char);\n                div /= 10;\n            }\n            cs\n        }\n    };\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>Unless you're doing this in a loop, I'd just stick to the correct, wasteful version.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1443967198, "creation_date": 1443967198, "answer_id": 32934271, "question_id": 32929916, "link": "https://stackoverflow.com/questions/32929916/convert-int-to-a-vector-of-strings/32934271#32934271", "title": "Convert int to a vector of strings", "body": "<p>If you are looking for a performant version, I'd just use this</p>\n\n<pre><code>fn digits(mut val: u64) -&gt; Vec&lt;u8&gt; {\n    // An unsigned 64-bit number can have 20 digits\n    let mut result = Vec::with_capacity(20);\n\n    loop {\n        let digit = val % 10;\n        val = val / 10;\n        result.push(digit as u8);\n\n        if val == 0 { break }\n    }\n\n    result.reverse();\n    result\n}\n\nfn main() {\n    println!(\"{:?}\", digits(0));\n    println!(\"{:?}\", digits(1));\n    println!(\"{:?}\", digits(9));\n    println!(\"{:?}\", digits(10));\n    println!(\"{:?}\", digits(11));\n    println!(\"{:?}\", digits(1234567890));\n    println!(\"{:?}\", digits(0xFFFFFFFFFFFFFFFF));\n}\n</code></pre>\n\n<p>This may over allocate by a few bytes, but 20 bytes total is small unless you are doing this a <em>whole</em> bunch. It also leaves each value as a number, which you can convert to a string as needed.</p>\n"}, {"tags": [], "owner": {"reputation": 15475, "user_id": 1069200, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/4c033488b80a25de7c6adf976b10ba25?s=128&d=identicon&r=PG", "display_name": "Johan Larsson", "link": "https://stackoverflow.com/users/1069200/johan-larsson"}, "is_accepted": false, "score": 1, "last_activity_date": 1444342977, "last_edit_date": 1444342977, "creation_date": 1444342663, "answer_id": 33026859, "question_id": 32929916, "link": "https://stackoverflow.com/questions/32929916/convert-int-to-a-vector-of-strings/33026859#33026859", "title": "Convert int to a vector of strings", "body": "<p>What about:</p>\n\n<pre><code>let ss = value.to_string()\n              .chars()\n              .map(|c| c.to_string())\n              .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p><kbd><a href=\"http://is.gd/hIJ1V8\" rel=\"nofollow\">Demo</a></kbd></p>\n\n<p>Not the greatest perf but reads well.</p>\n"}], "owner": {"reputation": 3467, "user_id": 2958455, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/4bf81a9aa9aa3619f1197c901f079268?s=128&d=identicon&r=PG", "display_name": "Jared Mackey", "link": "https://stackoverflow.com/users/2958455/jared-mackey"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 151, "favorite_count": 0, "accepted_answer_id": 32930327, "answer_count": 3, "score": 1, "last_activity_date": 1444342977, "creation_date": 1443931501, "last_edit_date": 1443965768, "question_id": 32929916, "link": "https://stackoverflow.com/questions/32929916/convert-int-to-a-vector-of-strings", "title": "Convert int to a vector of strings", "body": "<p>I am trying to convert long numbers to a string vector. For example, <code>17562</code> would become <code>[\"1\", \"7\", \"5\", \"6\", \"2\"]</code>. I have seen a lot of examples of converting ints to strings, but no ints to string vectors. I want to iterate over each digit individually.</p>\n\n<p>Here is what I have so far, but it isn't working. </p>\n\n<pre><code>fn main() {\n    let x = 42;\n    let values: Vec&lt;&amp;str&gt; = x.to_string().split(|c: char| c.is_alphabetic()).collect();\n    println!(\"{:?}\", values);     \n}\n</code></pre>\n\n<p>Gives me the compiler error of :</p>\n\n<pre><code>&lt;anon&gt;:3:29: 3:42 error: borrowed value does not live long enough\n&lt;anon&gt;:3     let values: Vec&lt;&amp;str&gt; = x.to_string().split(|c: char| c.is_alphabetic()).collect();\n\n&lt;anon&gt;:3:88: 6:2 note: reference must be valid for the block suffix following statement 1 at 3:87...\n&lt;anon&gt;:3     let values: Vec&lt;&amp;str&gt; = x.to_string().split(|c: char| c.is_alphabetic()).collect();\n&lt;anon&gt;:4     println!(\"{:?}\", values);\n&lt;anon&gt;:5     \n&lt;anon&gt;:6 }\n&lt;anon&gt;:3:5: 3:88 note: ...but borrowed value is only valid for the statement at 3:4\n&lt;anon&gt;:3     let values: Vec&lt;&amp;str&gt; = x.to_string().split(|c: char| c.is_alphabetic()).collect();\n\n&lt;anon&gt;:3:5: 3:88 help: consider using a `let` binding to increase its lifetime\n&lt;anon&gt;:3     let values: Vec&lt;&amp;str&gt; = x.to_string().split(|c: char| c.is_alphabetic()).collect();\n</code></pre>\n\n<p>The equivalent of what I am trying to do in python would be <code>x = 42; x = list(str(x)); print(x)</code></p>\n"}, {"tags": ["performance", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1443981580, "post_id": 32922283, "comment_id": 53698418, "body": "I had to -1 since it&#39;s simply not performant enough. We cannot flatly repeat the line &quot;iterator inline great&quot; (which they do) to motivate conclusions like &quot;it optimizes to good code&quot; which are not true."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1443982099, "post_id": 32922283, "comment_id": 53698587, "body": "Relevant rust PR that improved <code>BufWriter</code> construction: <a href=\"https://github.com/rust-lang/rust/pull/26849/files#diff-a074b6c6ae44d9ac353aa145411afb53L65\" rel=\"nofollow noreferrer\">see this diff hunk</a>"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1443991121, "post_id": 32922283, "comment_id": 53701651, "body": "@bluss: fair enough \u2013 please note that I did not say this&#39;ll work in all circumstances, just for the specific example given."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1444570665, "post_id": 32922283, "comment_id": 53950004, "body": "True. The inlined <code>dots(5)</code> looks fine, you made an example that&#39;s nice and I answered with another that&#39;s not as great. I think it&#39;s important to say that <code>repeat().take()</code> doesn&#39;t always result in the best code. We could say the \u201csufficiently good compiler\u201d hasn&#39;t yet arrived."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 13, "last_activity_date": 1443881291, "last_edit_date": 1443881291, "creation_date": 1443873476, "answer_id": 32922283, "question_id": 32922113, "link": "https://stackoverflow.com/questions/32922113/is-repeatx-taken-performant/32922283#32922283", "title": "Is repeat(x).take(n) performant?", "body": "<p>Yes, this is Rusty\u2122 enough. And yes, LLVM will inline the whole thing if you compile with optimizations (e.g. <code>cargo build --release</code>). Check via <a href=\"https://play.rust-lang.org/?gist=39767c6e6ca4f217e68c&amp;version=stable\" rel=\"noreferrer\">play.rust-lang.org</a> and look at the generated assembly. The code in question is:</p>\n\n<pre><code>movb    $46, (%rax)\nmovb    $46, 1(%rax)\nmovb    $46, 2(%rax)\nmovb    $46, 3(%rax)\nmovb    $46, 4(%rax)\n</code></pre>\n\n<p>for five dots. I believe it might be possible to go faster by merging the first four dots into one</p>\n\n<pre><code>movd    $x2e2e2e2e, (%rax)\n</code></pre>\n\n<p>instruction, but I don't think it will make much of a difference. Edit: Actually depending on memory alignment, it may be faster <em>or</em> slower: if <code>%rax</code> is aligned, it could probably be a bit faster (depending on complex things like caches, prefetching, etc.), otherwise it will probably be slower (because of possible traps).</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1443887035, "last_edit_date": 1495540343, "creation_date": 1443877517, "answer_id": 32922928, "question_id": 32922113, "link": "https://stackoverflow.com/questions/32922113/is-repeatx-taken-performant/32922928#32922928", "title": "Is repeat(x).take(n) performant?", "body": "<blockquote>\n  <p>Does Rust generate concrete types for instances of generic struct types?</p>\n</blockquote>\n\n<p>Yes, this is called <em>monomorphization</em>.</p>\n\n<blockquote>\n  <p>Are method implementations inlined?</p>\n</blockquote>\n\n<p>Like many languages, this is a solid \"maybe\". There are <a href=\"http://doc.rust-lang.org/reference.html#inline-attributes\" rel=\"nofollow noreferrer\">hints you can provide the compiler</a> to control inlining both inter- and intra-crate, but it's usually up to the compiler to Do The Right Thing. As above, if a function uses a generic type, it's automatically available for monomorphization, which means that information needed to inline it is available in a compiled crate.</p>\n\n<blockquote>\n  <p>What is a good way to check this for myself?</p>\n</blockquote>\n\n<p>Many people will use the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust Playground</a> to view the LLVM IR or assembly. Of course, you can view that locally with <code>rustc --emit [asm|llvm-ir]</code>. When doing this, I put the code I'm interested in a function that will never be inlined. That makes it much easier to find in the assembly / IR output:</p>\n\n<pre><code>#[inline(never)]\nfn dots(n: usize) -&gt; String {\n    std::iter::repeat('.').take(n).collect()\n}\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/a/32922283/155423\">llogiq</a> has already pointed out, rustc and LLVM already see through your entire implementation and have unrolled it completely. The implementation changes based on how many characters you want though.</p>\n\n<p>The <strong>only</strong> way to know if it is fast is to profile. Quoting llogiq:</p>\n\n<blockquote>\n  <p>I believe it might be possible to go faster by merging the first four dots into one <code>movd</code></p>\n</blockquote>\n\n<p>I'd advocate testing any such code in The Real World. Assembly is non-trivial, especially the x64 / x86_64 variants. Instructions may have strange pipeline requirements or may cause other parts of the CPU to be unavailable.</p>\n\n<p>Profile, profile, profile! ^_^</p>\n"}, {"comments": [{"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "edited": false, "score": 1, "creation_date": 1444903974, "post_id": 32936529, "comment_id": 54101062, "body": "Built in release mode?"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 6, "last_activity_date": 1443981257, "creation_date": 1443981257, "answer_id": 32936529, "question_id": 32922113, "link": "https://stackoverflow.com/questions/32922113/is-repeatx-taken-performant/32936529#32936529", "title": "Is repeat(x).take(n) performant?", "body": "<p>It's not really performant, it's kind of bad.</p>\n\n<pre><code>const CAP: usize = 64 * 1024;\n\n#[bench]\nfn fill_string_repeat(b: &amp;mut Bencher) {\n    b.iter(|| {\n        repeat('.').take(CAP).collect::&lt;String&gt;()\n    });\n    b.bytes = CAP as u64;\n}\n\n#[bench]\nfn fill_string_vec(b: &amp;mut Bencher) {\n    b.iter(|| {\n        String::from_utf8(vec![b'.'; CAP])\n    });\n    b.bytes = CAP as u64;\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>test fill_string_repeat              ... bench:     240,467 ns/iter (+/- 719) = 272 MB/s\ntest fill_string_vec                 ... bench:     106,885 ns/iter (+/- 224) = 613 MB/s\n</code></pre>\n\n<p>The <code>vec!</code> solution is much better, and that is including the UTF-8 checking overhead, which dominates, use <code>String::from_utf8_unchecked</code> and get:</p>\n\n<pre><code>test fill_string_vec_unchecked       ... bench:      29,354 ns/iter (+/- 503) = 2232 MB/s\n</code></pre>\n\n<p>(Here basically just the memset remains.)</p>\n"}], "owner": {"reputation": 2481, "user_id": 81896, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/f12951e7ba0e407399f6ad1c353b24ad?s=128&d=identicon&r=PG", "display_name": "Micha\u0142 Bendowski", "link": "https://stackoverflow.com/users/81896/micha%c5%82-bendowski"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1213, "favorite_count": 0, "accepted_answer_id": 32922283, "answer_count": 3, "score": 7, "last_activity_date": 1443981257, "creation_date": 1443872414, "last_edit_date": 1495541042, "question_id": 32922113, "link": "https://stackoverflow.com/questions/32922113/is-repeatx-taken-performant", "title": "Is repeat(x).take(n) performant?", "body": "<p>I'm looking for an efficient way to write the following function, as discussed in <a href=\"https://stackoverflow.com/questions/31216646/repeat-string-with-integer-multiplication/31216683#31216683\">another question</a>:</p>\n\n<pre><code>fn dots(n: usize) -&gt; String {\n    std::iter::repeat('.').take(n).collect()\n}\n</code></pre>\n\n<p>Does Rust generate concrete types for instances of generic struct types? Is the result of <code>repeat('.').take(n)</code> (the struct <code>Take&lt;Repeat&lt;char&gt;&gt;</code>) equivalent to</p>\n\n<pre><code>struct Take_Repeat_char {\n    element: char,\n    n: usize\n}\n</code></pre>\n\n<p>Are method implementations inlined - will there be a version of <code>Take::next()</code> that has <code>Repeat::next()</code> inlined in it?</p>\n\n<p>What is a good way to check this for myself? Inspecting LLVM IR?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 27, "last_activity_date": 1546985106, "last_edit_date": 1546985106, "creation_date": 1443873843, "answer_id": 32922337, "question_id": 32921959, "link": "https://stackoverflow.com/questions/32921959/how-to-check-if-a-string-represents-a-floating-point-number/32922337#32922337", "title": "How to check if a string represents a floating-point number?", "body": "<p>You didn't give any examples, so I'll use <code>\"1.23\"</code> and <code>\"bob\"</code>.</p>\n\n<p>Just try to parse it:</p>\n\n<pre><code>fn main() {\n    let num = \"1.23\".parse::&lt;f64&gt;();\n    match num {\n        Ok(val) =&gt; println!(\"Yes, it was a number ({})\", val),\n        Err(why) =&gt; println!(\"Doesn't look like a number ({})\", why),\n    }\n}\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"noreferrer\"><code>str::parse</code></a> can return any type that implements the <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"noreferrer\"><code>FromStr</code> trait</a>. In this case, <code>f64</code> defines <a href=\"https://doc.rust-lang.org/std/num/struct.ParseFloatError.html\" rel=\"noreferrer\"><code>ParseFloatError</code></a> as the errors possible when converting a string to a floating point number.</p>\n\n<p>If you <em>just</em> care if it is a number or not, you can use <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok\" rel=\"noreferrer\"><code>is_ok</code></a>:</p>\n\n<pre><code>fn main() {\n    let is_num = \"1.23\".parse::&lt;f64&gt;().is_ok();\n    println!(\"Is a number: {}\", is_num);\n}\n</code></pre>\n"}], "owner": {"reputation": 632, "user_id": 4308511, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/56c3c96e5374a48aa733565f9e61711d?s=128&d=identicon&r=PG&f=1", "display_name": "Jakub", "link": "https://stackoverflow.com/users/4308511/jakub"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3593, "favorite_count": 2, "accepted_answer_id": 32922337, "answer_count": 1, "score": 9, "last_activity_date": 1546985106, "creation_date": 1443871353, "last_edit_date": 1443873683, "question_id": 32921959, "link": "https://stackoverflow.com/questions/32921959/how-to-check-if-a-string-represents-a-floating-point-number", "title": "How to check if a string represents a floating-point number?", "body": "<p>Is there a way in Rust to check if a string contains a floating-point number without resorting to regexes? </p>\n\n<p>Something giving similar result as this (used regex: <a href=\"https://regex101.com/r/pV6wJ6/2\" rel=\"noreferrer\">https://regex101.com/r/pV6wJ6/2</a>)</p>\n\n<pre><code>re = Regex::new(r#\"^-?(0|[1-9]\\d*)(\\.\\d+)?$\"#).unwrap()\nassert_eq!(is_number(some_string), re.is_match(some_string))\n</code></pre>\n"}, {"tags": ["linux", "rust"], "comments": [{"owner": {"reputation": 1243, "user_id": 679688, "user_type": "registered", "accept_rate": 23, "profile_image": "https://www.gravatar.com/avatar/688b35f9becc72d8ca0d2fbc76749119?s=128&d=identicon&r=PG", "display_name": "Joshua Chia", "link": "https://stackoverflow.com/users/679688/joshua-chia"}, "edited": false, "score": 1, "creation_date": 1446943364, "post_id": 32919929, "comment_id": 54955017, "body": "Which kernel are you running? I&#39;m using 4.2.5 and have a similar problem with mongod. As mongod&#39;s resident memory increases, the CPU spent in change_protection increases. If this problem reproduces in rust and mongod but not vastly different versions of the kernel, it could be a kernel problem instead of a rust or mongod problem."}, {"owner": {"reputation": 1652, "user_id": 221965, "user_type": "registered", "accept_rate": 36, "profile_image": "https://i.stack.imgur.com/kitvT.jpg?s=128&g=1", "display_name": "Dapeng", "link": "https://stackoverflow.com/users/221965/dapeng"}, "reply_to_user": {"reputation": 1243, "user_id": 679688, "user_type": "registered", "accept_rate": 23, "profile_image": "https://www.gravatar.com/avatar/688b35f9becc72d8ca0d2fbc76749119?s=128&d=identicon&r=PG", "display_name": "Joshua Chia", "link": "https://stackoverflow.com/users/679688/joshua-chia"}, "edited": false, "score": 1, "creation_date": 1447039538, "post_id": 32919929, "comment_id": 54979428, "body": "kernel is included in the post, I tried to convert the program into c, get the same problem. <a href=\"http://stackoverflow.com/questions/33257404/why-update-big-array-makes-change-protection-kernel-call-dominating-cpu\" title=\"why update big array makes change protection kernel call dominating cpu\">stackoverflow.com/questions/33257404/&hellip;</a>"}, {"owner": {"reputation": 1243, "user_id": 679688, "user_type": "registered", "accept_rate": 23, "profile_image": "https://www.gravatar.com/avatar/688b35f9becc72d8ca0d2fbc76749119?s=128&d=identicon&r=PG", "display_name": "Joshua Chia", "link": "https://stackoverflow.com/users/679688/joshua-chia"}, "edited": false, "score": 1, "creation_date": 1447216670, "post_id": 32919929, "comment_id": 55062471, "body": "Does the problem repro if you pin your process to one core? Maybe experiment with numactl options? My problem with mongod goes away when I run it with numactl --interleave=all."}], "answers": [{"tags": [], "owner": {"reputation": 3492, "user_id": 118958, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/NwFFJ.jpg?s=128&g=1", "display_name": "ynimous", "link": "https://stackoverflow.com/users/118958/ynimous"}, "is_accepted": false, "score": 1, "last_activity_date": 1466842729, "creation_date": 1466842729, "answer_id": 38026447, "question_id": 32919929, "link": "https://stackoverflow.com/questions/32919929/why-does-change-protection-hog-cpu-while-loading-a-large-amount-of-data-into-r/38026447#38026447", "title": "Why does `change_protection` hog CPU while loading a large amount of data into RAM?", "body": "<p>This seems to be an OS issue, rather than an issue with this specific rust function.</p>\n\n<p>Most OSes (including Linux) use <a href=\"https://en.wikipedia.org/wiki/Demand_paging\" rel=\"nofollow\">demand paging</a>. By default, Linux will not allocate physical pages for newly allocated memory. Instead it will allocate a single zero page with read-only permissions for all the allocated memory (i.e., all virtual memory pages will point to this single physical memory page).</p>\n\n<p>If you attempt to write to the memory, a page fault will happen, a new page will be allocated, and it's permissions will be set accordingly.</p>\n\n<p>I'm guessing that you are seeing this effect in your program. If you try to do the same thing a second time, it should be much faster. There are also ways to control this policy via <code>sysctl</code>: <a href=\"https://www.kernel.org/doc/Documentation/vm/overcommit-accounting\" rel=\"nofollow\">https://www.kernel.org/doc/Documentation/vm/overcommit-accounting</a>.</p>\n\n<p>Not sure why you disabled THP, but in this case large pages might help you since the protection change will happen once for every large page (2Mib) instead of once per normal page (4KiB).</p>\n"}], "owner": {"reputation": 1652, "user_id": 221965, "user_type": "registered", "accept_rate": 36, "profile_image": "https://i.stack.imgur.com/kitvT.jpg?s=128&g=1", "display_name": "Dapeng", "link": "https://stackoverflow.com/users/221965/dapeng"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 279, "favorite_count": 1, "answer_count": 1, "score": 11, "last_activity_date": 1466842729, "creation_date": 1443856345, "last_edit_date": 1443936630, "question_id": 32919929, "link": "https://stackoverflow.com/questions/32919929/why-does-change-protection-hog-cpu-while-loading-a-large-amount-of-data-into-r", "title": "Why does `change_protection` hog CPU while loading a large amount of data into RAM?", "body": "<p>We have built an in memory database, which eats about 100-150G RAM in a single <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\">Vec</a>, which is populated like this:</p>\n\n<pre><code>let mut result = Vec::with_capacity(a_very_large_number);\nwhile let Ok(n) = reader.read(&amp;mut buffer) {\n    result.push(...);\n}\n</code></pre>\n\n<p><code>perf top</code> shows that the time is mostly spent in this \"change_protection\" function:</p>\n\n<pre><code>Samples: 48K of event 'cpu-clock', Event count (approx.): 694742858\n 62.45%  [kernel]              [k] change_protection\n 18.18%  iron                  [.] database::Database::init::h63748\n  7.45%  [kernel]              [k] vm_normal_page\n  4.88%  libc-2.17.so          [.] __memcpy_ssse3_back\n  0.92%  [kernel]              [k] copy_user_enhanced_fast_string\n  0.52%  iron                  [.] memcpy@plt\n</code></pre>\n\n<p>The CPU usage of this function grows as more and more data is loaded into RAM: </p>\n\n<pre><code>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n12383 iron      20   0  137g  91g 1372 D 76.1 37.9  27:37.00 iron\n</code></pre>\n\n<p>The code is running on an r3.8xlarge AWS EC2 instance, and transparent hugepage is already disabled.</p>\n\n<pre><code>[~]$ cat /sys/kernel/mm/transparent_hugepage/defrag\nalways madvise [never]\n[~]$ cat /sys/kernel/mm/transparent_hugepage/enabled\nalways madvise [never]\n</code></pre>\n\n<p>cpuinfo</p>\n\n<pre><code>processor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 62\nmodel name  : Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\nstepping    : 4\nmicrocode   : 0x428\ncpu MHz     : 2500.070\ncache size  : 25600 KB\nphysical id : 0\nsiblings    : 16\ncore id     : 0\ncpu cores   : 8\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp lm constant_tsc rep_good nopl xtopology eagerfpu pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm xsaveopt fsgsbase smep erms\nbogomips    : 5000.14\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 46 bits physical, 48 bits virtual\npower management:\n</code></pre>\n\n<p>kernel </p>\n\n<pre><code>3.14.35-28.38.amzn1.x86_64\n</code></pre>\n\n<p>the real question is why is there so much overhead in that function? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1443819175, "post_id": 32913368, "comment_id": 53659227, "body": "I would hope that eventually, <code>BTreeMap</code> could gain a method like <code>fn drain(&amp;mut self, Range&lt;K&gt;)</code>. Of relevance is <a href=\"https://github.com/rust-lang/rfcs/issues/460\" rel=\"nofollow noreferrer\">this proto RFC</a>, but check out <a href=\"https://github.com/rust-lang/rfcs/pull/1254\" rel=\"nofollow noreferrer\">this one</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/1257\" rel=\"nofollow noreferrer\">this one</a> as well."}, {"owner": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443820947, "post_id": 32913368, "comment_id": 53659968, "body": "@Shepmaster -- Of course, the thing here is that it&#39;s not Range&lt;K&gt;, but rather Range&lt;V&gt;"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17491, "user_id": 901827, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/86a6acccf7e8dbe398ebda4f8524ed50?s=128&d=identicon&r=PG", "display_name": "LinearZoetrope", "link": "https://stackoverflow.com/users/901827/linearzoetrope"}, "edited": false, "score": 0, "creation_date": 1443821196, "post_id": 32913368, "comment_id": 53660078, "body": "@Jsor ah, I missed that. I feel that is an unlikely case, so it is indeed a sticky case!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1444028640, "post_id": 32913368, "comment_id": 53710988, "body": "Here what is needed is a version of <code>drain</code> taking a predicate, it would indeed be a worthwhile addition."}], "answers": [{"comments": [{"owner": {"reputation": 2232, "user_id": 1430323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/70e8f1601166dab5b623eeb428115050?s=128&d=identicon&r=PG", "display_name": "tofcoder", "link": "https://stackoverflow.com/users/1430323/tofcoder"}, "edited": false, "score": 0, "creation_date": 1443861833, "post_id": 32916151, "comment_id": 53668325, "body": "This is an interesting idea."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1444028575, "post_id": 32916151, "comment_id": 53710958, "body": "Note that dependent on the size of the map compared to the number of elements to be removed, this is not a clear gain in terms of performance."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1531333991, "last_edit_date": 1531333991, "creation_date": 1443821467, "answer_id": 32916151, "question_id": 32913368, "link": "https://stackoverflow.com/questions/32913368/removing-items-from-a-btreemap-or-btreeset-found-through-iteration/32916151#32916151", "title": "Removing items from a BTreeMap or BTreeSet found through iteration", "body": "<p>TL;DR: you cannot.</p>\n\n<p>As far as the compiler is concerned, the implementation of <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.remove\" rel=\"nofollow noreferrer\"><code>BTreeMap::remove</code></a> might do this:</p>\n\n<pre><code>pub fn remove&lt;Q&gt;(&amp;mut self, key: &amp;Q) -&gt; Option&lt;V&gt;\nwhere\n    K: Borrow&lt;Q&gt;,\n    Q: Ord + ?Sized,\n{\n    // actual deleting code, which destroys the value in the set\n    // now what `value` pointed to is gone and `value` points to invalid memory\n\n    // And now we access that memory, causing undefined behavior\n    key.borrow();\n}\n</code></pre>\n\n<p>The compiler thus has to prevent using the reference to the value when the collection will be mutated.</p>\n\n<p>To do this, you'd need something like the hypothetical \"cursor\" API for collections. This would allow you to iterate over the collection, returning a special type that hold the mutable innards of the collection. This type could give you a reference to check against and then allow you to remove the item.</p>\n\n<hr>\n\n<p>I'd probably look at the problem from a bit different direction. Instead of trying to keep the map, I'd just create a brand new one:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\npub fn main() {\n    let mut map = BTreeMap::new();\n\n    map.insert(\"thief\", 5);\n    map.insert(\"troll\", 52);\n    map.insert(\"gnome\", 7);\n\n    let map: BTreeMap&lt;_, _&gt; =\n        map.into_iter()\n        .filter(|&amp;(_, v)| v &lt;= 10)\n        .collect();\n\n    println!(\"{:?}\", map); // troll is gone\n}\n</code></pre>\n\n<hr>\n\n<p><strong>If</strong> your condition is equality on the field that makes the struct unique (a.k.a is the only field used in <code>PartialEq</code> and <code>Hash</code>), you can implement <code>Borrow</code> for your type and directly grab it / delete it:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\n#[derive(Debug, PartialEq, Eq, PartialOrd, Ord)]\nstruct Monster(String);\n\nuse std::borrow::Borrow;\n\nimpl Borrow&lt;str&gt; for Monster {\n    fn borrow(&amp;self) -&gt; &amp;str { &amp;self.0 }\n}\n\npub fn main() {\n    let mut map = BTreeMap::new();\n\n    map.insert(Monster(\"thief\".into()), 5);\n    map.insert(Monster(\"troll\".into()), 52);\n    map.insert(Monster(\"gnome\".into()), 7);\n\n    map.remove(\"troll\");\n\n    println!(\"{:?}\", map); // troll is gone\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/45786717/155423\">How to implement HashMap with two keys?</a></li>\n<li><a href=\"https://stackoverflow.com/q/36480845/155423\">How to avoid temporary allocations when using a complex key for a HashMap?</a></li>\n</ul>\n"}], "owner": {"reputation": 2232, "user_id": 1430323, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/70e8f1601166dab5b623eeb428115050?s=128&d=identicon&r=PG", "display_name": "tofcoder", "link": "https://stackoverflow.com/users/1430323/tofcoder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2724, "favorite_count": 2, "accepted_answer_id": 32916151, "answer_count": 1, "score": 8, "last_activity_date": 1531423466, "creation_date": 1443809839, "last_edit_date": 1531423466, "question_id": 32913368, "link": "https://stackoverflow.com/questions/32913368/removing-items-from-a-btreemap-or-btreeset-found-through-iteration", "title": "Removing items from a BTreeMap or BTreeSet found through iteration", "body": "<p>I would like to remove items from a <code>BTreeMap</code> which have been found through iteration.</p>\n\n<p>As it is not possible to remove items while iterating, I put the items to delete into a vector. The main issue is that it is not possible to use a vector of <em>references</em>, but only a vector of values. All the keys for which the entry has to be removed must then be cloned (assuming the key implements the <code>Clone</code> trait).</p>\n\n<p>For instance, this short sample does not compile:</p>\n\n<pre><code>use std::collections::BTreeMap;\n\npub fn clean() {\n    let mut map = BTreeMap::&lt;String, i32&gt;::new();\n\n    let mut to_delete = Vec::new();\n\n    {\n        for (k, v) in map.iter() {\n            if *v &gt; 10 {\n                to_delete.push(k);\n            }\n        }\n    }\n\n    for k in to_delete.drain(..) {\n        map.remove(k);\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>It generates the following errors when it is compiled:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `map` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:17:9\n   |\n9  |         for (k, v) in map.iter() {\n   |                       --- immutable borrow occurs here\n...\n17 |         map.remove(k);\n   |         ^^^ mutable borrow occurs here\n18 |     }\n19 | }\n   | - immutable borrow ends here\n</code></pre>\n\n<p>Changing <code>to_delete.push(k)</code> with <code>to_delete.push(k.clone())</code> makes this snippet compile correctly but it is quite costly if each key to delete must be cloned.</p>\n\n<p>Is there a better solution?</p>\n"}, {"tags": ["rust", "type-inference", "type-mismatch"], "answers": [{"comments": [{"owner": {"reputation": 1156, "user_id": 4772791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e9e0e4bd022920a359eac1b22749ca6?s=128&d=identicon&r=PG&f=1", "display_name": "arsv", "link": "https://stackoverflow.com/users/4772791/arsv"}, "edited": false, "score": 0, "creation_date": 1443782303, "post_id": 32903822, "comment_id": 53638819, "body": "Bingo. gfx_debug_draw 0.4.0 from dev_menu and 0.5.0 from several others. Fixed by replacing 0.4.0 with 0.5.0 in several files under ~/.cargo. I wonder if there&#39;s any better way to do this, other than fixing it upstream.  Also, not my project."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1443789981, "post_id": 32903822, "comment_id": 53642728, "body": "Ultimately this is <a href=\"https://github.com/rust-lang/rust/issues/22750\" rel=\"nofollow noreferrer\">issue 22750</a>, which has improved error message in the most recent nightly builds."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 4, "last_activity_date": 1443776859, "last_edit_date": 1443776859, "creation_date": 1443776524, "answer_id": 32903822, "question_id": 32903119, "link": "https://stackoverflow.com/questions/32903119/mismatched-types-expected-somestruct-got-somestructr-f/32903822#32903822", "title": "Mismatched types: expected somestruct&lt;_,_&gt; got somestruct&lt;R,F&gt;", "body": "<p>It looks like your project uses two different versions of <code>gfx_debug_draw</code> (hence <code>found a different struct gfx_debug_draw::debug_renderer::DebugRenderer</code>. It's the same struct, but from different versions of the same package.), probably because you specify one version in your <code>Cargo.toml</code> and one of your dependencies specifies a different version. You should check your <code>Cargo.lock</code> to see if that's true, and then make sure you use the same version of the crate everywhere. </p>\n"}], "owner": {"reputation": 1156, "user_id": 4772791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7e9e0e4bd022920a359eac1b22749ca6?s=128&d=identicon&r=PG&f=1", "display_name": "arsv", "link": "https://stackoverflow.com/users/4772791/arsv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 32903822, "answer_count": 1, "score": 1, "last_activity_date": 1443776859, "creation_date": 1443773830, "question_id": 32903119, "link": "https://stackoverflow.com/questions/32903119/mismatched-types-expected-somestruct-got-somestructr-f", "title": "Mismatched types: expected somestruct&lt;_,_&gt; got somestruct&lt;R,F&gt;", "body": "<p>Could anyone please explain what does this error mean? That's literally the same struct.\nDoes it fail to infer R or F somehow and reports it this way?</p>\n\n<pre><code>src/demo.rs:113:51: 113:65 error: mismatched types:\n expected `&amp;mut gfx_debug_draw::debug_renderer::DebugRenderer&lt;_, _&gt;`,\n    found `&amp;mut gfx_debug_draw::debug_renderer::DebugRenderer&lt;R, F&gt;`\n(expected struct `gfx_debug_draw::debug_renderer::DebugRenderer`,\n    found a different struct `gfx_debug_draw::debug_renderer::DebugRenderer`) [E0308]\nsrc/demo.rs:113                 self.skeleton.draw(&amp;global_poses, debug_renderer, settings.draw_labels);\n                                                                  ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>The offending line is here:\n<a href=\"https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L113\" rel=\"nofollow\">https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L113</a>\ndebug_renderer is defined here:\n<a href=\"https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L97\" rel=\"nofollow\">https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L97</a>\nand\u00a0the types come from impl here:\n<a href=\"https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L43\" rel=\"nofollow\">https://github.com/PistonDevelopers/skeletal_animation_demo/blob/master/src/demo.rs#L43</a></p>\n\n<p>The function itself is here:\n<a href=\"https://github.com/PistonDevelopers/skeletal_animation/blob/master/src/skeleton.rs#L66-L70\" rel=\"nofollow\">https://github.com/PistonDevelopers/skeletal_animation/blob/master/src/skeleton.rs#L66-L70</a></p>\n\n<p>Rust 1.5 and 1.3, same error.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1443763899, "creation_date": 1443763899, "answer_id": 32901074, "question_id": 32900809, "link": "https://stackoverflow.com/questions/32900809/how-to-suppress-function-is-never-used-warning-for-a-function-used-by-tests/32901074#32901074", "title": "How to suppress &quot;function is never used&quot; warning for a function used by tests?", "body": "<p><code>dead_code</code> is a lint, which means you can <code>allow</code> it on the thing that's causing it to trigger.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[allow(dead_code)]\nfn dummy() {}\n\nfn main() {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "edited": false, "score": 1, "creation_date": 1528158828, "post_id": 32901552, "comment_id": 88390762, "body": "&quot;If something is only used in tests, it should be omitted altogether.&quot;  What if you&#39;re writing a library, where the intent is for others&#39; code, not this one, to use it?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "edited": false, "score": 6, "creation_date": 1528263220, "post_id": 32901552, "comment_id": 88434511, "body": "@SilasBarta: then it will be a public function, and not dead code."}, {"owner": {"reputation": 2902, "user_id": 773754, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/4a8ff761f5d046326a04927935be3979?s=128&d=identicon&r=PG", "display_name": "rspeer", "link": "https://stackoverflow.com/users/773754/rspeer"}, "edited": false, "score": 6, "creation_date": 1563486576, "post_id": 32901552, "comment_id": 100727092, "body": "Because the other responses aren&#39;t saying this very explicitly, and I keep having to rediscover this myself: if you&#39;re getting a dead code warning on a library function that you have tests for, one common reason for it is that you forgot to mark it <code>pub</code>."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 13, "last_activity_date": 1518390668, "last_edit_date": 1518390668, "creation_date": 1443766813, "answer_id": 32901552, "question_id": 32900809, "link": "https://stackoverflow.com/questions/32900809/how-to-suppress-function-is-never-used-warning-for-a-function-used-by-tests/32901552#32901552", "title": "How to suppress &quot;function is never used&quot; warning for a function used by tests?", "body": "<p>If something is only used in tests, it should be omitted altogether. This can be done with the <code>#[cfg(test)]</code> attribute.</p>\n"}, {"comments": [{"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 2, "creation_date": 1474589936, "post_id": 32908553, "comment_id": 66604771, "body": "Am I missing something?  I&#39;m doing <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\" rel=\"nofollow noreferrer\">TDD</a> and don&#39;t want to see warnings for tests that <i>are</i> being used by tests <b>when I&#39;m  testing</b>.  If I were to produce a release build without the tests and with no implemented callers, <i>then</i> I would expect to see warnings, as the functions are truly not being used.  Is there a way to have Rust warn me when the functions are <b>actually</b> not being used?"}, {"owner": {"reputation": 12996, "user_id": 23855, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/7e01724270741126f0d814d028078dff?s=128&d=identicon&r=PG", "display_name": "chills42", "link": "https://stackoverflow.com/users/23855/chills42"}, "edited": false, "score": 1, "creation_date": 1475083697, "post_id": 32908553, "comment_id": 66804074, "body": "That&#39;s where the second case comes in, #[cfg(test)] would not turn off any dead code checks, so you would still have all warnings as expected, but the tests methods would only be included in a test version."}, {"owner": {"reputation": 1441, "user_id": 520601, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/447a3c1a9bbf28142962fc7eb55ebdf9?s=128&d=identicon&r=PG", "display_name": "Tadas \u0160ubonis", "link": "https://stackoverflow.com/users/520601/tadas-%c5%a0ubonis"}, "edited": false, "score": 0, "creation_date": 1575713241, "post_id": 32908553, "comment_id": 104664147, "body": "Can this be configured project-wide in some Cargo configuration file?"}, {"owner": {"reputation": 14204, "user_id": 732016, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9d2eb40aff994d83e1d271a3543efb22?s=128&d=identicon&r=PG", "display_name": "wchargin", "link": "https://stackoverflow.com/users/732016/wchargin"}, "edited": false, "score": 0, "creation_date": 1602367137, "post_id": 32908553, "comment_id": 113699308, "body": "Worth noting that <code>cargo check --tests</code> runs checks in the test configuration, and thus will not flag items as dead if they are used in tests."}, {"owner": {"reputation": 148451, "user_id": 309308, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/dd7e03fbbfcabd4675844173ec5390d2?s=128&d=identicon&r=PG", "display_name": "Michael Mrozek", "link": "https://stackoverflow.com/users/309308/michael-mrozek"}, "edited": false, "score": 0, "creation_date": 1614383923, "post_id": 32908553, "comment_id": 117378117, "body": "It&#39;s <code>#![allow(dead_code)]</code>, right? Your example is missing the <code>!</code>"}, {"owner": {"reputation": 14053, "user_id": 2189130, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/trlri.png?s=128&g=1", "display_name": "kmdreko", "link": "https://stackoverflow.com/users/2189130/kmdreko"}, "reply_to_user": {"reputation": 148451, "user_id": 309308, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/dd7e03fbbfcabd4675844173ec5390d2?s=128&d=identicon&r=PG", "display_name": "Michael Mrozek", "link": "https://stackoverflow.com/users/309308/michael-mrozek"}, "edited": false, "score": 1, "creation_date": 1614618746, "post_id": 32908553, "comment_id": 117433926, "body": "@MichaelMrozek <code>#![...]</code> applies the attribute to the encompassing scope whereas <code>#[...]</code> is just applied to the following item. As shown, this suppresses the warning <i>only</i> for that function. <a href=\"https://doc.rust-lang.org/reference/attributes.html\" rel=\"nofollow noreferrer\">See Attributes in the Rust Reference</a>"}], "tags": [], "owner": {"reputation": 12996, "user_id": 23855, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/7e01724270741126f0d814d028078dff?s=128&d=identicon&r=PG", "display_name": "chills42", "link": "https://stackoverflow.com/users/23855/chills42"}, "is_accepted": true, "score": 48, "last_activity_date": 1610729697, "last_edit_date": 1610729697, "creation_date": 1443793412, "answer_id": 32908553, "question_id": 32900809, "link": "https://stackoverflow.com/questions/32900809/how-to-suppress-function-is-never-used-warning-for-a-function-used-by-tests/32908553#32908553", "title": "How to suppress &quot;function is never used&quot; warning for a function used by tests?", "body": "<h3>Specific question</h3>\n<blockquote>\n<p>How I can mark this function as used so as not to get the warnings?</p>\n</blockquote>\n<p>The Rust compiler runs many <a href=\"https://en.wikipedia.org/wiki/Lint_(software)\" rel=\"nofollow noreferrer\">lints</a> to warn you about possible issues in your code and the <code>dead_code</code> lint is one of them. It can be very useful in pointing out mistakes when code is complete, but may also be a nuisance at earlier stages. Often, this can be solved by either deleting unused code, or by marking a public method. However, all lints can be turned off by <code>allow</code>ing them, and your error message (<code>#[warn(dead_code)] on by default</code>) contains the name of the lint you could disable.</p>\n<pre><code>#[allow(dead_code)]\nfn my_unused_function() {}\n</code></pre>\n<h3>Alternative for testing</h3>\n<blockquote>\n<p>I wrote a helper function for these tests, but whenever I build using <code>cargo build</code> it warns me that the function is never used.</p>\n</blockquote>\n<p>This happens to be a special case, which is that code that is only used for testing isn't needed in the real executable and should probably not be included.</p>\n<p>In order to optionally disable compilation of test code, you can mark it accordingly using the <a href=\"https://doc.rust-lang.org/book/conditional-compilation.html\" rel=\"nofollow noreferrer\"><code>cfg</code> attribute</a> with the <code>test</code> profile.</p>\n<pre><code>#[cfg(test)]\nfn my_test_specific_function() {}\n</code></pre>\n<p>When marked in this way, the compiler knows to ignore the method during compilation. This is similar to commonly used <code>ifdef</code> usage in other languages like C or C++, where you are telling a preprocessor to ignore the enclosed code unless <code>TESTING</code> is defined.</p>\n<pre class=\"lang-c prettyprint-override\"><code>#ifdef TESTING\n...\n#endif\n</code></pre>\n"}], "owner": {"reputation": 860, "user_id": 1636594, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/qyJGR.jpg?s=128&g=1", "display_name": "Derokorian", "link": "https://stackoverflow.com/users/1636594/derokorian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13972, "favorite_count": 5, "accepted_answer_id": 32908553, "answer_count": 3, "score": 35, "last_activity_date": 1610729697, "creation_date": 1443762013, "last_edit_date": 1443797939, "question_id": 32900809, "link": "https://stackoverflow.com/questions/32900809/how-to-suppress-function-is-never-used-warning-for-a-function-used-by-tests", "title": "How to suppress &quot;function is never used&quot; warning for a function used by tests?", "body": "<p>I'm writing a program in Rust and I have some tests for it. I wrote a helper function for these tests, but whenever I build using <code>cargo build</code> it warns me that the function is never used:</p>\n\n<blockquote>\n  <p>warning: function is never used: ... #[warn(dead_code)] on by default</p>\n</blockquote>\n\n<p>How I can mark this function as used so as not to get the warnings?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1443705841, "last_edit_date": 1443705841, "creation_date": 1443697899, "answer_id": 32886137, "question_id": 32885446, "link": "https://stackoverflow.com/questions/32885446/dynamically-select-a-function-to-call-without-intermediate-variables/32886137#32886137", "title": "Dynamically select a function to call without intermediate variables", "body": "<p>The following works, if you only need to work with static functions and not closures:</p>\n\n<pre><code>fn foo() {\n    println!(\"Foo\");\n}\n\nfn bar() {\n    println!(\"Bar\");\n}\n\nfn main() {\n    let selector = 0;\n\n    let test: fn() = match selector {\n        0 =&gt; foo,\n        _ =&gt; bar\n    };\n\n    test();\n}\n</code></pre>\n\n<p>(try on <a href=\"https://play.rust-lang.org/?gist=02d23cb4ee5ab08f38df&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>Here I've used function type instead of function trait.</p>\n\n<p>The reason that the borrowed trait object doesn't work is probably the following. Any trait object is a fat pointer which consists of a pointer to some value and a pointer to a virtual table. When the trait object is created out of a closure, everything is clear - the value would be represented by the closure itself (internally being an instance of a structure containing all captured variables) and the virtual table would contain a pointer to the implementation of the corresponding <code>Fn*()</code> trait generated by the compiler whose body would be the closure body.</p>\n\n<p>With functions, however, things are not so clear. There are no value to create a trait object from because the function itself should correspond to the implementation of <code>Fn()</code> trait. Therefore, rustc probably generates an empty structure and implements <code>Fn()</code> for it, and this implementation calls the static function directly (not actual Rust, but something close):</p>\n\n<pre><code>struct SomeGeneratedStructFoo;\n\nimpl Fn&lt;()&gt; for SomeGeneratedStructFoo {\n    type Output = ();\n    fn call(&amp;self, args: ()) -&gt; () {\n        foo();\n    }\n}\n</code></pre>\n\n<p>Therefore, when a trait object is created out of <code>fn foo()</code>, a reference is taken in fact to a temporary value of type <code>SomeGeneratedStructFoo</code>. However, this value is created inside the match, and only a reference to it is returned from the match, thus this value does not live long enough, and that's what the error is about.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 1, "last_activity_date": 1443751359, "creation_date": 1443751359, "answer_id": 32899481, "question_id": 32885446, "link": "https://stackoverflow.com/questions/32885446/dynamically-select-a-function-to-call-without-intermediate-variables/32899481#32899481", "title": "Dynamically select a function to call without intermediate variables", "body": "<p><code>fn()</code> is a function pointer type. It's <strong>already</strong> a pointer type. You can check this with <code>std::mem::size_of::&lt;fn()&gt;()</code>. It is not a zero-sized type.</p>\n\n<p>When you do <code>&amp;foo</code>, you take a pointer to a stack allocated pointer. This inner pointer does not survive very long, causing the error.</p>\n\n<p>You can cast these to the generic <code>fn()</code> type as suggested. I would be interested in knowing why you can't cast <code>fn()</code> to <code>&amp;Fn()</code>, though.</p>\n"}], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1755, "favorite_count": 3, "accepted_answer_id": 32886137, "answer_count": 2, "score": 12, "last_activity_date": 1443751359, "creation_date": 1443695894, "last_edit_date": 1443710356, "question_id": 32885446, "link": "https://stackoverflow.com/questions/32885446/dynamically-select-a-function-to-call-without-intermediate-variables", "title": "Dynamically select a function to call without intermediate variables", "body": "<p>I'm trying to select a function to call depending on a condition. I want to store that function in a variable so that I can call it again later without carrying the condition around. Here's a working minimal example:</p>\n\n<pre><code>fn foo() {\n    println! (\"Foo\");\n}\nfn bar() {\n    println! (\"Bar\");\n}\n\nfn main() {\n    let selector = 0;\n\n    let foo: &amp;Fn() = &amp;foo;\n    let bar: &amp;Fn() = &amp;bar;\n    let test = match selector {\n        0 =&gt; foo,\n        _ =&gt; bar\n    };\n    test();\n}\n</code></pre>\n\n<p>My question is: is it possible to get rid of the intermediate variables? I've tried simply removing them:</p>\n\n<pre><code>fn foo() {\n    println! (\"Foo\");\n}\nfn bar() {\n    println! (\"Bar\");\n}\n\nfn main() {\n    let selector = 0;\n\n    let test = match selector {\n        0 =&gt; &amp;foo as &amp;Fn(),\n        _ =&gt; &amp;bar as &amp;Fn()\n    };\n    test();\n}\n</code></pre>\n\n<p>but then the borrow checker complains that the borrowed values are only valid until the end of the match (btw, why? the functions are <code>'static</code> anyway so should be valid to the end of times). I've also tried making the <code>'static</code> lifetime explicit by using <code>&amp;foo as &amp;'static Fn()</code> but that doesn't work either.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1443687199, "post_id": 32882321, "comment_id": 53595551, "body": "that&#39;s odd... even if you put the for loop into its own scope the same error occurs..."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1443687440, "post_id": 32882321, "comment_id": 53595667, "body": "This only occurs if you return references in the for-loop. MCVE of your issue is here: <a href=\"http://is.gd/dJFkUz\" rel=\"nofollow noreferrer\">is.gd/dJFkUz</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1443711281, "post_id": 32882321, "comment_id": 53611039, "body": "The <a href=\"http://is.gd/atsegO\" rel=\"nofollow noreferrer\">desugared version</a> experiences the same problem. This certainly is feeling like a bug..."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1443771827, "post_id": 32882321, "comment_id": 53633683, "body": "kindof a bug, more of an oversight I think... It&#39;s most likely going to be fixed by SEME"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443757676, "post_id": 32900244, "comment_id": 53629166, "body": "<i>the borrow checker works in terms of lexical scopes</i> \u2014 except in this case, a separate lexical scope does not help. The <a href=\"http://is.gd/atsegO\" rel=\"nofollow noreferrer\">desugared version</a> or the <a href=\"http://is.gd/EHmRrU\" rel=\"nofollow noreferrer\">sugared version</a> both have lexical scopes that don&#39;t help."}, {"owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1443758551, "post_id": 32900244, "comment_id": 53629365, "body": "I tried to clarify.  The scope of the variables don&#39;t matter; the issue is the scope of the borrow, which can be expanded beyond the immediate lexical scope."}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": false, "score": 1, "last_activity_date": 1443758454, "last_edit_date": 1443758454, "creation_date": 1443757344, "answer_id": 32900244, "question_id": 32882321, "link": "https://stackoverflow.com/questions/32882321/confused-about-borrowing-error-in-struct-method/32900244#32900244", "title": "Confused about borrowing error in struct method", "body": "<p>This is a limitation of the borrow checker.  The way you're reasoning that the function is safe is essentially treating the function as two paths: along the path where the function returns <code>Some(x)</code>, you don't borrow <code>my_list</code> again, and along the path where the function returns <code>None</code>, the borrow ends after the for loop.</p>\n\n<p>That isn't the way the borrow checker looks at the function; the borrow checker works in terms of lexical scopes.  It tries to pick a scope as narrow as possible, but it will treat the the whole function as the scope if necessary.  It sees that the lifetime in the return value is the same as the lifetime of <code>self</code>, therefore the lifetime of the value referenced by <code>x</code> must be the same as <code>self</code>, therefore the borrow <code>&amp;self.my_list</code> must have the same lifetime as <code>self</code>, therefore the borrow lasts beyond the return of the function.</p>\n\n<p>If you write the function differently, Rust will accept it:</p>\n\n<pre><code>fn Baz(&amp;mut self, name : &amp;'static str) -&gt; Option&lt;&amp;Foo&gt; {\n    match self.my_list.iter().position(|x| x.name == name) {\n        Some(i) =&gt; Some(&amp;self.my_list[i]),\n        None =&gt; {\n            self.my_list.push(Foo { name : \"foo\" });\n            None\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 309, "user_id": 840010, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/8fc0e8fb7474381c0cb1655e7f0640bc?s=128&d=identicon&r=PG", "display_name": "Tom Tetlaw", "link": "https://stackoverflow.com/users/840010/tom-tetlaw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 150, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1443758454, "creation_date": 1443686281, "last_edit_date": 1443687453, "question_id": 32882321, "link": "https://stackoverflow.com/questions/32882321/confused-about-borrowing-error-in-struct-method", "title": "Confused about borrowing error in struct method", "body": "<p>I'm trying to write some code for an entity system in  a game but I'm getting this error so I've boiled the code into something that does the same thing, I get the same error in the actual code.</p>\n\n<p>I don't understand why the compiler is telling me that the reference to <code>self.my_list</code> goes out of scope when the function <code>baz</code> finishes.</p>\n\n<p>My rust version is <code>rustc 1.3.0 (9a92aaf19 2015-09-15)</code></p>\n\n<p>I would have thought that it goes out of scope when the <code>for</code> loop ends?</p>\n\n<pre><code>struct Foo {\n    name : &amp;'static str,\n}\n\nstruct Bar {\n    my_list : Vec&lt;Foo&gt;,\n}\n\nimpl Bar {\n    fn New() -&gt; Bar {\n        let mut new_instance = Bar { my_list : vec!() };\n        new_instance.my_list.push(Foo { name : \"foo1\" });\n        new_instance.my_list.push(Foo { name : \"foo2\" });\n        new_instance.my_list.push(Foo { name : \"foo3\" });\n        return new_instance;\n    }\n\n    fn Baz(&amp;mut self, name : &amp;'static str) -&gt; Option&lt;&amp;Foo&gt; {\n        for x in &amp;self.my_list {\n            if x.name == name {\n                return Some(x);\n            }\n        }\n\n        self.my_list.push(Foo { name : \"foo\" });\n\n        return None;\n    }\n}\n\nfn main() {\n    let mut bar = Bar::New();\n    if let Some(x) = bar.Baz(\"foo1\") {\n        println!(\"{} found\", x.name);\n    }\n}\n</code></pre>\n\n<p>This is the error message that I get:</p>\n\n<pre><code>Compiling tutorial v0.1.0 (file:///C:/Code/Projects/rust/tutorial)\nsrc\\main.rs:35:9: 35:21 error: cannot borrow `self.my_list` as mutable because it is also borrowed as immutable\nsrc\\main.rs:35         self.my_list.push(Foo { name : \"foo\" });\n                       ^~~~~~~~~~~~\nsrc\\main.rs:29:19: 29:31 note: previous borrow of `self.my_list` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `self.my_list` until the borrow ends\nsrc\\main.rs:29         for x in &amp;self.my_list {\n                                 ^~~~~~~~~~~~\nnote: in expansion of for loop expansion\nsrc\\main.rs:29:9: 33:10 note: expansion site\nsrc\\main.rs:38:6: 38:6 note: previous borrow ends here\nsrc\\main.rs:28     fn Baz(&amp;mut self, name : &amp;'static str) -&gt; Option&lt;&amp;Foo&gt; {\n...\nsrc\\main.rs:38     }\n                   ^\nerror: aborting due to previous error\nCould not compile `tutorial`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1443689787, "post_id": 32882108, "comment_id": 53597014, "body": "I have a reduced test case with a similar issue: <a href=\"https://gist.github.com/59c6f269351efe805bcc\" rel=\"nofollow noreferrer\">gist.github.com/59c6f269351efe805bcc</a> =&gt; the conversion from slice to <code>Iterator&lt;Item=&amp;&#39;a i32&gt;</code> works, but the conversion from slice to <code>Iter&lt;&#39;a&gt;</code> does not even though it&#39;s just an alias of the former."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1443691496, "post_id": 32882108, "comment_id": 53598117, "body": "@MatthieuM. Ok, this seems the problem. Or maybe part of the problem? Should I edit the answer to address this smaller problem?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1443696253, "post_id": 32882108, "comment_id": 53600943, "body": "I do not think you need to edit your question, it is just that I did not have time to progress further and therefore submitted my results so far in case someone could build upon them to submit an answer :)"}], "answers": [{"comments": [{"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1443711290, "post_id": 32890245, "comment_id": 53611044, "body": "One of the versions of the <code>impl Trait</code> I&#39;ve tried was this: <code>fn iter(&amp;self) -&gt; Box&lt;Iter + &#39;a&gt;</code>, but the compiler complained that <code>Iter</code> is not a trait. So, if you type alias a trait it is no more a trait? I thought type aliases was, like C++ aliases and typedefs, only sugar!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1443712330, "post_id": 32890245, "comment_id": 53611720, "body": "@brt yeah, that&#39;s part of what I was alluding to with my &quot;<i>I don&#39;t understand</i>&quot; line. Traits do have a type, which is why you can say <code>&amp;SomeTrait</code>. I get a bit fuzzy in those details though."}, {"owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "edited": false, "score": 0, "creation_date": 1443712735, "post_id": 32890245, "comment_id": 53612003, "body": "Very strange. Maybe it&#39;s material for another question. This is solved for me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1443712348, "last_edit_date": 1443712348, "creation_date": 1443710058, "answer_id": 32890245, "question_id": 32882108, "link": "https://stackoverflow.com/questions/32882108/trait-to-store-structs-with-different-generic-parameters/32890245#32890245", "title": "Trait to store structs with different generic parameters", "body": "<p>Problem 1 \u2014 <code>slice::Iter&lt;T&gt;</code> has an <code>Iterator::Item</code> of <code>&amp;T</code>, thus your reference levels are mismatched. Change your method to be</p>\n\n<pre><code>fn iter(&amp;self) -&gt; slice::Iter&lt;i32&gt;\n</code></pre>\n\n<p>Problem 2 \u2014 <code>Box&lt;SomeTrait&gt;</code> is equivalent to <code>Box&lt;SomeTrait + 'static&gt;</code>, but your iterator does not live for the <code>'static</code> lifetime. You need to explicitly bring in a lifetime:</p>\n\n<pre><code>Box&lt;SomeTrait + 'a&gt;\n</code></pre>\n\n<p>Problem 3 \u2014 I don't understand how you can create a type alias for a trait, that seems very odd. You probably don't want it anyway. Instead, create a type alias for the whole boxed version:</p>\n\n<pre><code>type IterBox&lt;'a&gt; = Box&lt;Iterator&lt;Item=&amp;'a i32&gt; + 'a&gt;;\n</code></pre>\n\n<p>Problem 4 \u2014 Rearrange your <code>main</code> so that references will live long enough and add mutability:</p>\n\n<pre><code>fn main() {\n    let i = 3;\n    let v = vec![&amp;i];\n    let mut traits : Vec&lt;Box&lt;Trait&gt;&gt; = Vec::new();\n    traits.push(Box::new(Struct{ items: v }));\n}\n</code></pre>\n\n<p>All together:</p>\n\n<pre><code>use std::slice;\n\ntype IterBox&lt;'a&gt; = Box&lt;Iterator&lt;Item=&amp;'a i32&gt; + 'a&gt;;\n\ntrait Trait {\n    fn iter&lt;'a&gt;(&amp;'a self) -&gt; IterBox;\n}\n\nstruct Struct&lt;'a, T: 'a&gt; {\n    items: Vec&lt;&amp;'a T&gt;\n}\n\nimpl&lt;'a, T: 'a&gt; Struct&lt;'a, T&gt; {\n    fn iter(&amp;self) -&gt; slice::Iter&lt;i32&gt; {\n        unimplemented!()\n    }\n}\n\nimpl&lt;'a, T: 'a&gt; Trait for Struct&lt;'a, T&gt; {\n    fn iter(&amp;self) -&gt; IterBox {\n        Box::new(self.iter())\n    }\n}\n\nfn main() {\n    let i = 3;\n    let v = vec![&amp;i];\n    let mut traits: Vec&lt;Box&lt;Trait&gt;&gt; = Vec::new();\n    traits.push(Box::new(Struct { items: v }));\n}\n</code></pre>\n"}], "owner": {"reputation": 1459, "user_id": 1667955, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/X2hLR.jpg?s=128&g=1", "display_name": "mbrt", "link": "https://stackoverflow.com/users/1667955/mbrt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1524, "favorite_count": 2, "accepted_answer_id": 32890245, "answer_count": 1, "score": 3, "last_activity_date": 1443712348, "creation_date": 1443685586, "last_edit_date": 1443709298, "question_id": 32882108, "link": "https://stackoverflow.com/questions/32882108/trait-to-store-structs-with-different-generic-parameters", "title": "Trait to store structs with different generic parameters", "body": "<p>I need to store in the same <code>Vec</code> instances of the same struct, but with different generic parameters. This is the struct definition:</p>\n\n<pre><code>struct Struct&lt;'a, T: 'a&gt; {\n    items: Vec&lt;&amp;'a T&gt;\n}\n</code></pre>\n\n<p>The struct has a method returning an iterator to a type that does not depend on the generic type parameter <code>T</code>:</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; Struct&lt;'a, T&gt; {\n    fn iter(&amp;self) -&gt; slice::Iter&lt;&amp;i32&gt; {\n        unimplemented!()\n    }\n}\n</code></pre>\n\n<p>I need to access this method for those different structs in the vector, so I've implemented this trait:</p>\n\n<pre><code>type Iter&lt;'a&gt; = Iterator&lt;Item=&amp;'a i32&gt;;\n\ntrait Trait {\n    fn iter(&amp;self) -&gt; Box&lt;Iter&gt;;\n}\n</code></pre>\n\n<p>And I've implemented the trait for <code>Struct</code>:</p>\n\n<pre><code>impl&lt;'a, T: 'a&gt; Trait for Struct&lt;'a, T&gt; {\n    fn iter(&amp;self) -&gt; Box&lt;Iter&gt; {\n        Box::new(self.iter())\n    }\n}\n</code></pre>\n\n<p>But the compiler complains:</p>\n\n<pre><code>&lt;anon&gt;:21:9: 21:30 error: type mismatch resolving `&lt;core::slice::Iter&lt;'_, &amp;i32&gt; as core::iter::Iterator&gt;::Item == &amp;i32`:\nexpected &amp;-ptr,\n    found i32 [E0271]\n&lt;anon&gt;:21         Box::new(self.iter())\n                  ^~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:21:9: 21:30 help: see the detailed explanation for E0271\n&lt;anon&gt;:21:9: 21:30 note: required for the cast to the object type `core::iter::Iterator&lt;Item=&amp;i32&gt; + 'static`\n&lt;anon&gt;:21         Box::new(self.iter())\n                  ^~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I've tried different possibilities for lifetime parameters in the trait, but none of them work. How can I make this work?</p>\n\n<p><a href=\"http://is.gd/FDPzKY\" rel=\"nofollow\">Rust Playground snippet</a></p>\n\n<p><strong>Edit</strong></p>\n\n<p>As pointed out by @MatthieuM. one problem is that the type alias is not working properly. Here's another example demonstrating this:</p>\n\n<pre><code>use std::slice;\n\ntype Iter&lt;'a&gt; = Iterator&lt;Item=&amp;'a i32&gt;;\n\nstruct Struct&lt;'a&gt; { _phantom: std::marker::PhantomData&lt;&amp;'a i32&gt; }\n\nimpl&lt;'a&gt; Struct&lt;'a&gt; {\n    fn direct&lt;'b&gt;(i: &amp;'b slice::Iter&lt;'a, i32&gt;) -&gt; &amp;'b Iterator&lt;Item=&amp;'a i32&gt;\n    { i }\n\n    fn aliased&lt;'b&gt;(i: &amp;'b slice::Iter&lt;'a, i32&gt;) -&gt; &amp;'b Iter&lt;'a&gt;\n    { i }\n}\n</code></pre>\n\n<p>In this example, <code>direct</code> compiles, but <code>aliased</code> not, with the error:</p>\n\n<pre><code>&lt;anon&gt;:12:7: 12:8 error: the type `core::slice::Iter&lt;'a, i32&gt;` does not fulfill the required lifetime\n&lt;anon&gt;:12     { i }\n                ^\nnote: type must outlive the static lifetime\n</code></pre>\n\n<p>But they seem to be the same thing. What's happening?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1020, "user_id": 2752850, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e7ea3ae5dd4eb7dea7aa992aa970287?s=128&d=identicon&r=PG", "display_name": "Kites", "link": "https://stackoverflow.com/users/2752850/kites"}, "edited": false, "score": 0, "creation_date": 1445665612, "post_id": 32888867, "comment_id": 54428461, "body": "That seems to work well -- and I get why <code>FnMut</code> doesn&#39;t. I&#39;m having trouble calling the function after I&#39;ve put it in the box. It seems like that might be just something that can&#39;t happen in rust?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1020, "user_id": 2752850, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e7ea3ae5dd4eb7dea7aa992aa970287?s=128&d=identicon&r=PG", "display_name": "Kites", "link": "https://stackoverflow.com/users/2752850/kites"}, "edited": false, "score": 0, "creation_date": 1445702545, "post_id": 32888867, "comment_id": 54438363, "body": "@Kites yeah, that&#39;s a bit of a complication, sadly. There&#39;s <a href=\"https://users.rust-lang.org/t/can-i-call-a-box-fnonce/778/2\" rel=\"nofollow noreferrer\">a few</a> ways <a href=\"https://doc.rust-lang.org/std/boxed/trait.FnBox.html\" rel=\"nofollow noreferrer\">to work around</a> the problem <a href=\"https://github.com/rust-lang/rust/issues/28796\" rel=\"nofollow noreferrer\">for now</a>, but I&#39;m unclear on the stability of them."}, {"owner": {"reputation": 1020, "user_id": 2752850, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e7ea3ae5dd4eb7dea7aa992aa970287?s=128&d=identicon&r=PG", "display_name": "Kites", "link": "https://stackoverflow.com/users/2752850/kites"}, "edited": false, "score": 0, "creation_date": 1445710281, "post_id": 32888867, "comment_id": 54440949, "body": "that&#39;s what I was seeing :/ -- thanks for the links!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1443709181, "last_edit_date": 1443709181, "creation_date": 1443706136, "answer_id": 32888867, "question_id": 32879649, "link": "https://stackoverflow.com/questions/32879649/how-do-i-specify-a-lifetime-that-is-dependent-on-the-borrowed-binding-of-a-closu/32888867#32888867", "title": "How do I specify a lifetime that is dependent on the borrowed binding of a closure in a separate type?", "body": "<p>The problem is in this line:</p>\n\n<pre><code>SFunction::new(Box::new(|| f(self)))\n</code></pre>\n\n<p>Here, <code>self</code> is a reference to a <code>Lexer</code>, but there's no guarantee that the lexer will live long enough. In fact, it needs to live for the <code>'static</code> lifetime! Without a lifetime specified, a <em>boxed trait object</em> will use the <code>'static</code> lifetime. Said in code, these two declarations are equivalent:</p>\n\n<pre><code>&lt;Box&lt;FnMut() -&gt; SFunction&gt;&gt;\n&lt;Box&lt;FnMut() -&gt; SFunction&gt; + 'static&gt;\n</code></pre>\n\n<p>And you can make your code compile (in an unsatisfactory way) by restricting it to accept only references that will live for the <code>'static</code> lifetime:</p>\n\n<pre><code>fn lex(&amp;'static mut self) {\n    self.sfunction(Lexer::lex_normal).call()\n}\n\nfn sfunction(&amp;'static mut self, f: fn(&amp;mut Lexer) -&gt; SFunction) -&gt; SFunction {\n    SFunction::new(Box::new(move || f(self)))\n}\n</code></pre>\n\n<p>Of course, it's very doubtful that you will have a <code>Lexer</code> with the static lifetime, as that would mean that it's lexing static data, which wouldn't be very useful. That means we need to include lifetimes in your trait object... as you suggested.</p>\n\n<p>Ultimately what helped to see the problem was to restructure your closure a bit:</p>\n\n<pre><code>fn sfunction(&amp;mut self, f: fn(&amp;mut Lexer) -&gt; SFunction) -&gt; SFunction {\n    SFunction::new(Box::new(move || {\n        // f(self)\n        let s2 = self;\n        let f2 = f;\n        f2(s2)\n    }))\n}\n</code></pre>\n\n<p>Compiling this produces an error that points to what seems to be the <em>real</em> problem:</p>\n\n<pre><code>&lt;anon&gt;:31:22: 31:26 error: cannot move out of captured outer variable in an `FnMut` closure [E0507]\n&lt;anon&gt;:31             let s2 = self;\n                               ^~~~\n&lt;anon&gt;:31:17: 31:19 note: attempting to move value to here\n&lt;anon&gt;:31             let s2 = self;\n                          ^~\n&lt;anon&gt;:31:17: 31:19 help: to prevent the move, use `ref s2` or `ref mut s2` to capture value by reference\n</code></pre>\n\n<p>I believe this is because a <code>FnMut</code> closure may be called multiple times, which would mean that the reference enclosed in the closure would need to be copied around, which would be bad news as <code>&amp;mut</code> references should be unique.</p>\n\n<p>All together, this code works:</p>\n\n<pre><code>struct SFunction&lt;'a&gt; {\n    f: Option&lt;Box&lt;FnOnce() -&gt; SFunction&lt;'a&gt; + 'a&gt;&gt;, \n}\n\nimpl&lt;'a&gt; SFunction&lt;'a&gt; {\n    fn new(f: Box&lt;FnOnce() -&gt; SFunction&lt;'a&gt; + 'a&gt;) -&gt; SFunction&lt;'a&gt; {\n        SFunction {\n            f: Some(f),\n        }\n    }\n\n    fn empty() -&gt; SFunction&lt;'a&gt; {\n        SFunction {\n            f: None,\n        }\n    }\n\n    fn call(self) { }\n}\n\nstruct Lexer;\n\nimpl Lexer {\n    fn lex(&amp;mut self) {\n        self.sfunction(Lexer::lex_normal).call()\n    }\n\n    fn sfunction(&amp;mut self, f: fn(&amp;mut Lexer) -&gt; SFunction) -&gt; SFunction {\n        SFunction::new(Box::new(move || f(self)))\n    }\n\n    fn lex_normal&lt;'z&gt;(&amp;'z mut self) -&gt; SFunction&lt;'z&gt; {\n        SFunction::empty()\n    }\n}\n\nfn main() {\n    let mut l = Lexer;\n    l.lex()\n}\n</code></pre>\n\n<p>I hope my explanation is right and that the changed code still suits your use case!</p>\n"}], "owner": {"reputation": 1020, "user_id": 2752850, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e7ea3ae5dd4eb7dea7aa992aa970287?s=128&d=identicon&r=PG", "display_name": "Kites", "link": "https://stackoverflow.com/users/2752850/kites"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 382, "favorite_count": 0, "accepted_answer_id": 32888867, "answer_count": 1, "score": 6, "last_activity_date": 1443709181, "creation_date": 1443674927, "last_edit_date": 1443685433, "question_id": 32879649, "link": "https://stackoverflow.com/questions/32879649/how-do-i-specify-a-lifetime-that-is-dependent-on-the-borrowed-binding-of-a-closu", "title": "How do I specify a lifetime that is dependent on the borrowed binding of a closure in a separate type?", "body": "<p>I have two types: <code>Lexer</code> and <code>SFunction</code>.</p>\n\n<p><code>SFunction</code> stands for stateful function and is definined like so:</p>\n\n<pre><code>struct SFunction {\n    f: Option&lt;Box&lt;FnMut() -&gt; SFunction&gt;&gt;, \n}\n</code></pre>\n\n<p>The important part is that any <code>SFunction</code> references a closure that returns an <code>SFunction</code>. </p>\n\n<p>Now I want to have these functions carry state by each affecting the same <code>Lexer</code>. This means that each of these <code>SFunctions</code> has to have a lifetime that depends on a specific <code>Lexer</code>. </p>\n\n<p>Here's some more code if you want to get more of a sense of what I'm doing with this: </p>\n\n<pre><code>impl Lexer {\n    fn lex(&amp;mut self) {\n        self.sfunction(Lexer::lexNormal).call()\n    }\n\n    fn sfunction(&amp;mut self, f: fn(&amp;mut Lexer) -&gt; SFunction) -&gt; SFunction {\n\n        SFunction::new(Box::new(|| f(self)))\n        // SFunction { f: Some(Box::new(move ||f(self))) }\n    }\n\n    fn lexNormal(&amp;mut self) -&gt; SFunction {\n        return SFunction::empty()\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/kO1Eg5\" rel=\"nofollow\">(Here\u2019s a full version of the code in the Rust playground.)</a></p>\n\n<p>How do I specify this lifetime requirement in the code? </p>\n\n<p>The compiler errors I'm getting say \"cannot infer an appropriate lifetime for capture of <code>self</code> by closure due to conflicting requirements\". I'm pretty sure the \"conflicting requirements\" here is that a <code>Box</code> type assumes the lifetime to be <code>'static</code>. I could do something like <code>Box&lt;FnMut() -&gt; SFunction + 'a&gt;</code> where <code>'a</code> is a lifetime defined by the Lexer it depends upon, but I'm not sure how to define such an <code>'a</code>.</p>\n\n<p>Thanks for your help!</p>\n"}]