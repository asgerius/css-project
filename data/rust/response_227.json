[{"tags": ["rust", "mutex", "serde"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557951226, "post_id": 56156876, "comment_id": 98942985, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/56156876/edit\">edit</a> your question to include it. We cannot tell what crates (and their versions), types, traits, fields, etc. are present in the code. Try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1557960303, "last_edit_date": 1557960303, "creation_date": 1557951904, "answer_id": 56157114, "question_id": 56156876, "link": "https://stackoverflow.com/questions/56156876/how-to-deserialize-a-parking-lotmutex-with-serde/56157114#56157114", "title": "How to deserialize a parking_lot::Mutex with Serde?", "body": "<p>Support for Serde was added to parking_lot 0.8 under the <code>serde</code> <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section\" rel=\"nofollow noreferrer\">feature flag</a>:</p>\n\n<pre><code>parking_lot = { version = \"0.8\", features = [\"nightly\", \"serde\"] }\n</code></pre>\n\n<p>Using this, the code you have provided compiles. This also compiles:</p>\n\n<pre><code>use parking_lot::Mutex;\nuse serde::{Deserialize, Serialize};\n\nfn implements&lt;T&gt;()\nwhere\n    Mutex&lt;T&gt;: for&lt;'a&gt; Deserialize&lt;'a&gt; + Serialize,\n{\n}\n</code></pre>\n"}], "owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 249, "favorite_count": 0, "accepted_answer_id": 56157114, "answer_count": 1, "score": 1, "last_activity_date": 1557960303, "creation_date": 1557950833, "last_edit_date": 1557951658, "question_id": 56156876, "link": "https://stackoverflow.com/questions/56156876/how-to-deserialize-a-parking-lotmutex-with-serde", "title": "How to deserialize a parking_lot::Mutex with Serde?", "body": "<p>I have a struct of memory (<code>obj</code>) wrapped in an <code>Arc&lt;Mutex&gt;</code>. The <code>Mutex</code> is an improved version of the <code>std::sync::Mutex</code> in the parking_lot crate. I need to deserialize the wrapped object (<code>obj</code>), however, I get an error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait `_IMPL_DESERIALIZE_FOR_SecurityLevel::_serde::Deserialize&lt;'_&gt;` is not implemented for `lock_api::mutex::Mutex&lt;parking_lot::raw_mutex::RawMutex, Obj&gt;`\n</code></pre>\n\n<p>In my Cargo.toml, I have (notably):</p>\n\n<pre><code>serde = { version = \"1.0.89\", features = [\"rc\"] }\nparking_lot = {version = \"0.8\", features = [\"nightly\"]}\n</code></pre>\n\n<p>How should I go about this? Is there a workaround, or must I manually implement the traits?</p>\n"}, {"tags": ["rust", "itertools", "borrow-checker"], "comments": [{"owner": {"reputation": 4459, "user_id": 127251, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9b6273d6505f5cead55793f95dbe7873?s=128&d=identicon&r=PG", "display_name": "Paul Chernoch", "link": "https://stackoverflow.com/users/127251/paul-chernoch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557951522, "post_id": 56156814, "comment_id": 98943099, "body": "@Shepmaster - Thanks for the edit!"}], "answers": [{"comments": [{"owner": {"reputation": 4459, "user_id": 127251, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9b6273d6505f5cead55793f95dbe7873?s=128&d=identicon&r=PG", "display_name": "Paul Chernoch", "link": "https://stackoverflow.com/users/127251/paul-chernoch"}, "edited": false, "score": 0, "creation_date": 1558012583, "post_id": 56159012, "comment_id": 98965554, "body": "Excellent! I am a C# programmer, and I always use IEnumerables in a foreach loop, never a while loop, so this did not occur to me."}], "tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": true, "score": 1, "last_activity_date": 1557973678, "last_edit_date": 1557973678, "creation_date": 1557963958, "answer_id": 56159012, "question_id": 56156814, "link": "https://stackoverflow.com/questions/56156814/can-i-use-itertoolsputbackput-back-in-a-loop/56159012#56159012", "title": "Can I use itertools::PutBack::put_back in a loop?", "body": "<p><code>for</code> loops allow you to iterate over anything which implements <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a>. This trait defines <code>into_iter(self)</code> which consumes the object it is being called on and returns an iterator. This is true even when <code>self</code> is already an iterator (as it is in your code).</p>\n\n<p>Thus, the <code>for</code> loop consumes the iterator, making it inaccessible within the loop.</p>\n\n<p>An alternative is to use a <code>while let</code> loop instead:</p>\n\n<pre><code>use itertools::put_back; // 0.8.0\n\nfn main() {\n    let hello = \"Hello world\".to_owned();\n    let hello_iter = hello.chars();\n    let mut putback_iterator = put_back(hello_iter);\n    let mut already_putback = false;\n    while let Some(c) = putback_iterator.next() {\n        if c == 'd' &amp;&amp; !already_putback {\n            putback_iterator.put_back('!');\n            already_putback = true;\n        }\n        println!(\"Char is {}\", c.to_string());\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ecd11531ae87920d5f413eb0abfb3e8e\" rel=\"nofollow noreferrer\">Playground Link</a></p>\n"}], "owner": {"reputation": 4459, "user_id": 127251, "user_type": "registered", "accept_rate": 57, "profile_image": "https://www.gravatar.com/avatar/9b6273d6505f5cead55793f95dbe7873?s=128&d=identicon&r=PG", "display_name": "Paul Chernoch", "link": "https://stackoverflow.com/users/127251/paul-chernoch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 91, "favorite_count": 0, "accepted_answer_id": 56159012, "answer_count": 1, "score": 1, "last_activity_date": 1557973678, "creation_date": 1557950592, "last_edit_date": 1557950811, "question_id": 56156814, "link": "https://stackoverflow.com/questions/56156814/can-i-use-itertoolsputbackput-back-in-a-loop", "title": "Can I use itertools::PutBack::put_back in a loop?", "body": "<p>My use case:</p>\n\n<ul>\n<li>Loop over string</li>\n<li>React to each character in a lexical analyzer state machine</li>\n<li>On seeing some characters, realize that the previous character was the end of its token</li>\n<li>finish up the token</li>\n<li>transition back to the <strong>Empty</strong> state (meaning no token is partially constructed)</li>\n<li>push the \"extra\" character back onto the iterator with <code>put_back</code></li>\n<li>continue the state machine processing, where the put back character will be available for the first character in the next token.</li>\n</ul>\n\n<p>Here is an example of an attempt:</p>\n\n<pre><code>use itertools::put_back; // 0.8.0\n\nfn main() {\n    let hello = \"Hello world\".to_owned();\n    let hello_iter = hello.chars();\n    let mut putback_iterator = put_back(hello_iter);\n    let mut already_putback = false;\n    for c in putback_iterator {\n        if c == 'd' &amp;&amp; !already_putback {\n            putback_iterator.put_back('!');\n            already_putback = true;\n        }\n        println!(\"Char is {}\", c.to_string());\n    }\n}\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: borrow of moved value: `putback_iterator`\n  --&gt; src/main.rs:10:13\n   |\n6  |     let mut putback_iterator = put_back(hello_iter);\n   |         -------------------- move occurs because `putback_iterator` has type `itertools::adaptors::PutBack&lt;std::str::Chars&lt;'_&gt;&gt;`, which does not implement the `Copy` trait\n7  |     let mut already_putback = false;\n8  |     for c in putback_iterator {\n   |              ---------------- value moved here\n9  |         if c == 'd' &amp;&amp; !already_putback {\n10 |             putback_iterator.put_back('!');\n   |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n</code></pre>\n\n<p>How would I loop over the characters and perform a <code>put_back</code>? I can't find any worked examples using <code>put_back</code>.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557938056, "post_id": 56153943, "comment_id": 98937228, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/56153943/edit\">edit</a> your question to include it. We cannot tell what crates (and their versions), types, traits, fields, etc. are present in the code. Try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1557938314, "post_id": 56153943, "comment_id": 98937362, "body": "You have asked a number of poorly-received questions recently (<a href=\"https://stackoverflow.com/q/56122374/155423\">false warning \u201cvalue assigned is never read\u201d</a>; <a href=\"https://stackoverflow.com/q/56121904/155423\">How do I print the the field of a struct when I get the error \u201cno field on type std::result::Result\u201d?</a>). Please consider re-evaluating your question-asking style based on the edits made to your questions and the requests that people have made."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557938494, "post_id": 56153943, "comment_id": 98937445, "body": "The code you have provided is not valid Rust: <code>Trait</code> and <code>Module</code> are not declared anywhere. Please <b>test</b> your code in a new Cargo project or in the Playground to ensure that the code you provide produces the error you are asking about."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557941136, "post_id": 56153943, "comment_id": 98938669, "body": "Btw, it&#39;s not a pointer, but a reference. It&#39;a a huge difference. You should consider to read <a href=\"https://doc.rust-lang.org/stable/book/\" rel=\"nofollow noreferrer\">the book</a> to learn the language properly."}], "answers": [{"comments": [{"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1557940989, "post_id": 56154173, "comment_id": 98938600, "body": "Adding ` where T::AccountId:Copy` sentence worked, thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1557939021, "creation_date": 1557939021, "answer_id": 56154173, "question_id": 56153943, "link": "https://stackoverflow.com/questions/56153943/how-does-one-get-around-a-borrowed-content-error-when-reading-a-value-from-a-r/56154173#56154173", "title": "How does one get around a &quot;borrowed content&quot; error when reading a value from a reference to a trait&#39;s associated type?", "body": "<p>Your problem can be reduced to</p>\n\n<pre><code>trait Example {\n    type AccountId;\n}\n\nfn get_account_id&lt;T&gt;(who: &amp;T::AccountId)\nwhere\n    T: Example,\n{\n    *who;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n --&gt; src/lib.rs:8:5\n  |\n8 |     *who;\n  |     ^^^^ cannot move out of borrowed content\n</code></pre>\n\n<p>In order for this code to compile, <code>T::AccountId</code> must implement <code>Copy</code>:</p>\n\n<pre><code>fn get_account_id&lt;T&gt;(who: &amp;T::AccountId)\nwhere\n    T: Example,\n    T::AccountId: Copy,\n{\n    *who;\n}\n</code></pre>\n\n<p>This is not the most flexible solution, however.</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/25684227/155423\">What&#39;s the idiomatic way to copy from a primitive type reference by value?</a></li>\n<li><a href=\"https://stackoverflow.com/q/54258253/155423\">How do I define trait bounds on an associated type?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28258548/155423\">Cannot move out of borrowed content when trying to transfer ownership</a></li>\n<li><a href=\"https://stackoverflow.com/q/28158738/155423\">Cannot move out of borrowed content</a></li>\n<li><a href=\"https://stackoverflow.com/q/27904864/155423\">What does &quot;cannot move out of indexed content&quot; mean?</a></li>\n<li><a href=\"https://stackoverflow.com/q/34621969/155423\">&quot;cannot move out borrowed content&quot; when assigning a variable from a struct field</a></li>\n</ul>\n"}], "owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 50, "favorite_count": 0, "accepted_answer_id": 56154173, "answer_count": 1, "score": -2, "last_activity_date": 1557939021, "creation_date": 1557938039, "last_edit_date": 1557938530, "question_id": 56153943, "link": "https://stackoverflow.com/questions/56153943/how-does-one-get-around-a-borrowed-content-error-when-reading-a-value-from-a-r", "title": "How does one get around a &quot;borrowed content&quot; error when reading a value from a reference to a trait&#39;s associated type?", "body": "<p>I have a pointer to an <code>u64</code> value and I can't read it. I am getting this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n   --&gt; /home/niko/sub/substrate/srml/system/src/lib.rs:533:32\n    |\n533 |             let mut aid: T::AccountId = *copy_who;\n    |                                         ^^^^^^^^^\n    |                                         |\n    |                                         cannot move out of borrowed content\n    |                                         help: consider removing the `*`: `copy_who`\n</code></pre>\n\n<p>How does one get around \"borrowed content\" error? What is the point of having a pointer to a variable if you can't read anything that it points to?</p>\n\n<pre><code>impl&lt;T: Trait&gt; Module&lt;T&gt; {\n    // getter for AccountId\n    pub fn get_account_id(who: &amp;T::AccountId) -&gt; T::AccountId {\n        let mut copy_who: &amp;T::AccountId = who;\n        {\n            let mut aid: T::AccountId = *copy_who;\n            return aid;\n        }\n    }\n}\n</code></pre>\n\n<p><code>AccountId</code> is defined like this:</p>\n\n<pre><code>type AccountId = u64;\n</code></pre>\n"}, {"tags": ["process", "rust", "waitpid"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557935206, "post_id": 56153020, "comment_id": 98935821, "body": "<i><code>make test</code></i> \u2014 you have provided no Makefile."}, {"owner": {"reputation": 14204, "user_id": 732016, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9d2eb40aff994d83e1d271a3543efb22?s=128&d=identicon&r=PG", "display_name": "wchargin", "link": "https://stackoverflow.com/users/732016/wchargin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557938921, "post_id": 56153020, "comment_id": 98937669, "body": "@Shepmaster: Indeed; it\u2019s a built-in implicit rule. Try it! :-)"}, {"owner": {"reputation": 14204, "user_id": 732016, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9d2eb40aff994d83e1d271a3543efb22?s=128&d=identicon&r=PG", "display_name": "wchargin", "link": "https://stackoverflow.com/users/732016/wchargin"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1557972638, "post_id": 56153020, "comment_id": 98947977, "body": "@Stargateur: Shepmaster added that error, not me, but I\u2019ve just edited the post to clarify. No need to get angry."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557973175, "post_id": 56153020, "comment_id": 98948046, "body": "Note that it <i>is</i> a good idea to include your actual error when asking about it."}], "answers": [{"comments": [{"owner": {"reputation": 14204, "user_id": 732016, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9d2eb40aff994d83e1d271a3543efb22?s=128&d=identicon&r=PG", "display_name": "wchargin", "link": "https://stackoverflow.com/users/732016/wchargin"}, "edited": false, "score": 1, "creation_date": 1557940641, "post_id": 56153350, "comment_id": 98938430, "body": "Thank you, and thanks for the related references! For posterity, fixed Rust Playground link: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1800a7ef03ff411bf2a67da233e742b6\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1557935651, "creation_date": 1557935651, "answer_id": 56153350, "question_id": 56153020, "link": "https://stackoverflow.com/questions/56153020/how-can-i-wait-for-a-rust-child-process-whose-stdout-has-been-piped-to-another/56153350#56153350", "title": "How can I wait for a Rust `Child` process whose stdout has been piped to another?", "body": "<p>Use <code>Option::take</code>:</p>\n\n<pre><code>let pipe = child_1.stdout.take().unwrap();\n\nlet child_2 = process::Command::new(\"head\")\n    .args(&amp;[\"-n\", \"1\"])\n    .stdin(pipe)\n    .stdout(process::Stdio::piped())\n    .spawn()?;\n\nlet output = child_2.wait_with_output()?;\nchild_1.wait()?;\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/52031002/155423\">How do I move out of a struct field that is an Option?</a></li>\n<li><a href=\"https://stackoverflow.com/q/31576555/155423\">Unable to pipe to or from spawned child process more than once</a></li>\n<li><a href=\"https://stackoverflow.com/q/34611742/155423\">How do I read the output of a child process without blocking in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/46873877/155423\">Reading and writing to a long-running std::process::Child</a></li>\n<li><a href=\"https://stackoverflow.com/q/32338659/155423\">Cannot move out of borrowed content when unwrapping</a></li>\n</ul>\n"}], "owner": {"reputation": 14204, "user_id": 732016, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/9d2eb40aff994d83e1d271a3543efb22?s=128&d=identicon&r=PG", "display_name": "wchargin", "link": "https://stackoverflow.com/users/732016/wchargin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1189, "favorite_count": 0, "accepted_answer_id": 56153350, "answer_count": 1, "score": 1, "last_activity_date": 1592505628, "creation_date": 1557934444, "last_edit_date": 1592505628, "question_id": 56153020, "link": "https://stackoverflow.com/questions/56153020/how-can-i-wait-for-a-rust-child-process-whose-stdout-has-been-piped-to-another", "title": "How can I wait for a Rust `Child` process whose stdout has been piped to another?", "body": "<p>I want to implement <code>yes | head -n 1</code> in Rust, properly\nconnecting pipes and checking exit statuses: i.e., I want to be able to\ndetermine that <code>yes</code> exits due to <code>SIGPIPE</code> and that <code>head</code> completes\nnormally. The pipe functionality is easy (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=863c8566b3edabdf8aa5a646c10d784a\" rel=\"nofollow noreferrer\">Rust Playground</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::process;\n\nfn a() -&gt; std::io::Result&lt;()&gt; {\n    let child_1 = process::Command::new(\"yes\")\n        .arg(\"abracadabra\")\n        .stdout(process::Stdio::piped())\n        .spawn()?;\n    let pipe: process::ChildStdout = child_1.stdout.unwrap();\n    let child_2 = process::Command::new(\"head\")\n        .args(&amp;[\"-n\", \"1\"])\n        .stdin(pipe)\n        .stdout(process::Stdio::piped())\n        .spawn()?;\n    let output = child_2.wait_with_output()?;\n    let result = String::from_utf8_lossy(&amp;output.stdout);\n    assert_eq!(result, \"abracadabra\\n\");\n    println!(\"Good from 'a'.\");\n    Ok(())\n}\n</code></pre>\n\n<p>But while we can wait on <code>child_2</code> at any point, the declaration of\n<code>pipe</code> moves <code>child_1</code>, and so it\u2019s not clear how to wait on <code>child_1</code>.\nIf we were to simply add <code>child_1.wait()?</code> before the <code>assert_eq!</code>, we\u2019d\nhit a compile-time error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: borrow of moved value: `child_1`\n  --&gt; src/main.rs:15:5\n   |\n8  |     let pipe: process::ChildStdout = child_1.stdout.unwrap();\n   |                                      -------------- value moved here\n...\n15 |     child_1.wait()?;\n   |     ^^^^^^^ value borrowed here after partial move\n   |\n   = note: move occurs because `child_1.stdout` has type `std::option::Option&lt;std::process::ChildStdout&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>We can manage to <code>wait</code> with <code>unsafe</code> and platform-specific\nfunctionality (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=89129137aea93de45154cb4600b45ea6\" rel=\"nofollow noreferrer\">Rust Playground</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::process;\n\nfn b() -&gt; std::io::Result&lt;()&gt; {\n    let mut child_1 = process::Command::new(\"yes\")\n        .arg(\"abracadabra\")\n        .stdout(process::Stdio::piped())\n        .spawn()?;\n    use std::os::unix::io::{AsRawFd, FromRawFd};\n    let pipe: process::Stdio =\n        unsafe { FromRawFd::from_raw_fd(child_1.stdout.as_ref().unwrap().as_raw_fd()) };\n    let mut child_2 = process::Command::new(\"head\")\n        .args(&amp;[\"-n\", \"1\"])\n        .stdin(pipe)\n        .stdout(process::Stdio::piped())\n        .spawn()?;\n    println!(\"child_1 exited with: {:?}\", child_1.wait().unwrap());\n    println!(\"child_2 exited with: {:?}\", child_2.wait().unwrap());\n    let mut result_bytes: Vec&lt;u8&gt; = Vec::new();\n    std::io::Read::read_to_end(child_2.stdout.as_mut().unwrap(), &amp;mut result_bytes)?;\n    let result = String::from_utf8_lossy(&amp;result_bytes);\n    assert_eq!(result, \"abracadabra\\n\");\n    println!(\"Good from 'b'.\");\n    Ok(())\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>child_1 exited with: ExitStatus(ExitStatus(13))\nchild_2 exited with: ExitStatus(ExitStatus(0))\nGood from 'b'.\n</code></pre>\n\n<p>This is good enough for the purposes of this question, but surely there\nmust be a safe and portable way to do this.</p>\n\n<p>For comparison, here is how I would approach the task in C (without\nbothering to capture <code>child_2</code>\u2019s output):</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;unistd.h&gt;\n\n#define FAILIF(e, msg) do { if (e) { perror(msg); return 1; } } while (0)\n\nvoid describe_child(const char *name, int status) {\n    if (WIFEXITED(status)) {\n        fprintf(stderr, \"%s exited %d\\n\", name, WEXITSTATUS(status));\n    } else if (WIFSIGNALED(status)) {\n        fprintf(stderr, \"%s signalled %d\\n\", name, WTERMSIG(status));\n    } else {\n        fprintf(stderr, \"%s fate unknown\\n\", name);\n    }\n}\n\nint main(int argc, char **argv) {\n    int pipefd[2];\n    FAILIF(pipe(pipefd), \"pipe\");\n\n    pid_t pid_1 = fork();\n    FAILIF(pid_1 &lt; 0, \"child_1: fork\");\n    if (!pid_1) {\n        FAILIF(dup2(pipefd[1], 1) == -1, \"child_1: dup2\");\n        FAILIF(close(pipefd[0]), \"child_1: close pipefd\");\n        execlp(\"yes\", \"yes\", \"abracadabra\", NULL);\n        FAILIF(1, \"child_1: execlp\");\n    }\n\n    pid_t pid_2 = fork();\n    FAILIF(pid_2 &lt; 0, \"child_2: fork\");\n    if (!pid_2) {\n        FAILIF(dup2(pipefd[0], 0) == -1, \"child_2: dup2\");\n        FAILIF(close(pipefd[1]), \"child_2: close pipefd\");\n        execlp(\"head\", \"head\", \"-1\", NULL);\n        FAILIF(1, \"child_2: execlp\");\n    }\n\n    FAILIF(close(pipefd[0]), \"close pipefd[0]\");\n    FAILIF(close(pipefd[1]), \"close pipefd[1]\");\n\n    int status_1;\n    int status_2;\n    FAILIF(waitpid(pid_1, &amp;status_1, 0) == -1, \"waitpid(child_1)\");\n    FAILIF(waitpid(pid_2, &amp;status_2, 0) == -1, \"waitpid(child_2)\");\n    describe_child(\"child_1\", status_1);\n    describe_child(\"child_2\", status_2);\n\n    return 0;\n}\n</code></pre>\n\n<p>Save to <code>test.c</code> and run with <code>make test &amp;&amp; ./test</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>abracadabra\nchild_1 signalled 13\nchild_2 exited 0\n</code></pre>\n"}, {"tags": ["visual-studio-code", "rust"], "owner": {"reputation": 3862, "user_id": 142456, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e084f5673214074a5c737c131f082a43?s=128&d=identicon&r=PG", "display_name": "fostandy", "link": "https://stackoverflow.com/users/142456/fostandy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 596, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1557932426, "creation_date": 1557932426, "question_id": 56152370, "link": "https://stackoverflow.com/questions/56152370/what-is-a-best-practice-for-building-rust-in-vs-code-with-rust-rls-extension", "title": "What is a best practice for building rust in VS Code with rust (rls) extension?", "body": "<p>With rustc 1.34.2 (I don't know how to get overall version but hopefully that is indicative) and VS Code 1.33.1 and rust(rls) 0.6.1, if I create a workspace with multiple projects (freshly created from <code>cargo new</code>), when I try to build:</p>\n\n<p><a href=\"https://i.stack.imgur.com/8qjzb.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8qjzb.png\" alt=\"enter image description here\"></a></p>\n\n<p>I do not get an option to select which project to build:</p>\n\n<p><a href=\"https://i.stack.imgur.com/3qSBT.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3qSBT.png\" alt=\"enter image description here\"></a></p>\n\n<p>This is not ideal and at this stage I'm honestly not sure what dictates which one it lets me build. Is there a way to find this out?</p>\n\n<p>Not being an expert in VS Code (or rust) I've since searched around for some test.json files to attempt to build. The ones on stackoverflow seem quite dated dated but I found one from here that is at least recent: <a href=\"https://gist.github.com/deadalusai/9e13e36d61ec7fb72148\" rel=\"nofollow noreferrer\">https://gist.github.com/deadalusai/9e13e36d61ec7fb72148</a></p>\n\n<p>If I add this (either the 0.1.0 or 2.0.0) to my <code>test3/.vscode/tasks.json</code> and <code>test4/.vscode/tasks.json</code>, I can build those projects:</p>\n\n<p><a href=\"https://i.stack.imgur.com/hdFz7.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/hdFz7.png\" alt=\"enter image description here\"></a></p>\n\n<p>However, with errors in my test3 project I cannot click on the <code>src\\lib.rs</code> to go to that line. It's hard to show but when I use my cursor to hover over the red highlight area, nothing comes up and I cannot navigate to that code</p>\n\n<p><a href=\"https://i.stack.imgur.com/BkaKK.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/BkaKK.png\" alt=\"enter image description here\"></a></p>\n\n<p>The odd thing is for test4 project it works as I hoped:</p>\n\n<p><a href=\"https://i.stack.imgur.com/VKImZ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/VKImZ.png\" alt=\"enter image description here\"></a></p>\n\n<p>The difference between test3 and test4 is that test3 was created with <code>cargo new test3 --lib</code> and test4 was created with <code>cargo new test4 --bin</code>. But my hope or expectation is that this capability would be available in either type of project.</p>\n\n<p>I can appreciate I should probably do some more reading about VS Code as it is also very new to me, to be honest my focus at the moment is learning rust, which I'd like to do in an IDE with rudimentary features. Just wondering if I have missed a beginner friendly guide for setting up rust VS Code, or is what I've experienced simply the state of the art at the moment?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557931394, "post_id": 56151744, "comment_id": 98933462, "body": "<a href=\"https://stackoverflow.com/q/39334430/155423\">How to reference private types from public functions in private modules?</a>"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1557981642, "post_id": 56151744, "comment_id": 98949713, "body": "I think it&#39;s because data is public but <code>impl std::ops::Index&lt;Key&gt; for Data</code> is private only if key is not public making key public make <code>impl std::ops::Index&lt;Key&gt; for Data</code> public but <code>Value</code> is private"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 94, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1557933510, "creation_date": 1557930446, "last_edit_date": 1557933510, "question_id": 56151744, "link": "https://stackoverflow.com/questions/56151744/what-exactly-is-the-visibility-of-an-impl-block-derived-from-the-types-used-in-i", "title": "What exactly is the visibility of an impl block derived from the types used in it?", "body": "<p>I have a crate with a type living inside a module. For internal purposes, I want to implement <code>ops::Index</code> for that type with two private index and value types:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub mod inner {\n    pub struct Data;\n\n    struct Value;\n    struct Key;\n\n    impl std::ops::Index&lt;Key&gt; for Data {\n        type Output = Value;\n        fn index(&amp;self, index: Key) -&gt; &amp;Self::Output {\n            unimplemented!()\n        }\n    }\n}\n</code></pre>\n\n<p>This works. So far so good. </p>\n\n<p>But if I change the visibility of <code>Key</code> to <code>pub(crate)</code>, I get this error (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=93e3bd78625b7dfd532f90a80f910497\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0446]: private type `inner::Value` in public interface\n --&gt; src/lib.rs:9:9\n  |\n4 |     struct Value;\n  |     - `inner::Value` declared as private\n...\n9 |         type Output = Value;\n  |         ^^^^^^^^^^^^^^^^^^^^ can't leak private type\n</code></pre>\n\n<p>I don't understand this: I thought the \"private type in public interface\" error was just for the crate-public interface. The same error occurs when moving <code>Key</code> to another module.</p>\n\n<p><strong>Why is the <code>impl</code> block suddenly considered a public interface by making <code>Key</code> <code>pub(crate)</code>? How exactly is the visibility of an <code>impl</code> block determined?</strong></p>\n"}, {"tags": ["visual-studio-code", "rust"], "owner": {"reputation": 3862, "user_id": 142456, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e084f5673214074a5c737c131f082a43?s=128&d=identicon&r=PG", "display_name": "fostandy", "link": "https://stackoverflow.com/users/142456/fostandy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 224, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1557930182, "creation_date": 1557930011, "last_edit_date": 1557930182, "question_id": 56151598, "link": "https://stackoverflow.com/questions/56151598/how-can-i-improve-code-completion-on-rust-variables-with-an-inferred-type", "title": "How can I improve code completion on Rust variables with an inferred type?", "body": "<p>I'm using VS Code 1.33.1 and the Rust (RLS) extension. If I explicitly type my variables I get nice completions like <a href=\"https://i.stack.imgur.com/O6iUB.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/O6iUB.png\" alt=\"this\"></a></p>\n\n<p>When they're not explicitly typed, it looks like <a href=\"https://i.stack.imgur.com/dwmnr.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/dwmnr.png\" alt=\"this\"></a></p>\n\n<p>Which is pretty crippling for inline stuff e.g.:\n<a href=\"https://i.stack.imgur.com/MCN19.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/MCN19.png\" alt=\"enter image description here\"></a> and also makes it basically impossible (as far as I know?) to get completion for things like complex (or even simple?) <code>map</code> calls like <code>(0..1).map(|x| x)</code>, which maps which cannot be named (something like <code>std::iter::Map&lt;std::ops::Range&lt;{integer}&gt;, [closure@src\\main.rs:3:32: 3:37]&gt;</code>)</p>\n\n<p>In addition, while I can get nice completions if I've fully typed out a function, for e.g. hovering on the <code>any</code> below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/3RG1X.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3RG1X.png\" alt=\"enter image description here\"></a></p>\n\n<p>It looks decidedly less nice if I'm mid-way through building it, for example: </p>\n\n<p><a href=\"https://i.stack.imgur.com/Wb3hC.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Wb3hC.png\" alt=\"enter image description here\"></a></p>\n\n<p>And to be frank, that's when I want it the most. I can appreciate it might not be possible to show ALL completions as due to the trait nature this can be overwhelming, but I thought perhaps it could narrow things down once I'd typed <code>any</code>.</p>\n\n<p>I guess mainly I just want to check is this the state of completions in VS Code at the moment and that I haven't misconfigured something.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1558006308, "post_id": 56150642, "comment_id": 98961635, "body": "Should <code>List</code> implementations have the ability to override <code>add_foo</code>, or is there a single implementation based on the capabilities?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1558008199, "post_id": 56150642, "comment_id": 98962717, "body": "@MatthieuM. Yes, implementations should have the ability to override the method. In fact, in most cases it is not possible to provide a default implementation."}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 76, "favorite_count": 0, "answer_count": 0, "score": 4, "last_activity_date": 1557927114, "creation_date": 1557927114, "question_id": 56150642, "link": "https://stackoverflow.com/questions/56150642/what-is-the-most-idiomatic-best-way-to-abstract-over-many-optional-and-independe", "title": "What is the most idiomatic/best way to abstract over many optional and independent capabilities of types via traits?", "body": "<p>I want to abstract over a variety of different list data structures. My abstraction should be fairly flexible. I want a \"base trait\" (let's call it <code>List</code>) that represents the minimal interface required from all data structures. <strong>But</strong> there are <em>optional capabilities</em> the data structures could offer, which are independent from each other:</p>\n\n<ul>\n<li>Some data structures allow mutation, while others only provide a read-only interface. This is something which is fairly common for Rust traits: the pair <code>Trait</code> and <code>TraitMut</code> (e.g. <code>Index</code> and <code>IndexMut</code>).</li>\n<li>Some data structures provide a capability \"foo\".</li>\n<li>Some data structures provide a capability \"bar\".</li>\n</ul>\n\n<p>Initially, this seems easy: provide the traits <code>List</code>, <code>ListMut</code>, <code>FooList</code> and <code>BarList</code> where the latter three have <code>List</code> as super trait. Like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait List {\n    fn num_elements(&amp;self) -&gt; usize;\n}\n\ntrait ListMut: List {\n    fn clear(&amp;mut self);\n}\n\ntrait FooList: List {\n    fn num_foos(&amp;self) -&gt; usize;\n}\n\ntrait BarList: List {\n    fn num_bars(&amp;self) -&gt; usize;\n}\n</code></pre>\n\n<p>This works fine for the methods above. <strong>But</strong> the important part is that there are methods that require <em>multiple</em> capabilities. For example:</p>\n\n<ul>\n<li><code>add_foo(&amp;mut self)</code>: requires the mutability <em>and</em> the capability \"foo\"!</li>\n<li><code>add_foo_and_bar(&amp;mut self)</code>: requires mutability <em>and</em> the capabilities \"foo\" <em>and</em> \"bar\".</li>\n<li>... and more: imagine there is a function for each combination of requirements.</li>\n</ul>\n\n<p>Where should the methods with multiple requirements live? </p>\n\n<h3>One Trait per Combination of Capabilities</h3>\n\n<p>One way would be to additionally create a trait for each combination of optional requirements:</p>\n\n<ul>\n<li><code>FooListMut</code></li>\n<li><code>BarListMut</code></li>\n<li><code>FooBarList</code></li>\n<li><code>FooBarListMut</code></li>\n</ul>\n\n<p>These traits would have appropriate super trait bounds and  could house the methods with multiple requirements. There are two problems with this:</p>\n\n<ul>\n<li>The number of traits would grow exponentially with the number of optional capabilities. Yes, there would only need to be as many traits as methods, <em>but</em> it can still lead to a very chaotic API with loads of traits where most traits only contain one/a small number of methods.</li>\n<li>There is no way (I think) to force types that implement <code>ListMut</code> and <code>FooList</code> to also implement <code>FooListMut</code>. Thus, functions would probably need to add more bounds. This trait system would give implementors flexibility I might not want to give them.</li>\n</ul>\n\n<h3><code>where Self</code> bounds on methods</h3>\n\n<p>One could also add <code>where Self: Trait</code> bounds to methods. For example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait FooList: List {\n    // ...\n\n    fn add_foo(&amp;mut self) \n    where \n        Self: ListMut;\n}\n</code></pre>\n\n<p>This also works, but has two important disadvantages:</p>\n\n<ul>\n<li>Implementors of <code>FooList</code> that don't implement <code>ListMut</code> would need to dummy implement <code>add_foo</code> (usually with <code>unreachable!()</code>) because <a href=\"https://stackoverflow.com/questions/55521669/compiler-forces-me-to-implement-trait-method-but-the-self-trait-bound-on-metho\">the Rust compiler still requires it</a>. </li>\n<li>It is not clear where to put the methods. <code>add_foo</code> could also live inside <code>ListMut</code> with the bound being <code>where Self: FooList</code>. This makes the trait API more confusing.</li>\n</ul>\n\n<h3>Define Capabilities via associated types/consts</h3>\n\n<p>In this solution, there would only be one trait. (Note that in the following code, dummy types are used. Ideally, this would be an associated <code>const</code> instead of <code>type</code>, but we cannot use consts in trait bounds yet, so dummy types it is.)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Bool {}\nenum True {}\nenum False {}\nimpl Bool for True {}\nimpl Bool for False {}\n\n\ntrait List {\n    type SupportsMut: Bool;\n    type SupportsFoo: Bool;\n    type SupportsBar: Bool;\n\n    fn add_foo(&amp;mut self) \n    where \n        Self: List&lt;SupportsMut = True, SupportsBar = True&gt;;\n\n    // ...\n}\n</code></pre>\n\n<p>This solves two problems: for one, we know that if <code>Mut</code> and <code>Foo</code> are supported, that we can use <code>add_foo</code> (in contrast to the first solution, where a data structure could implement <code>ListMut</code> and <code>FooList</code> but not <code>FooListMut</code>). Also, since all methods live in one trait, there it's not unclear anymore where a method should live.</p>\n\n<p>But:</p>\n\n<ul>\n<li>Implementors still might need to add a bunch of <code>unreachable!()</code> implementations as by the last solution. </li>\n<li>It is more noisy to bound for certain capabilities. One could add <code>trait ListMut: List&lt;SupportsMut = True&gt;</code> (the same for foo and bar) as trait alias (with blanket impl) to make this a bit better, though.</li>\n</ul>\n\n<h3>Something else?</h3>\n\n<p>The three solutions so far are what I can think of. One could combine them somehow, of course. Or maybe there is a completely different solution even?</p>\n\n<hr>\n\n<p><strong>Are there clear advantages of one solution over the other solutions? Have they important semantic differences? Is one of these considered more idiomatic by the community? Have there been previous discussions about this? Which one should be preferred?</strong></p>\n"}, {"tags": ["rust", "union", "hashset"], "answers": [{"comments": [{"owner": {"reputation": 2503, "user_id": 7442673, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iTfit.jpg?s=128&g=1", "display_name": "m.raynal", "link": "https://stackoverflow.com/users/7442673/m-raynal"}, "edited": false, "score": 2, "creation_date": 1557921562, "post_id": 56148785, "comment_id": 98926922, "body": "Great, exactly what I was looking for. Plus it teaches me that I should not only look at the &#39;methods&#39; section of the doc to find methods, but also into the traits a struct implements. Rust is really a world on its own :-)"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": true, "score": 18, "last_activity_date": 1590586625, "last_edit_date": 1590586625, "creation_date": 1557921275, "answer_id": 56148785, "question_id": 56148586, "link": "https://stackoverflow.com/questions/56148586/how-can-i-insert-all-values-of-one-hashset-into-another-hashset/56148785#56148785", "title": "How can I insert all values of one HashSet into another HashSet?", "body": "<p>You don't want <code>union</code> \u2014 as you said, it will create a new <code>HashSet</code>. Instead you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Extend.html#tymethod.extend\" rel=\"noreferrer\"><code>Extend::extend</code></a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashSet;\n\nfn main() {\n    let mut a: HashSet&lt;u16&gt; = [1, 2, 3].iter().copied().collect();\n    let b: HashSet&lt;u16&gt; = [1, 3, 7, 8, 9].iter().copied().collect();\n\n    a.extend(&amp;b);\n\n    println!(\"{:?}\", a); // {8, 3, 2, 1, 7, 9}\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=fd015567dc2e4d28b7d50a7ce2967a60\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p><code>Extend::extend</code> is also <a href=\"https://doc.rust-lang.org/std/iter/trait.Extend.html#implementors\" rel=\"noreferrer\">implemented for other collections</a>, e.g. <code>Vec</code>. The result for <code>Vec</code> will differ because <code>Vec</code> does not honor duplicates in the same way a <code>Set</code> does.</p>\n"}], "owner": {"reputation": 2503, "user_id": 7442673, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iTfit.jpg?s=128&g=1", "display_name": "m.raynal", "link": "https://stackoverflow.com/users/7442673/m-raynal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3030, "favorite_count": 0, "accepted_answer_id": 56148785, "answer_count": 1, "score": 12, "last_activity_date": 1617129296, "creation_date": 1557920700, "last_edit_date": 1617129296, "question_id": 56148586, "link": "https://stackoverflow.com/questions/56148586/how-can-i-insert-all-values-of-one-hashset-into-another-hashset", "title": "How can I insert all values of one HashSet into another HashSet?", "body": "<p>I have two <code>HashSet&lt;u16&gt;</code>s and I would like to implement <code>a = a U b</code>. If possible, I'd like to use <code>HashSet::union</code> rather than loops or other tweaks.</p>\n<p>I tried the following:</p>\n<pre><code>use std::collections::HashSet;\nlet mut a: HashSet&lt;u16&gt; = [1, 2, 3].iter().cloned().collect();\nlet b: HashSet&lt;u16&gt; = [7, 8, 9].iter().cloned().collect();  \n\n// I can build a union object that contains &amp;u16\nlet union: HashSet&lt;&amp;u16&gt; = a.union(&amp;b).collect();\n\n// But I can't store the union into a\na = a.union(&amp;b).collect();   //  -&gt; compile error\n\n// of course I can do\nfor x in &amp;b {\n    a.insert(*x);\n}\n// but I wonder if union could not be used to simply build a union\n</code></pre>\n<p>The error message is the following:</p>\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound \n`std::collections::HashSet&lt;u16&gt;: std::iter::FromIterator&lt;&amp;u16&gt;`\nis not satisfied\n</code></pre>\n<p>How can I perform <code>a = a U b</code>?</p>\n"}, {"tags": ["file-upload", "rust", "rust-actix", "actix-web"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1557913360, "post_id": 56146025, "comment_id": 98922059, "body": "Please note that this is <b>not</b> a good idea. This can lead to serious security issues. See <a href=\"https://stackoverflow.com/q/36791160\">stackoverflow.com/q/36791160</a> and <a href=\"https://stackoverflow.com/q/9923416\">stackoverflow.com/q/9923416</a>"}, {"owner": {"reputation": 154, "user_id": 7526741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f9e7fc59fd903158f3127f1384139cf0?s=128&d=identicon&r=PG", "display_name": "Nikolay Kim", "link": "https://stackoverflow.com/users/7526741/nikolay-kim"}, "edited": false, "score": 0, "creation_date": 1557913493, "post_id": 56146025, "comment_id": 98922147, "body": "Field type provides content_disposition() method. <a href=\"https://docs.rs/actix-multipart/0.1.0-beta.4/actix_multipart/struct.Field.html#method.content_disposition\" rel=\"nofollow noreferrer\">docs.rs/actix-multipart/0.1.0-beta.4/actix_multipart/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557945136, "post_id": 56146025, "comment_id": 98940392, "body": "<i>and works good so far</i> \u2014 Does that mean that you&#39;ve solved your previous question (<a href=\"https://stackoverflow.com/q/56117273/155423\">Actix-Web reports \u201cApp data is not configured\u201d when processing a file upload</a>)?"}, {"owner": {"reputation": 611, "user_id": 11378334, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-AXysP46Cwk8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3re2btjvnca9ztWrTvGV5IDe69sgKg/mo/photo.jpg?sz=128", "display_name": "Samuel Dressel", "link": "https://stackoverflow.com/users/11378334/samuel-dressel"}, "edited": false, "score": 0, "creation_date": 1557996547, "post_id": 56146025, "comment_id": 98956124, "body": "I found a way around it but not by using the AppState Struct as I mentioned in the my previous question. So the workaround is not an ideal solution and my question is not solved yet."}], "answers": [{"tags": [], "owner": {"reputation": 36, "user_id": 7641279, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/13617b1fbbf4be8d06fcf8cf6ec76353?s=128&d=identicon&r=PG&f=1", "display_name": "sonfangos", "link": "https://stackoverflow.com/users/7641279/sonfangos"}, "is_accepted": true, "score": 2, "last_activity_date": 1558204859, "creation_date": 1558204859, "answer_id": 56201871, "question_id": 56146025, "link": "https://stackoverflow.com/questions/56146025/save-file-with-original-filename-when-using-the-actix-web-framework-to-upload-a/56201871#56201871", "title": "Save File with original filename when using the actix-web-Framework to upload a File on a webserver in Rust", "body": "<p>The content_disposition() method as suggested by NK is potentially what you are after here. So you could perhaps replace:</p>\n\n<pre><code>let file_path_string = \"upload.png\";\n</code></pre>\n\n<p>with something like:</p>\n\n<pre><code>let file_path_string = match field.content_disposition().unwrap().get_filename() {\n    Some(filename) =&gt; filename.replace(' ', \"_\").to_string(),\n    None =&gt; return Either::A(err(error::ErrorInternalServerError(\"Couldn't read the filename.\")))\n}\n</code></pre>\n"}], "owner": {"reputation": 611, "user_id": 11378334, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-AXysP46Cwk8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3re2btjvnca9ztWrTvGV5IDe69sgKg/mo/photo.jpg?sz=128", "display_name": "Samuel Dressel", "link": "https://stackoverflow.com/users/11378334/samuel-dressel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1081, "favorite_count": 0, "accepted_answer_id": 56201871, "answer_count": 1, "score": 2, "last_activity_date": 1558204859, "creation_date": 1557912756, "question_id": 56146025, "link": "https://stackoverflow.com/questions/56146025/save-file-with-original-filename-when-using-the-actix-web-framework-to-upload-a", "title": "Save File with original filename when using the actix-web-Framework to upload a File on a webserver in Rust", "body": "<p>I'm creating a webserver in Rust using the actix-web Framework. Currently I'm working on the Fileupload and for this im using actix-multipart.</p>\n\n<p>In the official Actix-Documentation there is an example for it:</p>\n\n<pre><code>use std::cell::Cell;\nuse std::fs;\nuse std::io::Write;\n\nuse actix_multipart::{Field, Multipart, MultipartError};\nuse actix_web::{error, middleware, web, App, Error, HttpResponse, HttpServer};\nuse futures::future::{err, Either};\nuse futures::{Future, Stream};\n\npub fn save_file(field: Field) -&gt; impl Future&lt;Item = i64, Error = Error&gt; {\n    let file_path_string = \"upload.png\";\n    let file = match fs::File::create(file_path_string) {\n        Ok(file) =&gt; file,\n        Err(e) =&gt; return Either::A(err(error::ErrorInternalServerError(e))),\n    };\n    Either::B(\n        field\n            .fold((file, 0i64), move |(mut file, mut acc), bytes| {\n                // fs operations are blocking, we have to execute writes\n                // on threadpool\n                web::block(move || {\n                    file.write_all(bytes.as_ref()).map_err(|e| {\n                        println!(\"file.write_all failed: {:?}\", e);\n                        MultipartError::Payload(error::PayloadError::Io(e))\n                    })?;\n                    acc += bytes.len() as i64;\n                    Ok((file, acc))\n                })\n                .map_err(|e: error::BlockingError&lt;MultipartError&gt;| {\n                    match e {\n                        error::BlockingError::Error(e) =&gt; e,\n                        error::BlockingError::Canceled =&gt; MultipartError::Incomplete,\n                    }\n                })\n            })\n            .map(|(_, acc)| acc)\n            .map_err(|e| {\n                println!(\"save_file failed, {:?}\", e);\n                error::ErrorInternalServerError(e)\n            }),\n    )\n}\n\npub fn upload(\n    multipart: Multipart,\n    counter: web::Data&lt;Cell&lt;usize&gt;&gt;,\n) -&gt; impl Future&lt;Item = HttpResponse, Error = Error&gt; {\n    counter.set(counter.get() + 1);\n    println!(\"{:?}\", counter.get());\n\n    multipart\n        .map_err(error::ErrorInternalServerError)\n        .map(|field| save_file(field).into_stream())\n        .flatten()\n        .collect()\n        .map(|sizes| HttpResponse::Ok().json(sizes))\n        .map_err(|e| {\n            println!(\"failed: {}\", e);\n            e\n        })\n}\n\nfn index() -&gt; HttpResponse {\n    let html = r#\"&lt;html&gt;\n        &lt;head&gt;&lt;title&gt;Upload Test&lt;/title&gt;&lt;/head&gt;\n        &lt;body&gt;\n            &lt;form target=\"/\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n                &lt;input type=\"file\" name=\"file\"/&gt;\n                &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\"#;\n\n    HttpResponse::Ok().body(html)\n}\n\nfn main() -&gt; std::io::Result&lt;()&gt; {\n\n    HttpServer::new(|| {\n        App::new()\n            .data(Cell::new(0usize))\n            .wrap(middleware::Logger::default())\n            .service(\n                web::resource(\"/\")\n                    .route(web::get().to(index))\n                    .route(web::post().to_async(upload)),\n            )\n    })\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n}\n</code></pre>\n\n<p>This would be a minimal working implementation for it and works good so far. But as you can see the filepathstring is a custom string which renames the file on the server to upload.png (<code>let file_path_string = \"upload.png\"</code>)</p>\n\n<p>So is there a simple way to retrieve the original filename and use it as filename for the uploaded file on the server?</p>\n"}, {"tags": ["pointers", "rust", "raw-pointer"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 4, "creation_date": 1557876902, "post_id": 56139894, "comment_id": 98910408, "body": "<code>head: &amp;mut LinkedListElement::new(elem, None)</code> you are taking stack address here"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557887692, "post_id": 56139894, "comment_id": 98912274, "body": "Have you taken the time to read <a href=\"https://cglab.ca/~abeinges/blah/too-many-lists/book/README.html\" rel=\"nofollow noreferrer\"><i>Learning Rust With Entirely Too Many Linked Lists</i></a>?"}, {"owner": {"reputation": 615, "user_id": 2516576, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/y6Uco.jpg?s=128&g=1", "display_name": "Jesse Lawson", "link": "https://stackoverflow.com/users/2516576/jesse-lawson"}, "edited": false, "score": 0, "creation_date": 1557887974, "post_id": 56139894, "comment_id": 98912320, "body": "There&#39;s actually several great walkthroughs over <a href=\"https://rust-unofficial.github.io/too-many-lists/second-option.html\" rel=\"nofollow noreferrer\">here</a>, one of which I think goes along with what you&#39;re trying to do. Especially <a href=\"https://rust-unofficial.github.io/too-many-lists/fifth-layout.html\" rel=\"nofollow noreferrer\">here</a>, you can see that the resultant solution entails <code>prev</code> and <code>next</code> links being of type <code>Option&lt;Box&lt;YourNode&gt;&gt;</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1557907122, "last_edit_date": 1557907122, "creation_date": 1557888675, "answer_id": 56141127, "question_id": 56139894, "link": "https://stackoverflow.com/questions/56139894/why-does-a-node-in-a-linked-list-using-raw-pointers-become-corrupted/56141127#56141127", "title": "Why does a node in a linked list using raw pointers become corrupted?", "body": "<p>Congratulations, you have successfully proven why Rust needs to exist in the first place: programmers write memory-unsafe code.</p>\n\n<p>First, please read why this is disallowed when using safe Rust:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a></li>\n</ul>\n\n<p>TL;DR: the memory address of <code>LinkedListElement</code> changes when it's moved. A move occurs when a value is returned from a function (among other times). By using a raw pointer, you've subverted the borrow checker and get no useful feedback from the compiler.</p>\n\n<p>Second, please read <a href=\"https://rust-unofficial.github.io/too-many-lists/index.html\" rel=\"nofollow noreferrer\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a>. For whatever reason, programmers think that linked lists are \"easy\" and a good way to learn a language. This is generally <strong>not true</strong> in Rust, where memory safety is paramount.</p>\n\n<p>TL;DR: you can use a <code>Box</code> to allocate memory on the heap. This memory address will not change when the pointer to it is moved. You will need to ensure that you appropriately free the pointer when your linked list goes out of scope to prevent memory leaks.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/50957738/155423\">How to copy a raw pointer when implementing a linked list in Rust?</a></li>\n<li><a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw\" rel=\"nofollow noreferrer\"><code>Box::into_raw</code></a> / <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.from_raw\" rel=\"nofollow noreferrer\"><code>Box::from_raw</code></a></li>\n<li><a href=\"https://doc.rust-lang.org/std/ptr/struct.NonNull.html\" rel=\"nofollow noreferrer\"><code>NonNull</code></a></li>\n</ul>\n"}], "owner": {"reputation": 843, "user_id": 3042109, "user_type": "registered", "accept_rate": 53, "profile_image": "https://graph.facebook.com/100001694078301/picture?type=large", "display_name": "canufeel", "link": "https://stackoverflow.com/users/3042109/canufeel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 310, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1557907122, "creation_date": 1557876447, "last_edit_date": 1557888037, "question_id": 56139894, "link": "https://stackoverflow.com/questions/56139894/why-does-a-node-in-a-linked-list-using-raw-pointers-become-corrupted", "title": "Why does a node in a linked list using raw pointers become corrupted?", "body": "<p>I am struggling to learn raw pointers while implementing a linked list. A simple piece of code gives me unintended results for which I struggle to find any explanation whatsoever:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::cmp::PartialEq;\nuse std::default::Default;\nuse std::ptr;\n\npub struct LinkedListElement&lt;T&gt; {\n    pub data: T,\n    pub next: *mut LinkedListElement&lt;T&gt;,\n}\n\npub struct LinkedList&lt;T&gt; {\n    head: *mut LinkedListElement&lt;T&gt;,\n}\n\nimpl&lt;T: PartialEq&gt; LinkedListElement&lt;T&gt; {\n    pub fn new(elem: T, next: Option&lt;*mut LinkedListElement&lt;T&gt;&gt;) -&gt; LinkedListElement&lt;T&gt; {\n        let mut_ptr = match next {\n            Some(t) =&gt; t,\n            None =&gt; ptr::null_mut(),\n        };\n        let new_elem = LinkedListElement {\n            data: elem,\n            next: mut_ptr,\n        };\n        if !mut_ptr.is_null() {\n            println!(\n                \"post create ll mut ptr: {:p}, post create ll mut ptr next {:p}\",\n                mut_ptr,\n                unsafe { (*mut_ptr).next }\n            );\n        }\n        new_elem\n    }\n}\n\nimpl&lt;T: PartialEq + Default&gt; LinkedList&lt;T&gt; {\n    pub fn new(elem: T) -&gt; LinkedList&lt;T&gt; {\n        LinkedList {\n            head: &amp;mut LinkedListElement::new(elem, None),\n        }\n    }\n\n    pub fn insert(&amp;mut self, elem: T) {\n        println!(\"head: {:p} . next: {:p}\", self.head, unsafe {\n            (*self.head).next\n        });\n        let next = Some(self.head);\n        let mut ll_elem = LinkedListElement::new(elem, next);\n        println!(\n            \"before pointer head: {:p}. before pointer next {:p}\",\n            self.head,\n            unsafe { (*self.head).next }\n        );\n        let ll_elem_ptr = &amp;mut ll_elem as *mut LinkedListElement&lt;T&gt;;\n        self.head = ll_elem_ptr;\n    }\n}\n\nfn main() {\n    let elem: i32 = 32;\n    let second_elem: i32 = 64;\n    let third_elem: i32 = 72;\n    let mut list = LinkedList::new(elem);\n    list.insert(second_elem);\n    list.insert(third_elem);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c1634a522cff14b2153628e2872dd540\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>This code gives me the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>head: 0x7ffe163275e8 . next: 0x0\npost create ll mut ptr: 0x7ffe163275e8, post create ll mut ptr next 0x0\nbefore pointer head: 0x7ffe163275e8. before pointer next 0x0\nhead: 0x7ffe16327560 . next: 0x7ffe163275e8\npost create ll mut ptr: 0x7ffe16327560, post create ll mut ptr next 0x7ffe163275e8\nbefore pointer head: 0x7ffe16327560. before pointer next 0x7ffe16327560\n</code></pre>\n\n<p>For the first 2 elements the code behaves as expected: it creates an element with null pointer as its next element. Here is the state of things after adding second element:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{\n  head: {\n    elem: 64,\n    next: {\n      elem: 32,\n      next: nullptr\n    }\n  }\n}\n\n64 -&gt; 32 -&gt; null\n</code></pre>\n\n<p>When the third element is added, things become weird and the linked list transforms into something like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{\n  head: {\n    elem: 72,\n    next: {\n      elem: 72,\n      next: {\n        elem: 72,\n        next: ...\n      }\n    }\n  }\n}\n\n72 -&gt; 72 -&gt; 72 -&gt; ...\n</code></pre>\n\n<p>It seems that the linked list element's <code>next</code> field starts pointing at the element itself.</p>\n\n<p>I have debugged the <code>LinkedListElement::new</code> method and found that the proper element should get returned from it:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>{\n  elem: 72,\n  next: {\n    elem: 64,\n    next: {\n      elem: 32,\n      next: nullptr\n    }\n  }\n}\n</code></pre>\n\n<p>For some reason, immediately after it is returned to <code>LinkedList::insert</code> method, even before <code>self.head</code> is reassigned, the contents of <code>LinkedList</code> <code>self</code> becomes \"corrupted\".</p>\n\n<p>I know using raw pointers in Rust is not idiomatic but I still want to learn them.</p>\n"}, {"tags": ["c++", "rust", "polymorphism", "traits", "code-translation"], "comments": [{"owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "edited": false, "score": 0, "creation_date": 1557882341, "post_id": 56139786, "comment_id": 98911388, "body": "Do you need run-time dispatch, or compile time? ie. does the multiplexer need to contain connections of different types in the same instance, or would they all be the same type?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557888830, "post_id": 56139786, "comment_id": 98912466, "body": "Idiomatic Rust uses <code>snake_case</code> for variables, methods, macros, fields and modules; <code>UpperCamelCase</code> for types and enum variants; and <code>SCREAMING_SNAKE_CASE</code> for statics and constants. Rust does not prefix traits with a special word; use <code>Connection</code> instead, please."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557888867, "post_id": 56139786, "comment_id": 98912475, "body": "Please take the time to write syntactically valid Rust code. Like C++, you cannot arbitrarily sprinkle semicolons and expect the code to compile."}], "owner": {"reputation": 105, "user_id": 513647, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/b5e862f7f88d8d237c755237dfbc5e11?s=128&d=identicon&r=PG", "display_name": "user513647", "link": "https://stackoverflow.com/users/513647/user513647"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 45, "favorite_count": 0, "closed_date": 1557888891, "answer_count": 0, "score": 1, "last_activity_date": 1557888975, "creation_date": 1557875648, "last_edit_date": 1557888975, "question_id": 56139786, "link": "https://stackoverflow.com/questions/56139786/how-do-i-stop-the-spread-of-generic-type-definitions-when-translating-c-inte", "closed_reason": "Duplicate", "title": "How do I &#39;stop&#39; the spread of generic type definitions when translating C++ interface classes to Rust traits?", "body": "<p>I'm translating a C++ codebase that makes heavy use of interface classes to Rust. The interfaces abstract away implementation detail of network connections. I tried using generics and bound traits, but the generic type definitions have begun to take over my whole codebase! How do I 'stop' the spread of generic type definitions?</p>\n\n<p>Because this is supposed to be a drop-in replacement and because I think the C++ solution is quite elegant I'm trying to stay close to the original implementation. I thought I could use traits to implement interface like functionality.</p>\n\n<p>For example, the C++ codebase does something along these lines:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>class iConnection\n{\n    virtual bool send_data(const std::vector&lt;uint8_t&gt;&amp; bytes) = 0;\n    virtual std::vector&lt;uint8_t&gt; receive_data() = 0;\n}\n\nclass tcp_connection : iConnection\n{..} // handle tcp connection implementation details\nclass http_connection : iConnection \n{..} // handle http connection implementation details\n\nclass Multiplexer\n{\n    std::vector&lt;std::shared_ptr&lt;iConnection&gt;&gt; connections;\n    ...\n    void send_data(const std::vector&lt;uint8_t&gt;&amp; bytes)\n    {\n        for(auto&amp; ptr: connections)\n        {\n            if( ptr-&gt;send_data(bytes) == true )\n                break;\n        }\n    }\n}\n</code></pre>\n\n<p>Note how the 'generic/trait' definition is only present in the definition of the connections member of the Multiplexer class.</p>\n\n<p>I've tried creating a similar structure in Rust. The code I have now is something along these lines:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait iConnection {\n    fn send_data(&amp;mut self, bytes: Vec&lt;u8&gt;) -&gt; Result&lt;(), ()&gt;;\n}\n\nimpl iConnection for TcpStream {\n    fn send_data(&amp;mut self, bytes: Vec&lt;u8&gt;) -&gt; Result&lt;(), ()&gt; {\n        self.Write(&amp;bytes[..]);\n    }\n}\n\nimpl iConnection for MyHttpClass {\n    fn send_data(&amp;mut self, bytes: Vec&lt;u8&gt;) -&gt; Result&lt;(), ()&gt; {\n        self.send_request(bytes);\n    }\n}\n\npub struct Multiplexer&lt;T: iConnection&gt; {\n    pub connections: Vec&lt;Box&lt;T&gt;&gt;,\n}\n// this seems like a potential place to stop the spread.\n// If there's a way for the multiplexer not to be generic\n// That'd solve my problem.\nimpl&lt;T: iConnection&gt; send_data for Multiplexer&lt;T&gt; {\n    // use the connections\n}\n\n// ...\n\n#[no_mangle]\npub extern \"C\" fn network_router_create&lt;T: iConnection&gt;() -&gt; *mut Multiplexer&lt;T&gt; {\n    Box::into_raw(Box::new(Multiplexer::new()))\n}\n</code></pre>\n\n<p>This would be fine if I didn't need to interface with this library from the existing C++ codebase (to use it as a drop-in replacement). For obvious reasons an exported, unmangled function cannot be generic, so my question is: how do I stop the spread of 'genericness' without having to duplicate code that deals with a connection object's implementation details?</p>\n"}, {"tags": ["rust", "lifetime", "nom"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557858471, "post_id": 56136010, "comment_id": 98904043, "body": "Please review <a href=\"https://stackoverflow.com/q/56095637/155423\">Pass a Struct&lt;&#39;a&gt;::method as a <code>for&lt;&#39;a&gt; Fn(&amp;Foo&lt;&#39;a&gt;)</code> for use in a closure</a> and see if the answer or any of the linked questions/answers addresses your problem."}, {"owner": {"reputation": 65, "user_id": 4735483, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-3_9arYwT3jc/AAAAAAAAAAI/AAAAAAAABfY/Mywd_xz71Iw/photo.jpg?sz=128", "display_name": "Amedee d&#39;Aboville", "link": "https://stackoverflow.com/users/4735483/amedee-daboville"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557872887, "post_id": 56136010, "comment_id": 98909521, "body": "Pfff this is hard. I looked at the linked answers but I think I mistitled the question(now corrected), I&#39;m getting E0308, not E0271. I was able to &quot;fix&quot; the issue by adding lifetime annotations to the <code>test_kv</code> parameter, but then was getting that my input wasn&#39;t living long enough. I think my root issue is having defined the original function as <code>named_args!(kv&lt;&#39;a&gt;(key: &amp;&#39;a str)&lt;&amp;&#39;a str, &amp;&#39;a str&gt;</code>, which makes both the keyword input and the output have the same lifetime, and I don&#39;t think it should... The combination of macros, lifetimes, and passing functions in Rust is above my level."}], "owner": {"reputation": 65, "user_id": 4735483, "user_type": "registered", "accept_rate": 75, "profile_image": "https://lh3.googleusercontent.com/-3_9arYwT3jc/AAAAAAAAAAI/AAAAAAAABfY/Mywd_xz71Iw/photo.jpg?sz=128", "display_name": "Amedee d&#39;Aboville", "link": "https://stackoverflow.com/users/4735483/amedee-daboville"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 148, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1557871426, "creation_date": 1557856398, "last_edit_date": 1557871426, "question_id": 56136010, "link": "https://stackoverflow.com/questions/56136010/specifying-lifetimes-in-noms-named-args-expected-concrete-lifetime-found-bo", "title": "Specifying lifetimes in nom&#39;s `named_args` (expected concrete lifetime, found bound)", "body": "<p>I'm a Rust beginner, writing a nom parser that can parse lines that are colon-separated <code>KEY: VALUE</code>s. I made a base <code>kv</code> parser with <code>named_args</code> that can parse a key-value pair:</p>\n\n<pre><code>named_args!(kv&lt;'a&gt;(key: &amp;'a str)&lt;&amp;'a str, &amp;'a str&gt;,\n   do_parse!(\n        tag_s!(key) &gt;&gt;\n        tag_s!(\":\") &gt;&gt;\n        space0 &gt;&gt;\n        value: rest &gt;&gt;\n        (value)\n   )\n);\n</code></pre>\n\n<p>I put the lifetimes in there to please the compiler.</p>\n\n<p>I've made these two parsers from it:</p>\n\n<pre><code>named!(name&lt;&amp;str,&amp;str&gt;,\n    call!(kv, \"NAME\")\n);\nnamed!(get_dimension&lt;&amp;str, i64&gt;,\n    map_res!(call!(kv, \"DIMENSION\"), str::parse::&lt;i64&gt;)\n);\n</code></pre>\n\n<p>To test these, I was writing a generic wrapper, which calls one of these functions with a <code>KEY: {YOUR_VALUE}</code> string, and expects <code>YOUR_VALUE</code> back:</p>\n\n<pre><code>fn test_kv&lt;G: Display + Debug + PartialEq&gt;(\n    kvfunc: fn(&amp;str) -&gt; Result&lt;(&amp;str, G), Err&lt;&amp;str&gt;&gt;,\n    key: &amp;str,\n    value: G,\n) {\n    assert_eq!(kvfunc(&amp;format!(\"{}: {}\", key, value)), Ok((\"\", value)));\n}\n</code></pre>\n\n<p>This works fine:</p>\n\n<pre><code>#[test]\nfn test_dimension() {\n    test_kv(get_dimension, \"DIMENSION\", 8)\n}\n</code></pre>\n\n<p>But not with the <code>name</code> parser:</p>\n\n<pre><code>#[test]\nfn test_name() {\n    test_kv(name, \"NAME\", \"some_name\")\n}\n</code></pre>\n\n<p>The compiler gives me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>71 |     test_kv(name, \"NAME\", \"some_name\")\n   |             ^^^^ expected concrete lifetime, found bound lifetime parameter\n   |\n   = note: expected type `for&lt;'r&gt; fn(&amp;'r str) -&gt; std::result::Result&lt;(&amp;'r str, _), nom::Err&lt;&amp;'r str&gt;&gt;`\n              found type `for&lt;'r&gt; fn(&amp;'r str) -&gt; std::result::Result&lt;(&amp;'r str, &amp;'r str), nom::Err&lt;&amp;'r str&gt;&gt; {name}`\n</code></pre>\n\n<p>This confuses me. Doesn't  <code>Result&lt;&amp;str, &amp;str&gt;</code> fit in <code>Result&lt;&amp;str, _&gt;</code>?</p>\n\n<p>Since it works with the <code>map_res</code>'d version, I assume that <code>map_res</code> returns a different value, maybe with a different lifetime.</p>\n\n<p>I think I may have to change the lifetime definitionss of my <code>kv</code> parser, but I'm completely lost as to how/which ones to choose.</p>\n"}, {"tags": ["linux", "rust", "raspberry-pi", "cross-compiling", "rust-cargo"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1557855866, "post_id": 56135580, "comment_id": 98902779, "body": "You are linking against your local libsqlite. You have either cross compiler libsqlite3 yourself or use a precompiled one."}, {"owner": {"reputation": 217, "user_id": 6521325, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-9xGEc3C-lzU/AAAAAAAAAAI/AAAAAAAAAI4/uj8bKz3a6N8/photo.jpg?sz=128", "display_name": "BaleineBleue", "link": "https://stackoverflow.com/users/6521325/baleinebleue"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557857333, "post_id": 56135580, "comment_id": 98903470, "body": "Once I have cross compiled it, how do I point the linker to it?"}, {"owner": {"reputation": 82953, "user_id": 608639, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/aPIhh.jpg?s=128&g=1", "display_name": "jww", "link": "https://stackoverflow.com/users/608639/jww"}, "edited": false, "score": 0, "creation_date": 1557896013, "post_id": 56135580, "comment_id": 98913854, "body": "<i>&quot;how do I point the linker to it...&quot;</i> - In C you typically use <code>--sysroot</code>. The C compiler will invoke the linker for you. The <code>sysroot</code> has all the headers and libraries needed for the target. I understand Rust reinvented the wheel. There&#39;s no telling how to do the same in Rust. When I tried to build a new Firefox Geckodriver for ARM Rust and Cargo broke the build. Good luck with it."}], "answers": [{"tags": [], "owner": {"reputation": 93, "user_id": 10960543, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-2HzwlE_ed1Q/AAAAAAAAAAI/AAAAAAAAC94/cRKOwCvFKkw/photo.jpg?sz=128", "display_name": "Pawan Bisht", "link": "https://stackoverflow.com/users/10960543/pawan-bisht"}, "is_accepted": false, "score": 1, "last_activity_date": 1562155021, "last_edit_date": 1562155021, "creation_date": 1562131181, "answer_id": 56863351, "question_id": 56135580, "link": "https://stackoverflow.com/questions/56135580/compile-rust-program-for-raspberry-pi-armv7-unknown-linux-gnueabihf-from-64-bi/56863351#56863351", "title": "Compile Rust program for raspberry pi `armv7-unknown-linux-gnueabihf` from 64 bit arch linux", "body": "<p>You can't cross-compile your Rust program with every feature of OpenSSL, because some versions of OpenSSL don't support (feature as Vendored) which helps for cross-compilation. So you can use a version of OpenSSL which supports this feature, like <code>openssl = { version = \"0.10\", features = [\"vendored\"] }</code></p>\n"}], "owner": {"reputation": 217, "user_id": 6521325, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-9xGEc3C-lzU/AAAAAAAAAAI/AAAAAAAAAI4/uj8bKz3a6N8/photo.jpg?sz=128", "display_name": "BaleineBleue", "link": "https://stackoverflow.com/users/6521325/baleinebleue"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 609, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1562155021, "creation_date": 1557854551, "last_edit_date": 1559760818, "question_id": 56135580, "link": "https://stackoverflow.com/questions/56135580/compile-rust-program-for-raspberry-pi-armv7-unknown-linux-gnueabihf-from-64-bi", "title": "Compile Rust program for raspberry pi `armv7-unknown-linux-gnueabihf` from 64 bit arch linux", "body": "<p>I want to compile a Rust program from my laptop for my raspberry pi. I am having issues upgrading the version of C on the pi and cannot install rust to compile it from there. </p>\n\n<p>I followed <a href=\"https://hackernoon.com/compiling-rust-for-the-raspberry-pi-49fdcd7df658\" rel=\"nofollow noreferrer\">this</a> tutorial for cross compiling rust for rpi. I can compile simple programs this way with no problems, however the program I want to compile uses sqlite and openssl and this is where I am having issues.</p>\n\n<p>I have installed <code>lib32-dbus</code>, <code>lib32-openssl</code> and <code>lib32-sqlite</code>. Doing <code>export OPENSSL_LIB_DIR=/usr/lib32</code> and <code>export OPENSSL_INCLUDE_DIR=/usr/include/openssl-1.0</code> fixes openssl, but the linker still can't find the 32 bit version of the sqlite lib and exits with this error:</p>\n\n<pre><code>$ PKG_CONFIG_ALLOW_CROSS=1 cargo build --target armv7-unknown-linux-gnueabihf\n\n...\n\nnote: /usr/lib/libsqlite3.so: file not recognized: file format not recognized\n</code></pre>\n\n<p>Full error <a href=\"https://pastebin.com/Xa40CJw1\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>Is there some sort of <code>SQLITE_LIB_DIR</code> env variable that I can set? If not, how do I point the linker to the correct version? Thanks.</p>\n\n<p>Edit: I have now downloaded and cross compiled libsqlite3 for arm linux. Now I just need to know how to point the linker to the arm version.</p>\n"}, {"tags": ["rust", "gtk", "gtk-rs"], "answers": [{"comments": [{"owner": {"reputation": 33, "user_id": 9555870, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e96f7859ff610ef342be21e9c7083b2c?s=128&d=identicon&r=PG", "display_name": "H.D. Lin", "link": "https://stackoverflow.com/users/9555870/h-d-lin"}, "edited": false, "score": 0, "creation_date": 1557843505, "post_id": 56127939, "comment_id": 98896118, "body": "thanks for your reply. I have found this too. Is there any solutions else?"}], "tags": [], "owner": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "is_accepted": true, "score": 1, "last_activity_date": 1557841227, "last_edit_date": 1557841227, "creation_date": 1557828495, "answer_id": 56127939, "question_id": 56124291, "link": "https://stackoverflow.com/questions/56124291/how-to-listen-for-the-clipboard-owner-change-event-in-gtk-rs/56127939#56127939", "title": "How to listen for the clipboard &quot;owner-change&quot; event in gtk-rs?", "body": "<p><code>clipboard.rs</code> <a href=\"https://github.com/gtk-rs/gtk/blob/4942479eebc69f75808a720a514d5b78700642c8/src/auto/clipboard.rs#L229-L231\" rel=\"nofollow noreferrer\">contains the following comment</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>//pub fn connect_owner_change&lt;Unsupported or ignored types&gt;(&amp;self, f: F) -&gt; SignalHandlerId {\n//    Ignored event: Gdk.EventOwnerChange\n//}\n</code></pre>\n\n<p>so this feature is likely not (yet) supported.</p>\n"}], "owner": {"reputation": 33, "user_id": 9555870, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e96f7859ff610ef342be21e9c7083b2c?s=128&d=identicon&r=PG", "display_name": "H.D. Lin", "link": "https://stackoverflow.com/users/9555870/h-d-lin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 1, "accepted_answer_id": 56127939, "answer_count": 1, "score": 3, "last_activity_date": 1557841227, "creation_date": 1557815669, "last_edit_date": 1557841137, "question_id": 56124291, "link": "https://stackoverflow.com/questions/56124291/how-to-listen-for-the-clipboard-owner-change-event-in-gtk-rs", "title": "How to listen for the clipboard &quot;owner-change&quot; event in gtk-rs?", "body": "<p>I am writing a application based on <code>gtk::Clipboard</code> in using the gtk-rs crate. I have already initialized a <code>Clipboard</code> like this:</p>\n\n<pre><code>let clipboard = gtk::Clipboard::get(&amp;gdk::SELECTION_PRIMARY);\n</code></pre>\n\n<p>It is able to print the selected text by using <code>clipboard.wait_for_text()</code> in loop.</p>\n\n<p>However, I only need the text when the selection changes. How can I connect a handling function to the <code>owner-change</code> event emitted from <code>clipboard</code>?</p>\n\n<p>In Python, it could be implemented like <a href=\"https://github.com/bianjp/popup-dict/blob/dbf9121aa63d65095bd848a582595e1b03327418/popupdict/ui/popup.py#L35\" rel=\"nofollow noreferrer\">this</a></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>clipboard = Gtk.Clipboard.get(Gdk.SELECTION_PRIMARY)\nclipboard.connect(\"owner-change\", foo)\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1557817404, "post_id": 56123213, "comment_id": 98881424, "body": "IIRC IDEAs code does not rely on the rust compiler at all. Therefore if you encounter an error, always use rustc as a reference, never your IDE warnings/errors."}], "answers": [{"comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 4, "creation_date": 1557815293, "post_id": 56123684, "comment_id": 98880367, "body": "Note also that <code>i32</code> implements both <a href=\"https://doc.rust-lang.org/stable/std/primitive.i32.html#impl-Add%3Ci32%3E\" rel=\"nofollow noreferrer\"><code>Add&lt;i32&gt;</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/primitive.i32.html#impl-Add%3C%26%27a%20i32%3E\" rel=\"nofollow noreferrer\"><code>Add&lt;&amp;i32&gt;</code></a>, so knowing that <code>a</code> is <code>i32</code> still leaves two possibilities for the type of <code>b</code>: it could be either <code>i32</code> or <code>&amp;i32</code>. That&#39;s why you need to tell the compiler which one to take."}], "tags": [], "owner": {"reputation": 340, "user_id": 652278, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9bbc401e0db6b59e8152fba482308e02?s=128&d=identicon&r=PG", "display_name": "sdht0", "link": "https://stackoverflow.com/users/652278/sdht0"}, "is_accepted": true, "score": 4, "last_activity_date": 1557840328, "last_edit_date": 1557840328, "creation_date": 1557812538, "answer_id": 56123684, "question_id": 56123213, "link": "https://stackoverflow.com/questions/56123213/why-cant-the-rust-compiler-infer-the-type-when-calling-parse/56123684#56123684", "title": "Why can&#39;t the Rust compiler infer the type when calling parse?", "body": "<p>This is specifically mentioned in the <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.parse\" rel=\"nofollow noreferrer\">documentation for <code>parse()</code></a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Because <code>parse</code> is so general, it can cause problems with type inference. As such, parse is one of the few times you'll see the syntax affectionately known as the 'turbofish': <code>::&lt;&gt;</code>. This helps the inference algorithm understand specifically which type you're trying to parse into.</p>\n  \n  <p><strong><code>parse</code> can parse any type that implements the <a href=\"https://doc.rust-lang.org/std/string/str/trait.FromStr.html\" rel=\"nofollow noreferrer\"><code>FromStr</code></a> trait</strong>.</p>\n</blockquote>\n\n<p>There are many <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\" rel=\"nofollow noreferrer\">implementors of <code>FromStr</code></a>, which is why you have to tell Rust exactly which type you want to parse from the <code>String</code>.</p>\n"}], "owner": {"reputation": 366, "user_id": 11492659, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e61e264c1094508a0ae578af2fc03e6?s=128&d=identicon&r=PG&f=1", "display_name": "hzqelf", "link": "https://stackoverflow.com/users/11492659/hzqelf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 326, "favorite_count": 0, "closed_date": 1557841994, "accepted_answer_id": 56123684, "answer_count": 1, "score": 2, "last_activity_date": 1557842083, "creation_date": 1557809582, "last_edit_date": 1557841869, "question_id": 56123213, "link": "https://stackoverflow.com/questions/56123213/why-cant-the-rust-compiler-infer-the-type-when-calling-parse", "closed_reason": "Duplicate", "title": "Why can&#39;t the Rust compiler infer the type when calling parse?", "body": "<p>I'm writing a sum calculator in Rust, but I found that the Rust compiler can't infer a type in some cases. Here is the code.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let mut s = String::new();\n    std::io::stdin().read_line(&amp;mut s).unwrap();\n    let sum = s.split_whitespace()\n        .filter_map(|c| c.parse().ok())\n        .fold(0, |a, b| a + b);\n    println!(\"{}\", sum);\n}\n</code></pre>\n\n<p>The Rust compiler told me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n --&gt; src/main.rs:6:22\n  |\n6 |         .fold(0, |a, b| a + b);\n  |                      ^ consider giving this closure parameter a type\n</code></pre>\n\n<p>However, IntelliJ IDEA infers the type is <code>i32</code>.</p>\n\n<p>If we type <code>let a = 0;</code>, the type of <code>a</code> is <code>i32</code> by default. I guess IDEA infer the type of initial value <code>0</code> of the <code>fold</code> function is <code>i32</code>, so the <code>sum</code> type in the fourth line can be inferred to <code>i32</code> and <code>c</code> should be parsed to <code>i32</code> on the next line. But why can't the Rust compiler infer the type?</p>\n\n<p>I  have also tried to declare the <code>sum</code> type in the fourth line, and the Rust compiler give me the same error. Why can't the Rust compiler infer the type in this case?</p>\n\n<p>If I declare the <code>parse()</code> type or do as compiler told me, then it compiles.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 3080, "user_id": 2375119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/oB60l.png?s=128&g=1", "display_name": "ArekBulski", "link": "https://stackoverflow.com/users/2375119/arekbulski"}, "edited": false, "score": 0, "creation_date": 1618825104, "post_id": 56122374, "comment_id": 118710526, "body": "I do not understand why the downvotes. This is a legitimate question and I learned something new from the accepted answer."}, {"owner": {"reputation": 3054, "user_id": 115030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15c74c0974c6cc25c194a2737e2d6747?s=128&d=identicon&r=PG", "display_name": "Anders Kaseorg", "link": "https://stackoverflow.com/users/115030/anders-kaseorg"}, "reply_to_user": {"reputation": 3080, "user_id": 2375119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://i.stack.imgur.com/oB60l.png?s=128&g=1", "display_name": "ArekBulski", "link": "https://stackoverflow.com/users/2375119/arekbulski"}, "edited": false, "score": 0, "creation_date": 1619134569, "post_id": 56122374, "comment_id": 118820412, "body": "@ArekBulski I didn\u2019t downvote, but I would speculate that the downvoters don\u2019t appreciate the questioner\u2019s immediate leap to \u201cfalse warning\u201d and \u201cbug in Rust\u201d, when the value really is unused, the problem is in the input code, and the compiler\u2019s warning is correct, clear, and helpful."}], "answers": [{"comments": [{"owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "edited": false, "score": 0, "creation_date": 1557836719, "post_id": 56122646, "comment_id": 98891864, "body": "no, there is a reason of having <code>let mut altered_priority = priority</code> , I am copying the type from <code>priority</code> since I don&#39;t know what type it is, so to avoid digging into the code, I just copy the value together with the type"}, {"owner": {"reputation": 555, "user_id": 5572146, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c799e0c44a11d16cc175a717d5dca855?s=128&d=identicon&r=PG&f=1", "display_name": "chpio", "link": "https://stackoverflow.com/users/5572146/chpio"}, "edited": false, "score": 1, "creation_date": 1557845253, "post_id": 56122646, "comment_id": 98897305, "body": "again: why aren&#39;t you just using <code>1</code> instead of <code>altered_priority</code>?"}, {"owner": {"reputation": 555, "user_id": 5572146, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c799e0c44a11d16cc175a717d5dca855?s=128&d=identicon&r=PG&f=1", "display_name": "chpio", "link": "https://stackoverflow.com/users/5572146/chpio"}, "edited": false, "score": 0, "creation_date": 1557845684, "post_id": 56122646, "comment_id": 98897610, "body": "It would get converted into the needed type, just the same way it is with the variable."}], "tags": [], "owner": {"reputation": 3054, "user_id": 115030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15c74c0974c6cc25c194a2737e2d6747?s=128&d=identicon&r=PG", "display_name": "Anders Kaseorg", "link": "https://stackoverflow.com/users/115030/anders-kaseorg"}, "is_accepted": true, "score": 11, "last_activity_date": 1557804867, "creation_date": 1557804867, "answer_id": 56122646, "question_id": 56122374, "link": "https://stackoverflow.com/questions/56122374/false-warning-value-assigned-is-never-read/56122646#56122646", "title": "false warning &quot;value assigned is never read&quot;", "body": "<p>You wrote <code>let mut altered_priority = priority;</code> followed immediately by <code>altered_priority = 1;</code>.  The compiler is warning you that the initial value <code>priority</code> you assigned to <code>altered_priority</code> in the first of these two statements is never read.  It is correct: the only value ever read from the <code>altered_priority</code> variable is <code>1</code>, not <code>priority</code>.</p>\n\n<p>There\u2019s no reason to write one value and then immediately and unconditionally replace it with another.  You could have replaced those two statements with simply <code>let altered_priority = 1;</code>.  (Or you could get rid of the variable and write <code>priority: 1</code> instead of <code>priority: altered_priority</code> below.)</p>\n"}], "owner": {"reputation": 4733, "user_id": 922445, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/a469120d35647d9aa50646cb4d778c71?s=128&d=identicon&r=PG&f=1", "display_name": "Nulik", "link": "https://stackoverflow.com/users/922445/nulik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1426, "favorite_count": 0, "accepted_answer_id": 56122646, "answer_count": 1, "score": -3, "last_activity_date": 1557804867, "creation_date": 1557802392, "question_id": 56122374, "link": "https://stackoverflow.com/questions/56122374/false-warning-value-assigned-is-never-read", "title": "false warning &quot;value assigned is never read&quot;", "body": "<p>I am getting this warning:</p>\n\n<pre><code> Compiling substrate-transaction-graph v2.0.0 (/home/niko/sub/substrate/core/transaction-pool/graph)\nwarning: value assigned to `altered_priority` is never read\n   --&gt; core/transaction-pool/graph/src/pool.rs:137:15\n    |\n137 |                         let mut altered_priority=priority;\n    |                                 ^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(unused_assignments)] on by default\n    = help: maybe it is overwritten before being read?\n</code></pre>\n\n<p>On compilation of this code:</p>\n\n<pre><code>match self.api.validate_transaction(at, xt.clone())? {\n    TransactionValidity::Valid { priority, requires, provides, longevity } =&gt; {\n        info!(target: \"txpool\",\"priority before alteration: priority={:?}\",priority);\n        let mut altered_priority=priority;\n        altered_priority=1;\n        Ok(base::Transaction {\n            data: xt,\n            bytes,\n            hash,\n            priority: altered_priority,\n            requires,\n            provides,\n            valid_till: block_number.as_().saturating_add(longevity),\n         })\n     },\n     TransactionValidity::Invalid(e) =&gt; {\n         bail!(error::Error::from(error::ErrorKind::InvalidTransaction(e)))\n     },\n     TransactionValidity::Unknown(e) =&gt; {\n         self.listener.write().invalid(&amp;hash);\n         bail!(error::Error::from(error::ErrorKind::UnknownTransactionValidity(e)))\n    },\n}\n</code></pre>\n\n<p>I have added <code>log</code> messages and after dumping the variables I can confirm that they have the values that they should have (after the code is executed), i.e. the <code>priority</code> field in <code>Transaction</code> struct was indeed changed:</p>\n\n<pre><code>2019-05-13 21:41:17 priority before alteration: priority=107\n2019-05-13 21:41:17 Map TX begins\n2019-05-13 21:41:17 TX IS OK: Transaction { hash: 0x79832c9790aee4b199a046cce27e46bb7e941f38e41d25629c922c318cf7c3a2, priority: 1, valid_till: 18446744073709551615, bytes: 107, requires: [], provides: [d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0200000000000000], data: 81ffd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27df063b12602c33fa92df4895ab3ecd9f2ad72544bd4b55f1c6c91c8c107dba3654fd13ca5e81612a7fe011414ca604e8f99feb1ed35ce471361ee2c14defdc503080003000ca10f}\n2019-05-13 21:41:17 TX priority: 1\n2019-05-13 21:41:17 Ok(Transaction { hash: 0x79832c9790aee4b199a046cce27e46bb7e941f38e41d25629c922c318cf7c3a2, priority: 1, valid_till: 18446744073709551615, bytes: 107, requires: [], provides: [d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d0200000000000000], data: 81ffd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27df063b12602c33fa92df4895ab3ecd9f2ad72544bd4b55f1c6c91c8c107dba3654fd13ca5e81612a7fe011414ca604e8f99feb1ed35ce471361ee2c14defdc503080003000ca10f})\n2019-05-13 21:41:17 Map TX ends\n</code></pre>\n\n<p>Actually, without even dumping the values, it is obvious from the code itself that the value is used in the creation of the struct <code>Transaction</code>.\nSo, is this a bug in <code>Rust</code> ?</p>\n"}, {"tags": ["struct", "reference", "rust", "copy"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1557775309, "post_id": 56118648, "comment_id": 98870478, "body": "<i>any type whose size is known can be stored on the stack - and is therefore <code>Copy</code></i> \u2014 that&#39;s not what <a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\"><code>Copy</code></a> means. Did you read the documentation? Why do you have this belief? Please link to the article."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557775436, "post_id": 56118648, "comment_id": 98870542, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/38215753/155423\">How do I implement Copy and Clone for a type that contains a String?</a> (<code>String</code> is basically a <code>Vec&lt;u8&gt;</code> and a <code>Vec</code> effectively contains a <code>Box</code>). If you disagree, please <b><a href=\"https://stackoverflow.com/posts/56118648/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1557775509, "post_id": 56118648, "comment_id": 98870570, "body": "See also <a href=\"https://stackoverflow.com/q/35458562/155423\">How can I implement Rust&#39;s Copy trait?</a>; <a href=\"https://stackoverflow.com/q/31012923/155423\">What is the difference between Copy and Clone?</a>; <a href=\"https://stackoverflow.com/q/32663478/155423\">Do copy semantics in Rust literally become a copy in memory?</a>; <a href=\"https://stackoverflow.com/q/27876588/155423\">Why is the Copy trait needed for default (struct valued) array initialization?</a>."}, {"owner": {"reputation": 21, "user_id": 11234510, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/49c4a09e8f957604a94320b411dc76a7?s=128&d=identicon&r=PG&f=1", "display_name": "Dominik", "link": "https://stackoverflow.com/users/11234510/dominik"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557775949, "post_id": 56118648, "comment_id": 98870753, "body": "I think that the answer in &quot;How do I implement Copy and Clone...&quot; also fits for my question: &quot;because String contains a pointer to the string data on the heap and assumes it has unique ownership of that data&quot; - I guess this is true for Box, too. So the Box&#39;s size itself would be known at compile time, but the problem is the actual pointer, isn&#39;t it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1557780118, "post_id": 56118648, "comment_id": 98872325, "body": "Yes, the size of a <code>Box</code> is always known at compile time \u2014 it will be one machine-sized integer (for normal types) or two (for fat pointers). The reason that <code>String</code> / <code>Box</code> / <code>Vec</code> cannot be <code>Copy</code> is that, if they were, then two values would &quot;own&quot; the same underlying memory allocation. When the first went out of scope, the value would be deallocated. The remaining value would then point to invalid memory."}], "owner": {"reputation": 21, "user_id": 11234510, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/49c4a09e8f957604a94320b411dc76a7?s=128&d=identicon&r=PG&f=1", "display_name": "Dominik", "link": "https://stackoverflow.com/users/11234510/dominik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 841, "favorite_count": 0, "closed_date": 1557779959, "answer_count": 0, "score": 2, "last_activity_date": 1559114221, "creation_date": 1557775203, "last_edit_date": 1559114221, "question_id": 56118648, "link": "https://stackoverflow.com/questions/56118648/why-can-a-struct-holding-a-boxt-not-be-copied", "closed_reason": "Duplicate", "title": "Why can a struct holding a Box&lt;T&gt; not be copied?", "body": "<p>An article that I read recently stated that a struct that holds a <code>Box&lt;T&gt;</code> as a field is not <code>Copy</code>.</p>\n\n<p>This confuses me, since I thought that any type whose size is known can be stored on the stack - and is therefore <code>Copy</code>.</p>\n\n<p>Isn't the <code>Box</code>'s size always the same? I thought that it was just a reference to a heap allocated memory - and does therefore have always the same size.</p>\n"}, {"tags": ["rust", "app-data", "rust-actix", "actix-web"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557769156, "post_id": 56117273, "comment_id": 98867946, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/56117273/edit\">edit</a> your question to include it. We cannot tell what crates (and their versions), types, traits, fields, etc. are present in the code. The modules <code>upload</code>, <code>config</code> and <code>geohub_database</code> are undefined \u2014 are they <b>required</b> to demo the problem? Remove or provide them. Try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557770013, "post_id": 56117273, "comment_id": 98868302, "body": "Links to code are fine as <i>additional</i> information, but <a href=\"https://meta.stackoverflow.com/questions/380194/can-we-please-get-the-how-to-create-an-mcve-help-page-updated-to-state-that-a\">they are not sufficient on their own</a>. Please <a href=\"https://stackoverflow.com/posts/56117273/edit\">edit</a> your question to <b>contain</b> a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557770117, "post_id": 56117273, "comment_id": 98868351, "body": "Is the logger <b>required</b> to reproduce the problem? If not, remove it. Is failure <b>required</b>  to reproduce the problem? If not, remove it. We really do mean <b>Minimal</b> when we ask you to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1557793602, "post_id": 56119839, "comment_id": 98875458, "body": "It appears that the OP has already done that: <code>.data(app_state.clone())</code>. What is incorrect about their invocation?"}], "tags": [], "owner": {"reputation": 154, "user_id": 7526741, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f9e7fc59fd903158f3127f1384139cf0?s=128&d=identicon&r=PG", "display_name": "Nikolay Kim", "link": "https://stackoverflow.com/users/7526741/nikolay-kim"}, "is_accepted": false, "score": -2, "last_activity_date": 1557793576, "last_edit_date": 1557793576, "creation_date": 1557781416, "answer_id": 56119839, "question_id": 56117273, "link": "https://stackoverflow.com/questions/56117273/actix-web-reports-app-data-is-not-configured-when-processing-a-file-upload/56119839#56119839", "title": "Actix-Web reports &quot;App data is not configured&quot; when processing a file upload", "body": "<p>You have to register your data before you can use it:</p>\n\n<pre><code>App::new().data(AppState::new())\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 223, "user_id": 8198583, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/X2yJ0.png?s=128&g=1", "display_name": "ncaq", "link": "https://stackoverflow.com/users/8198583/ncaq"}, "is_accepted": true, "score": 3, "last_activity_date": 1559202426, "creation_date": 1559202426, "answer_id": 56373912, "question_id": 56117273, "link": "https://stackoverflow.com/questions/56117273/actix-web-reports-app-data-is-not-configured-when-processing-a-file-upload/56373912#56373912", "title": "Actix-Web reports &quot;App data is not configured&quot; when processing a file upload", "body": "<p>I asked people in the rust-jp community to tell you the correct answer.</p>\n\n<p>Use <code>Arc</code> outer <code>HttpServer</code>.</p>\n\n<pre><code>/*\n~~~Cargo.toml\n[package]\nname = \"actix-data-example\"\nversion = \"0.1.0\"\nauthors = [\"ncaq &lt;ncaq@ncaq.net&gt;\"]\nedition = \"2018\"\n\n[dependencies]\nactix-web = \"1.0.0-rc\"\nenv_logger = \"0.6.0\"\n~~~\n */\n\nuse actix_web::*;\nuse std::sync::*;\n\nfn main() -&gt; std::io::Result&lt;()&gt; {\n    std::env::set_var(\"RUST_LOG\", \"actix_web=trace\");\n    env_logger::init();\n\n    let data = Arc::new(Mutex::new(ActixData::default()));\n    HttpServer::new(move || {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .data(data.clone())\n            .service(web::resource(\"/index/\").route(web::get().to(index)))\n            .service(web::resource(\"/create/\").route(web::get().to(create)))\n    })\n    .bind(\"0.0.0.0:3000\")?\n    .run()\n}\n\nfn index(actix_data: web::Data&lt;Arc&lt;Mutex&lt;ActixData&gt;&gt;&gt;) -&gt; HttpResponse {\n    println!(\"actix_data: {:?}\", actix_data);\n    HttpResponse::Ok().body(format!(\"{:?}\", actix_data))\n}\n\nfn create(actix_data: web::Data&lt;Arc&lt;Mutex&lt;ActixData&gt;&gt;&gt;) -&gt; HttpResponse {\n    println!(\"actix_data: {:?}\", actix_data);\n    actix_data.lock().unwrap().counter += 1;\n    HttpResponse::Ok().body(format!(\"{:?}\", actix_data))\n}\n\n/// actix-web\u304c\u4fdd\u6301\u3059\u308b\u72b6\u614b\n#[derive(Debug, Default)]\nstruct ActixData {\n    counter: usize,\n}\n</code></pre>\n\n<p>This post report to upstream.\n<a href=\"https://github.com/actix/actix-web/issues/874\" rel=\"nofollow noreferrer\">Official document data cause <code>App data is not configured, to configure use App::data()</code> \u00b7 Issue #874 \u00b7 actix/actix-web</a></p>\n"}, {"tags": [], "owner": {"reputation": 369, "user_id": 3824033, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/85bf348fa330a9d9355c6f1938ba4f42?s=128&d=identicon&r=PG&f=1", "display_name": "Milan", "link": "https://stackoverflow.com/users/3824033/milan"}, "is_accepted": false, "score": 0, "last_activity_date": 1612074822, "creation_date": 1612074822, "answer_id": 65976405, "question_id": 56117273, "link": "https://stackoverflow.com/questions/56117273/actix-web-reports-app-data-is-not-configured-when-processing-a-file-upload/65976405#65976405", "title": "Actix-Web reports &quot;App data is not configured&quot; when processing a file upload", "body": "<p>Instead of:</p>\n<pre><code>App::data(app_state.clone())\n</code></pre>\n<p>You should use:</p>\n<pre><code>App::app_data(app_state.clone())\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 3196153, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4a13b7a848a8cb4e08b76821d97c9cc8?s=128&d=identicon&r=PG&f=1", "display_name": "Belanchuk", "link": "https://stackoverflow.com/users/3196153/belanchuk"}, "is_accepted": false, "score": 1, "last_activity_date": 1612185497, "creation_date": 1612185497, "answer_id": 65993435, "question_id": 56117273, "link": "https://stackoverflow.com/questions/56117273/actix-web-reports-app-data-is-not-configured-when-processing-a-file-upload/65993435#65993435", "title": "Actix-Web reports &quot;App data is not configured&quot; when processing a file upload", "body": "<p>Faced a similar error: Internal Server Error: &quot;App data is not configured, to configure use App::data()&quot;</p>\n<p>from: <a href=\"https://github.com/actix/examples/blob/master/state/src/main.rs\" rel=\"nofollow noreferrer\">https://github.com/actix/examples/blob/master/state/src/main.rs</a></p>\n<ol>\n<li>For <strong>global shared state</strong>, we wrap our state in a <code>actix_web::web::Data</code> and move it into the factory closure. The closure is called once-per-thread, and we clone our state and attach to each instance of the <code>App</code> with <code>.app_data(state.clone())</code>.</li>\n</ol>\n<p>Thus:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>impl AppState {\n    fn new() -&gt; actix_web::web::Data&lt;AppState&gt; {\n        actix_web::web::Data&lt;AppState&gt; {\n            counter: Cell::new(0usize),\n        }\n    }\n}\n</code></pre>\n<p>...and in factory closure:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>... skip ...\nHttpServer::new(move || {\n    App::new()\n        .app_data(AppState::new().clone())\n... skip ...\n</code></pre>\n<ol start=\"2\">\n<li>For <strong>thread-local state</strong>, we construct our state within the factory closure and attach to the app with <code>.data(state)</code>.</li>\n</ol>\n<p>Thus:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>... skip ...\nHttpServer::new(move || {\n    let app_state = Cell::new(0usize);\n    App::new()\n        .data(app_state)\n... skip ...\n</code></pre>\n"}], "owner": {"reputation": 611, "user_id": 11378334, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-AXysP46Cwk8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3re2btjvnca9ztWrTvGV5IDe69sgKg/mo/photo.jpg?sz=128", "display_name": "Samuel Dressel", "link": "https://stackoverflow.com/users/11378334/samuel-dressel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2242, "favorite_count": 0, "accepted_answer_id": 56373912, "answer_count": 4, "score": 5, "last_activity_date": 1612185497, "creation_date": 1557768780, "last_edit_date": 1557838250, "question_id": 56117273, "link": "https://stackoverflow.com/questions/56117273/actix-web-reports-app-data-is-not-configured-when-processing-a-file-upload", "title": "Actix-Web reports &quot;App data is not configured&quot; when processing a file upload", "body": "<p>I'm using the Actix framework to create a simple server and I've implemented a file upload using a simple HTML frontend.</p>\n\n<pre><code>use actix_web::web::Data;\nuse actix_web::{middleware, web, App, HttpResponse, HttpServer};\nuse std::cell::Cell;\n\n// file upload functions, the same as you can find it under the \n// actix web documentation:\n// https://github.com/actix/examples/blob/master/multipart/src/main.rs :\nmod upload; \n\n\nfn index() -&gt; HttpResponse {\n    let html = r#\"&lt;html&gt;\n            &lt;head&gt;&lt;title&gt;Upload Test&lt;/title&gt;&lt;/head&gt;\n            &lt;body&gt;\n                &lt;form target=\"/\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n                    &lt;input type=\"file\" name=\"file\"/&gt;\n                    &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/button&gt;\n                &lt;/form&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\"#;\n\n    HttpResponse::Ok().body(html)\n}\n\n#[derive(Clone)]\npub struct AppState {        \n    counter: Cell&lt;usize&gt;,        \n}\n\nimpl AppState {\n    fn new() -&gt; Result&lt;Self, Error&gt; {\n        // some stuff\n        Ok(AppState {\n            counter: Cell::new(0usize),\n        })\n    }\n}\nfn main() {\n\n    let app_state = AppState::new().unwrap();\n\n    println!(\"Started http server: http://127.0.0.1:8000\");\n\n    HttpServer::new(move || {\n        App::new()\n            .wrap(middleware::Logger::default())\n            .service(\n                web::resource(\"/\")\n                    .route(web::get().to(index))\n                    .route(web::post().to_async(upload::upload)),\n            )\n            .data(app_state.clone())\n    })\n    .bind(\"127.0.0.1:8000\")\n    .unwrap()\n    .run()\n    .unwrap();\n}\n</code></pre>\n\n<p>Running the server works fine, but when I submit the file upload, it says: </p>\n\n<blockquote>\n  <p>App data is not configured, to configure use App::data()</p>\n</blockquote>\n\n<p>I don't know what to do.</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 4, "creation_date": 1557756684, "post_id": 56114139, "comment_id": 98861842, "body": "<i>&quot; Using a new variable is not an option, since this vector is actually a field in a struct.&quot;</i> Ever heard of <a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\" rel=\"nofollow noreferrer\"><code>std::mem::replace</code></a>?"}, {"owner": {"reputation": 2503, "user_id": 7442673, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iTfit.jpg?s=128&g=1", "display_name": "m.raynal", "link": "https://stackoverflow.com/users/7442673/m-raynal"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 2, "creation_date": 1557756855, "post_id": 56114139, "comment_id": 98861946, "body": "@hellow No, I&#39;m still new to the language. Very nice discovery indeed, thanks for pointing it. But I&#39;m not sure reallocating a chunk of memory would be more efficient than just modifying the values, what do you think ?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1557756965, "post_id": 56114139, "comment_id": 98862015, "body": "@m.raynal An empty vector does not allocate any memory in the heap"}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557756985, "post_id": 56114139, "comment_id": 98862038, "body": "Indeed. But what about <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear\" rel=\"nofollow noreferrer\"><code>Vec::clear</code></a>?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1557758624, "post_id": 56114139, "comment_id": 98862960, "body": "Unrelated to the actual problem, but for vector of <code>bool</code>s, you might want to consider switching to <a href=\"https://crates.io/crates/bit-vec\" rel=\"nofollow noreferrer\"><code>bit-vec</code></a>. <code>Vec&lt;bool&gt;</code> is not specialized like C++&#39;s <code>std::vector&lt;bool&gt;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1557757420, "post_id": 56114347, "comment_id": 98862266, "body": "Clear + Resize works pretty well, it just suffers from destroying and recreating the elements which may not be cheap."}, {"owner": {"reputation": 2503, "user_id": 7442673, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iTfit.jpg?s=128&g=1", "display_name": "m.raynal", "link": "https://stackoverflow.com/users/7442673/m-raynal"}, "edited": false, "score": 0, "creation_date": 1557757553, "post_id": 56114347, "comment_id": 98862344, "body": "From the doc of <code>Vec::resize</code>: &quot;If <code>new_len</code> is greater than <code>len</code>, the Vec is extended by the difference, with each additional slot filled with <code>value</code>&quot;. Looks like I did not pay enough attention to the documentation on this point, thanks for pointing it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1557757659, "last_edit_date": 1557757659, "creation_date": 1557757287, "answer_id": 56114347, "question_id": 56114139, "link": "https://stackoverflow.com/questions/56114139/what-is-an-efficient-way-to-reset-all-values-of-a-vect-without-resizing-it/56114347#56114347", "title": "What is an efficient way to reset all values of a Vec&lt;T&gt; without resizing it?", "body": "<p><code>resize</code> by itself will <strong>not</strong> work to \"reset\" values:</p>\n\n<pre><code>const LEN: usize = 3;\n\nfn main() {\n    let mut values = vec![false; LEN];\n\n    values[0] = true;\n\n    values.resize(LEN, false);\n    println!(\"{:?}\", values); // [true, false, false]\n}\n</code></pre>\n\n<hr>\n\n<p>Just use a for loop:</p>\n\n<pre><code>for v in &amp;mut values {\n    *v = false;\n}\nprintln!(\"{:?}\", values); // [false, false, false]\n</code></pre>\n\n<p>If that sight offends you, write an <em>extension trait</em>:</p>\n\n<pre><code>trait ResetExt&lt;T: Copy&gt; {\n    fn reset(&amp;mut self, val: T);\n}\n\nimpl&lt;T: Copy&gt; ResetExt&lt;T&gt; for [T] {\n    fn reset(&amp;mut self, value: T) {\n        for v in self {\n            *v = value;\n        }\n    }\n}\n</code></pre>\n\n<pre><code>values.reset(false);\nprintln!(\"{:?}\", values); // [false, false, false]\n</code></pre>\n\n<p>The trait idea can be extended so that each value knows how to reset itself, if that makes sense for your situation:</p>\n\n<pre><code>trait ResetExt {\n    fn reset(&amp;mut self);\n}\n\nimpl&lt;T: ResetExt&gt; ResetExt for [T] {\n    fn reset(&amp;mut self) {\n        for v in self {\n            v.reset();\n        }\n    }\n}\n\nimpl ResetExt for bool {\n    fn reset(&amp;mut self) {\n        *self = false;\n    }\n}\n\nimpl ResetExt for String {\n    fn reset(&amp;mut self) {\n        self.clear();\n    }\n}\n</code></pre>\n\n<pre><code>values.reset();\nprintln!(\"{:?}\", values); // [false, false, false]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1557757369, "creation_date": 1557757369, "answer_id": 56114369, "question_id": 56114139, "link": "https://stackoverflow.com/questions/56114139/what-is-an-efficient-way-to-reset-all-values-of-a-vect-without-resizing-it/56114369#56114369", "title": "What is an efficient way to reset all values of a Vec&lt;T&gt; without resizing it?", "body": "<p>The most efficient way in general is to reset the values themselves (aka B):</p>\n\n<pre><code>for item in &amp;mut my_vec { *item = false; }\n</code></pre>\n\n<p>For booleans it is not immediately obvious, however for a <code>String</code> it is important to preserve the allocated buffer of each element:</p>\n\n<pre><code>for item in &amp;mut my_vec { item.clear(); }\n</code></pre>\n\n<hr>\n\n<p>If discarding and recreating the elements of the <code>Vec</code> is cheap, such as the case of the boolean or if the elements will be overwritten anyway, then a combination of <code>clear</code> and <code>resize</code> is easier:</p>\n\n<pre><code>my_vec.clear();\nmy_vec.resize(my_vec_size, false);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "is_accepted": false, "score": 0, "last_activity_date": 1557840109, "last_edit_date": 1557840109, "creation_date": 1557806306, "answer_id": 56122811, "question_id": 56114139, "link": "https://stackoverflow.com/questions/56114139/what-is-an-efficient-way-to-reset-all-values-of-a-vect-without-resizing-it/56122811#56122811", "title": "What is an efficient way to reset all values of a Vec&lt;T&gt; without resizing it?", "body": "<blockquote>\n  <p>In C, I would use <code>memset</code></p>\n</blockquote>\n\n<p><a href=\"https://doc.rust-lang.org/std/ptr/fn.write_bytes.html\" rel=\"nofollow noreferrer\"><code>std::ptr::write_bytes</code></a> uses <code>memset</code> internally, so you can (almost) precisely translate this code. An example from the Rust documentation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut vec = vec![0u32; 4];\nunsafe {\n    let vec_ptr = vec.as_mut_ptr();\n    ptr::write_bytes(vec_ptr, 0xfe, 2);\n}\nassert_eq!(vec, [0xfefefefe, 0xfefefefe, 0, 0]);\n</code></pre>\n"}], "owner": {"reputation": 2503, "user_id": 7442673, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iTfit.jpg?s=128&g=1", "display_name": "m.raynal", "link": "https://stackoverflow.com/users/7442673/m-raynal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1237, "favorite_count": 0, "accepted_answer_id": 56114347, "answer_count": 3, "score": 4, "last_activity_date": 1557840109, "creation_date": 1557756560, "last_edit_date": 1557756887, "question_id": 56114139, "link": "https://stackoverflow.com/questions/56114139/what-is-an-efficient-way-to-reset-all-values-of-a-vect-without-resizing-it", "title": "What is an efficient way to reset all values of a Vec&lt;T&gt; without resizing it?", "body": "<p>I can use <code>resize</code>, but it seems like overkill because I do not need to resize the vector, just modify its values. Using a new variable is not an option, since this vector is actually a field in a struct.</p>\n\n<p>I guess that <code>resize</code> is efficient, and probably the answer to my question, but its name does not carry the meaning of resetting the values without modifying the size. </p>\n\n<p>In C, I would use <code>memset</code> (in opposition to <code>realloc</code>). </p>\n\n<p>Illustration of my question:</p>\n\n<pre><code>let my_vec_size = 42;\nlet mut my_vec = Vec::new();       //  'my_vec' will always have a size of 42\nmy_vec.resize(my_vec_size, false); //  Set the size to 42, and all values to false\n\n// [ ... ] piece of code where the values in 'my_vec' will be modified, checked, etc ...\n\n\n// now I need to reuse my_vec.\n// Possibility A -&gt; use resize again\nmy_vec.resize(my_vec_size, false);\n\n// Possibility B -&gt; iterate on the vector to modify its values (long and laborious)\nfor item in my_vec.iter_mut() {\n    *item = false;\n}\n\n// Possibility C ?\n</code></pre>\n"}, {"tags": ["rust", "rust-tokio"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1557741787, "post_id": 56109612, "comment_id": 98853686, "body": "Note that <code>main</code> can return a <code>Result</code>. If it is <code>Err</code>, the content will be displayed: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=55e0f19f3b9540a9aee4b26bcb4fd82b\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 571, "user_id": 521401, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b40ec693f9aaa68ad5d271ea91120f0b?s=128&d=identicon&r=PG", "display_name": "James", "link": "https://stackoverflow.com/users/521401/james"}, "edited": false, "score": 0, "creation_date": 1557805847, "post_id": 56111814, "comment_id": 98877670, "body": "When the first item is successful in the FuturesUnordered set, it will not return the error if the next one fails: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0e549cbf11a5227cc2d27f609c0180f7\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 571, "user_id": 521401, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b40ec693f9aaa68ad5d271ea91120f0b?s=128&d=identicon&r=PG", "display_name": "James", "link": "https://stackoverflow.com/users/521401/james"}, "edited": false, "score": 0, "creation_date": 1557839753, "post_id": 56111814, "comment_id": 98893786, "body": "@James that&#39;s the combined contract of <code>FuturesUnordered</code> / <code>Stream</code> / <code>into_future</code>. It will only poll enough to return the first item in the stream. If an error occurs, that&#39;s returned first, if a success is first, that&#39;s what&#39;s returned. In your example, the <i>failure never occurs</i> because it&#39;s never even polled. It&#39;s <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=0d9a88080921ca5c15379d21f41ebbee\" rel=\"nofollow noreferrer\">more obvious with a non-eager future</a>."}, {"owner": {"reputation": 571, "user_id": 521401, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b40ec693f9aaa68ad5d271ea91120f0b?s=128&d=identicon&r=PG", "display_name": "James", "link": "https://stackoverflow.com/users/521401/james"}, "edited": false, "score": 0, "creation_date": 1557903776, "post_id": 56111814, "comment_id": 98916856, "body": "Thanks for your help. Is there an alternative way I can look into rather than FuturesUnordered to achieve what I want?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1557839696, "last_edit_date": 1557839696, "creation_date": 1557748553, "answer_id": 56111814, "question_id": 56109612, "link": "https://stackoverflow.com/questions/56109612/how-to-return-an-error-from-futuresunordered/56111814#56111814", "title": "How to return an error from FuturesUnordered?", "body": "<p>Your code is <em>already</em> returning and handling the error. If you attempted to use the error, the compiler will quickly direct you to the solution:</p>\n\n<pre><code>if let Err(e) = res {\n    println!(\"err: {}\", e);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `(std::string::String, futures::stream::futures_unordered::FuturesUnordered&lt;impl futures::future::Future&gt;)` doesn't implement `std::fmt::Display`\n  --&gt; src/main.rs:12:29\n   |\n12 |         println!(\"err: {}\", e);\n   |                             ^ `(std::string::String, futures::stream::futures_unordered::FuturesUnordered&lt;impl futures::future::Future&gt;)` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `(std::string::String, futures::stream::futures_unordered::FuturesUnordered&lt;impl futures::future::Future&gt;)`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p>The <code>Err</code> value is a tuple of your error and the original stream to continue pulling after you have dealt with the error. This is what <code>Stream::into_future</code> / <a href=\"https://docs.rs/futures/0.1.27/futures/stream/struct.StreamFuture.html\" rel=\"nofollow noreferrer\"><code>StreamFuture</code></a> does.</p>\n\n<p>Access the first value in the tuple to get to the error:</p>\n\n<pre><code>if let Err((e, _)) = res {\n    println!(\"err: {}\", e);\n}\n</code></pre>\n\n<hr>\n\n<p>If you want to see all of the values, you could keep polling the stream over and over (but don't do this because it's probably inefficient):</p>\n\n<pre><code>let mut f = tasks.into_future();\nloop {\n    match runtime.block_on(f) {\n        Ok((None, _)) =&gt; {\n            println!(\"Stream complete\");\n            break;\n        }\n        Ok((Some(v), next)) =&gt; {\n            println!(\"Success: {:?}\", v);\n            f = next.into_future();\n        }\n        Err((e, next)) =&gt; {\n            println!(\"Error: {:?}\", e);\n            f = next.into_future();\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 571, "user_id": 521401, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b40ec693f9aaa68ad5d271ea91120f0b?s=128&d=identicon&r=PG", "display_name": "James", "link": "https://stackoverflow.com/users/521401/james"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 798, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1557839696, "creation_date": 1557740256, "last_edit_date": 1557748586, "question_id": 56109612, "link": "https://stackoverflow.com/questions/56109612/how-to-return-an-error-from-futuresunordered", "title": "How to return an error from FuturesUnordered?", "body": "<p>I have a set of futures to be run in parallel and if one fails I would like to get the error to return to the caller.</p>\n\n<p>Here is what I have been testing so far:</p>\n\n<pre><code>use futures::prelude::*;\nuse futures::stream::futures_unordered::FuturesUnordered;\nuse futures::{future, Future};\n\nfn main() {\n    let tasks: FuturesUnordered&lt;_&gt; = (1..10).map(|_| async_func(false)).collect();\n\n    let mut runtime = tokio::runtime::Runtime::new().expect(\"Unable to start runtime\");\n    let res = runtime.block_on(tasks.into_future());\n\n    if let Err(_) = res {\n        println!(\"err\");\n    }\n}\n\nfn async_func(success: bool) -&gt; impl Future&lt;Item = (), Error = String&gt; {\n    if success {\n        future::ok(())\n    } else {\n        future::err(\"Error\".to_string())\n    }\n}\n</code></pre>\n\n<p>How can I get the error from any failed futures? Even better would be to stop running any pending futures if a single future fails.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1557740254, "post_id": 56109525, "comment_id": 98852779, "body": "Does <code>MaterialProvider</code> implement <code>Material</code>?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1557740735, "post_id": 56109525, "comment_id": 98853064, "body": "This might be an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a>. In your attempt to solve your problem, you try to have a generic parameter that can be filled by a trait. This is not possible in today&#39;s Rust. While I certainly want this feature in Rust, I think your actual problem can be solved without that feature by using a completely different approach. This <code>Manager</code>/<code>Provider</code> stuff doesn&#39;t seem to me like it would be useful/necessary in Rust. Maybe you can tell us a bit more about the actual problem by <a href=\"https://stackoverflow.com/posts/56109525/edit\">edit</a>ing the question?"}, {"owner": {"reputation": 953, "user_id": 312632, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ff265721698489afeb7ceb7d3afde6e?s=128&d=identicon&r=PG", "display_name": "B_old", "link": "https://stackoverflow.com/users/312632/b-old"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1557742335, "post_id": 56109525, "comment_id": 98853982, "body": "@FrenchBoiethios, <code>MaterialProvider</code> does not implement <code>Material</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1557742488, "post_id": 56109525, "comment_id": 98854070, "body": "@B_old Do you want this kind of stuff? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=74f06743bf89ab87dbe93f02274fe93a\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 953, "user_id": 312632, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ff265721698489afeb7ceb7d3afde6e?s=128&d=identicon&r=PG", "display_name": "B_old", "link": "https://stackoverflow.com/users/312632/b-old"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1557742524, "post_id": 56109525, "comment_id": 98854091, "body": "@LukasKalbertodt, I will think about a concise description of what I want in plain english. In the meantime I included example code of what I would be using in C++, that hints at the use case at the very end."}, {"owner": {"reputation": 953, "user_id": 312632, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ff265721698489afeb7ceb7d3afde6e?s=128&d=identicon&r=PG", "display_name": "B_old", "link": "https://stackoverflow.com/users/312632/b-old"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1557742699, "post_id": 56109525, "comment_id": 98854195, "body": "@FrenchBoiethios, I think that solves part of my problem. I will have to study it some more, thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1557748914, "post_id": 56109525, "comment_id": 98857322, "body": "@FrenchBoiethios I think it would be more obvious if you used the <code>dyn</code> syntax everywhere (e.g. <code>impl Provider&lt;dyn Material&gt;</code>)."}], "answers": [{"tags": [], "owner": {"reputation": 3054, "user_id": 115030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15c74c0974c6cc25c194a2737e2d6747?s=128&d=identicon&r=PG", "display_name": "Anders Kaseorg", "link": "https://stackoverflow.com/users/115030/anders-kaseorg"}, "is_accepted": true, "score": 1, "last_activity_date": 1557805484, "creation_date": 1557805484, "answer_id": 56122722, "question_id": 56109525, "link": "https://stackoverflow.com/questions/56109525/is-it-possible-for-a-trait-to-return-trait-objects-specified-by-a-generic-type-o/56122722#56122722", "title": "Is it possible for a trait to return trait objects specified by a generic type on the trait?", "body": "\n\n<p>A generic trait may be parameterized on a type, but not on another trait.  So in <code>trait Provider&lt;T&gt;</code>, <code>T</code> is a type, not a trait, which means there\u2019s no such thing as <code>dyn T</code>.</p>\n\n<p>But a type parameter should be all you need here, if the type is itself allowed to be a trait object type.  To allow this, you just need to suppress the default <code>Sized</code> bound, since trait objects are unsized:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>pub trait Provider&lt;T: ?Sized&gt; {\n    fn load(&amp;self, name: &amp;str) -&gt; Box&lt;T&gt;;\n}\n\npub struct MaterialProvider {}\n\ntrait Material {}\n\nimpl Provider&lt;dyn Material&gt; for MaterialProvider {\n    fn load(&amp;self, name: &amp;str) -&gt; Box&lt;dyn Material&gt; { /* ... */ }\n}\n</code></pre>\n"}], "owner": {"reputation": 953, "user_id": 312632, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ff265721698489afeb7ceb7d3afde6e?s=128&d=identicon&r=PG", "display_name": "B_old", "link": "https://stackoverflow.com/users/312632/b-old"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 396, "favorite_count": 0, "accepted_answer_id": 56122722, "answer_count": 1, "score": 1, "last_activity_date": 1557805484, "creation_date": 1557739967, "last_edit_date": 1557756583, "question_id": 56109525, "link": "https://stackoverflow.com/questions/56109525/is-it-possible-for-a-trait-to-return-trait-objects-specified-by-a-generic-type-o", "title": "Is it possible for a trait to return trait objects specified by a generic type on the trait?", "body": "<p>I would like to define a trait like this:</p>\n\n<pre><code>pub trait Provider&lt;T&gt; {\n    fn load(&amp;self, name: &amp;str) -&gt; Box&lt;dyn T&gt;;\n}\n</code></pre>\n\n<p>But it is not possible:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0404]: expected trait, found type parameter `T`\n --&gt; src/lib.rs:2:47\n  |\n2 |         fn load(&amp;self, name: &amp;str) -&gt; Box&lt;dyn T&gt;;\n  |                                               ^ not a trait\n</code></pre>\n\n<p>A possible solution is to remove the <code>dyn</code> keyword, but I want implementors of <code>Provider</code> to return trait objects, like this:</p>\n\n<pre><code>pub struct MaterialProvider {}\n\ntrait Material {}\n\nimpl Provider&lt;Material&gt; for MaterialProvider {\n    fn load(&amp;self, name: &amp;str) -&gt; Box&lt;dyn Material&gt; { /*...*/ }\n}\n</code></pre>\n\n<p>Is it possible to express such a concept?</p>\n\n<p>I wanted to use this to create a single \"resource repository\" which can be used to create Objects of varying types. The exact types which should be supported might not be known at compile time and they don't necessarily need to implement the same interface.</p>\n\n<p>In C++ one way to solve the described problem is like this:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\n\nclass A {\n  public:\n    static std::string identifier()  {\n        return \"A\";\n    }\n};\n\nclass B {\n  public:\n    static std::string identifier()  {\n        return \"B\";\n    }\n};\n\nclass ProviderBase {};\n\ntemplate &lt;typename T&gt;\nclass Provider : public ProviderBase {\n  public:\n    virtual T* load() = 0;\n};\n\nclass ProviderA : public Provider&lt;A&gt; {\n  public:\n    A* load() {\n        return new A;\n    }\n};\n\nclass Manager {\n    std::map&lt;std::string, ProviderBase*&gt; providers;\n\n  public:\n    template&lt;typename T&gt;\n    void register_provider(Provider&lt;T&gt;* provider) {\n        providers[T::identifier()] = provider;\n    }\n\n    template&lt;typename T&gt;\n    T* load() {\n        auto p = providers.find(T::identifier());\n\n        if (providers.end() != p) {\n            return static_cast&lt;Provider&lt;T&gt;*&gt;(p-&gt;second)-&gt;load();\n        }\n\n        return nullptr;\n    }\n};\n\nint main(int argc, char* argv[]) {\n    Manager m;\n\n    ProviderA provider_a;\n\n    m.register_provider(&amp;provider_a);\n\n    if (m.load&lt;A&gt;()) {\n        std::cout &lt;&lt; \"Loaded A\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Could not load A\" &lt;&lt; std::endl;\n    }\n\n    if (m.load&lt;B&gt;()) {\n        std::cout &lt;&lt; \"Loaded B\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Could not load B\" &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre>\n"}, {"tags": ["rust", "substrate"], "answers": [{"tags": [], "owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "is_accepted": true, "score": 1, "last_activity_date": 1557751585, "creation_date": 1557751585, "answer_id": 56112680, "question_id": 56108572, "link": "https://stackoverflow.com/questions/56108572/is-treasury-modules-set-pot-function-available-for-public-use/56112680#56112680", "title": "Is Treasury Module&#39;s set_pot function available for public use?", "body": "<p>If you declare a function without <code>origin</code> as the first parameter in the <code>decl_module!</code> macro, it will automatically assume that you are trying to declare a \"privileged function\": a function which requires <code>Root</code> origin.</p>\n\n<p>From the <a href=\"https://crates.parity.io/srml_support/macro.decl_module.html#privileged-function-example\" rel=\"nofollow noreferrer\">docs</a>:</p>\n\n<blockquote>\n  <p>If the origin param is omitted, the macro adds it as the first parameter and adds ensure_root(origin) as the first line of the function. These functions are the same:</p>\n</blockquote>\n\n<pre class=\"lang-rust prettyprint-override\"><code>decl_module! {\n    pub struct Module&lt;T: Trait&gt; for enum Call where origin: T::Origin {\n\n        fn my_privileged_function() -&gt; Result {\n            // Your implementation\n            Ok(())\n        }\n\n        fn my_function(origin) -&gt; Result {\n            ensure_root(origin);\n            // Your implementation\n            Ok(())\n        }\n    }\n}\n</code></pre>\n\n<p>Functions which require <code>Root</code> origin should not be thought of like internal or private functions which are put in the <code>impl</code> block. They should be thought of as \"callable privileged functions\" which basically does an authorization check that the extrinsic which calls the function must have the origin of <code>Root</code>. You can think of it similar to the Sudo module which exposes two dispatchable functions, but only the \"Sudo key\" can successfully call those functions.</p>\n\n<p>In the case of \"privileged functions, <strong>only the runtime itself can produce a <code>Root</code> origin extrinsic.</strong></p>\n\n<p>Functions which are dispatchable are inherently different than those \"internal/private functions\" in the impl block. For example, lets look at the <code>set_pot</code> function you mentioned in the Treasury module.</p>\n\n<p>This is a \"privileged function\" which can literally set the balance of the <code>pot</code> to any number.</p>\n\n<p>If this was an internal function, then yes, you could call it within other runtime functions and it would do what you would expect all within the internals of the runtime. But now let's say you wanted to set up a democratic vote to change the balance of the <code>pot</code> for whatever reason. You would not be able to access this function since it is not exposed as a \"callable\" function from the module. So you would lose the ability for proposals to execute such logic.</p>\n\n<p>The <code>set_pot</code> function is made exactly the way it is because it is meant to be some low level privileged access to the Treasury module through a <code>Root</code> extrinsic, as are the other <code>Root</code> origin functions.</p>\n"}], "owner": {"reputation": 989, "user_id": 4184410, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/cyvsh.jpg?s=128&g=1", "display_name": "JoshOrndorff", "link": "https://stackoverflow.com/users/4184410/joshorndorff"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 56, "favorite_count": 0, "accepted_answer_id": 56112680, "answer_count": 1, "score": 1, "last_activity_date": 1558449981, "creation_date": 1557736712, "last_edit_date": 1558449981, "question_id": 56108572, "link": "https://stackoverflow.com/questions/56108572/is-treasury-modules-set-pot-function-available-for-public-use", "title": "Is Treasury Module&#39;s set_pot function available for public use?", "body": "<p>The treasury module's <a href=\"https://github.com/paritytech/substrate/blob/7e7192c0f48e7ca97bc54327df55a72ccd2d479c/srml/treasury/src/lib.rs#L122-L126\" rel=\"nofollow noreferrer\"><code>set_pot</code> function</a> is dispatchable (declared in <code>decl_module</code>) and doesn't seem to ensure anything about the origin. Doesn't that mean that anyone can unilaterally adjust the pot at any time?</p>\n\n<p>My experience using the polkadot UI is that anyone can try to call this function but the extrinsic always fails. If it is meant only to be called from sudo or democracy or the like, why isn't it written <a href=\"https://github.com/paritytech/substrate/blob/7e7192c0f48e7ca97bc54327df55a72ccd2d479c/srml/treasury/src/lib.rs#L232\" rel=\"nofollow noreferrer\">lower in the <code>impl Module</code> block</a>?</p>\n"}, {"tags": ["rust", "modularity"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557735695, "post_id": 56108185, "comment_id": 98850204, "body": "Hi there and welcome to StackOverflow. Questions like yours have been asked a lot already. Please see the linked originals for more explanation. In short (assuming your crate is a standard executable project): rename <code>lib.rs</code> to <code>util.rs</code> or something (<code>lib.rs</code> is a special name that you only want to use for library crates). Then add <code>mod util; mod alphabet;</code> to <code>main.rs</code>. Now your module tree is complete: from now on, you need to write <code>use</code> statements to import names into scope. No more <code>mod</code> statements! First <code>mod</code> to build your module tree, then only <code>use</code> to import. Hope this helps!"}, {"owner": {"reputation": 1, "user_id": 11415993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c997f77714bc0e5660da519aa9bc8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Emmanuel Bosquet", "link": "https://stackoverflow.com/users/11415993/emmanuel-bosquet"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557736177, "post_id": 56108185, "comment_id": 98850454, "body": "Thanks a lot, I&#39;ll try that !"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557736438, "post_id": 56108185, "comment_id": 98850589, "body": "If you have any further questions, just ask ahead! The general stuff is explained in the linked answers. If that doesn&#39;t make sense to you, you might want to ask on <a href=\"https://users.rust-lang.org\" rel=\"nofollow noreferrer\">the Rust users forum</a> -- it is less formal there than on StackOverflow."}, {"owner": {"reputation": 1, "user_id": 11415993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c997f77714bc0e5660da519aa9bc8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Emmanuel Bosquet", "link": "https://stackoverflow.com/users/11415993/emmanuel-bosquet"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557736462, "post_id": 56108185, "comment_id": 98850605, "body": "Holy cookie, that worked ! Ewige Dankbarkeit."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557736511, "post_id": 56108185, "comment_id": 98850632, "body": ":D  Glad we could help"}, {"owner": {"reputation": 1, "user_id": 11415993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c997f77714bc0e5660da519aa9bc8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Emmanuel Bosquet", "link": "https://stackoverflow.com/users/11415993/emmanuel-bosquet"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1557736512, "post_id": 56108185, "comment_id": 98850634, "body": "Okay I&#39;ll sign myself in the forums, thanks again!"}], "owner": {"reputation": 1, "user_id": 11415993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2c997f77714bc0e5660da519aa9bc8eb?s=128&d=identicon&r=PG&f=1", "display_name": "Emmanuel Bosquet", "link": "https://stackoverflow.com/users/11415993/emmanuel-bosquet"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 112, "favorite_count": 0, "closed_date": 1557735421, "answer_count": 0, "score": 0, "last_activity_date": 1557737418, "creation_date": 1557735120, "last_edit_date": 1557737418, "question_id": 56108185, "link": "https://stackoverflow.com/questions/56108185/basic-modularity-issue-with-rs-files-rust", "closed_reason": "Duplicate", "title": "Basic modularity issue with .rs files [rust]", "body": "<p>As a training exercice I'm writing a simple figlet-like program in rust that converts the standard input into big fancy letters, like so:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ echo \"Fancy text\" | myprogram\n</code></pre>\n\n<p>outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> _____                                       _                    _\n|  ___|   __ _   _ __     ____   _   _      | |_    ___   __  __ | |_\n| |_     / _` | | '_ \\   / ___| | | | |     | __|  / _  \\ \\ \\/ / | __|\n|  _|   | (_| | | | | | | (___  | |_| |     | |_  |  ___/  &gt;  &lt;  | |_\n|_|      \\__,_| |_| |_|  \\____|  \\__, |      \\__|  \\____| /_/\\_\\  \\__|\n                                 |___/\n</code></pre>\n\n<p>It all works pretty well, yet my <code>lib.rs</code> is getting <em>very</em> big, because of this one function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn char_to_struct(caractere: char) -&gt; Lettre {\n    match caractere {\n        'A' =&gt; Lettre {\n            line1: r#\"    _     \"#,\n            line2: r#\"   / \\    \"#,\n            line3: r#\"  / _ \\   \"#,\n            line4: r#\" / ___ \\  \"#,\n            line5: r#\"/_/   \\_\\ \"#,\n            line6: r#\"          \"#,\n        },\n        'B' =&gt; Lettre {\n            line1: r#\" ____   \"#,\n            line2: r#\"| __ )  \"#,\n            line3: r#\"|  _ \\  \"#,\n            line4: r#\"| |_) | \"#,\n            line5: r#\"|____/  \"#,\n            line6: r#\"        \"#,\n        },\n        // etc.\n}\n</code></pre>\n\n<p>It is about 900 lines long and I'd like to put it into its own file for practical and learning purposes.\nI chose to name the file <code>alphabet.rs</code> and put it into <code>src/</code>, like so:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 alphabet.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.rs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>I got the hang of basic modularity. Writing <code>mod lib</code> in <code>main.rs</code> and calling functions with <code>use lib::some_function</code>. \nBut I don't manage to</p>\n\n<ul>\n<li>import <code>alphabet.rs</code> in <code>lib.rs</code> (to call its <code>char_to_struct()</code> function)</li>\n<li>import <code>lib.rs</code> in <code>alphabet.rs</code> (to use the structs defined there)</li>\n</ul>\n\n<p>And I can't figure out why writing <code>mod alphabet</code> is acceptable in <code>main.rs</code> but not in <code>lib.rs</code> :</p>\n\n<blockquote>\n  <p>file not found for module <code>alphabet</code>\n  help: name the file either lib/alphabet.rs or lib/alphabet/mod.rs inside the directory \"src\"</p>\n</blockquote>\n\n<p>I created directories, renamed stuff, wrote all kind of stuff, tried <em>everything</em> I could and banged my head several times against the documentation.</p>\n\n<h3>Edit : the solution</h3>\n\n<p>As explained by Lukas Kalbertodt, I renamed <code>lib.rs</code> into <code>util.rs</code> (which is less harmful I suppose) and edited my files like so :</p>\n\n<p><em>main.rs</em></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>mod util;\nmod alphabet;\nuse util::some_function;\n\nfn main() { ... }\n</code></pre>\n\n<p><em>util.rs</em></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use crate::alphabet::char_to_struct;\n\npub fn some_function() { ... }\npub struct Mystruct { ... }\n</code></pre>\n\n<p><em>alphabet.rs</em></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use crate::util::Mystruct { ... }\npub fn char_to_struct() { ... }\n</code></pre>\n\n<p>And it works pretty well.</p>\n"}, {"tags": ["pointers", "memory-leaks", "rust"], "comments": [{"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557732014, "post_id": 56107324, "comment_id": 98848533, "body": "Why do you think it should be unsafe to do so? Does it break any guarantees Rust provides? Does it affect the control flow in any way? Is it possible to access the forgotten bytes later in any manner? :)"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1557734215, "post_id": 56107324, "comment_id": 98849498, "body": "Other than the part of the book that you already quoted, I don&#39;t think that there is much to say about this. <i>&quot;memory leaks are memory safe&quot;</i> is the right answer."}, {"owner": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "reply_to_user": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 1, "creation_date": 1557746152, "post_id": 56107324, "comment_id": 98855952, "body": "@hellow That&#39;s the thing: I had expected that &#39;forgetting&#39; stuff (keeping things around in memory &#39;forever&#39; without running their destructor) would be undesirable and I was amazed to find out that indeed Rust&#39;s guarantees do not talk about this situation, which is the reason I asked this question."}], "answers": [{"comments": [{"owner": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "edited": false, "score": 0, "creation_date": 1557746481, "post_id": 56108074, "comment_id": 98856105, "body": "Great answer! The Nomicon specifically is more in-depth than I&#39;d ever expect an answer to this question to be :&#39;). I do think that the &#39;ever growing <code>Map</code> is maybe not the best example, however, since while this might end up at some point <i>depleting</i> available memory, it is not &#39;leaking&#39; it (as soon as the program stops using the map, regardless of how big it has become, it will be reclaimed by the GC). The fact that both instances (the <code>Map</code> and unreachable pointers) will at some point trigger heap exhaustion, is definitely interesting..."}, {"owner": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "edited": false, "score": 0, "creation_date": 1557746624, "post_id": 56108074, "comment_id": 98856174, "body": "I guess that &#39;heap exhaustion&#39; is a practical problem we encounter when our physical Von Neumann machines are at the limit of their capabilities to simulate a Turing Machine (which, after all, has infinite memory), which means that heap exhaustion is a bad problem <i>in practice</i>, but it is  safe <i>in theory</i> because there it cannot happen?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "edited": false, "score": 1, "creation_date": 1557746995, "post_id": 56108074, "comment_id": 98856368, "body": "@Qqwy: (1) Regarding the <code>Map</code> memory being reclaimed when the program stops using the map; I would point that most OSes will collect the memory of a process when the program stops as well. In this sense, leaks are always ephemeral. (2) I like your characterization of theory (infinite memory) and practice (finite memory)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557749142, "post_id": 56108074, "comment_id": 98857453, "body": "Related: <a href=\"https://stackoverflow.com/q/55553048/155423\">Is it possible to cause a memory leak in Rust?</a>"}, {"owner": {"reputation": 2204, "user_id": 1063961, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/s9gRK.png?s=128&g=1", "display_name": "Centril", "link": "https://stackoverflow.com/users/1063961/centril"}, "edited": false, "score": 1, "creation_date": 1557782072, "post_id": 56108074, "comment_id": 98873018, "body": "Note that memory leaks <i>could</i> be declared undefined behavior (e.g. with linear types). That is, the people that develop Rust get to define what UB is in the language. Therefore, make sure that you don&#39;t also say <i>&quot;Memory leaks do not cause Undefined Behavior, because they are safe.&quot;</i>  since that would be a cyclical definition."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1557734667, "creation_date": 1557734667, "answer_id": 56108074, "question_id": 56107324, "link": "https://stackoverflow.com/questions/56107324/why-does-rust-consider-it-safe-to-leak-memory/56108074#56108074", "title": "Why does Rust consider it safe to leak memory?", "body": "<p><strong>Because it is safe.</strong></p>\n\n<hr>\n\n<p><code>unsafe</code> has a very specific meaning in Rust, it specifically targets classes of programming mistakes which trigger <em>Undefined Behavior</em>. Those are the nastiest mistakes, as they completely subvert your whole understanding of a program, allowing either compiler or hardware to behave in unpredictable ways.</p>\n\n<p>Memory leaks do not trigger <em>Undefined Behavior</em>, and therefore are safe.</p>\n\n<p><em>You may be interested in what the Nomicon (the Unsafe equivalent of the Rust Book) has to say about <a href=\"https://doc.rust-lang.org/nomicon/leaking.html\" rel=\"noreferrer\">Leaking</a>; the example about <code>ScopeGuard</code> is often referred to as the Leakpocalypse.</em></p>\n\n<hr>\n\n<p>It is notable that Garbage Collected languages can easily leak memory, for example. A simple <code>Map</code> in which key-value pairs are added without ever being removed will eventually lead to heap exhaustion; and the GC will not be able to stop it.</p>\n\n<p>An ever-growing <code>Map</code> is as undesirable as repeatedly forgetting to <code>free</code> a pointer, in either case heap exhaustion looms, yet GC'ed languages are considered safe in general.</p>\n"}], "owner": {"reputation": 4605, "user_id": 1067339, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/3479b6831ccaa6263ed5ca7dab3ba972?s=128&d=identicon&r=PG", "display_name": "Qqwy", "link": "https://stackoverflow.com/users/1067339/qqwy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1566, "favorite_count": 2, "accepted_answer_id": 56108074, "answer_count": 1, "score": 9, "last_activity_date": 1557749073, "creation_date": 1557731445, "last_edit_date": 1557749073, "question_id": 56107324, "link": "https://stackoverflow.com/questions/56107324/why-does-rust-consider-it-safe-to-leak-memory", "title": "Why does Rust consider it safe to leak memory?", "body": "<p>According to <a href=\"https://doc.rust-lang.org/book/ch15-06-reference-cycles.html\" rel=\"noreferrer\">this chapter in the Rust Book</a>, it is possible to leak memory by creating a cycle of pointers:</p>\n\n<blockquote>\n  <p>Rust\u2019s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a <em>memory leak</em>). Preventing memory leaks entirely is not one of Rust\u2019s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using <code>Rc&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code>: it\u2019s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.</p>\n</blockquote>\n\n<p>There exist alternatives like \"weak pointers\" that would allow you to create self-referential structures that could still be cleaned up when dropped. In fact, using <code>Weak&lt;T&gt;</code> is actually suggested later in that chapter.</p>\n\n<p>Why does Rust consider this safe? Why is this an instance where the language does not do anything to prevent 'bad programmer behaviour'?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1557736250, "post_id": 56105305, "comment_id": 98850494, "body": "Very related question: <a href=\"https://stackoverflow.com/questions/47121985/why-cant-i-use-a-key-function-that-returns-a-reference-when-sorting-a-vector-wi\">Why can&#39;t I use a key function that returns a reference when sorting a vector with sort_by_key?</a>. This and a basic &quot;cannot move out of borrowed content&quot; answer would explain this question. I didn&#39;t want to dupe-hammer -- I want to see if others agree."}], "answers": [{"comments": [{"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "edited": false, "score": 0, "creation_date": 1557722798, "post_id": 56105746, "comment_id": 98845553, "body": "Is it possible to do the sorting using string slices (or avoiding the clone in some other way)?"}, {"owner": {"reputation": 938, "user_id": 3894179, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c6b1c2c08d1075995cb780ee8a2e36e?s=128&d=identicon&r=PG", "display_name": "Andra", "link": "https://stackoverflow.com/users/3894179/andra"}, "reply_to_user": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "edited": false, "score": 0, "creation_date": 1557723062, "post_id": 56105746, "comment_id": 98845605, "body": "Yes, take a look at this <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b2981ac372a7a931b023b6d71fdd8cd4\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "edited": false, "score": 0, "creation_date": 1557723125, "post_id": 56105746, "comment_id": 98845619, "body": "What if the strings aren&#39;t static? (edit: I also meant that we would still use OP&#39;s <code>Dummy</code>, which has <code>String</code>s. The string slice part was referring to passing a string slice in <code>sort_by_key</code>)"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "reply_to_user": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "edited": false, "score": 1, "creation_date": 1557723462, "post_id": 56105746, "comment_id": 98845683, "body": "@User: I don&#39;t think you can do it with <code>sort_by_key</code>, because you would want to return a reference to the string, but you can&#39;t do that because <code>sort_by_key</code> is already borrowing the Dummy object mutably. However, you can do it with <code>sort_by</code>. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=4575746783b076a689e4c30be9ff75f0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1557723563, "post_id": 56105746, "comment_id": 98845705, "body": "@BenjaminLindley Yeah I&#39;m in the process of writing an answer to that effect (and your solution is exactly the same as mine =p)."}, {"owner": {"reputation": 938, "user_id": 3894179, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c6b1c2c08d1075995cb780ee8a2e36e?s=128&d=identicon&r=PG", "display_name": "Andra", "link": "https://stackoverflow.com/users/3894179/andra"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1557723801, "post_id": 56105746, "comment_id": 98845776, "body": "@BenjaminLindley using <code>sort_by</code> was certainly way better :)"}], "tags": [], "owner": {"reputation": 938, "user_id": 3894179, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c6b1c2c08d1075995cb780ee8a2e36e?s=128&d=identicon&r=PG", "display_name": "Andra", "link": "https://stackoverflow.com/users/3894179/andra"}, "is_accepted": false, "score": 1, "last_activity_date": 1557721619, "creation_date": 1557721619, "answer_id": 56105746, "question_id": 56105305, "link": "https://stackoverflow.com/questions/56105305/how-to-sort-a-vec-of-structs-by-a-string-field/56105746#56105746", "title": "How to sort a Vec of structs by a String field?", "body": "<p>I think it's because it's trying to move the <code>String</code> from one struct to another struct.</p>\n\n<p>This works fine</p>\n\n<pre><code>struct Dummy {\n    x: String,\n    y: i8\n}\n\nfn main() {\n    let mut dummies: Vec&lt;Dummy&gt; = Vec::new();\n    dummies.push(Dummy { x: \"a\".to_string(), y: 1 });\n    dummies.push(Dummy { x: \"b\".to_string(), y: 2 });\n\n    dummies.sort_by_key(|d| d.x.clone()); // Clone the string\n    dummies.sort_by_key(|d| d.y); // This is fine\n}\n</code></pre>\n\n<p>The behavior might looks something like this</p>\n\n<pre><code>struct Dummy {\n    x: String,\n    y: i8\n}\n\nfn main() {\n    let mut dummies: Vec&lt;Dummy&gt; = Vec::new();\n    dummies.push(Dummy { x: \"a\".to_string(), y: 1 });\n    dummies.push(Dummy { x: \"b\".to_string(), y: 2 });\n    let mut temp = Dummy{ x: \"c\".to_string(), y: 3 };\n    temp.x = dummies[0].x; // Error[E0507]: cannot move out of borrowed content\n}\n</code></pre>\n\n<p>Using <code>clone()</code> like the example above</p>\n\n<pre><code>struct Dummy {\n    x: String,\n    y: i8\n}\n\nfn main() {\n    let mut dummies: Vec&lt;Dummy&gt; = Vec::new();\n    dummies.push(Dummy { x: \"a\".to_string(), y: 1 });\n    dummies.push(Dummy { x: \"b\".to_string(), y: 2 });\n    let mut temp = Dummy{ x: \"c\".to_string(), y: 3 };\n    temp.x = dummies[0].x.clone(); // Fine\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "edited": false, "score": 1, "creation_date": 1557727750, "post_id": 56106352, "comment_id": 98846887, "body": "&quot;Why can&#39;t we use sort_by_key without cloning the Strings?&quot; - we can&#39;t use the reference here because underlying element is supposed to be moved. The only workaround is to use <code>&amp;str</code> instead of <code>String</code> in <code>Dummy</code> (or something similar)"}, {"owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "reply_to_user": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "edited": false, "score": 1, "creation_date": 1557727997, "post_id": 56106352, "comment_id": 98846980, "body": "@Laney, yup. I&#39;m almost done writing that part of the answer."}, {"owner": {"reputation": 638, "user_id": 2089696, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e2b286e5dfd462da32dadce05308461b?s=128&d=identicon&r=PG", "display_name": "BrendanMcKee", "link": "https://stackoverflow.com/users/2089696/brendanmckee"}, "edited": false, "score": 0, "creation_date": 1558637000, "post_id": 56106352, "comment_id": 99176347, "body": "Thanks for the explanation"}], "tags": [], "owner": {"reputation": 7716, "user_id": 4639273, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae38603d40c633012992337a32330fa0?s=128&d=identicon&r=PG", "display_name": "SCappella", "link": "https://stackoverflow.com/users/4639273/scappella"}, "is_accepted": true, "score": 10, "last_activity_date": 1557737406, "last_edit_date": 1557737406, "creation_date": 1557726282, "answer_id": 56106352, "question_id": 56105305, "link": "https://stackoverflow.com/questions/56105305/how-to-sort-a-vec-of-structs-by-a-string-field/56106352#56106352", "title": "How to sort a Vec of structs by a String field?", "body": "<p>First, let's look at your original error message, then we'll go through a few fixes and try to understand everything.</p>\n\n<p>In the closure that you use in <code>dummies.sort_by_key(|d| d.x);</code>, <code>d</code> is a reference to a <code>Dummy</code> instance. However, the field access <code>d.x</code> is the <code>String</code> itself. If you wanted to return that <code>String</code>, you'd have to give ownership of it to whatever called the closure. But since <code>d</code> was just a reference, you can't pass ownership of its data.</p>\n\n<p>One easy fix is to simply clone the string as <code>dummies.sort_by_key(|d| d.x.clone());</code>. This makes a copy of the string before returning it in the closure (this is Andra's solution). This works perfectly, but if performance or memory use is an issue, we can avoid the clone.</p>\n\n<p>The idea here is that using the string as the key is wasteful. Really, all we need to know is which of two strings is smaller. If we use the string as a key, then every time the sort function needs to compare two <code>Dummy</code>s, it calls the key function on each one and the strings are passed to a (very short) function that simply compares them. If we did the comparison in the same context as the borrow, we'd be able to simply pass the result of the comparison on, rather than the strings.</p>\n\n<p>The solution is the <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by\" rel=\"noreferrer\"><code>sort_by</code></a> method on slices. This allows us to take references to two <code>Dummy</code>s and decide if one is smaller than the other. For example we can use it like <code>dummies.sort_by(|d1, d2| d1.x.cmp(&amp;d2.x));</code> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bfd81577c6d456c8070ffa2be51a30e9\" rel=\"noreferrer\">(full example here)</a></p>\n\n<h2>Addendum</h2>\n\n<p>Why can't we use <code>sort_by_key</code> without cloning the <code>String</code>s? Surely there must be some clever way of using string slices and lifetimes to do it.</p>\n\n<p>Let's look at the signature of <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.sort_by_key\" rel=\"noreferrer\">the <code>sort_by_key</code> function.</a></p>\n\n<pre><code>pub fn sort_by_key&lt;K, F&gt;(&amp;mut self, f: F) where\n    F: FnMut(&amp;T) -&gt; K,\n    K: Ord, \n</code></pre>\n\n<p>The interesting part of this function is not what is there, but what isn't there. The type parameter <code>K</code> doesn't depend on the lifetime of the reference passed to <code>f</code>.</p>\n\n<p>As the slice is sorted, the key function gets repeatedly called with a reference to a <code>Dummy</code> instance. Since the slice is sorted a little between each call, the lifetime of the reference must be very short. If it were longer, it'd get invalidated the next time the elements of the slice were moved around. However, <code>K</code> can't depend on that lifetime. That means that whatever our key function is, it can't return anything that depends on the current location of the <code>Dummy</code> (e.g. a string slice, a reference, or any other clever construction<sup>1</sup>).</p>\n\n<p>However, we could make <code>K</code> depend on the lifetime of whatever is passed to it. The idea here is what's called <a href=\"https://doc.rust-lang.org/nomicon/hrtb.html\" rel=\"noreferrer\"><em>Higher-Rank Trait Bounds</em></a>. These currently only work with lifetimes (though in theory they could be extended to all type parameters). We could posit another slice method with signature</p>\n\n<pre><code>fn sort_by_key_hrtb&lt;T, F, K&gt;(slice: &amp;mut [T], f: F)\nwhere\n    F: Fn(&amp;T) -&gt; &amp;K,\n    K: Ord,\n</code></pre>\n\n<p>Why does this make things work? In <code>F: Fn(&amp;T) -&gt; &amp;K,</code>, the lifetime of the output reference is implicitly the same as (or longer than) the lifetime of the input reference. Desugared, this is <code>F: for&lt;'a&gt; Fn(&amp;'a T) -&gt; &amp;'a K,</code>, which says that <code>f</code> should be able to take a reference with any lifetime <code>'a</code> and return a reference with lifetime (greater than or equal to) <code>'a</code>. Now we have a method that works exactly how you wanted to use it (except for a pesky <code>&amp;</code><sup>2</sup>). <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a459e00b0ac9f722dbc28d277b8e9f81\" rel=\"noreferrer\">(playground link)</a></p>\n\n<hr>\n\n<ol>\n<li><p>Actually, there is one (unsafe) clever construction that probably works, but I haven't vetted it. You can use a wrapper around a raw pointer to a <code>String</code> and then <code>impl Ord</code> for that wrapper so that it dereferences the pointer to do the comparison.<sup>3</sup> The return type for the key function would be <code>*const String</code>, so we don't need any lifetimes. This is inherently unsafe though, and I definitely wouldn't recommend it. A (probably) working example is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2404861f71ac4de39c077efd396a312b\" rel=\"noreferrer\">here</a>.</p></li>\n<li><p>The only reason we need to use <code>&amp;mut dummies</code> here is that <code>sort_by_key_hrtb</code> isn't actually a slice method. If it were, <code>dummies</code> would be automatically borrowed and dereferenced into a slice, so we could call the function like <code>dummies.sort_by_key_hrtb(|d| &amp;d.x);</code>.</p></li>\n<li><p>Why a wrapper instead of just a pointer? <code>*const T</code> implements <code>Ord</code>, but it does so by comparing the addresses rather than the underlying value (if any), which isn't what we want here.</p></li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 1823, "user_id": 4718768, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/AqNiS.jpg?s=128&g=1", "display_name": "tirz", "link": "https://stackoverflow.com/users/4718768/tirz"}, "edited": false, "score": 0, "creation_date": 1557729753, "post_id": 56106921, "comment_id": 98847638, "body": "Ho, I did not take the time to read the current answer... But <a href=\"https://stackoverflow.com/a/56106352/4718768\">stackoverflow.com/a/56106352/4718768</a> is really complete."}], "tags": [], "owner": {"reputation": 1823, "user_id": 4718768, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/AqNiS.jpg?s=128&g=1", "display_name": "tirz", "link": "https://stackoverflow.com/users/4718768/tirz"}, "is_accepted": false, "score": 2, "last_activity_date": 1593113754, "last_edit_date": 1593113754, "creation_date": 1557729538, "answer_id": 56106921, "question_id": 56105305, "link": "https://stackoverflow.com/questions/56105305/how-to-sort-a-vec-of-structs-by-a-string-field/56106921#56106921", "title": "How to sort a Vec of structs by a String field?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by_key\" rel=\"nofollow noreferrer\"><code>sort_by_key</code></a> function takes ownership of the key:</p>\n<pre><code>pub fn sort_by_key&lt;K, F&gt;(&amp;mut self, f: F)\n</code></pre>\n<p>This is why you are getting <a href=\"https://doc.rust-lang.org/error-index.html#E0507\" rel=\"nofollow noreferrer\">error <code>E0507</code></a>.</p>\n<p>A simple fix will be to store a reference on your struct so <code>sort_by_key</code> will not take the ownership of your key.</p>\n<p>Then you need to had a lifetime to the referred value so she can be dropped when your struct is gone.</p>\n<pre><code>struct Dummy&lt;'a&gt; {\n    x: &amp;'a str,\n    y: i8,\n}\n\nfn main() {\n    let mut dummies: Vec&lt;Dummy&gt; = Vec::new();\n    dummies.push(Dummy { x: &quot;a&quot;, y: 1 });\n    dummies.push(Dummy { x: &quot;b&quot;, y: 2 });\n\n    dummies.sort_by_key(|d| d.x);\n    dummies.sort_by_key(|d| d.y);\n}\n</code></pre>\n"}], "owner": {"reputation": 638, "user_id": 2089696, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e2b286e5dfd462da32dadce05308461b?s=128&d=identicon&r=PG", "display_name": "BrendanMcKee", "link": "https://stackoverflow.com/users/2089696/brendanmckee"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1991, "favorite_count": 0, "accepted_answer_id": 56106352, "answer_count": 3, "score": 6, "last_activity_date": 1593113754, "creation_date": 1557716761, "last_edit_date": 1593113585, "question_id": 56105305, "link": "https://stackoverflow.com/questions/56105305/how-to-sort-a-vec-of-structs-by-a-string-field", "title": "How to sort a Vec of structs by a String field?", "body": "<p>I'm having difficulty with a seemingly trivial sort by String field. Repro below:</p>\n<pre><code>struct Dummy {\n    x: String,\n    y: i8\n}\n\nfn main() {\n    let mut dummies: Vec&lt;Dummy&gt; = Vec::new();\n    dummies.push(Dummy { x: &quot;a&quot;.to_string(), y: 1 });\n    dummies.push(Dummy { x: &quot;b&quot;.to_string(), y: 2 });\n\n    dummies.sort_by_key(|d| d.x); // error[E0507]: cannot move out of borrowed content\n    dummies.sort_by_key(|d| d.y); // This is fine\n}\n</code></pre>\n<p>Can someone please explain what exactly is going wrong and how to fix it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1557688188, "post_id": 56102463, "comment_id": 98839695, "body": "In your example, it&#39;s not obvious what you mean by &quot; minimize the amount of allocations&quot; because you don&#39;t save anything here"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1557688373, "post_id": 56102463, "comment_id": 98839739, "body": "by the way, <code>collect_into</code> doesn&#39;t exist in the crate you maybe probably want <code>collect_into_vec</code>"}], "answers": [{"tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 1, "last_activity_date": 1557688388, "creation_date": 1557688388, "answer_id": 56102621, "question_id": 56102463, "link": "https://stackoverflow.com/questions/56102463/why-cant-i-call-collect-into-on-a-par-iter/56102621#56102621", "title": "Why can&#39;t I call collect_into on a par_iter?", "body": "<p>This method has been renamed to <code>collect_into_vec()</code> in the 1.0 release of Rayon, which you appear to be using.</p>\n"}], "owner": {"reputation": 39, "user_id": 11194430, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1c1316fdc387b8402bbe135670efe71d?s=128&d=identicon&r=PG&f=1", "display_name": "picked name", "link": "https://stackoverflow.com/users/11194430/picked-name"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 170, "favorite_count": 0, "accepted_answer_id": 56102621, "answer_count": 1, "score": -1, "last_activity_date": 1557688388, "creation_date": 1557687160, "question_id": 56102463, "link": "https://stackoverflow.com/questions/56102463/why-cant-i-call-collect-into-on-a-par-iter", "title": "Why can&#39;t I call collect_into on a par_iter?", "body": "<p>I want to minimize the amount of allocations my program does, so instead of calling <code>.collect()</code> on a rayon par_iter, I try using <code>collect_into()</code>, collecting into an existing Vec.</p>\n\n<p>Here is some sample code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use rayon::prelude::*;\nuse rayon::iter::IndexedParallelIterator;\n\nfn main() {\n    let a:Vec&lt;u8&gt; = vec![1,2,3,4];\n    let mut b: Vec&lt;u8&gt; = Vec::with_capacity(100);\n    a.into_par_iter().map(|x|x*2).collect_into(&amp;mut b);\n    println!(\"{:?}\",a);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7139f0fa232bc3fa781155d4f58e189d\" rel=\"nofollow noreferrer\">(Playground)</a></p>\n\n<p>Instead of building, the compiler prints</p>\n\n<pre><code>error[E0599]: no method named `collect_into` found for type `rayon::iter::map::Map&lt;rayon::vec::IntoIter&lt;u8&gt;, [closure@src/main.rs:8:27: 8:33]&gt;` in the current scope\n --&gt; src/main.rs:8:35\n   |\n 8 |     a.into_par_iter().map(|x|x*2).collect_into(&amp;mut b);\n   |                                   ^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["types", "rust", "match"], "answers": [{"comments": [{"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 1, "creation_date": 1557675605, "post_id": 56100816, "comment_id": 98836271, "body": "Beautiful; thank you!"}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 1, "creation_date": 1557675679, "post_id": 56100816, "comment_id": 98836294, "body": "No worries, I&#39;m glad if I could help!"}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557680434, "post_id": 56100816, "comment_id": 98837655, "body": "On an extended note for later consideration: The rust team really should add directly matching type-parameters to primitives&#39;/structs without the added loop of implementations. Where art thou, Rust-Lang Team?"}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557680637, "post_id": 56100816, "comment_id": 98837695, "body": "@ThomasBraun well, you could achieve something similar with <a href=\"https://doc.rust-lang.org/reference/procedural-macros.html\" rel=\"nofollow noreferrer\">proc-macros</a>, are you familiar with those?  Since you are working at the AST level, you could match against the types there."}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "reply_to_user": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 1, "creation_date": 1557680837, "post_id": 56100816, "comment_id": 98837750, "body": "Although, the two would have different effects: if your <code>do_something</code> is complex and long and it is very different from type to type, and invoked more than once, it is better to have them as functions in the <code>impl</code> blocks over inserting the same function bodies over and over again for example."}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": true, "score": 6, "last_activity_date": 1557711937, "last_edit_date": 1557711937, "creation_date": 1557675572, "answer_id": 56100816, "question_id": 56100579, "link": "https://stackoverflow.com/questions/56100579/how-do-i-match-on-the-concrete-type-of-a-generic-parameter/56100816#56100816", "title": "How do I match on the concrete type of a generic parameter?", "body": "<p>I assume the reason you'd like to match against a type is because you'd like to have the <em>switching</em> at compile time instead of runtime.  Unfortunately Rust does not have that kind of inspection (yet?), but what you could do is create a trait for this which then you can implement for the types you'd like to use:</p>\n\n<pre><code>trait DoSomething {\n    fn do_something(&amp;self) -&gt; Option&lt;Self&gt;\n    where\n        Self: Sized;\n}\n\nimpl DoSomething for u8 {\n    fn do_something(&amp;self) -&gt; Option&lt;u8&gt; {\n        Some(8)\n    }\n}\n\nimpl DoSomething for u16 {\n    fn do_something(&amp;self) -&gt; Option&lt;u16&gt; {\n        Some(16)\n    }\n}\n\nfn f&lt;U&gt;(x: U) -&gt; Option&lt;U&gt;\nwhere\n    U: DoSomething,\n{\n    x.do_something()\n}\n\nfn main() {\n    println!(\"{:?}\", f(12u8));\n    println!(\"{:?}\", f(12u16));\n}\n</code></pre>\n"}], "owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2683, "favorite_count": 1, "closed_date": 1557711984, "accepted_answer_id": 56100816, "answer_count": 1, "score": 2, "last_activity_date": 1557712149, "creation_date": 1557673923, "last_edit_date": 1557711888, "question_id": 56100579, "link": "https://stackoverflow.com/questions/56100579/how-do-i-match-on-the-concrete-type-of-a-generic-parameter", "closed_reason": "Duplicate", "title": "How do I match on the concrete type of a generic parameter?", "body": "<p>I have a function with a type parameter <code>U</code> that returns an <code>Option&lt;U&gt;</code>. <code>U</code> is bound by the trait <code>num::Num</code>. As such, <code>U</code> can be a <code>usize</code>, <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>, <code>isize</code>, etc. </p>\n\n<p>How do I match <code>U</code>? E.g.,</p>\n\n<pre><code>match U {\n    u8 =&gt; {},\n    u16 =&gt; {}\n    _ =&gt; {}\n}\n</code></pre>\n"}, {"tags": ["async-await", "rust", "future", "wasm-bindgen"], "answers": [{"tags": [], "owner": {"reputation": 8073, "user_id": 2852624, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/682806d261e4f00f77aa8633689a9558?s=128&d=identicon&r=PG&f=1", "display_name": "Matthias247", "link": "https://stackoverflow.com/users/2852624/matthias247"}, "is_accepted": true, "score": 1, "last_activity_date": 1557711657, "last_edit_date": 1557711657, "creation_date": 1557700039, "answer_id": 56103968, "question_id": 56100028, "link": "https://stackoverflow.com/questions/56100028/implementation-of-send-is-missing-when-calling-futureextboxed/56103968#56103968", "title": "Implementation of Send is missing when calling FutureExt::boxed()", "body": "<p>The <code>.boxed()</code> extension function requires the <code>Future</code> to be <code>Send</code> since <a href=\"https://github.com/rust-lang-nursery/futures-rs/commit/3b67140adec8a76515aa3bfbabe52695b76f56d6#diff-63548cac00f39ef099b69f6caa1bdcdb\" rel=\"nofollow noreferrer\">a recent change in futures</a>. Apparently your future doesn't fulfill that constraint - likely because JS futures are only valid on the main JS thread.</p>\n\n<p>If <code>.boxed()</code> happens inside the scope of your library you can use <code>Box::pin(future)</code> instead of <code>future.boxed()</code> in order to get a type erased boxed future without the <code>Send</code> requirement.</p>\n"}], "owner": {"reputation": 3647, "user_id": 371191, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/e1caa49eebfe37ffe3ef64e19364b0b3?s=128&d=identicon&r=PG", "display_name": "Silly Freak", "link": "https://stackoverflow.com/users/371191/silly-freak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 189, "favorite_count": 0, "accepted_answer_id": 56103968, "answer_count": 1, "score": 1, "last_activity_date": 1557711789, "creation_date": 1557670010, "last_edit_date": 1557711789, "question_id": 56100028, "link": "https://stackoverflow.com/questions/56100028/implementation-of-send-is-missing-when-calling-futureextboxed", "title": "Implementation of Send is missing when calling FutureExt::boxed()", "body": "<p>I'm experimenting with futures with WASM, using <code>wasm-bindgen-futures</code> and the <code>rust-webpack-template</code>; the full <a href=\"https://github.com/SillyFreak/Rust-WASM-Async-Example/tree/75490e70e350aa31f81651ec41e8e8d60c124461\" rel=\"nofollow noreferrer\">working</a> code and <a href=\"https://github.com/SillyFreak/Rust-WASM-Async-Example/tree/077ed8e5577fd1bc5cc1a72a7aa96308d2336a0f\" rel=\"nofollow noreferrer\">problem</a> code is available.</p>\n\n<p>My experiment is to call an <code>async fn run()</code>, wrapped by a <code>fn run_js() -&gt; js_sys::Promise</code>, from JavaScript. The following is working:</p>\n\n<pre><code>pub async fn run() -&gt; Result&lt;(), JsValue&gt; {\n    Ok(())\n}\n\n// Called by our JS entry point to run the example.\n#[wasm_bindgen(js_name = run)]\npub fn run_js() -&gt; js_sys::Promise {\n    use crate::compat::future_to_promise;\n    use futures::future::FutureExt;\n\n    future_to_promise(async move {\n        run().await?;\n        Ok(JsValue::UNDEFINED)\n    }.boxed())\n}\n</code></pre>\n\n<p>The next step was to add a sleep function and call it from <code>run()</code>:</p>\n\n<pre><code>// in run:\nsleep(500).await?;\n\npub async fn sleep(millis: i32) -&gt; Result&lt;(), JsValue&gt; {\n    use crate::compat::promise_to_future;\n\n    let promise = js_sys::Promise::new(&amp;mut move |resolve, _| {\n        let window = web_sys::window().expect(\"should have a Window\");\n        window.set_timeout_with_callback_and_timeout_and_arguments_0(\n            &amp;resolve, millis\n        ).expect(\"don't expect error on setTimeout()\");\n    });\n\n    promise_to_future(promise).await?;\n    Ok(())\n}\n</code></pre>\n\n<p><code>crate::compat</code> converts Future 0.3 -> Future 0.1 -> Promise, and back. For completeness, here is <code>promise_to_future</code>:</p>\n\n<pre><code>pub fn promise_to_future(promise: Promise) -&gt; impl Future&lt;Output=Result&lt;JsValue, JsValue&gt;&gt; {\n    // promise to 0.1\n    let future01 = JsFuture::from(promise);\n    // 0.1 to 0.3\n    Compat01As03::new(future01)\n}\n</code></pre>\n\n<p>Adding this, I get a compilation error here:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: `*mut u8` cannot be sent between threads safely\n  --&gt; src/lib.rs:45:7\n   |\n42 |     future_to_promise(async move {\n43 |         run().await?;\n44 |         Ok(JsValue::UNDEFINED)\n45 |     }.boxed())\n   |       ^^^^^ `*mut u8` cannot be sent between threads safely\n   |\n   = help: within `impl core::future::future::Future`, the trait `std::marker::Send` is not implemented for `*mut u8`\nerror[E0277]: `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)` cannot be sent between threads safely\n  --&gt; src/lib.rs:45:7\n   |\n42 |     future_to_promise(async move {\n43 |         run().await?;\n44 |         Ok(JsValue::UNDEFINED)\n45 |     }.boxed())\n   |       ^^^^^ `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)` cannot be sent between threads safely\n   |\n   = help: the trait `std::marker::Send` is not implemented for `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)`\n</code></pre>\n\n<p>(more source code context added, and abridged; full version below)</p>\n\n<p>I can't make out what the error is; something here is not <code>Send</code>, but that's about as much as I understand from this.</p>\n\n<p>Shouldn't this be possible in principle? Or how should I write my sleep function to work correctly?</p>\n\n<hr>\n\n<p>Full Compiler output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling rust-webpack v0.1.0 (/data/Documents/Programmieren/rust/hello-web/crate)\nerror[E0277]: `*mut u8` cannot be sent between threads safely\n  --&gt; src/lib.rs:45:7\n   |\n45 |     }.boxed())\n   |       ^^^^^ `*mut u8` cannot be sent between threads safely\n   |\n   = help: within `impl core::future::future::Future`, the trait `std::marker::Send` is not implemented for `*mut u8`\n   = note: required because it appears within the type `std::marker::PhantomData&lt;*mut u8&gt;`\n   = note: required because it appears within the type `wasm_bindgen::JsValue`\n   = note: required because it appears within the type `js_sys::Object`\n   = note: required because it appears within the type `js_sys::Promise`\n   = note: required because it appears within the type `{i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/sleep.rs:4:56: 16:2 millis:i32 {i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/sleep.rs:4:56: 16:2 millis:i32 {i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `{fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/lib.rs:16:43: 34:2 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/lib.rs:16:43: 34:2 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `{fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/lib.rs:42:34: 45:6 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/lib.rs:42:34: 45:6 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n\nerror[E0277]: `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)` cannot be sent between threads safely\n  --&gt; src/lib.rs:45:7\n   |\n45 |     }.boxed())\n   |       ^^^^^ `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)` cannot be sent between threads safely\n   |\n   = help: the trait `std::marker::Send` is not implemented for `(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)`\n   = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;`\n   = note: required because it appears within the type `std::boxed::Box&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;`\n   = note: required because it appears within the type `std::mem::ManuallyDrop&lt;std::boxed::Box&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;&gt;`\n   = note: required because it appears within the type `wasm_bindgen::closure::Closure&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;`\n   = note: required because it appears within the type `(wasm_bindgen::closure::Closure&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;, wasm_bindgen::closure::Closure&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;)`\n   = note: required because it appears within the type `std::option::Option&lt;(wasm_bindgen::closure::Closure&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;, wasm_bindgen::closure::Closure&lt;(dyn std::ops::FnMut(wasm_bindgen::JsValue) + 'static)&gt;)&gt;`\n   = note: required because it appears within the type `wasm_bindgen_futures::JsFuture`\n   = note: required because it appears within the type `futures::task_impl::Spawn&lt;wasm_bindgen_futures::JsFuture&gt;`\n   = note: required because it appears within the type `futures_util::compat::compat01as03::Compat01As03&lt;wasm_bindgen_futures::JsFuture&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `{i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/sleep.rs:4:56: 16:2 millis:i32 {i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/sleep.rs:4:56: 16:2 millis:i32 {i32, js_sys::Promise, fn(std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;wasm_bindgen::JsValue, wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `{fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/lib.rs:16:43: 34:2 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/lib.rs:16:43: 34:2 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `impl core::future::future::Future`\n   = note: required because it appears within the type `{fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}`\n   = note: required because it appears within the type `[static generator@src/lib.rs:42:34: 45:6 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]`\n   = note: required because it appears within the type `std::future::GenFuture&lt;[static generator@src/lib.rs:42:34: 45:6 {fn(std::result::Result&lt;(), wasm_bindgen::JsValue&gt;) -&gt; std::result::Result&lt;&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Ok, &lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::Error&gt; {&lt;std::result::Result&lt;(), wasm_bindgen::JsValue&gt; as std::ops::Try&gt;::into_result}, impl core::future::future::Future, ()}]&gt;`\n   = note: required because it appears within the type `impl core::future::future::Future`\n</code></pre>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 101, "user_id": 11047410, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e90c9c10d22c03c5e209a238a4ca7335?s=128&d=identicon&r=PG&f=1", "display_name": "darkwisebear", "link": "https://stackoverflow.com/users/11047410/darkwisebear"}, "is_accepted": false, "score": 0, "last_activity_date": 1557712319, "last_edit_date": 1557712319, "creation_date": 1557651877, "answer_id": 56097694, "question_id": 56097480, "link": "https://stackoverflow.com/questions/56097480/return-error-from-async-function-to-caller-of-synchronous-function/56097694#56097694", "title": "Return error from async function to caller of synchronous function", "body": "<p>If you want to \"return\" something from <code>tokio::run</code>, you can use a communications channel that will transport your result back to the main thread, like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn run_sync&lt;T, E, F&gt;(fut: F) -&gt; Result&lt;T, E&gt;\nwhere\n    T: Debug + Send + 'static,\n    E: Debug + Send + 'static,\n    F: Future&lt;Item = T, Error = E&gt; + Send + 'static,\n{\n    let (sender, receiver) = tokio::sync::oneshot::channel();\n    let exec = fut.then(move |result| {\n        sender.send(result).expect(\"Unable to send result\");\n        Ok(())\n    });\n    tokio::run(exec);\n    receiver.wait().expect(\"Receive error\")\n}\n</code></pre>\n"}], "owner": {"reputation": 571, "user_id": 521401, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/b40ec693f9aaa68ad5d271ea91120f0b?s=128&d=identicon&r=PG", "display_name": "James", "link": "https://stackoverflow.com/users/521401/james"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 330, "favorite_count": 0, "closed_date": 1557712291, "answer_count": 1, "score": 0, "last_activity_date": 1557712319, "creation_date": 1557650037, "last_edit_date": 1557712266, "question_id": 56097480, "link": "https://stackoverflow.com/questions/56097480/return-error-from-async-function-to-caller-of-synchronous-function", "closed_reason": "Duplicate", "title": "Return error from async function to caller of synchronous function", "body": "<p>I am learning Tokio/futures and can't find a way to return the error up to the caller in the main function; is this possible?</p>\n\n<p>My use case is for AWS Lambda with the runtime being synchronous and would like to return any errors from the async parts.</p>\n\n<pre><code>use futures::Future; // 0.1.26\nuse reqwest::r#async::Client; // 0.9.14\nuse reqwest::Error; // 0.1.18\nuse serde::Deserialize;\nuse tokio;\n\nfn main() {\n    let call = synchronous_function();\n    if let Err(e) = call {\n        println!(\"{:?}\", e);\n    }\n}\n\nfn synchronous_function() -&gt; Result&lt;(), Error&gt; {\n    let fut = async_function()\n        .and_then(|res| {\n            println!(\"{:?}\", res);\n            Ok(())\n        })\n        .map_err(|_| ());\n\n    tokio::run(fut);\n    Ok(())\n}\n\nfn async_function() -&gt; impl Future&lt;Item = Json, Error = Error&gt; {\n    let client = Client::new();\n    client\n        .get(\"https://jsonplaceholder.typicode.com/todos/1\")\n        .send()\n        .map_err(Into::into)\n        .and_then(|mut res| res.json().and_then(|j| Ok(j)))\n}\n\n#[derive(Debug, Deserialize)]\nstruct Json {\n    userId: u16,\n    id: u16,\n    title: String,\n    completed: bool,\n}\n</code></pre>\n"}, {"tags": ["rust", "static-linking", "armv7", "musl"], "answers": [{"tags": [], "owner": {"reputation": 301, "user_id": 4608865, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/uAcdI.jpg?s=128&g=1", "display_name": "Thomas", "link": "https://stackoverflow.com/users/4608865/thomas"}, "is_accepted": false, "score": 1, "last_activity_date": 1557713488, "last_edit_date": 1557713488, "creation_date": 1557635596, "answer_id": 56096252, "question_id": 56096112, "link": "https://stackoverflow.com/questions/56096112/how-do-i-create-rust-programs-statically-linked-for-musl-on-armv7-using-raspian/56096252#56096252", "title": "How do I create Rust programs statically linked for musl on ARMv7 using Raspian/Debian?", "body": "<p>On the native platform, installing musl-dev and musl-tools packages and calling Cargo as follows led to a sucessful build: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>CC=/usr/bin/musl-gcc cargo build --target=armv7-unknown-linux-musleabihf\n</code></pre>\n"}], "owner": {"reputation": 301, "user_id": 4608865, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/uAcdI.jpg?s=128&g=1", "display_name": "Thomas", "link": "https://stackoverflow.com/users/4608865/thomas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 546, "favorite_count": 1, "answer_count": 1, "score": 1, "last_activity_date": 1557713488, "creation_date": 1557633548, "last_edit_date": 1557713474, "question_id": 56096112, "link": "https://stackoverflow.com/questions/56096112/how-do-i-create-rust-programs-statically-linked-for-musl-on-armv7-using-raspian", "title": "How do I create Rust programs statically linked for musl on ARMv7 using Raspian/Debian?", "body": "<p>I am trying to create a statically linked version of a Rust program on ARMv7 (Raspian/Debian) by using the armv7-unknown-linux-musleabihf target in Cargo. \nThe build fails for the dependency backtrace-sys v0.1.28 with </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to run custom build command for `backtrace-sys v0.1.28`\nprocess didn't exit successfully: `/home/pi/develop/balena.io/migrate/target/debug/build/backtrace-sys-7330a27c773191d1/build-script-build` (exit code: 101)\n--- stdout\ncargo:rustc-cfg=rbt\nTARGET = Some(\"armv7-unknown-linux-musleabihf\")\nOPT_LEVEL = Some(\"0\")\nHOST = Some(\"armv7-unknown-linux-gnueabihf\")\nCC_armv7-unknown-linux-musleabihf = None\nCC_armv7_unknown_linux_musleabihf = None\nTARGET_CC = None\nCC = None\nCROSS_COMPILE = None\nCFLAGS_armv7-unknown-linux-musleabihf = None\nCFLAGS_armv7_unknown_linux_musleabihf = None\nTARGET_CFLAGS = None\nCFLAGS = None\nCRATE_CC_NO_DEFAULTS = None\nCARGO_CFG_TARGET_FEATURE = Some(\"crt-static\")\nrunning: \"arm-linux-musleabihf-gcc\" \"-O0\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"-static\" \"-march=armv7-a\" \"-I\" \"src/libbacktrace\" \"-I\" \"/home/pi/develop/balena.io/migrate/target/armv7-unknown-linux-musleabihf/debug/build/backtrace-sys-87487ee93f4ac0ac/out\" \"-fvisibility=hidden\" \"-DBACKTRACE_ELF_SIZE=32\" \"-DBACKTRACE_SUPPORTED=1\" \"-DBACKTRACE_USES_MALLOC=1\" \"-DBACKTRACE_SUPPORTS_THREADS=0\" \"-DBACKTRACE_SUPPORTS_DATA=0\" \"-DHAVE_DL_ITERATE_PHDR=1\" \"-D_GNU_SOURCE=1\" \"-D_LARGE_FILES=1\" \"-Dbacktrace_full=__rbt_backtrace_full\" \"-Dbacktrace_dwarf_add=__rbt_backtrace_dwarf_add\" \"-Dbacktrace_initialize=__rbt_backtrace_initialize\" \"-Dbacktrace_pcinfo=__rbt_backtrace_pcinfo\" \"-Dbacktrace_syminfo=__rbt_backtrace_syminfo\" \"-Dbacktrace_get_view=__rbt_backtrace_get_view\" \"-Dbacktrace_release_view=__rbt_backtrace_release_view\" \"-Dbacktrace_alloc=__rbt_backtrace_alloc\" \"-Dbacktrace_free=__rbt_backtrace_free\" \"-Dbacktrace_vector_finish=__rbt_backtrace_vector_finish\" \"-Dbacktrace_vector_grow=__rbt_backtrace_vector_grow\" \"-Dbacktrace_vector_release=__rbt_backtrace_vector_release\" \"-Dbacktrace_close=__rbt_backtrace_close\" \"-Dbacktrace_open=__rbt_backtrace_open\" \"-Dbacktrace_print=__rbt_backtrace_print\" \"-Dbacktrace_simple=__rbt_backtrace_simple\" \"-Dbacktrace_qsort=__rbt_backtrace_qsort\" \"-Dbacktrace_create_state=__rbt_backtrace_create_state\" \"-Dbacktrace_uncompress_zdebug=__rbt_backtrace_uncompress_zdebug\" \"-o\" \"/home/pi/develop/balena.io/migrate/target/armv7-unknown-linux-musleabihf/debug/build/backtrace-sys-87487ee93f4ac0ac/out/src/libbacktrace/alloc.o\" \"-c\" \"src/libbacktrace/alloc.c\"\n\n--- stderr\nthread 'main' panicked at '\n</code></pre>\n\n<p>I have tried this cross compiling from Ubuntu Linux x86_64 but also natively compiling on Raspian with the same result. </p>\n\n<p>It looks like the setup is missing a compiler but I have no idea how to install and supply it.</p>\n"}, {"tags": ["rust", "closures", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557626933, "post_id": 56095637, "comment_id": 98827177, "body": "See also <a href=\"https://stackoverflow.com/a/32194553/155423\">Expected bound lifetime parameter, found concrete lifetime</a>; <a href=\"https://stackoverflow.com/q/39395813/155423\">Function references: expected bound lifetime parameter , found concrete lifetime &#91;E0271&#93;</a>; <a href=\"https://stackoverflow.com/q/31362206/155423\">Expected bound lifetime parameter, found concrete lifetime &#91;E0271&#93;</a>; <a href=\"https://stackoverflow.com/q/33807396/155423\">Type mismatch \u201cbound lifetime parameter\u201d vs \u201cconcrete lifetime\u201d when filling a collection from a closure</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557627111, "post_id": 56095637, "comment_id": 98827202, "body": "It would be good if you took the time to show what research you have done <i>before</i> asking the question. One possible way that could have occurred is by reading the numerous questions that have been asked about the exact same error message, linking to them, and explaining why they are different."}, {"owner": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557682938, "post_id": 56095637, "comment_id": 98838285, "body": "@Shepmaster Out of respect for your contributions here, I&#39;ve added the requested information, though I don&#39;t think it was necessary. I wonder what prompted you to make such a comment, though, as it felt unnecesarily harsh. Did this look like a question asked without doing any research? Did you mean that there was another question that answers or at least hints at an answer? (And why remove the formatting, did it make the question harder to read?)"}, {"owner": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "edited": false, "score": 1, "creation_date": 1557719796, "post_id": 56095637, "comment_id": 98845061, "body": "<code>run_method(|foo| foo.run());</code> - that&#39;s it"}, {"owner": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "reply_to_user": {"reputation": 1291, "user_id": 6331045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/189f94db303d16b891800f11846bd753?s=128&d=identicon&r=PG&f=1", "display_name": "Laney", "link": "https://stackoverflow.com/users/6331045/laney"}, "edited": false, "score": 0, "creation_date": 1557752788, "post_id": 56095637, "comment_id": 98859464, "body": "@Laney that works, thanks! Still unsure if there&#39;s anything wrong with passing the method directly (<a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\" rel=\"nofollow noreferrer\">as clippy insists I do</a>)."}], "answers": [{"comments": [{"owner": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "edited": false, "score": 0, "creation_date": 1557869732, "post_id": 56134716, "comment_id": 98908609, "body": "Thanks for the <code>Vec&lt;&amp;&#39;static i32&gt;</code> pointer! That part makes sense now. I still don&#39;t get the &quot;the type of run is constrained by the type of Foo&quot; bit - specifically what&#39;s the practical difference between a proper method that&#39;s constrained by the lifetime parameter from <code>impl&lt;&#39;a&gt;</code> and the not-a-method <code>fn run&lt;&#39;s&gt;(_self: &amp;Foo&lt;&#39;s&gt;)</code>, but that gives me something to think about. Would it be wrong to say that the language rules could be changed to allow <code>run_method(Foo::run)</code> to compile without causing issues at runtime, and the &quot;run is constrained by the type of Foo&quot; is a design decision?"}, {"owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "reply_to_user": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "edited": false, "score": 0, "creation_date": 1557916565, "post_id": 56134716, "comment_id": 98924056, "body": "The difference is that Foo is a type with some lifetime. <code>Foo</code> is only a shorthand for <code>Foo&lt;&#39;a&gt;</code> where the compiler can infer <code>&#39;a</code> - and the type signature of <code>run</code> is dependent on that <code>&#39;a</code>, because it uses the <code>Self</code> type in the <code>impl</code>. I don&#39;t know if the language could be changed without breaking something - nothing immediately comes to mind, but because the <code>impl</code> has a fixed lifetime, it could always do something unexpected."}], "tags": [], "owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "is_accepted": false, "score": 1, "last_activity_date": 1557850852, "creation_date": 1557850852, "answer_id": 56134716, "question_id": 56095637, "link": "https://stackoverflow.com/questions/56095637/pass-a-structamethod-as-a-fora-fnfooa-for-use-in-a-closure/56134716#56134716", "title": "Pass a Struct&lt;&#39;a&gt;::method as a `for&lt;&#39;a&gt; Fn(&amp;Foo&lt;&#39;a&gt;)` for use in a closure", "body": "<blockquote>\n  <p>I can work around the problem by avoiding closures (though I don't really understand how 'a gets constrained to be local to run_method - isn't the lifetime parameter supposed to be chosen by the caller?)</p>\n</blockquote>\n\n<p>It is. But when you rewrite it without closures, you have also put the reference inside the <code>vec!</code> invocation, so it is no longer constructed at runtime. Instead, the compiler can infer that <code>to_test</code> has type <code>Vec&lt;&amp;'static i32&gt;</code>, and as <code>'static</code> outlives any caller-chosen lifetime, there's no violation.</p>\n\n<p>This fails to compile as you expect:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let to_test = vec![0i32];\nfor param in to_test.iter() {\n    let foo = Foo(param);\n    f(&amp;foo);\n}\n</code></pre>\n\n<blockquote>\n  <p>is there a reason why this shouldn't work?</p>\n</blockquote>\n\n<p>Yes, because the type of <code>run</code> is constrained by the type of <code>Foo</code>. More specifically, you have a lifetime decided by the caller (implicitly, in the type for <code>Foo</code>), so you have to construct a <code>Foo</code> of <em>that</em> lifetime to invoke the given <code>run</code> reference on it.</p>\n\n<blockquote>\n  <p>Can I fix this without rewriting? </p>\n</blockquote>\n\n<p>That depends.</p>\n\n<p>If all your test values are literals, you can make <code>'static</code> references.</p>\n\n<p>If you're able and willing to rewrite <code>run</code>, it's possible to make it unconstrained by the type of <code>Foo</code></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn run&lt;'s&gt;(_self: &amp;Foo&lt;'s&gt;) {\n        println!(\"Hello {}\", _self.0);\n    }\n}\n</code></pre>\n\n<p>But then it doesn't need to go in an <code>impl</code> block at all.</p>\n\n<p>I think the solution provided in the comments is your best bet, because given that you don't care about your concrete <code>Foo&lt;'a&gt;</code> type, there's no need to give the method reference for that type.</p>\n"}], "owner": {"reputation": 28156, "user_id": 1026, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ea331e778d54effc15b5fbc694bc8232?s=128&d=identicon&r=PG", "display_name": "Nickolay", "link": "https://stackoverflow.com/users/1026/nickolay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 186, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1557850852, "creation_date": 1557626173, "last_edit_date": 1557689365, "question_id": 56095637, "link": "https://stackoverflow.com/questions/56095637/pass-a-structamethod-as-a-fora-fnfooa-for-use-in-a-closure", "title": "Pass a Struct&lt;&#39;a&gt;::method as a `for&lt;&#39;a&gt; Fn(&amp;Foo&lt;&#39;a&gt;)` for use in a closure", "body": "<p>In my tests I had a helper function that runs a given method on differently configured objects, with a simplified version looking like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn run_method&lt;F&gt;(f: F)\nwhere\n    F: Fn(&amp;Foo),\n{\n    let to_test = vec![0i32];\n    to_test\n        .iter()\n        .map(|param| {\n            let foo = Foo(*param);\n            f(&amp;foo);\n        })\n        .for_each(drop);\n}\n\n// run_method(Foo::run);\n</code></pre>\n\n<p>This worked fine until I added references to the tested struct, making it \"lifetime-annotated\" (for lack of a proper term, I mean <code>Foo&lt;'a&gt;</code>).</p>\n\n<p>Now I get an error indicating, I think, that Rust doesn't want to accept a <code>Foo::method</code> as a function that can be used with any given lifetime (i.e. <code>F: for&lt;'a&gt; Fn(&amp;Foo&lt;'a&gt;)</code>), as required by the closure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0631]: type mismatch in function arguments\n--&gt; src/main.rs:54:5\n   |\n3  |     fn run(&amp;self) {\n   |     ------------- found signature of `for&lt;'r&gt; fn(&amp;'r Foo&lt;'_&gt;) -&gt; _`\n...\n54 |     run_method(Foo::run);\n   |     ^^^^^^^^^^ expected signature of `for&lt;'r, 's&gt; fn(&amp;'r Foo&lt;'s&gt;) -&gt; _`\n   |\nnote: required by `run_method`\n--&gt; src/main.rs:44:1\n   |\n44 | fn run_method&lt;F&gt;(f: F) where F: Fn(&amp;Foo) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0271]: type mismatch resolving `for&lt;'r, 's&gt; &lt;for&lt;'t0&gt; fn(&amp;'t0 Foo&lt;'_&gt;) {Foo::&lt;'_&gt;::run} as std::ops::FnOnce&lt;(&amp;'r Foo&lt;'s&gt;,)&gt;&gt;::Output == ()`\n--&gt; src/main.rs:54:5\n   |\n54 |     run_method(Foo::run);\n   |     ^^^^^^^^^^ expected bound lifetime parameter, found concrete lifetime\n|\nnote: required by `run_method`\n--&gt; src/main.rs:44:1\n   |\n44 | fn run_method&lt;F&gt;(f: F) where F: Fn(&amp;Foo) {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I can work around the problem by avoiding closures (though I don't really understand how <code>'a</code> gets constrained to be local to <code>run_method</code> - isn't the lifetime parameter supposed to be chosen by the caller?):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn run_method&lt;'a, F&gt;(f: F)\nwhere\n    F: Fn(&amp;Foo&lt;'a&gt;),\n{\n    let to_test = vec![&amp;0i32];\n    for param in to_test {\n        let foo = Foo(param);\n        f(&amp;foo);\n    }\n}\n</code></pre>\n\n<p>Can I fix this without rewriting? If not - is there a reason why this shouldn't work?</p>\n\n<p>Complete code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Foo&lt;'a&gt;(&amp;'a i32);\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn run(&amp;self) {\n        println!(\"Hello {}\", self.0);\n    }\n}\n\nfn run_method&lt;F&gt;(f: F)\nwhere\n    F: Fn(&amp;Foo),\n{\n    //same as  F: for&lt;'a&gt; Fn(&amp;Foo&lt;'a&gt;) {\n    let to_test = vec![0i32];\n    to_test\n        .iter()\n        .map(|param| {\n            let foo = Foo(param);\n            f(&amp;foo);\n        })\n        .for_each(drop);\n}\n\nfn main() {\n    run_method(Foo::run);\n}\n\n// This works:\n// fn run_method&lt;'a, F&gt;(f: F)\n// where\n//     F: Fn(&amp;Foo&lt;'a&gt;),\n// {\n//     let to_test = vec![&amp;0i32];\n//     for param in to_test {\n//         let foo = Foo(param);\n//         f(&amp;foo);\n//     }\n// }\n\n// The lifetime-less version:\n// struct Foo(i32);\n// impl Foo {\n//     fn run(&amp;self) {\n//         println!(\"Hello {}\", self.0);\n//     }\n// }\n// \n// fn run_parser_method&lt;F&gt;(f: F)\n// where\n//     F: Fn(&amp;Foo),\n// {\n//     let to_test = vec![0i32];\n//     to_test\n//         .iter()\n//         .map(|param| {\n//             let foo = Foo(*param);\n//             f(&amp;foo);\n//         })\n//         .for_each(drop);\n// }\n// \n// fn main() {\n//     run_parser_method(Foo::run);\n// }\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d8900a0f1aa7d39a5cad9f7b3fb9ae2d\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>An overview of other questions about the same error code:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/32194367/expected-bound-lifetime-parameter-found-concrete-lifetime/32194553#32194553\">Expected bound lifetime parameter, found concrete lifetime</a> is about mismatch between trait definition and implementation (<code>trait { fn handle&lt;'a&gt;(); }</code> vs <code>impl&lt;'a&gt; { fn handle() {} })</code></li>\n<li><a href=\"https://stackoverflow.com/questions/39395813/function-references-expected-bound-lifetime-parameter-found-concrete-lifetime\">Function references: expected bound lifetime parameter , found concrete lifetime [E0271]</a> as well as <a href=\"https://stackoverflow.com/questions/31362206/expected-bound-lifetime-parameter-found-concrete-lifetime-e0271\">Expected bound lifetime parameter, found concrete lifetime [E0271]</a> is about a closure <code>|args| {...}</code> without explicit type annotations (<code>|args: &amp;[&amp;str]|</code>) not being accepted as a <code>Fn(&amp;[&amp;str]) -&gt; ()</code>; the answers don't explain why (the latter hints that it was not implemented in 2015)</li>\n<li><a href=\"https://stackoverflow.com/questions/33807396/type-mismatch-bound-lifetime-parameter-vs-concrete-lifetime-when-filling-a-c\">Type mismatch &quot;bound lifetime parameter&quot; vs &quot;concrete lifetime&quot; when filling a collection from a closure</a> is again about a closure without explicit type annotations specifying that it accepts a reference (<code>let mut insert = |k| seq.insert(k); (1..10).cycle().take_while(insert)</code>), which masks a more useful \"borrowed data cannot be stored outside of its closure\" error.</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557621209, "post_id": 56095260, "comment_id": 98826503, "body": "Welcome to Stack Overflow! Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> and then <a href=\"https://stackoverflow.com/posts/56095260/edit\">edit</a> your question to include it. We cannot tell what crates (and their versions), types, traits, fields, etc. are present in the code. Try to reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> if possible, otherwise in a brand new Cargo project. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1557621279, "post_id": 56095260, "comment_id": 98826512, "body": "Idiomatically, you should not use sentinel values like <code>INVALID_INDEX</code> in Rust. It&#39;s much better to make use of a type like <code>Option</code>. Using explicit <code>return</code> keywords at the end of the method is also non-idiomatic."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 2, "creation_date": 1557621684, "post_id": 56095260, "comment_id": 98826550, "body": "you didn&#39;t provide enough information to answer you, for exemple, what does <code>add()</code> ? What does <code>new()</code> ? etc etc what is <code>List</code> ?"}], "answers": [{"comments": [{"owner": {"reputation": 7, "user_id": 11487013, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/989d9b90d5de29a8dada311bf7f1a8b6?s=128&d=identicon&r=PG&f=1", "display_name": "sino", "link": "https://stackoverflow.com/users/11487013/sino"}, "edited": false, "score": 0, "creation_date": 1557646980, "post_id": 56095372, "comment_id": 98829673, "body": "Hi @Shepmaster, thanks for advice. I made some changes (according to your suggestion) but Im still got the same result.  Can you please check what Im do wrong, the whole project is here: [link text] (<a href=\"https://github.com/sinocpp/Rust_Learning_Repository/tree/master/Base%20Rust/02%20Data%20structures%20and%20alghoritams/lists/src\" rel=\"nofollow noreferrer\">github.com/sinocpp/Rust_Learning_Repository/tree/master/&hellip;</a>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7, "user_id": 11487013, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/989d9b90d5de29a8dada311bf7f1a8b6?s=128&d=identicon&r=PG&f=1", "display_name": "sino", "link": "https://stackoverflow.com/users/11487013/sino"}, "edited": false, "score": 0, "creation_date": 1557690824, "post_id": 56095372, "comment_id": 98840313, "body": "@sino what changes did you make? Did you <b>sort</b> the data? I see no sorting in your code. Please <b><a href=\"https://stackoverflow.com/posts/56095372/edit\">edit</a></b> your question to include a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Reproduce your error on the <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a>. There are <a href=\"//stackoverflow.com/tags/rust/info\">Rust-specific MCVE tips</a> you can use to reduce your original code for posting here."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1557622010, "creation_date": 1557622010, "answer_id": 56095372, "question_id": 56095260, "link": "https://stackoverflow.com/questions/56095260/binary-search-by-returns-a-strange-index-when-using-a-custom-struct/56095372#56095372", "title": "binary_search_by returns a strange index when using a custom struct", "body": "<p>Here is a <a href=\"/help/mcve\">MCVE</a> of your problem:</p>\n\n<pre><code>fn main() {\n    let data = vec![\"John\", \"Bill\"];\n\n    let v = data.binary_search_by(|probe| probe.cmp(&amp;\"John\")).ok();\n\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>The first sentence of the <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.binary_search_by\" rel=\"nofollow noreferrer\">documentation for <code>binary_search_by</code></a> states (emphasis mine):</p>\n\n<blockquote>\n  <p>Binary searches this <strong>sorted</strong> slice with a comparator function.</p>\n</blockquote>\n\n<p>Your data is (most likely, because you have neglected to show the relevant code) not sorted.</p>\n"}], "owner": {"reputation": 7, "user_id": 11487013, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/989d9b90d5de29a8dada311bf7f1a8b6?s=128&d=identicon&r=PG&f=1", "display_name": "sino", "link": "https://stackoverflow.com/users/11487013/sino"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1557622010, "creation_date": 1557620486, "last_edit_date": 1557621192, "question_id": 56095260, "link": "https://stackoverflow.com/questions/56095260/binary-search-by-returns-a-strange-index-when-using-a-custom-struct", "title": "binary_search_by returns a strange index when using a custom struct", "body": "<p>My function <code>get_index</code> should return the index of asserted element</p>\n\n<pre><code>pub const INVALID_INDEX: usize = &lt;usize&gt;::max_value();\n</code></pre>\n\n<pre><code>pub fn get_index(&amp;mut self, element: T) -&gt; usize\nwhere\n    T: std::cmp::Ord,\n{\n    if self.data.is_empty() {\n        return 0;\n    }\n\n    match self.data.binary_search_by(|probe| probe.cmp(&amp;element)) {\n        Ok(pos) =&gt; return pos,\n        Err(pos) =&gt; return INVALID_INDEX,\n    }\n}\n</code></pre>\n\n<p>To provide a test, I create a value and some mock data:</p>\n\n<pre><code>let mut list: List&lt;FooModel&gt; = List::new();\n\nlet my_foo_1 = FooModel {name: \"John\".to_string(), id_num: 10};\nlet my_foo_2 = FooModel {name: \"Bill\".to_string(), id_num: 20};\n\nlist.add(my_foo_1.clone());\nlist.add(my_foo_2.clone());\nlist.add(my_foo_3.clone());   \nlist.add(my_foo_4.clone()); \nlist.add(my_foo_5.clone());  \n</code></pre>\n\n<p>the problem occurs when I try to get a index for the first element</p>\n\n<pre><code>println!(\"Element is at index {:?}\",list.get_index(my_foo_1.clone()));\n</code></pre>\n\n<p>I get the <code>INVALID_INDEX</code> value returned for <code>my_foo_1</code>; all other expressions return the correct index value.</p>\n\n<p>If I create a list with some generic types:</p>\n\n<pre><code>let mut list_2: List&lt;u32&gt; = List::new();\nlist_2.add(1);\nlist_2.add(2);\nlist_2.add(3);\nlist_2.add(4);\n</code></pre>\n\n<p>I get the correct result for the call:</p>\n\n<pre><code>println!(\"Element is at index {:?}\", list_2.get_index(1));\n</code></pre>\n"}, {"tags": ["rust", "iterator"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557620874, "post_id": 56095102, "comment_id": 98826467, "body": "Most integer types (e.g. <code>u8</code>, <code>i32</code>) cannot represent the concept of &quot;infinity&quot;. Iterators like <code>(0u8..)</code> will panic (debug mode) or wrap (release mode). What are you actually attempting to solve?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1557621883, "post_id": 56095102, "comment_id": 98826581, "body": "You could use <a href=\"https://rust-num.github.io/num/num/trait.Bounded.html\" rel=\"nofollow noreferrer\">rust-num.github.io/num/num/trait.Bounded.html</a>, T::max_value. But I also don&#39;t see the point."}, {"owner": {"reputation": 743, "user_id": 7058336, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8ab015fdc364a6f1fc3c17e888495568?s=128&d=identicon&r=PG&f=1", "display_name": "jam", "link": "https://stackoverflow.com/users/7058336/jam"}, "edited": false, "score": 0, "creation_date": 1557622709, "post_id": 56095102, "comment_id": 98826696, "body": "Say I wanted to have some functional code on T and use <code>take_while_ref</code> from <code>itertools</code> to specify a custom terminating condition that may be complicated, and for which I could not/would be lazy to estimate an upper bound, and say T is not bounded like BigInt. Could I do it?"}, {"owner": {"reputation": 743, "user_id": 7058336, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8ab015fdc364a6f1fc3c17e888495568?s=128&d=identicon&r=PG&f=1", "display_name": "jam", "link": "https://stackoverflow.com/users/7058336/jam"}, "edited": false, "score": 0, "creation_date": 1557623456, "post_id": 56095102, "comment_id": 98826791, "body": "I do not have a particular goal with this except trying to write beautiful code. I am imagining possible situations. If take_while_ref already specifies a stopping criterion it feels ugly to add an upper bound just because i don&#39;t know how not to specify it."}, {"owner": {"reputation": 26475, "user_id": 75224, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b6440683c246597812d8a37339538d68?s=128&d=identicon&r=PG", "display_name": "stej", "link": "https://stackoverflow.com/users/75224/stej"}, "edited": false, "score": 0, "creation_date": 1580300318, "post_id": 56095102, "comment_id": 106050672, "body": "Have you solved this somehow?"}], "answers": [{"comments": [{"owner": {"reputation": 743, "user_id": 7058336, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8ab015fdc364a6f1fc3c17e888495568?s=128&d=identicon&r=PG&f=1", "display_name": "jam", "link": "https://stackoverflow.com/users/7058336/jam"}, "edited": false, "score": 0, "creation_date": 1557636519, "post_id": 56095994, "comment_id": 98828245, "body": "I want to constrain myself to go with functional programming style, and use <code>map</code>, <code>fold</code>, <code>filter</code> kind of things, I think you are talking about imperative style loops. Am i wrong? If we are always supposed to do imperative and use loop, then my question becomes why does <code>take_while_ref</code> exist?"}], "tags": [], "owner": {"reputation": 615, "user_id": 2516576, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/y6Uco.jpg?s=128&g=1", "display_name": "Jesse Lawson", "link": "https://stackoverflow.com/users/2516576/jesse-lawson"}, "is_accepted": false, "score": -1, "last_activity_date": 1557631772, "creation_date": 1557631772, "answer_id": 56095994, "question_id": 56095102, "link": "https://stackoverflow.com/questions/56095102/how-to-define-an-infinite-range-of-a-generic-integer-type-in-rust/56095994#56095994", "title": "How to define an infinite range of a generic integer type in Rust?", "body": "<p>This sounds like a use case for <code>loop</code>, not a range.</p>\n"}, {"comments": [{"owner": {"reputation": 743, "user_id": 7058336, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8ab015fdc364a6f1fc3c17e888495568?s=128&d=identicon&r=PG&f=1", "display_name": "jam", "link": "https://stackoverflow.com/users/7058336/jam"}, "edited": false, "score": 0, "creation_date": 1557678237, "post_id": 56099075, "comment_id": 98837012, "body": "Yes thats my conclusion also. For some reason num::BigInt does not seem to have any Range implemented and num::iter lacks RangeFrom"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1557681204, "post_id": 56099075, "comment_id": 98837839, "body": "<code>RangeFrom</code> is not a trait. The underlying trait behind all ranges is <a href=\"https://doc.rust-lang.org/std/iter/trait.Step.html\" rel=\"nofollow noreferrer\"><code>Step</code></a>, which is not stable yet."}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": true, "score": -2, "last_activity_date": 1557690224, "last_edit_date": 1557690224, "creation_date": 1557662801, "answer_id": 56099075, "question_id": 56095102, "link": "https://stackoverflow.com/questions/56095102/how-to-define-an-infinite-range-of-a-generic-integer-type-in-rust/56099075#56099075", "title": "How to define an infinite range of a generic integer type in Rust?", "body": "<p><strong>Edit:</strong> Unfortunately, <code>std::ops::RangeFrom</code> is a struct, not a trait like for example the traits for infix operators in <code>std::ops</code>. So this is wrong, but since it has been accepted I can't delete it.</p>\n\n<p><strong>Original post</strong>: You can implement <a href=\"https://doc.rust-lang.org/std/ops/struct.RangeFrom.html\" rel=\"nofollow noreferrer\">std::ops::RangeFrom</a> for your type.  This is the trait underlying the range syntax with only a lower bound, like e.g. <code>1..</code>.</p>\n"}], "owner": {"reputation": 743, "user_id": 7058336, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/8ab015fdc364a6f1fc3c17e888495568?s=128&d=identicon&r=PG&f=1", "display_name": "jam", "link": "https://stackoverflow.com/users/7058336/jam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1139, "favorite_count": 0, "accepted_answer_id": 56099075, "answer_count": 2, "score": 1, "last_activity_date": 1557690224, "creation_date": 1557618234, "last_edit_date": 1557621008, "question_id": 56095102, "link": "https://stackoverflow.com/questions/56095102/how-to-define-an-infinite-range-of-a-generic-integer-type-in-rust", "title": "How to define an infinite range of a generic integer type in Rust?", "body": "<p>I have a generic type <code>T</code> that implements the <code>num::Integer</code> trait. I can write a <code>T</code>-based range iterator where <code>e</code> represents another value of type <code>T</code> denoting the upper bound of the range:</p>\n\n<pre><code>num::iter::range(T::one(), e)\n</code></pre>\n\n<p>The annoying thing is that it is necessarily bounded. How can I have an unbounded range? For primitive types, I can do something like <code>(1..)</code>. Can I do something like <code>num::iter::range(T::one(), T::infinity())</code>?</p>\n\n<p>I can't find a function that does this in <code>num::iter</code>. I would like to be able to call functional style functions afterwards like <code>map</code>, <code>filter</code> etc...</p>\n"}, {"tags": ["rust", "cons"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1557565248, "post_id": 56087004, "comment_id": 98814525, "body": "I don&#39;t think you can avoid the &quot;useless&quot; operation in safe code. You need <i>something</i> to pass to <code>Box::new()</code>, and the tail can&#39;t be moved out of the borrowed context. That said, I don&#39;t think that operation has any measurable performance impact, since the runtime of <code>prepend()</code> is dominated by the memory allocation. The compiler may even be able to optiimise the redundant step away."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557575380, "post_id": 56087004, "comment_id": 98816640, "body": "From the linked duplicate: <i>simultaneously replace it with <code>Nil</code>, so that the <code>self</code> reference is never invalid</i>. This is why it&#39;s needed in safe Rust."}], "owner": {"reputation": 35470, "user_id": 6348498, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/0zu4m.jpg?s=128&g=1", "display_name": "Gurwinder Singh", "link": "https://stackoverflow.com/users/6348498/gurwinder-singh"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 46, "favorite_count": 0, "closed_date": 1557575332, "answer_count": 0, "score": 0, "last_activity_date": 1557575283, "creation_date": 1557546404, "last_edit_date": 1557575283, "question_id": 56087004, "link": "https://stackoverflow.com/questions/56087004/how-to-implement-a-cons-list-prepend-without-a-useless-assignment", "closed_reason": "Duplicate", "title": "How to implement a Cons list prepend without a useless assignment?", "body": "<p>I am going through <a href=\"https://doc.rust-lang.org/rust-by-example/custom_types/enum/testcase_linked_list.html\" rel=\"nofollow noreferrer\">Testcase: linked-list</a> in <em>Rust by Example</em>. RBE has implemented <code>prepend</code> method by passing <code>self</code> by value:</p>\n\n<pre><code>fn prepend(self, elem: u32) -&gt; List {\n    // `Cons` also has type List\n    Cons(elem, Box::new(self))\n}\n</code></pre>\n\n<p>and calls it as:</p>\n\n<pre><code>list = list.prepend(1);\nlist = list.prepend(2);\nlist = list.prepend(3);\n</code></pre>\n\n<p>I want to use <code>&amp;mut self</code> and not assign <code>list</code> over and over, like so:</p>\n\n<pre><code>list.prepend(\"asd\");\nlist.prepend(\"def\");\nlist.prepend(\"jkl\");\n</code></pre>\n\n<p>I tried:</p>\n\n<pre><code>enum LinkedList&lt;T&gt; {\n    Cons(T, Box&lt;LinkedList&lt;T&gt;&gt;),\n    Nil\n}\n\nimpl&lt;T&gt; LinkedList&lt;T&gt; where T: Copy {\n    fn prepend(&amp;mut self, value: T) {\n        let tail = mem::replace(self, Nil);\n        *self = Cons(value, Box::new(tail));\n    }\n}\n</code></pre>\n\n<p>This works, but I am doing a useless assignment of <code>Nil</code> to <code>self</code>. Is there a better way to do this, perhaps using <code>mem::replace</code> or something else? </p>\n"}, {"tags": ["error-handling", "rust"], "answers": [{"comments": [{"owner": {"reputation": 75, "user_id": 9335669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/170e0d9b1f20f3cba4b4be2960147dfc?s=128&d=identicon&r=PG&f=1", "display_name": "unknown rustacean", "link": "https://stackoverflow.com/users/9335669/unknown-rustacean"}, "edited": false, "score": 0, "creation_date": 1557600644, "post_id": 56085889, "comment_id": 98822709, "body": "Thank you,  my depency versions were different."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1557530275, "creation_date": 1557530275, "answer_id": 56085889, "question_id": 56082445, "link": "https://stackoverflow.com/questions/56082445/how-to-retrieve-the-underlying-error-from-a-failure-error/56085889#56085889", "title": "How to retrieve the underlying error from a Failure Error?", "body": "<p>You can downcast from a Failure <a href=\"https://docs.rs/failure/0.1.5/failure/struct.Error.html\" rel=\"nofollow noreferrer\"><code>Error</code></a> into another type that implements <a href=\"https://docs.rs/failure/0.1.5/failure/trait.Fail.html\" rel=\"nofollow noreferrer\"><code>Fail</code></a> by using one of three functions:</p>\n\n<ul>\n<li><a href=\"https://docs.rs/failure/0.1.5/failure/struct.Error.html#method.downcast\" rel=\"nofollow noreferrer\"><code>downcast</code></a></li>\n<li><a href=\"https://docs.rs/failure/0.1.5/failure/struct.Error.html#method.downcast_ref\" rel=\"nofollow noreferrer\"><code>downcast_ref</code></a></li>\n<li><a href=\"https://docs.rs/failure/0.1.5/failure/struct.Error.html#method.downcast_mut\" rel=\"nofollow noreferrer\"><code>downcast_mut</code></a></li>\n</ul>\n\n<pre><code>use failure; // 0.1.5\nuse std::{fs, io};\n\nfn generate() -&gt; Result&lt;(), failure::Error&gt; {\n    fs::read_to_string(\"/this/does/not/exist\")?;\n    Ok(())\n}\n\nfn main() {\n    match generate() {\n        Ok(_) =&gt; panic!(\"Should have an error\"),\n        Err(e) =&gt; match e.downcast_ref::&lt;io::Error&gt;() {\n            Some(e) =&gt; println!(\"Got an io::Error: {}\", e),\n            None =&gt; panic!(\"Could not downcast\"),\n        },\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>For your specific case, I'm guessing that you are either running into mismatched dependency versions (see <a href=\"https://stackoverflow.com/q/44437123/155423\">Why is a trait not implemented for a type that clearly has it implemented?</a> for examples and techniques on how to track this down) or that you simply are getting the wrong error type. For example, a missing file is actually an <code>std::io::Error</code>:</p>\n\n<pre><code>// epub = \"1.2.0\"\n// zip = \"0.4.2\"\n// failure = \"0.1.5\"\n\nuse std::io;\n\nfn main() {\n    if let Err(error) = epub::doc::EpubDoc::new(\"a.epub\") {\n        match error.downcast_ref::&lt;io::Error&gt;() {\n            Some(i) =&gt; println!(\"IO error: {}\", i),\n            None =&gt; {\n                panic!(\"Other error: {} {:?}\", error, error);\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 75, "user_id": 9335669, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/170e0d9b1f20f3cba4b4be2960147dfc?s=128&d=identicon&r=PG&f=1", "display_name": "unknown rustacean", "link": "https://stackoverflow.com/users/9335669/unknown-rustacean"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 450, "favorite_count": 0, "accepted_answer_id": 56085889, "answer_count": 1, "score": 0, "last_activity_date": 1557530275, "creation_date": 1557510067, "last_edit_date": 1557511717, "question_id": 56082445, "link": "https://stackoverflow.com/questions/56082445/how-to-retrieve-the-underlying-error-from-a-failure-error", "title": "How to retrieve the underlying error from a Failure Error?", "body": "<p>When trying to open a broken epub/ZIP file with epub-rs, the zip-rs crate error (which doesn't use Failure) is wrapped into a <code>failure::Error</code> by epub-rs. I want to handle each error type of zip-rs with an distinct error handler and need a way to match against the underlying error. How can I retrieve it from Failure?</p>\n\n<pre><code>fn main() {\n    match epub::doc::EpubDoc::new(\"a.epub\") {\n        Ok(epub) =&gt; // do something with the epub\n        Err(error) =&gt; {\n            // handle errors\n        }\n    }\n}\n</code></pre>\n\n<p><code>error.downcast::&lt;zip::result::ZipError&gt;()</code> fails and <code>error.downcast_ref()</code> returns None.</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 530, "user_id": 4417483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dd8fda2725d2a507a3949b2caac85a4?s=128&d=identicon&r=PG&f=1", "display_name": "burubum", "link": "https://stackoverflow.com/users/4417483/burubum"}, "edited": false, "score": 0, "creation_date": 1557523601, "post_id": 56083758, "comment_id": 98808265, "body": "It looks like I cannot call <code>tokio::run</code> from a <code>hyper</code> service, it fails with <code>attempted to run an executor while another executor is already running</code>."}, {"owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "reply_to_user": {"reputation": 530, "user_id": 4417483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dd8fda2725d2a507a3949b2caac85a4?s=128&d=identicon&r=PG&f=1", "display_name": "burubum", "link": "https://stackoverflow.com/users/4417483/burubum"}, "edited": false, "score": 1, "creation_date": 1557556736, "post_id": 56083758, "comment_id": 98812881, "body": "Try <code>hyper::rt::spawn</code> instead of <code>tokio::run</code>. <code>hyper</code> initializes its own executor, but <code>tokio::run</code> attempts to initialize a new one which is why you&#39;re seeing the error message. <code>spawn</code> will run a future on an existing executor."}, {"owner": {"reputation": 530, "user_id": 4417483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dd8fda2725d2a507a3949b2caac85a4?s=128&d=identicon&r=PG&f=1", "display_name": "burubum", "link": "https://stackoverflow.com/users/4417483/burubum"}, "edited": false, "score": 0, "creation_date": 1557609130, "post_id": 56083758, "comment_id": 98824598, "body": "<code>hyper::rt::spawn</code> is probably the right way. Also, I&#39;ve realized my mistake, which the code sample I posted completely misses. I will update it to make it clearer"}], "tags": [], "owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "is_accepted": false, "score": 0, "last_activity_date": 1557516409, "creation_date": 1557516409, "answer_id": 56083758, "question_id": 56081938, "link": "https://stackoverflow.com/questions/56081938/how-to-use-rust-shiplift-from-a-hyper-server/56083758#56083758", "title": "How to use Rust shiplift from a hyper server", "body": "<p><code>shiplift</code>'s API is asynchronous, meaning <code>wait()</code> and other functions return a <code>Future</code>, instead of blocking the main thread until a result is ready. A <code>Future</code> won't actually do any I/O until it is passed to an executor. You need to pass the <code>Future</code> to <code>tokio::run</code> as in the example you linked to. You should read the <a href=\"https://tokio.rs/docs/getting-started/hello-world/\" rel=\"nofollow noreferrer\">tokio docs</a> to get a better understanding of how to write asynchronous code in rust. </p>\n"}, {"tags": [], "owner": {"reputation": 530, "user_id": 4417483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dd8fda2725d2a507a3949b2caac85a4?s=128&d=identicon&r=PG&f=1", "display_name": "burubum", "link": "https://stackoverflow.com/users/4417483/burubum"}, "is_accepted": false, "score": 0, "last_activity_date": 1558348296, "last_edit_date": 1558348296, "creation_date": 1557613272, "answer_id": 56094720, "question_id": 56081938, "link": "https://stackoverflow.com/questions/56081938/how-to-use-rust-shiplift-from-a-hyper-server/56094720#56094720", "title": "How to use Rust shiplift from a hyper server", "body": "<p>There were quite a few mistakes in my understanding of how <code>hyper</code> works. Basically:</p>\n\n<ul>\n<li>if a service should handle futures, do not use <code>service_fn_ok</code> to create it (it is meant for synchronous services): use <code>service_fn</code>;</li>\n<li>do not use <code>wait</code>: all futures use the same executor, the execution will just hang forever (there is a warning in the docs but oh well...);</li>\n<li>as ecstaticm0rse notices, <code>hyper::rt::spawn</code> could be used to read stats asynchronously, instead of doing it in the service</li>\n</ul>\n\n<blockquote>\n  <p>Is tokio somehow required by shiplift?</p>\n</blockquote>\n\n<p>Yes. It uses <code>hyper</code>, which throws <code>executor failed to spawn task</code> if the default <code>tokio</code> executor is not available (working with futures nearly always requires an executor anyway).</p>\n\n<p>Here is a minimal version of what I ended up with (tokio 0.1.20 and hyper 0.12):</p>\n\n<pre><code>use std::net::SocketAddr;\nuse std::time::{Duration, Instant};\n\nuse tokio::prelude::*;\nuse tokio::timer::Interval;\n\nuse hyper::{\n    Body, Response, service::service_fn_ok,\n    Server, rt::{spawn, run}\n};\n\nfn init_background_task(swarm_name: String) -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    Interval::new(Instant::now(), Duration::from_secs(1))\n        .map_err(|e| panic!(e))\n        .for_each(move |_instant| {\n            futures::future::ok(())  // unimplemented: call shiplift here\n        })\n}\n\nfn init_server(address: SocketAddr) -&gt; impl Future&lt;Item = (), Error = ()&gt; {\n    let service = move || {\n        service_fn_ok(|_request| Response::new(Body::from(\"unimplemented\")))\n    };\n    Server::bind(&amp;address)\n        .serve(service)\n        .map_err(|e| panic!(\"Server error: {}\", e))\n}\n\n\nfn main() {\n    let background_task = init_background_task(\"swarm_name\".to_string());\n    let server = init_server(([127, 0, 0, 1], 9898).into());\n\n    run(hyper::rt::lazy(move || {\n        spawn(background_task);\n        spawn(server);\n        Ok(())\n    }));\n}\n</code></pre>\n"}], "owner": {"reputation": 530, "user_id": 4417483, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8dd8fda2725d2a507a3949b2caac85a4?s=128&d=identicon&r=PG&f=1", "display_name": "burubum", "link": "https://stackoverflow.com/users/4417483/burubum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 257, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1558348296, "creation_date": 1557507585, "last_edit_date": 1557609614, "question_id": 56081938, "link": "https://stackoverflow.com/questions/56081938/how-to-use-rust-shiplift-from-a-hyper-server", "title": "How to use Rust shiplift from a hyper server", "body": "<p>I'm trying to write a simple Rust program that reads Docker stats using <a href=\"https://github.com/softprops/shiplift\" rel=\"nofollow noreferrer\">shiplift</a> and exposes them as Prometheus metrics using <a href=\"https://github.com/pingcap/rust-prometheus\" rel=\"nofollow noreferrer\">rust-prometheus</a>.</p>\n\n<p>The <code>shiplift</code> stats example runs correctly on its own, and I'm trying to integrate it in the server as</p>\n\n<pre><code>fn handle(_req: Request&lt;Body&gt;) -&gt; Response&lt;Body&gt; {\n    let docker = Docker::new();\n    let containers = docker.containers();\n    let id = \"my-id\";\n    let stats = containers\n        .get(&amp;id)\n        .stats().take(1).wait();\n    for s in stats {\n        println!(\"{:?}\", s);\n    }\n    // ...\n}\n\n// in main\nlet make_service = || {\n    service_fn_ok(handle)\n};\n\nlet server = Server::bind(&amp;addr)\n    .serve(make_service);\n</code></pre>\n\n<p>but it appears that the stream hangs forever (I cannot produce any error message).</p>\n\n<p>I've also tried the same refactor (using <code>take</code> and <code>wait</code> instead of <code>tokio::run</code>) in the <a href=\"https://github.com/softprops/shiplift/blob/master/examples/stats.rs\" rel=\"nofollow noreferrer\">shiplift example</a>, but in that case I get the error <code>executor failed to spawn task: tokio::spawn failed (is a tokio runtime running this future?)</code>. Is <code>tokio</code> somehow required by <code>shiplift</code>?</p>\n\n<p>EDIT:\nIf I've understood correctly, my attempt does not work because <code>wait</code> will block <code>tokio</code> executor and <code>stats</code> will never produce results.</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 12494, "user_id": 1402929, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IORgE.jpg?s=128&g=1", "display_name": "Matt Harrison", "link": "https://stackoverflow.com/users/1402929/matt-harrison"}, "edited": false, "score": 0, "creation_date": 1557506934, "post_id": 56081485, "comment_id": 98801665, "body": "What&#39;s your use case?"}, {"owner": {"reputation": 6467, "user_id": 949890, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/44f0a488d3c7ae9d7da0a8aaa62d6815?s=128&d=identicon&r=PG", "display_name": "SColvin", "link": "https://stackoverflow.com/users/949890/scolvin"}, "reply_to_user": {"reputation": 12494, "user_id": 1402929, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IORgE.jpg?s=128&g=1", "display_name": "Matt Harrison", "link": "https://stackoverflow.com/users/1402929/matt-harrison"}, "edited": false, "score": 0, "creation_date": 1557507507, "post_id": 56081485, "comment_id": 98801922, "body": "giving line errors when parsing yaml, (I&#39;m currently using <code>serde-yaml</code> to parse the content)"}], "answers": [{"tags": [], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "is_accepted": false, "score": 1, "last_activity_date": 1557507071, "creation_date": 1557507071, "answer_id": 56081815, "question_id": 56081485, "link": "https://stackoverflow.com/questions/56081485/is-there-a-function-or-crate-to-display-errors-with-line-and-column-numbers-hel/56081815#56081815", "title": "Is there a function or crate to display errors with line and column numbers, help text, and highlighting?", "body": "<p>I don't know if this is of much help, but the <code>rustc</code> compiler uses the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/index.html\" rel=\"nofollow noreferrer\">rustc_errors</a> crate to generate these messages. I found this by looking at the README in <a href=\"https://github.com/rust-lang/rust/tree/master/src\" rel=\"nofollow noreferrer\">librustc</a> and searching the guide book for \"message\".</p>\n\n<p>The search brought me to <a href=\"https://rust-lang.github.io/rustc-guide/diag.html?highlight=message#error-messages\" rel=\"nofollow noreferrer\">this section</a> in the guide which covers error messages.</p>\n"}], "owner": {"reputation": 6467, "user_id": 949890, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/44f0a488d3c7ae9d7da0a8aaa62d6815?s=128&d=identicon&r=PG", "display_name": "SColvin", "link": "https://stackoverflow.com/users/949890/scolvin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1557509451, "creation_date": 1557505523, "last_edit_date": 1557509451, "question_id": 56081485, "link": "https://stackoverflow.com/questions/56081485/is-there-a-function-or-crate-to-display-errors-with-line-and-column-numbers-hel", "title": "Is there a function or crate to display errors with line and column numbers, help text, and highlighting?", "body": "<p>Rust has very clear error display, showing the line and part of line where an error occurred:</p>\n\n<p><img src=\"https://user-images.githubusercontent.com/4039449/57541644-65d76d00-7347-11e9-8ac7-e8349544a12b.png\" alt=\"image\"></p>\n\n<p>Is there a function from the Rust standard library or crate which replicates this for an arbitrary error? I'm kind of assuming it must exist somewhere within the Rust codebase, but can't find anything (mostly because any search term like \"Rust rich line errors...\" returns errors people have got while writing Rust, not how to generate the error display :-)).</p>\n\n<p>E.g. I have the line number and character number of an error as well as the source, is an existing implementation of the above pretty error which I can reuse?</p>\n"}, {"tags": ["rust", "blockchain", "substrate"], "comments": [{"owner": {"reputation": 119, "user_id": 7801107, "user_type": "registered", "profile_image": "https://graph.facebook.com/624149324432377/picture?type=large", "display_name": "Ryan Falzon", "link": "https://stackoverflow.com/users/7801107/ryan-falzon"}, "edited": false, "score": 0, "creation_date": 1594218863, "post_id": 56081117, "comment_id": 111050807, "body": "Did you manage to achieve this?"}], "answers": [{"comments": [{"owner": {"reputation": 42460, "user_id": 642626, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/fedc5e6b7fef29a8b539e20da8c85971?s=128&d=identicon&r=PG", "display_name": "Bryan Chen", "link": "https://stackoverflow.com/users/642626/bryan-chen"}, "edited": false, "score": 3, "creation_date": 1557563953, "post_id": 56081118, "comment_id": 98814206, "body": "<a href=\"https://github.com/paritytech/substrate/issues/1377\" rel=\"nofollow noreferrer\">Better to avoid <code>As</code> and use <code>From&#47;Into</code></a>."}, {"owner": {"reputation": 999, "user_id": 3798072, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/9JV4G.jpg?s=128&g=1", "display_name": "kianenigma", "link": "https://stackoverflow.com/users/3798072/kianenigma"}, "edited": false, "score": 0, "creation_date": 1583167923, "post_id": 56081118, "comment_id": 107016728, "body": "This will be soon slightly changed with this PR <a href=\"https://github.com/paritytech/substrate/pull/4517\" rel=\"nofollow noreferrer\">github.com/paritytech/substrate/pull/4517</a>"}, {"owner": {"reputation": 119, "user_id": 7801107, "user_type": "registered", "profile_image": "https://graph.facebook.com/624149324432377/picture?type=large", "display_name": "Ryan Falzon", "link": "https://stackoverflow.com/users/7801107/ryan-falzon"}, "edited": false, "score": 0, "creation_date": 1594218886, "post_id": 56081118, "comment_id": 111050816, "body": "Has anyone been able to convert substrate blocknumber to let&#39;s say a u8?"}, {"owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "edited": false, "score": 0, "creation_date": 1594226146, "post_id": 56081118, "comment_id": 111054461, "body": "You can do it with <code>saturated_into()</code>, but as soon as your block number is past 255, the value returned would be stuck at 255, and probably not very useful."}], "tags": [], "owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "is_accepted": true, "score": 11, "last_activity_date": 1583166493, "last_edit_date": 1583166493, "creation_date": 1557503967, "answer_id": 56081118, "question_id": 56081117, "link": "https://stackoverflow.com/questions/56081117/how-do-you-convert-between-substrate-specific-types-and-rust-primitive-types/56081118#56081118", "title": "How do you convert between Substrate specific types and Rust primitive types?", "body": "<h1>For the latest in Substrate master</h1>\n\n<p>Substrate has <a href=\"https://github.com/paritytech/substrate/pull/2602\" rel=\"nofollow noreferrer\">removed <code>As</code></a> in favor of <code>From</code>/<code>Into</code>. <strong>An assumption is made that all types are at least <code>u32</code>.</strong></p>\n\n<p>From the trait <code>SimpleArithmatic</code>, the following are implemented:</p>\n\n<ul>\n<li><code>From</code>: <code>u8</code>, <code>u16</code>, <code>u32</code></li>\n<li><code>TryFrom</code>: <code>u64</code>, <code>u128</code>, <code>usize</code></li>\n<li><code>TryInto</code>: <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code>, <code>usize</code></li>\n</ul>\n\n<p>Another trait is also provided to provide ergonomic\ninfallible conversion when you don't care if the value saturates.</p>\n\n<ul>\n<li><code>UniqueSaturatedInto</code>: <code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>u128</code></li>\n<li><code>UniqueSaturatedFrom</code>: <code>u64</code>, <code>u128</code></li>\n</ul>\n\n<blockquote>\n  <p><strong>NOTE on <code>SaturatedConversion</code> from Gav</strong></p>\n  \n  <p><code>SaturatedConversion</code> (<code>saturated_into</code> and <code>saturated_from</code>) should not be used unless you know what you're doing, you've thought and considered all options and your use-case implies that saturation is fundamentally correct. The only time I imagine this is the case is deep in runtime arithmetic where you are logically certain it will not overflow, but can't provide a proof because it would depend on consistent pre-existing state.</p>\n</blockquote>\n\n<p>This means that working from <code>u32</code> to Substrate specific types should be easy:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn u32_to_balance(input: u32) -&gt; T::Balance {\n    input.into()\n}\n</code></pre>\n\n<p>For larger types, you need to handle the case where the <code>Balance</code> type for a runtime is smaller than what is available:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn u64_to_balance_option(input: u64) -&gt; Option&lt;T::Balance&gt; {\n    input.try_into().ok()\n}\n\n// Note the warning above about saturated conversions\npub fn u64_to_balance_saturated(input: u64) -&gt; T::Balance {\n    input.saturated_into()\n}\n</code></pre>\n\n<p>When converting from <code>T::Balance</code> to a rust primitive, you need to also handle conversion between incompatible types:</p>\n\n<pre><code>pub fn balance_to_u64(input: T::Balance) -&gt; Option&lt;u64&gt; {\n    TryInto::&lt;u64&gt;::try_into(input).ok()\n}\n\n// Note the warning above about saturated conversions\npub fn balance_to_u64_saturated(input: T::Balance) -&gt; u64 {\n    input.saturated_into::&lt;u64&gt;()\n}\n</code></pre>\n\n<hr>\n\n<h1>For Substrate v1.0</h1>\n\n<p>Substrate provides <a href=\"https://substrate.dev/rustdocs/v1.0/sr_primitives/traits/trait.As.html\" rel=\"nofollow noreferrer\"><code>pub trait As&lt;T&gt;</code> in the <code>sr-primitives</code> crate</a>:</p>\n\n<pre><code>/// Simple trait similar to `Into`, except that it can be used to convert numerics between each\n/// other.\npub trait As&lt;T&gt; {\n    /// Convert forward (ala `Into::into`).\n    fn as_(self) -&gt; T;\n    /// Convert backward (ala `From::from`).\n    fn sa(_: T) -&gt; Self;\n}\n</code></pre>\n\n<p>Here are some working examples of how it can be used:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;T: Trait&gt; Module&lt;T&gt; {\n    // `as_` will turn T::Balance into a u64\n    pub fn balance_to_u64(input: T::Balance) -&gt; u64 {\n        input.as_()\n    }\n\n    // Being explicit, you can convert a `u64` to a T::Balance\n    // using the `As` trait, with `T: u64`, and then calling `sa`\n    pub fn u64_to_balance(input: u64) -&gt; T::Balance {\n        &lt;T::Balance as As&lt;u64&gt;&gt;::sa(input)\n    }\n\n    // You can also let Rust figure out what `T` is\n    pub fn u64_to_balance_implied(input: u64) -&gt; T::Balance {\n        &lt;T::Balance as As&lt;_&gt;&gt;::sa(input)\n    }\n\n    // You can also let Rust figure out where `sa` is implemented\n    pub fn u64_to_balance_implied_more(input: u64) -&gt; T::Balance {\n        T::Balance::sa(input)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 948, "favorite_count": 0, "accepted_answer_id": 56081118, "answer_count": 1, "score": 7, "last_activity_date": 1583166493, "creation_date": 1557503967, "question_id": 56081117, "link": "https://stackoverflow.com/questions/56081117/how-do-you-convert-between-substrate-specific-types-and-rust-primitive-types", "title": "How do you convert between Substrate specific types and Rust primitive types?", "body": "<p>Using the Substrate blockchain framework, how can I convert between Substrate specific types and Rust primitive types and vice versa?</p>\n\n<p>For example:</p>\n\n<ul>\n<li>Convert a time (<code>T::Moment</code>) to a <code>u64</code></li>\n<li>Convert a u64 to a <code>T::Balance</code></li>\n</ul>\n\n<p>etc...</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557503938, "post_id": 56080861, "comment_id": 98800413, "body": "See also <a href=\"https://stackoverflow.com/q/56051593/155423\">Is there a way to store a texture inside a struct using rust-sdl2?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 8540006, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRPu.jpg?s=128&g=1", "display_name": "cosmic.", "link": "https://stackoverflow.com/users/8540006/cosmic"}, "edited": false, "score": 0, "creation_date": 1557504041, "post_id": 56081068, "comment_id": 98800467, "body": "I&#39;ve already tried it but it doesn&#39;t solve my problem at all. If I call <code>my_struct.create()</code> once again, the compiler tells me:  <code>error[E0499]: cannot borrow &#39;my_struct&#39; as mutable more than once at a time</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557504065, "post_id": 56081068, "comment_id": 98800476, "body": "While this technically solves the error, it makes the value immovable. Try adding <code>{my_struct}</code> at the end of <code>main</code>."}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": false, "score": 0, "last_activity_date": 1557503702, "creation_date": 1557503702, "answer_id": 56081068, "question_id": 56080861, "link": "https://stackoverflow.com/questions/56080861/rust-cannot-infer-an-appropriate-lifetime-for-autoref-due-to-conflicting-requi/56081068#56081068", "title": "Rust - cannot infer an appropriate lifetime for autoref due to conflicting requirements", "body": "<p>The compiler is trying to tell you that it is expecting a very specific lifetime in <code>Creature&lt;'a&gt;</code> but the code actually produces a generic lifetime <code>Creature&lt;'_&gt;</code>. That is, the lifetime bound on <code>Creature</code> must be <code>'a</code> but you are writing method <code>create()</code> for <em>any</em> lifetime <code>'_</code>.</p>\n\n<p>Change <code>create()</code> to </p>\n\n<pre><code>fn create(&amp;'a mut self) {\n    let new_creature = self.creator.create();\n    self.creatures.push(new_creature);\n}\n</code></pre>\n\n<p>and it will compile: Instead of \"any lifetime <code>&amp;mut self</code> could ever have\" you now have \"<code>&amp;mut self</code> must have lifetime 'a\".</p>\n"}], "owner": {"reputation": 41, "user_id": 8540006, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/IdRPu.jpg?s=128&g=1", "display_name": "cosmic.", "link": "https://stackoverflow.com/users/8540006/cosmic"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 982, "favorite_count": 0, "closed_date": 1557503905, "answer_count": 1, "score": 0, "last_activity_date": 1557503919, "creation_date": 1557502878, "last_edit_date": 1557503218, "question_id": 56080861, "link": "https://stackoverflow.com/questions/56080861/rust-cannot-infer-an-appropriate-lifetime-for-autoref-due-to-conflicting-requi", "closed_reason": "Duplicate", "title": "Rust - cannot infer an appropriate lifetime for autoref due to conflicting requirements", "body": "<p>I'm new to Rust's lifetimes concept and can't wrap my head around a particular piece of code. I've been working with Rust's SDL bindings and its Texture/TextureCreator classes and the problem basically boils down to the following scheme:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Creator;\n\nimpl Creator {\n    fn create(&amp;self) -&gt; Creature {\n        Creature { creator: &amp;self }\n    }\n}\n\nstruct Creature&lt;'a&gt; {\n    creator: &amp;'a Creator,\n}\n\nstruct MyStruct&lt;'a&gt; {\n    creator: Creator,\n    creatures: Vec&lt;Creature&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; MyStruct&lt;'a&gt; {\n    fn new() -&gt; MyStruct&lt;'a&gt; {\n        MyStruct {\n            creatures: Vec::new(),\n            creator: Creator,\n        }\n    }\n\n    fn create(&amp;mut self) {\n        let new_creature = self.creator.create();\n        self.creatures.push(new_creature);\n    }\n}\n\nfn main() {\n    let mut my_struct = MyStruct::new();\n    my_struct.create();\n}\n</code></pre>\n\n<p>The actual problem lies inside <code>MyStruct::create</code> method. If I try to compile the above code I get:</p>\n\n<pre><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to con\nflicting requirements\n  --&gt; src/main.rs:27:41\n   |\n27 |         let new_creature = self.creator.create();\n   |                                         ^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 define\nd on the method body at 26:5...\n  --&gt; src/main.rs:26:5\n   |\n26 | /     fn create(&amp;mut self) {\n27 | |         let new_creature = self.creator.create();\n28 | |         self.creatures.push(new_creature);\n29 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; src/main.rs:27:28\n   |\n27 |         let new_creature = self.creator.create();\n   |                            ^^^^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on t\nhe impl at 18:6...\n  --&gt; src/main.rs:18:6\n   |\n18 | impl&lt;'a&gt; MyStruct&lt;'a&gt; {\n   |      ^^\n   = note: ...so that the expression is assignable:\n           expected Creature&lt;'a&gt;\n              found Creature&lt;'_&gt;\n</code></pre>\n\n<p>The interesting thing is that when I comment out this line inside <code>MyStruct::create</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>self.creatures.push(new_creature);\n</code></pre>\n\n<p>it compiles just fine.</p>\n\n<p>My assumption is that it can lead to the following problem - a newly created <code>new_creature</code> has a reference to the <code>creator</code> which is owned by <code>my_struct</code>. Now, if that <code>new_creature</code> is then owned by the <code>creatures</code> vector, I can't really call any method on <code>my_struct</code> that borrows itself as <code>mut</code> because at that point there will be:</p>\n\n<ul>\n<li>a reference to <code>creator</code> inside <code>my_struct</code></li>\n<li>a mutable reference to <code>my_struct</code> inside the method's body (and therefore to <code>my_struct.creator</code>)</li>\n</ul>\n\n<p>However, this is how I see it from my point of view. From the compiler's standpoint it's about lifetimes and don't quite get it. So I have the two following questions:</p>\n\n<ol>\n<li>Why does the compiler complain about lifetimes in this case?</li>\n<li>How can I go about storing <code>Vec&lt;Creature&gt;</code> in a struct? Should I make sure that I don't keep both <code>Creator</code> and <code>Vec&lt;Creature&gt;</code> in the same struct to avoid the aforementioned issue?</li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1557497312, "post_id": 56079179, "comment_id": 98796663, "body": "Without the specialization feature, this is not expected to compile, for exactly the reason given in the error message. The specialization feature is only incompletely specified and implemented, and currently has bugs and soundness holes; I don&#39;t know the exact state of affairs there. I suggest using one of the wrapper that implement <code>Hash</code> for floating-point numbers, like the <code>ordered_float</code> crate."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557498118, "post_id": 56079179, "comment_id": 98797123, "body": "@SvenMarnach But WHY are they conflicting? <code>HashKey&lt;f32&gt;</code> is a different type than <code>HashKey&lt;f64&gt;</code> which is different from all types in the set <code>HashKey&lt;T&gt; where T: Hash</code>. I simply cannot find a state of mind where I can see a conflict."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1557502648, "post_id": 56079179, "comment_id": 98799749, "body": "@BitTickler The specialization feature is nowhere near ready to use. I didn&#39;t read your question carefully, but my experience of the feature is that it mostly hasn&#39;t worked how I hoped."}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1557503889, "post_id": 56079179, "comment_id": 98800389, "body": "@BitTickler I think this is the classic &quot;trait you don&#39;t own on a type you don&#39;t own&quot;, the compiler isn&#39;t ok with relying on the fact that <code>f32: !Hash</code> because that could change."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557504401, "post_id": 56079179, "comment_id": 98800608, "body": "@BitTickler It&#39;s actually in the error message: &quot;upstream crates may add new impl of trait <code>std::hash::Hash</code> for type <code>f32</code> in future versions&quot; I did not repeat that, because it was already included in your question."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557508701, "post_id": 56079179, "comment_id": 98802476, "body": "@SvenMarnach Sorry, I am not psychic and have no crystal ball either. As such I dismissed that &quot;in the future&quot; part as gibberish. I can only program against the status quo not against a future I cannot foresee. On a more serious note, do they have that hard coded in the compiler? <code>if t == &quot;f32&quot; { special_behavior() }</code>?"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1557509932, "post_id": 56079179, "comment_id": 98803025, "body": "@BitTickler No, it applies to any type. The situation that implementing a previously unimplemented trait breaks downstream crates is disallowed in general, to ensure that implementing additional traits is always a backwards-compatible change. This is what the note in the error message tries to explain \u2013 sorry for not being clearer."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557510034, "post_id": 56079179, "comment_id": 98803070, "body": "To put it yet another way, the compiler tells you that there is a <i>potential</i> conflict due to possible future extensions of an upstream crate, so it conservatively rejects your code."}, {"owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557533327, "post_id": 56079179, "comment_id": 98810193, "body": "@SvenMarnach Now I think I understand. I can impl upstream traits for types in my crate, but not upstream traits for upstream  types That makes sense, kind of. Thanks for that explanation."}], "owner": {"reputation": 7873, "user_id": 2225104, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/195de66794c596e35bc145c80e9f5515?s=128&d=identicon&r=PG", "display_name": "BitTickler", "link": "https://stackoverflow.com/users/2225104/bittickler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 110, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1557497225, "creation_date": 1557496664, "last_edit_date": 1557497225, "question_id": 56079179, "link": "https://stackoverflow.com/questions/56079179/bug-or-non-feature-in-nightly-rust-trait-specialization", "title": "Bug or Non-feature in nightly rust? (trait Specialization)", "body": "<p>So I am currently using</p>\n\n<blockquote>\n  <p>rustc 1.36.0-nightly (8dd4aae9a 2019-05-04)</p>\n</blockquote>\n\n<p>and in my lib.rs I enabled </p>\n\n<blockquote>\n  <p>#![feature(specialization)]</p>\n</blockquote>\n\n<p>And in a module of my library crate, I have the following, which does not compile. From my understanding it should compile, even without <code>specialization</code> but it does not - in either case.</p>\n\n<pre><code>use std::hash::{Hash,Hasher};\n\n\n#[derive(Debug, Copy, Clone,PartialEq,Eq)]\nstruct HashKey&lt;T&gt;(T);\n\n//default \nimpl&lt;T : Hash&gt; Hash for HashKey&lt;T&gt; {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) \n        where H : Hasher\n    {\n        self.0.hash(state)\n    }\n}\n\nimpl Hash for HashKey&lt;f32&gt; {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) \n        where H : Hasher\n    {\n        unsafe { std::mem::transmute::&lt;f32,u32&gt;(self.0) }.hash(state)\n    }\n}\n\nimpl Hash for HashKey&lt;f64&gt; {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) \n        where H : Hasher\n    {\n        unsafe { std::mem::transmute::&lt;f64,u64&gt;(self.0) }.hash(state)\n    }\n}\n</code></pre>\n\n<p>As we all know, <code>f32</code> as well as <code>f64</code> are neither <code>Eq</code> nor <code>Hash</code> because of the <code>NaN</code> problem as discussed for example in <a href=\"https://stackoverflow.com/questions/39638363/how-can-i-use-a-hashmap-with-f64-as-key-in-rust\">this question</a>. Using the unsafe <code>reinterpret_cast&lt;u32&gt;</code> workaround as I do not care about <code>Nan</code> in my case.</p>\n\n<p>So, I have an impl of trait Hash for any <code>HashKey&lt;T&gt; where T : Hash</code> and I have impls for both <code>f32</code> and <code>f64</code> which are as pointed out not <code>Hash</code>. As such, it is not even a specialization as those 3 impls cover <em>orthogonal</em> cases.</p>\n\n<p>Despite all that wonderful logic, I get the error:</p>\n\n<pre><code>conflicting implementations of trait `std::hash::Hash` for type `naive::HashKey&lt;f32&gt;`:\n\nconflicting implementation for `naive::HashKey&lt;f32&gt;`\n\nnote: upstream crates may add new impl of trait `std::hash::Hash` for type `f32` in future versionsrustc(E0119)\nnaive.rs(10, 1): first implementation here\nnaive.rs(18, 1): conflicting implementation for `naive::HashKey&lt;f32&gt;`\n</code></pre>\n\n<p>Which leads to the questions:</p>\n\n<p>Am I doing something wrong? How to do it right? Why is this a problem in the first place, given those impls refer to sets of types with no overlap?</p>\n"}, {"tags": ["rust", "closures"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 2, "creation_date": 1557488343, "post_id": 56076786, "comment_id": 98791825, "body": "Because in your exemple 2, <code>x</code> is copyable, while it is not in the first one."}], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 11480788, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-LSeE9zYmKmg/AAAAAAAAAAI/AAAAAAAACmI/ycsPZLjGXM8/photo.jpg?sz=128", "display_name": "Marius Rodi", "link": "https://stackoverflow.com/users/11480788/marius-rodi"}, "edited": false, "score": 0, "creation_date": 1557490904, "post_id": 56077422, "comment_id": 98793087, "body": "Thanks for your answer! Does it make any difference if I remove the <code>move</code>? It will compile as well."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "reply_to_user": {"reputation": 11, "user_id": 11480788, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-LSeE9zYmKmg/AAAAAAAAAAI/AAAAAAAACmI/ycsPZLjGXM8/photo.jpg?sz=128", "display_name": "Marius Rodi", "link": "https://stackoverflow.com/users/11480788/marius-rodi"}, "edited": false, "score": 0, "creation_date": 1557490949, "post_id": 56077422, "comment_id": 98793114, "body": "For copy types it won&#39;t make any difference at all."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 11, "user_id": 11480788, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-LSeE9zYmKmg/AAAAAAAAAAI/AAAAAAAACmI/ycsPZLjGXM8/photo.jpg?sz=128", "display_name": "Marius Rodi", "link": "https://stackoverflow.com/users/11480788/marius-rodi"}, "edited": false, "score": 1, "creation_date": 1557497564, "post_id": 56077422, "comment_id": 98796803, "body": "@MariusRodi It does make a difference whether you use <code>move</code>, even for types that are <code>Copy</code>. Without <code>move</code>, the variable will be borrowed, possibly mutably, and with <code>move</code> it will be copied into the closure. In the former case, there is only one variable with a single value that is borrowed by the closure, while in the second case there are two completely separate variables \u2013 one inside the closure and one in the enclosing scope."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557522472, "post_id": 56077422, "comment_id": 98807945, "body": "See also <a href=\"https://stackoverflow.com/q/54287719/155423\">How to copy instead of borrow an i64 into a closure in Rust?</a>; <a href=\"https://stackoverflow.com/q/31168589/155423\">How to force a move of a type which implements the Copy trait?</a>"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 3, "last_activity_date": 1557490034, "creation_date": 1557490034, "answer_id": 56077422, "question_id": 56076786, "link": "https://stackoverflow.com/questions/56076786/why-doesnt-a-move-closure-take-ownership-of-a-variable/56077422#56077422", "title": "Why doesn&#39;t a move closure take ownership of a variable?", "body": "<p>The answer is given in the error message of your first example</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: borrow of moved value: `x`\n --&gt; src/main.rs:6:40\n  |\n2 |     let x = vec![1, 2, 3];\n  |         - move occurs because `x` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n3 | \n4 |     let equal_to_x = move |z| z == x;\n  |                      --------      - variable moved due to use in closure\n  |                      |\n  |                      value moved into closure here\n5 | \n6 |     println!(\"can't use x here: {:?}\", x);\n  |                                        ^ value borrowed here after move\n</code></pre>\n\n<p><em>\"move occurs because <code>x</code> has type <code>std::vec::Vec&lt;i32&gt;</code>, which does not implement the <code>Copy</code> trait\"</em></p>\n\n<p>This means, when a type implements the <code>Copy</code> trait (like an <code>i32</code> does), move copies the variable into the scope of the closure.</p>\n"}], "owner": {"reputation": 11, "user_id": 11480788, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-LSeE9zYmKmg/AAAAAAAAAAI/AAAAAAAACmI/ycsPZLjGXM8/photo.jpg?sz=128", "display_name": "Marius Rodi", "link": "https://stackoverflow.com/users/11480788/marius-rodi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1557522424, "creation_date": 1557487745, "last_edit_date": 1557522424, "question_id": 56076786, "link": "https://stackoverflow.com/questions/56076786/why-doesnt-a-move-closure-take-ownership-of-a-variable", "title": "Why doesn&#39;t a move closure take ownership of a variable?", "body": "<p><a href=\"https://doc.rust-lang.org/1.29.2/book/2018-edition/ch13-01-closures.html#capturing-the-environment-with-closures\" rel=\"nofollow noreferrer\"><em>The Rust Programming Language</em> says</a>:</p>\n\n<blockquote>\n  <p>If you want to force the closure to take ownership of the values it uses in the environment, you can use the <code>move</code> keyword before the parameter list</p>\n</blockquote>\n\n<p>What I have noticed with my code is that it won't take ownership of these values. The differences between my code and the given example are:</p>\n\n<ul>\n<li>using an integer instead of a <code>Vec</code></li>\n<li>making <code>x</code> mutable instead of immutable</li>\n</ul>\n\n<p><strong>Example 1:</strong> <em>The Rust Programming Language</em></p>\n\n<pre><code>fn main() {\n    let x = vec![1, 2, 3];\n\n    let equal_to_x = move |z| z == x;\n\n    println!(\"can't use x here: {:?}\", x);\n\n    let y = vec![1, 2, 3];\n\n    assert!(equal_to_x(y));\n}\n</code></pre>\n\n<p><strong>Example 2:</strong> My Code</p>\n\n<pre><code>fn main() {\n    let mut x = 1;\n\n    let equal_to_x = move |z| z == x;\n\n    println!(\"can use x here: {:?}\", x);\n\n    let y = 1;\n\n    assert!(equal_to_x(y));\n}\n</code></pre>\n\n<ol>\n<li><p>Why will example 2 compile but example 1 won't?</p></li>\n<li><p>AWhy is the ownership of <code>x</code> not moved even if I explicitly write  <code>move</code> in front of the closure? Why is <code>x</code> accessible after moving it into the closure?</p></li>\n</ol>\n"}, {"tags": ["multithreading", "rust", "mutex"], "answers": [{"comments": [{"owner": {"reputation": 313, "user_id": 1944661, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2976ed1ad7ff5aa6373134277f5051a4?s=128&d=identicon&r=PG", "display_name": "JJ on SE", "link": "https://stackoverflow.com/users/1944661/jj-on-se"}, "edited": false, "score": 0, "creation_date": 1557548697, "post_id": 56083877, "comment_id": 98811843, "body": "Yes thanks! Hehe I just now was explaining the problem I saw to someone else and as I was explaining it I realized that I can&#39;t think of match as having the match expression and then blocks inside as different &quot;statements&quot;, an entire match can function as an expression so the lifetime of all those objects will extend until the whole match is finished. Thanks for your well-written explanation."}], "tags": [], "owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "is_accepted": true, "score": 2, "last_activity_date": 1557517361, "last_edit_date": 1557517361, "creation_date": 1557517050, "answer_id": 56083877, "question_id": 56075241, "link": "https://stackoverflow.com/questions/56075241/why-does-variable-binding-affect-lifetime-inside-a-loop-body/56083877#56083877", "title": "Why does variable binding affect lifetime inside a loop body?", "body": "<p>Because in Rust, <a href=\"https://doc.rust-lang.org/rust-by-example/scope/raii.html\" rel=\"nofollow noreferrer\">\"resource acquisition is initialization\"</a>.</p>\n\n<p>Specifically <a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.lock\" rel=\"nofollow noreferrer\"><code>receiver.lock()</code></a> returns a type which acquires the lock when it is initialized and releases the lock when it is dropped.</p>\n\n<p>In your first example, the lifetime of the <code>MutexGuard</code> extends to the end of the <code>match</code> statement, so the lock will be held while <code>job.call_box()</code> is called.</p>\n\n<pre><code>match receiver.lock().unwrap().recv().unwrap() {\n    // ...\n};\n// `MutexGuard` is dropped and lock is released here\n</code></pre>\n\n<p>In your second example, the lock guard is only kept alive long enough to read a message from your message queue; the lock guard is dropped at the end of the statement and the lock is released before the <code>match</code> is entered.</p>\n\n<pre><code>let message = receiver.lock().unwrap().recv().unwrap();\n// `MutexGuard` is dropped and lock is released here\n\nmatch message {\n</code></pre>\n"}], "owner": {"reputation": 313, "user_id": 1944661, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2976ed1ad7ff5aa6373134277f5051a4?s=128&d=identicon&r=PG", "display_name": "JJ on SE", "link": "https://stackoverflow.com/users/1944661/jj-on-se"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 67, "favorite_count": 0, "accepted_answer_id": 56083877, "answer_count": 1, "score": 0, "last_activity_date": 1557525875, "creation_date": 1557482455, "last_edit_date": 1557525875, "question_id": 56075241, "link": "https://stackoverflow.com/questions/56075241/why-does-variable-binding-affect-lifetime-inside-a-loop-body", "title": "Why does variable binding affect lifetime inside a loop body?", "body": "<p>In \"The Rust Programming Language\" in <a href=\"https://doc.rust-lang.org/book/ch20-00-final-project-a-web-server.html\" rel=\"nofollow noreferrer\">chapter 20</a> you go through an exercise of building a simple multi-threaded web server. In the exercise you use a single <code>std::sync::mpsc</code> channel. The worker threads all access a single Receiver which is contained like: <code>Arc&lt;Mutex&lt;mpsc::Receiver&lt;Message&gt;&gt;&gt;</code>.</p>\n\n<p>If we write the worker thread like:</p>\n\n<pre><code>let thread = thread::spawn(move || loop {\n    match receiver.lock().unwrap().recv().unwrap() {\n        Message::NewJob(job) =&gt; {\n            println!(\"Worker {} got a job; executing.\", id);\n\n            job.call_box();\n\n            println!(\"Worker {} job complete.\", id);\n        }\n        Message::Terminate =&gt; {\n            println!(\"Worker {} was told to terminate.\", id);\n\n            break;\n        }\n    };\n    println!(\"hello, loop\");\n});\n</code></pre>\n\n<p>Then we do not achieve concurrency, <em>apparently</em> the worker holds on to the mutex lock I supposed because no worker is able to pull off another job until the previous one is complete. However if we simply change it to this (how the book shows the code):</p>\n\n<pre><code>let thread = thread::spawn(move || loop {\n    let message = receiver.lock().unwrap().recv().unwrap();\n\n    match message {\n        Message::NewJob(job) =&gt; {\n            println!(\"Worker {} got a job; executing.\", id);\n\n            job.call_box();\n\n            println!(\"Worker {} job complete.\", id);\n        }\n        Message::Terminate =&gt; {\n            println!(\"Worker {} was told to terminate.\", id);\n\n            break;\n        }\n    };\n    println!(\"hello, loop\");\n});\n</code></pre>\n\n<p>Then everything works fine. If you fire off 5 requests you'll see each thread gets one immediately. Concurrency!</p>\n\n<p>The question is \"why does variable binding affect lifetime\" (I'm assuming that's the reason). Or if not then I'm missing something and what is that?! The book itself talks about how you cannot implement the worker loop with <code>while let Ok(job) = receiver.lock().unwrap().recv() {</code> because of the scope of the lock but apparently even <em>inside</em> the loop there be dragons. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 22172, "user_id": 1263942, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b272a5e1d5d3589192d942552e51e2a8?s=128&d=identicon&r=PG", "display_name": "Bruno Grieder", "link": "https://stackoverflow.com/users/1263942/bruno-grieder"}, "edited": false, "score": 1, "creation_date": 1557466911, "post_id": 56071277, "comment_id": 98781564, "body": "Ahhh <code>Some(ref a)</code>. Thanks. (I am not borrowing the Option directly due to the way I chain functions and handle errors down the line; I do not use <code>unwrap</code>, this is a very simplified example of my use case)."}], "tags": [], "owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "is_accepted": true, "score": 1, "last_activity_date": 1557466969, "last_edit_date": 1557466969, "creation_date": 1557466521, "answer_id": 56071277, "question_id": 56070913, "link": "https://stackoverflow.com/questions/56070913/borrow-a-value-wrapped-in-an-option-using-a-method/56071277#56071277", "title": "Borrow a value wrapped in an Option using a method", "body": "<p>I don't know why you are not borrowing <code>Option</code> itself, but you can mimic <code>unwrap</code> behavior by this way :</p>\n\n<pre><code>impl Obj {\n    fn ref_to_a(&amp;self) -&gt; &amp;A {\n        match self.a {\n            Some(ref a) =&gt; return a,\n            None =&gt; panic!(\"There is no value\"),\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Note :</strong>\n<a href=\"https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application\">Should I avoid unwrap in production application?</a></p>\n"}, {"comments": [{"owner": {"reputation": 22172, "user_id": 1263942, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b272a5e1d5d3589192d942552e51e2a8?s=128&d=identicon&r=PG", "display_name": "Bruno Grieder", "link": "https://stackoverflow.com/users/1263942/bruno-grieder"}, "edited": false, "score": 0, "creation_date": 1557473982, "post_id": 56072259, "comment_id": 98784564, "body": "Thanks; I actually ended up using <code>as_ref</code>. @&#214;mer Erden answer put me on that path. (for <code>unwrap</code>, sure, see my comment above)"}, {"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1557481350, "post_id": 56072259, "comment_id": 98788213, "body": "Is there any compiler optimization for using multiple match in here ? <code>as_ref</code> uses matching and <code>unwrap</code>(<code>expect</code>) also does, otherwise there would be unnecessary check."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1557485070, "post_id": 56072259, "comment_id": 98790161, "body": "@&#214;merErden <a href=\"https://godbolt.org/z/WPx_Ep\" rel=\"nofollow noreferrer\">godbolt.org/z/WPx_Ep</a>"}], "tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 3, "last_activity_date": 1557471262, "creation_date": 1557471262, "answer_id": 56072259, "question_id": 56070913, "link": "https://stackoverflow.com/questions/56070913/borrow-a-value-wrapped-in-an-option-using-a-method/56072259#56072259", "title": "Borrow a value wrapped in an Option using a method", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>Option::as_ref</code></a> to <em>\"Convert from <code>Option&lt;T&gt;</code> to <code>Option&lt;&amp;T&gt;</code>.\"</em></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Obj {\n    fn ref_to_a(&amp;self) -&gt; &amp;A {\n        self.a.as_ref().unwrap()\n    }\n}\n</code></pre>\n\n<p>Of course you shouldn't use <code>unwrap</code>, but at least <code>expect</code>.</p>\n"}], "owner": {"reputation": 22172, "user_id": 1263942, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b272a5e1d5d3589192d942552e51e2a8?s=128&d=identicon&r=PG", "display_name": "Bruno Grieder", "link": "https://stackoverflow.com/users/1263942/bruno-grieder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 87, "favorite_count": 0, "closed_date": 1557501682, "accepted_answer_id": 56071277, "answer_count": 2, "score": 0, "last_activity_date": 1557501751, "creation_date": 1557464238, "last_edit_date": 1557465245, "question_id": 56070913, "link": "https://stackoverflow.com/questions/56070913/borrow-a-value-wrapped-in-an-option-using-a-method", "closed_reason": "Duplicate", "title": "Borrow a value wrapped in an Option using a method", "body": "<p>I would like to write a method on a struct which borrows a value wrapped in an <code>Option</code> in one of its properties/fields.</p>\n\n<p>Is it doable ?</p>\n\n<p>Consider </p>\n\n<pre><code>struct A {}\n\nstruct Obj {\n    a: Option&lt;A&gt;\n}\n\nimpl Obj {\n    fn ref_to_a(&amp;self) -&gt; &amp;A {\n        //&amp;self.a.unwrap() &lt;-- How do I implement this ?\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ff1b68b8f5418e93aae2d91b0d13c672\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": ["rust", "production"], "answers": [{"comments": [{"owner": {"reputation": 2782, "user_id": 7438048, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nTLxU.png?s=128&g=1", "display_name": "ShmulikA", "link": "https://stackoverflow.com/users/7438048/shmulika"}, "edited": false, "score": 0, "creation_date": 1557478019, "post_id": 56067977, "comment_id": 98786373, "body": "thanks for detailed answer, my real concern is about prod usage. For example, I wouldnt use python beta version on prod and docs clearly states so. In rust some crates like pyo3 uses features from nightly, does it means these crates are not suitable for prod use?"}, {"owner": {"reputation": 555, "user_id": 5572146, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c799e0c44a11d16cc175a717d5dca855?s=128&d=identicon&r=PG&f=1", "display_name": "chpio", "link": "https://stackoverflow.com/users/5572146/chpio"}, "edited": false, "score": 0, "creation_date": 1557481499, "post_id": 56067977, "comment_id": 98788305, "body": "&quot;In rust some crates like pyo3 uses features from nightly, does it means these crates are not suitable for prod use?&quot; That&#39;s (obviously) up to you. It comes to your requirements to the &quot;prod&quot; environment."}, {"owner": {"reputation": 2782, "user_id": 7438048, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nTLxU.png?s=128&g=1", "display_name": "ShmulikA", "link": "https://stackoverflow.com/users/7438048/shmulika"}, "edited": false, "score": 0, "creation_date": 1557482449, "post_id": 56067977, "comment_id": 98788809, "body": "@chipo isnt the rust lang or community have guidelines / recommendations on using nightly rust on prod systems? In python or other popular languages its pretty clear. Also i dont know of any popular python packages requires unstable build or unstable features like pyo3, all the nightly concept in rust is new to me and i try to make the correct decision for my projects but fail to find any answer except the one from rust users post"}, {"owner": {"reputation": 2782, "user_id": 7438048, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nTLxU.png?s=128&g=1", "display_name": "ShmulikA", "link": "https://stackoverflow.com/users/7438048/shmulika"}, "edited": false, "score": 0, "creation_date": 1557506301, "post_id": 56067977, "comment_id": 98801417, "body": "Thanks for the addon section update now its more clear"}], "tags": [], "owner": {"reputation": 7882, "user_id": 2722968, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d0a9ce812892f03b8342c5a60be24632?s=128&d=identicon&r=PG&f=1", "display_name": "user2722968", "link": "https://stackoverflow.com/users/2722968/user2722968"}, "is_accepted": true, "score": 7, "last_activity_date": 1557488643, "last_edit_date": 1557488643, "creation_date": 1557438065, "answer_id": 56067977, "question_id": 56066765, "link": "https://stackoverflow.com/questions/56066765/using-rust-nightly-in-production/56067977#56067977", "title": "Using Rust nightly in production", "body": "<p>Obviously, there are no stability guarantees on nightly, which makes this question a duplicate of the one asked by <a href=\"https://en.wikipedia.org/wiki/If_a_tree_falls_in_a_forest\" rel=\"nofollow noreferrer\">George Berkeley</a> once.</p>\n\n<p>However, the nightly compiler is very stable: Every single, even the most mundane, change to the master branch (from which nightly is pulled) goes through CI, which executes the full test suite, which has to pass. There is no \"we will fix this later\" on master if the change breaks things that worked before.\nSecondly, big changes - like the recent changes to <code>std::collections</code> and <code>std::sync</code> - go through crater-runs where a decent portion of the publicly available Rust code is built; if the PR would break things that weren't broken before, it does not land in nightly. Last but not least many rust projects use scheduled CI on nightly, where the project at hand and it's dependencies are built and tested once a month. Projects like <code>rocket</code> run on nightly all the time and if a regression or a bug is introduced in nightly, it is noticed very quickly. All of this means that it is highly unlikely that your <a href=\"https://www.youtube.com/watch?v=3m5qxZm_JqM\" rel=\"nofollow noreferrer\">front suddenly falls off</a> on nightly</p>\n\n<p>Things are different for the unstable features that require nightly, though. The semantics can change, and code that once worked may fail to compile more or less suddenly; it is usually highly unlikely, however, that changes will cause silent failures, previously defined behavior to become undefined and the like.</p>\n\n<p>A common strategy, therefore, is to pick a specific version of nightly (let's say \"2019-05-09\") and stick with that version for a whole while.</p>\n\n<p><em>Addon</em>: My intention was to make clear that there is a difference between \"can nightly compile things reliably?\" and \"are the things compiled by nightly reliable?\" I'd make a strong argument for both, with the emphasis on the second point: 1) Yes, most of the time nightly will be able to compile your code. 2) It is extremely unlikely that things compiled by nightly are unreliable due to subtle changes in behavior or outright miscompilations.</p>\n"}], "owner": {"reputation": 2782, "user_id": 7438048, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nTLxU.png?s=128&g=1", "display_name": "ShmulikA", "link": "https://stackoverflow.com/users/7438048/shmulika"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1078, "favorite_count": 2, "accepted_answer_id": 56067977, "answer_count": 1, "score": 4, "last_activity_date": 1559831203, "creation_date": 1557432120, "last_edit_date": 1559831203, "question_id": 56066765, "link": "https://stackoverflow.com/questions/56066765/using-rust-nightly-in-production", "title": "Using Rust nightly in production", "body": "<p><strong>Can someone explain to me how \"production\" Rust nightly is?</strong></p>\n\n<p>I want to use the <a href=\"https://github.com/PyO3/pyo3/issues/5\" rel=\"nofollow noreferrer\">PyO3</a> crate which uses the <a href=\"https://github.com/rust-lang/rust/issues/31844\" rel=\"nofollow noreferrer\">specialization</a> feature that needs nightly Rust.</p>\n\n<p>Does using a nightly version of Rust is production ready? I understand that things might break in future releases and API changes might be introduced but in terms of quality/testing/production readiness is nightly safe?</p>\n\n<p>From <a href=\"https://users.rust-lang.org/t/how-stable-is-nightly/6326\" rel=\"nofollow noreferrer\">this thread on Rust users</a> it seems I should be fine as long as I limit my non-stable features usage (e.g. only to specialization)?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 1, "creation_date": 1557431528, "post_id": 56066534, "comment_id": 98773140, "body": "OK, so <code>[]</code> is a literal, and therefore statically allocated, I guessed that might be part of it. But then why are we able to take a mutable reference to the common structure? Mutable references are supposed to be exclusive..."}, {"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "edited": false, "score": 1, "creation_date": 1557432504, "post_id": 56066534, "comment_id": 98773546, "body": "The other part of the answer appears to be that zero-sized types allow mutable references. Quoting <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1414-rvalue_static_promotion.md\" rel=\"nofollow noreferrer\">rfc1414</a>: &quot;...aliasing mutable references are only safe for zero sized types (since you never dereference the pointer for them).&quot;"}, {"owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557644702, "post_id": 56066534, "comment_id": 98829284, "body": "@Shepmaster I think this is a different question than the original, and I&#39;ve re-written to make that more clear. I&#39;m not sure that my comments above accurately reflect the current state (the text I quoted from rfc1414 suggests that the handling of zero-sized types could be improved in an extension to that RFC), so this may deserve a more authoritative response."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1576510774, "last_edit_date": 1576510774, "creation_date": 1576510421, "answer_id": 59359718, "question_id": 56066534, "link": "https://stackoverflow.com/questions/56066534/why-is-it-possible-to-return-a-mutable-reference-to-a-literal-from-a-function/59359718#59359718", "title": "Why is it possible to return a mutable reference to a literal from a function?", "body": "<p>TL;DR: empty arrays are special cased in the compiler and it's safe because you can't ever dereference the pointer of a zero-length array, so there's no possible mutable aliasing.</p>\n\n<hr>\n\n<p><a href=\"https://rust-lang.github.io/rfcs/1414-rvalue_static_promotion.html\" rel=\"noreferrer\">RFC 1414</a>, rvalue static promotion, discusses the mechanism by which values are promoted to <code>static</code> values. It has a section about possible extensions for <a href=\"https://rust-lang.github.io/rfcs/1414-rvalue_static_promotion.html#alternatives-extensions\" rel=\"noreferrer\">mutable references</a> (bolding mine):</p>\n\n<blockquote>\n  <p>It would be possible to extend support to <code>&amp;'static mut</code> references,\n  as long as there is the additional constraint that the\n  referenced type is zero sized.</p>\n  \n  <p>This again <strong>has precedence in the array reference constructor</strong>:</p>\n  \n  <pre class=\"lang-rust prettyprint-override\"><code>// valid code today\nlet y: &amp;'static mut [u8] = &amp;mut [];\n</code></pre>\n  \n  <p>The rules would be similar:</p>\n  \n  <ul>\n  <li>If a mutable reference to a constexpr rvalue is taken. (<code>&amp;mut &lt;constexpr&gt;</code>)</li>\n  <li>And the constexpr does not contain a <code>UnsafeCell { ... }</code> constructor.</li>\n  <li>And the constexpr does not contain a const fn call returning a type containing a <code>UnsafeCell</code>.</li>\n  <li><em>And the type of the rvalue is zero-sized.</em></li>\n  <li>Then instead of translating the value into a stack slot, translate\n  it into a static memory location and give the resulting reference a\n  <code>'static</code> lifetime.</li>\n  </ul>\n  \n  <p><strong>The zero-sized restriction is there because\n  aliasing mutable references are only safe for zero sized types\n  (since you never dereference the pointer for them)</strong>.</p>\n</blockquote>\n\n<p>From this, we can tell that mutable references to empty arrays are currently special-cased in the compiler. In Rust 1.39, the discussed extension has <em>not</em> been implemented:</p>\n\n<pre><code>struct Zero;\n\nfn example() -&gt; &amp;'static mut Zero {\n    &amp;mut Zero\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0515]: cannot return reference to temporary value\n --&gt; src/lib.rs:4:5\n  |\n4 |     &amp;mut Zero\n  |     ^^^^^----\n  |     |    |\n  |     |    temporary value created here\n  |     returns a reference to data owned by the current function\n</code></pre>\n\n<p>While the array version does work:</p>\n\n<pre><code>fn example() -&gt; &amp;'static mut [i32] {\n    &amp;mut []\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/47662253/155423\">Why is it legal to borrow a temporary?</a></li>\n<li><a href=\"https://stackoverflow.com/q/50345139/155423\">Why can I return a reference to a local literal but not a variable?</a></li>\n</ul>\n"}], "owner": {"reputation": 5187, "user_id": 223783, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf3bda8d7013c0e81c93c262e7cbb1c3?s=128&d=identicon&r=PG", "display_name": "Aidan Cully", "link": "https://stackoverflow.com/users/223783/aidan-cully"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 529, "favorite_count": 0, "accepted_answer_id": 59359718, "answer_count": 1, "score": 7, "last_activity_date": 1576511703, "creation_date": 1557430995, "last_edit_date": 1576511703, "question_id": 56066534, "link": "https://stackoverflow.com/questions/56066534/why-is-it-possible-to-return-a-mutable-reference-to-a-literal-from-a-function", "title": "Why is it possible to return a mutable reference to a literal from a function?", "body": "<p>The current edition of <a href=\"https://doc.rust-lang.org/1.39.0/nomicon/borrow-splitting.html\" rel=\"nofollow noreferrer\"><em>The Rustonomicon</em></a> has this example code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::mem;\n\npub struct IterMut&lt;'a, T: 'a&gt;(&amp;'a mut [T]);\n\nimpl&lt;'a, T&gt; Iterator for IterMut&lt;'a, T&gt; {\n    type Item = &amp;'a mut T;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        let slice = mem::replace(&amp;mut self.0, &amp;mut []);\n        if slice.is_empty() {\n            return None;\n        }\n\n        let (l, r) = slice.split_at_mut(1);\n        self.0 = r;\n        l.get_mut(0)\n    }\n}\n</code></pre>\n\n<p>I'm confused about this line in particular:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let slice = mem::replace(&amp;mut self.0, &amp;mut []);\n//                                    ^^^^^^^ \n</code></pre>\n\n<p>How does this borrow check? If this were an immutable borrow, <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1414-rvalue_static_promotion.md\" rel=\"nofollow noreferrer\">RFC 1414</a> indicates that the <code>[]</code> rvalue should have <code>'static</code> lifetime, so that an immutable borrow would borrow-check, but the example shows a mutable borrow! It seems that one of two things must be going on:</p>\n\n<ul>\n<li>Either <code>[]</code> is a temporary (so that it can be used mutably), in which case it would not have <code>'static</code> lifetime, and should not borrow-check;</li>\n<li>Or that <code>[]</code> has <code>'static</code> lifetime, and therefore it should not be possible to take a mutable borrow (since we don't guarantee exclusive access as we take the borrow), and should not borrow-check.</li>\n</ul>\n\n<p>What am I missing?</p>\n\n<p>Related:</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/q/50345139/155423\">Why can I return a reference to a local literal but not a variable?</a></p>\n\n<p>This question focuses on immutable references; this question is about <strong>mutable</strong> references.</p></li>\n<li><p><a href=\"https://stackoverflow.com/q/47662253/155423\">Why is it legal to borrow a temporary?</a></p>\n\n<p>This question focuses on taking references inside of a function; this question is about <strong>returning</strong> a reference.</p></li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 428, "user_id": 7343786, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-MhMp4LR2GVc/AAAAAAAAAAI/AAAAAAAAAFQ/Ry3ux41tyCo/photo.jpg?sz=128", "display_name": "Harrison Mc", "link": "https://stackoverflow.com/users/7343786/harrison-mc"}, "edited": false, "score": 0, "creation_date": 1557424869, "post_id": 56065089, "comment_id": 98770211, "body": "A couple questions: what is supposed to happen inside of the inner <code>if</code> statement? (<code>if app.is_present(...)</code>) Is it supposed to be returning something or performing an action? It looks like you&#39;re trying to assign it to a value or return it from a function, but you&#39;re not doing either of those things.  Can you show us your whole code? I&#39;m wondering if your formatting got adjusted and the <code>let dl = ...</code> line isn&#39;t where we think it is..."}, {"owner": {"reputation": 33, "user_id": 11133070, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/016f05da345efdc43e0a71906af6b970?s=128&d=identicon&r=PG&f=1", "display_name": "DaemonSlayer2048", "link": "https://stackoverflow.com/users/11133070/daemonslayer2048"}, "reply_to_user": {"reputation": 428, "user_id": 7343786, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-MhMp4LR2GVc/AAAAAAAAAAI/AAAAAAAAAFQ/Ry3ux41tyCo/photo.jpg?sz=128", "display_name": "Harrison Mc", "link": "https://stackoverflow.com/users/7343786/harrison-mc"}, "edited": false, "score": 0, "creation_date": 1557425906, "post_id": 56065089, "comment_id": 98770674, "body": "if app.is_present(...) is supposed to either assign a value if app.is_present exists and if it does not exist then run a function and grab some values. I will edit with an update."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 2, "creation_date": 1557425964, "post_id": 56065089, "comment_id": 98770702, "body": "Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. If you don&#39;t call <code>server::best_server</code>, where is <code>best</code> supposed to come from?"}, {"owner": {"reputation": 33, "user_id": 11133070, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/016f05da345efdc43e0a71906af6b970?s=128&d=identicon&r=PG&f=1", "display_name": "DaemonSlayer2048", "link": "https://stackoverflow.com/users/11133070/daemonslayer2048"}, "edited": false, "score": 0, "creation_date": 1557426375, "post_id": 56065089, "comment_id": 98770856, "body": "Best comes from the user. When the user provides the server number via a subcommand argument."}, {"owner": {"reputation": 33, "user_id": 11133070, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/016f05da345efdc43e0a71906af6b970?s=128&d=identicon&r=PG&f=1", "display_name": "DaemonSlayer2048", "link": "https://stackoverflow.com/users/11133070/daemonslayer2048"}, "edited": false, "score": 0, "creation_date": 1557426721, "post_id": 56065089, "comment_id": 98771038, "body": "The github is available <a href=\"https://github.com/zpeters/speedtestr\" rel=\"nofollow noreferrer\">github.com/zpeters/speedtestr</a>"}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1557426760, "post_id": 56065089, "comment_id": 98771057, "body": "Section from the Book introducing scope: <a href=\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#variable-scope\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}, {"owner": {"reputation": 1414, "user_id": 6564029, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/WxyK5.jpg?s=128&g=1", "display_name": "Michail", "link": "https://stackoverflow.com/users/6564029/michail"}, "edited": false, "score": 0, "creation_date": 1557430340, "post_id": 56065089, "comment_id": 98772621, "body": "Also note that <code>if</code> is in fact an expression: <a href=\"https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#if-expressions\" rel=\"nofollow noreferrer\">book</a>, so it can be used in an assignment."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557452647, "post_id": 56065089, "comment_id": 98778574, "body": "Links are great, but they are <i>not sufficient</i>. Your <b>question</b> must contain the complete code needed to reproduce the problem."}], "answers": [{"tags": [], "owner": {"reputation": 22505, "user_id": 1411457, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/XqssD.png?s=128&g=1", "display_name": "harmic", "link": "https://stackoverflow.com/users/1411457/harmic"}, "is_accepted": false, "score": 0, "last_activity_date": 1557452689, "last_edit_date": 1557452689, "creation_date": 1557451720, "answer_id": 56069566, "question_id": 56065089, "link": "https://stackoverflow.com/questions/56065089/how-to-get-values-from-functions-from-within-an-if-statement/56069566#56069566", "title": "How to get values from functions from within an if statement", "body": "<p>When you use the <code>let</code> keyword you are declaring the given variable within the scope that the statement appears. The scope starts from the enclosing opening brace <code>{</code> and ends at the enclosing closing brace <code>}</code>.</p>\n\n<p>So this:</p>\n\n<pre><code>if app.is_present(\"Server\") {\n    let best = app.value_of(\"Server\").unwrap();\n}\n</code></pre>\n\n<p>declares a variable <code>best</code>, but that variable does not exist after the closing brace. That's why the error you are getting says the variable does not exist.</p>\n\n<p>One way to fix this is to take advantage of the fact that an <code>if</code> statement has a value: the value of the last expression within the selected branch. So you could say:</p>\n\n<pre><code>let best = if app.is_present(\"Server\") {\n    app.value_of(\"Server\").unwrap()\n} else {\n    server::best_server(\"3\").unwrap().to_owned().id.as_str()\n};\n</code></pre>\n\n<p>Note the lack of a <code>;</code> on the end of the expressions within the if statement branches. If there was a semicolon there then the value of the expression would not be assigned.</p>\n"}], "owner": {"reputation": 33, "user_id": 11133070, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/016f05da345efdc43e0a71906af6b970?s=128&d=identicon&r=PG&f=1", "display_name": "DaemonSlayer2048", "link": "https://stackoverflow.com/users/11133070/daemonslayer2048"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 247, "favorite_count": 0, "closed_date": 1557452764, "answer_count": 1, "score": -1, "last_activity_date": 1557452689, "creation_date": 1557424662, "last_edit_date": 1557431500, "question_id": 56065089, "link": "https://stackoverflow.com/questions/56065089/how-to-get-values-from-functions-from-within-an-if-statement", "closed_reason": "Duplicate", "title": "How to get values from functions from within an if statement", "body": "<p>I am trying to avoid running a function if the user presents some information. </p>\n\n<pre><code>if let Some(app) = app.subcommand_matches(\"Download\") {\n    if app.is_present(\"Server\") {\n        let best = app.value_of(\"Server\").unwrap();\n    } else {\n        let best = server::best_server(\"3\").unwrap().to_owned();\n        let best = best.id.as_str();\n    };\n    let bytes = app.value_of(\"bytes\").unwrap_or(\"100000024\");\n    let dl = server::download(best, bytes).unwrap();\n    println!(\"Download Results {:#?} mbps\", dl);\n}\n</code></pre>\n\n<p>I would expect the code to only run <code>best_server</code> if <code>app.is_present</code> exists.\nWhy does assigning \"best\" inside the if statement end in the following error :</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> --&gt; src/main.rs:80:35\n   |  \n80 |         let dl = server::download(best.id.as_str(), bytes).unwrap();  \n   |                                   ^^^^ not found in this scope  \n</code></pre>\n"}, {"tags": ["rust", "iterator", "lifetime"], "comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1557431416, "post_id": 56064905, "comment_id": 98773096, "body": "Related: <a href=\"https://stackoverflow.com/q/32300132\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> <a href=\"https://stackoverflow.com/q/47193584\">Is there an owned version of String::chars?</a>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557431674, "post_id": 56064905, "comment_id": 98773200, "body": "Another one: <a href=\"https://stackoverflow.com/q/43952104\">How can I store a Chars iterator in the same struct as the String it is iterating on?</a>"}, {"owner": {"reputation": 334, "user_id": 7669110, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/efd8243273b94edbd3323b028ecf3cc8?s=128&d=identicon&r=PG&f=1", "display_name": "Joshua Nelson", "link": "https://stackoverflow.com/users/7669110/joshua-nelson"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1557436197, "post_id": 56064905, "comment_id": 98774932, "body": "<a href=\"https://stackoverflow.com/a/47193986/7669110\">stackoverflow.com/a/47193986/7669110</a> did it! If I turned <code>buf.chars()</code> into <code>buf.chars().collect::&lt;Vec&lt;_&gt;&gt;().into_iter()</code> then it works fine"}], "owner": {"reputation": 334, "user_id": 7669110, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/efd8243273b94edbd3323b028ecf3cc8?s=128&d=identicon&r=PG&f=1", "display_name": "Joshua Nelson", "link": "https://stackoverflow.com/users/7669110/joshua-nelson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 72, "favorite_count": 0, "closed_date": 1557431367, "answer_count": 0, "score": 2, "last_activity_date": 1557431429, "creation_date": 1557423926, "question_id": 56064905, "link": "https://stackoverflow.com/questions/56064905/how-do-i-generate-an-iterator-based-off-some-underlying-data-in-a-struct-in-rust", "closed_reason": "Duplicate", "title": "How do I generate an iterator based off some underlying data in a struct in Rust?", "body": "<p>I want to create a chain of iterators, so that all IO is lazy. However, when I try to create an iterator in a struct based on some underlying data, I get an error saying 'lifetime cannot outlive method body'.</p>\n\n<p>I thought of storing the original buffer in the struct as well so the lifetimes match, but that gives me the same error. I looked at <a href=\"https://stackoverflow.com/a/27163349/7669110\">https://stackoverflow.com/a/27163349/7669110</a> for a while, but it doesn't compile with rustc 2018. What am I doing wrong? How can I generate an iterator in a struct from some underlying data?</p>\n\n<p>The strange thing is if I used a single iterator and don't generate it, it works fine:</p>\n\n<pre><code>use std::str::Chars;\n\nfn main() {\n    println!(\"{}\", IterContainer { iter: \"blah\".chars() }.next());\n}\n\nstruct IterContainer&lt;'a&gt; {\n    iter: Chars&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; IterContainer&lt;'a&gt; {\n    fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n        self.iter.next()\n    }\n}\n</code></pre>\n\n<p>Here's the smallest sample that still has the issue:</p>\n\n<pre><code>use std::io::{self, BufRead, BufReader, Read};\nuse std::str::Chars;\n\nfn main() {\n    println!(\"{}\", IterContainer {\n        reader: BufReader::new(io::stdin()),\n        buf: String::new(),\n        iter: \"\".chars()\n    }.next().unwrap());\n}\n\nstruct IterContainer&lt;'a, R: Read&gt; {\n    reader: BufReader&lt;R&gt;,\n    buf: String,\n    iter: Chars&lt;'a&gt;\n}\n\nimpl&lt;'a, R: Read&gt; IterContainer&lt;'a, R&gt; {\n    fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n        match self.iter.next() {\n            Some(c) =&gt; Some(c),\n            None =&gt; {\n                self.reader.read_line(&amp;mut self.buf);\n                self.iter = self.buf.chars();\n                self.iter.next()\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I tried something similar but with <code>Lines</code> instead of <code>BufReader</code> and I got similar errors.</p>\n\n<p>I expect this to compile and print \"b\", but instead it fails with a lot of errors:</p>\n\n<pre><code>error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements\n  --&gt; tmp2.rs:24:38\n   |\n24 |                 self.iter = self.buf.chars();\n   |                                      ^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the method body at 19:5...\n  --&gt; tmp2.rs:19:5\n   |\n19 | /     fn next(&amp;mut self) -&gt; Option&lt;char&gt; {\n20 | |         match self.iter.next() {\n21 | |             Some(c) =&gt; Some(c),\n22 | |             None =&gt; {\n...  |\n27 | |         }\n28 | |     }\n   | |_____^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; tmp2.rs:24:29\n   |\n24 |                 self.iter = self.buf.chars();\n   |                             ^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the impl at 18:6...\n  --&gt; tmp2.rs:18:6\n   |\n18 | impl&lt;'a, R: Read&gt; IterContainer&lt;'a, R&gt; {\n   |      ^^\n   = note: ...so that the expression is assignable:\n           expected std::str::Chars&lt;'a&gt;\n              found std::str::Chars&lt;'_&gt;\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 345, "user_id": 1041831, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/63542ac25e09115c3ba823097a1c825f?s=128&d=identicon&r=PG", "display_name": "NougatRillettes", "link": "https://stackoverflow.com/users/1041831/nougatrillettes"}, "is_accepted": true, "score": 2, "last_activity_date": 1557423924, "creation_date": 1557423924, "answer_id": 56064904, "question_id": 56064633, "link": "https://stackoverflow.com/questions/56064633/how-to-iterate-over-itertoolschunks/56064904#56064904", "title": "How to iterate over itertools::chunks", "body": "<p>I believe you have misread the doc here. The right part for you is <a href=\"https://docs.rs/itertools/0.8.0/itertools/trait.Itertools.html#method.chunks\" rel=\"nofollow noreferrer\">here</a>. Where you'll see that (emphasis mine):</p>\n\n<blockquote>\n  <p>Return an <strong>iterable</strong> that can chunk the iterator.</p>\n  \n  <p>IntoChunks is based on GroupBy: <strong>it is iterable (implements</strong>\n  <strong>IntoIterator, not Iterator)</strong>, and it only buffers if several chunk\n  iterators are alive at the same time.</p>\n</blockquote>\n\n<p>Hence, you need to use <code>into_iter</code> before your <code>map</code>.</p>\n"}], "owner": {"reputation": 75, "user_id": 5708908, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SKo2b.jpg?s=128&g=1", "display_name": "avshyz", "link": "https://stackoverflow.com/users/5708908/avshyz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 694, "favorite_count": 1, "accepted_answer_id": 56064904, "answer_count": 1, "score": 2, "last_activity_date": 1557423924, "creation_date": 1557422847, "question_id": 56064633, "link": "https://stackoverflow.com/questions/56064633/how-to-iterate-over-itertoolschunks", "title": "How to iterate over itertools::chunks", "body": "<p>I'm a new rustacean, so my code's quality is questionable.\nWhile trying to get the ropes of rust, I've come across the following problem.</p>\n\n<p>I have a vector of bits (<code>bool</code>s), and I want to convert then into a vector of bytes (<code>u8</code>)</p>\n\n<p>My first implementation looked like that</p>\n\n<pre><code>let mut res: Vec&lt;u8&gt; = vec![];\nlet mut curr = 0;\nfor (idx, &amp;bit) in bits.iter().enumerate() {\n    let x = (idx % 8) as u8;\n    if idx % 8 != 0 || idx == 0 {\n        curr = set_bit_at(curr, (7 - (idx % 8)) as u32, bit).unwrap();\n    } else {\n        res.push(curr);\n        curr = 0\n    }\n}\nres.push(curr);\n</code></pre>\n\n<p>It worked, but It felt pretty ugly, so I've tried to implement it using the crate itertools.</p>\n\n<pre><code>let res = bits.iter()\n    .chunks(8)\n    .map(|split_byte: Vec&lt;u8&gt;| {\n        split_byte.fold(0, |res, &amp;bit| (res &lt;&lt; 1) | (bit as u8))\n    })\n    .collect();\n</code></pre>\n\n<p>It sure looks nicer, but sadly - it didn't work.</p>\n\n<p>Even though it seems as if <code>chunks</code>'s return type <a href=\"https://docs.rs/itertools/0.4.8/itertools/struct.Chunks.html\" rel=\"nofollow noreferrer\">seems</a> to be an iterator, this line produced the following error</p>\n\n<pre><code>error[E0599]: no method named `map` found for type `bits::itertools::IntoChunks&lt;std::slice::Iter&lt;'_, bool&gt;&gt;` in the current scope\n</code></pre>\n\n<p>Could anyone tell what did I do wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1557423170, "post_id": 56064614, "comment_id": 98769410, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ca24577f858ac6e9511cc259f0c3b6e1\" rel=\"nofollow noreferrer\">One way to use an HRTB to solve your problem</a>, as the duplicate suggests. See <a href=\"https://stackoverflow.com/q/44343166/3650362\">How do I write the lifetimes for references in a type constraint when one of them is a local reference?</a> and also <a href=\"https://stackoverflow.com/q/35592750/3650362\">How does for&lt;&gt; syntax differ from a regular lifetime bound?</a>"}], "owner": {"reputation": 345, "user_id": 1041831, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/63542ac25e09115c3ba823097a1c825f?s=128&d=identicon&r=PG", "display_name": "NougatRillettes", "link": "https://stackoverflow.com/users/1041831/nougatrillettes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 28, "favorite_count": 0, "closed_date": 1557423577, "answer_count": 0, "score": 2, "last_activity_date": 1557431277, "creation_date": 1557422762, "question_id": 56064614, "link": "https://stackoverflow.com/questions/56064614/i-cant-understand-the-lifetime-issue-in-this-mcve-inspired-from-my-code-for-a-o", "closed_reason": "Duplicate", "title": "I can&#39;t understand the lifetime issue in this MCVE inspired from my code for a ODE solver", "body": "<p>I am trying to write code for a Runge-Kutta solver, with the idea that it should solve ODE on \"big\" object and hence should be generic and not use copy at every line. I have a lifetime issue which I have brought done to the following MCVE (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=65bbb7794996c11ac84d60ad0af86a71\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>use std::ops;\n\nfn step&lt;'a, 'b, Y, F&gt;(f: F, y: &amp;'a Y, t: f64) -&gt; ()\nwhere\n    'a: 'b,\n    F: Fn(&amp;Y, f64) -&gt; Y,\n    f64: ops::Mul&lt;&amp;'b Y, Output = Y&gt;,\n{\n    let k0 = f(y, t);\n    let foo = 1. / 5. * &amp;k0;\n}\n</code></pre>\n\n<p>I get the following lifetime error, which I just can't seem to solve. Could you help me break done what is happening ?</p>\n\n<pre><code>error[E0597]: `k0` does not live long enough\n  --&gt; src/lib.rs:10:25\n   |\n3  | fn step&lt;'a, 'b, Y, F&gt;(f: F, y: &amp;'a Y, t: f64) -&gt; ()\n   |             -- lifetime `'b` defined here\n...\n10 |     let foo = 1. / 5. * &amp;k0;\n   |                         ^^^\n   |                         |\n   |                         borrowed value does not live long enough\n   |                         requires that `k0` is borrowed for `'b`\n11 | }\n   | - `k0` dropped here while still borrowed\n</code></pre>\n"}, {"tags": ["rust", "blockchain", "substrate"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557415675, "post_id": 56062757, "comment_id": 98765687, "body": "The sentence immediately after your code example is: <i>If your events do not use any generics (e.g. just Rust primitive types), you should omit the <code>&lt;T&gt;</code></i>. Does that answer your question?"}, {"owner": {"reputation": 174, "user_id": 7053368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40a170f3cf7a1f50786bcf71d87e6954?s=128&d=identicon&r=PG&f=1", "display_name": "mountbranch", "link": "https://stackoverflow.com/users/7053368/mountbranch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557415846, "post_id": 56062757, "comment_id": 98765808, "body": "It answers specifically what I should do in that situation, but I still don&#39;t fully understand what <code>&lt;T&gt;</code> means in that context. Maybe it&#39;s more of a rust-question than substrate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557415965, "post_id": 56062757, "comment_id": 98765869, "body": "Perhaps reading <a href=\"https://doc.rust-lang.org/book/ch10-01-syntax.html\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a> would answer your question then? <a href=\"https://stackoverflow.com/q/45473626/155423\">Why does Rust require generic type declarations after the \u201cimpl\u201d keyword?</a> may also be of interest"}, {"owner": {"reputation": 174, "user_id": 7053368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40a170f3cf7a1f50786bcf71d87e6954?s=128&d=identicon&r=PG&f=1", "display_name": "mountbranch", "link": "https://stackoverflow.com/users/7053368/mountbranch"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557416231, "post_id": 56062757, "comment_id": 98766050, "body": "Yeah the first reference is very helpful! Thanks"}], "answers": [{"comments": [{"owner": {"reputation": 174, "user_id": 7053368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40a170f3cf7a1f50786bcf71d87e6954?s=128&d=identicon&r=PG&f=1", "display_name": "mountbranch", "link": "https://stackoverflow.com/users/7053368/mountbranch"}, "edited": false, "score": 0, "creation_date": 1557490766, "post_id": 56077163, "comment_id": 98793027, "body": "Thanks Shawn, that&#39;s very helpful from a Substrate-point of view!"}], "tags": [], "owner": {"reputation": 9375, "user_id": 1396977, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/PylBh.jpg?s=128&g=1", "display_name": "Shawn Tabrizi", "link": "https://stackoverflow.com/users/1396977/shawn-tabrizi"}, "is_accepted": true, "score": 4, "last_activity_date": 1557489436, "last_edit_date": 1557489436, "creation_date": 1557489113, "answer_id": 56077163, "question_id": 56062757, "link": "https://stackoverflow.com/questions/56062757/whats-the-function-of-t-in-substrates-fn-deposit-eventt-default/56077163#56077163", "title": "What&#39;s the function of `&lt;T&gt;` in Substrate&#39;s `fn deposit_event&lt;T&gt;() = default`?", "body": "<p>In the context of Substrate, there are a few things to answer here.</p>\n\n<h1>Generic Types</h1>\n\n<p>Each Substrate module has the ability to define the custom types needed for the module, all of which are required to implement some traits. Rather than strongly defining these types, using traits allows us to ensure that the types have certain properties, but are not limited in what the type can be. These <em>generic</em> type definitions live in <code>trait Trait</code>, which must be defined in each module.</p>\n\n<p>Here is an example of the custom types defined in the <code>system</code> module, which is used in nearly all other modules:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait Trait: 'static + Eq + Clone {\n    /// The aggregated `Origin` type used by dispatchable calls.\n    type Origin: ...\n\n    /// Account index (aka nonce) type. This stores the number of previous transactions associated with a sender\n    /// account.\n    type Index: ...\n\n    /// The block number type used by the runtime.\n    type BlockNumber: ...\n\n    /// The output of the `Hashing` function.\n    type Hash: ...\n\n    /// The hashing system (algorithm) being used in the runtime (e.g. Blake2).\n    type Hashing: Hash&lt;Output = Self::Hash&gt;;\n\n    /// Collection of (light-client-relevant) logs for a block to be included verbatim in the block header.\n    type Digest: ...\n\n    /// The user account identifier type for the runtime.\n    type AccountId: ...\n\n    /// Converting trait to take a source type and convert to `AccountId`.\n    ///\n    /// Used to define the type and conversion mechanism for referencing accounts in transactions. It's perfectly\n    /// reasonable for this to be an identity conversion (with the source type being `AccountId`), but other modules\n    /// (e.g. Indices module) may provide more functional/efficient alternatives.\n    type Lookup: StaticLookup&lt;Target = Self::AccountId&gt;;\n\n    /// The block header.\n    type Header: ...\n\n    /// The aggregated event type of the runtime.\n    type Event: Parameter + Member + From&lt;Event&gt;;\n\n    /// A piece of information that can be part of the digest (as a digest item).\n    type Log: From&lt;Log&lt;Self&gt;&gt; + Into&lt;DigestItemOf&lt;Self&gt;&gt;;\n}\n</code></pre>\n\n<p>In your custom module, you will define something like:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// The module's configuration trait.\npub trait Trait: system::Trait {\n    /// The overarching event type.\n    type Event: From&lt;Event&lt;Self&gt;&gt; + Into&lt;&lt;Self as system::Trait&gt;::Event&gt;;\n}\n</code></pre>\n\n<p>Note here that we have defined our own <code>Event</code> type, which our module can now use, but also we have <em>inherited</em> the traits from the <code>system</code> module (<code>system::Trait</code>), so we can also use all those types too!</p>\n\n<h1>Using Generic Types</h1>\n\n<p>Now that we have defined some custom types in our runtime module, we can start to use them throughout our module logic.</p>\n\n<p>You will always see a line like the second line in this code snippet:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>decl_storage! {\n    trait Store for Module&lt;T: Trait&gt; as Sudo {\n        /// The `AccountId` of the sudo key.\n        Key get(key) config(): T::AccountId;\n    }\n}\n</code></pre>\n\n<p>Some of this line is macro magic, but importantly you see we define <code>Module&lt;T: Trait&gt;</code>. This means we have assigned our module's <code>trait Trait</code> as the generic parameter for <code>Module</code> under the alias of <code>T</code>.</p>\n\n<p>Thus, we can then use <code>T</code> to reference these special types like we did above:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>T::AccountId\n</code></pre>\n\n<p>Going full circle, we can access this type because we have inherited it from the <code>system::Trait</code> definition!</p>\n\n<h1>Deposit Event Macro Generation</h1>\n\n<p>To finally answer your question, the <code>decl_module!</code> function generates the function body of the <code>deposit_event</code> to save you from writing the same code over and over.</p>\n\n<p>We detect the pre-defined function name <code>deposit_event</code>, and check for <code>= default;</code>, and then replace that with a working <code>deposit_event</code> function.</p>\n\n<p>However, when generating this function, the macro does not know if it should use a function where the input event is generic, or the input event does not use generics. Thus, you need to \"give it a hint\" by saying <code>deposit_event&lt;T&gt;()</code> or just <code>deposit_event()</code>.</p>\n\n<p>It will then produce the right version of the function which will work with the types in your module. If your module events uses any generic types, like <code>T::AccountId</code> or <code>T::Balance</code>, you will also need to define the generic version of <code>deposit_event</code>.</p>\n"}], "owner": {"reputation": 174, "user_id": 7053368, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/40a170f3cf7a1f50786bcf71d87e6954?s=128&d=identicon&r=PG&f=1", "display_name": "mountbranch", "link": "https://stackoverflow.com/users/7053368/mountbranch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 261, "favorite_count": 1, "accepted_answer_id": 56077163, "answer_count": 1, "score": -1, "last_activity_date": 1557489436, "creation_date": 1557415466, "last_edit_date": 1557488805, "question_id": 56062757, "link": "https://stackoverflow.com/questions/56062757/whats-the-function-of-t-in-substrates-fn-deposit-eventt-default", "title": "What&#39;s the function of `&lt;T&gt;` in Substrate&#39;s `fn deposit_event&lt;T&gt;() = default`?", "body": "<p>In reference to the <a href=\"http://shawntabrizi.com/substrate-collectables-workshop/#/2/creating-an-event?id=depositing-an-event\" rel=\"nofollow noreferrer\">Substrate Collectables Workshop</a>, what does the <code>&lt;T&gt;</code> actually do and refer to in <code>fn deposit_event&lt;T&gt;() = default;</code>? Can I omit it when my <code>Event</code> doesn't include for example <code>AccountId</code>? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1557413287, "post_id": 56061899, "comment_id": 98764169, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/36597987/155423\">Cyclic reference of RefCell borrows in traversal</a>. If you disagree, please <b><a href=\"https://stackoverflow.com/posts/56061899/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557413845, "post_id": 56061899, "comment_id": 98764536, "body": "See also <a href=\"https://stackoverflow.com/q/29401626/155423\">How do I return a reference to something inside a RefCell without breaking encapsulation?</a> and [How do I borrow a RefCell&lt;HashMap&gt;, find a key, and return a reference to the result? [duplicate]](<a href=\"https://stackoverflow.com/q/30281664/155423\">stackoverflow.com/q/30281664/155423</a>)"}, {"owner": {"reputation": 403, "user_id": 662791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4f0d90bde6da52891079ea2aa8c13056?s=128&d=identicon&r=PG", "display_name": "Ankit", "link": "https://stackoverflow.com/users/662791/ankit"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557420558, "post_id": 56061899, "comment_id": 98768218, "body": "@Shepmaster Using Rc as done in the linked answer, solves the problem. Thanks."}], "owner": {"reputation": 403, "user_id": 662791, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4f0d90bde6da52891079ea2aa8c13056?s=128&d=identicon&r=PG", "display_name": "Ankit", "link": "https://stackoverflow.com/users/662791/ankit"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 68, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1557413046, "creation_date": 1557412742, "last_edit_date": 1557413046, "question_id": 56061899, "link": "https://stackoverflow.com/questions/56061899/how-to-borrow-a-reference-to-something-inside-a-refcell-which-itself-is-inside-a", "title": "How to borrow a reference to something inside a RefCell which itself is inside an Option?", "body": "<p>I am creating a binary tree with a node defined like this:</p>\n\n<pre><code>use std::cell::{Ref, RefCell};\n\npub struct Node&lt;T&gt;\nwhere\n    T: Copy + PartialOrd + std::fmt::Display,\n{\n    data: T,\n    left: Option&lt;RefCell&lt;Box&lt;Node&lt;T&gt;&gt;&gt;&gt;,\n    right: Option&lt;RefCell&lt;Box&lt;Node&lt;T&gt;&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>I am trying to implement a function <code>find</code> which should take a root node and a key and return a reference to the node which matches the given key. I tried to implement <code>find</code> recursively but I am having trouble taking the left and right subtree out of the <code>Option</code> and <code>RefCell</code>.</p>\n\n<pre><code>fn find&lt;T&gt;(node: Ref&lt;Box&lt;Node&lt;T&gt;&gt;&gt;, data: T) -&gt; Option&lt;Ref&lt;Box&lt;Node&lt;T&gt;&gt;&gt;&gt;\nwhere\n    T: Copy + PartialOrd + std::fmt::Display,\n{\n    if node.data == data {\n        return Some(node);\n    } else if node.data &gt; data {\n        if node.left.is_some() {\n            // Error: Cannot move out of borrowed content\n            let myref = node.left.unwrap().borrow();\n            return find(myref, data);\n        } else {\n            return None;\n        }\n    } else {\n        if node.right.is_some() {\n            // Error: returns a value referencing data owned by the current function\n            let myref = node.right.as_ref().unwrap().borrow();\n            return find(myref, data);\n        } else {\n            return None;\n        }\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/lib.rs:21:25\n   |\n21 |             let myref = node.left.unwrap().borrow();\n   |                         ^^^^^^^^^ cannot move out of borrowed content\n\nerror[E0515]: cannot return value referencing temporary value\n  --&gt; src/lib.rs:22:20\n   |\n21 |             let myref = node.left.unwrap().borrow();\n   |                         ------------------ temporary value created here\n22 |             return find(myref, data);\n   |                    ^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function\n\nerror[E0515]: cannot return value referencing function parameter `node`\n  --&gt; src/lib.rs:30:20\n   |\n29 |             let myref = node.right.as_ref().unwrap().borrow();\n   |                         ---- `node` is borrowed here\n30 |             return find(myref, data);\n   |                    ^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function\n</code></pre>\n"}, {"tags": ["struct", "rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "edited": false, "score": 0, "creation_date": 1557412373, "post_id": 56061199, "comment_id": 98763680, "body": "Thanks. I guess I understand the compiler&#39;s reasoning now, sadly it is not helpful for solving my original issue. I have the reference inside struct inside <code>PhantomData</code>. So it is not really held by the struct, I just need to put it there so it can be as a generic argument. But apparently it is all the same to the compiler. I do need the lifetime in <code>foo</code>."}], "tags": [], "owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "is_accepted": true, "score": 10, "last_activity_date": 1557411038, "last_edit_date": 1557411038, "creation_date": 1557410533, "answer_id": 56061199, "question_id": 56060983, "link": "https://stackoverflow.com/questions/56060983/why-cant-i-call-a-mutating-function-more-than-once/56061199#56061199", "title": "Why can&#39;t I call a mutating function more than once?", "body": "<p>When you declare <code>foo</code> as</p>\n\n<pre><code> fn foo(&amp;'a mut self) {}\n</code></pre>\n\n<p>you say the mutable borrow of <code>self</code> has the same lifetime <code>'a</code> as the embedded string. So it stays borrowed as long as the struct lives. Calling <code>foo</code> is like definitely giving away the ownership of the struct.</p>\n\n<p>You can fix it by declaring <code>foo</code> as</p>\n\n<pre><code> fn foo(&amp;mut self) {}\n</code></pre>\n"}], "owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 103, "favorite_count": 2, "closed_date": 1557411238, "accepted_answer_id": 56061199, "answer_count": 1, "score": 6, "last_activity_date": 1557411442, "creation_date": 1557409905, "last_edit_date": 1557411314, "question_id": 56060983, "link": "https://stackoverflow.com/questions/56060983/why-cant-i-call-a-mutating-function-more-than-once", "closed_reason": "Duplicate", "title": "Why can&#39;t I call a mutating function more than once?", "body": "<p>This is based on my previous <a href=\"https://stackoverflow.com/questions/56058392/borrow-checker-error-after-adding-generic-parameter-to-struct\">question</a>.</p>\n\n<p>I have code that is failing with borrow checker error and I reduced it as much as I could. This is the result:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyStruct&lt;'a&gt; {\n    s: &amp;'a str,\n}\n\nimpl&lt;'a&gt; MyStruct&lt;'a&gt; {\n    fn foo(&amp;'a mut self) {}\n}\n\nfn main() {\n    let mut m = MyStruct { s: \"aaa\" };\n\n    m.foo();\n    m.foo();\n}\n</code></pre>\n\n<p>It is failing with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `m` as mutable more than once at a time\n  --&gt; src/main-x.rs:13:5\n   |\n12 |     m.foo();\n   |     - first mutable borrow occurs here\n13 |     m.foo();\n   |     ^\n   |     |\n   |     second mutable borrow occurs here\n   |     first borrow later used here\n</code></pre>\n\n<p>The code was reduced so much that it does nothing useful and could be fixed for example by removing the <code>'a</code> lifetime from the <code>foo</code> function. But I would like to understand why is the code not ok as it is.</p>\n\n<p>My understanding is that <code>MyStruct</code> contains reference to <code>str</code> of some lifetime <code>'a</code> and <code>foo</code> can be called with <code>self</code> pointing to <code>MyStruct</code> of the same lifetime. I don't see why is <code>m</code> considered mutably borrowed after the first call to <code>foo</code>.</p>\n"}, {"tags": ["rust", "serde"], "comments": [{"owner": {"reputation": 332774, "user_id": 263525, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/ec289925069b35f18f1230b90dc654e5?s=128&d=identicon&r=PG", "display_name": "Denys S&#233;guret", "link": "https://stackoverflow.com/users/263525/denys-s%c3%a9guret"}, "edited": false, "score": 0, "creation_date": 1557407809, "post_id": 56060077, "comment_id": 98760929, "body": "Non writing the line is how today you serialize a lack of value in TOML (somehow <a href=\"https://github.com/toml-lang/toml/issues/146\" rel=\"nofollow noreferrer\">relevant discussion</a>). It&#39;s easy."}, {"owner": {"reputation": 482, "user_id": 4638486, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oUnnF.png?s=128&g=1", "display_name": "Bomgar", "link": "https://stackoverflow.com/users/4638486/bomgar"}, "edited": false, "score": 0, "creation_date": 1557408062, "post_id": 56060077, "comment_id": 98761085, "body": "Ok it seems null is not possible in toml. I want to write a configuration file and signal to the user that the key exists. Any suggestions? Writing a comment instead of a key value pair would be a great alternative but that would definitely require something custom."}], "owner": {"reputation": 482, "user_id": 4638486, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oUnnF.png?s=128&g=1", "display_name": "Bomgar", "link": "https://stackoverflow.com/users/4638486/bomgar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 110, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1557410988, "creation_date": 1557406959, "last_edit_date": 1557410988, "question_id": 56060077, "link": "https://stackoverflow.com/questions/56060077/how-do-i-generate-a-toml-file-with-placeholder-lines-showing-all-missing-values", "title": "How do I generate a TOML file with placeholder lines showing all missing values using Serde?", "body": "<p>I want the Serde serializer to write empty values to the TOML output. The result is a configuration file so it would be great if I could include empty keys so the user sees that the option is available.</p>\n\n<pre><code>struct X {\n    attr: Option&lt;String&gt;,\n}\n</code></pre>\n\n<p>should yield</p>\n\n<pre><code>attr = \"value\"\n</code></pre>\n\n<p>or something like this</p>\n\n<pre><code># attr = \n</code></pre>\n\n<p>It does not have to be a comment, just something that shows all possible keys.</p>\n\n<p>Do I have to write my own <code>Serializer</code> or is there something built-in? I use the <code>derive</code> annotation for my structs, but I don't know if that is relevant.</p>\n"}, {"tags": ["rust", "future"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1557678436, "post_id": 56058494, "comment_id": 98837059, "body": "If you have not already, I would encourage you to make a post on either URLO or IRLO. The question is tricky enough that I would not mind the opinion of experts (withoutboats, notably) to set my mind at ease. I have a feeling that it&#39;s safe (<code>Pin</code> only being about stability over suspension points), but..."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557581544, "post_id": 56088431, "comment_id": 98818064, "body": "Thank you for the answer. <i>I think this is indeed a bug, but I&#39;m not 100% sure</i> \u2014 is there some way that you could remove any doubt one way or the other?"}, {"owner": {"reputation": 2206, "user_id": 449477, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2df7ce6bedeb6a59d044d6a7100589ae?s=128&d=identicon&r=PG", "display_name": "Pauan", "link": "https://stackoverflow.com/users/449477/pauan"}, "edited": false, "score": 1, "creation_date": 1557608974, "post_id": 56088431, "comment_id": 98824569, "body": "Putting <code>F: Unpin</code> isn&#39;t necessary, because it has an <code>F: FnOnce(Fut::Output) -&gt; T</code> bound, and closures are always <code>Unpin</code> (at least for now). Though putting <code>F: Unpin</code> probably doesn&#39;t hurt anything either."}, {"owner": {"reputation": 2206, "user_id": 449477, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2df7ce6bedeb6a59d044d6a7100589ae?s=128&d=identicon&r=PG", "display_name": "Pauan", "link": "https://stackoverflow.com/users/449477/pauan"}, "edited": false, "score": 1, "creation_date": 1557661362, "post_id": 56088431, "comment_id": 98832692, "body": "Actually, I just tested it. It <i>is</i> possible for a closure to be <code>!Unpin</code> if it closes over <code>!Unpin</code> values. So it may indeed be a bug to not require <code>F: Unpin</code>!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2206, "user_id": 449477, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2df7ce6bedeb6a59d044d6a7100589ae?s=128&d=identicon&r=PG", "display_name": "Pauan", "link": "https://stackoverflow.com/users/449477/pauan"}, "edited": false, "score": 0, "creation_date": 1557678312, "post_id": 56088431, "comment_id": 98837030, "body": "@Pauan: The <code>FnOnce</code> seems to limit the observability here. One of the key points of <code>Pin</code> is to pin a value in memory across suspension points, however even if <code>F</code> closes over a <code>!Unpin</code> value, this value is never accessed across suspension points, it&#39;s only accessed once."}], "tags": [], "owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "is_accepted": false, "score": 4, "last_activity_date": 1561225310, "last_edit_date": 1561225310, "creation_date": 1557561994, "answer_id": 56088431, "question_id": 56058494, "link": "https://stackoverflow.com/questions/56058494/when-is-it-safe-to-move-a-member-value-out-of-a-pinned-future/56088431#56088431", "title": "When is it safe to move a member value out of a pinned future?", "body": "<p><strong>edit</strong>: This answer is incorrect. It remains here for posterity.</p>\n\n<p>Let's begin by recalling why <code>Pin</code> was introduced in the first place: we want to statically ensure that self-referential futures cannot be moved, thus invalidating their internal references.</p>\n\n<p>With that in mind, let's take a look at the definition of <code>Map</code>.</p>\n\n<pre><code>pub struct Map&lt;Fut, F&gt; {\n    future: Fut,\n    f: Option&lt;F&gt;,\n}\n</code></pre>\n\n<p><code>Map</code> has two fields, the first one stores a future, the second stores a closure which maps the result of that future to another value. We wish to support storing self-referential types directly in <code>future</code> without placing them behind a pointer. This means that if <code>Fut</code> is a self-referential type, <code>Map</code> cannot be moved once it is constructed. That is why we must use <code>Pin&lt;&amp;mut Map&gt;</code> as the receiver for <code>Future::poll</code>. If a normal mutable reference to a <code>Map</code> containing a self-referential future was ever exposed to an implementor of <code>Future</code>, users could cause UB using only safe code by causing the <code>Map</code> to be moved using <code>mem::replace</code>. </p>\n\n<p>However, we don't need to support storing self-referential types in <code>f</code>. If we assume that the self-referential part of a <code>Map</code> is wholly contained in <code>future</code>, we can freely modify <code>f</code> as long as we don't allow <code>future</code> to be moved.</p>\n\n<p>While a self-referential closure would be very unusual, the assumption that <code>f</code> be safe to move (which is equivalent to <code>F: Unpin</code>) is not explicitly stated anywhere. However, we still move the value in <code>f</code> in <code>Future::poll</code> by calling <code>take</code>! I think this is indeed a bug, but I'm not 100% sure. I think the <code>f()</code> getter should require <code>F: Unpin</code> which would mean <code>Map</code> can only implement <code>Future</code> when the closure argument is safe to be moved from behind a <code>Pin</code>.</p>\n\n<p>It's very possible that I'm overlooking some subtleties in the pin API here, and the implementation is indeed safe. I'm still wrapping my head around it as well.</p>\n"}, {"comments": [{"owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "edited": false, "score": 1, "creation_date": 1557778860, "post_id": 56117052, "comment_id": 98871827, "body": "It would be helpful to mention <i>why</i> <code>Map</code> chooses not to have a pin projection to <code>f</code>. Any self-referential <code>F</code> will be invalidated during <code>poll</code> causing UB. I think the answer is that the user observes <code>f</code> being moved into <code>Map</code> upon construction (thus invalidating any internal references) and we don&#39;t need to do anything with <code>f</code> until after <code>take</code> is called, so treating <code>f</code> as pinned (and then requiring <code>F: Unpin</code> everywhere) doesn&#39;t add anything: <code>T: Unpin</code> only has semantic value when a <code>Pin&lt;P&lt;T&gt;&gt;</code> exists. It would, however, lint if people try to pass a self-referential <code>f</code> into <code>Map</code>."}, {"owner": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "edited": false, "score": 1, "creation_date": 1557778970, "post_id": 56117052, "comment_id": 98871875, "body": "Although I guess the whole point of <code>Pin</code>/<code>Unpin</code> versus (a hypothetical) <code>!Move</code> is that we don&#39;t want it to infect all APIs where a move occurs."}, {"owner": {"reputation": 546, "user_id": 10776437, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QZrya.png?s=128&g=1", "display_name": "Daniel H-M", "link": "https://stackoverflow.com/users/10776437/daniel-h-m"}, "reply_to_user": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "edited": false, "score": 0, "creation_date": 1557830929, "post_id": 56117052, "comment_id": 98888577, "body": "@ecstaticm0rse yes, this is a good example of <code>Pin</code> not being <code>!Move</code>. The only thing that needs to be pinned here is the inner future, wrapped in <code>Map</code>. But given that the only thing actually pinned (when polled) is the outermost wrapper, the pin projection is needed to guarantee the &quot;transitivity&quot;  of the Pin applying to the inner future. In all this business the closure is just a good old value safely moved into the structure; it would only be possible for it to be self-referential if it already dealt with it on its own (<i>e.g.</i>, behind a pointer (<code>F = Pin&lt;Box&lt;...&gt;&gt;</code>)), as usual."}, {"owner": {"reputation": 546, "user_id": 10776437, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QZrya.png?s=128&g=1", "display_name": "Daniel H-M", "link": "https://stackoverflow.com/users/10776437/daniel-h-m"}, "reply_to_user": {"reputation": 890, "user_id": 11389321, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9048fa908f45d0795f0a5c47eaa8a637?s=128&d=identicon&r=PG&f=1", "display_name": "ecstaticm0rse", "link": "https://stackoverflow.com/users/11389321/ecstaticm0rse"}, "edited": false, "score": 0, "creation_date": 1557831321, "post_id": 56117052, "comment_id": 98888784, "body": "Or in other words: worst case scenario, <code>F : !Unpin</code>, which means that once behind a <code>Pin</code>ned pointer, the closure cannot move out. But given the lack of <code>Pin</code> projection in the <code>Map</code> case, it is actually never pinned: <b>sitting next to a pinned value</b> does not semantically <code>Pin</code> you; you can always stand up and leave (leaving a <code>Noone</code> [here] note behind :) )."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1558141436, "post_id": 56117052, "comment_id": 99014534, "body": "Thanks for the answer! I&#39;ve made some stylistic edits, please check to make sure I haven&#39;t lost any meaning. Can you explain why you&#39;ve grouped &quot;use <code>unsafe</code> to move&quot; underneath the <code>Unpin</code> bullet? What&#39;s the specific relation between those two points?"}, {"owner": {"reputation": 546, "user_id": 10776437, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QZrya.png?s=128&g=1", "display_name": "Daniel H-M", "link": "https://stackoverflow.com/users/10776437/daniel-h-m"}, "edited": false, "score": 0, "creation_date": 1558268724, "post_id": 56117052, "comment_id": 99036914, "body": "When you get a <code>Pin&lt;&amp;mut Wrapper&lt;_&gt;&gt;</code> (and you don&#39;t know if it is<code>Unpin</code>), if you want to move <i>anything</i> out of the struct you need <code>&amp;mut _</code> references and thus need to use <code>unsafe</code> (actually, with interior mutability you could move out using a <code>&amp; _</code> reference, but it is alsto the reason why wrappers with interior mutability <b>cannot</b> offer structural pinning, thus ruling out the first bullet situation). Hence my <i>use <code>unsafe</code> to move</i> phrasing.  Such usage of <code>unsafe</code> is sound <i>only in two cases</i>: when not moving, or when dealing with a non structurally-pinned field."}], "tags": [], "owner": {"reputation": 546, "user_id": 10776437, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QZrya.png?s=128&g=1", "display_name": "Daniel H-M", "link": "https://stackoverflow.com/users/10776437/daniel-h-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1558141297, "last_edit_date": 1558141297, "creation_date": 1557767897, "answer_id": 56117052, "question_id": 56058494, "link": "https://stackoverflow.com/questions/56058494/when-is-it-safe-to-move-a-member-value-out-of-a-pinned-future/56117052#56117052", "title": "When is it safe to move a member value out of a pinned future?", "body": "<p>It is all about structural pinning.</p>\n\n<p>First, I will use the syntax <code>P&lt;T&gt;</code> to mean something like <code>impl Deref&lt;Target = T&gt;</code> \u2014 some (smart) pointer type <code>P</code> that <code>Deref::deref</code>s to a <code>T</code>. <code>Pin</code> only \"applies\" to / makes sense on such (smart) pointers.</p>\n\n<p>Let's say we have:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Wrapper&lt;Field&gt; {\n    field: Field,\n}\n</code></pre>\n\n<p>The initial question is</p>\n\n<blockquote>\n  <p>Can we get a <code>Pin&lt;P&lt;Field&gt;&gt;</code> from a <code>Pin&lt;P&lt;Wrapper&lt;Field&gt;&gt;&gt;</code>, by \"projecting\" our <code>Pin&lt;P&lt;_&gt;&gt;</code> from the <code>Wrapper</code> to its <code>field</code>?</p>\n</blockquote>\n\n<p>This requires the basic projection <code>P&lt;Wrapper&lt;Field&gt;&gt; -&gt; P&lt;Field&gt;</code>, which is only possible for:</p>\n\n<ul>\n<li><p>shared references (<code>P&lt;T&gt; = &amp;T</code>). This is not a very interesting case given that <code>Pin&lt;P&lt;T&gt;&gt;</code> always <a href=\"https://doc.rust-lang.org/core/ops/trait.Deref.html#impl-Deref\" rel=\"noreferrer\"><code>deref</code></a>s to <code>T</code>.</p></li>\n<li><p>unique references (<code>P&lt;T&gt; = &amp;mut T</code>).</p></li>\n</ul>\n\n<p>I will use the syntax <code>&amp;[mut] T</code> for this type of projection.</p>\n\n<p>The question now becomes:</p>\n\n<blockquote>\n  <p>Can we go from <code>Pin&lt;&amp;[mut] Wrapper&lt;Field&gt;&gt;</code> to <code>Pin&lt;&amp;[mut] Field&gt;</code>?</p>\n</blockquote>\n\n<p>The point that may be unclear from the documentation is that it is up to the creator of <code>Wrapper</code> to decide!</p>\n\n<p>There are two possible choices for the library author for each struct field.</p>\n\n<h2>There is a structural <code>Pin</code> projection to that field</h2>\n\n<p>For instance, the <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.unsafe_pinned.html\" rel=\"noreferrer\"><code>pin_utils::unsafe_pinned!</code></a> macro is used to define such a projection (<code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt; -&gt; Pin&lt;&amp;mut Field&gt;</code>).</p>\n\n<p>For the <code>Pin</code> projection to be sound:</p>\n\n<ul>\n<li><p>the whole struct must only implement <code>Unpin</code> when all the fields for which there is a structural <code>Pin</code> projection implement <code>Unpin</code>.</p>\n\n<ul>\n<li>no implementation is allowed to use <code>unsafe</code> to move such fields out of a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code> (or <code>Pin&lt;&amp;mut Self&gt;</code> when <code>Self = Wrapper&lt;Field&gt;</code>). For instance, <strong><code>Option::take()</code> is forbidden</strong>.</li>\n</ul></li>\n<li><p>the whole struct may only implement <code>Drop</code> if <code>Drop::drop</code> does not move any of the fields for which there is a structural projection.</p></li>\n<li><p>the struct cannot be <code>#[repr(packed)]</code> (a corollary of the previous item).</p></li>\n</ul>\n\n<p>In your given <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.3.0-alpha.15/futures-util/src/future/map.rs#L36-L45\" rel=\"noreferrer\"><code>future::Map</code></a> example, this is the case of the <code>future</code> field of the <code>Map</code> struct.</p>\n\n<h2>There is no structural <code>Pin</code> projection to that field</h2>\n\n<p>For instance, the <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.unsafe_unpinned.html\" rel=\"noreferrer\"><code>pin_utils::unsafe_unpinned!</code></a> macro is used to define such a projection (<code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt; -&gt; &amp;mut Field</code>).</p>\n\n<p>In this case, <em>that field</em> is not considered pinned by a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code>.</p>\n\n<ul>\n<li><p>whether <code>Field</code> is <code>Unpin</code> or not does not matter.</p>\n\n<ul>\n<li>implementations are allowed to use <code>unsafe</code> to move such fields out of a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code>. For instance, <strong><code>Option::take()</code> is allowed</strong>.</li>\n</ul></li>\n<li><p><code>Drop::drop</code> is also allowed to move such fields,</p></li>\n</ul>\n\n<p>In your given <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.3.0-alpha.15/futures-util/src/future/map.rs#L36-L45\" rel=\"noreferrer\"><code>future::Map</code></a> example, this is the case of the <code>f</code> field of the <code>Map</code> struct.</p>\n\n<h3>Example of both types of projection</h3>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;Fut, F&gt; Map&lt;Fut, F&gt; {\n    unsafe_pinned!(future: Fut); // pin projection -----+\n    unsafe_unpinned!(f: Option&lt;F&gt;); // not pinned --+   |\n//                                                  |   |\n//                 ...                              |   |\n//                                                  |   |\n    fn poll (mut self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;T&gt; {\n        //                                          |   |\n        match self.as_mut().future().poll(cx) { // &lt;----+ required here\n            Poll::Pending =&gt; Poll::Pending, //      |\n            Poll::Ready(output) =&gt; { //             |\n                let f = self.f().take() // &lt;--------+ allows this\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1161, "favorite_count": 4, "accepted_answer_id": 56117052, "answer_count": 2, "score": 23, "last_activity_date": 1561225310, "creation_date": 1557401621, "last_edit_date": 1557404027, "question_id": 56058494, "link": "https://stackoverflow.com/questions/56058494/when-is-it-safe-to-move-a-member-value-out-of-a-pinned-future", "title": "When is it safe to move a member value out of a pinned future?", "body": "<p>I'm writing a future combinator that needs to consume a value that it was provided with. With futures 0.1, <a href=\"https://docs.rs/futures/0.1.26/futures/future/trait.Future.html#tymethod.poll\" rel=\"noreferrer\"><code>Future::poll</code></a> took <code>self: &amp;mut Self</code>, which effectively meant that my combinator contained an <code>Option</code> and I  called <code>Option::take</code> on it when the underlying future resolves.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/nightly/std/future/trait.Future.html#tymethod.poll\" rel=\"noreferrer\"><code>Future::poll</code></a> method in the standard library takes <code>self: Pin&lt;&amp;mut Self&gt;</code> instead, so I've been reading about the guarantees required in order to safely make use of <code>Pin</code>.</p>\n\n<p>From the <code>pin</code> module documentation on the <a href=\"https://doc.rust-lang.org/nightly/std/pin/index.html#drop-guarantee\" rel=\"noreferrer\"><code>Drop</code> guarantee</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Concretely, for pinned data you have to maintain the invariant that its memory will not get invalidated from the moment it gets pinned until when drop is called. Memory can be invalidated by deallocation, but also by <strong>replacing a <code>Some(v)</code> by <code>None</code></strong>, or calling <code>Vec::set_len</code> to \"kill\" some elements off of a vector.</p>\n</blockquote>\n\n<p>And <a href=\"https://doc.rust-lang.org/nightly/std/pin/index.html#projections-and-structural-pinning\" rel=\"noreferrer\">Projections and Structural Pinning</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>You must not offer any other operations that could lead to data being moved out of the fields when your type is pinned. For example, if the wrapper contains an <code>Option&lt;T&gt;</code> and there is a <strong>take-like operation</strong> with type <code>fn(Pin&lt;&amp;mut Wrapper&lt;T&gt;&gt;) -&gt; Option&lt;T&gt;</code>, that operation can be used to move a <code>T</code> out of a pinned <code>Wrapper&lt;T&gt;</code> -- which means pinning cannot be structural.</p>\n</blockquote>\n\n<p>However, the existing <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.3.0-alpha.15/futures-util/src/future/map.rs#L36-L45\" rel=\"noreferrer\"><code>Map</code></a> combinator calls <code>Option::take</code> on a member value when the underlying future has resolved:</p>\n\n<pre><code>fn poll(mut self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;T&gt; {\n    match self.as_mut().future().poll(cx) {\n        Poll::Pending =&gt; Poll::Pending,\n        Poll::Ready(output) =&gt; {\n            let f = self.f().take()\n                .expect(\"Map must not be polled after it returned `Poll::Ready`\");\n            Poll::Ready(f(output))\n        }\n    }\n}\n</code></pre>\n\n<p>The <code>f</code> method is generated by the <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.unsafe_unpinned.html\" rel=\"noreferrer\"><code>unsafe_unpinned</code></a> macro and looks roughly like:</p>\n\n<pre><code>fn f&lt;'a&gt;(self: Pin&lt;&amp;'a mut Self&gt;) -&gt; &amp;'a mut Option&lt;F&gt; {\n    unsafe { &amp;mut Pin::get_unchecked_mut(self).f }\n}\n</code></pre>\n\n<p>It <em>appears</em> that <code>Map</code> violates the requirements that are described in the <code>pin</code> documentation, but I believe that the authors of the <code>Map</code> combinator know what they are doing and that this code is safe.</p>\n\n<p>What logic allows them to perform this operation in a safe manner?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 0, "creation_date": 1557402028, "post_id": 56058392, "comment_id": 98757674, "body": "why are you borrowing <code>self</code> for <code>&#39;a</code> in your <code>make</code>?  I believe if you are removing that, it would work..  (can&#39;t test it atm, I&#39;m on phone..)"}, {"owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "reply_to_user": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 0, "creation_date": 1557402610, "post_id": 56058392, "comment_id": 98757986, "body": "It is there to express that the returned <code>T</code> may live only as long as the producer (<code>self</code>) that made it. Because it contains reference to the producer. If I remove it, I get <code>cannot infer an appropriate lifetime for borrow expression due to conflicting requirements</code>... In both the before and after change versions."}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 0, "creation_date": 1557408602, "post_id": 56058392, "comment_id": 98761401, "body": "Because everything is borrowed for that life time throughout the call-chain even when in reality it probably shouldn&#39;t.  Once I got home later this afternoon I will give this a go if no one else does.  (In the meantime can you make your snippet <a href=\"http://www.sscce.org\" rel=\"nofollow noreferrer\">SSCCE</a>?  The <i>working</i> one is fine, but the <i>not working</i> one contains types that are not defined anywhere)"}, {"owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "reply_to_user": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 2, "creation_date": 1557408718, "post_id": 56058392, "comment_id": 98761472, "body": "It is SSCCE. The first code snipped is the common code for both the working and non-working version. Alternatively see the rust playground links at the end."}, {"owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "edited": false, "score": 0, "creation_date": 1557649106, "post_id": 56058392, "comment_id": 98830055, "body": "Did you have a chance to actually look at the provided answer?"}], "answers": [{"comments": [{"owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "edited": false, "score": 0, "creation_date": 1557731954, "post_id": 56066310, "comment_id": 98848509, "body": "This is similar to the original working code - the user of <code>MyProducer</code> must know which type it should make and could even ask for different types on different calls. I want to have the <code>MyValue</code> as part of the producer type, i.e. I want to have <code>MyProducer&lt;MyValue&gt;</code>. But so far it seems that it requires the <code>MyValue</code> to be actually stored in the struct (even with <code>PhantomData</code>) and then the lifetimes inside <code>MyValue</code> mess up the lifetiime of <code>MyProducer</code>..."}], "tags": [], "owner": {"reputation": 9958, "user_id": 2188562, "user_type": "registered", "accept_rate": 87, "profile_image": "https://i.stack.imgur.com/DMWEc.png?s=128&g=1", "display_name": "Peter Varo", "link": "https://stackoverflow.com/users/2188562/peter-varo"}, "is_accepted": false, "score": 1, "last_activity_date": 1557452556, "last_edit_date": 1557452556, "creation_date": 1557429956, "answer_id": 56066310, "question_id": 56058392, "link": "https://stackoverflow.com/questions/56058392/borrow-checker-error-after-adding-generic-parameter-to-struct/56066310#56066310", "title": "Borrow checker error after adding generic parameter to struct", "body": "<p>I reduced the <em>noise</em> from the code so the following is an even shorter version of the <em>broken</em> case which demonstrates the same problem: (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=63bb62974bef1541b30145578951c007\" rel=\"nofollow noreferrer\">test in the playground</a>)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::marker::PhantomData;\n\n#[derive(Debug)]\nstruct MyValue&lt;'a&gt;(&amp;'a u32);\n\nimpl&lt;'a&gt; From&lt;&amp;'a u32&gt; for MyValue&lt;'a&gt; {\n    fn from(value: &amp;'a u32) -&gt; Self {\n        MyValue(value)\n    }\n}\n\nstruct MyProducer&lt;'a, T&gt;(u32, PhantomData&lt;&amp;'a T&gt;);\n\nimpl&lt;'a, T&gt; MyProducer&lt;'a, T&gt;\nwhere\n    T: From&lt;&amp;'a u32&gt;,\n{\n    fn new() -&gt; Self {\n        Self(0, PhantomData)\n    }\n\n    fn make(&amp;'a mut self) -&gt; T {\n        self.0 += 1;\n        T::from(&amp;self.0)\n    }\n}\n\nfn main() {\n    let mut producer = MyProducer::&lt;MyValue&gt;::new();\n    println!(\"made this: {:?}\", producer.make());\n    println!(\"made this: {:?}\", producer.make());\n}\n</code></pre>\n\n<p>The main problem here is that the mutable borrow's lifetime is the lifetime of <code>MyProducer</code>, that is, the lifetime of the instance called <code>producer</code> is the same as the mutable borrow taken in its <code>make</code> method.  Because the <code>producer</code> instance does not go out of scope (if it would then <code>MyValue</code> wouldn't be able to hold a reference to a value stored in it) so the mutable borrow lives until the end of <code>main</code>'s scope.  The first rule of borrowing is that there can only be a single mutable borrow of a given value in a scope at any time, hence the compiler error.</p>\n\n<p>If you are looking at my solution here, which is actually working and does what I think you wanted it to: (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0af7a3354d569c0eb78e4c30058a000b\" rel=\"nofollow noreferrer\">test in the playground</a>):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#[derive(Debug)]\nstruct MyValue&lt;'a&gt;(&amp;'a u32);\n\nimpl&lt;'a&gt; From&lt;&amp;'a u32&gt; for MyValue&lt;'a&gt; {\n    fn from(value: &amp;'a u32) -&gt; Self {\n        MyValue(value)\n    }\n}\n\nstruct MyProducer(u32);\n\nimpl MyProducer {\n    fn new() -&gt; Self {\n        Self(0)\n    }\n\n    fn make&lt;'a, T&gt;(&amp;'a mut self) -&gt; T\n    where\n        T: From&lt;&amp;'a u32&gt;,\n    {\n        self.0 += 1;\n        T::from(&amp;self.0)\n    }\n}\n\nfn main() {\n    let mut producer = MyProducer::new();\n    println!(\"made this: {:?}\", producer.make::&lt;MyValue&gt;());\n    println!(\"made this: {:?}\", producer.make::&lt;MyValue&gt;());\n}\n</code></pre>\n\n<p>then you can see that the mutable borrow only lives as long as the <code>make</code> method, therefore after the invocation there's no more living mutable borrow to <code>producer</code> in <code>main</code>'s scope, thus you can have another one.</p>\n"}], "owner": {"reputation": 4182, "user_id": 2992101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7363e9ce46406af3326492e2f6cf40ca?s=128&d=identicon&r=PG", "display_name": "michalsrb", "link": "https://stackoverflow.com/users/2992101/michalsrb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 80, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1557452556, "creation_date": 1557401301, "last_edit_date": 1557404039, "question_id": 56058392, "link": "https://stackoverflow.com/questions/56058392/borrow-checker-error-after-adding-generic-parameter-to-struct", "title": "Borrow checker error after adding generic parameter to struct", "body": "<p>I have code that works, but it stops compiling with a borrow checker error after a change. I don't understand how the change could affect borrow checking.</p>\n\n<p>Common part to both working and non-working code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>/// Some struct that has references inside\n#[derive(Debug)]\nstruct MyValue&lt;'a&gt; {\n    number: &amp;'a u32,\n}\n\n/// There are many structs similar to `MyValue` and there is a\n/// trait common to them all that can create them. In this\n/// example I use the `From` trait.\nimpl&lt;'a&gt; From&lt;&amp;'a u32&gt; for MyValue&lt;'a&gt; {\n    fn from(value: &amp;'a u32) -&gt; Self {\n        MyValue { number: value }\n    }\n}\n\n/// `Producer` makes objects that hold references into it. So\n/// the produced object must be first dropped before any new\n/// one can be made.\ntrait Producer&lt;'a, T: 'a&gt; {\n    fn make(&amp;'a mut self) -&gt; T;\n}\n</code></pre>\n\n<p>Here is the working code:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyProducer {\n    number: u32,\n}\n\nimpl MyProducer {\n    fn new() -&gt; Self {\n        Self { number: 0 }\n    }\n}\n\nimpl&lt;'a, T: 'a + From&lt;&amp;'a u32&gt;&gt; Producer&lt;'a, T&gt; for MyProducer {\n    fn make(&amp;'a mut self) -&gt; T {\n        self.number += 1;\n        T::from(&amp;self.number)\n    }\n}\n\nfn main() {\n    let mut producer = MyProducer::new();\n\n    println!(\n        \"made this: {:?}\",\n        &lt;MyProducer as Producer&lt;MyValue&gt;&gt;::make(&amp;mut producer)\n    );\n    println!(\n        \"made this: {:?}\",\n        &lt;MyProducer as Producer&lt;MyValue&gt;&gt;::make(&amp;mut producer)\n    );\n}\n</code></pre>\n\n<p>This compiles and prints the expected output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>made this: MyValue { number: 1 }\nmade this: MyValue { number: 2 }\n</code></pre>\n\n<p>I don't like that <code>MyProducer</code> actually implements <code>Producer</code> for every <code>T</code> as it makes it impossible to call <code>make</code> directly on it. I would like to have a type that is a <code>MyProducer</code> for a specific <code>T</code> (for example for <code>MyValue</code>).</p>\n\n<p>To achieve this, I want to add a generic parameter to <code>MyProducer</code>. Because the <code>MyProducer</code> does not really use the <code>T</code>, I use <code>PhantomData</code> to prevent the compiler from complaining.</p>\n\n<p>Here is the code after changes:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::marker::PhantomData;\n\nstruct MyProducer&lt;'a, T: 'a + From&lt;&amp;'a u32&gt;&gt; {\n    number: u32,\n    _phantom: PhantomData&lt;&amp;'a T&gt;,\n}\n\nimpl&lt;'a, T: 'a + From&lt;&amp;'a u32&gt;&gt; MyProducer&lt;'a, T&gt; {\n    fn new() -&gt; Self {\n        Self {\n            number: 0,\n            _phantom: PhantomData::default(),\n        }\n    }\n}\n\nimpl&lt;'a, T: From&lt;&amp;'a u32&gt;&gt; Producer&lt;'a, T&gt; for MyProducer&lt;'a, T&gt; {\n    fn make(&amp;'a mut self) -&gt; T {\n        self.number += 1;\n        T::from(&amp;self.number)\n    }\n}\n\nfn main() {\n    let mut producer = MyProducer::&lt;MyValue&gt;::new();\n\n    println!(\"made this: {:?}\", producer.make());\n    println!(\"made this: {:?}\", producer.make());\n}\n</code></pre>\n\n<p>The <code>main</code> function now looks exactly as I would like it to look like. But the code does not compile. This is the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `producer` as mutable more than once at a time\n  --&gt; src/main.rs:50:33\n   |\n49 |     println!(\"made this: {:?}\", producer.make());\n   |                                 -------- first mutable borrow occurs here\n50 |     println!(\"made this: {:?}\", producer.make());\n   |                                 ^^^^^^^^\n   |                                 |\n   |                                 second mutable borrow occurs here\n   |                                 first borrow later used here\n</code></pre>\n\n<p>I don't understand why it no longer works. The produced object is still dropped before the next one is made.</p>\n\n<p>If I call the <code>make</code> function just once, it compiles and works.</p>\n\n<p>I am using edition 2018, so NLL is active.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3d8430803a2919fb7dea6aa4ecbb98ef\" rel=\"nofollow noreferrer\">Rust Playground: working version before change</a></p>\n\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=25e9849cd6fa9b87f3ee04a739e184d7\" rel=\"nofollow noreferrer\">Rust Playground: broken version after change</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 391, "user_id": 9922265, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-7Qi7a-GAIJM/AAAAAAAAAAI/AAAAAAAAAVU/uX2Wt_1__hc/photo.jpg?sz=128", "display_name": "SV-97", "link": "https://stackoverflow.com/users/9922265/sv-97"}, "edited": false, "score": 0, "creation_date": 1557381240, "post_id": 56052927, "comment_id": 98746800, "body": "Why would you possibly want that?! If you want a panic on overflow use checked_add etc."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557381401, "post_id": 56052927, "comment_id": 98746856, "body": "You don&#39;t want undefined behavoir because it is undefined! Duh. What you probably want is <code>wrapping_add</code>."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 0, "creation_date": 1557381496, "post_id": 56052927, "comment_id": 98746898, "body": "Btw: safe rust has always defined behavoir."}, {"owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "edited": false, "score": 5, "creation_date": 1557384035, "post_id": 56052927, "comment_id": 98747891, "body": "<i>&quot;If not, has anyone benchmarked the speed difference?&quot;</i> This would be probably your job. Don&#39;t optimize blindly and especially not in favor of UB. Well, this question is awkward in many ways :| Why would anyone ever want UB?"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1557398381, "post_id": 56052927, "comment_id": 98755636, "body": "Graph algorithms are generally memory bound, not arithmetic bound. However, <code>std::intrinsics::assume</code> might help."}, {"owner": {"user_type": "does_not_exist", "display_name": "user11473761"}, "edited": false, "score": 0, "creation_date": 1557399149, "post_id": 56052927, "comment_id": 98756028, "body": "My team writes scientific codes in C, C++ and Fortran. I&#39;m trying to convince them to try Rust but I need to know what Rust guarantees and how to get around it."}, {"owner": {"user_type": "does_not_exist", "display_name": "user11473761"}, "edited": false, "score": 0, "creation_date": 1557399322, "post_id": 56052927, "comment_id": 98756120, "body": "Yes Veedrac is absolutely right that graph algorithms are memory bound. But we have some cache-friendly tricks."}], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user11473761"}, "edited": false, "score": 0, "creation_date": 1557399656, "post_id": 56055161, "comment_id": 98756298, "body": "It seems like that could be it! I was thinking about &quot;undoing&quot; -fwrapv in GCC for example."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": false, "score": 3, "last_activity_date": 1557410668, "last_edit_date": 1557410668, "creation_date": 1557390252, "answer_id": 56055161, "question_id": 56052927, "link": "https://stackoverflow.com/questions/56052927/is-there-any-compiler-flag-to-force-undefined-behavior-for-signed-integer-overfl/56055161#56055161", "title": "Is there any compiler flag to force undefined behavior for signed integer overflow?", "body": "<p>Integer overflow in Rust never triggers undefined behaviour, in contrast to C. When compiling in debug mode, arithmetic operations check for overflow and panic, but in release mode there are no checks. The behaviour can be controlled by passing the flag <code>-C overflow-checks=yes</code> to <code>rustc</code>.</p>\n\n<p>More generally, you should make sure to use release builds if performance matters. If you only want to target a specific CPU, you can use <code>-C target-cpu=val</code>, e.g. <code>-C target-cpu=native</code> to optimise for the current CPU. And of course you need to profile your code to figure out what to optimise.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user11473761"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 131, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1557410668, "creation_date": 1557380861, "last_edit_date": 1557400097, "question_id": 56052927, "link": "https://stackoverflow.com/questions/56052927/is-there-any-compiler-flag-to-force-undefined-behavior-for-signed-integer-overfl", "title": "Is there any compiler flag to force undefined behavior for signed integer overflow?", "body": "<p>I\u2019m writing a graph algorithm that needs to be super fast. Is there any compiler flag to force undefined behavior for signed integer overflow like C? Or any other flags to force more undefined behavior? If not, has anyone benchmarked the speed difference?</p>\n"}, {"tags": ["memory", "rust", "slice"], "comments": [{"owner": {"reputation": 555, "user_id": 5572146, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c799e0c44a11d16cc175a717d5dca855?s=128&d=identicon&r=PG&f=1", "display_name": "chpio", "link": "https://stackoverflow.com/users/5572146/chpio"}, "edited": false, "score": 1, "creation_date": 1557394216, "post_id": 56051611, "comment_id": 98753336, "body": "Looks like a xy-problem, especially <a href=\"https://stackoverflow.com/questions/56051611/how-to-unsafely-increase-the-size-of-a-mutable-slice-of-bytes#comment98745257_56051879\">this comment</a>"}], "answers": [{"comments": [{"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557374063, "post_id": 56051879, "comment_id": 98744851, "body": "I checked the size of &quot;buf&quot; before the slice transformation, and I got (say) &quot;x&quot;. After the transformation, I still get the length of buf equal to &quot;x&quot;?"}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557375862, "post_id": 56051879, "comment_id": 98745216, "body": "Your comments will certainly help some people, but for me the solution is not optimal for the scenario. I am having to debug somebody else&#39;s API... here&#39;s a function which is called periodically in order to re-align the network buffer: <code>code  impl AsyncRead for KcpStream {     unsafe fn prepare_uninitialized_buffer(&amp;self, mut m: &amp;mut [u8]) -&gt; bool {         println!(&quot;Prepping unit buffer!&quot;);         false     }      fn read_buf&lt;B: BufMut&gt;(&amp;mut self, buf: &amp;mut B) -&gt; Poll&lt;usize, io::Error&gt; {         &lt;&amp;KcpStream&gt;::read_buf(&amp;mut &amp;*self, buf)     } }</code>"}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557376019, "post_id": 56051879, "comment_id": 98745257, "body": "What&#39;s happening is that the buffer goes from ~8000 bytes capacity down to 80, then it wont accept any more data. As such, I need to resize the buffer somehow. I can&#39;t seem to find where the buffer is initialized anyways..."}, {"owner": {"reputation": 555, "user_id": 5572146, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c799e0c44a11d16cc175a717d5dca855?s=128&d=identicon&r=PG&f=1", "display_name": "chpio", "link": "https://stackoverflow.com/users/5572146/chpio"}, "edited": false, "score": 0, "creation_date": 1557394390, "post_id": 56051879, "comment_id": 98753431, "body": "Have you tried to <i>allocate</i> a new buffer? Or use for example the <a href=\"https://crates.io/crates/bytes\" rel=\"nofollow noreferrer\"><i>bytes</i> crate</a>?"}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557431629, "post_id": 56051879, "comment_id": 98773176, "body": "At this point, I think it&#39;s impossible to forcibly reset the buffer&#39;s length. I&#39;ve spent the past 35 hours trying it. Oh well, at least I lose points for asking a goddamn question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557431924, "post_id": 56051879, "comment_id": 98773295, "body": "@ThomasBraun yes, it&#39;s impossible \u2014 that&#39;s what I meant by <i>If you want the changes to be reflected outside of the function, you are out of luck</i>. I agree with this being an <a href=\"https://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY problem</a> \u2014 you have a problem where some code is passing you a bad value and instead of fixing that code, you are trying to monkey with it it from the other side. It&#39;s conceptually the same as if you were getting flat tires from driving over a bed of nails and asking how to patch your tires."}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557433630, "post_id": 56051879, "comment_id": 98773970, "body": "I understand that, and sometimes it works. But, I&#39;ve spent a while looking for the original declaration of the &amp;mut [u8], and can&#39;t find it anywhere. That is why I&#39;ve been trying to forcibly resize it"}, {"owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "edited": false, "score": 0, "creation_date": 1557433693, "post_id": 56051879, "comment_id": 98773991, "body": "I appreciate you trying to help, and I&#39;m not mad at you. I&#39;ve spent over 30 hours trying to track and fix the bug in someone else&#39;s low-level API, and at this point I&#39;m ready to shoot myself, lol."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1557374446, "last_edit_date": 1557374446, "creation_date": 1557373641, "answer_id": 56051879, "question_id": 56051611, "link": "https://stackoverflow.com/questions/56051611/how-to-unsafely-increase-the-size-of-a-mutable-slice-of-bytes/56051879#56051879", "title": "How to unsafely increase the size of a mutable slice of bytes?", "body": "<p>What you are attempting to do is all-but-<strong>guaranteed</strong> to cause undefined behavior. <em>Find a better API</em>.</p>\n\n<hr>\n\n<p>If you want the changes to be reflected <em>outside</em> of the function, you are out of luck. There's no way that this function signature will allow for that to happen, for the same reason that <code>fn foo(x: i32)</code> won't allow you to change the value passed in as observed by the caller.</p>\n\n<p>If you just need this inside of the function, use <a href=\"https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html\" rel=\"nofollow noreferrer\"><code>slice::from_raw_parts</code></a>. I've marked the entire function as <code>unsafe</code> because certain inputs will cause undefined behavior and this code cannot possibly guard against it:</p>\n\n<pre><code>use std::slice;\n\npub unsafe fn recv(buf: &amp;mut [u8]) {\n    let size_to_extend = 50;\n\n    let ptr = buf.as_mut_ptr();\n    let len = buf.len();\n    let bad_idea = slice::from_raw_parts_mut(ptr, len + size_to_extend);\n\n    for b in bad_idea.iter_mut() {\n        *b = 10;\n    }\n}\n</code></pre>\n\n<p>If you can change the API, something like this works to expose the change outside the function:</p>\n\n<pre><code>pub unsafe fn recv(buf: &amp;mut &amp;mut [u8]) {\n    let size_to_extend = 50;\n\n    let ptr = buf.as_mut_ptr();\n    let len = buf.len();\n    let bad_idea = slice::from_raw_parts_mut(ptr, len + size_to_extend);\n\n    for b in bad_idea.iter_mut() {\n        *b = 10;\n    }\n\n    *buf = bad_idea;\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27150652/155423\">How can I get an array or a slice from a raw pointer?</a></li>\n</ul>\n"}], "owner": {"reputation": 375, "user_id": 11134001, "user_type": "registered", "profile_image": "https://graph.facebook.com/2130930103663266/picture?type=large", "display_name": "Thomas Braun", "link": "https://stackoverflow.com/users/11134001/thomas-braun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 117, "favorite_count": 0, "answer_count": 1, "score": -3, "last_activity_date": 1557374746, "creation_date": 1557371167, "last_edit_date": 1557374746, "question_id": 56051611, "link": "https://stackoverflow.com/questions/56051611/how-to-unsafely-increase-the-size-of-a-mutable-slice-of-bytes", "title": "How to unsafely increase the size of a mutable slice of bytes?", "body": "<p>I have this function:</p>\n\n<pre><code>use std::io;\n\npub fn recv(mut buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n    let size_to_extend = 50; // I want to increase the size of \"buf\" by 50\n    unsafe {\n        /* ??? */\n    }\n}\n</code></pre>\n\n<p>How can I adjust the size of the array <code>buf</code>, even though it's a parameter? It is necessary that this method needs to happen.</p>\n"}, {"tags": ["rust", "sdl-2", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557373742, "post_id": 56051593, "comment_id": 98744781, "body": "I believe your question is answered by the answers of <a href=\"https://stackoverflow.com/q/41270052/155423\">Cannot infer an appropriate lifetime for autoref due to conflicting requirements</a> and <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>. If you disagree, please <b><a href=\"https://stackoverflow.com/posts/56051593/edit\">edit</a></b> your question to explain the differences. Otherwise, we can mark this question as already answered."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557373979, "post_id": 56051593, "comment_id": 98744832, "body": "<i>I solved that by spreading an <code>&lt;&#39;a&gt;</code> across the code base</i> \u2014 the code you have presented has no <code>&lt;&#39;a&gt;</code> in it. Are you asking about errors that come from code that you haven&#39;t even provided?"}, {"owner": {"reputation": 290, "user_id": 9156640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2cc37ec575a46246de4a809e7533e912?s=128&d=identicon&r=PG&f=1", "display_name": "dospro", "link": "https://stackoverflow.com/users/9156640/dospro"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1557378671, "post_id": 56051593, "comment_id": 98745983, "body": "@Shepmaster yes. those other answers provide enough info to answer this question. I couldn&#39;t see how was a value and a reference for something inside the value what was happening here. For the second comment: I thought pasting basically the same code with only lifetime changes would bloat the question."}], "owner": {"reputation": 290, "user_id": 9156640, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2cc37ec575a46246de4a809e7533e912?s=128&d=identicon&r=PG&f=1", "display_name": "dospro", "link": "https://stackoverflow.com/users/9156640/dospro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 581, "favorite_count": 0, "closed_date": 1557401642, "answer_count": 0, "score": 0, "last_activity_date": 1557401673, "creation_date": 1557370852, "last_edit_date": 1557401673, "question_id": 56051593, "link": "https://stackoverflow.com/questions/56051593/is-there-a-way-to-store-a-texture-inside-a-struct-using-rust-sdl2", "closed_reason": "Duplicate", "title": "Is there a way to store a texture inside a struct using rust-sdl2?", "body": "<p>I'm using the rust-sdl2 crate to paint a buffer on a window screen, so I decided to abstract the SDL calls. I tried to follow <a href=\"https://github.com/Rust-SDL2/rust-sdl2/blob/master/examples/renderer-texture.rs\" rel=\"nofollow noreferrer\">this example</a> from the rust-sdl2 repo and my first thought was to create something like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct SDLDisplay {\n    sdl_context: Sdl,\n    video_subsystem: VideoSubsystem,\n    canvas: WindowCanvas,\n    texture_creator: TextureCreator&lt;sdl2::video::WindowContext&gt;,\n    texture: Texture,\n}\n\nimpl SDLDisplay {\n    pub fn new() -&gt; Result&lt;SDLDisplay, String&gt; {\n        let sdl_context = sdl2::init()?;\n        let video_subsystem = sdl_context.video()?;\n\n        let window = video_subsystem\n            .window(\"Test App\", 256, 240)\n            .position_centered()\n            .build()\n            .map_err(|e| e.to_string())?;\n\n        let canvas = window.into_canvas().build().map_err(|e| e.to_string())?;\n\n        let texture_creator = canvas.texture_creator();\n        let texture = texture_creator\n            .create_texture_streaming(Some(ARGB8888), 256, 240)\n            .map_err(|e| e.to_string())?;\n\n        Ok(SDLDisplay {\n            sdl_context,\n            video_subsystem,\n            canvas,\n            texture_creator,\n            texture,\n        })\n    }\n}\n</code></pre>\n\n<p>The first issue was that <code>Texture</code> needs a lifetime parameter; I solved that by spreading an <code>&lt;'a&gt;</code> across the code base... It stopped complaining about that, but now I have the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0515]: cannot return value referencing local variable `texture_creator`\n   |\n  --&gt; src/sdl_display.rs:44:9\n40 |           let texture = texture_creator\n   |                         --------------- `texture_creator` is borrowed here\n   |\n...\n40 |           let texture = texture_creator\n44 | /         Ok(SDLDisplay {\n   |                         --------------- `texture_creator` is borrowed here\n45 | |             sdl_context,\n...\n46 | |             video_subsystem,\n44 | /         Ok(SDLDisplay {\n47 | |             canvas,\n45 | |             sdl_context,\n48 | |             texture_creator,\n46 | |             video_subsystem,\n49 | |             texture,\n47 | |             canvas,\n48 | |             texture_creator,\n49 | |             texture,\n50 | |         })\n   | |__________^ returns a value referencing data owned by the current function\n\n50 | |         })\n   | |__________^ returns a value referencing data owned by the current function\n</code></pre>\n\n<p>It's telling me I can't move <code>texture_creator</code> to the new struct because it was borrowed for creating the texture, but if I don't have the <code>TextureCreator</code> instance inside the struct, it complains that <code>Texture</code> must not outlive <code>TextureCreator</code>.</p>\n\n<p>I'm completely lost here. Is there a way to actually store a texture inside a struct using rust-sdl2?</p>\n"}, {"tags": ["enums", "rust", "traits"], "comments": [{"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1557392700, "post_id": 56050864, "comment_id": 98752443, "body": "As a workaround it seems to be possible to box the trait object like <code>Rc&lt;Box&lt;dyn MyTrait&gt;&gt;</code> (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad16dbd281f722e4a2acf1959e275884\" rel=\"nofollow noreferrer\">playground</a>)"}], "owner": {"reputation": 444, "user_id": 3422156, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/29af89a0e8be5cf63546304d02c8e2fb?s=128&d=identicon&r=PG&f=1", "display_name": "spease", "link": "https://stackoverflow.com/users/3422156/spease"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 601, "favorite_count": 0, "answer_count": 0, "score": 2, "last_activity_date": 1557365400, "creation_date": 1557364085, "last_edit_date": 1557365400, "question_id": 56050864, "link": "https://stackoverflow.com/questions/56050864/cannot-move-out-of-an-rc", "title": "Cannot move out of an &#39;Rc&#39;", "body": "<p>Deriving PartialEq on an enum with a unit variant of an Rc trait object seems to trigger a <code>Cannot move out of an 'Rc'</code> error.</p>\n\n<p>I've been able to create a small code sample that reproduces the error. Is there a way to fix the error without manually implementing PartialEq for the enum? This happens in 5 places in a codebase.</p>\n\n<p>Code Example:</p>\n\n<pre><code>use failure::Error;\nuse serde_derive::{Deserialize,Serialize};\nuse std::rc::Rc;\n\ntrait MyTrait {\n}\n\nimpl PartialEq for MyTrait {\n    fn eq(&amp;self, rhs: &amp;Self) -&gt; bool {\n        true\n    }\n}\n\nimpl MyTrait for String {\n}\n\n#[derive(PartialEq)]\nenum MyEnum {\n    A,\n    B(Rc&lt;dyn MyTrait&gt;),\n}\n\nfn main() -&gt; Result&lt;(), Error&gt; {\n    println!(\"{}\",MyEnum::A == MyEnum::B(Rc::new(String::from(\"whee\"))));\n    Ok(())\n}\n</code></pre>\n\n<p>Here's the generated PartialEq:</p>\n\n<pre><code>#[inline]\nfn eq(&amp;self, other: &amp;MyEnum) -&gt; bool {\n    {\n        let __self_vi =\n            unsafe { ::std::intrinsics::discriminant_value(&amp;*self) } as\n                isize;\n        let __arg_1_vi =\n            unsafe { ::std::intrinsics::discriminant_value(&amp;*other) } as\n                isize;\n        if true &amp;&amp; __self_vi == __arg_1_vi {\n            match (&amp;*self, &amp;*other) {\n                (&amp;MyEnum::B(ref __self_0), &amp;MyEnum::B(ref __arg_1_0)) =&gt;\n                (*__self_0) == (*__arg_1_0),\n                _ =&gt; true,\n            }\n        } else { false }\n    }\n}\n</code></pre>\n\n<p>And here's a link to the issue:\n<a href=\"https://github.com/rust-lang/rust/issues/31740\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/issues/31740</a></p>\n\n<p>So this might just be a language bug right now. Manually implementing PartialEq for all the enums this is an issue for isn't feasible right now, so I'd be curious if there's a workaround.</p>\n"}]