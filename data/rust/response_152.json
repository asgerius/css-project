[{"tags": ["testing", "rust", "rust-crates"], "owner": {"reputation": 617, "user_id": 3146662, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/RWuBJ.png?s=128&g=1", "display_name": "jean553", "link": "https://stackoverflow.com/users/3146662/jean553"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 50, "favorite_count": 0, "closed_date": 1512609269, "answer_count": 0, "score": 1, "last_activity_date": 1512609323, "creation_date": 1512601772, "last_edit_date": 1512609323, "question_id": 47685024, "link": "https://stackoverflow.com/questions/47685024/use-same-struct-across-multiple-test-files", "closed_reason": "Duplicate", "title": "Use same struct across multiple test files", "body": "<p>I have two test files located in the <code>tests</code> directory. Each test file contains a test function and a common struct. For example, they both contain:</p>\n\n<pre><code>#[macro_use] extern crate serde_derive;\n\n#[derive(Deserialize)]\nstruct MyStructure {\n    a_value: u8,\n}\n\n#[test]\n// ...some test functions...\n</code></pre>\n\n<p>The struct <code>MyStructure</code> is exactly the same between the two test files. As my struct uses a macro from the <code>serde_derive</code> crate, the line <code>#[macro_use] extern crate serde_derive</code> is required.</p>\n\n<p>In order to avoid code repetition, I would like to declare my struct only once. From what I understand, every file from the <code>tests</code> directory is compiled as an individual crate, so it seems impossible to edit the test file and put the struct definition into a separate file in the <code>tests</code> directory:</p>\n\n<pre><code>#[macro_use] extern crate serde_derive;\n\nmod structure;\n\n#[test]\n// ...some test function...\n</code></pre>\n\n\n\n<pre><code>#[macro_use] extern crate serde_derive;\n\n#[derive(Deserialize)]\nstruct Structure {\n    a_value: u8,\n}\n</code></pre>\n\n<p>This first try leads to <code>error[E0468]: an extern crate loading macros must be at the crate root</code>. This is normal as <code>structure</code> is now a sub-module.</p>\n\n<p>Removing <code>#[macro_use] extern crate serde_derive;</code> from <code>structure</code> doesn't help either, as <code>structure</code> is compiled as an individual crate, and now <code>Deserialize</code> cannot be found: <code>error: cannot find derive macro Deserialize in this scope</code>.</p>\n\n<p>What is the proper way to move <code>MyStructure</code> (including the macro usage) into a separate common file and define it only once for all my test files?</p>\n"}, {"tags": ["generics", "iterator", "rust", "traits", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1512614652, "creation_date": 1512614652, "answer_id": 47686749, "question_id": 47684832, "link": "https://stackoverflow.com/questions/47684832/value-does-not-live-long-enough-with-a-generic-function-that-creates-a-container/47686749#47686749", "title": "Value does not live long enough with a generic function that creates a container, adds items to it, then iterates over the items", "body": "<p>I believe that what you are attempting is currently impossible.</p>\n\n<p>To start with, your error message is because <strong>the caller</strong> is specifying the lifetime when passed to <code>start</code>:</p>\n\n<pre><code>fn start&lt;'a, T: 'a&gt;()\n</code></pre>\n\n<p>This doesn't make any sense because the caller <em>cannot</em> control the lifetime. For example, what if the call was <code>start::&lt;Vec&lt;&amp;'static str&gt;&gt;</code> but the function created some temporary values? This lifetime is also tied to the iterator implementation \u2014 if the reference to the value lives as long as the caller dictates, then it can be iterated.</p>\n\n<p>In many similar cases, <em>higher-ranked trait bounds</em> are the solution, however, the closest I can get is a bit different:</p>\n\n<pre><code>trait Foo&lt;T&gt; {\n    fn add(&amp;mut self, T);\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; for Vec&lt;T&gt; {\n    fn add(&amp;mut self, val: T) {\n        self.push(val);\n    }\n}\n\nfn start&lt;T&gt;()\nwhere\n    T: Default + Foo&lt;&amp;'static str&gt;,\n    for&lt;'a&gt; &amp;'a T: IntoIterator,\n    for&lt;'a, 'b&gt; &amp;'a &lt;&amp;'b T as IntoIterator&gt;::Item: std::fmt::Display,\n{\n    let mut f = T::default();\n    f.add(\"abcd\");\n    f.add(\"efgh\");\n\n    for val in &amp;f {\n        println!(\"{}\", &amp;val);\n    }\n\n    f.add(\"ijkl\");\n\n    for val in &amp;f {\n        println!(\"{}\", &amp;val);\n    }\n}\n\nfn main() {\n    start::&lt;Vec&lt;&amp;str&gt;&gt;();\n}\n</code></pre>\n\n<p>The main sticking point is <code>T: Default + Foo&lt;&amp;'static str&gt;</code>. As far as what I can see, there's no way to pass in a concrete type for <code>T</code> that could use a HRTB defined by the function. In this case, we can use <code>'static</code>. If we tried to use <code>for &lt;'a&gt; T: Default + Foo&lt;&amp;'a str&gt;</code>, we get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'a&gt; std::vec::Vec&lt;&amp;str&gt;: Foo&lt;&amp;'a str&gt;` is not satisfied\n  --&gt; src/main.rs:33:5\n   |\n33 |     start::&lt;Vec&lt;&amp;str&gt;&gt;();\n   |     ^^^^^^^^^^^^^^^^^^ the trait `for&lt;'a&gt; Foo&lt;&amp;'a str&gt;` is not implemented for `std::vec::Vec&lt;&amp;str&gt;`\n   |\n   = help: the following implementations were found:\n             &lt;std::vec::Vec&lt;T&gt; as Foo&lt;T&gt;&gt;\n   = note: required by `start`\n</code></pre>\n\n<p>The compiler doesn't know to match up the lifetime declared at the call site with the one specified by the HRTB. I believe, but am not sure, that <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\" rel=\"nofollow noreferrer\"><em>generic associated types</em></a> might address the problem.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 0, "last_activity_date": 1513192550, "creation_date": 1513192550, "answer_id": 47800583, "question_id": 47684832, "link": "https://stackoverflow.com/questions/47684832/value-does-not-live-long-enough-with-a-generic-function-that-creates-a-container/47800583#47800583", "title": "Value does not live long enough with a generic function that creates a container, adds items to it, then iterates over the items", "body": "<p>Thanks to <a href=\"https://stackoverflow.com/users/155423/shepmaster\">Shepmaster</a> for pointing me in the right direction with HRTBs. After reading up on the topic, I was able to have the function itself provide the lifetime of <code>FooBarIter</code> and <code>FooBarIter::Item</code> instead. <code>FooBarIter</code> can now be borrowed and last until the end of the function. The lifetime of <code>FooBar</code> can still be provided by the caller.</p>\n\n<p>Here is the only change that was necessary for me to make this finally compile.</p>\n\n<pre><code>fn start&lt;'a, T&gt;()\nwhere\n    T: Foo&lt;&amp;'a str&gt; + Default,\n    for&lt;'b&gt; &amp;'b T: IntoIterator&lt;Item = &amp;'b &amp;'a str&gt;,\n{\n    let mut f = T::default();\n    f.add(\"abcd\");\n    f.add(\"efgh\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n\n    f.add(\"ijkl\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 4129, "user_id": 2081133, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/KDQEz.jpg?s=128&g=1", "display_name": "James", "link": "https://stackoverflow.com/users/2081133/james"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 199, "favorite_count": 3, "answer_count": 2, "score": 3, "last_activity_date": 1513192569, "creation_date": 1512600637, "last_edit_date": 1513192569, "question_id": 47684832, "link": "https://stackoverflow.com/questions/47684832/value-does-not-live-long-enough-with-a-generic-function-that-creates-a-container", "title": "Value does not live long enough with a generic function that creates a container, adds items to it, then iterates over the items", "body": "<p>I'm trying to write a generic function that creates a default value and iterates through its internal \"buffer.\" All this happens within the function with no arguments nor return values. I seem to have the lifetimes declared incorrectly and I am having a hard time setting them correctly for this to work.</p>\n\n<p>Here is an example type that implements the <code>Default</code> and <code>IntoIterator</code> traits, as well as a new trait called <code>Foo</code> that requires one method.</p>\n\n<pre><code>trait Foo&lt;T&gt; {\n    fn add(&amp;mut self, T);\n}\n\nstruct FooBar&lt;T&gt; {\n    buf: Vec&lt;Option&lt;T&gt;&gt;,\n    len: usize,\n}\n\nimpl&lt;T&gt; FooBar&lt;T&gt; {\n    fn new() -&gt; Self {\n        let buf = Vec::new();\n        let len = 0;\n        Self { buf, len }\n    }\n\n    fn iter(&amp;self) -&gt; FooBarIter&lt;T&gt; {\n        FooBarIter { foo: self, pos: 0 }\n    }\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt; for FooBar&lt;T&gt; {\n    fn add(&amp;mut self, val: T) {\n        self.buf.push(Some(val));\n        self.len += 1;\n    }\n}\n\nimpl&lt;T&gt; Default for FooBar&lt;T&gt; {\n    fn default() -&gt; Self {\n        Self::new()\n    }\n}\n\nimpl&lt;'a, T: 'a&gt; IntoIterator for &amp;'a FooBar&lt;T&gt; {\n    type Item = &amp;'a T;\n    type IntoIter = FooBarIter&lt;'a, T&gt;;\n\n    fn into_iter(self) -&gt; Self::IntoIter {\n        self.iter()\n    }\n}\n</code></pre>\n\n<p><code>FooBar</code> just adds values to a vector which it owns. To only allow a non-consuming iteration, I defined an iterator which borrows the underlying <code>Vec</code> and maintains the \"current\" index during the iteration, returning a reference to each element which the consumer borrows.</p>\n\n<pre><code>struct FooBarIter&lt;'a, T: 'a&gt; {\n    foo: &amp;'a FooBar&lt;T&gt;,\n    pos: usize,\n}\n\nimpl&lt;'a, T&gt; Iterator for FooBarIter&lt;'a, T&gt; {\n    type Item = &amp;'a T;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.foo.len &lt;= self.pos {\n            return None;\n        }\n\n        self.pos += 1;\n        self.foo.buf[self.pos - 1].as_ref()\n    }\n}\n</code></pre>\n\n<p>A generic function creates a default value, adds some items (of type <code>&amp;str</code>), then iterates though them by reference. I seem to have declared the lifetimes incorrectly because Rust complains that the borrowed value of <code>FooBar</code> doesn't live long enough. However, it says that it lives until the end of the function, so I'm confused as to how long Rust is expecting the borrow to actually live.</p>\n\n<pre><code>fn start&lt;'a, T: 'a&gt;()\nwhere\n    T: Foo&lt;&amp;'a str&gt; + Default,\n    &amp;'a T: IntoIterator&lt;Item = &amp;'a &amp;'a str&gt;,\n{\n    let mut f = T::default();\n    f.add(\"abcd\");\n    f.add(\"efgh\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n\n    f.add(\"ijkl\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n}\n\nfn main() {\n    start::&lt;FooBar&lt;&amp;str&gt;&gt;();\n}\n</code></pre>\n\n<p>Here is the error which states that that <code>&amp;f</code> does not live long enough because the \"borrowed value only lives until\" the end of the function.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `f` does not live long enough\n  --&gt; src/main.rs:70:17\n   |\n70 |     for val in &amp;f {\n   |                 ^ does not live long enough\n...\n73 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the lifetime 'a as defined on the function body at 61:1...\n  --&gt; src/main.rs:61:1\n   |\n61 | / fn start&lt;'a, T: 'a&gt;()\n62 | | where\n63 | |     T: Foo&lt;&amp;'a str&gt; + Default,\n64 | |     &amp;'a T: IntoIterator&lt;Item = &amp;'a &amp;'a str&gt;,\n...  |\n72 | |     }\n73 | | }\n   | |_^\n</code></pre>\n\n<p>I've also tried setting a different lifetime parameter for the <code>&amp;'a IntoIterator</code> trait, but then I end up going around in circles for other errors, not really getting close to setting the correct lifetimes.</p>\n\n<p>To further illustrate what I'm trying to achieve with <code>FooBar</code>, here is an example of what I'm trying to do if <code>FooBar</code> was instead a <code>Vec</code>.</p>\n\n<pre><code>fn start() {\n    let mut f = Vec::new();\n    f.push(\"abcd\");\n    f.push(\"efgh\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n\n    f.push(\"ijkl\");\n\n    for val in &amp;f {\n        println!(\"{}\", *val);\n    }\n}\n</code></pre>\n\n<p>Am I even on the right track with trying to figure out the lifetime parameters, or is it something else entirely?</p>\n"}, {"tags": ["rust", "arm"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1512631439, "post_id": 47684200, "comment_id": 82338349, "body": "Wouldn&#39;t inference be able to deduce the right type using <code>buf.as_ptr() as *const _</code>?"}], "tags": [], "owner": {"reputation": 2991, "user_id": 3877787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/DPxhf.jpg?s=128&g=1", "display_name": "Zalman Stern", "link": "https://stackoverflow.com/users/3877787/zalman-stern"}, "is_accepted": true, "score": 5, "last_activity_date": 1512597841, "creation_date": 1512597841, "answer_id": 47684200, "question_id": 47684111, "link": "https://stackoverflow.com/questions/47684111/make-string-type-compatible-with-arm/47684200#47684200", "title": "Make String type compatible with ARM?", "body": "<p>You probably want to use <a href=\"https://doc.rust-lang.org/std/os/raw/type.c_char.html\" rel=\"noreferrer\"><code>std::os::raw::c_char</code></a> instead of <code>i8</code>. (Though that may not be the right place to get the type from. <code>libc::c_char</code> seems to exist as well.)</p>\n\n<p>The basic issue is that the <code>char</code> type in C can be signed or unsigned depending on the platform and that is reflected in the foreign function interface. Ideally you'd like to find a way to do the conversion without having to explicitly mention the type.</p>\n"}], "owner": {"reputation": 17167, "user_id": 773263, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/e2581b53db32340d7e1b5be6b99c2bb1?s=128&d=identicon&r=PG", "display_name": "Philip Kirkbride", "link": "https://stackoverflow.com/users/773263/philip-kirkbride"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 106, "favorite_count": 0, "accepted_answer_id": 47684200, "answer_count": 1, "score": 5, "last_activity_date": 1512598332, "creation_date": 1512597432, "last_edit_date": 1512598332, "question_id": 47684111, "link": "https://stackoverflow.com/questions/47684111/make-string-type-compatible-with-arm", "title": "Make String type compatible with ARM?", "body": "<p>I need to compile a program for an ARM device. It seems to be failing here, perhaps because of the type difference on ARM?</p>\n\n<pre><code>unsafe { Ok(String::from(try!(CStr::from_ptr(buf.as_ptr() as *const i8).to_str()))) }\n</code></pre>\n\n<p>The error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>694 |         unsafe { Ok(String::from(try!(CStr::from_ptr(buf.as_ptr() as *const i8).to_str()))) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ expected u8, found i8\n    |\n    = note: expected type `*const u8`\n               found type `*const i8`\n</code></pre>\n\n<p>What is the type difference and how do I fix it?</p>\n"}, {"tags": ["rust", "bitflags"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512592755, "post_id": 47683027, "comment_id": 82325478, "body": "Part of the template you were provided with says: <i>Paste the part of the code that shows the problem</i>, but you seem to have forgotten that step. We can&#39;t provide any information without that."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512592767, "post_id": 47683027, "comment_id": 82325487, "body": "What version of Rust are you using?"}, {"owner": {"reputation": 2912, "user_id": 3081206, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/YaKOY.jpg?s=128&g=1", "display_name": "takendarkk", "link": "https://stackoverflow.com/users/3081206/takendarkk"}, "edited": false, "score": 0, "creation_date": 1512592777, "post_id": 47683027, "comment_id": 82325491, "body": "What does the code look like?"}, {"owner": {"reputation": 40441, "user_id": 184499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9193db48f98cc6e0314a7c536a2c6330?s=128&d=identicon&r=PG", "display_name": "Matt", "link": "https://stackoverflow.com/users/184499/matt"}, "edited": false, "score": 0, "creation_date": 1512592880, "post_id": 47683027, "comment_id": 82325538, "body": "Why would OP have source code handy for vendored code that is failing to compile"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 40441, "user_id": 184499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9193db48f98cc6e0314a7c536a2c6330?s=128&d=identicon&r=PG", "display_name": "Matt", "link": "https://stackoverflow.com/users/184499/matt"}, "edited": false, "score": 1, "creation_date": 1512593176, "post_id": 47683027, "comment_id": 82325696, "body": "@Matt (1) bitflags is an open-source project (2) I&#39;m not asking for the source code of bitflags but for the project configuration and code that OP used to trigger the error (3) If OP can&#39;t provide a way for an answerer to reproduce the error (an <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>), then the question is unlikely to be a good fit for Stack Overflow."}, {"owner": {"reputation": 40441, "user_id": 184499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9193db48f98cc6e0314a7c536a2c6330?s=128&d=identicon&r=PG", "display_name": "Matt", "link": "https://stackoverflow.com/users/184499/matt"}, "edited": false, "score": 0, "creation_date": 1512593300, "post_id": 47683027, "comment_id": 82325773, "body": "Trust me I am familiar with the SO culture for this. Still think it&#39;s weird you are citing <i>Paste the part of the code that shows the problem</i> - Just asking him to post Rust version etc would&#39;ve been far better advice. People are too trigger-happy on the downvotes too, sheesh"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 40441, "user_id": 184499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9193db48f98cc6e0314a7c536a2c6330?s=128&d=identicon&r=PG", "display_name": "Matt", "link": "https://stackoverflow.com/users/184499/matt"}, "edited": false, "score": 1, "creation_date": 1512594081, "post_id": 47683027, "comment_id": 82326174, "body": "@Matt and many people believe that downvotes cannot be removed once a question or answer has been improved. I&#39;ll downvote when a Q or A is in bad shape and remove it once it&#39;s fixed \u2014 all a part of signaling to the OP and other readers the relative quality of a given post."}], "answers": [{"tags": [], "owner": {"reputation": 117, "user_id": 8589206, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zSvC5.jpg?s=128&g=1", "display_name": "Kent Marete", "link": "https://stackoverflow.com/users/8589206/kent-marete"}, "is_accepted": false, "score": 7, "last_activity_date": 1512593692, "last_edit_date": 1512593692, "creation_date": 1512592817, "answer_id": 47683102, "question_id": 47683027, "link": "https://stackoverflow.com/questions/47683027/why-does-compiling-bitflags-1-0-produce-an-expected-ident-found-error/47683102#47683102", "title": "Why does compiling bitflags 1.0 produce an &quot;expected ident, found #&quot; error?", "body": "<p>Some crates may fail to compile due to compiling with a version of Rust older than the minimum required. It has nothing to do with the OS version or the application itself.</p>\n\n<p>I had <code>rustc 1.19.0 (0ade33941 2017-07-17)</code> while bitflags version 1.0.1 had a minimum supported Rust version of 1.20 due to the use of associated constants.</p>\n\n<p>From time to time, update the Rust compiler by running <code>rustup update</code>.</p>\n"}], "owner": {"reputation": 117, "user_id": 8589206, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zSvC5.jpg?s=128&g=1", "display_name": "Kent Marete", "link": "https://stackoverflow.com/users/8589206/kent-marete"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 250, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1512593756, "creation_date": 1512592522, "last_edit_date": 1512593756, "question_id": 47683027, "link": "https://stackoverflow.com/questions/47683027/why-does-compiling-bitflags-1-0-produce-an-expected-ident-found-error", "title": "Why does compiling bitflags 1.0 produce an &quot;expected ident, found #&quot; error?", "body": "<p>When I try to build a project in Rust with bitflags v1.0.1 in macOS Sierra 10.12.6 the code fails with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Compiling bitflags v1.0.1\nerror: expected ident, found #\n   --&gt; /Users/kenneth.marete/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/lib.rs:423:29\n    |\n423 |                               #[allow(deprecated)]\n    |                               ^\n    | \n   ::: /Users/kenneth.marete/.cargo/registry/src/github.com-1ecc6299db9ec823/bitflags-1.0.1/src/example_generated.rs\n    |\n4   | / bitflags! {\n5   | |     /// This is the same `Flags` struct defined in the [crate level example](../index.html#example).\n6   | |     /// Note that this struct is just for documentation purposes only, it must not be used outside\n7   | |     /// this crate.\n...   |\n13  | |     }\n14  | | }\n    | |_- in this macro invocation\n</code></pre>\n\n<p>I expected it to build successfully.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1512590208, "post_id": 47682291, "comment_id": 82324059, "body": "Are you already familiar with what happens when you spawn a thread? Have you calculated how many threads you are starting in total? What prevents you from trying with a thread pool?"}, {"owner": {"reputation": 1786, "user_id": 1423938, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c6c8f0d785cc11cc58b3ee8a88cc5d9e?s=128&d=identicon&r=PG", "display_name": "Dewey Vozel", "link": "https://stackoverflow.com/users/1423938/dewey-vozel"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512592157, "post_id": 47682291, "comment_id": 82325133, "body": "The number of threads that I spawn with each iteration of the while loop is controlled by an argument passed into the program and stored in options.threads (in the case of the example, 8). Each iteration of the while loop waits until those (8) threads finish before spawning 8 more. TRPL did not cover thread pools, so I&#39;m familiar with it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1512592584, "post_id": 47682291, "comment_id": 82325380, "body": "Not per iteration; <i>in total</i>. Please go ahead and <a href=\"https://stackoverflow.com/posts/47682291/edit\">edit</a> your question to contain a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. Ideally, we should be able to copy-paste your code and run it ourselves to reproduce the same behavior. You should make it <b>minimal</b> \u2014 we don&#39;t need to see the command line parsing, for example. Your implementation of <code>is_prime</code> can even always return <code>true</code> if it continues to have the same behavior."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 4, "creation_date": 1512593690, "post_id": 47682291, "comment_id": 82325970, "body": "This has nothing to do with the rust standard library. If you used equivalent primitives in any other language you would incur similar overhead. You are spawning new threads, performing allocations etc. for each integer computation. If anything it is surprising that the overhead is merely a factor of 400."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 1, "creation_date": 1512594690, "post_id": 47682291, "comment_id": 82326490, "body": "@the8472 I think OPs point is more that the &quot;primitives&quot; exposed by the standard library are full-on threads. In other languages (Go, Erlang, etc), the primitives are more lightweight. OP mentions &quot;1:1 threading&quot; as opposed to &quot;M:N threading&quot;. So, yes, if you used equivalent primitives (a.k.a. system threads) you&#39;d expect similar behavior, but the primitives provided by Rust&#39;s standard library appear heavier than the primitives of other languages."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1512595812, "post_id": 47682291, "comment_id": 82327031, "body": "Sure, but those are quite different primitives that needs to be used differently. If you use threads to compute primes you might use shared memory and CAS or batching if you build it from low-level blocks instead of relying on the stack juggling of green threads, which comes with its own costs. If that&#39;s really what OP meant it&#39;s basically an apples and oranges question. Yes, they&#39;re separate fruits and yes they taste differently, this is expected behavior. Ideally this would have been asked in a more general manner, comparing primitives, not rust vs X."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1512599257, "post_id": 47682291, "comment_id": 82328625, "body": "Even with goroutines or Erlang processes, this code spawns 8 of them each iteration, of which (after the first iteration) at most 3 ever find a prime. Furthermore (assuming <code>is_prime</code> uses trial division with early return), when one does find a prime, we wait for it to finish trying to factorize it before spawning more, so as the numbers grow, we spend most of our time waiting on just a single thread. Since twin primes are sparse, the asymptotic performance of either &quot;concurrent&quot; solution is therefore just as bad as the &quot;non-concurrent&quot; solution, even if concurrency primitives are free!"}], "answers": [{"comments": [{"owner": {"reputation": 1786, "user_id": 1423938, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c6c8f0d785cc11cc58b3ee8a88cc5d9e?s=128&d=identicon&r=PG", "display_name": "Dewey Vozel", "link": "https://stackoverflow.com/users/1423938/dewey-vozel"}, "edited": false, "score": 0, "creation_date": 1512662539, "post_id": 47697335, "comment_id": 82358006, "body": "Thank you. I did do another test earlier using the threadpool crate but it still had some poor performance. I&#39;ll give the scoped_threadpool a try, but I&#39;ll also accept your thorough reply as the answer."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1512754412, "post_id": 47697335, "comment_id": 82399186, "body": "Note that while a new thread &quot;allocates&quot; 2MB of stack space, this does not mean that the OS actually maps 2MB of physical memory to the stack.  It will generally map significantly less than that, and only increase the amount of physical memory if the memory is actually accessed."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1512657064, "creation_date": 1512657064, "answer_id": 47697335, "question_id": 47682291, "link": "https://stackoverflow.com/questions/47682291/is-it-normal-to-experience-large-overhead-using-the-11-threading-that-comes-in/47697335#47697335", "title": "Is it normal to experience large overhead using the 1:1 threading that comes in the standard library?", "body": "<blockquote>\n  <p>threading seems to have a very significant overhead </p>\n</blockquote>\n\n<p>It's not the general concept of \"threading\", it's the concept of creating and destroying lots of threads.</p>\n\n<p>By default in Rust 1.22.1, <a href=\"https://doc.rust-lang.org/std/thread/#stack-size\" rel=\"nofollow noreferrer\">each spawned thread allocates 2MiB</a> of memory to use as stack space. In the worst case, your MCVE could allocate ~200GiB of RAM. In reality, this is unlikely to happen as some threads will exit, memory will be reused, etc. I only saw it use ~400MiB.</p>\n\n<p>On top of that, there is overhead involved with inter-thread communication (<code>Mutex</code>, channels, <code>Atomic*</code>) compared to intra-thread variables. Some kind of locking needs to be performed to ensure that all threads see the same data. \"Embarrassingly parallel\" algorithms tend to not have a lot of communication required. There are also different amounts of time required for different communication primitives. Atomic variables tend to be faster than others in many cases, but aren't as widely usable.</p>\n\n<p>Then there's compiler optimizations to account for. Non-threaded code is way easier to optimize compared to threaded code. For example, running your code in release mode shows:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Non-threaded in 0.0.\nThreaded in 142.775.\n</code></pre>\n\n<p>That's right, the non-threaded code took <strong>no time</strong>. The compiler can see through the code and realizes that nothing actually happens and removes it all. I don't know how you got 5 seconds for the threaded code as opposed to the 2+ minutes I saw.</p>\n\n<hr>\n\n<p>Switching to a threadpool will reduce a lot of the unneeded creation of threads. We can also use a threadpool that provides <em>scoped threads</em>, which allows us to avoid the <code>Arc</code> as well:</p>\n\n<pre><code>extern crate scoped_threadpool;\n\nuse scoped_threadpool::Pool;\n\nfn threaded(iterations: u32) {\n    let tx = Instant::now();\n    let counter = Mutex::new(0);\n\n    let mut pool = Pool::new(8);\n\n    pool.scoped(|scope| {\n        for _ in 0..iterations {\n            scope.execute(|| {\n                let mut num = counter.lock().unwrap();\n                *num = test(*num);\n            });\n        }\n    });\n    let d = tx.elapsed();\n\n    println!(\"Threaded in {}.\", dur_to_string(d));\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Non-threaded in 0.0.\nThreaded in 0.675.\n</code></pre>\n\n<p>As with most pieces of programming, it's crucial to understand the tools you have and to use them appropriately.</p>\n"}], "owner": {"reputation": 1786, "user_id": 1423938, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/c6c8f0d785cc11cc58b3ee8a88cc5d9e?s=128&d=identicon&r=PG", "display_name": "Dewey Vozel", "link": "https://stackoverflow.com/users/1423938/dewey-vozel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 608, "favorite_count": 0, "accepted_answer_id": 47697335, "answer_count": 1, "score": -1, "last_activity_date": 1512657064, "creation_date": 1512589488, "last_edit_date": 1512655150, "question_id": 47682291, "link": "https://stackoverflow.com/questions/47682291/is-it-normal-to-experience-large-overhead-using-the-11-threading-that-comes-in", "title": "Is it normal to experience large overhead using the 1:1 threading that comes in the standard library?", "body": "<p>While working through learning Rust, a friend asked me to see what kind of performance I could get out of Rust for generating the first 1 million prime numbers both single-threaded and multi-threaded. After trying several implementations, I'm just stumped. Here is the kind of performance that I'm seeing:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>rust_primes --threads 8 --verbose --count 1000000\nOptions { verbose: true, count: 1000000, threads: 8 }\nNon-concurrent using while (15485863): 2.814 seconds.\nConcurrent using mutexes (15485863): 876.561 seconds.\nConcurrent using channels (15485863): 798.217 seconds.\n</code></pre>\n\n<p>Without overloading the question with too much code, here are the methods responsible for each of the benchmarks:</p>\n\n<pre><code>fn non_concurrent(options: &amp;Options) {\n    let mut count = 0;\n    let mut current = 0;\n\n    let ts = Instant::now();\n    while count &lt; options.count {\n        if is_prime(current) {\n            count += 1;\n        }\n        current += 1;\n    }\n    let d = ts.elapsed();\n    println!(\"Non-concurrent using while ({}): {}.{} seconds.\", current - 1, d.as_secs(), d.subsec_nanos() / 1_000_000);\n}\n\nfn concurrent_mutex(options: &amp;Options) {\n    let count = Arc::new(Mutex::new(0));\n    let highest = Arc::new(Mutex::new(0));\n\n    let mut cc = 0;\n    let mut current = 0;\n\n    let ts = Instant::now();\n\n    while cc &lt; options.count {\n        let mut handles = vec![];\n        for x in current..(current + options.threads) {\n            let count = Arc::clone(&amp;count);\n            let highest = Arc::clone(&amp;highest);\n            let handle = thread::spawn(move || {\n                if is_prime(x) {\n                    let mut c = count.lock().unwrap();\n                    let mut h = highest.lock().unwrap();\n                    *c += 1;\n                    if x &gt; *h {\n                        *h = x;\n                    }\n                }\n            });\n            handles.push(handle);\n        }\n\n        for handle in handles {\n            handle.join().unwrap();\n        }\n\n        cc = *count.lock().unwrap();\n        current += options.threads;\n    }\n\n    let d = ts.elapsed();\n    println!(\"Concurrent using mutexes ({}): {}.{} seconds.\", *highest.lock().unwrap(), d.as_secs(), d.subsec_nanos() / 1_000_000);\n}\n\nfn concurrent_channel(options: &amp;Options) {\n    let mut count = 0;\n    let mut current = 0;\n    let mut highest = 0;\n\n    let ts = Instant::now();\n\n    while count &lt; options.count {\n        let (tx, rx) = mpsc::channel();\n\n        for x in current..(current + options.threads) {\n            let txc = mpsc::Sender::clone(&amp;tx);\n\n            thread::spawn(move || {\n                if is_prime(x) {\n                    txc.send(x).unwrap();\n                }\n            });\n        }\n\n        drop(tx);\n\n        for message in rx {\n            count += 1;\n\n            if message &gt; highest &amp;&amp; count &lt;= options.count {\n                highest = message;\n            }\n        }\n\n        current += options.threads;\n    }\n\n    let d = ts.elapsed();\n    println!(\"Concurrent using channels ({}): {}.{} seconds.\", highest, d.as_secs(), d.subsec_nanos() / 1_000_000);\n}\n</code></pre>\n\n<p>Am I doing something wrong, or is this normal performance with the 1:1 threading that comes in the standard library?</p>\n\n<p>Here is a MCVE that shows the same problem. I didn't limit the number of threads it starts up at once here like I did in the code above. The point is, threading seems to have a very significant overhead unless I'm doing something horribly wrong.</p>\n\n<pre><code>use std::thread;\nuse std::time::Instant;\nuse std::sync::{Mutex, Arc};\nuse std::time::Duration;\n\nfn main() {\n    let iterations = 100_000;\n    non_threaded(iterations);\n    threaded(iterations);\n}\n\nfn threaded(iterations: u32) {\n    let tx = Instant::now();\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..iterations {\n        let counter = Arc::clone(&amp;counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n            *num = test(*num);\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n    let d = tx.elapsed();\n\n    println!(\"Threaded in {}.\", dur_to_string(d));\n}\n\nfn non_threaded(iterations: u32) {\n    let tx = Instant::now();\n    let mut _q = 0;\n    for x in 0..iterations {\n        _q = test(x + 1);\n    }\n\n    let d = tx.elapsed();\n    println!(\"Non-threaded in {}.\", dur_to_string(d));\n}\n\nfn dur_to_string(d: Duration) -&gt; String {\n    let mut s = d.as_secs().to_string();\n    s.push_str(\".\");\n    s.push_str(&amp;(d.subsec_nanos() / 1_000_000).to_string());\n    s\n}\n\nfn test(x: u32) -&gt; u32 {\n    x\n}\n</code></pre>\n\n<p>Here are the results of this on my machine:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Non-threaded in 0.9.\nThreaded in 5.785.\n</code></pre>\n"}, {"tags": ["rust", "traits", "mutable", "trait-objects"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512582917, "post_id": 47680423, "comment_id": 82320323, "body": "I&#39;ve looked at MIR and I have exactly <b>zero</b> idea what&#39;s going on."}, {"owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512583086, "post_id": 47680423, "comment_id": 82320418, "body": "@ljedrz is it not intended to happen?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512583504, "post_id": 47680423, "comment_id": 82320633, "body": "I dunno, though this isn&#39;t how you would normally do it; I&#39;m interested in the logic behind it, as the intermediate representation is very convoluted."}, {"owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512583630, "post_id": 47680423, "comment_id": 82320687, "body": "I&#39;m also very interested in it. I understand I should use Box&lt;Hello&gt; (or in nightly: impl Hello). Is that the normal way to do it?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512585269, "post_id": 47680423, "comment_id": 82321501, "body": "Yes, that would be the usual way to do it."}, {"owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512585477, "post_id": 47680423, "comment_id": 82321587, "body": "Someone pointed out to me on Reddit that this only works for zero sized types. Proof: <a href=\"https://play.rust-lang.org/?gist=648657103e2640d12f1c9403bf05d329&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512586217, "post_id": 47680423, "comment_id": 82321935, "body": "@RodolfoCastilloMateluna zero-size is not correct. <a href=\"https://play.integer32.com/?gist=89384ed55b8347a170055d501d26beb9&amp;version=stable\" rel=\"nofollow noreferrer\">It needs to be a constant value though</a>. <code>String</code> involves allocation."}, {"owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512586514, "post_id": 47680423, "comment_id": 82322076, "body": "@Shepmaster I was trying to avoid using constant values, but I get the idea."}], "answers": [{"comments": [{"owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "edited": false, "score": 0, "creation_date": 1512586720, "post_id": 47681408, "comment_id": 82322194, "body": "Thanks for the reference. Interesting behaviour!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "edited": false, "score": 0, "creation_date": 1512662183, "post_id": 47681408, "comment_id": 82357763, "body": "@RodolfoCastilloMateluna FYI, I was wrong \u2014 it is a bug!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "edited": false, "score": 0, "creation_date": 1512663941, "post_id": 47681408, "comment_id": 82358933, "body": "@RodolfoCastilloMateluna yes, I&#39;ve linked the issue at the top of the answer. Honestly, I bet the person who filed the issue actually saw your original post on Reddit!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1512662167, "last_edit_date": 1512662167, "creation_date": 1512585982, "answer_id": 47681408, "question_id": 47680423, "link": "https://stackoverflow.com/questions/47680423/difference-between-mut-and-ref-mut-for-trait-objects/47681408#47681408", "title": "Difference between &amp;mut and ref mut for trait objects", "body": "<p><a href=\"https://github.com/rust-lang/rust/issues/46557\" rel=\"nofollow noreferrer\">This is a bug</a>. My original analysis below completely ignored the fact that it was returning a <em>mutable</em> reference. The bits about promotion only make sense in the context of <em>immutable</em> values.</p>\n\n<hr>\n\n<p>This is allowable due to a nuance of the <a href=\"https://doc.rust-lang.org/reference/expressions.html#temporary-lifetimes\" rel=\"nofollow noreferrer\">rules governing temporaries</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>When using an rvalue in most lvalue contexts, a temporary unnamed lvalue is created and used instead, <strong>if not promoted to <code>'static</code></strong>.</p>\n</blockquote>\n\n<p>The reference continues:</p>\n\n<blockquote>\n  <p>Promotion of an rvalue expression to a <code>'static</code> slot occurs when the expression could be written in a constant, borrowed, and dereferencing that borrow where the expression was the originally written, without changing the runtime behavior. That is, the promoted expression can be evaluated at compile-time and the resulting value does not contain interior mutability or destructors (these properties are determined based on the value where possible, e.g. <code>&amp;None</code> always has the type <code>&amp;'static Option&lt;_&gt;</code>, as it contains nothing disallowed). </p>\n</blockquote>\n\n<p>Your third case can be rewritten as this to \"prove\" that the <code>'static</code> promotion is occurring: </p>\n\n<pre><code>fn make_hello_3&lt;'a&gt;() -&gt; &amp;'a mut Hello {\n    let ref mut b = English;\n    let c: &amp;'static mut Hello = b;\n    c\n}\n</code></pre>\n\n<p>As for why <code>ref mut</code> allows this and <code>&amp;mut</code> doesn't, my best guess is that the <code>'static</code> promotion is on a best-effort basis and <code>&amp;mut</code> just isn't caught by whatever checks are present. You could probably look for or file an issue describing the situation.</p>\n"}], "owner": {"reputation": 175, "user_id": 4490651, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-fDn1g7DpL4E/AAAAAAAAAAI/AAAAAAAABB4/7emlS9NIQgM/photo.jpg?sz=128", "display_name": "rocam", "link": "https://stackoverflow.com/users/4490651/rocam"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1206, "favorite_count": 1, "accepted_answer_id": 47681408, "answer_count": 1, "score": 9, "last_activity_date": 1512662167, "creation_date": 1512582300, "last_edit_date": 1512586791, "question_id": 47680423, "link": "https://stackoverflow.com/questions/47680423/difference-between-mut-and-ref-mut-for-trait-objects", "title": "Difference between &amp;mut and ref mut for trait objects", "body": "<p>First of all, I'm not asking what's the difference between <code>&amp;mut</code> and <code>ref mut</code> per se.</p>\n\n<p>I'm asking because I thought:</p>\n\n<pre><code>let ref mut a = MyStruct\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>let a = &amp;mut MyStruct\n</code></pre>\n\n<p>Consider returning a trait object from a function. You can return a <code>Box&lt;Trait&gt;</code> or a <code>&amp;Trait</code>. If you want to have mutable access to its methods, is it possible to return <code>&amp;mut Trait</code>?</p>\n\n<p>Given this example:</p>\n\n<pre><code>trait Hello {\n    fn hello(&amp;mut self);\n}\n\nstruct English;\nstruct Spanish;\n\nimpl Hello for English {\n    fn hello(&amp;mut self) {\n        println!(\"Hello!\");\n    }\n}\n\nimpl Hello for Spanish {\n    fn hello(&amp;mut self) {\n        println!(\"Hola!\");\n    }\n}\n</code></pre>\n\n<p>The method receives a mutable reference for demonstration purposes.</p>\n\n<p>This won't compile:</p>\n\n<pre><code>fn make_hello&lt;'a&gt;() -&gt; &amp;'a mut Hello {\n    &amp;mut English\n}\n</code></pre>\n\n<p>nor this:</p>\n\n<pre><code>fn make_hello&lt;'a&gt;() -&gt; &amp;'a mut Hello {\n    let b = &amp;mut English;\n    b\n}\n</code></pre>\n\n<p>But this will compile and work:</p>\n\n<pre><code>fn make_hello&lt;'a&gt;() -&gt; &amp;'a mut Hello {\n    let ref mut b = English;\n    b\n}\n</code></pre>\n\n<p><strong>My theory</strong></p>\n\n<p>This example will work out of the box with immutable references (not necessary to assign it to a variable, just return <code>&amp;English</code>) but not with mutable references. I think this is due to the rule that there can be only one mutable reference or as many immutable as you want.</p>\n\n<p>In the case of immutable references, you are creating an object and borrowing it as a return expression; its reference won't die because it's being borrowed.</p>\n\n<p>In the case of mutable references, if you try to create an object and borrow it mutably as a return expression you have two mutable references (the created object and its mutable reference). Since you cannot have two mutable references to the same object it won't perform the second, hence the variable won't live long enough. I think that when you write <code>let mut ref b = English</code> and return <code>b</code> you are <em>moving</em> the mutable reference because it was captured by a pattern.</p>\n\n<p>All of the above is a poor attempt to explain to myself why it works, but I don't have the fundamentals to prove it.</p>\n\n<p>Why does this happen?</p>\n\n<p>I've also <a href=\"https://www.reddit.com/r/rust/comments/7hffz6/hey_rustaceans_got_an_easy_question_ask_here/dquzl85/\" rel=\"noreferrer\">cross-posted this question to Reddit</a>.</p>\n"}, {"tags": ["templates", "rust"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 4, "creation_date": 1512567563, "post_id": 47675493, "comment_id": 82310154, "body": "not implemented yet: <a href=\"https://github.com/rust-lang/rust/issues/44580\" rel=\"nofollow noreferrer\">&quot;Tracking issue for const generics (RFC 2000)&quot;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512573064, "post_id": 47676683, "comment_id": 82314008, "body": "<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md#specialization-on-const-parameters\" rel=\"nofollow noreferrer\">RFC 2000: Specialization on const parameters</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512583332, "post_id": 47676683, "comment_id": 82320538, "body": "@Stefan: Thanks, missed this."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 11, "last_activity_date": 1512583323, "last_edit_date": 1512583323, "creation_date": 1512570562, "answer_id": 47676683, "question_id": 47675493, "link": "https://stackoverflow.com/questions/47675493/equivalent-of-specific-template-usage-in-c-for-rust/47676683#47676683", "title": "Equivalent of specific template usage in C++ for Rust", "body": "<p><strong>TL;DR: Not yet, maybe not ever.</strong></p>\n\n<p>Rust generics are not as powerful, yet, as C++ templates, and may never be.</p>\n\n<p>Specifically here, two features are required:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/2000\" rel=\"noreferrer\">RFC 2000: Const generics</a>: which will enable non-type generic parameters,</li>\n<li><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2000-const-generics.md#specialization-on-const-parameters\" rel=\"noreferrer\">RFC 2000: Specialization on const generics</a>.</li>\n</ul>\n\n<p><em>Note: it is unclear how advanced the specialization will be; in this specific case where you use full specialization it should be enough, however it is not clear whether partial specialization will be implemented, and how.</em></p>\n\n<hr>\n\n<p>There are also other missing pieces, though not related to this case:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"noreferrer\">RFC 1598: Generic Associated Types</a>: equivalent to nested <code>template &lt;...&gt; using ... = ...;</code> and allowing to emulate template template parameters,</li>\n<li>variadics: there have been multiple RFCs, but none seems to have gain much foothold.</li>\n</ul>\n\n<p>It would be easy to deride Rust developers, or shrug it off as a lack of maturity; it would also be incorrect.</p>\n\n<p>As I mentioned, it is not clear that Rust will ever gain some of those features, not because the developers could not implement them, they certainly could, they certainly <em>could have already</em>, but because there is a strong focus in <strong>doing things right</strong><sup>1</sup>.</p>\n\n<p>For example, <strong>specialization</strong> is a nightmare in C++. It is <em>Undefined Behavior</em> to instantiate a template with a set of arguments A, and later (or in another translation unit) specialize it in a way that would match A. For functions, this generally manifests as the linker picking either the generic or the specialized version... randomly. It's not fun to debug.</p>\n\n<p>Any modifications to generics has large potential repercussions on the rest of the type system, complex interactions with other language features, and significant changes about what a well-typed program means:</p>\n\n<ul>\n<li>they are therefore heavily scrutinized,</li>\n<li>and there is a strong push toward going <em>slow</em> and building <em>incrementally</em>, so as to evaluate those impacts, interactions and changes one at a time.</li>\n</ul>\n\n<p>In short, Rust developers are attempting to build a well-principled generics system, and it's not easy.</p>\n\n<p><sup>1</sup> <em>There are also concerns about unnecessary complexity, so features are not added \"just because\", but require motivating use cases which should be compelling enough to justify the additional complexity in the language and the compiler; but that's another gate entirely.</em></p>\n"}], "owner": {"reputation": 727, "user_id": 6860744, "user_type": "registered", "accept_rate": 79, "profile_image": "https://lh5.googleusercontent.com/-3_2Ewze_gI8/AAAAAAAAAAI/AAAAAAAAACQ/fz_BqGtzSd4/photo.jpg?sz=128", "display_name": "Darius Duesentrieb", "link": "https://stackoverflow.com/users/6860744/darius-duesentrieb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1194, "favorite_count": 1, "accepted_answer_id": 47676683, "answer_count": 1, "score": 4, "last_activity_date": 1512583323, "creation_date": 1512566835, "last_edit_date": 1512568951, "question_id": 47675493, "link": "https://stackoverflow.com/questions/47675493/equivalent-of-specific-template-usage-in-c-for-rust", "title": "Equivalent of specific template usage in C++ for Rust", "body": "<p>Is there a feature in Rust that makes something like this possible?\nAs far as I know, this is not possible with Rust's generic functions because they work only with data types and not with values.</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;iostream&gt;\n\ntemplate&lt;int T&gt;\nint foo(int a)\n{\n  return -1;\n}\ntemplate&lt;&gt;\nint foo&lt;2&gt;(int a)\n{\n  return a*a;\n}\ntemplate&lt;&gt;\nint foo&lt;3&gt;(int a)\n{\n  return a*a*a;\n}\n\nint main()\n{\n  std::cout &lt;&lt; \"foo&lt;1&gt;(3): \"&lt;&lt;foo&lt;1&gt;(3) &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"foo&lt;2&gt;(3): \"&lt;&lt;foo&lt;2&gt;(3) &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"foo&lt;3&gt;(3): \"&lt;&lt;foo&lt;3&gt;(3) &lt;&lt; std::endl;\n  return 1;\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>foo&lt;1&gt;(3): -1\nfoo&lt;2&gt;(3): 9\nfoo&lt;3&gt;(3): 27\n</code></pre>\n"}, {"tags": ["rust", "collision-detection", "separating-axis-theorem"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512568394, "post_id": 47671760, "comment_id": 82310717, "body": "<i>I have a working ...</i> \u2014 I usually recommend that such questions are asked on <a href=\"https://codereview.meta.stackexchange.com/questions/5777/a-guide-to-code-review-for-stack-overflow-users\">Code Review</a>, but you do have to be willing to accept feedback about the whole program."}, {"owner": {"reputation": 1502, "user_id": 1014587, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/990x8.jpg?s=128&g=1", "display_name": "Mast", "link": "https://stackoverflow.com/users/1014587/mast"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512568584, "post_id": 47671760, "comment_id": 82310835, "body": "@Shepmaster Since OP is asking a fairly specific question here, I&#39;d recommend against moving it. Should be just fine here."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1502, "user_id": 1014587, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/990x8.jpg?s=128&g=1", "display_name": "Mast", "link": "https://stackoverflow.com/users/1014587/mast"}, "edited": false, "score": 0, "creation_date": 1512568732, "post_id": 47671760, "comment_id": 82310936, "body": "@Mast yep wasn&#39;t saying that the question <i>as asked</i> should be moved, just letting OP know that if they artificially limited their request, they didn&#39;t have do (note what link I used for &quot;Code Review&quot;)."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512575581, "post_id": 47671760, "comment_id": 82315744, "body": "Seems to be a duplicate of <a href=\"https://gamedev.stackexchange.com/questions/27596/implementing-separating-axis-theorem-sat-and-minimum-translation-vector-mtv\" title=\"implementing separating axis theorem sat and minimum translation vector mtv\">gamedev.stackexchange.com/questions/27596/&hellip;</a>"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512575750, "post_id": 47671760, "comment_id": 82315859, "body": "As far as I can tell an oriented overlap is the &quot;best&quot; way to implement it (although you might want to document and test the orientation).  The &quot;no-overlap&quot; condition could be simplified though: <code>self.min &gt; other.max || self.max &lt; other.min</code>."}], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 456, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1512589596, "creation_date": 1512555247, "last_edit_date": 1512589596, "question_id": 47671760, "link": "https://stackoverflow.com/questions/47671760/can-i-simplify-this-implementation-of-the-separating-axis-theorem", "title": "Can I simplify this implementation of the separating axis theorem?", "body": "<p>I have a working convex 2d polygon vs convex 2d polygon collision test based on the separating axes theorem (SAT). </p>\n\n<p>My question is:\nIs it possibly to implement this algorithm without correcting the direction of the MTV in some form? (by paying attention to winding order, outward facing normals or other details that I might have gotten wrong).</p>\n\n<p>The SAT produces a minimum translation vector. I found it difficult to get the direction of the MTV right, as it was pointing in the wrong direction about half of the time (if polygon A and B are passed to the collision detection function, the MTV should always be for A). It started working correctly only after adding code that checks for the direction of overlap between two projections, not merely if two projections overlap.</p>\n\n<pre><code>pub struct Projection {\n    min: f64,\n    max: f64,\n}\n\nimpl Projection {\n   // omitted some other functions not relevant to the question\n\n   /// Calculates the direction of overlap between two projections.\n   /// In case of no overlap, None is returned\n   pub fn overlap(&amp;self, other: &amp;Self) -&gt; Option&lt;f64&gt; {\n        let sum = (self.max - self.min) + (other.max - other.min);    \n        let extent = self.max.max(other.max) - self.min.min(other.min);\n        if (sum - extent).is_sign_negative() {\n            None\n        }\n        else if self.max - other.min &lt; other.max - self.min {\n            Some(self.max - other.min)\n        } else { \n            Some(self.min - other.max)\n        }\n    }\n}\n</code></pre>\n\n<p>However I have the feeling that I may have missed an important detail because various articles and comments on SAT that I've read mention outward facing polygon normals, and the topic of the MTV direction is given relatively little attention (as if it was trivially easy, while for me it was the hardest part).</p>\n\n<p>The core of my SAT implementation is this function, which is called twice. The second time the function is called with order of arguments reversed, which affects MTV direction but I'm well aware of this.</p>\n\n<pre><code>fn find_mtv(a: &amp;Convex, b: &amp;Convex) -&gt; Option&lt;MtvComponents&gt; {   \n    let mut comps = MtvComponents::new();\n    for axis in a.iter_normals().map(Vector::normalize) {\n        let proj_a = Projection::new(a.iter_vertices(), axis);\n        let proj_b = Projection::new(b.iter_vertices(), axis);\n        if let Some(overlap) = proj_a.overlap(&amp;proj_b) {\n            comps.store_min(overlap, axis);\n        } else {\n            return None\n        }\n    }\n    Some(comps)\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 1, "creation_date": 1512548864, "post_id": 47669827, "comment_id": 82298366, "body": "<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">A vector</a>."}, {"owner": {"reputation": 908, "user_id": 136202, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9a9fe701a7f2135170b228e87459f7b3?s=128&d=identicon&r=PG", "display_name": "Rajasankar", "link": "https://stackoverflow.com/users/136202/rajasankar"}, "reply_to_user": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 0, "creation_date": 1512549013, "post_id": 47669827, "comment_id": 82298457, "body": "Yes I have tried with various vec types such as Vec&lt;(u8)&gt;, Vec&lt;_&gt; etc but I cant added Vec.push((1)), Vec.push((1,2))"}, {"owner": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 1, "creation_date": 1512549179, "post_id": 47669827, "comment_id": 82298553, "body": "<a href=\"https://play.rust-lang.org/?gist=1f18331b1468da55fc9b4df4020a1f33&amp;version=stable\" rel=\"nofollow noreferrer\">See this example</a> for an equivalent to the Python version."}, {"owner": {"reputation": 908, "user_id": 136202, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9a9fe701a7f2135170b228e87459f7b3?s=128&d=identicon&r=PG", "display_name": "Rajasankar", "link": "https://stackoverflow.com/users/136202/rajasankar"}, "reply_to_user": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 1, "creation_date": 1512549281, "post_id": 47669827, "comment_id": 82298605, "body": "Oh My god. this simple. I am trying various non-sense. Shall I delete this question or add an example?"}, {"owner": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 1, "creation_date": 1512549356, "post_id": 47669827, "comment_id": 82298640, "body": "You cannot use tuples because tuples of different sizes are of different types. And when you push the first tuple then that determines the type of the vector. So you could only push the same kind of tuples there. Since the equivalent of a Python list is a vector, the equivalent of a list of lists is a vector of vectors."}, {"owner": {"reputation": 908, "user_id": 136202, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9a9fe701a7f2135170b228e87459f7b3?s=128&d=identicon&r=PG", "display_name": "Rajasankar", "link": "https://stackoverflow.com/users/136202/rajasankar"}, "reply_to_user": {"reputation": 304245, "user_id": 216074, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/609c93bafd659500f83fde04802a9be5?s=128&d=identicon&r=PG", "display_name": "poke", "link": "https://stackoverflow.com/users/216074/poke"}, "edited": false, "score": 0, "creation_date": 1512549511, "post_id": 47669827, "comment_id": 82298721, "body": "I got confused by defining the vector. I was concentrating on Vec&lt;&gt; and trying how to define Vec&lt;Vec&gt; or Vec&lt;[]&gt;. This makes good sense now. Thanks for the help."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1512553829, "post_id": 47669827, "comment_id": 82301335, "body": "I think the examples so far lack an explanation what the actual type looks like (say you want to return it from a function). <i>list of lists</i> translates directly to <i>Vec of Vec</i>. So the type of a <i>Vec of Vec of small integers</i> could be <code>Vec&lt;Vec&lt;i8&gt;&gt;</code>."}], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": true, "score": 3, "last_activity_date": 1512569183, "last_edit_date": 1512569183, "creation_date": 1512549172, "answer_id": 47669928, "question_id": 47669827, "link": "https://stackoverflow.com/questions/47669827/how-to-add-variable-length-array-into-a-vec/47669928#47669928", "title": "How to add variable length array into a Vec?", "body": "<p>What have you tried? The straight translation of your example works:</p>\n\n<pre><code>fn main() {\n    let mut a = vec![];\n    a.push(vec![1, 2]);\n    a.push(vec![1, 2, 3]);\n    a.push(vec![1, 2, 3, 4]);\n    a.push(vec![1, 2, 3]);\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p><a href=\"https://play.integer32.com/?gist=830a1987e68aa975d172d680a4095ed8&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 908, "user_id": 136202, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/9a9fe701a7f2135170b228e87459f7b3?s=128&d=identicon&r=PG", "display_name": "Rajasankar", "link": "https://stackoverflow.com/users/136202/rajasankar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 471, "favorite_count": 0, "accepted_answer_id": 47669928, "answer_count": 1, "score": -6, "last_activity_date": 1608766745, "creation_date": 1512548796, "last_edit_date": 1608766745, "question_id": 47669827, "link": "https://stackoverflow.com/questions/47669827/how-to-add-variable-length-array-into-a-vec", "title": "How to add variable length array into a Vec?", "body": "<p>What is equivalent of list of lists in Python for Rust?</p>\n<p>For example:</p>\n<pre><code>a=[]\na.append([1,2])\na.append([1,2,3])\na.append([1,2,3,4])\na.append([1,2,3])\n</code></pre>\n<p>I couldn\u2019t find an example. I have tried with enums, Vector default types, but I couldn't add variable length array into another Vector.</p>\n<p>I would like to have:</p>\n<pre><code>let mut v: Vec&lt;[]&gt; = vec![]; \nv.push((1,2));\nv.push((1));\n</code></pre>\n"}, {"tags": ["rust", "cartesian-product", "generic-collections"], "comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1512551351, "post_id": 47668915, "comment_id": 82299700, "body": "Boxed iterator is not an adequate substitution for lazily evaluated Haskell variable as it cannot be rewound or cloned and thus such direct translation will not work. Representation of a list as a chain of boxed <code>Chain</code>s will not be efficient either."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512554184, "post_id": 47668915, "comment_id": 82301574, "body": "@red75prime Okay, so how do I do that generically and in functional style?"}, {"owner": {"reputation": 868, "user_id": 4051512, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8bd3beb8e3334400c9d43118b2206a62?s=128&d=identicon&r=PG&f=1", "display_name": "papagaga", "link": "https://stackoverflow.com/users/4051512/papagaga"}, "edited": false, "score": 5, "creation_date": 1512555152, "post_id": 47668915, "comment_id": 82302244, "body": "You&#39;re writing Rust but thinking Haskell, it will go wrong. Take a look at <a href=\"http://killercup.github.io/vibrant-rs/itertools/struct.Product.html\" rel=\"nofollow noreferrer\">this</a> to see what a rust implementation could look like."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 1, "creation_date": 1512720656, "post_id": 47668915, "comment_id": 82380038, "body": "@user1685095, you&#39;ll need to implement all the machinery functional languages hide under the hood. I <a href=\"https://play.rust-lang.org/?gist=0b85820cad5cd9cfceb44ca03e7e250b&amp;version=nightly\" rel=\"nofollow noreferrer\">gave it a try</a>."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512737763, "post_id": 47668915, "comment_id": 82389658, "body": "The code isn&#39;t fast. It could be expected as it is a na&#239;ve translation of the functional program."}, {"owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1555380439, "post_id": 47668915, "comment_id": 98080909, "body": "@red75prime 1. <code>FnBox</code> is obsolate. You can simply use <code>FnOnce</code> according to the latest PR.(You still need beta or nightly) 2. <code>clone_closure</code> and <code>copy_closure</code> are stable already."}, {"owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "edited": false, "score": 0, "creation_date": 1555418398, "post_id": 47668915, "comment_id": 98097444, "body": "I posted a link to this question on reddit, and got very interesting answers: <a href=\"https://www.reddit.com/r/rust/comments/bdlna5/is_there_a_good_rust_translation_of_these_2_lines/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/bdlna5/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1512583876, "post_id": 47679959, "comment_id": 82320825, "body": "Object safety doesn&#39;t come into play here \u2014 <a href=\"https://play.integer32.com/?gist=11a96a3cec3980c939de73ec8c0c121f&amp;version=stable\" rel=\"nofollow noreferrer\">it&#39;s fine to create a trait object from <code>iter::empty</code></a>. That &quot;intuition&quot; refers to arguments other than <code>self</code>."}, {"owner": {"reputation": 5038, "user_id": 3579309, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/Wn5ES.jpg?s=128&g=1", "display_name": "lovasoa", "link": "https://stackoverflow.com/users/3579309/lovasoa"}, "edited": false, "score": 0, "creation_date": 1555343972, "post_id": 47679959, "comment_id": 98068906, "body": "&quot;you&#39;re trying to transpose an algorithm designed to work on lists into an algorithm working on iterators&quot;: this is not really true... Haskell lists are closer to a cloneable iterator than they are to a Vec in rust. The algorithm presented here only relies on fetching the next element from an iterator, and cloning it. The thing that makes this two-lines haskell program hard to implement in rust is the lazy nature of Haskell."}], "tags": [], "owner": {"reputation": 868, "user_id": 4051512, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8bd3beb8e3334400c9d43118b2206a62?s=128&d=identicon&r=PG&f=1", "display_name": "papagaga", "link": "https://stackoverflow.com/users/4051512/papagaga"}, "is_accepted": false, "score": 0, "last_activity_date": 1512580618, "creation_date": 1512580618, "answer_id": 47679959, "question_id": 47668915, "link": "https://stackoverflow.com/questions/47668915/how-to-create-a-function-that-creates-a-cartesian-product-iterator-from-an-itera/47679959#47679959", "title": "How to create a function that creates a Cartesian product Iterator from an Iterator of Iterators?", "body": "<p>The first reason your approach is bound to fail is because you're trying to transpose an algorithm designed to work on lists into an algorithm working on iterators. Lists are suitable for a functional approach, iterators aren't, because they have a state. The <code>next(&amp;mut self)</code> function won't return the same value each time it's called with the same argument, whereas a <code>next(x:xs)</code> function will. This is the reason why the <a href=\"http://killercup.github.io/vibrant-rs/itertools/struct.Product.html\" rel=\"nofollow noreferrer\">implementation found in itertools</a> clones iterators: to save their initial state and recover it for the next iteration over the set.</p>\n\n<p>The second reason, the one behind the error messages, is that you're fighting against Rust's type system. The result values of all your calls to iterator functions (<code>fold</code>, <code>flat_map</code>, etc.) aren't trait objects but 'concrete types'. For instance <code>iterator.fold(init, fn)</code>'s result type is <code>init</code>'s type. That's why the compiler complains when you pass <code>fold</code> a lambda that doesn't return a <code>std::iter::Empty&lt;T&gt;</code>.</p>\n\n<p>But it gets worse. You could imagine to coerce or cast that <code>std::iter::Empty&lt;T&gt;</code> into a trait object. Alas, object safety is required. To put it in a nutshell, <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html\" rel=\"nofollow noreferrer\">\"A good intuition is \u201cexcept in special circumstances, if your trait\u2019s method uses Self, it is not object-safe.\"</a>. But iterators' main method is <code>next(&amp;mut self)</code>.</p>\n"}], "owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 2926, "favorite_count": 0, "answer_count": 1, "score": 12, "last_activity_date": 1582804465, "creation_date": 1512544932, "last_edit_date": 1582804465, "question_id": 47668915, "link": "https://stackoverflow.com/questions/47668915/how-to-create-a-function-that-creates-a-cartesian-product-iterator-from-an-itera", "title": "How to create a function that creates a Cartesian product Iterator from an Iterator of Iterators?", "body": "<p>If I want to create a Cartesian product of a list of lists in Haskell, I can do this:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>product [] = [[]]\nproduct (xs:xss) = concatMap (\\k -&gt; map (k:) (product1 xss)) xs\n</code></pre>\n\n<p>or even this:</p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>sequence xss\n</code></pre>\n\n<p>I'm trying to implement an efficient iterator that would do the same in Rust, but I'm not sure what is wrong with my attempt:</p>\n\n<pre><code>use std::iter::{empty, once};\n\nfn product&lt;T, I, V&gt;(xss: I) -&gt; Box&lt;Iterator&lt;Item = Iterator&lt;Item = T&gt;&gt;&gt;\nwhere\n    T: Clone,\n    V: IntoIterator&lt;Item = T&gt;,\n    I: IntoIterator&lt;Item = V&gt;,\n{\n    Box::new(xss.into_iter().fold(once(empty()), |acc, xs| {\n        xs.into_iter().flat_map(|x| acc.map(|ys| ys.chain(once(x))))\n    }))\n}\n\nfn main() {\n    let data = vec![[1, 2, 3], [10, 20, 30], [100, 200, 300]];\n    let it: Vec&lt;Vec&lt;u32&gt;&gt; = product(data).collect();\n    println!(\"{:?}\", it);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=1cd629906881e2b8a13d723a140d1e83&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>Produces these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:10:9\n   |\n10 |         xs.into_iter().flat_map(|x| acc.map(|ys| ys.chain(once(x))))\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::iter::Once`, found struct `std::iter::FlatMap`\n   |\n   = note: expected type `std::iter::Once&lt;std::iter::Empty&lt;T&gt;&gt;`\n              found type `std::iter::FlatMap&lt;&lt;V as std::iter::IntoIterator&gt;::IntoIter, std::iter::Map&lt;std::iter::Once&lt;std::iter::Empty&lt;T&gt;&gt;, [closure@src/main.rs:10:45: 10:67 x:_]&gt;, [closure@src/main.rs:10:33: 10:68 acc:_]&gt;`\n\nerror[E0271]: type mismatch resolving `&lt;std::iter::Once&lt;std::iter::Empty&lt;T&gt;&gt; as std::iter::Iterator&gt;::Item == std::iter::Iterator&lt;Item=T&gt;`\n  --&gt; src/main.rs:9:5\n   |\n9  | /     Box::new(xss.into_iter().fold(once(empty()), |acc, xs| {\n10 | |         xs.into_iter().flat_map(|x| acc.map(|ys| ys.chain(once(x))))\n11 | |     }))\n   | |_______^ expected struct `std::iter::Empty`, found trait std::iter::Iterator\n   |\n   = note: expected type `std::iter::Empty&lt;T&gt;`\n              found type `std::iter::Iterator&lt;Item=T&gt;`\n   = note: required for the cast to the object type `std::iter::Iterator&lt;Item=std::iter::Iterator&lt;Item=T&gt;&gt;`\n\nerror[E0277]: the trait bound `[{integer}; 3]: std::iter::Iterator` is not satisfied\n  --&gt; src/main.rs:16:29\n   |\n16 |     let it: Vec&lt;Vec&lt;u32&gt;&gt; = product(data).collect();\n   |                             ^^^^^^^ `[{integer}; 3]` is not an iterator; maybe try calling `.iter()` or a similar method\n   |\n   = help: the trait `std::iter::Iterator` is not implemented for `[{integer}; 3]`\n   = note: required because of the requirements on the impl of `std::iter::IntoIterator` for `[{integer}; 3]`\n   = note: required by `product`\n\nerror: the `collect` method cannot be invoked on a trait object\n  --&gt; src/main.rs:16:43\n   |\n16 |     let it: Vec&lt;Vec&lt;u32&gt;&gt; = product(data).collect();\n   |                                           ^^^^^^^\n</code></pre>\n\n<p>The first error is giving me the feeling that Rust cannot even create a lazily consumed iterator with <code>fold</code> because <code>Empty&lt;T&gt;</code> is an <code>Iterator&lt;Item = T&gt;</code> (at least conceptually), but I hope I'm wrong.</p>\n"}, {"tags": ["rust", "rust-rocket"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1512547577, "post_id": 47667735, "comment_id": 82297754, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/42177226/matching-on-a-box\">Matching on a Box</a>"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1512547626, "post_id": 47667735, "comment_id": 82297777, "body": "&quot;Before you can start writing a Rocket application, you\u2019ll need a <b>nightly</b> version of Rust installed.&quot;"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1512553760, "post_id": 47667735, "comment_id": 82301289, "body": "As Stefan says, the output is pretty straightforward: <code>error[E0554]: #![feature] may not be used on the stable release channel</code>"}], "answers": [{"tags": [], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "is_accepted": true, "score": 5, "last_activity_date": 1512624904, "creation_date": 1512624904, "answer_id": 47688270, "question_id": 47667735, "link": "https://stackoverflow.com/questions/47667735/rust-rocket-cant-compile-state-and-pear-codegen/47688270#47688270", "title": "Rust/Rocket can&#39;t compile `state` and `pear_codegen`", "body": "<p>The <a href=\"https://rocket.rs/guide/quickstart/\" rel=\"noreferrer\">rocket tutorial</a> states that you need rust nightly in order to compile it. In order to install nightly, you do as they say in <a href=\"https://rocket.rs/guide/getting-started/\" rel=\"noreferrer\">this page</a> they link in the tutorial:</p>\n\n<ol>\n<li><a href=\"https://www.rustup.rs/\" rel=\"noreferrer\">install rustup</a></li>\n<li>do <code>rustup default nightly</code></li>\n</ol>\n\n<p>This is all in the docs, so it should be obvious. But from my own experience I often miss those obvious things because starting with a new language is hard and you have jumped over many hurdles already and these might just have been the one hurdle which made you stumble.</p>\n"}], "owner": {"reputation": 4013, "user_id": 919222, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/d1cde35fe1388d83f6b2e931b146ef8b?s=128&d=identicon&r=PG", "display_name": "ikevin8me", "link": "https://stackoverflow.com/users/919222/ikevin8me"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 908, "favorite_count": 1, "accepted_answer_id": 47688270, "answer_count": 1, "score": 1, "last_activity_date": 1512624904, "creation_date": 1512540042, "question_id": 47667735, "link": "https://stackoverflow.com/questions/47667735/rust-rocket-cant-compile-state-and-pear-codegen", "title": "Rust/Rocket can&#39;t compile `state` and `pear_codegen`", "body": "<p>I'm getting started with Rust and Rocket.</p>\n\n<p>I'm following the instructions with the Rocket <a href=\"https://rocket.rs/guide/quickstart/\" rel=\"nofollow noreferrer\">Getting Started</a> and I'm getting \"error: Could not compile <code>state</code>.\" The full log is here:`</p>\n\n<blockquote>\n  <p>~/.cargo/bin/cargo run\n      Updating registry <code>https://github.com/rust-lang/crates.io-index</code>  Downloading rocket_codegen v0.3.3  Downloading rocket v0.3.3<br>\n  Compiling gcc v0.3.54    Compiling smallvec v0.4.4    Compiling libc\n  v0.2.34    Compiling version_check v0.1.3    Compiling language-tags\n  v0.2.2    Compiling serde v1.0.23    Compiling state v0.3.2\n  error[E0554]: #![feature] may not be used on the stable release\n  channel  -->\n  /Users/ktenjin/.cargo/registry/src/github.com-1ecc6299db9ec823/state-0.3.2/src/lib.rs:1:1\n  | 1 | #![feature(const_fn)]   | ^^^^^^^^^^^^^^^^^^^^^</p>\n  \n  <p>error[E0554]: #![feature] may not be used on the stable release\n  channel  -->\n  /Users/ktenjin/.cargo/registry/src/github.com-1ecc6299db9ec823/state-0.3.2/src/lib.rs:2:1\n  | 2 | #![feature(const_unsafe_cell_new)]   |\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>\n  \n  <p>error[E0554]: #![feature] may not be used on the stable release\n  channel  -->\n  /Users/ktenjin/.cargo/registry/src/github.com-1ecc6299db9ec823/state-0.3.2/src/lib.rs:3:1\n  | 3 | #![feature(const_atomic_usize_new)]   |\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>\n  \n  <p>error[E0554]: #![feature] may not be used on the stable release\n  channel  -->\n  /Users/ktenjin/.cargo/registry/src/github.com-1ecc6299db9ec823/state-0.3.2/src/lib.rs:4:1\n  | 4 | #![feature(const_atomic_bool_new)]   |\n  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</p>\n  \n  <p>error: aborting due to 4 previous errors</p>\n  \n  <p>error: Could not compile <code>state</code>. warning: build failed, waiting for\n  other jobs to finish... error: build failed</p>\n</blockquote>\n\n<p>I run it again and I got </p>\n\n<blockquote>\n  <p>error: Could not compile <code>pear_codegen</code>.</p>\n</blockquote>\n\n<p>How do I resolve this. Please help! Thanks!</p>\n"}, {"tags": ["types", "rust", "tuples", "pattern-matching"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512537637, "post_id": 47667195, "comment_id": 82293559, "body": "Regarding &quot;Surprisingly, it&#39;s the last statement where the compiler complains&quot;: that&#39;s not my experience (from trying with <a href=\"http://play.rust-lang.org\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> . There are multiple errors, and the first one is about the line before it."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512537822, "post_id": 47667195, "comment_id": 82293612, "body": "For the last one, you would need to use <code>let</code>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512537868, "post_id": 47667195, "comment_id": 82293628, "body": "But what is your goal, if you&#39;re trying to assign <code>500</code> to a <code>bool</code>? Do you want to produce errors, or are you looking for some form of an implicit cast?"}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512537880, "post_id": 47667195, "comment_id": 82293631, "body": "@Evert Please see <a href=\"https://play.rust-lang.org/?gist=7091e8a4c0f71f420048d1b3891990bc&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>. <code>(x, y, z) = tup;</code> is the only line that the compiler complains about."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512537899, "post_id": 47667195, "comment_id": 82293633, "body": "@Evert Trying to produce errors. :)"}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512537964, "post_id": 47667195, "comment_id": 82293662, "body": "In your playground example, use <code>let</code> in the tuple destructring, and see what you get. Probably only warnings."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512538086, "post_id": 47667195, "comment_id": 82293700, "body": "Trying to produce errors (and getting them) is easy. I guess you want to understand your errors, but the question behind that is: why? Do you want to try and understand how the compiler works, how it parses the code? Or are you just looking for a convenient way to destructure tuples, as per your title."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512538089, "post_id": 47667195, "comment_id": 82293702, "body": "@Evert If I add <code>let</code>, the compiler that the <code>mut</code> are unnecessary. And If I remove the <code>mut</code> as well, it says x, y, and z are unused variables. I think when saying <code>let (x, y, z)</code>, new bindings are created."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512538137, "post_id": 47667195, "comment_id": 82293723, "body": "Well, yes, of course new bindings are created. That&#39;s how it works."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512538146, "post_id": 47667195, "comment_id": 82293727, "body": "@Evert I&#39;m actually writing a tutorial as I learn Rust myself, and want to show how the compiler complains if we mess up types."}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512538208, "post_id": 47667195, "comment_id": 82293749, "body": "That makes more sense, but without that context, the question is unclear."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512538298, "post_id": 47667195, "comment_id": 82293780, "body": "@Evert I&#39;ve added that to the question, thank you. So how can I show type error and destructuring at the same time?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512538302, "post_id": 47667195, "comment_id": 82293781, "body": "Note that for the actual code, I assume you&#39;re thinking of having existing variables (with certain values), and then want to reassign those variables to the tuple values. <code>let (x, y, z) = ...</code> will do that, or <code>let (mut x, mut y, mut z) = ...</code>."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512538399, "post_id": 47667195, "comment_id": 82293814, "body": "Well, I don&#39;t mind if the type can be specified while destructuring itself. I attempted that in my first code snippet but failed. As for the other example, do you mind writing an answer with full code? :)"}, {"owner": {"user_type": "does_not_exist", "display_name": "user707650"}, "edited": false, "score": 0, "creation_date": 1512538475, "post_id": 47667195, "comment_id": 82293842, "body": "Possibly, you can&#39;t (show the two errors at the same time): Rust allows you to do <code>let x: bool = true; &lt;...&gt;; let x: i16 = 4;</code>. Since tuple unpacking requires the <code>let</code> statement (except in a match), you&#39;re just reassigning the same name to a new variable (with a different type)."}], "answers": [{"comments": [{"owner": {"reputation": 4328, "user_id": 2224331, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/2bf7dd643098e950358cce533b70e2a1?s=128&d=identicon&r=PG", "display_name": "SidOfc", "link": "https://stackoverflow.com/users/2224331/sidofc"}, "edited": false, "score": 0, "creation_date": 1568404543, "post_id": 47669306, "comment_id": 102276813, "body": "I thought this would lead me to an answer to &quot;convert into&quot; this type by default (like you can with <code>.collect()</code>) and wanted to try out if it would work but nope! I&#39;m going to just cast them <code>as</code> for now :) Cheers though, very useful to know this is indeed possible even if just for correctness!"}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 18, "last_activity_date": 1512546570, "creation_date": 1512546570, "answer_id": 47669306, "question_id": 47667195, "link": "https://stackoverflow.com/questions/47667195/how-can-i-destructure-tuples-into-typed-variables/47669306#47669306", "title": "How can I destructure tuples into typed variables?", "body": "<p>When doing tuple assignment, you should first specify all your variables, then all the types:</p>\n\n<pre><code>let (x, y, z): (bool, f32, i16) = tup;\n</code></pre>\n\n<p>gives the error you expect (<a href=\"https://play.rust-lang.org/?gist=4a3e617a04494834f788dcf075f23903&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n"}, {"comments": [{"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512713118, "post_id": 47669511, "comment_id": 82377074, "body": "Thank you for the excellent explanation! So, it seems I can&#39;t use tuple destructuring without using <code>let</code>, which means without shadowing existing variables?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512718686, "post_id": 47669511, "comment_id": 82379200, "body": "Not necessarily; you can also perform assignment with literals (e.g. <code>let (a, b, c) = (1, 2.0, true);</code>) or by introducing new variables, e.g. <code>let (d, e, f) = (a, b, c);</code>."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512723240, "post_id": 47669511, "comment_id": 82381219, "body": "ljedrz (somehow SO won&#39;t let me tag you) - I was asking whether I can use existing variables without shadowing them."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512724725, "post_id": 47669511, "comment_id": 82382096, "body": "@dotslash it&#39;s a comment under my answer, so I don&#39;t need tagging; <code>let (d, e, f) = (a, b, c);</code> doesn&#39;t shadow <code>a</code>, <code>b</code> or <code>c</code> and if they implement <code>Copy</code> they aren&#39;t even moved (they still can be used afterwards)."}, {"owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512727447, "post_id": 47669511, "comment_id": 82383740, "body": "Umm, actually I wanted <code>(a, b, c)</code> to be on the left side, and also have <code>a</code>, <code>b</code>, and <code>c</code> declared beforehand. Not possible, I suppose . . . ?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "edited": false, "score": 0, "creation_date": 1512728159, "post_id": 47669511, "comment_id": 82384183, "body": "@dotslash no, that is not possible."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 4, "last_activity_date": 1600801707, "last_edit_date": 1600801707, "creation_date": 1512547469, "answer_id": 47669511, "question_id": 47667195, "link": "https://stackoverflow.com/questions/47667195/how-can-i-destructure-tuples-into-typed-variables/47669511#47669511", "title": "How can I destructure tuples into typed variables?", "body": "<p>You need to read the errors more carefully; the first case's very first one was:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `)`, `,`, or `@`, found `:`\n --&gt; src/main.rs:3:11\n  |\n3 |     let (x: bool, y: f32, z: i16) = tup;\n  |           ^ expected one of `)`, `,`, or `@` here\n</code></pre>\n<p>Which indicates that you can't provide types next to the variable names when you pattern match against a tuple. This is a parsing error which rendered that whole line invalid and caused <code>x</code>, <code>y</code> and <code>z</code> not to be found for the purposes of <code>println!()</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0425]: cannot find value `x` in this scope\n --&gt; src/main.rs:4:28\n  |\n4 |     println!(&quot;{}, {}, {}&quot;, x, y, z);\n  |                            ^ not found in this scope\n\nerror[E0425]: cannot find value `y` in this scope\n --&gt; src/main.rs:4:31\n  |\n4 |     println!(&quot;{}, {}, {}&quot;, x, y, z);\n  |                               ^ not found in this scope\n\nerror[E0425]: cannot find value `z` in this scope\n --&gt; src/main.rs:4:34\n  |\n4 |     println!(&quot;{}, {}, {}&quot;, x, y, z);\n  |                                  ^ not found in this scope\n</code></pre>\n<p>As for the second case, there's a bunch of invalid assignments; <code>y</code> and <code>z</code> are numbers, but you try to assign <code>bool</code>s to them; <code>(x, y, z) = ...</code> is also an invalid assignment - it doesn't pattern match unless it's within a <code>let</code> binding.</p>\n"}], "owner": {"reputation": 4546, "user_id": 1170686, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/12481de846966844777303898e3b9dda?s=128&d=identicon&r=PG", "display_name": "ankush981", "link": "https://stackoverflow.com/users/1170686/ankush981"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1060, "favorite_count": 0, "accepted_answer_id": 47669511, "answer_count": 2, "score": 2, "last_activity_date": 1600801707, "creation_date": 1512537004, "last_edit_date": 1600801660, "question_id": 47667195, "link": "https://stackoverflow.com/questions/47667195/how-can-i-destructure-tuples-into-typed-variables", "title": "How can I destructure tuples into typed variables?", "body": "<p>I'm trying to decompose a tuple into variables, and then cause an error by having one of the types mentioned incorrectly:</p>\n<pre><code>fn main() {\n    let tup = (500, 6.4, 1);\n    let (x: bool, y: f32, z: i16) = tup;\n    println!(&quot;{}, {}, {}&quot;, x, y, z);\n}\n</code></pre>\n<p>My idea was that the compiler would raise an error because <code>x</code> is given as <code>bool</code> but is being matched to <code>500</code>. Surprisingly, it's the last statement where the compiler complains, saying that x, y, and z were not found in this scope:</p>\n<p>I tried it another way:</p>\n<pre><code>fn main() {\n    let tup = (500, 6.4, 1);\n    let mut x: bool = true;\n    let mut y: f32 = true;\n    let mut z: i16 = true;\n    (x, y, z) = tup;\n    println!(&quot;{}, {}, {}&quot;, x, y, z);\n}\n</code></pre>\n<p>This time, the compiler does raise the expected error, but it also says that the left-hand side of <code>(x, y, z) = tup;</code> isn't valid. Can someone explain what's happening?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1512547112, "post_id": 47664774, "comment_id": 82297553, "body": "Would you mind spelling out the difference with the bare underscore more clearly? It&#39;s a pretty big difference that one drops the object immediately while the other acts as a normal binding and drops it at the end of the lexical scope."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 2, "creation_date": 1512590420, "post_id": 47664774, "comment_id": 82324196, "body": "Another difference is that <code>let _x = y;</code> will <i>move</i> <code>y</code>, so it&#39;s no longer valid after the statement, while <code>let _ = y;</code> won&#39;t move <code>y</code>."}], "tags": [], "owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "is_accepted": true, "score": 8, "last_activity_date": 1512578176, "last_edit_date": 1512578176, "creation_date": 1512519303, "answer_id": 47664774, "question_id": 47664704, "link": "https://stackoverflow.com/questions/47664704/whats-the-difference-between-var-and-var-in-rust/47664774#47664774", "title": "What&#39;s the difference between var and _var in Rust?", "body": "<p>The difference is an underscore at the front, which causes the Rust compiler to allow it to be unused. It is kind of a named version of the bare underscore <code>_</code> which can be used to ignore a value.</p>\n\n<p>However, <code>_name</code> acts differently than <code>_</code>. The plain underscore drops the value immediately while <code>_name</code> acts like any other variable and drops the value at the end of the scope.</p>\n\n<p>An example of how it does not act exactly the same as a plain underscore:</p>\n\n<pre><code>struct Count(i32);\n\nimpl Drop for Count {\n    fn drop(&amp;mut self) {\n        println!(\"dropping count {}\", self.0);\n    }\n}\n\nfn main() {\n    {\n        let _a = Count(3);\n        let _ = Count(2);\n        let _c = Count(1);\n    }\n\n    {\n        let _a = Count(3);\n        let _b = Count(2);\n        let _c = Count(1);\n    }\n}\n</code></pre>\n\n<p>prints the following (<a href=\"https://play.rust-lang.org/?gist=14e49a59961d07f6e402&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>dropping count 2\ndropping count 1\ndropping count 3\ndropping count 1\ndropping count 2\ndropping count 3\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 524, "user_id": 14414945, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-pyyt-KE7Kwo/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckGf_m3H8XBtI8oC0H1aDHCkN2rvw/photo.jpg?sz=128", "display_name": "109149", "link": "https://stackoverflow.com/users/14414945/109149"}, "is_accepted": false, "score": 1, "last_activity_date": 1603461576, "creation_date": 1603461576, "answer_id": 64501412, "question_id": 47664704, "link": "https://stackoverflow.com/questions/47664704/whats-the-difference-between-var-and-var-in-rust/64501412#64501412", "title": "What&#39;s the difference between var and _var in Rust?", "body": "<p>The key difference between <code>_variable</code> and <code>variable</code> is that first one tells compiler not to give any warnings if we do not use it in our code. Example:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// src/main.rs\nfn main() {\n    let _x = 1;\n    let y = 2;\n}\n</code></pre>\n<p>Compiling <code>main.rs</code> gives:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>warning: unused variable: `y`\n --&gt; src/main.rs:3:9\n  |\n3 |     let y = 2;\n  |         ^ help: if this is intentional, prefix it with an underscore: `_y`\n  |\n  = note: `#[warn(unused_variables)]` on by default\n\n</code></pre>\n<p>The more interesting case is when we are comparing <code>_</code> with <code>_variable</code>.</p>\n<p><a href=\"https://doc.rust-lang.org/book/ch18-03-pattern-syntax.html#ignoring-an-unused-variable-by-starting-its-name-with-_\" rel=\"nofollow noreferrer\">Ignoring an Unused Variable by Starting Its Name with _</a>:</p>\n<blockquote>\n<p>The syntax _x still binds the value to the variable, whereas _ doesn\u2019t bind at all.</p>\n</blockquote>\n<p>Consider example:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// src/main.rs\nfn main() {\n    let s = Some(String::from(&quot;Hello!&quot;));\n\n    if let Some(_s) = s {\n        println!(&quot;found a string&quot;);\n    }\n\n    println!(&quot;{:?}&quot;, s);\n}\n</code></pre>\n<p>When we try to compile <code>main.rs</code> we get error:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>error[E0382]: borrow of moved value: `s`\n --&gt; src/main.rs:8:22\n  |\n4 |     if let Some(_s) = s {\n  |                 -- value moved here\n...\n8 |     println!(&quot;{:?}&quot;, s);\n  |                      ^ value borrowed here after partial move\n  |\n  = note: move occurs because value has type `std::string::String`, which does not implement the `Copy` trait\nhelp: borrow this field in the pattern to avoid moving `s.0`\n  |\n4 |     if let Some(ref _s) = s {\n  |                 ^^^\n</code></pre>\n<p>Aha! <strong>The syntax _x still binds the value to the variable</strong>, which means that we are <strong>moving</strong> the ownership of <code>s</code> to <code>_s</code>, thus, we can no longer access variable <code>s</code> anymore; which happens when we try to print value of <code>s</code>.</p>\n<p>The correct way of doing the above is:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>// src/main.rs\nfn main() {\n    let s = Some(String::from(&quot;Hello!&quot;));\n\n    if let Some(_) = s {\n        println!(&quot;found a string&quot;);\n    }\n\n    println!(&quot;{:?}&quot;, s);\n}\n</code></pre>\n<p>Above code works just fine. <code>s</code> does not get moved into <code>_</code>, so we can still access it later.</p>\n<p>Sometimes I use <code>_</code> with iterators:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let v = vec![1, 2, 3];\n    let _ = v\n        .iter()\n        .map(|x| {\n            println!(&quot;{}&quot;, x);\n        })\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n}\n</code></pre>\n<p>Compiling gives result:</p>\n<pre class=\"lang-sh prettyprint-override\"><code>1\n2\n3\n</code></pre>\n<p>When doing more complex operations on iterable types above example acts as utility for me.</p>\n"}], "owner": {"reputation": 1054, "user_id": 3478959, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/b52236406c4b6e4fa0bb619db556cf14?s=128&d=identicon&r=PG&f=1", "display_name": "Lev", "link": "https://stackoverflow.com/users/3478959/lev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 615, "favorite_count": 0, "accepted_answer_id": 47664774, "answer_count": 2, "score": 2, "last_activity_date": 1603461576, "creation_date": 1512518655, "last_edit_date": 1512519398, "question_id": 47664704, "link": "https://stackoverflow.com/questions/47664704/whats-the-difference-between-var-and-var-in-rust", "title": "What&#39;s the difference between var and _var in Rust?", "body": "<p>Given this:</p>\n\n<pre><code>fn main() {\n   let variable = [0; 15];\n}\n</code></pre>\n\n<p>The Rust compiler produces this warning: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>= note: #[warn(unused_variables)] on by default\n= note: to avoid this warning, consider using `_variable` instead\n</code></pre>\n\n<p>What's the difference between <code>variable</code> and <code>_variable</code>?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1533848472, "last_edit_date": 1533848472, "creation_date": 1512514953, "answer_id": 47664111, "question_id": 47663961, "link": "https://stackoverflow.com/questions/47663961/is-it-possible-to-specify-panic-abort-for-a-specific-target/47664111#47664111", "title": "Is it possible to specify `panic = &quot;abort&quot;` for a specific target?", "body": "<p>You will need to add a <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"nofollow noreferrer\"><code>.cargo/config</code></a> to your project and use it to specify the panic settings instead of Cargo.toml:</p>\n\n<pre><code>[target.arm-linux-androideabi]\nrustflags = [\"-C\", \"panic=abort\"]\n</code></pre>\n\n<p>The two main configuration headings you will want to look at are <code>[target.$triple]</code> and <code>[target.'cfg(...)']</code>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 422, "favorite_count": 0, "accepted_answer_id": 47664111, "answer_count": 1, "score": 4, "last_activity_date": 1533848472, "creation_date": 1512514229, "last_edit_date": 1512529746, "question_id": 47663961, "link": "https://stackoverflow.com/questions/47663961/is-it-possible-to-specify-panic-abort-for-a-specific-target", "title": "Is it possible to specify `panic = &quot;abort&quot;` for a specific target?", "body": "<p>If I specify <code>panic</code> like this, it works for all targets:</p>\n\n<pre><code>[profile.release]\npanic = \"abort\"\n</code></pre>\n\n<p>I want to specify <code>panic = \"abort\"</code> only for <code>target=arm-linux-androideabi</code>.</p>\n"}, {"tags": ["rust", "temporary"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512507527, "post_id": 47662253, "comment_id": 82284198, "body": "<i>In C++, you can&#39;t take the address of a temporary</i> \u2014 I don&#39;t know C++, but is this always true? <a href=\"https://stackoverflow.com/q/2784262/155423\">Does a const reference prolong the life of a temporary?</a>"}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512508148, "post_id": 47662253, "comment_id": 82284480, "body": "@Shepmaster <code>&amp;x</code> takes the address of <code>x</code>, and I believe that this is never valid for temporaries.  I should probably have compared this to creating a reference to a temporary, which is indeed possible, and even expands the lifespan of the temporary, so overall the behaviour is actually quite similar to what Rust does."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1512546978, "post_id": 47662253, "comment_id": 82297502, "body": "@SvenMarnach: You can perfectly take the address of a temporary in C++, <code>struct T { T* me() { return this; } };</code> will return you the address of the instance of <code>T</code> regardless of whether it&#39;s a temporary or not. Furthermore, C++ allows binding a const-reference or r-value reference to temporaries, and a reference it little more than a pointer in disguise."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1512552694, "post_id": 47662253, "comment_id": 82300575, "body": "@MatthieuM. Yeah, the comparison I made doesn&#39;t really make sense.  I should have compared it to creating a reference in C++, instead of comparing to <code>&amp;temp</code> just because the syntax looks similar."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1512555732, "post_id": 47662253, "comment_id": 82302672, "body": "@SvenMarnach: No worries :) The syntax is very similar, the effect is similar (since a reference is a pointer), so it seems like a very natural mistake. It&#39;s just that somehow Stroustrup decided some things where allowed and others not because of a gut feeling he had this would be error prone... and the lack of uniformity is perhaps more confusing in hindsight :)"}, {"owner": {"reputation": 848, "user_id": 8195987, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9550984d8633cb6f1b538445082dd400?s=128&d=identicon&r=PG&f=1", "display_name": "Angelicos Phosphoros", "link": "https://stackoverflow.com/users/8195987/angelicos-phosphoros"}, "edited": false, "score": 0, "creation_date": 1602675586, "post_id": 47662253, "comment_id": 113794294, "body": "In C++ you can perfectly do same thing: <code>int&amp; v = 5; v+=1; std::cout &lt;&lt; v;</code> Or even do such thing: <code>auto&amp; v = classname().field_name; std::cout &lt;&lt; v;</code>"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 559, "user_id": 4029784, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/16819e74ef4277a9c67d4ebd91fd3fda?s=128&d=identicon&r=PG&f=1", "display_name": "khuttun", "link": "https://stackoverflow.com/users/4029784/khuttun"}, "edited": false, "score": 0, "creation_date": 1607653816, "post_id": 47662488, "comment_id": 115346913, "body": "@khuttun updated."}, {"owner": {"reputation": 559, "user_id": 4029784, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/16819e74ef4277a9c67d4ebd91fd3fda?s=128&d=identicon&r=PG&f=1", "display_name": "khuttun", "link": "https://stackoverflow.com/users/4029784/khuttun"}, "edited": false, "score": 0, "creation_date": 1607670748, "post_id": 47662488, "comment_id": 115350374, "body": "Thanks! But would <a href=\"https://doc.rust-lang.org/1.48.0/reference/destructors.html#temporary-lifetime-extension\" rel=\"nofollow noreferrer\">doc.rust-lang.org/1.48.0/reference/&hellip;</a> actually be better link for this particular question?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 31, "last_activity_date": 1607653777, "last_edit_date": 1607653777, "creation_date": 1512507219, "answer_id": 47662488, "question_id": 47662253, "link": "https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary/47662488#47662488", "title": "Why is it legal to borrow a temporary?", "body": "<blockquote>\n<p>Why is it legal to borrow a temporary?</p>\n</blockquote>\n<p>It's legal for the same reason it's illegal in C++ \u2014 <a href=\"https://doc.rust-lang.org/1.48.0/reference/destructors.html#temporary-scopes\" rel=\"noreferrer\">because someone said that's how it should be</a>.</p>\n<blockquote>\n<p>How long does the temporary live in Rust? And since <code>x</code> is only a borrow, who is the owner of the string?</p>\n</blockquote>\n<p><a href=\"https://doc.rust-lang.org/1.48.0/reference/destructors.html#temporary-scopes\" rel=\"noreferrer\">The reference says</a>:</p>\n<blockquote>\n<p>the temporary scope of an expression is the\nsmallest scope that contains the expression and is for one of the following:</p>\n<ul>\n<li>The entire function body.</li>\n<li>A statement.</li>\n<li>The body of a <a href=\"https://doc.rust-lang.org/1.48.0/reference/expressions/if-expr.html#if-expressions\" rel=\"noreferrer\"><code>if</code></a>, <a href=\"https://doc.rust-lang.org/1.48.0/reference/expressions/loop-expr.html#predicate-loops\" rel=\"noreferrer\"><code>while</code></a> or <a href=\"https://doc.rust-lang.org/1.48.0/reference/expressions/loop-expr.html#infinite-loops\" rel=\"noreferrer\"><code>loop</code></a> expression.</li>\n<li>The <code>else</code> block of an <code>if</code> expression.</li>\n<li>The condition expression of an <code>if</code> or <code>while</code> expression, or a <code>match</code>\nguard.</li>\n<li>The expression for a match arm.</li>\n<li>The second operand of a <a href=\"https://doc.rust-lang.org/1.48.0/reference/expressions/operator-expr.html#lazy-boolean-operators\" rel=\"noreferrer\">lazy boolean expression</a>.</li>\n</ul>\n</blockquote>\n<p>Essentially, you can treat your code as:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let mut a_variable_you_cant_see = String::new();\nlet x = &amp;mut a_variable_you_cant_see;\nx.push_str(&quot;Hello!&quot;);\n</code></pre>\n<p>See also:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/50345139/155423\">Why can I return a reference to a local literal but not a variable?</a></li>\n<li><a href=\"https://stackoverflow.com/q/47044453/155423\">What is the scope of unnamed values?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41815619/155423\">Are raw pointers to temporaries ok in Rust?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1512510977, "post_id": 47663168, "comment_id": 82285870, "body": "Thanks!  This shows that the equivalent code given by Shepmaster isn&#39;t just an analogy, but rather quite literally what&#39;s happening.  Intermediate representations always tend to contain lots of seemingly useless bits that arre optimised out in later stages.  I also like the mutable empty tuple that gets assigned at some random point."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 1, "creation_date": 1512511470, "post_id": 47663168, "comment_id": 82286097, "body": "@SvenMarnach if I&#39;m not mistaken, the <code>_0</code> tuple is just <code>main()</code>&#39;s return value; still not the most interesting piece of info, though :)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1512510368, "creation_date": 1512510368, "answer_id": 47663168, "question_id": 47662253, "link": "https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary/47663168#47663168", "title": "Why is it legal to borrow a temporary?", "body": "<p>Rust's MIR provides some insight on the nature of temporaries; consider the following simplified case:</p>\n\n<pre><code>fn main() {\n    let foo = &amp;String::new();\n}\n</code></pre>\n\n<p>and the MIR it produces (standard comments replaced with mine):</p>\n\n<pre><code>fn main() -&gt; () {\n    let mut _0: ();\n    scope 1 {\n        let _1: &amp;std::string::String; // the reference is declared\n    }\n    scope 2 {\n    }\n    let mut _2: std::string::String; // the owner is declared\n\n    bb0: {                              \n        StorageLive(_1); // the reference becomes applicable\n        StorageLive(_2); // the owner becomes applicable\n        _2 = const std::string::String::new() -&gt; bb1; // the owner gets a value; go to basic block 1\n    }\n\n    bb1: {\n        _1 = &amp;_2; // the reference now points to the owner\n        _0 = ();\n        StorageDead(_1); // the reference is no longer applicable\n        drop(_2) -&gt; bb2; // the owner's value is dropped; go to basic block 2\n    }\n\n    bb2: {\n        StorageDead(_2); // the owner is no longer applicable\n        return;\n    }\n}\n</code></pre>\n\n<p>You can see that an \"invisible\" owner receives a value before a reference is assigned to it and that the reference is dropped before the owner, as expected.</p>\n\n<p>What I'm not sure about is why there is a seemingly useless <code>scope 2</code> and why the owner is not put inside any scope; I'm suspecting that MIR just isn't 100% ready yet.</p>\n"}, {"comments": [{"owner": {"reputation": 10789, "user_id": 668963, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/46cf01443d69ee2e3034de2d77ae1732?s=128&d=identicon&r=PG", "display_name": "neevek", "link": "https://stackoverflow.com/users/668963/neevek"}, "edited": false, "score": 1, "creation_date": 1573982515, "post_id": 50818789, "comment_id": 104062141, "body": "<code>In the second variant the temporary is passed into as_str(), so its lifetime ends at the end of the statement.</code>. Now I understand it, thank you!"}], "tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 8, "last_activity_date": 1528811091, "creation_date": 1528811091, "answer_id": 50818789, "question_id": 47662253, "link": "https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary/50818789#50818789", "title": "Why is it legal to borrow a temporary?", "body": "<p>From the <a href=\"https://doc.rust-lang.org/reference/expressions.html#expressions\" rel=\"noreferrer\">Rust Reference</a>:</p>\n\n<blockquote>\n  <p>Temporary lifetimes</p>\n  \n  <p>When using a value expression in most place expression contexts, a temporary unnamed memory location is created initialized to that value and the expression evaluates to that location instead</p>\n</blockquote>\n\n<p>This applies, because <code>String::new()</code> is a value expression and being just below <code>&amp;mut</code> it is in a place expression context. Now the reference operator only has to pass through this temporary memory location, so it becomes the value of the whole right side (including the <code>&amp;mut</code>).</p>\n\n<blockquote>\n  <p>When a temporary value expression is being created that is assigned into a let declaration, however, the temporary is created with the lifetime of the enclosing block instead</p>\n</blockquote>\n\n<p>Since it is assigned to the variable it gets a lifetime until the end of the enclosing block.</p>\n\n<p>This also answers <a href=\"https://stackoverflow.com/questions/50812648/confused-by-temporary-value-dropped-here-while-still-borrowed#50812648\">this question</a> about the difference between</p>\n\n<pre><code>let a = &amp;String::from(\"abcdefg\"); // ok!\n</code></pre>\n\n<p>and</p>\n\n<pre><code>let a = String::from(\"abcdefg\").as_str(); // compile error\n</code></pre>\n\n<p>In the second variant the temporary is passed into <code>as_str()</code>, so its lifetime ends at the end of the statement.</p>\n"}], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2585, "favorite_count": 6, "accepted_answer_id": 47662488, "answer_count": 3, "score": 24, "last_activity_date": 1607653777, "creation_date": 1512506201, "question_id": 47662253, "link": "https://stackoverflow.com/questions/47662253/why-is-it-legal-to-borrow-a-temporary", "title": "Why is it legal to borrow a temporary?", "body": "<p>Coming from C++, I'm rather surprised that this code is valid in Rust:</p>\n\n<pre><code>let x = &amp;mut String::new();\nx.push_str(\"Hello!\");\n</code></pre>\n\n<p>In C++, you can't take the address of a temporary, and a temporary won't outlive the expression it appears in.</p>\n\n<p>How long does the temporary live in Rust?  And since <code>x</code> is only a borrow, who is the owner of the string?</p>\n"}, {"tags": ["file", "rust", "immutability"], "comments": [{"owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 3, "creation_date": 1512501260, "post_id": 47660946, "comment_id": 82281015, "body": "Not a Rust expert myself, but I think this is because the File is conceptually mutable, not the number representing it. The in-kernel file represented by the file handle number <i>is</i> mutable. Reading or writing it changes its contents and moves the kernel&#39;s current position in the file."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1512546657, "post_id": 47660946, "comment_id": 82297350, "body": "@ZanLynx: Your intuition is correct, and it goes beyond. When using the decorator pattern, as <code>BufReader</code> does, the Rust object itself is mutated along the way (the buffer inside)."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1512501474, "creation_date": 1512501474, "answer_id": 47661084, "question_id": 47660946, "link": "https://stackoverflow.com/questions/47660946/why-does-a-file-need-to-be-mutable-to-call-readread-to-string/47661084#47661084", "title": "Why does a File need to be mutable to call Read::read_to_string?", "body": "<blockquote>\n  <p>I'm assuming it's because the method <code>read_to_string</code> takes the instance as the <code>self</code> argument as mutable</p>\n</blockquote>\n\n<p>Yes, that's correct:</p>\n\n<pre><code>fn read_to_string(&amp;mut self, buf: &amp;mut String) -&gt; Result&lt;usize&gt;\n</code></pre>\n\n<p>The trait method <code>Read::read_to_string</code> takes the receiver as a mutable reference because in general, that's what is needed to implement \"reading\" from something. You are going to change a buffer or an offset or <em>something</em>.</p>\n\n<p>Yes, an actual <code>File</code> <em>may</em> simply contain an underlying file descriptor (e.g. on Linux or macOS) or a handle (e.g. Windows). In these cases, the operating system deals with synchronizing the access across threads. That's not even guaranteed though \u2014 it depends on the platform. Something like Redox might actually have a mutable reference in its implementation of <code>File</code>.</p>\n\n<p>If the <code>Read</code> trait didn't accept a <code>&amp;mut self</code>, then types like <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"noreferrer\"><code>BufReader</code></a> would have to use things like internal mutability, reducing the usefulness of Rust's references.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31503488/155423\">Why is it possible to implement Read on an immutable reference to File?</a></li>\n</ul>\n"}], "owner": {"reputation": 1606, "user_id": 1461154, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/82d0e33bd5d4989410c7e67cefdf056c?s=128&d=identicon&r=PG", "display_name": "James M. Lay", "link": "https://stackoverflow.com/users/1461154/james-m-lay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1081, "favorite_count": 1, "accepted_answer_id": 47661084, "answer_count": 1, "score": 13, "last_activity_date": 1512529810, "creation_date": 1512500936, "last_edit_date": 1512529810, "question_id": 47660946, "link": "https://stackoverflow.com/questions/47660946/why-does-a-file-need-to-be-mutable-to-call-readread-to-string", "title": "Why does a File need to be mutable to call Read::read_to_string?", "body": "<p>Here's a line from the <a href=\"https://doc.rust-lang.org/book/second-edition/ch12-02-reading-a-file.html#reading-a-file\" rel=\"noreferrer\">2nd edition Rust tutorial</a>:</p>\n\n<pre><code>let mut f = File::open(filename).expect(\"file not found\");\n</code></pre>\n\n<p>I'm of the assumption that the file descriptor is a wrapper around a number that basically doesn't change and is read-only.</p>\n\n<p>The compiler complains that the file cannot be borrowed mutably, and I'm assuming it's because the method <code>read_to_string</code> takes the instance as the <code>self</code> argument as mutable, but the question is <strong>\"why\"</strong>?  What is ever going to change about the file descriptor?  Is it keeping track of the cursor location or something?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `fdesc` as mutable\n  --&gt; main.rs:13:5\n   |\n11 |     let fdesc = File::open(fname).expect(\"file not found\");\n   |         ----- consider changing this to `mut fdesc`\n12 |     let mut fdata = String::new();\n13 |     fdesc.read_to_string(&amp;mut fdata)\n   |     ^^^^^ cannot borrow mutably\n</code></pre>\n\n<p>The whole source:</p>\n\n<pre><code>fn main() {\n    let args: Vec&lt;String&gt; = env::args().collect();\n    let query = &amp;args[1];\n    let fname = &amp;args[2];\n    println!(\"Searching for '{}' in file '{}'...\", query, fname);\n\n    let fdesc = File::open(fname).expect(\"file not found\"); //not mut\n    let mut fdata = String::new();\n    fdesc.read_to_string(&amp;mut fdata)\n        .expect(\"something went wrong reading the file\");\n\n    println!(\"Found: \\n{}\", fdata);\n}\n</code></pre>\n"}, {"tags": ["error-handling", "rust", "optional"], "comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1512467063, "post_id": 47649848, "comment_id": 82259012, "body": "Even if <code>STDERR</code> is not visible by default you still should log errors to it.  They might even end up in <code>~&#47;.xsession-errors</code>... If you fear it might get noisy you could use <code>debug!</code> from the <code>log</code> crate and friends."}, {"owner": {"reputation": 5147, "user_id": 334761, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/ZXRM5.jpg?s=128&g=1", "display_name": "Stefan Majewsky", "link": "https://stackoverflow.com/users/334761/stefan-majewsky"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512480021, "post_id": 47649848, "comment_id": 82267396, "body": "<code>.xsession-errors</code> won&#39;t help since I&#39;m actually using Sway (i.e. Wayland instead of X11), but you gave me the idea of looking if Sway connects a useful stderr to the status_command process."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512482896, "post_id": 47649848, "comment_id": 82269239, "body": "Shouldn&#39;t you give it a unique name?"}], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512469759, "post_id": 47650277, "comment_id": 82260827, "body": "For the second part we can move all the code into a new function <code>fn new_func(...) -&gt; Option&lt;Vec&lt;Something&gt;&gt;</code> and old function will do <code>new_func(...).unwrap_or_else(||vec![])</code> <a href=\"https://play.rust-lang.org/?gist=1d29f6ab2e18fc81e4084df2f31f0c36&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512473629, "post_id": 47650277, "comment_id": 82263304, "body": "@red75prime answer updated; thanks for the suggestion."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1512473972, "post_id": 47650277, "comment_id": 82263532, "body": "By the way, <code>unwrap(vec![])</code> is as good as <code>unwrap_or_else</code>, since an empty vector doesn&#39;t allocate."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1512474476, "post_id": 47650277, "comment_id": 82263867, "body": "@aochagavia you mean <code>unwrap_or(vec![])</code>, right? Sure, I can include this information."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1512475076, "post_id": 47650277, "comment_id": 82264249, "body": "@ljedrz yes, sorry for the confusion"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 8, "last_activity_date": 1512474555, "last_edit_date": 1512474555, "creation_date": 1512466639, "answer_id": 47650277, "question_id": 47649848, "link": "https://stackoverflow.com/questions/47649848/can-i-simplify-this-rust-code-dealing-with-optiont-and-resultt/47650277#47650277", "title": "Can I simplify this Rust code dealing with Option&lt;T&gt; and Result&lt;T&gt;?", "body": "<p>To combine <code>Option&lt;T&gt;</code>s with <code>Result&lt;T, E&gt;</code>s, use <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.ok\" rel=\"noreferrer\"><code>ok()</code></a> and the question mark operator:</p>\n\n<pre><code>fn read_number_from_file(path: &amp;str) -&gt; Option&lt;i64&gt; {\n    let mut file = File::open(path).ok()?;\n    let mut contents = String::new();\n    file.read_to_string(&amp;mut contents).ok()?;\n    contents.trim().parse::&lt;i64&gt;().ok()\n}\n</code></pre>\n\n<p>As for the second part of the question, if you can contain all those variable bindings in a single function:</p>\n\n<pre><code>fn foo() -&gt; Option&lt;Vec&lt;i64&gt;&gt; { // or some other Option&lt;Vec&gt;\n    let energy_full = read_number_from_file(ENERGY_FULL_PATH)?;\n    let energy_now = read_number_from_file(ENERGY_NOW_PATH)?;\n    let is_charging = read_number_from_file(POWER_ONLINE_PATH)? &gt; 0;\n\n    Some(Vec::new()) // placeholder for the valid return value\n}\n</code></pre>\n\n<p>You can then use <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unwrap_or_else\" rel=\"noreferrer\"><code>unwrap_or_else()</code></a> on its result to return an empty <code>Vec</code> upon any error:</p>\n\n<pre><code>let foo = foo().unwrap_or_else(|| vec![]);\n</code></pre>\n\n<p>Or just <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.unwrap_or\" rel=\"noreferrer\"><code>unwrap_or()</code></a>, because <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#guarantees\" rel=\"noreferrer\">empty vectors don't allocate memory</a>:</p>\n\n<pre><code>let foo = foo().unwrap_or(vec![]);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 2, "last_activity_date": 1512473978, "creation_date": 1512473978, "answer_id": 47652744, "question_id": 47649848, "link": "https://stackoverflow.com/questions/47649848/can-i-simplify-this-rust-code-dealing-with-optiont-and-resultt/47652744#47652744", "title": "Can I simplify this Rust code dealing with Option&lt;T&gt; and Result&lt;T&gt;?", "body": "<p>For the second part, you can use one of the comprehension crates available on crates.io like <a href=\"https://crates.io/crates/map_for\" rel=\"nofollow noreferrer\">map_for</a>, <a href=\"https://crates.io/crates/comp\" rel=\"nofollow noreferrer\">comp</a> or <a href=\"https://crates.io/crates/mdo\" rel=\"nofollow noreferrer\">mdo</a>. For example with <code>map_for</code>:</p>\n\n<pre><code>return map_for!(\n    energy_full  &lt;- read_number_from_file(ENERGY_FULL_PATH);\n    energy_now   &lt;- read_number_from_file(ENERGY_NOW_PATH);\n    power_online &lt;- read_number_from_file(POWER_ONLINE_PATH);\n    is_charging  = power_online &gt; 0;\n    =&gt; vec![ energy_full, energy_now ]\n).unwrap_or_else (|| vec![]);\n</code></pre>\n\n<p>Full disclosure: I am the author of the <code>map_for</code> crate.</p>\n"}], "owner": {"reputation": 5147, "user_id": 334761, "user_type": "registered", "accept_rate": 93, "profile_image": "https://i.stack.imgur.com/ZXRM5.jpg?s=128&g=1", "display_name": "Stefan Majewsky", "link": "https://stackoverflow.com/users/334761/stefan-majewsky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1157, "favorite_count": 0, "accepted_answer_id": 47650277, "answer_count": 2, "score": 4, "last_activity_date": 1512474555, "creation_date": 1512465232, "question_id": 47649848, "link": "https://stackoverflow.com/questions/47649848/can-i-simplify-this-rust-code-dealing-with-optiont-and-resultt", "title": "Can I simplify this Rust code dealing with Option&lt;T&gt; and Result&lt;T&gt;?", "body": "<p>I'm working on my first actual Rust program, a custom i3status. It's coming along nicely, but there's two places where I have to deal with <code>Result&lt;T&gt;</code> and <code>Option&lt;T&gt;</code> and the code looks really ugly, leading me to believe that I've missed some language feature or library function for writing these parts more cleanly.</p>\n\n<p><a href=\"https://github.com/majewsky/rust-i3status/blob/aebb39ee948c04a95d4154a79ce69455cf215a58/src/providers/battery.rs\" rel=\"nofollow noreferrer\">This is the file in question</a>, but I'll quote the relevant parts here. The first one is this:</p>\n\n<pre><code>fn read_number_from_file(path: &amp;str) -&gt; Option&lt;i64&gt; {\n    let mut file = match File::open(path) {\n        Ok(f) =&gt; f,\n        Err(_) =&gt; return None,\n    };\n    let mut contents = String::new();\n    match file.read_to_string(&amp;mut contents) {\n        Ok(_) =&gt; {},\n        Err(_) =&gt; return None,\n    };\n    match contents.trim().parse::&lt;i64&gt;() {\n        Ok(val) =&gt; Some(val),\n        Err(_) =&gt; None,\n    }\n}\n</code></pre>\n\n<p>Swallowing error messages here is intentional. An i3status does not have an stderr, so all I can do is skip rendering of the broken parts.</p>\n\n<p>Regardless of that, this code looks ugly, with its repeated use of <code>match</code> to discard <code>Err</code> values. I tried to use the new <code>?</code> operator by making the return type a <code>std::io::Result&lt;i64&gt;</code>, but <code>str::parse</code> returns a different type of error, so that doesn't work AFAICS. I therefore went with <code>Option&lt;i64&gt;</code> as the lowest common denominator.</p>\n\n<p>The second ugly part is where this function gets used:</p>\n\n<pre><code>let energy_full = match read_number_from_file(ENERGY_FULL_PATH) {\n    Some(val) =&gt; val,\n    None      =&gt; return Vec::new(),\n};\nlet energy_now = match read_number_from_file(ENERGY_NOW_PATH) {\n    Some(val) =&gt; val,\n    None      =&gt; return Vec::new(),\n};\nlet is_charging = match read_number_from_file(POWER_ONLINE_PATH) {\n    Some(val) =&gt; val &gt; 0,\n    None      =&gt; return Vec::new(),\n};\n</code></pre>\n\n<p>I feel like one should be able to contract each of the <code>match</code> expressions into a function call like <code>.or_else()</code>, but <code>.or_else(|| return Vec::new())</code> obviously won't work since the <code>return</code> is scoped to the lambda instead of the original function.</p>\n\n<p>So, in both cases, my question is whether I can replace <code>match</code> by something more compact and idiomatic.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 1, "creation_date": 1512467869, "post_id": 47649318, "comment_id": 82259540, "body": "You&#39;re probably better off just having your entire Cargo project inside the <code>server</code> folder."}, {"owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "edited": false, "score": 2, "creation_date": 1512476882, "post_id": 47649318, "comment_id": 82265370, "body": "this may be helpful <a href=\"http://doc.crates.io/manifest.html#configuring-a-target\" rel=\"nofollow noreferrer\">doc.crates.io/manifest.html#configuring-a-target</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1512481036, "creation_date": 1512481036, "answer_id": 47654972, "question_id": 47649318, "link": "https://stackoverflow.com/questions/47649318/how-do-i-tell-cargo-to-run-files-from-a-directory-other-than-src/47654972#47654972", "title": "How do I tell Cargo to run files from a directory other than &quot;src&quot;?", "body": "<p>As stated in the comments, you are <em>probably</em> better off just moving all of your code into the \"server\" directory. If you don't, you are going to be swimming uphill against defaults, which is not usually a great idea.</p>\n\n<p>That being said, you <em>can</em> <a href=\"http://doc.crates.io/manifest.html#configuring-a-target\" rel=\"noreferrer\">specify the path to the binary or library in your Cargo.toml</a>:</p>\n\n<pre><code>[[bin]]\nname = \"quux\"\npath = \"server/main.rs\"\n</code></pre>\n\n\n\n<pre><code>[lib]\nname = \"quux\"\npath = \"server/lib.rs\"\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/26946646/155423\">Rust package with both a library and a binary?</a></li>\n</ul>\n"}], "owner": {"reputation": 773, "user_id": 5476912, "user_type": "registered", "accept_rate": 14, "profile_image": "https://i.stack.imgur.com/sMjhL.jpg?s=128&g=1", "display_name": "ColdHands", "link": "https://stackoverflow.com/users/5476912/coldhands"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2136, "favorite_count": 0, "accepted_answer_id": 47654972, "answer_count": 1, "score": 0, "last_activity_date": 1512483528, "creation_date": 1512463329, "last_edit_date": 1512483528, "question_id": 47649318, "link": "https://stackoverflow.com/questions/47649318/how-do-i-tell-cargo-to-run-files-from-a-directory-other-than-src", "title": "How do I tell Cargo to run files from a directory other than &quot;src&quot;?", "body": "<p>I have a front-end project that has a lot of stuff in <code>src</code> folder, and I have the opportunity to also use Rust on the server side. All my Rust server files are in the <code>server</code> folder; how can I tell Cargo to run <code>./server/app.rs</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512462123, "post_id": 47648958, "comment_id": 82256256, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/39586277/how-is-my-reference-to-a-struct-member-still-valid-after-the-struct-was-moved\">How is my reference to a struct member still valid after the struct was moved?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 608, "user_id": 8225884, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZzuYo.png?s=128&g=1", "display_name": "\u70b8\u9c7c\u85af\u6761\u5fb7\u91cc\u514b", "link": "https://stackoverflow.com/users/8225884/%e7%82%b8%e9%b1%bc%e8%96%af%e6%9d%a1%e5%be%b7%e9%87%8c%e5%85%8b"}, "edited": false, "score": 0, "creation_date": 1512464850, "post_id": 47649554, "comment_id": 82257675, "body": "What&#39;s the semantic of assignment? Can I overwrite a borrow with a value or vice versa or it&#39;s just compile error because type don&#39;t match? If I overwrite a value with another value, will drop be called on that original value?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 608, "user_id": 8225884, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZzuYo.png?s=128&g=1", "display_name": "\u70b8\u9c7c\u85af\u6761\u5fb7\u91cc\u514b", "link": "https://stackoverflow.com/users/8225884/%e7%82%b8%e9%b1%bc%e8%96%af%e6%9d%a1%e5%be%b7%e9%87%8c%e5%85%8b"}, "edited": false, "score": 0, "creation_date": 1512467358, "post_id": 47649554, "comment_id": 82259214, "body": "@\u795e\u79d8\u5fb7\u91cc\u514b: I have extended the answer with more details on assignments. Hopefully it will clears things up."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 13, "last_activity_date": 1512467322, "last_edit_date": 1512467322, "creation_date": 1512464159, "answer_id": 47649554, "question_id": 47648958, "link": "https://stackoverflow.com/questions/47648958/whats-the-semantic-of-assignment-in-rust/47649554#47649554", "title": "What&#39;s the semantic of assignment in Rust?", "body": "<p>I sense some confusion between <em>binding</em> and <em>assigning</em>:</p>\n\n<ul>\n<li><strong>Binding</strong> introduces a new variable, and associates it to a value,</li>\n<li><strong>Assigning</strong> overwrites a value with another.</li>\n</ul>\n\n<p>This can be illustrated in two simple lines:</p>\n\n<pre><code>let mut x = 5;    //  Binding\nx = 10;           //  Assigning\n</code></pre>\n\n<hr>\n\n<p>A <strong>binding</strong> may appear in multiple places in Rust:</p>\n\n<ul>\n<li><code>let</code> statements,</li>\n<li><code>if let</code>/<code>while let</code> conditions,</li>\n<li>cases in a <code>match</code> expression,</li>\n<li>and even in a <code>for</code> expression, on the left side of <code>in</code>.</li>\n</ul>\n\n<p>Whenever there is a <strong>binding</strong>, Rust's grammar also allows <em>pattern matching</em>:</p>\n\n<ul>\n<li>in the case of <code>let</code> statements and <code>for</code> expressions, the patterns must be irrefutable,</li>\n<li>in the case of <code>if let</code>, <code>while let</code> and <code>match</code> cases, the patterns may fail to match.</li>\n</ul>\n\n<p>Pattern matching means that the type of the variable introduced by the binding differs based on how the binding is made:</p>\n\n<pre><code>let x = &amp;5;    //  x: &amp;i32\nlet &amp;y = &amp;5;   //  y: i32\n</code></pre>\n\n<hr>\n\n<p><strong>Assigning</strong> always requires using <code>=</code>, the assignment operator.</p>\n\n<p>When assigning, the former value is overwritten, and <code>drop</code> is called on it if it implements <code>Drop</code>.</p>\n\n<pre><code>let mut x = 5;\nx = 6;\n//  Now x == 6, drop was not called because it's a i32.\n\nlet mut s = String::from(\"Hello, World!\");\ns = String::from(\"Hello, \u795e\u79d8\u5fb7\u91cc\u514b!\");\n//  Now s == \"Hello, \u795e\u79d8\u5fb7\u91cc\u514b!\", drop was called because it's a String.\n</code></pre>\n\n<p>The value that is overwritten may be as simple as an integer or float, a more involved <code>struct</code> or <code>enum</code>, or a <em>reference</em>.</p>\n\n<pre><code>let mut r = &amp;5;\nr = &amp;6;\n//  Now r points to 6, drop was not called as it's a reference.\n</code></pre>\n\n<p>Overwriting a <em>reference</em> does not overwrite the value pointed to by the reference, but the reference itself. The original value still lives on, and will be dropped when it's ready.</p>\n\n<p>To overwrite the pointed to value, one needs to use <code>*</code>, the dereference operator:</p>\n\n<pre><code>let mut x = 5;\nlet r = &amp;mut x;\n*r = 6;\n//  r still points to x, and now x = 6.\n</code></pre>\n\n<p>If the type of the dereferenced value requires it, <code>drop</code> will be called:</p>\n\n<pre><code>let mut s = String::from(\"Hello, World!\");\nlet r = &amp;mut s;\n*r = String::from(\"Hello, \u795e\u79d8\u5fb7\u91cc\u514b!\");\n//  r still points to s, and now s = \"Hello, \u795e\u79d8\u5fb7\u91cc\u514b!\".\n</code></pre>\n\n<p>I invite you to use to playground to and toy around, you can <a href=\"https://play.rust-lang.org/?gist=75117d9d3cb1e0616fe36770e40a378f&amp;version=stable\" rel=\"noreferrer\">start from here</a>:</p>\n\n<pre><code>fn main() {\n    let mut s = String::from(\"Hello, World!\");\n    {\n        let r = &amp;mut s;\n        *r = String::from(\"Hello, \u795e\u79d8\u5fb7\u91cc\u514b!\");\n    }\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<hr>\n\n<p>Hopefully, things should be a little clearer now, so let's check your samples.</p>\n\n<pre><code>let x = &amp;5;\n</code></pre>\n\n<p><code>x</code> is a reference to i32 (<code>&amp;i32</code>). What happens is that the compiler will introduce a temporary in which <code>5</code> is stored, and then borrow this temporary.</p>\n\n<pre><code>let mut x: &amp;mut T = T{};\n</code></pre>\n\n<p>Is impossible. The type of <code>T{}</code> is <code>T</code> not <code>&amp;mut T</code>, so this fails to compile. You could change it to <code>let mut x: &amp;mut T = &amp;mut T{};</code>.</p>\n\n<p>And your last example is similar.</p>\n"}], "owner": {"reputation": 608, "user_id": 8225884, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/ZzuYo.png?s=128&g=1", "display_name": "\u70b8\u9c7c\u85af\u6761\u5fb7\u91cc\u514b", "link": "https://stackoverflow.com/users/8225884/%e7%82%b8%e9%b1%bc%e8%96%af%e6%9d%a1%e5%be%b7%e9%87%8c%e5%85%8b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1197, "favorite_count": 1, "accepted_answer_id": 47649554, "answer_count": 1, "score": 1, "last_activity_date": 1512467322, "creation_date": 1512461981, "last_edit_date": 1512464494, "question_id": 47648958, "link": "https://stackoverflow.com/questions/47648958/whats-the-semantic-of-assignment-in-rust", "title": "What&#39;s the semantic of assignment in Rust?", "body": "<p>How could know the type of a binding if I use auto type deduction when creating a binding? what if the expression on the right side is a borrow(like <code>let x = &amp;5;</code>), will it be value or a borrow? What will happen if I re-assign a borrow or a value?</p>\n\n<p>Just for check, I do can re-assign a borrow if I use <code>let mut x: &amp;mut T = &amp;mut T{};</code> or <code>let mut x:&amp;T = &amp; T{};</code>, right?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512457567, "post_id": 47646757, "comment_id": 82253940, "body": "At this point the closure doesn&#39;t capture anything. So it can be replaced by a function <code>fn is_prime(n: usize, v: &amp;[usize]) -&gt; bool { &#47;&#47;...</code>"}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 0, "creation_date": 1512458835, "post_id": 47646757, "comment_id": 82254625, "body": "<code>is_prime(i, &amp;ans)</code> is more concise. <code>Vec&lt;T&gt;</code> implements <code>Deref&lt;Target=[T]&gt;</code>, so <code>&amp;ans</code> is coerced to <code>&amp;[usize]</code>."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512464863, "post_id": 47646757, "comment_id": 82257685, "body": "While this does fix the example code I don&#39;t think it actually answers the question(s)."}, {"owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "reply_to_user": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 0, "creation_date": 1512467979, "post_id": 47646757, "comment_id": 82259605, "body": "@Stefan : explanations Added"}, {"owner": {"reputation": 609, "user_id": 3673043, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5b9edc66864a60b8f10d2e173e1e80fc?s=128&d=identicon&r=PG", "display_name": "suyash", "link": "https://stackoverflow.com/users/3673043/suyash"}, "edited": false, "score": 0, "creation_date": 1512478713, "post_id": 47646757, "comment_id": 82266474, "body": "@a-r I get the idea behind passing the vector as an argument to the closure to make this work. What I specifically want to understand is that if the closure does not modify the vector, shouldn&#39;t there be a way for it to capture only a reference of the data and not get the ownership, because the closure doesn&#39;t need the ownership it is getting here as it isn&#39;t doing anything to modify the data the vector stores, and adding a reference to the vector as a parameter invalidates the purpose of the closure in the first place."}, {"owner": {"reputation": 609, "user_id": 3673043, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5b9edc66864a60b8f10d2e173e1e80fc?s=128&d=identicon&r=PG", "display_name": "suyash", "link": "https://stackoverflow.com/users/3673043/suyash"}, "edited": false, "score": 0, "creation_date": 1512480161, "post_id": 47646757, "comment_id": 82267489, "body": "For a contrast, closures in C++ can capture values by copying or taking a reference. So in a C++ equivalent program, the closure would do its job by just taking a reference of the vector."}], "tags": [], "owner": {"reputation": 8841, "user_id": 8208215, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/QXD4t.png?s=128&g=1", "display_name": "wasmup", "link": "https://stackoverflow.com/users/8208215/wasmup"}, "is_accepted": false, "score": 1, "last_activity_date": 1512481937, "last_edit_date": 1512481937, "creation_date": 1512452307, "answer_id": 47646757, "question_id": 47646256, "link": "https://stackoverflow.com/questions/47646256/how-to-get-ownership-of-a-moved-value-back-from-a-closure/47646757#47646757", "title": "How to get ownership of a moved value back from a closure?", "body": "<p>There are some issues with your code, in: </p>\n\n<pre><code>for x in ans {\n</code></pre>\n\n<blockquote>\n  <p>closure cannot be invoked more than once because it moves the variable\n  <code>ans</code> out of its environment:</p>\n</blockquote>\n\n<p>The <strong>iterator invalidates</strong> with each <code>ans.push(i);</code></p>\n\n<p>So you should borrow the <code>ans</code> exactly in this line:</p>\n\n<pre><code>if is_prime(i) {\n</code></pre>\n\n<p>then give it back to the next line:</p>\n\n<pre><code>ans.push(i);\n</code></pre>\n\n<p>The solution is to pass it as an argument:</p>\n\n<pre><code>fn primes_up_to(n: usize) -&gt; Vec&lt;usize&gt; {\n    let mut ans = Vec::with_capacity(n);\n    if n &lt; 2 {\n        return ans;\n    }\n    ans.push(2);\n    let is_prime = |n: usize, v: &amp;[usize]| -&gt; bool {\n        for x in v {\n            if x * x &gt; n {\n                break;\n            }\n            if n % x == 0 {\n                return false;\n            }\n        }\n        true\n    };\n    let mut i: usize = 3;\n    while i &lt;= n {\n        if is_prime(i, &amp;ans) {\n            ans.push(i);\n        }\n        i += 2;\n    }\n    ans\n}\n\nfn main() {\n    println!(\"{:?}\", primes_up_to(23));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=a81fe155fa51a4f3a2eddf31138e1b2b&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>Or try this, it has same <code>ASM</code> footprint as above in release mode on the nightly channel:</p>\n\n<pre><code>fn primes_up_to(n: usize) -&gt; Vec&lt;usize&gt; {\n    let mut ans = Vec::with_capacity(n);\n    if n &lt; 2 {\n        return ans;\n    }\n    ans.push(2);\n    let is_prime = |n: usize, v: &amp;Vec&lt;usize&gt;| -&gt; bool {\n        for x in v {\n            if x * x &gt; n {\n                break;\n            }\n            if n % x == 0 {\n                return false;\n            }\n        }\n        true\n    };\n    let mut i: usize = 3;\n    while i &lt;= n {\n        if is_prime(i, &amp;ans) {\n            ans.push(i);\n        }\n        i += 2;\n    }\n    ans\n}\n\nfn main() {\n    println!(\"{:?}\", primes_up_to(23));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=785fc72f52c599d1e735fe659d571665&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[2, 3, 5, 7, 11, 13, 17, 19, 23]\n</code></pre>\n\n<p>And see: <a href=\"https://doc.rust-lang.org/stable/book/first-edition/ownership.html#move-semantics\" rel=\"nofollow noreferrer\">Move semantics</a> and <a href=\"https://doc.rust-lang.org/stable/book/first-edition/references-and-borrowing.html#borrowing\" rel=\"nofollow noreferrer\">Borrowing</a></p>\n"}, {"comments": [{"owner": {"reputation": 2240, "user_id": 2163429, "user_type": "registered", "accept_rate": 32, "profile_image": "https://www.gravatar.com/avatar/42b97b2d49b629a6924fd45a516a4d97?s=128&d=identicon&r=PG", "display_name": "Jiacai Liu", "link": "https://stackoverflow.com/users/2163429/jiacai-liu"}, "edited": false, "score": 0, "creation_date": 1566179604, "post_id": 47655147, "comment_id": 101562077, "body": "&gt; you couldn&#39;t return it because it might be needed in the future.  In my opinion, if a closure return its captured values, then it&#39;s fine to release the ownership of the value, when invoked again, just capture the value again. Is there anything wrong with this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2240, "user_id": 2163429, "user_type": "registered", "accept_rate": 32, "profile_image": "https://www.gravatar.com/avatar/42b97b2d49b629a6924fd45a516a4d97?s=128&d=identicon&r=PG", "display_name": "Jiacai Liu", "link": "https://stackoverflow.com/users/2163429/jiacai-liu"}, "edited": false, "score": 0, "creation_date": 1566224540, "post_id": 47655147, "comment_id": 101579227, "body": "@JiacaiLiu I don&#39;t completely follow your suggestion. If the closure needs a value to work and returns ownership of that value, then the closure can no longer exist. Yes, you could then recreate the closure with the value, but that would be a bunch of repeated code and kind of ignores the point of the closure, so I don&#39;t see why it would be useful."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1512481578, "creation_date": 1512481578, "answer_id": 47655147, "question_id": 47646256, "link": "https://stackoverflow.com/questions/47646256/how-to-get-ownership-of-a-moved-value-back-from-a-closure/47655147#47655147", "title": "How to get ownership of a moved value back from a closure?", "body": "<blockquote>\n  <p>How to get ownership of a moved value back from a closure</p>\n</blockquote>\n\n<p><strong>You don't</strong>.</p>\n\n<p>Once ownership is transferred, it's gone. The only way to \"get it back\" is to have the thing that now owns it transfer it back. Some types have an <code>into_inner</code> method for this exact reason. Other types have equivalent methods. </p>\n\n<p>A closure's only interface, by definition, is the ability to invoke it. There are no other possibilities for methods.</p>\n\n<p>You could return the captured value when you are done, but that doesn't help in your case because you need to call the closure multiple times \u2014\u00a0you couldn't return it because it might be needed in the future. </p>\n"}], "owner": {"reputation": 609, "user_id": 3673043, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5b9edc66864a60b8f10d2e173e1e80fc?s=128&d=identicon&r=PG", "display_name": "suyash", "link": "https://stackoverflow.com/users/3673043/suyash"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1589, "favorite_count": 0, "accepted_answer_id": 47655147, "answer_count": 2, "score": 3, "last_activity_date": 1512492237, "creation_date": 1512449135, "last_edit_date": 1512492237, "question_id": 47646256, "link": "https://stackoverflow.com/questions/47646256/how-to-get-ownership-of-a-moved-value-back-from-a-closure", "title": "How to get ownership of a moved value back from a closure?", "body": "<p>Consider the following program:</p>\n\n<pre><code>fn primes_up_to(n: usize) -&gt; Vec&lt;usize&gt; {\n    let mut ans = Vec::with_capacity(n);\n\n    if n &lt; 2 {\n        return ans;\n    }\n\n    ans.push(2);\n\n    // https://doc.rust-lang.org/1.22.0/book/first-edition/closures.html#closures-and-their-environment\n    // The closure needs ownership of vec to access elements\n    let is_prime = |n: usize| -&gt; bool {\n        for x in ans {\n            if x * x &gt; n {\n                break;\n            }\n\n            if n % x == 0 {\n                return false;\n            }\n        }\n\n        true\n    };\n\n    let mut i = 3;\n    while i &lt;= n {\n        if is_prime(i) {\n            ans.push(i);\n        }\n\n        i += 2;\n    }\n\n    ans\n}\n\nfn main() {\n    println!(\"{:?}\", primes_up_to(23));\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=2d005ebdcf76dfb732958b514a5755b5&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>Compiling the code above gives these compilation errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `is_prime`\n  --&gt; src/main.rs:28:12\n   |\n28 |         if is_prime(i) {\n   |            ^^^^^^^^ value moved here in previous iteration of loop\n   |\nnote: closure cannot be invoked more than once because it moves the variable `ans` out of its environment\n  --&gt; src/main.rs:13:18\n   |\n13 |         for x in ans {\n   |                  ^^^\n\nerror[E0382]: use of moved value: `ans`\n  --&gt; src/main.rs:29:13\n   |\n12 |     let is_prime = |n: usize| -&gt; bool {\n   |                    ------------------ value moved (into closure) here\n...\n29 |             ans.push(i);\n   |             ^^^ value used here after move\n   |\n   = note: move occurs because `ans` has type `std::vec::Vec&lt;usize&gt;`, which does not implement the `Copy` trait\n\nerror[E0382]: use of moved value: `ans`\n  --&gt; src/main.rs:35:5\n   |\n12 |     let is_prime = |n: usize| -&gt; bool {\n   |                    ------------------ value moved (into closure) here\n...\n35 |     ans\n   |     ^^^ value used here after move\n   |\n   = note: move occurs because `ans` has type `std::vec::Vec&lt;usize&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I know a potential solution would be to pass an immutable reference to <code>ans</code> (<code>&amp;ans</code>) to <code>is_prime</code>. What is the idiomatic way for ownership of <code>ans</code> to pass into <code>is_prime</code> and come back out when <code>is_prime</code> exits every time I call <code>is_prime</code>?                </p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1512459570, "post_id": 47645063, "comment_id": 82255019, "body": "In the specific case of a slice, <a href=\"https://doc.rust-lang.org/std/slice/struct.Windows.html\" rel=\"nofollow noreferrer\"><code>.windows()</code></a> yields a subslice as a Window, which is relatively equivalent to <code>tuple_windows</code> though not generic."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1512442905, "last_edit_date": 1512442905, "creation_date": 1512440356, "answer_id": 47645063, "question_id": 47644485, "link": "https://stackoverflow.com/questions/47644485/how-do-i-use-a-peekable-iterator-in-a-filter-closure/47645063#47645063", "title": "How do I use a Peekable iterator in a filter closure?", "body": "<blockquote>\n  <p>refer to the iterator inside a filter</p>\n</blockquote>\n\n<p>I don't believe you can. When you call <code>filter</code>, it takes ownership of the base iterator:</p>\n\n<pre><code>fn filter&lt;P&gt;(self, predicate: P) -&gt; Filter&lt;Self, P&gt; \nwhere\n    P: FnMut(&amp;Self::Item) -&gt; bool, \n</code></pre>\n\n<p>Once you do that, it's gone. There is no more <code>iter</code>. In some similar cases, you can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow noreferrer\"><code>Iterator::by_ref</code></a> to mutably borrow the iterator, drive it for a while, then refer back to the original. That won't work in this case because the inner iterator would need to borrow it mutably a second time, which is disallowed.</p>\n\n<blockquote>\n  <p>find only the numbers where the next number is the same.</p>\n</blockquote>\n\n<pre><code>extern crate itertools;\n\nuse itertools::Itertools;\n\nfn main() {\n    let input = [1, 2, 2, 3, 4, 4];\n\n    let pairs = input\n        .iter()\n        .tuple_windows()\n        .filter_map(|(a, b)| if a == b { Some(a) } else { None });\n\n    let result: Vec&lt;_&gt; = pairs.cloned().collect();\n    assert_eq!(result, [2, 4]);\n}\n</code></pre>\n\n<p>Or if you wanted something using only the standard library:</p>\n\n<pre><code>fn main() {\n    let xs = [1, 2, 2, 3, 4, 4];\n\n    let mut prev = None;\n    let pairs = xs.iter().filter_map(move |curr| {\n        let next = if prev == Some(curr) { Some(curr) } else { None };\n        prev = Some(curr);\n        next\n    });\n\n    let result: Vec&lt;_&gt; = pairs.cloned().collect();\n    assert_eq!(result, [2, 4]);\n}\n</code></pre>\n"}], "owner": {"reputation": 126353, "user_id": 14660, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/e55e0ec3c00f834d78fbdddeaa36e308?s=128&d=identicon&r=PG", "display_name": "Schwern", "link": "https://stackoverflow.com/users/14660/schwern"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 302, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1512442905, "creation_date": 1512435909, "last_edit_date": 1512441153, "question_id": 47644485, "link": "https://stackoverflow.com/questions/47644485/how-do-i-use-a-peekable-iterator-in-a-filter-closure", "title": "How do I use a Peekable iterator in a filter closure?", "body": "<p>I need to find only the numbers where the next number is the same:  <code>[1,2,2,3,4,4]</code> should produce <code>[2,4]</code>. Since I need to peek at the next number, I figured I'd try out using a <a href=\"https://doc.rust-lang.org/std/iter/struct.Peekable.html\" rel=\"nofollow noreferrer\"><code>Peekable</code> iterator</a> and write a <code>filter</code>.</p>\n\n<pre><code>fn main() {\n    let xs = [1, 2, 2, 3, 4, 4];\n    let mut iter = xs.iter().peekable();\n\n    let pairs = iter.filter(move |num| {\n        match iter.peek() {\n            Some(next) =&gt; num == next,\n            None       =&gt; false,\n        }\n    });\n\n    for num in pairs {\n        println!(\"{}\", num);\n    }\n}\n</code></pre>\n\n<p>I get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: capture of moved value: `iter`\n --&gt; src/main.rs:6:15\n  |\n5 |     let pairs = iter.filter(move |num| {\n  |                 ---- value moved here\n6 |         match iter.peek() {\n  |               ^^^^ value captured here after move\n  |\n  = note: move occurs because `iter` has type `std::iter::Peekable&lt;std::slice::Iter&lt;'_, i32&gt;&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>I think this is because <code>iter</code> is being used by the closure, but it hasn't borrowed it, and it can't copy it.</p>\n\n<p>How do I solve this problem of wanting to refer to the iterator inside a filter?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512418201, "post_id": 47641029, "comment_id": 82240750, "body": "Since matching against strings was already answered in the past (e.g. <a href=\"https://stackoverflow.com/questions/25383488/how-to-match-a-string-against-string-literals-in-rust\">How to match a String against string literals in Rust?</a>), I suggest to tackle matching against program&#39;s arguments or, more generally, an iterator&#39;s item."}, {"owner": {"reputation": 5306, "user_id": 3109904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a89a7a98b62dbc6bc7204411ad0793d2?s=128&d=identicon&r=PG", "display_name": "Ali", "link": "https://stackoverflow.com/users/3109904/ali"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512418472, "post_id": 47641029, "comment_id": 82240882, "body": "thanks, that link is where I actually learned about as_ref().  I used it and it works well but was just confused about why u need to call the method on that index."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1512418779, "post_id": 47641029, "comment_id": 82241024, "body": "You need <code>as_ref()</code> so that the <code>String</code> in the pattern is treated as a <code>&amp;str</code> string slice and can be matched against slices in the <code>match</code> body."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 5306, "user_id": 3109904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a89a7a98b62dbc6bc7204411ad0793d2?s=128&d=identicon&r=PG", "display_name": "Ali", "link": "https://stackoverflow.com/users/3109904/ali"}, "edited": false, "score": 0, "creation_date": 1512419516, "post_id": 47641126, "comment_id": 82241370, "body": "@AliYazdani I modified the answer to <i>actually</i> match against the argument&#39;s value now :)."}, {"owner": {"reputation": 5306, "user_id": 3109904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a89a7a98b62dbc6bc7204411ad0793d2?s=128&d=identicon&r=PG", "display_name": "Ali", "link": "https://stackoverflow.com/users/3109904/ali"}, "edited": false, "score": 0, "creation_date": 1512421418, "post_id": 47641126, "comment_id": 82242262, "body": "beauty! thanks.  lol &quot;herp derp&quot;.  One more question (if u want to answer), I was using Vec initially because I thought args need to be allocated to the heap since size wont be known until runtime.  What is the mechanism that makes your version work without being explicit with the compiler on data requirements?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 5306, "user_id": 3109904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a89a7a98b62dbc6bc7204411ad0793d2?s=128&d=identicon&r=PG", "display_name": "Ali", "link": "https://stackoverflow.com/users/3109904/ali"}, "edited": false, "score": 1, "creation_date": 1512421507, "post_id": 47641126, "comment_id": 82242306, "body": "@AliYazdani the argument strings are still located on the heap; it&#39;s just that they don&#39;t need to be collected into a <code>Vec</code> for it to be possible to use them."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 2, "last_activity_date": 1512420956, "last_edit_date": 1512420956, "creation_date": 1512417835, "answer_id": 47641126, "question_id": 47641029, "link": "https://stackoverflow.com/questions/47641029/how-to-match-against-an-iterators-item/47641126#47641126", "title": "How to match against an iterator&#39;s item?", "body": "<p>Since <code>env::args()</code> returns an iterator (<code>Args</code>), you can work with it like with any other iterator. If you want to match against a given item once, the simplest way to do it would be:</p>\n\n<pre><code>use std::env;\n\nfn main() {\n    let mut args = env::args().skip(1);\n\n    match args.next() {\n        Some(x) =&gt; {\n            if &amp;x == \"herp derp\" { ... }\n        },\n        None =&gt; ()\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5306, "user_id": 3109904, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a89a7a98b62dbc6bc7204411ad0793d2?s=128&d=identicon&r=PG", "display_name": "Ali", "link": "https://stackoverflow.com/users/3109904/ali"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1476, "favorite_count": 1, "accepted_answer_id": 47641126, "answer_count": 1, "score": 0, "last_activity_date": 1512420956, "creation_date": 1512417347, "last_edit_date": 1512418363, "question_id": 47641029, "link": "https://stackoverflow.com/questions/47641029/how-to-match-against-an-iterators-item", "title": "How to match against an iterator&#39;s item?", "body": "<p>What is the most idiomatic way to match against an iterator's item? For example, if we take command line arguments, what is the best way to use pattern matching on one of the items? This is what I'm doing and I'm not 100% sure why <code>as_ref()</code> is required and why <code>&amp;args[0]</code> wouldn't work:</p>\n\n<pre><code>let args: Vec&lt;String&gt; = env::args().skip(1).collect();\nmatch args[0].as_ref() {...}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 158, "user_id": 1230116, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/13508258b2800bd09279a4c7f4703f9c?s=128&d=identicon&r=PG", "display_name": "jking", "link": "https://stackoverflow.com/users/1230116/jking"}, "edited": false, "score": 3, "creation_date": 1595295296, "post_id": 47641166, "comment_id": 111418643, "body": "Thank you for the detailed concise explanation."}, {"owner": {"reputation": 2192, "user_id": 1408055, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/158680ce72c5e7d57972eb151b457fa0?s=128&d=identicon&r=PG", "display_name": "Dimitris Sfounis", "link": "https://stackoverflow.com/users/1408055/dimitris-sfounis"}, "edited": false, "score": 0, "creation_date": 1611329809, "post_id": 47641166, "comment_id": 116424516, "body": "Hi, I found your answer not simple enough for Rust newbies like me. After looking around for quite some time, I&#39;d like to offer a simpler explanation to the question: &quot;Why is <code>&#39;a</code> there?&quot; ---- Because the struct definition ties it to a referenced object (in this case, every <code>struct Person</code> instance is referencing a <code>&amp;str</code>) you want to specificly declare an arbitary lifetime and tie these two things together: You want a <code>struct Person</code> instance to <b>only live as long</b> as its referenced object (hence <code>Person&lt;&#39;a&gt;</code> and <code>name: &amp;&#39;a str</code>) so dangling references after each other&#39;s death is avoided."}, {"owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "reply_to_user": {"reputation": 2192, "user_id": 1408055, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/158680ce72c5e7d57972eb151b457fa0?s=128&d=identicon&r=PG", "display_name": "Dimitris Sfounis", "link": "https://stackoverflow.com/users/1408055/dimitris-sfounis"}, "edited": false, "score": 0, "creation_date": 1611410133, "post_id": 47641166, "comment_id": 116444889, "body": "Thanks @DimitrisSfounis I added your statement to the answer, hope it is helping other :)"}], "tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": true, "score": 43, "last_activity_date": 1611410096, "last_edit_date": 1611410096, "creation_date": 1512418045, "answer_id": 47641166, "question_id": 47640550, "link": "https://stackoverflow.com/questions/47640550/what-is-a-in-rust-language/47641166#47641166", "title": "What is &amp;&#39;a in Rust Language", "body": "<p>I found <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-annotation-syntax\" rel=\"noreferrer\">this</a> and <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html\" rel=\"noreferrer\">this</a> and <a href=\"https://doc.rust-lang.org/1.6.0/book/lifetimes.html\" rel=\"noreferrer\">this</a> and <a href=\"https://doc.rust-lang.org/1.6.0/book/strings.html\" rel=\"noreferrer\">this</a> that explains my question.</p>\n<p>The <code>'a</code> reads \u2018the lifetime a\u2019. Technically, every reference has some lifetime associated with it, but the compiler lets you elide (i.e. omit, see &quot;<a href=\"https://doc.rust-lang.org/1.6.0/book/lifetimes.html#lifetime-elision\" rel=\"noreferrer\">Lifetime Elision</a>&quot;) them in common cases.</p>\n<pre><code>fn bar&lt;'a&gt;(...)\n</code></pre>\n<p>A function can have \u2018generic parameters\u2019 between the <code>&lt;&gt;</code>s, of which lifetimes are one kind. The <code>&lt;&gt;</code> is used to declare lifetimes. This says that bar has one lifetime, 'a.</p>\n<p>Rust has two main types of strings: <code>&amp;str</code> and <code>String</code>. The <code>&amp;str</code> are called <code>\u2018string slices\u2019</code>. A string slice has a fixed size, and cannot be mutated. It is a reference to a sequence of UTF-8 bytes.</p>\n<pre><code>let greeting = &quot;Hello there.&quot;; // greeting: &amp;'static str\n</code></pre>\n<p>&quot;Hello there.&quot; is a <code>string literal</code> and its type is <code>&amp;'static str</code>. A string literal is a string slice that is statically allocated, meaning that it\u2019s saved inside our compiled program, and exists for the entire duration it runs. The greeting binding is a reference to this statically allocated string. Any function expecting a string slice will also accept a string literal.</p>\n<p>In the above example</p>\n<pre><code>struct Person&lt;'a&gt; {  }\n</code></pre>\n<p>requires to contain <code>&lt;'a&gt;</code> as the <code>name</code> is defined using:</p>\n<pre><code>name: &amp;'a str,\n</code></pre>\n<p>which is called by:</p>\n<pre><code>let name = &quot;Peter&quot;;\n</code></pre>\n<p>If interested to avoid the usage of <code>'a</code> then the above code can be re-written as:</p>\n<pre><code>#[derive(Debug)]\nstruct Person {    // instead of: struct Person&lt;'a&gt; {\n    name: String,  // instead of: name: &amp;'a str \n    age: u8\n}\n\nfn main() {\n    let name = String::from(&quot;Peter&quot;);  // instead of: let name = &quot;Peter&quot;; which is &amp;'static str\n    let age = 27;\n    let peter = Person { name, age };\n\n    // Pretty print\n    println!(&quot;{:#?}&quot;, peter);\n}\n</code></pre>\n<p>As mentioned by @DimitrisSfounis in the comments, in short, &quot;Why is 'a there?&quot; ---- Because the struct definition ties it to a referenced object (in this case, every struct Person instance is referencing a &amp;str) you want to specificly declare an arbitary lifetime and tie these two things together: You want a struct Person instance to only live as long as its referenced object (hence Person&lt;'a&gt; and name: &amp;'a str) so dangling references after each other's death is avoided.</p>\n"}], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 9881, "favorite_count": 6, "closed_date": 1512422341, "accepted_answer_id": 47641166, "answer_count": 1, "score": 21, "last_activity_date": 1611410096, "creation_date": 1512415597, "last_edit_date": 1512419379, "question_id": 47640550, "link": "https://stackoverflow.com/questions/47640550/what-is-a-in-rust-language", "closed_reason": "Duplicate", "title": "What is &amp;&#39;a in Rust Language", "body": "<p>I read <a href=\"https://doc.rust-lang.org/reference/types.html\" rel=\"noreferrer\">here</a> that </p>\n\n<blockquote>\n  <p>A shared reference type is written <code>&amp;type</code>, or <code>&amp;'a type</code> when you need to specify an explicit lifetime. </p>\n</blockquote>\n\n<p>Understood <code>&amp;</code> is for <code>shared reference</code> but did not understand what is the difference between <code>type</code> and <code>'a</code> in Rust language</p>\n\n<p>In <a href=\"https://rustbyexample.com/hello/print/print_debug.html\" rel=\"noreferrer\">another location</a> I read this code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Person&lt;'a&gt; {\n    name: &amp;'a str,\n    age: u8\n}\n\nfn main() {\n    let name = \"Peter\";\n    let age = 27;\n    let peter = Person { name, age };\n\n    // Pretty print\n    println!(\"{:#?}\", peter);\n}\n</code></pre>\n\n<p>What does <code>'a</code> in the <code>struct Person&lt;'a&gt; { }</code> means?\nand can I build the same <code>struct</code> using <code>struct Person&lt;'type&gt; { }</code> or <code>struct Person&lt;T&gt; { }</code>?</p>\n\n<p>And what is the meaning of <code>name: &amp;'a str</code>?</p>\n\n<p>And how can I re-code it, if want to avoid using the <code>&lt;'a&gt;</code></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 47412, "user_id": 3141234, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/78b45a835031f4ce03a6653b3262b5d3?s=128&d=identicon&r=PG", "display_name": "Alexander", "link": "https://stackoverflow.com/users/3141234/alexander"}, "edited": false, "score": 1, "creation_date": 1512413389, "post_id": 47639897, "comment_id": 82238303, "body": "Interesting, what would you like it to do? I can&#39;t envision a reason for needing this"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 3, "creation_date": 1512416190, "post_id": 47639897, "comment_id": 82239734, "body": "Can you elaborate on &quot;has been returned&quot;? I think maybe you mean &quot;has ended&quot;, in which case you may want to look at how <code>RefCell</code> works. But if you mean &quot;has been returned (from any function)&quot;, that&#39;s not possible."}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 47412, "user_id": 3141234, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/78b45a835031f4ce03a6653b3262b5d3?s=128&d=identicon&r=PG", "display_name": "Alexander", "link": "https://stackoverflow.com/users/3141234/alexander"}, "edited": false, "score": 0, "creation_date": 1512436180, "post_id": 47639897, "comment_id": 82247682, "body": "@Alexander I was thinking about a use case where every time my struct gets mutated, I want to make sure after I get it back that it still maintains certain invariants. Otherwise, I can label it &quot;corrupted&quot; or something. Does that make sense?"}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1512436322, "post_id": 47639897, "comment_id": 82247727, "body": "@trentcl I think I mean &quot;when it has finished mutating&quot; --- I have a struct, I give a mutable reference of it to a function, and the function then does some stuff to the struct, and eventually &quot;ends the mutable borrow&quot; (&quot;returns it?&quot;); as soon as it ends the borrow, I want to call functions that would check to make sure that certain conditions, that all instances of that struct must maintain, are not violated after mutation."}, {"owner": {"reputation": 47412, "user_id": 3141234, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/78b45a835031f4ce03a6653b3262b5d3?s=128&d=identicon&r=PG", "display_name": "Alexander", "link": "https://stackoverflow.com/users/3141234/alexander"}, "edited": false, "score": 3, "creation_date": 1512441468, "post_id": 47639897, "comment_id": 82249036, "body": "@user89 Enforce those invariants through the functions of the struct. Don&#39;t allow illegal states to happen, hoping you&#39;ll detect them after."}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 47412, "user_id": 3141234, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/78b45a835031f4ce03a6653b3262b5d3?s=128&d=identicon&r=PG", "display_name": "Alexander", "link": "https://stackoverflow.com/users/3141234/alexander"}, "edited": false, "score": 0, "creation_date": 1512442202, "post_id": 47639897, "comment_id": 82249241, "body": "@Alexander makes sense; I was mostly wondering if it was possible."}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 1, "creation_date": 1512476134, "post_id": 47639897, "comment_id": 82264889, "body": "@user89 Have a look at the implementation of <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.borrow_mut\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>. When you borrow it mutably it returns a struct <code>RefMut</code> that wraps the reference. <code>RefMut</code> implements <code>Drop</code> so it can perform an action when the reference goes out of scope. To me that sounds exactly like what you want to achieve."}], "answers": [{"comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1512479340, "post_id": 47654386, "comment_id": 82266922, "body": "Beat me by a hair! ;)"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1512479439, "post_id": 47654386, "comment_id": 82266988, "body": "@trentcl Maybe because you spent more time on explaining :)"}], "tags": [], "owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "is_accepted": false, "score": 2, "last_activity_date": 1512479200, "creation_date": 1512479200, "answer_id": 47654386, "question_id": 47639897, "link": "https://stackoverflow.com/questions/47639897/can-a-type-know-when-a-mutable-borrow-to-itself-has-ended/47654386#47654386", "title": "Can a type know when a mutable borrow to itself has ended?", "body": "<p>Basically the same thing is done in <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.borrow_mut\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>. There you want to reduce the runtime borrow-count when a borrow ends. Here you want to perform an arbitrary action.</p>\n\n<p>So let's re-use the concept of writing a function that returns a wrapped reference:</p>\n\n<pre><code>struct Data {\n    content: i32,\n}\n\nimpl Data {\n    fn borrow_mut(&amp;mut self) -&gt; DataRef {\n        println!(\"borrowing\");\n        DataRef { data: self }\n    }\n\n    fn check_after_borrow(&amp;self) {\n        if self.content &gt; 50 {\n            println!(\"Hey, content should be &lt;= {:?}!\", 50); \n        }\n    }\n}\n\nstruct DataRef&lt;'a&gt; {\n    data: &amp;'a mut Data\n}\n\nimpl&lt;'a&gt; Drop for DataRef&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        println!(\"borrow ends\");\n        self.data.check_after_borrow()\n    }\n}\n\nfn main() {\n    let mut d = Data { content: 42 };    \n    println!(\"content is {}\", d.content);    \n    {\n        let b = d.borrow_mut();\n        //let c = &amp;d;  // Compiler won't let you have another borrow at the same time\n        b.data.content = 123;\n        println!(\"content set to {}\", b.data.content);\n    }  // borrow ends here\n    println!(\"content is now {}\", d.content);\n}\n</code></pre>\n\n<p>This results in the following output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>content is 42\nborrowing\ncontent set to 123\nborrow ends\nHey, content should be &lt;= 50!\ncontent is now 123\n</code></pre>\n\n<p>Be aware that you can still obtain an unchecked mutable borrow with e.g. <code>let c = &amp;mut d;</code>. This will be silently dropped without calling <code>check_after_borrow</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 3, "creation_date": 1512482471, "post_id": 47654394, "comment_id": 82268970, "body": "Note, however, that this is a <i>bad</i> way of trying to maintain invariants. Mostly because dropping the reference can be suppressed with <code>mem::forget</code>. This is fine for <code>RefCell</code>, where if you don&#39;t drop the ref, you will simply eventually panic because you didn&#39;t release the dynamic borrow, but it is bad if violating the &quot;fraction is in shortest form&quot; invariant leads to weird results or subtle performance issues down the line, and it is catastrophic if you need to maintain the &quot;thread doesn&#39;t outlive variables in the current scope&quot; invariant."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1512495609, "post_id": 47654394, "comment_id": 82277787, "body": "@SebastianRedl Ah, that&#39;s true. :( I tried to come up with a way that <code>drop</code> not being called would be a problem, but I was going for subtle, possibly accidental ways and I didn&#39;t think about just passing it to <code>mem::forget</code>."}], "tags": [], "owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "is_accepted": true, "score": 3, "last_activity_date": 1512612182, "last_edit_date": 1512612182, "creation_date": 1512479231, "answer_id": 47654394, "question_id": 47639897, "link": "https://stackoverflow.com/questions/47639897/can-a-type-know-when-a-mutable-borrow-to-itself-has-ended/47654394#47654394", "title": "Can a type know when a mutable borrow to itself has ended?", "body": "<p><strong>Disclaimer:</strong> The answer that follows describes a possible solution, but it's not a very good one, as described by this comment from Sebastien Redl:</p>\n\n<blockquote>\n  <p>[T]his is a <em>bad</em> way of trying to maintain invariants. Mostly because dropping the reference can be suppressed with <code>mem::forget</code>. This is fine for <code>RefCell</code>, where if you don't drop the ref, you will simply eventually panic because you didn't release the dynamic borrow, but it is bad if violating the \"fraction is in shortest form\" invariant leads to weird results or subtle performance issues down the line, and it is catastrophic if you need to maintain the \"thread doesn't outlive variables in the current scope\" invariant.</p>\n</blockquote>\n\n<p>Nevertheless, it's possible to use a temporary struct as a \"staging area\" that updates the referent when it's dropped, and thus maintain the invariant correctly; however, that version basically amounts to making a proper wrapper type and a kind of weird way to use it. The best way to solve this problem is through an opaque wrapper struct that doesn't expose its internals except through methods that definitely maintain the invariant.</p>\n\n<p>Without further ado, the original answer:</p>\n\n<hr>\n\n<p>Not <em>exactly</em>... but pretty close. We can use <code>RefCell&lt;T&gt;</code> as a model for how this can be done. It's a bit of an abstract question, but I'll use a concrete example to demonstrate. (This won't be a <em>complete</em> example, but something to show the general principles.)</p>\n\n<p>Let's say you want to make a <code>Fraction</code> struct that is always in simplest form (fully reduced, e.g. 3/5 instead of 6/10).  You write a struct <code>RawFraction</code> that will contain the bare data. <code>RawFraction</code> instances are <em>not</em> always in simplest form, but they have a method <code>fn reduce(&amp;mut self)</code> that reduces them.</p>\n\n<p>Now you need a smart pointer type that you will always use to mutate the <code>RawFraction</code>, which calls <code>.reduce()</code> on the pointed-to struct when it's dropped. Let's call it <code>RefMut</code>, because that's the naming scheme <code>RefCell</code> uses. You implement <code>Deref&lt;Target = RawFraction&gt;</code>, <code>DerefMut</code>, and <code>Drop</code> on it, something like this:</p>\n\n<pre><code>pub struct RefMut&lt;'a&gt;(&amp;'a mut RawFraction);\n\nimpl&lt;'a&gt; Deref for RefMut&lt;'a&gt; {\n    type Target = RawFraction;\n    fn deref(&amp;self) -&gt; &amp;RawFraction {\n        self.0\n    }\n}\n\nimpl&lt;'a&gt; DerefMut for RefMut&lt;'a&gt; {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut RawFraction {\n        self.0\n    }\n}\n\nimpl&lt;'a&gt; Drop for RefMut&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        self.0.reduce();\n    }\n}\n</code></pre>\n\n<p>Now, whenever you have a <code>RefMut</code> to a <code>RawFraction</code> and drop it, you know the <code>RawFraction</code> will be in simplest form afterwards. All you need to do at this point is ensure that <code>RefMut</code> is the <em>only</em> way to get <code>&amp;mut</code> access to the <code>RawFraction</code> part of a <code>Fraction</code>.</p>\n\n<pre><code>pub struct Fraction(RawFraction);\n\nimpl Fraction {\n    pub fn new(numerator: i32, denominator: i32) -&gt; Self {\n        // create a RawFraction, reduce it and wrap it up\n    }\n\n    pub fn borrow_mut(&amp;mut self) -&gt; RefMut {\n        RefMut(&amp;mut self.0)\n    }\n}\n</code></pre>\n\n<p>Pay attention to the <code>pub</code> markings (and lack thereof): I'm using those to ensure the soundness of the exposed interface. All three types should be placed in a module by themselves. It would be incorrect to mark the <code>RawFraction</code> field <code>pub</code> inside <code>Fraction</code>, since then it would be possible (for code outside the module) to create an unreduced <code>Fraction</code> without using <code>new</code> or get a <code>&amp;mut RawFraction</code> without going through <code>RefMut</code>.</p>\n\n<p>Supposing all this code is placed in a module named <code>frac</code>, you can use it something like this (assuming <code>Fraction</code> implements <code>Display</code>):</p>\n\n<pre><code>let f = frac::Fraction::new(3, 10);\nprintln!(\"{}\", f); // prints 3/10\nf.borrow_mut().numerator += 3;\nprintln!(\"{}\", f); // prints 3/5\n</code></pre>\n\n<p>The types encode the invariant: Wherever you have <code>Fraction</code>, you can know that it's fully reduced. When you have a <code>RawFraction</code>, <code>&amp;RawFraction</code>, etc., you can't be sure. If you want, you may also make <code>RawFraction</code>'s fields non-<code>pub</code>, so that you can't get an unreduced fraction <em>at all</em> except by calling <code>borrow_mut</code> on a <code>Fraction</code>.</p>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 47654394, "answer_count": 2, "score": 3, "last_activity_date": 1512612182, "creation_date": 1512412981, "last_edit_date": 1512476557, "question_id": 47639897, "link": "https://stackoverflow.com/questions/47639897/can-a-type-know-when-a-mutable-borrow-to-itself-has-ended", "title": "Can a type know when a mutable borrow to itself has ended?", "body": "<p>I have a struct and I want to call one of the struct's methods every time a mutable borrow to it has ended. To do so, I would need to know when the mutable borrow to it has been dropped. How can this be done? </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": true, "score": 3, "last_activity_date": 1512408771, "creation_date": 1512408771, "answer_id": 47638878, "question_id": 47638833, "link": "https://stackoverflow.com/questions/47638833/two-windows-appear-instead-of-one-using-rust/47638878#47638878", "title": "Two windows appear instead of one using Rust", "body": "<p>I found the answer <a href=\"https://github.com/sciter-sdk/rust-sciter/blob/master/examples/minimal.rs#L3..L6\" rel=\"nofollow noreferrer\">here</a>, <code>#![windows_subsystem=\"windows\"]</code> is required to be used in the top of the code, so my code became:</p>\n\n<pre><code>#![windows_subsystem = \"windows\"]\nextern crate sciter;\n\nfn main() {\n    let html = include_bytes!(\"minimal.htm\");\n    let mut frame = sciter::Window::new();\n    frame.load_html(html, None);\n    frame.run_app();\n}\n</code></pre>\n"}], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "accepted_answer_id": 47638878, "answer_count": 1, "score": 2, "last_activity_date": 1512408771, "creation_date": 1512408622, "question_id": 47638833, "link": "https://stackoverflow.com/questions/47638833/two-windows-appear-instead-of-one-using-rust", "title": "Two windows appear instead of one using Rust", "body": "<p>I tried loading the <code>minimal.html</code>, it is loading fine at cargo run, but once I runn the .exe alone, 2 windows appear, one empty console windows and one shows the real output as shown in this pic.</p>\n\n<p>I'm using <code>Windows 10 x64</code></p>\n\n<p>My <code>main.rs</code> is:</p>\n\n<pre><code>extern crate sciter;\n\nfn main() {\n    let html = include_bytes!(\"minimal.htm\");\n    let mut frame = sciter::Window::new();\n    frame.load_html(html, None);\n    frame.run_app();\n}\n</code></pre>\n\n<p>The <code>Cargo.toml</code> is:</p>\n\n<pre><code>[package]\nname = \"rust_sciter\"\nversion = \"0.1.0\"\nauthors = [\"Home\"]\n\n[dependencies]\nsciter-rs = \"0.4.24\"\n</code></pre>\n\n<p>The <code>minimal.html</code> is:</p>\n\n<pre><code>&lt;html window-icon=\"https://sciter.com/wp-content/themes/sciter/!images/favicon.ico\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Minimalistic Sciter demo&lt;/title&gt;\n  &lt;style&gt;\n    html {\n      background: radial-gradient(75% 75%, circle farthest-side, white, orange, rgb(0,0,204));\n      color:#fff;\n    }\n    html:rtl {\n      mapping: left-to-right(background);\n    }\n  &lt;/style&gt;\n  &lt;script type=\"text/tiscript\"&gt;\n    view.caption = $(head &gt; title).value;\n    $(#machine).text = Sciter.machineName();\n    var counter = 0;\n    $(button#append).on(\"click\", function(){\n      $(body).$append(&lt;h1#test&gt;{++counter }&lt;/h1&gt;);\n    });\n    $(button#open).on(\"click\", function(){\n      var fn = view.selectFile(#open,\n        \"HTML Files (*.htm,*.html)|*.HTM;*.HTML|All Files (*.*)|*.*\" , \"html\" );\n      stdout.println(\"selected file: \" + fn);\n      $(body).$append(&lt;h1#test&gt;{fn}&lt;/h1&gt;);\n    });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Minimal Sciter Application&lt;/h1&gt;\n&lt;p&gt;Running on &lt;em #machine /&gt; machine&lt;/p&gt;\n\n&lt;button #append&gt;Append&lt;/button&gt;\n&lt;button #open&gt;Open&lt;/button&gt;\n&lt;select&gt;\n  &lt;option&gt;First&lt;/option&gt;\n  &lt;option&gt;Second&lt;/option&gt;\n  &lt;option&gt;Third&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The app structure, code and output are below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/pIOlR.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/pIOlR.png\" alt=\"enter image description here\"></a></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "is_accepted": true, "score": 11, "last_activity_date": 1512412003, "last_edit_date": 1512412003, "creation_date": 1512408914, "answer_id": 47638926, "question_id": 47638702, "link": "https://stackoverflow.com/questions/47638702/why-doesnt-this-lifetime-bound-cause-an-error/47638926#47638926", "title": "Why doesn&#39;t this lifetime bound cause an error?", "body": "<p>The bound <code>S: 'a</code> means that any references contained in <code>S</code> must live at least as long as <code>'a</code>. For <code>S: 'static</code>, this means that references in S must have a <code>'static</code> lifetime. The <code>String</code> type doesn't hold any references (it owns its data), and therefore the code compiles.</p>\n\n<p>Quoting <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html#lifetime-bounds\" rel=\"nofollow noreferrer\">the book</a>:</p>\n\n<blockquote>\n  <p>Types without any references count as <code>T: 'static</code>. Because <code>'static</code> means the reference must live as long as the entire program, a type that contains no references meets the criteria of all references living as long as the entire program (since there are no references).</p>\n</blockquote>\n\n<p>If you call the function with <code>test(&amp;s)</code> instead, <a href=\"https://play.rust-lang.org/?gist=78e489dddee00528af7167cb47491d10&amp;version=stable\" rel=\"nofollow noreferrer\">compilation will fail</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `s` does not live long enough\n  --&gt; src/main.rs:14:11\n   |\n14 |     test(&amp;s);\n   |           ^ does not live long enough\n15 | }\n   | - borrowed value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>Here, <code>S</code> is <code>&amp;'a String</code> for some lifetime <code>'a</code>, and the lifetime bound requires that <code>'a</code> must be <code>'static</code>, which isn't the case.</p>\n"}], "owner": {"reputation": 93, "user_id": 4617131, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/714e7a2b0ff8e4474ce88a3ed0975026?s=128&d=identicon&r=PG", "display_name": "july2993", "link": "https://stackoverflow.com/users/4617131/july2993"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 65, "favorite_count": 0, "accepted_answer_id": 47638926, "answer_count": 1, "score": 7, "last_activity_date": 1512412003, "creation_date": 1512408202, "last_edit_date": 1512411960, "question_id": 47638702, "link": "https://stackoverflow.com/questions/47638702/why-doesnt-this-lifetime-bound-cause-an-error", "title": "Why doesn&#39;t this lifetime bound cause an error?", "body": "<p>This code compiles and work, but according to my understanding, it should not compile:</p>\n\n<pre><code>use std::fmt::Display;\n\npub fn test&lt;S&gt;(s: S)\nwhere\n    S: Display + 'static,\n{\n    println!(\"test: {}\", s);\n}\n\nfn main() {\n    let s = String::from(\"string\");\n\n    test(s);\n}\n</code></pre>\n\n<p>The lifetime of variable <code>s</code> is in <code>main</code>, but the function <code>test</code> has a bound that <code>S</code> must be <code>'static</code>. I think the lifetime of variable <code>s</code> must be <code>'static</code> or larger than <code>'static</code>. What's wrong with my reasoning?</p>\n"}, {"tags": ["string", "vector", "rust"], "comments": [{"owner": {"reputation": 1622, "user_id": 1563394, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/67835df71913e21410945dfa8c33d70f?s=128&d=identicon&r=PG", "display_name": "lwi", "link": "https://stackoverflow.com/users/1563394/lwi"}, "edited": false, "score": 3, "creation_date": 1512401240, "post_id": 47636618, "comment_id": 82231264, "body": "The documentation states that dedup only removes consecutive duplicates. Maybe sort first? <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/vec/struct.Vec.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 16, "last_activity_date": 1512402262, "last_edit_date": 1512402262, "creation_date": 1512401428, "answer_id": 47636725, "question_id": 47636618, "link": "https://stackoverflow.com/questions/47636618/vecdedup-does-not-work-how-do-i-deduplicate-a-vector-of-strings/47636725#47636725", "title": "Vec::dedup does not work \u2014 how do I deduplicate a vector of strings?", "body": "<p>As documented, <a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.dedup\" rel=\"noreferrer\"><code>Vec#dedup</code></a> only removes <strong>consecutive</strong> elements from a vector (it is much cheaper than a full deduplication). It would work fine if the vector was <code>vec![\"a\", \"a\", \"b\"]</code>, for example.</p>\n\n<p>Of course, there are multiple potential solutions.</p>\n\n<p>In order to obtain a vector with all duplicates removed while retaining the original order of the elements, the <code>itertools</code> crate provides a <a href=\"https://docs.rs/itertools/0.7.4/itertools/trait.Itertools.html#method.unique\" rel=\"noreferrer\"><code>unique</code></a> adaptor.</p>\n\n<pre><code>use itertools::Itertools;\n\nlet v = vec![\"b\", \"a\", \"b\"];\nlet v: Vec&lt;_&gt; = v.into_iter().unique().collect();\nassert_eq!(v, [\"b\", \"a\"]);\n</code></pre>\n\n<p>If element order is not important, you may sort the elements first and then call dedupe.</p>\n\n<pre><code>let mut v = vec![\"a\", \"b\", \"a\"];\nv.sort_unstable();\nv.dedup();\nassert_eq!(v, [\"a\", \"b\"]);\n</code></pre>\n\n<p>If fast element lookup is important, you may also consider using a set type instead, such as <code>HashSet</code>.</p>\n\n<pre><code>let v: HashSet&lt;_&gt; = [\"a\", \"b\", \"a\"].iter().cloned().collect();\nlet v2: HashSet&lt;_&gt; = [\"b\", \"a\"].iter().cloned().collect();\nassert_eq!(v, v2);\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1512480108, "post_id": 47648303, "comment_id": 82267450, "body": "In a way, this should be an inline form of the <code>unique</code> adaptor."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 7, "last_activity_date": 1512482140, "last_edit_date": 1512482140, "creation_date": 1512459108, "answer_id": 47648303, "question_id": 47636618, "link": "https://stackoverflow.com/questions/47636618/vecdedup-does-not-work-how-do-i-deduplicate-a-vector-of-strings/47648303#47648303", "title": "Vec::dedup does not work \u2014 how do I deduplicate a vector of strings?", "body": "<p>The other answer points out that a <code>HashSet</code> is a better choice for a collection without duplicates, which I agree with. This shows how to directly deduplicate a <code>Vec</code> using that property of <code>HashMap</code> and without sorting the <code>Vec</code> first to use <code>std::vec::Vec::dedup</code>.</p>\n\n<pre><code>use std::hash::Hash;\nuse std::collections::HashSet;\n\nfn dedup&lt;T: Eq + Hash + Copy&gt;(v: &amp;mut Vec&lt;T&gt;) { // note the Copy constraint\n    let mut uniques = HashSet::new();\n    v.retain(|e| uniques.insert(*e));\n}\n\nfn main() {\n    let mut v = vec![\"a\", \"b\", \"a\"];\n    dedup(&amp;mut v);\n\n    assert_eq!(&amp;v, &amp;vec![\"a\", \"b\"]);\n}\n</code></pre>\n\n<p>This is a fast (O(n)) solution, but creating the <code>HashSet</code> requires some extra memory.</p>\n"}], "owner": {"reputation": 201, "user_id": 7498804, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hsTmB1O9pfc/AAAAAAAAAAI/AAAAAAAAADU/wzK8n9Ml7-Y/photo.jpg?sz=128", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044b\u0431\u0438\u043d", "link": "https://stackoverflow.com/users/7498804/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a0%d1%8b%d0%b1%d0%b8%d0%bd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5798, "favorite_count": 0, "accepted_answer_id": 47636725, "answer_count": 2, "score": 5, "last_activity_date": 1542333485, "creation_date": 1512401104, "last_edit_date": 1542333485, "question_id": 47636618, "link": "https://stackoverflow.com/questions/47636618/vecdedup-does-not-work-how-do-i-deduplicate-a-vector-of-strings", "title": "Vec::dedup does not work \u2014 how do I deduplicate a vector of strings?", "body": "<p>I've parsed a file, split the string by lines and want to leave only unique elements in each vector. I expect <code>vec.dedup()</code> to work like this:</p>\n\n<pre><code>let mut vec = vec![\"a\", \"b\", \"a\"];\nvec.dedup();\nassert_eq!(vec, [\"a\", \"b\"]);\n</code></pre>\n\n<p>But it fails:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"a\", \"b\", \"a\"]`,\n right: `[\"a\", \"b\"]`', src/main.rs:4:4\n</code></pre>\n\n<p>How can I remove duplicates?</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1512387096, "post_id": 47632097, "comment_id": 82222364, "body": "Your code has more issues than the one that you seem to mention. <code>usize</code> is not implicitly converted to <code>i32</code>. Plus, since you&#39;re performing a map into new tuples at the end, the items of the returned iterable should no longer be references bound to the <code>&#39;a</code> lifetime."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1512388926, "post_id": 47632097, "comment_id": 82223369, "body": "By the looks of it, you&#39;re looking for something like <a href=\"https://play.rust-lang.org/?gist=f20ffa67c1bc814279b53d0dce351545&amp;version=stable\" rel=\"nofollow noreferrer\">this</a>. However, I can&#39;t find a way to address your question without a debugging session tailored to your particular problem, with little benefit to be kept as a Stack Overflow question."}], "answers": [{"comments": [{"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512403116, "post_id": 47635531, "comment_id": 82232495, "body": "The problem with reducing to MVCE is that I&#39;m not always can do that in the right way. For example I&#39;ve modified my <code>foo</code> function somewhat, but still have problems. <a href=\"https://play.rust-lang.org/?gist=b2bef2a57f76aae6c70eb0e28f4db44f&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>. Can you instead answer my question."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512403402, "post_id": 47635531, "comment_id": 82232691, "body": "I&#39;m accepting a container of pairs <code>(u32, f32)</code>. You&#39;re saying that because I&#39;m creating brand new values (what does it mean, be precise, please) I&#39;m not returning references any more. I want  to return iterator over pairs <code>(u32, f32)</code>. For all I know rust can allocate pairs on the heap and return references (pointers) to them. I don&#39;t understand any of your comments completely, can you elaborate more? I feel comfortable with lifetimes from the first part of the book, I understand the ideas, but when it comes to generic lifetimes and traits rust becomes gibberish to me."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512403432, "post_id": 47635531, "comment_id": 82232715, "body": "I don&#39;t understand how to tell rust what I want and I don&#39;t understand what it wants from me."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512404436, "post_id": 47635531, "comment_id": 82233357, "body": "@user1685095 I&#39;d probably write it <a href=\"https://play.rust-lang.org/?gist=3b2f574f8e3db6889dc67d35048d95b6&amp;version=stable\" rel=\"nofollow noreferrer\">like this</a>."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512413603, "post_id": 47635531, "comment_id": 82238426, "body": "Thanks with a bit of modifications this works. Can you explain what do I tell to the compiler with <code>Box&lt;Iterator&lt;Item = (i32, f32)&gt; + &#39;a</code> That the life time of iterator is the same as lifetime <code>a</code>? Where <code>a</code> is a lifetime of items from input iterable?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512418990, "post_id": 47635531, "comment_id": 82241129, "body": "@user1685095 You have to state <code>Iterator&lt;Item = (i32, f32)&gt; + &#39;a</code> inside <code>Box</code> because the iterator only works while the original source of items exists. This source, which is the reference to the vector of tuples, is bound to the lifetime <code>&#39;a</code>. Therefore, the box cannot outlive <code>&#39;a</code>."}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1512421792, "post_id": 47635531, "comment_id": 82242426, "body": "@E_net4 what is ` + &#39;a` means?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "edited": false, "score": 0, "creation_date": 1512421984, "post_id": 47635531, "comment_id": 82242505, "body": "@user1685095 Time for you to hit <a href=\"https://doc.rust-lang.org/book/second-edition/ch19-02-advanced-lifetimes.html\" rel=\"nofollow noreferrer\">the book</a>. ;)"}, {"owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1512461237, "post_id": 47635531, "comment_id": 82255847, "body": "@E_net4 I&#39;ve already read it not so long ago, but haven&#39;t had opportunity to implement much in rust, so I forgot some parts. What chapter should I look?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1512397669, "creation_date": 1512397669, "answer_id": 47635531, "question_id": 47632097, "link": "https://stackoverflow.com/questions/47632097/how-to-take-an-intoiterator-of-references-and-return-a-boxed-iterator-of-referen/47635531#47635531", "title": "How to take an IntoIterator of references and return a boxed Iterator of references to the modified values?", "body": "<p>It's very useful to create a <a href=\"/help/mcve\">MCVE</a> when encountering a problem, and it's something I encourage all learners to undertake. Here's one such MCVE that mirrors your code:</p>\n\n<pre><code>fn foo&lt;'a, I&gt;(costs: I) -&gt; Box&lt;Iterator&lt;Item = &amp;'a i32&gt;&gt;\nwhere\n    I: IntoIterator&lt;Item = &amp;'a i32&gt;,\n{\n    Box::new(costs.into_iter().map(|i| i + 1))\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;[closure@src/main.rs:5:36: 5:45] as std::ops::FnOnce&lt;(&amp;'a i32,)&gt;&gt;::Output == &amp;i32`\n --&gt; src/main.rs:5:5\n  |\n5 |     Box::new(costs.into_iter().map(|i| i + 1))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &amp;i32\n  |\n  = note: expected type `i32`\n             found type `&amp;i32`\n  = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Map&lt;&lt;I as std::iter::IntoIterator&gt;::IntoIter, [closure@src/main.rs:5:36: 5:45]&gt;`\n  = note: required for the cast to the object type `std::iter::Iterator&lt;Item=&amp;i32&gt;`\n</code></pre>\n\n<p>You are accepting a reference then creating a brand new value based on the reference. That means that the return type is no longer a reference, thus your function signature is not upheld. You need to change it:</p>\n\n<pre><code>fn foo&lt;'a, I&gt;(costs: I) -&gt; Box&lt;Iterator&lt;Item = i32&gt;&gt;\n</code></pre>\n\n<p>This will unlock another error because the compiler doesn't know enough about the concrete type of <code>I::IntoIter</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0310]: the associated type `&lt;I as std::iter::IntoIterator&gt;::IntoIter` may not live long enough\n --&gt; src/main.rs:6:5\n  |\n6 |     Box::new(costs.into_iter().map(|i| i + 1))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = help: consider adding an explicit lifetime bound `&lt;I as std::iter::IntoIterator&gt;::IntoIter: 'static`...\nnote: ...so that the type `std::iter::Map&lt;&lt;I as std::iter::IntoIterator&gt;::IntoIter, [closure@src/main.rs:6:36: 6:45]&gt;` will meet its required lifetime bounds\n --&gt; src/main.rs:6:5\n  |\n6 |     Box::new(costs.into_iter().map(|i| i + 1))\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>We do as it suggests and add the <code>'static</code> bound:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>fn foo&lt;'a, I&gt;(costs: I) -&gt; Box&lt;Iterator&lt;Item = i32&gt;&gt;\nwhere\n    I: IntoIterator&lt;Item = &amp;'a i32&gt;,\n    I::IntoIter: 'static,\n{\n    Box::new(costs.into_iter().map(|i| i + 1))\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a></li>\n</ul>\n\n<hr>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;(usize, &amp;(i32, f32))&gt;: std::iter::FromIterator&lt;(usize, &amp;'a (usize, f32))&gt;` is not satisfied\n</code></pre>\n\n<p>This error is because you have an iterator of <code>(usize, &amp;'a (usize, f32))</code> and you are trying to make them into <code>(usize, &amp;(i32, f32))</code>. You can't convert types like this.</p>\n"}], "owner": {"reputation": 4989, "user_id": 1685095, "user_type": "registered", "accept_rate": 42, "profile_image": "https://www.gravatar.com/avatar/5f06068bb9b4c00f12582ccc0ba64c4a?s=128&d=identicon&r=PG", "display_name": "user1685095", "link": "https://stackoverflow.com/users/1685095/user1685095"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 979, "favorite_count": 0, "accepted_answer_id": 47635531, "answer_count": 1, "score": -4, "last_activity_date": 1512397669, "creation_date": 1512386116, "last_edit_date": 1512396052, "question_id": 47632097, "link": "https://stackoverflow.com/questions/47632097/how-to-take-an-intoiterator-of-references-and-return-a-boxed-iterator-of-referen", "title": "How to take an IntoIterator of references and return a boxed Iterator of references to the modified values?", "body": "<p>I've grasped the basics of Rust lifetimes and how to work with iterators in it, but still have troubles to define a function that takes an iterable of tuples and return an iterable of tuples also allocated on the heap.</p>\n\n<p>(I know that \"iterable\" doesn't mean anything in Rust but I will still use it instead of <code>IntoInterator</code>)</p>\n\n<pre><code>use std::iter::{once, repeat};\n\nfn foo&lt;'a, I&gt;(costs: I) -&gt; Box&lt;Iterator&lt;Item = &amp;'a (i32, f32)&gt;&gt;\nwhere\n    I: IntoIterator&lt;Item = &amp;'a (usize, f32)&gt;,\n{\n    let preliminary_examination_costs = once(10.0).chain(repeat(20.0));\n    let id_assignment_costs = once(10.0).chain(repeat(20.0));\n    let batch_fixed = once(10.0).chain(repeat(0.0));\n    let temp: Vec&lt;(usize, &amp;(i32, f32))&gt; = costs.into_iter().enumerate().collect();\n    temp.sort_by_key(|&amp;(_, &amp;(n, cost))| n);\n    Box::new(temp.into_iter().map(|(i, &amp;(n, cost))| {\n        (\n            i,\n            cost + preliminary_examination_costs.next().unwrap()\n                + id_assignment_costs.next().unwrap() + batch_fixed.next().unwrap(),\n        )\n    }))\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b2bef2a57f76aae6c70eb0e28f4db44f&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a>)</p>\n\n<p>Here's the errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;(usize, &amp;(i32, f32))&gt;: std::iter::FromIterator&lt;(usize, &amp;'a (usize, f32))&gt;` is not satisfied\n  --&gt; src/main.rs:10:73\n   |\n10 |     let temp: Vec&lt;(usize, &amp;(i32, f32))&gt; = costs.into_iter().enumerate().collect();\n   |                                                                         ^^^^^^^ a collection of type `std::vec::Vec&lt;(usize, &amp;(i32, f32))&gt;` cannot be built from an iterator over elements of type `(usize, &amp;'a (usize, f32))`\n   |\n   = help: the trait `std::iter::FromIterator&lt;(usize, &amp;'a (usize, f32))&gt;` is not implemented for `std::vec::Vec&lt;(usize, &amp;(i32, f32))&gt;`\n\nerror[E0271]: type mismatch resolving `&lt;[closure@src/main.rs:12:35: 18:6 preliminary_examination_costs:_, id_assignment_costs:_, batch_fixed:_] as std::ops::FnOnce&lt;((usize, &amp;(i32, f32)),)&gt;&gt;::Output == &amp;(i32, f32)`\n  --&gt; src/main.rs:12:5\n   |\n12 | /     Box::new(temp.into_iter().map(|(i, &amp;(n, cost))| {\n13 | |         (\n14 | |             i,\n15 | |             cost + preliminary_examination_costs.next().unwrap()\n16 | |                 + id_assignment_costs.next().unwrap() + batch_fixed.next().unwrap(),\n17 | |         )\n18 | |     }))\n   | |_______^ expected tuple, found &amp;(i32, f32)\n   |\n   = note: expected type `(usize, f32)`\n              found type `&amp;(i32, f32)`\n   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Map&lt;std::vec::IntoIter&lt;(usize, &amp;(i32, f32))&gt;, [closure@src/main.rs:12:35: 18:6 preliminary_examination_costs:_, id_assignment_costs:_, batch_fixed:_]&gt;`\n   = note: required for the cast to the object type `std::iter::Iterator&lt;Item=&amp;(i32, f32)&gt;`\n</code></pre>\n"}, {"tags": ["string", "reference", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1512378639, "post_id": 47629596, "comment_id": 82217373, "body": "You need to show us some more code. What <code>k</code>&#39;s type? Where does it come from?"}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1512381670, "post_id": 47629596, "comment_id": 82219185, "body": "This this is certainly an XY problem. You can&#39;t make a local char value live longer than the function&#39;s scope unless you return something that owns the character. You should consider returning something else, like an enum."}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 2, "creation_date": 1512381741, "post_id": 47629596, "comment_id": 82219231, "body": "As a generic solution you could use <a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow&lt;&#39;static, str&gt;</code></a>; the <code>Owned</code> variant would store a <code>String</code> then."}, {"owner": {"reputation": 1759, "user_id": 1903064, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f7544f56a70ccdb9879069e3db57b985?s=128&d=identicon&r=PG&f=1", "display_name": "bob", "link": "https://stackoverflow.com/users/1903064/bob"}, "edited": false, "score": 0, "creation_date": 1512381807, "post_id": 47629596, "comment_id": 82219282, "body": "would this work? <code>&amp;format!(&quot;{}&quot;, k as char)</code>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 1759, "user_id": 1903064, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f7544f56a70ccdb9879069e3db57b985?s=128&d=identicon&r=PG&f=1", "display_name": "bob", "link": "https://stackoverflow.com/users/1903064/bob"}, "edited": false, "score": 0, "creation_date": 1512381995, "post_id": 47629596, "comment_id": 82219408, "body": "@andy nah, this will also trigger a lifetime error."}], "answers": [{"comments": [{"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1512385778, "post_id": 47631059, "comment_id": 82221588, "body": "Given how easy it is to use <code>Cow&lt;&#39;static, str&gt;</code> I don&#39;t think it would be a premature optimization to use it."}], "tags": [], "owner": {"reputation": 868, "user_id": 4051512, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/8bd3beb8e3334400c9d43118b2206a62?s=128&d=identicon&r=PG&f=1", "display_name": "papagaga", "link": "https://stackoverflow.com/users/4051512/papagaga"}, "is_accepted": false, "score": 2, "last_activity_date": 1512397800, "last_edit_date": 1512397800, "creation_date": 1512382683, "answer_id": 47631059, "question_id": 47629596, "link": "https://stackoverflow.com/questions/47629596/converting-a-char-to-str/47631059#47631059", "title": "Converting a char to &amp;str", "body": "<p>Those are two very different things you want to treat in the same way: arrays of bytes known at compile time and a dynamically created array. They aren't allocated in the same area of memory and don't have the same lifetime. You can get away with a reference to a compile-time created array, because they live as long as the program, but you can't with a dynamically created one, since the reference won't last longer than the resource it borrows.</p>\n\n<p>You may be better using only <code>String</code>s:</p>\n\n<pre><code>match k {\n    SP_KEY_1 =&gt; String::from(\"KEY_1\"),\n    ...\n}\n</code></pre>\n\n<p>than contorting. Keeping to <code>&amp;strs</code> seems like premature optimization from where I stand.</p>\n"}, {"tags": [], "owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "is_accepted": false, "score": 6, "last_activity_date": 1512397773, "last_edit_date": 1512397773, "creation_date": 1512392062, "answer_id": 47633898, "question_id": 47629596, "link": "https://stackoverflow.com/questions/47629596/converting-a-char-to-str/47633898#47633898", "title": "Converting a char to &amp;str", "body": "<p>Using <code>Cow</code> is simple enough:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn cow_name(v: u8) -&gt; Cow&lt;'static, str&gt; {\n    match v {\n        0 =&gt; \"KEY_0\",\n        1 =&gt; \"KEY_1\",\n        _ =&gt; return (v as char).to_string().into(),\n    }.into()\n}\n</code></pre>\n\n<p>Given that <code>k</code> is a <code>u8</code> (otherwise your code will not compile), you can also use a constant array:</p>\n\n<pre><code>const NAMES: [&amp;'static str; 256] = [\n    \"KEY_0\", \"KEY_1\", //  ...\n    \" \", \"!\", \"\\\"\", \"#\", // ...\n];\n\nfn const_name(k: u8) -&gt; &amp;'static str {\n    NAMES[k as usize]\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=c227956d2a1edddc19b2f7cab4f7a648&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1512394973, "creation_date": 1512394973, "answer_id": 47634755, "question_id": 47629596, "link": "https://stackoverflow.com/questions/47629596/converting-a-char-to-str/47634755#47634755", "title": "Converting a char to &amp;str", "body": "<p>So long as you don't need to return the <code>&amp;str</code> from the function, you can completely avoid heap allocation using <a href=\"https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8\" rel=\"noreferrer\"><code>char::encode_utf8</code></a>:</p>\n\n<pre><code>const SP_KEY_1: u8 = 0;\nconst SP_KEY_2: u8 = 1;\nconst SP_KEY_3: u8 = 2;\nconst SP_KEY_4: u8 = 3;\nconst SP_KEY_5: u8 = 4;\nconst SP_KEY_6: u8 = 5;\n\nfn main() {\n    let k = 42u8;\n\n    let mut tmp = [0; 4];\n\n    let s = match k {\n        SP_KEY_1 =&gt; \"KEY_1\",\n        SP_KEY_2 =&gt; \"KEY_2\",\n        SP_KEY_3 =&gt; \"KEY_3\",\n        SP_KEY_4 =&gt; \"KEY_4\",\n        SP_KEY_5 =&gt; \"KEY_5\",\n        SP_KEY_6 =&gt; \"KEY_6\",\n        _ =&gt; (k as char).encode_utf8(&amp;mut tmp),\n    };\n\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>This could be paired with a closure if you needed more control:</p>\n\n<pre><code>fn adapt&lt;F, B&gt;(k: u8, f: F) -&gt; B\nwhere\n    for&lt;'a&gt; F: FnOnce(&amp;'a str) -&gt; B,\n{\n    let mut tmp = [0; 4];\n\n    let s = match k {\n        SP_KEY_1 =&gt; \"KEY_1\",\n        SP_KEY_2 =&gt; \"KEY_2\",\n        SP_KEY_3 =&gt; \"KEY_3\",\n        SP_KEY_4 =&gt; \"KEY_4\",\n        SP_KEY_5 =&gt; \"KEY_5\",\n        SP_KEY_6 =&gt; \"KEY_6\",\n        _ =&gt; (k as char).encode_utf8(&amp;mut tmp),\n    };\n\n    f(s)\n}\n\nfn main() {\n    adapt(0, |s| println!(\"{}\", s));\n    let owned = adapt(0, |s| s.to_owned());\n}\n</code></pre>\n\n<p>Or stored in a struct to provide a little bit of abstraction:</p>\n\n<pre><code>#[derive(Debug, Default)]\nstruct Foo {\n    tmp: [u8; 4],\n}\n\nimpl Foo {\n    fn adapt(&amp;mut self, k: u8) -&gt; &amp;str {\n        match k {\n            SP_KEY_1 =&gt; \"KEY_1\",\n            SP_KEY_2 =&gt; \"KEY_2\",\n            SP_KEY_3 =&gt; \"KEY_3\",\n            SP_KEY_4 =&gt; \"KEY_4\",\n            SP_KEY_5 =&gt; \"KEY_5\",\n            SP_KEY_6 =&gt; \"KEY_6\",\n            _ =&gt; (k as char).encode_utf8(&amp;mut self.tmp),\n        }\n    }\n}\n\nfn main() {\n    let mut foo = Foo::default();\n    {\n        let s = foo.adapt(0);\n    }\n    {\n        let s = foo.adapt(42);\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2058, "user_id": 3958875, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/f6149ddd4636bcab17c52b751d79f7fd?s=128&d=identicon&r=PG&f=1", "display_name": "Prime_Aqasix", "link": "https://stackoverflow.com/users/3958875/prime-aqasix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3585, "favorite_count": 0, "accepted_answer_id": 47634755, "answer_count": 3, "score": 5, "last_activity_date": 1512397800, "creation_date": 1512377592, "last_edit_date": 1512394583, "question_id": 47629596, "link": "https://stackoverflow.com/questions/47629596/converting-a-char-to-str", "title": "Converting a char to &amp;str", "body": "<p>I have a <code>match</code> statement which returns a <code>&amp;str</code>:</p>\n\n<pre><code>match k {\n    SP_KEY_1 =&gt; \"KEY_1\",\n    SP_KEY_2 =&gt; \"KEY_2\",\n    SP_KEY_3 =&gt; \"KEY_3\",\n    SP_KEY_4 =&gt; \"KEY_4\",\n    SP_KEY_5 =&gt; \"KEY_5\",\n    SP_KEY_6 =&gt; \"KEY_6\",\n    _ =&gt; (k as char), // I want to convert this to &amp;str\n}.as_bytes()\n</code></pre>\n\n<p>I have tried to convert a <code>char</code> to a string first, and then taking a slice of that:</p>\n\n<pre><code>&amp;(k as char).to_string()[..]\n</code></pre>\n\n<p>But that gave me the lifetime error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n</code></pre>\n\n<p>Stating that <code>(k as char).to_string()</code>  is a temporary value, which makes sense as from what I can tell <code>to_string()</code> returns a clone.</p>\n\n<p>I can add <code>.to_string()</code> to every <code>&amp;str</code> literal above to make the return value <code>String</code>, but that seems both ugly (a lot of repeated code), and probably inefficient, as <code>to_string()</code> clones the original string slice.</p>\n\n<p>The specific question is how would I make a <code>char</code> into a <code>&amp;str</code>, but the broader question is that is there a better solution, what is commonly done this situation.</p>\n"}, {"tags": ["postgresql", "rust", "rust-diesel"], "answers": [{"comments": [{"owner": {"reputation": 384, "user_id": 1723676, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/y8ILT.jpg?s=128&g=1", "display_name": "Ronny", "link": "https://stackoverflow.com/users/1723676/ronny"}, "edited": false, "score": 1, "creation_date": 1512378856, "post_id": 47626103, "comment_id": 82217514, "body": "Thanks a lot! Took me a while to realize that I could use <code>excluded</code> using the <code>id</code> - this works: <code>diesel::insert_into($table::table).values(&amp;objects).on_confl&zwnj;&#8203;\u200c\u200bict($table::id).do&zwnj;&#8203;_u\u200c\u200bpdate().set($tab&zwnj;&#8203;le::\u200c\u200bid.eq(excluded&zwnj;&#8203;($tabl\u200c\u200be::id))).exe&zwnj;&#8203;cute(con\u200c\u200bn).unwrap</code>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 23, "last_activity_date": 1546739738, "last_edit_date": 1546739738, "creation_date": 1512358196, "answer_id": 47626103, "question_id": 47626047, "link": "https://stackoverflow.com/questions/47626047/execute-an-insert-or-update-using-diesel/47626103#47626103", "title": "Execute an insert or update using Diesel", "body": "<p><a href=\"https://docs.rs/diesel/1.3.3/diesel/pg/upsert/struct.IncompleteOnConflict.html\" rel=\"noreferrer\">Diesel 1.3.3's documentation</a> already has examples for using an upsert:</p>\n\n<p><strong>Set specific value on conflict</strong></p>\n\n<pre><code>diesel::insert_into(users)\n    .values(&amp;user2)\n    .on_conflict(id)\n    .do_update()\n    .set(name.eq(\"I DONT KNOW ANYMORE\"))\n    .execute(&amp;conn);\n</code></pre>\n\n<p><strong>Set <a href=\"https://docs.rs/diesel/1.3.3/diesel/query_builder/trait.AsChangeset.html\" rel=\"noreferrer\"><code>AsChangeset</code></a> struct on conflict</strong></p>\n\n<pre><code>diesel::insert_into(users)\n    .values(&amp;user2)\n    .on_conflict(id)\n    .do_update()\n    .set(&amp;user2)\n    .execute(&amp;conn);\n</code></pre>\n\n<p><strong>Use <a href=\"https://docs.rs/diesel/1.3.3/diesel/pg/upsert/fn.excluded.html\" rel=\"noreferrer\"><code>excluded</code></a> to get the rejected value</strong></p>\n\n<pre><code>diesel::insert_into(users)\n    .values(&amp;vec![user2, user3])\n    .on_conflict(id)\n    .do_update()\n    .set(name.eq(excluded(name)))\n    .execute(&amp;conn)\n</code></pre>\n\n<hr>\n\n<p><a href=\"https://docs.rs/diesel/1.3.3/diesel/pg/upsert/struct.IncompleteDoUpdate.html#method.set\" rel=\"noreferrer\"><code>IncompleteDoUpdate::set</code></a> takes any value that implements <a href=\"https://docs.rs/diesel/1.3.3/diesel/query_builder/trait.AsChangeset.html\" rel=\"noreferrer\"><code>AsChangeset</code></a>, which <code>&amp;Vec&lt;T&gt;</code> does not. Thus it is invalid to pass it as an argument to <code>set</code>.</p>\n"}], "owner": {"reputation": 384, "user_id": 1723676, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/y8ILT.jpg?s=128&g=1", "display_name": "Ronny", "link": "https://stackoverflow.com/users/1723676/ronny"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3664, "favorite_count": 0, "accepted_answer_id": 47626103, "answer_count": 1, "score": 11, "last_activity_date": 1546739738, "creation_date": 1512357666, "last_edit_date": 1512358286, "question_id": 47626047, "link": "https://stackoverflow.com/questions/47626047/execute-an-insert-or-update-using-diesel", "title": "Execute an insert or update using Diesel", "body": "<p>I am trying to execute an insert or update using <a href=\"https://github.com/diesel-rs/diesel\" rel=\"noreferrer\">Diesel</a> with PostgreSQL.</p>\n\n<p>I have tried:</p>\n\n<pre><code>diesel::insert_into($table::table).values(&amp;objects).on_conflict($table::id).do_update().set(&amp;objects).execute(conn).unwrap();\n</code></pre>\n\n<p>where <code>objects</code> is a <code>std::vec::Vec&lt;Struct&gt;</code> - which results in the compiler error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>^^^ the trait 'diesel::query_builder::AsChangeset' is not implemented for '&amp;std::vec::Vec&lt;Struct&gt;'\n</code></pre>\n\n<p>There is a <code>on_conflict_do_nothing()</code> in the query builder but I can't seem to find something like <code>on_conflict_do_update()</code> or <code>on_conflict_do_replace()</code>.</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512357072, "post_id": 47624992, "comment_id": 82209694, "body": "<a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512357144, "post_id": 47624992, "comment_id": 82209706, "body": "<a href=\"https://docs.rs/itertools/0.7.4/itertools/trait.Itertools.html#method.minmax\" rel=\"nofollow noreferrer\"><code>Itertools::minmax</code></a> has already implemented this functionality."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512357365, "post_id": 47624992, "comment_id": 82209743, "body": "Unless you have a pressing need otherwise, it&#39;s customary to write that signature as <code>fn execute_row_operation&lt;F&gt;(row: &amp;[u32], operation: F) where F: Fn(&amp;[u32]) -&gt; u32</code>; using a generic."}, {"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512359603, "post_id": 47624992, "comment_id": 82210230, "body": "@Shepmaster thank you for that link!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1548171589, "last_edit_date": 1548171589, "creation_date": 1512357031, "answer_id": 47625964, "question_id": 47624992, "link": "https://stackoverflow.com/questions/47624992/can-a-trait-guarantee-certain-type-properties-such-as-a-vector-is-non-empty/47625964#47625964", "title": "Can a trait guarantee certain type properties such as a vector is non-empty?", "body": "<blockquote>\n  <p>Can a trait guarantee certain type properties </p>\n</blockquote>\n\n<p>Yes, that is what they are for. In many cases, these properties are that a set of functions exist (e.g. <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq\" rel=\"nofollow noreferrer\"><code>PartialEq::eq</code></a>) and that a set of behaviors are present (e.g. symmetric and transitive equality, required by <code>PartialEq</code>).</p>\n\n<p>Traits can also have no methods, such as <a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"nofollow noreferrer\"><code>Eq</code></a>. These <em>only</em> add a set of behaviors (e.g. reflexive equality). These types of traits are often referred to as <em>marker traits</em>.</p>\n\n<blockquote>\n  <p>such as a vector is non-empty?</p>\n</blockquote>\n\n<p>However, you aren't asking for what you really want. You actually want a way to implement a trait for certain <em>values</em> of a type. This is not possible in Rust.</p>\n\n<p>At best, you can introduce a <em>newtype</em>. This might be sufficient for your needs, but you could also implement your own marker traits for that newtype, if useful:</p>\n\n<pre><code>struct NonEmptyVec&lt;T&gt;(Vec&lt;T&gt;);\n\nimpl&lt;T&gt; NonEmptyVec&lt;T&gt; {\n    fn new(v: Vec&lt;T&gt;) -&gt; Result&lt;Self, Vec&lt;T&gt;&gt; {\n        if v.is_empty() {\n            Err(v)\n        } else {\n            Ok(NonEmptyVec(v))\n        }\n    }\n}\n\nfn do_a_thing&lt;T&gt;(items: NonEmptyVec&lt;T&gt;) {}\n\nfn main() {\n    let mut a = Vec::new();\n    // do_a_thing(a); // expected struct `NonEmptyVec`, found struct `std::vec::Vec`\n    a.push(42);\n    let b = NonEmptyVec::new(a).expect(\"nope\");\n    do_a_thing(b);\n}\n</code></pre>\n\n<blockquote>\n<pre><code>T: &amp;Vec&lt;u32&gt; + NonEmpty\n</code></pre>\n</blockquote>\n\n<p>This isn't valid because <code>Vec</code> is a type and <code>NonEmpty</code> would presumably be a trait \u2014 you can't use types as trait bounds.</p>\n\n<hr>\n\n<p>Historical note:</p>\n\n<p>Way back in the long ago, as I understand it, Rust actually <em>did</em> support what you wanted under the name <em>typestate</em>. See <a href=\"https://stackoverflow.com/q/3210025/155423\">What is typestate?</a> and <a href=\"https://pcwalton.github.io/2012/12/26/typestate-is-dead.html\" rel=\"nofollow noreferrer\">Typestate Is Dead, Long Live Typestate!</a>.</p>\n\n<p>An example of emulating it:</p>\n\n<pre><code>struct MyVec&lt;T, S&gt;\nwhere\n    S: VecState,\n{\n    vec: Vec&lt;T&gt;,\n    state: S,\n}\n\ntrait VecState {}\n\nstruct Empty;\nstruct NonEmpty;\n\nimpl VecState for Empty {}\nimpl VecState for NonEmpty {}\n\nimpl&lt;T&gt; MyVec&lt;T, Empty&gt; {\n    fn new() -&gt; Self {\n        MyVec {\n            vec: Vec::new(),\n            state: Empty,\n        }\n    }\n\n    fn push(mut self, value: T) -&gt; MyVec&lt;T, NonEmpty&gt; {\n        self.vec.push(value);\n        MyVec {\n            vec: self.vec,\n            state: NonEmpty,\n        }\n    }\n}\n\nfn do_a_thing&lt;T&gt;(items: MyVec&lt;T, NonEmpty&gt;) {}\n\nfn main() {\n    let a = MyVec::new();\n    // do_a_thing(a); // expected struct `NonEmpty`, found struct `Empty`\n    let b = a.push(42);\n    do_a_thing(b);\n}\n</code></pre>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 896, "favorite_count": 0, "accepted_answer_id": 47625964, "answer_count": 1, "score": 3, "last_activity_date": 1548171589, "creation_date": 1512348327, "last_edit_date": 1512356558, "question_id": 47624992, "link": "https://stackoverflow.com/questions/47624992/can-a-trait-guarantee-certain-type-properties-such-as-a-vector-is-non-empty", "title": "Can a trait guarantee certain type properties such as a vector is non-empty?", "body": "<p>Imagine I have functions like this:</p>\n\n<pre><code>fn min_max_difference(row: &amp;Vec&lt;u32&gt;) -&gt; u32 {\n    let mut min_elem: u32 = row[0];\n    let mut max_elem: u32 = min_elem;\n\n    for &amp;element in row.iter().skip(1) {\n        if element &lt; min_elem {\n            min_elem = element;\n        } else if element &gt; max_elem {\n            max_elem = element;\n        }\n    }\n\n    result = max_elem - min_elem;\n}\n\nfn execute_row_operation(row: &amp;Vec&lt;u32&gt;, operation: Fn(&amp;Vec&lt;u32&gt;) -&gt; u32) -&gt; Option&lt;(u32, u32)&gt; {\n    let mut result = None;\n\n    if row.len() &gt; 0 {\n        result = operation(row);\n    }\n\n    result\n}\n</code></pre>\n\n<p>Note that the <code>if</code> block in <code>execute_row_operation</code> guarantees that the <code>Vec&lt;u32&gt;</code> I am passing to the <code>operation</code> function is non-empty. In general, I want \"operations\" to be functions which <em>only</em> accept non-empty rows. I would like it if I could do something like this:</p>\n\n<pre><code>fn min_max_difference&lt;T: &amp;Vec&lt;u32&gt; + NonEmpty&gt;(row: T) -&gt; u32 {\n    //snip\n}\n</code></pre>\n\n<p>This would allow the compiler to disallow passing references to empty vectors to a function like <code>min_max_difference</code> which expects this. </p>\n\n<p>But <a href=\"https://rustbyexample.com/trait.html\" rel=\"nofollow noreferrer\">traits as I understand them</a> specify what methods a type has, rather than what properties a type has. In my head, I am imagining a trait for a type <code>T</code> that is composed of boolean predicates with type: <code>Fn&lt;T&gt; -&gt; bool</code>, and such a trait is \"implemented\" for a type if it all those predicates evaluate to true. </p>\n\n<p>Can something like this be achieved?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1512338024, "creation_date": 1512338024, "answer_id": 47623740, "question_id": 47623432, "link": "https://stackoverflow.com/questions/47623432/getting-a-value-from-a-child-struct-and-then-modifying-the-child-struct-a-borr/47623740#47623740", "title": "Getting a value from a child struct, and then modifying the child struct: a borrow checker puzzle?", "body": "<p>As the error message states, you are attempting to replace <code>self.option_x</code> while you have a reference to something inside it:</p>\n\n<pre><code>Some(ref mut some_x) =&gt; {\n    let result = some_x.get();\n\n    if some_x.times_accessed == self.max_access {\n        self.option_x = None; // &lt;---------\n    }\n\n    Some(result)\n}\n</code></pre>\n\n<p>Any code after the highlighted point that accesses <code>some_x</code> would get an invalid value. This is how programs crash, expose security holes, etc..</p>\n\n<p>In a potential Rust future, a compiler that understands <em>non-lexical lifetimes</em> might realize that you don't use that value so the code is ok in the current state. Until then, you can take the entire value out of the <code>Option</code> then put it back if your condition isn't met:</p>\n\n<pre><code>match self.option_x.take() {\n    Some(mut some_x) =&gt; {\n        let result = some_x.get();\n\n        if some_x.times_accessed != self.max_access {\n            self.option_x = Some(some_x);\n        }\n\n        Some(result)\n    }\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/36225868/155423\">What disaster does the compiler prevent by disallowing assigning to a borrowed value?</a></li>\n<li><a href=\"https://stackoverflow.com/q/43428894/155423\">Moved variable still borrowing after calling `drop`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/35765440/155423\">What are the options to end a mutable borrow in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 39, "favorite_count": 0, "accepted_answer_id": 47623740, "answer_count": 1, "score": 0, "last_activity_date": 1512338024, "creation_date": 1512336042, "last_edit_date": 1512337477, "question_id": 47623432, "link": "https://stackoverflow.com/questions/47623432/getting-a-value-from-a-child-struct-and-then-modifying-the-child-struct-a-borr", "title": "Getting a value from a child struct, and then modifying the child struct: a borrow checker puzzle?", "body": "<p>Consider this toy code:</p>\n\n<pre><code>struct X {\n    x: usize,\n    times_accessed: usize,\n}\n\nimpl X {\n    fn get(&amp;mut self) -&gt; usize {\n        self.times_accessed = self.times_accessed + 1;\n        self.x\n    }\n}\n\nstruct Y {\n    y: usize,\n    max_access: usize,\n    option_x: Option&lt;X&gt;,\n}\n\nimpl Y {\n    fn get_x(&amp;mut self) -&gt; Option&lt;usize&gt; {\n        match self.option_x {\n            Some(ref mut some_x) =&gt; {\n                let result = some_x.get();\n\n                if some_x.times_accessed == self.max_access {\n                    self.option_x = None;\n                }\n\n                Some(result)\n            }\n            None =&gt; {\n                println!(\"option_x is not initialized! try calling Y::init_x\");\n                None\n            }\n        }\n    }\n\n    fn init_x(&amp;mut self, x_val: usize, max_allowed_access: usize) {\n        self.max_access = max_allowed_access;\n        self.option_x = Some(X {\n            x: x_val,\n            times_accessed: 0,\n        });\n    }\n}\n\nfn main() {\n    println!(\"hello world!\");\n}\n</code></pre>\n\n<p>I haven't bothered using <code>Y</code> in the main function, because the compiler doesn't need me to do that to point out that the borrow checker would not be satisfied with the implementation for <code>Y::get_x</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0506]: cannot assign to `self.option_x` because it is borrowed\n  --&gt; src/main.rs:26:21\n   |\n22 |             Some(ref mut some_x) =&gt; {\n   |                  -------------- borrow of `self.option_x` occurs here\n...\n26 |                     self.option_x = None;\n   |                     ^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.option_x` occurs here\n</code></pre>\n\n<p>I understand the issue from the borrow checker's perspective, and I can come up with a very simple fix: copy the value from <code>some_x</code> into <code>result</code> (am I not already doing that, after all, result isn't a reference, and <code>usize</code> has the <code>Copy</code> trait), and then \"drop the reference\" to <code>some_x</code> (would it be using <code>drop(some_x);</code>, so I can modify <code>option_x</code>? A version of that is presented here, but still doesn't work:</p>\n\n<pre><code>fn get_x(&amp;mut self) -&gt; Option&lt;usize&gt; {\n    match self.option_x {\n        Some(ref mut some_x) =&gt; {\n            let result = some_x.get();\n\n            if some_x.times_accessed == self.max_access {\n                drop(some_x);\n                self.option_x = None;\n            }\n\n            Some(result)\n        }\n        None =&gt; {\n            println!(\"option_x is not initialized! try calling Y::init_x\");\n            None\n        }\n    }\n}\n</code></pre>\n\n<p>What should one do?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "edited": false, "score": 0, "creation_date": 1512332817, "post_id": 47622933, "comment_id": 82203732, "body": "Does this mean that each time I call <code>Chars</code> on the <code>&amp;str</code>, I am creating a new copy of decoded characters?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "edited": false, "score": 1, "creation_date": 1512333689, "post_id": 47622933, "comment_id": 82204017, "body": "Yes, but the decoded characters are not stored at the same time (unless you do it yourself).  Decoding them obviously involves some cpu cycles, but the iterator returns them one by one. Calling <code>chars()</code> just creates the iterator, the characters are only actually decoded if you walk it, i.e. call <code>next()</code> until it&#39;s done."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 3, "last_activity_date": 1512332740, "creation_date": 1512332740, "answer_id": 47622933, "question_id": 47622748, "link": "https://stackoverflow.com/questions/47622748/why-are-items-of-a-char-iterator-obtained-from-calling-chars-on-a-string/47622933#47622933", "title": "Why are `Item`s of a `Char` iterator, obtained from calling `chars` on a string slice, not references to `char`s?", "body": "<p>A <a href=\"https://doc.rust-lang.org/reference/types.html#textual-types\" rel=\"nofollow noreferrer\"><code>&amp;str</code></a> points to an UTF-8 encoded sequence of characters; as they are encoded you cannot get an iterator resulting in references to the decoded characters, the decoded character need to be returned by value.</p>\n\n<p>Also see the <code>Item</code> type of the <a href=\"https://doc.rust-lang.org/std/str/struct.Chars.html#impl-Iterator\" rel=\"nofollow noreferrer\"><code>Iterator</code> impl for <code>std::str::Chars</code></a>.</p>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 308, "favorite_count": 0, "accepted_answer_id": 47622933, "answer_count": 1, "score": 0, "last_activity_date": 1512334450, "creation_date": 1512331639, "last_edit_date": 1512334450, "question_id": 47622748, "link": "https://stackoverflow.com/questions/47622748/why-are-items-of-a-char-iterator-obtained-from-calling-chars-on-a-string", "title": "Why are `Item`s of a `Char` iterator, obtained from calling `chars` on a string slice, not references to `char`s?", "body": "<p>Running the following code will cause the compiler to complain that <code>PairedNumbers::get</code> returns <code>(char, char)</code> and not <code>(&amp;char, &amp;char)</code>:</p>\n\n<pre><code>use std::iter::{Zip, Cycle, Skip};\nuse std::str::Chars;\n\nstruct PairedNumbers&lt;'a&gt; {\n    char_pairs: Zip&lt;Cycle&lt;Chars&lt;'a&gt;&gt;, Skip&lt;Cycle&lt;Chars&lt;'a&gt;&gt;&gt;&gt;,\n    counter: usize,\n}\n\nimpl&lt;'a, 'b: 'a&gt; PairedNumbers&lt;'a&gt; {\n    fn new(num_str: &amp;'b str, jump: usize) -&gt; PairedNumbers&lt;'a&gt; {\n        PairedNumbers {\n            char_pairs: num_str.chars().cycle().zip(num_str.chars().cycle().skip(jump)),\n            counter: 0,\n        }\n    }\n\n    fn get(&amp;'a mut self) -&gt; (&amp;'a char, &amp;'a char) {\n        self.counter = self.counter + 1;\n        self.char_pairs.next().expect(\"could not get char pair from unparsed_pairs!\")\n    }\n}\n</code></pre>\n\n<p>We see that the <code>PairedNumbers</code> struct is initialized by making iterators (<code>Chars</code> to be specific) over the characters of the string slice. Given that <code>&amp;str</code> is a reference to a particular region of memory (I am assuming a contiguous region?), wouldn't <code>Chars</code> really be iterating over references to the the component <code>char</code>s that make up the <code>str</code>? Is Rust's auto-dereferencing at play here?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 5, "last_activity_date": 1512320281, "creation_date": 1512320281, "answer_id": 47620834, "question_id": 47620011, "link": "https://stackoverflow.com/questions/47620011/can-an-ffi-function-modify-a-variable-that-wasnt-declared-mutable/47620834#47620834", "title": "Can an FFI function modify a variable that wasn&#39;t declared mutable?", "body": "<p>I'd say <a href=\"https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html\" rel=\"noreferrer\">undefined behavior</a>:</p>\n\n<blockquote>\n  <p>Mutating non-mutable data \u2014 that is, data reached through a shared reference or data owned by a <code>let</code> binding), unless that data is contained within an <code>UnsafeCell&lt;U&gt;</code>.</p>\n</blockquote>\n\n<p>And this might include:</p>\n\n<ul>\n<li>if you use <code>val</code> after the FFI-call it might ignore the writes you did (e.g. cached the value in a register or due to <a href=\"https://en.wikipedia.org/wiki/Constant_folding\" rel=\"noreferrer\">constant propagation</a>)</li>\n<li>segfault in FFI because the referenced memory might be read-only</li>\n<li>the write from FFI might show up in seemingly unrelated locations because the compiler reused the memory and assumed it had a well-defined value</li>\n<li>and worse :)</li>\n</ul>\n"}], "owner": {"reputation": 63, "user_id": 9046929, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88844f78e7da1fde285707370eab31d0?s=128&d=identicon&r=PG&f=1", "display_name": "wemagah", "link": "https://stackoverflow.com/users/9046929/wemagah"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 47620834, "answer_count": 1, "score": 6, "last_activity_date": 1512322786, "creation_date": 1512315562, "last_edit_date": 1512322786, "question_id": 47620011, "link": "https://stackoverflow.com/questions/47620011/can-an-ffi-function-modify-a-variable-that-wasnt-declared-mutable", "title": "Can an FFI function modify a variable that wasn&#39;t declared mutable?", "body": "<pre><code>fn main() {\n    let val = 0;\n    unsafe { foo(&amp;val) }\n}\n\nextern \"C\" {\n    pub fn foo(val: *const u32);\n}\n</code></pre>\n\n<p>Implementation in C:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>void foo(unsigned* val) { *val=1; }\n</code></pre>\n\n<p>Of course, I should pass <code>val: *mut u32</code>, but what happens in the case that I pass an immutable reference? What compiler rules apply? Does <code>val</code> remain unchanged even though I'm passing a pointer to the local variable?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1512324390, "last_edit_date": 1512324390, "creation_date": 1512312408, "answer_id": 47619518, "question_id": 47619358, "link": "https://stackoverflow.com/questions/47619358/writing-a-function-to-take-iterables-of-reference-and-value-type/47619518#47619518", "title": "Writing a function to take iterables of reference and value type", "body": "<blockquote>\n  <p>I'd like to have a function that takes an iterable and returns its smallest and largest elements.</p>\n</blockquote>\n\n<p>Use <a href=\"https://docs.rs/itertools/0.7.4/itertools/trait.Itertools.html#method.minmax\" rel=\"nofollow noreferrer\"><code>Itertools::minmax</code></a>.</p>\n\n<blockquote>\n  <p>handle reference types and value types at the same time.</p>\n</blockquote>\n\n<p>You don't <strong>need</strong> to \u2014 references to numbers can also be compared:</p>\n\n<pre><code>fn foo(a: &amp;i32, b: &amp;i32) -&gt; bool {\n    a &lt; b\n}\n</code></pre>\n\n<p>In your case, remember that a value and a reference to that value are <strong>different types</strong>. That means you can accept an iterator of any type so long as the yielded values are comparable, and this includes both references and values, as requested:</p>\n\n<pre><code>fn min_max&lt;I&gt;(mut iter: I) -&gt; Option&lt;(I::Item, I::Item)&gt;\nwhere\n    I: Iterator,\n    I::Item: Clone + PartialOrd,\n{\n    let mut min = match iter.next() {\n        Some(x) =&gt; x,\n        // The collection is empty\n        None =&gt; return None,\n    };\n    let mut max = min.clone();\n\n    for el in iter {\n        if el &lt; min {\n            min = el;\n        } else if el &gt;= max {\n            max = el;\n        }\n    }\n\n    Some((min, max))\n}\n</code></pre>\n\n<p>I chose to add the <code>Clone</code> bound although to be more true to your original I could have used the <code>Copy</code> bound. Itertools returns an enum to avoid placing any restrictions on being able to duplicate the value.</p>\n\n<p>This works with all three of your examples:</p>\n\n<pre><code>fn main() {\n    let nums: [u32; 6] = [4, 3, 9, 10, 4, 3];\n    if let Some((min, max)) = min_max(nums.iter()) {\n        println!(\"{} {}\", min, max);\n    }\n\n    let doubled = nums.iter().map(|x| 2 * x);\n    if let Some((min, max)) = min_max(doubled) {\n        println!(\"{} {}\", min, max);\n    }\n\n    let s = \"4 3 9 10 4 3\";\n    let parsed = s.split(\" \").map(|x| x.parse::&lt;u32&gt;().unwrap());\n\n    if let Some((min, max)) = min_max(parsed) {\n        println!(\"{} {}\", min, max);\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>3 10\n6 20\n3 10\n</code></pre>\n\n<blockquote>\n  <p>my array is of <code>u32</code>, not <code>&amp;u32</code>, whereas my function requires <code>Iterator::Item</code> to be of type <code>&amp;'a T</code>. But then I don't get why it errors only on the second sample (using <code>.iter().map()</code>) and not on the first (just <code>.iter()</code>).</p>\n</blockquote>\n\n<p>Because <a href=\"https://stackoverflow.com/questions/30467085/how-to-iterate-over-an-array\">iterating over an array returns references</a>. By using <code>map</code>, you are changing the type of the iterator's item from <code>&amp;i32</code> to <code>i32</code>. You could have also <a href=\"https://stackoverflow.com/q/40613725/155423\">chosen to adapt the first call to return values</a>.</p>\n"}, {"comments": [{"owner": {"reputation": 8861, "user_id": 298656, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/722360c2469d7dec462ada999a2f80a7?s=128&d=identicon&r=PG", "display_name": "jilles", "link": "https://stackoverflow.com/users/298656/jilles"}, "edited": false, "score": 1, "creation_date": 1512339968, "post_id": 47620908, "comment_id": 82205850, "body": "This will work but it unnecessarily allocates a vector with the doubled elements."}, {"owner": {"reputation": 111, "user_id": 1993172, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0404515ceda536f6e65553060988a9e7?s=128&d=identicon&r=PG", "display_name": "freecoder", "link": "https://stackoverflow.com/users/1993172/freecoder"}, "reply_to_user": {"reputation": 8861, "user_id": 298656, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/722360c2469d7dec462ada999a2f80a7?s=128&d=identicon&r=PG", "display_name": "jilles", "link": "https://stackoverflow.com/users/298656/jilles"}, "edited": false, "score": 0, "creation_date": 1512470823, "post_id": 47620908, "comment_id": 82261513, "body": "@jilles Your function <code>min_max</code> returns references: <code>Option&lt;(&amp;&#39;a T, &amp;&#39;a T)&gt;</code>. Where in the case of <code>doubled</code> map adaptor you will store the min and max <b>values</b>?"}], "tags": [], "owner": {"reputation": 111, "user_id": 1993172, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0404515ceda536f6e65553060988a9e7?s=128&d=identicon&r=PG", "display_name": "freecoder", "link": "https://stackoverflow.com/users/1993172/freecoder"}, "is_accepted": false, "score": 0, "last_activity_date": 1512320724, "creation_date": 1512320724, "answer_id": 47620908, "question_id": 47619358, "link": "https://stackoverflow.com/questions/47619358/writing-a-function-to-take-iterables-of-reference-and-value-type/47620908#47620908", "title": "Writing a function to take iterables of reference and value type", "body": "<p>You have a type mismatch problem because the <code>.iter()</code> call produces a \"slice\" iterator (<code>Iterator</code> with <code>Item = &amp;T</code>), but the <code>.map(|x| 2 * x)</code> is a iterator adaptor, the call of which produces a new \"value\" iterator (<code>Iterator</code> with <code>Item = T</code>). These values must necessarily be stored in memory before we can get them \"slice\", because we can only get a reference to the value that is already stored somewhere in the memory. Therefore, we need to collect the result of the <code>map</code> function before we can get an iterator with references to the values it returns:</p>\n\n<pre class=\"lang-rs prettyprint-override\"><code>let doubled: Vec&lt;_&gt; = nums.iter().map(|x| 2 * x).collect();\n\nif let Some((min, max)) = min_max(doubled.iter()) {\n    println!(\"{} {}\", min, max);\n}\n</code></pre>\n\n<p>For more details, see chapter <a href=\"https://doc.rust-lang.org/book/second-edition/ch13-02-iterators.html\" rel=\"nofollow noreferrer\">13.2 Iterators</a> of The Rust Programming Language book.</p>\n"}], "owner": {"reputation": 8754, "user_id": 596068, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6d2de89487f78c4d7ad1f67db0930cde?s=128&d=identicon&r=PG", "display_name": "Alex", "link": "https://stackoverflow.com/users/596068/alex"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 190, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1512324390, "creation_date": 1512311261, "last_edit_date": 1512311891, "question_id": 47619358, "link": "https://stackoverflow.com/questions/47619358/writing-a-function-to-take-iterables-of-reference-and-value-type", "title": "Writing a function to take iterables of reference and value type", "body": "<p>I'd like to have a function that takes an iterable and returns its smallest and largest elements. This is part of an exercise in learning Rust, but I'm struggling in being able to handle reference types and value types at the same time.</p>\n\n<p>This is what I have:</p>\n\n<pre><code>fn min_max&lt;'a, I, T&gt;(mut iter: I) -&gt; Option&lt;(&amp;'a T, &amp;'a T)&gt;\nwhere\n    I: Iterator&lt;Item = &amp;'a T&gt;,\n    T: PartialOrd,\n{\n    let mut min = match iter.next() {\n        Some(x) =&gt; x,\n        // The collection is empty\n        None =&gt; return None,\n    };\n    let mut max = min;\n\n    for el in iter {\n        if el &lt; min {\n            min = el;\n        }\n        if el &gt;= max {\n            max = el;\n        }\n    }\n\n    Some((min, max))\n}\n</code></pre>\n\n<p>Then, I give this an iterator over some integers.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let nums: [u32; 6] = [4, 3, 9, 10, 4, 3];\nif let Some((min, max)) = min_max(nums.iter()) {\n    println!(\"{} {}\", min, max);\n}\n</code></pre>\n\n<p>This works, and prints <code>3 10</code>. But then I want to do some operations on the numbers before I compute the minimum and maximum, like a <code>map</code> and/or a <code>filter</code>.</p>\n\n<pre><code>let doubled = nums.iter().map(|x| 2 * x);\nif let Some((min, max)) = min_max(doubled) {\n    println!(\"{} {}\", min, max);\n}\n</code></pre>\n\n<p>This gives a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;[closure@src/main.rs:31:35: 31:44] as std::ops::FnOnce&lt;(&amp;u32,)&gt;&gt;::Output == &amp;_`\n  --&gt; src/main.rs:32:31\n   |\n32 |     if let Some((min, max)) = min_max(doubled) {\n   |                               ^^^^^^^ expected u32, found reference\n   |\n   = note: expected type `u32`\n              found type `&amp;_`\n   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Map&lt;std::slice::Iter&lt;'_, u32&gt;, [closure@src/main.rs:31:35: 31:44]&gt;`\n   = note: required by `min_max`\n</code></pre>\n\n<p>This confused me, because if <code>nums.iter()</code> works as an argument, why shouldn't <code>nums.iter().map(...)</code>?</p>\n\n<p>I understand the error message in principle: my array is of <code>u32</code>, not <code>&amp;u32</code>, whereas my function requires <code>Iterator::Item</code> to be of type <code>&amp;'a T</code>. But then I don't get why it errors only on the second sample (using <code>.iter().map()</code>) and not on the first (just <code>.iter()</code>).</p>\n\n<p>I've made a <a href=\"https://play.rust-lang.org/?gist=ceb5a58400b03de9d6d480cb735090cd&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a> with this example and a commented out example where I construct an iterable of integers from a string. This fails in exactly the same way as the second example above (and is closer to my actual use case).</p>\n\n<pre><code>let s = \"4 3 9 10 4 3\";\nlet parsed = s.split(\" \").map(|x| x.parse::&lt;u32&gt;().unwrap());\n\nif let Some((min, max)) = min_max(parsed) {\n    println!(\"{} {}\", min, max);\n}\n</code></pre>\n"}, {"tags": ["reference", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "edited": false, "score": 0, "creation_date": 1512347880, "post_id": 47619305, "comment_id": 82207747, "body": "why would the example from Programming Rust is not the same? I don&#39;t quite get it. I thought it can also be written as <code>(&amp;mut q).push(&#39;D&#39;)</code> and <code>(&amp;q).pop</code>, which does borrow <code>q</code> as mutable reference and then immutable reference."}, {"owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "edited": false, "score": 0, "creation_date": 1512351383, "post_id": 47619305, "comment_id": 82208539, "body": "ok, I think I get it now. stackoverflow.com/q/36565833/155423 this answers why."}, {"owner": {"reputation": 379, "user_id": 818006, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Vt77B.jpg?s=128&g=1", "display_name": "Boss Man", "link": "https://stackoverflow.com/users/818006/boss-man"}, "edited": false, "score": 0, "creation_date": 1554910769, "post_id": 47619305, "comment_id": 97926251, "body": "@Shepmaster in your example instead of last() returning a reference...what if it moved out the value? Then there would be no reference inside the vec and the immutable borrow will end right there after the statement? (this is just hypothetical scenario. If it returns an owned value..last() would be &amp; and not &amp;mut)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 379, "user_id": 818006, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Vt77B.jpg?s=128&g=1", "display_name": "Boss Man", "link": "https://stackoverflow.com/users/818006/boss-man"}, "edited": false, "score": 1, "creation_date": 1554923078, "post_id": 47619305, "comment_id": 97932443, "body": "@SujitJoshi it&#39;s ambiguous what you mean, but if it were either <code>fn last(self) -&gt; Option&lt;T&gt;</code> or <code>fn last(&amp;mut self) -&gt; Option&lt;T&gt;</code> (a.k.a. <code>pop</code>), then yes, it would be fine because the returned value would not be invalidated by further mutating the vector."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 72, "last_activity_date": 1546120126, "last_edit_date": 1546120126, "creation_date": 1512310898, "answer_id": 47619305, "question_id": 47618823, "link": "https://stackoverflow.com/questions/47618823/cannot-borrow-as-mutable-because-it-is-also-borrowed-as-immutable/47619305#47619305", "title": "Cannot borrow as mutable because it is also borrowed as immutable", "body": "<p>A <a href=\"/help/mcve\">MCVE</a> of your problem can be reduced to this:</p>\n\n<pre><code>fn main() {\n    let mut items = vec![1];\n    let item = items.last();\n    items.push(2);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `items` as mutable because it is also borrowed as immutable\n --&gt; src/main.rs:4:5\n  |\n3 |     let item = items.last();\n  |                ----- immutable borrow occurs here\n4 |     items.push(2);\n  |     ^^^^^ mutable borrow occurs here\n5 | }\n  | - immutable borrow ends here\n</code></pre>\n\n<p>You are encountering <em>the exact problem</em> that Rust was designed to prevent. You have a reference pointing into the vector and are attempting to insert into the vector. Doing so might require that the memory of the vector be reallocated, invalidating any existing references. If that happened and you used the value in <code>item</code>, you'd be accessing uninitialized memory, potentially causing a crash.</p>\n\n<p>In this <em>particular</em> case, you aren't actually using <code>item</code> (or <code>source</code>, in the original) so you could just... not call that line. I assume you did that for some reason, so you could wrap the references in a block so that they go away before you try to mutate the value again: </p>\n\n<pre><code>fn main() {\n    let mut items = vec![1];\n    {\n        let item = items.last();\n    }\n    items.push(2);\n}\n</code></pre>\n\n<p>This trick is no longer needed in Rust 2018 because <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a> have been implemented, but the underlying restriction still remain \u2014 you cannot have a mutable reference while there are other references to the same thing. This is one of the <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch04-02-references-and-borrowing.html#the-rules-of-references\" rel=\"noreferrer\">rules of references</a> covered in <em>The Rust Programming Language</em>. A modified example that still does not work with NLL:</p>\n\n<pre><code>let mut items = vec![1];\nlet item = items.last();\nitems.push(2);\nprintln!(\"{:?}\", item);\n</code></pre>\n\n<p>In other cases, you can copy or clone the value in the vector. The item will no longer be a reference and you can modify the vector as you see fit:</p>\n\n<pre><code>fn main() {\n    let mut items = vec![1];\n    let item = items.last().cloned();\n    items.push(2);\n}\n</code></pre>\n\n<p>If your type isn't cloneable, you can transform it into a reference-counted value (such as <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noreferrer\"><code>Rc</code></a> or <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a>) which can then be cloned. You may or may not also need to use <a href=\"https://doc.rust-lang.org/std/cell/\" rel=\"noreferrer\">interior mutability</a>:</p>\n\n<pre><code>struct NonClone;\n\nuse std::rc::Rc;\n\nfn main() {\n    let mut items = vec![Rc::new(NonClone)];\n    let item = items.last().cloned();\n    items.push(Rc::new(NonClone));\n}\n</code></pre>\n\n<blockquote>\n  <p>this example from Programming Rust is quite similar</p>\n</blockquote>\n\n<p>No, it's not, seeing as how it doesn't use references at all.</p>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/33985018/155423\">Cannot borrow `*x` as mutable because it is also borrowed as immutable</a></li>\n<li><a href=\"https://stackoverflow.com/q/33359426/155423\">Pushing something into a vector depending on its last element</a></li>\n<li><a href=\"https://stackoverflow.com/q/40578224/155423\">Why doesn&#39;t the lifetime of a mutable borrow end when the function call is complete?</a></li>\n<li><a href=\"https://stackoverflow.com/q/36565833/155423\">How should I restructure my graph code to avoid an &quot;Cannot borrow variable as mutable more than once at a time&quot; error?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33133329/155423\">Why do I get the error &quot;cannot borrow x as mutable more than once&quot;?</a></li>\n<li><a href=\"https://stackoverflow.com/q/24618233/155423\">Why does Rust want to borrow a variable as mutable more than once at a time?</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 41, "user_id": 9046702, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-6noehcnuHEo/AAAAAAAAAAI/AAAAAAAAAF8/IC-HKOXf0vs/photo.jpg?sz=128", "display_name": "Jan", "link": "https://stackoverflow.com/users/9046702/jan"}, "is_accepted": false, "score": 4, "last_activity_date": 1512311500, "last_edit_date": 1512311500, "creation_date": 1512311411, "answer_id": 47619377, "question_id": 47618823, "link": "https://stackoverflow.com/questions/47618823/cannot-borrow-as-mutable-because-it-is-also-borrowed-as-immutable/47619377#47619377", "title": "Cannot borrow as mutable because it is also borrowed as immutable", "body": "<p>Try to put your immutable borrow inside a block {...}.\nThis ends the borrow after the block.</p>\n\n<pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn some_test() {\n        let mut graph = mk_graph();\n\n        graph.add_node(\"source\".to_string());\n        graph.add_node(\"destination\".to_string());\n\n        {\n            let source = graph.get_node_by_value(\"source\").unwrap();\n            let dest = graph.get_node_by_value(\"destination\").unwrap();\n        }\n\n        graph.add_node(\"destination\".to_string());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 31923, "favorite_count": 12, "accepted_answer_id": 47619305, "answer_count": 2, "score": 37, "last_activity_date": 1546120126, "creation_date": 1512307468, "last_edit_date": 1520804091, "question_id": 47618823, "link": "https://stackoverflow.com/questions/47618823/cannot-borrow-as-mutable-because-it-is-also-borrowed-as-immutable", "title": "Cannot borrow as mutable because it is also borrowed as immutable", "body": "<p>I am learning Rust and I don't quite get why this is not working. </p>\n\n<pre><code>#[derive(Debug)]\nstruct Node {\n    value: String,\n}\n\n#[derive(Debug)]\npub struct Graph {\n    nodes: Vec&lt;Box&lt;Node&gt;&gt;,\n}\n\nfn mk_node(value: String) -&gt; Node {\n    Node { value }\n}\n\npub fn mk_graph() -&gt; Graph {\n    Graph { nodes: vec![] }\n}\n\nimpl Graph {\n    fn add_node(&amp;mut self, value: String) {\n        if let None = self.nodes.iter().position(|node| node.value == value) {\n            let node = Box::new(mk_node(value));\n            self.nodes.push(node);\n        };\n    }\n\n    fn get_node_by_value(&amp;self, value: &amp;str) -&gt; Option&lt;&amp;Node&gt; {\n        match self.nodes.iter().position(|node| node.value == *value) {\n            None =&gt; None,\n            Some(idx) =&gt; self.nodes.get(idx).map(|n| &amp;**n),\n        }\n    }\n}\n\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn some_test() {\n        let mut graph = mk_graph();\n\n        graph.add_node(\"source\".to_string());\n        graph.add_node(\"destination\".to_string());\n\n        let source = graph.get_node_by_value(\"source\").unwrap();\n        let dest = graph.get_node_by_value(\"destination\").unwrap();\n\n        graph.add_node(\"destination\".to_string());\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=6ddb1ff6464c5082a19b3f9e338667d3&amp;version=nightly\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>This has the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `graph` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:50:9\n   |\n47 |         let source = graph.get_node_by_value(\"source\").unwrap();\n   |                      ----- immutable borrow occurs here\n...\n50 |         graph.add_node(\"destination\".to_string());\n   |         ^^^^^ mutable borrow occurs here\n51 |     }\n   |     - immutable borrow ends here\n</code></pre>\n\n<p>This example from <em>Programming Rust</em> is quite similar to what I have but it works:</p>\n\n<pre><code>pub struct Queue {\n    older: Vec&lt;char&gt;,   // older elements, eldest last.\n    younger: Vec&lt;char&gt;, // younger elements, youngest last.\n}\n\nimpl Queue {\n    /// Push a character onto the back of a queue.\n    pub fn push(&amp;mut self, c: char) {\n        self.younger.push(c);\n    }\n\n    /// Pop a character off the front of a queue. Return `Some(c)` if there /// was a character to pop, or `None` if the queue was empty.\n    pub fn pop(&amp;mut self) -&gt; Option&lt;char&gt; {\n        if self.older.is_empty() {\n            if self.younger.is_empty() {\n                return None;\n            }\n\n            // Bring the elements in younger over to older, and put them in // the promised order.\n            use std::mem::swap;\n            swap(&amp;mut self.older, &amp;mut self.younger);\n            self.older.reverse();\n        }\n\n        // Now older is guaranteed to have something. Vec's pop method // already returns an Option, so we're set.\n        self.older.pop()\n    }\n\n    pub fn split(self) -&gt; (Vec&lt;char&gt;, Vec&lt;char&gt;) {\n        (self.older, self.younger)\n    }\n}\n\npub fn main() {\n    let mut q = Queue {\n        older: Vec::new(),\n        younger: Vec::new(),\n    };\n\n    q.push('P');\n    q.push('D');\n\n    assert_eq!(q.pop(), Some('P'));\n    q.push('X');\n\n    let (older, younger) = q.split(); // q is now uninitialized.\n    assert_eq!(older, vec!['D']);\n    assert_eq!(younger, vec!['X']);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 2, "creation_date": 1512304961, "post_id": 47618162, "comment_id": 82194989, "body": "If you are having trouble adopting the solution from the duplicate, I didn&#39;t mind doing it in <a href=\"https://play.rust-lang.org/?gist=106be1e3cd959f3c343a3ba7247ecfab&amp;version=stable\" rel=\"nofollow noreferrer\">the playground</a>."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512306433, "post_id": 47618162, "comment_id": 82195393, "body": "I think the case is the inverse (I iterate over mutable field - self.conns- , and make a call to a method that is immutable - get_port() - ) - but the issue is the same I guess?"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512306744, "post_id": 47618162, "comment_id": 82195454, "body": "Ah! I didn&#39;t notice you did it already! Thanks a lot! Pity I can&#39;t upvote your efforts... thanks."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512306933, "post_id": 47618162, "comment_id": 82195521, "body": "Yeah, I didn&#39;t think it was exactly a duplicate case either, but I am pretty lax about them; no worries, I&#39;m glad I could help :)."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512375350, "post_id": 47618162, "comment_id": 82215622, "body": "In addition (I forgot to mention it yesterday), you could consider if wrapping that <code>Vec&lt;Conn&gt;</code> in an <code>Option</code> is necessary; in this case an empty vector could represent the same case as <code>None</code>."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512379347, "post_id": 47618162, "comment_id": 82217778, "body": "Yeh, I was looking at that and that&#39;s how I would have written it - but it all comes from a serde_derived deserialization of toml - and it has an optional (array) of tables....so I think it&#39;s required to let it deserialize directly."}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 161, "favorite_count": 0, "closed_date": 1512304823, "answer_count": 0, "score": 0, "last_activity_date": 1512302624, "creation_date": 1512302624, "question_id": 47618162, "link": "https://stackoverflow.com/questions/47618162/how-to-call-a-member-method-while-inside-block-with-mutable-reference-to-self", "closed_reason": "Duplicate", "title": "How to call a member method while inside block with mutable reference to self", "body": "<p><code>Flow</code> has a member method (<code>change_conn_routes()</code>) that modifies its contents, so it needs a <code>&amp;mut self</code> reference. </p>\n\n<p>To function, this method needs to call another member method (<code>get_port()</code>) that doesn't modify anything, so has a <code>&amp;self</code> reference. This won't compile.</p>\n\n<pre><code>struct Conn {\n    name: String,\n    route: String,\n}\n\nstruct Flow {\n    conns: Option&lt;Vec&lt;Conn&gt;&gt;,\n    port: String\n}\n\nimpl Flow {\n    // This method does not modify anything so if possible I'd like it to not\n    // need a mutable reference to self.\n    fn get_port(&amp;self, _name: &amp;str) -&gt; String {\n        // In real program the value of name is actually used - simplified here\n        format!(\"{}\", self.port)\n    }\n\n    // This method changes the contents of self.conns so reference to self must\n    // be mutable. To do so, it needs information from another member function of self\n    fn change_conn_routes(&amp;mut self) {\n        if let Some(ref mut conns) = self.conns {\n            for conn in conns {\n                conn.route = format!(\"{}\", self.get_port(&amp;conn.name));\n            }\n        }\n    }\n}\n\nfn main() {\n    let conns = Some(vec!(Conn{ route: \"abc\".to_string(), name: \"conn1\".to_string() }));\n    let port = \"123\".to_string();\n    let mut flow = Flow{ conns, port };\n\n    flow.change_conn_routes();\n\n    println!(\"{}\", flow.conns.unwrap()[0].route);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=dd8adc091aad2b8ae557818e26a33160&amp;version=nightly\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Leads to this compiler error:</p>\n\n<pre><code>   Compiling playground v0.0.1 (file:///playground)\nerror[E0502]: cannot borrow `*self` as immutable because `self.conns.0` is also borrowed as mutable\n  --&gt; src/main.rs:24:44\n   |\n22 |         if let Some(ref mut conns) = self.conns {\n   |                     ------------- mutable borrow occurs here\n23 |             for conn in conns {\n24 |                 conn.route = format!(\"{}\", self.get_port(&amp;conn.name));\n   |                                            ^^^^ immutable borrow occurs here\n25 |             }\n26 |         }\n   |         - mutable borrow ends here\n</code></pre>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1512305003, "post_id": 47615264, "comment_id": 82194998, "body": "Rust is very keen about <i>DAG</i> relationships between objects, whereas graphs can naturally involve circles. Have you tried looking for &quot;rust graph site:stackoverflow.com&quot; on Google? The first answer is <a href=\"https://stackoverflow.com/questions/34747464/implement-graph-like-datastructure-in-rust\" title=\"implement graph like datastructure in rust\">stackoverflow.com/questions/34747464/&hellip;</a> which seems very relevant."}, {"owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1512306283, "post_id": 47615264, "comment_id": 82195345, "body": "I did, I changed how I implement my graph structure so I don&#39;t actually have the issue. I guess that is not doable. The goal is not to build a complete graph library, it is more on learning Rust."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1512307368, "post_id": 47615264, "comment_id": 82195656, "body": "Actually, you still have the issue: a <code>Node</code> referencing any other <code>Node</code> means that you have cycles, and therefore that you don&#39;t have a <i>DAG</i>. How can I put it... ownership and references somehow mix up in Rust, you can&#39;t consider one without the other because a reference has an associated lifetime tying it to the owner of the object it references. It&#39;s not sufficient, therefore, to have a DAG of owners, you must have a DAG of owners &amp; references. Or cheat. The <code>TypedArena</code> I mentioned is such a way to cheat: within the lifetime of the arena, cycles are allowed."}, {"owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1512308156, "post_id": 47615264, "comment_id": 82195866, "body": "I&#39;m not sure if I get it, probably just some of it. I found few links regarding the graphs and arena allocation and will give it a read. I appreciate your help, thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512313370, "post_id": 47615264, "comment_id": 82197289, "body": "See also: <a href=\"https://stackoverflow.com/q/36565833/155423\">stackoverflow.com/q/36565833/155423</a>."}], "owner": {"reputation": 1546, "user_id": 588611, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/f1ef7d612f498f57d5c1f6b82cf83d12?s=128&d=identicon&r=PG", "display_name": "Shulhi Sapli", "link": "https://stackoverflow.com/users/588611/shulhi-sapli"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 202, "favorite_count": 0, "closed_date": 1512312884, "answer_count": 0, "score": 0, "last_activity_date": 1512312911, "creation_date": 1512275516, "last_edit_date": 1512312826, "question_id": 47615264, "link": "https://stackoverflow.com/questions/47615264/add-reference-to-list-of-reference", "closed_reason": "Duplicate", "title": "Add reference to list of reference", "body": "<p>I'm implementing a basic data structure. I think I understand why the following code doesn't work: I can't mutably borrow and try to access (read) the value at the same time. However, I am stuck on how to implement <code>add_ege</code>.</p>\n\n<p>The whole idea is to have <code>Graph</code> hold a list of <code>Node</code>s in the heap. The <code>Node</code> itself keeps track of adjacent nodes (edges). I don't want <code>Node</code> to hold copies of <code>Node</code>, I want it to have references to any of the <code>Node</code>s held in <code>Graph</code>.</p>\n\n<pre><code>struct Node&lt;'a&gt; {\n    value: String,\n    adj_nodes: Vec&lt;&amp;'a Node&lt;'a&gt;&gt;, // refer to Graph.nodes\n}\n\npub struct Graph&lt;'a&gt; {\n    nodes: Vec&lt;Box&lt;Node&lt;'a&gt;&gt;&gt;,\n}\n\nfn mk_node&lt;'a&gt;(value: String) -&gt; Node&lt;'a&gt; {\n    Node {\n        value,\n        adj_nodes: vec![],\n    }\n}\n\npub fn mk_graph&lt;'a&gt;() -&gt; Graph&lt;'a&gt; {\n    let nodes = vec![];\n    Graph { nodes }\n}\n\nimpl&lt;'a&gt; Graph&lt;'a&gt; {\n    fn add_node(&amp;mut self, val: String) {\n        let node = Box::new(mk_node(val));\n        self.nodes.push(node);\n    }\n\n    fn add_edge(&amp;mut self, from_node: &amp;'a mut Node&lt;'a&gt;, to_node: &amp;'a mut Node&lt;'a&gt;) {\n        from_node.adj_nodes.push(to_node);\n        // won't work because I already have from_node as mutable borrow\n        to_node.adj_nodes.push(from_node);\n    }\n}\n</code></pre>\n\n<p>Is there a way to do this?</p>\n"}, {"tags": ["rust", "serde-json"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1512245212, "creation_date": 1512245212, "answer_id": 47612051, "question_id": 47611825, "link": "https://stackoverflow.com/questions/47611825/mismatched-types-when-trying-to-parse-json-from-curl-with-serde-json/47612051#47612051", "title": "Mismatched types when trying to parse JSON from curl with serde_json", "body": "<blockquote>\n  <p>I already got the information via curl:</p>\n</blockquote>\n\n<p>No, you didn't. You downloaded it but then wrote it to standard out:</p>\n\n<pre><code>easy.write_function(|data| Ok(stdout().write(data).unwrap()))\n</code></pre>\n\n<p>What you have called <code>json</code> is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\" rel=\"nofollow noreferrer\">HTTP response code</a>. This is a value of type <code>u32</code>:</p>\n\n<pre><code>let mut json = easy.response_code().unwrap();\n</code></pre>\n\n<p>Getting the data into a vector is <a href=\"https://docs.rs/curl/0.4.8/curl/easy/struct.Easy.html\" rel=\"nofollow noreferrer\">described in the curl documentation</a>. The compiler <em>told you</em> you had incorrect types; you need to read and understand it, then figure out why the types are wrong:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   = note: expected type `serde_json::Value`\n              found type `u32`\n</code></pre>\n\n<p>Additionally, you can't use <code>from_value</code> because you don't have a <code>serde_json::Value</code> to read from.</p>\n\n<p>Your second error is because you've declared that your function returns a <code>Result</code>, but you don't return such at the end of your function. You just... stop, which returns a <code>()</code></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   = note: expected type `std::result::Result&lt;(), serde_json::Error&gt;`\n              found type `()`\n</code></pre>\n\n<hr>\n\n<pre><code>extern crate curl;\nextern crate serde;\n#[macro_use]\nextern crate serde_derive;\nextern crate serde_json;\n\nuse curl::easy::Easy;\nuse serde_json::Error;\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Freifunk {\n    timestamp: u32,\n    version: i8,\n    nodes: u32,\n}\n\nfn json_to_rust() -&gt; Result&lt;(), Error&gt; {\n    let mut json = Vec::new();\n\n    let mut easy = Easy::new();\n    easy.url(\"https://map.freifunk-rhein-neckar.de/data/nodes.json\")\n        .unwrap();\n    {\n        let mut transfer = easy.transfer();\n        transfer\n            .write_function(|data| {\n                json.extend_from_slice(data);\n                Ok(data.len())\n            })\n            .unwrap();\n        transfer.perform().unwrap();\n    }\n\n    assert_eq!(200, easy.response_code().unwrap());\n\n    let freifunk: Freifunk = serde_json::from_slice(&amp;json)?;\n\n    println!(\"{:?}\", freifunk);\n\n    Ok(())\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 19, "user_id": 7843843, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/c88bec6e82ec2a35b1de92c973dd08b7?s=128&d=identicon&r=PG&f=1", "display_name": "n1ghty", "link": "https://stackoverflow.com/users/7843843/n1ghty"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 650, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1512245212, "creation_date": 1512243778, "last_edit_date": 1512244321, "question_id": 47611825, "link": "https://stackoverflow.com/questions/47611825/mismatched-types-when-trying-to-parse-json-from-curl-with-serde-json", "title": "Mismatched types when trying to parse JSON from curl with serde_json", "body": "<p>I've got JSON output from an API for open WIFI which I want to put into a database. The data is in <a href=\"https://map.freifunk-rhein-neckar.de/data/nodes.json\" rel=\"nofollow noreferrer\">this form</a>.</p>\n\n<p>I already got the information via <code>curl</code>:</p>\n\n<pre><code>let mut easy = Easy::new();\neasy.url(\"https://map.freifunk-rhein-neckar.de/data/nodes.json\")\n    .unwrap();\neasy.write_function(|data| Ok(stdout().write(data).unwrap()))\n    .unwrap();\neasy.perform().unwrap();\n\nlet mut json = easy.response_code().unwrap();\n</code></pre>\n\n<p>I tried to use serde_json:</p>\n\n<pre><code>extern crate curl;\nextern crate serde;\nextern crate serde_json;\n\nuse std::io::{stdout, Write};\nuse curl::easy::Easy;\n#[macro_use]\nextern crate serde_derive;\n\nuse serde_json::Error;\n\n#[derive(Serialize, Deserialize)]\nstruct Freifunk {\n    timestamp: u32,\n    version: i8,\n    nodes: u32,\n}\n\nfn json_to_rust() -&gt; Result&lt;(), Error&gt; {\n    //Json von Homepage \"Auslesen/Downloaden\"\n    let mut easy = Easy::new();\n    easy.url(\"https://map.freifunk-rhein-neckar.de/data/nodes.json\")\n        .unwrap();\n    easy.write_function(|data| Ok(stdout().write(data).unwrap()))\n        .unwrap();\n    easy.perform().unwrap();\n\n    let mut json = easy.response_code().unwrap();\n\n    let to_string: Freifunk = serde_json::from_value(json)?;\n}\n\nfn main() {}\n</code></pre>\n\n<p>I always get an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:29:54\n   |\n29 |     let to_string: Freifunk = serde_json::from_value(json)?;\n   |                                                      ^^^^ expected enum `serde_json::Value`, found u32\n   |\n   = note: expected type `serde_json::Value`\n              found type `u32`\n\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:18:40\n   |\n18 |   fn json_to_rust() -&gt; Result&lt;(), Error&gt; {\n   |  ________________________________________^\n19 | |     //Json von Homepage \"Auslesen/Downloaden\"\n20 | |     let mut easy = Easy::new();\n21 | |     easy.url(\"https://map.freifunk-rhein-neckar.de/data/nodes.json\")\n...  |\n29 | |     let to_string: Freifunk = serde_json::from_value(json)?;\n30 | | }\n   | |_^ expected enum `std::result::Result`, found ()\n   |\n   = note: expected type `std::result::Result&lt;(), serde_json::Error&gt;`\n              found type `()`\n</code></pre>\n\n<p>Could you give me an example of how to process the data to get it into a database?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1512244015, "creation_date": 1512244015, "answer_id": 47611858, "question_id": 47611676, "link": "https://stackoverflow.com/questions/47611676/what-is-the-type-trait-produced-by-calling-the-chars-method-on-a-string-litera/47611858#47611858", "title": "What is the type/trait produced by calling the `chars` method on a string literal?", "body": "<blockquote>\n  <p>What is the type/trait produced by calling the <code>chars</code> method on a string literal?</p>\n</blockquote>\n\n<p>The <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.chars\" rel=\"nofollow noreferrer\">documentation for <code>str::chars</code></a> tells you exactly what type it is:</p>\n\n<pre><code>fn chars(&amp;self) -&gt; Chars\n</code></pre>\n\n<blockquote>\n  <p>It produces a type mismatch error</p>\n</blockquote>\n\n<p>Yes, because you haven't specified what the concrete type of <code>T</code> should be. You've introduced a completely separate generic type <code>U</code> and have no arguments or return types that reference <code>T</code>. The compiler has zero context to use to infer what <code>T</code> is.</p>\n\n<blockquote>\n  <p>How can I correctly write this code?</p>\n</blockquote>\n\n<p>Remove the useless extra type parameter:</p>\n\n<pre><code>struct Collector&lt;T&gt;\nwhere\n    T: Iterator&lt;Item = char&gt;,\n{\n    current: u32,\n    right_neighbour: u32,\n    counter: usize,\n    iterator: T,\n}\n\nimpl&lt;T: Iterator&lt;Item = char&gt;&gt; Collector&lt;T&gt; {\n    fn new(iterator: T) -&gt; Collector&lt;T&gt; {\n        let mut collector = Collector {\n            current: 0,\n            right_neighbour: 0,\n            counter: 0,\n            iterator: iterator,\n        };\n\n        collector.collect();\n\n        collector\n    }\n\n    fn collect(&amp;self) {\n        unimplemented!()\n    }\n\n    fn next(&amp;self) -&gt; u32 {\n        unimplemented!()\n    }\n}\n\nfn main() {\n    let numstr = \"1111\";\n\n    let mut collector = Collector::new(numstr.chars().cycle().peekable());\n}\n</code></pre>\n\n<p>I've removed the implementations of <code>next</code> and <code>collect</code> because they have other, unrelated errors that I don't care to fix. I also renamed <code>initialize</code> to <code>new</code>, as <code>new</code> is the standard constructor name in the absence of multiple constructors.</p>\n\n<p>Of note is that the usage of <code>peekable</code> here is completely useless. The generic type <code>T</code> doesn't know that it's possible to call <code>peek</code> because there's no appropriate trait bound for such.</p>\n\n<blockquote>\n  <p>because it doesn't have an explicit lifetime</p>\n</blockquote>\n\n<p>You don't have to care about the lifetime, that will be covered by the generic. If your type needed to know that it was peekable, just put that in your struct:</p>\n\n<pre><code>struct Collector&lt;T&gt;\nwhere\n    T: Iterator&lt;Item = char&gt;,\n{\n    // ...\n    iterator: std::iter::Peekable&lt;T&gt;,\n}\n\nimpl&lt;T: Iterator&lt;Item = char&gt;&gt; Collector&lt;T&gt; {\n    fn new(iterator: T) -&gt; Collector&lt;T&gt; {\n        let mut collector = Collector {\n            // ...\n            iterator: iterator.peekable(),\n        };\n\n        // ...\n    }\n\n    // ...\n}\n\nfn main() {\n    // ...\n    let mut collector = Collector::new(numstr.chars().cycle());\n}\n</code></pre>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 98, "favorite_count": 0, "accepted_answer_id": 47611858, "answer_count": 1, "score": 0, "last_activity_date": 1512244015, "creation_date": 1512242878, "last_edit_date": 1512243186, "question_id": 47611676, "link": "https://stackoverflow.com/questions/47611676/what-is-the-type-trait-produced-by-calling-the-chars-method-on-a-string-litera", "title": "What is the type/trait produced by calling the `chars` method on a string literal?", "body": "<p>Consider this piece of code:</p>\n\n<pre><code>struct Collector&lt;T&gt;\nwhere\n    T: Iterator&lt;Item = char&gt;,\n{\n    current: u32,\n    right_neighbour: u32,\n    counter: usize,\n    iterator: T,\n}\n\nimpl&lt;T: Iterator&lt;Item = char&gt;&gt; Collector&lt;T&gt; {\n    fn next(&amp;self) -&gt; u32 {\n        self.iterator\n            .next()\n            .expect(\"failed to get next digit!\")\n            .to_digit(10)\n            .expect(\"failed to prase char as digit!\")\n    }\n\n    fn collect(&amp;self) {\n        self.current = self.right_neighbour;\n        self.right_neighbour = self.next();\n        self.counter = self.counter + 1;\n    }\n\n    fn initialize&lt;U&gt;(iterator: U) -&gt; Collector&lt;U&gt;\n    where\n        U: Iterator&lt;Item = char&gt;,\n    {\n        let mut collector = Collector {\n            current: 0,\n            right_neighbour: 0,\n            counter: 0,\n            iterator: iterator,\n        };\n\n        collector.collect();\n\n        collector\n    }\n}\n\nfn main() {\n    let numstr = \"1111\";\n\n    let mut collector = Collector::initialize(numstr.chars().cycle().peekable());\n}\n</code></pre>\n\n<p>It produces a type mismatch error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0284]: type annotations required: cannot resolve `&lt;_ as std::iter::Iterator&gt;::Item == char`\n  --&gt; src/main.rs:46:25\n   |\n46 |     let mut collector = Collector::initialize(numstr.chars().cycle().peekable());\n   |                         ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: required by `&lt;Collector&lt;T&gt;&gt;::initialize`\n</code></pre>\n\n<p>What is the type of <code>numstr.chars().cycle().peekable()</code>? The compiler tells me that its full type is:</p>\n\n<pre><code>std::iter::Peekable&lt;std::iter::Cycle&lt;std::str::Chars&lt;'_&gt;&gt;&gt;\n</code></pre>\n\n<p>I know that I can't use that type in the definition of my structs/functions, because <a href=\"https://stackoverflow.com/questions/47605913/is-passing-an-iterator-to-a-function-as-an-argument-an-anti-pattern\">it doesn't have an explicit lifetime...</a></p>\n\n<p>How can I correctly write this code?</p>\n"}, {"tags": ["io", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512229193, "post_id": 47609526, "comment_id": 82177406, "body": "This question came from the Rust IRC user &quot;njoodle&quot; in #rust on irc.mozilla.org, but it appears that the IRC logging wasn&#39;t working during that time so I can&#39;t provide a more complete authorship link."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1512229086, "creation_date": 1512229086, "answer_id": 47609527, "question_id": 47609526, "link": "https://stackoverflow.com/questions/47609526/how-do-i-implement-stdioread-for-an-iteratoritem-string/47609527#47609527", "title": "How do I implement std::io::Read for an Iterator&lt;Item = String&gt;?", "body": "<p>The simplest solution would be to read all the input at once into a giant buffer and then read from that:</p>\n\n<pre><code>let iterable = [\"h\", \"e\", \"l\", \"l\", \"o\"];\nlet combined_string: String = iterable.iter().cloned().collect(); \nlet bytes = combined_string.into_bytes();\n\nlet mut buf = vec![];\nlet bytes = (&amp;bytes[..]).read_to_end(&amp;mut buf).unwrap();\nassert_eq!(&amp;buf[..bytes], b\"hello\");\n</code></pre>\n\n<p>If you really needed to avoid loading it all in memory, it's possible to implement a wrapper but it has some fiddly bits because the number of bytes available and the number of bytes to read won't always match up. You have to hold onto some temporary values to keep track of your position and sometimes get more data to continue reading from:</p>\n\n<pre><code>use std::io::{self, Read};\nuse std::cmp;\n\n/// Eagerly consumes elements from the underlying iterator instead of\n/// returning partial reads.\nstruct IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    iter: I,\n    value: Option&lt;I::Item&gt;,\n    offset: usize,\n}\n\nimpl&lt;I&gt; IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    pub fn new&lt;T&gt;(iter: T) -&gt; Self\n    where\n        T: IntoIterator&lt;IntoIter = I, Item = I::Item&gt;,\n    {\n        IteratorAsRead {\n            iter: iter.into_iter(),\n            value: None,\n            offset: 0,\n        }\n    }\n}\n\nimpl&lt;I&gt; Read for IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n    I::Item: AsRef&lt;[u8]&gt;,\n{\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n        let mut copied = 0;\n        loop {\n            match self.value.take() {\n                None =&gt; {\n                    match self.iter.next() {\n                        None =&gt; {\n                            return Ok(copied);\n                        }\n                        Some(value) =&gt; {\n                            self.value = Some(value);\n                        }\n                    }\n                }\n                Some(original_value) =&gt; {\n                    let entire_value_len = {\n                        let entire_value = original_value.as_ref();\n\n                        // Skip over bytes we already copied\n                        let value = &amp;entire_value[self.offset..];\n                        let buf = &amp;mut buf[copied..];\n\n                        // Make the slices the same length\n                        let len_to_copy = cmp::min(value.len(), buf.len());\n                        let value = &amp;value[..len_to_copy];\n                        let buf = &amp;mut buf[..len_to_copy];\n\n                        // Copy\n                        buf.copy_from_slice(value);\n\n                        // Advance our values\n                        copied += len_to_copy;\n                        self.offset += len_to_copy;\n\n                        entire_value.len()\n                    };\n\n                    // If we completely used the value, reset our counters,\n                    // otherwise put it back for the next call.\n                    if self.offset == entire_value_len {\n                        self.offset = 0;\n                    } else {\n                        self.value = Some(original_value);\n                    }\n                }\n            }\n\n            // If we've filled the buffer, return it\n            if copied == buf.len() {\n                return Ok(copied);\n            }\n        }\n    }\n}\n\n#[test]\nfn small_pieces_are_combined() {\n    let iterable = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n    let mut reader = IteratorAsRead::new(&amp;iterable);\n\n    let mut buf = vec![];\n    let bytes = reader.read_to_end(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"hello\");\n}\n\n#[test]\nfn partial_reads() {\n    let iterable = [\"hello\"];\n    let mut reader = IteratorAsRead::new(&amp;iterable);\n\n    let mut buf = [0; 2];\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"he\");\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"ll\");\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"o\");\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "edited": false, "score": 0, "creation_date": 1512252560, "post_id": 47610775, "comment_id": 82184455, "body": "I posted an even simpler version of this using <code>std::io::Cursor</code> \u2013 see my answer."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1512237134, "creation_date": 1512237134, "answer_id": 47610775, "question_id": 47609526, "link": "https://stackoverflow.com/questions/47609526/how-do-i-implement-stdioread-for-an-iteratoritem-string/47610775#47610775", "title": "How do I implement std::io::Read for an Iterator&lt;Item = String&gt;?", "body": "<p>There is a simple implementation of <code>Read::read</code> if you allow it to return partial reads. Start with a similar structure to Shepmaster's.</p>\n\n<pre><code>use std::io::{self, Read};\n\nstruct IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    iter: I,\n    leftover: Option&lt;(I::Item, usize)&gt;,\n}\n\nimpl&lt;I&gt; IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    pub fn new&lt;T&gt;(iter: T) -&gt; Self\n    where\n        T: IntoIterator&lt;IntoIter = I, Item = I::Item&gt;,\n    {\n        IteratorAsRead {\n            iter: iter.into_iter(),\n            leftover: None,\n        }\n    }\n}\n</code></pre>\n\n<p>Then implement the function by first finding a nonempty string to read from, attempting to write it to the buffer, and finally storing any leftovers if need be.</p>\n\n<pre><code>impl&lt;I&gt; Read for IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n    I::Item: AsRef&lt;[u8]&gt;,\n{\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n        let (leftover, skip) = match self.leftover.take() {\n            Some(last) =&gt; last,\n            None =&gt; match self.iter.find(|next| !next.as_ref().is_empty()) {\n                Some(next) =&gt; (next, 0),\n                None =&gt; return Ok(0),\n            }\n        };\n\n        let read = (&amp;leftover.as_ref()[skip..]).read(buf)?;\n\n        if skip + read &lt; leftover.as_ref().len() {\n            self.leftover = Some((leftover, skip + read));\n        } else {\n            self.leftover = None;\n        }\n\n        return Ok(read);\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512259584, "post_id": 47613114, "comment_id": 82186244, "body": "There&#39;s an <code>impl&lt;T&gt; Read for Cursor&lt;T&gt; where T: AsRef&lt;[u8]&gt;</code>, so you don&#39;t even have to restrict the element type."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512307860, "post_id": 47613114, "comment_id": 82195778, "body": "@Veedrac You are right, I would not need that restriction.  I mostly introduced it to avoid having to wrap the <code>Cursor</code> in an <code>Option</code>, but even then it can be made more generic again."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512308593, "post_id": 47613114, "comment_id": 82195977, "body": "When using the default, the constructor should call <code>cursor.set_position(next.len())</code> to work with types where it is nonempty, like for statically sized arrays."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512309012, "post_id": 47613114, "comment_id": 82196102, "body": "@Veedrac Oh, I did not think of that possibility.  I don&#39;t think I can use <code>len()</code>, though, since there is no trait for it, so I&#39;d probably need to wrap the cursor in an <code>Option</code> again."}, {"owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512309092, "post_id": 47613114, "comment_id": 82196121, "body": "The slice has <code>len()</code>, so I could simply add <code>AsRef&lt;[u8]&gt;</code> to the constructor as well."}], "tags": [], "owner": {"reputation": 478030, "user_id": 279627, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/2dceea858ad8f1577bec6ddaa0485d15?s=128&d=identicon&r=PG", "display_name": "Sven Marnach", "link": "https://stackoverflow.com/users/279627/sven-marnach"}, "is_accepted": true, "score": 4, "last_activity_date": 1558316546, "last_edit_date": 1558316546, "creation_date": 1512252494, "answer_id": 47613114, "question_id": 47609526, "link": "https://stackoverflow.com/questions/47609526/how-do-i-implement-stdioread-for-an-iteratoritem-string/47613114#47613114", "title": "How do I implement std::io::Read for an Iterator&lt;Item = String&gt;?", "body": "<p>The standard library provides the type <a href=\"https://doc.rust-lang.org/std/io/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>std::io::Cursor</code></a> which wraps a buffer together with a position in the buffer.  This can be used to further simplify the code given in <a href=\"https://stackoverflow.com/a/47610775/279627\">Veedrac's answer</a>: </p>\n\n<pre><code>use std::io::{self, Cursor, Read};\n\nstruct IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    iter: I,\n    cursor: Option&lt;Cursor&lt;I::Item&gt;&gt;,\n}\n\nimpl&lt;I&gt; IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    pub fn new&lt;T&gt;(iter: T) -&gt; Self\n    where\n        T: IntoIterator&lt;IntoIter = I, Item = I::Item&gt;,\n    {\n        let mut iter = iter.into_iter();\n        let cursor = iter.next().map(Cursor::new);\n        IteratorAsRead { iter, cursor }\n    }\n}\n\nimpl&lt;I&gt; Read for IteratorAsRead&lt;I&gt;\nwhere\n    I: Iterator,\n    Cursor&lt;I::Item&gt;: Read,\n{\n    fn read(&amp;mut self, buf: &amp;mut [u8]) -&gt; io::Result&lt;usize&gt; {\n        while let Some(ref mut cursor) = self.cursor {\n            let read = cursor.read(buf)?;\n            if read &gt; 0 {\n                return Ok(read);\n            }\n            self.cursor = self.iter.next().map(Cursor::new);\n        }\n        Ok(0)\n    }\n}\n\n#[test]\nfn small_pieces_are_combined() {\n    let iterable = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n    let mut reader = IteratorAsRead::new(&amp;iterable);\n\n    let mut buf = vec![];\n    let bytes = reader.read_to_end(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"hello\");\n}\n\n#[test]\nfn partial_reads() {\n    let iterable = [\"hello\"];\n    let mut reader = IteratorAsRead::new(&amp;iterable);\n\n    let mut buf = [0; 2];\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"he\");\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"ll\");\n\n    let bytes = reader.read(&amp;mut buf).unwrap();\n    assert_eq!(&amp;buf[..bytes], b\"o\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8e3d082c3c496e681ae6ffc9aaa7142c\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 869, "favorite_count": 0, "accepted_answer_id": 47613114, "answer_count": 3, "score": 1, "last_activity_date": 1558316546, "creation_date": 1512229086, "last_edit_date": 1558316458, "question_id": 47609526, "link": "https://stackoverflow.com/questions/47609526/how-do-i-implement-stdioread-for-an-iteratoritem-string", "title": "How do I implement std::io::Read for an Iterator&lt;Item = String&gt;?", "body": "<p>More specifically, I'm taking standard in, filtering out certain rows with <code>.lines().filter_map()</code> and I want to use the result of that with a <code>csv::Reader</code>.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1512207179, "post_id": 47606362, "comment_id": 82171295, "body": "Won&#39;t this cause an issue if the enum is either generic or not directly <code>use</code>d by the current file?"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "reply_to_user": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1512207261, "post_id": 47606362, "comment_id": 82171322, "body": "You&#39;re right; I thought about it too and just edited my answer :)"}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1512207308, "post_id": 47606362, "comment_id": 82171332, "body": "Ah, and i suppose it&#39;s possible to construct generics support similarly."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "edited": false, "score": 0, "creation_date": 1512207974, "post_id": 47606362, "comment_id": 82171496, "body": "Hm... generics can but lifetimes cannot. Whatever, that seems like a really edge case scenario so I&#39;ll ignore it."}], "tags": [], "owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "is_accepted": true, "score": 4, "last_activity_date": 1512207225, "last_edit_date": 1512207225, "creation_date": 1512206584, "answer_id": 47606362, "question_id": 47606209, "link": "https://stackoverflow.com/questions/47606209/whats-wrong-with-this-rust-macro/47606362#47606362", "title": "What&#39;s wrong with this Rust macro?", "body": "<p>A <code>ty</code> placeholder only works as type, not as a namespace. Using <code>ident</code> instead should work just fine in your example.</p>\n\n<p><code>ident</code> doesn't accept <code>path</code>s (\"<code>foo::Bar</code>\") though (and using <code>path</code> also doesn't seem to work in this case); you should be able to workaround it by manually constructing paths like matching this: <code>$enum:ident $(:: $enum_path:ident)*</code> (use it like this: <code>$enum $(:: $enum_path)*</code>).</p>\n"}], "owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 853, "favorite_count": 0, "accepted_answer_id": 47606362, "answer_count": 1, "score": 7, "last_activity_date": 1512207225, "creation_date": 1512205202, "question_id": 47606209, "link": "https://stackoverflow.com/questions/47606209/whats-wrong-with-this-rust-macro", "title": "What&#39;s wrong with this Rust macro?", "body": "<p>I'm trying to write a macro that generates a <code>From</code> impl for an enum by wrapping the type in a certain variant.</p>\n\n<p>I've come up with this:</p>\n\n<pre><code>macro_rules! variant_derive_from {\n    ($enum:ty:$variant:ident($from:ty)) =&gt; {\n        impl From&lt;$from&gt; for $enum {\n            fn from(thing: $from) -&gt; $enum { return $enum::$variant(thing) }\n        }\n    };\n}\n</code></pre>\n\n<p>However, whenever I try to actually use this macro I get the following error:</p>\n\n<pre><code>error: expected expression, found `B`\n|             fn from(thing: $from) -&gt; $enum { $enum::$variant(thing) }\n|                                               ^^^^\n</code></pre>\n\n<p>I couldn't figure out why this might be happening, so I ran a build with macro tracing on, and the macro apparently expands to the following (dummy types, of course):</p>\n\n<pre><code>impl From &lt; A &gt; for B { fn from ( thing : A ) -&gt; B { B :: AVariant ( thing ) } }\n</code></pre>\n\n<p>When pasting this directly into the code, it compiles successfully. What gives??</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a09ab8614625d2982996c857362f3c83&amp;version=nightly\" rel=\"noreferrer\">Here's a full example of the error.</a></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2309, "user_id": 8039858, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b05a1367657700f0980a87767d797273?s=128&d=identicon&r=PG&f=1", "display_name": "nullqube", "link": "https://stackoverflow.com/users/8039858/nullqube"}, "edited": false, "score": 0, "creation_date": 1512206080, "post_id": 47605913, "comment_id": 82171031, "body": "<a href=\"https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator\" title=\"how to write a rust function that takes an iterator\">stackoverflow.com/questions/34969902/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 6, "creation_date": 1512208826, "post_id": 47606476, "comment_id": 82171684, "body": "I don&#39;t think you should be giving answers that rely on experimental, non-stable features when there are perfectly good, stable alternatives."}, {"owner": {"reputation": 473, "user_id": 2944788, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/82bc36ea7b55dfcc9b52d7715cd53fe5?s=128&d=identicon&r=PG&f=1", "display_name": "Matze", "link": "https://stackoverflow.com/users/2944788/matze"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1512301356, "post_id": 47606476, "comment_id": 82194111, "body": "@DK. Agreed, edited my answer yesterday to include generics as well. But the answer could do some more emphasis, what do you think?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1512301428, "post_id": 47606476, "comment_id": 82194129, "body": "Well, the question has been marked as a duplicate, so it&#39;s a bit of a moot point."}], "tags": [], "owner": {"reputation": 473, "user_id": 2944788, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/82bc36ea7b55dfcc9b52d7715cd53fe5?s=128&d=identicon&r=PG&f=1", "display_name": "Matze", "link": "https://stackoverflow.com/users/2944788/matze"}, "is_accepted": true, "score": 3, "last_activity_date": 1512207969, "last_edit_date": 1512207969, "creation_date": 1512207533, "answer_id": 47606476, "question_id": 47605913, "link": "https://stackoverflow.com/questions/47605913/is-passing-an-iterator-to-a-function-as-an-argument-an-anti-pattern/47606476#47606476", "title": "Is passing an iterator to a function as an argument an anti-pattern?", "body": "<p>Ok so there are multiple aspects to this questions:</p>\n\n<p>First of, you can avoid the compiler error by giving it an explicit lifetime:</p>\n\n<pre><code>fn foobar&lt;'a&gt;(mut x: std::iter::Peekable&lt;std::iter::Cycle&lt;std::str::Chars&lt;'a&gt;&gt;&gt;){\n</code></pre>\n\n<p>To the he second question, whether this is idiomatic or not, i'd say no, avoid this specific approach.</p>\n\n<p>You can only pass in this specific Iterator chain - something else is not possible. But most of the times, your algorithm isn't interested in the specific combination, rather than the functionality to \"produce\" chars. Use <a href=\"https://stackoverflow.com/questions/34969902/how-to-write-a-rust-function-that-takes-an-iterator\">generics</a> or<code>impl Trait</code> instead (if you have access to nightly rust).</p>\n\n<p>Impl Trait is a feature, which allows hiding the specific type used. This specific feature, accepting impl traits in argument position landed as of a few days ago, at the time of writing. I made this quick sketch for demonstration purposes, <a href=\"https://play.rust-lang.org/?gist=1cbb705d059d6227f163479798654512&amp;version=nightly\" rel=\"nofollow noreferrer\">playground link</a></p>\n\n<pre><code>#![feature(universal_impl_trait)]\n\nfn main() {\n    foo(\"hello\".chars());\n    foo(\"hello\".chars().rev());\n}\n\nfn foo(x: impl Iterator&lt;Item=char&gt;) {\n    let text: String = x.collect();\n    println!(\"{}\", &amp;text)\n}\n</code></pre>\n\n<p><strong>Edit</strong>: You can use generics as well, see comments from nullqube and stefan</p>\n"}], "owner": {"reputation": 2425, "user_id": 3486684, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/308961d6e6a4d9649e2ee9f81a4448ba?s=128&d=identicon&r=PG&f=1", "display_name": "user89", "link": "https://stackoverflow.com/users/3486684/user89"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2342, "favorite_count": 0, "closed_date": 1512208895, "accepted_answer_id": 47606476, "answer_count": 1, "score": 4, "last_activity_date": 1512207969, "creation_date": 1512202323, "last_edit_date": 1512203036, "question_id": 47605913, "link": "https://stackoverflow.com/questions/47605913/is-passing-an-iterator-to-a-function-as-an-argument-an-anti-pattern", "closed_reason": "Duplicate", "title": "Is passing an iterator to a function as an argument an anti-pattern?", "body": "<p>Say I have a string, from which I make an iterator (cycle-able, peek-able) over its chars:</p>\n\n<pre><code>let hello = \"hello\";\nlet mut iterator = hello.chars().cycle().peekable;\n</code></pre>\n\n<p>I wanted to figure out what the type of <code>iterator</code> is, so I purposefully introduced an error:</p>\n\n<p><code>let mut iterator: usize = hello.chars().cycle().peekable;</code></p>\n\n<p>The compiler then informed me that the type of the right hand side is:</p>\n\n<pre><code>std::iter::Peekable&lt;std::iter::Cycle&lt;std::str::Chars&lt;'_&gt;&gt;&gt;\n</code></pre>\n\n<p>Wow, that's a mouthful. If I define a function like so:</p>\n\n<pre><code>fn foobar(x: std::iter::Peekable&lt;std::iter::Cycle&lt;std::str::Chars&lt;'_&gt;&gt;&gt;){\n    // snip\n}\n</code></pre>\n\n<p>I get an error like this:</p>\n\n<pre><code>error: underscore lifetimes are unstable (see issue #44524)\n</code></pre>\n\n<p>So, if I want to pass an iterator to a function, how should I do so? Or, is this something I should avoid?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512222040, "post_id": 47605223, "comment_id": 82175390, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. You haven&#39;t provided the definition of <code>Day1</code>, <code>input</code>, or <code>initial_state</code>. FWIW, you can just do <code>let Day1 { sum, prev } = state;</code> and <code>Some(Day1 { sum, prev })</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512222265, "post_id": 47605833, "comment_id": 82175454, "body": "<i><code>initial_state</code> of type <code>Day1</code> and the fold function which returns <code>Option&lt;Day1&gt;</code></i> \u2014 how do you know what the type of <code>initial_state</code> is? OP hasn&#39;t provided it."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1512222367, "post_id": 47605833, "comment_id": 82175476, "body": "@Shepmaster simply from the error message:      &gt; ^^^^^^^^^^^^^ expected (), found struct <code>Day1</code>"}], "tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": true, "score": 1, "last_activity_date": 1512222217, "last_edit_date": 1512222217, "creation_date": 1512201558, "answer_id": 47605833, "question_id": 47605223, "link": "https://stackoverflow.com/questions/47605223/how-do-i-put-structs-or-tuples-in-state-of-rust-iterators/47605833#47605833", "title": "How do I put structs or tuples in state of rust iterators?", "body": "<p>The problem is very clear if you look what you are doing. Let me explain.</p>\n\n<p>First, it is good idea to have the Rust docs in touch. Looking at the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold\" rel=\"nofollow noreferrer\"><code>std::iter::Iterator::fold</code></a> method there gives you it's signature:</p>\n\n<pre><code>fn fold&lt;B, F&gt;(self, init: B, f: F) -&gt; B where\n    F: FnMut(B, Self::Item) -&gt; B,\n</code></pre>\n\n<p>There are 3 arguments: <code>self</code> which you don't touch because you use this method as a struct method and not static method, <code>init</code> which you set to <code>initial_state</code> and a fold function as <code>f</code>. At a glance you may say everything is correct but your usage mismatches this prototype because of excess semicolon at the end of the fold function - your whole expression returns <code>()</code> in that case and so the compiler tries to match the return type of your fold function with the <code>init</code> argument's type and it is unable to do that. The solution is very simple: remove the semicolon by changing</p>\n\n<pre><code>let Day1 { sum: sum, prev: prev } = state;\nSome(Day1 {\n    sum: sum,\n    prev: prev,\n});\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>let Day1 {sum: sum, prev: prev} = state;\nSome(Day1 {\n    sum: sum,\n    prev: prev,\n})\n</code></pre>\n\n<p>In Rust (as in most functional languages), the last expression is a return expression. In your case, you returned nothing but if you remove the semicolon, you will return the <code>Some(Day1 { sum: sum, prev: prev })</code> expression which has a type of <code>Option&lt;Day1&gt;</code>.</p>\n\n<p>After fixing this, you may have another problem: mismatching <code>Day1</code> and <code>Option&lt;Day1&gt;</code> which will occur because you have different types again: <code>initial_state</code> of type <code>Day1</code> and the fold function which returns <code>Option&lt;Day1&gt;</code>. The solution is to use the same type in any of these places, for example, make <code>initial_state</code> of type <code>Option&lt;Day1&gt;</code> or return <code>Day1</code> object from the fold function and so everything will compile. Again, having the Rust documentation in touch gives you a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-25\" rel=\"nofollow noreferrer\">clear example of the <code>.fold</code> usage</a>.</p>\n"}], "owner": {"reputation": 1720, "user_id": 1437652, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/f6555466525883d7e07cdf7677fd481f?s=128&d=identicon&r=PG", "display_name": "CallMeNorm", "link": "https://stackoverflow.com/users/1437652/callmenorm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 331, "favorite_count": 0, "accepted_answer_id": 47605833, "answer_count": 1, "score": -2, "last_activity_date": 1512222217, "creation_date": 1512195646, "last_edit_date": 1512200856, "question_id": 47605223, "link": "https://stackoverflow.com/questions/47605223/how-do-i-put-structs-or-tuples-in-state-of-rust-iterators", "title": "How do I put structs or tuples in state of rust iterators?", "body": "<p>I'm very new to Rust. I'm trying to use Advent of Code as an excuse to learn it. I'm currently an Elixir programmer so I use map/reduce all day.</p>\n\n<p>I'm struggling to do the same thing with rust. I'm sure I could just bail on the iterators and just plow through it with <code>for loops</code> but I'd prefer not to.</p>\n\n<p>It looks like <code>fold</code> is something very similar to <code>reduce</code> but I can't figure out how to use any state more complicated than an integer.</p>\n\n<pre><code>input\n.chars()\n.map(|c| c.to_digit(10).unwrap())\n.fold(initial_state, |state, &amp;x| {\n    let Day1{sum: sum, prev: prev} = state;\n     Some(Day1{\n        sum: sum,\n        prev: prev,\n     });\n })\n</code></pre>\n\n<p>I'm getting lots of compiler errors about non-matching types.</p>\n\n<pre><code>.fold(initial_state, |state, &amp;x| {\n      ^^^^^^^^^^^^^ expected (), found struct `Day1`\n\nlet Day1{sum: sum, prev: prev} = state;\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found struct `Day1`\n</code></pre>\n\n<p>Why does it expect <code>()</code> which is nothing (I think). I'd like to understand the error, but if there is a better way to have state maintained in a loop I'd like some help with that as well.</p>\n"}, {"tags": ["vector", "rust", "stdin"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512254622, "post_id": 47613140, "comment_id": 82185086, "body": "This doesn&#39;t even meet your own requirements: <i>&quot;all possible streams&quot;</i> \u2014 you require that it implement <code>BufRead</code>!"}, {"owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512343595, "post_id": 47613140, "comment_id": 82206770, "body": "@Shepmaster I implied entities similar to Stdin (so it seems that ReadBuf is what I wanted to support).I&#39;m not quite good at the terminology of Rust, I just used the term from C++, probably it&#39;s not 100% correct here."}], "tags": [], "owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "is_accepted": false, "score": 0, "last_activity_date": 1512253180, "last_edit_date": 1512253180, "creation_date": 1512252683, "answer_id": 47613140, "question_id": 47602073, "link": "https://stackoverflow.com/questions/47602073/how-do-i-read-a-vector-of-a-generic-type-with-an-arbitrary-separator-and-an-opti/47613140#47613140", "title": "How do I read a vector of a generic type with an arbitrary separator and an optional limit from all possible streams?", "body": "<p>I came up with this solution:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\n\nfn read_line&lt;T&gt;(mut stream: T) -&gt; String\nwhere\n    T: BufRead,\n{\n    let mut buf = String::new();\n    stream.read_line(&amp;mut buf).expect(\"failed to read a line\");\n    buf\n}\n\n\nfn read_line_from_stdin() -&gt; String {\n    let stdin = io::stdin();\n    let stdin = stdin.lock();\n    read_line(stdin)\n}\n\n\nfn parse_slice_iter&lt;'a, Iter, Value&gt;(iter: Iter) -&gt; Vec&lt;Value&gt;\nwhere\n    Iter: std::iter::Iterator&lt;Item = &amp;'a str&gt;,\n    Value: std::str::FromStr,\n    &lt;Value as std::str::FromStr&gt;::Err: std::fmt::Debug,\n{\n    iter.map(|x| x.trim().parse().expect(\"failed to parse\"))\n        .collect()\n}\n\n\nfn parse_string_iter&lt;'a, Iter, Value&gt;(iter: Iter) -&gt; Vec&lt;Value&gt;\nwhere\n    Iter: std::iter::Iterator&lt;Item = String&gt;,\n    Value: std::str::FromStr,\n    &lt;Value as std::str::FromStr&gt;::Err: std::fmt::Debug,\n{\n    iter.map(|x| x.parse().expect(\"failed to parse\")).collect()\n}\n\n\nfn read_vector&lt;T, S&gt;(count: Option&lt;usize&gt;, delimiter: char, stream: S) -&gt; Vec&lt;T&gt;\nwhere\n    T: std::str::FromStr,\n    &lt;T as std::str::FromStr&gt;::Err: std::fmt::Debug,\n    S: BufRead,\n{\n    match count {\n        None =&gt; match delimiter {\n            '\\n' =&gt; parse_string_iter(stream.lines().map(|x| x.unwrap())),\n            _ =&gt; parse_slice_iter(read_line(stream).split(delimiter)),\n        },\n        _ =&gt; match delimiter {\n            '\\n' =&gt; parse_string_iter(stream.lines().take(count.unwrap()).map(|x| x.unwrap())),\n            _ =&gt; parse_slice_iter(read_line(stream).split(delimiter).take(count.unwrap())),\n        },\n    }\n}\n\n\nfn read_vector_from_stdin&lt;T&gt;(count: Option&lt;usize&gt;, delimiter: char) -&gt; Vec&lt;T&gt;\nwhere\n    T: std::str::FromStr,\n    &lt;T as std::str::FromStr&gt;::Err: std::fmt::Debug,\n{\n    let stdin = io::stdin();\n    let stdin = stdin.lock();\n    read_vector(count, delimiter, stdin)\n}\n</code></pre>\n\n<p>Because of the absence of such things as template specialisations and default arguments, I had to write more code than I would in C++ and found myself duplicating so many things. I would like to see how true Rust programmers would solve the problem.</p>\n"}], "owner": {"reputation": 45, "user_id": 4326346, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/eabd6543e27596368bee1c9f5a2e50c0?s=128&d=identicon&r=PG&f=1", "display_name": "StrausMG", "link": "https://stackoverflow.com/users/4326346/strausmg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 233, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1512253180, "creation_date": 1512165586, "last_edit_date": 1512176450, "question_id": 47602073, "link": "https://stackoverflow.com/questions/47602073/how-do-i-read-a-vector-of-a-generic-type-with-an-arbitrary-separator-and-an-opti", "title": "How do I read a vector of a generic type with an arbitrary separator and an optional limit from all possible streams?", "body": "<p>I want to write a function <code>read_vector</code> which should read and parse items of type <code>T</code> from stdin and return a vector containing these items. If the delimiter is <code>'\\n'</code> it should parse lines, otherwise all items are supposed to be in one line separated by the delimiter. If the count is not <code>None</code>, then it represents the number of items to be read.</p>\n\n<p>The goal is to minimize code-duplication and create a general function without restrictions on types or whatever else.</p>\n\n<p>However, I run into a problem which I cannot understand at all. This code:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn read_line() -&gt; String {\n    let mut buf = String::new();\n    io::stdin()\n        .read_line(&amp;mut buf)\n        .expect(\"failed to read a line\");\n    buf\n}\n\nfn parse_iter&lt;'a, Iter, Value&gt;(mut iter: Iter) -&gt; Vec&lt;Value&gt;\nwhere\n    Iter: std::iter::Iterator&lt;Item = &amp;'a str&gt;,\n    Value: std::str::FromStr,\n    &lt;Value as std::str::FromStr&gt;::Err: std::fmt::Debug,\n{\n    iter.map(|x| x.parse().expect(\"failed to parse\")).collect()\n}\n\nfn read_vector&lt;T&gt;(count: Option&lt;usize&gt;, delimiter: char) -&gt; Vec&lt;T&gt;\nwhere\n    T: std::str::FromStr,\n    &lt;T as std::str::FromStr&gt;::Err: std::fmt::Debug,\n{\n    match count {\n        None =&gt; match delimiter {\n            '\\n' =&gt; parse_iter(io::stdin().lock().lines().map(|x| x.unwrap())),\n            _ =&gt; parse_iter(read_line().split(delimiter)),\n        },\n        _ =&gt; match delimiter {\n            '\\n' =&gt; parse_iter(\n                io::stdin()\n                    .lock()\n                    .lines()\n                    .map(|x| x.unwrap())\n                    .take(count.unwrap()),\n            ),\n            _ =&gt; parse_iter(read_line().split(delimiter).take(count.unwrap())),\n        },\n    }\n}\n\nfn main() {\n    let vector: Vec&lt;u32&gt; = read_vector(None, '\\n');\n}\n</code></pre>\n\n<p>leads to these errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;[closure@src/main.rs:27:63: 27:77] as std::ops::FnOnce&lt;(std::result::Result&lt;std::string::String, std::io::Error&gt;,)&gt;&gt;::Output == &amp;str`\n  --&gt; src/main.rs:27:21\n   |\n27 |             '\\n' =&gt; parse_iter(io::stdin().lock().lines().map(|x| x.unwrap())),\n   |                     ^^^^^^^^^^ expected struct `std::string::String`, found &amp;str\n   |\n   = note: expected type `std::string::String`\n              found type `&amp;str`\n   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Map&lt;std::io::Lines&lt;std::io::StdinLock&lt;'_&gt;&gt;, [closure@src/main.rs:27:63: 27:77]&gt;`\n   = note: required by `parse_iter`\n\nerror[E0271]: type mismatch resolving `&lt;[closure@src/main.rs:35:26: 35:40] as std::ops::FnOnce&lt;(std::result::Result&lt;std::string::String, std::io::Error&gt;,)&gt;&gt;::Output == &amp;str`\n  --&gt; src/main.rs:31:21\n   |\n31 |             '\\n' =&gt; parse_iter(\n   |                     ^^^^^^^^^^ expected struct `std::string::String`, found &amp;str\n   |\n   = note: expected type `std::string::String`\n              found type `&amp;str`\n   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::iter::Map&lt;std::io::Lines&lt;std::io::StdinLock&lt;'_&gt;&gt;, [closure@src/main.rs:35:26: 35:40]&gt;`\n   = note: required by `parse_iter`\n</code></pre>\n\n<p>How can I fix the problem?</p>\n\n<p>It would be nice to see not only the fix to the problem but also advice on how to improve current implementation, because it still contains many code-repetitions and works only with Stdin instead of all possible streams.</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1512170849, "post_id": 47601097, "comment_id": 82164622, "body": "Even in this solution, only one of those <code>.clone()</code>s is necessary."}], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": false, "score": 8, "last_activity_date": 1512162741, "last_edit_date": 1512162741, "creation_date": 1512161855, "answer_id": 47601379, "question_id": 47601097, "link": "https://stackoverflow.com/questions/47601097/what-is-the-best-way-to-repeat-the-elements-in-a-vector-in-rust/47601379#47601379", "title": "What is the best way to repeat the elements in a vector in Rust?", "body": "<p>\"Doubling a vector\" isn't something that's really done very often so there's no shortcut for it. In addition, it matters what is inside the <code>Vec</code> because that changes what operations can be performed on it. In this specific example, the following code works:</p>\n\n<pre><code>let x = vec![1, 2, 3];\n\nlet y: Vec&lt;_&gt; = x.iter().cycle().take(x.len() * 2).collect();\n\nprintln!(\"{:?}\", y); //[1, 2, 3, 1, 2, 3]\n</code></pre>\n\n<p>The <code>cycle()</code> method requires that the items in the <code>Iterator</code> implement the <code>Clone</code> trait so that the items can be duplicated. So if the items in your <code>Vec</code> implement <code>Clone</code>, then this will work. Since immutable references (<code>&amp;</code>) implement <code>Clone</code>, a <code>Vec&lt;&amp;Something&gt;</code> will work but mutable references (<code>&amp;mut</code>) do not implement <code>Clone</code> and thus a <code>Vec&lt;&amp;mut Something&gt;</code> will not work.</p>\n\n<p>Note that even if a type does not implement <code>Clone</code>, you can still clone references to that type:</p>\n\n<pre><code>struct Test;\n\nfn test_if_clone&lt;T: Clone&gt;(_x: T) {}\n\nfn main() {\n    let x = Test;\n\n    test_if_clone(x); //error[E0277]: the trait bound `Test: std::clone::Clone` is not satisfied\n\n    let y = &amp;x;\n\n    test_if_clone(y); //ok\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "edited": false, "score": 2, "creation_date": 1512163313, "post_id": 47601438, "comment_id": 82162024, "body": "One thing that&#39;s probably worth mentioning is that the type of <code>y</code> is <code>Vec&lt;&amp;{integer}&gt;</code> not <code>Vec&lt;{integer&gt;</code>. This is a good solution though since it allows you to handle vectors whose contents can&#39;t be cloned."}], "tags": [], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "is_accepted": false, "score": 6, "last_activity_date": 1512162161, "creation_date": 1512162161, "answer_id": 47601438, "question_id": 47601097, "link": "https://stackoverflow.com/questions/47601097/what-is-the-best-way-to-repeat-the-elements-in-a-vector-in-rust/47601438#47601438", "title": "What is the best way to repeat the elements in a vector in Rust?", "body": "<p>Building on Wesley's answer, you can also use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.chain\" rel=\"noreferrer\">chain</a> to glue two iterables together, one after the other. In the below example I use the same <code>Vec</code>'s <code>iter()</code> method twice:</p>\n\n<pre><code>let x = vec![1, 2, 3];\n\nlet y: Vec&lt;_&gt; = x.iter().chain(x.iter()).collect();\n\nprintln!(\"{:?}\", y); //[1, 2, 3, 1, 2, 3]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 7, "last_activity_date": 1512221231, "creation_date": 1512221231, "answer_id": 47608384, "question_id": 47601097, "link": "https://stackoverflow.com/questions/47601097/what-is-the-best-way-to-repeat-the-elements-in-a-vector-in-rust/47608384#47608384", "title": "What is the best way to repeat the elements in a vector in Rust?", "body": "<p>You can use the concat method for this, it's simple:</p>\n\n<pre><code>fn double_vec(v: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    [&amp;v[..], &amp;v[..]].concat()\n}\n</code></pre>\n\n<p>Unfortunately we have to make the vectors slices explicitly (here <code>&amp;v[..]</code>); but otherwise this method is good because it allocates the result to the needed size directly and then does the copies.</p>\n"}, {"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 5, "last_activity_date": 1512335627, "last_edit_date": 1512335627, "creation_date": 1512222120, "answer_id": 47608510, "question_id": 47601097, "link": "https://stackoverflow.com/questions/47601097/what-is-the-best-way-to-repeat-the-elements-in-a-vector-in-rust/47608510#47608510", "title": "What is the best way to repeat the elements in a vector in Rust?", "body": "<p>The iterator methods are a likely to be a lot less efficient than a straight <code>memcpy</code> that vector extension is.</p>\n\n<p>You own code does a <code>clone</code> too many; you can just reuse the by-value input:</p>\n\n<pre><code>fn double_vec(mut vec: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let clone = vec.clone();\n    vec.extend(clone);\n    vec\n}\n</code></pre>\n\n<p>However, the nature of a <code>Vec</code> means this is likely to require a copy even if you managed to remove that clone, so you're not generally gaining much over just using <code>concat</code>.</p>\n\n<p>Using <code>concat</code> on slices is fairly efficient, as it will preallocate the <code>Vec</code> in advance and then perform an efficient <code>extend_from_slice</code>. However, this does mean it's no longer particularly sensible to take a <code>Vec</code> as input; writing the following is strictly more flexible.</p>\n\n<pre><code>fn double_slice(slice: &amp;[i32]) -&gt; Vec&lt;i32&gt; {\n    [slice, slice].concat()\n}\n</code></pre>\n"}], "owner": {"reputation": 201, "user_id": 7498804, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-hsTmB1O9pfc/AAAAAAAAAAI/AAAAAAAAADU/wzK8n9Ml7-Y/photo.jpg?sz=128", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044b\u0431\u0438\u043d", "link": "https://stackoverflow.com/users/7498804/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%a0%d1%8b%d0%b1%d0%b8%d0%bd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2952, "favorite_count": 2, "accepted_answer_id": 47608384, "answer_count": 4, "score": 9, "last_activity_date": 1512348684, "creation_date": 1512160494, "last_edit_date": 1512348684, "question_id": 47601097, "link": "https://stackoverflow.com/questions/47601097/what-is-the-best-way-to-repeat-the-elements-in-a-vector-in-rust", "title": "What is the best way to repeat the elements in a vector in Rust?", "body": "<p>I found this way, but it seems too verbose for such a common action:</p>\n\n<pre><code>fn double_vec(vec: Vec&lt;i32&gt;) -&gt; Vec&lt;i32&gt; {\n    let mut vec1 = vec.clone();\n    let vec2 = vec.clone();\n\n    vec1.extend(vec2);\n\n    vec1\n}\n</code></pre>\n\n<p>I know that in JavaScript it could be just <code>arr2 = [...arr1, ...arr1]</code>.</p>\n"}, {"tags": ["rust", "traits", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512160451, "post_id": 47601020, "comment_id": 82160797, "body": "Have you read the <a href=\"https://doc.rust-lang.org/std/raw/struct.TraitObject.html\" rel=\"nofollow noreferrer\">documentation for <code>TraitObject</code></a>, which states: <i><code>TraitObject</code> is guaranteed to match layouts, but it is not the type of trait objects [...] nor does it control that layout [...]. It is only designed to be used by unsafe code that needs to manipulate the low-level details.</i>"}, {"owner": {"reputation": 1247, "user_id": 3169543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7416c0dca5630ff1c31b955e185e955b?s=128&d=identicon&r=PG&f=1", "display_name": "user3169543", "link": "https://stackoverflow.com/users/3169543/user3169543"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512161064, "post_id": 47601020, "comment_id": 82161069, "body": "@Shepmaster: I wanted to understand if the above captures the &quot;idea&quot; of how compiler constructs a trait object and passes to the called function."}], "answers": [{"tags": [], "owner": {"reputation": 90851, "user_id": 27009, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f0a29af415477aa8c498a4f41ffe6640?s=128&d=identicon&r=PG", "display_name": "Kornel", "link": "https://stackoverflow.com/users/27009/kornel"}, "is_accepted": true, "score": 0, "last_activity_date": 1513909216, "creation_date": 1513909216, "answer_id": 47935121, "question_id": 47601020, "link": "https://stackoverflow.com/questions/47601020/how-are-trait-objects-implemented-in-rust/47935121#47935121", "title": "How are trait objects implemented in Rust?", "body": "<p>Trait objects are fat pointers, so <code>fn some_func(write_to: &amp;mut Write)</code> compiles to something like <code>fn some_func(_: *mut OpaqueStruct, _: *const WriteVtable)</code>.</p>\n"}], "owner": {"reputation": 1247, "user_id": 3169543, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7416c0dca5630ff1c31b955e185e955b?s=128&d=identicon&r=PG&f=1", "display_name": "user3169543", "link": "https://stackoverflow.com/users/3169543/user3169543"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 255, "favorite_count": 0, "accepted_answer_id": 47935121, "answer_count": 1, "score": 0, "last_activity_date": 1571316652, "creation_date": 1512160043, "last_edit_date": 1512160362, "question_id": 47601020, "link": "https://stackoverflow.com/questions/47601020/how-are-trait-objects-implemented-in-rust", "title": "How are trait objects implemented in Rust?", "body": "<p>I'm trying to understand how trait objects are implemented in Rust. Please let me know if the following understanding is correct.</p>\n\n<p>I have a function that takes any type that implements the <code>Write</code> trait:</p>\n\n<pre><code>fn some_func(write_to: &amp;mut Write) {}\n</code></pre>\n\n<p>In any place where we have a type that implements this trait and calls the above function, the compiler generates a \"trait object\", probably by adding a call to <code>TraitObject::new(data, vtable)</code>.</p>\n\n<p>If we have something like:</p>\n\n<pre><code>let input = get_user_input(); // say we are expecting the input to be 1 or 2\nlet mut file = File::new(\"blah.txt\").unwrap();\nlet mut vec: Vec&lt;u8&gt; = vec![1, 2, 3];\n\nmatch input {\n    1 =&gt; some_func(&amp;mut file),\n    2 =&gt; some_func(&amp;mut vec),\n}\n</code></pre>\n\n<p>will probably turn out to be: </p>\n\n<pre><code>match input {\n    1 =&gt; {\n        let file_write_trait_object: &amp;mut Write =\n            TraitObject::new(&amp;file, &amp;vtable_for_file_write_trait);\n        some_func(file_write_trait_object);\n    }\n    2 =&gt; {\n        let vec_write_trait_object: &amp;mut Write =\n            TraitObject::new(&amp;vec, &amp;vtable_for_vec_write_trait);\n        some_func(vec_write_trait_object);\n    }\n}\n</code></pre>\n\n<p>Inside <code>some_func</code> the compiler will just access the methods used based on the vtable in the <code>TraitObject</code> passed along.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512514251, "post_id": 47663864, "comment_id": 82287220, "body": "To be clear, you are saying that to solve the problem, the OP should basically <i>just</i> wait until Rust 1.23? The bit about the option is basically how to get the Rust 1.21 behavior back in a future Rust 1.23?"}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1512518855, "post_id": 47663864, "comment_id": 82288740, "body": "I&#39;ve actually since stumbled across the PR that implemented this change. You&#39;ve summarized everything very well. Thanks!"}, {"owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "edited": false, "score": 0, "creation_date": 1512776000, "post_id": 47663864, "comment_id": 82408019, "body": "Yes, Shepmaster. The OP should just wait."}], "tags": [], "owner": {"reputation": 600, "user_id": 3754495, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/65fff37f6d10b64ca1676adcc33f5ffb?s=128&d=identicon&r=PG", "display_name": "notriddle", "link": "https://stackoverflow.com/users/3754495/notriddle"}, "is_accepted": true, "score": 3, "last_activity_date": 1512514164, "last_edit_date": 1512514164, "creation_date": 1512513772, "answer_id": 47663864, "question_id": 47598012, "link": "https://stackoverflow.com/questions/47598012/how-can-i-silence-rustcs-note-about-which-native-artifacts-to-link-against/47663864#47663864", "title": "How can I silence `rustc`&#39;s note about which native artifacts to link against?", "body": "<p>In Rust 1.21 and earlier, there is no way to turn off the output.</p>\n\n<p>In Rust 1.22, the <code>--print=native-static-libs</code> option was added. When it is not present, it outputs:</p>\n\n<blockquote>\n  <p>note: This list will not be printed by default. Please add --print native-static-libs if you need this information.</p>\n</blockquote>\n\n<p>Adding the option will silence the warning.</p>\n\n<p>To silence this information without silencing anything else, upgrade to Rust 1.23 once it's released.</p>\n\n<p><a href=\"https://github.com/rust-lang/rust/pull/43067\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/rust/pull/43067</a></p>\n"}], "owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 64, "favorite_count": 0, "accepted_answer_id": 47663864, "answer_count": 1, "score": 2, "last_activity_date": 1512514164, "creation_date": 1512147501, "last_edit_date": 1512150191, "question_id": 47598012, "link": "https://stackoverflow.com/questions/47598012/how-can-i-silence-rustcs-note-about-which-native-artifacts-to-link-against", "title": "How can I silence `rustc`&#39;s note about which native artifacts to link against?", "body": "<p>I've got a project where Rust source files are being automatically generated and compiled into static libraries. I'd like the output of <code>rustc</code> to be streamed to stdout and stderr as usual, but I wish that the following note wasn't always emitted:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: link against the following native artifacts when linking against this static library\n\nnote: the order and any duplication can be significant on some platforms, and so may need to be preserved\n\nnote: library: System\n\nnote: library: resolv\n\nnote: library: c\n\nnote: library: m\n</code></pre>\n\n<p>Is there any way to silence this without silencing too much else? The note was useful to me when I was figuring out how to link things automatically, but it won't be useful to my users who never actually see the linking process.</p>\n"}, {"tags": ["enums", "rust"], "answers": [{"comments": [{"owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 1, "creation_date": 1512120196, "post_id": 47589799, "comment_id": 82137373, "body": "If it&#39;s unreachable, why <code>match *self {}</code> is used here instead of <code>unreachable!()</code>?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 0, "creation_date": 1512121180, "post_id": 47589799, "comment_id": 82137917, "body": "@Cheng-ChangWu and why would it implement <code>Display</code> anyway?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "edited": false, "score": 1, "creation_date": 1512121375, "post_id": 47589799, "comment_id": 82138029, "body": "@Cheng-ChangWu that&#39;s probably because <code>match *self {}</code> produces no code, while <code>unreachable!()</code> produces panic code that will need to get optimized out"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 9, "last_activity_date": 1512118740, "creation_date": 1512118740, "answer_id": 47589799, "question_id": 47589690, "link": "https://stackoverflow.com/questions/47589690/what-does-a-match-on-an-empty-enum-return/47589799#47589799", "title": "What does a match on an empty enum return?", "body": "<p>Since <code>Infallible</code> has no possible values, you can never have an instance of it. This means matching on it can never happen. Rust represents this by making matching on an empty enum yield the <code>!</code> type, which is a builtin type that has no values.</p>\n\n<p>This type coerces to any other type, because the statement can never be reached, because you'd need a value of type <code>Infallible</code> for that, which you can't have out of obvious reasons.</p>\n"}], "owner": {"reputation": 177, "user_id": 5737634, "user_type": "registered", "accept_rate": 60, "profile_image": "https://lh5.googleusercontent.com/-x7XrU_ivtm0/AAAAAAAAAAI/AAAAAAAACR8/R_hvTTY-rx8/photo.jpg?sz=128", "display_name": "Cheng-Chang Wu", "link": "https://stackoverflow.com/users/5737634/cheng-chang-wu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 501, "favorite_count": 1, "answer_count": 1, "score": 5, "last_activity_date": 1512141395, "creation_date": 1512118307, "last_edit_date": 1512141395, "question_id": 47589690, "link": "https://stackoverflow.com/questions/47589690/what-does-a-match-on-an-empty-enum-return", "title": "What does a match on an empty enum return?", "body": "<p>When reading <a href=\"https://github.com/rust-lang/rust/blob/315fbf7518dbcace5b92eabab746ba0a2c5531fa/src/libcore/convert.rs#L59-L69\" rel=\"nofollow noreferrer\">Rust's convert.rs</a>, I encountered the following code:</p>\n\n<pre><code>#[unstable(feature = \"try_from\", issue = \"33417\")]\n#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\npub enum Infallible {}\n\n#[unstable(feature = \"try_from\", issue = \"33417\")]\nimpl fmt::Display for Infallible {\n    fn fmt(&amp;self, _: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n        }\n    }\n}\n</code></pre>\n\n<p><code>Infallible</code> is an empty enum with no variants. What does <code>match *self {}</code> return?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512150434, "post_id": 47589295, "comment_id": 82155740, "body": "<i>as it is not modifying the field directly, but calling a member method that in turn modifies the field</i> \u2014 The example used in the duplicate (addition) <b>is</b> a method, specifically the <a href=\"https://doc.rust-lang.org/std/ops/trait.AddAssign.html\" rel=\"nofollow noreferrer\"><code>AddAssign</code> trait</a>."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512150628, "post_id": 47589295, "comment_id": 82155849, "body": "OK, so as ljedrez mentions below, I basically need to refactor to avoid this?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512150644, "post_id": 47589295, "comment_id": 82155862, "body": "Additionally, it&#39;s <a href=\"https://meta.stackoverflow.com/q/254521/155423\">frowned upon</a> to change your question, especially after it&#39;s been answered (and accepted!)."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512150728, "post_id": 47589295, "comment_id": 82155903, "body": "The duplicate message specifically asked me to: &quot;modify your question to clarify how it is different to others&quot; (duplicates) and the previous edits by others had changed the error message from playground, and that didn&#39;t coincide with the code.... so I corrected it back."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512150893, "post_id": 47589295, "comment_id": 82156001, "body": "I copied the <a href=\"https://stackoverflow.com/revisions/47589295/1\"><b>exact code you pasted here</b></a> into the playground, ran it, then copied the generated errors back into the question. I cannot help that the code you pasted wasn&#39;t what you meant it to be, if they differed somehow. Your <i>original</i> code and error message didn&#39;t coincide, which I fixed. Anyway, I&#39;ve now marked this as a duplicate of some of the many &quot;also borrowed&quot; questions."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1512151123, "post_id": 47589295, "comment_id": 82156132, "body": "Additionally, if the question you originally asked was answered, but then you discovered that you didn&#39;t ask the right question, you <i>ask another question</i>. Look at how the <b>accepted</b> answer seemingly &quot;ignores&quot; half of your question. The edits make the answerer look really poor, even though they answered your original question perfectly well."}], "answers": [{"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512131569, "post_id": 47589454, "comment_id": 82144027, "body": "Thanks! That solves the example so I have accepted answer. Now let me try and apply it to my own real (more complex example)....."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512132057, "post_id": 47589454, "comment_id": 82144357, "body": "I was afraid so, my simplified example was too simplified.... I want to call another method of Struct and it gives the error: &quot;error[E0502]: cannot borrow <code>*self</code> as immutable because <code>self.sub.0</code> is also borrowed as mutable&quot; I have updated the playground code..  <a href=\"https://play.rust-lang.org/?gist=93bf23c21a3a54687700f1d1a66ea3c1&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512132423, "post_id": 47589454, "comment_id": 82144559, "body": "@AndrewMackenzie you won&#39;t be able to immutably borrow <code>self</code> in the block under that <code>if let</code> binding (i.e. while a mutable borrow is in force); you could do it just outside it, though, as long as that works for your original code. If it doesn&#39;t, I recommend filing a new question with a bit more of the original code."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512132723, "post_id": 47589454, "comment_id": 82144770, "body": "Thanks, I feared that and don&#39;t see an easy workaround. The code now in the playground effectively reproduces the problem - without all my messiness I you are interested. I guess I&#39;ll need to rethink that code... :-("}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512133324, "post_id": 47589454, "comment_id": 82145146, "body": "@AndrewMackenzie to be honest, it doesn&#39;t look like it needs heavy refactoring - even if this is represents the problem, some additional code could help suggest some possible solutions."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1512302698, "post_id": 47589454, "comment_id": 82194457, "body": "thanks for the help and offer of more. I created a new question that I hope captures the problem better. <a href=\"https://stackoverflow.com/questions/47618162/how-to-call-a-member-method-while-inside-block-with-mutable-reference-to-self\" title=\"how to call a member method while inside block with mutable reference to self\">stackoverflow.com/questions/47618162/&hellip;</a>"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1512117988, "last_edit_date": 1512117988, "creation_date": 1512117360, "answer_id": 47589454, "question_id": 47589295, "link": "https://stackoverflow.com/questions/47589295/how-to-modify-an-optional-field-of-a-struct-in-a-member-function/47589454#47589454", "title": "How to modify an optional field of a struct in a member function", "body": "<p>You were pretty close:</p>\n\n<pre><code>impl Struct {\n    fn modify(&amp;mut self) {\n        if let Some(ref mut sub) = self.sub { // no reference before Some\n            sub.modify_field();\n        }\n    }\n}\n\nfn main() {\n    let sub = Some(SubStruct { field: 1 });\n    let mut structure = Struct { sub };\n\n    structure.modify(); // no arguments, we are only working on self\n\n    println!(\"{}\", structure.sub.unwrap().field);\n}\n</code></pre>\n\n<p>When you are mutably borrowing <code>structure</code> with <code>modify(&amp;mut self)</code>, <code>self.sub</code> is still an <code>Option&lt;SubStruct&gt;</code>, so destructuring it with an <code>if let</code> binding yields <code>Some(sub)</code>. Since you are only mutably borrowing <code>self</code>, though, you need to prevent the move of the <code>Option</code>'s contents with <code>ref mut</code> (as you did).</p>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1098, "favorite_count": 0, "closed_date": 1512139681, "accepted_answer_id": 47589454, "answer_count": 1, "score": 1, "last_activity_date": 1512150743, "creation_date": 1512116696, "last_edit_date": 1512150495, "question_id": 47589295, "link": "https://stackoverflow.com/questions/47589295/how-to-modify-an-optional-field-of-a-struct-in-a-member-function", "closed_reason": "Duplicate", "title": "How to modify an optional field of a struct in a member function", "body": "<p>I have a structure <code>Struct</code> that optionally contains <code>SubStruct</code>. <code>SubStruct</code> contains a field. \nI would like to call the <code>modify</code> member method of <code>Struct</code>, that calls the <code>modify_field</code> member method of <code>SubStruct</code> that modifies the <code>field</code> field of <code>SubStruct</code> </p>\n\n<p>This is different from other questions mentioned, as it is not modifying the field directly, but calling a member method that in turn modifies the field. Modifying the field directly has a shared solution I have seen.</p>\n\n<pre><code>struct SubStruct {\n    field: u32,\n}\n\nimpl SubStruct {\n    fn modify_field(&amp;mut self) {\n       self.field = 2\n    }\n}\n\nstruct Struct {\n    sub: Option&lt;SubStruct&gt;,\n}\n\nimpl Struct {\n    fn modify(&amp;mut self) {\n        if let Some(ref mut sub) = self.sub { // no reference before Some\n            sub.modify_field();\n\n            self.do_something();\n        }\n    }\n\n    fn do_something(&amp;self) {\n    }\n}\n\nfn main() {\n    let sub = Some(SubStruct{field: 1});\n    let mut structure = Struct{ sub };\n\n    structure.modify();\n\n    println!(\"{}\", structure.sub.unwrap().field);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=b93df4f62c27abdf33461244d3008c65&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>I've tried many variants with no luck, with my current version I am stuck with this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as immutable because `self.sub.0` is also borrowed as mutable\n--&gt; src/main.rs:20:13\n   |\n17 |         if let Some(ref mut sub) = self.sub { // no reference before Some\n   |                          ----------- mutable borrow occurs here \n... \n20 |             self.do_something();    \n   |             ^^^^ immutable borrow occurs here\n21 |         }    |         - mutable borrow ends here\n</code></pre>\n\n<p>As you can see, it  seems to be related to <code>self.do_something()</code> taking an immutable borrow of <code>self</code>, where a mutable borrow of <code>self</code> was already taken in the function parameter.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user820304"}, "edited": false, "score": 0, "creation_date": 1512077880, "post_id": 47582781, "comment_id": 82123621, "body": "Apparently not. My bad."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1512082777, "post_id": 47582781, "comment_id": 82125691, "body": "I don&#39;t think it is currently possibile; it is, however, possibile to represent a chessboard in a more straightforward way :)."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1512084675, "post_id": 47582781, "comment_id": 82126345, "body": "Smells like you want a macro /halfserious"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1512086398, "creation_date": 1512086398, "answer_id": 47584611, "question_id": 47582781, "link": "https://stackoverflow.com/questions/47582781/multi-line-integer-literals-in-rust/47584611#47584611", "title": "Multi-line integer literals in Rust", "body": "<p>There's no way to concatenate tokens into a new token (as you could do with <code>##</code> in the C preprocessor) with the macros in the standard library (as of Rust 1.22).</p>\n\n<p>However, I came up with the following macro. It repeats <code>0b_</code> on each line, but at least you can clearly see the pattern from the zeroes and ones. The shifts and ORs are evaluated at compile time, so there's no runtime penalty to this solution compared to a plain literal.</p>\n\n<pre><code>macro_rules! chessboard {\n    ($line0:tt $line1:tt $line2:tt $line3:tt $line4:tt $line5:tt $line6:tt $line7:tt) =&gt; {\n        ($line0 &lt;&lt; 56) |\n        ($line1 &lt;&lt; 48) |\n        ($line2 &lt;&lt; 40) |\n        ($line3 &lt;&lt; 32) |\n        ($line4 &lt;&lt; 24) |\n        ($line5 &lt;&lt; 16) |\n        ($line6 &lt;&lt;  8) |\n        ($line7 &lt;&lt;  0)\n    }\n}\n\nfn main() {\n    let centre: u64 = chessboard!(\n        0b_00000000\n        0b_00000000\n        0b_00111100\n        0b_00111100\n        0b_00111100\n        0b_00111100\n        0b_00000000\n        0b_00000000);\n    println!(\"{:#b}\", centre);\n}\n</code></pre>\n"}], "owner": {"reputation": 194, "user_id": 7732825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/42efe0f0ead85ed3e4ac7685e982be7b?s=128&d=identicon&r=PG&f=1", "display_name": "Morten Lohne", "link": "https://stackoverflow.com/users/7732825/morten-lohne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 173, "favorite_count": 0, "accepted_answer_id": 47584611, "answer_count": 1, "score": 4, "last_activity_date": 1512086398, "creation_date": 1512076769, "last_edit_date": 1512078001, "question_id": 47582781, "link": "https://stackoverflow.com/questions/47582781/multi-line-integer-literals-in-rust", "title": "Multi-line integer literals in Rust", "body": "<p>I have the following integer literal:</p>\n\n<pre><code>let centre: u64 = 0b00000000_00000000_00111100_00111100_00111100_00111100_00000000_00000000;\n</code></pre>\n\n<p>It represents a chess board, so I think it would be much nicer to format it similar to this:</p>\n\n<pre><code>let centre: u64 = 0b\n                  00000000\n                  00000000\n                  00111100\n                  00111100\n                  00111100\n                  00111100\n                  00000000\n                  00000000;\n</code></pre>\n\n<p>However, the above example doesn't compile as the newlines get interpreted as whitespaces inside my literal. Is there any way to achieve this?</p>\n"}, {"tags": ["rust", "future", "rust-tokio"], "answers": [{"comments": [{"owner": {"reputation": 113, "user_id": 3898280, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/81de1f2db0a1af22b79f708a1e5e53f9?s=128&d=identicon&r=PG&f=1", "display_name": "trimoq", "link": "https://stackoverflow.com/users/3898280/trimoq"}, "edited": false, "score": 2, "creation_date": 1512230413, "post_id": 47585440, "comment_id": 82177808, "body": "Thank you for the great, in-depth answer. This was indeed an design flaw, thank you for pointing this out. I solved it by creating a channel per connection and storing the senders in a map, so that the main thread can send to every connection."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 10, "last_activity_date": 1518414571, "last_edit_date": 1518414571, "creation_date": 1512092666, "answer_id": 47585440, "question_id": 47582586, "link": "https://stackoverflow.com/questions/47582586/type-mismatch-resolving-the-error-type-when-forwarding-messages-from-a-futures-c/47585440#47585440", "title": "Type mismatch resolving the error type when forwarding messages from a futures channel to a WebSocket Sink", "body": "<blockquote>\n<pre><code>error[E0271]: type mismatch resolving\n  `&lt;futures::stream::SplitSink&lt;\n        websocket::client::async::Framed&lt;\n            tokio_core::net::TcpStream,\n            websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;&gt;\n   as futures::Sink&gt;::SinkError == ()`\n</code></pre>\n</blockquote>\n\n<p>We have two types here: <code>&lt;futures::stream::SplitSink&lt;...&gt; as futures::Sink&gt;::SinkError</code> and <code>()</code>. Where do these two types come from? Also, the first one is an unresolved associated type; perhaps we could resolve it to get some more insight? Let's trace it step by step.</p>\n\n<p>First, we need to figure out why the compiler is trying to match these two types in the first place. If we look at the signature for <a href=\"https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.forward\" rel=\"noreferrer\"><code>forward</code></a>, we'll see the constraint <code>Self::Error: From&lt;S::SinkError&gt;</code>. <code>Self</code> is the type of the stream we're calling <code>forward</code> on, while <code>S</code> is the type of the sink that's passed as an argument to <code>forward</code>.</p>\n\n<p>We're calling <code>forward</code> on <code>rx</code>, whose type is <code>futures::sync::mpsc::Receiver</code>. On the <a href=\"https://docs.rs/futures/0.1.17/futures/sync/mpsc/struct.Receiver.html\" rel=\"noreferrer\">documentation page for <code>Receiver</code></a>, we can see the following:</p>\n\n<blockquote>\n<pre><code>impl&lt;T&gt; Stream for Receiver&lt;T&gt;\n  type Item = T\n  type Error = ()\n</code></pre>\n</blockquote>\n\n<p>This shows us where the <code>()</code> came from. Let's look at the <code>sink</code> argument now.</p>\n\n<p>The type of <code>sink</code> is <code>futures::stream::SplitSink&lt;websocket::client::async::Framed&lt;tokio_core::net::TcpStream, websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;&gt;</code> (we know this from the error message; the <a href=\"https://github.com/rust-lang-nursery/rls\" rel=\"noreferrer\">RLS</a> also confirms this). On the <a href=\"https://docs.rs/futures/0.1.17/futures/stream/struct.SplitSink.html\" rel=\"noreferrer\">documentation page for <code>SplitSink</code></a>, we have:</p>\n\n<blockquote>\n<pre><code>impl&lt;S: Sink&gt; Sink for SplitSink&lt;S&gt;\n  type SinkItem = S::SinkItem\n  type SinkError = S::SinkError\n</code></pre>\n</blockquote>\n\n<p>So <code>SplitSink</code>'s <code>SinkError</code> is the same as its inner sink's <code>SinkError</code>. The inner sink's type is <code>websocket::client::async::Framed&lt;tokio_core::net::TcpStream, websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;</code>. What does the <a href=\"https://docs.rs/websocket/0.20.2/websocket/client/async/struct.Framed.html\" rel=\"noreferrer\">documentation for <code>Framed</code></a> say?</p>\n\n<blockquote>\n<pre><code>impl&lt;T, U&gt; Sink for Framed&lt;T, U&gt;\nwhere\n    T: AsyncWrite,\n    U: Encoder,\n    &lt;U as Encoder&gt;::Error: From&lt;Error&gt;,\n  type SinkItem = &lt;U as Encoder&gt;::Item\n  type SinkError = &lt;U as Encoder&gt;::Error\n</code></pre>\n</blockquote>\n\n<p><code>Framed</code> has two type parameters, but we only need to look at the second one, which is <code>websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;</code> here, to determine the <code>SinkError</code> type. Let's take a look at <a href=\"https://docs.rs/websocket/0.20.2/websocket/codec/ws/struct.MessageCodec.html\" rel=\"noreferrer\"><code>MessageCodec</code></a> now. (<em>Note: <code>websocket::codec::ws::MessageCodec</code> is <a href=\"https://docs.rs/websocket/0.20.2/websocket/async/index.html#reexports\" rel=\"noreferrer\">reexported</a> as <code>websocket::async::MessageCodec</code>.</em>)</p>\n\n<blockquote>\n<pre><code>impl&lt;M&gt; Decoder for MessageCodec&lt;M&gt;\nwhere\n    M: MessageTrait,\n  type Item = OwnedMessage\n  type Error = WebSocketError\n</code></pre>\n</blockquote>\n\n<p>Ah ha! The sink produces errors of type <a href=\"https://docs.rs/websocket/0.20.2/websocket/result/enum.WebSocketError.html\" rel=\"noreferrer\"><code>WebSocketError</code></a>.</p>\n\n<hr>\n\n<p>Now that we've figured out the types, let's go back to why we cared about the types in the first place. We were trying to understand why the constraint <code>Self::Error: From&lt;S::SinkError&gt;</code> wasn't met on the call to <code>forward</code>. We now know that the compiler is trying to resolve <code>(): From&lt;WebSocketError&gt;</code>. It looks like there's no <code>impl From&lt;WebSocketError&gt; for ()</code>. Let's verify this:</p>\n\n<pre><code>extern crate websocket;\n\nfn main() {\n    let a = websocket::result::WebSocketError::NoDataAvailable;\n    let () = From::from(a);\n}\n</code></pre>\n\n<p>Indeed, this fails to compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `(): std::convert::From&lt;websocket::WebSocketError&gt;` is not satisfied\n --&gt; src/main.rs:5:14\n  |\n5 |     let () = From::from(a);\n  |              ^^^^^^^^^^ the trait `std::convert::From&lt;websocket::WebSocketError&gt;` is not implemented for `()`\n  |\n  = note: required by `std::convert::From::from`\n</code></pre>\n\n<hr>\n\n<p>We can work around the missing implementation by using <a href=\"https://docs.rs/futures/0.1.17/futures/sink/trait.Sink.html#method.sink_map_err\" rel=\"noreferrer\"><code>sink_map_err</code></a> to change <code>sink</code>'s error type.</p>\n\n<pre><code>let (sink, stream) = s.split();\nlet sink = sink.sink_map_err(|_| ()); // &lt;&lt;&lt;&lt;&lt;\nrx\n    .forward(sink)\n    .and_then(|(a, sink)| {\n        sink.send(OwnedMessage::Close(None))\n    })\n</code></pre>\n\n<p>This solves the call to <code>forward</code>, but now the result of this closure doesn't compose with <code>upgrade.use_protocol(\"rust-websocket\").accept()</code>, which still has <code>WebSocketError</code> as its error type. It makes more sense to change <code>rx</code>'s error type instead. But how do we construct a <code>WebSocketError</code> from a <code>()</code>, which carries no information?</p>\n\n<p>You might be wondering, why does <code>Receiver</code> use <code>()</code> for its error type? If we look at the <a href=\"https://docs.rs/futures/0.1.17/src/futures/sync/mpsc/mod.rs.html#903-943\" rel=\"noreferrer\">source code</a>, we can see that in fact, <code>poll</code> <em>never</em> returns an error. I think it would be more appropriate if the error type was <code>!</code> (the never type) or some other void type, to clearly indicate that errors are impossible; there's an <a href=\"https://github.com/rust-lang-nursery/futures-rs/issues/476\" rel=\"noreferrer\">issue open on futures</a> requesting this change for futures 0.2.</p>\n\n<p>Since errors are impossible, we don't need to construct a <code>WebSocketError</code>; we can just diverge instead, for example by panicking.</p>\n\n<pre><code>fn worker(rx: Receiver&lt;OwnedMessage&gt;) {\n    let rx = rx.map_err(|()| panic!(\"Receiver should never fail!\"));\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    // bind to the server\n    let server = Server::bind(\"127.0.0.1:9000\", &amp;handle).unwrap();\n    let f = server.incoming()\n            // we don't wanna save the stream if it drops\n            .map_err(|InvalidConnection { error, .. }| error)\n            .for_each(|(upgrade, addr)| {\n                // accept the request to be a ws connection if it does\n                let f = upgrade\n                    .use_protocol(\"rust-websocket\")\n                    .accept()\n                    .and_then(|(s, _)| {\n                        let (sink, stream) = s.split();\n                        rx\n                            .forward(sink)\n                            .and_then(|(a, sink)| {\n                                sink.send(OwnedMessage::Close(None))\n                            })\n                    });\n\n                handle.spawn(f.map_err(move |e| println!(\"Err\"))\n                    .map(move |_| println!(\"Done\")));\n                Ok(())\n            });\n    core.run(f).expect(\"somerror\");\n}\n</code></pre>\n\n<p>Now, there's still an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n  --&gt; src/main.rs:43:31\n   |\n30 |     let rx = rx.map_err(|()| panic!(\"Receiver should never fail!\"));\n   |         -- captured outer variable\n...\n43 |                     .and_then(|(s, _)| {\n   |                               ^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n</code></pre>\n\n<p>Why is the closure trying to move <code>rx</code>? Because <code>forward</code> takes <code>self</code> by value. Why is the closure an <code>FnMut</code>? Watch out, <a href=\"https://docs.rs/futures/0.1.17/futures/future/trait.Future.html#method.and_then\" rel=\"noreferrer\"><code>Future::and_then</code></a> requires an <code>FnOnce</code> (it's valid to move a value from a captured variable into an <code>FnOnce</code> closure), but <a href=\"https://docs.rs/futures/0.1.17/futures/stream/trait.Stream.html#method.for_each\" rel=\"noreferrer\"><code>Stream::for_each</code></a> requires an <code>FnMut</code>. This makes sense: <code>for_each</code> will invoke the closure once for each incoming connection!</p>\n\n<p>The channels you're using are <a href=\"https://docs.rs/futures/0.1.17/futures/sync/mpsc/index.html\" rel=\"noreferrer\">multi-producer, <em>single-consumer</em></a> (hence the name <em>mpsc</em>), but you're trying to have multiple consumers here (each connection is trying to read from the receiver). I'll leave it to you to fix this design issue in your program. Remember that there can be multiple concurrent client connections!</p>\n"}], "owner": {"reputation": 113, "user_id": 3898280, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/81de1f2db0a1af22b79f708a1e5e53f9?s=128&d=identicon&r=PG&f=1", "display_name": "trimoq", "link": "https://stackoverflow.com/users/3898280/trimoq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1678, "favorite_count": 2, "accepted_answer_id": 47585440, "answer_count": 1, "score": 1, "last_activity_date": 1518414571, "creation_date": 1512075816, "last_edit_date": 1512138673, "question_id": 47582586, "link": "https://stackoverflow.com/questions/47582586/type-mismatch-resolving-the-error-type-when-forwarding-messages-from-a-futures-c", "title": "Type mismatch resolving the error type when forwarding messages from a futures channel to a WebSocket Sink", "body": "<p>I'm trying to wrap my head around futures in Rust but I am confused by this code which is supposed to send messages arriving at <code>rx</code> to <code>sink</code>:</p>\n\n<pre><code>extern crate futures;\nextern crate tokio_core;\nextern crate websocket;\n\nuse websocket::message::OwnedMessage;\nuse websocket::server::InvalidConnection;\nuse websocket::async::Server;\n\nuse tokio_core::reactor::Core;\nuse futures::{Future, Sink, Stream};\nuse futures::sync::mpsc;\nuse std::{thread, time};\nuse futures::sync::mpsc::Receiver;\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let (mut tx, rx) = mpsc::channel(5);\n    thread::spawn(|| worker(rx));\n    let mut i = 0;\n    loop {\n        let res = tx.clone().send(OwnedMessage::Text(format!(\"Test {}\", i)));\n        core.run(res);\n        i += 1;\n        let period = time::Duration::from_millis(200);\n        thread::sleep(period);\n    }\n}\n\nfn worker(rx: Receiver&lt;OwnedMessage&gt;) {\n    let mut core = Core::new().unwrap();\n    let handle = core.handle();\n    // bind to the server\n    let server = Server::bind(\"127.0.0.1:9000\", &amp;handle).unwrap();\n    let f = server.incoming()\n            // we don't wanna save the stream if it drops\n            .map_err(|InvalidConnection { error, .. }| error)\n            .for_each(|(upgrade, addr)| {\n                // accept the request to be a ws connection if it does\n                let f = upgrade\n                    .use_protocol(\"rust-websocket\")\n                    .accept()\n                    .and_then(|(s, _)| {\n                        let (sink, stream) = s.split();\n                        rx // using stream (echoing back) works\n                            .forward(sink)\n                            .map_err(|error| {\n                                error\n                            })\n                            .and_then(|(a, sink)| {\n                                sink.send(OwnedMessage::Close(None))\n                            })\n                    });\n\n                handle.spawn(f.map_err(move |e| println!(\"Err\"))\n                    .map(move |_| println!(\"Done\")));\n                Ok(())\n            });\n    core.run(f).expect(\"somerror\");\n}\n</code></pre>\n\n<p>As noted in the comment, using <code>stream</code> as input works fine. When using <code>rx</code>, the compiler complains about a type mismatch regarding the error types (I believe):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;futures::stream::SplitSink&lt;websocket::client::async::Framed&lt;tokio_core::net::TcpStream, websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;&gt; as futures::Sink&gt;::SinkError == ()`\n  --&gt; src/main.rs:47:26\n   |\n47 |                         .forward(sink)\n   |                          ^^^^^^^ expected enum `websocket::WebSocketError`, found ()\n   |\n   = note: expected type `websocket::WebSocketError`\n              found type `()`\n\nerror[E0599]: no method named `map_err` found for type `futures::stream::Forward&lt;futures::sync::mpsc::Receiver&lt;websocket::OwnedMessage&gt;, futures::stream::SplitSink&lt;websocket::client::async::Framed&lt;tokio_core::net::TcpStream, websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;&gt;&gt;` in the current scope\n  --&gt; src/main.rs:48:26\n   |\n48 |                         .map_err(|error| {\n   |                          ^^^^^^^\n   |\n   = note: the method `map_err` exists but the following trait bounds were not satisfied:\n           `futures::stream::Forward&lt;futures::sync::mpsc::Receiver&lt;websocket::OwnedMessage&gt;, futures::stream::SplitSink&lt;websocket::client::async::Framed&lt;tokio_core::net::TcpStream, websocket::async::MessageCodec&lt;websocket::OwnedMessage&gt;&gt;&gt;&gt; : futures::Future`\n</code></pre>\n\n<p>These are my dependencies:</p>\n\n<pre><code>[dependencies]\nwebsocket = \"0.20.0\"\nfutures = \"0.1\"\ntokio-core = \"0.1\"\n</code></pre>\n\n<p>What am I missing here?</p>\n"}, {"tags": ["qt", "rust", "qml", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 420, "user_id": 2607769, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/7kBPv.jpg?s=128&g=1", "display_name": "Olaf Japp", "link": "https://stackoverflow.com/users/2607769/olaf-japp"}, "edited": false, "score": 0, "creation_date": 1512124613, "post_id": 47578488, "comment_id": 82140007, "body": "Thx...I have altered my question. I have a couple of libQt5Core.so installed but not at the right location."}, {"owner": {"reputation": 420, "user_id": 2607769, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/7kBPv.jpg?s=128&g=1", "display_name": "Olaf Japp", "link": "https://stackoverflow.com/users/2607769/olaf-japp"}, "edited": false, "score": 0, "creation_date": 1512124757, "post_id": 47578488, "comment_id": 82140101, "body": "Is there also an install routine to install Qt runtime only under /usr/lib/x86...?"}], "tags": [], "owner": {"reputation": 157, "user_id": 3548976, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Vvnt1.jpg?s=128&g=1", "display_name": "VelocityRa", "link": "https://stackoverflow.com/users/3548976/velocityra"}, "is_accepted": false, "score": 0, "last_activity_date": 1512060826, "last_edit_date": 1512060826, "creation_date": 1512060481, "answer_id": 47578488, "question_id": 47578387, "link": "https://stackoverflow.com/questions/47578387/cargo-shows-an-error-compiling-qml-v0-0-9/47578488#47578488", "title": "Cargo shows an error compiling &quot;qml v0.0.9&quot;", "body": "<p>As you can see in the error, the issue is that the file <code>/usr/lib/x86_64-linux-gnu/</code><strong><code>libQt5Core.so</code></strong><code>.5.5.1</code> (which a Qt dynamic library) does not exist, which means that you need to install this version of Qt on your machine.</p>\n\n<p>If you're on Ubuntu or an Ubuntu-derived distro, you can follow the instructions <a href=\"https://wiki.qt.io/Install_Qt_5_on_Ubuntu#Installation_Guide\" rel=\"nofollow noreferrer\">here</a> to install it.</p>\n"}], "owner": {"reputation": 420, "user_id": 2607769, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/7kBPv.jpg?s=128&g=1", "display_name": "Olaf Japp", "link": "https://stackoverflow.com/users/2607769/olaf-japp"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 152, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1512483560, "creation_date": 1512060139, "last_edit_date": 1512483560, "question_id": 47578387, "link": "https://stackoverflow.com/questions/47578387/cargo-shows-an-error-compiling-qml-v0-0-9", "title": "Cargo shows an error compiling &quot;qml v0.0.9&quot;", "body": "<p>I tried to compile <a href=\"https://www.vandenoever.info/blog/2017/02/17/a-simple-rust-gui-with-qml.html\" rel=\"nofollow noreferrer\">a sample Rust program</a> which uses QML and got the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: failed to run custom build command for `qml v0.0.9`\nprocess didn't exit successfully: `/home/olaf/SourceCode/rust_projects/sousa/target/debug/build/qml-cf7d687f9f68bd13/build-script-build` (exit code: 101)\n--- stderr\nthread 'main' panicked at 'Cannot build qrc resource:\n-- The C compiler identification is GNU 5.4.0\n-- The CXX compiler identification is GNU 5.4.0\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /usr/bin/c++    \n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Found Doxygen: /usr/bin/doxygen (found version \\\"1.8.11\\\") \n-- Configuring incomplete, errors occurred!\nSee also \\\"/home/olaf/SourceCode/rust_projects/sousa/target/debug/build/qml-29ff7d8391813cc4/out/DOtherSide/build/CMakeFiles/CMakeOutput.log\\\".\"\n\"Klone nach \\'DOtherSide\\' ...\nCMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Core/Qt5CoreConfig.cmake:27 (message):\n  The imported target \\\"Qt5::Core\\\" references the file\n\n     \\\"/usr/lib/x86_64-linux-gnu/libQt5Core.so.5.5.1\\\"\n\n  but this file does not exist.  Possible reasons include:\n  * The file was deleted, renamed, or moved to another location.\n  * An install or uninstall procedure did not complete successfully.\n  * The installation package was faulty and contained\n\n     \\\"/usr/lib/x86_64-linux-gnu/cmake/Qt5Core/Qt5CoreConfig.cmake\\\"\n\n  but not all the files it references.\n\nCall Stack (most recent call first):\n  /usr/lib/x86_64-linux-gnu/cmake/Qt5Core/Qt5CoreConfig.cmake:43 (_qt5_Core_check_file_exists)\n  /usr/lib/x86_64-linux-gnu/cmake/Qt5Core/Qt5CoreConfig.cmake:134 (_populate_Core_target_properties)\n  lib/CMakeLists.txt:10 (find_package)\n\n\"', /home/olaf/.cargo/registry/src/github.com-1ecc6299db9ec823/qml-0.0.9/build.rs:32:8\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n</code></pre>\n\n<p>Edit:\nI have installed Qt 5.8, 5.9.1 and 5.9.3 but they are installed at my home folder ~/Qt and I think Cargo is looking somewhere else /usr/lib/...\nHow do I tell Cargo where to look for Qt?\nOr do I have to install a specific package of Qt under /usr/lib/...?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1512059642, "post_id": 47578136, "comment_id": 82113504, "body": "Curious why join isn&#39;t implemented for HashSet."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 4, "creation_date": 1512060061, "post_id": 47578136, "comment_id": 82113755, "body": "@Tshepang it&#39;s probably because <code>HashMap</code> and <code>HashSet</code> don&#39;t necessarily contain strings and even if they do, they are unordered."}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "edited": false, "score": 0, "creation_date": 1512067147, "post_id": 47578136, "comment_id": 82118090, "body": "Oh, didn&#39;t think of the ordered-ness of it all."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1512082248, "post_id": 47578136, "comment_id": 82125505, "body": "@ljedrz A <code>Vec</code> doesn&#39;t necessarily contain strings either :-) I think the ordering is the more pertinent concern."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 5, "last_activity_date": 1512059379, "creation_date": 1512059379, "answer_id": 47578136, "question_id": 47578011, "link": "https://stackoverflow.com/questions/47578011/how-to-join-elements-of-hashset-into-a-string-with-a-delimiter/47578136#47578136", "title": "How to join elements of HashSet into a String with a delimiter", "body": "<p>You can convert a <code>HashSet</code> into an <code>Iterator</code>, collect it and then use <code>.join()</code>:</p>\n\n<pre><code>use std::collections::HashSet;\n\nfn main() {\n    let mut books = HashSet::new();\n\n    books.insert(\"A Dance With Dragons\");\n    books.insert(\"To Kill a Mockingbird\");\n    books.insert(\"The Odyssey\");\n    books.insert(\"The Great Gatsby\");\n\n    println!(\"{}\", books.into_iter().collect::&lt;Vec&lt;&amp;str&gt;&gt;().join(\", \"));\n}\n</code></pre>\n\n<p>You could do the same with a <code>HashMap</code> - you would just need to extract its <code>.keys()</code> or <code>.values()</code> first, depending on which you want to join.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1512081362, "last_edit_date": 1512081362, "creation_date": 1512074483, "answer_id": 47582249, "question_id": 47578011, "link": "https://stackoverflow.com/questions/47578011/how-to-join-elements-of-hashset-into-a-string-with-a-delimiter/47582249#47582249", "title": "How to join elements of HashSet into a String with a delimiter", "body": "<p>More efficiently, you can <a href=\"https://crates.io/crates/itertools\" rel=\"noreferrer\">use itertools</a> to join an iterator without collecting it into a <code>Vec</code> first:</p>\n\n<pre><code>extern crate itertools;\n\nuse std::collections::HashSet;\nuse itertools::Itertools;\n\nfn main() {\n    let hash_set: HashSet&lt;_&gt; = [\"first\", \"last\"].iter().collect();\n\n    // Either of\n    println!(\"{}\", hash_set.iter().join(\", \"));\n    println!(\"{}\", itertools::join(&amp;hash_set, \", \"));\n}\n</code></pre>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1401, "favorite_count": 1, "accepted_answer_id": 47582249, "answer_count": 2, "score": 6, "last_activity_date": 1512081362, "creation_date": 1512058967, "last_edit_date": 1512074542, "question_id": 47578011, "link": "https://stackoverflow.com/questions/47578011/how-to-join-elements-of-hashset-into-a-string-with-a-delimiter", "title": "How to join elements of HashSet into a String with a delimiter", "body": "<p>I can do the following:</p>\n\n<pre><code>fn main() {\n    let vec = vec![\"first\", \"last\"];\n    println!(\"{}\", vec.join(\", \"));\n}\n</code></pre>\n\n<p>It gives this output:</p>\n\n<blockquote>\n  <p>first, last</p>\n</blockquote>\n\n<p>If I try to use <code>join</code> with a map type, it fails:</p>\n\n<blockquote>\n  <p>error[E0599]: no method named <code>join</code> found for type <code>std::collections::HashSet&lt;&amp;str&gt;</code> in the current scope</p>\n</blockquote>\n"}, {"tags": ["rust", "optional", "readability"], "answers": [{"comments": [{"owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 2, "creation_date": 1512043097, "post_id": 47571000, "comment_id": 82102636, "body": "Very valuable information. I didn&#39;t know that you can expand default types."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 8, "last_activity_date": 1512037207, "creation_date": 1512037207, "answer_id": 47571000, "question_id": 47570580, "link": "https://stackoverflow.com/questions/47570580/is-there-a-shortcut-for-as-ref-unwrap/47571000#47571000", "title": "Is there a shortcut for as_ref().unwrap()?", "body": "<p>I can't find anything like that, which is not surprising, since <code>unwrap</code> is generally discouraged anyway. If you want to handle the error case, you can do this:</p>\n\n<pre><code>if let Some(ref e) = car.engine { println!(\"foo {}\", e.serial); }\nelse { println!(\"nope\"); }\n</code></pre>\n\n<p>Otherwise, you can easily write your own function thanks to extension traits:</p>\n\n<pre><code>trait OptionExt {\n  type Value;\n  fn unwrap_ref(&amp;self) -&gt; &amp;Self::Value;\n  fn unwrap_mut(&amp;mut self) -&gt; &amp;mut Self::Value;\n}\n\nimpl &lt;T&gt; OptionExt for Option&lt;T&gt; {\n  type Value = T;\n  fn unwrap_ref(&amp;self) -&gt; &amp;T { self.as_ref().unwrap() }\n  fn unwrap_mut(&amp;mut self) -&gt; &amp;mut T { self.as_mut().unwrap() }\n}\n\n// Now you can write\nlet e = car.engine.unwrap_ref();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1512041046, "post_id": 47571608, "comment_id": 82101460, "body": "Actually, that feature is <a href=\"https://blog.rust-lang.org/2017/11/22/Rust-1.22.html\" rel=\"nofollow noreferrer\">already available</a>."}, {"owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "edited": false, "score": 0, "creation_date": 1512041599, "post_id": 47571608, "comment_id": 82101809, "body": "This seems to be more idiomatic than the other answer, so I&#39;ll check this. Both answers are really good."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 8, "last_activity_date": 1512041371, "last_edit_date": 1512041371, "creation_date": 1512039045, "answer_id": 47571608, "question_id": 47570580, "link": "https://stackoverflow.com/questions/47570580/is-there-a-shortcut-for-as-ref-unwrap/47571608#47571608", "title": "Is there a shortcut for as_ref().unwrap()?", "body": "<p>You might be able to take advantage of the <code>?</code> operator that (since Rust 1.22) also works with the <code>Option&lt;T&gt;</code> type (like it does with <code>Result&lt;T, E&gt;</code>):</p>\n\n<pre><code>struct Foo;\n\nstruct Bar {\n    foo: Option&lt;Foo&gt;,\n    // other optional fields\n}\n\nimpl Bar {\n    fn use_optional_fields(&amp;self) -&gt; Option&lt;&amp;Foo&gt; {\n        let foo = self.foo.as_ref()?;\n        // use optional fields\n        Some(foo)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1025, "user_id": 3021309, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/b70e762c0b1409c1f2ce8c994e89b783?s=128&d=identicon&r=PG&f=1", "display_name": "itmuckel", "link": "https://stackoverflow.com/users/3021309/itmuckel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2483, "favorite_count": 0, "accepted_answer_id": 47571608, "answer_count": 2, "score": 7, "last_activity_date": 1512042827, "creation_date": 1512035983, "last_edit_date": 1512042827, "question_id": 47570580, "link": "https://stackoverflow.com/questions/47570580/is-there-a-shortcut-for-as-ref-unwrap", "title": "Is there a shortcut for as_ref().unwrap()?", "body": "<p>In my code I have a lot of structs with <code>Option&lt;T&gt;</code>s in them. I need to work with them in a lot of places, so my code is littered with struct accesses like <code>car.engine.as_ref().unwrap()</code>. This is pain for code readability.</p>\n\n<p>Is there a default function on the <code>Option&lt;T&gt;</code> type that does the same? Like <code>car.engine.get()</code>? Of course I could write accessor functions for every struct member, but this seems like an overkill for something so basic. Am I doing it wrong?</p>\n\n<p>I don't know much about macros, but is there a way to shorten it with macros?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 3358, "user_id": 852385, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5c0eac51aaa99541fb966854b5dcb131?s=128&d=identicon&r=PG", "display_name": "Helin Wang", "link": "https://stackoverflow.com/users/852385/helin-wang"}, "edited": false, "score": 2, "creation_date": 1561329821, "post_id": 47855850, "comment_id": 100016219, "body": "Worked for me after 30s of waiting, without doing anything."}, {"owner": {"reputation": 193600, "user_id": 87189, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/98e7d6edce863e7a1bf8199b082eb25e?s=128&d=identicon&r=PG", "display_name": "tadman", "link": "https://stackoverflow.com/users/87189/tadman"}, "edited": false, "score": 14, "creation_date": 1605836602, "post_id": 47855850, "comment_id": 114781545, "body": "I had to remove <code>~&#47;.cargo&#47;.package-cache</code> as well."}], "tags": [], "owner": {"reputation": 2095, "user_id": 434248, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/b8d7a416a9c6f193d9e38f9e031513bd?s=128&d=identicon&r=PG", "display_name": "jvatic", "link": "https://stackoverflow.com/users/434248/jvatic"}, "is_accepted": true, "score": 72, "last_activity_date": 1608226449, "last_edit_date": 1608226449, "creation_date": 1513519043, "answer_id": 47855850, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/47855850#47855850", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>I had the same issue and got around it with <code>rm -rf ~/.cargo/registry/index/*</code>.</p>\n<p><strong>Edit:</strong> I suggest looking at <a href=\"https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a#answer-53066206\">this answer</a> first.</p>\n"}, {"tags": [], "owner": {"reputation": 8871, "user_id": 1260906, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/aPM5A.png?s=128&g=1", "display_name": "Afr", "link": "https://stackoverflow.com/users/1260906/afr"}, "is_accepted": false, "score": 3, "last_activity_date": 1520197850, "last_edit_date": 1520197850, "creation_date": 1518082662, "answer_id": 48682106, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/48682106#48682106", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>Before removing the Cargo registry index as suggested in the accepted answer, make sure no other process is currently compiling Parity or any other Rust package.</p>\n"}, {"comments": [{"owner": {"reputation": 689, "user_id": 7669319, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-Y6TfqqfQ2K8/AAAAAAAAAAI/AAAAAAAAAGA/0u_bhX6ys1U/photo.jpg?sz=128", "display_name": "Felix Jassler", "link": "https://stackoverflow.com/users/7669319/felix-jassler"}, "edited": false, "score": 4, "creation_date": 1556991393, "post_id": 49634470, "comment_id": 98619524, "body": "Seems less hacky, but for some reason only the accepted answer solved my problem. Is it doing the same?"}, {"owner": {"reputation": 207, "user_id": 8865811, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BGfwF.jpg?s=128&g=1", "display_name": "Prajwal Dhatwalia", "link": "https://stackoverflow.com/users/8865811/prajwal-dhatwalia"}, "reply_to_user": {"reputation": 689, "user_id": 7669319, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-Y6TfqqfQ2K8/AAAAAAAAAAI/AAAAAAAAAGA/0u_bhX6ys1U/photo.jpg?sz=128", "display_name": "Felix Jassler", "link": "https://stackoverflow.com/users/7669319/felix-jassler"}, "edited": false, "score": 1, "creation_date": 1566450533, "post_id": 49634470, "comment_id": 101661231, "body": "@FelixJassler No. It deletes the entire target folder of the project you run this command for, unlike the accepted answer."}], "tags": [], "owner": {"reputation": 1870, "user_id": 1062441, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ca04455902d1b207348b6d406432718f?s=128&d=identicon&r=PG", "display_name": "Russel Winder", "link": "https://stackoverflow.com/users/1062441/russel-winder"}, "is_accepted": false, "score": 94, "last_activity_date": 1522771298, "creation_date": 1522771298, "answer_id": 49634470, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/49634470#49634470", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>Running <code>cargo clean</code> seems to fix the problem.</p>\n"}, {"comments": [{"owner": {"reputation": 1040, "user_id": 994804, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5df65fe3a40cdb46a681d98572ffdbd4?s=128&d=identicon&r=PG", "display_name": "JNissi", "link": "https://stackoverflow.com/users/994804/jnissi"}, "edited": false, "score": 0, "creation_date": 1534397066, "post_id": 51388442, "comment_id": 90691620, "body": "The short answer is: If you have a Jetbrains IDE open, try closing it. Happened to me on Linux + IDEA."}], "tags": [], "owner": {"reputation": 3360, "user_id": 3208553, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/Tjyir.png?s=128&g=1", "display_name": "Luke Schoen", "link": "https://stackoverflow.com/users/3208553/luke-schoen"}, "is_accepted": false, "score": 3, "last_activity_date": 1531853535, "creation_date": 1531853535, "answer_id": 51388442, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/51388442#51388442", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>I tried to create a Polkadot Node by following the <a href=\"https://github.com/paritytech/polkadot\" rel=\"nofollow noreferrer\">Readme</a> instructions.</p>\n\n<p>I was able to build it by running the following commands (copy/paste into Bash Terminal):</p>\n\n<pre><code>git clone https://github.com/paritytech/polkadot;\ncd polkadot; git checkout master;\nrustup update nightly;\nrustup target add wasm32-unknown-unknown --toolchain nightly;\nrustup update stable;\nrustup default stable;\ncargo install --git https://github.com/alexcrichton/wasm-gc --force;\ncargo install --git https://github.com/pepyakin/wasm-export-table.git --force;\nbrew install openssl; brew upgrade openssl;\nrustc --version; cargo --version;\n./build.sh;\ncargo build;\ncargo run -- --help;\n./target/debug/polkadot --help;\n</code></pre>\n\n<p>I then tried to run a Polkadot Node with the following commands (which are equivalent):</p>\n\n<pre><code>./target/debug/polkadot -- --chain=dev --validator --key Alice -d /tmp/alice;\ncargo run -- --chain=dev --validator --key Alice -d /tmp/alice;\n</code></pre>\n\n<p>But instead it showed the following:</p>\n\n<pre><code>Blocking waiting for file lock on the git checkouts\nBlocking waiting for file lock on build directory\n</code></pre>\n\n<p>I found it was caused by CLion (Jetbrains IDE).</p>\n\n<p>I solved the problem by closing CLion. I used Visual Studio Code editor instead, which also allows for debugging Rust code with breakpoints</p>\n"}, {"comments": [{"owner": {"reputation": 1719, "user_id": 4130114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YxSDJ.jpg?s=128&g=1", "display_name": "Hom Bahrani", "link": "https://stackoverflow.com/users/4130114/hom-bahrani"}, "edited": false, "score": 3, "creation_date": 1594722127, "post_id": 53066206, "comment_id": 111218314, "body": "This is correct, in my case it was the cargo extension in VS Code which was automatically compiling my project"}, {"owner": {"reputation": 94, "user_id": 4248352, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/WdpE3.png?s=128&g=1", "display_name": "June Wenston", "link": "https://stackoverflow.com/users/4248352/june-wenston"}, "reply_to_user": {"reputation": 1719, "user_id": 4130114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YxSDJ.jpg?s=128&g=1", "display_name": "Hom Bahrani", "link": "https://stackoverflow.com/users/4130114/hom-bahrani"}, "edited": false, "score": 0, "creation_date": 1596528821, "post_id": 53066206, "comment_id": 111832233, "body": "Same as @HomamBahrani. I think this answer reveal the root cause should be ranked higher."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 59, "last_activity_date": 1540908655, "last_edit_date": 1540908655, "creation_date": 1540908593, "answer_id": 53066206, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/53066206#53066206", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>This happens when you run 2 compilations of the same project at the same time. The compiler uses a lock file to avoid having data race issues. There are some possibilities:</p>\n\n<ul>\n<li><p>If you ran the 2 compilations yourself, the solution is obvious: you need to cancel one of them.</p></li>\n<li><p>If you use an IDE that automatically compiles your project: you can wait for the job to be finished or close the IDE. If it does not work, this is probably because of RLS hanging out. You can just <code>pkill rls</code> to solve the issue.</p></li>\n<li><p>As a last resort, you can remove the lock forcefully: <code>rm -rf ~/.cargo/registry/index/*</code> as said in <a href=\"https://stackoverflow.com/a/47855850/4498831\">another answer</a>.</p></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 471, "user_id": 8358429, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-tLF76aoPijE/AAAAAAAAAAI/AAAAAAAABxU/Uq6Opkiftnc/photo.jpg?sz=128", "display_name": "Wilfried Kopp", "link": "https://stackoverflow.com/users/8358429/wilfried-kopp"}, "is_accepted": false, "score": 24, "last_activity_date": 1566055495, "creation_date": 1566055495, "answer_id": 57537576, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/57537576#57537576", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>It is important to ensure you have no other rls or cargo running. \n<code>sudo pkill rls cargo</code> is a good way to ensure they are not.</p>\n"}, {"tags": [], "owner": {"reputation": 1719, "user_id": 4130114, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/YxSDJ.jpg?s=128&g=1", "display_name": "Hom Bahrani", "link": "https://stackoverflow.com/users/4130114/hom-bahrani"}, "is_accepted": false, "score": 9, "last_activity_date": 1566581065, "creation_date": 1566581065, "answer_id": 57630679, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/57630679#57630679", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>You usually get this error when you run cargo build command twice at the same time. If you are using an IDE check if a plugin is running a cargo command in the background, this was the case for me with VS Code.</p>\n"}, {"comments": [{"owner": {"reputation": 1121, "user_id": 5498631, "user_type": "registered", "accept_rate": 82, "profile_image": "https://i.stack.imgur.com/kVFxJ.jpg?s=128&g=1", "display_name": "Ramesh Kithsiri HettiArachchi", "link": "https://stackoverflow.com/users/5498631/ramesh-kithsiri-hettiarachchi"}, "edited": false, "score": 0, "creation_date": 1578681673, "post_id": 58159694, "comment_id": 105531317, "body": "I have closed my IDE while compiling. This solution was fixed my issue."}, {"owner": {"reputation": 6009, "user_id": 56690, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/673b3af90381f26882b7e7283ab137fa?s=128&d=identicon&r=PG", "display_name": "Bo Jeanes", "link": "https://stackoverflow.com/users/56690/bo-jeanes"}, "edited": false, "score": 0, "creation_date": 1589783102, "post_id": 58159694, "comment_id": 109419011, "body": "Yup, I had <code>^Z</code> inside Neovim and it must have been in the middle of some <code>cargo check</code>  (or similar) pass when I did so."}], "tags": [], "owner": {"reputation": 1106, "user_id": 6396174, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MHvxZ.jpg?s=128&g=1", "display_name": "bmdelacruz", "link": "https://stackoverflow.com/users/6396174/bmdelacruz"}, "is_accepted": false, "score": 15, "last_activity_date": 1569796023, "creation_date": 1569796023, "answer_id": 58159694, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/58159694#58159694", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>Removing <code>rm $CARGO_HOME/.package-cache</code> worked for me.</p>\n\n<p>I accidentally hit <code>ctrl+z</code> instead of <code>ctrl+c</code> while executing <code>cargo run</code> and the next execution of <code>cargo run</code> showed me <code>Blocking waiting for file lock on the registry index</code>. I removed the said file and then it worked again.</p>\n"}, {"tags": [], "owner": {"reputation": 19712, "user_id": 418400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/eca5ce283c385cc58d40708f6a97194b?s=128&d=identicon&r=PG&f=1", "display_name": "Ben", "link": "https://stackoverflow.com/users/418400/ben"}, "is_accepted": false, "score": 7, "last_activity_date": 1570285360, "creation_date": 1570285360, "answer_id": 58249207, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/58249207#58249207", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>My issue was the IDE was running cargo and had locked the directory. Try closing your IDE</p>\n"}, {"tags": [], "owner": {"reputation": 101, "user_id": 11344705, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-E-PjRpT2oXQ/AAAAAAAAAAI/AAAAAAAAFTE/JnpRxfhz_0E/photo.jpg?sz=128", "display_name": "Levit Kanner", "link": "https://stackoverflow.com/users/11344705/levit-kanner"}, "is_accepted": false, "score": 1, "last_activity_date": 1594905317, "creation_date": 1594905317, "answer_id": 62935602, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/62935602#62935602", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>if you ever hit &quot;Blocking waiting for file lock on package cache&quot;,</p>\n<p>Run the command below and run cargo again.\nrm $CARGO_HOME/.package-cache</p>\n"}, {"tags": [], "owner": {"reputation": 97, "user_id": 5989546, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/LTLOI.png?s=128&g=1", "display_name": "bendeg", "link": "https://stackoverflow.com/users/5989546/bendeg"}, "is_accepted": false, "score": 2, "last_activity_date": 1596396005, "creation_date": 1596396005, "answer_id": 63220129, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/63220129#63220129", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>Same issue in VScode : if you've installed RLS</p>\n<ol>\n<li>File | Preferences | Settings</li>\n<li>Search for &quot;rls&quot;</li>\n<li>In &quot;rust&quot; extension, uncheck &quot;Start RLS automatically when opening a file or project&quot;</li>\n</ol>\n<p>Re-open your project, and it should be solved.</p>\n"}, {"comments": [{"owner": {"reputation": 3393, "user_id": 214143, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/61025b3df4700620a5d9099293f23a5d?s=128&d=identicon&r=PG", "display_name": "Jason Aller", "link": "https://stackoverflow.com/users/214143/jason-aller"}, "edited": false, "score": 0, "creation_date": 1597707692, "post_id": 63455346, "comment_id": 112216302, "body": "There is an existing answer that covers this. Can you expand on this answer?"}], "tags": [], "owner": {"reputation": 22, "user_id": 12095664, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3ce152d5eb675f370a1b1000a0bfdd4?s=128&d=identicon&r=PG&f=1", "display_name": "ax39T-Venom", "link": "https://stackoverflow.com/users/12095664/ax39t-venom"}, "is_accepted": false, "score": 0, "last_activity_date": 1597683449, "creation_date": 1597683449, "answer_id": 63455346, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/63455346#63455346", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>You Should Temporarily Stop the <em><strong><code>rls</code></strong></em> Process.</p>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 12342634, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7765dabdd82631d11b8e82663d19ade9?s=128&d=identicon&r=PG&f=1", "display_name": "takeItIzzy", "link": "https://stackoverflow.com/users/12342634/takeitizzy"}, "is_accepted": false, "score": -1, "last_activity_date": 1599060432, "creation_date": 1599060432, "answer_id": 63708710, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/63708710#63708710", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>If you are sure that there is no other cargo process executing, but this problem still occur frequently, it might be your network problem.</p>\n"}, {"tags": [], "owner": {"reputation": 305, "user_id": 6655884, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/JBKc9.jpg?s=128&g=1", "display_name": "Lucas Zanella", "link": "https://stackoverflow.com/users/6655884/lucas-zanella"}, "is_accepted": false, "score": 4, "last_activity_date": 1601267440, "creation_date": 1601267440, "answer_id": 64095983, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/64095983#64095983", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>My VSCode intellisense was working on a build. Make sure your intellisense is not builing. It displays a little gear icon spinning on bottom. Happens mostly when you update <code>Cargo.toml</code></p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 10700322, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-WVoKexL2KwI/AAAAAAAAAAI/AAAAAAAAQe0/YdV8FHN9OSU/photo.jpg?sz=128", "display_name": "Gabe", "link": "https://stackoverflow.com/users/10700322/gabe"}, "is_accepted": false, "score": 0, "last_activity_date": 1613200544, "creation_date": 1613200544, "answer_id": 66182717, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a/66182717#66182717", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>On the risk of coming late to the party, while cargo, rls or rust-analyzer are responsible for the lock to avoid data races.\nAn underlying issue maybe the number of <code>inotify filewatchers</code>.</p>\n<p>Usually they work fine by spawning a new watcher and wait their turn but if they run out of watchers space this can be a problem.\nAgreeing to all the above solutions but suggesting to check the number of <code>max_user_watches</code></p>\n<pre><code># view current settings\ncat /proc/sys/fs/inotify/max_user_watches\n\n# increasing it, /etc/sysctl.conf\nfs.inotify.max_user_watches=524288\n\n# The new value can then be loaded in by running s\n$sudo sysctl -p.\n</code></pre>\n"}], "owner": {"reputation": 3319, "user_id": 1008162, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/3cc96f948b570ebccf311078a6f7aab0?s=128&d=identicon&r=PG", "display_name": "Naruto Sempai", "link": "https://stackoverflow.com/users/1008162/naruto-sempai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 32271, "favorite_count": 11, "accepted_answer_id": 47855850, "answer_count": 15, "score": 80, "last_activity_date": 1613200544, "creation_date": 1512010707, "last_edit_date": 1558450011, "question_id": 47565203, "link": "https://stackoverflow.com/questions/47565203/cargo-build-hangs-with-blocking-waiting-for-file-lock-on-the-registry-index-a", "title": "Cargo build hangs with &quot; Blocking waiting for file lock on the registry index&quot; after building parity from source", "body": "<p>I followed the <a href=\"https://github.com/paritytech/parity#build-from-source\" rel=\"noreferrer\">readme</a> instructions for building <a href=\"https://www.parity.io/\" rel=\"noreferrer\">Parity</a> from source and then I execute this command:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo build --release\n</code></pre>\n\n<p>and then:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>~/.cargo/bin/cargo build --release\n</code></pre>\n\n<p>.. as instructed; both of which cause me to receive the following message while the prompt hangs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> Blocking waiting for file lock on the registry index\n</code></pre>\n\n<p>I'm on a Mac.</p>\n"}]