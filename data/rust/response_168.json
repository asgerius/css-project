[{"tags": ["casting", "rust", "polymorphism", "traits"], "answers": [{"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 2, "last_activity_date": 1522272330, "creation_date": 1522272330, "answer_id": 49544433, "question_id": 49543778, "link": "https://stackoverflow.com/questions/49543778/why-cant-i-cast-a-box-with-an-extended-trait-to-a-box-with-the-base-trait/49544433#49544433", "title": "Why can&#39;t I cast a Box with an extended trait to a Box with the base trait?", "body": "<p>The short answer is because <a href=\"https://stackoverflow.com/a/45636553/124538\">traits are not interfaces</a>.</p>\n\n<p>The long answer is because a <code>&amp;Base</code> trait object and a <code>&amp;Derived</code> trait object are not the same thing. The <a href=\"https://en.wikipedia.org/wiki/Virtual_method_table\" rel=\"nofollow noreferrer\">vtables</a> are different because <code>Derived</code> and <code>Base</code> are different traits. The vtable for <code>Derived</code> would include all of <code>Dervied</code>'s methods as well as all of <code>Base</code>'s while the vtable for <code>&amp;Base</code> would only include <code>Base</code>'s methods. </p>\n\n<p>Now, obviously, <code>Base</code>'s methods <strong>are</strong> in <code>&amp;Derived</code>'s vtable. So perhaps you could do something clever and get the behavior you want:</p>\n\n<ol>\n<li><p>If the <code>Base</code>'s methods were listed first in <code>&amp;Derived</code>'s vtable, then you could just cast <code>&amp;Derived</code> to <code>&amp;Base</code> and that would work. However, <code>&amp;Derived</code> and <code>&amp;Base</code> vtables have different lengths and doing so would chop off everything past the end of <code>&amp;Base</code>. So if you try to call a method on that object which is part of <code>Derived</code>, <a href=\"https://www.quora.com/Why-is-casting-a-base-object-to-derived-considered-wrong-or-incorrect-in-C++/answer/John-Purcell-4\" rel=\"nofollow noreferrer\">you'll invoke undefined behavior</a>. </p></li>\n<li><p>You could run some magic code which would analyze the definitions of <code>&amp;Base</code> and <code>&amp;Derived</code> and be able to construct a vtable for <code>&amp;Base</code> from <code>&amp;Derived</code>. This would require additional information at runtime about these types and their layout. This would also have a non-zero performance cost in addition to the additional memory usage. One of the basic principles of Rust is \"zero cost abstractions\" which generally means that potentially expensive operations are explicit and not implicit (if <code>let a: Box&lt;Base&gt; = b;</code> did this, it would generally be considered too implicit). </p></li>\n</ol>\n\n<hr>\n\n<p>It's difficult to say in general what a better pattern is. If you are modeling a closed-set of items, enums are generally a better way to go:</p>\n\n<pre><code>enum Animal {\n  Dog { name: String, age: u8 },\n  Cat { name: String, age: u8, sleeping: bool },\n  Fish { name: String, age: u8, in_ocean: bool },\n}\n</code></pre>\n\n<p>If you are trying to do something more complicated, <a href=\"https://en.wikipedia.org/wiki/Entity%E2%80%93component%E2%80%93system\" rel=\"nofollow noreferrer\">Entity Component Systems</a> like <a href=\"https://docs.rs/specs/0.10.0/specs/\" rel=\"nofollow noreferrer\"><code>specs</code></a> can give you a lot more flexibility than a simple enum.</p>\n"}], "owner": {"reputation": 1146, "user_id": 1691407, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fa0995371c30cd490847ce0dde170dbd?s=128&d=identicon&r=PG", "display_name": "bofjas", "link": "https://stackoverflow.com/users/1691407/bofjas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 312, "favorite_count": 0, "closed_date": 1522276154, "accepted_answer_id": 49544433, "answer_count": 1, "score": 1, "last_activity_date": 1522272330, "creation_date": 1522269557, "question_id": 49543778, "link": "https://stackoverflow.com/questions/49543778/why-cant-i-cast-a-box-with-an-extended-trait-to-a-box-with-the-base-trait", "closed_reason": "Duplicate", "title": "Why can&#39;t I cast a Box with an extended trait to a Box with the base trait?", "body": "<p>Given the code</p>\n\n<pre><code>trait Base { }\n\ntrait Derived : Base { }\n\nstruct Foo { }\n\nimpl Base for Foo { }\n\nimpl Derived for Foo { }\n\nfn main()\n{\n    let b : Box&lt;Derived&gt; = Box::new( Foo { } );\n    let a : Box&lt;Base&gt; = b;\n}\n</code></pre>\n\n<p>When I compile as I'm sure you know I get the following error message:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:14:25\n   |\n14 |     let a : Box&lt;Base&gt; = b;\n   |                         ^ expected trait `Base`, found trait `Derived`\n   |\n   = note: expected type `std::boxed::Box&lt;Base&gt;`\n              found type `std::boxed::Box&lt;Derived&gt;`\n</code></pre>\n\n<p>Why am I not allowed to do this? If a Box contains a Dervied it is guaranteed that this also contains a Base. Is there any way to do this? And if not, what is a common way to for instance store a vector of different Traits that all have the same base Trait?</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 145, "user_id": 8110881, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/L2H3B.jpg?s=128&g=1", "display_name": "Kenneth", "link": "https://stackoverflow.com/users/8110881/kenneth"}, "edited": false, "score": 1, "creation_date": 1522291462, "post_id": 49540402, "comment_id": 86101780, "body": "Thank you very much! and thank you for you editing to the question!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1566309860, "last_edit_date": 1566309860, "creation_date": 1522256836, "answer_id": 49540402, "question_id": 49540139, "link": "https://stackoverflow.com/questions/49540139/how-to-get-the-number-of-keys-in-a-hashmap-after-inserting-or-updating-a-value/49540402#49540402", "title": "How to get the number of keys in a HashMap after inserting or updating a value?", "body": "<p>Choose one of:</p>\n\n<ol>\n<li><p>Use Rust 2018 or another version of Rust with <a href=\"https://stackoverflow.com/q/50251487/155423\"><em>non-lexical lifetimes</em></a>:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    let count = map.entry(\"Tom\").or_insert(0);\n    *count += 1;\n\n    let size = map.keys().len();\n    println!(\"{} men found\", size);\n}\n</code></pre></li>\n<li><p>Don't create a temporary value:</p>\n\n<pre><code>*map.entry(\"Tom\").or_insert(0) += 1;\n</code></pre></li>\n<li><p>Add a block to constrain the borrow:</p>\n\n<pre><code>{\n    let count = map.entry(\"Tom\").or_insert(0);\n    *count += 1;\n}\n</code></pre></li>\n</ol>\n"}], "owner": {"reputation": 145, "user_id": 8110881, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/L2H3B.jpg?s=128&g=1", "display_name": "Kenneth", "link": "https://stackoverflow.com/users/8110881/kenneth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2009, "favorite_count": 0, "accepted_answer_id": 49540402, "answer_count": 1, "score": 6, "last_activity_date": 1566309860, "creation_date": 1522255826, "last_edit_date": 1522256665, "question_id": 49540139, "link": "https://stackoverflow.com/questions/49540139/how-to-get-the-number-of-keys-in-a-hashmap-after-inserting-or-updating-a-value", "title": "How to get the number of keys in a HashMap after inserting or updating a value?", "body": "<p>I want to insert or update a value in the map, and then get the number of keys.</p>\n\n<pre><code> use std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    let count = map.entry(\"Tom\").or_insert(0);\n    *count += 1;\n\n    let size = map.keys().len();\n    println!(\"{} men found\", size);\n}\n</code></pre>\n\n<p>The compiler error:  </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `map` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:8:16\n   |\n5  |     let count = map.entry(\"Tom\").or_insert(0);\n   |                 --- mutable borrow occurs here\n...\n8  |     let size = map.keys().len();\n   |                ^^^ immutable borrow occurs here\n9  |     println!(\"{} men found\", size);\n10 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>Is there any way to work around this? Is the way I wrote it wrong?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1522253976, "post_id": 49539321, "comment_id": 86086269, "body": "I took the liberty of moving the code verbatim into the question from those links. However, you may wish to improve your code further. In particular, can you reproduce the issue without nested modules? A link to the code in the <a href=\"//play.rust-lang.org\" rel=\"nofollow noreferrer\">Rust Playground</a> would also be quite useful. Also, please see what makes a proper <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1522257547, "post_id": 49539321, "comment_id": 86088407, "body": "Have you taken the time to read the excellent (free!) book <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\"><i>The Rust Programming Language</i></a>? Your code shows some gaps in knowledge about Rust concepts like methods and enums that are covered by this introductory resource. There&#39;s entire chapters dedicated to <a href=\"https://doc.rust-lang.org/book/second-edition/ch06-00-enums.html\" rel=\"nofollow noreferrer\">enums</a> and <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-03-method-syntax.html\" rel=\"nofollow noreferrer\">methods</a>."}], "answers": [{"tags": [], "owner": {"reputation": 1786, "user_id": 4099287, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-OMz777BPLQI/AAAAAAAAAAI/AAAAAAAAFcM/tV8IW2TybOw/photo.jpg?sz=128", "display_name": "Kevin M Granger", "link": "https://stackoverflow.com/users/4099287/kevin-m-granger"}, "is_accepted": false, "score": 3, "last_activity_date": 1522259497, "last_edit_date": 1522259497, "creation_date": 1522259321, "answer_id": 49541060, "question_id": 49539321, "link": "https://stackoverflow.com/questions/49539321/how-to-store-and-access-from-impl-based-on-an-enum/49541060#49541060", "title": "How to store and access from impl based on an enum?", "body": "<p>I think you're confusing the concept of a <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-00-structs.html\" rel=\"nofollow noreferrer\">struct</a> with the concept of an <a href=\"https://doc.rust-lang.org/book/second-edition/ch06-00-enums.html\" rel=\"nofollow noreferrer\">enum</a>.</p>\n\n<p>Structs <em>struct</em>ure your data in a certain way, while enums present <em>enum</em>erated choices for how to structure data.</p>\n\n<pre><code>struct Baz {\n    foo: String,\n    bar: u64\n}\n</code></pre>\n\n<p>This holds a <code>String</code> <em>and</em> a <code>u64</code>.</p>\n\n<pre><code>enum Baz {\n    Foo(String),\n    Bar(u64),\n}\n</code></pre>\n\n<p>This holds a <code>String</code> <em>or</em> a <code>u64</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 1455, "user_id": 6073823, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iK5jZ.jpg?s=128&g=1", "display_name": "S&#248;ren Mortensen", "link": "https://stackoverflow.com/users/6073823/s%c3%b8ren-mortensen"}, "is_accepted": false, "score": 1, "last_activity_date": 1522322273, "creation_date": 1522322273, "answer_id": 49554723, "question_id": 49539321, "link": "https://stackoverflow.com/questions/49539321/how-to-store-and-access-from-impl-based-on-an-enum/49554723#49554723", "title": "How to store and access from impl based on an enum?", "body": "<blockquote>\n  <p>Is it just a syntax mistake, or am I misunderstanding the concept in general?</p>\n</blockquote>\n\n<p>You're misunderstanding the concept in general. Buckle up...</p>\n\n<hr>\n\n<blockquote>\n<pre><code>pub enum Baz {  \n    // My data structure has a string and a number  \n    Foo(String),\n    Bar(u64),\n}\n</code></pre>\n</blockquote>\n\n<p>Your data structure does not have a string and a number. Your data structure is either a <code>Baz::Foo</code>, in which case it contains a <code>String</code>, or a <code>Baz::Bar</code>, in which case it contains a <code>u64</code>.</p>\n\n<p>It appears that what you're looking for is not an <code>enum</code>, but a <code>struct</code>.</p>\n\n<pre><code>pub struct Baz {\n    foo: String,\n    bar: u64,\n}\n</code></pre>\n\n<p>This struct, unlike your enum, contains a string <em>and</em> a number.</p>\n\n<p>This is an illustration of the general difference, which is that enums list different \"variants\", of which instances can be <em>one and only one</em>. In your definition, <code>Foo</code> and <code>Bar</code> are <em>variants</em>.</p>\n\n<p>Structs, on the other hand, define a list of fields, <em>all of which</em> must be present in instances. If you want a more detailed explanation, please see <a href=\"https://stackoverflow.com/a/48756348/6073823\">my answer to this question</a>, or as @Shepmaster suggested in <a href=\"https://stackoverflow.com/questions/49539321/how-to-store-and-access-from-impl-based-on-an-enum#comment86088407_49539321\">this comment</a>, take a look at <em>The Rust Programming Language</em>.</p>\n\n<hr>\n\n<blockquote>\n<pre><code>fn main() {\n    let x: data::Baz;\n    x::Foo(\"mystring\".to_string());\n    x::Bar(42);\n    x.get(Baz::Bar); // I expect \"42\" here as string\n}\n</code></pre>\n</blockquote>\n\n<p>Again, I can see what you're trying to do. The intention is to create an instance of <code>Baz</code>, store it in <code>x</code>, set the string to <code>\"mystring\"</code>, and set the number to <code>42</code>. However, because <code>Baz</code> is an enum, what you're actually doing is creating two separate instances of <code>Baz</code>:</p>\n\n<pre><code>fn main() {\n    // This creates a `Baz::Foo` containing a string, and stores it\n    // in `foo`.\n    let foo = Baz::Foo(\"mystring\".to_string());\n\n    // This creates a `Baz::Bar` containing a number, and stores it\n    // in `bar`.\n    let bar = Baz::Bar(42);\n\n    // You can get the value out in a number of ways. This is one:\n    match foo {\n        Baz::Foo(string) =&gt; println!(\"{}\", string), // prints \"mystring\"\n        Baz::Bar(number) =&gt; println!(\"{}\", number),\n    }\n\n    match bar {\n        Baz::Foo(string) =&gt; println!(\"{}\", string),\n        Baz::Bar(number) =&gt; println!(\"{}\", number), // prints \"42\"\n    }\n}\n</code></pre>\n\n<p>What you want to do instead, using the definition of <code>Baz</code> as a <code>struct</code>, is the following:</p>\n\n<pre><code>fn main() {\n    let qux = Baz {\n        foo: \"mystring\".to_string(),\n        bar: 42,\n    };\n\n    // Get the value of `foo` and print it.\n    println!(\"{}\", qux.foo); // prints \"mystring\"\n\n    // Get the value of `bar` and print it.\n    println!(\"{}\", qux.bar); // prints \"42\"\n}\n</code></pre>\n"}], "owner": {"reputation": 21, "user_id": 9565040, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad25cb2daef767db7f026fa3b11475a3?s=128&d=identicon&r=PG&f=1", "display_name": "Mike Mortel", "link": "https://stackoverflow.com/users/9565040/mike-mortel"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 526, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1522322273, "creation_date": 1522253185, "last_edit_date": 1522257374, "question_id": 49539321, "link": "https://stackoverflow.com/questions/49539321/how-to-store-and-access-from-impl-based-on-an-enum", "title": "How to store and access from impl based on an enum?", "body": "<p>I have the following impl that is based on an enum. I have no idea how I am supposed store and access my values from it now.</p>\n\n<p>Here's the impl:</p>\n\n<pre><code>pub enum Baz {\n    // My data structure has a string and a number\n    Foo(String),\n    Bar(u64),\n}\n\nimpl Baz {\n    pub fn get(baz: Baz) -&gt; String {\n        let mut result = \"\".to_string();\n        match baz {\n            Baz::Foo(v) =&gt; {},\n            Baz::Bar(v) =&gt; { result = v.to_string() },\n        }\n        result\n    }\n    pub fn new() {\n        // Do I even need new() for instance creation?!\n        println!(\"Hello World\");\n    }\n}\n</code></pre>\n\n<p>Here's how I access it:</p>\n\n<pre><code>mod bazbazbaz;\nuse bazbazbaz::baz;\n\nfn main() {\n    let x: data::Baz;\n    x::Foo(\"mystring\".to_string());\n    x::Bar(42);\n    x.get(Baz::Bar); // I expect \"42\" here as string\n}\n</code></pre>\n\n<p>Is it just a syntax mistake, or am I misunderstanding the concept in general?</p>\n"}, {"tags": ["rust", "serde", "serde-json"], "answers": [{"comments": [{"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1522277503, "post_id": 49540756, "comment_id": 86098389, "body": "Thank you &lt;3. The trick was to derive Deserialize as usual for my type and make a wrapper type for the additional deserialization logic with that to delegate."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1522258171, "creation_date": 1522258171, "answer_id": 49540756, "question_id": 49538627, "link": "https://stackoverflow.com/questions/49538627/how-do-i-customize-a-deserialize-implementation-for-certain-input-types-but-not/49540756#49540756", "title": "How do I customize a Deserialize implementation for certain input types but not all of them?", "body": "<p>The <a href=\"https://serde.rs\" rel=\"nofollow noreferrer\">Serde documentation</a> has an example showing how to implement deserializing from <a href=\"https://serde.rs/string-or-struct.html\" rel=\"nofollow noreferrer\">either a string or a structure</a>. This is equivalent to your case, just smaller.</p>\n\n<p>The important part is this:</p>\n\n<pre><code>fn visit_map&lt;M&gt;(self, visitor: M) -&gt; Result&lt;T, M::Error&gt;\nwhere\n    M: MapAccess&lt;'de&gt;,\n{\n    Deserialize::deserialize(de::value::MapAccessDeserializer::new(visitor))\n}\n</code></pre>\n\n<p>This delegates to the built-in deserialization implementation. Since all of your other cases are custom, this should be suitable.</p>\n"}], "owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 960, "favorite_count": 0, "accepted_answer_id": 49540756, "answer_count": 1, "score": 3, "last_activity_date": 1522258171, "creation_date": 1522251297, "last_edit_date": 1522257930, "question_id": 49538627, "link": "https://stackoverflow.com/questions/49538627/how-do-i-customize-a-deserialize-implementation-for-certain-input-types-but-not", "title": "How do I customize a Deserialize implementation for certain input types but not all of them?", "body": "<p>I have a type like this, although my actual type is bigger and more complex: </p>\n\n<pre><code>struct MyType {\n    i: u32,\n}\n</code></pre>\n\n<p>If I implement <code>Deserialize</code> for this type, serde looks for something like this (I'm interested in JSON):</p>\n\n<pre><code>{\"i\":100}  \n</code></pre>\n\n<p>I want to customize it so that I can deserialize from a byte array as well: </p>\n\n<pre><code>[1, 2, 3, 4]\n</code></pre>\n\n<p>I can write an impl to handle the array, but I want serde to auto generate the rest (which will be <code>visit_map</code>):</p>\n\n<pre><code>impl&lt;'de&gt; Deserialize&lt;'de&gt; for MyType {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;Self, D::Error&gt;\n    where\n        D: Deserializer&lt;'de&gt;,\n    {\n        struct MyTypeVisitor;\n\n        impl&lt;'de&gt; Visitor&lt;'de&gt; for MyTypeVisitor {\n            type Value = MyType;\n\n            fn expecting(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n                write!(formatter, \"struct or array of 4 integers\")\n            }\n\n            fn visit_seq&lt;A: SeqAccess&lt;'de&gt;&gt;(self, seq: A) -&gt; Result&lt;Self::Value, A::Error&gt; {\n                // ...\n            }\n        }\n\n        // deserializer.deserialize_any(MyTypeVisitor)\n    }\n}\n</code></pre>\n\n<p>Is that possible? In this example, it's not difficult, but when the struct is large, hand writing deserialization can be painful.  </p>\n\n<p>This is not a duplicate of <a href=\"https://stackoverflow.com/q/46753955/155423\">How to transform fields during deserialization using Serde?</a> because <code>deserialize_with</code> works only for 1 field. I can't understand how I would make it work for my real type:</p>\n\n<pre><code>pub enum Component {\n    String(StringComponent),\n    Translation(TranslationComponent),\n    Score(ScoreComponent),\n    Selector(SelectorComponent),\n}\n\npub struct StringComponent {\n    #[serde(flatten)] pub base: Base,\n    pub text: String,\n}\n\npub struct Base {\n    // ...\n    extra: Option&lt;Vec&lt;Component&gt;&gt;,\n    // ...\n}\n</code></pre>\n\n<p>What I want to do is:</p>\n\n<ul>\n<li>While deserializing, if the input is a number, return a <code>Component::String</code>. This can be done with <code>visit_i</code>/<code>u</code>/<code>f64</code> and friends.</li>\n<li>If the input is a string, return a <code>Component::String</code> again. This can be done with <code>visit_str</code>/<code>string</code>.</li>\n<li>If input is an array <code>[..]</code>, deserialize it as usual, but make assign elements in array[1..] to extra of array[0]. This can be done by <code>visit_seq</code>.</li>\n<li>If input is a map, let serde derive handle it.</li>\n</ul>\n"}, {"tags": ["compiler-errors", "rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1522250825, "post_id": 49538227, "comment_id": 86083977, "body": "I&#39;m not familiar with the library, but at a guess: you never <i>use</i> <code>fft</code>, or (seemingly) tie it to any other type.  It&#39;s like if you write <code>vec![]</code>, but never put anything in it: the compiler can&#39;t know what type you wanted to use."}, {"owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1522317538, "post_id": 49538227, "comment_id": 86113359, "body": "Actually... when i processed data (<code>fft.process(&amp;mut input_array, &amp;mut output_array);</code> it started to work properly... So, rust can figure out type form context?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1522327189, "post_id": 49538227, "comment_id": 86120052, "body": "That <i>is</i> how type inference works: deduce types from usage.  If you don&#39;t use a thing, there&#39;s nothing for the compiler to work with."}], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "edited": false, "score": 0, "creation_date": 1522329050, "post_id": 49556377, "comment_id": 86121395, "body": "thanks, that clarifies A LOT. I jumped into rust from several years of C. The most type guessing i had was __auto_type extension..."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 1, "last_activity_date": 1522327328, "creation_date": 1522327328, "answer_id": 49556377, "question_id": 49538227, "link": "https://stackoverflow.com/questions/49538227/type-annotations-required-while-using-rustfft/49556377#49556377", "title": "&quot;type annotations required&quot; while using RustFFT", "body": "<p>The problem (from your comments) is that you weren't using <code>fft</code>.  Rust can infer types, but it can only do so if there's enough context.  If you never use <code>fft</code>, the compiler doesn't have enough information to work out what the complete type is supposed to be.</p>\n\n<p>Remember, every variable in Rust has a single, complete type.  It's just that in some cases, Rust can work it out by itself and lets you omit the type.  This is not one of those cases.</p>\n"}], "owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 188, "favorite_count": 0, "accepted_answer_id": 49556377, "answer_count": 1, "score": 1, "last_activity_date": 1522327328, "creation_date": 1522250094, "last_edit_date": 1592644375, "question_id": 49538227, "link": "https://stackoverflow.com/questions/49538227/type-annotations-required-while-using-rustfft", "title": "&quot;type annotations required&quot; while using RustFFT", "body": "<p>I have a problem with the following code</p>\n<pre><code>extern crate num;\nextern crate rustfft;\n\nuse rustfft::num_complex::Complex;\nuse rustfft::num_traits::Zero;\n\npub fn ct_fft(input: &amp;Vec&lt;f64&gt;, sampling: u32) {\n    let data_size = input.len();\n\n    let mut input_array: Vec&lt;Complex&lt;f64&gt;&gt; = Vec::with_capacity(data_size);\n\n    let fft = rustfft::FFTplanner::new(false).plan_fft(data_size as usize);\n\n    for v in input {\n        input_array.push(Complex { re: *v, im: 0.0 });\n    }\n}\n</code></pre>\n<p>I get the error:</p>\n<pre><b>error[E0283]</b><b>: type annotations required: cannot resolve `_: rustfft::FFTnum`</b>\n  <b>--&gt; </b>src/ctdsp.rs:19:15\n   <b>|</b>\n<b>19</b> <b>| </b>    let fft = rustfft::FFTplanner::new(false).plan_fft(data_size as usize);\n   <b>| </b>              <b>^^^^^^^^^^^^^^^^^^^^^^^^</b>\n   <b>|</b>\n   <b>= </b><b>note</b>: required by `&lt;rustfft::FFTplanner&lt;T&gt;&gt;::new`\n\n<b>error</b><b>: aborting due to previous error</b></pre>\n<p>I don't understand why I got this error; I was using RustFFT earlier and it worked with no problems and I'm using it exactly the same way. I cannot find any information about this error in regard to RustFFT.</p>\n<br/>\n<br/>\n<p>Rust version:</p>\n<pre>\u2570\u2500<b>$</b> rustc --version                                                                               \nrustc 1.26.0-nightly (9c9424de5 2018-03-27)\n</pre>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 3312, "user_id": 342327, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8fd5badb01bbc9389476e9394ab6607e?s=128&d=identicon&r=PG", "display_name": "snim2", "link": "https://stackoverflow.com/users/342327/snim2"}, "edited": false, "score": 0, "creation_date": 1522249570, "post_id": 49537809, "comment_id": 86082982, "body": "True. But implementing <code>Eq</code> for <code>MyHashGenerator</code> doesn&#39;t fix the error."}], "answers": [{"comments": [{"owner": {"reputation": 3312, "user_id": 342327, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8fd5badb01bbc9389476e9394ab6607e?s=128&d=identicon&r=PG", "display_name": "snim2", "link": "https://stackoverflow.com/users/342327/snim2"}, "edited": false, "score": 0, "creation_date": 1522250053, "post_id": 49538119, "comment_id": 86083401, "body": "Thanks, this makes a lot of sense. The reason I missed it is that in the original code <code>self.hash</code> is passed a function call which itself takes an argument which is parameterised on <code>T</code>. C&#39;est la vie, I guess!"}], "tags": [], "owner": {"reputation": 22377, "user_id": 2288659, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bBg8v.png?s=128&g=1", "display_name": "Silvio Mayolo", "link": "https://stackoverflow.com/users/2288659/silvio-mayolo"}, "is_accepted": true, "score": 8, "last_activity_date": 1522249733, "creation_date": 1522249733, "answer_id": 49538119, "question_id": 49537809, "link": "https://stackoverflow.com/questions/49537809/rust-cannot-infer-type-without-annotation/49538119#49538119", "title": "Rust cannot infer type without annotation", "body": "<p>The problem is <code>MyHashGenerator</code> doesn't take a type argument. So you're making a promise \"The <em>same</em> type <code>MyHashGenerator</code> will suffice as a hash generator and will behave the exact same way regardless of <code>T</code>\". <code>self.hash(\"\")</code> is a call to <code>hash</code> on <code>HashGenerator</code>, but Rust doesn't necessarily know that it's the <em>same</em> <code>HashGenerator</code> instance that <code>hash_node</code> was called on. You can make this requirement explicit in one of two ways.</p>\n\n<p><strong>Option 1: Explicit Type Arguments</strong></p>\n\n<p>By explicitly telling Rust what the arguments are, you can avoid this problem.</p>\n\n<pre><code>fn hash_node(&amp;self) -&gt; u64 {\n    HashGenerator::&lt;T&gt;::hash(self, \"\")\n}\n</code></pre>\n\n<p>Now it knows to call specifically the <code>&lt;T&gt;</code> instance, which will suffice.</p>\n\n<p><strong>Option 2: Phantom data</strong></p>\n\n<p>You can parameterize <code>MyHashGenerator</code> to have an (unused) <code>T</code> parameter.</p>\n\n<pre><code>use std::marker::PhantomData\n\n...\n\nstruct MyHashGenerator&lt;T&gt; {\n    foo: PhantomData&lt;T&gt;\n}\n</code></pre>\n\n<p>Then Rust can infer which instance you want based on the type of <code>self</code>, so long as you declare your instance as</p>\n\n<pre><code>impl&lt;T: Clone + Eq + Hash + ToString&gt; HashGenerator&lt;T&gt; for MyHashGenerator&lt;T&gt; {\n    ...\n}\n</code></pre>\n\n<p>Then you don't have to change your implementation of <code>hash_size</code>.</p>\n\n<p>Personally, I recommend Option 1. It's not as pretty, but it provides the additional API guarantee that things will in fact work the same way regardless of <code>T</code>. However, if you think <code>MyHashGenerator</code> might use the <code>T</code> argument later (or if it does now, and that simply wasn't included in your MCVE), you may consider going with Option 2 to make that dependency more clear.</p>\n"}], "owner": {"reputation": 3312, "user_id": 342327, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/8fd5badb01bbc9389476e9394ab6607e?s=128&d=identicon&r=PG", "display_name": "snim2", "link": "https://stackoverflow.com/users/342327/snim2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3443, "favorite_count": 2, "accepted_answer_id": 49538119, "answer_count": 1, "score": 4, "last_activity_date": 1522249733, "creation_date": 1522248846, "question_id": 49537809, "link": "https://stackoverflow.com/questions/49537809/rust-cannot-infer-type-without-annotation", "title": "Rust cannot infer type without annotation", "body": "<p>The code below cannot compile due to the type error <code>error[E0283]: type annotations required: cannot resolve _: std::cmp::Eq</code>. What type annotation is needed in order to compile this code?</p>\n\n<p>This example code is taken from a much larger program where <code>MyHashGenerator::hash_node()</code> is used to hash nodes in an AST (the type <code>T</code> relates to a value that is held inside AST nodes, but the definition of the AST is not needed to reproduce the type error).  </p>\n\n<pre><code>use std::hash::Hash;\n\npub trait HashGenerator&lt;T: Clone + Eq + Hash + ToString&gt; {\n    fn hash(&amp;self, msg: &amp;str) -&gt; u64;  // Hash a string.\n    fn hash_node(&amp;self) -&gt; u64;  // Hash an AST node.\n}\n\nstruct MyHashGenerator {}\n\nimpl&lt;T: Clone + Eq + Hash + ToString&gt; HashGenerator&lt;T&gt; for MyHashGenerator {\n    fn hash(&amp;self, msg: &amp;str) -&gt; u64 {\n        0\n    }\n\n    fn hash_node(&amp;self) -&gt; u64 {\n        // error[E0283]: type annotations required: cannot resolve `_: std::cmp::Eq`\n        self.hash(\"\")\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6859b1d018ce301d87c2207f69397b3b&amp;version=nightly\" rel=\"nofollow noreferrer\">Code on Playground.</a></p>\n\n<p>This question is similar to <a href=\"https://stackoverflow.com/questions/39104236/how-to-resolve-type-annotations-required-cannot-resolve-when-calling-generi\">the one here</a>, which has not been answered. </p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 197, "user_id": 2856298, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/58259e616d91cfc3a4d6333f784d5baf?s=128&d=identicon&r=PG", "display_name": "Matthew Milano", "link": "https://stackoverflow.com/users/2856298/matthew-milano"}, "edited": false, "score": 0, "creation_date": 1522267278, "post_id": 49527955, "comment_id": 86093895, "body": "I was hoping to &quot;paste&quot; the tokens <code>; done</code> to forward&#39;s input, actually; that&#39;s what they were there for.  Is that possible?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 197, "user_id": 2856298, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/58259e616d91cfc3a4d6333f784d5baf?s=128&d=identicon&r=PG", "display_name": "Matthew Milano", "link": "https://stackoverflow.com/users/2856298/matthew-milano"}, "edited": false, "score": 0, "creation_date": 1522292989, "post_id": 49527955, "comment_id": 86102160, "body": "@MatthewMilano I don&#39;t understand what you mean by &quot;paste&quot;.  You added the tokens just fine, but there&#39;s no rule to handle them.  It&#39;s like passing two arguments to a function that only expects one."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 3, "last_activity_date": 1522220080, "creation_date": 1522220080, "answer_id": 49527955, "question_id": 49526522, "link": "https://stackoverflow.com/questions/49526522/how-do-i-write-macro-arguments-which-capture-parenthesis/49527955#49527955", "title": "How do I write macro arguments which capture parenthesis?", "body": "<p>The problem is the <code>; done</code> in <code>forward</code>.  What's going on here is that the macro expansion code matches literal input tokens against arms one at a time.  If an arm doesn't match, it gives up and tries the next one.  When it runs out of arms to try, it has to fail and explain why.</p>\n\n<p>But which token in the input was the problem?  Answering that when there are potentially multiple arms involved is hard, so instead it just picks the first token and says \"this was the problem\".</p>\n\n<p>Whenever you see a macro expansion complaining about the first token in the input not matching, it's quite possible it's something later in the input that tripped it up.</p>\n\n<p>Fixing that (and fixing the <code>parse</code> invocation that's missing its <code>!</code>) gives:</p>\n\n<pre><code>macro_rules! parse {\n    (done) =&gt; (println!(\"done!\"));\n    (if ($cond:tt) {$then:tt}) =&gt; (println!(\"if! \"); parse!($cond); parse!($then));\n}\n\nmacro_rules! forward {\n    ($($e:tt)*) =&gt; (parse!($($e)*));\n}\n\nfn main() {\n    forward!(if (done) {done} );\n}\n</code></pre>\n"}], "owner": {"reputation": 197, "user_id": 2856298, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/58259e616d91cfc3a4d6333f784d5baf?s=128&d=identicon&r=PG", "display_name": "Matthew Milano", "link": "https://stackoverflow.com/users/2856298/matthew-milano"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 394, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1522267376, "creation_date": 1522213775, "last_edit_date": 1522267376, "question_id": 49526522, "link": "https://stackoverflow.com/questions/49526522/how-do-i-write-macro-arguments-which-capture-parenthesis", "title": "How do I write macro arguments which capture parenthesis?", "body": "<p>I am hoping to write a Rust macro which forwards its entire argument to a second macro \u2014 even when that argument contains exciting parenthesization. </p>\n\n<p>Here is what I have tried so far: </p>\n\n<pre><code>macro_rules! parse {\n    (done) =&gt; (println!(\"done!\"));\n    (if ($cond:tt) {$then:tt}) =&gt; (println!(\"if! \"); parse!($cond); parse($then));\n}\n\nmacro_rules! forward {\n    ($($e:tt)*) =&gt; (parse!($($e)*; done));\n}\n\nfn main() {\n    forward!(if (done) {done} );\n}\n</code></pre>\n\n<p>This doesn't work, and produces the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no rules expected the token `if`\n</code></pre>\n\n<p>What am I doing wrong here?</p>\n\n<p>Edit: Beyond simply forwarding the arguments to <code>forward</code>, I was hoping to \"paste\" the tokens <code>; done</code> on to the end of <code>forward</code>'s arguments. Is there a way to make this work while preserving that behavior? </p>\n"}, {"tags": ["concurrency", "rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1522228554, "post_id": 49525639, "comment_id": 86066917, "body": "<i>&quot;I think I get what it&#39;s saying. The self references - through the Arc - could live longer than self itself&quot;</i> Not at all! <code>Arc::new(self)</code> is creating a value of type <code>Arc&lt;&amp;Self&gt;</code>, which is still tied to the internal reference&#39;s lifetime. A method taking <code>&amp;self</code> cannot magically make a value live longer. <a href=\"https://stackoverflow.com/q/42028470/1233251\">This question</a> might be useful."}, {"owner": {"reputation": 3117, "user_id": 4686743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c1ca31a61cae3ec468b1c1bff333c3e1?s=128&d=identicon&r=PG", "display_name": "David Castillo", "link": "https://stackoverflow.com/users/4686743/david-castillo"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1522244938, "post_id": 49525639, "comment_id": 86079137, "body": "@E_net4 I&#39;ll just remove that part from the question. I didn&#39;t mean what you understood haha, and it&#39;s not relevant to the discussion. I still have to wrap my mind around lifetimes."}, {"owner": {"reputation": 3117, "user_id": 4686743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c1ca31a61cae3ec468b1c1bff333c3e1?s=128&d=identicon&r=PG", "display_name": "David Castillo", "link": "https://stackoverflow.com/users/4686743/david-castillo"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1522246632, "post_id": 49525639, "comment_id": 86080562, "body": "@E_net4 I refactored the code according to your suggestions to make it less distracting. The compiler error message and the playground link were updated also."}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 1, "last_activity_date": 1522248335, "creation_date": 1522248335, "answer_id": 49537620, "question_id": 49525639, "link": "https://stackoverflow.com/questions/49525639/cannot-infer-an-appropriate-lifetime-when-sharing-self-reference/49537620#49537620", "title": "Cannot infer an appropriate lifetime when sharing self reference", "body": "<p>The error message says that the value passed to the <code>Arc</code> must live the <code>'static</code> lifetime. This is because spawning a thread, be it with <a href=\"https://doc.rust-lang.org/std/thread/fn.spawn.html\" rel=\"nofollow noreferrer\"><code>std::thread::spawn</code></a> or <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"nofollow noreferrer\"><code>std::thread::Builder</code></a>, requires the passed closure to live this lifetime, thus enabling the thread to \"live freely\" beyond the scope of the spawning thread.</p>\n\n<p>Let us expand the prototype of the <code>start</code> method:</p>\n\n<pre><code>fn start&lt;'a&gt;(&amp;'a self: &amp;'a Thing) -&gt; io::Result&lt;Vec&lt;JoinHandle&lt;()&gt;&gt;&gt; { ... }\n</code></pre>\n\n<p>The attempt of putting a <code>&amp;'a self</code> into an <code>Arc</code> creates an <code>Arc&lt;&amp;'a Thing&gt;</code>, which is still constrained to the lifetime <code>'a</code>, and so cannot be moved to a closure that needs to live longer than that. Since we cannot move out <code>&amp;self</code> either, the solution is not to use <code>&amp;self</code> for this method. Instead, we can make <code>start</code> accept an <code>Arc</code> directly:</p>\n\n<pre><code>fn start(thing: Arc&lt;Self&gt;) -&gt; io::Result&lt;Vec&lt;JoinHandle&lt;()&gt;&gt;&gt; {\n    let self1 = thing.clone();\n    let self2 = thing;\n\n    let handle1 = Builder::new()\n        .name(\"thread1\".to_owned())\n        .spawn(move || loop {\n             self1.do_within_thread1();\n        })?;\n\n    let handle2 = Builder::new()\n        .name(\"thread2\".to_owned())\n        .spawn(move || loop {\n            self2.do_within_thread2();\n        })?;\n\n    Ok(vec![handle1, handle2])\n}\n</code></pre>\n\n<p>And pass reference-counted pointers at the consumer's scope:</p>\n\n<pre><code>let thing = Arc::new(Thing::new());\nlet handles = Thing::start(thing.clone()).unwrap_or_else(|_| panic!(\"Error\"));\n\nthing.get_xs().unwrap();\n\nfor handle in handles {\n    handle.join().unwrap();\n}\n</code></pre>\n\n<p><a href=\"http://play.integer32.com/?gist=cba014447935bb447c37802229828927&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>. At this point the program will compile and run (although the workers are in an infinite loop, so the playground will kill the process after the timeout).</p>\n"}], "owner": {"reputation": 3117, "user_id": 4686743, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c1ca31a61cae3ec468b1c1bff333c3e1?s=128&d=identicon&r=PG", "display_name": "David Castillo", "link": "https://stackoverflow.com/users/4686743/david-castillo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 491, "favorite_count": 0, "accepted_answer_id": 49537620, "answer_count": 1, "score": 1, "last_activity_date": 1522248335, "creation_date": 1522207849, "last_edit_date": 1522246539, "question_id": 49525639, "link": "https://stackoverflow.com/questions/49525639/cannot-infer-an-appropriate-lifetime-when-sharing-self-reference", "title": "Cannot infer an appropriate lifetime when sharing self reference", "body": "<p>This is an experiment I'm doing while learning Rust and following <em>Programming Rust</em>.</p>\n\n<p>Here's a <a href=\"http://play.integer32.com/?gist=6e08c6c8dde0c3fddaed387e3c82df4f&amp;version=stable\" rel=\"nofollow noreferrer\">link to the code in the playground</a>.</p>\n\n<p>I have a struct (<code>Thing</code>) with some inner state (<code>xs</code>). A <code>Thing</code> should be created with <code>Thing::new</code> and then <code>start</code>ed, after which the user should choose to call some other function like <code>get_xs</code>.</p>\n\n<p>But! In <code>start</code> 2 threads are <code>spawn</code>ed which call other methods on the <code>Thing</code> instance that could mutate its inner state (say, add elements to <code>xs</code>), so they need a reference to <code>self</code> (hence the <code>Arc</code>). However, this causes a lifetime conflict:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:18:30\n   |\n18 |         let self1 = Arc::new(self);\n   |                              ^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined \non the method body at 17:5...\n  --&gt; src/main.rs:17:5\n   |\n17 | /     fn start(&amp;self) -&gt; io::Result&lt;Vec&lt;JoinHandle&lt;()&gt;&gt;&gt; {\n18 | |         let self1 = Arc::new(self);\n19 | |         let self2 = self1.clone();\n20 | |\n...  |\n33 | |         Ok(vec![handle1, handle2])\n34 | |     }\n   | |_____^\nnote: ...so that expression is assignable (expected &amp;Thing, found &amp;Thing)\n  --&gt; src/main.rs:18:30\n   |\n18 |         let self1 = Arc::new(self);\n   |                              ^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/main.rs:23:20: 25:14 \nself1:std::sync::Arc&lt;&amp;Thing&gt;]` will meet its required lifetime bounds\n  --&gt; src/main.rs:23:14\n   |\n23 |             .spawn(move || loop {\n   |              ^^^^^\n</code></pre>\n\n<p>Is there a way of spawning the state-mutating threads and still give back ownership of <code>thing</code> after running <code>start</code> to the code that's using it?</p>\n\n<pre><code>use std::io;\nuse std::sync::{Arc, LockResult, RwLock, RwLockReadGuard};\nuse std::thread::{Builder, JoinHandle};\n\nstruct Thing {\n    xs: RwLock&lt;Vec&lt;String&gt;&gt;\n}\n\nimpl Thing {\n\n    fn new() -&gt; Thing {\n        Thing {\n            xs: RwLock::new(Vec::new()),\n        }\n    }\n\n    fn start(&amp;self) -&gt; io::Result&lt;Vec&lt;JoinHandle&lt;()&gt;&gt;&gt; {\n        let self1 = Arc::new(self);\n        let self2 = self1.clone();\n\n        let handle1 = Builder::new()\n            .name(\"thread1\".to_owned())\n            .spawn(move || loop {\n                 self1.do_within_thread1();\n            })?;\n\n        let handle2 = Builder::new()\n            .name(\"thread2\".to_owned())\n            .spawn(move || loop {\n                self2.do_within_thread2();\n            })?;\n\n        Ok(vec![handle1, handle2])\n    }\n\n    fn get_xs(&amp;self) -&gt; LockResult&lt;RwLockReadGuard&lt;Vec&lt;String&gt;&gt;&gt; {\n        return self.xs.read();\n    }\n\n    fn do_within_thread1(&amp;self) {\n        // read and potentially mutate self.xs\n    }\n\n    fn do_within_thread2(&amp;self) {\n        // read and potentially mutate self.xs\n    }\n}\n\nfn main() {\n    let thing = Thing::new();\n    let handles = match thing.start() {\n        Ok(hs) =&gt; hs,\n        _ =&gt; panic!(\"Error\"),\n    };\n\n    thing.get_xs();\n\n    for handle in handles {\n        handle.join();\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "stack"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522196125, "post_id": 49523969, "comment_id": 86054327, "body": "There&#39;s zero heap allocation in your last code block. Both values are declared on the stack."}, {"owner": {"reputation": 1102, "user_id": 5660197, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/97df5665e51bcf688208167c32a7bb4e?s=128&d=identicon&r=PG&f=1", "display_name": "Tony", "link": "https://stackoverflow.com/users/5660197/tony"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522196444, "post_id": 49523969, "comment_id": 86054382, "body": "Im super confused then how the compiler knows what the value of y or x is because it cannot just pop off the last variable confidently?  Wouldn&#39;t it still have to use a lookup table then at some point?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522196965, "post_id": 49523969, "comment_id": 86054515, "body": "In my answer, I state that <i>all</i> local variables inside of a function are popped all at once at exactly one time: the end of the function. Individual variables are <i>never</i> popped onto or off of the stack. Could you suggest a way of wording that more clearly?"}, {"owner": {"reputation": 1102, "user_id": 5660197, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/97df5665e51bcf688208167c32a7bb4e?s=128&d=identicon&r=PG&f=1", "display_name": "Tony", "link": "https://stackoverflow.com/users/5660197/tony"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522197532, "post_id": 49523969, "comment_id": 86054633, "body": "Im lacking any skills in this area to even articulate my question, hopefully that example helps.  Ultimately if everything is a stack, then how do you know what a variable&#39;s value is that is deep in the stack."}], "answers": [{"comments": [{"owner": {"reputation": 1102, "user_id": 5660197, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/97df5665e51bcf688208167c32a7bb4e?s=128&d=identicon&r=PG&f=1", "display_name": "Tony", "link": "https://stackoverflow.com/users/5660197/tony"}, "edited": false, "score": 0, "creation_date": 1522195518, "post_id": 49524076, "comment_id": 86054191, "body": "Thanks, thats a helpful example for understanding the stack.  I think I was confusing how the compiler knows where to find the variables versus the stack as just a tool for avoiding scope errors."}, {"owner": {"reputation": 1102, "user_id": 5660197, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/97df5665e51bcf688208167c32a7bb4e?s=128&d=identicon&r=PG&f=1", "display_name": "Tony", "link": "https://stackoverflow.com/users/5660197/tony"}, "edited": false, "score": 0, "creation_date": 1522196004, "post_id": 49524076, "comment_id": 86054299, "body": "If you have time, can you see my edit for understanding how the compiler knows what <code>ref1</code> and <code>ref2</code> are pointing to as they go in and out of scope?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1522221826, "post_id": 49524076, "comment_id": 86062421, "body": "I think it would be worth stating upfront that &quot;stack&quot; in this context is quite different from the <i>stack data-structure</i> (related, but different). This seems to be the root of the OP&#39;s confusion."}, {"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 1, "creation_date": 1522245225, "post_id": 49524076, "comment_id": 86079400, "body": "The documentation says that the stack is popped when the scope is over, but in your answer you imply that happens only when the <i>function</i> scope is over. In the first example, do inner set of braces create a separate stack frame (aka scope) and does <code>value2</code> gets popped upon reaching the closing <i>inner</i> brace?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 0, "creation_date": 1522245362, "post_id": 49524076, "comment_id": 86079537, "body": "@LoganReed could you help me reword the first part of my answer to be more clear, as I thought that already answered your point: &quot;That quote is playing a little fast and loose as a first estimation. A different quote from the same page is more precise&quot;. A less-charitable way of saying it is &quot;the quote in the OP is a lie&quot;. I don&#39;t <i>imply</i> that it&#39;s when the function is over, I state it, as fact, multiple times."}, {"owner": {"reputation": 852, "user_id": 6563468, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a4c2119cfc1ee9a6c5deeec2ead9a261?s=128&d=identicon&r=PG&f=1", "display_name": "Logan Reed", "link": "https://stackoverflow.com/users/6563468/logan-reed"}, "edited": false, "score": 0, "creation_date": 1522245595, "post_id": 49524076, "comment_id": 86079737, "body": "@Shepmaster - No, your answer is perfect. It is even emphasized in bold. I just got lost in the dark forest of thoughts in my head :-) (and I read your answer twice! before asking the question). P.S.: Unsafe code can probably reach values in the popped stack as well -- so I kept thinking about that too, which confused me a bit more."}, {"owner": {"reputation": 3211, "user_id": 898649, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/63c72161fba6e27cb05c078651c5e969?s=128&d=identicon&r=PG", "display_name": "Alexey", "link": "https://stackoverflow.com/users/898649/alexey"}, "edited": false, "score": 0, "creation_date": 1586940754, "post_id": 49524076, "comment_id": 108310655, "body": "&quot;The modification to the size of the stack only happens at function entry and exit.&quot; I&#39;ve been wondering: has it ever been considered to arrange variables on the stack according the ends of their &quot;actual&quot; scopes and to pop each one once it is no longer needed? This might save some memory in some deeply recursive calls."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3211, "user_id": 898649, "user_type": "registered", "accept_rate": 53, "profile_image": "https://www.gravatar.com/avatar/63c72161fba6e27cb05c078651c5e969?s=128&d=identicon&r=PG", "display_name": "Alexey", "link": "https://stackoverflow.com/users/898649/alexey"}, "edited": false, "score": 0, "creation_date": 1586958029, "post_id": 49524076, "comment_id": 108320171, "body": "@Alexey not exactly, as far as I know. I think the keywords that you are interested in will be &quot;guaranteed tail recursion&quot; / &quot;tail call optimization&quot;. See <a href=\"https://stackoverflow.com/q/59257543/155423\">When is tail recursion guaranteed in Rust?</a> for a start. I&#39;m pretty sure that modifying the stack size is a part of the ABI of a function, so it might not be easily doable. You can do it <i>yourself</i> by declaring some mutable values in an outer function and passing references to them to an inner recursive function. This is a common pattern anyway."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1522246529, "last_edit_date": 1522246529, "creation_date": 1522194783, "answer_id": 49524076, "question_id": 49523969, "link": "https://stackoverflow.com/questions/49523969/how-does-the-stack-handle-popping-values-off-in-a-different-order-than-they-are/49524076#49524076", "title": "How does the stack handle popping values off in a different order than they are created?", "body": "<p>That quote is playing a little fast and loose with the truth because it's only intended as a first estimation. A different quote from the same page is more accurate (emphasis mine):</p>\n\n<blockquote>\n  <p>When our code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function\u2019s local variables get pushed onto the stack. <strong>When the function is over</strong>, those values get popped off the stack.</p>\n</blockquote>\n\n<p>The \"stack\" (data structure) you may be familiar with is related to but quite different from the \"stack\" (function-calling) that is referred to here.</p>\n\n<p>In a stack (data structure) you only access the value at the top of the stack. With the stack (function-calling), you reserve/return space from the top but you can access any memory in the stack. This could be any of the variables in the same function or even the variables from the calling function. The hardware doesn't care about these details; it is up to the language to ensure that items in the stack are only accessed when it is valid to do so.</p>\n\n<p>It's important to recognize that the <em>values</em> of the variables are not being pushed onto the stack; the stack only corresponds to memory to store the variables.</p>\n\n<p>The modification to the size of the stack <strong>only happens at function entry and exit</strong>. It's also done as one giant block; the stack pointer is incremented and decremented by the total size of all the function's local variables, <em>regardless</em> of their scope. Individual variables are <em>never</em> popped onto or off of the stack.</p>\n\n<p>Rust's scoping rules prevent you from <em>using</em> the values that have been moved, but in actuality they are still sitting there on the stack. You can access them using <code>unsafe</code> code (but you shouldn't):</p>\n\n<pre><code>struct NonCopyNumber(i32);\n\nfn example() {\n    // We allocate space on the stack for all local variable\n    // when we enter the function. There's 4 in this example.\n\n    let value1 = NonCopyNumber(1); \n\n    let raw_ref1 = &amp;value1.0 as *const i32;\n    let raw_ref2;\n\n    {\n        let value2 = NonCopyNumber(2); \n        raw_ref2 = &amp;value2.0 as *const i32;\n    }\n\n    drop(value1);\n\n    // println!(\"{}\", value1.0); // use of moved value: `value1.0`\n    // println!(\"{}\", value2.0); // Can't find value\n\n    // Not really safe; assumes details about stack management.\n    unsafe {\n        println!(\"{}\", *raw_ref1); // 1\n        println!(\"{}\", *raw_ref2); // 2\n    }\n\n    // Stack is popped\n}\n</code></pre>\n\n<blockquote>\n  <p>do inner set of braces create a separate stack frame</p>\n</blockquote>\n\n<p>No, stack frames are <em>only</em> created at function entry</p>\n\n<blockquote>\n  <p>stack frame (aka scope) </p>\n</blockquote>\n\n<p>Stack frames are <em>not</em> the same as scopes. Entering a function creates a new scope and introduces a stack frame. A pair of curly braces creates a new scope but <em>does not</em> introduce a stack frame .</p>\n\n<blockquote>\n  <p>does <code>value2</code> gets popped upon reaching the closing inner brace? </p>\n</blockquote>\n\n<p>No, stack frames are <em>only</em> popped at function exit.</p>\n\n<hr>\n\n<p>Let's use this concrete example:</p>\n\n<pre><code>fn main() {\n    let one: i32 = 1;\n    let two: i32 = 2; \n\n    let three: i32 = one + two;\n}\n</code></pre>\n\n<p>I'll annotate the stack with the <em>stack pointer</em> variable <code>%sp</code>. The stack pointer represents the current top of the stack.</p>\n\n<pre><code>fn main() {\n    // This function has 3 `i32` variables. \n    // Each is 4 bytes so the function requires 12 \n    // bytes of stack space total.\n\n    let one;   // Stored in memory at %sp + 0 bytes\n    let two;   // Stored in memory at %sp + 4 bytes\n    let three; // Stored in memory at %sp + 8 bytes\n\n    %sp += 12; // Increment / push the stack\n\n    one = 1;\n    two = 2; \n\n    three = one + two;\n\n    // Done with all our variables.\n\n    %sp -= 12; // decrement / pop the stack \n}\n</code></pre>\n\n<p>Space for all variables is reserved at the beginning of the function, then all the space is returned to the stack at the end of the function, all at once in both cases.</p>\n\n<p>It may be worth noting that we could have added lots of extra braces and still arrived at the same stack-annotated result:</p>\n\n<pre><code>fn main() {\n    let one: i32 = 1;\n    {\n        let two: i32 = 2;\n        {\n            let three: i32 = one + two;\n        }\n    }\n}\n</code></pre>\n\n<p>It is only the semantics of the language that prevent us from using a variable after it goes out of scope or before it has been initialized.</p>\n\n<hr>\n\n<blockquote>\n  <p>Does this mean that the stack is allocated on the heap as well? </p>\n</blockquote>\n\n<p>This is a very difficult question to answer succinctly. In the computer <sup>1</sup>, you only have one chunk of memory: those RAM chips plugged into your motherboard. All of your program's data is ultimately stored here, whether it's \"the stack\" or \"the heap\". The big difference between the two is their access patterns.</p>\n\n<p>As shown above, the stack is very lightweight and performant but inflexible. You can reserve more space in the stack (calling a function) and return that space to the stack (leave the function) and that's about it.</p>\n\n<p>The heap is more flexible, but is slower, more complicated and requires additional bookkeeping. </p>\n\n<p>Generally, the stack and heap grow toward each other in memory. One starts at zero and grows upward, the other starts at MAX and grows downward. </p>\n\n<p>Then you get into details like threads. These carve off a piece of memory, perhaps from the heap, and then use that memory for their own stack. So, technically, yes: sometimes <em>a</em> stack is inside <em>a</em> heap.</p>\n\n<p>Making it more complicated, there can actually be multiple heaps, each managing memory according to their own set of rules.</p>\n\n<p><sup>1</sup> Not all computers, but the vast majority that people program for day-to-day. There's also different levels of memory for caches and whatnot, but those don't come into play here.</p>\n\n<hr>\n\n<blockquote>\n<pre><code>println!(\"x = {}\", x); // cannot just pop x off here as y was pushed last?\n</code></pre>\n</blockquote>\n\n<p>Using a variable in <code>println</code> doesn't move it, so even if your original premise were true, it wouldn't come into play here. See <a href=\"https://stackoverflow.com/q/30450399/155423\">Does println! borrow or own the variable?</a></p>\n"}], "owner": {"reputation": 1102, "user_id": 5660197, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/97df5665e51bcf688208167c32a7bb4e?s=128&d=identicon&r=PG&f=1", "display_name": "Tony", "link": "https://stackoverflow.com/users/5660197/tony"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 257, "favorite_count": 0, "accepted_answer_id": 49524076, "answer_count": 1, "score": 4, "last_activity_date": 1522246529, "creation_date": 1522193846, "last_edit_date": 1522198010, "question_id": 49523969, "link": "https://stackoverflow.com/questions/49523969/how-does-the-stack-handle-popping-values-off-in-a-different-order-than-they-are", "title": "How does the stack handle popping values off in a different order than they are created?", "body": "<p>I can't think of how to title this effectively, which might be why I cannot find a good search for this.  In understanding the heap vs. stack during the Rust programming book I read: </p>\n\n<blockquote>\n  <p><a href=\"https://doc.rust-lang.org/book/second-edition/ch04-01-what-is-ownership.html#ownership-and-functions\" rel=\"nofollow noreferrer\">The types covered in the \u201cData Types\u201d section are all stored on the\n  stack and popped off the stack when their scope is over.</a></p>\n</blockquote>\n\n<p>I read the more <a href=\"https://doc.rust-lang.org/book/first-edition/the-stack-and-the-heap.html\" rel=\"nofollow noreferrer\">in-depth distinction</a>, but I'm still curious how a stack is used when variables can be defined and used hundreds of lines later.  Take for example:</p>\n\n<pre><code>let x = 5;\nlet y = 6;\nprintln!(\"x = {}\", x); // cannot just pop x off here as y was pushed last?\n</code></pre>\n\n<p>To clarify, is a stack being used for scope, but inside each scope there  also has to be a heap to know where to look during runtime?</p>\n\n<p>Does this mean that the stack is allocated on the heap as well? Or does the compiler keep these two completely separated?</p>\n\n<p>Sorry if this is morphing into a question about compilers and memory management in general.</p>\n\n<pre><code>fn main() {                  // if this is all a stack\n    let one = 1;             // stack.push(one)\n    let two = 2;             // stack.push(two) \n\n    let three = one + two;   // stack.push(stack.pop() + stack.pop())???\n}\n</code></pre>\n\n<p>Does this make sense? I'm coming from Python so bear with me.</p>\n"}, {"tags": ["struct", "enums", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522178954, "post_id": 49520931, "comment_id": 86047765, "body": "There&#39;s nothing special about <i>structs</i> vs any other values."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 1, "creation_date": 1522179311, "post_id": 49520931, "comment_id": 86047950, "body": "To be fair the other answer wasn&#39;t really satisfying until you updated it to the current Rust-syntax \ud83d\ude04"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 1, "creation_date": 1522179686, "post_id": 49520931, "comment_id": 86048162, "body": "@K.Biermann the most upvoted answer was already using Rust 1.0 syntax (and had been since 2015). Remember that questions can have multiple answers and neither the accepted answer nor the most upvoted answer are necessarily the best answer. It <i>always</i> pays to read all the answers."}, {"owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "edited": false, "score": 0, "creation_date": 1522179839, "post_id": 49520931, "comment_id": 86048229, "body": "From the thread with the answer, is the solution to do this? <code>if let Animal::Ant(s) = a {test (Ant{species:s.species});}</code> Seems strange."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522179922, "post_id": 49520931, "comment_id": 86048274, "body": "Close: <code>if let Animal::Ant(ant_struct) = animal_enum { test(ant_struct); }</code> would be the appropriate syntax."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522179956, "post_id": 49520931, "comment_id": 86048297, "body": "<a href=\"https://play.rust-lang.org/?gist=0b4994d105eac9c349c480231c3f3b8a&amp;version=stable\" rel=\"nofollow noreferrer\"><code>if let Animal::Ant(ant) = a { test(ant); }</code></a>"}, {"owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "edited": false, "score": 0, "creation_date": 1522180005, "post_id": 49520931, "comment_id": 86048336, "body": "Great. Thank you."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1522180068, "post_id": 49520931, "comment_id": 86048370, "body": "@Shepmaster Of course you&#39;re right; reading all the answers is usually a good idea. I didn&#39;t want to be nitpicking."}], "owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 52, "favorite_count": 0, "closed_date": 1522178925, "answer_count": 0, "score": 1, "last_activity_date": 1522178779, "creation_date": 1522178566, "last_edit_date": 1522178779, "question_id": 49520931, "link": "https://stackoverflow.com/questions/49520931/how-do-you-access-structs-inside-enums", "closed_reason": "Duplicate", "title": "How do you access structs inside enums?", "body": "<p>The Rust book has <a href=\"https://doc.rust-lang.org/book/second-edition/ch06-01-defining-an-enum.html\" rel=\"nofollow noreferrer\">examples of assigning them but not a single one showing how to access them</a></p>\n\n<pre><code>pub enum Animal {\n    Ant(Ant),\n    Bear,\n}\n\npub struct Ant {\n    pub species: usize,\n}\n\nfn test(a: Ant) {\n    println!(\"{:?}\", a.species);\n}\n\nfn main() {\n    let a: Animal = Animal::Ant(Ant { species: 1 });\n    let b: Animal = Animal::Bear;\n\n    test(a);\n}\n</code></pre>\n\n<p>How do I get the <code>Ant</code> struct in <code>a</code> to the <code>test</code> function?</p>\n"}, {"tags": ["vector", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522173811, "post_id": 49519504, "comment_id": 86044686, "body": "I wouldn&#39;t expect it to make much difference, but your two loops aren&#39;t the same. One iterates over <code>usize</code>s and one iterates over <code>i16</code>s"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522174073, "post_id": 49519504, "comment_id": 86044848, "body": "Switching to <code>0..10000 as u16</code> and <code>v[i as usize]</code> in <code>replace_fill</code> has little impact - <code>push_fill</code> gives <code>30,213 ns&#47;iter (+&#47;- 12,046)</code> and <code>replace_fill</code> gives <code>1,982 ns&#47;iter (+&#47;- 2,291)</code>."}, {"owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "edited": false, "score": 3, "creation_date": 1522177350, "post_id": 49519504, "comment_id": 86046806, "body": "<code>Vec.push()</code> has logic that increments the <code>len</code> field of the <code>Vec</code> and checks if capacity needs to be grown.  The range checks in <code>replace_fill()</code> could potentially be optimized out, and the second pass over the memory is probably insignificant thanks to cache."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522179615, "post_id": 49519504, "comment_id": 86048117, "body": "And creating the vector with 10000 times <code>0u16</code> is only either <code>malloc</code> + <code>memset</code> or in this case maybe even just one <code>calloc(10000, sizeof(uint16_t))</code> \u2013 so nothing time-consuming."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522180317, "post_id": 49519504, "comment_id": 86048490, "body": "Well, @KBiermann, sounds good to me. If you post that as an answer I&#39;ll accept it."}], "answers": [{"comments": [{"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1522228218, "post_id": 49528417, "comment_id": 86066653, "body": "I would say that <code>let mut v: Vec&lt;u16&gt; = (0..10000).collect();</code> is more idiomatic."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "edited": false, "score": 0, "creation_date": 1522229406, "post_id": 49528417, "comment_id": 86067558, "body": "@Hauleth: I didn&#39;t want to assume too much about the usecase. It&#39;s a very common scenario, for me, to reuse the same buffer over and over, in which case <code>clear</code> + <code>extend</code> is necessary. <code>collect</code> might work, <code>extend</code> just works."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1522241611, "post_id": 49528417, "comment_id": 86076570, "body": "&quot;When in doubt, check the assembly!&quot;, not everyone want to learn assembly that why we write in rust ;)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1522249535, "post_id": 49528417, "comment_id": 86082948, "body": "@Stargateur: It was a bit tongue in the cheek; but it&#39;s also the only real answer. At the end of the day, it&#39;s way simpler to check the assembly than it is to divine what the optimizer could have (or not have) done with the original code."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522300813, "post_id": 49528417, "comment_id": 86104256, "body": "How do you check assembly via the Playground? I haven&#39;t delved into that too much. Also, while I can see that the assembly is visibly more complicated, I wouldn&#39;t understand <i>why</i> unless I had read K. Biermann&#39;s comment on the original post."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522301073, "post_id": 49528417, "comment_id": 86104346, "body": "As an aside, the <code>extend</code> option isn&#39;t <i>quite</i> as useful for me, since I was only using an incremented vector for the sake of testing (the actual puzzles require input read from <code>stdin</code>), but that&#39;s still an interesting approach. Should I ever need that in the future I&#39;ll have to keep it in mind."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522305238, "post_id": 49528417, "comment_id": 86106048, "body": "@BHustus: If you are reading from <code>stdin</code>, can you read in small batches rather than one at a time? If you can, then reading a batch and extending by a batch is likely more efficient (for both operations) than reading one by one and pushing one by one."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522305331, "post_id": 49528417, "comment_id": 86106096, "body": "@BHustus: As for reading the assembly, the trick is to skim. I don&#39;t understand half or even 3/4 of it. However I know what a label is (<code>.LBB4_2</code>), I know that any <code>jxxx .LBB4_2</code> is a jump and that any <code>call</code> is... a call :) The rest I piece together from there."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522377521, "post_id": 49528417, "comment_id": 86143779, "body": "I&#39;m not entirely sure what you mean by &quot;reading a small batch&quot;. The boilerplate code I&#39;m using creates a <code>String</code>, <code>read_line</code>s into the String, and then converts it into a number, then puts it in the Vector through some method."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1522226210, "last_edit_date": 1522226210, "creation_date": 1522221688, "answer_id": 49528417, "question_id": 49519504, "link": "https://stackoverflow.com/questions/49519504/why-is-populating-a-vec-via-replacing-defaults-so-much-faster-than-populating-so/49528417#49528417", "title": "Why is populating a Vec via replacing defaults so much faster than populating something with preset capacity?", "body": "<p>When in doubt, check the assembly!</p>\n\n<p>You can use <a href=\"https://godbolt.org/g/6rnu4y\" rel=\"nofollow noreferrer\">godbolt</a> or the playground; though I prefer godbolt here as it uses highlighting to match the assembly sections to the source code, making it easier to explore.</p>\n\n<hr>\n\n<p>In the link above, the <code>replace_fill</code> function is optimized to:</p>\n\n<pre><code>example::replace_fill:\n  push rbp\n  mov rbp, rsp\n  sub rsp, 48\n  lea rdx, [rbp - 24]\n  mov edi, 20000\n  mov esi, 2\n  call __rust_alloc_zeroed@PLT\n  test rax, rax\n  je .LBB3_4\n  movdqa xmm0, xmmword ptr [rip + .LCPI3_0]\n  mov ecx, 32\n  movdqa xmm1, xmmword ptr [rip + .LCPI3_1]\n  movdqa xmm2, xmmword ptr [rip + .LCPI3_2]\n  movdqa xmm3, xmmword ptr [rip + .LCPI3_3]\n  movdqa xmm4, xmmword ptr [rip + .LCPI3_4]\n  movdqa xmm5, xmmword ptr [rip + .LCPI3_5]\n.LBB3_2:\n  movdqu xmmword ptr [rax + 2*rcx - 64], xmm0\n  movdqa xmm6, xmm0\n  paddw xmm6, xmm1\n  movdqu xmmword ptr [rax + 2*rcx - 48], xmm6\n  movdqa xmm6, xmm0\n  paddw xmm6, xmm2\n  movdqu xmmword ptr [rax + 2*rcx - 32], xmm6\n  movdqa xmm6, xmm0\n  paddw xmm6, xmm3\n  movdqu xmmword ptr [rax + 2*rcx - 16], xmm6\n  movdqa xmm6, xmm0\n  paddw xmm6, xmm4\n  movdqu xmmword ptr [rax + 2*rcx], xmm6\n  paddw xmm0, xmm5\n  add rcx, 40\n  cmp rcx, 10032\n  jne .LBB3_2\n  mov esi, 20000\n  mov edx, 2\n  mov rdi, rax\n  call __rust_dealloc@PLT\n  add rsp, 48\n  pop rbp\n  ret\n.LBB3_4:\n  mov rax, qword ptr [rbp - 24]\n  movups xmm0, xmmword ptr [rbp - 16]\n  movaps xmmword ptr [rbp - 48], xmm0\n  mov qword ptr [rbp - 24], rax\n  movaps xmm0, xmmword ptr [rbp - 48]\n  movups xmmword ptr [rbp - 16], xmm0\n  lea rdi, [rbp - 24]\n  call __rust_oom@PLT\n  ud2\n</code></pre>\n\n<p>The latter section (LBB3_4) is OOM handling, so never used. Therefore, the flow of execution goes:</p>\n\n<ul>\n<li><code>example::replace_fill</code>, which does the allocation + initial setup,</li>\n<li><code>.LBB3_2</code> which is the loop.</li>\n</ul>\n\n<p>There are 2 elements of note:</p>\n\n<ul>\n<li>No <code>Vec</code> code appears there, at all,</li>\n<li>Those are vector instructions.</li>\n</ul>\n\n<hr>\n\n<p>On the other hand, <code>push_fill</code> is a tad more complicated:</p>\n\n<pre><code>example::push_fill:\n  push rbp\n  mov rbp, rsp\n  push r15\n  push r14\n  push rbx\n  sub rsp, 40\n  lea rdx, [rbp - 48]\n  mov edi, 20000\n  mov esi, 2\n  call __rust_alloc@PLT\n  mov rcx, rax\n  test rcx, rcx\n  je .LBB2_11\n  mov qword ptr [rbp - 48], rcx\n  mov qword ptr [rbp - 40], 10000\n  mov qword ptr [rbp - 32], 0\n  xor r15d, r15d\n  lea r14, [rbp - 48]\n  xor esi, esi\n.LBB2_2:\n  mov ebx, r15d\n  add bx, 1\n  cmovb bx, r15w\n  jb .LBB2_3\n  cmp rsi, qword ptr [rbp - 40]\n  jne .LBB2_9\n  mov rdi, r14\n  call &lt;alloc::raw_vec::RawVec&lt;T, A&gt;&gt;::double\n  mov rcx, qword ptr [rbp - 48]\n  mov rsi, qword ptr [rbp - 32]\n.LBB2_9:\n  mov word ptr [rcx + 2*rsi], r15w\n  mov rsi, qword ptr [rbp - 32]\n  inc rsi\n  mov qword ptr [rbp - 32], rsi\n  movzx eax, bx\n  cmp eax, 10000\n  mov r15w, bx\n  jb .LBB2_2\n.LBB2_3:\n  mov rsi, qword ptr [rbp - 40]\n  test rsi, rsi\n  je .LBB2_5\n  add rsi, rsi\n  mov rdi, qword ptr [rbp - 48]\n  mov edx, 2\n  call __rust_dealloc@PLT\n.LBB2_5:\n  add rsp, 40\n  pop rbx\n  pop r14\n  pop r15\n  pop rbp\n  ret\n.LBB2_11:\n  movups xmm0, xmmword ptr [rbp - 40]\n  movaps xmmword ptr [rbp - 64], xmm0\n  movaps xmm0, xmmword ptr [rbp - 64]\n  movups xmmword ptr [rbp - 40], xmm0\n  lea rdi, [rbp - 48]\n  call __rust_oom@PLT\n  ud2\n  mov rbx, rax\n  lea rdi, [rbp - 48]\n  call core::ptr::drop_in_place\n  mov rdi, rbx\n  call _Unwind_Resume@PLT\n  ud2\n</code></pre>\n\n<p>More blocks, meaning more branches, checks for out-of-capacity at each iteration of the loop, ...</p>\n\n<hr>\n\n<p>None of the above examples are idiomatic, though.</p>\n\n<p>Here is how I'd write them:</p>\n\n<pre><code>#[inline(never)]\npub fn extend_fill() {\n    let mut v = Vec::new();\n    v.extend(0u16..10000);\n}\n</code></pre>\n\n<p>This method comes from implementing the <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-Extend%3CT%3E\" rel=\"nofollow noreferrer\"><code>Extend</code> trait</a>. When used with a trust length iterator (as this one), it will do a single \"growth\" step if necessary and then push without ever checking again.</p>\n\n<p>The assembly is not as lean as <code>replace_fill</code>, but still looks pretty good:</p>\n\n<pre><code>example::extend_fill:\n  push rbp\n  mov rbp, rsp\n  sub rsp, 64\n  mov qword ptr [rbp - 24], 2\n  xorps xmm0, xmm0\n  movups xmmword ptr [rbp - 16], xmm0\n  lea rdx, [rbp - 48]\n  mov edi, 20000\n  mov esi, 2\n  call __rust_alloc@PLT\n  test rax, rax\n  je .LBB4_7\n  mov qword ptr [rbp - 24], rax\n  mov qword ptr [rbp - 16], 10000\n  xor ecx, ecx\n  movdqa xmm0, xmmword ptr [rip + .LCPI4_0]\n  movdqa xmm1, xmmword ptr [rip + .LCPI4_1]\n  jmp .LBB4_2\n.LBB4_6:\n  movd xmm2, edx\n  pshuflw xmm2, xmm2, 0\n  pshufd xmm2, xmm2, 80\n  movdqa xmm3, xmm2\n  paddw xmm3, xmm0\n  paddw xmm2, xmm1\n  movdqu xmmword ptr [rax + 2*rcx + 32], xmm3\n  movdqu xmmword ptr [rax + 2*rcx + 48], xmm2\n  add rdx, 16\n  mov rcx, rdx\n.LBB4_2:\n  movd xmm2, ecx\n  pshuflw xmm2, xmm2, 0\n  pshufd xmm2, xmm2, 80\n  movdqa xmm3, xmm2\n  paddw xmm3, xmm0\n  paddw xmm2, xmm1\n  movdqu xmmword ptr [rax + 2*rcx], xmm3\n  movdqu xmmword ptr [rax + 2*rcx + 16], xmm2\n  lea rdx, [rcx + 16]\n  cmp rdx, 10000\n  jne .LBB4_6\n  mov qword ptr [rbp - 8], 10000\n  mov rsi, qword ptr [rbp - 16]\n  test rsi, rsi\n  je .LBB4_5\n  add rsi, rsi\n  mov rdi, qword ptr [rbp - 24]\n  mov edx, 2\n  call __rust_dealloc@PLT\n.LBB4_5:\n  add rsp, 64\n  pop rbp\n  ret\n.LBB4_7:\n  movups xmm0, xmmword ptr [rbp - 40]\n  movaps xmmword ptr [rbp - 64], xmm0\n  movaps xmm0, xmmword ptr [rbp - 64]\n  movups xmmword ptr [rbp - 40], xmm0\n  lea rdi, [rbp - 48]\n  call __rust_oom@PLT\n  ud2\n</code></pre>\n\n<p>I encourage you to try it out, and in general get familiar with Rust Iterators: sweet code, good performance, they're a tool you'll need.</p>\n"}], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 138, "favorite_count": 0, "accepted_answer_id": 49528417, "answer_count": 1, "score": 3, "last_activity_date": 1522226210, "creation_date": 1522173389, "last_edit_date": 1522174043, "question_id": 49519504, "link": "https://stackoverflow.com/questions/49519504/why-is-populating-a-vec-via-replacing-defaults-so-much-faster-than-populating-so", "title": "Why is populating a Vec via replacing defaults so much faster than populating something with preset capacity?", "body": "<p>Foreword: I am generally not an optimizer.</p>\n\n<p>Most times, when solving a coding puzzle in Rust, I use <code>Vec::with_capacity</code> to initialize my vectors, and then insert items by <code>push</code>ing them onto the vector. For most purposes, this was fine, but I recently encountered a puzzle that required a faster program, which inspired me to rethink my approach.</p>\n\n<p>Since I know the capacity of the vector is exactly some number, I decided to compare the results of my usual <code>with_capacity</code> and <code>push</code> approach, to creating a vector full of 0's and replacing them instead. This is the code I used to benchmark the two operations:</p>\n\n<pre><code>#![feature(test)]\n\nextern crate test;\n\n#[cfg(test)]\nmod tests {\n    use test::Bencher;\n\n    // Create a vector with a capacity of 10,000 u16s\n    // and populate it by pushing.\n    #[bench]\n    fn push_fill(b: &amp;mut Bencher) {\n        b.iter(|| {\n            let mut v: Vec&lt;u16&gt; = Vec::with_capacity(10000);\n            for i in 0..10000 as u16 {\n                v.push(i);\n            }\n        })\n    }\n\n    // Create a vector of 10,000 u16s, initialize them\n    // to 0, and then replace them to populate the vector.\n    #[bench]\n    fn replace_fill(b: &amp;mut Bencher) {\n        b.iter(|| {\n            let mut v: Vec&lt;u16&gt; = vec![0u16; 10000];\n            for i in 0..10000 {\n                v[i] = i as u16;\n            }\n        })\n    }\n}\n</code></pre>\n\n<p>To my surprise, the replacement solution is an order of magnitude better than the <code>with_capacity</code> solution when I run <code>cargo +nightly bench</code>.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling benchmarks v0.1.0 (file:///C:/Users/CEUser/Documents/Programs/rustprojects/benchmarks)\n    Finished release [optimized] target(s) in 10.75 secs\n     Running target\\release\\deps\\benchmarks-0b553bf1dfb7e9a4.exe\n\nrunning 2 tests\ntest tests::push_fill    ... bench:      26,756 ns/iter (+/- 4,046)\ntest tests::replace_fill ... bench:       1,902 ns/iter (+/- 802)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 2 measured; 0 filtered out\n</code></pre>\n\n<p>I was surprised at the difference in time, especially given that I expected the <code>replace</code> version to take longer (given that it has to create a vector full of filler, and <em>then</em> replace that filler data with actual data).</p>\n\n<p>Is there an intuitive reason why <code>replace_fill</code> is so much faster than <code>push_fill</code>? What's the difference between what the two functions are doing?</p>\n"}, {"tags": ["rust", "ipv6", "hyper"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522170666, "post_id": 49517883, "comment_id": 86043034, "body": "Please <a href=\"https://stackoverflow.com/posts/49517883/edit\">edit</a> your question to contain a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> of your client. You should also include what version of hyper you are using."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522170938, "post_id": 49517883, "comment_id": 86043163, "body": "Can you even completely remove hyper from the program? Does something like <code>std::net::TcpStream::connect((&quot;[::1]&quot;, 3005)).unwrap();</code> or <code>std::net::TcpStream::connect(&quot;[::1]:3005&quot;).unwrap();</code> reproduce the same behavior in both cases?"}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522180514, "post_id": 49517883, "comment_id": 86048593, "body": "You could try to remove the <code>http:&#47;&#47;</code>-part; I don&#39;t know how <code>hyper</code> works internally but it might get confused about this."}, {"owner": {"reputation": 193, "user_id": 2456785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53704ef70a4ea6f36dfa7435913eaff4?s=128&d=identicon&r=PG", "display_name": "Misho Janev", "link": "https://stackoverflow.com/users/2456785/misho-janev"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522182774, "post_id": 49517883, "comment_id": 86049751, "body": "@Shepmaster I have added a minimal (I believe) set of code that you can use to reproduce this behaviour and you are correct for asking me to specify the version of hyper, as I remembered I forced that to be the latest one from the 0.10.X series, as I had some troubles with 0.11.X. So to clarify this, for these examples 0.10.13 was used."}], "answers": [{"tags": [], "owner": {"reputation": 193, "user_id": 2456785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53704ef70a4ea6f36dfa7435913eaff4?s=128&d=identicon&r=PG", "display_name": "Misho Janev", "link": "https://stackoverflow.com/users/2456785/misho-janev"}, "is_accepted": true, "score": 0, "last_activity_date": 1522256963, "last_edit_date": 1522256963, "creation_date": 1522256181, "answer_id": 49540226, "question_id": 49517883, "link": "https://stackoverflow.com/questions/49517883/hyper-client-cannot-lookup-address-information-for-server-running-on-ipv6-localh/49540226#49540226", "title": "hyper client cannot lookup address information for server running on IPv6 localhost", "body": "<p>IPv6 support seems to be <a href=\"https://github.com/hyperium/hyper/issues/1316\" rel=\"nofollow noreferrer\">an issue with the previous and current versions of hyperium/hyper</a> (&lt;=0.11.23)</p>\n\n<p>The developers advise using the Reqwest crate for clients using hyper 0.11.X, but since Reqwest builds upon hyper, the results will be the same.</p>\n\n<hr>\n\n<p>The solution I have found so far is to use the bindings of cURL for Rust as cURL seems to be robust enough. Here is my code for writing a client that sends a simple GET request to an IPv6 server address.</p>\n\n<p><strong>Client</strong></p>\n\n<pre><code>extern crate curl;\nuse std::io::{stdout, Write};\nuse curl::easy::Easy;\n\nfn main() {\n    let mut easy = Easy::new();\n\n    easy.url(\"https://[::1]:3000\").unwrap();\n    easy.write_function(|data| {\n        stdout().write_all(data).unwrap();\n        Ok(data.len())\n    }).unwrap();\n\n    easy.perform().unwrap();\n}\n</code></pre>\n\n<p>This is not the prettiest solution as it uses a library built in C, which is an unsafe language, but until better alternatives come up it is a nice workaround.</p>\n"}], "owner": {"reputation": 193, "user_id": 2456785, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53704ef70a4ea6f36dfa7435913eaff4?s=128&d=identicon&r=PG", "display_name": "Misho Janev", "link": "https://stackoverflow.com/users/2456785/misho-janev"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1016, "favorite_count": 1, "accepted_answer_id": 49540226, "answer_count": 1, "score": 2, "last_activity_date": 1522256963, "creation_date": 1522167520, "last_edit_date": 1522185402, "question_id": 49517883, "link": "https://stackoverflow.com/questions/49517883/hyper-client-cannot-lookup-address-information-for-server-running-on-ipv6-localh", "title": "hyper client cannot lookup address information for server running on IPv6 localhost", "body": "<p>I have a simple HTTP server using Router and Iron on port 3005. It is not doing anything exciting. I believe it just echoes back the request, but the details are not important.</p>\n\n<p>I have also made a simple client using hyper's client module to send requests to the server.</p>\n\n<p>Whenever I run the server on IPv4 <code>localhost</code>, I experience no issues. I can query it both with my client and with curl. If I start the server on my IPv6 <code>localhost</code> (I am using the shortened version <code>::1</code>), I am only able to access the server with curl.</p>\n\n<p>This indicates that the server is running properly and responding, but my hyper <code>Client</code> code to access it fails, reporting: </p>\n\n<blockquote>\n  <p>Err(Io(Error { repr: Custom(Custom { kind: Other, error: StringError(\"<strong>failed to lookup address information: Name or service not known</strong>\") }) }))\n  thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: Io(Error { repr: Custom(Custom { kind: Other, error: StringError(\"failed to lookup address information: Name or service not known\") }) })', /checkout/src/libcore/result.rs:860</p>\n</blockquote>\n\n<p>The code I use to send the POST request is as follows:</p>\n\n<pre><code>let addr = \"http://[::1]:3005/message\";\nlet mut res = self.client.post(addr).body(s.as_str()).send().unwrap();\n</code></pre>\n\n<p>Where <code>s</code> is some payload I am sending.</p>\n\n<p>I have tried the expanded IPv6 address as well (<code>[0:0:0:0:0:0:0:1]</code>) and I get the same error.</p>\n\n<p>I have also tried both the shortened and the expanded IPv6 addresses without the brackets. I get \"invalid port -\" with the expanded address and \"Empty Host\" with the shortened.</p>\n\n<p>To reproduce this behaviour, you can use these small examples (uncomment the commented lines to recieve the error):</p>\n\n<p><strong>Server</strong></p>\n\n<pre><code>extern crate iron;\n\nuse iron::prelude::*;\nuse iron::status;\n\nfn hello_world(_: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    println!(\"Recvd a request\");\n    Ok(Response::with((status::Ok, \"Hello World!\")))\n}\n\nfn main() {\n    let port = 3000;\n    //let addr = format!(\"{}:{}\", \"[::1]\", port);\n    let addr = format!(\"{}:{}\", \"localhost\", port);\n\n    println!(\"Server opened on {}\", addr);\n\n    Iron::new(hello_world).http(addr).unwrap();\n}\n</code></pre>\n\n<p><strong>Client</strong></p>\n\n<pre><code>// hyper 0.10.13\nextern crate hyper;\n\nuse hyper::*;\nuse std::io::Read;\n\nfn main() {\n    let client = Client::new();\n    //let mut res = client.get(\"http://[::1]:3000/\").send().unwrap();\n    let mut res = client.get(\"http://localhost:3000/\").send().unwrap();\n\n    let mut s = String::new();\n    res.read_to_string(&amp;mut s).unwrap();\n\n    println!(\"response contained: {}\", s);\n}\n</code></pre>\n\n<p><strong>ClientV2</strong></p>\n\n<pre><code>// For people that want to try with hyper 0.11.X\nextern crate futures;\nextern crate hyper;\nextern crate tokio_core;\n\nuse std::io::{self, Write};\nuse futures::{Future, Stream};\nuse hyper::Client;\nuse tokio_core::reactor::Core;\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let client = Client::new(&amp;core.handle());\n\n    let uri = \"http://[::1]:3000/\".parse().unwrap();\n    let work = client.get(uri).and_then(|res| {\n        println!(\"Response: {}\", res.status());\n\n        res.body().for_each(|chunk| {\n            io::stdout()\n                .write_all(&amp;chunk)\n                .map(|_| ())\n                .map_err(From::from)\n        })\n    });\n\n    core.run(work).unwrap();\n\n}\n</code></pre>\n\n<p><em>Note1:</em></p>\n\n<p>You need hyper 0.10.X in order to get this code running. In my case I was using 0.10.13</p>\n\n<p><em>Note2:</em> </p>\n\n<p>I am sending GET requests with no payload, in order to abstract out the irrelevant bits of functionality.</p>\n\n<p><em>Note3:</em></p>\n\n<p>It seems like hyper 0.10.X and hyper 0.11.X handle the IPv6 server differently. Hyper 0.10.X gives the aforementioned error, while 0.11.X gives me Response Code <strong>400 Bad Request</strong>. </p>\n"}, {"tags": ["dictionary", "rust", "flat"], "answers": [{"comments": [{"owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "edited": false, "score": 0, "creation_date": 1522170027, "post_id": 49515418, "comment_id": 86042681, "body": "Thank you. I didn&#39;t know about into_iter. This article is helpful for that. <a href=\"http://hermanradtke.com/2015/06/22/effectively-using-iterators-in-rust.html\" rel=\"nofollow noreferrer\">hermanradtke.com/2015/06/22/&hellip;</a>"}, {"owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "edited": false, "score": 1, "creation_date": 1522170650, "post_id": 49515418, "comment_id": 86043025, "body": "Your solution with move c is also really elegant. Thank you."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1522160759, "last_edit_date": 1522160759, "creation_date": 1522160453, "answer_id": 49515418, "question_id": 49515225, "link": "https://stackoverflow.com/questions/49515225/flat-map-dropped-here-while-still-borrowed/49515418#49515418", "title": "flat_map dropped here while still borrowed", "body": "<p>Calling <code>is.iter()</code> returns references to the values inside <code>is</code>. Your final iterator type is attempting to return these references, except that the <code>Vec</code> holding the values has already been deallocated.</p>\n\n<p>The simplest fix is to switch to <code>into_iter</code>, which takes ownership of the <code>Vec</code> and all its values. The more efficient fix is to avoid creating a <code>Vec</code> at all:</p>\n\n<pre><code>fn main() {\n    let names = vec![\"Jane\", \"Jill\", \"Jack\", \"Johne\"];\n\n    let name3 = names\n        .iter()\n        .enumerate()\n        .flat_map(|(i, name)| name.chars().map(move |c| (i, c)));\n\n    for i in name3 {\n        println!(\"{:?}\", i);\n    }\n}\n</code></pre>\n\n<blockquote>\n  <p>if I flip <code>letters</code> and <code>is</code>, it works.</p>\n</blockquote>\n\n<p>Yes, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\" rel=\"noreferrer\"><code>zip</code></a> takes values that implement <a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noreferrer\"><code>IntoIterator</code></a>. By flipping the arguments, you end up implicitly calling <code>into_iter</code> on the <code>Vec</code>. You'd get the same undesired behavior if you did <code>letters.zip(&amp;is)</code>.</p>\n"}], "owner": {"reputation": 999, "user_id": 4051748, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/3d012d2cf5c02a4b9de7ef6c5fb6f3d8?s=128&d=identicon&r=PG", "display_name": "Mochan", "link": "https://stackoverflow.com/users/4051748/mochan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 0, "accepted_answer_id": 49515418, "answer_count": 1, "score": 2, "last_activity_date": 1522160759, "creation_date": 1522159963, "last_edit_date": 1522160486, "question_id": 49515225, "link": "https://stackoverflow.com/questions/49515225/flat-map-dropped-here-while-still-borrowed", "title": "flat_map dropped here while still borrowed", "body": "<p>I'm trying to write a vector with the index of the string and each character in the string. </p>\n\n<p>In the example below, 0 J, 0 a, 0 n ... 1 J, 1i, ...</p>\n\n<pre><code>fn main() {\n    let names = vec![\"Jane\", \"Jill\", \"Jack\", \"Johne\"];\n    let name3 = names.iter().enumerate().flat_map(|(i, name)| {\n        let letters = name.chars();\n        let mut is = Vec::new();\n        for _k in 0..name.len() {\n            is.push(i);\n        }\n        is.iter().zip(letters).collect::&lt;Vec&lt;_&gt;&gt;()\n    });\n    for i in name3 {\n        println!(\"{:?}\", i);\n    }\n}\n</code></pre>\n\n<p>This gives me the error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `is` does not live long enough\n  --&gt; src/main.rs:9:9\n   |\n9  |         is.iter().zip(letters).collect::&lt;Vec&lt;_&gt;&gt;()\n   |         ^^ borrowed value does not live long enough\n10 |     });\n   |     - `is` dropped here while still borrowed\n...\n14 | }\n   | - borrowed value needs to live until here\n</code></pre>\n\n<p>I don't understand what is going on here. I've already collected the <code>is</code> value.</p>\n\n<p>Weirdly enough, if I flip <code>letters</code> and <code>is</code>, it works.</p>\n\n<pre><code>letters.zip(is)\n</code></pre>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1522157747, "post_id": 49514152, "comment_id": 86033492, "body": "Could you please <a href=\"https://stackoverflow.com/posts/49514152/edit\">edit</a> your question to explain why the answers for <a href=\"https://stackoverflow.com/q/26080157/155423\">Using a <code>let</code> binding to increase value lifetime</a> or <a href=\"https://stackoverflow.com/q/37264396/155423\">\u201cborrowed value does not live long enough\u201d seems to blame the wrong thing</a> do not answer this question?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1522157908, "post_id": 49514152, "comment_id": 86033625, "body": "<i>the best and/or most efficient way to fix this</i> \u2014 Have you tried applying the suggestion from the compiler: &quot;consider using a <code>let</code> binding to increase its lifetime&quot;"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1522157964, "post_id": 49514152, "comment_id": 86033671, "body": "Strange that googling the error message only gives <a href=\"https://users.rust-lang.org/t/borrowed-value-does-not-live-long-enough/7225\" rel=\"nofollow noreferrer\">this answer</a> but nothing on SO."}, {"owner": {"reputation": 8757, "user_id": 9634, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/6181812b2747dc091b4b7ec97fb67c2f?s=128&d=identicon&r=PG", "display_name": "Brent.Longborough", "link": "https://stackoverflow.com/users/9634/brent-longborough"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522158353, "post_id": 49514152, "comment_id": 86033991, "body": "@Shepmaster : Oh, yes; that led me deep and unsuccessfully into Alice&#39;s Wonderland, and returning to my base code to ask for help seemed like a better idea I think the clue from your answer to &quot;seems to blame the wrong thing&quot; will help, though, and I&#39;ll update or delete the question in an hour or so."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1522158857, "post_id": 49514152, "comment_id": 86034406, "body": "No need to <i>delete</i> the question if it&#39;s solved by an existing one. You can vote to close your own question as a duplicate, which helps everyone else who stumbles across this question from search in the future."}, {"owner": {"reputation": 8757, "user_id": 9634, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/6181812b2747dc091b4b7ec97fb67c2f?s=128&d=identicon&r=PG", "display_name": "Brent.Longborough", "link": "https://stackoverflow.com/users/9634/brent-longborough"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522159085, "post_id": 49514152, "comment_id": 86034596, "body": "@Shepmaster Yes, of course."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522159251, "post_id": 49514152, "comment_id": 86034741, "body": "@Shepmaster, just out of curiosity, what&#39;s the &quot;borrowed value&quot; in this specific case? <code>ctx.get_contents</code> is a <code>Result&lt;String, Box&lt;Error&gt;&gt;</code> according to <a href=\"https://docs.rs/clipboard/0.4.6/clipboard/x11_clipboard/struct.X11ClipboardContext.html\" rel=\"nofollow noreferrer\">the docs</a> (so it&#39;s not borrowing from <code>ctx</code>), and at the end of the block the string is collected into a new vector. I&#39;m not even sure if <i>I</i> see what the compiler is unhappy with."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1522159791, "post_id": 49514152, "comment_id": 86035174, "body": "@BHustus the <code>Result</code> is unwrapped yielding <code>String</code>, then <code>split_whitespace</code> takes references to the <code>String</code>, then the <code>String</code> is dropped. The <code>String</code> is borrowed by <code>Split</code>. <code>String::new().split_whitespace().collect::&lt;Vec&lt;_&gt;&gt;()</code> is a MCVE."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1522160317, "post_id": 49514152, "comment_id": 86035592, "body": "Brent, in your new edit, <code>&amp;item.to_string()</code> creates a <code>String</code>, then makes a reference to it (as if you did <code>&amp;( item.to_string() )</code>), which is pushed into a collection outside of the block - which is bad. Try just <code>item.to_string()</code>, which creates an owned object that hopefully shouldn&#39;t raise that error, and create a <code>Vec&lt;String&gt;</code> instead."}, {"owner": {"reputation": 8757, "user_id": 9634, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/6181812b2747dc091b4b7ec97fb67c2f?s=128&d=identicon&r=PG", "display_name": "Brent.Longborough", "link": "https://stackoverflow.com/users/9634/brent-longborough"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522160664, "post_id": 49514152, "comment_id": 86035900, "body": "@BHustus That gives me <code>expected &amp;str, found struct &#39;std::string::String&#39; help: consider borrowing here: &#39;&amp;item.to_string()&#39;</code>. Do I need Vec&lt;String&gt; rather than Vec&lt;&amp;str&gt;? -- Yep, Vec&lt;String&gt; compiled! Thank you."}], "owner": {"reputation": 8757, "user_id": 9634, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/6181812b2747dc091b4b7ec97fb67c2f?s=128&d=identicon&r=PG", "display_name": "Brent.Longborough", "link": "https://stackoverflow.com/users/9634/brent-longborough"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 80, "favorite_count": 0, "closed_date": 1522163284, "answer_count": 0, "score": 0, "last_activity_date": 1522160036, "creation_date": 1522157171, "last_edit_date": 1522160036, "question_id": 49514152, "link": "https://stackoverflow.com/questions/49514152/lifetimes-ownership-and-borrowing-in-rust-understanding-how-a-simple-conditi", "closed_reason": "Duplicate", "title": "Lifetimes, Ownership and Borrowing in Rust; understanding how a &quot;simple&quot; conditional works", "body": "<p>As a Rust newbie, I'm having a really hard time understanding what appear to be these most significant features. I have read the relevant sections TRPL (1 and 2) multiple times, and yet I still can't get my code to compile. As an example, I've extracted and simplified part of a bigger project.</p>\n\n<p>This example program builds a list of strings (I've used Vec), either from the command line arguments, or, if the -c parameter is given, from the clipboard.</p>\n\n<pre><code>extern crate clipboard;\nuse clipboard::{ClipboardContext, ClipboardProvider};\n\nextern crate clap;\nuse clap::{App, Arg, ArgMatches};\n\n#[allow(unused)] // Reduce noise in compiler output\nfn main() {\n    let cmdl: ArgMatches = App::new(\"mwe\")\n        .arg(\n            Arg::with_name(\"clipboard\")\n                .short(\"c\")\n                .conflicts_with(\"list\")\n                .takes_value(false),\n        )\n        .arg(\n            Arg::with_name(\"list\")\n                .takes_value(true)\n                .required_unless(\"clipboard\")\n                .multiple(true),\n        )\n        .get_matches();\n    println!(\"{:?}\", cmdl);\n\n    let vlist: Vec&lt;&amp;str&gt; = Vec::new();\n    if cmdl.is_present(\"clipboard\") {\n        let mut ctx: ClipboardContext = ClipboardProvider::new().unwrap();\n        let vlist = ctx.get_contents()\n            .unwrap()\n            .split_whitespace()\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n    } else {\n        let vlist = cmdl.values_of(\"list\").unwrap().collect::&lt;Vec&lt;_&gt;&gt;();\n    };\n    println!(\"{:?}\", vlist);\n}\n</code></pre>\n\n<p>On compiling, this is the output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:28:25\n   |\n28 |               let vlist = ctx.get_contents()\n   |  _________________________^\n29 | |                 .unwrap()\n   | |_________________________^ temporary value does not live long enough\n30 |                   .split_whitespace()\n31 |                   .collect::&lt;Vec&lt;_&gt;&gt;();\n   |                                       - temporary value dropped here while still borrowed\n32 |           } else {\n   |           - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>Now, I have (at least) two problems:</p>\n\n<ol>\n<li>I just don't understand why what I've written is in error. It may be that I'm just a slow learner, or, maybe, that to perceive some aspects of borrowing and lifetimes one has to have a more intimate understanding of the libraries one is using. Please explain what's going on here?</li>\n<li>I have no idea of the best and/or most efficient way to fix this; please guide me.</li>\n</ol>\n\n<p>As a footnote, these \"no-more-garbage-collection\" features are one of the things that attract me to Rust. But I can't help thinking, occasionally, that the examples in TRPL need to be simpler, and that the learning curve in this area looks more like a precipice. All help and illumination greatly appreciated.</p>\n\n<hr>\n\n<h3>Ongoing evolution of the problem</h3>\n\n<p>Following <a href=\"https://stackoverflow.com/a/37265024/9634\">https://stackoverflow.com/a/37265024/9634</a> <a href=\"https://stackoverflow.com/a/37265024/9634\">this answer to \u201cborrowed value does not live long enough\u201d seems to blame the wrong thing</a> (which gave me a better understanding of the library internals), I amended my code, replacing</p>\n\n<pre><code>    let vlist = ctx.get_contents()\n        .unwrap()\n        .split_whitespace()\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n</code></pre>\n\n<p>by</p>\n\n<pre><code>for item in ctx.get_contents().unwrap().split_whitespace() {\n    vlist.push(&amp;item.to_string()) ;\n} \n</code></pre>\n\n<p>The error has now moved a little:</p>\n\n<pre><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src\\main.rs:24:25\n   |\n24 |             vlist.push(&amp;item.to_string()) ;\n   |                         ^^^^^^^^^^^^^^^^  - temporary value dropped here while still borrowed\n   |                         |\n   |                         temporary value does not live long enough\n...\n32 | }\n   | - temporary value needs to live until here\n   |\n   = note: consider using a `let` binding to increase its lifetime\n</code></pre>\n\n<p>I'd like very much to follow the recommendation of \"using a let binding to increase its lifetime\" (as reinforced in the comments), but I haven't a clue what this would look like. Please help.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1522148742, "post_id": 49510965, "comment_id": 86026599, "body": "What do you mean &quot;most correct&quot;?"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1522150088, "post_id": 49510965, "comment_id": 86027505, "body": "I&#39;m not very good at Rust, but consider <a href=\"https://play.rust-lang.org/?gist=dfa8afad72872d91daa97af65bb6a58e&amp;version=stable\" rel=\"nofollow noreferrer\">this</a>, which is much more functional."}, {"owner": {"reputation": 609, "user_id": 7574198, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/65af7491e4cba13fd9a6e43ac618116f?s=128&d=identicon&r=PG&f=1", "display_name": "kycklingsylt", "link": "https://stackoverflow.com/users/7574198/kycklingsylt"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 7, "creation_date": 1522157373, "post_id": 49510965, "comment_id": 86033161, "body": "To me that&#39;s much less readable than the accepted answer"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 3, "creation_date": 1522161277, "post_id": 49510965, "comment_id": 86036419, "body": "To me, Korean is much less readable than Chinese until I start reading it every day. Using the tools a paradigm offers vs. what you know is going to make writing the code much easier."}], "answers": [{"comments": [{"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1522148628, "post_id": 49511205, "comment_id": 86026514, "body": "The better answer is <i>don&#39;t introduce side effects when pattern matching</i>."}, {"owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 2, "creation_date": 1522150135, "post_id": 49511205, "comment_id": 86027538, "body": "Is there something special about pattern matching in Rust which makes side effects there less desirable than in any other place?"}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1522150167, "post_id": 49511205, "comment_id": 86027559, "body": "Good point. I&#39;ll amend my statement to be <i>don&#39;t introduce side effects</i> (if it can be helped). It&#39;s particularly glaring here for some reason... maybe because pattern matching is the building block of FP."}, {"owner": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1531445831, "post_id": 49511205, "comment_id": 89609393, "body": "@erip Generally, yes, but there are times when e.g. you want to return early for one of the arms but do nothing otherwise.  I just ran into such a case, which drew me here."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "reply_to_user": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "edited": false, "score": 0, "creation_date": 1531481637, "post_id": 49511205, "comment_id": 89623340, "body": "@SilasBarta That doesn&#39;t sound right. Sounds like you could map to an <code>Option</code>"}, {"owner": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 1, "creation_date": 1531782929, "post_id": 49511205, "comment_id": 89714561, "body": "@erip No, I meant &quot;do nothing on that loop iteration&quot;.  For the case I&#39;m considering, the return value will always be an integer, it&#39;s just that sometimes the loop needs to keep going, and sometimes it knows enough to exit and return there."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "reply_to_user": {"reputation": 393, "user_id": 1260665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/09602b6ab4d97b748358691d9243b61d?s=128&d=identicon&r=PG", "display_name": "Silas Barta", "link": "https://stackoverflow.com/users/1260665/silas-barta"}, "edited": false, "score": 0, "creation_date": 1531784331, "post_id": 49511205, "comment_id": 89714827, "body": "@SilasBarta I do not understand the use case well enough, but it still seems like other constructs could be more useful without sacrificing abstractions. Not sure what they are in Rust, but dropWhile and takeWhile come to mind."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "reply_to_user": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "edited": false, "score": 24, "creation_date": 1540900003, "post_id": 49511205, "comment_id": 93025523, "body": "@erip Rust has FP features but is not an FP language; side effects are common. And match is not &quot;the building block of FP&quot;, it&#39;s just one of several tools to do the complex transformations of data that are at the heart of FP. Other, non-FP languages have adopted it because of its general usefulness. &quot;don&#39;t introduce side effects&quot; is not &quot;the better answer&quot;; in fact it&#39;s off topic. People ask questions on SO because they have specific problems they&#39;re trying to solve, and it&#39;s really not appropriate to tell them to change their paradigm in this context."}, {"owner": {"reputation": 13883, "user_id": 2883245, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/NPpPG.jpg?s=128&g=1", "display_name": "erip", "link": "https://stackoverflow.com/users/2883245/erip"}, "reply_to_user": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 0, "creation_date": 1540995518, "post_id": 49511205, "comment_id": 93067837, "body": "@JimBalter There is no feature checklist which forces a boundary into whether a language is FP or not... but I&#39;d say immutability-by-default and support for lambdas is a pretty good start... And match being a partial function falls squarely onto the shoulders of both of those. WRT to telling someone to change the paradigm? Changing the solution to use a <code>fold</code> is minor. Since you&#39;re reviving this, you&#39;ve clearly found a reason to believe your comment is relevant... I just haven&#39;t found it."}, {"owner": {"reputation": 14956, "user_id": 544557, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1df76ef4fab96ec67b2afa080b3a0c?s=128&d=identicon&r=PG", "display_name": "Jim Balter", "link": "https://stackoverflow.com/users/544557/jim-balter"}, "edited": false, "score": 10, "creation_date": 1541003371, "post_id": 49511205, "comment_id": 93073120, "body": "My comment is obviously relevant, and nothing in the above refutes any of it. My comment stands and I won&#39;t engage further."}], "tags": [], "owner": {"reputation": 153048, "user_id": 9204, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/c79937a093ff9e963c563e22cd385f30?s=128&d=identicon&r=PG", "display_name": "Alexey Romanov", "link": "https://stackoverflow.com/users/9204/alexey-romanov"}, "is_accepted": true, "score": 73, "last_activity_date": 1522148785, "last_edit_date": 1522148785, "creation_date": 1522148565, "answer_id": 49511205, "question_id": 49510965, "link": "https://stackoverflow.com/questions/49510965/how-to-not-do-anything-on-the-rest-case-when-matching-a-string/49511205#49511205", "title": "How to not do anything on the &quot;rest case&quot; when matching a string?", "body": "<blockquote>\n<pre><code>let some_u8_value = 0u8;\nmatch some_u8_value {\n    1 =&gt; println!(\"one\"),\n    3 =&gt; println!(\"three\"),\n    5 =&gt; println!(\"five\"),\n    7 =&gt; println!(\"seven\"),\n    _ =&gt; (),\n}\n</code></pre>\n  \n  <p><a href=\"https://doc.rust-lang.org/book/second-edition/ch06-02-match.html#the-_-placeholder\" rel=\"noreferrer\"><strong>The () is just the unit value, so nothing will happen in the <code>_</code> case.</strong> As a result, we can say that we want to do nothing for all the possible values that we don\u2019t list before the <code>_</code> placeholder.</a></p>\n</blockquote>\n\n<p>You can also use empty block expression <code>{}</code>.</p>\n"}], "owner": {"reputation": 609, "user_id": 7574198, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/65af7491e4cba13fd9a6e43ac618116f?s=128&d=identicon&r=PG&f=1", "display_name": "kycklingsylt", "link": "https://stackoverflow.com/users/7574198/kycklingsylt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 17529, "favorite_count": 3, "accepted_answer_id": 49511205, "answer_count": 1, "score": 45, "last_activity_date": 1612781659, "creation_date": 1522147848, "last_edit_date": 1522148103, "question_id": 49510965, "link": "https://stackoverflow.com/questions/49510965/how-to-not-do-anything-on-the-rest-case-when-matching-a-string", "title": "How to not do anything on the &quot;rest case&quot; when matching a string?", "body": "<p>I have a string where I want to check if it's a semicolon, comma or colon. If it's not any of those, I don't want to do anything:</p>\n\n<pre><code>match token.as_ref() {\n    \";\" =&gt; semicolons += 1,\n    \",\" =&gt; commas += 1,\n    \":\" =&gt; colons += 1,\n     _ =&gt; println!(\"\"),\n}\n</code></pre>\n\n<p>This works, but I don't really want to print a bunch of empty lines (cause a lot of the tokens don't match these criteria).</p>\n\n<p>What would be the most correct way to solve this?</p>\n"}, {"tags": ["rust", "runtime"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1522147872, "post_id": 49510471, "comment_id": 86025972, "body": "Hello and welcome. If you haven&#39;t yet, I advise you to take a look at the book (<a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\">here</a>)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1522148715, "post_id": 49510471, "comment_id": 86026576, "body": "I think the fate <code>rdr</code> is a <i>whole other question</i>. In short: yes, any value of which the scope ends gets destroyed if it was not moved from. This means calling their implementation of <code>Drop::drop</code>, if any. And <b>this has nothing to do with memory safety</b>. Memory safety is not about leaking (or not) memory and other resources, it&#39;s about avoid dangling pointers and double-frees. Not destroying anything is a perfectly safe way to avoid dangling pointers and double-frees; it&#39;s the strategy used by the Clang compiler, and is the strategy of the <a href=\"http://openjdk.java.net/jeps/318\" rel=\"nofollow noreferrer\">Java Epsilon GC</a>"}, {"owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1522153128, "post_id": 49510471, "comment_id": 86029857, "body": "So, correct me if I&#39;m wrong. When the last pointer to memory dies, it lunches objects Drop::drop implementation if its present(?). So if the memory is on a heap it stays occupied? Can I allocate this memory later(is it available)?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1522153307, "post_id": 49510471, "comment_id": 86029977, "body": "I really think you should ask a separate questions here; or maybe check if the description of the mechanism is not available already. Comments are not that good for complex topics."}], "answers": [{"comments": [{"owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "edited": false, "score": 0, "creation_date": 1522152747, "post_id": 49511199, "comment_id": 86029534, "body": "Thanks for clarification. I&#39;d like to stick to my case for a moment. You have said that large amounts of data should be prealocated on a stack. In my case function allocates memory dynamically on heap. I&#39;m ofcourse aware of potentially many realocations, but at the moment I can live with that. My question here is: the way data is returned is implementation specific? For example, in Vecs case it returns <code>pointer, capacity, length</code>. So this data is moved out of functions scope. Heap allocated memory stays where it was. I cannot imagine if someone would do it other way."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "edited": false, "score": 0, "creation_date": 1522153112, "post_id": 49511199, "comment_id": 86029841, "body": "@Kazik: Good point, I added a note that the size of interest here is that returned by <code>size_of</code>, so you are right that only pointer, capacity and length are copied here. Not sure whether those go through registers or stack. The heap allocated data indeed remains unmodified, actually, it even remains <i>untouched</i>: the pointer is not dereferenced as part of the move."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522161156, "post_id": 49511199, "comment_id": 86036328, "body": "<i>&quot;values are never cloned without an explicit .clone() in the code&quot;</i> - Unless it&#39;s a <a href=\"https://doc.rust-lang.org/beta/std/marker/trait.Copy.html\" rel=\"nofollow noreferrer\">Copy</a> structure, which still isn&#39;t quite the same thing as a <code>clone()</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522167459, "post_id": 49511199, "comment_id": 86041092, "body": "@BHustus: If it&#39;s Copy, then copying and moving are the same thing at the bytes level, so it doesn&#39;t matter :) Clone, on the other hand, can lead to deep copies... and coming from C++ implicit deep copies are a pain :("}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1522152902, "last_edit_date": 1522152902, "creation_date": 1522148533, "answer_id": 49511199, "question_id": 49510471, "link": "https://stackoverflow.com/questions/49510471/how-does-exactly-rust-handle-return-values/49511199#49511199", "title": "How does exactly rust handle return values", "body": "<blockquote>\n  <p>How exactly does Rust handle return?</p>\n</blockquote>\n\n<p>The only guarantee Rust, the language, makes is that values are never <strong>cloned</strong> without an explicit <code>.clone()</code> in the code. Therefore, from a semantic point of view, the value is <em>moved</em> which will not require allocating memory.</p>\n\n<blockquote>\n  <p>does Rust assume I want a new instance of <code>Vec</code>(copies all the data) or just pass a pointer to previously allocated (via <code>Vec::new()</code>) memory?</p>\n</blockquote>\n\n<p>This is implementation specific, and part of the ABI (Application Binary Interface). The Rust ABI is <em>not</em> formalized, and <em>not</em> stable, so there is no standard describing it and no guarantee about this holding up.</p>\n\n<p>Furthermore, this will depend on whether the function call is <em>inlined</em> or <em>not</em>. If the function call is inlined, there is of course no <code>return</code> any longer yet the same behavior should be observed.</p>\n\n<p><em>For small values</em>, they should be returned via a register (or a couple of registers).</p>\n\n<p><em>For larger values</em>:</p>\n\n<ul>\n<li>the caller should reserve memory on the stack (properly sized and aligned) and pass a pointer to this area to the callee,</li>\n<li>the callee will then construct the return value at the place pointed to, so that by the time it returns the value exists there for the caller to use.</li>\n</ul>\n\n<p><em>Note: by the size here is the size on the stack, as returned by <code>std::mem::size_of</code>; so <code>size_of::&lt;Vec&lt;_&gt;&gt;() == 24</code> on 64-bits architecture.</em></p>\n\n<blockquote>\n  <p>What is the most efficient way to do this?</p>\n</blockquote>\n\n<p>Returning is as efficient as it gets <em>for a single call</em>.</p>\n\n<p>If however you find yourself in a situation where, say, you want to read a file line by line, then it makes sense to <em>reuse</em> the buffer from one call to the other which can be accomplished either by:</p>\n\n<ul>\n<li>taking a <code>&amp;mut</code> references to the buffer (<code>String</code> or <code>Vec&lt;u8&gt;</code> say),</li>\n<li>or taking a buffer by value and returning it.</li>\n</ul>\n\n<p>The point being to avoid memory allocations.</p>\n"}], "owner": {"reputation": 35, "user_id": 9557240, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/96261a851e31ce0ebc659613ac19ea94?s=128&d=identicon&r=PG&f=1", "display_name": "Kazik", "link": "https://stackoverflow.com/users/9557240/kazik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 493, "favorite_count": 0, "accepted_answer_id": 49511199, "answer_count": 1, "score": 0, "last_activity_date": 1522152902, "creation_date": 1522146456, "question_id": 49510471, "link": "https://stackoverflow.com/questions/49510471/how-does-exactly-rust-handle-return-values", "title": "How does exactly rust handle return values", "body": "<p>I've got question about my code:</p>\n\n<pre><code>pub fn get_signals(path: &amp;String) -&gt; Vec&lt;Vec&lt;f64&gt;&gt; {\n    let mut rdr = csv::ReaderBuilder::new().delimiter(b';').from_path(&amp;path).unwrap();\n\n    let mut signals: Vec&lt;Vec&lt;f64&gt;&gt; = Vec::new();\n\n    for record in rdr.records(){\n        let mut r = record.unwrap();\n        for (i, value) in r.iter().enumerate(){\n            match signals.get(i){\n                Some(_) =&gt; {},\n                None    =&gt; signals.push(Vec::new())\n            }\n            signals[i].push(value.parse::&lt;f64&gt;().unwrap());\n        }\n    }\n\n    signals\n}\n</code></pre>\n\n<p>How exactly does Rust handle return? When I, for example write <code>let signals = get_signal(&amp;\"data.csv\".to_string());</code> does Rust assume I want a new instance of Vec(copies all the data) or just pass a pointer to previously allocated(via <code>Vec::new()</code>) memory? What is the most efficient way to do this? Also, what happens with <code>rdr</code>? I assume, given Rusts memory safety, it's destroyed.</p>\n"}, {"tags": ["reference", "rust", "lifetime"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1522144246, "post_id": 49509358, "comment_id": 86023322, "body": "Extremely relevant: <a href=\"https://stackoverflow.com/q/31609137/1233251\">stackoverflow.com/q/31609137/1233251</a> (it answers <i>at least</i> the first part of the question). Consider also reading the section of the book on <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html\" rel=\"nofollow noreferrer\">lifetimes</a>."}, {"owner": {"reputation": 41, "user_id": 8064494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cd9f057e367fd620a7b8edb0e9aa998?s=128&d=identicon&r=PG&f=1", "display_name": "vamsikal", "link": "https://stackoverflow.com/users/8064494/vamsikal"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1522145008, "post_id": 49509358, "comment_id": 86023912, "body": "Thanks for the references!"}], "answers": [{"comments": [{"owner": {"reputation": 41, "user_id": 8064494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cd9f057e367fd620a7b8edb0e9aa998?s=128&d=identicon&r=PG&f=1", "display_name": "vamsikal", "link": "https://stackoverflow.com/users/8064494/vamsikal"}, "edited": false, "score": 0, "creation_date": 1522145057, "post_id": 49509702, "comment_id": 86023948, "body": "Thank you very much for the answer. I did use &#39;static and that worked. But I wanted to understand how the generic lifetime parameters worked."}], "tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 2, "last_activity_date": 1522156167, "last_edit_date": 1522156167, "creation_date": 1522144333, "answer_id": 49509702, "question_id": 49509358, "link": "https://stackoverflow.com/questions/49509358/why-do-i-need-to-add-a-lifetime-to-a-function-that-returns-a-reference/49509702#49509702", "title": "Why do I need to add a lifetime to a function that returns a reference?", "body": "<p>Any function that returns a reference must include a lifetime for this reference. If the function also takes at least one by-reference parameter then <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\" rel=\"nofollow noreferrer\">lifetime elision</a> means that you can omit the return lifetime, but elision does not occur if there is no by-reference parameter, like in your example.</p>\n\n<p>Note that in your case, it would make more sense to use an explicit <code>'static</code> lifetime rather than a generic since the value you return is always <code>'static</code>:</p>\n\n<pre><code>fn to_spelling_1(d: u8) -&gt; &amp;'static str {\n    DIGIT_SPELLING[d as usize]\n}\n</code></pre>\n"}], "owner": {"reputation": 41, "user_id": 8064494, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7cd9f057e367fd620a7b8edb0e9aa998?s=128&d=identicon&r=PG&f=1", "display_name": "vamsikal", "link": "https://stackoverflow.com/users/8064494/vamsikal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1729, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1522156167, "creation_date": 1522143440, "last_edit_date": 1522156113, "question_id": 49509358, "link": "https://stackoverflow.com/questions/49509358/why-do-i-need-to-add-a-lifetime-to-a-function-that-returns-a-reference", "title": "Why do I need to add a lifetime to a function that returns a reference?", "body": "<p>I wrote the following code:</p>\n\n<pre><code>const DIGIT_SPELLING: [&amp;str; 10] = [\n    \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n];\n\nfn to_spelling_1(d: u8) -&gt; &amp;str {\n    DIGIT_SPELLING[d as usize]\n}\n\nfn main() {\n    let d = 1;\n    let s = to_spelling_1(d);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>This gives the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0106]: missing lifetime specifier\n --&gt; src/main.rs:5:28\n  |\n5 | fn to_spelling_1(d: u8) -&gt; &amp;str {\n  |                            ^ expected lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n  = help: consider giving it an explicit bounded or 'static lifetime\n</code></pre>\n\n<p>To fix the problem, I changed my code to this:</p>\n\n<pre><code>const DIGIT_SPELLING: [&amp;str; 10] = [\n    \"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\n];\n\nfn to_spelling_1&lt;'a&gt;(d: u8) -&gt; &amp;'a str { // !!!!! Added the lifetime. !!!!!\n    DIGIT_SPELLING[d as usize]\n}\n\nfn main() {\n    let d = 1;\n    let s = to_spelling_1(d);\n    println!(\"{}\", s);\n}\n</code></pre>\n\n<p>This code compiles and runs without error. Why did I need to add the <code>'a</code> lifetime? Why does adding the <code>'a</code> lifetime fix the error?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1522140272, "post_id": 49506485, "comment_id": 86020537, "body": "Procedural macros does not impact the structure because structures are already defined at the moment of proc-macro expansion. If this is not about your question, then I don&#39;t understand what do you mean by saying <code>I could to it with a custom derive, but that is not what I want to achieve here because any struct annotated with #[component] would be modified to include additional fields.</code>."}, {"owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1522140703, "post_id": 49506485, "comment_id": 86020843, "body": "Procedural macros can modify/delete/reinterpret structures or any other language constructs as I have seen. But custom derive can only implement Traits but not alter the struct as far as I know. What I meant to convey was that the usage of custom derive could help me add custom attributes in field for me to process it but would not allow the struct&#39;s modification."}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1522140804, "post_id": 49506485, "comment_id": 86020908, "body": "Oh, sorry, yes, I misunderstood this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522156339, "post_id": 49506485, "comment_id": 86032310, "body": "<i>Questions seeking debugging help (&quot;why isn&#39;t this code working?&quot;) must include the desired behavior, a specific problem or error and <b>the shortest code necessary to reproduce it in the question itself</b>.</i>"}], "answers": [{"tags": [], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "is_accepted": true, "score": 2, "last_activity_date": 1522159773, "last_edit_date": 1522159773, "creation_date": 1522153775, "answer_id": 49512879, "question_id": 49506485, "link": "https://stackoverflow.com/questions/49506485/how-to-provide-attributes-for-fields-for-struct-annotated-with-an-attribute-itse/49512879#49512879", "title": "How to provide attributes for fields for struct annotated with an attribute itself?", "body": "<blockquote>\n  <p>The proc_macro_attribute does not support other sub-attributes...</p>\n</blockquote>\n\n<p>Actually it does.</p>\n\n<p>The only thing is that, the compiler does not want any compiler unknown attributes on the final expanded struct. I was expanding the struct within the <code>#[component]</code> macro but leaving as-is the <code>#[prop]</code> attribute. This caused the compiler to search for meaning for the said macro and errored out. </p>\n\n<p>So, to make it work, be sure to remove the attribute from the field after it has been used. Any residue will cause the compiler to error.</p>\n\n<pre><code>#[proc_macro_attribute]\npub fn component(_attribute: TokenStream, input: TokenStream) -&gt; TokenStream {\n    let item: syn::Item = syn::parse(input).unwrap();\n    let props_struct = generate_props_struct(&amp;item);\n    let modified_struct = modify_struct_and_remove_props_attribute(&amp;item);\n    quote! {\n        #props_struct\n\n        #modified_struct\n    }\n} \n</code></pre>\n\n<p>Also the struct does not require any placeholder attribute defined separately. Every attribute on the fields comes within the context of the <code>proc_macro_attribute</code> placed on the struct.</p>\n\n<p>I have updated the <a href=\"https://github.com/csharad/proc_macro_attribute\" rel=\"nofollow noreferrer\">github repo</a> with comments to see how it could be done.</p>\n"}], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1182, "favorite_count": 1, "accepted_answer_id": 49512879, "answer_count": 1, "score": 1, "last_activity_date": 1522159773, "creation_date": 1522134775, "last_edit_date": 1522159318, "question_id": 49506485, "link": "https://stackoverflow.com/questions/49506485/how-to-provide-attributes-for-fields-for-struct-annotated-with-an-attribute-itse", "title": "How to provide attributes for fields for struct annotated with an attribute itself?", "body": "<p>I wanted to implement a <code>proc_macro_attribute</code> such that:</p>\n\n<pre><code>#[component]\nstruct Div {\n    #[prop]\n    color: String,\n    clicked: bool\n}\n</code></pre>\n\n<p>Where the impl of both the attributes are:</p>\n\n<pre><code>#[proc_macro_attribute]\npub fn component(_attribute: TokenStream, input: TokenStream) -&gt; TokenStream {\n    modify_struct_and_generate_props_struct(input)\n}\n\n// Just as a placeholder attribute for the component attribute to work on.\n#[proc_macro_attribute]\npub fn prop(_attribute: TokenStream, input: TokenStream) -&gt; TokenStream {\n    input\n}\n</code></pre>\n\n<p>I could do it with a custom derive, but that is not what I want to achieve here because any struct annotated with <code>#[component]</code> would be modified to include additional fields. The <code>#[prop]</code> sub attribute is used to create a newer struct made up of only prop fields.</p>\n\n<p>The <code>proc_macro_attribute</code> does not support other sub-attributes used within its context and I tried to implement a separate attribute to mitigate that. This causes the compiler to error out with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0658]: The attribute `prop` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n  --&gt; src/main.rs:33:1\n   |\n33 | #[component]\n   | ^^^^^^^^^^^^\n   |\n   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n</code></pre>\n\n<p>Adding this feature conflicts with <code>#![feature(proc_macro)]</code>.</p>\n\n<p>I have defined the problem on <a href=\"https://github.com/csharad/proc_macro_attribute\" rel=\"nofollow noreferrer\">GitHub</a>. You could look it up to see what I am trying to accomplish.</p>\n\n<p>Is there no other possible way out?</p>\n\n<p>I have also filed an <a href=\"https://github.com/rust-lang/rust/issues/49411\" rel=\"nofollow noreferrer\">issue</a> with Rust if this was not the way it was meant to be.</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522123256, "post_id": 49503976, "comment_id": 86012405, "body": "It would <i>seem</i> like it would implicitly require a second type parameter, say <code>Q</code>, such that the children of <code>Node&lt;T, Q&gt;</code> are <code>Node&lt;Q&gt;</code>, but then... Would an associated type be the answer? No, because associated types are for traits..."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1522124673, "post_id": 49503976, "comment_id": 86012800, "body": "Hang on. &quot;store different types of values, and therefore have different type parameters.&quot; Provided I&#39;m reading that right, unless they&#39;re <a href=\"https://doc.rust-lang.org/book/first-edition/trait-objects.html\" rel=\"nofollow noreferrer\">Trait Objects</a>, that wouldn&#39;t fly in a statically typed language liked Rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522151938, "post_id": 49503976, "comment_id": 86028877, "body": "Please <a href=\"https://stackoverflow.com/posts/49503976/edit\">edit</a> your question to explain why the answers to <a href=\"https://stackoverflow.com/q/27957103/155423\">How do I create a heterogeneous collection of objects?</a> don&#39;t answer your question."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1522164134, "post_id": 49503976, "comment_id": 86038819, "body": "The duplicate does indeed address your question: your type argument <code>T</code> can be monomorphised into a <code>Box&lt;Props&gt;</code>: <code>Node&lt;Box&lt;Props&gt;&gt;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 466, "user_id": 2533397, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ICKak.png?s=128&g=1", "display_name": "vpzomtrrfrt", "link": "https://stackoverflow.com/users/2533397/vpzomtrrfrt"}, "edited": false, "score": 0, "creation_date": 1522162092, "post_id": 49507424, "comment_id": 86037139, "body": "Unfortunately, I don&#39;t have a finite number of types to store, otherwise I would do it that way"}], "tags": [], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "is_accepted": false, "score": 0, "last_activity_date": 1522137726, "creation_date": 1522137726, "answer_id": 49507424, "question_id": 49503976, "link": "https://stackoverflow.com/questions/49503976/how-to-store-types-with-varying-parameters-in-a-vec/49507424#49507424", "title": "How to store types with varying parameters in a Vec?", "body": "<p>If you want to store different types of values, first ascertain what are all the types of values you would want to store.\nThen define an <code>enum</code> as such:</p>\n\n<pre><code>enum Value {\n    Pair(i32, i32),\n    MayBeStr(Option&lt;&amp;'static str&gt;),\n    ... // any value that you would like to store\n}\n</code></pre>\n\n<p>And wire it up like:</p>\n\n<pre><code>struct Node {\n    pub props: Value,\n    pub children: Vec&lt;Node&gt;\n}\n\nfn main() {\n    let node = Node {\n        props: Value::Pair(42, 6),\n        children: vec![Node {\n            props: Value::MayBeStr(Some(\"potatoes\")),\n            children: vec![]\n        }]\n    };\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8ab0a27fa2445dd5037907311a840441&amp;version=stable\" rel=\"nofollow noreferrer\">Link to Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "edited": false, "score": 0, "creation_date": 1522163541, "post_id": 49516445, "comment_id": 86038362, "body": "But how do you get the value back?"}, {"owner": {"reputation": 466, "user_id": 2533397, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ICKak.png?s=128&g=1", "display_name": "vpzomtrrfrt", "link": "https://stackoverflow.com/users/2533397/vpzomtrrfrt"}, "reply_to_user": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "edited": false, "score": 0, "creation_date": 1522191096, "post_id": 49516445, "comment_id": 86053128, "body": "That, I&#39;m not sure about"}], "tags": [], "owner": {"reputation": 466, "user_id": 2533397, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ICKak.png?s=128&g=1", "display_name": "vpzomtrrfrt", "link": "https://stackoverflow.com/users/2533397/vpzomtrrfrt"}, "is_accepted": false, "score": 0, "last_activity_date": 1522163130, "creation_date": 1522163130, "answer_id": 49516445, "question_id": 49503976, "link": "https://stackoverflow.com/questions/49503976/how-to-store-types-with-varying-parameters-in-a-vec/49516445#49516445", "title": "How to store types with varying parameters in a Vec?", "body": "<p>The best solution I've come up with so far is to add a trait to all the items and use Boxes to store them.  For this example:</p>\n\n<pre><code>trait Props {}\n\nimpl Props for (i32, i32) {}\nimpl&lt;'a&gt; Props for Option&lt;&amp;'a str&gt; {}\n\nstruct Node&lt;'a&gt; {\n    pub props: Box&lt;Props + 'a&gt;,\n    pub children: Vec&lt;Node&lt;'a&gt;&gt;\n}\n\nfn main() {\n    let node = Node {\n        props: Box::new((42, 6)),\n        children: vec![Node {\n            props: Box::new(Some(\"potatoes\")),\n            children: vec![]\n        }]\n    };\n}\n</code></pre>\n"}], "owner": {"reputation": 466, "user_id": 2533397, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ICKak.png?s=128&g=1", "display_name": "vpzomtrrfrt", "link": "https://stackoverflow.com/users/2533397/vpzomtrrfrt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 68, "favorite_count": 1, "closed_date": 1522164380, "answer_count": 2, "score": -2, "last_activity_date": 1522163130, "creation_date": 1522121967, "last_edit_date": 1522162315, "question_id": 49503976, "link": "https://stackoverflow.com/questions/49503976/how-to-store-types-with-varying-parameters-in-a-vec", "closed_reason": "Duplicate", "title": "How to store types with varying parameters in a Vec?", "body": "<p>I'm trying to set up a tree structure in Rust, but I've run into an issue with how to store the list of nodes, which store different types of values, and therefore have different type parameters.</p>\n\n<p>A simplified version of the problem is below:</p>\n\n<pre><code>struct Node&lt;T&gt; {\n    pub props: T,\n    pub children: Vec&lt;Node&gt;\n}\n\nfn main() {\n    let node = Node {\n        props: (42, 6),\n        children: vec![Node {\n            props: Some(\"potatoes\"),\n            children: vec![]\n        }]\n    };\n}\n</code></pre>\n\n<p>This fails to compile with the following error:</p>\n\n<pre><code>error[E0243]: wrong number of type arguments: expected 1, found 0\n --&gt; src/main.rs:4:19\n  |\n4 |     children: Vec&lt;Node&gt;\n  |                   ^^^^ expected 1 type argument\n</code></pre>\n\n<p>I can't provide a type argument, since it must be allowed to be anything.  What's the best way to go about doing this?</p>\n\n<p>I've looked at <a href=\"https://stackoverflow.com/q/27957103/155423\" title=\"How do I create a heterogeneous collection of objects?\">this question</a>, but it doesn't address type arguments.</p>\n"}, {"tags": ["rust", "language-lawyer", "undefined-behavior", "ffi", "borrowing"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522127080, "post_id": 49503331, "comment_id": 86013406, "body": "As someone who&#39;s curious but way out of their field, is there a simple reason why <code>someValid.upgrade()</code> would panic rather than simply doing nothing?"}, {"owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1522154352, "post_id": 49503331, "comment_id": 86030761, "body": "@BHustus there are a lot of reasons why that code shouldn&#39;t really ever panic, the main one being that I was tired. thanks for letting me know!"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 1, "last_activity_date": 1522188661, "last_edit_date": 1522188661, "creation_date": 1522121030, "answer_id": 49503862, "question_id": 49503331, "link": "https://stackoverflow.com/questions/49503331/is-it-undefined-behavior-to-do-runtime-borrow-management-with-the-help-of-raw-po/49503862#49503862", "title": "Is it undefined behavior to do runtime borrow management with the help of raw pointers in Rust?", "body": "<p>Rust's memory model is not rigorously defined yet, so it's hard to say for sure, but I believe it's not <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\" rel=\"nofollow noreferrer\">undefined behavior</a> to:</p>\n\n<ol>\n<li>carry a <code>*mut Ph</code> around while a <code>&amp;'a mut Ph</code> is also reachable from another path, so long as you <strong>don't dereference</strong> the <code>*mut Ph</code>, even just for reading, and don't convert it to a <code>&amp;Ph</code> or <code>&amp;mut Ph</code>, because mutable references grant <em>exclusive access</em> to the pointee.</li>\n<li>cast the <code>*mut Ph</code> back to a <code>&amp;'a mut Ph</code> once the other <code>&amp;'a mut Ph</code> falls out of scope.</li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 69012, "user_id": 363751, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/135a97c4150691234931a93f3a27a52f?s=128&d=identicon&r=PG", "display_name": "supercat", "link": "https://stackoverflow.com/users/363751/supercat"}, "edited": false, "score": 0, "creation_date": 1522364226, "post_id": 49513368, "comment_id": 86140669, "body": "I think the application of the term &quot;aliasing&quot; to situations where references are used in non-overlapping fashion represents a corruption of the term by the authors of gcc.  Hopefully Rust avoids such idiocy."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1522155104, "creation_date": 1522155104, "answer_id": 49513368, "question_id": 49503331, "link": "https://stackoverflow.com/questions/49503331/is-it-undefined-behavior-to-do-runtime-borrow-management-with-the-help-of-raw-po/49513368#49513368", "title": "Is it undefined behavior to do runtime borrow management with the help of raw pointers in Rust?", "body": "<p>Taking a step back, the guarantees upheld by Rust are:</p>\n\n<ul>\n<li><code>&amp;T</code> is a reference to <code>T</code> which is potentially aliased,</li>\n<li><code>&amp;mut T</code> is a reference to <code>T</code> which is guaranteed not to be aliased.</li>\n</ul>\n\n<p>The crux of the question therefore is: what does <em>guaranteed not to be aliased</em> means?</p>\n\n<hr>\n\n<p>Let's consider a safe Rust sample:</p>\n\n<pre><code>struct Foo(u32);\n\nimpl Foo {\n    fn foo(&amp;mut self) { self.bar(); }\n    fn bar(&amp;mut self) { *self.0 += 1; }\n}\n\nfn main() { Foo(0).foo(); }\n</code></pre>\n\n<p>If we take a peek at the stack when <code>Foo::bar</code> is being executed, we'll see at least two pointers to <code>Foo</code>: one in <code>bar</code> and one in <code>foo</code>, and there may be further copies on the stack or in other registers.</p>\n\n<p>So, clearly, there <em>are</em> aliases in existence. How come! It's guaranteed NOT to be aliased!</p>\n\n<hr>\n\n<p>Take a deep breath: how many of those aliases can you <em>access</em> at the time?</p>\n\n<p>Only <strong>1</strong>. <strong>The guarantee of no aliasing is not spatial but temporal.</strong></p>\n\n<p>I would think, therefore, that at any point in time, if a <code>&amp;mut T</code> is accessible, then <em>no other reference</em> to this instance must be accessible.</p>\n\n<p>Having a raw pointer (<code>*mut T</code>) is perfectly fine, it requires <code>unsafe</code> to access; however forming a second reference may or may not be safe, even without using it, so I would avoid it.</p>\n"}], "owner": {"reputation": 1434, "user_id": 3691554, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/2479edc9e2237ac67d4df87105fbc656?s=128&d=identicon&r=PG&f=1", "display_name": "SoniEx2", "link": "https://stackoverflow.com/users/3691554/soniex2"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 154, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1522188661, "creation_date": 1522116373, "last_edit_date": 1522154110, "question_id": 49503331, "link": "https://stackoverflow.com/questions/49503331/is-it-undefined-behavior-to-do-runtime-borrow-management-with-the-help-of-raw-po", "title": "Is it undefined behavior to do runtime borrow management with the help of raw pointers in Rust?", "body": "<p>As part of binding a C API to Rust, I have a mutable reference <code>ph: &amp;mut Ph</code>, a struct <code>struct EnsureValidContext&lt;'a&gt; { ph: &amp;'a mut Ph }</code>, and some methods:</p>\n\n<pre><code>impl Ph {\n    pub fn print(&amp;mut self, s: &amp;str) {\n        /*...*/\n    }\n    pub fn with_context&lt;F, R&gt;(&amp;mut self, ctx: &amp;Context, f: F) -&gt; Result&lt;R, InvalidContextError&gt;\n    where\n        F: Fn(EnsureValidContext) -&gt; R,\n    {\n        /*...*/\n    }\n    /* some others */\n}\n\nimpl&lt;'a&gt; EnsureValidContext&lt;'a&gt; {\n    pub fn print(&amp;mut self, s: &amp;str) {\n        self.ph.print(s)\n    }\n    pub fn close(self) {}\n    /* some others */\n}\n</code></pre>\n\n<p>I don't control these. I can only use these.</p>\n\n<p>Now, the closure API is nice if you want the compiler to force you to think about performance (and the tradeoffs you have to make between performance and the behaviour you want. Context validation is <em>expensive</em>). However, let's say you just don't care about that and want it to just work.</p>\n\n<p>I was thinking of making a wrapper that handles it for you:</p>\n\n<pre><code>enum ValidPh&lt;'a&gt; {\n    Ph(&amp;'a mut Ph),\n    Valid(*mut Ph, EnsureValidContext&lt;'a&gt;),\n    Poisoned,\n}\n\nimpl&lt;'a&gt; ValidPh&lt;'a&gt; {\n    pub fn print(&amp;mut self) {\n        /* whatever the case, just call .print() on the inner object */\n    }\n    pub fn set_context(&amp;mut self, ctx: &amp;Context) {\n        /*...*/\n    }\n    pub fn close(&amp;mut self) {\n        /*...*/\n    }\n    /* some others */\n}\n</code></pre>\n\n<p>This would work by, whenever necessary, checking if we're a <code>Ph</code> or a <code>Valid</code>, and if we're a <code>Ph</code> we'd upgrade to a <code>Valid</code> by going:</p>\n\n<pre><code>fn upgrade(&amp;mut self) {\n    if let Ph(_) = self { // don't call mem::replace unless we need to\n        if let Ph(ph) = mem::replace(self, Poisoned) {\n            let ptr = ph as *mut _;\n            let evc = ph.with_context(ph.get_context(), |evc| evc);\n            *self = Valid(ptr, evc);\n        }\n    }\n}\n</code></pre>\n\n<p>Downgrading is different for each method, as it has to call the target method, but here's an example <code>close</code>:</p>\n\n<pre><code>pub fn close(&amp;mut self) {\n    if let Valid(_, _) = self {\n        /* ok */\n    } else {\n        self.upgrade()\n    }\n    if let Valid(ptr, evc) = mem::replace(self, Invalid) {\n        evc.close(); // consume the evc, dropping the borrow.\n\n        // we can now use our original borrow, but since we don't have it anymore, bring it back using our trusty ptr\n        *self = unsafe { Ph(&amp;mut *ptr) };\n    } else {\n        // this can only happen due to a bug in our code\n        unreachable!();\n    }\n}\n</code></pre>\n\n<p>You get to use a <code>ValidPh</code> like:</p>\n\n<pre><code>/* given a &amp;mut vph */\nvph.print(\"hello world!\");\nif vph.set_context(ctx) {\n    vph.print(\"closing existing context\");\n    vph.close();\n}\nvph.print(\"opening new context\");\nvph.open(\"context_name\");\nvph.print(\"printing in new context\");\n</code></pre>\n\n<p>Without <code>vph</code>, you'd have to juggle <code>&amp;mut Ph</code> and <code>EnsureValidContext</code> around on your own. While the Rust compiler makes this trivial (just follow the errors), you may want to let the library handle it automatically for you. Otherwise you might end up just calling the very expensive <code>with_context</code> for every operation, regardless of whether the operation can invalidate the context or not.</p>\n\n<p>Note that this code is rough pseudocode. I haven't compiled or tested it yet.</p>\n\n<p>One might argue I need an <code>UnsafeCell</code> or a <code>RefCell</code> or some other <code>Cell</code>. However, from reading <a href=\"https://github.com/rust-lang/rust/issues/34496\" rel=\"nofollow noreferrer\">this</a> it appears <code>UnsafeCell</code> is only a lang item because of <em>interior mutability</em> \u2014 it's only necessary if you're mutating state through an <code>&amp;T</code>, while in this case I have <code>&amp;mut T</code> all the way.</p>\n\n<p>However, my reading may be flawed. Does this code invoke UB?</p>\n\n<p>(Full code of <code>Ph</code> and <code>EnsureValidContext</code>, including FFI bits, available <a href=\"https://bitbucket.org/SoniEx2/hexchat-plugin.rs\" rel=\"nofollow noreferrer\">here</a>.)</p>\n"}, {"tags": ["compiler-errors", "rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 1315, "user_id": 1726544, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/aaa0d23522b46dfe52e90c41cfeff2a3?s=128&d=identicon&r=PG", "display_name": "&#193;kos Vandra", "link": "https://stackoverflow.com/users/1726544/%c3%81kos-vandra"}, "edited": false, "score": 0, "creation_date": 1522131676, "post_id": 49499940, "comment_id": 86015270, "body": "Why would the drop have nothing to do with this? As far as I understand, the compiler is complaining that <code>b</code> is/might be holding a reference for <code>a</code>. Dropping <code>b</code> should take care of that, shouldn&#39;t it? NLL takes care of it, I should read up on what it exactly is, but I&#39;m interested in the issue with drop as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1315, "user_id": 1726544, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/aaa0d23522b46dfe52e90c41cfeff2a3?s=128&d=identicon&r=PG", "display_name": "&#193;kos Vandra", "link": "https://stackoverflow.com/users/1726544/%c3%81kos-vandra"}, "edited": false, "score": 0, "creation_date": 1522152095, "post_id": 49499940, "comment_id": 86028986, "body": "@&#193;kosVandra if there something you don&#39;t understand from the first question I linked to (<a href=\"https://stackoverflow.com/q/43428894/155423\">Moved variable still borrowing after calling <code>drop</code>?</a>), perhaps adding comments to it would be more appropriate."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1522095531, "creation_date": 1522095531, "answer_id": 49499940, "question_id": 49499188, "link": "https://stackoverflow.com/questions/49499188/dropping-partially-moved-values-after-the-moved-values-are-dropped/49499940#49499940", "title": "Dropping partially moved values after the moved values are dropped", "body": "<blockquote>\n  <p>Is there a better way to fix this</p>\n</blockquote>\n\n<p>Yes, but not in stable Rust. You need <em>non-lexical lifetimes</em>:</p>\n\n<pre><code>#![feature(nll)]\n\n#[derive(Debug)]\nstruct Foo(u32);\n\nfn get_foo(bar: &amp;mut Foo) -&gt; Option&lt;&amp;mut u32&gt; {\n    Some(&amp;mut bar.0)\n}\n\npub fn test() {\n    let x = 5;\n    let y = 6;\n    let mut a = Foo(x);\n\n    let b = get_foo(&amp;mut a);\n\n    if let Some(value) = b {\n        *value = y;\n    }\n\n    println!(\"{:?}\", a);\n}\n\nfn main() {}\n</code></pre>\n\n<p>Until then, just use the extra block.</p>\n\n<blockquote>\n  <p>Dropping the value of b doesn't work either</p>\n</blockquote>\n\n<p><code>drop</code> has nothing to do with borrows.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/43428894/155423\">Moved variable still borrowing after calling `drop`?</a></li>\n<li><a href=\"https://stackoverflow.com/q/35765440/155423\">What are the options to end a mutable borrow in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30243606/155423\">Why is a borrow still held in the else block of an if let?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38023871/155423\">Rust borrow of a HashMap lasts beyond the scope it&#39;s in?</a></li>\n<li><a href=\"https://stackoverflow.com/q/33495933/155423\">How to end a borrow in a match or if let expression?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41421107/155423\">Borrow checker and function arguments in Rust, correct or over zealous?</a></li>\n</ul>\n"}], "owner": {"reputation": 1315, "user_id": 1726544, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/aaa0d23522b46dfe52e90c41cfeff2a3?s=128&d=identicon&r=PG", "display_name": "&#193;kos Vandra", "link": "https://stackoverflow.com/users/1726544/%c3%81kos-vandra"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 74, "favorite_count": 0, "accepted_answer_id": 49499940, "answer_count": 1, "score": -2, "last_activity_date": 1600429068, "creation_date": 1522092484, "last_edit_date": 1600429068, "question_id": 49499188, "link": "https://stackoverflow.com/questions/49499188/dropping-partially-moved-values-after-the-moved-values-are-dropped", "title": "Dropping partially moved values after the moved values are dropped", "body": "<p>I expect the following code to compile and print <code>Foo(6)</code> as the value of <code>b</code>, owning the reference to <code>a</code> is dropped after the match block.</p>\n<p>It seems related to this compiler error:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable\n  --&gt; src/main.rs:26:22\n   |\n13 |     let b = get_foo(&amp;mut a);\n   |                          - mutable borrow occurs here\n...\n26 |     println!(&quot;{:?}&quot;, a);\n   |                      ^ immutable borrow occurs here\n27 | }\n   | - mutable borrow ends here\n</code></pre>\n<p>Dropping the value of <code>b</code> doesn't work either, because it is partially moved:</p>\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of partially moved value: `b`\n  --&gt; src/main.rs:24:10\n   |\n18 |         Some(value) =&gt; *value = y,\n   |              ----- value moved here\n...\n24 |     drop(b);\n   |          ^ value used here after move\n   |\n   = note: move occurs because `(b:std::prelude::v1::Some).0` has type `&amp;mut u32`, which does not implement the `Copy` trait\n</code></pre>\n<p>Is there a better way to fix this rather than putting lines <code>let b</code> and <code>match b</code> into an inner block? That just looks weird and ugly.</p>\n<p>Shouldn't the compiler understand that the reference is dropped, and be able to compile that code?</p>\n<pre><code>#[derive(Debug)]\nstruct Foo(u32);\n\nfn get_foo(bar: &amp;mut Foo) -&gt; Option&lt;&amp;mut u32&gt; {\n    Some(&amp;mut bar.0)\n}\n\npub fn test() {\n    let mut x = 5;\n    let mut y = 6;\n    let mut a = Foo(x);\n\n    // {\n    \n    let b = get_foo(&amp;mut a);\n\n    match b {\n        Some(value) =&gt; *value = y,\n        _ =&gt; (),\n    }\n    \n    // }\n\n    //    drop(b);\n\n    println!(&quot;{:?}&quot;, a);\n}\n</code></pre>\n"}, {"tags": ["rust", "serde", "serde-json"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1522085152, "creation_date": 1522085152, "answer_id": 49497206, "question_id": 49495870, "link": "https://stackoverflow.com/questions/49495870/cannot-find-value-collect-when-adding-flatten-to-an-enum-struct-variant/49497206#49497206", "title": "&quot;cannot find value __collect&quot; when adding flatten to an enum struct variant", "body": "<p>This is a known issue with Serde for both <a href=\"https://github.com/serde-rs/serde/issues/1185\" rel=\"nofollow noreferrer\">serialization</a> and <a href=\"https://github.com/serde-rs/serde/issues/1186\" rel=\"nofollow noreferrer\">deserialization</a>. There are no listed workarounds.</p>\n"}], "owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 1, "accepted_answer_id": 49497206, "answer_count": 1, "score": 2, "last_activity_date": 1522085152, "creation_date": 1522080283, "last_edit_date": 1522085101, "question_id": 49495870, "link": "https://stackoverflow.com/questions/49495870/cannot-find-value-collect-when-adding-flatten-to-an-enum-struct-variant", "title": "&quot;cannot find value __collect&quot; when adding flatten to an enum struct variant", "body": "<p>I have the following code: </p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Debug, Default, Serialize, Deserialize)]\npub struct Base {\n    bold: Option&lt;bool&gt;,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\n#[serde(untagged)]\npub enum Component {\n    String {\n        #[serde(flatten)] base: Base,\n        text: String,\n    },\n}\n</code></pre>\n\n<p>This gives me a compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0425]: cannot find value `__collect` in this scope\n  --&gt; src/main.rs:10:28\n   |\n10 | #[derive(Debug, Serialize, Deserialize)]\n   |                            ^^^^^^^^^^^ did you mean `__content`?\n\nerror[E0277]: the trait bound `&lt;__S as serde::Serializer&gt;::SerializeStruct: serde::ser::SerializeMap` is not satisfied\n  --&gt; src/main.rs:10:17\n   |\n10 | #[derive(Debug, Serialize, Deserialize)]\n   |                 ^^^^^^^^^ the trait `serde::ser::SerializeMap` is not implemented for `&lt;__S as serde::Serializer&gt;::SerializeStruct`\n   |\n   = help: consider adding a `where &lt;__S as serde::Serializer&gt;::SerializeStruct: serde::ser::SerializeMap` bound\n   = note: required because of the requirements on the impl of `serde::Serializer` for `serde::private::ser::FlatMapSerializer&lt;'_, &lt;__S as serde::Serializer&gt;::SerializeStruct&gt;`\n   = note: required by `serde::Serialize::serialize`\n</code></pre>\n\n<p>If I change my code to this, it compiles fine: </p>\n\n<pre><code>extern crate serde;\n#[macro_use]\nextern crate serde_derive;\n\n#[derive(Debug, Default, Serialize, Deserialize)]\npub struct Base {\n    bold: Option&lt;bool&gt;,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\npub struct Striii {\n    #[serde(flatten)]\n    base: Base,\n    text: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\n#[serde(untagged)]\npub enum Component {\n    String(Striii),\n}\n</code></pre>\n\n<p>I don't understand the compiler error or why it shouldn't work. Does Serde have no support for field attributes inside enum struct variants?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1522069930, "post_id": 49491819, "comment_id": 85988015, "body": "<code>HashMap::remove</code> could work as long as it&#39;s possible to unwrap the resulting <code>Option&lt;Group&gt;</code> into an <code>Option&lt;TypeA&gt;</code>. I would probably try something with <code>TryInto</code> or <code>TryFrom</code>. Is that what you had in mind?"}], "answers": [{"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 1, "last_activity_date": 1555011218, "last_edit_date": 1555011218, "creation_date": 1522071356, "answer_id": 49492823, "question_id": 49491819, "link": "https://stackoverflow.com/questions/49491819/how-do-i-extend-an-enum-based-multi-type-container-with-a-remove-method/49492823#49492823", "title": "How do I extend an enum-based multi-type container with a remove method?", "body": "<p>As you mentioned in the comments, <code>TryFrom</code> is possible. However, I'd go with <code>Into&lt;Option&lt;T&gt;&gt;</code>:</p>\n\n<pre><code>pub fn remove&lt;T: Any&gt;(&amp;mut self) -&gt; Option&lt;T&gt;\nwhere\n    G: Into&lt;Option&lt;T&gt;&gt;,\n{\n    self.inner.remove(&amp;TypeId::of::&lt;T&gt;()).and_then(|g| g.into())\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0c72269bc5e038638d286e354c570c62&amp;version=nightly\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>I'd choose  <code>Into&lt;Option&lt;T&gt;&gt;</code> over <code>TryInto&lt;T&gt;</code> because <code>Into&lt;Option&lt;T&gt;&gt;</code> results in an <code>Option</code> while <code>TryInto&lt;T&gt;</code> results in <code>Result&lt;T, Self::Error&gt;</code></p>\n"}], "owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 328, "favorite_count": 0, "accepted_answer_id": 49492823, "answer_count": 1, "score": 0, "last_activity_date": 1555011218, "creation_date": 1522068372, "last_edit_date": 1522068476, "question_id": 49491819, "link": "https://stackoverflow.com/questions/49491819/how-do-i-extend-an-enum-based-multi-type-container-with-a-remove-method", "title": "How do I extend an enum-based multi-type container with a remove method?", "body": "<p>This question is based on information given in <a href=\"https://stackoverflow.com/questions/49457323\">another recent question of mine</a>. I would like to extend the following <code>Container</code> with a <code>remove</code> method that returns ownership of the stored data to the caller. The accompanying unit test should explain its desired behaviour. </p>\n\n<p>In the previous case (see referenced question), I would have used the <code>downcast</code> method on the <code>Box&lt;Any&gt;</code> object, but I don't know how to approach the problem in the case where enums are used instead. I'm grateful for pointers.</p>\n\n<pre><code>use std::any::{Any, TypeId};\nuse std::collections::HashMap;\n\ntrait GroupTrait {\n    fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt;;\n}\n\nstruct Container&lt;G&gt; {\n    inner: HashMap&lt;TypeId, G&gt;,\n}\n\nimpl&lt;G&gt; Default for Container&lt;G&gt;\nwhere\n    G: GroupTrait,\n{\n    fn default() -&gt; Self {\n        Container {\n            inner: Default::default(),\n        }\n    }\n}\n\nimpl&lt;G&gt; Container&lt;G&gt;\nwhere\n    G: GroupTrait,\n{\n    pub fn insert&lt;T: Any + Into&lt;G&gt;&gt;(&amp;mut self, data: T) {\n        self.inner.insert(TypeId::of::&lt;T&gt;(), data.into());\n    }\n    pub fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.inner.get(&amp;TypeId::of::&lt;T&gt;()).and_then(|g| g.borrow())\n    }\n    pub fn remove&lt;T: Any&gt;(&amp;mut self) -&gt; Option&lt;T&gt; {\n        unimplemented!()\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeA(u32);\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeB(String);\n\n    /// This is the enum that should replace boxed `Any` trait objects. Users also need to supply\n    /// this enum. Maybe they'll need to implement additional traits to get `borrow` to work.\n    #[derive(Debug, PartialEq)]\n    enum Group {\n        A(TypeA),\n        B(TypeB),\n    }\n\n    impl From&lt;TypeA&gt; for Group {\n        fn from(value: TypeA) -&gt; Self {\n            Group::A(value)\n        }\n    }\n\n    impl From&lt;TypeB&gt; for Group {\n        fn from(value: TypeB) -&gt; Self {\n            Group::B(value)\n        }\n    }\n\n    impl GroupTrait for Group {\n        fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n            use self::Group::*;\n            match *self {\n                A(ref i) =&gt; Any::downcast_ref(i),\n                B(ref i) =&gt; Any::downcast_ref(i),\n            }\n        }\n    }\n\n    #[test]\n    fn insert() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        assert_eq!(\n            c.inner.get(&amp;TypeId::of::&lt;TypeA&gt;()),\n            Some(&amp;Group::A(data.clone()))\n        );\n    }\n\n    #[test]\n    fn borrow() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        let borrowed = c.borrow::&lt;TypeA&gt;();\n        assert_eq!(borrowed, Some(&amp;data));\n    }\n\n    #[test]\n    fn remove() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        assert_eq!(c.remove::&lt;TypeA&gt;(), Some(data));\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 4, "creation_date": 1522058799, "post_id": 49487722, "comment_id": 85980337, "body": "As a side note, consider Rust&#39;s <a href=\"https://rust-lang-nursery.github.io/api-guidelines/naming.html\" rel=\"nofollow noreferrer\">naming conventions</a>. Local variable names should preferably be in snake_case."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1522100092, "post_id": 49487722, "comment_id": 86006042, "body": "Incidentally, <code>Sub</code> is used for something else in chrono&#39;s case (UTC offsets). You cannot subtract two instants and get a duration. <a href=\"https://stackoverflow.com/q/48312801/3650362\">Related question</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 5, "last_activity_date": 1522838444, "last_edit_date": 1522838444, "creation_date": 1522058722, "answer_id": 49488823, "question_id": 49487722, "link": "https://stackoverflow.com/questions/49487722/how-do-i-get-duration-from-two-datetime-naivedatetime/49488823#49488823", "title": "How do I get Duration from two DateTime / NaiveDateTime?", "body": "<p>The two date-time types are not compatible, because <code>NaiveDateTime</code> lacks a time zone. In this case, since you obtained it using <code>NaiveDateTime::from_timestamp</code>, you can convert it to a <code>DateTime&lt;Utc&gt;</code> first, and then obtain the difference with <code>signed_duration_since</code>.</p>\n\n<pre><code>let now = Local::now();\nlet naive_dt = NaiveDate::from_ymd(2018, 3, 26).and_hms(10, 02, 0);\nlet other_dt = DateTime::&lt;Utc&gt;::from_utc(naive_dt, Utc);\n\nlet diff = now.signed_duration_since(other_dt);\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=b43ae67442f52dfd507bdb24cc906132&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<hr>\n\n<p>Future versions of <code>chrono</code> (after 0.4.1) will support subtracting as an alternative to calling <code>.signed_duration_since</code>, as long as both operands have the same time zone type. <a href=\"https://github.com/chronotope/chrono/pull/237\" rel=\"nofollow noreferrer\">PR #237</a> Therefore, one will eventually be able to write this:</p>\n\n<pre><code>let diff = now.with_timezone(&amp;Utc) - other_dt;\n</code></pre>\n"}], "owner": {"reputation": 28845, "user_id": 238232, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/ccda2293fc93c7a871956102004ac19d?s=128&d=identicon&r=PG", "display_name": "cnd", "link": "https://stackoverflow.com/users/238232/cnd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 794, "favorite_count": 0, "accepted_answer_id": 49488823, "answer_count": 1, "score": 2, "last_activity_date": 1522838444, "creation_date": 1522055299, "last_edit_date": 1522058684, "question_id": 49487722, "link": "https://stackoverflow.com/questions/49487722/how-do-i-get-duration-from-two-datetime-naivedatetime", "title": "How do I get Duration from two DateTime / NaiveDateTime?", "body": "<p>I'm using chrono crate</p>\n\n<p>I've got date in <code>i64</code> and I can get <code>NaiveDateTime</code> with <code>NaiveDateTime::from_timestamp</code></p>\n\n<p>I have <code>Local::now()</code> current time and I can get <code>i64</code> with <code>.timestamp()</code></p>\n\n<p>But I still can't understand how to get <code>Duration</code> of <code>my_time - current_time</code> because it tells that Sub is not implemented if I try it like that</p>\n\n<p>And if I get diff in i64 timestamps how to convert it into <code>Duration</code>?</p>\n\n<p>e.g. I want something alike but sub is not implemented there</p>\n\n<pre><code>let uEnd = NaiveDateTime::from_timestamp(end64, 0);\nlet dtEnd = uEnd.sub(Local::now());\n</code></pre>\n"}, {"tags": ["arrays", "rust", "custom-type", "vyper"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1522070819, "post_id": 49484135, "comment_id": 85988647, "body": "Please, read the <a href=\"https://doc.rust-lang.org/book/second-edition/\" rel=\"nofollow noreferrer\">Rust book</a> before asking trivial questions like this."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 3, "creation_date": 1522071149, "post_id": 49484135, "comment_id": 85988880, "body": "BTW, the answer is <code>struct Bytes32([u8; 4]);</code>"}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522102611, "post_id": 49484135, "comment_id": 86007085, "body": "OK thanks. I have read the Rust book and through parts of the standard library, but I guess I still wasn&#39;t sure. I knew that I needed to make a struct to create a custom type, but I wasn&#39;t sure what the best way to actually define that type is. But I agree that using an array <code>[u8; 4]</code> is simple and effective, it&#39;s a 4 byte wide array."}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 1, "creation_date": 1522103583, "post_id": 49484135, "comment_id": 86007427, "body": "I&#39;ll try to make sure that I ask questions in an appropriate way in future."}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 1, "creation_date": 1522314125, "post_id": 49484135, "comment_id": 86110929, "body": "I edited my question."}], "answers": [{"comments": [{"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522043831, "post_id": 49484653, "comment_id": 85972316, "body": "Thanks. This should also be helpful: <a href=\"https://docs.rs/crate/ethcore-bytes\" rel=\"nofollow noreferrer\">docs.rs/crate/ethcore-bytes</a>"}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522044968, "post_id": 49484653, "comment_id": 85972760, "body": "I&#39;m not sure what the most efficient way to tie these two together would be, however."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 5, "creation_date": 1522047177, "post_id": 49484653, "comment_id": 85973648, "body": "<code>Vec&lt;[&amp;&#39;a u8; 4]&gt;</code>? What a weird type."}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522048939, "post_id": 49484653, "comment_id": 85974471, "body": "I honestly don&#39;t know how to make a wrapper for I/O. I read a bit of <a href=\"https://doc.rust-lang.org/beta/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">this</a> and <a href=\"https://doc.rust-lang.org/beta/std/io/\" rel=\"nofollow noreferrer\">this</a>."}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522049640, "post_id": 49484653, "comment_id": 85974823, "body": "Oh I think at least part of what you&#39;re referring to is error handling, e.g. a wrapper with <code>Result&lt;T, E&gt;</code>."}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522051345, "post_id": 49484653, "comment_id": 85975767, "body": "I&#39;ve already read the Rust Programming Language docs so I&#39;m familiar with these: <a href=\"https://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/\" rel=\"nofollow noreferrer\">manishearth.github.io/blog/2015/05/27/&hellip;</a>."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 2, "creation_date": 1522076144, "post_id": 49484653, "comment_id": 85992674, "body": "Why <code>&amp;u8</code> instead of plain <code>u8</code> as array element?"}, {"owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "edited": false, "score": 0, "creation_date": 1522120255, "post_id": 49484653, "comment_id": 86011673, "body": "This answer is also useful for passing a custom type into a HashMap as per <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/collections/struct.HashMap.html</a>."}], "tags": [], "owner": {"reputation": 1319, "user_id": 1051018, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/17623b699060c78823d7d6c95d1de7ec?s=128&d=identicon&r=PG", "display_name": "Abby Chau Yu Hoi", "link": "https://stackoverflow.com/users/1051018/abby-chau-yu-hoi"}, "is_accepted": false, "score": -1, "last_activity_date": 1522127863, "last_edit_date": 1522127863, "creation_date": 1522042950, "answer_id": 49484653, "question_id": 49484135, "link": "https://stackoverflow.com/questions/49484135/creating-a-custom-type-bytes32-as-a-32-bit-wide-byte-array-with-rust/49484653#49484653", "title": "Creating a custom type bytes32 as a 32-bit-wide byte array with Rust", "body": "<p>You can use a custom <code>struct</code>.</p>\n\n<p>I made a quick example. You should tune it and make a wrapper for input and output.</p>\n\n<pre><code>#[derive(Eq, PartialEq)]\nstruct Bytes32 {\n    pub store: Vec&lt;[u8; 4]&gt;,\n}\n\nimpl Ord for Bytes32 {\n    fn cmp(&amp;self, other: &amp;Bytes32) -&gt; Ordering {\n        for _i in 0..3 {\n            if other.store[_i] &gt; self.store[_i] {\n                return Ordering::Greater;\n            }\n            if other.store[_i] &lt; self.store[_i] {\n                return Ordering::Less;\n            }\n        }\n        Ordering::Equal\n    }\n}\n\nimpl PartialOrd for Bytes32 {\n    fn partial_cmp(&amp;self, other: &amp;Bytes32) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 334, "user_id": 7438857, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/88ff6da63e6f47c7326bc9d4dc081f08?s=128&d=identicon&r=PG", "display_name": "James Ray", "link": "https://stackoverflow.com/users/7438857/james-ray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 286, "favorite_count": 1, "answer_count": 1, "score": -3, "last_activity_date": 1522127863, "creation_date": 1522039546, "last_edit_date": 1522104600, "question_id": 49484135, "link": "https://stackoverflow.com/questions/49484135/creating-a-custom-type-bytes32-as-a-32-bit-wide-byte-array-with-rust", "title": "Creating a custom type bytes32 as a 32-bit-wide byte array with Rust", "body": "<p><code>bytes32</code> is a type that is a 32-bit-wide byte array in Vyper. The following is from <a href=\"https://github.com/ethereum/vyper/blob/master/docs/types.rst#32-bit-wide-byte-array\" rel=\"nofollow noreferrer\">https://github.com/ethereum/vyper/blob/master/docs/types.rst#32-bit-wide-byte-array</a>:</p>\n\n<hr>\n\n<h1>32-bit-wide Byte Array</h1>\n\n<p><strong>Keyword:</strong> <code>bytes32</code>\nThis is a 32-bit-wide byte array that is otherwise similiar to byte arrays.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code># Declaration\nhash: bytes32\n# Assignment\nself.hash = _hash\n</code></pre>\n\n<h2>Operators</h2>\n\n<pre><code>====================================  ============================================================\nKeyword                               Description\n====================================  ============================================================\n``len(x)``                            Return the length as an integer.\n``sha3(x)``                           Return the sha3 hash as bytes32.\n``concat(x, ...)``                    Concatenate multiple inputs.\n``slice(x, start=_start, len=_len)``  Return a slice of ``_len`` starting at ``_start``.\n====================================  ============================================================\n</code></pre>\n\n<p>Where <code>x</code> is a byte array and <code>_start</code> as well as <code>_len</code> are integer values.</p>\n\n<hr>\n\n<p>I want to know how to create such a bytes32 as a custom type in Rust. To create custom types you use a struct, and it's an array, but I'm not sure what the best way to define the array is. I thought of doing:</p>\n\n<pre><code>struct Bytes32 {\n    bytes32: [0b00000000; 4]\n}\n</code></pre>\n\n<p>But this is obviously not ideal e.g. for readability, and you have to use a specific value, <code>0b00000000</code>. </p>\n"}, {"tags": ["rust", "conditional-compilation"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 12, "last_activity_date": 1568134609, "last_edit_date": 1568134609, "creation_date": 1522007055, "answer_id": 49480186, "question_id": 49479854, "link": "https://stackoverflow.com/questions/49479854/how-do-i-change-a-functions-qualifiers-via-conditional-compilation/49480186#49480186", "title": "How do I change a function&#39;s qualifiers via conditional compilation?", "body": "<p>Macros to the rescue!</p>\n\n<pre><code>#![cfg_attr(feature = \"const-fn\", feature(const_fn))]\n\n#[cfg(not(feature = \"const-fn\"))]\nmacro_rules! maybe_const_fn {\n    ($($tokens:tt)*) =&gt; {\n        $($tokens)*\n    };\n}\n\n#[cfg(feature = \"const-fn\")]\nmacro_rules! maybe_const_fn {\n    ($(#[$($meta:meta)*])* $vis:vis $ident:ident $($tokens:tt)*) =&gt; {\n        $(#[$($meta)*])* $vis const $ident $($tokens)*\n    };\n}\n\nmaybe_const_fn! {\n    #[allow(unused)] // for demonstration purposes\n    pub fn very_complicated_logic(a: u8, b: u8) -&gt; u8 {\n        internally_complicated_logic(a, b)\n    }\n}\n\nmaybe_const_fn! {\n    fn internally_complicated_logic(a: u8, b: u8) -&gt; u8 {\n        a * b\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[cfg(feature = \"const-fn\")]\n    #[test]\n    fn use_in_const() {\n        const ANSWER: u8 = very_complicated_logic(1, 2);\n        drop(ANSWER);\n    }\n\n    #[test]\n    fn use_in_variable() {\n        let answer: u8 = very_complicated_logic(1, 2);\n        drop(answer);\n    }\n}\n</code></pre>\n\n<p>Along with this in <code>Cargo.toml</code>:</p>\n\n<pre><code>[features]\nconst-fn = []\n</code></pre>\n\n<p>Since macros can only expand to complete pieces of syntax (i.e. a macro cannot simply expand to <code>const</code>), we have to wrap the whole function in the macro and leave some parts of it unparsed so that we can inject <code>const</code> in the appropriate place. Then, the parser can parse the whole thing as a function definition.</p>\n\n<p>Attributes and visibility qualifiers need special treatment, because they must appear before <code>const</code>. I am using the <code>vis</code> matcher (<a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1300-2018-10-25\" rel=\"nofollow noreferrer\">available since Rust 1.30.0</a>) to simplify the macro's implementation.</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 299, "favorite_count": 0, "accepted_answer_id": 49480186, "answer_count": 1, "score": 10, "last_activity_date": 1568134609, "creation_date": 1522005062, "last_edit_date": 1568134270, "question_id": 49479854, "link": "https://stackoverflow.com/questions/49479854/how-do-i-change-a-functions-qualifiers-via-conditional-compilation", "title": "How do I change a function&#39;s qualifiers via conditional compilation?", "body": "<p>I have a function that is capable of being implemented as a <code>const</code>:</p>\n\n<pre><code>#![feature(const_fn)]\n\n// My crate would have:\n\nconst fn very_complicated_logic(a: u8, b: u8) -&gt; u8 {\n    a * b\n}\n\n// The caller would have:\n\nconst ANSWER: u8 = very_complicated_logic(1, 2);\n\nfn main() {}\n</code></pre>\n\n<p>I'd like to continue to support stable Rust where it's not possible to define such functions. These stable consumers would not be able to use the function in a <code>const</code> or <code>static</code>, but should be able to use the function in other contexts:</p>\n\n<pre><code>// My crate would have:\n\nfn very_complicated_logic(a: u8, b: u8) -&gt; u8 {\n    a * b\n}\n\n// The caller would have:    \n\nfn main() {\n    let answer: u8 = very_complicated_logic(1, 2);\n}\n</code></pre>\n\n<p>How can I conditionally compile my code so that adventurous users of my crate could enable <code>const fn</code> support, stable users would still be able to use my code, and I don't have to write every function twice?</p>\n\n<p>The same question should apply to the other modifiers of a function, but I'm not sure of concrete cases where these modifiers would change based on some condition:</p>\n\n<ul>\n<li><code>default</code></li>\n<li><code>unsafe</code></li>\n<li><code>extern</code></li>\n<li><code>pub</code> (and other visibility modifiers) </li>\n</ul>\n"}, {"tags": ["macos", "rust", "sfml", "dynamic-linking", "dylib"], "comments": [{"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522181081, "post_id": 49475313, "comment_id": 86048885, "body": "Can you post the output of <code>echo &quot;$DYLD_FALLBACK_LIBRARY_PATH&quot;</code>? And does it really say &quot;/path/to/executable&quot;? If not, please give the actual path to the executable (of course you can replace your real username). Also take a look here: <a href=\"https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath\" rel=\"nofollow noreferrer\">wincent.com/wiki/@executable_path,_@load_path_and_@rpath</a>"}, {"owner": {"reputation": 812, "user_id": 2867076, "user_type": "registered", "accept_rate": 75, "profile_image": "https://graph.facebook.com/100003035657402/picture?type=large", "display_name": "Hannes Karppila", "link": "https://stackoverflow.com/users/2867076/hannes-karppila"}, "reply_to_user": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522224067, "post_id": 49475313, "comment_id": 86063846, "body": "<code>echo &quot;$DYLD_FALLBACK_LIBRARY_PATH&quot;</code> gives <code>&#47;usr&#47;X11&#47;lib:&#47;usr&#47;lib::</code>. Thanks for the link, it looks promising."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522231419, "post_id": 49475313, "comment_id": 86069128, "body": "You could try this: <code>export $DYLD_FALLBACK_LIBRARY_PATH=&#47;usr&#47;local&#47;lib</code> and try if the program starts then (run it in the same she\u2019ll where you exported the path; it\u2019s only temporary). If this works, we know it\u2019s a problem with @rpath."}, {"owner": {"reputation": 812, "user_id": 2867076, "user_type": "registered", "accept_rate": 75, "profile_image": "https://graph.facebook.com/100003035657402/picture?type=large", "display_name": "Hannes Karppila", "link": "https://stackoverflow.com/users/2867076/hannes-karppila"}, "reply_to_user": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1522633885, "post_id": 49475313, "comment_id": 86215853, "body": "Yes, running <code>export DYLD_FALLBACK_LIBRARY_PATH=&#47;usr&#47;local&#47;lib</code> before the executable works. So is the proper fix exporting that change in .bashrc, or giving some argument to linker?"}], "owner": {"reputation": 812, "user_id": 2867076, "user_type": "registered", "accept_rate": 75, "profile_image": "https://graph.facebook.com/100003035657402/picture?type=large", "display_name": "Hannes Karppila", "link": "https://stackoverflow.com/users/2867076/hannes-karppila"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 153, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1521989548, "creation_date": 1521977363, "last_edit_date": 1521989548, "question_id": 49475313, "link": "https://stackoverflow.com/questions/49475313/sfml-dyld-library-not-loaded-when-run-without-sudo", "title": "SFML &quot;dyld: Library not loaded&quot; when run without sudo", "body": "<p>I created a minimal SFML application using <a href=\"https://crates.io/crates/sfml\" rel=\"nofollow noreferrer\"><code>rust-sfml</code></a>. I stripped anything that requires loading files from <a href=\"https://github.com/jeremyletang/rust-sfml/blob/master/examples/pong.rs\" rel=\"nofollow noreferrer\">the pong example</a>, but just trying to open a window gives this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>dyld: Library not loaded: @rpath/libsfml-graphics.2.4.dylib\n  Referenced from: /path/to/executable\n  Reason: image not found\nTrace/BPT trap: 5\n</code></pre>\n\n<p>When run with sudo, the program works properly. I checked the permissions and they looked correct:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ls -l /usr/local/lib/*sfml*\n-rwxr-xr-x@ 1 myuser  admin   50296  1 Mar  2017 /usr/local/lib/libcsfml-audio.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      26  1 Mar  2017 /usr/local/lib/libcsfml-audio.2.4.dylib -&gt; libcsfml-audio.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      24  1 Mar  2017 /usr/local/lib/libcsfml-audio.dylib -&gt; libcsfml-audio.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin  163680  1 Mar  2017 /usr/local/lib/libcsfml-graphics.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      29  1 Mar  2017 /usr/local/lib/libcsfml-graphics.2.4.dylib -&gt; libcsfml-graphics.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      27  1 Mar  2017 /usr/local/lib/libcsfml-graphics.dylib -&gt; libcsfml-graphics.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin   67272  1 Mar  2017 /usr/local/lib/libcsfml-network.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      28  1 Mar  2017 /usr/local/lib/libcsfml-network.2.4.dylib -&gt; libcsfml-network.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      26  1 Mar  2017 /usr/local/lib/libcsfml-network.dylib -&gt; libcsfml-network.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin   20256  1 Mar  2017 /usr/local/lib/libcsfml-system.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      27  1 Mar  2017 /usr/local/lib/libcsfml-system.2.4.dylib -&gt; libcsfml-system.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      25  1 Mar  2017 /usr/local/lib/libcsfml-system.dylib -&gt; libcsfml-system.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin   31892  1 Mar  2017 /usr/local/lib/libcsfml-window.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      27  1 Mar  2017 /usr/local/lib/libcsfml-window.2.4.dylib -&gt; libcsfml-window.2.4.0.dylib\nlrwxr-xr-x  1 myuser  admin      25  1 Mar  2017 /usr/local/lib/libcsfml-window.dylib -&gt; libcsfml-window.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin  159060 10 Feb  2017 /usr/local/lib/libsfml-audio.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      25 10 Feb  2017 /usr/local/lib/libsfml-audio.2.4.dylib -&gt; libsfml-audio.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      23 10 Feb  2017 /usr/local/lib/libsfml-audio.dylib -&gt; libsfml-audio.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin  556312 10 Feb  2017 /usr/local/lib/libsfml-graphics.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      28 10 Feb  2017 /usr/local/lib/libsfml-graphics.2.4.dylib -&gt; libsfml-graphics.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      26 10 Feb  2017 /usr/local/lib/libsfml-graphics.dylib -&gt; libsfml-graphics.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin  162540 10 Feb  2017 /usr/local/lib/libsfml-network.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      27 10 Feb  2017 /usr/local/lib/libsfml-network.2.4.dylib -&gt; libsfml-network.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      25 10 Feb  2017 /usr/local/lib/libsfml-network.dylib -&gt; libsfml-network.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin   81896 10 Feb  2017 /usr/local/lib/libsfml-system.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      26 10 Feb  2017 /usr/local/lib/libsfml-system.2.4.dylib -&gt; libsfml-system.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      24 10 Feb  2017 /usr/local/lib/libsfml-system.dylib -&gt; libsfml-system.2.4.dylib\n-rwxr-xr-x@ 1 myuser  admin  227128 10 Feb  2017 /usr/local/lib/libsfml-window.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      26 10 Feb  2017 /usr/local/lib/libsfml-window.2.4.dylib -&gt; libsfml-window.2.4.2.dylib\nlrwxr-xr-x  1 myuser  admin      24 10 Feb  2017 /usr/local/lib/libsfml-window.dylib -&gt; libsfml-window.2.4.dylib\n</code></pre>\n\n<p>Versions:</p>\n\n<ul>\n<li>macOS 10.11.6</li>\n<li>Rust <code>1.26.0-nightly (75af15ee6 2018-03-20)</code></li>\n<li>Cargo <code>1.26.0-nightly (d6c3983fe 2018-03-16)</code></li>\n<li><code>rust-sfml</code> (from <code>Cargo.toml</code>) <code>sfml = \"0.14\"</code></li>\n<li>SFML: 2.4.2, dylib</li>\n</ul>\n"}, {"tags": ["c++", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 9, "creation_date": 1521976771, "post_id": 49475166, "comment_id": 85952896, "body": "Definitely not <i>threading</i> (Rust does not create threads behind your back), so I suspect that you are running afoul of buffering on stdout; which is strange since I thought that using <code>\\n</code> in the format string would cause <code>printf</code> to flush immediately."}, {"owner": {"reputation": 8101, "user_id": 9199167, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BqdLV.jpg?s=128&g=1", "display_name": "Max Vollmer", "link": "https://stackoverflow.com/users/9199167/max-vollmer"}, "edited": false, "score": 0, "creation_date": 1521978857, "post_id": 49475166, "comment_id": 85953504, "body": "Have you debugged your code and stepped through it to confirm that <code>lib_fun</code> actually is executed after your <code>println</code> call? Otherwise, like Matthieu, I would also assume this is caused by some buffer issue, and not execution order."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1521980068, "post_id": 49475166, "comment_id": 85953864, "body": "@Michail because Rust and C++ would each have their own buffer."}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 8101, "user_id": 9199167, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/BqdLV.jpg?s=128&g=1", "display_name": "Max Vollmer", "link": "https://stackoverflow.com/users/9199167/max-vollmer"}, "edited": false, "score": 0, "creation_date": 1521980325, "post_id": 49475166, "comment_id": 85953938, "body": "@MaxVollmer lib_fun is actually executed and returned before println call. What the buffer issue can happens? As mentioned by Matthieu, this is strange espesially since &quot;\\n&quot; is using."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1521980375, "post_id": 49475166, "comment_id": 85953956, "body": "Try flushing <code>stdout</code> manually in C++."}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1521980557, "post_id": 49475166, "comment_id": 85954017, "body": "@mcarton Aren&#39;t they use a common system buffer? Is this documented somewhere in rust docs? And is there a way to make a right output order?"}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 2, "creation_date": 1521981038, "post_id": 49475166, "comment_id": 85954168, "body": "@Veedrac Thanks. I add <code>fflush(stdout);</code> in the end of C++ function and things became happens in right order."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1521989277, "post_id": 49475166, "comment_id": 85956742, "body": "I can&#39;t reproduce this with rustc 1.24.1 and GCC 7.3.1 on Arch Linux x64. Which C++ compiler and which version of Rust are you using?"}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1521989506, "post_id": 49475166, "comment_id": 85956814, "body": "@Francis It happens in Windows x64, Rust nightly 1.26.0. I gess <code>printf(&quot;...\\n&quot;)</code> flush buffer in Linux, or iC++ and Rust don&#39;t use different buffers in Linux, or so on. Problem is solved howbeit, thanks."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1521989574, "post_id": 49475166, "comment_id": 85956834, "body": "@Michail: I do not think that Rust is the problem here, I suspect your C++ implementation is. Which C++ compiler are you using? Visual Studio? (which version?) Or something else?"}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1521989949, "post_id": 49475166, "comment_id": 85956946, "body": "@Matthieu You are right. I read more about <code>printf</code> and clarify that it not guarantee flushing. I find something about this: <a href=\"https://stackoverflow.com/questions/1716296/why-does-printf-not-flush-after-the-call-unless-a-newline-is-in-the-format-strinright\" title=\"why does printf not flush after the call unless a newline is in the format strinright\">stackoverflow.com/questions/1716296/&hellip;</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1521990215, "post_id": 49475166, "comment_id": 85957014, "body": "@Michail: Ah! I thought it was always guaranteed to flush on newline, didn&#39;t know that there was an exemption when streaming to a file. Where you streaming to file? Or could it be that your terminal is not properly detected? It&#39;s really fun corner case you managed to unearth!"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1521990961, "post_id": 49475166, "comment_id": 85957263, "body": "@Michail: As mentioned, it&#39;s likely the C++ application which is not behaving as expected; so I was wondering which version of C++ compiler you were using. Normally, it should flush if it prints to a terminal... but maybe the C++ implementation you have has issues recognizing your IntelliJ terminal as an interactive device and thinks it&#39;s a file? (or maybe the C++ implementation is just non-comformant)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1521989839, "post_id": 49477126, "comment_id": 85956922, "body": "This isn&#39;t universally applicable. On macOS 10.13.3 with Clang (<code>Apple LLVM version 9.0.0 (clang-900.0.39.2)</code>), the output is in the correct order. The order is also correct when using Visual Studio 2017 on Windows 10. This is up to the implementation details of the standard library of the platform \u2014 it <i>should</i> flush when there is a newline in the <code>printf</code>."}, {"owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1521990979, "post_id": 49477126, "comment_id": 85957267, "body": "<i>The documentation of printf doesn&#39;t mention flushing at all.</i>  This post I found at <a href=\"https://stackoverflow.com/questions/49475166/why-do-a-rust-function-and-a-ffi-c-function-execute-in-reverse-order?noredirect=1#comment85956742_49475166\" title=\"why do a rust function and a ffi c function execute in reverse order\">stackoverflow.com/questions/49475166/&hellip;</a>  As I understand it MAY flush with <code>\\n</code> but not SHOULD. May be it depends from OS and/or C++ compiler."}, {"owner": {"reputation": 260120, "user_id": 103167, "user_type": "registered", "accept_rate": 53, "profile_image": "https://i.stack.imgur.com/rX1ss.png?s=128&g=1", "display_name": "Ben Voigt", "link": "https://stackoverflow.com/users/103167/ben-voigt"}, "edited": false, "score": 4, "creation_date": 1521991968, "post_id": 49477126, "comment_id": 85957586, "body": "Flushing behavior often varies with <code>isatty(fileno(stdout))</code>.  So the same OS, same code, same compiler, <b>same binary</b>, can have different buffering behavior depending on how the binary is invoked."}], "tags": [], "owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "is_accepted": false, "score": 6, "last_activity_date": 1521989916, "last_edit_date": 1521989916, "creation_date": 1521989327, "answer_id": 49477126, "question_id": 49475166, "link": "https://stackoverflow.com/questions/49475166/why-do-a-rust-function-and-a-ffi-c-function-execute-in-reverse-order/49477126#49477126", "title": "Why do a Rust function and a FFI C++ function execute in reverse order?", "body": "<p>External C++ code uses its own buffer to write to stdout and it is flushed to the system buffer later than the Rust caller does. <code>printf(\"...\\n\")</code> doesn't flush the stdout buffer as I expected.</p>\n\n<p>Instead, I need to flush it manually, for example by calling <code>fflush(stdout);</code></p>\n\n<p><a href=\"https://stackoverflow.com/questions/49475166/why-do-a-rust-function-and-a-ffi-c-function-execute-in-reverse-order#comment85953956_49475166\">Thanks for this answer to @Veedrac</a></p>\n"}], "owner": {"reputation": 643, "user_id": 9547560, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/785f65f7b071425bd775196efe2f938f?s=128&d=identicon&r=PG", "display_name": "Michail", "link": "https://stackoverflow.com/users/9547560/michail"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 449, "favorite_count": 2, "answer_count": 1, "score": 11, "last_activity_date": 1522000313, "creation_date": 1521976389, "last_edit_date": 1522000313, "question_id": 49475166, "link": "https://stackoverflow.com/questions/49475166/why-do-a-rust-function-and-a-ffi-c-function-execute-in-reverse-order", "title": "Why do a Rust function and a FFI C++ function execute in reverse order?", "body": "<p>I tried to link an external C++ function with my Rust application. This function works but it does not execute in the same order as it is called from Rust code.</p>\n\n<p>Why does this happen? Is this documented?</p>\n\n<p>Here is a listing of the Rust application:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate libc;\nuse libc::c_int;\n\n#[link(name = \"Project1\", kind = \"static\")]\nextern \"C\" {\n    pub fn lib_fun(i: c_int) -&gt; c_int;\n}\n\nfn main() {\n    unsafe {\n        lib_fun(2);\n    }\n    println!(\"from Rust: {}\", 2);\n}\n</code></pre>\n\n<p>\"Project1\" library looks like this:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;stdio.h&gt;\n\nextern \"C\" {\n    int lib_fun(int t) {\n        printf(\"from C++: %d\\n\", t);\n        return t;\n    }\n}\n</code></pre>\n\n<p>Expected output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>from C++: 2\nfrom Rust: 2\n</code></pre>\n\n<p>The real output is in the reverse order:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>from Rust: 2\nfrom C++: 2\n</code></pre>\n\n<p>Is the external function <code>lib_func</code> executed in another thread? Why?</p>\n\n<p>Details:</p>\n\n<ul>\n<li>Platform: Windows 7, x64,</li>\n<li>Rust: 1.26.0 (nightly),</li>\n<li>C++: Microsoft Visual Studio Community 2017 Preview 15.7.0 Preview 2.0</li>\n<li>Terminal: IntelliJ IDEA's integrated terminal.</li>\n</ul>\n"}, {"tags": ["rust", "valgrind", "massif"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1521994523, "post_id": 49475104, "comment_id": 85958446, "body": "I wouldn&#39;t be too surprised if tools such as this made C-centric assumptions that do not hold for Rust. I remember having problems with 0-sized types for example (which C doesn&#39;t allow)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521995100, "post_id": 49475104, "comment_id": 85958685, "body": "It&#39;s probably not an issue with the MySQL crate, but <a href=\"https://github.com/rust-lang/regex/issues/460\" rel=\"nofollow noreferrer\">rather with the Regex crate</a>."}], "answers": [{"tags": [], "owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "is_accepted": true, "score": 1, "last_activity_date": 1522341818, "last_edit_date": 1522341818, "creation_date": 1522341672, "answer_id": 49561193, "question_id": 49475104, "link": "https://stackoverflow.com/questions/49475104/why-does-connecting-to-mysql-in-rust-crash-when-executed-via-massif/49561193#49561193", "title": "Why does connecting to MySQL in Rust crash when executed via massif?", "body": "<p>As explained in <a href=\"https://github.com/rust-lang/regex/issues/460\" rel=\"nofollow noreferrer\">the Regex issue</a>, running a Rust program under Valgrind can be fixed by switching the allocator away from jemalloc:</p>\n\n<pre><code>#![feature(allocator_api, global_allocator)]\n\nextern crate mysql;\n\nuse std::heap::System;\n\n#[global_allocator]\nstatic A: System = System;\n\nfn main() {\n    mysql::Pool::new(\"mysql://user@localhost:3306\").expect(\"Could not connect to MySQL\");\n}\n</code></pre>\n\n<p>This is limited to Rust nightly though since <code>#![feature]</code> may not be used on the stable release channel.</p>\n"}], "owner": {"reputation": 2369, "user_id": 4614680, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c9b36fb2c1d356a919916f77e74f1c3c?s=128&d=identicon&r=PG&f=1", "display_name": "Philipp Ludwig", "link": "https://stackoverflow.com/users/4614680/philipp-ludwig"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 246, "favorite_count": 0, "accepted_answer_id": 49561193, "answer_count": 1, "score": 2, "last_activity_date": 1522341818, "creation_date": 1521975890, "last_edit_date": 1521988486, "question_id": 49475104, "link": "https://stackoverflow.com/questions/49475104/why-does-connecting-to-mysql-in-rust-crash-when-executed-via-massif", "title": "Why does connecting to MySQL in Rust crash when executed via massif?", "body": "<p>Consider this small program using the <em>mysql</em> crate version 12.3.1: </p>\n\n<pre><code>extern crate mysql;\n\nfn main() {\n    mysql::Pool::new(\"mysql://user@localhost:3306\").expect(\"Could not connect to MySQL\");\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"massiftest\"\nversion = \"0.1.0\"\n\n[dependencies]\nmysql = \"12.3.1\"\n</code></pre>\n\n<p>I have a MySQL server running on <code>localhost:3306</code> and executing this via <code>cargo run</code> does not yield any errors. However, if I run it using <em>massif</em>, I can reproduce the following crash:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ RUST_BACKTRACE=1 valgrind --tool=massif --num-callers=50 ./target/debug/massiftest\n==6790== Massif, a heap profiler\n==6790== Copyright (C) 2003-2015, and GNU GPL'd, by Nicholas Nethercote\n==6790== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info\n==6790== Command: ./target/debug/massiftest\n==6790==\nthread 'main' panicked at 'internal error: entered unreachable code: not all instructions were compiled! found uncompiled instruction: Compiled(Bytes(InstBytes { goto: 7, start: 219, end: 219 }))', /home/philipp/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-0.2.10/src/compile.rs:788:18\nstack backtrace:\n   0: &lt;unknown&gt;\n   1: &lt;unknown&gt;\n   2: &lt;unknown&gt;\n   3: &lt;unknown&gt;\n   4: &lt;unknown&gt;\n   5: &lt;unknown&gt;\n   6: &lt;unknown&gt;\n   7: &lt;unknown&gt;\n   8: &lt;unknown&gt;\n   9: &lt;unknown&gt;\n  10: &lt;unknown&gt;\n  11: &lt;unknown&gt;\n  12: &lt;unknown&gt;\n  13: &lt;unknown&gt;\n  14: &lt;unknown&gt;\n  15: &lt;unknown&gt;\n  16: &lt;unknown&gt;\n  17: &lt;unknown&gt;\n  18: &lt;unknown&gt;\n  19: &lt;unknown&gt;\n  20: &lt;unknown&gt;\n  21: &lt;unknown&gt;\n  22: &lt;unknown&gt;\n  23: &lt;unknown&gt;\n  24: &lt;unknown&gt;\n  25: &lt;unknown&gt;\n  26: &lt;unknown&gt;\n  27: &lt;unknown&gt;\n  28: &lt;unknown&gt;\n  29: &lt;unknown&gt;\n  30: &lt;unknown&gt;\n  31: &lt;unknown&gt;\n  32: &lt;unknown&gt;\n  33: &lt;unknown&gt;\n  34: &lt;unknown&gt;\n  35: &lt;unknown&gt;\n  36: &lt;unknown&gt;\n  37: &lt;unknown&gt;\n  38: &lt;unknown&gt;\n  39: &lt;unknown&gt;\n  40: &lt;unknown&gt;\n  41: &lt;unknown&gt;\n  42: &lt;unknown&gt;\n  43: &lt;unknown&gt;\n  44: &lt;unknown&gt;\n  45: &lt;unknown&gt;\n  46: &lt;unknown&gt;\n  47: &lt;unknown&gt;\n  48: __libc_start_main\n  49: &lt;unknown&gt;\n==6790==\n==6790== Process terminating with default action of signal 11 (SIGSEGV)\n==6790==  Access not within mapped region at address 0x19\n==6790==    at 0x254D36: core::ptr::drop_in_place::h9901a25205599d45 (ptr.rs:59)\n==6790==    by 0x254D3A: core::ptr::drop_in_place::h9901a25205599d45 (ptr.rs:59)\n==6790==    by 0x254D3A: core::ptr::drop_in_place::h9901a25205599d45 (ptr.rs:59)\n==6790==    by 0x24BF89: _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$::drop::h5f694fd60b6c5066 (vec.rs:2127)\n==6790==    by 0x2547A4: core::ptr::drop_in_place::h89b929960fc4b665 (ptr.rs:59)\n==6790==    by 0x256F6F: core::ptr::drop_in_place::he8c4a5678cd0b221 (ptr.rs:59)\n==6790==    by 0x254D3A: core::ptr::drop_in_place::h9901a25205599d45 (ptr.rs:59)\n==6790==    by 0x24BF89: _$LT$alloc..vec..Vec$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$::drop::h5f694fd60b6c5066 (vec.rs:2127)\n==6790==    by 0x2547A4: core::ptr::drop_in_place::h89b929960fc4b665 (ptr.rs:59)\n==6790==    by 0x256F6F: core::ptr::drop_in_place::he8c4a5678cd0b221 (ptr.rs:59)\n==6790==    by 0x24CBDA: _$LT$alloc..vec..IntoIter$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$::drop::h323e1d02d841c5c3 (vec.rs:2424)\n==6790==    by 0x257644: core::ptr::drop_in_place::hf8a356cb7d744b7c (ptr.rs:59)\n==6790==    by 0x23D42B: regex::compile::Compiler::fill::h40d905207ffae07e (compile.rs:683)\n==6790==    by 0x23D681: regex::compile::Compiler::fill_to_next::h7e5c4951b8ccf284 (compile.rs:690)\n==6790==    by 0x23CCCC: regex::compile::Compiler::c_repeat_range::he48d5edb603fa1a2 (compile.rs:660)\n==6790==    by 0x23B43A: regex::compile::Compiler::c_repeat::hd0674add2349dce5 (compile.rs:566)\n==6790==    by 0x23595B: regex::compile::Compiler::c::h6e2f7c66c680728d (compile.rs:361)\n==6790==    by 0x2363FD: regex::compile::Compiler::c_capture::hdeed9e649c6c8985 (compile.rs:370)\n==6790==    by 0x2360B3: regex::compile::Compiler::c::h6e2f7c66c680728d (compile.rs:341)\n==6790==    by 0x23A27B: regex::compile::Compiler::c_concat::hf34b737216385c45 (compile.rs:503)\n==6790==    by 0x236214: regex::compile::Compiler::c::h6e2f7c66c680728d (compile.rs:357)\n==6790==    by 0x2363FD: regex::compile::Compiler::c_capture::hdeed9e649c6c8985 (compile.rs:370)\n==6790==    by 0x233CBE: regex::compile::Compiler::compile_one::h383b59bbedb7205d (compile.rs:148)\n==6790==    by 0x233288: regex::compile::Compiler::compile::h5a10a88947640e81 (compile.rs:129)\n==6790==    by 0x1D85F6: regex::exec::ExecBuilder::build::hfc7ca8484cbb6466 (exec.rs:304)\n==6790==    by 0x1BE967: regex::re_builder::bytes::RegexBuilder::build::hc36d4c14e674b5e8 (re_builder.rs:77)\n==6790==    by 0x218EE8: regex::re_bytes::Regex::new::h6c31ca336193b53b (re_bytes.rs:120)\n==6790==    by 0x1B4773: core::ops::function::FnOnce::call_once::h0ba821d4b82efa91 (packets.rs:34)\n==6790==    by 0x1939E2: _$LT$lazy_static..lazy..Lazy$LT$T$GT$$GT$::get::_$u7b$$u7b$closure$u7d$$u7d$::hceaf94d1f1e5785e (lazy.rs:24)\n==6790==    by 0x1972D9: std::sync::once::Once::call_once::_$u7b$$u7b$closure$u7d$$u7d$::ha7cea6c7e6b4bacb (once.rs:227)\n==6790==    by 0x36E50C: std::sync::once::Once::call_inner::h9d56229e10caf16f (once.rs:340)\n==6790==    by 0x1971B3: std::sync::once::Once::call_once::h60fa32612fe1558b (once.rs:227)\n==6790==    by 0x1A14CA: _$LT$mysql_common..packets..VERSION_RE$u20$as$u20$core..ops..deref..Deref$GT$::deref::hd9eed8de29b22816 (lazy.rs:23)\n==6790==    by 0x1A0E1A: mysql_common::packets::HandshakePacket::server_version_parsed::h9a814fa77edfc821 (packets.rs:845)\n==6790==    by 0x152859: mysql::conn::Conn::handle_handshake::h58a0f34c75ee7dc9 (mod.rs:773)\n==6790==    by 0x1530B1: mysql::conn::Conn::do_handshake::_$u7b$$u7b$closure$u7d$$u7d$::hab7b3479b287f94f (mod.rs:801)\n==6790==    by 0x163BA0: _$LT$core..result..Result$LT$T$C$$u20$E$GT$$GT$::and_then::h60f0cf035e0f4cda (result.rs:621)\n==6790==    by 0x152A1A: mysql::conn::Conn::do_handshake::hcf7c5d8d74e8c9b1 (mod.rs:786)\n==6790==    by 0x1588E5: mysql::conn::Conn::connect::hdc169ab3f7d6e9ec (mod.rs:1398)\n==6790==    by 0x150B47: mysql::conn::Conn::new::hd04cf16ca6073f67 (mod.rs:630)\n==6790==    by 0x1722A0: mysql::conn::pool::InnerPool::new_conn::h834e46591434439c (pool.rs:43)\n==6790==    by 0x1720A3: mysql::conn::pool::InnerPool::new::he0e45a60210c82e4 (pool.rs:38)\n==6790==    by 0x13A38E: mysql::conn::pool::Pool::new_manual::h3b93cd2e5084bece (pool.rs:195)\n==6790==    by 0x13A831: mysql::conn::pool::Pool::new::hea509d1fce53a7c3 (pool.rs:190)\n==6790==    by 0x143F57: massiftest::main::h97cbbec4f95365eb (main.rs:4)\n==6790==    by 0x1408B1: std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h0add17d4b7ff7ebc (rt.rs:74)\n==6790==    by 0x36EFA7: _ZN3std9panicking3try7do_call17h7d33aea9be52481fE.llvm.BFE82564 (rt.rs:59)\n==6790==    by 0x384DAE: __rust_maybe_catch_panic (lib.rs:101)\n==6790==    by 0x371FF9: std::rt::lang_start_internal::h16c0c37ef62d8e5a (panicking.rs:459)\n==6790==    by 0x140891: std::rt::lang_start::hcd183d75c99491f4 (rt.rs:74)\n==6790==  If you believe this happened as a result of a stack\n==6790==  overflow in your program's main thread (unlikely but\n==6790==  possible), you can try to increase the size of the\n==6790==  main thread stack using the --main-stacksize= flag.\n==6790==  The main thread stack size used in this run was 8388608.\n==6790==\nSegmentation fault\n</code></pre>\n\n<p>What could be the reason here, and is there any possibility to avoid this?</p>\n\n<p>I have a larger application which I would like to analyze regarding memory usage, but this gets in the way.</p>\n"}, {"tags": ["arrays", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1609680816, "last_edit_date": 1609680816, "creation_date": 1521915355, "answer_id": 49468205, "question_id": 49468122, "link": "https://stackoverflow.com/questions/49468122/what-expressions-are-allowed-as-the-array-length-n-in-n/49468205#49468205", "title": "What expressions are allowed as the array length N in [_; N]?", "body": "<p>As of Rust 1.24.1, the array length basically needs to either be a numeric literal or a &quot;regular&quot; constant that is a <code>usize</code>. There's a small amount of constant evaluation that exists today, but it's more-or-less limited to basic math.</p>\n<blockquote>\n<p>a perfectly valid expression in other contexts, just not as a length parameter to an array</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/43408\" rel=\"nofollow noreferrer\">Array lengths don't support generic parameters. (#43408)</a></p>\n<blockquote>\n<p>this is not a particularly good error message</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/44168\" rel=\"nofollow noreferrer\">Error message should be improved for associated consts in array lengths (#44168)</a></p>\n<blockquote>\n<p>I would expect some restriction akin to <code>constexpr</code></p>\n</blockquote>\n<p>This <em>is</em> essentially the restriction, the problem is that what is allowed to be used in a <code>const</code> is highly restricted at the moment. Notably, these aren't allowed:</p>\n<ul>\n<li>functions (except to construct enums or structs)</li>\n<li>loops</li>\n<li>multiple statements / blocks</li>\n</ul>\n<p>Work on good constant / compile-time evaluation is still ongoing. There are a large amount of RFCs, issues, and PRs improving this. A sample:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/issues/24111\" rel=\"nofollow noreferrer\">Const fn tracking issue (RFC 911)</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/48821\" rel=\"nofollow noreferrer\">Allow locals and destructuring in const fn (RFC 2341)</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/49146\" rel=\"nofollow noreferrer\">Allow <code>if</code> and <code>match</code> in constants (RFC 2342)</a></li>\n</ul>\n"}], "owner": {"reputation": 911, "user_id": 2788450, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/Cw1q0.jpg?s=128&g=1", "display_name": "Jonas Greitemann", "link": "https://stackoverflow.com/users/2788450/jonas-greitemann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 362, "favorite_count": 0, "accepted_answer_id": 49468205, "answer_count": 1, "score": 5, "last_activity_date": 1609680816, "creation_date": 1521914862, "question_id": 49468122, "link": "https://stackoverflow.com/questions/49468122/what-expressions-are-allowed-as-the-array-length-n-in-n", "title": "What expressions are allowed as the array length N in [_; N]?", "body": "<p>Please consider the following minimal example in Rust:</p>\n\n<pre><code>const FOOBAR: usize = 3;\n\ntrait Foo {\n    const BAR: usize;\n}\n\nstruct Fubar();\n\nimpl Foo for Fubar {\n    const BAR: usize = 3;\n}\n\nstruct Baz&lt;T&gt;(T);\n\ntrait Qux {\n    fn print_bar();\n}\n\nimpl&lt;T: Foo&gt; Qux for Baz&lt;T&gt; {\n    fn print_bar() {\n        println!(\"bar: {}\", T::BAR);   // works\n        println!(\"{:?}\", [T::BAR; 3]); // works\n        println!(\"{:?}\", [1; FOOBAR]); // works\n        println!(\"{:?}\", [1; T::BAR]); // this gives an error\n    }\n}\n\nfn main() {\n    Baz::&lt;Fubar&gt;::print_bar();\n}\n</code></pre>\n\n<p>The compiler gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no associated item named `BAR` found for type `T` in the current scope\n  --&gt; src/main.rs:24:30\n   |\n24 |         println!(\"{:?}\", [1; T::BAR]); // this gives an error\n   |                              ^^^^^^ associated item not found in `T`\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `BAR`, perhaps you need to implement it:\n           candidate #1: `Foo`\n</code></pre>\n\n<p>Whatever the answer to my question, this is not a particularly good error message because it suggests that <code>T</code> does implement <code>Foo</code> despite the latter being a trait bound. Only after burning a lot of time did it occur to me that in fact <code>T::BAR</code> is a perfectly valid expression in other contexts, just not as a length parameter to an array.</p>\n\n<p>What are the rules that govern what kind of expressions can go there? Because arrays are <code>Sized</code>, I completely understand that the length are to be known at compile time. Coming from C++ myself, I would expect some restriction akin to <code>constexpr</code> but I have not come across that in the <a href=\"https://doc.rust-lang.org/std/primitive.array.html\" rel=\"noreferrer\">documentation</a> where it just says</p>\n\n<blockquote>\n  <p>A fixed-size array, denoted <code>[T; N]</code>, for the element type, <code>T</code>, and the non-negative compile-time constant size, <code>N</code>.</p>\n</blockquote>\n"}, {"tags": ["types", "rust", "traits", "default-implementation", "trait-objects"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521925545, "post_id": 49466199, "comment_id": 85942281, "body": "Thinking out of the box, rename <code>MyTrait</code> to <code>MyTraitBase</code> and <code>MyTraitComparable</code> to <code>MyTrait</code> \u2014 voil&#224;: you are using <code>MyTrait</code> everywhere."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521965298, "post_id": 49466199, "comment_id": 85949849, "body": "@Shepmaster perhaps an improvement, thanks, but not quite everywhere since all the structs must implement <code>MyTraitBase</code>."}], "answers": [{"comments": [{"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1521965386, "post_id": 49470291, "comment_id": 85949877, "body": "Although I don&#39;t use nightly, it&#39;s good to know there is a solution under consideration!"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1521928093, "creation_date": 1521928093, "answer_id": 49470291, "question_id": 49466199, "link": "https://stackoverflow.com/questions/49466199/default-trait-method-implementation-for-all-trait-objects/49470291#49470291", "title": "Default trait method implementation for all trait objects", "body": "<p>If you're willing to use a nightly compiler and unstable features, you can use <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1210-impl-specialization.md\" rel=\"nofollow noreferrer\">specialization</a> to avoid having two traits:</p>\n\n<pre><code>#![feature(specialization)]\n\nuse std::any::Any;\n\ntrait MyTrait {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n    fn equals(&amp;self, other: &amp;MyTrait) -&gt; bool;\n}\n\ndefault impl&lt;S: 'static + PartialEq&gt; MyTrait for S {\n    default fn as_any(&amp;self) -&gt; &amp;Any {\n        return self as &amp;Any;\n    }\n\n    default fn equals(&amp;self, other: &amp;MyTrait) -&gt; bool {\n        match other.as_any().downcast_ref::&lt;S&gt;() {\n            None =&gt; false,\n            Some(a) =&gt; self == a,\n        }\n    }\n}\n\n#[derive(PartialEq)]\nstruct MyObj {\n    a: i32,\n}\nimpl MyObj {\n    fn new(a: i32) -&gt; MyObj {\n        return MyObj { a };\n    }\n}\n\nimpl MyTrait for MyObj {}\n\nfn main() {\n    assert!(as_trait_obj_and_compare(&amp;MyObj::new(1), &amp;MyObj::new(1)));\n}\n\nfn as_trait_obj_and_compare(obj: &amp;MyTrait, another_obj: &amp;MyTrait) -&gt; bool {\n    obj.equals(another_obj)\n}\n</code></pre>\n"}], "owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 725, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1521928093, "creation_date": 1521903737, "last_edit_date": 1521914638, "question_id": 49466199, "link": "https://stackoverflow.com/questions/49466199/default-trait-method-implementation-for-all-trait-objects", "title": "Default trait method implementation for all trait objects", "body": "<p>I have a trait <code>MyTrait</code>, and I want all trait objects <code>&amp;MyTrait</code> to be comparable to each other and to nothing else. I have that now based on <a href=\"https://stackoverflow.com/questions/25339603/how-to-test-for-equality-between-trait-objects\">How to test for equality between trait objects?</a>. </p>\n\n<p>The problem is that I need to use <code>MyTraitComparable</code> everywhere, instead of <code>MyTrait</code>. Is there a way to get around this?</p>\n\n<pre><code>use std::any::Any;\n\ntrait MyTrait {}\n\ntrait MyTraitComparable: MyTrait {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n\n    fn equals(&amp;self, other: &amp;MyTraitComparable) -&gt; bool;\n}\n\nimpl&lt;S: 'static + MyTrait + PartialEq&gt; MyTraitComparable for S {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        return self as &amp;Any;\n    }\n\n    fn equals(&amp;self, other: &amp;MyTraitComparable) -&gt; bool {\n        return match other.as_any().downcast_ref::&lt;S&gt;() {\n            None =&gt; false,\n            Some(a) =&gt; self == a,\n        };\n    }\n}\n\n#[derive(PartialEq)]\nstruct MyObj {\n    a: i32,\n}\nimpl MyObj {\n    fn new(a: i32) -&gt; MyObj {\n        return MyObj { a };\n    }\n}\n\nimpl MyTrait for MyObj {}\n\nfn main() {\n    assert!(as_trait_obj_and_compare(&amp;MyObj::new(1), &amp;MyObj::new(1)));\n}\n\nfn as_trait_obj_and_compare(obj: &amp;MyTraitComparable, another_obj: &amp;MyTraitComparable) -&gt; bool {\n    obj.equals(another_obj)\n}\n</code></pre>\n\n<p>I tried moving <code>as_any</code> and <code>equals</code> to <code>MyTrait</code> and providing a default implementation, but</p>\n\n<ul>\n<li>I don't think I can use <code>self</code> in that case, so it doesn't work.</li>\n<li>If I use <code>trait MyTrait: PartialEq</code> then I can't create trait objects anymore.</li>\n</ul>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1521903064, "post_id": 49466063, "comment_id": 85934825, "body": "This is it? They are completely interchangeable?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1521903237, "post_id": 49466063, "comment_id": 85934875, "body": "Yes... provided we&#39;re talking about things that are valid in the generic argument list in the first place.  I&#39;ve expanded the answer."}, {"owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "edited": false, "score": 0, "creation_date": 1521903292, "post_id": 49466063, "comment_id": 85934898, "body": "Ok, this is what I wanted to know; thanks!"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1521903200, "last_edit_date": 1521903200, "creation_date": 1521902968, "answer_id": 49466063, "question_id": 49465943, "link": "https://stackoverflow.com/questions/49465943/difference-between-my-funct-mytrait-vs-my-funct-where-t-mytrait/49466063#49466063", "title": "Difference between `my_func&lt;T: MyTrait&gt;` vs `my_func&lt;T&gt; where T: MyTrait`", "body": "<p>One is written with an explicit <code>where</code> clause, the other isn't.</p>\n\n<p>Okay, okay; if you want to be picky, the differences are:</p>\n\n<ul>\n<li>You can't introduce a generic parameter with a <code>where</code> clause.</li>\n<li>You can't constrain anything <em>other</em> than generic parameters in the generic argument list.</li>\n</ul>\n\n<p>But in terms of what changes when you move constraints from the generic argument list to a <code>where</code> clause, they're the same.</p>\n"}], "owner": {"reputation": 1209, "user_id": 2179822, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/ec8ebff1de01237c23aa51bff540eb39?s=128&d=identicon&r=PG", "display_name": "K. Biermann", "link": "https://stackoverflow.com/users/2179822/k-biermann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 42, "favorite_count": 0, "closed_date": 1521914475, "accepted_answer_id": 49466063, "answer_count": 1, "score": 0, "last_activity_date": 1521903200, "creation_date": 1521902272, "question_id": 49465943, "link": "https://stackoverflow.com/questions/49465943/difference-between-my-funct-mytrait-vs-my-funct-where-t-mytrait", "closed_reason": "Duplicate", "title": "Difference between `my_func&lt;T: MyTrait&gt;` vs `my_func&lt;T&gt; where T: MyTrait`", "body": "<p>Whats the difference between</p>\n\n<pre><code>my_func&lt;T: MyTrait&gt;(...) {...}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>my_func&lt;T&gt;(...) where T: MyTrait {...}\n</code></pre>\n\n<p>?</p>\n"}, {"tags": ["string", "rust", "readline"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1521900702, "post_id": 49465552, "comment_id": 85934011, "body": "<code>read_line</code> doesn&#39;t &quot;add&quot; anything to the input; the user <i>typed</i> the Enter key."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521900788, "post_id": 49465552, "comment_id": 85934052, "body": "Please <a href=\"https://stackoverflow.com/posts/49465552/edit\">edit</a> your question to explain why it isn&#39;t already answered by <a href=\"https://stackoverflow.com/q/30355185/155423\">How to read an integer input from the user in Rust 1.0?</a>, specifically by <a href=\"https://stackoverflow.com/a/30355516/155423\">this answer using text_io</a>."}, {"owner": {"reputation": 144, "user_id": 2340101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a40dfca29a028f7d162431d041d43ca2?s=128&d=identicon&r=PG", "display_name": "Melon Bread", "link": "https://stackoverflow.com/users/2340101/melon-bread"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521901641, "post_id": 49465552, "comment_id": 85934358, "body": "@Shepmaster Oh that makes so much sense! Thanks, I never thought about it like that."}, {"owner": {"reputation": 144, "user_id": 2340101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a40dfca29a028f7d162431d041d43ca2?s=128&d=identicon&r=PG", "display_name": "Melon Bread", "link": "https://stackoverflow.com/users/2340101/melon-bread"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521902242, "post_id": 49465552, "comment_id": 85934544, "body": "@Shepmaster this answered my question"}], "owner": {"reputation": 144, "user_id": 2340101, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a40dfca29a028f7d162431d041d43ca2?s=128&d=identicon&r=PG", "display_name": "Melon Bread", "link": "https://stackoverflow.com/users/2340101/melon-bread"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 356, "favorite_count": 0, "closed_date": 1521914416, "answer_count": 0, "score": 1, "last_activity_date": 1521910803, "creation_date": 1521900121, "last_edit_date": 1521910803, "question_id": 49465552, "link": "https://stackoverflow.com/questions/49465552/is-there-an-alternative-to-read-line-that-doesnt-add-anything-to-the-input", "closed_reason": "Duplicate", "title": "Is there an alternative to read_line that doesn&#39;t add anything to the input?", "body": "<p>I am making a program that asks a user's age: </p>\n\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"How Old Are You?\");\n\n    let mut age = String::new();\n    io::stdin().read_line(&amp;mut age).expect(\"Failed to get age\");\n\n    println!(\"You are {} years old!\", age);\n}\n</code></pre>\n\n<p>Once the user enters their age (<code>8</code> for example) <code>read_line</code> inserts a <code>'\\n'</code> to what the user inputs. The result looks like</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>You are 8  \n years old!\n</code></pre>\n\n<p>I know I can use something like this to remove the <code>'\\n'</code> before displaying the age:</p>\n\n<pre><code>let age = age.trim();  \n</code></pre>\n\n<p>Is there an alternative I could use to read user input <strong>simply</strong> that won't add anything to the variable.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 1119, "user_id": 193584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/58bf89ba2dfa037971b05d1afb0480a3?s=128&d=identicon&r=PG", "display_name": "xds2000", "link": "https://stackoverflow.com/users/193584/xds2000"}, "is_accepted": false, "score": -3, "last_activity_date": 1521867363, "creation_date": 1521867363, "answer_id": 49461382, "question_id": 49459821, "link": "https://stackoverflow.com/questions/49459821/what-does-manifest-path-is-a-virtual-manifest-but-this-command-requires-runnin/49461382#49461382", "title": "What does &quot;manifest path is a virtual manifest, but this command requires running against an actual package&quot; mean?", "body": "<p>the manifest has both package and workspace sections can't works. please check the Cargo.toml and remove package from it.</p>\n\n<p><a href=\"https://github.com/behnam/rust-cargo/blob/3f5ca7b53f2fbf098dc6b60069fc1335b81727af/src/doc/manifest.md\" rel=\"nofollow noreferrer\">Virtual Manifest</a> is new concepts, please reading docs to familiar it. Hope it values for you.</p>\n"}, {"comments": [{"owner": {"reputation": 9199, "user_id": 1215344, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/nuA7S.jpg?s=128&g=1", "display_name": "jamescampbell", "link": "https://stackoverflow.com/users/1215344/jamescampbell"}, "edited": false, "score": 0, "creation_date": 1532737628, "post_id": 49463321, "comment_id": 90100646, "body": "This is exactly what I needed. I have an examples folder of local libraries that are each sub folders and their own Cargo.toml files. This worked great."}], "tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 20, "last_activity_date": 1521884998, "last_edit_date": 1592644375, "creation_date": 1521884998, "answer_id": 49463321, "question_id": 49459821, "link": "https://stackoverflow.com/questions/49459821/what-does-manifest-path-is-a-virtual-manifest-but-this-command-requires-runnin/49463321#49463321", "title": "What does &quot;manifest path is a virtual manifest, but this command requires running against an actual package&quot; mean?", "body": "<p>Your <code>Cargo.toml</code> is a <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#virtual-manifest\" rel=\"noreferrer\"><em>virtual manifest</em></a>.</p>\n<blockquote>\n<p>In workspace manifests, if the <code>package</code> table is present, the workspace root crate will be treated as a normal package, as well as a workspace. If the <code>package</code> table is not present in a workspace manifest, it is called a <em>virtual manifest</em>.</p>\n<p>When working with <em>virtual manifests</em>, package-related cargo commands, like <code>cargo build</code>, won't be available anymore. But, most of such commands support the <code>--all</code> option, will execute the command for all the non-virtual manifest in the workspace.</p>\n</blockquote>\n<p><code>cargo run</code> does not work, because cargo doesn't know <em>what</em> to run. There are two options:</p>\n<ol>\n<li><code>--manifest-path &lt;PATH&gt;</code>: Path to <code>Cargo.toml</code> of the crate you want to run.</li>\n<li><code>-p, --package &lt;SPEC&gt;</code>: Package you want to run.</li>\n</ol>\n<p>In your case it's probably <code>cargo run --package xray_cli</code></p>\n"}], "owner": {"reputation": 10770, "user_id": 852063, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/80fd1d68d0d2ae503cf5870e29fecae5?s=128&d=identicon&r=PG&f=1", "display_name": "Amani", "link": "https://stackoverflow.com/users/852063/amani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5157, "favorite_count": 2, "accepted_answer_id": 49463321, "answer_count": 2, "score": 17, "last_activity_date": 1598885486, "creation_date": 1521849686, "last_edit_date": 1598885486, "question_id": 49459821, "link": "https://stackoverflow.com/questions/49459821/what-does-manifest-path-is-a-virtual-manifest-but-this-command-requires-runnin", "title": "What does &quot;manifest path is a virtual manifest, but this command requires running against an actual package&quot; mean?", "body": "<p>I'm trying to build a Rust project (xray). When running <code>cargo run</code> I get the following error message</p>\n<blockquote>\n<p>error: manifest path <code>D:\\xray\\building\\xray\\Cargo.toml</code> is a virtual\nmanifest, but this command requires running against an actual package\nin this workspace</p>\n</blockquote>\n<p>What exactly does this mean and how can it be solved? I'm using Cargo version 0.25.0 and Rust version 1.24.1.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "edited": false, "score": 0, "creation_date": 1521960348, "post_id": 49457323, "comment_id": 85948861, "body": "I realized that I run in to another problem when trying to implement a <code>remove</code> method for my container that should return ownership of the supplied data back to the user. Based on the title of my question, this still falls under the same issue. May I update my question or should I post a new one?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521990637, "post_id": 49457323, "comment_id": 85957166, "body": "This is a tricky situation. You generally don&#39;t want to rewrite questions to invalidate answers, but you are the only answerer. In this case, I&#39;d ask myself if the question <i>title</i> would need to change. If it would to still make sense, I&#39;d ask a new question with the new title. This question can be linked to in a new question, but it also stands alone for future people."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521938312, "post_id": 49461954, "comment_id": 85945441, "body": "<code>Any::is::&lt;T&gt;(i)</code> is stable and happens to be shorter anyway."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521938446, "post_id": 49461954, "comment_id": 85945466, "body": "In fact, you can just use <code>A(ref i) =&gt; Any::downcast_ref(i)</code> and get rid of the conditional and the unsafe."}, {"owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521952680, "post_id": 49461954, "comment_id": 85947697, "body": "I was unaware that supplying your own <code>self</code> argument was legal in rust. Great, and it even works for mutable borrows. Thanks!"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521952854, "post_id": 49461954, "comment_id": 85947721, "body": "methods are mostly just syntax sugar for passing <code>self</code> implicitly."}], "tags": [], "owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "is_accepted": true, "score": 0, "last_activity_date": 1521960132, "last_edit_date": 1521960132, "creation_date": 1521873009, "answer_id": 49461954, "question_id": 49457323, "link": "https://stackoverflow.com/questions/49457323/how-do-i-replace-boxed-trait-objects-of-any-with-an-enum-while-keeping-the-same/49461954#49461954", "title": "How do I replace boxed trait objects of Any with an enum while keeping the same API?", "body": "<p>I can just downcast from the enum that implements <code>GroupTrait</code> using the method <code>downcast_ref</code> on <code>Any</code>:</p>\n\n<pre><code>use std::any::{Any, TypeId};\nuse std::collections::HashMap;\n\ntrait GroupTrait {\n    fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt;;\n}\n\nstruct Container&lt;G&gt; {\n    inner: HashMap&lt;TypeId, G&gt;,\n}\n\nimpl&lt;G&gt; Default for Container&lt;G&gt;\nwhere\n    G: GroupTrait,\n{\n    fn default() -&gt; Self {\n        Container {\n            inner: Default::default(),\n        }\n    }\n}\n\nimpl&lt;G&gt; Container&lt;G&gt;\nwhere\n    G: GroupTrait,\n{\n    pub fn insert&lt;T: Any + Into&lt;G&gt;&gt;(&amp;mut self, data: T) {\n        self.inner.insert(TypeId::of::&lt;T&gt;(), data.into());\n    }\n    pub fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.inner.get(&amp;TypeId::of::&lt;T&gt;()).and_then(|g| g.borrow())\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeA(u32);\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeB(String);\n\n    /// This is the enum that should replace boxed `Any` trait objects. Users also need to supply\n    /// this enum. Maybe they'll need to implement additional traits to get `borrow` to work.\n    #[derive(Debug, PartialEq)]\n    enum Group {\n        A(TypeA),\n        B(TypeB),\n    }\n\n    impl From&lt;TypeA&gt; for Group {\n        fn from(value: TypeA) -&gt; Self {\n            Group::A(value)\n        }\n    }\n\n    impl From&lt;TypeB&gt; for Group {\n        fn from(value: TypeB) -&gt; Self {\n            Group::B(value)\n        }\n    }\n\n    impl GroupTrait for Group {\n        fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n            use self::Group::*;\n            match *self {\n                A(ref i) =&gt; Any::downcast_ref(i),\n                B(ref i) =&gt; Any::downcast_ref(i),\n            }\n        }\n    }\n\n    #[test]\n    fn insert() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        assert_eq!(\n            c.inner.get(&amp;TypeId::of::&lt;TypeA&gt;()),\n            Some(&amp;Group::A(data.clone()))\n        );\n    }\n\n    #[test]\n    fn borrow() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        let borrowed = c.borrow::&lt;TypeA&gt;();\n        assert_eq!(borrowed, Some(&amp;data));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 211, "user_id": 3986895, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/8ac3ee54f310a1af6998e44ffacaa4fc?s=128&d=identicon&r=PG&f=1", "display_name": "E Y", "link": "https://stackoverflow.com/users/3986895/e-y"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 252, "favorite_count": 0, "accepted_answer_id": 49461954, "answer_count": 1, "score": 1, "last_activity_date": 1521960132, "creation_date": 1521834371, "last_edit_date": 1521937937, "question_id": 49457323, "link": "https://stackoverflow.com/questions/49457323/how-do-i-replace-boxed-trait-objects-of-any-with-an-enum-while-keeping-the-same", "title": "How do I replace boxed trait objects of Any with an enum while keeping the same API?", "body": "<p>I currently use the following pattern for storing multiple different user-defined types in a container.</p>\n\n<pre><code>use std::any::{Any, TypeId};\nuse std::collections::HashMap;\n\n#[derive(Default)]\nstruct Container {\n    inner: HashMap&lt;TypeId, Box&lt;Any&gt;&gt;,\n}\n\nimpl Container {\n    pub fn insert&lt;T: Any&gt;(&amp;mut self, data: T) {\n        self.inner.insert(TypeId::of::&lt;T&gt;(), Box::new(data));\n    }\n    pub fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        self.inner.get(&amp;TypeId::of::&lt;T&gt;())\n            .and_then(|a| a.downcast_ref::&lt;T&gt;())\n    }\n}\n</code></pre>\n\n<p>Now, I would like to move away from using boxed trait objects to using enums in their place (type parameter <code>G</code>), but by keeping the same outward-facing API. The goal here is to get around virtualization by using an enum that encapsulates every known user-supplied type <code>T</code>:</p>\n\n<pre><code>use std::any::{Any, TypeId};\nuse std::collections::HashMap;\n\nstruct Container&lt;G&gt; {\n    inner: HashMap&lt;TypeId, G&gt;,\n}\n\nimpl&lt;G&gt; Default for Container&lt;G&gt; {\n    fn default() -&gt; Self {\n        Container {\n            inner: Default::default(),\n        }\n    }\n}\n\nimpl&lt;G&gt; Container&lt;G&gt; {\n    pub fn insert&lt;T: Any + Into&lt;G&gt;&gt;(&amp;mut self, data: T) {\n        self.inner.insert(TypeId::of::&lt;T&gt;(), data.into());\n    }\n    pub fn borrow&lt;T: Any&gt;(&amp;self) -&gt; Option&lt;&amp;T&gt; {\n        unimplemented!()\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeA(u32);\n\n    /// This should be an user-defined type that implements the Any trait.\n    #[derive(Debug, Clone, PartialEq)]\n    struct TypeB(String);\n\n    /// This is the enum that should replace boxed `Any` trait objects. Users also need to supply\n    /// this enum. Maybe they'll need to implement additional traits to get `borrow` to work.\n    #[derive(Debug, PartialEq)]\n    enum Group {\n        A(TypeA),\n        B(TypeB),\n    }\n\n    impl From&lt;TypeA&gt; for Group {\n        fn from(value: TypeA) -&gt; Self {\n            Group::A(value)\n        }\n    }\n\n    impl From&lt;TypeB&gt; for Group {\n        fn from(value: TypeB) -&gt; Self {\n            Group::B(value)\n        }\n    }\n\n    #[test]\n    fn insert() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        assert_eq!(\n            c.inner.get(&amp;TypeId::of::&lt;TypeA&gt;()),\n            Some(&amp;Group::A(data.clone()))\n        );\n    }\n\n    #[test]\n    fn borrow() {\n        let mut c: Container&lt;Group&gt; = Default::default();\n        let data = TypeA(100);\n        c.insert(data.clone());\n        let borrowed = c.borrow::&lt;TypeA&gt;();\n        assert_eq!(borrowed, Some(&amp;data));\n    }\n}\n</code></pre>\n\n<p>How would I go about implementing the <code>borrow</code> method? I really appreciate your help!</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 6, "last_activity_date": 1521829064, "creation_date": 1521829064, "answer_id": 49456073, "question_id": 49455885, "link": "https://stackoverflow.com/questions/49455885/chain-two-iterators-while-lazily-constructing-the-second-one/49456073#49456073", "title": "Chain two iterators while lazily constructing the second one", "body": "<p>One possible approach: delegate the expensive computation to an iterator adaptor.</p>\n\n<pre><code>let nums = [1, 2, 3];\nfor i in nums.iter()\n    .cloned()\n    .chain([()].into_iter().flat_map(|_| expensive_function()))\n{\n    if i &gt; 2 {\n        break;\n    } else {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2dc65eed229616b3554113da063b207f&amp;version=stable\" rel=\"noreferrer\">Playground</a></p>\n\n<p>The passed iterator is the result of flat-mapping a dummy unit value <code>()</code> to the list of values, which is lazy. Since the iterator needs to own the respective outcome of that computation, I chose to copy the number from the array.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1521829861, "creation_date": 1521829861, "answer_id": 49456265, "question_id": 49455885, "link": "https://stackoverflow.com/questions/49455885/chain-two-iterators-while-lazily-constructing-the-second-one/49456265#49456265", "title": "Chain two iterators while lazily constructing the second one", "body": "<p>You can create your own custom iterator adapter that only evaluates a closure when the original iterator is exhausted.</p>\n\n<pre><code>trait IteratorExt: Iterator {\n    fn chain_with&lt;F, I&gt;(self, f: F) -&gt; ChainWith&lt;Self, F, I::IntoIter&gt;\n    where\n        Self: Sized,\n        F: FnOnce() -&gt; I,\n        I: IntoIterator&lt;Item = Self::Item&gt;,\n    {\n        ChainWith {\n            base: self,\n            factory: Some(f),\n            iterator: None,\n        }\n    }\n}\n\nimpl&lt;I: Iterator&gt; IteratorExt for I {}\n\nstruct ChainWith&lt;B, F, I&gt; {\n    base: B,\n    factory: Option&lt;F&gt;,\n    iterator: Option&lt;I&gt;,\n}\n\nimpl&lt;B, F, I&gt; Iterator for ChainWith&lt;B, F, I::IntoIter&gt;\nwhere\n    B: Iterator,\n    F: FnOnce() -&gt; I,\n    I: IntoIterator&lt;Item = B::Item&gt;,\n{\n    type Item = I::Item;\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if let Some(b) = self.base.next() {\n            return Some(b);\n        }\n\n        // Exhausted the first, generate the second\n\n        if let Some(f) = self.factory.take() {\n            self.iterator = Some(f().into_iter());\n        }\n\n        self.iterator\n            .as_mut()\n            .expect(\"There must be an iterator\")\n            .next()\n    }\n}\n</code></pre>\n\n\n\n<pre><code>use std::{thread, time};\n\nfn expensive_function() -&gt; Vec&lt;u64&gt; {\n    panic!(\"You lose, good day sir\");\n    thread::sleep(time::Duration::from_secs(5));\n    vec![4, 5, 6]\n}\n\npub fn main() {\n    let nums = [1, 2, 3];\n    for i in nums.iter().cloned().chain_with(|| expensive_function()) {\n        if i &gt; 2 {\n            break;\n        } else {\n            println!(\"{}\", i);\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 194, "user_id": 7732825, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/42efe0f0ead85ed3e4ac7685e982be7b?s=128&d=identicon&r=PG&f=1", "display_name": "Morten Lohne", "link": "https://stackoverflow.com/users/7732825/morten-lohne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 563, "favorite_count": 0, "accepted_answer_id": 49456073, "answer_count": 2, "score": 3, "last_activity_date": 1521830474, "creation_date": 1521828246, "last_edit_date": 1521830474, "question_id": 49455885, "link": "https://stackoverflow.com/questions/49455885/chain-two-iterators-while-lazily-constructing-the-second-one", "title": "Chain two iterators while lazily constructing the second one", "body": "<p>I'd like a method like <code>Iterator::chain()</code> that only computes the argument iterator when it's needed. In the following code, <code>expensive_function</code> should never be called:</p>\n\n<pre><code>use std::{thread, time};\n\nfn expensive_function() -&gt; Vec&lt;u64&gt; {\n    thread::sleep(time::Duration::from_secs(5));\n    vec![4, 5, 6]\n}\n\npub fn main() {\n    let nums = [1, 2, 3];\n    for &amp;i in nums.iter().chain(expensive_function().iter()) {\n        if i &gt; 2 {\n            break;\n        } else {\n            println!(\"{}\", i);\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["reference", "rust", "coercion"], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1521926827, "creation_date": 1521926827, "answer_id": 49470128, "question_id": 49454023, "link": "https://stackoverflow.com/questions/49454023/why-does-reference-weakening-from-mut-occur-in-some-trait-method-calls/49470128#49470128", "title": "Why does reference weakening from &amp;mut occur in some trait method calls?", "body": "<blockquote>\n  <p>Is it because there is a single implementation of <code>Add</code> for <code>&amp;Foo</code>?</p>\n</blockquote>\n\n<p>Let's see what happens when we add this implementation:</p>\n\n<pre><code>impl&lt;'b&gt; Add&lt;Foo&gt; for &amp;'b Foo {\n    type Output = Foo;\n    fn add(self, _: Foo) -&gt; Foo {\n        Foo\n    }\n}\n</code></pre>\n\n<p>Now <code>&amp;Foo + &amp;mut Foo</code> and <code>&amp;Foo + &amp;mut &amp;mut Foo</code> fail to compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;Foo: std::ops::Add&lt;&amp;mut Foo&gt;` is not satisfied\n  --&gt; src/main.rs:39:10\n   |\n39 |     &amp;Foo + &amp;mut Foo;\n   |          ^ no implementation for `&amp;Foo + &amp;mut Foo`\n   |\n   = help: the trait `std::ops::Add&lt;&amp;mut Foo&gt;` is not implemented for `&amp;Foo`\n\nerror[E0277]: the trait bound `&amp;Foo: std::ops::Add&lt;&amp;mut &amp;mut Foo&gt;` is not satisfied\n  --&gt; src/main.rs:40:10\n   |\n40 |     &amp;Foo + &amp;mut &amp;mut Foo;\n   |          ^ no implementation for `&amp;Foo + &amp;mut &amp;mut Foo`\n   |\n   = help: the trait `std::ops::Add&lt;&amp;mut &amp;mut Foo&gt;` is not implemented for `&amp;Foo`\n</code></pre>\n\n<p>So the answer is <strong>yes</strong>.</p>\n\n<blockquote>\n  <p>If so, why does it make the compiler behave differently?</p>\n</blockquote>\n\n<p>When there is a single applicable implementation of <code>Add&lt;T&gt;</code> (or any other generic trait), the compiler doesn't need to infer <code>T</code> from the arguments; it has already resolved <code>T</code> based on that single implementation. Basically, it's as if the trait wasn't generic at all. Therefore, the coercions that work on non-generic arguments can be applied too.</p>\n"}], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 99, "favorite_count": 0, "accepted_answer_id": 49470128, "answer_count": 1, "score": 7, "last_activity_date": 1521926827, "creation_date": 1521821557, "last_edit_date": 1521822106, "question_id": 49454023, "link": "https://stackoverflow.com/questions/49454023/why-does-reference-weakening-from-mut-occur-in-some-trait-method-calls", "title": "Why does reference weakening from &amp;mut occur in some trait method calls?", "body": "<p>One of the few implicit conversions available in Rust is <a href=\"https://doc.rust-lang.org/nomicon/coercions.html\" rel=\"nofollow noreferrer\">pointer weakening</a>, which can turn a <code>&amp;mut T</code> into a <code>&amp;T</code>:</p>\n\n<pre><code>fn just_foo&lt;T&gt;(_: &amp;T) {}\n\njust_foo(&amp;mut vec![1, 2, 3]);\n</code></pre>\n\n<p>However, this doesn't happen when matching traits. For instance, although the + operator with references as right-hand sided values is implemented for numeric types, they won't accept mutable references to the same type:</p>\n\n<pre><code>5 + &amp;mut 5;\n(&amp;5) + &amp;mut 5;\n</code></pre>\n\n<p>The error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `{integer}: std::ops::Add&lt;&amp;mut {integer}&gt;` is not satisfied\n--&gt; src/main.rs:38:7\n   |\n38 | 5 + &amp;mut 5;\n   | ^ no implementation for `{integer} + &amp;mut {integer}`\n   |\n   = help: the trait `std::ops::Add&lt;&amp;mut {integer}&gt;` is not implemented for `{integer}`\n\nerror[E0277]: the trait bound `&amp;{integer}: std::ops::Add&lt;&amp;mut {integer}&gt;` is not satisfied\n--&gt; src/main.rs:43:10\n   |\n43 | (&amp;5) + &amp;mut 5;\n   | ^ no implementation for `&amp;{integer} + &amp;mut {integer}`\n   |\n   = help: the trait `std::ops::Add&lt;&amp;mut {integer}&gt;` is not implemented for `&amp;{integer}`\n</code></pre>\n\n<p>For another, more intriguing example, I added an assortment of implementations of <code>Add</code> for a unit type <code>Foo</code>:</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Debug, Default)]\nstruct Foo;\n\nimpl Add&lt;Foo&gt; for Foo {\n    type Output = Foo;\n    fn add(self, _: Foo) -&gt; Foo {\n        Foo\n    }\n}\n\nimpl&lt;'a&gt; Add&lt;&amp;'a Foo&gt; for Foo {\n    type Output = Foo;\n    fn add(self, _: &amp;'a Foo) -&gt; Foo {\n        Foo\n    }\n}\n\nimpl&lt;'a, 'b&gt; Add&lt;&amp;'a Foo&gt; for &amp;'b Foo {\n    type Output = Foo;\n    fn add(self, _: &amp;'a Foo) -&gt; Foo {\n        Foo\n    }\n}\n</code></pre>\n\n<p>Only to find that I can perform <code>&amp;Foo + &amp;mut Foo</code>, but not <code>Foo + &amp;mut Foo</code>:</p>\n\n<pre><code>&amp;Foo + &amp;mut Foo; // ok\nFoo + &amp;mut Foo; // not ok\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=48be8fdf224f9a1bfb1abc5b18eaa400&amp;version=stable\" rel=\"nofollow noreferrer\">Full Playground</a></p>\n\n<p>The second case is in line with the previous example above, but the first one isn't. It seems that the RHS <code>&amp;mut Foo</code> was coerced to <code>&amp;Foo</code> to match the implementation of <code>&amp;Foo + &amp;Foo</code>. It doesn't look either that other coercions are taking place, because the receiving type for <code>&amp;Foo as Add&lt;&amp;Foo&gt;</code> is already <code>&amp;Foo</code>. I could also throw the syntactic sugar away and obtain the same outcome:</p>\n\n<pre><code>(&amp;Foo).add(&amp;mut Foo); // ok\nFoo.add(&amp;mut Foo); // not ok\n</code></pre>\n\n<p>Given that coercions, according to the Nomicon, are not supposed to happen when doing trait matching, why does this <code>&amp;Foo + &amp;mut Foo</code> work when <code>&amp;i32 + &amp;mut i32</code> doesn't? Is it because there is a single implementation of <code>Add</code> for <code>&amp;Foo</code>? If so, why does it make the compiler behave differently?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 101, "user_id": 9540127, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0da37b9851c1c97eba090e9eb9685d8b?s=128&d=identicon&r=PG&f=1", "display_name": "C. Dunn", "link": "https://stackoverflow.com/users/9540127/c-dunn"}, "edited": false, "score": 2, "creation_date": 1604582564, "post_id": 49453647, "comment_id": 114394171, "body": "Thank you! And for others reading this in the future, you can see what targets Rust supports using <code>rustc --print target-list</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 11, "last_activity_date": 1521820178, "creation_date": 1521820178, "answer_id": 49453647, "question_id": 49453571, "link": "https://stackoverflow.com/questions/49453571/how-can-i-set-default-build-target-for-cargo/49453647#49453647", "title": "How can I set default build target for Cargo?", "body": "<p>As listed in <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"noreferrer\">the Cargo documentation</a>, you can create a <code>.cargo/config</code> and specify the target:</p>\n\n<pre><code>[build]\ntarget = \"my-custom-target\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 423, "user_id": 1211392, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/dbc8b835bed12dd8194c240139033bc8?s=128&d=identicon&r=PG", "display_name": "Usagi Ito", "link": "https://stackoverflow.com/users/1211392/usagi-ito"}, "edited": false, "score": 1, "creation_date": 1597925961, "post_id": 49453658, "comment_id": 112295042, "body": "Is it work expectedly too now? I got the warning: <code>warning: unused manifest key: build</code> using 1.47.0-nightly."}, {"owner": {"reputation": 350, "user_id": 7471004, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da100e0f41655a2a27967c91f34ab332?s=128&d=identicon&r=PG&f=1", "display_name": "Jeff Muizelaar", "link": "https://stackoverflow.com/users/7471004/jeff-muizelaar"}, "edited": false, "score": 1, "creation_date": 1600206334, "post_id": 49453658, "comment_id": 113013788, "body": "Are you putting it in <code>Cargo.toml</code>?. You need to use <code>.cargo&#47;config</code>"}], "tags": [], "owner": {"reputation": 580, "user_id": 1449426, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/64dab35222dd4992c679d408c5729008?s=128&d=identicon&r=PG", "display_name": "mexus", "link": "https://stackoverflow.com/users/1449426/mexus"}, "is_accepted": true, "score": 36, "last_activity_date": 1588607387, "last_edit_date": 1588607387, "creation_date": 1521820224, "answer_id": 49453658, "question_id": 49453571, "link": "https://stackoverflow.com/questions/49453571/how-can-i-set-default-build-target-for-cargo/49453658#49453658", "title": "How can I set default build target for Cargo?", "body": "<p>You could use a <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"noreferrer\">Cargo configuration file</a> to specify a default target-triple for your project. In your project's root, create a <code>.cargo</code> directory and a <code>config</code> file in it with the following contents:</p>\n\n<pre><code>[build]\ntarget = \"wasm32-unknown-unknown\"\n</code></pre>\n"}], "owner": {"reputation": 748, "user_id": 133864, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3f98c2813f9b55c867d044e7e030c222?s=128&d=identicon&r=PG", "display_name": "antono", "link": "https://stackoverflow.com/users/133864/antono"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13126, "favorite_count": 2, "accepted_answer_id": 49453658, "answer_count": 2, "score": 21, "last_activity_date": 1588607387, "creation_date": 1521819965, "last_edit_date": 1557134573, "question_id": 49453571, "link": "https://stackoverflow.com/questions/49453571/how-can-i-set-default-build-target-for-cargo", "title": "How can I set default build target for Cargo?", "body": "<p>I tried to make 'Hello World' in Rust using <a href=\"https://rustwasm.github.io/book/game-of-life/hello-world.html\" rel=\"noreferrer\">this tutorial</a>, but the build command is a bit verbose:</p>\n\n<pre><code>cargo +nightly build --target wasm32-unknown-unknown --release\n</code></pre>\n\n<p>Is it possible to set the default target for <code>cargo build</code>?</p>\n"}, {"tags": ["vector", "hashmap", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1521816200, "post_id": 49452040, "comment_id": 85907098, "body": "Perhaps you could expand your question to explain what part of the error text &quot;main function has wrong type&quot; you found confusing? That way, we might be able to improve the compiler."}], "answers": [{"comments": [{"owner": {"reputation": 3, "user_id": 9540819, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6d796e1175492ce1ee955497ef990c84?s=128&d=identicon&r=PG&f=1", "display_name": "RustiTheClown", "link": "https://stackoverflow.com/users/9540819/rustitheclown"}, "edited": false, "score": 0, "creation_date": 1521815921, "post_id": 49452135, "comment_id": 85906871, "body": "Oh my gosh! Thank you, Tim!"}], "tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 4, "last_activity_date": 1521816232, "last_edit_date": 1521816232, "creation_date": 1521815796, "answer_id": 49452135, "question_id": 49452040, "link": "https://stackoverflow.com/questions/49452040/how-can-a-vector-of-hashmaps-be-created-and-returned-from-main/49452135#49452135", "title": "How can a vector of HashMaps be created and returned from main?", "body": "<p>You try to return a value from <code>fn main()</code>, which isn't possible.</p>\n\n<p>It will work if you rename your function and call it from <code>main</code>:</p>\n\n<pre><code>fn create_map() -&gt; Vec&lt;HashMap&lt;String, String&gt;&gt; {\n    let mut foo = HashMap::new();\n    foo.insert(\"\".to_string(), \"\".to_string());\n    let mut f = Vec::new();\n    f.push(foo);\n    f\n}\n\nfn main() {\n    create_map();\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=f3116c7085964234ad95b0829ce9232a&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>However, you also forgot to add <code>mut</code> to <code>let f = Vec::new();</code></p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 2, "last_activity_date": 1521816101, "creation_date": 1521816101, "answer_id": 49452252, "question_id": 49452040, "link": "https://stackoverflow.com/questions/49452040/how-can-a-vector-of-hashmaps-be-created-and-returned-from-main/49452252#49452252", "title": "How can a vector of HashMaps be created and returned from main?", "body": "<p>The compiler error has nothing to do with your vector or hashmap. It just states: \"<em>main function has wrong type</em>\". In Rust, every executable program starts at the function called <code>main</code> (located at the crate root). So that function name has a special meaning and a function called <code>main</code> at the crate root has to have a special signature (namely no arguments and <code>()</code> return type).</p>\n\n<p>So you can fix the error by renaming your function and adding a <code>mut</code>. But you can write your code a bit more idiomatic with the <code>vec![]</code> macro:</p>\n\n<pre><code>fn get_vector() -&gt; Vec&lt;HashMap&lt;String, String&gt;&gt; {\n    let mut foo = HashMap::new();\n    foo.insert(\"\".to_string(), \"\".to_string());\n    vec![foo]\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=12af968517dc19e2b08514eb208eba63&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a>)</p>\n"}], "owner": {"reputation": 3, "user_id": 9540819, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6d796e1175492ce1ee955497ef990c84?s=128&d=identicon&r=PG&f=1", "display_name": "RustiTheClown", "link": "https://stackoverflow.com/users/9540819/rustitheclown"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 995, "favorite_count": 0, "accepted_answer_id": 49452135, "answer_count": 2, "score": 0, "last_activity_date": 1521816232, "creation_date": 1521815527, "last_edit_date": 1521816129, "question_id": 49452040, "link": "https://stackoverflow.com/questions/49452040/how-can-a-vector-of-hashmaps-be-created-and-returned-from-main", "title": "How can a vector of HashMaps be created and returned from main?", "body": "<p>I would like to create a vector of <code>HashMaps</code> in Rust. I have tried the following:</p>\n\n<pre><code>fn main() -&gt; Vec&lt;HashMap&lt;String, String&gt;&gt; {\n    let mut foo = HashMap::new();\n    foo.insert(\"\".to_string(), \"\".to_string());\n    let f = Vec::new();\n    f.push(foo);\n    f\n}\n</code></pre>\n\n<p>But I always get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0580]: main function has wrong type\n  --&gt; src/main.rs:9:1\n   |\n9  | / fn main() -&gt; Vec&lt;HashMap&lt;String, String&gt;&gt; {\n10 | |     let mut foo = HashMap::new();\n11 | |     foo.insert(\"\".to_string(), \"\".to_string());\n12 | |     let f = Vec::new();\n13 | |     f.push(foo);\n14 | |     f\n15 | | }\n   | |_^ expected (), found struct `std::vec::Vec`\n   |\n   = note: expected type `fn()`\n              found type `fn() -&gt; std::vec::Vec&lt;std::collections::HashMap&lt;std::string::String, std::string::String&gt;&gt;`\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 6, "last_activity_date": 1521807857, "creation_date": 1521807857, "answer_id": 49449599, "question_id": 49449228, "link": "https://stackoverflow.com/questions/49449228/how-to-create-a-value-with-an-associated-type-using-a-normal-struct-constructor/49449599#49449599", "title": "How to create a value with an associated type using a normal struct constructor?", "body": "<p>Like so:</p>\n\n<pre><code>macro_rules! init {\n    ($t:ty, { $( $k:ident =&gt;  $v:expr ),* }) =&gt; {\n        {\n            type T = &lt;$t as Parent&gt;::Child;\n            T {\n                $( $k: $v ),*\n            }\n        }\n    };\n}\n</code></pre>\n\n<p>My assumption would be that this is a limitation of the parser, not of the compiler's type analysis.</p>\n"}, {"tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": -1, "last_activity_date": 1521807996, "creation_date": 1521807996, "answer_id": 49449640, "question_id": 49449228, "link": "https://stackoverflow.com/questions/49449228/how-to-create-a-value-with-an-associated-type-using-a-normal-struct-constructor/49449640#49449640", "title": "How to create a value with an associated type using a normal struct constructor?", "body": "<p>I don't think it is possible to initialize an associated type.</p>\n\n<p>What you could do is perhaps have the <code>Child: K</code> with <code>K</code> being a trait having some known constructor (<code>::new</code> etc ...), Then call that constructor instead.</p>\n\n<p>Alternatively you can probably initialize a <code>T</code> directly instead of <code>Child</code>.</p>\n"}], "owner": {"reputation": 499, "user_id": 8550523, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/6UROd.jpg?s=128&g=1", "display_name": "pepsighan", "link": "https://stackoverflow.com/users/8550523/pepsighan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 122, "favorite_count": 0, "accepted_answer_id": 49449599, "answer_count": 2, "score": 4, "last_activity_date": 1521823038, "creation_date": 1521806431, "last_edit_date": 1521823038, "question_id": 49449228, "link": "https://stackoverflow.com/questions/49449228/how-to-create-a-value-with-an-associated-type-using-a-normal-struct-constructor", "title": "How to create a value with an associated type using a normal struct constructor?", "body": "<p>I am trying to create a macro which initializes a struct <code>T</code> using <code>P::Child</code> from struct <code>P</code> where <code>P: Parent&lt;Child = T&gt;</code>.</p>\n\n<pre><code>macro_rules! init {\n    ($t:tt, { $( $k:ident =&gt;  $v:expr ),* }) =&gt; {\n        &lt;$t as Parent&gt;::Child {\n            $( $k: $v ),*\n        }\n    };\n}\n</code></pre>\n\n<p>This macro passes the props as a map which is passed onto the struct's given constructor. Expanded, it would look like this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Apple {\n    a: i32\n}\n\ntrait Parent {\n    type Child;\n}\n\nstruct Mango;\n\nimpl Parent for Mango {\n    type Child = Apple;\n}\n\nfn main() {\n    let a = &lt;Mango as Parent&gt;::Child {\n        a: 4\n    };\n    println!(\"{:?}\", a);\n}\n</code></pre>\n\n<p>Compiling this has the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: expected one of `.`, `::`, `;`, `?`, or an operator, found `{`\n  --&gt; src/main.rs:25:38\n   |\n25 |     let a = &lt;Mango as Parent&gt;::Child {\n   |                                      ^ expected one of `.`, `::`, `;`, `?`, or an operator here\n</code></pre>\n\n<p>I have created a macro to initialize a struct in a similar way but I am not able to do it with associated types. I think the compiler does not support it for some reason. Even so, I want to create a macro with such an API.</p>\n\n<p>How could I approach this problem?</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8778c500c60572307559acf00c075d0f&amp;version=undefined\" rel=\"nofollow noreferrer\">Link to Playground</a></p>\n"}, {"tags": ["mysql", "rust"], "comments": [{"owner": {"reputation": 161, "user_id": 818704, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0d80d54e2d74c0766d0c9d5153d284d5?s=128&d=identicon&r=PG", "display_name": "set", "link": "https://stackoverflow.com/users/818704/set"}, "edited": false, "score": 2, "creation_date": 1521794247, "post_id": 49443070, "comment_id": 85892323, "body": "Please see <a href=\"https://github.com/blackbeam/rust-mysql-simple/issues/137\" rel=\"nofollow noreferrer\">github.com/blackbeam/rust-mysql-simple/issues/137</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1029, "user_id": 390738, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/AS01y.jpg?s=128&g=1", "display_name": "joel3000", "link": "https://stackoverflow.com/users/390738/joel3000"}, "edited": false, "score": 0, "creation_date": 1522454166, "post_id": 49451025, "comment_id": 86173910, "body": "Rust never fails to surprise me. :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1521812533, "creation_date": 1521812533, "answer_id": 49451025, "question_id": 49443070, "link": "https://stackoverflow.com/questions/49443070/mysqlvaluefromvalue-not-implemented-for-a-large-tuple-when-calling-mysqlfr/49451025#49451025", "title": "mysql::value::FromValue not implemented for a large tuple when calling mysql::from_row", "body": "<p>The compiler is not lying to you. <a href=\"https://docs.rs/mysql/12.3.1/mysql/prelude/trait.FromRow.html\" rel=\"nofollow noreferrer\"><code>FromRow</code></a> is only implemented for certain sizes of tuples. The <a href=\"https://github.com/blackbeam/rust-mysql-simple/issues/137\" rel=\"nofollow noreferrer\">author of the library suggests calling <code>Row::take</code></a>:</p>\n\n<pre><code>pub fn new(id: u32, pool: &amp;Pool) -&gt; Option&lt;Self&gt; {\n    let sql = include_str!(\"../../resources/sql/users/select.mysql\");\n\n    let mut row = match pool.prep_exec(sql, params!{\"id\" =&gt; &amp;id}).unwrap().next() {\n        Some(Ok(row)) =&gt; row,\n        _ =&gt; return None,\n    };\n\n    Some(User {\n        id: row.take(\"id\").unwrap(),\n        user: row.take(\"user\").unwrap(),\n        company: row.take(\"company\").unwrap(),\n        mass_of_weight: row.take(\"mass_of_weight\").unwrap(),\n        total_height: row.take(\"total_height\").unwrap(),\n        k_coefficient: row.take(\"k_coefficient\").unwrap(),\n        energy_utilisation: row.take(\"energy_utilisation\").unwrap(),\n        a: row.take(\"a\").unwrap(),\n        b: row.take(\"b\").unwrap(),\n        c: row.take(\"c\").unwrap(),\n        d: row.take(\"d\").unwrap(),\n        e: row.take(\"e\").unwrap(),\n        f: row.take(\"f\").unwrap(),\n        m: row.take(\"m\").unwrap(),\n        n: row.take(\"n\").unwrap(),\n        o: row.take(\"o\").unwrap(),\n        p: row.take(\"p\").unwrap(),\n    })\n}\n</code></pre>\n\n<p>Since you aren't performing any transformation of your data, you may want to see if <a href=\"https://crates.io/crates/diesel\" rel=\"nofollow noreferrer\">Diesel</a> is a better fit for your application.</p>\n"}], "owner": {"reputation": 1029, "user_id": 390738, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/AS01y.jpg?s=128&g=1", "display_name": "joel3000", "link": "https://stackoverflow.com/users/390738/joel3000"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 620, "favorite_count": 1, "accepted_answer_id": 49451025, "answer_count": 1, "score": 1, "last_activity_date": 1539963254, "creation_date": 1521783768, "last_edit_date": 1539963254, "question_id": 49443070, "link": "https://stackoverflow.com/questions/49443070/mysqlvaluefromvalue-not-implemented-for-a-large-tuple-when-calling-mysqlfr", "title": "mysql::value::FromValue not implemented for a large tuple when calling mysql::from_row", "body": "<p>I want to convert the structure <code>User</code> to add ten letter named attributes from <code>a</code> to <code>f</code> and <code>m</code> to <code>p</code>.    </p>\n\n<pre><code>#[macro_use]\nextern crate mysql;\n\nuse mysql::Pool;\n\n#[derive(Debug, Default)]\npub struct User {\n    /// The ID number of the user.\n    pub id: u32,\n    /// The name of the user / machine.\n    pub user: String,\n\n    /// The name of the company the user is attached to.\n    pub company: Option&lt;String&gt;,\n    /// The mass of the weight in the machine.\n    pub mass_of_weight: Option&lt;f64&gt;,\n    /// The total height of the machine.\n    pub total_height: Option&lt;f64&gt;,\n\n    /// The callibration coefficient for BMWI calculations involving this machine.\n    pub k_coefficient: Option&lt;f64&gt;,\n    /// The EU value for the machine at this point in time.\n    pub energy_utilisation: Option&lt;f64&gt;,\n    pub a: Option&lt;f64&gt;,\n    pub b: Option&lt;f64&gt;,\n    pub c: Option&lt;f64&gt;,\n    pub d: Option&lt;f64&gt;,\n    pub e: Option&lt;f64&gt;,\n    pub f: Option&lt;f64&gt;,\n    pub m: Option&lt;f64&gt;,\n    pub n: Option&lt;f64&gt;,\n    pub o: Option&lt;f64&gt;,\n    pub p: Option&lt;f64&gt;,\n}\n\nimpl User {\n    /// Selects a user from the database, given their id.\n    pub fn new(id: u32, pool: &amp;Pool) -&gt; Option&lt;Self&gt; {\n        let (\n            user,\n            company,\n            mass_of_weight,\n            total_height,\n            k_coefficient,\n            energy_utilisation,\n            a,\n            b,\n            c,\n            d,\n            e,\n            f,\n            m,\n            n,\n            o,\n            p,\n        ) = match pool.prep_exec(\n            include_str!(\"../../resources/sql/users/select.mysql\"),\n            params!{\"id\" =&gt; &amp;id},\n        ).unwrap()\n            .next()\n        {\n            Some(Ok(row)) =&gt; mysql::from_row(row),\n            _ =&gt; return None,\n        };\n\n        Some(User {\n            id: id,\n            user: user,\n            company: company,\n            mass_of_weight: mass_of_weight,\n            total_height: total_height,\n            k_coefficient: k_coefficient,\n            energy_utilisation: energy_utilisation,\n            a: a,\n            b: b,\n            c: c,\n            d: d,\n            e: e,\n            f: f,\n            m: m,\n            n: n,\n            o: o,\n            p: p,\n        })\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>When I run <code>cargo build</code> I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _): mysql::prelude::FromValue` is not satisfied\n  --&gt; src/main.rs:62:30\n   |\n62 |             Some(Ok(row)) =&gt; mysql::from_row(row),\n   |                              ^^^^^^^^^^^^^^^ the trait `mysql::prelude::FromValue` is not implemented for `(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)`\n   |\n   = note: required because of the requirements on the impl of `mysql::prelude::FromRow` for `(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _)`\n   = note: required by `mysql::from_row`\n</code></pre>\n\n<p>The SQL is:</p>\n\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT id, user, company, mass_of_weight, total_height, k_coefficient,\n       energy_utilisation, a, b, c, d, e, f, m, n, o, p\n       FROM users\n</code></pre>\n\n<p>What do I do about this error? I have tried <code>cargo clean</code>; it does not help.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1521813505, "post_id": 49441847, "comment_id": 85905002, "body": "Conventionally, this function would be called <code>into_core</code>; a common pattern for such methods on enums."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1542727818, "post_id": 49441847, "comment_id": 93667959, "body": "<a href=\"https://rust-lang-nursery.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\" rel=\"nofollow noreferrer\">The specific naming convention I mention</a>."}], "answers": [{"comments": [{"owner": {"reputation": 5438, "user_id": 1944335, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/8675e8c601fc98c0ad3a8272b417d0de?s=128&d=identicon&r=PG&f=1", "display_name": "James Taylor", "link": "https://stackoverflow.com/users/1944335/james-taylor"}, "edited": false, "score": 0, "creation_date": 1521778024, "post_id": 49442062, "comment_id": 85886185, "body": "This makes a lot of sense. Thank you so much!"}, {"owner": {"reputation": 4594, "user_id": 1478356, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/996ee463b8f6b17a738f2e23f7ecfe9f?s=128&d=identicon&r=PG", "display_name": "Stefan", "link": "https://stackoverflow.com/users/1478356/stefan"}, "edited": false, "score": 1, "creation_date": 1521882282, "post_id": 49442062, "comment_id": 85928837, "body": "I don&#39;t see how this would compile; <code>Some(self)</code> is of type <code>Option&lt;Atag&gt;</code>, not <code>Option&lt;Core&gt;</code>."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "reply_to_user": {"reputation": 5438, "user_id": 1944335, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/8675e8c601fc98c0ad3a8272b417d0de?s=128&d=identicon&r=PG&f=1", "display_name": "James Taylor", "link": "https://stackoverflow.com/users/1944335/james-taylor"}, "edited": false, "score": 1, "creation_date": 1521885972, "post_id": 49442062, "comment_id": 85929687, "body": "Hang on. @JamesTaylor, did you want to return <i><code>self</code></i> (an <code>Atag::Core</code>, return type <code>Option&lt;Atag&gt;</code>), or <i>the Core held by <code>self</code></i> (a <code>Core</code> struct, return type <code>Option&lt;Core&gt;</code>)? Because I assumed you wanted the former and didn&#39;t check the type signature as closely as I should have. If you want the latter, that changes things."}], "tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 5, "last_activity_date": 1521813472, "last_edit_date": 1521813472, "creation_date": 1521777000, "answer_id": 49442062, "question_id": 49441847, "link": "https://stackoverflow.com/questions/49441847/how-can-i-return-none-when-a-given-enum-is-not-a-certain-variant/49442062#49442062", "title": "How can I return None when a given enum is not a certain variant?", "body": "<p>I think this is just a limitation of the pattern matching and is designed to prevent unexpected behavior.</p>\n\n<p>The full \"definition\" of an <code>Atag</code> with type <code>Core</code> is <code>Atag::Core(raw::Core)</code>. Obviously, the contents of the <code>Core</code> are irrelevant to you, but the compiler needs to know that everything is \"accounted for\" because the compiler is a stickler for the rules. The easiest way to get around this is to use the \"anything pattern\", <code>_</code>, much like you did to match non-<code>Core</code> variants.</p>\n\n<pre><code>impl Atag {\n    /// Returns `Some` if this is a `Core` ATAG. Otherwise returns `None`.\n    pub fn core(self) -&gt; Option&lt;Core&gt; {\n        match self {\n            // The compiler now knows that a value is expected,\n            // but isn't necessary for the purposes of our program.\n            Atag::Core(_) =&gt; Some(self),\n            _ =&gt; None\n        }\n    }\n}\n</code></pre>\n\n<p>To ignore multiple values, you'd use <code>Something::Foo(_, _)</code> - one underscore for each value in the variant, or <code>Something::Foo(..)</code> to ignore everything.</p>\n\n<p>Remember that, unlike in some other languages, a Rust enum is not \"just\" a collection of different types. Data associated with an enum value is a part of it, just like the fields of a structure. So <code>self == Atag::Core</code> isn't a meaningful statement because it ignores the data associated with a <code>Core</code>. A <code>Foo(0)</code> is different than a <code>Foo(12)</code>, even if they're both of the <code>Foo</code> variant.</p>\n\n<p>I'd also like to point out <a href=\"https://rustbyexample.com/flow_control/if_let.html\" rel=\"nofollow noreferrer\"><code>if let</code></a>, which is - as far as I can tell - the closest option to a standard <code>if</code> statement without defining a custom <code>is_core</code> function on <code>Atag</code> (which, given the existence of <code>match</code> and <code>if let</code>, is basically unnecessary).</p>\n\n<pre><code>impl Atag {\n    /// Returns `Some` if this is a `Core` ATAG. Otherwise returns `None`.\n    pub fn core(self) -&gt; Option&lt;Core&gt; {\n        if let Atag::Core(_) = self {\n            Some(self)\n        } else {\n            None\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 60850, "user_id": 221955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG", "display_name": "Michael Anderson", "link": "https://stackoverflow.com/users/221955/michael-anderson"}, "is_accepted": false, "score": 0, "last_activity_date": 1542756499, "last_edit_date": 1542756499, "creation_date": 1542719595, "answer_id": 53393789, "question_id": 49441847, "link": "https://stackoverflow.com/questions/49441847/how-can-i-return-none-when-a-given-enum-is-not-a-certain-variant/53393789#53393789", "title": "How can I return None when a given enum is not a certain variant?", "body": "<p>I needed something like this to chain functions together nicely. In that case, you want to return the unwrapped core type, rather than just the enum. </p>\n\n<p>I also found it easier to not consume the input, and so accepted a <code>&amp;self</code> argument an returned an <code>Option&lt;&amp;Core&gt;</code>. But you can have both.</p>\n\n<p>The <a href=\"https://rust-lang-nursery.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\" rel=\"nofollow noreferrer\">Rust convention</a> has <code>as_X</code> as the reference-based conversion and <code>into_X</code> as the conversion that consumes the value. For example:</p>\n\n<pre><code>impl Atag {\n    fn as_core(&amp;self) -&gt; Option&lt;&amp;Core&gt; {\n        if let Atag::Core(ref v) = self {\n            Some(v)\n        } else {\n            None\n        }\n    }\n    fn into_core(self) -&gt; Option&lt;Core&gt; {\n        if let Atag::Core(v) = self {\n            Some(v)\n        } else {\n            None\n        }\n    }\n}\n\nfn main() {\n    let c = Atag::Core(Core {});\n    let m = Atag::Mem(Mem {});\n    assert_eq!(c.as_core().map(|cc| \"CORE_REF\"), Some(\"CORE_REF\"));\n    assert_eq!(m.as_core().map(|cc| \"CORE_REF\"), None);\n    // Consume c - we cant use it after here...\n    assert_eq!(c.into_core().map(|cc| \"NOM NOM CORE\"), Some(\"NOM NOM CORE\"));\n    // Consume m - we cant use it after here...\n    assert_eq!(m.into_core().map(|cc| \"NOM NOM CORE\"), None);\n}\n</code></pre>\n"}], "owner": {"reputation": 5438, "user_id": 1944335, "user_type": "registered", "accept_rate": 84, "profile_image": "https://www.gravatar.com/avatar/8675e8c601fc98c0ad3a8272b417d0de?s=128&d=identicon&r=PG&f=1", "display_name": "James Taylor", "link": "https://stackoverflow.com/users/1944335/james-taylor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 791, "favorite_count": 0, "accepted_answer_id": 49442062, "answer_count": 2, "score": 4, "last_activity_date": 1542756499, "creation_date": 1521775068, "last_edit_date": 1542727785, "question_id": 49441847, "link": "https://stackoverflow.com/questions/49441847/how-can-i-return-none-when-a-given-enum-is-not-a-certain-variant", "title": "How can I return None when a given enum is not a certain variant?", "body": "<p>I have the following enum defined:</p>\n\n<pre><code>#[derive(Debug, Copy, Clone)]\nstruct Core;\n\n#[derive(Debug, Copy, Clone)]\nstruct Mem;\n\n#[derive(Debug, Copy, Clone)]\npub enum Atag {\n    Core(Core),\n    Mem(Mem),\n    Cmd(&amp;'static str),\n    Unknown(u32),\n    None,\n}\n</code></pre>\n\n<p>I would like to implement a function on this enum which \"filters out\" certain enum values. I have the following:</p>\n\n<pre><code>impl Atag {\n    /// Returns `Some` if this is a `Core` ATAG. Otherwise returns `None`.\n    pub fn core(self) -&gt; Option&lt;Core&gt; {\n        match self {\n            Atag::Core =&gt; Some(self),\n            _ =&gt; None\n        }\n    }\n}\n</code></pre>\n\n<p>I'm not sure why, but the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0532]: expected unit struct/variant or constant, found tuple variant `Atag::Core`\n  --&gt; src/main.rs:17:13\n   |\n17 |             Atag::Core =&gt; Some(self),\n   |             ^^^^^^^^^^ not a unit struct/variant or constant\nhelp: possible better candidate is found in another module, you can import it into scope\n   |\n1  | use Core;\n   |\n</code></pre>\n\n<p>I also tried a comparison approach:</p>\n\n<pre><code>pub fn core(self) -&gt; Option&lt;Core&gt; {\n    if self == Atag::Core {\n        Some(self)\n    } else {\n        None\n    }\n}\n</code></pre>\n\n<p>But the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0369]: binary operation `==` cannot be applied to type `Atag`\n  --&gt; src/main.rs:20:12\n   |\n20 |         if self == Atag::Core {\n   |            ^^^^^^^^^^^^^^^^^^\n   |\n   = note: an implementation of `std::cmp::PartialEq` might be missing for `Atag`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1521773299, "post_id": 49441484, "comment_id": 85885121, "body": "Do you want the type of <code>final_val</code> to be a string, or a reference to a string? You can&#39;t do both."}, {"owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "reply_to_user": {"reputation": 134258, "user_id": 785065, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qAbxM.jpg?s=128&g=1", "display_name": "loganfsmyth", "link": "https://stackoverflow.com/users/785065/loganfsmyth"}, "edited": false, "score": 0, "creation_date": 1521776477, "post_id": 49441484, "comment_id": 85885839, "body": "I would like it to be a string"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521815126, "post_id": 49441484, "comment_id": 85906237, "body": "In case the enum is <i>actually</i> an <code>&amp;Option&lt;String&gt;</code>, then check out <a href=\"https://stackoverflow.com/q/44163624/155423\">Why does Option&lt;String&gt;.as_ref() not deref to Option&lt;&amp;str&gt;?</a> and <a href=\"https://stackoverflow.com/q/31233938/155423\">Converting from Option&lt;String&gt; to Option&lt;&amp;str&gt;</a>. TL;DR: <code>ref_option.as_ref().map_or(&quot;not Set&quot;, String::as_str)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 5, "last_activity_date": 1521813151, "last_edit_date": 1521813151, "creation_date": 1521774907, "answer_id": 49441819, "question_id": 49441484, "link": "https://stackoverflow.com/questions/49441484/matching-on-an-enum-reference-and-returning-a-string-results-in-match-arms-have/49441819#49441819", "title": "Matching on an enum reference and returning a string results in &quot;match arms have incompatible types&quot;", "body": "<p>This does not work. On the first arm you return <code>&amp;String</code>, in the second arm you return <code>String</code>.</p>\n\n<p>It will work if you clone <code>x</code>, but it's unclear what you really want.</p>\n\n<pre><code>let final_val = match ref_option {\n    &amp;Some(ref x) =&gt; x.clone(),\n    _ =&gt; String::from(\"not Set\"),\n};\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=52381015096810d9a4628f1dabbd2396&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Edit: </p>\n\n<blockquote>\n  <p>I would like it to be a string</p>\n</blockquote>\n\n<p>Then the mentioned solution is the way to go. However, if you don't really need a <code>String</code>, you should go with <a href=\"https://stackoverflow.com/a/49446964/155423\">tafia's solution</a>:</p>\n\n<pre><code>let final_val = match *ref_option {\n    Some(ref x) =&gt; x,\n    _ =&gt; \"not Set\",\n};\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2042df2b009f8909ea5331af03e09793&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 1343, "user_id": 4365239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/88acc4986ddaf51e21c254fb8c0f11b8?s=128&d=identicon&r=PG&f=1", "display_name": "tafia", "link": "https://stackoverflow.com/users/4365239/tafia"}, "is_accepted": false, "score": 2, "last_activity_date": 1521812930, "last_edit_date": 1521812930, "creation_date": 1521799300, "answer_id": 49446964, "question_id": 49441484, "link": "https://stackoverflow.com/questions/49441484/matching-on-an-enum-reference-and-returning-a-string-results-in-match-arms-have/49446964#49446964", "title": "Matching on an enum reference and returning a string results in &quot;match arms have incompatible types&quot;", "body": "<p>There are 2 issues</p>\n\n<ol>\n<li><p>You must either match on <code>*ref_option</code> or have <code>&amp;Some(...)</code> and <code>&amp;None</code> in the branches. Matching on <code>*ref_option</code> is more idiomatic.</p></li>\n<li><p>Once matched, you use a <code>ref x</code> which is a reference to the <code>String</code> (equivalent to a <code>&amp;String</code>). So either you <code>clone</code> it, <a href=\"https://stackoverflow.com/a/49441819/155423\">as suggested by Tim</a> or you return a <code>&amp;String</code> (dereferenced to a <code>&amp;str</code>) in both branches.</p></li>\n</ol>\n\n<p>To conclude, you can:</p>\n\n<pre><code>let final_val = match *ref_option {\n    Some(ref x) =&gt; x,\n    _ =&gt; \"not Set\",\n};\n</code></pre>\n"}], "owner": {"reputation": 485, "user_id": 3738647, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/f5b08c58e77723f0faee4d1bd45f64bd?s=128&d=identicon&r=PG", "display_name": "ZNackasha", "link": "https://stackoverflow.com/users/3738647/znackasha"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 947, "favorite_count": 0, "accepted_answer_id": 49441819, "answer_count": 2, "score": -1, "last_activity_date": 1521813151, "creation_date": 1521772223, "last_edit_date": 1521812748, "question_id": 49441484, "link": "https://stackoverflow.com/questions/49441484/matching-on-an-enum-reference-and-returning-a-string-results-in-match-arms-have", "title": "Matching on an enum reference and returning a string results in &quot;match arms have incompatible types&quot;", "body": "<p>How do I <code>match</code> on an enum reference? I am using a dependency that returns a reference to an enum and I need to read the value the enum contains. In the following example, the thing I care about is assigning <code>final_val</code> with <code>x</code>:</p>\n\n<pre><code>fn main() {\n    let test_string = String::from(\"test\");\n    let option: std::option::Option&lt;String&gt; = Some(test_string);\n    let ref_option = &amp;option;\n\n    let final_val = match ref_option {\n        Some(x) =&gt; x,\n        _ =&gt; String::from(\"not Set\"),\n    };\n\n    println!(\"{:?}\", final_val);\n}\n</code></pre>\n\n<p>If I follow what the compiler suggests and add a <code>&amp;</code> to the type <code>Some</code> and <code>ref x</code>:</p>\n\n<pre><code>fn main() {\n    let test_string = String::from(\"test\");\n    let option: std::option::Option&lt;String&gt; = Some(test_string);\n    let ref_option = &amp;option;\n\n    let final_val = match ref_option {\n        &amp;Some(ref x) =&gt; x,\n        _ =&gt; String::from(\"not Set\"),\n    };\n\n    println!(\"{:?}\", final_val);\n}\n</code></pre>\n\n<p>I get the following error, which I don't know how to resolve:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; src\\main.rs:6:21\n   |\n6  |       let final_val = match ref_option\n   |  _____________________^\n7  | |     {\n8  | |         &amp;Some(ref x) =&gt; x,\n9  | |         _ =&gt; String::from(\"not Set\" ),\n   | |              ------------------------ match arm with an incompatible type\n\n10 | |     };\n   | |_____^ expected reference, found struct `std::string::String`\n   |\n   = note: expected type `&amp;std::string::String`\n              found type `std::string::String`\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1521768952, "post_id": 49440876, "comment_id": 85884090, "body": "Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. My guess is that you got some compiler error somewhere that would point you to a suitable existing Q&amp;A, but we can&#39;t see what the error would be. The lack of MCVE also means that we would have to retype all of your dependent code, potentially introducing   exciting new bugs."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521769012, "post_id": 49440876, "comment_id": 85884108, "body": "That being said, using my magical powers of deduction, I&#39;m going to guess it&#39;s a duplicate of one or more of <a href=\"https://stackoverflow.com/q/27335252/155423\">How can I call a mutating method while holding a reference to self?</a>, <a href=\"https://stackoverflow.com/q/30681468/155423\">Passing mutable self reference to method of owned object</a>, or <a href=\"https://stackoverflow.com/q/31093841/155423\">cannot borrow <code>self.x</code> as immutable because <code>*self</code> is also borrowed as mutable</a>. Please go ahead and either <a href=\"https://stackoverflow.com/posts/49440876/edit\">edit</a> your question to explain why it isn&#39;t answered by those questions or mark the question as a duplicate."}, {"owner": {"reputation": 13033, "user_id": 4029014, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/ndZhu.jpg?s=128&g=1", "display_name": "aghast", "link": "https://stackoverflow.com/users/4029014/aghast"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521771409, "post_id": 49440876, "comment_id": 85884653, "body": "I&#39;m learning Rust - I&#39;ve got compiler errors all over the place! But I followed those errors, and produced the code shown, which avoids the borrow by not using rust&#39;s iterators. My question was really about the design, and what design changes could produce a nicer result. (The fact that I didn&#39;t have an error probably hindered my search, since I didn&#39;t have the right keywords...)"}, {"owner": {"reputation": 19105, "user_id": 3005167, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/t0bMQ.png?s=128&g=1", "display_name": "kazemakase", "link": "https://stackoverflow.com/users/3005167/kazemakase"}, "edited": false, "score": 0, "creation_date": 1521795643, "post_id": 49440876, "comment_id": 85893155, "body": "Rust is protecting your future self from shooting itself in the foot. Imagine iterating over <code>.tick(&amp;mut player)</code> worked now. What if in the future you decided to add a timed effect that upon <code>.deactivate()</code> removes all other timed effects from the player? You would end up with an invalidated iterator. The design rust forced you to adopt does not have that problem."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1521800179, "creation_date": 1521800179, "answer_id": 49447297, "question_id": 49440876, "link": "https://stackoverflow.com/questions/49440876/how-to-i-deal-with-mutually-dependent-rust-borrows/49447297#49447297", "title": "How to I deal with mutually dependent Rust borrows?", "body": "<p>To avoid the borrowing issue, you can do it in two steps:</p>\n\n<ol>\n<li>Transfer the effects which are done from <code>timed_effects</code> to a buffer,</li>\n<li>Iterate over the buffer and invoke <code>deactivate</code>.</li>\n</ol>\n\n<p>I'm going to use nightly's  <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain_filter\" rel=\"nofollow noreferrer\"><code>Vec::drain_filter</code></a> for slicker code, although it's certainly not mandatory.</p>\n\n<pre><code>fn regenerate(&amp;mut self) {\n    self.timed_effects.iter_mut().for_each(|te| te.tick());\n\n    let timed_out: Vec&lt;_&gt; =\n        self.timed_effects\n            .drain_filter(|t| t.ticks_remaining() == 0)\n            .collect();\n\n    //  Split iteration in a second step to stop borrowing self.\n    for timer in timed_out {\n        timer.deactivate(self);\n    }\n}\n</code></pre>\n\n<p>For further efficiency, you can pass a reusable buffer to <code>regenerate</code> (to avoid allocations).</p>\n"}], "owner": {"reputation": 13033, "user_id": 4029014, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/ndZhu.jpg?s=128&g=1", "display_name": "aghast", "link": "https://stackoverflow.com/users/4029014/aghast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 49447297, "answer_count": 1, "score": -3, "last_activity_date": 1521800179, "creation_date": 1521767298, "last_edit_date": 1521768671, "question_id": 49440876, "link": "https://stackoverflow.com/questions/49440876/how-to-i-deal-with-mutually-dependent-rust-borrows", "title": "How to I deal with mutually dependent Rust borrows?", "body": "<p>I am writing a Rogue-like in Rust. I have a <code>Player</code> which has a <code>Vec</code> of boxed <code>TimedEffects</code>. A timed effect has an <code>activate(&amp;mut Player)</code> and <code>deactivate(&amp;mut Player)</code> method, and a <code>tick()</code> method that decrements the time remaining. When it goes to zero, the <code>deactivate()</code> method should be called.</p>\n\n<pre><code>pub struct Player {\n    timed_effects: Vec&lt;Box&lt;TimedEffect&gt;&gt;,\n}\n</code></pre>\n\n<p>Each time the player moves, I need to decrement the time remaining. This is done inside a <code>Player</code> method:</p>\n\n<pre><code>impl Player {\n    fn regenerate(&amp;mut self) {\n        self.timed_effects.iter_mut().for_each(|te| te.tick());\n\n        for i in 0..self.timed_effects.len() {\n            if self.timed_effects[i].ticks_remaining() == 0 {\n                let bte = self.timed_effects.swap_remove(i);\n                bte.deactivate(self);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>I originally tried passing the <code>self</code> parameter (<code>&amp;mut Player</code>) to the <code>tick()</code> method of the <code>TimedEffect</code> objects, with logic to invoke <code>deactivate(player)</code> automatically when the time went to zero.</p>\n\n<p>Iterating over the vector constitutes a borrow of (<code>Player</code>) <code>self</code>, which is incompatible with passing the <code>&amp;mut Player</code> parameter to <code>tick()</code>, or even to a separate iteration with <code>.filter</code>.</p>\n\n<p>Instead, as shown, I find myself iterating over a range of integers, extracting the box from the vector into a local variable, and then invoking <code>.deactivate(self)</code> on it.</p>\n\n<p>This is painful.</p>\n\n<p>Given the effects need to have some connection with their victim so the <code>deactivate()</code> method can undo the effect, how should I be architecting these objects so that I don't wind up tangled in this web of dependent borrows?</p>\n"}, {"tags": ["vector", "rust"], "answers": [{"comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1521746458, "post_id": 49436716, "comment_id": 85875511, "body": "Technically, the single-argument version of <code>panic!</code> takes anything that is <code>Any + Send</code>. Of course, <code>Any</code> implies <code>&#39;static</code>. Which means it implies <code>&amp;str: &#39;static</code>, thus leading to the compiler&#39;s confusing lifetime deduction error."}, {"owner": {"reputation": 253, "user_id": 2147872, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/850bca1b9e07630687776cff28e8782b?s=128&d=identicon&r=PG", "display_name": "Bram Geron", "link": "https://stackoverflow.com/users/2147872/bram-geron"}, "edited": false, "score": 0, "creation_date": 1521746491, "post_id": 49436716, "comment_id": 85875528, "body": "<code>panic!</code> also takes arbitrary values (not just strings), but the value must be valid forever (because may be shown to the user after all the functions have finished). What <code>panic!(&quot;{}&quot;, splitLn[0])</code> does is it copies <code>splitLn[0]</code> into a fresh <code>String</code> that can be passed around. Remember the <code>ln: &amp;str</code> argument isn&#39;t actually a string, it just points to a string that may disappear sometime after the function finishes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 1, "creation_date": 1521746504, "post_id": 49436716, "comment_id": 85875534, "body": "@SebastianRedl I didn&#39;t really want to get into those details because this is likely going to be a problem that people new to Rust will experience, but now I suppose I need to muddle it up."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1521761097, "last_edit_date": 1521761097, "creation_date": 1521746104, "answer_id": 49436716, "question_id": 49436609, "link": "https://stackoverflow.com/questions/49436609/parameter-not-living-long-enough-when-passing-a-string-to-panic/49436716#49436716", "title": "Parameter not living long enough when passing a string to `panic!`", "body": "<p><code>panic!</code> takes a string literal as its first argument<sup>1</sup>. A string literal is a <code>&amp;'static str</code>, but your string slices are not <code>'static</code>.</p>\n\n<p>Instead, pass the string as a formatter argument:</p>\n\n<pre><code>panic!(\"{}\", split_ln[0]),\n</code></pre>\n\n<p>It's also worth pointing out:</p>\n\n<ol>\n<li>Variables and functions in Rust use <code>snake_case</code>.</li>\n<li>There's no reason to collect the result of <code>split_whitespace</code> into a vector unless you plan on iterating over it twice (and maybe not even then).</li>\n<li>Don't loop over an iterator to push into a <code>Vec</code>, you can just <code>map</code> and <code>collect</code>.</li>\n<li>There's no need to use <code>return</code>, just let the last expression be the value.</li>\n</ol>\n\n\n\n<pre><code>pub fn compile_line(ln: &amp;str) -&gt; std::vec::Vec&lt;u8&gt; {\n    ln.split_whitespace()\n        .map(|p| match p {\n            \"exit\" =&gt; 0,\n            \"reg\" =&gt; 0x1,\n            \"rem\" =&gt; 0x2,\n            \"set\" =&gt; 0x3,\n            \"sum\" =&gt; 0x4,\n            \"jmp\" =&gt; 0x5,\n            _ =&gt; panic!(\"Unknown mnemonic {}\", p),\n        })\n        .collect()\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27734708/155423\">println! error: expected a literal / format argument must be a string literal</a></li>\n</ul>\n\n<hr>\n\n<p><sup>1</sup> This is a dirty lie that I've used because it's easier to understand. If you look at the definition of <a href=\"https://github.com/rust-lang/rust/blob/1.24.1/src/libstd/macros.rs#L64-L78\" rel=\"nofollow noreferrer\"><code>panic!</code></a>, you'll see that this invocation is actually calling the hidden / internal function <a href=\"https://github.com/rust-lang/rust/blob/1.24.1/src/libstd/panicking.rs#L530\" rel=\"nofollow noreferrer\"><code>::rt::begin_panic</code></a>:</p>\n\n<pre><code>pub fn begin_panic&lt;M: Any + Send&gt;(msg: M, file_line_col: &amp;(&amp;'static str, u32, u32)) -&gt; ! { /* ... */ }\n</code></pre>\n\n<p>Thus the first argument to <code>panic!</code> can actually be anything that implements the <a href=\"https://doc.rust-lang.org/std/any/trait.Any.html\" rel=\"nofollow noreferrer\"><code>Any</code></a> trait. The <code>Any</code> trait requires that any type that implements it must be <code>'static</code>:</p>\n\n<pre><code>pub trait Any: 'static { /* ... */ }\n</code></pre>\n\n<p>At this point, the same logic applies: you are passing a <code>&amp;str</code> and an arbitrary <code>&amp;str</code> does not meet the trait bound <code>'static</code>.</p>\n"}], "owner": {"reputation": 65, "user_id": 8657749, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/127f9dc2c65e37378af2d035ae80b155?s=128&d=identicon&r=PG", "display_name": "Teytix", "link": "https://stackoverflow.com/users/8657749/teytix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 144, "favorite_count": 0, "accepted_answer_id": 49436716, "answer_count": 1, "score": 3, "last_activity_date": 1521761097, "creation_date": 1521745717, "last_edit_date": 1521747063, "question_id": 49436609, "link": "https://stackoverflow.com/questions/49436609/parameter-not-living-long-enough-when-passing-a-string-to-panic", "title": "Parameter not living long enough when passing a string to `panic!`", "body": "<p>The parameter <code>ln</code> doesn't live long enough, and I couldn't seem to find a reason why it does. I tried to make it and the value I was giving it as input static, but that just caused other problems.</p>\n\n<pre><code>pub fn CompileLine(ln: &amp;str) -&gt; std::vec::Vec&lt;u8&gt; {\n    let mut out = std::vec::Vec::new();\n    let splitLn: Vec&lt;&amp;str&gt; = ln.split_whitespace().collect();\n    match splitLn[0] {\n        \"exit\" =&gt; out.push(0),\n        \"reg\" =&gt; out.push(0x1),\n        \"rem\" =&gt; out.push(0x2),\n        \"set\" =&gt; out.push(0x3),\n        \"sum\" =&gt; out.push(0x4),\n        \"jmp\" =&gt; out.push(0x5),\n        _ =&gt; panic!(splitLn[0]),\n    }\n    return out;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n --&gt; src/main.rs:3:33\n  |\n3 |     let splitLn: Vec&lt;&amp;str&gt; = ln.split_whitespace().collect();\n  |                                 ^^^^^^^^^^^^^^^^\n  |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 1:1...\n --&gt; src/main.rs:1:1\n  |\n1 | / pub fn CompileLine(ln: &amp;str) -&gt; std::vec::Vec&lt;u8&gt; {\n2 | |     let mut out = std::vec::Vec::new();\n3 | |     let splitLn: Vec&lt;&amp;str&gt; = ln.split_whitespace().collect();\n4 | |     match splitLn[0] {\n... |\n13| |     return out;\n14| | }\n  | |_^\nnote: ...so that reference does not outlive borrowed content\n --&gt; src/main.rs:3:30\n  |\n3 |     let splitLn: Vec&lt;&amp;str&gt; = ln.split_whitespace().collect();\n  |                              ^^\n  = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `&amp;str` will meet its required lifetime bounds\n --&gt; src/main.rs:11:14\n  |\n11|         _ =&gt; panic!(splitLn[0]),\n  |              ^^^^^^^^^^^^^^^^^^\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 911, "user_id": 2788450, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/Cw1q0.jpg?s=128&g=1", "display_name": "Jonas Greitemann", "link": "https://stackoverflow.com/users/2788450/jonas-greitemann"}, "edited": false, "score": 0, "creation_date": 1521754894, "post_id": 49437105, "comment_id": 85879805, "body": "Well, at least then my understanding is correct and I can always remove those redundant trait bounds once the RFC is fully implemented. It seems like a major flaw though, but at least the RFC has been accepted recently, so I&#39;m hopeful it will gain some traction."}], "tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 3, "last_activity_date": 1521747527, "creation_date": 1521747527, "answer_id": 49437105, "question_id": 49434716, "link": "https://stackoverflow.com/questions/49434716/why-is-it-necessary-to-add-redundant-trait-bounds-even-though-my-trait-uses-thos/49437105#49437105", "title": "Why is it necessary to add redundant trait bounds even though my trait uses those same traits as bounds?", "body": "<p>You've hit a shortcoming of the Rust compiler as it currently is. <a href=\"https://github.com/rust-lang/rfcs/pull/2089\" rel=\"nofollow noreferrer\">RFC 2089</a> proposed to make it work as you expect, and was accepted in December 2017.</p>\n\n<p>However, as of today, the feature isn't implemented. The <a href=\"https://github.com/rust-lang/rust/issues/44491\" rel=\"nofollow noreferrer\">tracking issue for the implementation</a> hasn't seen much activity yet, so it appears implementation hasn't even started. It appears that some fundamental improvements to the compiler's trait bound handling are necessary before this particular feature can be efficiently implemented (search keyword: chalk).</p>\n"}], "owner": {"reputation": 911, "user_id": 2788450, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/Cw1q0.jpg?s=128&g=1", "display_name": "Jonas Greitemann", "link": "https://stackoverflow.com/users/2788450/jonas-greitemann"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 0, "accepted_answer_id": 49437105, "answer_count": 1, "score": 2, "last_activity_date": 1521747527, "creation_date": 1521739003, "last_edit_date": 1521744275, "question_id": 49434716, "link": "https://stackoverflow.com/questions/49434716/why-is-it-necessary-to-add-redundant-trait-bounds-even-though-my-trait-uses-thos", "title": "Why is it necessary to add redundant trait bounds even though my trait uses those same traits as bounds?", "body": "<p>I have been trying to code a trait which requires a type to implement <code>Add</code> (and further down the line other operations for vector spaces) with itself as well as among its references. The following is a small example, illustrating the problem I ran into:</p>\n\n<pre><code>use std::ops::Add;\n\n#[derive(Debug)]\nstruct MyVec&lt;T&gt;(Vec&lt;T&gt;);\n\nimpl&lt;'a, 'b, T: Copy + Add&gt; Add&lt;&amp;'a MyVec&lt;T&gt;&gt; for &amp;'b MyVec&lt;T&gt; {\n    type Output = MyVec&lt;T::Output&gt;;\n    fn add(self, other: &amp;'a MyVec&lt;T&gt;) -&gt; Self::Output {\n        /* ... */\n    }\n}\nimpl&lt;'a, T: Copy + Add&gt; Add&lt;MyVec&lt;T&gt;&gt; for &amp;'a MyVec&lt;T&gt; {\n    /* ... */\n}\nimpl&lt;'a, T: Copy + Add&gt; Add&lt;&amp;'a MyVec&lt;T&gt;&gt; for MyVec&lt;T&gt; {\n    /* ... */\n}\nimpl&lt;T: Copy + Add&gt; Add&lt;MyVec&lt;T&gt;&gt; for MyVec&lt;T&gt; {\n    /* ... */\n}\n\ntrait Addable: Add&lt;Self, Output = Self&gt;\nwhere\n    Self: Sized,\n    for&lt;'a&gt; &amp;'a Self: Add&lt;Self, Output = Self&gt;,\n    for&lt;'b&gt; Self: Add&lt;&amp;'b Self, Output = Self&gt;,\n    for&lt;'a, 'b&gt; &amp;'a Self: Add&lt;&amp;'b Self, Output = Self&gt;,\n{\n}\n\nimpl&lt;T: Copy + Add&lt;Output = T&gt;&gt; Addable for MyVec&lt;T&gt; {}\n\nfn add_stuff&lt;'a, 'b, T: Addable&gt;(x: &amp;'a T, y: &amp;'b T) -&gt; T {\n    x + y\n}\n\nfn main() {\n    let v = MyVec(vec![1, 2, 3]);\n    let w = MyVec(vec![2, 4, 6]);\n    println!(\"{:?}\", add_stuff(&amp;v, &amp;w));\n}\n</code></pre>\n\n<ul>\n<li>I use the <code>newtype</code> pattern to create an alias of <code>Vec</code> so I can implement a foreign trait (<code>Add</code>) on a foreign struct (<code>Vec</code>).</li>\n<li>I implement <code>Add</code> for <code>MyVec</code> and its references. The associated type <code>Output</code> is always the (unreferenced) <code>MyVec</code>. The latter three <code>impl</code>s are implemented in terms of the first.</li>\n<li><code>Addable</code> is the central trait that I want to demo. Things that are addable should allow themselves and their references to be added with the result being <code>Self</code>. Particularly, in <code>add_stuff</code> I want the expression <code>x + y + x</code> to be valid where <code>x + y</code> gives a non-ref which can be added with <code>x</code> (which has not been moved out of, because it's a ref) to produce another non-ref.</li>\n<li>I don't get any complaints from the compiler regarding the implementation of the <code>Addable</code> trait on <code>MyVec</code>. Specifically, the compiler seems to recognize that the above <code>impl</code>s satisfy the bounds in the <code>where</code> clause.</li>\n</ul>\n\n<p>However, I get the following compiler errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'a&gt; &amp;'a T: std::ops::Add&lt;T&gt;` is not satisfied\n  --&gt; src/main.rs:33:1\n   |\n33 | / fn add_stuff&lt;'a, 'b, T: Addable&gt;(x: &amp;'a T, y: &amp;'b T) -&gt; T {\n34 | |     x + y\n35 | | }\n   | |_^ no implementation for `&amp;'a T + T`\n   |\n   = help: the trait `for&lt;'a&gt; std::ops::Add&lt;T&gt;` is not implemented for `&amp;'a T`\n   = help: consider adding a `where for&lt;'a&gt; &amp;'a T: std::ops::Add&lt;T&gt;` bound\n   = note: required by `Addable`\n\nerror[E0277]: the trait bound `for&lt;'a, 'b&gt; &amp;'a T: std::ops::Add&lt;&amp;'b T&gt;` is not satisfied\n  --&gt; src/main.rs:33:1\n   |\n33 | / fn add_stuff&lt;'a, 'b, T: Addable&gt;(x: &amp;'a T, y: &amp;'b T) -&gt; T {\n34 | |     x + y\n35 | | }\n   | |_^ no implementation for `&amp;'a T + &amp;'b T`\n   |\n   = help: the trait `for&lt;'a, 'b&gt; std::ops::Add&lt;&amp;'b T&gt;` is not implemented for `&amp;'a T`\n   = help: consider adding a `where for&lt;'a, 'b&gt; &amp;'a T: std::ops::Add&lt;&amp;'b T&gt;` bound\n   = note: required by `Addable`\n</code></pre>\n\n<p>This can be fixed by amending the <code>add_stuff</code> function with a <code>where</code> clause as suggested by the compiler:</p>\n\n<pre><code>where\n    for&lt;'c, 'd&gt; &amp;'c T: Add&lt;&amp;'d T, Output = T&gt;,\n    for&lt;'c&gt; &amp;'c T: Add&lt;T, Output = T&gt;,\n</code></pre>\n\n<p>I do not understand why this is necessary. I thought by specifying a bound in the definition of the trait I could rely on that bound being met for any type that implements that trait? Having to add these <code>where</code> clauses every time sort of defies the whole point of my <code>Addable</code> trait.</p>\n\n<p>Googling brought up <a href=\"https://github.com/rust-lang/rust/issues/20671\" rel=\"nofollow noreferrer\">this GitHub issue</a> which I don't understand fully but which might be related? That would suggest this is indeed a bug in Rust (which hasn't been fixed for a very long time).</p>\n"}, {"tags": ["multidimensional-array", "rust", "rust-crates"], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 2, "last_activity_date": 1521809552, "last_edit_date": 1521809552, "creation_date": 1521730155, "answer_id": 49431668, "question_id": 49431134, "link": "https://stackoverflow.com/questions/49431134/how-to-do-a-subtraction-between-ndarrayarray1f64-and-mut-array1f64/49431668#49431668", "title": "How to do a subtraction between &amp;ndarray::Array1&lt;f64&gt; and &amp;mut Array1&lt;f64&gt;?", "body": "<p>The <a href=\"https://docs.rs/ndarray/0.11.2/ndarray/struct.ArrayBase.html#impl-Sub%3C%26%27a%20ArrayBase%3CS2%2C%20E%3E%3E-1\" rel=\"nofollow noreferrer\"><code>Sub</code> trait in <code>ndarray::ArrayBase</code></a> is not implemented for <code>&amp;mut</code> arguments (it is for immutable references to other arrays). It is not needed because the right-handed value should not be modified. The second operand is a <code>&amp;mut Array&lt;A, D&gt;</code>, and it ends up being one of the cases where type weakening into an immutable reference does not happen automatically. Still, you can explicitly reborrow the value:</p>\n\n<pre><code>let a: &amp;Array1&lt;f64&gt; = &amp;array![3.0, 2.0, 1.0]; \nlet b: &amp;mut Array1&lt;f64&gt; = &amp;mut array![1.0, 1.0, 1.0]; \nlet c = a - &amp;b.view();\nlet d = a - &amp;*b;\n</code></pre>\n\n<p>This assumes that <code>a</code> and <code>b</code> were obtained elsewhere. In fact, you can make these variables own the arrays instead:</p>\n\n<pre><code>let a: Array1&lt;f64&gt; = array![3.0, 2.0, 1.0]; \nlet mut b: Array1&lt;f64&gt; = array![1.0, 1.0, 1.0]; \nlet c = &amp;a - &amp;b.view();\nlet d = &amp;a - &amp;b;\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521814127, "post_id": 49451500, "comment_id": 85905464, "body": "May I ask how you copied your error messages? They lost whitespace before the <code>|</code> (they should all be lined up). I&#39;ve seen this a bunch, but don&#39;t know what causes it."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1521814354, "post_id": 49451500, "comment_id": 85905612, "body": "I copied output from terminal into visual studio code, I selected all and added a tab (4 spaces) to the selected text."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1521814439, "last_edit_date": 1521814439, "creation_date": 1521813995, "answer_id": 49451500, "question_id": 49431134, "link": "https://stackoverflow.com/questions/49431134/how-to-do-a-subtraction-between-ndarrayarray1f64-and-mut-array1f64/49451500#49451500", "title": "How to do a subtraction between &amp;ndarray::Array1&lt;f64&gt; and &amp;mut Array1&lt;f64&gt;?", "body": "<p>The full error message is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `f64: std::ops::Sub&lt;&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;&gt;` is not satisfied\n  --&gt; src/main.rs:10:15\n   |\n10 |     let d = a - b;\n   |               ^ no implementation for `f64 - &amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;`\n   |\n   = help: the trait `std::ops::Sub&lt;&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;&gt;` is not implemented for `f64`\n   = note: required because of the requirements on the impl of `std::ops::Sub&lt;&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;&gt;` for `&amp;ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;`\n\nerror[E0277]: the trait bound `&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;: ndarray::ScalarOperand` is not satisfied\n  --&gt; src/main.rs:10:15\n   |\n10 |     let d = a - b;\n   |               ^ the trait `ndarray::ScalarOperand` is not implemented for `&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;`\n   |\n   = note: required because of the requirements on the impl of `std::ops::Sub&lt;&amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;&gt;` for `&amp;ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;`\n</code></pre>\n\n<p>The first error message is quite obscure for me but the second is more enlightening:</p>\n\n<blockquote>\n  <p>the trait <code>ndarray::ScalarOperand</code> is not implemented for `&amp;mut ndarray::ArrayBase</p>\n</blockquote>\n\n<p>The reason of this error is that Rust does not perform coercions when matching traits: If there is an impl for some type <code>U</code> and <code>T</code> coerces to <code>U</code>, that does not constitute an implementation for <code>T</code> (copied directly from <a href=\"https://doc.rust-lang.org/beta/nomicon/coercions.html\" rel=\"nofollow noreferrer\">the Nomicon</a>)</p>\n\n<p>Without entering into ndarray internals, this is a minimal example reproducing the same problem:</p>\n\n<pre><code>trait MyShape {}\n\nfn foo&lt;T: MyShape&gt;(x: T) -&gt; T {\n    x\n}\n\nimpl&lt;'a&gt; MyShape for &amp;'a i32 {}\n\nfn main() {\n    let mut num = 1;\n    let arg: &amp;mut i32 = &amp;mut num;\n    foo(arg);\n}\n</code></pre>\n\n<p>Result:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;mut i32: MyShape` is not satisfied\n  --&gt; src/main.rs:12:5\n   |\n12 |     foo(arg);\n   |     ^^^ the trait `MyShape` is not implemented for `&amp;mut i32`\n   |\n   = help: the following implementations were found:\n             &lt;&amp;'a i32 as MyShape&gt;\n   = note: required by `foo`\n</code></pre>\n"}], "owner": {"reputation": 193, "user_id": 5177296, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/74d8a88f1671531b2a6f2ff4218764d4?s=128&d=identicon&r=PG&f=1", "display_name": "asdetrefle", "link": "https://stackoverflow.com/users/5177296/asdetrefle"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 412, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1521814439, "creation_date": 1521728614, "last_edit_date": 1521814310, "question_id": 49431134, "link": "https://stackoverflow.com/questions/49431134/how-to-do-a-subtraction-between-ndarrayarray1f64-and-mut-array1f64", "title": "How to do a subtraction between &amp;ndarray::Array1&lt;f64&gt; and &amp;mut Array1&lt;f64&gt;?", "body": "<p>I find it impossible to do a subtraction between an immutable array reference and a mutable one using the <a href=\"https://crates.io/crates/ndarray\" rel=\"nofollow noreferrer\">ndarray crate</a>:</p>\n\n<pre><code>#[macro_use]\nextern crate ndarray;\n\nuse ndarray::Array1;\n\nfn main() {\n    let a: &amp;Array1&lt;f64&gt; = &amp;array![3.0, 2.0, 1.0];\n    let b: &amp;mut Array1&lt;f64&gt; = &amp;mut array![1.0, 1.0, 1.0];\n    let c = a - &amp;b.view();          //   This compiles\n    let d = a - b;                  //   This fails to compile\n}\n</code></pre>\n\n<p>The error message I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>let d = a - b;\n          ^ no implementation for `f64 - &amp;mut ndarray::ArrayBase&lt;ndarray::OwnedRepr&lt;f64&gt;, ndarray::Dim&lt;[usize; 1]&gt;&gt;`\n</code></pre>\n\n<p>I don't understand what these two types mean, but is there any special reason why this is not implemented? </p>\n"}, {"tags": ["openssl", "rust", "rsa"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1521727770, "post_id": 49430631, "comment_id": 85863264, "body": "Have you read the documentation of <code>openssl</code>? <a href=\"https://docs.rs/openssl/0.10.5/openssl/rsa/struct.Rsa.html\" rel=\"nofollow noreferrer\"><code>openssl::rsa::Rsa</code></a> contains a parameter type T, which must be either <code>Public</code> or <code>Private</code>."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1094865"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1521728288, "post_id": 49430631, "comment_id": 85863661, "body": "@E_net4 yep that did it, who know documentation could be so helpful \ud83e\udd37\u200d\u2640\ufe0f"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 1, "last_activity_date": 1521728599, "creation_date": 1521728599, "answer_id": 49431128, "question_id": 49430631, "link": "https://stackoverflow.com/questions/49430631/wrong-number-of-type-arguments-when-passing-opensslrsarsa-as-a-parameter/49431128#49431128", "title": "Wrong number of type arguments when passing openssl::rsa::Rsa as a parameter", "body": "<p><a href=\"https://docs.rs/openssl/0.10.5/openssl/rsa/struct.Rsa.html\" rel=\"nofollow noreferrer\"><code>openssl::rsa::Rsa</code></a> expects a parameter type <code>T</code>, which should be either <a href=\"https://docs.rs/openssl/0.10.5/openssl/pkey/enum.Public.html\" rel=\"nofollow noreferrer\"><code>Public</code></a> or <a href=\"https://docs.rs/openssl/0.10.5/openssl/pkey/enum.Private.html\" rel=\"nofollow noreferrer\"><code>Private</code></a>. In turn, these types are markers for identifying the kind of key.</p>\n\n<p>As the static method <a href=\"https://docs.rs/openssl/0.10.5/openssl/rsa/struct.Rsa.html#method.generate\" rel=\"nofollow noreferrer\"><code>Rsa::generate</code></a> yields a private key, you may want the following signature:</p>\n\n<pre><code>use openssl::pkey::Private;\n\nfn async_encrypt(rsa: &amp;Rsa&lt;Private&gt;, plain: &amp;str) -&gt; String {\n    // ...\n}\n</code></pre>\n\n<p>In the event that the function is supposed to work for both public and private keys, you can make it generic over <code>T</code>:</p>\n\n<pre><code>fn async_encrypt&lt;T&gt;(rsa: &amp;Rsa&lt;T&gt;, plain: &amp;str) -&gt; String {\n    // ...\n}\n</code></pre>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user1094865"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 0, "accepted_answer_id": 49431128, "answer_count": 1, "score": 0, "last_activity_date": 1521728599, "creation_date": 1521727228, "last_edit_date": 1521728486, "question_id": 49430631, "link": "https://stackoverflow.com/questions/49430631/wrong-number-of-type-arguments-when-passing-opensslrsarsa-as-a-parameter", "title": "Wrong number of type arguments when passing openssl::rsa::Rsa as a parameter", "body": "<p>I'm getting the following error when I try to pass a parameter to a function.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0243]: wrong number of type arguments: expected 1, found 0\n  --&gt; src/main.rs:42:24\n   |\n42 | fn async_encrypt(rsa: &amp;Rsa, plain: &amp;str) -&gt; String {\n   |                        ^^^ expected 1 type argument\n</code></pre>\n\n<p>I believe it's because I'm defining a type but I don't know what type <code>openssl::rsa::Rsa</code> is other than itself.</p>\n\n<pre><code>extern crate openssl;\nuse openssl::rsa::Rsa;\n\nfn main() {\n    let plain = String::from(\"Well hello\");\n    let rsa = Rsa::generate(4096).unwrap();\n    let cipher = async_encrypt(&amp;rsa, &amp;plain);\n}\n\nfn async_encrypt(rsa: &amp;Rsa, plain: &amp;str) -&gt; String {\n    //  Do some stuff\n}\n</code></pre>\n\n<p>What is going on here?</p>\n"}]