[{"tags": ["arrays", "vector", "iterator", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433369256, "post_id": 30630810, "comment_id": 49328800, "body": "As I understand it, you are also asking about <i>generators</i> - specifically revolving around the <code>yield</code> keyword. Rust doesn&#39;t quite have those, but you should be able to do all the same things with an <code>Iterator</code>. It may be a bit more complicated to type out when implementing the iterator, though."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433380398, "post_id": 30630810, "comment_id": 49332264, "body": "@Shepmaster Yes, generators! That&#39;s the computer science word I was looking for. This is secondary, but I understand how the <code>Iterator</code> would help cover that."}], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433366888, "post_id": 30630892, "comment_id": 49327722, "body": "I was mostly aiming for iterating things like Vec or LinkedList generically, not iterating a custom struct."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433366905, "post_id": 30630892, "comment_id": 49327731, "body": "&quot;It is not possible to create an iterator that works with any container.&quot; \u2192 Just implement it for <code>IntoIterator</code>."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433366987, "post_id": 30630892, "comment_id": 49327761, "body": "@Veedrac Can you explain IntoIterator at all? There&#39;s so many traits!"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 0, "last_activity_date": 1433366134, "creation_date": 1433366134, "answer_id": 30630892, "question_id": 30630810, "link": "https://stackoverflow.com/questions/30630810/using-generic-iterators-instead-of-specific-list-types/30630892#30630892", "title": "Using generic iterators instead of specific list types", "body": "<p>Implement the Iterator trait for the struct that should serve as iterator. You only need to implement the <code>next</code> method. The other methods have default implementations.</p>\n\n<p>It is not possible to create an iterator that works with any container. The type system machinery needed for this doesn't exist yet.</p>\n"}, {"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433383816, "post_id": 30631540, "comment_id": 49333032, "body": "I&#39;m failing to wrap my brain around this I think. I don&#39;t understand how the <code>Iterator</code> and <code>IntoIter</code> traits can exist, but not be a valid input or return type -- I would expect at least a Box or Borrow of them to work (because the size is not known). I would really love an example of this where code isn&#39;t used or modified from the std lib. Could you perhaps show an example of returning a <code>my_vec.map(...)</code> operation without first collecting it into a Vec? Is that possible?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433384449, "post_id": 30631540, "comment_id": 49333158, "body": "I tried setting up something to use <code>&amp;Iterator&lt;Item=i32&gt;</code> as an argument and got close, but still borrow errors. <a href=\"http://is.gd/00LPZ6\" rel=\"nofollow noreferrer\">is.gd/00LPZ6</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 1, "creation_date": 1433398898, "post_id": 30631540, "comment_id": 49337593, "body": "@jocull: <code>next()</code> takes <code>&amp;mut self</code>, so the iterator need be mutable; why don&#39;t you take it by value like in the example provided by Veedrac?"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 3, "last_activity_date": 1433368751, "creation_date": 1433368751, "answer_id": 30631540, "question_id": 30630810, "link": "https://stackoverflow.com/questions/30630810/using-generic-iterators-instead-of-specific-list-types/30631540#30631540", "title": "Using generic iterators instead of specific list types", "body": "<p><a href=\"https://doc.rust-lang.org/src/core/iter.rs.html#1613-1660\" rel=\"nofollow\">Here is the full version of <code>Map</code></a>, and <a href=\"https://doc.rust-lang.org/src/core/iter.rs.html#216-234\" rel=\"nofollow\">here is the function that builds it.</a></p>\n\n<p>A <em>minimal</em> implementation would look something like</p>\n\n<pre><code>fn map&lt;I, E, B, F&gt;(i: I, f: F) -&gt; Map&lt;I, F&gt; where\n    F: FnMut(E) -&gt; B,\n    I: Iterator&lt;Item=E&gt;\n{\n    Map {iter: i, f: f}\n}\n\npub struct Map&lt;I, F&gt; {\n    iter: I,\n    f: F,\n}\n\nimpl&lt;B, I: Iterator, F&gt; Iterator for Map&lt;I, F&gt; where F: FnMut(I::Item) -&gt; B {\n    type Item = B;\n\n    fn next(&amp;mut self) -&gt; Option&lt;B&gt; {\n        self.iter.next().map(|a| (self.f)(a))\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/fCct8R\" rel=\"nofollow\">Playpen link.</a> Note that the <code>map</code> used inside the iterator is the method on <code>Option</code>; this isn't recursively defined!</p>\n\n<p>It's not too convenient to write, but boy is it fast!</p>\n\n<hr>\n\n<p>Now, to write this for an arbitrary \"enumerable\" type one would change <code>map</code> to</p>\n\n<pre><code>fn map&lt;I, E, B, F&gt;(i: I, f: F) -&gt; Map&lt;I::IntoIter, F&gt; where\n    F: FnMut(E) -&gt; B,\n    I: IntoIterator&lt;Item=E&gt;\n{\n    Map {iter: i.into_iter(), f: f}\n}\n</code></pre>\n\n<p><code>IntoIterator</code> is basically <code>IEnumerable</code>, only instead of <code>GetEnumerator</code> there's <code>into_iter</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433427192, "post_id": 30641982, "comment_id": 49356177, "body": "This is really great information and examples! Thanks so much! I have a problem with the last example, though: <a href=\"http://is.gd/MKImuQ\" rel=\"nofollow noreferrer\">is.gd/MKImuQ</a> <code>IntoIter</code> doesn&#39;t seem to be accessible or used like this. Can you show how to fix it? The examples consuming iterators are perfect!"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433427564, "post_id": 30641982, "comment_id": 49356466, "body": "@jocull, oh, sorry, that should be <code>IntoIterator</code>, of course. I&#39;ve updated the example and also fixed a lifetimes issue there. It works now: <a href=\"http://is.gd/7AZVst\" rel=\"nofollow noreferrer\">is.gd/7AZVst</a>"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433427772, "post_id": 30641982, "comment_id": 49356607, "body": "Thank you! I see that the example also changed to include lifetimes (I was running into that issue). Could you explain what the lifetime is doing here? It feels like it has something to do with moving the memory into the <code>Box</code>, but the whole memory model is a really new concept for me."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433427834, "post_id": 30641982, "comment_id": 49356656, "body": "@jocull, you&#39;re right about boxes, I&#39;ve already added an explanation)"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433429226, "post_id": 30641982, "comment_id": 49357793, "body": "Thanks! There&#39;s still so much to learn (lifetimes and boxes are fuzzy). For example, I&#39;m not sure how to borrow a boxed iterator iterate over it multiple times. Perhaps it&#39;s just best practice to always push new collections into a vector? <a href=\"http://is.gd/WNZiyA\" rel=\"nofollow noreferrer\">is.gd/WNZiyA</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 1, "creation_date": 1433430162, "post_id": 30641982, "comment_id": 49358537, "body": "@jocull, boxing iterators do not have anything to do with multiple iterations. <i>Any</i> iterator can only be iterated through once. Remember, iterators are one-way cursors, once they reach the end, they become useless. If you want to iterate over something multiple times, you <i>have</i> to store it in some &quot;stable&quot; form, like a collection."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433430327, "post_id": 30641982, "comment_id": 49358666, "body": "Perfect, that&#39;s exactly the explanation I needed. That would likely explain why @Veedrac&#39;s commented example ( <a href=\"http://is.gd/lBZCVO\" rel=\"nofollow noreferrer\">is.gd/lBZCVO</a> ) shows the iterators being cloned."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 2, "creation_date": 1433430774, "post_id": 30641982, "comment_id": 49358998, "body": "Well, some iterators <i>can</i> be cloned, but the example you linked to does not have &quot;iterators being cloned&quot;. <code>cloned()</code> is just another iterator transformation method which is described <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow noreferrer\">here</a>. It is useful to obtain <code>Iterator&lt;Item=T&gt;</code> from <code>Iterator&lt;Item=&amp;T&gt;</code> if <code>T</code> is cloneable."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 32, "last_activity_date": 1433427867, "last_edit_date": 1433427867, "creation_date": 1433415319, "answer_id": 30641982, "question_id": 30630810, "link": "https://stackoverflow.com/questions/30630810/using-generic-iterators-instead-of-specific-list-types/30641982#30641982", "title": "Using generic iterators instead of specific list types", "body": "<p>First, forget about <code>IntoIterator</code> and other traits or types. The core iteration trait in Rust is <code>Iterator</code>. Its trimmed down definition is as follows:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Iterator {\n    type Item;  // type of elements returned by the iterator\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n</code></pre>\n\n<p>As you probably know, you can think of an iterator as a cursor inside of some structure. <code>next()</code> method advances this cursor forward, returning an element it pointed at previously. Naturally, if the collection is exhausted, there is nothing to return, and so <code>next()</code> returns <code>Option&lt;Self::Item&gt;</code>, not just <code>Self::Item</code>.</p>\n\n<p><code>Iterator</code> is a trait, and so it can be implemented by specific types. Note that <code>Iterator</code> <em>itself</em> is not a proper type which you can use as a return value or a function argument - you have to use <em>concrete</em> types which implement this trait.</p>\n\n<p>The above statement may sound too restrictive - how to use arbitrary iterator types then? - but because of <em>generics</em> this is not so. If you want a function to accept arbitrary iterators, just make it generic in the corresponding argument, adding an <code>Iterator</code> bound over the corresponding type parameter:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn iterate_bytes&lt;I&gt;(iter: I) where I: Iterator&lt;Item=u8&gt; { ... }\n</code></pre>\n\n<p><em>Returning</em> iterators from functions may be difficult, but see below.</p>\n\n<p>For example, there is a method on <code>&amp;[T]</code>, called <code>iter()</code>, which returns an iterator which yields references into the slice. This iterator is an instance of <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"noreferrer\">this</a> structure. You can see on that page how <code>Iterator</code> is implemented for <code>Iter</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, T&gt; Iterator for Iter&lt;'a, T&gt; {\n    type Item = &amp;'a T;\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a T&gt; { ... }\n    ...\n}\n</code></pre>\n\n<p>This structure holds a reference to the original slice and some iteration state inside it. Its <code>next()</code> method updates this state and returns the next value, if there is any.</p>\n\n<p>Any value whose type implements <code>Iterator</code> can be used in a <code>for</code> loop (<code>for</code> loop in fact works with <code>IntoIterator</code>, but see below):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s: &amp;[u8] = b\"hello\";\nfor b in s.iter() {\n    println!(\"{}\", b);   // prints numerical value of each byte\n}\n</code></pre>\n\n<p>Now, <code>Iterator</code> trait is actually more complex than the above one. It also defines a lot of transformation methods which consume the iterator they are called on and return a new iterator which somehow transforms or filters values from the original iterator. For example, <code>enumerate()</code> method returns an iterator which yields values from the original iterator together with the positional number of the element:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s: &amp;[u8] = b\"hello\";\nfor (i, b) in s.iter().enumerate() {\n    println!(\"{} at {}\", b, i);   // prints \"x at 0\", \"y at 1\", etc.\n}\n</code></pre>\n\n<p><code>enumerate()</code> is defined like this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>trait Iterator {\n    type Item;\n    ...\n    fn enumerate(self) -&gt; Enumerate&lt;Self&gt; {\n        Enumerate {\n            iter: self,\n            count: 0\n        }\n    }\n    ...\n}\n</code></pre>\n\n<p><code>Enumerate</code> is just a struct which contains an iterator and a counter inside it and which implements <code>Iterator&lt;Item=(usize, I::Item)&gt;</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Enumerate&lt;I&gt; {\n    iter: I,\n    count: usize\n}\n\nimpl&lt;I&gt; Iterator for Enumerate&lt;I&gt; where I: Iterator {\n    type Item = (usize, I::Item);\n\n    #[inline]\n    fn next(&amp;mut self) -&gt; Option&lt;(usize, I::Item)&gt; {\n        self.iter.next().map(|a| {\n            let ret = (self.count, a);\n            self.count += 1;\n            ret\n        })\n    }\n}\n</code></pre>\n\n<p>And <em>this</em> is how most iterator transformations are implemented: each transformation is a wrapping struct which wraps the original iterator and implements <code>Iterator</code> trait by delegating to the original iterator and transforming the resulting value somehow. For example, <code>s.iter().enumerate()</code> from the example above returns a value of type <code>Enumerate&lt;Iter&lt;'static, u8&gt;&gt;</code>.</p>\n\n<p>Note that while <code>enumerate()</code> is defined in <code>Iterator</code> trait directly, it can be a standalone function as well:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn enumerate&lt;I&gt;(iter: I) -&gt; Enumerate&lt;I&gt; where I: Iterator {\n    Enumerate {\n        iter: iter,\n        count: 0\n    }\n}\n</code></pre>\n\n<p>The method works very similarly - it just uses implicit <code>Self</code> type parameter instead of an explicitly named one.</p>\n\n<hr>\n\n<p>You may wonder what <code>IntoIterator</code> trait is. Well, it is just a convenience conversion trait which can be implemented by any type which can be converted to an iterator:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub trait IntoIterator where Self::IntoIter::Item == Self::Item {\n    type Item;\n    type IntoIter: Iterator;\n\n    fn into_iter(self) -&gt; Self::IntoIter;\n}\n</code></pre>\n\n<p>For example, <code>&amp;'a [T]</code> can be converted into <code>Iter&lt;'a, T&gt;</code>, and so it has the following implementation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;'a, T&gt; IntoIterator for &amp;'a [T] {\n    type Item = &amp;'a T;\n    type IntoIter = Iter&lt;'a, T&gt;;\n\n    fn into_iter(self) -&gt; Iter&lt;'a, T&gt; {\n        self.iter()  // just delegate to the existing method\n    }\n}\n</code></pre>\n\n<p>This trait is implemented for most container types and references to these types. It is in fact used by <code>for</code> loops - a value of any type which implements <code>IntoIterator</code> can be used in <code>in</code> clause:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s: &amp;[u8] = b\"hello\";\nfor b in s { ... }\n</code></pre>\n\n<p>This is very nice from learning and reading perspective because it has less noise (in form of <code>iter()</code>-like methods). It even allows things like these:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let v: Vec&lt;u8&gt; = ...;\n\nfor i in &amp;v { /* i is &amp;u8 here, v is borrowed immutably */ }\nfor i in &amp;mut v { /* i is &amp;mut u8 here, v is borrowed mutably */ }\nfor i in v { /* i is just u8 here, v is consumed */ }\n</code></pre>\n\n<p>This is possible because <code>IntoIterator</code> is implemented differently for <code>&amp;Vec&lt;T&gt;</code>, <code>&amp;mut Vec&lt;T&gt;</code> and just <code>Vec&lt;T&gt;</code>.</p>\n\n<p>Every <code>Iterator</code> implements <code>IntoIterator</code> which performs an identity conversion (<code>into_iter()</code> just returns the iterator it is called on), so you can use <code>Iterator</code> instances in <code>for</code> loops as well.</p>\n\n<p>Consequently, it makes sense to use <code>IntoIterator</code> in generic functions because it will make the API more convenient for the user. For example, <code>enumerate()</code> function from above could be rewritten as such:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn enumerate&lt;I&gt;(source: I) -&gt; Enumerate&lt;I::IntoIter&gt; where I: IntoIter {\n    Enumerate {\n        iter: source.into_iter(),\n        count: 0\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Now you can see how generics can be used to implement transformations with static typing easily. Rust does not have anything like C#/Python <code>yield</code> (but it is one of the most desired features, so one day it may appear in the language!), thus you need to wrap source iterators explicitly. For example, you can write something analogous to the above <code>Enumerate</code> structure which does the task you want.</p>\n\n<p>However, the most idiomatic way would be to use existing combinators to do the work for you. For example, your code may be written as follows:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let iter = ...;  // iter implements Iterator&lt;Item=i32&gt;\nlet r = iter.filter(|&amp;x| x % 2 == 0);  // r implements Iterator&lt;Item=i32&gt;\nfor i in r {\n    println!(\"{}\", i);  // prints only even items from the iterator\n}\n</code></pre>\n\n<p>However, using combinators may turn ugly when you want to write custom combinator functions because a lot of existing combinator functions accept closures (e.g. the <code>filter()</code> one above), but closures in Rust are implemented as values of anonymous types, so there is just no way to write the signature of the function returning the iterator out:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn filter_even&lt;I&gt;(source: I) -&gt; ??? where I: IntoIter&lt;Item=i32&gt; {\n    source.into_iter().filter(|&amp;x| x % 2 == 0)\n}\n</code></pre>\n\n<p>There are several ways around this, one of them is using <em>trait objects</em>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn filter_even&lt;'a, I&gt;(source: I) -&gt; Box&lt;Iterator&lt;Item=i32&gt;+'a&gt;\n    where I: IntoIterator&lt;Item=i32&gt;, I::IntoIter: 'a\n{\n    Box::new(source.into_iter().filter(|&amp;x| x % 2 == 0))\n}\n</code></pre>\n\n<p>Here we hide the actual iterator type returned by <code>filter()</code> behind a trait object. Note that in order to make the function fully generic I had to add a lifetime parameter and a corresponding bound to <code>Box</code> trait object and <code>I::IntoIter</code> associated type. This is necessary because <code>I::IntoIter</code> may contain arbitrary lifetimes inside it (just like <code>Iter&lt;'a, T&gt;</code> type above), and we have to specify them in the trait object type (otherwise the lifetime information would be lost).</p>\n\n<p>Trait objects created from <code>Iterator</code> trait implement <code>Iterator</code> themselves, so you can continue using these iterators as usual:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let source = vec![1_i32, 2, 3, 4];\nfor i in filter_even(source) {\n    println!(\"{}\", i);  // prints 2 and 4\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5339, "favorite_count": 6, "accepted_answer_id": 30641982, "answer_count": 3, "score": 18, "last_activity_date": 1433427867, "creation_date": 1433365853, "question_id": 30630810, "link": "https://stackoverflow.com/questions/30630810/using-generic-iterators-instead-of-specific-list-types", "title": "Using generic iterators instead of specific list types", "body": "<p>I'm very new to Rust, coming from C# / Java / similar.</p>\n\n<p>In C# we have <code>IEnumerable&lt;T&gt;</code> that can be used to iterate almost any kind of array or list. C# also has a <code>yield</code> keyword that you can use to return a lazy list. Here's an example...</p>\n\n<pre><code>// Lazily returns the even numbers out of an enumerable\nIEnumerable&lt;int&gt; Evens(IEnumerable&lt;int&gt; input)\n{\n    foreach (var x in input)\n    {\n        if (x % 2 == 0)\n        {\n            yield return x;\n        }\n    }\n}\n</code></pre>\n\n<p>This is a silly example of course. I know I could do this with Rust's <code>map</code> function, but I would like to know how to create my own methods that accept and return generic iterators.</p>\n\n<p>From what I can gather, Rust has generic iterators that can be use similarly, but they are above my understanding. I see <code>Iter</code>, <code>IntoIterator</code>, <code>Iterator</code> types, and probably more in documentation, but no good way to understand them.</p>\n\n<p>Can anyone provide clear examples of how to create something like above? Thank you!</p>\n\n<p>P.S. The lazy aspect is optional. I am more concerned with abstraction away from specific list and array types.</p>\n"}, {"tags": ["rust", "visual-studio-code"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1433365233, "post_id": 30627611, "comment_id": 49326866, "body": "Maybe you can find some inspiration in this reddit thread: <a href=\"http://www.reddit.com/r/rust/comments/389d3o/visual_studio_code_rust_has_been_added_as_a/\" rel=\"nofollow noreferrer\">reddit.com/r/rust/comments/389d3o/&hellip;</a>"}, {"owner": {"reputation": 9151, "user_id": 783653, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/4a35d104523ef520dd5d9f60c7e1eeb1?s=128&d=identicon&r=PG", "display_name": "vilicvane", "link": "https://stackoverflow.com/users/783653/vilicvane"}, "edited": false, "score": 0, "creation_date": 1433407198, "post_id": 30627611, "comment_id": 49342348, "body": "I&#39;ve deleted my answer, but updated gist (sorry the code was mis-pasted) <a href=\"https://gist.github.com/vilic/f756ccfdb91b004e7a70\" rel=\"nofollow noreferrer\">gist.github.com/vilic/f756ccfdb91b004e7a70</a>. The reason why using node to execute another script is that Visual Studio Code problem matcher can not handle multiline errors, so I need to do something intermediately."}], "answers": [{"tags": [], "owner": {"reputation": 1107, "user_id": 4857883, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9697e5b707f5a5ce7ddabcd833fe279?s=128&d=identicon&r=PG&f=1", "display_name": "Dirk B&#228;umer", "link": "https://stackoverflow.com/users/4857883/dirk-b%c3%a4umer"}, "is_accepted": false, "score": 2, "last_activity_date": 1516372108, "last_edit_date": 1516372108, "creation_date": 1436349038, "answer_id": 31289117, "question_id": 30627611, "link": "https://stackoverflow.com/questions/30627611/how-to-make-vs-code-build-and-run-rust-programs/31289117#31289117", "title": "How to make VS Code build and run Rust programs?", "body": "<p>The command property is only supported at the top level. In addition, arguments have to be passed via the args property. If they are put into the command, the command is treated as a command with whitespaces in its name. An example of the run task would look like this:</p>\n\n<pre><code>{\n    \"version\": \"0.1.0\",\n    \"command\": \"cargo\",\n    \"isShellCommand\": true, // Only needed if cargo is a .cmd file\n    \"tasks\": [\n        {\n           \"taskName\": \"run\",\n           \"args\": [\n               \"--release\"\n               // More args\n           ],\n           \"showOutput\": \"always\"\n        }\n    ]\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 3862, "user_id": 142456, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/e084f5673214074a5c737c131f082a43?s=128&d=identicon&r=PG", "display_name": "fostandy", "link": "https://stackoverflow.com/users/142456/fostandy"}, "edited": false, "score": 0, "creation_date": 1557930757, "post_id": 40708435, "comment_id": 98933047, "body": "Curious if this still works for anyone or is out of date. On my system it just produces a blank <code>error:</code> message"}], "tags": [], "owner": {"reputation": 58368, "user_id": 30038, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/mPvRH.jpg?s=128&g=1", "display_name": "Vlad Bezden", "link": "https://stackoverflow.com/users/30038/vlad-bezden"}, "is_accepted": false, "score": 1, "last_activity_date": 1516372094, "last_edit_date": 1516372094, "creation_date": 1479670044, "answer_id": 40708435, "question_id": 30627611, "link": "https://stackoverflow.com/questions/30627611/how-to-make-vs-code-build-and-run-rust-programs/40708435#40708435", "title": "How to make VS Code build and run Rust programs?", "body": "<p>Here is how I configured my tasks.json file</p>\n\n<pre><code>{\n    \"version\": \"0.1.0\",\n    \"command\": \"cargo\",\n    \"isShellCommand\": true,\n    \"args\": [\"run\"],\n    \"showOutput\": \"always\"\n}\n</code></pre>\n\n<p>Entering the build command (<kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>b</kbd>) will build and run the code.</p>\n"}, {"tags": [], "owner": {"reputation": 333, "user_id": 1499620, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a8775decd281725c936383b1f27a5595?s=128&d=identicon&r=PG", "display_name": "Xyzzy", "link": "https://stackoverflow.com/users/1499620/xyzzy"}, "is_accepted": true, "score": 3, "last_activity_date": 1588435937, "creation_date": 1588435937, "answer_id": 61562488, "question_id": 30627611, "link": "https://stackoverflow.com/questions/30627611/how-to-make-vs-code-build-and-run-rust-programs/61562488#61562488", "title": "How to make VS Code build and run Rust programs?", "body": "<p>Possibly these answers are out of date, here is my tasks.json, which implements cargo run, cargo build and a cargo command to run the currently open example...</p>\n\n<p>A key thing is to specify the problem matcher, so you can click through errors:</p>\n\n<pre><code>{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"cargo run example\",\n            \"type\": \"shell\",\n            \"command\": \"cargo run --example ${fileBasenameNoExtension}\",\n            \"problemMatcher\": [\n                \"$rustc\"\n            ]\n        },\n        {\n            \"label\": \"cargo run\",\n            \"type\": \"shell\",\n            \"command\": \"cargo run\",\n            \"problemMatcher\": [\n                \"$rustc\"\n            ]\n        },\n        {\n            \"label\": \"cargo build\",\n            \"type\": \"shell\",\n            \"command\": \"cargo build\",\n            \"problemMatcher\": [\n                \"$rustc\"\n            ]\n        },\n    ]\n}\n</code></pre>\n"}], "owner": {"reputation": 2231, "user_id": 4465497, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/vibwv.png?s=128&g=1", "display_name": "XAMPPRocky", "link": "https://stackoverflow.com/users/4465497/xampprocky"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7795, "favorite_count": 2, "accepted_answer_id": 61562488, "answer_count": 3, "score": 9, "last_activity_date": 1588435937, "creation_date": 1433355095, "last_edit_date": 1516372113, "question_id": 30627611, "link": "https://stackoverflow.com/questions/30627611/how-to-make-vs-code-build-and-run-rust-programs", "title": "How to make VS Code build and run Rust programs?", "body": "<p>I've been using <a href=\"https://code.visualstudio.com/\" rel=\"noreferrer\" title=\"VS Code\">VS Code</a>, and I was wondering how to build a <code>task.json</code> file that will have these commands. <code>cargo build</code>, <code>cargo run [ARGS]</code> <code>cargo run --release -- [ARGS]</code></p>\n\n<p>I've tried making one with the <a href=\"https://code.visualstudio.com/docs/tasks\" rel=\"noreferrer\" title=\"VS task.json documentationquot;\">documentation</a> on <code>task.json</code>. I kept getting <code>No such subcommand</code> errors.</p>\n\n<p>Sample:</p>\n\n<pre><code>{\n\"version\": \"0.1.0\",\n// The command is tsc. Assumes that tsc has been installed using npm install -g typescript\n\"command\": \"cargo\",\n\n// The command is a shell script\n\"isBuildCommand\": true,\n\n// Show the output window only if unrecognized errors occur. \n\"showOutput\": \"silent\",\n\n\"tasks\": [{\n   \"taskName\": \"run test\",\n   \"version\": \"0.1.0\",\n   \"command\": \"run -- --exclude-dir=node_modules C:/Users/Aaron/Documents/Github/\",\n   \"isShellCommand\": true,\n   \"showOutput\": \"always\"\n},\n{\n   \"taskName\": \"run\",\n   \"version\": \"0.1.0\",\n   \"args\": [  \"--\"\n           , \"--exclude-dir=node_modules\"\n           , \"C:/Users/Aaron/Documents/Github/\"\n           ]\n   \"isShellCommand\": true,\n   \"showOutput\": \"always\"\n}]\n}\n</code></pre>\n"}, {"tags": ["macros", "pattern-matching", "rust"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1433370784, "post_id": 30626147, "comment_id": 49329397, "body": "I don&#39;t have a complete answer, but <code>&#39;a&#39; | &#39;c&#39;</code> is not a pattern, it&#39;s match-specific syntax for combining patterns."}], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1433403873, "creation_date": 1433403873, "answer_id": 30637887, "question_id": 30626147, "link": "https://stackoverflow.com/questions/30626147/can-macros-expand-to-a-combination-of-patterns/30637887#30637887", "title": "Can macros expand to a combination of patterns?", "body": "<p>A macro is able to expand to things like patterns, expressions and items, but not everything; specifically, macros expand to complete AST nodes, but what you\u2019re dealing with here is not a complete AST node.</p>\n\n<p>Each branch of a <code>match</code> expression can have one or more patterns, separated by pipes, and an optional pattern guard (<code>if <em>condition</em></code>). This is all special <code>match</code>-specific syntax, and thus not a complete AST node, and thus not something that a macro can expand to.</p>\n\n<p>The parser is looking for a pattern at that point of its parsing, so it expands the macro as a pattern, which concludes before the <code>|</code>, which doesn\u2019t fit in a pattern grammar. The macro has thus produced more than can be consumed, and the rest is discarded with an error.</p>\n"}], "owner": {"reputation": 1792, "user_id": 1525398, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/5879d46c56c285c31438db57ab24049e?s=128&d=identicon&r=PG", "display_name": "rvidal", "link": "https://stackoverflow.com/users/1525398/rvidal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 664, "favorite_count": 0, "accepted_answer_id": 30637887, "answer_count": 1, "score": 7, "last_activity_date": 1434128768, "creation_date": 1433350282, "last_edit_date": 1434128768, "question_id": 30626147, "link": "https://stackoverflow.com/questions/30626147/can-macros-expand-to-a-combination-of-patterns", "title": "Can macros expand to a combination of patterns?", "body": "<p>As of Rust 1.0, there is no way to group multiple patterns into one binding:</p>\n\n<pre><code>// It does not compile\nmatch x as char {\n    b @ ('A' | 'Z') =&gt; println!(\"A or Z: {}\", b),\n    _ =&gt; println!(\"Try again\")\n}\n\n// Correct version\nmatch x as char {\n    b @ 'A' | b @ 'Z' =&gt; println!(\"A or Z: {}\", b),\n    _ =&gt; println!(\"Try again\")\n}\n</code></pre>\n\n<p>I was wondering if a macro could do the dirty job of binding all the different possibilities. Here is a partial attempt:</p>\n\n<pre><code>macro_rules! bind_alternatives {\n    ($x:ident, $e:expr) =&gt; ($x @ $e);\n    ($x:ident, $e1:expr, $e2:expr) =&gt; (\n        $x @ $e1 | $x @ $e2\n    );\n}\n\nfn main() {\n    let x = 'a';\n\n    match x {\n        bind_alternatives!(z, 'a', 'c') =&gt; println!(\"Matched\"),\n        _ =&gt; println!(\"No luck\")\n    };\n}\n</code></pre>\n\n<p>This does not compile:</p>\n\n<pre><code>example.rs:4:18: 4:19 error: macro expansion ignores token `|` and any following\nexample.rs:4         $x @ $e1 | $x @ $e2\n                                      ^\nexample.rs:12:9: 12:40 note: caused by the macro expansion here; the usage of `bind_alternatives` is likely invalid in this context\nexample.rs:12         bind_alternatives!(z, 'a', 'c') =&gt; println!(\"Matched\"),\n</code></pre>\n\n<p>I understand that macros can be expanded into patterns, and the first brace of <code>bind_alternatives</code> does work. Is it possible to generalize to more than 1 possibility? If not, what prevents it?</p>\n"}, {"tags": ["pattern-matching", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433346540, "post_id": 30624335, "comment_id": 49315844, "body": "Welcome to Stack Overflow! Please take the time to create a <a href=\"http://stackoverflow.com/help/mcve\">minimal, compilable, verifiable example</a>. Specifically for Rust, it&#39;s good to have something that can demonstrate the same error on <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">the Playpen</a>. This helps you better understand your own question, and helps answerers better get a grasp of the problem (and avoid missed guesses, like the answer you have now)."}], "answers": [{"comments": [{"owner": {"reputation": 269, "user_id": 2748591, "user_type": "registered", "accept_rate": 62, "profile_image": "https://graph.facebook.com/1180805905/picture?type=large", "display_name": "Tyler Harden", "link": "https://stackoverflow.com/users/2748591/tyler-harden"}, "edited": false, "score": 1, "creation_date": 1433346434, "post_id": 30624449, "comment_id": 49315763, "body": "I don&#39;t believe that this is an importing error, as I already have a call to <code>codemap::spanned</code> earlier in the code, and no such errors, arose.  Additionally, I attempted to add the use statements, but the error did not change"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433346917, "post_id": 30624449, "comment_id": 49316116, "body": "I&#39;m wary of glob imports, so I&#39;ve found it useful to just use them in a small scope - like just the function. <a href=\"http://is.gd/j3vVav\" rel=\"nofollow noreferrer\">Example</a>"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269, "user_id": 2748591, "user_type": "registered", "accept_rate": 62, "profile_image": "https://graph.facebook.com/1180805905/picture?type=large", "display_name": "Tyler Harden", "link": "https://stackoverflow.com/users/2748591/tyler-harden"}, "edited": false, "score": 1, "creation_date": 1433347851, "post_id": 30624449, "comment_id": 49316717, "body": "@TylerHarden fair enough, but as you gave an incomplete code snippet, we can only guess what the actual error may be."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433347855, "post_id": 30624449, "comment_id": 49316721, "body": "@Shepmaster: Usually I also try and avoid glob imports, and they have actually bitten me once (incidentially at the len_zero lint), but when writing lints we get so many ast::this and ast::that that just glob importing is the saner solution here."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 0, "last_activity_date": 1433347414, "last_edit_date": 1433347414, "creation_date": 1433345299, "answer_id": 30624449, "question_id": 30624335, "link": "https://stackoverflow.com/questions/30624335/pattern-matching-over-an-ast-struct-in-the-compiler/30624449#30624449", "title": "Pattern matching over an AST struct in the compiler", "body": "<p>I used to write code like this, but it gets tiresome. Now I just <code>use syntax::ast::*</code> and leave off all the <code>ast::</code>s in the code. This will also take care of the <code>Lit</code> (as it is in <code>syntax::ast</code>)</p>\n\n<p>I cannot say for sure what the actual issue is, because your code is incomplete, but look at <a href=\"https://github.com/Manishearth/rust-clippy/blob/master/src/len_zero.rs\" rel=\"nofollow\">https://github.com/Manishearth/rust-clippy/blob/master/src/len_zero.rs</a> for a successfully compiling example.</p>\n"}, {"comments": [{"owner": {"reputation": 269, "user_id": 2748591, "user_type": "registered", "accept_rate": 62, "profile_image": "https://graph.facebook.com/1180805905/picture?type=large", "display_name": "Tyler Harden", "link": "https://stackoverflow.com/users/2748591/tyler-harden"}, "edited": false, "score": 1, "creation_date": 1433367687, "post_id": 30625502, "comment_id": 49328087, "body": "Thanks so much for this answer, really concise and informative.  I really appreciate you explaining things that I&#39;ve just been overlooking for the past few days."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1433370900, "last_edit_date": 1433370900, "creation_date": 1433348210, "answer_id": 30625502, "question_id": 30624335, "link": "https://stackoverflow.com/questions/30624335/pattern-matching-over-an-ast-struct-in-the-compiler/30625502#30625502", "title": "Pattern matching over an AST struct in the compiler", "body": "<p>A few things are going awry here.</p>\n\n<ol>\n<li><a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ast/type.Lit.html\" rel=\"nofollow\"><code>ast::Lit</code></a> is just a type alias of <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/codemap/struct.Spanned.html\" rel=\"nofollow\"><code>codemap::Spanned</code></a>, not an enum or an enum variant. So you don't need to specify both, but you must specify either.</li>\n<li><a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ast/enum.Expr_.html\" rel=\"nofollow\"><code>ast::ExprLit</code></a> is an enum tuple variant containing a <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ptr/struct.P.html\" rel=\"nofollow\"><code>P&lt;Lit&gt;</code></a>. So you need to destructure the <code>P</code> by using <code>P(inner)</code>\n<ul>\n<li>At least I remember doing <code>P</code>-destructuring this way. The docs say otherwise. If it doesn't work, you need to dereference this and add another inner match for the content</li>\n</ul></li>\n<li><p><a href=\"http://manishearth.github.io/rust-internals-docs/syntax/codemap/struct.Spanned.html\" rel=\"nofollow\"><code>codemap::Spanned</code></a> is a struct, not a tuple struct, which means you cannot match on its fields by position, but you must destructure the fields by name like so:</p>\n\n<pre><code>let codemap::Spanned {\n    node: innernode,\n    span: innerspan,\n} = some_spanned;\n</code></pre></li>\n</ol>\n\n<p>In total I believe your match should look something along the lines of</p>\n\n<pre><code>let pat = match exprs.node {\n    ast::ExprLit( P( codemap::Spanned {\n        node: ast::LitBinary(string),\n        span: innerspan,\n    })) =&gt; {\n        //stuff to string\n        //primary issue here is that these enums, which ExprLit is \n        //comprised of, do not pattern match correctly\n    }\n    _ =&gt; { //other stuff }\n};\n</code></pre>\n"}], "owner": {"reputation": 269, "user_id": 2748591, "user_type": "registered", "accept_rate": 62, "profile_image": "https://graph.facebook.com/1180805905/picture?type=large", "display_name": "Tyler Harden", "link": "https://stackoverflow.com/users/2748591/tyler-harden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 433, "favorite_count": 0, "accepted_answer_id": 30625502, "answer_count": 2, "score": 3, "last_activity_date": 1433370900, "creation_date": 1433344983, "last_edit_date": 1433355027, "question_id": 30624335, "link": "https://stackoverflow.com/questions/30624335/pattern-matching-over-an-ast-struct-in-the-compiler", "title": "Pattern matching over an AST struct in the compiler", "body": "<p>So I am trying to pattern match on a struct.  This particular struct is made-up of a number of enums, which contain pointers to enums, or at its most basic level, a vector un-signed 8-bytes.  I would like to work with the vector, however would like to know if it is possible to pattern match my way to the vec.</p>\n\n<pre><code>ast::ExprUnary(ast::UnDeref, ref exprs) =&gt;{\n        let pat = match exprs.node {\n\n            ast::ExprLit(ast::Lit(codemap::Spanned(ast::LitBinary(string),innerspan))) =&gt; {\n                 //stuff to string\n                 //primary issue here is that these enums, which ExprLit is \n                 //comprised of, do not pattern match correctly\n            }\n            _ =&gt; //other stuff\n        };\n</code></pre>\n\n<p>upon compiling this code, I receive the following two errors, </p>\n\n<pre><code>unresolved enum variant, struct or const `Spanned`\nunresolved enum variant, struct or const `Lit`\n</code></pre>\n\n<p>both of these enums exist within ast, however, I do not know why they are are unresolved in this particular context.  Any advice would be appreciated</p>\n"}, {"tags": ["rust", "lifetime", "type-alias"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433309696, "post_id": 30610493, "comment_id": 49289991, "body": "uhm... you&#39;re right about the <code>finding anything that explains...</code>: <a href=\"https://doc.rust-lang.org/error-index.html#E0106\" rel=\"nofollow noreferrer\">doc.rust-lang.org/error-index.html#E0106</a> doesn&#39;t exist yet, the book doesn&#39;t contain the word &quot;specifier&quot; in the <a href=\"https://doc.rust-lang.org/nightly/book/lifetimes.html\" rel=\"nofollow noreferrer\">lifetime-chapter</a>... related SO question: <a href=\"http://stackoverflow.com/questions/27097710/error-missing-lifetime-specifier-e0106\" title=\"error missing lifetime specifier e0106\">stackoverflow.com/questions/27097710/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2338, "user_id": 1096777, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/fde3c611ccc38a69ec6fccfaa11bedaf?s=128&d=identicon&r=PG&f=1", "display_name": "mavix", "link": "https://stackoverflow.com/users/1096777/mavix"}, "edited": false, "score": 0, "creation_date": 1433358813, "post_id": 30612297, "comment_id": 49323270, "body": "OK, so I think the core problem with my code is that I really wanted to define the value (not the reference), and then create references to that value later, which seems to have worked: <code>type Board = [[Tile; 19]; 19];</code> compiles correctly. I am then able to <code>let board:&amp;Board = &amp;[[Tile::Empty; 19]; 19];</code> later on."}, {"owner": {"reputation": 2338, "user_id": 1096777, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/fde3c611ccc38a69ec6fccfaa11bedaf?s=128&d=identicon&r=PG&f=1", "display_name": "mavix", "link": "https://stackoverflow.com/users/1096777/mavix"}, "edited": false, "score": 1, "creation_date": 1433359094, "post_id": 30612297, "comment_id": 49323432, "body": "However, I&#39;m not sure I understand lifetimes, even after reading the documentation you linked to. It explains clearly the syntax for naming lifetimes of things in functions, but I don&#39;t understand what giving it a name does. For example, if I declare <code>type Board&lt;&#39;a&gt; = &amp;&#39;a [[Tile; 19]; 19];</code> at the top level, where does <code>&#39;a</code> end? Also, why doesn&#39;t the compiler give my original line <code>&#39;static</code> by default?"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 11, "last_activity_date": 1433312507, "creation_date": 1433312507, "answer_id": 30612297, "question_id": 30610493, "link": "https://stackoverflow.com/questions/30610493/missing-lifetime-specifier-e0106-on-type-alias/30612297#30612297", "title": "missing lifetime specifier [E0106] on type alias", "body": "<p>The short answer is</p>\n\n<pre><code>type Board&lt;'a&gt; = &amp;'a [[Tile; 19]; 19];\n</code></pre>\n\n<hr>\n\n<p>Rust is always explicit about generic arguments. Lifetimes also are generic arguments. Imagine you'd be generic over the <code>Tile</code> type.</p>\n\n<pre><code>type Board = &amp;[[T; 19]; 19];\n</code></pre>\n\n<p>This would cause an error about <code>T</code> not existing (except if you defined an actual type named <code>T</code>). But you'd like to be able to use <code>Board</code> for any inner type. So what you'd need to do is to add a generic argument to the definition:</p>\n\n<pre><code>type Board&lt;T&gt; = &amp;[[T; 19]; 19];\n</code></pre>\n\n<p>So whenever you use the <code>Board</code> type alias, you also need to pass the <code>T</code> type.</p>\n\n<p>Back to our lifetime issue. Our type alias has a reference. We don't know what the lifetime of this reference is. The reason why you rarely need to specify a lifetime is <a href=\"https://doc.rust-lang.org/nightly/book/lifetimes.html#lifetime-elision\">lifetime-elision</a>. This is one of the cases where you need to specify the lifetime, since you want the lifetime to be determined at all locations where you use <code>Board</code>, like as if you used <code>&amp;[[Tile; 19]; 19]</code> everywhere directly. At the type alias definition the only available lifetime is <code>'static</code>, so we need to define a new generic one.</p>\n"}], "owner": {"reputation": 2338, "user_id": 1096777, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/fde3c611ccc38a69ec6fccfaa11bedaf?s=128&d=identicon&r=PG&f=1", "display_name": "mavix", "link": "https://stackoverflow.com/users/1096777/mavix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2115, "favorite_count": 1, "accepted_answer_id": 30612297, "answer_count": 1, "score": 5, "last_activity_date": 1433312507, "creation_date": 1433303152, "last_edit_date": 1433309917, "question_id": 30610493, "link": "https://stackoverflow.com/questions/30610493/missing-lifetime-specifier-e0106-on-type-alias", "title": "missing lifetime specifier [E0106] on type alias", "body": "<p>This code:</p>\n\n<pre><code>use std::fmt;\nuse std::result::Result::{self, Ok, Err};\n\n#[derive(Clone)]\n#[derive(Copy)]\nenum Tile {\n    White,\n    Black,\n    Empty\n}\ntype Board = &amp;[[Tile; 19]; 19];\n</code></pre>\n\n<p>Produces this error:</p>\n\n<pre><code>Compiling go v0.1.0 (file:///home/max/gits/go_rusty)\nsrc/main.rs:12:14: 12:31 error: missing lifetime specifier [E0106]\nsrc/main.rs:12 type Board = &amp;[[Tile; 19]; 19];\n                            ^~~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `go`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>I'm having a hard time finding anything that explains what a lifetime specifier is and why I would need that on a type alias declaration.</p>\n"}, {"tags": ["file", "text", "io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1433289050, "last_edit_date": 1433289050, "creation_date": 1433287719, "answer_id": 30608280, "question_id": 30608201, "link": "https://stackoverflow.com/questions/30608201/parsing-text-file-lines-into-numbers-using-stditeriterator-map/30608280#30608280", "title": "Parsing text file lines into numbers using std::iter::Iterator map", "body": "<p>Let's look at the <em>complete</em> error message, which points to the error for us:</p>\n\n<pre><code>&lt;anon&gt;:5:9: 5:14 error: mismatched types:\n expected `&amp;core::result::Result&lt;&amp;str, ()&gt;`,\n    found `core::result::Result&lt;_, _&gt;`\n(expected &amp;-ptr,\n    found enum `core::result::Result`) [E0308]\n&lt;anon&gt;:5         Ok(s) =&gt; match s.parse() {\n                 ^~~~~\n</code></pre>\n\n<p>The compiler is expecting a <code>&amp;Result</code>, but found a <code>Result</code>, and the issue is with the <code>Ok(s)</code> pattern. The type of <code>l</code> is a <em>reference</em> to a <code>Result</code> because you are using <a href=\"http://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\"><code>iter</code></a> - which returns <a href=\"http://doc.rust-lang.org/std/slice/struct.Iter.html\">an iterator of references</a> to the items in the vector.</p>\n\n<p>The shortest fix is to add a <code>&amp;</code> to the pattern match for the closure variable:</p>\n\n<pre><code>fn main() {\n    let lines: Vec&lt;Result&lt;_, ()&gt;&gt; = vec![Ok(\"1\"), Ok(\"3\"), Ok(\"5\")];\n\n    // HERE                                V \n    let nums: Vec&lt;i64&gt; = lines.iter().map(|&amp;l| match l {\n        Ok(s) =&gt; match s.parse() {\n            Ok(i) =&gt; i,\n            Err(_) =&gt; 0\n        },\n        Err(_) =&gt; 0\n    }).collect();\n\n    println!(\"{:?}\", nums)\n}\n</code></pre>\n\n<p>I also had to add <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\"><code>collect</code></a> to go back to a <code>Vec</code>.</p>\n\n<p>The other change you could make would be to <em>consume</em> the input vector using <a href=\"http://doc.rust-lang.org/std/iter/trait.IntoIterator.html\"><code>into_iter</code></a> and then iterate on each value in the vector:</p>\n\n<pre><code>// HERE                    V~~~~\nlet nums: Vec&lt;i64&gt; = lines.into_iter().map(|l| match l {\n</code></pre>\n\n<p>And for good measure, you could use <a href=\"http://doc.rust-lang.org/std/result/enum.Result.html#method.ok\"><code>ok</code></a>, <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.and_then\"><code>and_then</code></a>, and <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or\"><code>unwrap_or</code></a> to say the same thing a bit more succinctly:</p>\n\n<pre><code>let nums: Vec&lt;i64&gt; = lines.into_iter().map(|l| {\n    l.ok().and_then(|s| s.parse().ok()).unwrap_or(0)\n}).collect();\n</code></pre>\n"}], "owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 605, "favorite_count": 0, "accepted_answer_id": 30608280, "answer_count": 1, "score": 2, "last_activity_date": 1433289050, "creation_date": 1433287227, "last_edit_date": 1433287854, "question_id": 30608201, "link": "https://stackoverflow.com/questions/30608201/parsing-text-file-lines-into-numbers-using-stditeriterator-map", "title": "Parsing text file lines into numbers using std::iter::Iterator map", "body": "<p>I'm trying to read and parse a text file in Rust. Each line is a signed integer. I'm able to do it using <code>for line in lines</code> iteration but I'm unable to do it with a <code>iter().map(|l| ...)</code> one-liner. I'm getting a</p>\n\n<pre><code>expected `&amp;core::result::Result&lt;collections::string::String, std::io::error::Error&gt;`,\nfound `core::result::Result&lt;_, _&gt;`\n</code></pre>\n\n<p>when I try to pattern match <code>Ok(s) =&gt; match s.parse()</code> but I'm unable to get to the bottom of what I am doing wrong. The whole example is below. The code on the bottom is the code that is producing the error.</p>\n\n<p>Can anyone tell what I am doing wrong?</p>\n\n<pre><code>use std::error::Error;\nuse std::fs::File;\nuse std::io::BufReader;\nuse std::io::prelude::*;\nuse std::path::Path;\n\nfn main() {\n    // Create a path to the desired file\n    let path = Path::new(\"input/numbers.txt\");\n    let display = path.display();\n\n    // Open the path in read-only mode, returns `io::Result&lt;File&gt;`\n    let file = match File::open(&amp;path) {\n        // The `description` method of `io::Error` returns a string that describes the error\n        Err(why) =&gt; panic!(\"couldn't open {}: {}\", display, Error::description(&amp;why)),\n        Ok(file) =&gt; file,\n    };\n\n    // Collect all lines into a vector\n    let reader = BufReader::new(file);\n    let lines: Vec&lt;_&gt; = reader.lines().collect();\n\n    // Works.\n    let mut nums = vec![];       \n    for l in lines {\n        println!(\"{:?}\", l);\n        let num = match l {\n            Ok(s) =&gt; match s.parse() { \n                Ok(i) =&gt; i,\n                Err(_) =&gt; 0\n            },\n            Err(_) =&gt; 0\n        };\n        nums.push(num);\n    }\n\n    // Doesn't work!       \n    let nums: Vec&lt;i64&gt; = lines.iter().map(|l| match l {\n        Ok(s) =&gt; match s.parse() {\n            Ok(i) =&gt; i,\n            Err(_) =&gt; 0\n        },\n        Err(_) =&gt; 0\n    });\n}\n</code></pre>\n"}, {"tags": ["linux", "multithreading", "macos", "rust"], "comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 2, "creation_date": 1433280378, "post_id": 30606575, "comment_id": 49281567, "body": "Any details on why you want to create so many threads? That seems excessive."}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433280653, "post_id": 30606575, "comment_id": 49281693, "body": "Load testing application, concurrent users hitting a HTTP resource at once."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 2, "creation_date": 1433280747, "post_id": 30606575, "comment_id": 49281734, "body": "Do you think it would be possible to create a smaller &quot;pool&quot; of threads and then iterate over them? You could juggle many connections per thread (hundreds?)"}, {"owner": {"reputation": 21298, "user_id": 309425, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/75a67cd9a3d7367a6e594fcbe5e41400?s=128&d=identicon&r=PG", "display_name": "JWWalker", "link": "https://stackoverflow.com/users/309425/jwwalker"}, "edited": false, "score": 1, "creation_date": 1433281131, "post_id": 30606575, "comment_id": 49281905, "body": "Maybe on OS X you could use Grand Central Dispatch instead of threads.  <code>dispatch_async</code> to one of the standard concurrent global queues."}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433281197, "post_id": 30606575, "comment_id": 49281933, "body": "@jocull could you give an example of that?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433281416, "post_id": 30606575, "comment_id": 49282055, "body": "@JacobClark Unfortunately I&#39;m not fluent enough in Rust yet :( Just hoping to provide some direction!"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433281491, "post_id": 30606575, "comment_id": 49282083, "body": "If you are using any HTTP libraries, it might help to include a link to them."}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1433281763, "post_id": 30606575, "comment_id": 49282196, "body": "<a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow noreferrer\">github.com/hyperium/hyper</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 8, "creation_date": 1433286540, "post_id": 30606575, "comment_id": 49283775, "body": "&quot;which explains why I can&#39;t spin up over 2048 threads&quot; - &quot;How do I go about getting past this hard limit&quot; \u2014 You answered it yourself: <b>you can&#39;t</b>. You should reword your question to avoid the <a href=\"http://meta.stackexchange.com/questions/66377/what-is-the-xy-problem\">XY Problem</a> - you really want to know how to create more simultaneous HTTP requests than you can create threads."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1433288669, "post_id": 30606575, "comment_id": 49284324, "body": "For asynchronous HTTP processing I&#39;m using cURL usually. It&#39;s a good quality and well-maintained project. I haven&#39;t reached the stage yet where I&#39;ll need to use it from Rust, though, so I can&#39;t boast some Rust code. The existing Rust driver <a href=\"https://github.com/carllerche/curl-rust\" rel=\"nofollow noreferrer\">github.com/carllerche/curl-rust</a> only works with &quot;easy&quot; handlers and thus isn&#39;t sufficient for the job."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1433288363, "creation_date": 1433288363, "answer_id": 30608379, "question_id": 30606575, "link": "https://stackoverflow.com/questions/30606575/application-on-osx-cannot-spawn-more-than-2048-threads/30608379#30608379", "title": "Application on OSX cannot spawn more than 2048 threads", "body": "<p>Before starting, I'd encourage you to read about the <a href=\"http://www.kegel.com/c10k.html\">C10K problem</a>. When you get into this scale, there's a lot more things you need to keep in mind.</p>\n\n<p>That being said, I'd suggest looking at <a href=\"https://github.com/carllerche/mio\">mio</a>...</p>\n\n<blockquote>\n  <p>a lightweight IO library for Rust with a focus on adding as little overhead as possible over the OS abstractions.</p>\n</blockquote>\n\n<p>Specifically, mio provides an <em>event loop</em>, which allows you to handle a large number of connections without spawning threads. Unfortunately, I don't know of a HTTP library that currently supports mio. You could create one and be a hero to the Rust community! </p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433558564, "post_id": 30670186, "comment_id": 49418086, "body": "I must be missing a piece, but how does this have more than #<code>THREADS</code> concurrent connections?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433713694, "post_id": 30670186, "comment_id": 49455780, "body": "There is a mutex tracking the number of opened connections, used inside a loop in each thread. <code>THREADS</code> is the number of threads working to open connections, while <code>TARGET</code> is the number of connections it&#39;s trying to open. It&#39;s a weak example, but I wanted to show another way of handling the connections instead of one-per-thread."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433713856, "post_id": 30670186, "comment_id": 49455826, "body": "Ah, I see. So each thread is responsible for opening new connections, but something else is responsible for closing them, which means more connections can be open than the thread count!"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433715854, "post_id": 30670186, "comment_id": 49456376, "body": "Correct! They&#39;re passed into a channel that reads from them in a loop. This could be expanded to include threads as well."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433716202, "post_id": 30670186, "comment_id": 49456447, "body": "Have you been able to measure from the &quot;other side&quot; and determine how many concurrent connections this actually enables?"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433772965, "post_id": 30670186, "comment_id": 49480426, "body": "@Shepmaster I have not -- it was only an experiment to see if I could juggle lots of connections with a small number of concrete threads."}], "tags": [], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "is_accepted": false, "score": 1, "last_activity_date": 1433558398, "last_edit_date": 1433558398, "creation_date": 1433517599, "answer_id": 30670186, "question_id": 30606575, "link": "https://stackoverflow.com/questions/30606575/application-on-osx-cannot-spawn-more-than-2048-threads/30670186#30670186", "title": "Application on OSX cannot spawn more than 2048 threads", "body": "<p>Not sure how helpful this will be, but I was trying to create a small pool of threads that will create connections and then send them over to an event loop via a channel for reading.</p>\n\n<p>I'm sure this code is probably pretty bad, but here it is anyways for examples. It uses the Hyper library, like you mentioned.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>extern crate hyper;\n\nuse std::io::Read;\nuse std::thread;\nuse std::thread::{JoinHandle};\nuse std::sync::{Arc, Mutex};\nuse std::sync::mpsc::channel;\n\nuse hyper::Client;\nuse hyper::client::Response;\nuse hyper::header::Connection;\n\nconst TARGET: i32 = 100;\nconst THREADS: i32 = 10;\n\nstruct ResponseWithString {\n    index: i32,\n    response: Response,\n    data: Vec&lt;u8&gt;,\n    complete: bool\n}\n\nfn main() {\n    // Create a client.\n    let url: &amp;'static str = \"http://www.gooogle.com/\";\n\n    let mut threads = Vec::&lt;JoinHandle&lt;()&gt;&gt;::with_capacity((TARGET * 2) as usize);\n    let conn_count = Arc::new(Mutex::new(0));\n    let (tx, rx) = channel::&lt;ResponseWithString&gt;();\n\n    for _ in 0..THREADS {\n        // Move var references into thread context\n        let conn_count = conn_count.clone();\n        let tx = tx.clone();\n\n        let t = thread::spawn(move || {\n            loop {\n                let idx: i32;\n                {\n                    // Lock, increment, and release\n                    let mut count = conn_count.lock().unwrap();\n                    *count += 1;\n                    idx = *count;\n                }\n                if idx &gt; TARGET {\n                    break;\n                }\n\n                let mut client = Client::new();\n\n                // Creating an outgoing request.\n                println!(\"Creating connection {}...\", idx);\n                let res = client.get(url)                       // Get URL...\n                                .header(Connection::close())    // Set headers...\n                                .send().unwrap();               // Fire!\n\n                println!(\"Pushing response {}...\", idx);\n                tx.send(ResponseWithString {\n                    index: idx,\n                    response: res,\n                    data: Vec::&lt;u8&gt;::with_capacity(1024),\n                    complete: false\n                }).unwrap();\n            }\n        });\n        threads.push(t);\n    }\n\n    let mut responses = Vec::&lt;ResponseWithString&gt;::with_capacity(TARGET as usize);\n    let mut buf: [u8; 1024] = [0; 1024];\n    let mut completed_count = 0;\n    loop {\n        if completed_count &gt;= TARGET {\n            break; // No more work!\n        }\n\n        match rx.try_recv() {\n            Ok(r) =&gt; {\n                println!(\"Incoming response! {}\", r.index);\n                responses.push(r)\n            },\n            _ =&gt; { }\n        }\n\n        for r in &amp;mut responses {\n            if r.complete {\n                continue;\n            }\n\n            // Read the Response.\n            let res = &amp;mut r.response;\n            let data = &amp;mut r.data;\n            let idx = &amp;r.index;\n\n            match res.read(&amp;mut buf) {\n                Ok(i) =&gt; {\n                        if i == 0 {\n                            println!(\"No more data! {}\", idx);\n                            r.complete = true;\n                            completed_count += 1;\n                        }\n                        else {\n                            println!(\"Got data! {} =&gt; {}\", idx, i);\n                            for x in 0..i {\n                                data.push(buf[x]);\n                            }\n                        }\n                    }\n                Err(e) =&gt; {\n                    panic!(\"Oh no! {} {}\", idx, e);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 411, "favorite_count": 0, "answer_count": 2, "score": 4, "last_activity_date": 1433558398, "creation_date": 1433279130, "last_edit_date": 1433286282, "question_id": 30606575, "link": "https://stackoverflow.com/questions/30606575/application-on-osx-cannot-spawn-more-than-2048-threads", "title": "Application on OSX cannot spawn more than 2048 threads", "body": "<p>I have a Rust application on on OSX firing up a large amount of threads as can be seen in the code below, however, after looking at how many max threads my version of OSX is allowed to create via the <code>sysctl kern.num_taskthreads</code> command, I can see that it is <code>kern.num_taskthreads: 2048</code> which explains why I can't spin up over 2048 threads.</p>\n\n<p>How do I go about getting past this hard limit? </p>\n\n<pre><code>let threads = 300000;\nlet requests = 1;\n\nfor _x in 0..threads {\n    println!(\"{}\", _x);\n    let request_clone = request.clone();\n\n    let handle = thread::spawn(move || {\n        for _y in 0..requests {\n            request_clone.lock().unwrap().push((request::Request::new(request::Request::create_request())));\n        }\n    });\n\n    child_threads.push(handle);\n}\n</code></pre>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "edited": false, "score": 0, "creation_date": 1433263721, "post_id": 30601940, "comment_id": 49272233, "body": "Wow ... thanks! verify fast and answered the question perfectly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1433263587, "creation_date": 1433263587, "answer_id": 30601940, "question_id": 30601878, "link": "https://stackoverflow.com/questions/30601878/is-there-any-way-to-call-a-closure-inside-a-spawned-thread/30601940#30601940", "title": "Is there any way to call a closure inside a spawned thread?", "body": "<p>Absolutely. The main thing you have to do is restrict <code>F</code> to also be <code>Send</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::thread;\n\nfn awesome_function&lt;F&gt;(v: Vec&lt;u64&gt;, f: F) -&gt; String\n    where F: Fn(u64) + Send + 'static\n{\n    thread::spawn(move || f(1));\n    unimplemented!()\n}\n\nfn main() {}\n</code></pre>\n\n<p>You also need to restrict it to <code>'static</code>, as also required by <code>thread::spawn</code>.</p>\n"}], "owner": {"reputation": 1455, "user_id": 706882, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1b8e621d3734b19dbb87061e1b9157e0?s=128&d=identicon&r=PG", "display_name": "sbditto85", "link": "https://stackoverflow.com/users/706882/sbditto85"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 113, "favorite_count": 0, "accepted_answer_id": 30601940, "answer_count": 1, "score": 2, "last_activity_date": 1460745515, "creation_date": 1433263434, "last_edit_date": 1460745515, "question_id": 30601878, "link": "https://stackoverflow.com/questions/30601878/is-there-any-way-to-call-a-closure-inside-a-spawned-thread", "title": "Is there any way to call a closure inside a spawned thread?", "body": "<p>I have a function:</p>\n\n<pre><code>fn awesome_function&lt;F&gt;(v: Vec&lt;u64&gt;, f: F)\n    where F: Fn(u64) -&gt; String\n{ /* ... */ }\n</code></pre>\n\n<p>Is there any way to call that passed in function inside a spawned thread? Something like:</p>\n\n<pre><code>...\nthread::spawn(move || f(1));\n...\n</code></pre>\n\n<p>I've tried a few different ways and I get an error <code>error: the trait core::marker::Send is not implemented for the type F [E0277]</code></p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1433258396, "post_id": 30599665, "comment_id": 49268753, "body": "I doubt so, is destroying the list, allocating another container, and re-creating another list a viable solution? Because sorting linked lists does not work well."}, {"owner": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433271310, "post_id": 30599665, "comment_id": 49276787, "body": "Why do you say sorting linked lists does not work well? Merge sort is a nice way to sort a linked list..."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433272236, "post_id": 30599665, "comment_id": 49277297, "body": "@wspeirs &#39;Cause linked lists are slow. It will almost surely be faster to go <code>LinkedList \u2192 Vec \u2192 LinkedList</code> than to sort in-place. Why do you have a <code>LinkedList</code> anyway?"}, {"owner": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433273006, "post_id": 30599665, "comment_id": 49277709, "body": "@Veedrac I&#39;ll admit this is more of an academic question than a practical one. Just curious if I was missing something from the standard library to sort a LinkedList. Both C++ and Java have such methods, curious why Rust does not, or if it does then how..."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433273272, "post_id": 30599665, "comment_id": 49277870, "body": "@wspeirs Rust doesn&#39;t have such a method because nobody wants it. A <code>sort</code> for <code>RandomAccessIterator</code> might make sense, though, if people had reason for it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1433312275, "post_id": 30599665, "comment_id": 49291183, "body": "@wspeirs: The problem with theory and practice is that they are only identical in theory. In this case, while you can indeed get O(N log N) complexity with a linked-list, in practice it&#39;s generally slow because of cache misses and constant factors. C++ provides a <code>list.sort()</code> because <code>std::sort</code> requires random-access iterators thus a specialized version was required; but then C++ also provides <code>list.size()</code> which prevented O(1) splicing, so I am not sure it&#39;s a good idea."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1433343122, "post_id": 30599665, "comment_id": 49313083, "body": "@Veedrac We have yet to find a way to make a <code>RandomAccessIterator</code>-like abstraction work to allow sorting. The current RAI give read-only access."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433260723, "post_id": 30600173, "comment_id": 49270397, "body": "The only thing I am worried about here is that consuming then re-allocating the list implies free-ing/re-allocating memory. I am wondering if the work in the vector could be <i>proxied</i>, ie, instead of transferring the list elements, you put references in the vector, and then sorting the vector actually mutates the list elements in place... or at the very least, instead of consuming the list you replace its elements by &quot;dummies&quot; and then replace the dummies again by the sorted values."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433261011, "post_id": 30600173, "comment_id": 49270602, "body": "Yes, you&#39;re right about reallocating. I think something like <code>read_into_vec&lt;T&gt;(list: &amp;mut LinkedList&lt;T&gt;, vec: &amp;mut Vec&lt;T&gt;)</code> unsafe function and its counterpart <code>read_into_list&lt;T&gt;(vec: &amp;mut Vec&lt;T&gt;, list: &amp;mut LinkedList&lt;T&gt;)</code> (also unsafe), which move elements around without freeing them, could work, but one should be very careful around panics and destructors here."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433261145, "post_id": 30600173, "comment_id": 49270681, "body": "Also proxying would ruin CPU cache-based speedup since it would need to go through a double indirection to access list elements."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433265206, "post_id": 30600173, "comment_id": 49273256, "body": "if &#39;T: Copy&#39; then you can only do one allocation when creating the vec, and then afterwards just copy the vec&#39;s values over the linked lists&#39;s values"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1433258479, "last_edit_date": 1495535629, "creation_date": 1433258479, "answer_id": 30600173, "question_id": 30599665, "link": "https://stackoverflow.com/questions/30599665/how-can-i-sort-a-linkedlist-with-just-the-standard-library/30600173#30600173", "title": "How can I sort a LinkedList with just the standard library?", "body": "<p>I don't think there is a built-in way to do it. However, you can move the list contents into a <code>Vec</code>, sort it and turn it back into a linked list:</p>\n\n<pre><code>let mut vec: Vec&lt;_&gt; = list.into_iter().collect();\nvec.sort();\nlet list: LinkedList&lt;_&gt; = vec.into_iter().collect();\n</code></pre>\n\n<p>This idea is not even remotely as bad as it may seem - see <a href=\"https://stackoverflow.com/a/1525419/788207\">here</a>. While relatively fast algorithms for sorting a linked list <em>do</em> exist, they won't give you as much of cache performance as flat array sorting may do.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1471424469, "last_edit_date": 1495540519, "creation_date": 1471423779, "answer_id": 38992020, "question_id": 30599665, "link": "https://stackoverflow.com/questions/30599665/how-can-i-sort-a-linkedlist-with-just-the-standard-library/38992020#38992020", "title": "How can I sort a LinkedList with just the standard library?", "body": "<p>See <a href=\"https://stackoverflow.com/questions/7685\">this question</a>, its quite similar but not language spesific.</p>\n\n<hr>\n\n<p>A while ago I investigated this topic (using C, but applies to Rust too).</p>\n\n<p>Besides converting to a vector &amp; sorting, then converting back to a linked list. Merge-sort is typically the best method to sort a linked list.</p>\n\n<p>The same method can be used both for double and single linked lists <em>(there is no advantage to having links in both directions)</em>.</p>\n\n<p>Here is an example, <a href=\"https://stackoverflow.com/a/27663998/432509\">originally from this answer</a>, which I <a href=\"https://gist.github.com/ideasman42/5921b0edfc6aa41a9ce0\" rel=\"nofollow noreferrer\">ported to C</a>.</p>\n\n<p>This is a nice example of merge-sort, however after some further investigation I found <a href=\"https://raw.githubusercontent.com/mono/mono/3baee55f958f6695d812ade649a407c2e920c19e/eglib/src/sort.frag.h\" rel=\"nofollow noreferrer\">Mono's eglib mergesort</a> to be more efficient, especially when the list is already partially sorted.</p>\n\n<p>Here is a <a href=\"https://developer.blender.org/D1346?id=4378\" rel=\"nofollow noreferrer\">portable version of it</a>.</p>\n\n<p>It shouldn't be too difficult to port this from C to Rust.</p>\n"}], "owner": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 789, "favorite_count": 1, "accepted_answer_id": 30600173, "answer_count": 2, "score": 7, "last_activity_date": 1471424469, "creation_date": 1433257165, "last_edit_date": 1433259484, "question_id": 30599665, "link": "https://stackoverflow.com/questions/30599665/how-can-i-sort-a-linkedlist-with-just-the-standard-library", "title": "How can I sort a LinkedList with just the standard library?", "body": "<p><code>Vec</code> provides a sort method (through <code>Deref</code> implementation), but <code>LinkedList</code> does not. Is there a generic algorithm somewhere in the Rust standard library that allows sorting of <code>LinkedList</code>s?</p>\n"}, {"tags": ["rust", "mutable", "borrow-checker"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1433231673, "post_id": 30590341, "comment_id": 49249697, "body": "This is explained in the book: <a href=\"http://doc.rust-lang.org/book/references-and-borrowing.html#&amp;mut-references\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "edited": false, "score": 0, "creation_date": 1433234118, "post_id": 30590521, "comment_id": 49251075, "body": "Thanks. I had <code>&amp;mut HashMap</code>, but couldn&#39;t get it to work. I obviously gave up to soon. Thanks for the alt solution as well. Its useful to know different approaches"}, {"owner": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "edited": false, "score": 0, "creation_date": 1433244984, "post_id": 30590521, "comment_id": 49258261, "body": "Incidentally, @ker, I&#39;ve benchmarked your version against mine. It looks like your approach takes marginally longer. Not really worth anything in the real world, but perhaps interesting. you can checkout my code on <a href=\"https://www.github.com/gevious/rust\" rel=\"nofollow noreferrer\">github</a> if you want to run the benchmarks yourself"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "edited": false, "score": 0, "creation_date": 1433251342, "post_id": 30590521, "comment_id": 49263102, "body": "yea, I&#39;d have assumed it to be slower for such a simple problem. Imho that is the compilers&#39; duty though :)"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "edited": false, "score": 0, "creation_date": 1433252858, "post_id": 30590521, "comment_id": 49264326, "body": "you can also use a <code>Vec</code> instead of a <code>HashMap</code>, since you know that you&#39;ll always compute all values up to the final value and never miss one in between: <a href=\"http://is.gd/wCSY3f\" rel=\"nofollow noreferrer\">PlayPen</a>, takes around 20% of the computation time of the <code>HashMap</code> version, but most likely the counting version will always be the fastest without tail call optimizations"}, {"owner": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "edited": false, "score": 0, "creation_date": 1433312152, "post_id": 30590521, "comment_id": 49291119, "body": "There are definitely better solutions when thinking about efficiency. I was just trying to optimize the recursive algorithm. I guess using a vec would work just as well. Nice suggestion."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 9, "last_activity_date": 1503755842, "last_edit_date": 1503755842, "creation_date": 1433231966, "answer_id": 30590521, "question_id": 30590341, "link": "https://stackoverflow.com/questions/30590341/cannot-borrow-immutable-borrowed-hashmap-cache-as-mutable-in-a-recursive-fibonac/30590521#30590521", "title": "Cannot borrow immutable borrowed HashMap cache as mutable in a recursive Fibonacci implementation", "body": "<p>You declared the <code>map</code> argument to <code>f</code> as <code>&amp;HashMap&lt;u32, u64&gt;</code>, which is an immutable reference that only allows you to call <code>get</code> and other functions that do not modify the <code>HashMap</code>. Use <code>&amp;mut HashMap&lt;u32, u64&gt;</code> as the type of <code>map</code> to require a reference that allows mutation. This also requires you to annotate the call site with <code>&amp;mut map</code> instead of <code>&amp;map</code>.</p>\n\n<p>Personally I'd use a different approach using ownership transfer instead of references. But everyone has their own style.</p>\n\n<pre><code>pub fn fib_hash(n: u32) -&gt; u64 {\n    // This is the engine which recurses saving each value in the map\n    fn f(map: HashMap&lt;u32, u64&gt;, n: u32) -&gt; (HashMap&lt;u32, u64&gt;, u64) {\n        if let Some(&amp;number) = map.get(&amp;n) {\n            return (map, number);\n        }\n        let (map, a) = f(map, n - 1);\n        let (mut map, b) = f(map, n - 2);\n        let res = a + b;\n        map.insert(n, res);\n        (map, res)\n    }\n    let mut map = HashMap::new();\n    map.insert(0, 0);\n    map.insert(1, 1);\n    map.insert(2, 1);\n    f(map, n).1\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2e3546d4d52f0a53c182fadb0e530ad6&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1555685891, "post_id": 55670742, "comment_id": 98202034, "body": "his... is already what the other answer says: <i>Use <code>&amp;mut HashMap&lt;u32, u64&gt;</code> as the type of <code>map</code></i>."}], "tags": [], "owner": {"reputation": 466, "user_id": 11357398, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea60f089648dc83dd7ffc30d8393f278?s=128&d=identicon&r=PG&f=1", "display_name": "bitbangs", "link": "https://stackoverflow.com/users/11357398/bitbangs"}, "is_accepted": false, "score": 2, "last_activity_date": 1555685860, "last_edit_date": 1555685860, "creation_date": 1555198182, "answer_id": 55670742, "question_id": 30590341, "link": "https://stackoverflow.com/questions/30590341/cannot-borrow-immutable-borrowed-hashmap-cache-as-mutable-in-a-recursive-fibonac/55670742#55670742", "title": "Cannot borrow immutable borrowed HashMap cache as mutable in a recursive Fibonacci implementation", "body": "<p>The trick is making <code>map</code> a mutable reference in the parameter list (and using lifetimes explicitly):</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn fib&lt;'a&gt;(n: u32, memo: &amp;'a mut HashMap&lt;u32, u32&gt;) -&gt; u32 {\n    if n &lt;= 2 {\n        return 1;\n    }\n\n    return match memo.get(&amp;n) {\n        Some(&amp;sum) =&gt; sum,\n        None =&gt; {\n            let new_fib_sum = fib(n - 1, memo) + fib(n - 2, memo);\n            memo.insert(n, new_fib_sum);\n            new_fib_sum\n        }\n    };\n}\n\nfn main() {\n    let mut memo: HashMap&lt;u32, u32&gt; = HashMap::new();\n    let n = 10; //or user input...or whatever\n    print!(\"{}\", fib(n, &amp;mut memo));\n}\n</code></pre>\n"}], "owner": {"reputation": 3053, "user_id": 599656, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/C40YN.png?s=128&g=1", "display_name": "Gevious", "link": "https://stackoverflow.com/users/599656/gevious"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 968, "favorite_count": 1, "accepted_answer_id": 30590521, "answer_count": 2, "score": 4, "last_activity_date": 1555685860, "creation_date": 1433231416, "last_edit_date": 1555685807, "question_id": 30590341, "link": "https://stackoverflow.com/questions/30590341/cannot-borrow-immutable-borrowed-hashmap-cache-as-mutable-in-a-recursive-fibonac", "title": "Cannot borrow immutable borrowed HashMap cache as mutable in a recursive Fibonacci implementation", "body": "<p>I want to implement a Fibonacci series along with caching the already calculated results. I'm not sure this approach is even possible in Rust, but its the best I've come up with. Here's the code:</p>\n\n<pre><code>use std::collections::HashMap;\n\npub fn fib_hash(n: u32) -&gt; u64 {\n    let mut map: HashMap&lt;u32, u64&gt; = HashMap::new();\n\n    // This is the engine which recurses saving each value in the map\n    fn f(map: &amp;HashMap&lt;u32, u64&gt;, n: u32) -&gt; u64 {\n        let c = match map.get(&amp;n) {\n            Some(&amp;number) =&gt; number,\n            _ =&gt; 0,\n        };\n        if c != 0 {\n            return c;\n        }\n        let m = match n {\n            1 if n &lt; 1 =&gt; 0,\n            1...2 =&gt; 1,\n            _ =&gt; f(&amp;map, n - 1) + f(&amp;map, n - 2),\n        };\n        map.insert(n, m);\n        m\n    }\n    f(&amp;map, n)\n}\n</code></pre>\n\n<p>The idea is to have a \"global\" <code>HashMap</code> which can be reused. However, I'm guessing this is not really possible since we'll end up having multiple mutable borrowers for the map. This is the error I get</p>\n\n<p><strong>Rust 2015</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable borrowed content `*map` as mutable\n  --&gt; src/lib.rs:20:9\n   |\n7  |     fn f(map: &amp;HashMap&lt;u32, u64&gt;, n: u32) -&gt; u64 {\n   |               ------------------ use `&amp;mut HashMap&lt;u32, u64&gt;` here to make mutable\n...\n20 |         map.insert(n, m);\n   |         ^^^ cannot borrow as mutable\n</code></pre>\n\n<p><strong>Rust 2018</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow `*map` as mutable, as it is behind a `&amp;` reference\n  --&gt; src/lib.rs:20:9\n   |\n7  |     fn f(map: &amp;HashMap&lt;u32, u64&gt;, n: u32) -&gt; u64 {\n   |               ------------------ help: consider changing this to be a mutable reference: `&amp;mut std::collections::HashMap&lt;u32, u64&gt;`\n...\n20 |         map.insert(n, m);\n   |         ^^^ `map` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n</code></pre>\n\n<p>Can I use this approach in Rust? What would be the best solution to this problem?</p>\n"}, {"tags": ["templates", "generics", "rust"], "answers": [{"tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 5, "last_activity_date": 1433288614, "creation_date": 1433288614, "answer_id": 30608416, "question_id": 30589067, "link": "https://stackoverflow.com/questions/30589067/how-do-i-create-a-parameterised-type-from-a-macro/30608416#30608416", "title": "How do I create a parameterised type from a macro?", "body": "<p>After the keyword <code>struct</code>, the parser expects a ident token tree, which may be followed by <code>&lt;</code> and more; ty is definitely not what it wants (as an example of why it wouldn\u2019t work, <code>(Trait + Send + 'static)</code> is a valid ty, but <code>struct (Trait + Send + 'static);</code> clearly doesn\u2019t make sense).</p>\n\n<p>To support generics, you will need to produce more rules.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! make_struct {\n    ($name:ident) =&gt; {\n        struct $name;\n    };\n    ($name:ident&lt;$($t:ident: $constraint:ident),+&gt;) =&gt; {\n        struct $name&lt;$($t: $constraint),+&gt;;\n    }\n}\n</code></pre>\n\n<p>As you doubtless observe, making it support everything that the parser would accept in that location is nigh impossible; macro_rules isn\u2019t that clever. There is, however, this one weird trick (static code analysers hate it!) which allows you to take a sequence of token trees and treat it as a normal <code>struct</code> definition. It uses just a little bit more of indirection with macro_rules:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>macro_rules! item {\n    ($item:item) =&gt; ($item);\n}\nmacro_rules! make_struct {\n    ($name:ident) =&gt; {\n        struct $name;\n    };\n    ($name:ident&lt;$($tt:tt)*) =&gt; {\n        item!(struct $name&lt;$($tt)*;);\n    };\n}\n</code></pre>\n\n<p>Note that due to overzealousness, <code>ident</code> doesn\u2019t currently allow sequence repetition (<code>$(\u2026)</code>) to immediately follow it, so you\u2019ll be stuck putting some token tree between the <code>ident</code> and the repetition, e.g. <code>$name:ident, $($tt:tt)*</code> (yielding <code>AnotherStruct, &lt;T: SomeTrait&gt;</code>) or <code>$name:ident&lt;$(tt:tt)*</code> => <code>struct $name&lt;$($tt)*;</code>. The value of this is reduced by the fact that you can\u2019t pull it apart quite so easily to get at the individual generic types, which you will need to do for things like inserting <code>PhantomData</code> markers.</p>\n\n<p>You may find it helpful to passing the entire <code>struct</code> item; it passes as the <code>item</code> type (just like a <code>fn</code>, <code>enum</code>, <code>use</code>, <code>trait</code>, <em>&amp;c.</em> would do).</p>\n"}], "owner": {"reputation": 955, "user_id": 12421, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/5b4763a44ea18c555e7e415c4521c1fa?s=128&d=identicon&r=PG", "display_name": "Rob N", "link": "https://stackoverflow.com/users/12421/rob-n"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 468, "favorite_count": 1, "accepted_answer_id": 30608416, "answer_count": 1, "score": 12, "last_activity_date": 1433288614, "creation_date": 1433227166, "question_id": 30589067, "link": "https://stackoverflow.com/questions/30589067/how-do-i-create-a-parameterised-type-from-a-macro", "title": "How do I create a parameterised type from a macro?", "body": "<p>I have a macro that creates a struct and a heap of supporting functions and trait implementations. The interesting bit for this question is:</p>\n\n<pre><code>macro_rules! make_struct {\n    ($name: ident) =&gt; {\n        struct $name;\n    }\n}\n</code></pre>\n\n<p>This works as you'd expect:</p>\n\n<pre><code>make_struct!(MyStruct);\n</code></pre>\n\n<p>If I want to make a parameterised type however, I'm out of luck:</p>\n\n<pre><code>make_struct!(AnotherStruct&lt;T: SomeTrait&gt;);\n\ntest.rs:8:27: 8:28 error: no rules expected the token `&lt;`\ntest.rs:8 make_struct!(AnotherStruct&lt;T: SomeTrait&gt;);\n</code></pre>\n\n<p>The name of the struct is an <code>ident</code> so I can't just change that in the macro args (eg to <code>ty</code>):</p>\n\n<pre><code>test.rs:3:16: 3:21 error: expected ident, found `MyStruct`\ntest.rs:3         struct $name;\n</code></pre>\n\n<p>So how do I write this macro to be able to handle both? Or do I need to separate ones? In the latter case, what does the macro look like?</p>\n"}, {"tags": ["iterator", "rust", "optional"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 3, "last_activity_date": 1549328319, "last_edit_date": 1549328319, "creation_date": 1433226051, "answer_id": 30588756, "question_id": 30588549, "link": "https://stackoverflow.com/questions/30588549/how-do-i-convert-a-list-of-optiont-to-a-list-of-t-when-t-cannot-be-copied/30588756#30588756", "title": "How do I convert a list of Option&lt;T&gt; to a list of T when T cannot be copied?", "body": "<p>You don't need to copy the <code>Uncopyable</code> at all, if you are OK with using a <code>Vec</code> of references into the original <code>Vec</code>:</p>\n\n<pre><code>let nums: Vec&lt;&amp;Uncopyable&gt; = num_opts.iter().filter_map(|x| x.as_ref()).collect();\n//            ^ notice the &amp; before Uncopyable?\n</code></pre>\n\n<p>This may not do the trick for you if you have to work with an API that requires <code>&amp;[Uncopyable]</code>. In that case, use <a href=\"https://stackoverflow.com/a/30590082/155423\">Matthieu M.'s solution</a> which can be reduced to:</p>\n\n<pre><code>let nums: Vec&lt;Uncopyable&gt; = num_opts.into_iter().filter_map(|x| x).collect();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1433231095, "post_id": 30590082, "comment_id": 49249368, "body": "That&#39;s even better than my solution (unless you want to keep the original vector \u2013 you cannot have both). Note that you can still use <code>filter_map</code> to make it shorter"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433231553, "post_id": 30590082, "comment_id": 49249627, "body": "@llogiq: It&#39;s unclear to me whether Uncopyable also means non-Clone; so maybe the OP would accept a solution which uses <code>.cloned()</code>. Thanks for the nifty <code>filter_map</code>."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433232793, "post_id": 30590082, "comment_id": 49250319, "body": "You&#39;re welcome.  Thanks for the <code>into_iter()</code>."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 17, "last_activity_date": 1549328168, "last_edit_date": 1549328168, "creation_date": 1433230588, "answer_id": 30590082, "question_id": 30588549, "link": "https://stackoverflow.com/questions/30588549/how-do-i-convert-a-list-of-optiont-to-a-list-of-t-when-t-cannot-be-copied/30590082#30590082", "title": "How do I convert a list of Option&lt;T&gt; to a list of T when T cannot be copied?", "body": "<p>In Rust, when you need a value, you generally want to <em>move</em> the elements or <em>clone</em> them.</p>\n\n<p>Since move is more general, here <a href=\"https://play.rust-lang.org/?gist=7616e2e8426d9fb6fc44&amp;version=stable\" rel=\"noreferrer\">it is</a>, only two changes are necessary:</p>\n\n<pre><code>let nums: Vec&lt;Uncopyable&gt; = num_opts\n    .into_iter()\n//  ^~~~~~~~~~~~-------------- Consume vector, and iterate by value\n    .filter(|x| x.is_some())\n    .map(|x| x.unwrap())\n//       ^~~------------------ Take by value\n    .collect();\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/a/30588756/155423\">llogiq points out</a>, <code>filter_map</code> is specialized to filter out <code>None</code> already:</p>\n\n<pre><code>let nums: Vec&lt;Uncopyable&gt; = num_opts\n    .into_iter()\n//  ^~~~~~~~~~~~-------- Consume vector, and iterate by value\n    .filter_map(|x| x)\n//              ^~~----- Take by value\n    .collect();\n</code></pre>\n\n<p>And then it works (consuming <code>num_opts</code>).</p>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4481, "favorite_count": 0, "closed_date": 1549328359, "accepted_answer_id": 30590082, "answer_count": 2, "score": 12, "last_activity_date": 1549328319, "creation_date": 1433225196, "last_edit_date": 1549328199, "question_id": 30588549, "link": "https://stackoverflow.com/questions/30588549/how-do-i-convert-a-list-of-optiont-to-a-list-of-t-when-t-cannot-be-copied", "closed_reason": "Duplicate", "title": "How do I convert a list of Option&lt;T&gt; to a list of T when T cannot be copied?", "body": "<p>How do I take a <code>Vec&lt;Option&lt;T&gt;&gt;</code>, where <code>T</code> cannot be copied, and unwrap all the <code>Some</code> values?</p>\n\n<p>I run into an error in the <code>map</code> step. I'm happy to move ownership of the original list and \"throw away\" the <code>None</code>s.</p>\n\n<pre><code>#[derive(Debug)]\nstruct Uncopyable {\n    val: u64,\n}\n\nfn main() {\n    let num_opts: Vec&lt;Option&lt;Uncopyable&gt;&gt; = vec![\n        Some(Uncopyable { val: 1 }),\n        Some(Uncopyable { val: 2 }),\n        None,\n        Some(Uncopyable { val: 4 }),\n    ];\n\n    let nums: Vec&lt;Uncopyable&gt; = num_opts\n        .iter()\n        .filter(|x| x.is_some())\n        .map(|&amp;x| x.unwrap())\n        .collect();\n    println!(\"nums: {:?}\", nums);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=61e0b944a4930451d4f6501f3ff966ce\" rel=\"noreferrer\">Playground</a></p>\n\n<p>Which gives the error</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:17:15\n   |\n17 |         .map(|&amp;x| x.unwrap())\n   |               ^-\n   |               ||\n   |               |hint: to prevent move, use `ref x` or `ref mut x`\n   |               cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["parameters", "parameter-passing", "rust"], "comments": [{"owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "edited": false, "score": 4, "creation_date": 1433199962, "post_id": 30584703, "comment_id": 49239131, "body": "Your problem seems to be somewhere else. Copying your code to play.rust-lang.org works fine: <a href=\"http://is.gd/CSsphR\" rel=\"nofollow noreferrer\">is.gd/CSsphR</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433251410, "post_id": 30584868, "comment_id": 49263170, "body": "Generally, when I encounter such errors, I usually try to pull apart the statement into simple let-bindings, to make finding the error easier."}, {"owner": {"reputation": 159, "user_id": 4963162, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e220c71833add7a6d130a3a5519c850d?s=128&d=identicon&r=PG&f=1", "display_name": "Dani", "link": "https://stackoverflow.com/users/4963162/dani"}, "edited": false, "score": 0, "creation_date": 1433263103, "post_id": 30584868, "comment_id": 49271871, "body": "@Veedrac it was, effectively, a type error in the comparison. Thanks for the help."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": false, "score": 2, "last_activity_date": 1433200602, "creation_date": 1433200602, "answer_id": 30584868, "question_id": 30584703, "link": "https://stackoverflow.com/questions/30584703/passing-if-block-as-parameter/30584868#30584868", "title": "Passing if block as parameter", "body": "<p><code>v</code> is probably an <code>f32</code>, which means the comparison <code>v&gt;0</code> has a type error.<br>\nTry <code>v&gt;0.0</code> and <code>v&lt;0.0</code> instead.</p>\n"}], "owner": {"reputation": 159, "user_id": 4963162, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e220c71833add7a6d130a3a5519c850d?s=128&d=identicon&r=PG&f=1", "display_name": "Dani", "link": "https://stackoverflow.com/users/4963162/dani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1433200941, "creation_date": 1433199600, "last_edit_date": 1433200941, "question_id": 30584703, "link": "https://stackoverflow.com/questions/30584703/passing-if-block-as-parameter", "title": "Passing if block as parameter", "body": "<p>I'm trying to write a small test program in Rust, and, as almost everything can be an expression in this language, including <code>if</code> statements, I wanted to pass an <code>if-else</code> block as a parameter to the <code>println!</code> macro, like this:</p>\n\n<pre><code>println!(\"{} {} {}\", i.name, if v&gt;0 {\"owes\"} else{\"must receive\"}, if v&lt;0 {-v} else{v});\n</code></pre>\n\n<p>but I'm getting this error: </p>\n\n<pre><code>src/main.rs:34:38: 34:39 error: mismatched types:\n expected `f32`,\n    found `_`\n(expected f32,\n    found integral variable) [E0308]\nsrc/main.rs:34      println!(\"{} {} {}\", i.name, {if v&gt;0 {\"owes\"} else{\"must receive\"}}, if v&lt;0 {-v} else{v});\n</code></pre>\n\n<p>And the same error with the other <code>if-else</code> block, which I've omitted. As far as I've understood the concept, this should work because this <code>if-else</code> blocks are expressions which return the last values in each branch.</p>\n\n<p>Any help will be appreciated, thanks in advance.</p>\n"}, {"tags": ["rust", "addition"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1433180999, "post_id": 30579514, "comment_id": 49229875, "body": "Your code works <a href=\"http://is.gd/6M9BtE\" rel=\"nofollow noreferrer\">in the playpen</a>."}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 4, "creation_date": 1433186904, "post_id": 30579514, "comment_id": 49233118, "body": "Your error message indicates a completely different line than the one you&#39;ve indicated is causing the problem. <a href=\"http://stackoverflow.com/help/mcve\">stackoverflow.com/help/mcve</a>"}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "reply_to_user": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 0, "creation_date": 1433232002, "post_id": 30579514, "comment_id": 49249885, "body": "@BenjaminLindley, there is one line of code, are you OK? It could ONLY be that line."}, {"owner": {"reputation": 3892, "user_id": 1236045, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9cdfcff173a4487d2a73a29e177930ec?s=128&d=identicon&r=PG&f=1", "display_name": "Micha\u0142 Politowski", "link": "https://stackoverflow.com/users/1236045/micha%c5%82-politowski"}, "edited": false, "score": 3, "creation_date": 1433235993, "post_id": 30579514, "comment_id": 49252309, "body": "@JacobClark it seems there are at least 56 lines of code, and the one in the error message doesn&#39;t <b>at all</b> look like the one you claim to cause the problem. <a href=\"http://stackoverflow.com/help/mcve\">stackoverflow.com/help/mcve</a>"}, {"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 1, "creation_date": 1433270155, "post_id": 30579514, "comment_id": 49276141, "body": "If that&#39;s your only line, then the rust compiler has a pretty serious bug. You should file a bug report. It should be complaining about expecting an item, since an assignment statement cannot appear outside of a function. The error you should be getting is something like this: <code>src&#47;main.rs:1:1: 1:15 error: expected item, found &#39;total_duration&#39; src&#47;main.rs:1 total_duration = 0.925338 + 0.741495;</code>"}], "answers": [{"tags": [], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "is_accepted": false, "score": 4, "last_activity_date": 1433180063, "last_edit_date": 1433180063, "creation_date": 1433179750, "answer_id": 30579604, "question_id": 30579514, "link": "https://stackoverflow.com/questions/30579514/unable-to-add-two-f64-numbers-together/30579604#30579604", "title": "Unable to add two f64 numbers together", "body": "<p>It's probably because you mix <code>f64</code> with <code>f32</code>.\nYou may have to specify the type when you do this kind of additions:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let total_duration = 0.925338f64 + 0.741495f64;\n</code></pre>\n\n<p>You don't have to do this when you add two variables that already are type f64:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: f64 = 0.925338;\nlet y: f64 = 0.741495;\nlet total_duration = x + y;\n</code></pre>\n\n<p>I'm not getting an error though when using your code, is your compiler up to date?</p>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 391, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1433180942, "creation_date": 1433179471, "last_edit_date": 1433180942, "question_id": 30579514, "link": "https://stackoverflow.com/questions/30579514/unable-to-add-two-f64-numbers-together", "title": "Unable to add two f64 numbers together", "body": "<p>I have two <code>f64</code> numbers I wish to add together, however the following code produces an error. How can I go about adding these two floats together?</p>\n\n<p>Code:</p>\n\n<pre><code>total_duration = 0.925338 + 0.741495;\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>src/main.rs:56:26: 56:57 error: the trait `core::ops::Add&lt;_&gt;` is not implemented for the type `f64` [E0277]\nsrc/main.rs:56         total_duration = r.elapsed_time + total_duration;\n</code></pre>\n"}, {"tags": ["multithreading", "asynchronous", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1433161007, "post_id": 30573188, "comment_id": 49216438, "body": "you have unmatched brackets in your code"}], "answers": [{"comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433161861, "post_id": 30573374, "comment_id": 49217069, "body": "yes, dropping the <code>Arc&lt;Mutex&lt;..&gt;&gt;</code> is the way to go."}, {"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "edited": false, "score": 0, "creation_date": 1433161960, "post_id": 30573374, "comment_id": 49217124, "body": "I have tried dropping <code>Arc&lt;Mutex&lt;..&gt;&gt;</code> altogether, and I&#39;m now left with something along the lines of <code>let mut threads = Vec::new();</code> <code>threads.push(handle);</code> and <code>for t in threads.iter() {</code> but I am still seeing the ` error: cannot move out of borrowed content` on <code>t.join()</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1433162069, "post_id": 30573374, "comment_id": 49217210, "body": "you need <code>into_iter()</code> instead of <code>iter()</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1433162185, "post_id": 30573374, "comment_id": 49217302, "body": "on unstable rust, instead of using the <code>Option</code> trick, you can also use the <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.split_off\" rel=\"nofollow noreferrer\"><code>split_off</code></a> function or the <a href=\"https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.drain\" rel=\"nofollow noreferrer\"><code>drain</code></a> function on <code>Vec</code>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433162632, "post_id": 30573374, "comment_id": 49217632, "body": "Yeah, <code>drain()</code> would the most nice solution (except of dropping <code>Arc&lt;Mutex&lt;..&gt;&gt;</code>, of course) if it were stable."}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433271365, "post_id": 30573374, "comment_id": 49276815, "body": "It should also be possible to use simply <code>mem::swap()</code> or <code>mem::replace()</code> and passing it the reference to the object inside the <code>Mutex</code>. This should work on stable rust."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433285999, "post_id": 30573374, "comment_id": 49283644, "body": "@Vaelden, you still need to keep some value inside of the mutex, you can&#39;t leave it &quot;empty&quot;. So at least you need an <code>Option</code>, and <code>Option::take</code> is just a shortcut for <code>mem::replace(&amp;mut whatever, None)</code>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1433161255, "creation_date": 1433161255, "answer_id": 30573374, "question_id": 30573188, "link": "https://stackoverflow.com/questions/30573188/cannot-move-data-out-of-a-mutex/30573374#30573374", "title": "Cannot move data out of a Mutex", "body": "<p>Unfortunately, you can't do this directly. When <code>Mutex</code> consumes the data structure you fed to it, you can't get it back by value again. You can only get <code>&amp;mut</code> reference to it, which won't allow moving out of it. So even <code>into_iter()</code> won't work - it needs <code>self</code> argument which it can't get from <code>MutexGuard</code>.</p>\n\n<p>There is a workaround, however. You can use <code>Arc&lt;Mutex&lt;Option&lt;Vec&lt;_&gt;&gt;&gt;&gt;</code> instead of <code>Arc&lt;Mutex&lt;Vec&lt;_&gt;&gt;&gt;</code> and then just <a href=\"http://doc.rust-lang.org/std/option/enum.Option.html#method.take\"><code>take()</code></a> the value out of the mutex:</p>\n\n<pre><code>for t in threads.lock().unwrap().take().unwrap().into_iter() {\n}\n</code></pre>\n\n<p>Then <code>into_iter()</code> will work just fine as the value is moved into the calling thread.</p>\n\n<p>Of course, you will need to construct the vector and push to it appropriately:</p>\n\n<pre><code>let threads = Arc::new(Mutex::new(Some(Vec::new())));\n...\nthreads.lock().unwrap().as_mut().unwrap().push(handle);\n</code></pre>\n\n<p>However, the best way is to just drop the <code>Arc&lt;Mutex&lt;..&gt;&gt;</code> layer altogether (of course, if this value is not used from other threads).</p>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 4025712, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-6cBP9XgPOH8/AAAAAAAAAAI/AAAAAAAAAOE/V-Whab84ZV4/photo.jpg?sz=128", "display_name": "sai umesh", "link": "https://stackoverflow.com/users/4025712/sai-umesh"}, "is_accepted": false, "score": 0, "last_activity_date": 1587003860, "creation_date": 1587003860, "answer_id": 61241697, "question_id": 30573188, "link": "https://stackoverflow.com/questions/30573188/cannot-move-data-out-of-a-mutex/61241697#61241697", "title": "Cannot move data out of a Mutex", "body": "<p>while the drain is a good solution, you can also do the following thing </p>\n\n<pre><code>// with a copy \nlet built_words: Arc&lt;Mutex&lt;Vec&lt;String&gt;&gt;&gt; = Arc::new(Mutex::new(vec![]));\nlet result: Vec&lt;String&gt; = built_words.lock().unwrap().clone();\n\n// using drain \nlet mut locked_result = built_words.lock().unwrap();\nlet mut result: Vec&lt;String&gt; = vec![];\nresult.extend(locked_result.drain(..));\n</code></pre>\n\n<p>I would prefer to clone the data to get the original value. Not sure if it has any performance overhead. </p>\n"}, {"tags": [], "owner": {"reputation": 1088, "user_id": 1114272, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c1e2d6f9db01edca31a0756cb49fd371?s=128&d=identicon&r=PG", "display_name": "Ethan", "link": "https://stackoverflow.com/users/1114272/ethan"}, "is_accepted": false, "score": 2, "last_activity_date": 1587765926, "creation_date": 1587765926, "answer_id": 61418161, "question_id": 30573188, "link": "https://stackoverflow.com/questions/30573188/cannot-move-data-out-of-a-mutex/61418161#61418161", "title": "Cannot move data out of a Mutex", "body": "<p>As referenced in <a href=\"https://stackoverflow.com/questions/29177449/how-to-take-ownership-of-t-from-arcmutext\">How to take ownership of T from Arc&lt;Mutex&lt;T&gt;&gt;?</a> this is now possible to do without any trickery in Rust using Arc::try_unwrap and Mutex.into_inner()</p>\n\n<pre><code>    let threads = Arc::new(Mutex::new(Vec::new()));\n\n    for _x in 0..100 {\n         let handle = thread::spawn(move || {\n              println!(\"{}\", _x);\n         });\n\n         threads.lock().unwrap().push(handle);\n    }\n\n    let threads_unwrapped: Vec&lt;JoinHandle&lt;_&gt;&gt; = Arc::try_unwrap(threads).unwrap().into_inner().unwrap();\n    for t in threads_unwrapped.into_iter() {\n         t.join().unwrap();\n    }\n</code></pre>\n\n<p>Play around with it in this playground to verify.</p>\n\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9d5635e7f778bc744d1fb855b92db178\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9d5635e7f778bc744d1fb855b92db178</a></p>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2028, "favorite_count": 0, "accepted_answer_id": 30573374, "answer_count": 3, "score": 5, "last_activity_date": 1587765926, "creation_date": 1433160694, "last_edit_date": 1433161513, "question_id": 30573188, "link": "https://stackoverflow.com/questions/30573188/cannot-move-data-out-of-a-mutex", "title": "Cannot move data out of a Mutex", "body": "<p>Consider the following code example, I have a vector of <code>JoinHandlers</code> in which I need it iterate over to join back to the main thread, however, upon doing so I am getting the error <code>error: cannot move out of borrowed content</code>.</p>\n\n<pre><code>let threads = Arc::new(Mutex::new(Vec::new()));\n\nfor _x in 0..100 {\n     let handle = thread::spawn(move || {\n          //do some work\n     }\n\n     threads.lock().unwrap().push((handle));\n}\n\nfor t in threads.lock().unwrap().iter() {\n     t.join();\n}\n</code></pre>\n"}, {"tags": ["multithreading", "asynchronous", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1433160255, "post_id": 30572728, "comment_id": 49215984, "body": "please provide an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>. Your code is missing all explanations about which libraries you are using and contains information irrelevant to your problem."}], "answers": [{"comments": [{"owner": {"reputation": 2504, "user_id": 1831512, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/fzxrM.png?s=128&g=1", "display_name": "stackunderflow", "link": "https://stackoverflow.com/users/1831512/stackunderflow"}, "edited": false, "score": 0, "creation_date": 1614687486, "post_id": 30573108, "comment_id": 117455756, "body": "I can&#39;t call <code>.iter()</code> after <code>unwrap()</code>."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 9, "last_activity_date": 1433160458, "creation_date": 1433160458, "answer_id": 30573108, "question_id": 30572728, "link": "https://stackoverflow.com/questions/30572728/unable-to-iterate-over-arc-mutex/30573108#30573108", "title": "Unable to iterate over Arc Mutex", "body": "<p>First, you don't need <code>threads</code> to be contained in <code>Arc</code> in <code>Mutex</code>. You can keep it just <code>Vec</code>:</p>\n\n<pre><code>let mut threads = Vec::new();\n...\nthreads.push(handle);\n</code></pre>\n\n<p>This is so because you don't share <code>threads</code> between, well, threads. You only access it from the main thread.</p>\n\n<p>Second, if for some reason you <em>do</em> need to keep it in <code>Arc</code> (e.g. if your example does not reflect the actual structure of your program which is more complex), then you need to lock the mutex to obtain a reference to the contained vector, just as you do when pushing:</p>\n\n<pre><code>for t in threads.lock().unwrap().iter() {\n    ...\n}\n</code></pre>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1550, "favorite_count": 1, "accepted_answer_id": 30573108, "answer_count": 1, "score": 2, "last_activity_date": 1433160458, "creation_date": 1433159341, "last_edit_date": 1433160050, "question_id": 30572728, "link": "https://stackoverflow.com/questions/30572728/unable-to-iterate-over-arc-mutex", "title": "Unable to iterate over Arc Mutex", "body": "<p>Consider the following code, I append each of my threads to a Vector in order to join them up to the main thread after I have spawned each thread, however I am not able to call <code>iter()</code> on my vector of JoinHandlers.</p>\n\n<p>How can I go about doing this?</p>\n\n<pre><code>fn main() {\n    let requests = Arc::new(Mutex::new(Vec::new()));\n    let threads = Arc::new(Mutex::new(Vec::new()));\n\n    for _x in 0..100 {\n        println!(\"Spawning thread: {}\", _x);\n\n        let mut client = Client::new();\n        let thread_items = requests.clone();\n\n        let handle = thread::spawn(move || {\n            for _y in 0..100 {\n                println!(\"Firing requests: {}\", _y);\n\n                let start = time::precise_time_s();\n\n                let _res = client.get(\"http://jacob.uk.com\")\n                    .header(Connection::close()) \n                    .send().unwrap();\n\n                let end = time::precise_time_s();\n\n                thread_items.lock().unwrap().push((Request::new(end-start)));\n            }\n        });\n\n        threads.lock().unwrap().push((handle));\n    }\n\n    // src/main.rs:53:22: 53:30 error: type `alloc::arc::Arc&lt;std::sync::mutex::Mutex&lt;collections::vec::Vec&lt;std::thread::JoinHandle&lt;()&gt;&gt;&gt;&gt;` does not implement any method in scope named `unwrap`\n    for t in threads.iter(){\n        println!(\"Hello World\");\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "lint"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 4, "last_activity_date": 1433225394, "last_edit_date": 1433225394, "creation_date": 1433153766, "answer_id": 30570891, "question_id": 30569766, "link": "https://stackoverflow.com/questions/30569766/how-to-look-up-a-method-within-the-compiler-given-the-type-and-a-name/30570891#30570891", "title": "How to look up a method within the compiler given the type and a name?", "body": "<p>I got it! The problem was that I trying to get a DefId for the <em>type</em>, not for the <code>impl</code>. Going through <code>cx.tcx.inherent_impls.get(id)</code> gave me a vec of <code>DefId</code>s for inherent impls, which I could then query via the <code>impl_items</code> lookup I already implemented.</p>\n\n<p>Look in <a href=\"https://github.com/Manishearth/rust-clippy/blob/7f5891184d55c3d01f57cf480d718e19f9f8268d/src/len_zero.rs#L119\" rel=\"nofollow\">rust-clippy/src/len_zero.rs</a> for an example implementation. Edit: Note that the implementation is <em>O(N)</em> where <em>N</em> is the number of methods of the type (either direct <code>impl</code> or by traits) \u2013 perhaps rustc will someday allow a faster lookup...</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 1, "accepted_answer_id": 30570891, "answer_count": 1, "score": 9, "last_activity_date": 1433225394, "creation_date": 1433150231, "last_edit_date": 1433166408, "question_id": 30569766, "link": "https://stackoverflow.com/questions/30569766/how-to-look-up-a-method-within-the-compiler-given-the-type-and-a-name", "title": "How to look up a method within the compiler given the type and a name?", "body": "<p>I have a lint that warns on <code>x.len() == 0</code>, suggesting to use <code>x.is_empty()</code> instead. However, I wanted to get rid of the false positives if <code>x</code> has no <code>is_empty(self: &amp;Self)</code> method.</p>\n\n<p>Thus began the quest to look up methods from within rustc.</p>\n\n<p>First step, get the <code>x</code>: I matched the <code>node</code> of an <code>Expr</code> to <code>ExprMethodCall(ref method, _, ref args)</code> (and made sure that <code>args.len() == 1</code> and <code>method.node.as_str() == \"len\"</code>) and just used <code>&amp;*args[0]</code>, which I will call <code>expr</code> from now on.</p>\n\n<p>Next step, get the type of <code>x</code>: This can easily be done using <code>rustc::middle::ty::expr_ty(cx.tcx, expr)</code>. Note that this is a <code>rustc::middle::ty::Ty</code> (and not a <code>syntax::ast::Ty</code>, which led to some confusion).</p>\n\n<p>To look up the methods, the <code>ctxt.impl_items</code> and <code>ctxt.trait_item_def_ids</code> looked promising, so I get the <code>DefId</code> for my type with <code>rustc::middle::ty::ty::ty_to_def_id(ty)</code> and try to get the ids. However, this approach has a few problems: </p>\n\n<p>For</p>\n\n<pre><code>let x = [1, 2];\nx.len() == 2 // &lt;- lookee here\n</code></pre>\n\n<p>I simply have no DefId. That is ok though, because we have a <code>ty_vec</code> in that case, and <code>std::vec::Vec</code> is known to have both <code>len()</code> and <code>is_empty()</code>.</p>\n\n<p>The good message is that the <code>ctxt.trait_item_def_ids</code> <em>has</em> a suitable entry for a trait with a <code>is_empty</code> method. Alas, for the following example:</p>\n\n<pre><code>struct One;\nimpl One { fn is_empty(self: &amp;Self) -&gt; bool { false } }\n</code></pre>\n\n<p>I got no <code>TraitOrItemId</code> for any impl item, which is a bit unfortunate. Can someone privy to rustc help me find my impl items?</p>\n"}, {"tags": ["regex", "iterator", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1433158184, "post_id": 30569358, "comment_id": 49214696, "body": "If you just need one set of captures, then use <code>retention_matcher.captures(ts)</code>. Its contract appears to exactly match your use case. (Indeed, your regex is completely anchored, so it could only ever produce one match for a particular string.) No need to muck around with iterators. :-)"}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1433149974, "creation_date": 1433149974, "answer_id": 30569699, "question_id": 30569358, "link": "https://stackoverflow.com/questions/30569358/regex-capture-iterator-method-moves-iterator/30569699#30569699", "title": "Regex capture iterator method moves iterator", "body": "<p>I suspect that you're thinking of <code>iter</code> as being an abstract sequence of captures.  It is more accurate to think of it as representing a <em>position within</em> an abstract sequence of captures.  The basic thing any iterator knows to do is advance to the next item in a sequence; that is, you can advance the position and get the next element in the sequence.</p>\n\n<p><code>count</code> moves <code>iter</code> because in order to count how many elements are in the sequence, it has to generate the whole sequence.  This <em>necessarily</em> modifies the iterator by stepping it through the whole sequence.  It moves because after calling <code>count</code>, the iterator really isn't useful any more.  By definition, it must be past the end of the sequence!</p>\n\n<p>Sadly, it doesn't look like the iterator type in question (<a href=\"http://doc.rust-lang.org/regex/regex/struct.FindCaptures.html\"><code>FindCaptures</code></a>) is <code>Clone</code>, so you can't just make a copy of it.</p>\n\n<p>The solution would be to restructure your code to <em>not</em> call <code>count</code>.  If you want to get the first element and ensure there are no more, the simplest pattern would be:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut iter = ...;\nif let Some(regex_match) = iter.next() {\n    // Ensure that there is no next element.\n    assert_eq!(iter.next(), None);\n\n    // process regex_match ...\n}\n</code></pre>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 243, "favorite_count": 0, "accepted_answer_id": 30569699, "answer_count": 1, "score": 6, "last_activity_date": 1433166422, "creation_date": 1433148878, "last_edit_date": 1433166422, "question_id": 30569358, "link": "https://stackoverflow.com/questions/30569358/regex-capture-iterator-method-moves-iterator", "title": "Regex capture iterator method moves iterator", "body": "<p>I am processing simple strings of the format \"1s:1d\", \"100:5000\", etc with this regex:</p>\n\n<pre><code>let retention_matcher = regex::Regex::new({r\"^(\\d+)([smhdy])?:(\\d+)([smhdy])?$\"}).unwrap();\n</code></pre>\n\n<p>I know this regex should only match once so I want to run the regex for captures and check the number of captures.</p>\n\n<pre><code>    let iter = retention_matcher.captures_iter(ts);\n    let count = iter.count();\n    println!(\"iter.count(): {}\", count);\n\n    let _ : Vec&lt;Option&lt;(u64,u64)&gt;&gt; = iter.map(|regex_match| {\n        let retval = retention_spec_to_pair(regex_match);\n        println!(\"precision_opt: {:?}\", retval);\n        retval\n    }).collect();\n</code></pre>\n\n<p>The issue is that the <code>count()</code> method moves <code>iter</code> and I can no longer use it.</p>\n\n<pre><code>src/bin/whisper.rs:147:42: 147:46 error: use of moved value: `iter`\nsrc/bin/whisper.rs:147         let _ : Vec&lt;Option&lt;(u64,u64)&gt;&gt; = iter.map(|regex_match| {\n                                                                ^~~~\nsrc/bin/whisper.rs:144:21: 144:25 note: `iter` moved here because it has type `regex::re::FindCaptures&lt;'_, '_&gt;`, which is non-copyable\nsrc/bin/whisper.rs:144         let count = iter.count();\n</code></pre>\n\n<p>This does not make sense to me. Should the <code>count</code> method just return a copyable <code>usize</code> value and not move <code>iter</code>? How can I work around this issue?</p>\n"}, {"tags": ["multithreading", "asynchronous", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 3, "creation_date": 1433147635, "post_id": 30568897, "comment_id": 49208290, "body": "One problem with not joining the threads at all is that (for non-daemons) the process dies when the main thread dies, so in OP&#39;s code the worker threads would be cut short."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 11, "last_activity_date": 1433151001, "last_edit_date": 1433151001, "creation_date": 1433147449, "answer_id": 30568897, "question_id": 30568572, "link": "https://stackoverflow.com/questions/30568572/why-are-my-rust-threads-not-running-in-parallel/30568897#30568897", "title": "Why are my Rust threads not running in parallel?", "body": "<p>Your culprit is this line:</p>\n\n<pre><code>handle.join().unwrap();\n</code></pre>\n\n<p>You execute a thread in the loop, and then right after starting the thread you <code>join</code> it into the main thread.</p>\n\n<p>What you could do, is to create a <code>Vec</code> and put all the handles in the vec. Then, in another loop, you <code>join</code> all the handles.</p>\n\n<p>Another possibility is to simply not join the threads, and let them exit naturally, but then you won't know when all of them are done. Which, as @delnan notes, might allow the main thread to exit before the spawned threads exit. This causes all the spawned threads to be killed instead of letting them run to termination.</p>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 582, "favorite_count": 0, "accepted_answer_id": 30568897, "answer_count": 1, "score": 8, "last_activity_date": 1569333756, "creation_date": 1433146155, "last_edit_date": 1569333756, "question_id": 30568572, "link": "https://stackoverflow.com/questions/30568572/why-are-my-rust-threads-not-running-in-parallel", "title": "Why are my Rust threads not running in parallel?", "body": "<p>I wish to spin up X threads which will fire X requests to the specified server within the code. Currently, my application is waiting for each thread and X requests to finish before spinning up the next one.</p>\n\n<p>How can I go about doing this async?</p>\n\n<pre><code>extern crate hyper;\nextern crate time;\n\nuse hyper::header::Connection;\nuse hyper::Client;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse time::*;\n\nstruct Request {\n    elapsed_time: f64,\n}\n\nimpl Request {\n    fn new(elapsed_time: f64) -&gt; Request {\n        Request {\n            elapsed_time: elapsed_time,\n        }\n    }\n}\n\nfn main() {\n    let requests = Arc::new(Mutex::new(Vec::new()));\n\n    for _x in 0..100 {\n        println!(\"Spinning up thread...\");\n\n        let mut client = Client::new();\n        let thread_items = requests.clone();\n\n        let handle = thread::spawn(move || {\n            for _x in 0..100 {\n                println!(\"Firing the request\");\n                let start = time::precise_time_s();\n\n                let _res = client\n                    .get(\"http://jacob.uk.com\")\n                    .header(Connection::close())\n                    .send()\n                    .unwrap();\n\n                let end = time::precise_time_s();\n\n                thread_items\n                    .lock()\n                    .unwrap()\n                    .push((Request::new(end - start)));\n            }\n        });\n\n        handle.join().unwrap();\n    }\n}\n</code></pre>\n\n<p>Program output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Spinning up thread...\nFiring request\nFiring request\nFiring request\nFiring request\nSpinning up thread...\nFiring request\nFiring request\nFiring request\nFiring request\nSpinning up thread...\nFiring request\nFiring request\nFiring request\nFiring request\n</code></pre>\n"}, {"tags": ["pointers", "rust"], "answers": [{"comments": [{"owner": {"reputation": 123, "user_id": 4960132, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8208c41e7f115fa6503838ca9fe8c86?s=128&d=identicon&r=PG", "display_name": "auspicious_day", "link": "https://stackoverflow.com/users/4960132/auspicious-day"}, "edited": false, "score": 0, "creation_date": 1433306709, "post_id": 30566593, "comment_id": 49288882, "body": "Thanks for your answer. When you say &quot;*x, for example, will call deref and dereference the result&quot; I take it you mean literally two things are occurring, first a call to deref to get a (&amp;) reference, then &#39;dereferencing&#39; that to gain access to the char."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 9, "last_activity_date": 1521212575, "last_edit_date": 1521212575, "creation_date": 1433138589, "answer_id": 30566593, "question_id": 30566481, "link": "https://stackoverflow.com/questions/30566481/why-does-asserting-on-the-result-of-derefderef-fail-with-a-type-mismatch/30566593#30566593", "title": "Why does asserting on the result of Deref::deref fail with a type mismatch?", "body": "<p>First, let's spell out the generic types for your specific example: <code>'a'</code> is <code>char</code>, so we have:</p>\n\n<pre><code>impl Deref for DerefExample&lt;char&gt; {\n    type Target = char;\n\n    fn deref(&amp;self) -&gt; &amp;char {\n        &amp;self.value\n    }\n}\n</code></pre>\n\n<p>Notably, the return type of <code>deref</code> is a <em>reference</em> to a <code>char</code>. Thus it shouldn't be surprising that, when you use just <code>x.deref()</code>, the result is a <code>&amp;char</code> rather than a <code>char</code>. Remember, at that point <code>deref</code> is just another normal method \u2014 it's just implicitly invoked as <em>part</em> of some language-provided special syntax. <code>*x</code>, for example, will call <code>deref</code> and dereference the result, when applicable. <code>x.char_method()</code> and <code>fn_taking_char(&amp;x)</code> will also call <code>deref</code> some number of times and then do something further with the result.</p>\n\n<p>Why does <code>deref</code> return a reference to begin with, you ask? Isn't that circular? Well, no, it isn't circular: it <em>reduces</em> library-defined smart pointers to the built-in type <code>&amp;T</code> which the compiler already knows how to dereference. By returning a reference instead of a value, you avoid a copy/move (which may not always be possible!) and allow <code>&amp;*x</code> (or <code>&amp;x</code> when it's coerced) to refer to the <em>actual</em> <code>char</code> that <code>DerefExample</code> holds rather than a temporary copy.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/31624743/155423\">Why is the return type of Deref::deref itself a reference?</a></li>\n</ul>\n"}], "owner": {"reputation": 123, "user_id": 4960132, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8208c41e7f115fa6503838ca9fe8c86?s=128&d=identicon&r=PG", "display_name": "auspicious_day", "link": "https://stackoverflow.com/users/4960132/auspicious-day"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1277, "favorite_count": 0, "accepted_answer_id": 30566593, "answer_count": 1, "score": 12, "last_activity_date": 1521212575, "creation_date": 1433138117, "last_edit_date": 1521212411, "question_id": 30566481, "link": "https://stackoverflow.com/questions/30566481/why-does-asserting-on-the-result-of-derefderef-fail-with-a-type-mismatch", "title": "Why does asserting on the result of Deref::deref fail with a type mismatch?", "body": "<p>The following is the <a href=\"https://doc.rust-lang.org/book/first-edition/deref-coercions.html\" rel=\"nofollow noreferrer\"><code>Deref</code> example from <em>The Rust Programming Language</em></a> except I've added another assertion. </p>\n\n<p>Why does the <code>assert_eq</code> with the <code>deref</code> also equal <code>'a'</code>? Why do I need a <code>*</code> once I've manually called <code>deref</code>?</p>\n\n<pre><code>use std::ops::Deref;\n\nstruct DerefExample&lt;T&gt; {\n    value: T,\n}\n\nimpl&lt;T&gt; Deref for DerefExample&lt;T&gt; {\n    type Target = T;\n\n    fn deref(&amp;self) -&gt; &amp;T {\n        &amp;self.value\n    }\n}\n\nfn main() {\n    let x = DerefExample { value: 'a' };\n    assert_eq!('a', *x.deref()); // this is true\n    // assert_eq!('a', x.deref()); // this is a compile error\n    assert_eq!('a', *x); // this is also true\n    println!(\"ok\");\n}\n</code></pre>\n\n<p>If I uncomment the line, I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:18:5\n   |\n18 |     assert_eq!('a', x.deref());\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected char, found &amp;char\n   |\n   = note: expected type `char`\n              found type `&amp;char`\n   = help: here are some functions which might fulfill your needs:\n           - .to_ascii_lowercase()\n           - .to_ascii_uppercase()\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n"}, {"tags": ["multithreading", "concurrency", "rust"], "comments": [{"owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433114687, "post_id": 30563502, "comment_id": 49198623, "body": "The client I am not too bothered about, in this case I&#39;m more concerned with the <code>requests</code> vector."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1433117057, "post_id": 30563502, "comment_id": 49199121, "body": "Your example is not nearly sufficient enough. We have <i>no way</i> of telling what the type of <code>client</code> or <code>results</code> are, for example, which is <b>very important to help you</b>. Please strive to create an <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a>, preferably one that compiles on <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">the playpen</a>."}], "answers": [{"tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 5, "last_activity_date": 1433117370, "last_edit_date": 1433117370, "creation_date": 1433117121, "answer_id": 30563993, "question_id": 30563502, "link": "https://stackoverflow.com/questions/30563502/copying-in-vectors-to-a-thread/30563993#30563993", "title": "Copying in Vectors to a Thread", "body": "<p>Firstly, minimal examples are really useful:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    let mut items = Vec::new();\n\n    for _ in 0..100 {\n        thread::spawn(move || {\n            items.push(());\n        });\n    }\n}\n</code></pre>\n\n<p>So what's the problem here? Well, you're moving <code>items</code> into a closure 100 times - but you can only move it once!</p>\n\n<p>To share data across multiple threads, you need</p>\n\n<ul>\n<li><p>To remove data races - put it in a <code>Mutex</code> (or don't mutate it).</p></li>\n<li><p>To keep it alive - put it in an <code>Arc</code> (<strong>A</strong>tomically <strong>R</strong>eference-<strong>C</strong>ounted pointer).</p></li>\n</ul>\n\n\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let items = Arc::new(Mutex::new(Vec::new()));\n\n    for _ in 0..10 {\n        let thread_items = items.clone();\n\n        let handle = thread::spawn(move || {\n            thread_items.lock().unwrap().push(());\n        });\n\n        handle.join().unwrap();\n    }\n\n    println!(\"{:?}\", items);\n}\n</code></pre>\n"}], "owner": {"reputation": 2647, "user_id": 2057867, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/a02ac3125fd67db27a3870119a93fa92?s=128&d=identicon&r=PG", "display_name": "Jacob Clark", "link": "https://stackoverflow.com/users/2057867/jacob-clark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 84, "favorite_count": 0, "accepted_answer_id": 30563993, "answer_count": 1, "score": 2, "last_activity_date": 1433117370, "creation_date": 1433112539, "last_edit_date": 1433116724, "question_id": 30563502, "link": "https://stackoverflow.com/questions/30563502/copying-in-vectors-to-a-thread", "title": "Copying in Vectors to a Thread", "body": "<p>Considering the following code, I wish to have access to both <code>client</code> and <code>requests</code> within my thread, currently I do not:</p>\n\n<pre><code>for _x in 0..100 {\n        let handle = thread::spawn(move || {\n            let start = time::precise_time_s();\n\n            let res = client.get(\"http://jacob.uk.com\")\n                .header(Connection::close()) \n                .send().unwrap();\n\n            let end = time::precise_time_s();\n\n            requests.push(Request::new(end-start));\n        });\n\n        handle.join().unwrap()\n    }\n</code></pre>\n\n<p>I get the following compiler error:</p>\n\n<pre><code>   Compiling Herd v0.1.0 (file:///Users/jacobclark/Desktop/LearningRust/Herd)\nsrc/main.rs:41:23: 41:29 error: capture of moved value: `client`\nsrc/main.rs:41             let res = client.get(\"http://jacob.uk.com\")\n                                     ^~~~~~\nsrc/main.rs:38:41: 48:10 note: `client` moved into closure environment here because it has type `[closure(())]`, which is non-copyable\nsrc/main.rs:38         let handle = thread::spawn(move || {\nsrc/main.rs:39             let start = time::precise_time_s();\nsrc/main.rs:40         \nsrc/main.rs:41             let res = client.get(\"http://jacob.uk.com\")\nsrc/main.rs:42                 .header(Connection::close()) \nsrc/main.rs:43                 .send().unwrap();\n               ...\nsrc/main.rs:38:41: 48:10 help: perhaps you meant to use `clone()`?\nsrc/main.rs:47:13: 47:21 error: capture of moved value: `requests`\nsrc/main.rs:47             requests.push(Request::new(end-start));\n                           ^~~~~~~~\nsrc/main.rs:38:41: 48:10 note: `requests` moved into closure environment here because it has type `[closure(())]`, which is non-copyable\nsrc/main.rs:38         let handle = thread::spawn(move || {\nsrc/main.rs:39             let start = time::precise_time_s();\nsrc/main.rs:40         \nsrc/main.rs:41             let res = client.get(\"http://jacob.uk.com\")\nsrc/main.rs:42                 .header(Connection::close()) \nsrc/main.rs:43                 .send().unwrap();\n               ...\nsrc/main.rs:38:41: 48:10 help: perhaps you meant to use `clone()`?\nsrc/main.rs:53:24: 53:32 error: use of moved value: `requests`\nsrc/main.rs:53     Request::mean_time(requests);\n                                      ^~~~~~~~\nsrc/main.rs:38:41: 48:10 note: `requests` moved into closure environment here because it has type `[closure(())]`, which is non-copyable\nsrc/main.rs:38         let handle = thread::spawn(move || {\nsrc/main.rs:39             let start = time::precise_time_s();\nsrc/main.rs:40         \nsrc/main.rs:41             let res = client.get(\"http://jacob.uk.com\")\nsrc/main.rs:42                 .header(Connection::close()) \nsrc/main.rs:43                 .send().unwrap();\n               ...\nsrc/main.rs:38:41: 48:10 help: perhaps you meant to use `clone()`?\nerror: aborting due to 3 previous errors\nCould not compile `Herd`\n</code></pre>\n\n<p>.</p>\n"}, {"tags": ["pattern-matching", "rust", "move"], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433111012, "post_id": 30563222, "comment_id": 49197844, "body": "I modified my original sample some to make it clearer about non-copy items (the enum in the new example). I was trying to better understand how pattern matching takes ownership rather than modifying the underlying code. Some of it is library code I won&#39;t have access to change."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 1, "creation_date": 1433112136, "post_id": 30563222, "comment_id": 49198101, "body": "@jocull I changed my answer for your update, I hope it&#39;s helpful"}], "tags": [], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "is_accepted": false, "score": 0, "last_activity_date": 1433111569, "last_edit_date": 1433111569, "creation_date": 1433109974, "answer_id": 30563222, "question_id": 30562985, "link": "https://stackoverflow.com/questions/30562985/preventing-move-semantics-during-pattern-matching/30563222#30563222", "title": "Preventing move semantics during pattern matching", "body": "<p>So I try again with the new code change :)</p>\n\n<p>In your current code, if you use borrowing instead of moving in the match it works. </p>\n\n<p><code>p.age</code> doesn't need that only because it's a primitive type and primitive types implement the <a href=\"https://doc.rust-lang.org/book/ownership.html#copy-types\" rel=\"nofollow\"><code>Copy</code> trait</a></p>\n\n<p>But Choices do not implement the copy trait and so they are moved in the match. Which causes them to not be available when you call <code>announce()</code></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>match (&amp;p.choice, p.age) {\n        (&amp;Choices::Good, a) if a &lt; 80 =&gt; {\n            announce(p);\n        }\n        ...\n}\n</code></pre>\n\n<p>It get rids of the error about partial move. I guess it is because you moved choice in the match. But choice is a part of Person so it's partially moved.</p>\n\n<p><strong>I have not enough knowledge of Rust to truly explain why it works, so if you can add something useful, please do</strong></p>\n"}, {"comments": [{"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1433116140, "post_id": 30563848, "comment_id": 49198944, "body": "Thank you for explaining in so much length :)"}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433124801, "post_id": 30563848, "comment_id": 49200631, "body": "In hyper (the mentioned library) this was the issue with enums being non-copy. The borrow trick here is a good solution when the underlying libraries leave out things. Thanks!"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 18, "last_activity_date": 1433115658, "creation_date": 1433115658, "answer_id": 30563848, "question_id": 30562985, "link": "https://stackoverflow.com/questions/30562985/preventing-move-semantics-during-pattern-matching/30563848#30563848", "title": "Preventing move semantics during pattern matching", "body": "<h3>Why?</h3>\n\n<p>When you make the tuple</p>\n\n<pre><code>(p.choice, p.age)\n</code></pre>\n\n<p>you <code>memcpy</code> both <code>p.choice</code> and <code>p.age</code> from your <code>Person</code>.</p>\n\n<p>It's OK to do this for <code>p.age</code> because it's a <code>Copy</code> type - you can continue using the old value after <code>memcpy</code>ing from it.</p>\n\n<p><code>p.choices</code> is of type <code>Choices</code> which is <strong>not</strong> <code>Copy</code>. This means that the <code>memcpy</code> is treated as a \"move\", so the old value is not usable. This means <code>p</code> is in an invalid state, so you can't call <code>announce</code> on it.</p>\n\n<h3>Solution #1</h3>\n\n<p>Since <code>Choices</code> is a trivial <code>enum</code>, you can just <code>#[derive(Copy, Clone)]</code>. This means that you are allowed to continue using the old <code>p.choices</code>.</p>\n\n<p>If you can only safely make <code>Choices</code> <code>Clone</code>, then you'd have to <code>clone</code> it in the <code>match</code> instead.</p>\n\n<h3>Solution #2</h3>\n\n<p>You can take <code>p.choices</code> by <em>reference</em>:</p>\n\n<pre><code>match (&amp;p.choice, p.age) {\n    (&amp;Choices::Good, a) if a &lt; 80 =&gt; {\n        announce(p);\n    }\n    ...\n}\n</code></pre>\n\n<p>This only works because <code>&amp;Choices::Good</code> is an exact match so the borrow can be relinquished. If you had instead</p>\n\n<pre><code>match (&amp;p.choice, p.age) {\n    (&amp;x, a) if a &lt; 80 =&gt; {\n        announce(p);\n    }\n    ...\n}\n</code></pre>\n\n<p>the borrow would still be active and so the move when calling <code>announce(p)</code> would fail - the move would invalidate an active borrowed variable.</p>\n\n<h3>Notes</h3>\n\n<p>You're doing an awful lot of moving here - passing a few references is a lot more flexible! There's no reason for <code>announce</code> to <em>consume</em> a <code>Person</code> - it just needs to look at it for a bit. Taking by value when you could take a reference is only advisable for small <code>Copy</code> types.</p>\n\n<p>Note that having <code>announce</code> take a reference means that the <code>match</code> is allowed to also be holding on to references inside <code>p</code>, which makes it more widely applicable.</p>\n\n<p><code>to_string</code> is mostly for use for non-string objects. <code>into</code> and <code>to_owned</code> are faster and <code>into</code> is also a lot shorter.</p>\n\n<pre><code>struct Person {\n    name: String,\n    age: i32,\n    choice: Choices\n}\n\n#[derive(Copy, Clone, Debug)]\nenum Choices {\n    Good,\n    Neutral,\n    Evil\n}\n\nfn find(p: &amp;Person) {\n    match (p.choice, p.age) {\n        (Choices::Good, a) if a &lt; 80 =&gt; {\n            announce(p);\n        }\n        (_, a) if a &gt;= 80 =&gt; {\n            println!(\"You're too old to care.\");\n        }\n        _ =&gt; {\n            println!(\"You're not very nice!\")\n        }\n    }\n}\n\nfn announce(p: &amp;Person) {\n    println!(\"Your name is {}. You are {:?}.\", p.name, p.choice);\n}\n\nfn main() {\n    let p = Person {\n        name: \"Bob\".into(),\n        age: 20,\n        choice: Choices::Good\n    };\n\n    find(&amp;p);\n}\n</code></pre>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4823, "favorite_count": 1, "accepted_answer_id": 30563848, "answer_count": 2, "score": 11, "last_activity_date": 1433115658, "creation_date": 1433108415, "last_edit_date": 1433109454, "question_id": 30562985, "link": "https://stackoverflow.com/questions/30562985/preventing-move-semantics-during-pattern-matching", "title": "Preventing move semantics during pattern matching", "body": "<p>I have a silly example here, just to demonstrate an issue I'm running into with another library and pattern matching.</p>\n\n<pre><code>struct Person {\n    name: String,\n    age: i32,\n    choice: Choices\n}\n\n#[derive(Debug)]\nenum Choices {\n    Good,\n    Neutral,\n    Evil\n}\n\nfn find(p: Person) {\n    match (p.choice, p.age) {\n        (Choices::Good, a) if a &lt; 80 =&gt; {\n            announce(p);\n        }\n        (_, a) if a &gt;= 80 =&gt; {\n            println!(\"You're too old to care.\");\n        }\n        _ =&gt; {\n            println!(\"You're not very nice!\")\n        }\n    }\n}\n\nfn announce(p: Person) {\n    println!(\"Your name is {}. You are {:?}.\", p.name, p.choice);\n}\n\nfn main() {\n    let p = Person {\n                name: \"Bob\".to_string(),\n                age: 20,\n                choice: Choices::Good\n            };\n    find(p);\n}\n</code></pre>\n\n<p>Now the issue seems to be that during pattern matching, move semantics will kick in and take ownership over the inner struct (Thing) in my Person.</p>\n\n<p>When I go to move the person on to the next method, I can't because it's been partially moved.</p>\n\n<pre><code>Compiling match v0.1.0 (file:///home/jocull/Documents/Projects/Rust/learn/match)\nsrc/main.rs:17:13: 17:14 error: use of partially moved value: `p`\nsrc/main.rs:17          announce(p);\n                                 ^\nsrc/main.rs:15:9: 15:17 note: `p.choice` moved here because it has type `Choices`, which is non-copyable\nsrc/main.rs:15  match (p.choice, p.age) {\n                       ^~~~~~~~\nerror: aborting due to previous error\nCould not compile `match`.\n</code></pre>\n\n<p>My gut says I need to get Rust to stop moving the value by using a reference or borrow of some kind. In this case I <strong>could</strong> change my method signature to borrow, but with some libraries you aren't always able to do that. (I am trying to deal with <a href=\"https://crates.io/crates/hyper\" rel=\"noreferrer\">hyper</a> in this case...)</p>\n\n<p>Is there a way to get the <code>match</code> to use references during matching instead of moving the values? Thank you!</p>\n"}, {"tags": ["rust", "channel", "lifetime-scoping"], "answers": [{"comments": [{"owner": {"reputation": 1615, "user_id": 496118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a188ebf47ae2a64d8003fb8a58471f91?s=128&d=identicon&r=PG", "display_name": "marekventur", "link": "https://stackoverflow.com/users/496118/marekventur"}, "edited": false, "score": 0, "creation_date": 1433105805, "post_id": 30562564, "comment_id": 49196416, "body": "Oh, ok. That&#39;s an easy solution. Replacing <code>&amp;str</code> with <code>String</code> in the <code>struct</code> does the trick. Thanks, I really should have tried that first."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 12, "last_activity_date": 1434128094, "last_edit_date": 1434128094, "creation_date": 1433105505, "answer_id": 30562564, "question_id": 30562443, "link": "https://stackoverflow.com/questions/30562443/how-do-i-use-static-lifetimes-with-threads/30562564#30562564", "title": "How do I use static lifetimes with threads?", "body": "<p>You can't convert <code>&amp;'a T</code> into <code>&amp;'static T</code> except by leaking memory. Luckily, this is not necessary at all. There is no reason to send borrowed pointers to the thread and keep the lines on the main thread. You don't need the lines on the main thread. Just send the lines themselves, i.e. send <code>String</code>.</p>\n\n<p>If access from multiple threads <em>was</em> necessary (and you don't want to clone), use <code>Arc&lt;String&gt;</code> (in the future, <code>Arc&lt;str&gt;</code> may also work). This way the string is shared between threads, <em>properly</em> shared, so that it will be deallocated exactly when no thread uses it any more.</p>\n\n<p>Sending non-<code>'static</code> references between threads is unsafe because you never know how long the other thread will keep using it, so you don't know when the borrow expires and the object can be freed. Note that <em>scoped threads</em> don't have this problem (which aren't in 1.0 but are being redesigned as we speak) do allow this, but regular, <code>spawn</code>ed threads do.</p>\n\n<p><code>'static</code> is not something you should avoid, it is perfectly fine for what it does: Denoting that a value lives for the entire duration the program is running. But if that is not what you're trying to convey, of course it is the wrong tool.</p>\n"}, {"tags": [], "owner": {"reputation": 3903, "user_id": 158913, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/90b5038827dc6dedece5166e5125bd47?s=128&d=identicon&r=PG", "display_name": "Vadym Chekan", "link": "https://stackoverflow.com/users/158913/vadym-chekan"}, "is_accepted": false, "score": 0, "last_activity_date": 1549249259, "last_edit_date": 1549249259, "creation_date": 1549246839, "answer_id": 54509450, "question_id": 30562443, "link": "https://stackoverflow.com/questions/30562443/how-do-i-use-static-lifetimes-with-threads/54509450#54509450", "title": "How do I use static lifetimes with threads?", "body": "<p>Think about it this way: A thread has no syntactical lifetime, i.e. the thread will not be dropped at the end of code block where it was created. Whatever data you send to the thread, you must be sure that it will live as long as the thread does, which means forever. Which means <code>'static</code>.</p>\n\n<p>What can go wrong in your case, is if the main loop sends a reference to a thread and destroys the string before it has been handled by the thread. The thread would access invalid memory when dealing with the string.</p>\n\n<p>One option would be to put your lines into some statically allocated container but this would mean that you never can destroy those strings. Generally speaking a bad idea. Another option is to think: does the main thread actually need the line once it is read? What if the main thread  transfered responsibility for line to the handling thread?</p>\n\n<pre><code>struct Message {\n    text: String,\n}\n</code></pre>\n\n<pre><code>for line in stdin.lock().lines() {\n    let message = Message {\n        text: line.unwrap(),\n    };\n    tx.send(message).unwrap();\n}\n</code></pre>\n\n<p>Now you are transferring ownership (move) from the main thread to the handler thread. Because you move your value, no references are involved and no checks for lifetime apply anymore.</p>\n"}], "owner": {"reputation": 1615, "user_id": 496118, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a188ebf47ae2a64d8003fb8a58471f91?s=128&d=identicon&r=PG", "display_name": "marekventur", "link": "https://stackoverflow.com/users/496118/marekventur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3664, "favorite_count": 0, "accepted_answer_id": 30562564, "answer_count": 2, "score": 9, "last_activity_date": 1549249259, "creation_date": 1433104809, "last_edit_date": 1517840675, "question_id": 30562443, "link": "https://stackoverflow.com/questions/30562443/how-do-i-use-static-lifetimes-with-threads", "title": "How do I use static lifetimes with threads?", "body": "<p>I'm currently struggling with lifetimes in Rust (1.0), especially when it comes to passing structs via channels.</p>\n\n<p>How would I get this simple example to compile:</p>\n\n<pre><code>use std::sync::mpsc::{Receiver, Sender};\nuse std::sync::mpsc;\nuse std::thread::spawn;\nuse std::io;\nuse std::io::prelude::*;\n\nstruct Message&lt;'a&gt; {\n    text: &amp;'a str,\n}\n\nfn main() {\n    let (tx, rx): (Sender&lt;Message&gt;, Receiver&lt;Message&gt;) = mpsc::channel();\n\n    let _handle_receive = spawn(move || {\n        for message in rx.iter() {\n            println!(\"{}\", message.text);\n        }\n    });\n\n    let stdin = io::stdin();\n    for line in stdin.lock().lines() {\n        let message = Message {\n            text: &amp;line.unwrap()[..],\n        };\n        tx.send(message).unwrap();\n    }\n}\n</code></pre>\n\n<p>I get:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: borrowed value does not live long enough\n  --&gt; src/main.rs:23:20\n   |\n23 |             text: &amp;line.unwrap()[..],\n   |                    ^^^^^^^^^^^^^ does not live long enough\n...\n26 |     }\n   |     - temporary value only lives until here\n   |\n   = note: borrowed value must be valid for the static lifetime...\n</code></pre>\n\n<p>I can see why this is (<code>line</code> only lives for one iteration of <code>for</code>), but I can't figure out what the right way of doing this is. </p>\n\n<ul>\n<li>Should I, as the compiler hints, try to convert the <code>&amp;str</code> into <code>&amp;'static str</code>? </li>\n<li>Am I leaking memory if every line would have a <code>'static</code> lifetime? </li>\n<li>When am I supposed to use <code>'static</code> anyway? Is it something I should try to avoid or is it perfectly OK?</li>\n<li>Is there a better way of passing <code>String</code>s in structs via channels?</li>\n</ul>\n\n<p>I apologize for those naive questions. I've spent quite some time searching already, but I can't quite wrap my head around it. It's probably my dynamic language background getting in the way :)</p>\n\n<p>As an aside: Is <code>&amp;input[..]</code> for converting a <code>String</code> into a <code>&amp;str</code> considered OK? It's the only stable way I could find to do this. </p>\n"}, {"tags": ["rest", "rust", "nickel"], "answers": [{"comments": [{"owner": {"reputation": 8024, "user_id": 836144, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/XquN9.jpg?s=128&g=1", "display_name": "Hassek", "link": "https://stackoverflow.com/users/836144/hassek"}, "edited": false, "score": 1, "creation_date": 1551900524, "post_id": 30560208, "comment_id": 96814028, "body": "favorite post ever, thank you very much Erik Pragt for the question and @aochagavia for the answer."}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 39, "last_activity_date": 1433093594, "last_edit_date": 1433093594, "creation_date": 1433092349, "answer_id": 30560208, "question_id": 30559073, "link": "https://stackoverflow.com/questions/30559073/cannot-borrow-captured-outer-variable-in-an-fn-closure-as-mutable/30560208#30560208", "title": "Cannot borrow captured outer variable in an `Fn` closure as mutable", "body": "<p>This is a very good example of how Rust protects you from thread unsafety.</p>\n\n<p>If you think about it, in your current code it would be possible that multiple threads try to concurrently mutate <code>reservations</code> without any kind of synchronization. This is a data race and Rust will complain about it.</p>\n\n<p>A possible solution would be to wrap the <code>reservations</code> vector into a <code>Mutex</code> to get synchronization. You will also need an <code>Arc</code> (atomic reference counting), since Rust cannot prove that <code>reservations</code> will live longer than the threads.</p>\n\n<p>With these changes, your code should be like the following:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nfn main() {\n    let mut server = Nickel::new();\n    let reservations = Arc::new(Mutex::new(Vec::new()));\n\n    server.post(\"/reservations/\", middleware! { |request, response|\n        let reservation = request.json_as::&lt;Reservation&gt;().unwrap();\n\n        reservations.lock().unwrap().push(reservation); // &lt;-- error occurs here\n\n        format!(\"Hello {} {}\", reservation.name, reservation.email)\n\n    });\n\n    server.listen(\"127.0.0.1:3000\");\n}\n</code></pre>\n\n<p>You can check the documentation for additional info about <a href=\"http://static.rust-lang.org/doc/master/std/sync/struct.Mutex.html\" rel=\"noreferrer\"><code>Mutex</code></a> and <a href=\"http://static.rust-lang.org/doc/master/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a>.</p>\n"}], "owner": {"reputation": 11714, "user_id": 323221, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/036bc6990a7ba39ac82cbfa266b7d326?s=128&d=identicon&r=PG", "display_name": "Erik Pragt", "link": "https://stackoverflow.com/users/323221/erik-pragt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4953, "favorite_count": 4, "accepted_answer_id": 30560208, "answer_count": 1, "score": 28, "last_activity_date": 1433093594, "creation_date": 1433085627, "last_edit_date": 1495541703, "question_id": 30559073, "link": "https://stackoverflow.com/questions/30559073/cannot-borrow-captured-outer-variable-in-an-fn-closure-as-mutable", "title": "Cannot borrow captured outer variable in an `Fn` closure as mutable", "body": "<p>This is my first day with Rust, but I'm trying to do something trivial, and I'm stuck. </p>\n\n<p>What I'm trying to do is to add an struct to a Vector, and return the result. What I'm trying is to create a very simple REST service which will store the data in memory when posting, and return all the data in JSON format when doing a GET.</p>\n\n<p>This is my current code:</p>\n\n<pre><code>fn main() {\n    let mut server = Nickel::new();\n    let mut reservations = Vec::new();\n\n   server.post(\"/reservations/\", middleware! { |request, response|\n        let reservation = request.json_as::&lt;Reservation&gt;().unwrap();\n\n        reservations.push(reservation); // &lt;-- error occurs here\n\n        format!(\"Hello {} {}\", reservation.name, reservation.email)\n\n    });\n\n    server.listen(\"127.0.0.1:3000\");\n}\n</code></pre>\n\n<p>I tried <a href=\"https://stackoverflow.com/questions/28521637/how-can-i-move-a-captured-variable-into-a-closure-within-a-closure\">this solution</a> with a RefCell, but then I get the error that the trait Sync is not implemented for <code>Vec&lt;reservation::Reservation&gt;</code></p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 44, "last_activity_date": 1569560283, "last_edit_date": 1569560283, "creation_date": 1433081303, "answer_id": 30558360, "question_id": 30558246, "link": "https://stackoverflow.com/questions/30558246/how-do-i-find-the-index-of-an-element-in-an-array-vector-or-slice/30558360#30558360", "title": "How do I find the index of an element in an array, vector or slice?", "body": "<p><strong>TLDR</strong> Use an iterator with the <code>position</code> method, the Rust docs <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position\" rel=\"noreferrer\">shows a good example</a>.</p>\n\n<hr>\n\n<p>No, it's because indices are <code>usize</code>, not <code>i32</code>.  In fact, <code>i32</code> is completely inappropriate for this purpose; it may not be large enough, and there's no reason for it to be signed.  Just use <code>usize</code>.</p>\n\n<p>Some other notes: calling <code>to_string()</code> is not free, and you don't need it for the comparison; you can compare string slices just fine!</p>\n\n<p>Also, if you <em>really</em> want to turn a <code>usize</code> into an <code>i32</code>, you can do that with a cast: <code>x as i32</code>, though this will <em>not</em> produce an error on over- or under-flow (<em>i.e.</em> the result may be negative).</p>\n\n<p>All that said, as noted in Mathieu David's answer, there's a <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position\" rel=\"noreferrer\"><code>position</code></a> method on iterators that does what you want.</p>\n"}, {"tags": [], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "is_accepted": false, "score": 116, "last_activity_date": 1593597025, "last_edit_date": 1593597025, "creation_date": 1433081373, "answer_id": 30558370, "question_id": 30558246, "link": "https://stackoverflow.com/questions/30558246/how-do-i-find-the-index-of-an-element-in-an-array-vector-or-slice/30558370#30558370", "title": "How do I find the index of an element in an array, vector or slice?", "body": "<p>I think you should look at the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position\" rel=\"noreferrer\"><code>position</code></a> method instead.</p>\n<pre><code>fn main() {\n    let test = vec![&quot;one&quot;, &quot;two&quot;, &quot;three&quot;];\n    let index = test.iter().position(|&amp;r| r == &quot;two&quot;).unwrap();\n    println!(&quot;{}&quot;, index);\n}\n</code></pre>\n<p>You can <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7cff7ae21633fbd830741cd4be1569b7\" rel=\"noreferrer\">test it here</a>.</p>\n<p>Note that this works for any iterator, so it can be used for vectors, arrays, and slices, all of which produce iterators.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57600, "favorite_count": 7, "accepted_answer_id": 30558360, "answer_count": 2, "score": 72, "last_activity_date": 1593597025, "creation_date": 1433080456, "last_edit_date": 1527557985, "question_id": 30558246, "link": "https://stackoverflow.com/questions/30558246/how-do-i-find-the-index-of-an-element-in-an-array-vector-or-slice", "title": "How do I find the index of an element in an array, vector or slice?", "body": "<p>I need to find an index of an element in a vector of strings. This is what I got so far:</p>\n\n<pre><code>fn main() {\n    let test: Vec&lt;String&gt; = vec![\n        \"one\".to_string(),\n        \"two\".to_string(),\n        \"three\".to_string(),\n        \"four\".to_string(),\n    ];\n\n    let index: i32 = test\n        .iter()\n        .enumerate()\n        .find(|&amp;r| r.1.to_string() == \"two\".to_string())\n        .unwrap()\n        .0;\n}\n</code></pre>\n\n<p>It produces an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:9:22\n   |\n9  |       let index: i32 = test\n   |  ______________________^\n10 | |         .iter()\n11 | |         .enumerate()\n12 | |         .find(|&amp;r| r.1.to_string() == \"two\".to_string())\n13 | |         .unwrap()\n14 | |         .0;\n   | |__________^ expected i32, found usize\n</code></pre>\n\n<p>I assume that's because <code>enumerate()</code> returns a tuple of <code>(usize, _)</code> (correct me if I'm wrong), but how do I convert <code>usize</code> to <code>i32</code> here? If there is a better approach, I'm open to suggestions.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 12, "last_activity_date": 1433075105, "creation_date": 1433075105, "answer_id": 30557389, "question_id": 30557152, "link": "https://stackoverflow.com/questions/30557152/is-it-possible-to-send-closures-via-channels/30557389#30557389", "title": "Is it possible to send closures via channels?", "body": "<p>Yes.  There are a few problems with your code.</p>\n\n<p>First of all, <code>FnOnce</code> is a trait, so you can't use it directly.  Traits have to be either a constraint on a concrete type, or behind an indirection of some kind.  Since you're sending the closure to somewhere else, you want something like <code>Box&lt;FnOnce(...)&gt;</code>.</p>\n\n<p>Secondly, you can't use <code>Box&lt;FnOnce(...)&gt;</code> because, due to object safety rules, you can't actually <em>call</em> a <code>FnOnce</code> through an indirection.</p>\n\n<p>(As an aside, you also don't want to use <code>FnOnce&lt;...&gt;</code> syntax, which is technically unstable; use <code>FnOnce(...)</code> instead.)</p>\n\n<p>To solve this, you can either switch to <code>Fn</code> or <code>FnMut</code> <em>or</em> use the not-yet-stable <code>FnBox</code> trait.  I've gone down this path on the basis that it probably has the semantics you want, and is likely to be stabilised in the near future.  If you're uncomfortable with this, you will need to modify your closure appropriately.</p>\n\n<p>The following is a joint effort between myself and Manishearth (who pointed out I'd missed the <code>+ Send</code> constraint):</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// NOTE: Requires a nightly compiler, as of Rust 1.0.\n\n#![feature(core)]\nuse std::boxed::FnBox;\nuse std::thread;\nuse std::sync::mpsc;\n\n#[derive(Debug)]\nstruct Test {\n    s1: String,\n    s2: String,\n}\n\ntype ClosureType = Box&lt;FnBox(&amp;mut Test) + Send&gt;;\n\nfn main() {\n    let t = Test { s1: \"Hello\".to_string(), s2: \"Hello\".to_string() };\n    let (tx, rx) = mpsc::channel::&lt;ClosureType&gt;();\n\n    thread::spawn(move || {\n        let mut test = t;\n        let f = rx.recv().unwrap();\n        f.call_box((&amp;mut test,));\n        println!(\"{:?}\", test);\n    });\n\n    tx.send(Box::new(move |t: &amp;mut Test| {\n        let s = \"test\".to_string();\n        t.s1 = s;\n    })).unwrap();\n\n    // To give the output time to show up:\n    thread::sleep_ms(100);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25893, "user_id": 353820, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/32b29e1dc23c2c5abe0283ab7b9541d3?s=128&d=identicon&r=PG", "display_name": "Doug", "link": "https://stackoverflow.com/users/353820/doug"}, "is_accepted": false, "score": 4, "last_activity_date": 1520306843, "last_edit_date": 1520306843, "creation_date": 1520306379, "answer_id": 49122850, "question_id": 30557152, "link": "https://stackoverflow.com/questions/30557152/is-it-possible-to-send-closures-via-channels/49122850#49122850", "title": "Is it possible to send closures via channels?", "body": "<p>The accepted answer doesn't go into detail, but you <strong>can</strong> send closures to threads via channels, even on stable, if you don't use <code>FnOnce</code>:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\n\nstruct RawFunc {\n    data: Box&lt;Fn() + Send + 'static&gt;,\n}\n\nimpl RawFunc {\n    fn new&lt;T&gt;(data: T) -&gt; RawFunc\n    where\n        T: Fn() + Send + 'static,\n    {\n        return RawFunc {\n            data: Box::new(data),\n        };\n    }\n\n    fn invoke(self) {\n        (self.data)()\n    }\n}\n\nfn main() {\n    // Local\n    let x = RawFunc::new(move || {\n        println!(\"Hello world\");\n    });\n    x.invoke();\n\n    // Via channel\n    let (sx, rx) = mpsc::channel::&lt;RawFunc&gt;();\n    sx.send(RawFunc::new(move || {\n        println!(\"Hello world 2\");\n    })).unwrap();\n    let output = rx.recv().unwrap();\n    output.invoke();\n\n    // In a thread\n    let guard = thread::spawn(move || {\n        let output = rx.recv().unwrap();\n        output.invoke();\n    });\n\n    sx.send(RawFunc::new(move || {\n        println!(\"Hello world 3!\");\n    })).unwrap();\n\n    guard.join().unwrap();\n\n    // Passing arbitrary data to a thread\n    let (sx, rx) = mpsc::channel::&lt;RawFunc&gt;();\n    let guard = thread::spawn(move || {\n        let output = rx.recv().unwrap();\n        output.invoke();\n    });\n\n    let foo = String::from(\"Hello World 4\");\n    sx.send(RawFunc::new(move || {\n        println!(\"Some moved data: {:?}\", foo);\n    })).unwrap();\n\n    guard.join().unwrap();\n}\n</code></pre>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3173, "favorite_count": 2, "accepted_answer_id": 30557389, "answer_count": 2, "score": 12, "last_activity_date": 1520306843, "creation_date": 1433073592, "last_edit_date": 1520306764, "question_id": 30557152, "link": "https://stackoverflow.com/questions/30557152/is-it-possible-to-send-closures-via-channels", "title": "Is it possible to send closures via channels?", "body": "<p>I would like to send a closure via channels:</p>\n\n<pre><code>use std::thread;\nuse std::sync::mpsc;\n\n#[derive(Debug)]\nstruct Test {\n    s1: String,\n    s2: String,\n}\n\nfn main() {\n    let t = Test {\n        s1: \"Hello\".to_string(),\n        s2: \"Hello\".to_string(),\n    };\n    let (tx, rx) = mpsc::channel::&lt;FnOnce(&amp;mut Test)&gt;();\n    thread::spawn(move || {\n        let mut test = t;\n        let f = rx.recv().unwrap();\n        f(&amp;mut test);\n        println!(\"{:?}\", test);\n    });\n    tx.send(move |t: &amp;mut Test| {\n        let s = \"test\".to_string();\n        t.s1 = s;\n    });\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=c5fdf840e6c6dd6ef903621d3bedbcfd&amp;version=stable\" rel=\"noreferrer\">playground</a>)</p>\n\n<p>I get a bunch of errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test): std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:15:20\n   |\n15 |     let (tx, rx) = mpsc::channel::&lt;FnOnce(&amp;mut Test)&gt;();\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)`\n   = note: required by `std::sync::mpsc::channel`\n\nerror[E0277]: the trait bound `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test): std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:15:20\n   |\n15 |     let (tx, rx) = mpsc::channel::&lt;FnOnce(&amp;mut Test)&gt;();\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)`\n   = note: required by `std::sync::mpsc::Sender`\n\nerror[E0599]: no method named `recv` found for type `std::sync::mpsc::Receiver&lt;for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)&gt;` in the current scope\n  --&gt; src/main.rs:18:20\n   |\n18 |         let f = rx.recv().unwrap();\n   |                    ^^^^\n   |\n   = note: the method `recv` exists but the following trait bounds were not satisfied:\n           `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test) : std::marker::Sized`\n\nerror[E0599]: no method named `send` found for type `std::sync::mpsc::Sender&lt;for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test)&gt;` in the current scope\n  --&gt; src/main.rs:22:8\n   |\n22 |     tx.send(move |t: &amp;mut Test| {\n   |        ^^^^\n   |\n   = note: the method `send` exists but the following trait bounds were not satisfied:\n           `for&lt;'r&gt; std::ops::FnOnce(&amp;'r mut Test) : std::marker::Sized`\n</code></pre>\n\n<p>It seems that <code>FnOnce</code> is not sendable but I don't understand why.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1433071750, "post_id": 30556709, "comment_id": 49185357, "body": "Nice, works perfectly! I think it&#39;s worth mentioning in the for-loop section of the book"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1433072771, "post_id": 30556709, "comment_id": 49185671, "body": "Do you know how to do this with ranges? <code>5..10.enumerate()</code> does not exist"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 1, "creation_date": 1433073128, "post_id": 30556709, "comment_id": 49185810, "body": "my bad, it works with parenthesis: <code>(5..10).enumerate()</code>"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433236050, "post_id": 30556709, "comment_id": 49252343, "body": "Regular <code>.zip()</code> is in libstd too. Itertools <code>izip!()</code>&#39;s contribution is that it allows zipping more than two iterables."}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 6, "last_activity_date": 1433077630, "last_edit_date": 1433077630, "creation_date": 1433070726, "answer_id": 30556709, "question_id": 30556670, "link": "https://stackoverflow.com/questions/30556670/is-there-a-way-to-know-how-many-iterations-we-have-done-in-a-for-loop/30556709#30556709", "title": "Is there a way to know how many iterations we have done in a for loop?", "body": "<p>It should be as simple as:</p>\n\n<pre><code>for (linenumber, line) in lines.enumerate() {\n    println!(\"{}: {}\", linenumber, line);\n}\n</code></pre>\n\n<p>You can also do</p>\n\n<pre><code>#[macro_use]\nextern crate itertools;\n\nfn main() {\n    for (linenumber, line) in izip!(0.., lines) {\n        println!(\"{}, {}\", linenumber, line);\n    }\n}\n</code></pre>\n\n<p>for more flexibility. This has the advantage of letting you change things like the start and step of the numbering as well as the number of zipped elements.</p>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "accepted_answer_id": 30556709, "answer_count": 1, "score": 5, "last_activity_date": 1433116816, "creation_date": 1433070423, "last_edit_date": 1433116816, "question_id": 30556670, "link": "https://stackoverflow.com/questions/30556670/is-there-a-way-to-know-how-many-iterations-we-have-done-in-a-for-loop", "title": "Is there a way to know how many iterations we have done in a for loop?", "body": "<p>Is there an easy way to know how many iteration we have done in a for loop?</p>\n\n<p>If I have this code</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>for line in lines {\n    println!(\"{}: {}\", linenumber, line);\n}\n</code></pre>\n\n<p>How can I easily get the number <code>linenumber</code>? Am I required to use an external counter variable?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 7, "creation_date": 1433062160, "post_id": 30555477, "comment_id": 49182910, "body": "<code>try!</code> is a macro that <code>return</code>s <code>Err</code>s automatically. You can&#39;t use it in <code>main</code> because <code>main</code> doesn&#39;t return anything."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433062501, "post_id": 30555477, "comment_id": 49182982, "body": "Aaaahn that explains a lot.. Thank you for that! And how would I handle the errors in this specific case? Without having to resort to the weird <code>for match</code> syntax mentioned above"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433062972, "post_id": 30555477, "comment_id": 49183072, "body": "<a href=\"http://lucumr.pocoo.org/2014/11/6/error-handling-in-rust/\" rel=\"nofollow noreferrer\">See also.</a> In general the lazy route is to stick your code in some wrapper function that you call from <code>main</code> that returns <code>Result&lt;T, Box&lt;Error&gt;&gt;</code> and then <code>unwrap</code> or handle that in <code>main</code>."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433063261, "post_id": 30555477, "comment_id": 49183140, "body": "<code>unwrap</code> is basically <code>panic</code> on error right?"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433063608, "post_id": 30555477, "comment_id": 49183239, "body": "<code>println!(&quot;{}&quot;, path.unwrap().path().file_name().unwrap().to_str().unwrap())&zwnj;&#8203;;</code>  really? :p"}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433063845, "post_id": 30555477, "comment_id": 49183302, "body": "What type is <code>path</code> there?"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433064280, "post_id": 30555477, "comment_id": 49183409, "body": "Since all the functions return Result&lt;something&gt; I have a hard time knowing what to answer to your question. But the <a href=\"https://github.com/azerupi/rust-learn/blob/master/FileSystem/dircontent.rs\" rel=\"nofollow noreferrer\">file is on Github</a> It&#39;s the result of <a href=\"https://doc.rust-lang.org/std/fs/fn.read_dir.html\" rel=\"nofollow noreferrer\">read_dir</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 0, "creation_date": 1533215258, "post_id": 30556164, "comment_id": 90272222, "body": "To make it work for other type of errors with <code>?</code> operator, I needed to change to <code>fn main() -&gt; Result&lt;(), Box&lt;std::error::Error&gt;&gt;&gt; {</code> Read more <a href=\"https://blog.burntsushi.net/rust-error-handling/#the-real-try-macro-operator\" rel=\"nofollow noreferrer\">blog.burntsushi.net/rust-error-handling/&hellip;</a>"}], "tags": [], "owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "is_accepted": true, "score": 59, "last_activity_date": 1540408647, "last_edit_date": 1540408647, "creation_date": 1433066669, "answer_id": 30556164, "question_id": 30555477, "link": "https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-a-function-that-doesnt-return-opti/30556164#30556164", "title": "Why do try!() and ? not compile when used in a function that doesn&#39;t return Option or Result?", "body": "<p><code>try!</code> is a macro that returns <code>Err</code>s automatically; <code>?</code> is syntax that does mostly the same thing, but it works with any type that implements the <a href=\"https://doc.rust-lang.org/std/ops/trait.Try.html\" rel=\"noreferrer\"><code>Try</code></a> trait. </p>\n\n<p>As of <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1220-2017-11-22\" rel=\"noreferrer\">Rust 1.22.0</a>, <code>Option</code> implements <code>Try</code>, so it can be used with <code>?</code>. Before that, <code>?</code> could only be used in functions that return a <code>Result</code>. <code>try!</code> continues to only work with <code>Result</code>s.</p>\n\n<p>As of <a href=\"https://github.com/rust-lang/rust/issues/48453\" rel=\"noreferrer\">Rust 1.26.0</a>, <code>main</code> is allowed to return a value that implements <code>Termination</code>. Before that, it doesn't return any value.</p>\n\n<h3>As of Rust 1.26.0</h3>\n\n<p>Your original code works if you mark <code>main</code> as returning a <code>Result</code> and then return <code>Ok(())</code> in all the \"success\" cases:</p>\n\n<pre><code>use std::{fs, io, path::Path};\n\nfn main() -&gt; Result&lt;(), io::Error&gt; {\n    let dir = Path::new(\"../FileSystem\");\n\n    if !dir.is_dir() {\n        println!(\"Is not a directory\");\n        return Ok(());\n    }\n\n    for item in fs::read_dir(dir)? {\n        let file = match item {\n            Err(e) =&gt; {\n                println!(\"Error: {}\", e);\n                return Ok(());\n            }\n            Ok(f) =&gt; f,\n        };\n\n        println!(\"\");\n    }\n\n    println!(\"Done\");\n    Ok(())\n}\n</code></pre>\n\n<h3>Before that</h3>\n\n<p>This is how you might transform your code to use <code>?</code>:</p>\n\n<pre><code>use std::{error::Error, fs, path::Path};\n\nfn print_dir_contents() -&gt; Result&lt;String, Box&lt;Error&gt;&gt; {\n    let dir = Path::new(\"../FileSystem\");\n\n    if !dir.is_dir() {\n        return Err(Box::from(\"Is not a directory!\"));\n    }\n\n    for entry in fs::read_dir(dir)? {\n        let path = entry?.path();\n        let file_name = path.file_name().unwrap();\n        println!(\"{}\", file_name.to_string_lossy());\n    }\n\n    Ok(\"Done\".into())\n}\n\nfn main() {\n    match print_dir_contents() {\n        Ok(s) =&gt; println!(\"{}\", s),\n        Err(e) =&gt; println!(\"Error: {}\", e.to_string()),\n    }\n}\n</code></pre>\n\n<p>There's a lot of error handling here that you might not expect - other languages don't tend to require it! But they exist in other languages - Rust just makes you know it. Here are the errors:</p>\n\n<blockquote>\n<pre><code>entry?\n</code></pre>\n</blockquote>\n\n<p>IO errors can happen during iteration.</p>\n\n<blockquote>\n<pre><code>path.file_name().unwrap()\n</code></pre>\n</blockquote>\n\n<p>Not all paths have file names. We can <code>unwrap</code> this because <code>read_dir</code> won't give us a path without a file name.</p>\n\n<blockquote>\n<pre><code>file_name.to_string_lossy()\n</code></pre>\n</blockquote>\n\n<p>You can also <code>to_str</code> and throw an error, but it's nicer to do this. This error exists because not all file names are valid Unicode.</p>\n\n<p><code>try!</code> and <code>?</code> throw errors into the return value, converting them to <code>Box::Error</code>. It's actually more reasonable to return an amalgamated error of all the things that can go wrong. Luckily <code>io::Error</code> is just the right type:</p>\n\n<pre><code>use std::io;\n\n// ...\n\nfn print_dir_contents() -&gt; Result&lt;String, io::Error&gt; {\n    // ...\n\n    if !dir.is_dir() {\n        return Err(io::Error::new(io::ErrorKind::Other, \"Is not a directory!\"));\n    }\n\n    // ...\n}\n</code></pre>\n\n<p>Frankly, though, this check is already in <code>fs::read_dir</code>, so you can actually just remove the <code>if !dis.is_dir</code> altogether:</p>\n\n<pre><code>use std::{fs, io, path::Path};\n\nfn print_dir_contents() -&gt; Result&lt;String, io::Error&gt; {\n    let dir = Path::new(\"../FileSystem\");\n\n    for entry in fs::read_dir(dir)? {\n        let path = entry?.path();\n        let file_name = path.file_name().unwrap();\n        println!(\"{}\", file_name.to_string_lossy());\n    }\n\n    Ok(\"Done\".into())\n}\n\nfn main() {\n    match print_dir_contents() {\n        Ok(s) =&gt; println!(\"{}\", s),\n        Err(e) =&gt; println!(\"Error: {}\", e.to_string()),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2959, "user_id": 5903309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/665cdb14fb46d20c11a176c92e6ed663?s=128&d=identicon&r=PG", "display_name": "Jan Nils Ferner", "link": "https://stackoverflow.com/users/5903309/jan-nils-ferner"}, "is_accepted": false, "score": 7, "last_activity_date": 1501173138, "creation_date": 1501173138, "answer_id": 45356375, "question_id": 30555477, "link": "https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-a-function-that-doesnt-return-opti/45356375#45356375", "title": "Why do try!() and ? not compile when used in a function that doesn&#39;t return Option or Result?", "body": "<p>The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1937-ques-in-main.md\" rel=\"noreferrer\">ques_in_main RFC</a> got merged recently. Once it's <a href=\"https://github.com/rust-lang/rust/issues/43301\" rel=\"noreferrer\">completed</a>, the syntax in the question will indeed compile just fine and work as intended, provided the <code>try!()</code> calls are replaced with the <code>?</code> operator.</p>\n"}, {"tags": [], "owner": {"reputation": 581, "user_id": 1590054, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Ucal7.jpg?s=128&g=1", "display_name": "ROLO", "link": "https://stackoverflow.com/users/1590054/rolo"}, "is_accepted": false, "score": 1, "last_activity_date": 1512744207, "last_edit_date": 1512744207, "creation_date": 1512732475, "answer_id": 47713467, "question_id": 30555477, "link": "https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-a-function-that-doesnt-return-opti/47713467#47713467", "title": "Why do try!() and ? not compile when used in a function that doesn&#39;t return Option or Result?", "body": "<p>Veedrac's answer helped me too, although the OP's question is slightly different. While reading the Rust documentation, I saw this snippet:</p>\n\n<pre><code>use std::fs::File;\nuse std::io::prelude::*;\n\nlet mut file = File::open(\"foo.txt\")?;\nlet mut contents = String::new();\nfile.read_to_string(&amp;mut contents)?;\nassert_eq!(contents, \"Hello, world!\");\n</code></pre>\n\n<p>Though in the Rust Book they point out the centrality of the main function, if you run this inside it you'll get a similar error. If you wrap the code inside a function handling the errors the aforementioned snippet works:</p>\n\n<pre><code>use std::error::Error;\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn print_file_content() -&gt; Result&lt;String, Box&lt;Error&gt;&gt; {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut contents = String::new();\n\n    f.read_to_string(&amp;mut contents)?;\n\n    println!(\"The content: {:?}\", contents);\n\n    Ok(\"Done\".into())\n}\n\nfn main() {\n    match print_file_content() {\n        Ok(s) =&gt; println!(\"{}\", s),\n        Err(e) =&gt; println!(\"Error: {}\", e.to_string()),\n    }\n}\n</code></pre>\n\n<p>P.S. I'm learning Rust so these snippets are not intended as good Rust coding :)</p>\n"}, {"tags": [], "owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "is_accepted": false, "score": 2, "last_activity_date": 1526045460, "last_edit_date": 1526045460, "creation_date": 1525714411, "answer_id": 50219618, "question_id": 30555477, "link": "https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-a-function-that-doesnt-return-opti/50219618#50219618", "title": "Why do try!() and ? not compile when used in a function that doesn&#39;t return Option or Result?", "body": "<p>As of Rust 1.26, Rust supports a return value from main(), and thus supports the use of the error-check operator <code>?</code> (or equivalently the <code>try!()</code> macro) in <code>main()</code> when <code>main()</code> is defined to return a <code>Result</code>:</p>\n\n<pre><code>extern crate failure;\nuse failure::Error;\nuse std::fs::File;\n\ntype Result&lt;T&gt; = std::result::Result&lt;T, Error&gt;;\n\nfn main() -&gt; Result&lt;()&gt; {\n    let mut _file = File::open(\"foo.txt\")?; // does not exist; returns error\n    println!(\"the file is open!\");\n    Ok(())\n}\n</code></pre>\n\n<p>The above compiles and returns a file not found error (assuming <code>foo.txt</code> does not exist in the local path).</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=66e0c9300c6db17e314819bdaf9b4516&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">Rust playground example</a></p>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14370, "favorite_count": 5, "accepted_answer_id": 30556164, "answer_count": 4, "score": 60, "last_activity_date": 1544017768, "creation_date": 1433061773, "last_edit_date": 1544017768, "question_id": 30555477, "link": "https://stackoverflow.com/questions/30555477/why-do-try-and-not-compile-when-used-in-a-function-that-doesnt-return-opti", "title": "Why do try!() and ? not compile when used in a function that doesn&#39;t return Option or Result?", "body": "<p>Why does this code not compile?</p>\n\n<pre><code>use std::{fs, path::Path};\n\nfn main() {\n    let dir = Path::new(\"../FileSystem\");\n\n    if !dir.is_dir() {\n        println!(\"Is not a directory\");\n        return;\n    }\n\n    for item in try!(fs::read_dir(dir)) {\n        let file = match item {\n            Err(e) =&gt; {\n                println!(\"Error: {}\", e);\n                return;\n            }\n            Ok(f) =&gt; f,\n        };\n\n        println!(\"\");\n    }\n\n    println!(\"Done\");\n}\n</code></pre>\n\n<p>This is the error I get</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:11:17\n   |\n11 |     for item in try!(fs::read_dir(dir)) {\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n   |\n   = note: expected type `()`\n              found type `std::result::Result&lt;_, _&gt;`\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</code></pre>\n\n<p>I also tried the question mark operator:</p>\n\n<pre><code>for item in fs::read_dir(dir)? {\n</code></pre>\n\n<p>Which had a different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n  --&gt; src/main.rs:11:17\n   |\n11 |     for item in fs::read_dir(dir)? {\n   |                 ^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\n   |\n   = help: the trait `std::ops::Try` is not implemented for `()`\n   = note: required by `std::ops::Try::from_error`\n</code></pre>\n\n<p>Previous versions of Rust had a similar error about <code>std::ops::Carrier</code></p>\n\n<p>Should I avoid <code>try!()</code> and <code>?</code>? What is the best way to handle errors? Mostly I do it like this:</p>\n\n<pre><code>match error_prone {\n    Err(e) =&gt; {\n        println!(\"Error: {}\", e);\n        return;\n    },\n    Ok(f) =&gt; f,\n};\n</code></pre>\n\n<p>But if I have to use that in a <code>for</code> loop, it's a complete mess</p>\n\n<pre><code>for i in match error_prone {\n    // match code\n} {\n    // loop code\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1433051389, "last_edit_date": 1433051389, "creation_date": 1433050758, "answer_id": 30554247, "question_id": 30554203, "link": "https://stackoverflow.com/questions/30554203/how-to-print-an-optionboxstruct/30554247#30554247", "title": "How to print! an Option&lt;Box&lt;struct&gt;&gt;?", "body": "<p>As you can see, you can't implement a trait you didn't write for a type you didn't write.  This is part of what's known as \"coherence\" and exists to prevent really weird things like linking against a library suddenly causing unrelated parts of your program to change behaviour.</p>\n\n<p>Aliasing <code>Option</code> to <code>MyOption</code> doesn't work <em>either</em> because, as you say, it's an <em>alias</em>.  That is, it's just another name for the same thing, it's not an actual, different type.</p>\n\n<p>Now, if you write a <em>wrapper</em> around <code>Option</code> like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct MyOption&lt;T&gt;(Option&lt;T&gt;);\n</code></pre>\n\n<p><em>then</em> <code>MyOption</code> will be a new, distinct type that you can implement a trait for.  Of course, you'll want to write methods to wrap and unwrap the actual <code>Option</code> you're storing.</p>\n\n<p>... But this is all rather irrelevant since you <em>could also</em> just derive <code>Debug</code> for your struct and use that.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let maybe_my_struct: Option&lt;Box&lt;MyStruct&gt;&gt; = Some(Box::new(MyStruct{foo:42}));\n    println!(\"{:?}\", Some(maybe_my_struct));\n}\n\n#[derive(Debug)]\nstruct MyStruct {\n    foo: i32,\n}\n</code></pre>\n\n<p>Or, if you really want the custom display logic for the <code>Option&lt;Box&lt;MyStruct&gt;&gt;</code> combination, you can use a marker value (this same approach is used by <code>Path</code> in the standard library, incidentally).  Like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt;\n\nfn main() {\n    let maybe_my_struct: Option&lt;Box&lt;MyStruct&gt;&gt; = Some(Box::new(MyStruct{foo:42}));\n    println!(\"{:?}\", maybe_my_struct);\n\n    // Instead of displaying directly, display via a custom marker.\n    println!(\"{}\", maybe_my_struct.display());\n    println!(\"{}\", None::&lt;Box&lt;MyStruct&gt;&gt;.display());\n}\n\n#[derive(Debug)]\nstruct MyStruct {\n    foo: i32,\n}\n\n// This is the marker we'll use to define our custom Display impl.\nstruct MmsDisplay&lt;'a&gt;(&amp;'a Option&lt;Box&lt;MyStruct&gt;&gt;);\n\n// This trait lets us extend Option&lt;Box&lt;MyStruct&gt;&gt; with a new method.\ntrait CustomMmsDisplay {\n    fn display&lt;'a&gt;(&amp;'a self) -&gt; MmsDisplay&lt;'a&gt;;\n}\n\nimpl CustomMmsDisplay for Option&lt;Box&lt;MyStruct&gt;&gt; {\n    fn display&lt;'a&gt;(&amp;'a self) -&gt; MmsDisplay&lt;'a&gt; {\n        MmsDisplay(self)\n    }\n}\n\n// And here's the display logic.\nimpl&lt;'a&gt; fmt::Display for MmsDisplay&lt;'a&gt; {\n    fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self.0 {\n            Some(ref ms) =&gt; write!(formatter, \"{}\", ms.foo),\n            None =&gt; write!(formatter, \"No struct\"),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5378, "user_id": 817978, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/NX1dl.jpg?s=128&g=1", "display_name": "TorelTwiddler", "link": "https://stackoverflow.com/users/817978/toreltwiddler"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3923, "favorite_count": 1, "accepted_answer_id": 30554247, "answer_count": 1, "score": 6, "last_activity_date": 1433051389, "creation_date": 1433050418, "question_id": 30554203, "link": "https://stackoverflow.com/questions/30554203/how-to-print-an-optionboxstruct", "title": "How to print! an Option&lt;Box&lt;struct&gt;&gt;?", "body": "<p>I am trying to print an <code>Option&lt;Box&lt;MyStruct&gt;&gt;</code>, but I get a compile error when trying to implement <code>Display for Option&lt;Box&lt;MyStruct&gt;&gt;</code>.</p>\n\n<pre><code>use std::fmt;\n\nfn main() {\n    let maybe_my_struct: Option&lt;Box&lt;MyStruct&gt;&gt; = Some(Box::new(MyStruct{foo:42}));\n    println!(\"{}\", maybe_my_struct);\n}\n\nstruct MyStruct {\n    foo: i32,\n}\n\nimpl fmt::Display for Option&lt;Box&lt;MyStruct&gt;&gt; {\n    fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match self {\n            Some(MyStruct) =&gt; write!(formatter, \"{}\", self.foo),\n            None =&gt; write!(formatter, \"No struct\"),\n        }\n    }\n}\n</code></pre>\n\n<p>The error I get is :</p>\n\n<pre><code>error: the impl does not reference any types defined in this crate; \nonly traits defined in the current crate can be implemented for arbitrary types [E0117]\n</code></pre>\n\n<p>I have tried aliasing the <code>Option</code> type, and instead implementing <code>Display for MyOption&lt;Box&lt;MyStruct&gt;&gt;</code>, but that gives the same result. What am I doing wrong?</p>\n"}, {"tags": ["parsing", "numbers", "rust"], "answers": [{"tags": [], "owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "is_accepted": false, "score": 7, "last_activity_date": 1433034502, "last_edit_date": 1433034502, "creation_date": 1433034126, "answer_id": 30552811, "question_id": 30552802, "link": "https://stackoverflow.com/questions/30552802/parse-string-to-f64-and-a-i64/30552811#30552811", "title": "Parse string to f64 and a i64", "body": "<pre><code> &amp;str.parse::&lt; \"type\" &gt;().unwrap() -&gt; \"type\"\n</code></pre>\n"}], "owner": {"reputation": 819, "user_id": 2353008, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/pb5nr.jpg?s=128&g=1", "display_name": "Valarauca", "link": "https://stackoverflow.com/users/2353008/valarauca"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4470, "favorite_count": 0, "closed_date": 1433039683, "answer_count": 1, "score": 4, "last_activity_date": 1433039648, "creation_date": 1433034012, "last_edit_date": 1433039648, "question_id": 30552802, "link": "https://stackoverflow.com/questions/30552802/parse-string-to-f64-and-a-i64", "closed_reason": "Duplicate", "title": "Parse string to f64 and a i64", "body": "<p>I can't seem to dig up anything on the official docs. I can see that there are multiple old ways of doing this (<code>int::parse_bytes</code> and <code>f32::from_string</code>) but both of these are deprecated. What is the way this is performed in 1.0?</p>\n"}, {"tags": ["io", "rust", "network-programming"], "comments": [{"owner": {"reputation": 15204, "user_id": 453271, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/G7rcK.png?s=128&g=1", "display_name": "Andriy Tylychko", "link": "https://stackoverflow.com/users/453271/andriy-tylychko"}, "edited": false, "score": 0, "creation_date": 1433028256, "post_id": 30552187, "comment_id": 49176780, "body": "please describe exactly what happens in both cases. the problem can be related to how <code>stream.read</code> overloads differs for string and array, e.g. in case of string it can wait for 512 bytes received before returning while for array it returns immediately even if received less. most probably it&#39;s not true (would be weird logic) but you got the idea"}], "answers": [{"comments": [{"owner": {"reputation": 1837, "user_id": 613016, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/o3Ywp.jpg?s=128&g=1", "display_name": "Pantelis Sopasakis", "link": "https://stackoverflow.com/users/613016/pantelis-sopasakis"}, "edited": false, "score": 2, "creation_date": 1559357531, "post_id": 30553312, "comment_id": 99405198, "body": "The question is about <code>TCPStream</code>, on which, as far as I know, one cannot apply <code>BufRead::read_line</code>, isn&#39;t it?"}, {"owner": {"reputation": 529, "user_id": 11877195, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0ed77976acc203f50e7699ba07061865?s=128&d=identicon&r=PG&f=1", "display_name": "Sahsahae", "link": "https://stackoverflow.com/users/11877195/sahsahae"}, "reply_to_user": {"reputation": 1837, "user_id": 613016, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/o3Ywp.jpg?s=128&g=1", "display_name": "Pantelis Sopasakis", "link": "https://stackoverflow.com/users/613016/pantelis-sopasakis"}, "edited": false, "score": 1, "creation_date": 1566419061, "post_id": 30553312, "comment_id": 101654652, "body": "@PantelisSopasakis Sorry I&#39;m late, but no, you can apply it. BufReader can Buffer ANY type that implements Read, and TcpStream is no different. <a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/io/struct.BufReader.html</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 11, "last_activity_date": 1528811659, "last_edit_date": 1592644375, "creation_date": 1433040009, "answer_id": 30553312, "question_id": 30552187, "link": "https://stackoverflow.com/questions/30552187/reading-from-a-tcpstream-with-readread-to-string-hangs-until-the-connection-is/30553312#30553312", "title": "Reading from a TcpStream with Read::read_to_string hangs until the connection is closed by the remote end", "body": "<p>Check out the <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"noreferrer\">docs for <code>Read::read_to_string</code></a>, emphasis mine:</p>\n<blockquote>\n<p>Read all bytes <strong>until EOF</strong> in this source, placing them into <code>buf</code>.</p>\n</blockquote>\n<p>Likewise for <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_end\" rel=\"noreferrer\"><code>Read::read_to_end</code></a>:</p>\n<blockquote>\n<p>Read all bytes <strong>until EOF</strong> in this source, placing them into <code>buf</code>.</p>\n</blockquote>\n<p>Notably, you aren't reading <em>512</em> bytes in the first example, you are pre-allocating 512 bytes of space and then reading <em>every</em> byte until the socket closes - 4 minutes later.</p>\n<p>It sounds like you want to use <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_line\" rel=\"noreferrer\"><code>BufRead::read_line</code></a>:</p>\n<blockquote>\n<p>Read all bytes until a newline byte (the 0xA byte) is reached, and append them to the provided buffer.</p>\n<p>This function will continue to read (and buffer) bytes from the underlying stream until the newline delimiter (the 0xA byte) or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to buf.</p>\n</blockquote>\n<p>You can also any other technique that will read a fixed amount of data before returning. One such example would be <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"noreferrer\"><code>Read::take</code></a>, which will cap the total number of bytes you can read at a time.</p>\n"}], "owner": {"reputation": 173, "user_id": 4957298, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/de557b92e0ead8a093985b29260d0a58?s=128&d=identicon&r=PG&f=1", "display_name": "Chirico", "link": "https://stackoverflow.com/users/4957298/chirico"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10754, "favorite_count": 0, "accepted_answer_id": 30553312, "answer_count": 1, "score": 17, "last_activity_date": 1528811659, "creation_date": 1433026822, "last_edit_date": 1528811498, "question_id": 30552187, "link": "https://stackoverflow.com/questions/30552187/reading-from-a-tcpstream-with-readread-to-string-hangs-until-the-connection-is", "title": "Reading from a TcpStream with Read::read_to_string hangs until the connection is closed by the remote end", "body": "<p>I'm attempting to implement the <a href=\"https://wiki.haskell.org/Roll_your_own_IRC_bot\" rel=\"noreferrer\">Haskell IRC bot tutorial</a> in Rust and am having some difficulty reading what the server sends me after connecting. What seems to happen is that I connect, read ~5 KB from the server, and then roughly 240 seconds later everything is dumped at once instead of being read line-by-line. The connection is closed by a ping timeout, which should happen eventually, since I don't yet have a ping-pong function to reply with. </p>\n\n<p>Here's what I have so far:</p>\n\n<pre><code>use std::io::{Read, Write};\nuse std::net::TcpStream;\n\nfn main() {\n    let mut stream = TcpStream::connect(\"irc.freenode.org:6667\").unwrap();\n\n    let _ = stream.write(b\"NICK G-SERUFU\\r\\n\");\n    let _ = stream.write(b\"USER G-SERUFU 0 * :brobot\\r\\n\");\n    let _ = stream.write(b\"JOIN #tutbot-testing\\r\\n\");\n\n    let mut line = String::with_capacity(512);\n    loop {\n        let result = stream.read_to_string(&amp;mut line);\n        match result {\n            Ok(n) =&gt; println!(\"Received {} bytes\", n),\n            _ =&gt; {}\n        }\n        line.clear();\n    }\n}\n</code></pre>\n\n<p>When I modify the loop a to use an array instead of a string, I immediately get the output I expect:</p>\n\n<pre><code>let mut line;\nloop {\n    line = [0; 512];\n    let result = stream.read(&amp;mut line);\n    match result {\n        Ok(n) =&gt; println!(\"Received {} bytes\",n),\n        _ =&gt; {},\n    }\n}\n</code></pre>\n\n<p>My conclusion is that <code>stream.read_to_string(&amp;mut line)</code> is somehow the culprit. Why might that be the case? Is there something obvious that I'm overlooking?</p>\n\n<p>To be more specific, in the first case the output appears after the ping timeout, upon which the following is printed:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>//Around 4 minutes elapse before anything is printed to console\nReceived 5323 bytes\nReceived 0 bytes\nReceived 0 bytes\nReceived 0 bytes\n//Continues to print \"Received 0 bytes\" since the connection has closed but I haven't broken out of the infinite loop\n</code></pre>\n\n<p>In the second case using the array, I receive the correct output almost immediately:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Received 64 bytes\nReceived 51 bytes\nReceived 512 bytes\nReceived 512 bytes\nReceived 350 bytes\nReceived 512 bytes\nReceived 512 bytes\n...\n</code></pre>\n"}, {"tags": ["testing", "rust"], "answers": [{"comments": [{"owner": {"reputation": 21, "user_id": 2475901, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e8dd99012b3caa195eb6016f691d610?s=128&d=identicon&r=PG", "display_name": "Varun", "link": "https://stackoverflow.com/users/2475901/varun"}, "edited": false, "score": 0, "creation_date": 1433092311, "post_id": 30548262, "comment_id": 49191855, "body": "I don&#39;t believe this is the solution. I tried it and I can still see the output as a result of running the tests in parallel. I think it might have to do with <a href=\"https://doc.rust-lang.org/std/env/fn.set_var.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/env/fn.set_var.html</a> but I am not sure where to  call it. I am also using <code>cargo test</code> to run my tests."}, {"owner": {"reputation": 1527, "user_id": 4857270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57ed62a3f8d09be0f1bee9d8a89e0bdd?s=128&d=identicon&r=PG&f=1", "display_name": "Gerard van Helden", "link": "https://stackoverflow.com/users/4857270/gerard-van-helden"}, "reply_to_user": {"reputation": 21, "user_id": 2475901, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e8dd99012b3caa195eb6016f691d610?s=128&d=identicon&r=PG", "display_name": "Varun", "link": "https://stackoverflow.com/users/2475901/varun"}, "edited": false, "score": 0, "creation_date": 1433094123, "post_id": 30548262, "comment_id": 49192533, "body": "I don&#39;t think that is actually different from setting it in the shell... Can you compose an example as a gist, maybe?"}], "tags": [], "owner": {"reputation": 1527, "user_id": 4857270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/57ed62a3f8d09be0f1bee9d8a89e0bdd?s=128&d=identicon&r=PG&f=1", "display_name": "Gerard van Helden", "link": "https://stackoverflow.com/users/4857270/gerard-van-helden"}, "is_accepted": false, "score": 2, "last_activity_date": 1433014234, "last_edit_date": 1433014234, "creation_date": 1433001767, "answer_id": 30548262, "question_id": 30548232, "link": "https://stackoverflow.com/questions/30548232/how-do-i-set-the-rust-test-tasks-environment-variable/30548262#30548262", "title": "How do I set the RUST_TEST_TASKS environment variable?", "body": "<p>I think what they mean is setting the environment variables in the shell the test runner is running in, such as:</p>\n\n<pre><code>RUST_TEST_TASKS=1 ./my-test-runner\n</code></pre>\n\n<p>or exporting it:</p>\n\n<pre><code>export RUST_TEST_TASKS=1\n./my-test-runner\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "is_accepted": false, "score": 3, "last_activity_date": 1433300434, "last_edit_date": 1433300434, "creation_date": 1433270578, "answer_id": 30604067, "question_id": 30548232, "link": "https://stackoverflow.com/questions/30548232/how-do-i-set-the-rust-test-tasks-environment-variable/30604067#30604067", "title": "How do I set the RUST_TEST_TASKS environment variable?", "body": "<p>The environment variable is actually <code>RUST_TEST_THREADS</code></p>\n"}], "owner": {"reputation": 21, "user_id": 2475901, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3e8dd99012b3caa195eb6016f691d610?s=128&d=identicon&r=PG", "display_name": "Varun", "link": "https://stackoverflow.com/users/2475901/varun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 267, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1433300434, "creation_date": 1433001545, "last_edit_date": 1433039719, "question_id": 30548232, "link": "https://stackoverflow.com/questions/30548232/how-do-i-set-the-rust-test-tasks-environment-variable", "title": "How do I set the RUST_TEST_TASKS environment variable?", "body": "<p>I am attempting to write tests for my Rust program. Normally, these tests are run in parallel but I want to run them sequentially. I looked around and I can set this environment variable <code>RUST_TEST_TASKS=1</code>, but I am not sure where to do that.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 19, "last_activity_date": 1459774464, "last_edit_date": 1459774464, "creation_date": 1432992162, "answer_id": 30546727, "question_id": 30546644, "link": "https://stackoverflow.com/questions/30546644/why-dont-options-some-and-none-variants-need-to-be-qualified/30546727#30546727", "title": "Why don&#39;t Option&#39;s Some and None variants need to be qualified?", "body": "<p>The <a href=\"http://doc.rust-lang.org/std/prelude/index.html\" rel=\"noreferrer\">Rust prelude</a>, which is automatically inserted into every source file, contains this line:</p>\n\n<pre><code>pub use option::Option::{self, Some, None};\n</code></pre>\n\n<p>Which brings <code>Option</code> and both its variants in scope.</p>\n"}], "owner": {"reputation": 165, "user_id": 1294912, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5b8ae612a01178b1f2d60055adbc6b96?s=128&d=identicon&r=PG", "display_name": "krixon", "link": "https://stackoverflow.com/users/1294912/krixon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 569, "favorite_count": 2, "accepted_answer_id": 30546727, "answer_count": 1, "score": 13, "last_activity_date": 1459774464, "creation_date": 1432991671, "last_edit_date": 1459774447, "question_id": 30546644, "link": "https://stackoverflow.com/questions/30546644/why-dont-options-some-and-none-variants-need-to-be-qualified", "title": "Why don&#39;t Option&#39;s Some and None variants need to be qualified?", "body": "<p>According to the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noreferrer\">docs for <code>Option</code></a>, <code>Option</code> is an enum with variants <code>Some&lt;T&gt;</code> and <code>None</code>.</p>\n\n<p>Why is it possible to refer to <code>Some</code> and <code>None</code> without qualifying them?</p>\n\n<p>For example, this works fine:</p>\n\n<pre><code>let x = Option::Some(5);\nmatch x {\n    Some(a) =&gt; println!(\"Got {}\", a),\n    None =&gt; println!(\"Got None\"),\n}\n</code></pre>\n\n<p>But this fails to compile:</p>\n\n<pre><code>enum Foo&lt;T&gt; {\n    Bar(T),\n    Baz,\n}\nlet x = Foo::Bar(5);\nmatch x {\n    Bar(a) =&gt; println!(\"Got {}\", a),\n    Baz =&gt; println!(\"Got Baz\"),\n}\n</code></pre>\n\n<p>The error from the compiler is <code>unresolved enum variant, struct or const `Bar`</code></p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "edited": false, "score": 0, "creation_date": 1433034624, "post_id": 30551877, "comment_id": 49177908, "body": "This saddens me. I was hoping to make combinators with macros, and being unable to return tokens makes that painful. :-("}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "edited": false, "score": 0, "creation_date": 1433084542, "post_id": 30551877, "comment_id": 49189259, "body": "@user: macros are very much a work in progress at the moment; already incredibly useful, but nowhere near as flexible as they could be."}, {"owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433133128, "post_id": 30551877, "comment_id": 49202218, "body": "@MatthieuM. Not complaining about their limitations so much as wishing I could re-order chronology to use the spectacular Rust of the future. :-D"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433161760, "post_id": 30551877, "comment_id": 49216999, "body": "Rest assured macros are already <a href=\"https://play.rust-lang.org/?gist=7667b480a0835bd8740a&amp;version=nightly\" rel=\"nofollow noreferrer\">insane (nightly branch)</a>"}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 5, "last_activity_date": 1433023870, "last_edit_date": 1495539935, "creation_date": 1433023870, "answer_id": 30551877, "question_id": 30546157, "link": "https://stackoverflow.com/questions/30546157/do-macros-not-expand-interpolated-token-trees/30551877#30551877", "title": "Do macros not expand interpolated token trees?", "body": "<p>The why is: it's not implemented yet. This is a known limitation (as of Rust 1.0). <code>tt</code> arguments to macros <a href=\"https://stackoverflow.com/a/30293051\">are useful</a>, but they must always be forwarded to macros when used.</p>\n"}], "owner": {"reputation": 3692, "user_id": 1467466, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/ec7b22599095a0d388d6e51818e7db9b?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/1467466/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "accepted_answer_id": 30551877, "answer_count": 1, "score": 5, "last_activity_date": 1433023870, "creation_date": 1432988818, "last_edit_date": 1432989005, "question_id": 30546157, "link": "https://stackoverflow.com/questions/30546157/do-macros-not-expand-interpolated-token-trees", "title": "Do macros not expand interpolated token trees?", "body": "<p>Why does <a href=\"http://is.gd/F5GGsk\" rel=\"noreferrer\">this</a>:</p>\n\n<pre><code>macro_rules! a_macro {\n    ($($a:tt)+) =&gt; ($($a)+);\n}   \n\nfn main() {\n    let x:u32 = 1;\n    let y:u32 = a_macro!(-x);\n}\n</code></pre>\n\n<p>fail to compile with</p>\n\n<pre><code>&lt;anon&gt;:2:23: 2:25 error: unexpected token: `an interpolated tt`\n&lt;anon&gt;:2     ($($a:tt)+) =&gt; ($($a)+);\n                               ^~\nplaypen: application terminated with error code 101\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432991217, "post_id": 30546184, "comment_id": 49165547, "body": "Thank you, I agree in this simple case it could. But if you add more cases, e.g. <code>&gt; 1000</code> <code>&gt; 100</code>  <code>&gt; 10</code> <code>&gt; 0</code> ... It would not be very nice with <code>if else if else</code>. Could there be any possibility to see my last example as syntactic sugar in a future version? I mean could I propose this to the devs or does it make no sense?"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432991353, "post_id": 30546184, "comment_id": 49165594, "body": "And why would my first example give a warning for unused variables? As I see it, pair is always equals pair, so the first pattern is always true (after that you add the guard condition)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432991805, "post_id": 30546184, "comment_id": 49165731, "body": "@MathieuDavid the left hand side of the <i>match arm</i> is a pattern, and it creates a new set of <i>variable bindings</i>. Notably, the outer <code>pair</code> and the inner <code>pair</code> are different. If you changed the inner name to <code>foobar</code> and removed the guard, it would <b>also always match</b>."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1432991952, "post_id": 30546184, "comment_id": 49165776, "body": "@Shepmaster which variable would be counted as unused in the first example?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432992125, "post_id": 30546184, "comment_id": 49165832, "body": "@MathieuDavid yeah, I figured your example was a simplified version. <i>Personally</i>, I don&#39;t think that change would be useful, but I would <b>strongly encourage</b> you to open discussion about it on the <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust users forum</a>! There may be lots of other people that would want it."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432992296, "post_id": 30546184, "comment_id": 49165903, "body": "OK thanks for the suggestion, I will definitely do that. I know it&#39;s not very useful but it removes some repetition in some cases. That&#39;s why I said syntactic sugar ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "edited": false, "score": 0, "creation_date": 1432992424, "post_id": 30546184, "comment_id": 49165939, "body": "@Levans oh, whoops! I saw it wasn&#39;t used in the match arm body, but forgot about the pattern guard! Embarrassing!"}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 1, "creation_date": 1432994934, "post_id": 30546184, "comment_id": 49166623, "body": "@Shepmaster I made a <a href=\"https://users.rust-lang.org/t/proposal-for-syntactic-sugar-for-match-with-some-pattern-guards/1636/1\" rel=\"nofollow noreferrer\">post on the Rust user forum</a> :)"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1432992315, "last_edit_date": 1432992315, "creation_date": 1432988986, "answer_id": 30546184, "question_id": 30545994, "link": "https://stackoverflow.com/questions/30545994/what-is-the-preferred-way-of-matching-a-variable-with-a-pattern-guard-that-doesn/30546184#30546184", "title": "What is the preferred way of matching a variable with a pattern guard that doesn&#39;t use the matched value?", "body": "<p>The version that does not bind the matched variable is preferred:</p>\n\n<pre><code>fn main() {\n    let pair = 7;\n\n    match pair {\n        _ if pair &gt; 5 =&gt; println!(\"Yeah\"),\n        _ =&gt; println!(\"No\"),\n    }\n}\n</code></pre>\n\n<p>This is the shortest version <em>with a match</em>. Of course, this example could just use an <code>if</code>.</p>\n\n<p><s>I'm actually surprised that the first  version does not give a warning about unused variables.</s></p>\n\n<p>Ah, this was me being silly. The variable <strong>is</strong> used here, in the pattern guard. ^_^</p>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2804, "favorite_count": 0, "accepted_answer_id": 30546184, "answer_count": 1, "score": 7, "last_activity_date": 1432992315, "creation_date": 1432987847, "last_edit_date": 1432988873, "question_id": 30545994, "link": "https://stackoverflow.com/questions/30545994/what-is-the-preferred-way-of-matching-a-variable-with-a-pattern-guard-that-doesn", "title": "What is the preferred way of matching a variable with a pattern guard that doesn&#39;t use the matched value?", "body": "<p>Between the two snippets below, which is the better / preferred one?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let pair = 7;\n\n    match pair {\n        pair if pair &gt; 5 =&gt; println!(\"Yeah\"),\n        _ =&gt; println!(\"No\"),\n    }\n}\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let pair = 7;\n\n    match pair {\n        _ if pair &gt; 5 =&gt; println!(\"Yeah\"),\n        _ =&gt; println!(\"No\"),\n    }\n}\n</code></pre>\n\n<p>And is there a better way to write this? Because this doesn't work:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let pair = 7;\n\n    match pair {\n        &gt; 5 =&gt; println!(\"Yeah\"),\n        _ =&gt; println!(\"No\"),\n    }\n}\n</code></pre>\n"}, {"tags": ["windows", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432989505, "post_id": 30545958, "comment_id": 49164948, "body": "Perhaps a duplicate of <a href=\"http://stackoverflow.com/q/28183497/155423\">stackoverflow.com/q/28183497/155423</a> ? Specifically <code>my_proj\\bin\\x86_64-pc-windows-gnu</code> or <code>my_proj\\bin\\i686-pc-windows-gnu</code>."}, {"owner": {"reputation": 1180, "user_id": 1496062, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/baea31fd59646da8ecf93b5fa519b67a?s=128&d=identicon&r=PG", "display_name": "user1496062", "link": "https://stackoverflow.com/users/1496062/user1496062"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433024483, "post_id": 30545958, "comment_id": 49175909, "body": "Nope because it compiles and runs without  the link"}], "answers": [{"tags": [], "owner": {"reputation": 3892, "user_id": 599575, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/ob4mZ.png?s=128&g=1", "display_name": "Michael", "link": "https://stackoverflow.com/users/599575/michael"}, "is_accepted": true, "score": 3, "last_activity_date": 1611132429, "last_edit_date": 1611132429, "creation_date": 1433434818, "answer_id": 30649137, "question_id": 30545958, "link": "https://stackoverflow.com/questions/30545958/ffi-example-from-book-cannot-find-lanneclib-under-windows/30649137#30649137", "title": "FFI example from book cannot find -lanneclib under Windows", "body": "<p>In the error message you can see that the folder <code>[your source folder]\\bin\\x86_64-pc-windows-gnu</code> is added to the library path. You have to put your library into this folder. You may also have to add a 'lib' prefix to the library name.</p>\n<p>Here is a small example that works for me:</p>\n<p>A C file with a hello-function:</p>\n<pre class=\"lang-c prettyprint-override\"><code>#include &lt;stdio.h&gt;\n\nvoid hello() {\n    printf(&quot;Hello from C!\\n&quot;);\n}\n</code></pre>\n<p>Compile the C file to a shared library libhello.c using MinGW:</p>\n<pre><code>gcc -shared -o libhello.dll hello.c\n</code></pre>\n<p>The Rust file main.rs:</p>\n<pre><code>#[link(name = &quot;hello&quot;)]\nextern {\n    fn hello();\n}\n\nfn main() {\n    unsafe { hello(); }\n}\n</code></pre>\n<p>Now you have to put (a copy of) the libhello.dll into the sub-folder \\bin\\x86_64-pc-windows-gnu:</p>\n<pre><code>+ bin\n+ --- x86_64-pc-windows-gnu\n      + --- libhello.dll\n+ main.rs\n</code></pre>\n<p>And you should be able to compile it via</p>\n<pre><code>rustc main.rs\n</code></pre>\n<p>Note in order to execute the main.exe you also need a copy of the libhello.dll next to the main.exe or in the system path.</p>\n"}], "owner": {"reputation": 1180, "user_id": 1496062, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/baea31fd59646da8ecf93b5fa519b67a?s=128&d=identicon&r=PG", "display_name": "user1496062", "link": "https://stackoverflow.com/users/1496062/user1496062"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 659, "favorite_count": 1, "accepted_answer_id": 30649137, "answer_count": 1, "score": 5, "last_activity_date": 1611132429, "creation_date": 1432987594, "last_edit_date": 1432990268, "question_id": 30545958, "link": "https://stackoverflow.com/questions/30545958/ffi-example-from-book-cannot-find-lanneclib-under-windows", "title": "FFI example from book cannot find -lanneclib under Windows", "body": "<p>Error linking following the <a href=\"http://doc.rust-lang.org/book/ffi.html\" rel=\"noreferrer\">external c dll with call back example</a>. </p>\n\n<p>I have created anneclib.dll and scattered it ( and the lib) have even tried full path but still get the same error ( but with the full path) . </p>\n\n<blockquote>\n  <p>Error 1   error: linking with <code>gcc</code> failed: exit code: 1 note: \"gcc\"\n  \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\"\n  \"-Wl,--nxcompat\" \"-static-libgcc\" \"-m64\" \"-L\" \"C:\\Program Files\\Rust\n  stable 1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\" \"-o\"\n  \"obj\\Debug\\Anne.exe\" \"obj\\Debug\\Anne.o\" \"-Wl,--gc-sections\"\n  \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libstd-4e7c5e5c.rlib\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libcollections-4e7c5e5c.rlib\"\n  \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libunicode-4e7c5e5c.rlib\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\librand-4e7c5e5c.rlib\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\liballoc-4e7c5e5c.rlib\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\liblibc-4e7c5e5c.rlib\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\\libcore-4e7c5e5c.rlib\" \"-L\" \"C:\\Program Files\\Rust stable\n  1.0\\bin\\rustlib\\x86_64-pc-windows-gnu\\lib\" \"-L\" \"C:\\src\\ann\\anne.rust\\anne.rust\\Anne.rust\\bin\\x86_64-pc-windows-gnu\"\n  \"-L\" \"C:\\src\\ann\\anne.rust\\anne.rust\\Anne\\bin\\x86_64-pc-windows-gnu\"\n  \"-Wl,--whole-archive\" \"-Wl,-Bstatic\" \"-Wl,--no-whole-archive\"\n  \"-Wl,-Bdynamic\" \"-lanneclib\" \"-lws2_32\" \"-luserenv\" \"-lcompiler-rt\"\n  note: ld: cannot find -lanneclib</p>\n</blockquote>\n\n<p>Using the Visual Studio Rust project.</p>\n\n<p>Where should I put it ?</p>\n\n<pre><code>extern fn callback(a: i32) {\n    println!(\"I'm called from C with value {0}\", a);\n}\n\n#[link(name = \"anneclib\")]\nextern {\n   fn register_callback(cb: extern fn(i32)) -&gt; i32;\n   fn trigger_callback();\n}\n\nfn main() {\n    unsafe {\n        register_callback(callback);\n        trigger_callback(); // Triggers the callback\n    }\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 3, "last_activity_date": 1432970835, "creation_date": 1432970835, "answer_id": 30543533, "question_id": 30543029, "link": "https://stackoverflow.com/questions/30543029/who-owns-a-box-in-the-heap/30543533#30543533", "title": "Who owns a Box in the heap?", "body": "<p><code>Box&lt;Foo&gt;</code> represents a <code>Foo</code> instance somewhere on the heap, managed and owned by the <code>Box</code> object.</p>\n\n<p>So in your case of a list which final value is:</p>\n\n\n\n<pre class=\"lang-rust prettyprint-override\"><code>let list = Cons(3, Box::new(Cons(2, Box::new(Cons(1, Box::new(Nil))))))\n</code></pre>\n\n<ul>\n<li><code>list</code> owns a <code>List</code> object which is a <code>Cons</code> variant of the enum, owning itself a <code>u32</code> of value <code>3</code> and a <code>Box&lt;List&gt;</code></li>\n<li>This <code>Box&lt;List&gt;</code> manages and owns a <code>List</code> instance: a <code>Cons</code> variant owning itself a <code>2</code> value and an other <code>Box&lt;List&gt;</code></li>\n<li>This second <code>Box&lt;List&gt;</code> manages and owns a <code>List</code> instance: a <code>Cons</code> variant owning itself a <code>1</code> value and a <code>Box&lt;List&gt;</code></li>\n<li>This last <code>Box&lt;List&gt;</code> manages and owns a <code>List</code> instance: a <code>Nil</code> variant.</li>\n</ul>\n\n<p>So yes, the contents of a <code>Box</code> may own other <code>Box</code>es, and when a <code>Box</code> is destroyed, it will properly destroy its content, which is expected to itself properly destroy its contents as well, up to the bottom of the owning tree.</p>\n"}], "owner": {"reputation": 977, "user_id": 3800474, "user_type": "registered", "profile_image": "https://graph.facebook.com/1326889668/picture?type=large", "display_name": "kevinyu", "link": "https://stackoverflow.com/users/3800474/kevinyu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 289, "favorite_count": 2, "accepted_answer_id": 30543533, "answer_count": 1, "score": 5, "last_activity_date": 1432988802, "creation_date": 1432966925, "last_edit_date": 1432988802, "question_id": 30543029, "link": "https://stackoverflow.com/questions/30543029/who-owns-a-box-in-the-heap", "title": "Who owns a Box in the heap?", "body": "<p>I am learning Rust right now. I want to check my understanding of ownership in rust. I am confused with ownership and borrowing concepts in recursive structure. I see this code in <a href=\"http://rustbyexample.com/custom_types/enum.html\" rel=\"nofollow\">rustbyexample.com</a></p>\n\n<pre><code>// Allow Cons and Nil to be referred to without namespacing\nuse List::{Cons, Nil};\n\n// A linked list node, which can take on any of these two variants\nenum List {\n    // Cons: Tuple struct that wraps an element and a pointer to the next node\n    Cons(u32, Box&lt;List&gt;),\n    // Nil: A node that signifies the end of the linked list\n    Nil,\n}\n\n// Methods can be attached to an enum\nimpl List {\n    // Create an empty list\n    fn new() -&gt; List {\n        // `Nil` has type `List`\n        Nil\n    }\n\n    // Consume a list, and return the same list with a new element at its front\n    fn prepend(self, elem: u32) -&gt; List {\n        // `Cons` also has type List\n        Cons(elem, Box::new(self))\n    }\n\n    // Return the length of the list\n    fn len(&amp;self) -&gt; u32 {\n        // `self` has to be matched, because the behavior of this method\n        // depends on the variant of `self`\n        // `self` has type `&amp;List`, and `*self` has type `List`, matching on a\n        // concrete type `T` is preferred over a match on a reference `&amp;T`\n        match *self {\n            // Can't take ownership of the tail, because `self` is borrowed;\n            // instead take a reference to the tail\n            Cons(_, ref tail) =&gt; 1 + tail.len(),\n            // Base Case: An empty list has zero length\n            Nil =&gt; 0\n        }\n    }\n\n    // Return representation of the list as a (heap allocated) string\n    fn stringify(&amp;self) -&gt; String {\n        match *self {\n            Cons(head, ref tail) =&gt; {\n                // `format!` is similar to `print!`, but returns a heap\n                // allocated string instead of printing to the console\n                format!(\"{}, {}\", head, tail.stringify())\n            },\n            Nil =&gt; {\n                format!(\"Nil\")\n            },\n        }\n    }\n}\n\nfn main() {\n    // Create an empty linked list\n    let mut list = List::new();\n\n    // Append some elements\n    list = list.prepend(1);\n    list = list.prepend(2);\n    list = list.prepend(3);\n\n    // Show the final state of the list\n    println!(\"linked list has length: {}\", list.len());\n    println!(\"{}\", list.stringify());\n}\n</code></pre>\n\n<p>How to visualize the stack and the heap of this code?</p>\n\n<p>From what I have learned, <code>prepend</code> takes ownership of list, allocate space in heap and move the list to heap. When <code>prepend</code> finishes, it moves (gives ownership) the newly created list to external variable.</p>\n\n<p>Is this visualization correct?</p>\n\n<p>First List::new return Nil so stack will contain Nil.</p>\n\n<p>After list.prepend(1) executed Nil will be in the heap at address 0x0000(assumption), stack will contain Cons(1,0x0000).</p>\n\n<p>After list.prepend(2) executed Cons(1,0x0000) will be in the heap at address 0x00002(assumption), stack will contain Cons(2,0x0002).</p>\n\n<p>After list.prepend(3) executed Cons(2,0x0002) will be in the heap at address 0x00004(assumption), stack will contain Cons(3,0x0004).</p>\n\n<p>Now, who have the ownership of Cons(1,0x0000)? Is Cons(2,0x0002) have the ownership of Cons(1,0x0000)? Is variable in heap allowed to have ownership of a resource?</p>\n\n<p>From this code I am assuming that variable in heap may have the ownership of a resource, so if Rust deallocates that variable, it will deallocate the resource too. Is this correct? </p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 19, "last_activity_date": 1576600046, "last_edit_date": 1576600046, "creation_date": 1432944861, "answer_id": 30540864, "question_id": 30540822, "link": "https://stackoverflow.com/questions/30540822/is-there-a-built-in-way-to-compare-two-iterators/30540864#30540864", "title": "Is there a built-in way to compare two iterators?", "body": "<p>There's <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq\" rel=\"noreferrer\"><code>Iterator::eq</code></a> as well as various other comparison functions (<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.lt\" rel=\"noreferrer\"><code>lt</code></a>, <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.ne\" rel=\"noreferrer\"><code>ne</code></a>, etc.).</p>\n"}, {"tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 3, "last_activity_date": 1576600085, "last_edit_date": 1576600085, "creation_date": 1432975318, "answer_id": 30544101, "question_id": 30540822, "link": "https://stackoverflow.com/questions/30540822/is-there-a-built-in-way-to-compare-two-iterators/30544101#30544101", "title": "Is there a built-in way to compare two iterators?", "body": "<p>The third party crate <a href=\"https://crates.io/crates/itertools\" rel=\"nofollow noreferrer\">itertools</a> has <a href=\"https://docs.rs/itertools/0.8.2/itertools/fn.equal.html\" rel=\"nofollow noreferrer\"><code>itertools::equal</code></a> and <a href=\"https://docs.rs/itertools/0.8.2/itertools/fn.assert_equal.html\" rel=\"nofollow noreferrer\"><code>itertools::assert_equal</code></a>. </p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4007, "favorite_count": 0, "accepted_answer_id": 30540864, "answer_count": 2, "score": 13, "last_activity_date": 1576600132, "creation_date": 1432944475, "last_edit_date": 1576600132, "question_id": 30540822, "link": "https://stackoverflow.com/questions/30540822/is-there-a-built-in-way-to-compare-two-iterators", "title": "Is there a built-in way to compare two iterators?", "body": "<p>I've written the following function to compare two iterators, element-by-element. However, it would be great if I could just reuse something in the standard library.</p>\n\n<pre><code>fn iter_eq&lt;A, B, T, U&gt;(mut a: A, mut b: B) -&gt; bool\nwhere\n    A: Iterator&lt;Item = T&gt;,\n    B: Iterator&lt;Item = U&gt;,\n    T: PartialEq&lt;U&gt;,\n{\n    loop {\n        match (a.next(), b.next()) {\n            (Some(ref a), Some(ref b)) if a == b =&gt; continue,\n            (None, None) =&gt; return true,\n            _ =&gt; return false,\n        }\n    }\n}\n\nfn main() {\n    let a = vec![1, 2, 3].into_iter();\n    let b = vec![1, 2, 3].into_iter();\n\n    assert!(iter_eq(a, b));\n}\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 501, "user_id": 2551298, "user_type": "registered", "accept_rate": 8, "profile_image": "https://graph.facebook.com/100000108838340/picture?type=large", "display_name": "Chris Root", "link": "https://stackoverflow.com/users/2551298/chris-root"}, "edited": false, "score": 0, "creation_date": 1433008711, "post_id": 30540869, "comment_id": 49171176, "body": "Ah nice so the reference to the function would be stored similar to how you might do so in Javascript. One part of the syntax I don&#39;t have a complete understanding of is what is between the angle brackets. I get that it makes certain at compile time that the values assigned to the hash are indeed function pointers but I can&#39;t find anything similar to that syntax in Rust examples in particular the <code>&lt;_,</code> part. What is the signficance of the underscore in that syntax?"}, {"owner": {"reputation": 4491, "user_id": 1264974, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/6558cf06df3ccf1c49329f38fd843b7d?s=128&d=identicon&r=PG", "display_name": "justinas", "link": "https://stackoverflow.com/users/1264974/justinas"}, "edited": false, "score": 2, "creation_date": 1433077425, "post_id": 30540869, "comment_id": 49187084, "body": "<code>_</code> tells the compiler to infer the type (in this case, <code>&amp;str</code>) instead of having you to write it manually. See for more examples: <a href=\"http://is.gd/qiJUtJ\" rel=\"nofollow noreferrer\">is.gd/qiJUtJ</a>"}, {"owner": {"reputation": 501, "user_id": 2551298, "user_type": "registered", "accept_rate": 8, "profile_image": "https://graph.facebook.com/100000108838340/picture?type=large", "display_name": "Chris Root", "link": "https://stackoverflow.com/users/2551298/chris-root"}, "edited": false, "score": 1, "creation_date": 1433122048, "post_id": 30540869, "comment_id": 49200130, "body": "Okay thank you very much for the help. Makes me excited about building things in Rust. I have quite a few ideas. Being primarily a Ruby, PHP and Javascript coder this is a somewhat new world for me."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1576248958, "last_edit_date": 1576248958, "creation_date": 1432944944, "answer_id": 30540869, "question_id": 30540807, "link": "https://stackoverflow.com/questions/30540807/calling-a-function-only-known-at-runtime/30540869#30540869", "title": "Calling a function only known at runtime", "body": "<p>You can add references to functions to a <code>HashMap</code>:</p>\n\n<pre><code>use std::collections::HashMap;\n\n// Add appropriate logic\nfn validate_str(_: &amp;str) -&gt; bool { true }\nfn validate_bool(_: &amp;str) -&gt; bool { true }\n\nfn main() {\n    let mut methods: HashMap&lt;_, fn(&amp;str) -&gt; bool&gt; = HashMap::new();\n\n    methods.insert(\"string\", validate_str);\n    methods.insert(\"boolean\", validate_bool);\n\n    let input = [(\"string\", \"alpha\"), (\"boolean\", \"beta\")];\n\n    for (kind, value) in &amp;input {\n        let valid = match methods.get(kind) {\n            Some(f) =&gt; f(value),\n            None =&gt; false,\n        };\n\n        println!(\"'{}' is a valid {}? {}\", value, kind, valid);\n    }\n}\n</code></pre>\n\n<p>The only tricky part here is the line <code>let mut methods: HashMap&lt;_, fn(&amp;str) -&gt; bool&gt; = HashMap::new()</code>. You need to define that that map will have values that are <em>function</em> pointers. Each function has its own unique, anonymous type, and function pointers are an abstraction on top of that.</p>\n"}], "owner": {"reputation": 501, "user_id": 2551298, "user_type": "registered", "accept_rate": 8, "profile_image": "https://graph.facebook.com/100000108838340/picture?type=large", "display_name": "Chris Root", "link": "https://stackoverflow.com/users/2551298/chris-root"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1651, "favorite_count": 2, "accepted_answer_id": 30540869, "answer_count": 1, "score": 9, "last_activity_date": 1576248958, "creation_date": 1432944293, "last_edit_date": 1432944538, "question_id": 30540807, "link": "https://stackoverflow.com/questions/30540807/calling-a-function-only-known-at-runtime", "title": "Calling a function only known at runtime", "body": "<p>I want to do my first try at a Rust application by doing an input validation server which can validate values from an AJAX request. This means I need a way to use a JSON configuration file to specify which validation functions are used based on the name of the input values and perhaps a form name which come in at runtime in an HTTP request. How can I do something similar to PHP's call_user_function_array in Rust?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 0, "creation_date": 1432978741, "post_id": 30540952, "comment_id": 49161813, "body": "Perfect, thanks! I&#39;m going to throw this up on crates.io, I hope that&#39;s OK."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 4, "creation_date": 1432989251, "post_id": 30540952, "comment_id": 49164886, "body": "@WilfredHughes That&#39;s fine, but you may wish to contribute it to the <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/index.html\" rel=\"nofollow noreferrer\">itertools crate</a>, which is a great repository for these types of additions."}, {"owner": {"reputation": 4240, "user_id": 1541330, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/9d7b0057ffc24e644c4a30ba599d7753?s=128&d=identicon&r=PG&f=1", "display_name": "U007D", "link": "https://stackoverflow.com/users/1541330/u007d"}, "edited": false, "score": 2, "creation_date": 1492045013, "post_id": 30540952, "comment_id": 73825781, "body": "Thanks for this answer, @Shepmaster.  This example helped resolve several issues for me that I haven&#39;t seen in any docs I&#39;ve read--in fact, this is the <i>only</i> answer I can recall having read showing how to create generic extension methods against Iterator.  Both question and answer are much appreciated."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 31, "last_activity_date": 1525286868, "last_edit_date": 1525286868, "creation_date": 1432945689, "answer_id": 30540952, "question_id": 30540766, "link": "https://stackoverflow.com/questions/30540766/how-can-i-add-new-methods-to-iterator/30540952#30540952", "title": "How can I add new methods to Iterator?", "body": "<p>In your particular case, it's because you have implemented your trait for an iterator of <code>String</code>, but your vector is providing an iterator of <code>&amp;str</code>. Here's a more generic version:</p>\n\n<pre><code>use std::collections::HashSet;\nuse std::hash::Hash;\n\nstruct Unique&lt;I&gt;\nwhere\n    I: Iterator,\n{\n    seen: HashSet&lt;I::Item&gt;,\n    underlying: I,\n}\n\nimpl&lt;I&gt; Iterator for Unique&lt;I&gt;\nwhere\n    I: Iterator,\n    I::Item: Hash + Eq + Clone,\n{\n    type Item = I::Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        while let Some(x) = self.underlying.next() {\n            if !self.seen.contains(&amp;x) {\n                self.seen.insert(x.clone());\n                return Some(x);\n            }\n        }\n        None\n    }\n}\n\ntrait UniqueExt: Iterator {\n    fn unique(self) -&gt; Unique&lt;Self&gt;\n    where\n        Self::Item: Hash + Eq + Clone,\n        Self: Sized,\n    {\n        Unique {\n            seen: HashSet::new(),\n            underlying: self,\n        }\n    }\n}\n\nimpl&lt;I: Iterator&gt; UniqueExt for I {}\n\nfn main() {\n    let foo = vec![\"a\", \"b\", \"a\", \"cc\", \"cc\", \"d\"];\n\n    for s in foo.iter().unique() {\n        println!(\"{}\", s);\n    }\n}\n</code></pre>\n\n<p>Broadly, we create a new <em>extension trait</em> called <code>UniqueExt</code> which has <code>Iterator</code> as a supertrait. When <code>Iterator</code> is a supertrait, we will have access to the <em>associated type</em> <code>Iterator::Item</code>.</p>\n\n<p>This trait defines the <code>unique</code> method, which is only valid to call when then iterated item can be:</p>\n\n<ol>\n<li>Hashed</li>\n<li>Compared for total equality</li>\n<li>Cloned</li>\n</ol>\n\n<p>Additionally, it requires that the item implementing <code>Iterator</code> have a known size at compile time. This is done so that the iterator can be <em>consumed</em> by the <code>Unique</code> iterator adapter.</p>\n\n<p>The other important part is the <em>blanket implementation</em> of the trait for any type that also implements <code>Iterator</code>:</p>\n\n<pre><code>impl&lt;I: Iterator&gt; UniqueExt for I {}\n</code></pre>\n"}], "owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3434, "favorite_count": 7, "accepted_answer_id": 30540952, "answer_count": 1, "score": 30, "last_activity_date": 1525286996, "creation_date": 1432943979, "last_edit_date": 1525286996, "question_id": 30540766, "link": "https://stackoverflow.com/questions/30540766/how-can-i-add-new-methods-to-iterator", "title": "How can I add new methods to Iterator?", "body": "<p>I want to define a <code>.unique()</code> method on iterators that enables me to iterate without duplicates.</p>\n\n<pre><code>use std::collections::HashSet;\n\nstruct UniqueState&lt;'a&gt; {\n    seen: HashSet&lt;String&gt;,\n    underlying: &amp;'a mut Iterator&lt;Item = String&gt;,\n}\n\ntrait Unique {\n    fn unique(&amp;mut self) -&gt; UniqueState;\n}\n\nimpl Unique for Iterator&lt;Item = String&gt; {\n    fn unique(&amp;mut self) -&gt; UniqueState {\n        UniqueState {\n            seen: HashSet::new(),\n            underlying: self,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for UniqueState&lt;'a&gt; {\n    type Item = String;\n    fn next(&amp;mut self) -&gt; Option&lt;String&gt; {\n        while let Some(x) = self.underlying.next() {\n            if !self.seen.contains(&amp;x) {\n                self.seen.insert(x.clone());\n                return Some(x);\n            }\n        }\n        None\n    }\n}\n</code></pre>\n\n<p>This compiles. However, when I try to use in the same file:</p>\n\n<pre><code>fn main() {\n    let foo = vec![\"a\", \"b\", \"a\", \"cc\", \"cc\", \"d\"];\n\n    for s in foo.iter().unique() {\n        println!(\"{}\", s);\n    }\n}\n</code></pre>\n\n<p>I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `unique` found for type `std::slice::Iter&lt;'_, &amp;str&gt;` in the current scope\n  --&gt; src/main.rs:37:25\n   |\n37 |     for s in foo.iter().unique() {\n   |                         ^^^^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `unique`, perhaps you need to implement it:\n           candidate #1: `Unique`\n</code></pre>\n\n<p>What am I doing wrong? How would I extend this arbitrary hashable types?</p>\n"}, {"tags": ["generics", "rust"], "answers": [{"comments": [{"owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "edited": false, "score": 0, "creation_date": 1432944072, "post_id": 30540755, "comment_id": 49154747, "body": "Great, but what would I do if I also want to allow strings which have no to_string method..."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "edited": false, "score": 0, "creation_date": 1432944152, "post_id": 30540755, "comment_id": 49154766, "body": "@TM90 What do you mean? There is no need to call <code>to_string</code> if it is a string..."}, {"owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "edited": false, "score": 0, "creation_date": 1432944259, "post_id": 30540755, "comment_id": 49154796, "body": "I mean if i want to allow also a string for the write_row method and then skip the to_string part"}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "edited": false, "score": 1, "creation_date": 1432944438, "post_id": 30540755, "comment_id": 49154847, "body": "@TM90 Calling <code>to_string</code> is harmless on a string. Don&#39;t add any more complexity by trying to check types."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 6, "creation_date": 1432970649, "post_id": 30540755, "comment_id": 49159832, "body": "BTW, I believe that is more idiomatic to use <code>Display</code> bound instead of <code>ToString</code>. The latter is only an auxiliary trait which provides convenient <code>ToString</code> function, while the former provides the core conversion functionality. <code>ToString</code> has a blanket implementation for all <code>Display</code> types. Additionally you will be able to use <code>Display</code> types in formatting macros: <code>format!(&quot;{}&quot;, row)</code>."}, {"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433021489, "post_id": 30540755, "comment_id": 49175088, "body": "@VladimirMatveev Good idea. I still am learning these traits myself :)."}], "tags": [], "owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "is_accepted": true, "score": 2, "last_activity_date": 1432943899, "creation_date": 1432943899, "answer_id": 30540755, "question_id": 30540621, "link": "https://stackoverflow.com/questions/30540621/to-string-with-generic-argument/30540755#30540755", "title": "to_string with generic argument", "body": "<p>You can tell the compiler that <code>T</code> must implement the <a href=\"https://doc.rust-lang.org/stable/std/string/trait.ToString.html\" rel=\"nofollow\"><code>ToString</code></a> trait like this:</p>\n\n<pre><code>use std::string::ToString;\n\nfn write_row&lt;T: ToString&gt;(row: T) {\n    let s: String = row.to_string();\n}\n</code></pre>\n"}], "owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 973, "favorite_count": 0, "accepted_answer_id": 30540755, "answer_count": 1, "score": 4, "last_activity_date": 1432943899, "creation_date": 1432942611, "question_id": 30540621, "link": "https://stackoverflow.com/questions/30540621/to-string-with-generic-argument", "title": "to_string with generic argument", "body": "<p>I have the following generic function and now want to convert any given type if possible to a string.</p>\n\n<pre><code>fn write_row&lt;T&gt;(row: T) {\n    let s: String = row.to_string();\n}\n</code></pre>\n\n<p>But this will obviously not work because to_string is not implemented for the type T.</p>\n\n<p>So my question is how would I check for the type of the argument and then apply to_string if needed and how can I tell the compiler that I now know that the variable is a defined type?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432943628, "post_id": 30540679, "comment_id": 49154640, "body": "Oh thank you! So I do understand it correctly, that is a relief! Do all the primitive types implement the copy trait ? This should definitely be mentioned in the docs since it is a crucial exception to the most important rule in the language. If you didn&#39;t already do so, I will create an issue on github to let them know :)"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 1, "creation_date": 1432945014, "post_id": 30540679, "comment_id": 49154955, "body": "Yes, I believe the primitive types should all implement <code>Copy</code>. And this is definitely worth filing an issue for, so go ahead."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 1, "creation_date": 1432945115, "post_id": 30540679, "comment_id": 49154977, "body": "Great thank you for your time :) The issue has been created: <a href=\"https://github.com/rust-lang/rust/issues/25893\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/25893</a>"}, {"owner": {"reputation": 1010, "user_id": 1020714, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/391f4eea1002054903fb6ca60c6b5d04?s=128&d=identicon&r=PG", "display_name": "Lilian A. Moraru", "link": "https://stackoverflow.com/users/1020714/lilian-a-moraru"}, "edited": false, "score": 0, "creation_date": 1432973382, "post_id": 30540679, "comment_id": 49160490, "body": "Actually it does say in the documentation(the &quot;Book&quot;) that all primitive types are copied by default instead of changing ownership."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "reply_to_user": {"reputation": 1010, "user_id": 1020714, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/391f4eea1002054903fb6ca60c6b5d04?s=128&d=identicon&r=PG", "display_name": "Lilian A. Moraru", "link": "https://stackoverflow.com/users/1020714/lilian-a-moraru"}, "edited": false, "score": 0, "creation_date": 1432977613, "post_id": 30540679, "comment_id": 49161522, "body": "@LilianA.Moraru Does it? I must have missed it. Can you give a link because it is not mentioned were <a href=\"http://doc.rust-lang.org/book/ownership.html#copy-types\" rel=\"nofollow noreferrer\">I would assume it to be explained</a>."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1432980722, "post_id": 30540679, "comment_id": 49162405, "body": "References but not mutable references implement copy (obviously, copying &amp;mut would violate aliasing)."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432983252, "post_id": 30540679, "comment_id": 49163153, "body": "I&#39;m sorry, I don&#39;t really understand what you mean. Could you elaborate or point me to some reading material? Thanks!"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432986049, "post_id": 30540679, "comment_id": 49163987, "body": "@MathieuDavid When I said that the primitive types should be <code>Copy</code>, I was thinking of the primitive numeric types, char and bool. I didn&#39;t include references (<code>&amp;T</code>, which is <code>Copy</code>) and mutable references (<code>&amp;mut T</code>, which cannot be copied)."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432986955, "post_id": 30540679, "comment_id": 49164262, "body": "I didn&#39;t consider references as primitive types, are they ? I guess it&#39;s just a matter of definition"}, {"owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432987391, "post_id": 30540679, "comment_id": 49164404, "body": "@MathieuDavid Well, they&#39;re primitive types in the sense that they are types that are defined as part of the language, not in a library."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1432988166, "post_id": 30540679, "comment_id": 49164628, "body": "Ok, I must say that it&#39;s not an easy language to learn. Mostly due to the fact that you have to understand quite complex concepts for even the simplest programs. Making it very difficult to learn the language gradually by introducing concepts when needed because you need an awful lot of them right from the start. But despite that I kind of like Rust"}, {"owner": {"reputation": 1010, "user_id": 1020714, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/391f4eea1002054903fb6ca60c6b5d04?s=128&d=identicon&r=PG", "display_name": "Lilian A. Moraru", "link": "https://stackoverflow.com/users/1020714/lilian-a-moraru"}, "reply_to_user": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1433415921, "post_id": 30540679, "comment_id": 49348342, "body": "@MathieuDavid I don&#39;t see where is the complex part... Also, pointers/references are not primitive types, you miss the idea(and it&#39;s not a concept introduced in Rust, it is available in any programming language). Primitive types are u8..u64, i8..i64, floats, chars, bool... I guess fjh misguided you. Primitive types are one thing and things available by default in a programming language are another thing..."}, {"owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "edited": false, "score": 0, "creation_date": 1433416500, "post_id": 30540679, "comment_id": 49348762, "body": "Well the complexity of Rust lies in the fact that it requires of you to understand some more advanced concepts (ownership, borrowing, references, bindings, patterns, traits, ...) before you can even begin coding something simple. But once you master that though, it&#39;s easier than C and C++ in my opinion. In my experience the learning curve of C and C++ was more gradual. Anyways, it doesn&#39;t really matter. This is how I experienced learning Rust. It is not necessarily how everyone experience it."}], "tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 8, "last_activity_date": 1432943189, "creation_date": 1432943189, "answer_id": 30540679, "question_id": 30540419, "link": "https://stackoverflow.com/questions/30540419/why-are-booleans-copyable-even-though-the-documentation-doesnt-indicate-that/30540679#30540679", "title": "Why are booleans copyable even though the documentation doesn&#39;t indicate that?", "body": "<p>Your understanding is pretty spot-on, this seems to be an issue with the docs. The documentation doesn't show <code>Copy</code> instances for any of the primitives types, even though they are definitely <code>Copy</code>. As an example to show that the compiler considers <code>bool</code> to be <code>Copy</code>, the following compiles just fine:</p>\n\n<pre><code>fn takes_copyable&lt;T: Copy&gt;(foo: T) {}\n\nfn main() {\n    takes_copyable(true);\n}\n</code></pre>\n"}], "owner": {"reputation": 3306, "user_id": 3980369, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/sZ3vt.jpg?s=128&g=1", "display_name": "Mathieu David", "link": "https://stackoverflow.com/users/3980369/mathieu-david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 186, "favorite_count": 0, "accepted_answer_id": 30540679, "answer_count": 1, "score": 8, "last_activity_date": 1432980655, "creation_date": 1432941083, "last_edit_date": 1432980655, "question_id": 30540419, "link": "https://stackoverflow.com/questions/30540419/why-are-booleans-copyable-even-though-the-documentation-doesnt-indicate-that", "title": "Why are booleans copyable even though the documentation doesn&#39;t indicate that?", "body": "<p>I am trying to understand the ownership and borrowing concept. At first I thought it was pretty simple once you understood it. But...</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a = 5;\n\n    let _y = double(a);\n    println!(\"{}\", a);\n}\n\nfn double(x: i32) -&gt; i32 {\n    x * 2\n}\n</code></pre>\n\n<p>At first I would have expected this to not compile, because <code>a</code> would have been moved to <code>_y</code>. </p>\n\n<p>I was a bit confused, but <a href=\"http://doc.rust-lang.org/book/ownership.html#copy-types\" rel=\"noreferrer\">I found out</a> that I would have been right except that <code>i32</code> is an exception to the rule because it implements the copy trait. </p>\n\n<p>I looked at <a href=\"http://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noreferrer\">the <code>Copy</code> trait</a> and as I understand it, they list all types that implement this trait at the bottom. </p>\n\n<p>So the <code>bool</code> type is not present and so I assumed it's default behaviour was to be \"moved\". But...</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a = true;\n\n    let _y = change_truth(a);\n    println!(\"{}\", a);\n}\n\nfn change_truth(x: bool) -&gt; bool {\n    !x\n}\n</code></pre>\n\n<p><strong>Doesn't fail either.</strong> </p>\n\n<p>Now I am quite confused. I found the <a href=\"http://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noreferrer\"><code>Clone</code> trait</a> that seems to be closely related to the copy trait. But unless I missed it, they don't really mention it in the learning doc. </p>\n\n<p>Can someone give me some more info ? </p>\n\n<p><strong>Update:</strong></p>\n\n<ol>\n<li>I have filed an <a href=\"https://github.com/rust-lang/rust/issues/25893\" rel=\"noreferrer\">issue on the Rust repository</a>.</li>\n<li>I have also made a <a href=\"https://github.com/rust-lang/rust/pull/25898\" rel=\"noreferrer\">pull request</a> with some change proposals. </li>\n</ol>\n"}, {"tags": ["collections", "rust", "iterator"], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": true, "score": 23, "last_activity_date": 1585338956, "last_edit_date": 1585338956, "creation_date": 1432938353, "answer_id": 30539996, "question_id": 30539871, "link": "https://stackoverflow.com/questions/30539871/how-can-i-push-an-iterator-to-an-existing-vector-or-any-other-collection/30539996#30539996", "title": "How can I push an iterator to an existing vector (or any other collection)?", "body": "<p>You can use <code>Vec</code>'s <a href=\"https://doc.rust-lang.org/std/iter/trait.Extend.html\" rel=\"noreferrer\"><code>extend</code> method</a>. <code>extend</code> takes a value of any type that implements <code>IntoIterator</code> (which includes all iterator types) and extends the <code>Vec</code> by all elements returned from the iterator:</p>\n\n<pre><code>vector.extend(it)\n</code></pre>\n\n<p>Since <code>extend</code> belongs to the <code>Extend</code> trait, it also works for many other collection types.</p>\n"}], "owner": {"reputation": 1479, "user_id": 4673683, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/106a6b52825462b10ef0904466351c00?s=128&d=identicon&r=PG", "display_name": "user19018", "link": "https://stackoverflow.com/users/4673683/user19018"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4720, "favorite_count": 1, "accepted_answer_id": 30539996, "answer_count": 1, "score": 12, "last_activity_date": 1585338956, "creation_date": 1432937595, "last_edit_date": 1585338912, "question_id": 30539871, "link": "https://stackoverflow.com/questions/30539871/how-can-i-push-an-iterator-to-an-existing-vector-or-any-other-collection", "title": "How can I push an iterator to an existing vector (or any other collection)?", "body": "<p>Looking through the documentation or Rust 0.12, I saw <a href=\"https://doc.rust-lang.org/0.12.0/collections/vec/struct.Vec.html#method.push_all\" rel=\"nofollow noreferrer\">the following method</a> to push multiple values to an already existing <code>Vec</code>:</p>\n\n<pre><code>fn push_all(&amp;mut self, other: &amp;[T])\n</code></pre>\n\n<p>However, if I have an iterator, I don't think it is efficient to use: <code>vector.push_all(it.collect().as_ref())</code>. Is there a more efficient way?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1432932805, "post_id": 30538387, "comment_id": 49151080, "body": "This already has an answer in <a href=\"http://stackoverflow.com/questions/23135409/rust-borrowed-pointers-and-lifetimes\" title=\"rust borrowed pointers and lifetimes\">stackoverflow.com/questions/23135409/&hellip;</a> and in <a href=\"http://stackoverflow.com/questions/28608823/how-to-model-complex-recursive-data-structures-graphs\" title=\"how to model complex recursive data structures graphs\">stackoverflow.com/questions/28608823/&hellip;</a>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 1, "creation_date": 1432933311, "post_id": 30538387, "comment_id": 49151295, "body": "Apart from the immediate error, storing pointers in the Vec seems wrong. You almost certainly want a <code>Vec&lt;Item&gt;</code> in <code>App</code>."}], "answers": [{"tags": [], "owner": {"reputation": 457, "user_id": 3025787, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9Azea.png?s=128&g=1", "display_name": "lschmierer", "link": "https://stackoverflow.com/users/3025787/lschmierer"}, "is_accepted": false, "score": 2, "last_activity_date": 1432942431, "creation_date": 1432942431, "answer_id": 30540593, "question_id": 30538387, "link": "https://stackoverflow.com/questions/30538387/store-reference-of-struct-in-other-struct/30540593#30540593", "title": "Store reference of struct in other struct", "body": "<p>Simple solution is to use <code>Rc</code>.</p>\n\n<pre><code>use std::rc::Rc;\n\npub struct Item;\n\nimpl Item {\n\n    pub fn new(app: &amp;mut App) -&gt; Rc&lt;Item&gt; {\n        let item = Rc::new(Item);\n        app.register_item(item.clone());\n        item\n    }\n\n}\n\npub struct App {\n    items: Vec&lt;Rc&lt;Item&gt;&gt;\n}\n\n...\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1502801315, "last_edit_date": 1502801315, "creation_date": 1432947072, "answer_id": 30541093, "question_id": 30538387, "link": "https://stackoverflow.com/questions/30538387/store-reference-of-struct-in-other-struct/30541093#30541093", "title": "Store reference of struct in other struct", "body": "<p>While <code>Rc</code> might be correct for your use case, it's good to understand why you are getting the error you are. Please read <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a> as it has a much more in-depth discussion about why your code cannot work as-is. A simplified explanation follows. </p>\n\n<p>Let's look at your constructor:</p>\n\n<pre><code>fn new(app: &amp;mut App) -&gt; Item {\n    let item = Item;\n    app.register_item(&amp;item);\n    item\n}\n</code></pre>\n\n<p>Here, we create a new <code>Item</code> on the stack at some address. Let's pretend that address is 0x1000. We then take the address of <code>item</code> (0x1000) and store it into the <code>Vec</code> inside the <code>App</code>. We then return <code>item</code> to the calling function, which resides in a <em>different stack frame</em>. That means that the address of <code>item</code> will change, which means that 0x1000 is no longer guaranteed to point to a valid <code>Item</code>! This is how Rust prevents you from making whole classes of memory errors!</p>\n\n<p>I'd say that you'd normally see this written as:</p>\n\n<pre><code>fn main() {\n    let item = Item;\n    let mut app = App::new();\n    app.register_item(&amp;item);\n}\n</code></pre>\n\n<p>This will have the same problem if you tried to return <code>app</code> or <code>item</code> from this function, as the address will change.</p>\n\n<hr>\n\n<p>If you have a straight-forward tree structure, I'd advocate for simply letting the parent nodes own the children:</p>\n\n<pre><code>struct App {\n    items: Vec&lt;Item&gt;\n}\n\nimpl App {\n    fn new() -&gt; App {\n        App { items: Vec::new() }\n    }\n\n    fn register_item(&amp;mut self, item: Item) {\n        self.items.push(item);\n    }\n}\n\npub struct Item;\n\nfn main() {\n    let mut app = App::new();\n    app.register_item(Item);\n}\n</code></pre>\n"}], "owner": {"reputation": 457, "user_id": 3025787, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9Azea.png?s=128&g=1", "display_name": "lschmierer", "link": "https://stackoverflow.com/users/3025787/lschmierer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6241, "favorite_count": 2, "accepted_answer_id": 30541093, "answer_count": 2, "score": 5, "last_activity_date": 1502801315, "creation_date": 1432930814, "last_edit_date": 1432946209, "question_id": 30538387, "link": "https://stackoverflow.com/questions/30538387/store-reference-of-struct-in-other-struct", "title": "Store reference of struct in other struct", "body": "<p>I have two structs. <code>App</code> and <code>Item</code>.</p>\n\n<p>What I want to achieve is to store an <code>Item</code> in the <code>items</code> vector of the <code>App</code> struct by passing a mutable reference to the <code>Item</code>s constructor.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub struct App&lt;'a&gt; {\n    items: Vec&lt;&amp;'a Item&gt;\n}\n\nimpl&lt;'a&gt; App&lt;'a&gt; {\n    pub fn new() -&gt; App&lt;'a&gt; {\n        App { items: Vec::new() }\n    }\n    pub fn register_item(&amp;mut self, item: &amp;'a Item) {\n        self.items.push(item);\n    }\n}\n\npub struct Item;\n\nimpl Item {\n    pub fn new(app: &amp;mut App) -&gt; Item {\n        let item = Item;\n        app.register_item(&amp;item);\n        item\n    }\n}\n\nfn main() {\n    let mut app = App::new();\n\n    let item = Item::new(&amp;mut app);;\n}\n</code></pre>\n\n<p>The code thows the following error:</p>\n\n<pre><code>test.rs:8:28: 8:32 error: `item` does not live long enough\ntest.rs:8         app.register_item(&amp;item);\n</code></pre>\n\n<p>Is there any way to do this?</p>\n"}, {"tags": ["rust", "child-process", "zombie-process"], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1432932406, "last_edit_date": 1432932406, "creation_date": 1432931943, "answer_id": 30538653, "question_id": 30538004, "link": "https://stackoverflow.com/questions/30538004/how-do-i-ensure-that-a-spawned-child-process-is-killed-if-my-app-panics/30538653#30538653", "title": "How do I ensure that a spawned Child process is killed if my app panics?", "body": "<p>You can put the possibly-panicking code into a closure and give that closure to <a href=\"https://doc.rust-lang.org/stable/std/thread/fn.catch_panic.html\" rel=\"nofollow\"><code>catch_panic</code></a>. <code>catch_panic</code> acts the same way a <code>scoped</code> or <code>spawn</code>ed thread does on <code>join</code>ing. It returns a Result with either <code>Ok(ClosureRetVal)</code> or an <code>Err(Box&lt;Any&gt;)</code> if the closure panicked.</p>\n\n<pre><code>let res = std::thread::catch_panic(|| {\n    panic!(\"blub: {}\", 35);\n});\nif let Err(err) = res {\n    let msg: String = *err.downcast().unwrap();\n    println!(\"{}\", msg);\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/5anu02\" rel=\"nofollow\">PlayPen</a></p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432942430, "post_id": 30540177, "comment_id": 49154402, "body": "Are Drop implementations guaranteed to run if the thread panics?"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432981722, "post_id": 30540177, "comment_id": 49162689, "body": "I think so, unless the panic was <i>started</i> in a destructor <a href=\"http://is.gd/Zswi2w\" rel=\"nofollow noreferrer\">(playpen)</a>, which is a bad idea in Rust anyway for various reasons. There is some documentation about how the unwinding process happens in <a href=\"http://doc.rust-lang.org/std/rt/unwind/\" rel=\"nofollow noreferrer\">std::rt::unwind</a>."}, {"owner": {"reputation": 169, "user_id": 743993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df04a6b32dd1d70389a6bb86a013cb79?s=128&d=identicon&r=PG", "display_name": "j16r", "link": "https://stackoverflow.com/users/743993/j16r"}, "edited": false, "score": 0, "creation_date": 1433022956, "post_id": 30540177, "comment_id": 49175517, "body": "Thanks, this is roughly what I ended up doing. Although now since I have it in a Once, there appears to be no way to the Drop trait can be executed."}], "tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": false, "score": 4, "last_activity_date": 1432939479, "creation_date": 1432939479, "answer_id": 30540177, "question_id": 30538004, "link": "https://stackoverflow.com/questions/30538004/how-do-i-ensure-that-a-spawned-child-process-is-killed-if-my-app-panics/30540177#30540177", "title": "How do I ensure that a spawned Child process is killed if my app panics?", "body": "<p>You can use standard RAII patterns to ensure the child thread is killed if you leave a given scope. If you want to kill your child only if you are panicking, you can insert a check to <a href=\"https://doc.rust-lang.org/nightly/std/thread/fn.panicking.html\" rel=\"nofollow\">std::thread::panicking</a>.</p>\n\n<pre><code>use std::process::{Command,Child};\n\nstruct ChildGuard(Child);\n\nimpl Drop for ChildGuard {\n    fn drop(&amp;mut self) {\n        // You can check std::thread::panicking() here\n        match self.0.kill() {\n            Err(e) =&gt; println!(\"Could not kill child process: {}\", e),\n            Ok(_) =&gt; println!(\"Successfully killed child process\"),\n        }\n    }\n}\n\nfn main() {\n    let child = Command::new(\"/bin/cat\").spawn().unwrap();\n    let _guard = ChildGuard(child);\n\n    panic!(\"Main thread panicking\");\n}\n</code></pre>\n"}], "owner": {"reputation": 169, "user_id": 743993, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/df04a6b32dd1d70389a6bb86a013cb79?s=128&d=identicon&r=PG", "display_name": "j16r", "link": "https://stackoverflow.com/users/743993/j16r"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1200, "favorite_count": 0, "accepted_answer_id": 30538653, "answer_count": 2, "score": 6, "last_activity_date": 1432946442, "creation_date": 1432929140, "last_edit_date": 1432946442, "question_id": 30538004, "link": "https://stackoverflow.com/questions/30538004/how-do-i-ensure-that-a-spawned-child-process-is-killed-if-my-app-panics", "title": "How do I ensure that a spawned Child process is killed if my app panics?", "body": "<p>I'm writing a small test that starts a daemon process and tests it e.g:</p>\n\n<pre><code>let server = Command::new(\"target/debug/server\").spawn();\n\n// do some tests\n\nserver.kill();\n</code></pre>\n\n<p>The typical way to fail a test is to panic. Unfortunately this means that kill() never gets invoked and repeated runs of the test suite fail, because the port is taken by the old process that is still running.</p>\n\n<p>Is there something like a TRAP function that I can use to ensure the Child gets killed? </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432938724, "post_id": 30539264, "comment_id": 49153458, "body": "Thx Levans for the answer. I actually checked the subscope variant before to verify that a borrow of <code>*a</code> actually took place. Could have been just a false compiler message, after all. Regarding your guess, I would feel very uncomfortable if anytime I use type annotation I would have to be prepared for some weird re-write of the obvious meaning: <code>let a = b;</code> should always be just a move or a copy, type annotated or not."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432968747, "post_id": 30539264, "comment_id": 49159402, "body": "@dacker well, keep in mind that this behavior can <i>only</i> be reached with <code>&amp;mut</code> references, in which case a re-borrow is simply a copy which respects the borrow rules."}, {"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432983187, "post_id": 30539264, "comment_id": 49163125, "body": "But wasn&#39;t that a big point in all the docs I&#39;ve read so far: &amp;muts are always moved in these cases? NB: the same behavior as above happens with assignments to type annotated &amp;muts as well."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432983602, "post_id": 30539264, "comment_id": 49163247, "body": "Unless you are playing with nested scopes, re-borrowing or moving a <code>&amp;mut</code> reference are effectively the same thing, so it&#39;s not surprising docs don&#39;t really make the distinction. And what do you call &quot;type annotated &amp;muts&quot; ?"}, {"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432983772, "post_id": 30539264, "comment_id": 49163310, "body": "let b: &amp;mut i32; b=a; Where else would I have to expect a non-move (e.g. a copy of some type) if it suits the compiler? Doesn&#39;t make me feel confident. But I&#39;ll accept your answer if that&#39;s the way it is."}, {"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432984566, "post_id": 30539264, "comment_id": 49163562, "body": "The only non-reference types that are not moved are the ones implementing <code>Copy</code>, <code>&amp;</code> references are <code>Copy</code>, and moving or re-borrowing a <code>&amp;mut</code> reference are almost the same thing (and I don&#39;t see any situation where a move would be preferred over a re-borrow). That&#39;s basically all. Still, I&#39;ll open an issue in the compiler&#39;s Github to suggest they clarify it in the docs."}, {"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432984622, "post_id": 30539264, "comment_id": 49163580, "body": "I see your point. My point is simply that the docs state something different than what&#39;s actually happening which, luckily in this case, does no harm. I can&#39;t think of an example that depends on a moved value actually being gone, either. Thx for the effort!"}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 8, "last_activity_date": 1432934489, "last_edit_date": 1592644375, "creation_date": 1432934489, "answer_id": 30539264, "question_id": 30535529, "link": "https://stackoverflow.com/questions/30535529/variable-binding-moving-a-mut-or-borrowing-the-referent/30539264#30539264", "title": "Variable binding: moving a &amp;mut or borrowing the referent?", "body": "<blockquote>\n<p>So, if I just annotate <code>b</code>'s type: no move of <code>a</code> into <code>b</code>, but instead a &quot;re&quot;-borrow of <code>*a</code>?</p>\n<p>What am I missing?</p>\n</blockquote>\n<p>Absolutely nothing, as in this case these two operations are semantically very similar (and equivalent if <code>a</code> and <code>b</code> belong to the same scope).</p>\n<ul>\n<li>Either you move the reference <code>a</code> into <code>b</code>, making <code>a</code> a moved value, and no longer available.</li>\n<li>Either you reborrow <code>*a</code> in <code>b</code>, making <code>a</code> unusable as long as <code>b</code> is in scope.</li>\n</ul>\n<p>The second case is less definitive than the first, you can show this by putting the line defining <code>b</code> into a sub-scope.</p>\n<p>This example won't compile because <code>a</code> is moved:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a: &amp;mut i32 = &amp;mut 0;\n    { let b = a; }\n    let c = a;\n}\n</code></pre>\n<p>But this one will, because once <code>b</code> goes out of scope <code>a</code> is unlocked:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a: &amp;mut i32 = &amp;mut 0;\n    { let b = &amp;mut *a; }\n    let c = a;\n}\n</code></pre>\n<p>Now, to the question &quot;Why does annotating the type of <code>b</code> change the behavior ?&quot;, my guess would be:</p>\n<ul>\n<li>When there is no type annotation, the operation is a simple and straightforward move. Nothing is needed to be checked.</li>\n<li>When there is a type annotation, a conversion may be needed (casting a <code>&amp;mut _</code> into a <code>&amp;_</code>, or transforming a simple reference into a reference to a trait object). So the compiler opts for a re-borrow of the value, rather than a move.</li>\n</ul>\n<p>For example, this code is perflectly valid:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let a: &amp;mut i32 = &amp;mut 0;\n    let b: &amp;i32 = a;\n}\n</code></pre>\n<p>and here moving <code>a</code> into <code>b</code> would not make any sense, as they are of different type. Still this code compiles: <code>b</code> simply re-borrows <code>*a</code>, and the value won't be mutably available through <code>a</code> as long as <code>b</code> is in scope.</p>\n"}], "owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 711, "favorite_count": 2, "accepted_answer_id": 30539264, "answer_count": 1, "score": 14, "last_activity_date": 1432934489, "creation_date": 1432920085, "question_id": 30535529, "link": "https://stackoverflow.com/questions/30535529/variable-binding-moving-a-mut-or-borrowing-the-referent", "title": "Variable binding: moving a &amp;mut or borrowing the referent?", "body": "<p>This code fails as expected at <code>let c = a;</code> with compile error \"use of moved value: <code>a</code>\":</p>\n\n<pre><code>fn main() {\n    let a: &amp;mut i32 = &amp;mut 0;\n    let b = a;\n    let c = a;\n}\n</code></pre>\n\n<p>a is moved into b and is no longer available for an assignment to c. So far, so good.</p>\n\n<p>However, if I just annotate <code>b</code>'s type and leave everything else alone:</p>\n\n<pre><code>fn main() {\n    let a: &amp;mut i32 = &amp;mut 0;\n    let b: &amp;mut i32 = a;\n    let c = a;\n}\n</code></pre>\n\n<p>the code fails again at <code>let c = a;</code></p>\n\n<p>But this time with a very different error message: \"cannot move out of <code>a</code> because it is borrowed ... borrow of <code>*a</code> occurs here: <code>let b: &amp;mut i32 = a;</code>\"</p>\n\n<p>So, if I just annotate <code>b</code>'s type: no move of <code>a</code> into <code>b</code>, but instead a \"re\"-borrow of <code>*a</code>?</p>\n\n<p>What am I missing?</p>\n\n<p>Cheers.</p>\n"}, {"tags": ["rust", "immutability", "mutability", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1432912521, "post_id": 30533057, "comment_id": 49140008, "body": "That helps to clarify. It&#39;s more of an annoyance than anything. So the error is related to a conflict between <code>truncate</code> needing mutability and <code>len</code> needing immutability? It would seem that <code>result.len()</code> would have its work completed before handing over to truncate, meaning this is more of a compiler quirk than anything? <a href=\"http://doc.rust-lang.org/std/string/struct.String.html#method.len\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/string/struct.String.html#method.len</a>"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1432912986, "post_id": 30533057, "comment_id": 49140321, "body": "You&#39;re almost correct - the problem is that <code>truncate</code> requires <code>&amp;mut self</code> which prohibits <i>any</i> subsequent borrowing in the same scope. And yes, it <i>would</i> seem that <code>result.len()</code> is completed before it is handed over to <code>truncate()</code>, however, my answer explains why it is not so - actually, the method receiver is computed <i>before</i> arguments, and so <code>&amp;mut result</code> is in scope <i>before</i> <code>&amp;result</code> required by <code>result.len()</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1432913697, "post_id": 30533057, "comment_id": 49140771, "body": "@jocull, you can find more in the issues I&#39;ve linked to in my update if you&#39;re interested in it."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1432914482, "post_id": 30533057, "comment_id": 49141275, "body": "Great information - thanks so much! Chalking it up to a compiler quirk that is just part of life for now."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 10, "last_activity_date": 1432913643, "last_edit_date": 1432913643, "creation_date": 1432912163, "answer_id": 30533057, "question_id": 30532628, "link": "https://stackoverflow.com/questions/30532628/cannot-borrow-as-immutable-string-and-len/30533057#30533057", "title": "Cannot borrow as immutable - String and len()", "body": "<p>This is an unfortunate shortcoming of Rust borrow checking procedure. This essentially happens because</p>\n\n<pre><code>result.truncate(result.len() - 2)\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>String::truncate(&amp;mut result, result.len() - 2)\n</code></pre>\n\n<p>and here you can see that because arguments are computed in left-to-right order, <code>result</code> is indeed borrowed mutably before it is used in <code>result.len()</code>.</p>\n\n<p>I found this problem in Rust issue tracker: <a href=\"https://github.com/rust-lang/rust/issues/6268\" rel=\"noreferrer\">#6268</a>. This issue was closed in favor of <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"noreferrer\">non-lexical borrows RFC issue</a>. It seems that it's just one of those things which would be nice to have but which needed more time to be done that it was available before 1.0. <a href=\"http://blog.ezyang.com/2013/12/two-bugs-in-the-borrow-checker-every-rust-developer-should-know-about/\" rel=\"noreferrer\">This</a> post may also be of some interest (even though it is almost two years old).</p>\n"}], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 381, "favorite_count": 0, "accepted_answer_id": 30533057, "answer_count": 1, "score": 9, "last_activity_date": 1484477720, "creation_date": 1432910951, "last_edit_date": 1484477720, "question_id": 30532628, "link": "https://stackoverflow.com/questions/30532628/cannot-borrow-as-immutable-string-and-len", "title": "Cannot borrow as immutable - String and len()", "body": "<pre><code>let mut result = String::with_capacity(1000);\n\nresult.push_str(\"things... \");\nresult.push_str(\"stuff... \");\n\nresult.truncate((result.len() - 4));\n</code></pre>\n\n<p>However, this is a compile error. Something to do with the borrow checker and possibly mutability.</p>\n\n\n\n<pre><code>error[E0502]: cannot borrow `result` as immutable because it is also borrowed as mutable\n --&gt; &lt;anon&gt;:7:22\n  |\n7 |     result.truncate((result.len() - 4));\n  |     ------           ^^^^^^           - mutable borrow ends here\n  |     |                |\n  |     |                immutable borrow occurs here\n  |     mutable borrow occurs here\n</code></pre>\n\n<p>Yet, if I change it slightly I am allowed to do this:</p>\n\n<pre><code>let newlen = result.len() - 4;\nresult.truncate(newlen);\n</code></pre>\n\n<p>Why? Is there a way to change this so it can be written in one line? (P.S. this is on Rust 1.0)</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "edited": false, "score": 0, "creation_date": 1432914292, "post_id": 30533303, "comment_id": 49141166, "body": "Thanks, <code>u.email.clone()</code> is exactly what I needed."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 4, "last_activity_date": 1432913258, "last_edit_date": 1432913258, "creation_date": 1432912816, "answer_id": 30533303, "question_id": 30532439, "link": "https://stackoverflow.com/questions/30532439/pattern-matching-borrowed-content-issue/30533303#30533303", "title": "pattern matching borrowed content issue", "body": "<p>Here is a slightly simplified portion of your code which demonstrates the problem:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct User {\n    reference: String,\n    email: String\n}\n\nlet users = vec![\n    User { reference: \"1\".into(), email: \"a@a.com\".into() }, \n    User { reference: \"2\".into(), email: \"b@b.com\".into() }\n];\n\nlet records: Vec&lt;Vec&lt;String&gt;&gt; = vec![\n    vec![\"1\".into()], \n    vec![\"2\".into()], \n    vec![\"3\".into()]\n];\n\nfor mut record in records {\n    let usr = users.iter().find(|ur| ur.reference == record[0]);\n    match usr {\n        Some(u) =&gt; record.insert(1, u.email),\n        None =&gt; record.insert(1, \"Unknown\".into())\n    }\n    // do whatever with record\n}\n</code></pre>\n\n<p><code>usr</code> in <code>let usr</code> here is of type <code>&amp;User</code>, not <code>User</code>, because <code>iter()</code> returns an iterator satisfying <code>Iterator&lt;Item=&amp;User&gt;</code>, and hence <code>find()</code> returns <code>Option&lt;&amp;User&gt;</code>. Consequently, you cannot take a <code>String</code> out of <code>u: &amp;User</code> - you can't move out of a borrowed reference. This is, BTW, an absolutely correct error - if this was allowed, your code would break in a situation with multiple records corresponding to the same user (it would require moving the email out of the same user multiple times).</p>\n\n<p>The most natural way here would be just to use <code>clone()</code>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>record.insert(1, u.email.clone())\n</code></pre>\n\n<p>It would create a copy of the email string contained in the found <code>User</code>, exactly what you need.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 1, "accepted_answer_id": 30533303, "answer_count": 1, "score": 4, "last_activity_date": 1432913258, "creation_date": 1432910378, "question_id": 30532439, "link": "https://stackoverflow.com/questions/30532439/pattern-matching-borrowed-content-issue", "title": "pattern matching borrowed content issue", "body": "<p>So I have this piece of code that reads <code>input.csv</code>, inserts a column in it and writes it to <code>output.csv</code></p>\n\n<pre><code>extern crate csv;\n\nuse std::path::Path;\n\nstruct User {\n    reference: String,\n    email: String,\n    firstname: String,\n    lastname: String\n}\n\nfn main() {\n\n    let mut rdr = csv::Reader::from_file(\"/tmp/input.csv\").unwrap().has_headers(false);\n    let mut wtr = csv::Writer::from_file(Path::new(\"/tmp/output.csv\")).unwrap();\n\n    let users = get_users();\n\n    for record in rdr.decode() {\n\n        let rec: Option&lt;Vec&lt;String&gt;&gt; = match record {\n            Ok(rec) =&gt; Some(rec),\n            Err(e) =&gt; None\n        };\n\n        match rec {\n            Some(mut r) =&gt; {\n                let usr = users.iter().find(|&amp;ur| ur.reference == r[27].to_string());\n                match usr {\n                    Some(u) =&gt; r.insert(1, u.email),\n                    None =&gt; r.insert(1, \"Unknown\".to_string())\n                }\n                wtr.write(r.iter());\n            }\n            None =&gt; {}\n        };\n\n    }\n\n}\n\nfn get_users() -&gt; Vec&lt;User&gt; {\n    //retrieve users\n}\n</code></pre>\n\n<p>and it's giving me an error:</p>\n\n<pre><code>error: cannot move out of borrowed content\n               Some(u) =&gt; r.insert(1, u.email),\n                                      ^\n</code></pre>\n\n<p>So I understand it's getting upset about <code>u.email</code>, because <code>r</code> is trying to take ownership of it(?), but how to best handle such a situation?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1432908626, "post_id": 30531334, "comment_id": 49137061, "body": "Interesting enough <code>let c4 = 0xd801 as char; println!(&quot;{:?}&quot;, c4);</code> works with a warning."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 2, "creation_date": 1432910099, "post_id": 30531334, "comment_id": 49138115, "body": "It works incorrectly - it interprets <code>0xd801</code> as a <code>u8</code>, wrapping the value around to <code>1u8</code> and converting that to <code>char</code>. <a href=\"http://is.gd/mI5wme\" rel=\"nofollow noreferrer\">Here</a> is a demonstration."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1432910274, "post_id": 30531334, "comment_id": 49138239, "body": "Right, I only meant that it emits a warning and returns a value."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 14, "last_activity_date": 1518386756, "last_edit_date": 1518386756, "creation_date": 1432907345, "answer_id": 30531334, "question_id": 30531265, "link": "https://stackoverflow.com/questions/30531265/does-rust-have-an-equivalent-to-pythons-unichr-function/30531334#30531334", "title": "Does Rust have an equivalent to Python&#39;s unichr() function?", "body": "<p>Sure, though it is a built-in operator <code>as</code>:</p>\n\n<pre><code>let c: char = 97 as char;\nprintln!(\"{}\", c);   // prints \"a\"\n</code></pre>\n\n<p>Note that <code>as</code> operator works only for <code>u8</code> numbers, something else will cause a compilation error:</p>\n\n<pre><code>let c: char = 97u32 as char;  // error: only `u8` can be cast as `char`, not `u32`\n</code></pre>\n\n<p>If you need a string (to fully emulate the Python function), use <code>to_string()</code>:</p>\n\n<pre><code>let s: String = (97 as char).to_string();\n</code></pre>\n\n<p>There is also the <a href=\"http://doc.rust-lang.org/std/char/fn.from_u32.html\" rel=\"nofollow noreferrer\"><code>char::from_u32</code></a> function:</p>\n\n<pre><code>use std::char;\nlet c: Option&lt;char&gt; = char::from_u32(97);\n</code></pre>\n\n<p>It returns an <code>Option&lt;char&gt;</code> because not every number is a valid Unicode code point - the only valid numbers are 0x0000 to 0xD7FF and from 0xE000 to 0x10FFFF. This function is applicable to a larger set of values than <code>as char</code> and can convert numbers larger than one byte, providing you access to the whole range of Unicode code points.</p>\n\n<p>I've compiled a <a href=\"https://play.rust-lang.org/?gist=cddf28e75663bc452462a8d632eec09b&amp;version=stable\" rel=\"nofollow noreferrer\">set of examples on the Playground</a>.</p>\n"}], "owner": {"reputation": 123, "user_id": 1769868, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f43e061612683dd8425ad3271717dedf?s=128&d=identicon&r=PG", "display_name": "user1769868", "link": "https://stackoverflow.com/users/1769868/user1769868"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 665, "favorite_count": 0, "accepted_answer_id": 30531334, "answer_count": 1, "score": 9, "last_activity_date": 1518386756, "creation_date": 1432907137, "last_edit_date": 1518386670, "question_id": 30531265, "link": "https://stackoverflow.com/questions/30531265/does-rust-have-an-equivalent-to-pythons-unichr-function", "title": "Does Rust have an equivalent to Python&#39;s unichr() function?", "body": "<p>Python has the <a href=\"https://docs.python.org/2/library/functions.html#unichr\" rel=\"nofollow noreferrer\"><code>unichr()</code></a> (or <code>chr()</code> in Python 3) function that takes an integer and returns a character with the Unicode code point of that number. Does Rust have an equivalent function?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 222, "user_id": 4437212, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/aa3211a9ea6f971f486ae13b70d4623d?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/4437212/chris"}, "edited": false, "score": 0, "creation_date": 1432915880, "post_id": 30530607, "comment_id": 49142174, "body": "Indeed, defining <i>foo</i> as <code>fn foo(s: &amp;mio::Sender&lt;u32&gt;) {...</code> and calling it <code>foo(&amp;sender);</code> works. Thanks!"}, {"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 0, "creation_date": 1433613324, "post_id": 30530607, "comment_id": 49431487, "body": "The compiler won&#39;t be perfect in guessing your types... I mean just try looking at what c++ outputs when you have iterators for a complex container... I&#39;ve seen like a 500 character type before. It&#39;s helpful, but you still need to think about it a little. Another gotcha is when the Rust compiler tells you to use &quot;core::&quot; you should really be using &quot;std::&quot;."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1432905311, "creation_date": 1432905311, "answer_id": 30530607, "question_id": 30530242, "link": "https://stackoverflow.com/questions/30530242/what-argument-to-pass-and-how-to-find-out-its-type/30530607#30530607", "title": "What argument to pass and how to find out its type?", "body": "<p>The <code>Sender</code> type is re-exported as <code>mio::Sender</code>. The compiler knows that the actual type is <code>mio::event_loop::Sender</code> and reports that. There's currently no way to automatically figure out what type you need in general, but you can look at the documentation of the <a href=\"https://carllerche.github.io/mio/mio/struct.EventLoop.html#method.channel\"><code>EventLoop::channel</code></a> method and see that it returns a <code>Sender</code>. If you click on the <code>Sender</code> type in the documentation you will end up at the documentation of <a href=\"https://carllerche.github.io/mio/mio/struct.Sender.html\"><code>mio::Sender</code></a></p>\n"}], "owner": {"reputation": 222, "user_id": 4437212, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/aa3211a9ea6f971f486ae13b70d4623d?s=128&d=identicon&r=PG&f=1", "display_name": "Chris", "link": "https://stackoverflow.com/users/4437212/chris"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 167, "favorite_count": 0, "accepted_answer_id": 30530607, "answer_count": 1, "score": 6, "last_activity_date": 1432905311, "creation_date": 1432904236, "question_id": 30530242, "link": "https://stackoverflow.com/questions/30530242/what-argument-to-pass-and-how-to-find-out-its-type", "title": "What argument to pass and how to find out its type?", "body": "<p>I started with the example for <a href=\"https://carllerche.github.io/mio/mio/struct.EventLoop.html\">EventLoop</a> from the mio webpage and added the main function:</p>\n\n<pre><code>extern crate mio;\n\nuse std::thread;\nuse mio::{EventLoop, Handler};\n\nstruct MyHandler;\n\nimpl Handler for MyHandler {\n    type Timeout = ();\n    type Message = u32;\n\n    fn notify(&amp;mut self, event_loop: &amp;mut EventLoop&lt;MyHandler&gt;, msg: u32) {\n        assert_eq!(msg, 123);\n        event_loop.shutdown();\n    }\n}\n\nfn main() {\n    let mut event_loop = EventLoop::new().unwrap();\n    let sender = event_loop.channel();\n\n    // Send the notification from another thread\n    thread::spawn(move || {\n        let _ = sender.send(123);\n    });\n\n    let _ = event_loop.run(&amp;mut MyHandler);\n}\n</code></pre>\n\n<p>Then I had the idea to move the sending thread to a separate function \"foo\" and started to wonder what type is passed:</p>\n\n<pre><code>extern crate mio;\n\nuse std::thread;\nuse mio::{EventLoop, Handler};\n\nstruct MyHandler;\n\nimpl Handler for MyHandler {\n    type Timeout = ();\n    type Message = u32;\n\n    fn notify(&amp;mut self, event_loop: &amp;mut EventLoop&lt;MyHandler&gt;, msg: u32) {\n        assert_eq!(msg, 123);\n        event_loop.shutdown();\n    }\n}\n\nfn foo(s: &amp;?) {\n    let sender = s.clone();\n    // Send the notification from another thread\n    thread::spawn(move || {\n        let _ = sender.send(123);\n    });\n}\n\nfn main() {\n    let mut event_loop = EventLoop::new().unwrap();\n    let sender = event_loop.channel();\n\n    foo(&amp;sender);\n\n    let _ = event_loop.run(&amp;mut MyHandler);\n}\n</code></pre>\n\n<p>So, I let the compiler tell me the type:</p>\n\n<pre><code>fn foo(s: &amp;String) { ...\n</code></pre>\n\n<p>raises the error:</p>\n\n<pre><code>error: mismatched types:\nexpected `&amp;collections::string::String`,\nfound `&amp;mio::event_loop::Sender&lt;_&gt;`\n</code></pre>\n\n<p>Ok, nice but replacing <code>&amp;String</code> by <code>&amp;mio::event_loop::Sender&lt;u32&gt;</code> raises the error:</p>\n\n<pre><code>error: struct `Sender` is private\nfn foo(s: &amp;mio::event_loop::Sender&lt;u32&gt;) {\n           ^\n</code></pre>\n\n<p>Hm, looks like a dead end, so I thought passing event_loop instead:</p>\n\n<pre><code>fn foo(s: &amp;mio::event_loop::EventLoop&lt;u32&gt;) {\n    let sender = s.channel().clone();\n...\nfn main() { ...\n   foo(&amp;event_loop); ...\n</code></pre>\n\n<p>but that raises the error:</p>\n\n<pre><code> error: the trait `mio::handler::Handler` is not implemented for the type `u32` [E0277]\nsrc/main.rs:18 fn foo(s: &amp;mio::event_loop::EventLoop&lt;u32&gt;) {\n</code></pre>\n\n<p>which confuses me completely.</p>\n\n<p>In e.g. C / C++ I would have just passed a pointer either to EventLop or Sender.</p>\n\n<blockquote>\n  <p>What is Rust trying to tell me here? How to get it working in Rust?</p>\n</blockquote>\n\n<p>Environment: rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14), mio 0.3.5</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1432906504, "post_id": 30529909, "comment_id": 49135501, "body": "I don&#39;t think lifetimes are the correct way to encode this. Since the second parent is defined after the first parent, it&#39;s lifetime is strictly within the lifetime of the first parent. Any lifetime-checks you can think of will still allow any object with the second lifetime to be used in a situation where something of the first lifetime is required"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432925173, "post_id": 30536675, "comment_id": 49147376, "body": "Is this stating that using lifetimes is not a feasible way of solving this problem? If so, you way wish to explicitly state that."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432925976, "post_id": 30536675, "comment_id": 49147806, "body": "I don&#39;t know that, but this isn&#39;t enough. This answer was just a comment that got too long :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433083427, "post_id": 30536675, "comment_id": 49188924, "body": "@bluss: I remember toying around with this and nmatsakis had warned me against trying to abuse lifetimes as <i>brands</i>: the Rust language makes no guarantee about its lifetime inference in terms of backward compatibility; that two parents <i>today</i> can already be created with the same lifetime means we are lucky the plan gets foiled now instead of down the line."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 3, "last_activity_date": 1432926003, "last_edit_date": 1432926003, "creation_date": 1432924271, "answer_id": 30536675, "question_id": 30529909, "link": "https://stackoverflow.com/questions/30529909/how-can-i-compare-objects-only-when-they-are-created-from-the-same-parent-object/30536675#30536675", "title": "How can I compare objects only when they are created from the same parent object?", "body": "<p>I'll happily explain the lifetime approach, but it doesn't seem to be viable.</p>\n\n<p>When is <code>X</code> a subtype of <code>Y</code> (denoted <code>X &lt;: Y</code>)?</p>\n\n<p>The question posed for generics involves <strong>variance</strong>.</p>\n\n<p>The variance answers the question: for a generic type <code>G&lt;X&gt;</code>, what does <code>X &lt;: Y</code> mean for the relation of <code>G&lt;X&gt;</code> to <code>G&lt;Y&gt;</code>.</p>\n\n<ul>\n<li>Covariance: <code>X &lt;: Y</code> => <code>G&lt;X&gt; &lt;: G&lt;Y&gt;</code></li>\n<li>Invariance: <code>X == Y</code> => <code>G&lt;X&gt; &lt;: G&lt;Y&gt;</code></li>\n<li>Contravariance: <code>X &lt;: Y</code> => <code>G&lt;Y&gt; &lt;: G&lt;X&gt;</code></li>\n</ul>\n\n<p><code>Cell&lt;X&gt;</code> is invariant w.r.t <code>X</code>, so <code>phantom: PhantomData&lt;Cell&lt;&amp;'a Parent&gt;&gt;,</code> makes <code>Child&lt;'a&gt;</code> <strong>invariant</strong> w.r.t <code>'a</code>.</p>\n\n<p><code>PhantomData</code> is a way to trick you to talk about variance by just describing it in types you already know.</p>\n\n<p>This appears to work, but not so fast, because we can create a situation where the lifetimes are totally equal, and then the test compiles again!</p>\n\n<pre><code>let (parent, parent2) = (Parent::new(1), Parent::new(1));\nlet (child, child2) = (parent.child(2), parent2.child(2));\n// Plan is foiled!!\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 1, "creation_date": 1433010853, "post_id": 30541142, "comment_id": 49171856, "body": "Nice, that&#39;s some extra info for the lifetime. Note that <code>InvariantLifetime&lt;&#39;a&gt;</code> is exactly <code>PhantomData&lt;Cell&lt;&amp;&#39;a .. &gt;&gt;</code> that I mentioned."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1432989985, "last_edit_date": 1432989985, "creation_date": 1432947709, "answer_id": 30541142, "question_id": 30529909, "link": "https://stackoverflow.com/questions/30529909/how-can-i-compare-objects-only-when-they-are-created-from-the-same-parent-object/30541142#30541142", "title": "How can I compare objects only when they are created from the same parent object?", "body": "<p>Here's an answer that could excite you or scare you to death: <em>Use monads</em>.</p>\n\n<p>Specifically the <a href=\"https://wiki.haskell.org/Monad/ST\" rel=\"nofollow\">ST Monad</a>. Unfortunately, I can't explain it to you, but it is my understanding that it could be useful in this case. Let us know if you figure it out!</p>\n\n<p>I was shown this <a href=\"https://github.com/shepmaster/sxd-document/issues/8\" rel=\"nofollow\">for my own project</a>:</p>\n\n<blockquote>\n  <p>You can replicate InvariantLifetime, which is what is actually done in <a href=\"https://github.com/rust-lang/rust/blob/474c6e0ae47578b3e608c893e18bc83798b565aa/src/libcollections/btree/map.rs#L615-L628\" rel=\"nofollow\">the BTreeMap implementation</a>. The reason I say it's very heavyweight is that the only way to make its properties useful is to require each document to be created (or at least, accessed) within a closure.</p>\n</blockquote>\n\n<p>The pragmatic solution is to not attempt to make these compile-time errors, but just include the parent pointer in the comparison:</p>\n\n<pre><code>#[derive(Debug,Copy,Clone,PartialEq)]\nstruct Parent {\n    val: u64,\n}\n\nimpl Parent {\n    fn child(&amp;self) -&gt; Child { Child { parent: self, val: self.val } }\n}\n\n#[derive(Debug,Copy,Clone)]\nstruct Child&lt;'a&gt; {\n    parent: &amp;'a Parent,\n    val: u64,\n}\n\nimpl&lt;'a&gt; PartialEq for Child&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;Child&lt;'a&gt;) -&gt; bool {\n        (self.parent as *const _, self.val) == (other.parent as *const _, other.val)\n    }\n}\n\nfn main() {\n    let (p1, p2) = (Parent { val: 42 }, Parent { val: 42 });\n    let p1_c1 = p1.child();\n    let p1_c2 = p1.child();\n    let p2_c1 = p2.child();\n\n    println!(\"{}\", p1_c1 == p1_c2);\n    println!(\"{}\", p1_c1 == p2_c1);\n}\n</code></pre>\n"}], "owner": {"reputation": 340, "user_id": 2862665, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/394d6a3e56f7f52c0888d3570cc71561?s=128&d=identicon&r=PG", "display_name": "monnoroch", "link": "https://stackoverflow.com/users/2862665/monnoroch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 254, "favorite_count": 0, "accepted_answer_id": 30536675, "answer_count": 2, "score": 6, "last_activity_date": 1548984892, "creation_date": 1432903273, "last_edit_date": 1548984892, "question_id": 30529909, "link": "https://stackoverflow.com/questions/30529909/how-can-i-compare-objects-only-when-they-are-created-from-the-same-parent-object", "title": "How can I compare objects only when they are created from the same parent object?", "body": "<p>I want to compare <code>Obj</code>s only when they are created from the same <code>Parent</code> object, and it works, but only one way: if you switch the order of comparison, it does not.</p>\n\n<p>Here's the minimal code:</p>\n\n<pre><code>use std::marker::PhantomData;\n\nstruct Parent {\n    val: u64,\n}\n\nimpl Parent {\n    pub fn new(v: u64) -&gt; Parent {\n        Parent { val: v }\n    }\n\n    pub fn child(&amp;self, v: u64) -&gt; Child {\n        Child {\n            val: v,\n            phantom: PhantomData,\n        }\n    }\n}\n\nstruct Child&lt;'a&gt; {\n    val: u64,\n    phantom: PhantomData&lt;&amp;'a Parent&gt;,\n}\n\nimpl&lt;'a&gt; Child&lt;'a&gt; {\n    pub fn compare(&amp;'a self, l: &amp;Obj&lt;'a&gt;, r: &amp;Obj&lt;'a&gt;) -&gt; bool {\n        l.val == r.val\n    }\n\n    pub fn obj(&amp;'a self, v: u64) -&gt; Obj&lt;'a&gt; {\n        Obj {\n            val: v,\n            child: self,\n        }\n    }\n}\n\nstruct Obj&lt;'a&gt; {\n    val: u64,\n    child: &amp;'a Child&lt;'a&gt;,\n}\n\nimpl&lt;'a&gt; PartialEq&lt;Obj&lt;'a&gt;&gt; for Obj&lt;'a&gt; {\n    fn eq(&amp;self, other: &amp;Obj&lt;'a&gt;) -&gt; bool {\n        self.child.compare(self, other)\n    }\n}\n\n#[test]\nfn test() {\n    let parent = Parent::new(1);\n    let child = parent.child(2);\n    let obj1 = child.obj(3);\n    let obj2 = child.obj(3);\n\n    // those are from the same parent, this sould work (and works).\n    assert!(obj1 == obj2);\n    assert!(obj2 == obj1);\n\n    let parent2 = Parent::new(1);\n    let child2 = parent2.child(2);\n    let obj12 = child2.obj(3);\n    let obj22 = child2.obj(3);\n\n    // this works fine too\n    assert!(obj12 == obj22);\n    assert!(obj22 == obj12);\n\n    // those are from different parents\n\n    //assert!(obj1 == obj12); // that line DOES NOT compile, which is exactly what I want!\n    assert!(obj12 == obj1); // but that line suddenly DOES compile.\n}\n</code></pre>\n\n<p>How can I change the code so that the last line won't compile?</p>\n"}, {"tags": ["rust", "lifetime", "ownership"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 6, "last_activity_date": 1432877640, "creation_date": 1432877640, "answer_id": 30521827, "question_id": 30521247, "link": "https://stackoverflow.com/questions/30521247/how-to-declare-a-closure-that-lives-longer-than-its-enclosing-block/30521827#30521827", "title": "How to declare a closure that lives longer than its enclosing block", "body": "<p>Borrows <em>do not own</em> the thing they point to.  Your problem is that you're borrowing a <em>temporary</em> which is going to cease to exist right after it's borrowed because you haven't stored it anywhere.  If it helps, consider that borrows don't borrow values, they borrow <em>storage</em>, and a temporary has only transient storage.</p>\n\n<p>If you want a borrow to something to last for any given period, you <em>must</em> borrow from storage that will last <em>at least</em> that long.  In this case, because you want to store the borrow in a <code>Vec</code>, this means that whatever storage you borrow from must <em>outlive the <code>Vec</code> as well</em>.  Thus:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main () {\n    let closure;\n    let mut list: Vec&lt;&amp;Fn() -&gt; i32&gt; = Vec::new();\n\n    {\n        closure = || 1;\n        list.push(&amp;closure);\n    }\n}\n</code></pre>\n\n<p>Note that <code>closure</code> is defined <em>before</em> <code>list</code> is.  In Rust, values are dropped in reverse lexical order at the end of their scope, so any variable defined <em>after</em> <code>list</code> will necessarily be dropped before it, thus leading to <code>list</code> containing invalid pointers.</p>\n\n<p>If you want to push multiple closures, you will need a separate variable for each one.</p>\n\n<p>To forestall a possible \"my actual problem isn't this simple\" addendum (:P): f you need to return <code>list</code> or in some way persist it beyond a single function call, note that there <em>is no way to extend a borrow</em>.  In that case, what you need to do is change <code>list</code> to a vector of <em>owned</em>, boxed closures (<em>i.e.</em> <code>Vec&lt;Box&lt;Fn() -&gt; i32&gt;&gt;</code>).</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 8, "last_activity_date": 1432877916, "creation_date": 1432877916, "answer_id": 30521875, "question_id": 30521247, "link": "https://stackoverflow.com/questions/30521247/how-to-declare-a-closure-that-lives-longer-than-its-enclosing-block/30521875#30521875", "title": "How to declare a closure that lives longer than its enclosing block", "body": "<p>There are two things you are asking about:</p>\n\n<ol>\n<li>specifying a typename for something that has no specifyable typename</li>\n<li>letting a closure live longer than the block where it's defined.</li>\n</ol>\n\n<p>The first issue is fixed by NOT specifying the typename, and letting rust's type inference do the work.</p>\n\n<pre><code>let mut list: Vec&lt;_&gt; = Vec::new();\n</code></pre>\n\n<p>The second issue is fixed by not trying to make the closure live longer, but by making it \"by value\" so you can move it. This enforces that your closure does not reference anything, but owns all the captured values.</p>\n\n<pre><code>for i in 0..10 {\n    list.push(move || i);\n}\n</code></pre>\n\n<p>Now this gives us a new problem. If we add a different closure to the <code>Vec</code>, the types won't match. Therefore to achieve that, we need to box the closures.</p>\n\n<pre><code>fn main () {\n    let mut list: Vec&lt;Box&lt;Fn() -&gt; i32&gt;&gt; = Vec::new();\n\n    for i in 0..10 {\n        list.push(Box::new(move|| i));\n    }\n\n    {\n        list.push(Box::new(move|| 42));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 34162, "user_id": 84478, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/f4cdb7db0efa2c5a63fb0a0796be2bb3?s=128&d=identicon&r=PG", "display_name": "Carson Myers", "link": "https://stackoverflow.com/users/84478/carson-myers"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 353, "favorite_count": 0, "accepted_answer_id": 30521875, "answer_count": 2, "score": 6, "last_activity_date": 1432877916, "creation_date": 1432874388, "last_edit_date": 1432874700, "question_id": 30521247, "link": "https://stackoverflow.com/questions/30521247/how-to-declare-a-closure-that-lives-longer-than-its-enclosing-block", "title": "How to declare a closure that lives longer than its enclosing block", "body": "<p>I suppose this question is about lifetimes in general, but I'm having difficulty with closures specifically because you can't write out their type.</p>\n\n<p>This example is a bit contrived - I'm just starting to learn Rust, and this is something I've been hung up on.</p>\n\n<p>This program won't compile:</p>\n\n<pre><code>fn main () {\n    let mut list: Vec&lt;&amp;Fn() -&gt; i32&gt; = Vec::new();\n\n    {\n        list.push(&amp;|| 1);\n    }\n}\n</code></pre>\n\n<p>Because:</p>\n\n<pre><code>src/main.rs:5:25: 5:24 error: borrowed value does not live long enough\nsrc/main.rs:5         list.push(&amp;|| 1);\n                                 ^~~~\nsrc/main.rs:2:50: 7:2 note: reference must be valid for the block suffix following statement 0 at 2:49...\nsrc/main.rs:2     let mut list: Vec&lt;&amp;Fn() -&gt; i32&gt; = Vec::new();\nsrc/main.rs:3\nsrc/main.rs:4     {\nsrc/main.rs:5         list.push(&amp;move || 1);\nsrc/main.rs:6     }\nsrc/main.rs:7 }\nsrc/main.rs:5:9: 5:26 note: ...but borrowed value is only valid for the statement at 5:8\nsrc/main.rs:5         list.push(&amp;|| 1);\n                      ^~~~~~~~~~~~~~~~~\nsrc/main.rs:5:9: 5:26 help: consider using a `let` binding to increase its lifetime\nsrc/main.rs:5         list.push(&amp;|| 1);\n                      ^~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>What I gather from this error is that the closure's lifetime is limited to the \nstatement inside the block, but it needs to live for the entire body of <code>main</code>. </p>\n\n<p>I know (or, I think) that passing the closure to <code>push</code> as a reference means that <code>push</code> is only borrowing the closure, and that ownership will be returned to the block. This code would work if I could just give the closure to <code>push</code> (i.e. if <code>push</code> took ownership of the closure), but since a closure isn't sized, I must pass it as a reference.</p>\n\n<p>Is that right? How can I make this code work?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432900081, "post_id": 30518648, "comment_id": 49131015, "body": "This was <a href=\"https://users.rust-lang.org/t/how-are-lifetimes-of-struct-arguments-treated-in-calls-to-functions-with-lifetime-parameters/1599?u=shepmaster\" rel=\"nofollow noreferrer\">cross-posted to the Rust Users Forum</a>"}], "answers": [{"comments": [{"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 0, "creation_date": 1432879991, "post_id": 30520900, "comment_id": 49118535, "body": "Thx a lot shepmaster! That really pins it down. I just received a similar hint from mkrasnenkov at the Rust user forum (not as detailed as yours) and was able to give a small summary of all 3 cases there."}, {"owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "edited": false, "score": 2, "creation_date": 1432880329, "post_id": 30520900, "comment_id": 49118665, "body": "In case 1, because of the &amp;mut, &#39;c gets Foo&#39;s original lifetime. &#39;b is independent and does no harm.  In case 2, again because of the &amp;mut, &#39;b gets Foo&#39;s original lifetime. This time, the &amp;p is &quot;too short&quot; to fit into the &amp;&#39;b bool, hence &quot;p does not live long enough&quot;.  In case 3, &#39;b is allowed to be shortened to &amp;p&#39;s lifetime because there is no danger of test mutating _field to a reference that is &quot;shorter&quot; than the original Foo.  Hope, I understood correctly."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1432900164, "last_edit_date": 1432900164, "creation_date": 1432871957, "answer_id": 30520900, "question_id": 30518648, "link": "https://stackoverflow.com/questions/30518648/how-are-lifetimes-of-struct-arguments-treated-in-calls-to-functions-with-lifetim/30520900#30520900", "title": "How are lifetimes of struct arguments treated in calls to functions with lifetime parameters?", "body": "<p>Noting the difference with <code>mut</code> was a key observation. I think that it will make more sense if you change the type of the second argument and give one possible implementation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn test&lt;'a, 'b&gt;(_x: &amp;'a mut Foo&lt;'b&gt;, _y: &amp;'b i32) {\n    _x._field = _y;\n}\n</code></pre>\n\n<p>This function has the ability to mutate <code>_x</code>. That mutation also includes <em>storing a new reference</em> in <code>_field</code>. However, if we were able to store a reference that had a <strong>shorter</strong> lifetime (the intersection you mentioned), as soon as the inner block ended, the reference in the <code>Foo</code> would become invalid and we would have violated Rust's memory safety guarantees!</p>\n\n<p>When you use an immutable reference, you don't have this danger, so the compiler allows it.</p>\n\n<p>You have discovered an important thing - Rust doesn't always care what you do in the function. When checking if a function call is valid, only the type signature of the function is used.</p>\n\n<p>I'm sure there's a fancy way of saying this using the proper terms like <em>contravariance</em> and <em>covariance</em>, but I don't know those well enough to use them properly! ^_^</p>\n"}], "owner": {"reputation": 427, "user_id": 4951150, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9333c2b1123fdbdf3876c3d493dbccfc?s=128&d=identicon&r=PG&f=1", "display_name": "dacker", "link": "https://stackoverflow.com/users/4951150/dacker"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 453, "favorite_count": 0, "accepted_answer_id": 30520900, "answer_count": 1, "score": 5, "last_activity_date": 1432900164, "creation_date": 1432855240, "question_id": 30518648, "link": "https://stackoverflow.com/questions/30518648/how-are-lifetimes-of-struct-arguments-treated-in-calls-to-functions-with-lifetim", "title": "How are lifetimes of struct arguments treated in calls to functions with lifetime parameters?", "body": "<p>This code passes the compiler (for clarification lifetimes are not elided):</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    _field: &amp;'a i32,\n}\n\nfn test&lt;'a, 'b, 'c&gt;(_x: &amp;'a mut Foo&lt;'c&gt;, _y: &amp;'b bool) {  // case 1\n}\n\nfn main() {\n    let f = &amp;mut Foo { _field: &amp;0 };\n    {\n        let p = false;\n        test(f, &amp;p);\n    }\n}\n</code></pre>\n\n<p>If I use <code>'b</code> instead of <code>'c</code> in <code>test</code>'s definition like so:</p>\n\n<pre><code>fn test&lt;'a, 'b&gt;(_x: &amp;'a mut Foo&lt;'b&gt;, _y: &amp;'b bool) {  // case 2\n}\n</code></pre>\n\n<p>the code fails to compile (\"p does not live long enough\")!</p>\n\n<p>What I would expect to happen at the call of <code>test</code> in case 2 is:</p>\n\n<ul>\n<li><code>'a</code> is set to the actual lifetime of <code>f</code>,</li>\n<li><code>'b</code> is set to the intersection of the <code>Foo</code>'s actual lifetime and <code>&amp;p</code>'s actual lifetime which is <code>&amp;p</code>'s lifetime,</li>\n</ul>\n\n<p>and everything should be fine, as in case 1.</p>\n\n<p>Instead, what actually seems to happen in case 2 is that <code>'b</code> is forced to become the lifetime of the <code>Foo</code> which is too big for <code>&amp;p</code>'s lifetime, hence the compiler error 'p does not live long enough'. True?</p>\n\n<p>Even stranger (case 3): this only fails if <code>test</code> takes a &amp;mut. If I leave the <code>&lt;'b&gt;</code> in, but remove the <code>mut</code> like so:</p>\n\n<pre><code>fn test&lt;'a, 'b&gt;(_x: &amp;'a Foo&lt;'b&gt;, _y: &amp;'b bool) {  // case 3\n}\n</code></pre>\n\n<p>the code passes again.</p>\n\n<p>Anyone to shed light on this?</p>\n\n<p>Cheers.</p>\n"}, {"tags": ["reference", "iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 938, "user_id": 4951096, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/b61a485cb682ddf00bf756e3680b3c50?s=128&d=identicon&r=PG&f=1", "display_name": "lofcek", "link": "https://stackoverflow.com/users/4951096/lofcek"}, "edited": false, "score": 0, "creation_date": 1432877824, "post_id": 30518564, "comment_id": 49117734, "body": "Thanks a lot. It does make sense. The other possibility is change a function as it use a reference."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 938, "user_id": 4951096, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/b61a485cb682ddf00bf756e3680b3c50?s=128&d=identicon&r=PG&f=1", "display_name": "lofcek", "link": "https://stackoverflow.com/users/4951096/lofcek"}, "edited": false, "score": 0, "creation_date": 1433285605, "post_id": 30518564, "comment_id": 49283504, "body": "@lofcek: it is not useful to take an iterator by mutable reference; if <code>I</code> implements <code>Iterator</code>, <code>&amp;mut I</code> does too, so you can pass a mutable reference to an iterator in that way. There\u2019s even the <code>by_ref(&amp;mut self) -&gt; &amp;mut Self</code> method on <code>Iterator</code> for convenience of chaining."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": false, "score": 4, "last_activity_date": 1432854760, "creation_date": 1432854760, "answer_id": 30518564, "question_id": 30518435, "link": "https://stackoverflow.com/questions/30518435/how-i-can-iterate-over-borrowed-array/30518564#30518564", "title": "How I can iterate over borrowed array?", "body": "<p>An iterator is a regular object; you work with an iterator directly, not typically through references\u2014and certainly not typically through immutable references, for taking the next value of an iterator takes <code>&amp;mut self</code>. And a reference to an iterator is quite different from an iterator over references.</p>\n\n<p>Fixing this part, you then have this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn print_me&lt;I: Iterator&lt;Item = i32&gt;&gt;(iter: I) {\n    for i in iter {\n        println!(\"{}\", i);\n    }\n}\n</code></pre>\n\n<p>This doesn\u2019t fix everything, however, because <code>[T].iter()</code> produces a type implementing <code>Iterator&lt;Item = &amp;T&gt;</code>\u2014it iterates over <em>references</em> to each item. The most common fix for that is cloning each value with the handy <code>.cloned()</code> method, which is equivalent to <code>.map(|x| x.clone())</code>.</p>\n\n<p>Here, then, is the rest of what you end up with:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    let numbers = vec![1, 2, 3];\n    print_me(numbers.iter().cloned());\n}\n</code></pre>\n"}], "owner": {"reputation": 938, "user_id": 4951096, "user_type": "registered", "accept_rate": 20, "profile_image": "https://www.gravatar.com/avatar/b61a485cb682ddf00bf756e3680b3c50?s=128&d=identicon&r=PG&f=1", "display_name": "lofcek", "link": "https://stackoverflow.com/users/4951096/lofcek"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 887, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1432854760, "creation_date": 1432853956, "last_edit_date": 1432854411, "question_id": 30518435, "link": "https://stackoverflow.com/questions/30518435/how-i-can-iterate-over-borrowed-array", "title": "How I can iterate over borrowed array?", "body": "<p>I thought that it should be something like this, but I cannot iterate over an borrowed array.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn print_me&lt;'a, I&gt;(iter: &amp;'a I) where I: Iterator&lt;Item = i32&gt; {\n    for i in *iter {\n        println!(\"{}\", i);\n    }\n}\n\nfn main() {\n    let numbers = vec![1, 2, 3];\n    //let numbers = &amp;numbers;\n    print_me(numbers.iter());\n}\n</code></pre>\n\n<p>But Rust complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:15:12: 15:26 error: mismatched types:\n expected `&amp;_`,\n    found `core::slice::Iter&lt;'_, _&gt;`\n(expected &amp;-ptr,\n    found struct `core::slice::Iter`) [E0308]\n&lt;anon&gt;:15   print_me(numbers.iter());\n                     ^~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust", "stack-trace", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432847578, "post_id": 30516333, "comment_id": 49109396, "body": "Which platform are you on? I thought that Linux did have file names and line numbers."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 7, "creation_date": 1432850105, "post_id": 30516333, "comment_id": 49110497, "body": "@Shepmaster: only for debug builds, not for release builds."}, {"owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432852963, "post_id": 30516333, "comment_id": 49111501, "body": "@Shepmaster I using OS X 10.10"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1433081692, "post_id": 30516333, "comment_id": 49188343, "body": "@ChrisMorgan: This looks like your comment could be turned into an answer; is the issue a lack of debugging symbols (a <code>-g</code> flag could help?) or is it that even if debugging symbols were present they would be ignored anyway?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433081793, "post_id": 30516333, "comment_id": 49188365, "body": "@BilalHussain: In Release modes, file names and line numbers can be greatly mangled by the various optimizations. after all, you may notice that the stack trace is incomplete (missing intermediate functions) for example, etc... In general, you have to learn to live with it, and if the information is insufficient, then find a way to reproduce the issue and try it in Debug."}], "answers": [{"comments": [{"owner": {"reputation": 4204, "user_id": 1385087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20dd8c0e6b00089d1a8f39b54c3d46e3?s=128&d=identicon&r=PG", "display_name": "Konstantin V. Salikhov", "link": "https://stackoverflow.com/users/1385087/konstantin-v-salikhov"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1451409450, "post_id": 34507094, "comment_id": 56772623, "body": "@Shepmaster pull request states that it works on any non-Android POSIX OS - don&#39;t know if it&#39;s including MacOS X"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1451409651, "post_id": 34507094, "comment_id": 56772727, "body": "I can state that as of Rust 1.5, backtraces do not have line numbers on OS X. I don&#39;t see them ^_^"}, {"owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "edited": false, "score": 0, "creation_date": 1451500190, "post_id": 34507094, "comment_id": 56811810, "body": "On OS X 10.11  using Rust 1.5, I still don&#39;t see the line numbers"}, {"owner": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "edited": false, "score": 3, "creation_date": 1502830724, "post_id": 34507094, "comment_id": 78361181, "body": "And a year and a half later I still don&#39;t see the line numbers. (Rust 1.19, OSX 10.12). #OneDay"}], "tags": [], "owner": {"reputation": 4204, "user_id": 1385087, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/20dd8c0e6b00089d1a8f39b54c3d46e3?s=128&d=identicon&r=PG", "display_name": "Konstantin V. Salikhov", "link": "https://stackoverflow.com/users/1385087/konstantin-v-salikhov"}, "is_accepted": false, "score": 9, "last_activity_date": 1451937861, "last_edit_date": 1451937861, "creation_date": 1451376804, "answer_id": 34507094, "question_id": 30516333, "link": "https://stackoverflow.com/questions/30516333/stack-trace-with-line-numbers-when-running-cargo-run/34507094#34507094", "title": "Stack trace with line numbers when running cargo run", "body": "<p>There is a <a href=\"https://github.com/rust-lang/rust/pull/22839\">pull request</a> merged into main rust repo which adds file names and line numbers to backtrace. As far as I can see it was a part of rust 1.0.0 stable release.</p>\n\n<p>You have to enable backtraces and build executable using <a href=\"http://doc.crates.io/manifest.html#the-profile-sections\">cargo profile</a> which includes debug symbols into executable (with <code>debug = true</code> option in cargo manifest). AFAIK <code>cargo run</code> is using debug profile by default now.</p>\n\n<p>Here is example trace output with file names and line numbers:</p>\n\n<pre><code>[user@salikhov ~/workspace/mqtt-rust $ RUST_BACKTRACE=1 cargo run\n   Compiling mqtt v0.1.0 (file:///home/user/workspace/mqtt-rust)\n\n     Running `target/debug/mqtt`\nthread '&lt;main&gt;' panicked at 'I want line numbers!', src/proto/client.rs:33\nstack backtrace:\n   1:     0x7ff049fa47d9 - sys::backtrace::tracing::imp::write::he18882fa84e6b00ePnt\n   2:     0x7ff049fa39b8 - panicking::on_panic::h495226a97f084523enx\n   3:     0x7ff049f9dcce - sys_common::unwind::begin_unwind_inner::h7a4ee06c0d57e26affs\n   4:     0x7ff049f95f47 - sys_common::unwind::begin_unwind::h13029855766851973181\n                        at ../src/libstd/sys/common/unwind/mod.rs:232\n   5:     0x7ff049f95e8a - proto::client::MqttConnection::connect::h633d3d42c15a3dedgYa\n                        at /home/user/workspace/mqtt-rust/&lt;std macros&gt;:3\n   6:     0x7ff049f80416 - main::h1d77c75265710f92gaa\n                        at src/main.rs:5\n   7:     0x7ff049fa6084 - sys_common::unwind::try::try_fn::h4848098439110500489\n   8:     0x7ff049fa3098 - __rust_try\n   9:     0x7ff049fa5cf8 - rt::lang_start::hcf64c98c1a7c0031Zkx\n  10:     0x7ff049f834f6 - main\n  11:     0x7ff049170ec4 - __libc_start_main\n  12:     0x7ff049f802a8 - &lt;unknown&gt;\n  13:                0x0 - &lt;unknown&gt;\nAn unknown error occurred\n</code></pre>\n\n<p>Unfortunately, this is broken on some platforms like MacOS X. There is open <a href=\"https://github.com/rust-lang/rust/issues/24346\">issue</a> about this in rust github issue tracker.</p>\n"}, {"tags": [], "owner": {"reputation": 730, "user_id": 3283003, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/969f644f75512332a20f0ea1ff6e64d0?s=128&d=identicon&r=PG&f=1", "display_name": "Squirrel", "link": "https://stackoverflow.com/users/3283003/squirrel"}, "is_accepted": false, "score": 1, "last_activity_date": 1507101272, "creation_date": 1507101272, "answer_id": 46559064, "question_id": 30516333, "link": "https://stackoverflow.com/questions/30516333/stack-trace-with-line-numbers-when-running-cargo-run/46559064#46559064", "title": "Stack trace with line numbers when running cargo run", "body": "<p>If you go into the deps subdirectory and run the program from there you will now get line numbers in OSX.</p>\n\n<p>This is due to this open issue which hopefully will be fixed soon:\n<a href=\"https://github.com/rust-lang/cargo/issues/4490\" rel=\"nofollow noreferrer\">https://github.com/rust-lang/cargo/issues/4490</a></p>\n"}], "owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8989, "favorite_count": 0, "answer_count": 2, "score": 18, "last_activity_date": 1507101272, "creation_date": 1432844322, "question_id": 30516333, "link": "https://stackoverflow.com/questions/30516333/stack-trace-with-line-numbers-when-running-cargo-run", "title": "Stack trace with line numbers when running cargo run", "body": "<p>Doing <code>RUST_BACKTRACE=1 cargo run</code> gives a stack trace when an error occurs as shown below. Is there any way to get the file &amp; line number instead of the hex address?</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: Parsing: invalid encoding byte', /Users/rustbuild/src/rust-buildbot/slave/stable-dist-rustc-mac/build/src/libcore/result.rs:729\nstack backtrace:\n   1:        0x104c9403f - sys::backtrace::write::h7807ec07859fb503t1r\n   2:        0x104c980e4 - panicking::on_panic::ha0ed2b9b562a7f9ctZv\n   3:        0x104c7c4d5 - rt::unwind::begin_unwind_inner::hbfb8d99cb52be7a1cHv\n   4:        0x104c7cd66 - rt::unwind::begin_unwind_fmt::hac7eda7c3f3b8498QFv\n   5:        0x104c979bc - rust_begin_unwind\n   6:        0x104cb75f5 - panicking::panic_fmt::h051633da0da2e362wwy\n   7:        0x104be0877 - result::Result&lt;T, E&gt;::unwrap::h15040486031244389916\n   8:        0x104bdc6f1 - main::h393644ca2d1fdb82uLa\n   9:        0x104c99e18 - rust_try_inner\n  10:        0x104c99e05 - rust_try\n  11:        0x104c988e8 - rt::lang_start::h5324dae87dacdac8YTv\n  12:        0x104be500e - main\nAn unknown error occurred\n</code></pre>\n"}, {"tags": ["file", "file-io", "rust", "filepath"], "answers": [{"comments": [{"owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "edited": false, "score": 0, "creation_date": 1432843942, "post_id": 30515813, "comment_id": 49107520, "body": "Your version is much nicer"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1432842931, "last_edit_date": 1432842931, "creation_date": 1432842362, "answer_id": 30515813, "question_id": 30515680, "link": "https://stackoverflow.com/questions/30515680/how-to-filter-file-paths-then-use-the-resulting-paths/30515813#30515813", "title": "How to filter file paths then use the resulting paths", "body": "<p>Let's take a look at the documentation for <a href=\"http://doc.rust-lang.org/core/result/enum.Result.html#method.unwrap\" rel=\"nofollow\"><code>Result::unwrap</code></a>:</p>\n\n<blockquote>\n<pre><code>fn unwrap(self) -&gt; T\n</code></pre>\n  \n  <p>Unwraps a result, yielding the content of an Ok.</p>\n</blockquote>\n\n<p>Note how it takes <code>self</code>? That means that the option will be consumed. However, your iterator is passing the closure a <code>&amp;Result&lt;T, _&gt;</code>. You can't take ownership of the <code>Option</code> because it is borrowed.</p>\n\n<p>The shortest fix is to get an <code>Result&lt;&amp;T, _&gt;</code> instead, using <a href=\"http://doc.rust-lang.org/core/result/enum.Result.html#method.as_ref\" rel=\"nofollow\"><code>as_ref</code></a>:</p>\n\n<pre><code>use std::fs;\n\nfn main() {\n    let dir_paths = fs::read_dir(\"/\").unwrap();\n\n    let paths = dir_paths.filter(|x| match x.as_ref().unwrap().path().extension() {\n        None =&gt; true,\n        Some(ext) =&gt; ext == \"mp3\"\n    });\n}\n</code></pre>\n\n<p>Although I might choose to write it as</p>\n\n<pre><code>use std::fs;\nuse std::ffi::OsStr;\n\nfn main() {\n    let dir_paths = fs::read_dir(\"/\").unwrap();\n\n    dir_paths\n        .filter_map(|x| x.ok())\n        .filter(|x| x.path().extension().and_then(OsStr::to_str) == Some(\"mp3\"));\n}\n</code></pre>\n\n<p>There's some less unwraps - we just ignore any failed <code>DirEntry</code>s. That's up to your error handling strategy though. </p>\n"}], "owner": {"reputation": 6694, "user_id": 852240, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/25c7de360f08fe269437a0f22fd24549?s=128&d=identicon&r=PG", "display_name": "Bilal Syed Hussain", "link": "https://stackoverflow.com/users/852240/bilal-syed-hussain"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 70, "favorite_count": 0, "accepted_answer_id": 30515813, "answer_count": 1, "score": 2, "last_activity_date": 1432847502, "creation_date": 1432841827, "last_edit_date": 1432847502, "question_id": 30515680, "link": "https://stackoverflow.com/questions/30515680/how-to-filter-file-paths-then-use-the-resulting-paths", "title": "How to filter file paths then use the resulting paths", "body": "<p>I trying to get a list of mp3 from a  directory.  </p>\n\n<pre><code>let dir_paths = fs::read_dir(&amp;Path::new(\"some_directory\")).unwrap();\n\nlet paths = dir_paths.filter(|x| match x.unwrap().path().extension() {\n    None =&gt; true,\n    Some(ext) =&gt; ext == \"mp3\"\n});\n</code></pre>\n\n<p>The Error Message</p>\n\n<pre><code>src/main.rs:27:48: 27:49 error: cannot move out of borrowed content\nsrc/main.rs:27     let paths = dir_paths.filter(|ref x| match x.unwrap().path().extension() {\n                                                              ^\n</code></pre>\n\n<p>I tried replacing <code>|x|</code> with <code>|ref x|</code> but got the same error message.  What is correct way of doing this</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1432828475, "post_id": 30511331, "comment_id": 49098371, "body": "Note that &quot;<a href=\"http://stackoverflow.com/a/2341847/155423\">since many file systems in Linux support hard links, any given directory can have a number of different absolute paths.&quot;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1432911166, "post_id": 30512447, "comment_id": 49138933, "body": "This doesn&#39;t appear to do <i>quite</i> the same thing as the asker may have intended.  If you use this to &quot;absolutise&quot; <code>.&#47;x</code>, you end up with the <code>.</code> as part of the result, whereas they might be expecting it <i>not</i> to show up.  The distinction is important if you&#39;re trying to get a (within the limits imposed by hard links) canonical path to a file."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1484680560, "post_id": 30512447, "comment_id": 70606050, "body": "I wouldn&#39;t <i>delete</i> your answer; it still can work in some of the conditions that the other answer fails (no file created, for example)."}, {"owner": {"reputation": 24901, "user_id": 198927, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/eExki.jpg?s=128&g=1", "display_name": "Petrus Theron", "link": "https://stackoverflow.com/users/198927/petrus-theron"}, "edited": false, "score": 0, "creation_date": 1543051650, "post_id": 30512447, "comment_id": 93785627, "body": "How to turn <code>absolute_path</code> into a string for display or format?"}], "tags": [], "owner": {"reputation": 2923, "user_id": 783912, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/98e9b626cf9e9e74ae50c190da325a5e?s=128&d=identicon&r=PG&f=1", "display_name": "FlyingFoX", "link": "https://stackoverflow.com/users/783912/flyingfox"}, "is_accepted": false, "score": 10, "last_activity_date": 1547556776, "last_edit_date": 1547556776, "creation_date": 1432831274, "answer_id": 30512447, "question_id": 30511331, "link": "https://stackoverflow.com/questions/30511331/getting-the-absolute-path-from-a-pathbuf/30512447#30512447", "title": "Getting the absolute path from a PathBuf", "body": "<p>If I understand the PathBuf documentation correctly it does not treat <code>\"./\"</code> as a special start to a path that says its relative.</p>\n\n<p>You can however turn a relative path into an absolute one with <a href=\"https://doc.rust-lang.org/stable/std/env/fn.current_dir.html\" rel=\"nofollow noreferrer\"><code>std::env::current_dir</code></a>:</p>\n\n<pre><code>let relative_path = PathBuf::from(\"cargo_home\");\nlet mut absolute_path = try!(std::env::current_dir());\nabsolute_path.push(relative_path)\n</code></pre>\n\n<p>This assumes that your relative path is relative to your current directory.</p>\n"}, {"comments": [{"owner": {"reputation": 761, "user_id": 47991, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/afc029ae6534b5f5eea0964b89f254f5?s=128&d=identicon&r=PG", "display_name": "Cody Casterline", "link": "https://stackoverflow.com/users/47991/cody-casterline"}, "edited": false, "score": 13, "creation_date": 1479745679, "post_id": 38384901, "comment_id": 68676805, "body": "There are a couple problems with canonicalize. 1) It resolves symlinks to a canonical path, so it must access the file system. This can impact performance. 2) It fails if the file does not exist. So you can not use fs::canonicalize() on a path that does not (yet) exist."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 2, "creation_date": 1511684031, "post_id": 38384901, "comment_id": 81943411, "body": "I have run into issues using fs::canonicalize (running on Mac OS X), is it guaranteed that it will return an absolute path, or it just &quot;canonicalizes&quot; the relative path? e.g. &quot;../peer-dir/../second-peer-dir&quot; --&gt; &quot;../second-peer-dir&quot;"}, {"owner": {"reputation": 1350, "user_id": 3220468, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/8bcd5a0e9fc3018d76dd96371281a891?s=128&d=identicon&r=PG", "display_name": "Tom&#225;\u0161 Dvo\u0159&#225;k", "link": "https://stackoverflow.com/users/3220468/tom%c3%a1%c5%a1-dvo%c5%99%c3%a1k"}, "edited": false, "score": 0, "creation_date": 1545139651, "post_id": 38384901, "comment_id": 94516165, "body": "Another possible pitfall on Windows: <code>canonicalize</code> (as of Rust 1.31) adds the <i>Extended length path</i> prefix ` \\\\?\\ ` to the path (see <a href=\"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#maxpath\" rel=\"nofollow noreferrer\">docs.microsoft.com/en-us/windows/desktop/FileIO/&hellip;</a>). Make sure the consumer of the canonicalized path is aware of that."}, {"owner": {"reputation": 111, "user_id": 5148945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c17846551ab7943456c1187824ef0d94?s=128&d=identicon&r=PG&f=1", "display_name": "rhysd", "link": "https://stackoverflow.com/users/5148945/rhysd"}, "edited": false, "score": 0, "creation_date": 1545794888, "post_id": 38384901, "comment_id": 94695783, "body": "Please note that fs::canonicalize uses UNC path on Windows. So the result may not be what you want on Windows. See <a href=\"https://github.com/rust-lang/rust/issues/42869\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/42869</a>"}, {"owner": {"reputation": 570, "user_id": 3256073, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a0f9a1e93018776d149054dc2ccbe57f?s=128&d=identicon&r=PG&f=1", "display_name": "hsandt", "link": "https://stackoverflow.com/users/3256073/hsandt"}, "edited": false, "score": 0, "creation_date": 1556233368, "post_id": 38384901, "comment_id": 98378582, "body": "There is also the alias method <code>canonicalize</code> that you can use directly: <code>srcdir.canonicalize()</code>."}], "tags": [], "owner": {"reputation": 4570, "user_id": 1558022, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/63a70b00feba1e66410b7799b58a897d?s=128&d=identicon&r=PG", "display_name": "alexwlchan", "link": "https://stackoverflow.com/users/1558022/alexwlchan"}, "is_accepted": true, "score": 47, "last_activity_date": 1468533376, "creation_date": 1468533376, "answer_id": 38384901, "question_id": 30511331, "link": "https://stackoverflow.com/questions/30511331/getting-the-absolute-path-from-a-pathbuf/38384901#38384901", "title": "Getting the absolute path from a PathBuf", "body": "<p>Rust&nbsp;1.5.0 added <a href=\"https://doc.rust-lang.org/std/fs/fn.canonicalize.html\"><code>std::fs::canonicalize</code></a>, which sounds pretty close to what you want:</p>\n\n<blockquote>\n  <p>Returns the canonical form of a path with all intermediate components normalized and symbolic links resolved.</p>\n</blockquote>\n\n<p></p></p>\n\n<p>Note that, unlike the accepted answer, this removes the <code>./</code> from the returned path.</p>\n\n<hr>\n\n<p>A simple example from my machine:</p>\n\n<pre><code>use std::fs;\nuse std::path::PathBuf;\n\nfn main() {\n    let srcdir = PathBuf::from(\"./src\");\n    println!(\"{:?}\", fs::canonicalize(&amp;srcdir));\n\n    let solardir = PathBuf::from(\"./../solarized/.\");\n    println!(\"{:?}\", fs::canonicalize(&amp;solardir));\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>Ok(\"/Users/alexwlchan/Developer/so-example/src\")\nOk(\"/Users/alexwlchan/Developer/solarized\")\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 191, "user_id": 7829659, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-DoIETiEv0AI/AAAAAAAAAAI/AAAAAAAAR8g/M0LRg5Ww_pc/photo.jpg?sz=128", "display_name": "Caleb Bassi", "link": "https://stackoverflow.com/users/7829659/caleb-bassi"}, "is_accepted": false, "score": 19, "last_activity_date": 1600746223, "last_edit_date": 1600746223, "creation_date": 1550791130, "answer_id": 54817755, "question_id": 30511331, "link": "https://stackoverflow.com/questions/30511331/getting-the-absolute-path-from-a-pathbuf/54817755#54817755", "title": "Getting the absolute path from a PathBuf", "body": "<p>You can do this quite nicely using the <a href=\"https://crates.io/crates/path-clean\" rel=\"nofollow noreferrer\">path-clean</a> crate and <a href=\"https://doc.rust-lang.org/stable/std/env/fn.current_dir.html\" rel=\"nofollow noreferrer\"><code>std::env::current_dir</code></a>. The benefit of this method over the other answers is that it resolves <code>.</code> and <code>..</code> and it works even when the path doesn't exist.</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use std::env;\nuse std::io;\nuse std::path::{PathBuf, Path};\n\nuse path_clean::PathClean;\n\npub fn absolute_path(path: impl AsRef&lt;Path&gt;) -&gt; io::Result&lt;PathBuf&gt; {\n    let path = path.as_ref();\n\n    let absolute_path = if path.is_absolute() {\n        path.to_path_buf()\n    } else {\n        env::current_dir()?.join(path)\n    }.clean();\n\n    Ok(absolute_path)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 351, "user_id": 1526986, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f8680b8b03d90e228dae2db181b06d2b?s=128&d=identicon&r=PG", "display_name": "xixixao", "link": "https://stackoverflow.com/users/1526986/xixixao"}, "is_accepted": false, "score": 1, "last_activity_date": 1612726912, "creation_date": 1612726912, "answer_id": 66092327, "question_id": 30511331, "link": "https://stackoverflow.com/questions/30511331/getting-the-absolute-path-from-a-pathbuf/66092327#66092327", "title": "Getting the absolute path from a PathBuf", "body": "<p>There is <a href=\"https://crates.io/crates/path-absolutize\" rel=\"nofollow noreferrer\">https://crates.io/crates/path-absolutize</a> now, for handling non-existent paths.</p>\n"}], "owner": {"reputation": 950, "user_id": 1254034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6134973ba87381d21fe7ba6ab1e8a45e?s=128&d=identicon&r=PG", "display_name": "Eduardo Bautista", "link": "https://stackoverflow.com/users/1254034/eduardo-bautista"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15112, "favorite_count": 2, "accepted_answer_id": 38384901, "answer_count": 4, "score": 34, "last_activity_date": 1612726912, "creation_date": 1432827992, "question_id": 30511331, "link": "https://stackoverflow.com/questions/30511331/getting-the-absolute-path-from-a-pathbuf", "title": "Getting the absolute path from a PathBuf", "body": "<p>Given a relative path:</p>\n\n<pre><code>PathBuf::from(\"./cargo_home\")\n</code></pre>\n\n<p>Is there a way to get the absolute path?</p>\n"}, {"tags": ["python", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432827211, "post_id": 30510764, "comment_id": 49097429, "body": "Please review <a href=\"http://stackoverflow.com/questions/30440068/segmentation-fault-when-calling-a-rust-lib-with-ruby-ffi\" title=\"segmentation fault when calling a rust lib with ruby ffi\">stackoverflow.com/questions/30440068/&hellip;</a> and <a href=\"http://stackoverflow.com/questions/30312885/pass-python-list-to-embedded-rust-function/30313295#30313295\" title=\"pass python list to embedded rust function\">stackoverflow.com/questions/30312885/&hellip;</a> and let us know how your question differs."}, {"owner": {"reputation": 3485, "user_id": 26861, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/493bcac87947976c593c1f925e72f694?s=128&d=identicon&r=PG", "display_name": "LeeMobile", "link": "https://stackoverflow.com/users/26861/leemobile"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1432829122, "post_id": 30510764, "comment_id": 49098804, "body": "I&#39;ve reviewed both those questions, and they do differ. In the first one, the call comes from Ruby and my question is from Python.   In the second question, the return value is an integer, which is a simple case. Here, the return is specifically a string value."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432829214, "post_id": 30510764, "comment_id": 49098862, "body": "There&#39;s absolutely nothing different on the Rust side that should change depending on the language you are calling from. As far as the Rust code is concerned, C is calling it. Every other language is calling what looks like C code to it."}], "answers": [{"tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": false, "score": 1, "last_activity_date": 1432828403, "last_edit_date": 1432828403, "creation_date": 1432827545, "answer_id": 30511163, "question_id": 30510764, "link": "https://stackoverflow.com/questions/30510764/returning-a-string-from-rust-function-to-python/30511163#30511163", "title": "Returning a String from Rust function to Python", "body": "<p>The problem here is that you are returning a <code>CString</code> directly, which does not correspond to the representation of a string in <code>C</code> (you can see <a href=\"http://static.rust-lang.org/doc/master/src/std/ffi/c_str.rs.html#66-68\" rel=\"nofollow\">here</a> the source code of <code>CString</code>).</p>\n\n<p>You should be returning a pointer to the string, by using <code>s.as_ptr()</code>. However, you need to make sure that the string is not deallocated at the end of the function, since that would result in a dangling pointer.</p>\n\n<p>The only solution I can think of is to use <code>forget</code> to let rust forget the variable instead of freeing it. Of course you will need to find a way to free the string later to avoid a memory leak (see Vladimir's answer).</p>\n\n<p>With the changes I mentioned, your Rust code should be the following:</p>\n\n<pre><code>use std::ffi::CString;\nuse std::mem;\n\n#[no_mangle]\npub extern fn query() -&gt; *const i8 {\n    let s = CString::new(\"Hello!\").unwrap();\n    let ptr = s.as_ptr();\n    mem::forget(s);\n    return ptr;\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4827, "user_id": 2054731, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/35ce9a8c755f680d319d6e7e1d1cde24?s=128&d=identicon&r=PG", "display_name": "ArneHugo", "link": "https://stackoverflow.com/users/2054731/arnehugo"}, "edited": false, "score": 0, "creation_date": 1473616553, "post_id": 30511235, "comment_id": 66200449, "body": "I needed to do the first two steps from <a href=\"https://github.com/rust-lang/libc#usage\" rel=\"nofollow noreferrer\">here</a> to get it working: (1) add dependency to rustc in <code>Cargo.toml</code> and (2) import it in the rust file where it&#39;s used. (Not sure if this is always necessary though, I&#39;m completely new to rust.)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 12, "last_activity_date": 1464207357, "last_edit_date": 1464207357, "creation_date": 1432827748, "answer_id": 30511235, "question_id": 30510764, "link": "https://stackoverflow.com/questions/30510764/returning-a-string-from-rust-function-to-python/30511235#30511235", "title": "Returning a String from Rust function to Python", "body": "<p>The most direct version would be this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use libc::c_char;\nuse std::ffi::CString;\nuse std::mem;\n\n#[no_mangle]\npub extern fn query() -&gt; *mut c_char {\n    let s = CString::new(\"Hello!\").unwrap();\n    s.into_raw()\n}\n</code></pre>\n\n<p>Here we return a pointer to a zero-terminated sequence of <code>char</code>s which can be passed to Python's <code>c_char_p</code>. You can't return just <code>CString</code> because it is Rust structure which is not supposed to be used in C code directly - it wraps <code>Vec&lt;u8&gt;</code> and actually consists of three pointer-sized integers. It is not compatible with C's <code>char*</code> directly. We need to obtain a raw pointer out of it. <a href=\"http://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_raw\" rel=\"nofollow\"><code>CString::into_raw()</code></a> method does this - it consumes the <code>CString</code> by value, \"forgets\" it so its allocation won't be destroyed, and returns a <code>*mut c_char</code> pointer to the beginning of the array.</p>\n\n<p>However, this way the string will be leaked because we forget its allocation on the Rust side, and it is never going to get freed. I don't know Python's FFI enough, but the most direct way to fix this problem is to create two functions, one for producing the data and one for freeing it. Then you need to free the data from Python side by calling this freeing function:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// above function\n#[no_mangle]\npub extern fn query() -&gt; *mut c_char { ... }\n\n#[no_mangle]\npub extern fn free_query(c: *mut c_char) {\n    // convert the pointer back to `CString`\n    // it will be automatically dropped immediately\n    unsafe { CString::from_raw(c); }\n}\n</code></pre>\n\n<p><a href=\"http://doc.rust-lang.org/std/ffi/struct.CString.html#method.from_raw\" rel=\"nofollow\"><code>CString::from_raw()</code></a> method accepts a <code>*mut c_char</code> pointer and creates a <code>CString</code> instance out of it, computing the length of the underlying zero-terminated string in the process. This operation implies ownership transfer, so the resulting <code>CString</code> value will own the allocation, and when it is dropped, the allocation gets freed. This is exactly what we want.</p>\n"}], "owner": {"reputation": 3485, "user_id": 26861, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/493bcac87947976c593c1f925e72f694?s=128&d=identicon&r=PG", "display_name": "LeeMobile", "link": "https://stackoverflow.com/users/26861/leemobile"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1813, "favorite_count": 3, "accepted_answer_id": 30511235, "answer_count": 2, "score": 19, "last_activity_date": 1464207357, "creation_date": 1432826552, "last_edit_date": 1432833824, "question_id": 30510764, "link": "https://stackoverflow.com/questions/30510764/returning-a-string-from-rust-function-to-python", "title": "Returning a String from Rust function to Python", "body": "<p>I'm very new to Rust. How would I return a <code>String</code> from a Rust function that can be used in Python?</p>\n\n<p>Here is my Rust implementation:</p>\n\n<pre><code>use std::ffi::CString;\n\n#[no_mangle]\npub extern fn query() -&gt; CString {\n    let s = CString::new(\"Hello!\").unwrap();\n    return s;\n}\n</code></pre>\n\n<p>And the Python code that calls it:</p>\n\n<pre><code>from ctypes import cdll, c_char_p\n\nlib = cdll.LoadLibrary(\"target/release/libtest.so\")\nresult = lib.query()\n\nprint(c_char_p(result).value)\n</code></pre>\n\n<p>I get a segmentation fault when its run.</p>\n\n<p>EDIT: Using Vladimir Matveev's Rust code below I was able to get it to work with the changes to my python code:</p>\n\n<pre><code>from ctypes import *\n\nlib = cdll.LoadLibrary(\"target/release/libtest.so\")\nlib.query.restype = c_char_p\nresult = lib.query()\nprint cast(result, c_char_p).value\nlib.free_query(result)\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 29, "last_activity_date": 1568199308, "last_edit_date": 1568199308, "creation_date": 1432815251, "answer_id": 30506288, "question_id": 30506120, "link": "https://stackoverflow.com/questions/30506120/use-of-unstable-library-feature-collections-using-nightly/30506288#30506288", "title": "&quot;use of unstable library feature &#39;collections&#39;&quot; using nightly", "body": "<p>You need to explicitly opt-in by placing <code>#![feature(collections)]</code> at the top of your crate's root source file.  Using a nightly compiler merely <em>permits</em> you to use unstable features, it doesn't automatically enable them.</p>\n\n<p>See also this <a href=\"https://stackoverflow.com/questions/27454761/what-is-a-crate-attribute-and-where-do-i-add-it\">related SO question</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 14, "last_activity_date": 1608428471, "last_edit_date": 1608428471, "creation_date": 1432815287, "answer_id": 30506304, "question_id": 30506120, "link": "https://stackoverflow.com/questions/30506120/use-of-unstable-library-feature-collections-using-nightly/30506304#30506304", "title": "&quot;use of unstable library feature &#39;collections&#39;&quot; using nightly", "body": "<p>If you look below the error message (on nightly), there's a hint as to what you need to do to activate this feature (just because it's in the nightly, doesn't mean the feature is active)</p>\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:3:10: 3:24 help: add #![feature(collections)] to the crate attributes to enable\nerror: aborting due to previous error\n</code></pre>\n<p>Always read the full error message, especially the <code>note:</code> and <code>help:</code> parts. These often tell you how to fix the error.</p>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15550, "favorite_count": 5, "accepted_answer_id": 30506288, "answer_count": 2, "score": 22, "last_activity_date": 1608428471, "creation_date": 1432814756, "last_edit_date": 1568199294, "question_id": 30506120, "link": "https://stackoverflow.com/questions/30506120/use-of-unstable-library-feature-collections-using-nightly", "title": "&quot;use of unstable library feature &#39;collections&#39;&quot; using nightly", "body": "<p>This</p>\n\n<pre><code>fn main() {\n\n    let test = \"Foo\".to_string();\n    test.to_lowercase();\n\n}\n</code></pre>\n\n<p>produces an error</p>\n\n<pre><code>error: use of unstable library feature 'collections'\n       test.to_lowercase();\n            ^~~~~~~~~~~~~~\n</code></pre>\n\n<p>but I am using</p>\n\n<pre><code>rustc 1.2.0-nightly (f76d9bcfc 2015-05-28) (built 2015-05-28)\n</code></pre>\n\n<p>and according to <a href=\"http://doc.rust-lang.org/1.0.0/book/release-channels.html\" rel=\"nofollow noreferrer\">http://doc.rust-lang.org/1.0.0/book/release-channels.html</a> unstable features are enabled on nightly. I've also tried stable and beta, but the error is exactly the same. So what's the issue here?</p>\n"}, {"tags": ["module", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1432820378, "post_id": 30505804, "comment_id": 49091977, "body": "See also <a href=\"http://stackoverflow.com/questions/30463162/use-of-undeclared-type-or-module-corefmtdisplay\" title=\"use of undeclared type or module corefmtdisplay\">stackoverflow.com/questions/30463162/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1432815513, "post_id": 30506259, "comment_id": 49088193, "body": "Could you explain why are they re-exported?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1433081257, "post_id": 30506259, "comment_id": 49188229, "body": "@DanielFath: It&#39;s just a matter of flexibility/convenience. On the one hand, it&#39;s more flexible to have multiple low-level crates (<code>core</code>, <code>alloc</code>, <code>collections</code>, ...) so that low-level users (such as kernel writers) can cherry pick only the crates that can be used in their context and on the other hand it&#39;s more convenient for users to have a single crate to reach for (<code>std</code>)."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1432815604, "last_edit_date": 1432815604, "creation_date": 1432815168, "answer_id": 30506259, "question_id": 30505804, "link": "https://stackoverflow.com/questions/30505804/what-is-the-difference-between-allocrcrc-and-stdrcrc/30506259#30506259", "title": "What is the difference between `alloc::rc::Rc` and `std::rc::Rc`?", "body": "<p><code>std::rc::Rc</code> is just a re-export of <code>alloc::rc::Rc</code>. You can see in <a href=\"https://doc.rust-lang.org/nightly/src/std/lib.rs.html#188\">src/std/lib.rs</a> that the whole <code>rc</code> module is re-exported: <code>pub use alloc::rc;</code></p>\n\n<p>The <code>alloc</code> crate is for any kind of memory allocations. Reference counted, Boxed, raw allocations and general access to the underlying allocator (often <code>jemalloc</code> in Rust). Since the <code>Rc</code> type is such a common type that it should exist in the standard library, but the <code>alloc</code> crate should not be a part of the standard library, just the <code>rc</code> module of <code>alloc</code> is re-exported to the standard library. This saves the user from having to care about the <code>alloc</code> crate, and instead offers a clean standard library without odd stuff that is prone to be uncomfortable to use.</p>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 141, "favorite_count": 0, "accepted_answer_id": 30506259, "answer_count": 1, "score": 3, "last_activity_date": 1432815604, "creation_date": 1432813827, "question_id": 30505804, "link": "https://stackoverflow.com/questions/30505804/what-is-the-difference-between-allocrcrc-and-stdrcrc", "title": "What is the difference between `alloc::rc::Rc` and `std::rc::Rc`?", "body": "<p>I'm curious is there a difference between these two modules in practice? And if not, why have these two duplicates then?</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "edited": false, "score": 3, "creation_date": 1432813800, "post_id": 30505639, "comment_id": 49086926, "body": "Did you have had a look at this: <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/error-handling.html</a>"}], "answers": [{"comments": [{"owner": {"reputation": 1483, "user_id": 1483396, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3b6399f32a41ad5728074b556e1b14f6?s=128&d=identicon&r=PG", "display_name": "Nashenas", "link": "https://stackoverflow.com/users/1483396/nashenas"}, "edited": false, "score": 0, "creation_date": 1433613086, "post_id": 30505966, "comment_id": 49431421, "body": "Be warry of the burntsushi reader exercise of converting the iterative loop into an iterator. It&#39;s <a href=\"http://stackoverflow.com/q/30488928/1483396\">not that simple</a>"}, {"owner": {"reputation": 512, "user_id": 12357035, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XT9DZ.png?s=128&g=1", "display_name": "Sourav Kannantha B", "link": "https://stackoverflow.com/users/12357035/sourav-kannantha-b"}, "edited": false, "score": 1, "creation_date": 1613412395, "post_id": 30505966, "comment_id": 117062078, "body": "Why no one mentions how to raise errors?"}], "tags": [], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "is_accepted": true, "score": 35, "last_activity_date": 1545512995, "last_edit_date": 1545512995, "creation_date": 1432814272, "answer_id": 30505966, "question_id": 30505639, "link": "https://stackoverflow.com/questions/30505639/how-to-do-error-handling-in-rust-and-what-are-the-common-pitfalls/30505966#30505966", "title": "How to do error handling in Rust and what are the common pitfalls?", "body": "<p>Rust generally solves errors in two ways:</p>\n\n<ul>\n<li><p><strong>Unrecoverable errors</strong>. Once you <code>panic!</code>, that's it. Your program or thread aborts because it encounters something it can't solve and its invariants have been violated. E.g. if you find invalid sequences in what should be a UTF-8 string.</p></li>\n<li><p><strong>Recoverable errors</strong>. Also called failures in some documentation. Instead of panicking, you emit a <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noreferrer\"><code>Option&lt;T&gt;</code></a> or <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noreferrer\"><code>Result&lt;T, E&gt;</code></a>. In these cases, you have a choice between a valid value <code>Some(T)</code>/<code>Ok(T)</code> respectively or an invalid value <code>None</code>/<code>Error(E)</code>. Generally <code>None</code> serves as a <code>null</code> replacement, showing that the value is missing.</p></li>\n</ul>\n\n<hr>\n\n<p>Now comes the hard part. Application.</p>\n\n<h2>Unwrap</h2>\n\n<p>Sometimes dealing with an <code>Option</code> is a pain in the neck, and you are almost guaranteed to get a value and not an error. </p>\n\n<p>In those cases it's perfectly fine to use <code>unwrap</code>. <code>unwrap</code> turns <code>Some(e)</code> and <code>Ok(e)</code> into <code>e</code>, otherwise it panics. Unwrap is a tool to turn your recoverable errors into unrecoverable.</p>\n\n<pre><code>if x.is_some() {\n    y = x.unwrap(); // perfectly safe, you just checked x is Some\n}\n</code></pre>\n\n<p>Inside the <code>if</code>-block it's perfectly fine to unwrap since it should never panic because we've already checked that it is <code>Some</code> with <code>x.is_some()</code>.</p>\n\n<p>If you're writing a library, using <code>unwrap</code> is discouraged because when it panics the user cannot handle the error. Additionally, a future update may change the invariant. Imagine if the example above had <code>if x.is_some() || always_return_true()</code>. The invariant would changed, and <code>unwrap</code> could panic.</p>\n\n<h2><code>?</code> operator / <code>try!</code> macro</h2>\n\n<p>What's the <code>?</code> operator or the <code>try!</code> macro? A short explanation is that it either returns the value inside an <code>Ok()</code> or prematurely returns error. </p>\n\n<p>Here is a simplified definition of what the operator or macro expand to:</p>\n\n<pre><code>macro_rules! try {\n    ($e:expr) =&gt; (match $e {\n        Ok(val) =&gt; val,\n        Err(err) =&gt; return Err(err),\n    });\n}\n</code></pre>\n\n<p>If you use it like this:</p>\n\n<pre><code>let x = File::create(\"my_file.txt\")?;\n</code></pre>\n\n\n\n<pre><code>let x = try!(File::create(\"my_file.txt\"));\n</code></pre>\n\n<p>It will convert it into this:</p>\n\n<pre><code>let x = match File::create(\"my_file.txt\") {\n    Ok(val)  =&gt; val,\n    Err(err) =&gt; return Err(err),\n};\n</code></pre>\n\n<p>The downside is that your functions now return <code>Result</code>.</p>\n\n<h2>Combinators</h2>\n\n<p><a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noreferrer\"><code>Option</code></a> and <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noreferrer\"><code>Result</code></a> have some convenience methods that allow chaining and dealing with errors in an understandable manner. Methods like <code>and</code>, <code>and_then</code>, <code>or</code>, <code>or_else</code>, <code>ok_or</code>, <code>map_err</code>, etc. </p>\n\n<p>For example, you could have a default value in case your value is botched. </p>\n\n<pre><code>let x: Option&lt;i32&gt; = None;\nlet guaranteed_value = x.or(Some(3)); //it's Some(3)\n</code></pre>\n\n<p>Or if you want to turn your <code>Option</code> into a <code>Result</code>.</p>\n\n<pre><code>let x = Some(\"foo\");\nassert_eq!(x.ok_or(\"No value found\"), Ok(\"foo\"));\n\nlet x: Option&lt;&amp;str&gt; = None;\nassert_eq!(x.ok_or(\"No value found\"), Err(\"No value found\"));\n</code></pre>\n\n<hr>\n\n<p>This is just a brief skim of things you can do. For more explanation, check out:</p>\n\n<ul>\n<li><a href=\"http://blog.burntsushi.net/rust-error-handling/\" rel=\"noreferrer\">http://blog.burntsushi.net/rust-error-handling/</a></li>\n<li><a href=\"https://doc.rust-lang.org/book/ch09-00-error-handling.html\" rel=\"noreferrer\">https://doc.rust-lang.org/book/ch09-00-error-handling.html</a></li>\n<li><a href=\"http://lucumr.pocoo.org/2014/10/16/on-error-handling/\" rel=\"noreferrer\">http://lucumr.pocoo.org/2014/10/16/on-error-handling/</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 18221, "user_id": 1439305, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/gNHmR.jpg?s=128&g=1", "display_name": "Audrius Meskauskas", "link": "https://stackoverflow.com/users/1439305/audrius-meskauskas"}, "is_accepted": false, "score": 1, "last_activity_date": 1609160565, "creation_date": 1609160565, "answer_id": 65478059, "question_id": 30505639, "link": "https://stackoverflow.com/questions/30505639/how-to-do-error-handling-in-rust-and-what-are-the-common-pitfalls/65478059#65478059", "title": "How to do error handling in Rust and what are the common pitfalls?", "body": "<p>If you need to terminate some independent execution unit (a web request, a video frame processing, a GUI event, a source file to compile) but not all your application in completeness, there is a function <a href=\"https://doc.rust-lang.org/std/panic/fn.catch_unwind.html\" rel=\"nofollow noreferrer\">std::panic::catch_unwind</a> that invokes a closure, capturing the cause of an unwinding panic if one occurs.</p>\n<pre><code>let result = panic::catch_unwind(|| {\n    panic!(&quot;oh no!&quot;);\n});\nassert!(result.is_err());\n</code></pre>\n<p>I would not grant this closure write access to any variables that could outlive it, or any other otherwise global state.</p>\n<p>The documentation also says the function also may not be able to catch some kinds of panic.</p>\n"}], "owner": {"reputation": 6606, "user_id": 1586762, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/fb7415aea80a8fa64f7427086eedb6ee?s=128&d=identicon&r=PG", "display_name": "Vitalii Elenhaupt", "link": "https://stackoverflow.com/users/1586762/vitalii-elenhaupt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10847, "favorite_count": 7, "accepted_answer_id": 30505966, "answer_count": 2, "score": 25, "last_activity_date": 1609160565, "creation_date": 1432813389, "last_edit_date": 1432820488, "question_id": 30505639, "link": "https://stackoverflow.com/questions/30505639/how-to-do-error-handling-in-rust-and-what-are-the-common-pitfalls", "title": "How to do error handling in Rust and what are the common pitfalls?", "body": "<p>I noticed that Rust does not have exceptions. How to do error handling in Rust and what are the common pitfalls? Are there ways to control flow with raise, catch, reraise and other stuff? I found inconsistent information on this.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 9, "last_activity_date": 1526156129, "last_edit_date": 1526156129, "creation_date": 1432811493, "answer_id": 30504929, "question_id": 30504815, "link": "https://stackoverflow.com/questions/30504815/type-annotations-needed-cannot-infer-type-when-calling-iteratorcollect/30504929#30504929", "title": "&quot;type annotations needed&quot; / &quot;cannot infer type&quot; when calling Iterator::collect", "body": "<pre><code>fn main() {\n    let test = \"5% of foo\".to_string();\n    let result: i32 = test.split('%').collect::&lt;Vec&lt;_&gt;&gt;()[0].parse().unwrap_or(0);\n}\n</code></pre>\n\n<p><code>collect()</code> can become any type that implements <code>FromIterator</code> so a type hint is required.</p>\n\n<p>Alternatively, you can make it more efficient by utilizing lazy iterators.</p>\n\n<pre><code>fn main() {\n    let test = \"5% of foo\".to_string();\n    let result: i32 = test.split('%').next().unwrap_or(\"0\").parse().unwrap_or(0);\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3454, "favorite_count": 1, "accepted_answer_id": 30504929, "answer_count": 1, "score": 9, "last_activity_date": 1526156129, "creation_date": 1432811164, "last_edit_date": 1526156072, "question_id": 30504815, "link": "https://stackoverflow.com/questions/30504815/type-annotations-needed-cannot-infer-type-when-calling-iteratorcollect", "title": "&quot;type annotations needed&quot; / &quot;cannot infer type&quot; when calling Iterator::collect", "body": "<p>Why does this</p>\n\n<pre><code>fn main() {\n    let test = \"5% of foo\".to_string();\n    let result: i32 = test.split('%').collect()[0].parse().unwrap_or(0);\n}\n</code></pre>\n\n<p>cause an error </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n --&gt; src/main.rs:4:23\n  |\n4 |     let result: i32 = test.split('%').collect()[0].parse().unwrap_or(0);\n  |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for `B`\n</code></pre>\n\n<p>This doesn't help either:</p>\n\n<pre><code>let result: i32 = test.to_string().split('%').collect()[0].parse().unwrap_or(0i32);\n</code></pre>\n"}, {"tags": ["rust", "osdev"], "answers": [{"comments": [{"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1432813363, "post_id": 30505198, "comment_id": 49086599, "body": "Thank you, it&#39;s exactly what I asked for."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 2, "creation_date": 1432814185, "post_id": 30505198, "comment_id": 49087208, "body": "note: please also read <a href=\"http://cglab.ca/~abeinges/blah/rust-unsafe-intro/\" rel=\"nofollow noreferrer\">cglab.ca/~abeinges/blah/rust-unsafe-intro</a> . it mentions that transmuting between types that aren&#39;t <code>#[repr(C)]</code> causes undefined behaviour. So you should also check for that."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 5, "last_activity_date": 1432821346, "last_edit_date": 1432821346, "creation_date": 1432812270, "answer_id": 30505198, "question_id": 30503810, "link": "https://stackoverflow.com/questions/30503810/helper-function-to-safely-read-structure-from-stream/30505198#30505198", "title": "Helper function to safely read structure from stream", "body": "<p>You can use a so-called \"Marker Trait\": a custom unsafe trait with a default impl for all types and a negative trait impl for all references. Since you forbid all uses of <code>unsafe</code>, the user cannot implement the trait on their own, and therefore there cannot be an implementation of the trait for any type that has references.</p>\n\n<p>You should probably also include raw pointers (<code>*mut</code> and <code>*const</code>) in the negative impls... otherwise the user could deserialize a <code>Vec</code> or some other \"safe\" type that has inner unsafety.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(optin_builtin_traits)]\n\nunsafe trait NoInnerRefs {}\n\nimpl&lt;'a, T&gt; !NoInnerRefs for &amp;'a T {}\nunsafe impl NoInnerRefs for .. {}\n\nstruct A(&amp;'static str);\n\nstruct B(i32);\n\nfn test&lt;T: NoInnerRefs&gt;(_: T) {\n}\n\nfn main() {\n    test(B(5));\n    test(A(\"hi\"));\n}\n</code></pre>\n\n<p>This will fail to compile:</p>\n\n<pre><code>&lt;anon&gt;:17:5: 17:9 error: the trait `NoInnerRefs` is not implemented for the type `&amp;'static str` [E0277]\n&lt;anon&gt;:17     test(A(\"hi\"));\n              ^~~~\n</code></pre>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 257, "favorite_count": 0, "accepted_answer_id": 30505198, "answer_count": 1, "score": 3, "last_activity_date": 1432821346, "creation_date": 1432808633, "question_id": 30503810, "link": "https://stackoverflow.com/questions/30503810/helper-function-to-safely-read-structure-from-stream", "title": "Helper function to safely read structure from stream", "body": "<p>Lets say we have an OS of single address space. To maintain stability we need to force memory protection for user applications, e.g. to forbid usage of 'unsafe' keyword unless user has a special capability.</p>\n\n<p>Our users need to have a way to safely read/write arbitrary structures from/to byte streams (e.g. files). Of course we are talking about structures which don't contain references (otherwise we loose memory safety).</p>\n\n<p>Now I tried to implement this kind of generic reader function:</p>\n\n<pre><code>#![feature(core)]\n\nuse std::io;\nuse std::mem;\nuse std::raw;\n\nfn read&lt;T&gt;(reader: &amp;mut io::Read, dest: &amp;mut T) -&gt; io::Result&lt;usize&gt; {\n    let slice = raw::Slice{ data:dest, len:mem::size_of::&lt;T&gt;() };\n    let buf: &amp;mut [u8] = unsafe { mem::transmute(slice) };\n    reader.read(buf)\n}\n</code></pre>\n\n<p>The implementation above has a serious problem. It allows to read structures which contain references. So how can I fix that?  </p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 187800, "user_id": 320615, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/65c80e12b6a33913538653f6d4ef1277?s=128&d=identicon&r=PG", "display_name": "Dogbert", "link": "https://stackoverflow.com/users/320615/dogbert"}, "is_accepted": true, "score": 7, "last_activity_date": 1432804605, "creation_date": 1432804605, "answer_id": 30502230, "question_id": 30502093, "link": "https://stackoverflow.com/questions/30502093/pattern-matching-parse-float-error/30502230#30502230", "title": "pattern matching parse float error", "body": "<p>As you're already pattern matching on <code>Ok()</code>, you don't need to call <code>unwrap()</code>; <code>num</code> is already of type <code>f32</code>.</p>\n\n<p>This compiles fine:</p>\n\n<pre><code>struct Test {\n    amount: f32\n}\n\nfn main() {\n\n    let amnt: String = \"9.95\".to_string();\n    let test = Test {\n        amount: match amnt.parse() {\n            Ok(num) =&gt; num,\n            Err(e) =&gt; 0f32\n        }\n    };\n\n}\n</code></pre>\n\n<p>You can also use <code>Result::unwrap_or()</code> instead:</p>\n\n<pre><code>Test {\n   amount: amnt.parse().unwrap_or(0.0)\n}\n</code></pre>\n"}], "owner": {"reputation": 9698, "user_id": 717839, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d6252a826fac2914aa414e635b77c666?s=128&d=identicon&r=PG", "display_name": "Caballero", "link": "https://stackoverflow.com/users/717839/caballero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 387, "favorite_count": 1, "accepted_answer_id": 30502230, "answer_count": 1, "score": 2, "last_activity_date": 1432804605, "creation_date": 1432804246, "question_id": 30502093, "link": "https://stackoverflow.com/questions/30502093/pattern-matching-parse-float-error", "title": "pattern matching parse float error", "body": "<p>I have this:</p>\n\n<pre><code>struct Test {\n    amount: f32\n}\n\nfn main() {\n\n    let amnt: String = \"9.95\".to_string();\n    let test = Test {\n        amount: match amnt.parse() {\n            Ok(num) =&gt; num.unwrap(),\n            Err(e) =&gt; 0f32\n        }\n    };\n\n}\n</code></pre>\n\n<p>and it's causing an error:</p>\n\n<pre><code>error: the type of this value must be known in this context\n       Ok(num) =&gt; num.unwrap(),\n                  ^~~~~~~~~~~~\n</code></pre>\n\n<p>How do I cast <code>num</code> to fix this error?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1432798840, "post_id": 30500072, "comment_id": 49076580, "body": "Oh yeah, indeed. Thanks."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 10, "last_activity_date": 1433557415, "last_edit_date": 1433557415, "creation_date": 1432798565, "answer_id": 30500072, "question_id": 30499892, "link": "https://stackoverflow.com/questions/30499892/what-is-the-meaning-of-static-as-a-function-constraint/30500072#30500072", "title": "What is the meaning of &#39;static as a function constraint?", "body": "<p>Putting a constraint like <code>T: 'a</code> means that all lifetime parameters of the type <code>T</code> must satisfy the lifetime constraint <code>'a</code> (thus, must outlive it).</p>\n\n<p>For example, if I have this struct:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Kate&lt;'a, 'b&gt; {\n    address: &amp;'a str,\n    lastname: &amp;'b str\n}\n</code></pre>\n\n<p><code>Kate&lt;'a, 'b&gt;</code> will satisfy the constraint <code>F: Human + 'static</code> only if <code>'a == 'static</code> <strong>and</strong> <code>'b == 'static</code>.</p>\n\n<p>However, a struct without any lifetime parameter will always satisfy any lifetime constraint.</p>\n\n<p>So as a summary, a constraint like <code>F: 'static</code> means that either:</p>\n\n<ul>\n<li><code>F</code> has no lifetime parameter</li>\n<li>all lifetime parameters of <code>F</code> are <code>'static</code></li>\n</ul>\n"}], "owner": {"reputation": 229, "user_id": 4255309, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5wow8.jpg?s=128&g=1", "display_name": "jojo", "link": "https://stackoverflow.com/users/4255309/jojo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1031, "favorite_count": 0, "accepted_answer_id": 30500072, "answer_count": 1, "score": 6, "last_activity_date": 1433557415, "creation_date": 1432797988, "last_edit_date": 1432820442, "question_id": 30499892, "link": "https://stackoverflow.com/questions/30499892/what-is-the-meaning-of-static-as-a-function-constraint", "title": "What is the meaning of &#39;static as a function constraint?", "body": "<p>What is the meaning of static in this context?</p>\n\n<p><code>fn foo&lt;F: Human + 'static&gt;(param: F) {}</code></p>\n\n<pre><code>fn main() {\n    let kate = Kate { age: 30 };\n    foo(kate);\n}\n</code></pre>\n\n<p>I understand marking <code>global_variable</code> <code>static</code> is similar to what static means ie. in c#, space for the variable is allocated in a separate segment of the memory, existing for the whole execution of the program.</p>\n\n<pre><code>static global_variable: i32 = 5;\n</code></pre>\n\n<p>But what I don't understand what giving 'static constraint means. Is <code>kate</code> somehow promoted, and her lifetime extended so it now lives for the whole execution of program too?</p>\n\n<p>Or does it simply mean it'll be deallocated as soon as <code>foo</code> stops using it?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "edited": false, "score": 0, "creation_date": 1432797825, "post_id": 30498566, "comment_id": 49075935, "body": "Thanks. Do you have a link to documentation on the <code>for&lt;&gt;</code> syntax? I couldn&#39;t find anything in the book, reference or RFCs."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "edited": false, "score": 0, "creation_date": 1432799053, "post_id": 30498566, "comment_id": 49076705, "body": "@Dale, it is very possible that it is not documented in the book yet, but <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0387-higher-ranked-trait-bounds.md\" rel=\"nofollow noreferrer\">here</a> is an RFC which introduced this syntax. It also explains the rationale behind it. It&#39;s called higher-ranked trait bounds, BTW."}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1432793697, "creation_date": 1432793697, "answer_id": 30498566, "question_id": 30497981, "link": "https://stackoverflow.com/questions/30497981/mutable-borrow-to-function-for-struct-holding-reference-issues/30498566#30498566", "title": "Mutable borrow to function for struct holding reference issues", "body": "<p>The problem is that you have accidentally tied together <code>Global</code>\u2019s generic lifetime parameter with the lifetime of the mutable borrow.</p>\n\n<p>When you require <code>&amp;'a mut Global&lt;'a&gt;</code>, that means that the duration of the mutable borrow of the <code>Global</code> must be as long as the reference in <code>two</code>\u2014thus, the full length of the <code>Global</code>\u2019s existence. You have thus made what is inferred to be a permanent borrow of <code>global</code> when you write <code>&amp;mut global</code>. I\u2019ll write it this way in syntax that isn\u2019t quite valid but gets the point across:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main() {\n    'a: {\n        let number: i32 + 'a = 2;\n        let mut global: Global&lt;'a&gt; = Global {\n            one: 1,\n            two: &amp;'a number,\n        };\n        do_task(&amp;mut global: &amp;'a mut Global&lt;'a&gt;, one);\n        do_task(&amp;mut global: &amp;'a mut Global&lt;'a&gt;, two);\n    }\n}\n</code></pre>\n\n<p>Each <code>&amp;mut global</code> is borrowing <code>global</code> until the end of the <code>'a</code> block, and so the second clashes with the first.</p>\n\n<p>You wish to treat those two lifetimes separately. The function should, rather than using a concrete lifetime, bind a lifetime parameter: this is <code>F: for&lt;'b&gt; Fn(&amp;'b mut Global) -&gt; &amp;'b R</code> read it like this: \u201c<code>F</code> should, given an arbitrary lifetime <code>'b</code>, implement <code>Fn(&amp;'b mut Global) -&gt; &amp;'b R</code>\u201d. The actual functions are then written with the lifetime parameter to <code>Global</code> removed so it can be inferred as another arbitrary lifetime, like so:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn one&lt;'a&gt;(global: &amp;'a mut Global) -&gt; &amp;'a i32 {\n    &amp;global.one\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/mnxt32\" rel=\"noreferrer\">Here\u2019s the final result:</a></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Global&lt;'a&gt; {\n    one: i32,\n    two: &amp;'a i32\n}\n\nfn do_task&lt;F, R&gt;(global: &amp;mut Global, task: F)\nwhere F: for&lt;'a&gt; Fn(&amp;'a mut Global) -&gt; &amp;'a R {\n    let result = task(global);\n}\n\nfn one&lt;'a&gt;(global: &amp;'a mut Global) -&gt; &amp;'a i32 {\n    &amp;global.one\n}\n\nfn two&lt;'a&gt;(global: &amp;'a mut Global) -&gt; &amp;'a i32 {\n    global.two\n}\n\nfn main() {\n    let number = 2;\n    let mut global = Global {\n        one: 1,\n        two: &amp;number\n    };\n    do_task(&amp;mut global, one);\n    do_task(&amp;mut global, two);\n}\n</code></pre>\n"}], "owner": {"reputation": 5257, "user_id": 3572096, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb17b5e90ade6e779c96bb850c7650c1?s=128&d=identicon&r=PG&f=1", "display_name": "Dale", "link": "https://stackoverflow.com/users/3572096/dale"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 251, "favorite_count": 0, "accepted_answer_id": 30498566, "answer_count": 1, "score": 3, "last_activity_date": 1432797944, "creation_date": 1432791269, "last_edit_date": 1432797944, "question_id": 30497981, "link": "https://stackoverflow.com/questions/30497981/mutable-borrow-to-function-for-struct-holding-reference-issues", "title": "Mutable borrow to function for struct holding reference issues", "body": "<p>I am having issues with a struct that I am passing around as a mutable reference. The issue only occurs when the struct is defined to hold a reference.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Global&lt;'a&gt; {\n    one: i32,\n    two: &amp;'a i32\n}\n\nfn do_task&lt;'a, F, R: 'a&gt;(global: &amp;'a mut Global&lt;'a&gt;, task: F)\n    where F: Fn(&amp;'a mut Global&lt;'a&gt;) -&gt; &amp;'a R {\n    let result = task(global);\n}\n\nfn one&lt;'a&gt;(global: &amp;'a mut Global&lt;'a&gt;) -&gt; &amp;'a i32 {\n    &amp;global.one\n}\n\nfn two&lt;'a&gt;(global: &amp;'a mut Global&lt;'a&gt;) -&gt; &amp;'a i32 {\n    global.two\n}\n\nfn main() {\n    let number = 2;\n    let mut global = Global {\n        one: 1,\n        two: &amp;number\n    };\n    do_task(&amp;mut global, one);\n    do_task(&amp;mut global, two);\n}\n</code></pre>\n\n<p>The borrow checker complains with the following:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `global` as mutable more than once at a time\ndo_task(&amp;mut global, two);\n             ^~~~~~\nnote: previous borrow of `global` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `global` until the borrow ends\ndo_task(&amp;mut global, one);\n             ^~~~~~\nnote: previous borrow ends here\nfn main() {\n...\n}\n^\n</code></pre>\n\n<p>But, if I change the code so that the field <code>two</code> is not a reference, like in the following example, then it passes.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Global {\n    one: i32,\n    two: i32,\n}\n\nfn do_task&lt;'a, F, R: 'a&gt;(global: &amp;'a mut Global, task: F)\n    where F: Fn(&amp;'a mut Global) -&gt; &amp;'a R {\n    let result = task(global);\n}\n\nfn one&lt;'a&gt;(global: &amp;'a mut Global) -&gt; &amp;'a i32 {\n    &amp;global.one\n}\n\nfn two&lt;'a&gt;(global: &amp;'a mut Global) -&gt; &amp;'a i32 {\n    &amp;global.two\n}\n\nfn main() {\n    let mut global = Global {\n        one: 1,\n        two: 2\n    };\n    do_task(&amp;mut global, one);\n    do_task(&amp;mut global, two);\n}\n</code></pre>\n\n<p>I tried surrounding the <code>do_task</code> function calls with another scope, but it had no effect.</p>\n\n<p>Why does having the reference extend the mutable borrow to the end of main, and is there any way around this?</p>\n\n<p>I am using <code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)</code></p>\n"}, {"tags": ["windows", "rust", "atom-editor"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1432801483, "post_id": 30496599, "comment_id": 49078196, "body": "You might also be interested in <a href=\"http://rustdt.github.io/\" rel=\"nofollow noreferrer\">RustDT, an eclipse-based rust IDE</a>"}], "answers": [{"comments": [{"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1446559081, "post_id": 30497951, "comment_id": 54785390, "body": "I always get an error <code>Unable to execute with sh: cargo. Make sure &#39;cmd&#39; and &#39;cwd&#39; exists and have correct access permissions.</code>, even when I run it as administrator"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 1, "creation_date": 1446559867, "post_id": 30497951, "comment_id": 54785909, "body": "I&#39;m very sorry, but my post was outdated, I updated it to reflect the improved cargo support. Make sure to delete your <code>.atom-build.json</code> and restart Atom."}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1446565762, "post_id": 30497951, "comment_id": 54790067, "body": "I tried it before (even befor adding .atom-build.json, so particularly this is why i added it, because simple way <code>plug-and-play</code> didn&#39;t work to me), but I always get <code>No tool can provide any build configurations.</code> on step 10"}, {"owner": {"reputation": 8137, "user_id": 2559709, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/RHGiu.jpg?s=128&g=1", "display_name": "Alex Zhukovskiy", "link": "https://stackoverflow.com/users/2559709/alex-zhukovskiy"}, "edited": false, "score": 0, "creation_date": 1446576444, "post_id": 30497951, "comment_id": 54796990, "body": "I&#39;ve got it, <code>build-cargo</code> plugin should be also installed"}, {"owner": {"reputation": 12239, "user_id": 548894, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/887961087d8396bee614fc2b78a957d2?s=128&d=identicon&r=PG", "display_name": "MajesticRa", "link": "https://stackoverflow.com/users/548894/majesticra"}, "edited": false, "score": 0, "creation_date": 1483528813, "post_id": 30497951, "comment_id": 70130560, "body": "There is a way to debug using visual studio code with pretty printers. Maybe something alike may be done in Atom? <a href=\"https://medium.com/@royalstream/rust-development-using-vs-code-on-os-x-debugging-included-bc10c9863777#.ervrbub5x\" rel=\"nofollow noreferrer\">medium.com/@royalstream/&hellip;</a>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 12239, "user_id": 548894, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/887961087d8396bee614fc2b78a957d2?s=128&d=identicon&r=PG", "display_name": "MajesticRa", "link": "https://stackoverflow.com/users/548894/majesticra"}, "edited": false, "score": 0, "creation_date": 1483950033, "post_id": 30497951, "comment_id": 70291899, "body": "@MajesticRa the problem is that noone has written a gdb interface for atom yet ;)"}, {"owner": {"reputation": 12239, "user_id": 548894, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/887961087d8396bee614fc2b78a957d2?s=128&d=identicon&r=PG", "display_name": "MajesticRa", "link": "https://stackoverflow.com/users/548894/majesticra"}, "edited": false, "score": 0, "creation_date": 1483969249, "post_id": 30497951, "comment_id": 70303609, "body": "Ahh... Sorry. I&#39;m not very familiar with Atom ecosystem, but heard it is used for debugging too and therefore was sure a gdb interface exists."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 21, "last_activity_date": 1474291453, "last_edit_date": 1474291453, "creation_date": 1432791128, "answer_id": 30497951, "question_id": 30496599, "link": "https://stackoverflow.com/questions/30496599/how-to-create-build-run-and-debug-a-rust-program-with-the-atom-editor/30497951#30497951", "title": "How to create, build, run and debug a Rust program with the Atom editor?", "body": "<ol>\n<li>Install the <a href=\"https://atom.io/packages/build\" rel=\"noreferrer\"><code>build</code></a> package.</li>\n<li>Install the <a href=\"https://atom.io/packages/build-cargo\" rel=\"noreferrer\"><code>build-cargo</code></a> package</li>\n<li>Press <kbd>WindowsKey</kbd><kbd>R</kbd></li>\n<li>Enter <code>cmd</code> and press <kbd>Return</kbd> or click <code>Ok</code></li>\n<li>type <code>cd C:\\path\\of\\your\\projects\\folder</code> (if it's on another drive, type <code>d:</code> and press <kbd>Return</kbd> before using the <code>cd</code> command)</li>\n<li>type <code>cargo new --bin your_project_name</code> (there must not be a folder with the same name)</li>\n<li>close the command prompt</li>\n<li>go to the new folder in the Windows Explorer</li>\n<li>right-click the folder and select <code>Open with Atom</code></li>\n<li>press <kbd>Ctrl</kbd><kbd>Alt</kbd><kbd>T</kbd> and select \"run\" from the dropdown list</li>\n<li>If you prefer Atom to automatically jump to the first error it encounters, you can change this setting in the <code>build</code> package's settings by activating the checkbox for \"Automatically scroll on build error\"</li>\n<li>If you want inline popups for errors and warnings, install the <a href=\"https://atom.io/packages/linter\" rel=\"noreferrer\"><code>linter</code></a> package.</li>\n</ol>\n\n<p>If someone figures out debugging with Atom, that would be a tremendous help.</p>\n"}], "owner": {"reputation": 19302, "user_id": 154766, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/jItKY.jpg?s=128&g=1", "display_name": "Asik", "link": "https://stackoverflow.com/users/154766/asik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7327, "favorite_count": 8, "accepted_answer_id": 30497951, "answer_count": 1, "score": 19, "last_activity_date": 1474291453, "creation_date": 1432782912, "last_edit_date": 1432820083, "question_id": 30496599, "link": "https://stackoverflow.com/questions/30496599/how-to-create-build-run-and-debug-a-rust-program-with-the-atom-editor", "title": "How to create, build, run and debug a Rust program with the Atom editor?", "body": "<p>I am looking for step-by-step instructions to create, build, run and debug a first Rust application inside the Atom editor. </p>\n\n<p>So far I have installed the Atom editor, installed the package <code>language-rust</code>, and fruitlessly tried to find an option inside the editor to create a Rust \"project\" or \"package\", and my google-fu failed miserably.</p>\n\n<p>Disclaimer: I am on Windows, very familiar with Visual Studio and not familiar with *nix-like development environments, but eager to try Rust.</p>\n"}]