[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 1, "creation_date": 1491414540, "post_id": 43237788, "comment_id": 73546616, "body": "When you actually work out the method call by hand, it looks a bit like <code>let v = &amp;vec![42]; &lt;[_]&gt;::iter(&amp;**v);</code>. The sequence is: Reference to Vec, Vec, Slice, Reference to Slice."}, {"owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "edited": false, "score": 0, "creation_date": 1491414564, "post_id": 43237788, "comment_id": 73546633, "body": "Thanks. Sorry for the newbie stuff; I promise I&#39;m actually very good at C and Python.  And I can&#39;t help but experiment when the textbook gives me an example."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "edited": false, "score": 4, "creation_date": 1491417777, "post_id": 43237788, "comment_id": 73548509, "body": "@ElfSternberg no worries; it&#39;s not really &quot;newbie&quot;. In fact, I&#39;d say that this particular question would require someone who understands what pointers / references are to be able to be confused by it. The main tricky thing here is the ergonomics that Rust provides and knowing what they do under the hood."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1491413073, "last_edit_date": 1495542737, "creation_date": 1491413073, "answer_id": 43237788, "question_id": 43237549, "link": "https://stackoverflow.com/questions/43237549/in-rust-how-can-a-reference-be-a-pointer-to-a-pointer-to-a-pointer/43237788#43237788", "title": "In Rust, how can a reference be a pointer to a pointer-to-a-pointer?", "body": "<p>The rules are not <em>ad-hoc</em> nor really esoteric. Inspect the type of <code>v</code> and it's various dereferences:</p>\n\n<pre><code>fn sum_vec(v: &amp;Vec&lt;i32&gt;) {\n    let () = v;\n}\n</code></pre>\n\n<p>You'll get:</p>\n\n<ol>\n<li><code>v</code> -> <code>&amp;std::vec::Vec&lt;i32&gt;</code></li>\n<li><code>*v</code> -> <code>std::vec::Vec&lt;i32&gt;</code></li>\n<li><code>**v</code> -> <code>[i32]</code></li>\n</ol>\n\n<p>The first dereference you already understand. The second dereference is thanks to the <a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"nofollow noreferrer\"><code>Deref</code></a> trait. <code>Vec&lt;T&gt;</code> dereferences to <code>[T]</code>.</p>\n\n<p>When performing method lookup, <a href=\"https://stackoverflow.com/q/28519997/155423\">there's a straight-forward set of rules</a>:</p>\n\n<ol>\n<li>If the type has the method, use it and exit the lookup.</li>\n<li>If a reference to the type has the method, use it and exit the lookup.</li>\n<li>If the type can be dereferenced, do so, then return to step 1. </li>\n<li>Else the lookup fails.</li>\n</ol>\n\n<blockquote>\n  <p>References in Rust aren't C++ \"names for another place in memory,\" </p>\n</blockquote>\n\n<p>They absolutely are names for a place in memory. In fact, they compile down to the same C / C++ pointer you know.</p>\n"}], "owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 678, "favorite_count": 0, "accepted_answer_id": 43237788, "answer_count": 1, "score": 8, "last_activity_date": 1491459054, "creation_date": 1491412232, "last_edit_date": 1491459054, "question_id": 43237549, "link": "https://stackoverflow.com/questions/43237549/in-rust-how-can-a-reference-be-a-pointer-to-a-pointer-to-a-pointer", "title": "In Rust, how can a reference be a pointer to a pointer-to-a-pointer?", "body": "<p>Today's Rust mystery is from section 4.9 of The Rust Programming Language, First Edition.  The example of references and borrowing has this example:</p>\n\n<pre><code>fn main() {\n    fn sum_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n        return v.iter().fold(0, |a, &amp;b| a + b);\n    }\n\n    fn foo(v1: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n        sum_vec(v1);\n    }\n\n    let v1 = vec![1, 2, 3];\n\n    let answer = foo(&amp;v1);\n    println!(\"{}\", answer);\n}\n</code></pre>\n\n<p>That seems reasonable.  It prints \"6\", which is what you'd expect if the\n<code>v</code> of <code>sum_vec</code> is a C++ reference; it's just a name for a memory\nlocation, the vector <code>v1</code> we defined in <code>main()</code>.</p>\n\n<p>Then I replaced the body of <code>sum_vec</code> with this:</p>\n\n<pre><code>fn sum_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    return (*v).iter().fold(0, |a, &amp;b| a + b);\n}\n</code></pre>\n\n<p>It compiled and worked as expected.  Okay, that's not\u2026 entirely crazy.  The compiler is trying to make my life easier, I get that.  Confusing, something that I have to memorize as a specific tic of the language, but not entirely crazy.  Then I tried:</p>\n\n<pre><code>fn sum_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    return (**v).iter().fold(0, |a, &amp;b| a + b);\n}\n</code></pre>\n\n<p>It still worked!  What the hell?</p>\n\n<pre><code>fn sum_vec(v: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    return (***v).iter().fold(0, |a, &amp;b| a + b);\n}\n</code></pre>\n\n<p><code>type [i32] cannot be dereferenced</code>.  Oh, thank god, something that makes sense.  But I would have expected that almost two iterations earlier!  </p>\n\n<p>References in Rust aren't C++ \"names for another place in memory,\" but what <em>are</em> they?  They're not pointers either, and the rules about them seem to be either esoteric or highly ad-hoc.  What is happening such that a reference, a pointer, and a pointer-to-a-pointer all work equally well here?</p>\n"}, {"tags": ["rust", "pipe", "pipeline", "interpreter"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1491519751, "post_id": 43237389, "comment_id": 73602785, "body": "Perhaps you should look into tokio?"}, {"owner": {"reputation": 17641, "user_id": 16800, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea1de76c4c343fc844135e18da8a80f1?s=128&d=identicon&r=PG", "display_name": "Guvante", "link": "https://stackoverflow.com/users/16800/guvante"}, "edited": false, "score": 0, "creation_date": 1491520299, "post_id": 43237389, "comment_id": 73602964, "body": "The pattern reminds me of the iterator pattern, specifically how C# supports <code>yield return</code> and <code>yield break</code>. Their method involves transforming the function into a state machine but it is one way to avoid using multiple threads."}, {"owner": {"reputation": 2242, "user_id": 402686, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5a66e302c412d4dd757c251ab49e018e?s=128&d=identicon&r=PG", "display_name": "Baju", "link": "https://stackoverflow.com/users/402686/baju"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491556672, "post_id": 43237389, "comment_id": 73616533, "body": "I agree with @Shepmaster . Range in this case is the constuctor of a <a href=\"https://docs.rs/futures/0.1/futures/stream/trait.Stream.html\" rel=\"nofollow noreferrer\"><code>Stream</code></a> and show_pipe has an implicit argument which is a stream too."}, {"owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491574975, "post_id": 43237389, "comment_id": 73629080, "body": "@Shepmaster, will do."}], "owner": {"reputation": 338, "user_id": 5573030, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/91fcac7046f8930290c23c81870e7d4c?s=128&d=identicon&r=PG&f=1", "display_name": "BookOwl", "link": "https://stackoverflow.com/users/5573030/bookowl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 66, "favorite_count": 0, "answer_count": 0, "score": 0, "last_activity_date": 1491519722, "creation_date": 1491411726, "last_edit_date": 1491519722, "question_id": 43237389, "link": "https://stackoverflow.com/questions/43237389/implementing-pipes-without-using-threads", "title": "Implementing pipes without using threads", "body": "<p>I am working on a small language for fun and to try out some ideas. One of the ideas I am trying to implement is piping like in the shell but with arbitrary objects. An example might make this clearer.</p>\n\n<p>The functions <code>range</code> and <code>show_pipe</code> can be defined like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>range(n) =&gt; {\n    x := 0;\n    while x &lt; n do {\n        push x;\n        x := x + 1;\n    }\n}\nshow_pipe() =&gt; {\n    while true do {\n        x := pull;\n        if x = FinishedPipe then {\n            return 0\n        } else {\n            print(x)\n        };\n    }\n}\n</code></pre>\n\n<p><code>push</code> pushes a value into the next part of the pipeline and suspends the function until another value is needed and <code>pull</code> pulls a value from the pipe and returns it or <code>FinishedPipe</code> if the previous part of the pipeline has finished executing.</p>\n\n<p>You can then pipe these two function together with <code>range(10) | show_pipe()</code> which will show the numbers 0 through 9 on console. </p>\n\n<p>I'm implementing this by using a thread for each part of the pipeline and using thread safe queues for passing values from one part of the pipe the other. I would really like to find a way to implement pipes without using threads. I am using Rust so I can't use coroutines.</p>\n"}, {"tags": ["optimization", "rust"], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 1, "last_activity_date": 1491403291, "creation_date": 1491403291, "answer_id": 43234436, "question_id": 43233804, "link": "https://stackoverflow.com/questions/43233804/do-empty-functions-get-optimized-away-in-rust/43234436#43234436", "title": "Do empty functions get optimized away in Rust?", "body": "<p>According to my check with release mode on current stable Rust, the following code:</p>\n\n<pre><code>fn foo() {}\n\n\nfn main() {\n    for _ in 1..1000000000 {\n        foo();\n    }\n\n    println!(); // a side effect so that the whole program is not optimized away\n}\n</code></pre>\n\n<p>Compiles to the same assembly as if the loop was empty:</p>\n\n<pre><code>for _ in 1..1000000000 {}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1491403353, "post_id": 43234445, "comment_id": 73538997, "body": "I was wondering about why the loop itself isn&#39;t removed, thanks for mentioning it; maybe someone can explain this behavior."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1491403923, "post_id": 43234445, "comment_id": 73539497, "body": "This behavior with the loop is really weird (especially the 100 threshold). When using Clang those loops are fully removed, so I would assume LLVM is capable to do it with Rust too, yet I can&#39;t seem to trigger it :x"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1491408467, "post_id": 43234445, "comment_id": 73542813, "body": "@MatthieuM. The loop is optimized away with <code>let mut i = 1_000_000_000; while i &gt; 0 {foo(); i -= 1;}</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1491408665, "post_id": 43234445, "comment_id": 73542963, "body": "@ArtemGr: This smells like a bug :x"}, {"owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "edited": false, "score": 0, "creation_date": 1491422946, "post_id": 43234445, "comment_id": 73551542, "body": "Thanks for your answer! In my example, you could imagine that the loop would have other stuff in it as well (hence the <code>&#47;&#47; ...</code>) so having the loop also removed is less important to me. Good explanation though!"}, {"owner": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 0, "creation_date": 1491423853, "post_id": 43234445, "comment_id": 73552055, "body": "I believe that&#39;s just an issue with Compiler Explorer not doing all optimizations. On my computer, I get exactly the same asm for the example as for <code>fn main() {}</code>."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 1417, "user_id": 2977291, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/66afbccc6043392125ac0f0de57ccfa7?s=128&d=identicon&r=PG&f=1", "display_name": "paholg", "link": "https://stackoverflow.com/users/2977291/paholg"}, "edited": false, "score": 1, "creation_date": 1491427656, "post_id": 43234445, "comment_id": 73554059, "body": "You could pass <code>-C remark=all</code> to see optimization remarks. The loop failed to optimize because &quot;could not determine number of loop iterations&quot; @paholg @MatthieuM"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 1, "creation_date": 1491430133, "post_id": 43234445, "comment_id": 73555028, "body": "Just filed an issue at <a href=\"https://github.com/rust-lang/rust/issues/41097\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/41097</a> about the loop optimization for record."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 7, "last_activity_date": 1491403301, "creation_date": 1491403301, "answer_id": 43234445, "question_id": 43233804, "link": "https://stackoverflow.com/questions/43233804/do-empty-functions-get-optimized-away-in-rust/43234445#43234445", "title": "Do empty functions get optimized away in Rust?", "body": "<p>Just try it in the amazing <a href=\"https://godbolt.org/g/9oHgry\" rel=\"noreferrer\"><em>Compiler Explorer</em></a> :)</p>\n\n<p>The result assembly for your example is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>example::main:\n    push    rbp\n    mov     rbp, rsp\n    mov     eax, 1\n.LBB0_1:\n    xor     ecx, ecx\n    cmp     eax, 1000000000\n    setl    cl\n    add     ecx, eax\n    cmp     eax, 1000000000\n    mov     eax, ecx\n    jl      .LBB0_1\n    pop     rbp\n    ret\n</code></pre>\n\n<p>As you can see there is no <code>call</code> instruction and <code>foo()</code> isn't called at all. However, you might wonder why the loop isn't removed, as it doesn't have an effect on the outside world. I can just assume that sometimes those loops are in fact used to waste time in some sense. If you decrease the counter to <code>100</code>, the loop is completely removed. </p>\n\n<p>Anyway: <strong>Yes</strong>, the optimizer will remove empty functions!</p>\n"}], "owner": {"reputation": 4414, "user_id": 551904, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/3c0a0f47f94565025a9aa388e8bd8681?s=128&d=identicon&r=PG", "display_name": "Sunjay Varma", "link": "https://stackoverflow.com/users/551904/sunjay-varma"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 682, "favorite_count": 0, "accepted_answer_id": 43234445, "answer_count": 2, "score": 4, "last_activity_date": 1491404948, "creation_date": 1491401723, "last_edit_date": 1491404948, "question_id": 43233804, "link": "https://stackoverflow.com/questions/43233804/do-empty-functions-get-optimized-away-in-rust", "title": "Do empty functions get optimized away in Rust?", "body": "<p>I want to put some performance impacting function calls behind a feature gate in my code. If the feature isn't enabled, I was thinking of just having an empty implementation of that function implemented instead. That way, hopefully, the Rust complier can completely remove that from the function. </p>\n\n<p>Something like this:</p>\n\n<pre><code>// Included if feature is enabled\nfn foo() {\n    // ...\n}\n\n// Included if the feature is disabled\nfn foo() {}\n\n// Performance critical code\nfor i in 1..1000000000 {\n    // ...\n    foo();\n}\n</code></pre>\n\n<p>Would the call to foo() get optimized away if it is empty?</p>\n"}, {"tags": ["rust", "byte", "endianness"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1491398427, "post_id": 43230917, "comment_id": 73534770, "body": "Please review how to create a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>. For example, showing us the input values and the desired output values would go a <b>long way</b>."}], "answers": [{"comments": [{"owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "edited": false, "score": 1, "creation_date": 1491395604, "post_id": 43231185, "comment_id": 73532463, "body": "Unfortunately this is not what I am looking for but thank you for your help though :) I really want to fetch 7 bits from a simple byte (u8) and decode it as a signed integer."}, {"owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "edited": false, "score": 0, "creation_date": 1491396307, "post_id": 43231185, "comment_id": 73533022, "body": "Oh yeah I guess I forgot to mention something. The byte I want to manipulate has two different informations in it. 1 bit for a first information and the 7 other bits are for another information. So yes your solution would work if the whole byte contained only one information."}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "edited": false, "score": 0, "creation_date": 1491397397, "post_id": 43231185, "comment_id": 73533883, "body": "@craigzour how about now? This way should discard the information contained in the most significant bit."}, {"owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "edited": false, "score": 0, "creation_date": 1491398022, "post_id": 43231185, "comment_id": 73534414, "body": "I tested it even though I knew it was not going to work (and it is not). The way a signed integer is expressed at a byte level makes it impossible to decode using your solution. I think I just found a library which should help me: <a href=\"https://crates.io/crates/bitreader\" rel=\"nofollow noreferrer\">crates.io/crates/bitreader</a>"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 3, "last_activity_date": 1491397358, "last_edit_date": 1491397358, "creation_date": 1491395209, "answer_id": 43231185, "question_id": 43230917, "link": "https://stackoverflow.com/questions/43230917/extract-7-bits-signed-integer-from-u8-byte/43231185#43231185", "title": "Extract 7 bits signed integer from u8 byte", "body": "<p>If you want to turn an array of <code>u8</code> into a vector of <code>i8</code> while ignoring the most significant bit, you can do it in the following manner:</p>\n\n<pre><code>fn main() {\n    let array_unsigned = [1u8, 2, 3]; // this will work for 64 values too\n    let vec_signed: Vec&lt;i8&gt; = array_unsigned.into_iter()\n        .map(|&amp;e| if e &lt;= 127 { e as i8 } else { (e - 128) as i8 }).collect();\n\n    println!(\"{:?}\", vec_signed);\n}\n</code></pre>\n\n<p>This way consumes the input array. It could probably be done in a nicer way with some bit-fiddling.</p>\n"}, {"comments": [{"owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "edited": false, "score": 0, "creation_date": 1491398974, "post_id": 43232439, "comment_id": 73535227, "body": "Not working. I have been able to make it work with the following library <a href=\"https://crates.io/crates/bitreader\" rel=\"nofollow noreferrer\">crates.io/crates/bitreader</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1491431086, "last_edit_date": 1491431086, "creation_date": 1491398350, "answer_id": 43232439, "question_id": 43230917, "link": "https://stackoverflow.com/questions/43230917/extract-7-bits-signed-integer-from-u8-byte/43232439#43232439", "title": "Extract 7 bits signed integer from u8 byte", "body": "<p>Your question is pretty unclear, but I think you are just asking about normal bit manipulation. Mask the 7 bits (assuming the <em>lower</em> 7 bits, although you did not say) and convert the remaining bits to a signed number:</p>\n\n<pre><code>fn main() {\n    let byte = 0xFFu8;\n    let byte2 = (byte &amp; 0b0111_1111) as i8;\n    println!(\"{}\", byte2);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "is_accepted": true, "score": 2, "last_activity_date": 1491403486, "last_edit_date": 1491403486, "creation_date": 1491399314, "answer_id": 43232804, "question_id": 43230917, "link": "https://stackoverflow.com/questions/43230917/extract-7-bits-signed-integer-from-u8-byte/43232804#43232804", "title": "Extract 7 bits signed integer from u8 byte", "body": "<p>Using <a href=\"https://crates.io/crates/bitreader\" rel=\"nofollow noreferrer\">the crate <code>bitreader</code></a> I have been able to properly decode the signed integer of 7 bits.</p>\n\n<pre><code>let mut bit_reader = BitReader::new(buffer);\nlet first_useless_bit: u8 = bit_reader.read_u8(1).unwrap();\nlet extracted_value: i8 = bit_reader.read_i8(7).unwrap();\n</code></pre>\n"}], "owner": {"reputation": 83, "user_id": 4266413, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a708b192bc55b12d87dda7cb71412438?s=128&d=identicon&r=PG&f=1", "display_name": "craigzour", "link": "https://stackoverflow.com/users/4266413/craigzour"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1372, "favorite_count": 0, "accepted_answer_id": 43232804, "answer_count": 3, "score": -4, "last_activity_date": 1491431086, "creation_date": 1491394539, "last_edit_date": 1491398239, "question_id": 43230917, "link": "https://stackoverflow.com/questions/43230917/extract-7-bits-signed-integer-from-u8-byte", "title": "Extract 7 bits signed integer from u8 byte", "body": "<p>I am using the Human Interface Device protocol to get data from an external device. The library I'm using returns an array of bytes (<code>[u8; 64]</code>) which I want to extract an <code>i7</code> (which will be <code>i8</code> in Rust) from one byte. </p>\n\n<p>The byte I want to manipulate has two different pieces of information in it:</p>\n\n<ul>\n<li>1 bit for something</li>\n<li>the 7 other bits (which I have to decode as a signed integer) for another thing.</li>\n</ul>\n\n<p>Do you know what can I do to achieve this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1491385151, "post_id": 43227245, "comment_id": 73524623, "body": "It is possible, using unsafe code. However, when both boxes get dropped you will have a double free. Is that your intended use case? Our are you looking for reference counted pointers?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1491385206, "post_id": 43227245, "comment_id": 73524672, "body": "@aochagavia: Before that, you get aliasing violations... which completely upend Rust&#39;s safety."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1491385298, "post_id": 43227245, "comment_id": 73524748, "body": "Yay, every day I discover new beauties around UB"}, {"owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1491388478, "post_id": 43227245, "comment_id": 73527095, "body": "@aochagavia the last one~ I know it is not safe now. I&#39;ll use <code>Rc</code> and <code>Refcell</code> instead. Thank you!"}], "answers": [{"comments": [{"owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "edited": false, "score": 0, "creation_date": 1491388567, "post_id": 43227419, "comment_id": 73527163, "body": "I&#39;ll use <code>Rc</code> and <code>RefCell</code> instead of <code>Box</code> now. Thank you~"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 12, "last_activity_date": 1491385164, "creation_date": 1491385164, "answer_id": 43227419, "question_id": 43227245, "link": "https://stackoverflow.com/questions/43227245/is-there-any-way-to-make-more-than-one-box-pointing-to-the-same-heap-memory/43227419#43227419", "title": "Is there any way to make more than one `Box` pointing to the same heap memory?", "body": "<p>By definition, <strong>you shall not</strong>.</p>\n\n<p><code>Box</code> is explicitly created with the assumption that it is the sole owner of the object inside.</p>\n\n<hr>\n\n<p>When multiple owners are required, you can use instead <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noreferrer\"><code>Rc</code></a> and <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noreferrer\"><code>Arc</code></a>, those are reference-counted owners and the object will only be dropped when the last owner is destroyed.</p>\n\n<p>Note, however, that they are not without downsides:</p>\n\n<ul>\n<li>the contained object cannot be mutated without runtime checks; if mutation is needed this requires using <code>Cell</code>, <code>RefCell</code> or some <code>Mutex</code> for example,</li>\n<li>it is possible to accidentally form cycles of objects, and since Rust has no Garbage Collector such cycles will be leaked.</li>\n</ul>\n"}], "owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 326, "favorite_count": 0, "accepted_answer_id": 43227419, "answer_count": 1, "score": 4, "last_activity_date": 1491385164, "creation_date": 1491384742, "question_id": 43227245, "link": "https://stackoverflow.com/questions/43227245/is-there-any-way-to-make-more-than-one-box-pointing-to-the-same-heap-memory", "title": "Is there any way to make more than one `Box` pointing to the same heap memory?", "body": "<p>It seems like <code>Box.clone()</code> copies the heap memory. As I know, <code>Box</code> will get destructed after it gets out of its scope, as well as the memory area it is pointing to.</p>\n\n<p>So I'd like to ask a way to create more than one <code>Box</code> object pointing to the same memory area. </p>\n"}, {"tags": ["callback", "rust", "closures"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1491383550, "post_id": 43225547, "comment_id": 73523461, "body": "Have you read the <a href=\"https://doc.rust-lang.org/book/ownership.html\" rel=\"nofollow noreferrer\">book chapter on Ownership</a>? It seems to me you are coming from a higher-level language background where every object is passed around by reference; this is not the case in Rust."}, {"owner": {"reputation": 1947, "user_id": 6022937, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Wm7nH.png?s=128&g=1", "display_name": "Nestor Sokil", "link": "https://stackoverflow.com/users/6022937/nestor-sokil"}, "edited": false, "score": 0, "creation_date": 1491387189, "post_id": 43225547, "comment_id": 73537082, "body": "What is the point of this callback being a method of your struct? You can move it out of the <code>impl</code> and use it as a standalone function. Otherwise you will have to <code>move</code> values into the closure, because the compiler has to be sure that no dangling pointer will ever show up at runtime."}, {"owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1491388262, "post_id": 43225547, "comment_id": 73526948, "body": "Yes, you are right. I came from python."}, {"owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1491388702, "post_id": 43225547, "comment_id": 73527272, "body": "And I read the chapter. I mostly ask question not about &quot;what compiler says&quot;, &quot;what is this errors means&quot;, that I understand. I ask about &quot;how to do it in Rust&quot;."}, {"owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "edited": false, "score": 0, "creation_date": 1491388710, "post_id": 43225547, "comment_id": 73537083, "body": "My point is that I want to pass additional data in callback, not only siv and value. May be there is another solution?"}], "answers": [{"comments": [{"owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "edited": false, "score": 1, "creation_date": 1491398191, "post_id": 43229622, "comment_id": 73534563, "body": "But to push event to the event manager I need to access to that manager in the callback, that I pass to set_on_submit. Is that right? If so - will I encounter the same problem?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "edited": false, "score": 1, "creation_date": 1491403705, "post_id": 43229622, "comment_id": 73539299, "body": "@sinitsynsv: Indeed, you need access to the manager, or a queue to it (like a <a href=\"https://doc.rust-lang.org/std/sync/mpsc/\" rel=\"nofollow noreferrer\">MPSC queue</a>). Still, this simplifies things somewhat is that before you had a full graph of interdependent objects, now you only have the manager owning the objects, and the objects referencing (weakly) the manager. So instead of a potential full NxN interactions, you only have 2xN. When N increases, this helps a lot."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1491391007, "creation_date": 1491391007, "answer_id": 43229622, "question_id": 43225547, "link": "https://stackoverflow.com/questions/43225547/set-struct-method-as-callback/43229622#43229622", "title": "Set struct method as callback", "body": "<p>Rust is not very callback-friendly, to be honest.</p>\n\n<p>Callbacks are easy in garbage-collected languages, as sharing an object is an issue, but tend to be more difficult in languages where ownership is explicit. In this case, you have two possibilities:</p>\n\n<ul>\n<li>event managers,</li>\n<li>plowing on with shared ownership.</li>\n</ul>\n\n<p>The latter is easy enough for small applications, but can become really messy (and leaky) at a larger scale. Still, let's start by it.</p>\n\n<hr>\n\n<p>The most direct translation of Python would be to use shared ownership: a reference counted pointer <code>Rc</code>, wrapping some <code>Cell</code> or <code>RefCell</code> (to defer borrow-checking to run-time).</p>\n\n<pre><code>fn new(siv: Cursive) -&gt; Rc&lt;RefCell&lt;SomeStruct&gt;&gt; {\n    let mut ss = Rc::new(RefCell::new(SomeStruct {\n        siv: siv\n    }));\n\n    let mut select: SelectView&lt;i32&gt; =\n        Rc::new(RefCell::new(SelectView::new()));\n\n    {\n        let weak = ss.clone().downgrade();\n        select.borrow_mut().set_on_submit(|siv, value|\n            weak.upgrade()\n                .map(|ss| ss.borrow_mut().on_submit_callback(siv, value))\n        );\n    }\n\n    ss.borrow_mut().siv.add_fullscreen_layer(\n        BoxView::with_full_screen(IdView::new(\"select\", select))\n    );\n\n    ss\n}\n</code></pre>\n\n<p>So, let's get our ownership story straight:</p>\n\n<ul>\n<li><code>ss</code> owns (partly) <code>select</code>,</li>\n<li><code>select</code> has a weak reference to <code>ss</code>.</li>\n</ul>\n\n<p>The weak reference is necessary to break the cycle, as this would leak.</p>\n\n<p>This solution should work, but as mentioned:</p>\n\n<ul>\n<li>it's a bit clunky syntax-wise,</li>\n<li>it's a bit complicated to keep track of where to use <code>Weak</code> to break the cycles,</li>\n<li>if you try borrowing twice from <code>RefCell</code> at the same time, one borrow being mutable, you'll get a <code>panic</code>.</li>\n</ul>\n\n<p>In short: it works, but it's not <em>nice</em>.</p>\n\n<hr>\n\n<p>The other solution is to use a event manager instead.</p>\n\n<p>Event loops are an easy solution to decouple ownership: instead of directly calling <code>on_submit_callback</code> in the callback, push an event to the event manager!</p>\n\n<p>The solution is a bit more involved:</p>\n\n<ul>\n<li>you need something to own <code>SomeStruct</code> (and probably other),</li>\n<li>an ID system (you pass an ID instead of a pointer),</li>\n<li>an event manager that can retrieve a component by ID to dispatch an event to it,</li>\n<li>...</li>\n</ul>\n\n<p>On the other hand, it works pretty well and a decoupled system can be easier to interact with.</p>\n"}], "owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 617, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1491391007, "creation_date": 1491380104, "last_edit_date": 1491383326, "question_id": 43225547, "link": "https://stackoverflow.com/questions/43225547/set-struct-method-as-callback", "title": "Set struct method as callback", "body": "<p>I have some struct and want a method of this struct to be a callback. I tried to set the callback as a closure and call the method in it, but this does not work.</p>\n\n<p>Here is example of what I want. In this example I use the <a href=\"https://github.com/gyscos/Cursive/\" rel=\"nofollow noreferrer\">Cursive</a> library:</p>\n\n<pre><code>extern crate cursive;\n\nuse cursive::Cursive;\nuse cursive::views::{BoxView, SelectView, IdView};\nuse cursive::view::Selector;\n\n\nstruct SomeStruct {\n    siv: Cursive,\n}\n\nimpl SomeStruct {\n    fn new(siv: Cursive) -&gt; SomeStruct {\n        let mut ss = SomeStruct {\n            siv: siv\n        };\n        let mut select: SelectView&lt;i32&gt; = SelectView::new();\n        select.set_on_submit(|siv, value| ss.on_submit_callback(siv, value));\n        ss.siv.add_fullscreen_layer(BoxView::with_full_screen(IdView::new(\"select\", select)));\n        ss\n    }\n\n    fn on_submit_callback(&amp;mut self, siv: &amp;mut Cursive, value: &amp;i32) {\n        println!(\"value - {}\", value);\n    }\n}\n\nfn main() {\n    let siv = Cursive::new();\n    let mut ss = SomeStruct::new(siv);\n}\n</code></pre>\n\n<p>There are compiler errors:</p>\n\n<pre><code>error[E0373]: closure may outlive the current function, but it borrows `ss`, which is owned by the current function\n  --&gt; src/main.rs:20:34\n   |\n20 |             select.set_on_submit(|siv, value| ss.on_submit_callback(siv, value));\n   |                                  ^^^^^^^^^^^^ -- `ss` is borrowed here\n   |                                  |\n   |                                  may outlive borrowed value `ss`\n   |\nhelp: to force the closure to take ownership of `ss` (and any other referenced variables), use the `move` keyword, as shown:\n   |             select.set_on_submit(move |siv, value| ss.on_submit_callback(siv, value));\n\nerror[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n  --&gt; src/main.rs:20:47\n   |\n20 |             select.set_on_submit(|siv, value| ss.on_submit_callback(siv, value));\n   |                                               ^^\n   |\nhelp: consider changing this closure to take self by mutable reference\n  --&gt; src/main.rs:20:34\n   |\n20 |             select.set_on_submit(|siv, value| ss.on_submit_callback(siv, value));\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to 2 previous errors\n</code></pre>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1491380388, "post_id": 43225020, "comment_id": 73521262, "body": "Another note on style: rather omit the explicit type annotation for your hashmap. The compiler is usually perfectly able to figure out the type ;-) Also: instead of using <code>iter_mut()</code> (and <code>iter()</code>) in a for loop directly, usually we write <code>for ... in &amp;mut map { ... }</code>. :)"}, {"owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491380789, "post_id": 43225020, "comment_id": 73521532, "body": "Thank you for your advice! The second is useful. But at first I wrote <code>let mut map: BTreeMap = BTreeMap::new();</code>, but it turned out an error: <code>error[E0243]: wrong number of type arguments: expected 2, found 0</code>. So I changed to write the type name... Could you tell me the right way to use it?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491382916, "post_id": 43225020, "comment_id": 73523041, "body": "Just write <code>let mut map = BTreeMap::new()</code> ;-)"}, {"owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491384426, "post_id": 43225020, "comment_id": 73524067, "body": "Got it~ Thank you for your patience with a novice like me~ :)"}], "answers": [{"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 1, "last_activity_date": 1491379182, "creation_date": 1491379182, "answer_id": 43225252, "question_id": 43225020, "link": "https://stackoverflow.com/questions/43225020/how-to-change-value-in-a-btreemap-container/43225252#43225252", "title": "How to change value in a BTreeMap container", "body": "<p>Since <code>value</code> is a mutable reference (due to <code>iter_mut()</code>), just dereference it:</p>\n\n<pre><code>*value = Some(Box::new(Haha{data: 5}));\n</code></pre>\n\n<p>And it will work nicely.</p>\n"}], "owner": {"reputation": 699, "user_id": 7093297, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/Pi7EY.jpg?s=128&g=1", "display_name": "wind2412", "link": "https://stackoverflow.com/users/7093297/wind2412"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 539, "favorite_count": 0, "accepted_answer_id": 43225252, "answer_count": 1, "score": 0, "last_activity_date": 1491380097, "creation_date": 1491378525, "last_edit_date": 1491380097, "question_id": 43225020, "link": "https://stackoverflow.com/questions/43225020/how-to-change-value-in-a-btreemap-container", "title": "How to change value in a BTreeMap container", "body": "<p>Code:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Haha {\n    data: i32,\n}\n\nuse std::collections::BTreeMap;\n\nfn main() {\n    let mut map: BTreeMap&lt;i8, Option&lt;Box&lt;Haha&gt;&gt;&gt; = BTreeMap::new();\n    map.insert(1, Some(Box::new(Haha { data: 3 })));\n    map.insert(2, None);\n\n    for (key, value) in map.iter_mut() {\n        if value.is_none() {        // if find `None`, change it to a `Some(Haha)`\n            value = Some(Box::new(Haha { data: 5 }));\n        }\n    }\n}\n</code></pre>\n\n<p>I want to make a function that when I get the value <code>None</code> in <code>BTreeMap.value</code>, I change it to <code>Some</code> value, not a reference. But it comes out a mistake:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> error[E0308]: mismatched types\n  --&gt; Untitled.rs:15:12\n   |\n15 |            value = Some(Box::new(Haha{data: 5}));\n   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected mutable reference, found enum `std::option::Option`\n   |\n   = note: expected type `&amp;mut std::option::Option&lt;std::boxed::Box&lt;Haha&gt;&gt;`\n              found type `std::option::Option&lt;std::boxed::Box&lt;Haha&gt;&gt;`\n   = help: here are some functions which might fulfill your needs:\n           - .unwrap()\n</code></pre>\n\n<p>Because using <code>map.iter_mut()</code> I can only get the reference. How to send the true value <code>Some(Haha)</code> but not a reference to the mut reference <code>value</code>? If I change to <code>value = &amp; mut Some(Box::new(Haha { data: 5 }));</code> Because <code>Some(Box...)</code> will be destructed, so it will come out another mistake. </p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 575, "user_id": 550324, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5450829d6fe4fdd97aa2f73fd6ae7b74?s=128&d=identicon&r=PG", "display_name": "Chao Sun", "link": "https://stackoverflow.com/users/550324/chao-sun"}, "edited": false, "score": 0, "creation_date": 1491377539, "post_id": 43223780, "comment_id": 73519433, "body": "Thanks. I think the confusion I had was that <code>self.pool</code> has lifetime of <code>self</code> instead of <code>pool</code>, with <code>pool</code> being mutable. This is not intuitive as there&#39;s a lifetime annotation <code>&#39;a</code> attached to <code>pool. To fix the code, do you have other suggestion rather than adding a </code>&#39;b` for <code>self</code>? This doesn&#39;t work for my original code as struct <code>S</code> is expected to live shorter than <code>&#39;a</code>."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 575, "user_id": 550324, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5450829d6fe4fdd97aa2f73fd6ae7b74?s=128&d=identicon&r=PG", "display_name": "Chao Sun", "link": "https://stackoverflow.com/users/550324/chao-sun"}, "edited": false, "score": 0, "creation_date": 1491379046, "post_id": 43223780, "comment_id": 73520363, "body": "@ChaoSun that&#39;s not possible. The <code>MemoryPool</code> can&#39;t return a reference that lives longer than itself and similarly, <code>S</code> can&#39;t return something that references something that lives longer than itself, and <code>S::pool</code> lives exactly as long as <code>S</code>. I&#39;m not quite sure what you&#39;re trying to achieve."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 0, "last_activity_date": 1491374856, "creation_date": 1491374856, "answer_id": 43223780, "question_id": 43223497, "link": "https://stackoverflow.com/questions/43223497/questions-about-rust-lifetime/43223780#43223780", "title": "Questions about Rust lifetime", "body": "<p>Let's tackle this step by step:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cannot infer an appropriate lifetime for autoref\n</code></pre>\n\n<p>\"autoref\" describes the process of building the right reference for the <code>self</code> argument of a method. The compiler is unable to find a reference with the right lifetime to call <code>consume()</code>. Why is it unable? </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 32:54...\n  --&gt; &lt;anon&gt;:32:55\n   |\n32 |     pub fn write(&amp;mut self, buffer: &amp;mut ByteArray&lt;'a&gt;) {\n   |  _______________________________________________________^ starting here...\n33 | |     let v = vec!();\n34 | |     let data = self.pool.consume(v);\n35 | |     buffer.set_data(data);\n36 | |   }\n   | |___^ ...ending here\nnote: ...so that reference does not outlive borrowed content\n  --&gt; &lt;anon&gt;:34:16\n   |\n34 |     let data = self.pool.consume(v);\n   |                ^^^^^^^^^\n</code></pre>\n\n<p>The \"anonymous lifetime #1\" refers to the lifetime of <code>&amp;mut self</code>. This note is just saying: we can't pass a reference with a lifetime greater than the lifetime of <code>self</code> into <code>consume()</code>: then <code>consume()</code> would think that its <code>self</code> argument lives longer than it actually does.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>note: but, the lifetime must be valid for the lifetime 'a\n</code></pre>\n\n<p>This is the rule you already expected to be applied. But where is the problem now? Well: the lifetime of <code>&amp;mut self</code> (anonymous lifetime #1) could life <em>shorter</em> than <code>'a</code>! That's all! And we can fix it quite easily:</p>\n\n<pre><code>impl&lt;'a&gt; S&lt;'a&gt; {\n    pub fn write&lt;'b: 'a&gt;(&amp;'b mut self, buffer: &amp;mut ByteArray&lt;'a&gt;) {\n        //      ^^^^^^^^  ^^\n        ...\n    }\n}\n</code></pre>\n\n<p>Here we just name the previously anonymous lifetime #1 to be able to bound it, saying that it has to <em>outlive</em> <code>'a</code> (live longer than <code>'a</code>).</p>\n"}], "owner": {"reputation": 575, "user_id": 550324, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/5450829d6fe4fdd97aa2f73fd6ae7b74?s=128&d=identicon&r=PG", "display_name": "Chao Sun", "link": "https://stackoverflow.com/users/550324/chao-sun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 198, "favorite_count": 0, "accepted_answer_id": 43223780, "answer_count": 1, "score": 0, "last_activity_date": 1491374856, "creation_date": 1491373947, "last_edit_date": 1491374362, "question_id": 43223497, "link": "https://stackoverflow.com/questions/43223497/questions-about-rust-lifetime", "title": "Questions about Rust lifetime", "body": "<p>I'm trying to implement a memory pool based on <code>TypedArena</code>. Here's a simplified version of my original code:</p>\n\n<pre><code>#![feature(rustc_private)]\nextern crate arena;\nuse arena::TypedArena;\n\npub struct MemoryPool {\n    arena: TypedArena&lt;Vec&lt;u8&gt;&gt;,\n    bytes_allocated: usize,\n}\n\nimpl MemoryPool {\n    pub fn consume(&amp;mut self, buf: Vec&lt;u8&gt;) -&gt; &amp;[u8] {\n        self.bytes_allocated += buf.capacity();\n        self.arena.alloc(buf)\n    }\n}\n\npub struct ByteArray&lt;'a&gt; {\n    data: &amp;'a [u8],\n}\n\nimpl&lt;'a&gt; ByteArray&lt;'a&gt; {\n    pub fn set_data(&amp;mut self, data: &amp;'a [u8]) {\n        self.data = data;\n    }\n}\n\npub struct S&lt;'a&gt; {\n    pool: &amp;'a mut MemoryPool,\n}\n\nimpl&lt;'a&gt; S&lt;'a&gt; {\n    pub fn write(&amp;mut self, buffer: &amp;mut ByteArray&lt;'a&gt;) {\n        let v = vec!();\n        let data = self.pool.consume(v);\n        buffer.set_data(data);\n    }\n}\n</code></pre>\n\n<p>However, the compiler complains about the line: <code>let data = self.pool.consume(v);</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n  --&gt; &lt;anon&gt;:34:26\n   |\n34 |     let data = self.pool.consume(v);\n   |                          ^^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 32:54...\n  --&gt; &lt;anon&gt;:32:55\n   |\n32 |     pub fn write(&amp;mut self, buffer: &amp;mut ByteArray&lt;'a&gt;) {\n   |  _______________________________________________________^ starting here...\n33 | |     let v = vec!();\n34 | |     let data = self.pool.consume(v);\n35 | |     buffer.set_data(data);\n36 | |   }\n   | |___^ ...ending here\nnote: ...so that reference does not outlive borrowed content\n  --&gt; &lt;anon&gt;:34:16\n   |\n34 |     let data = self.pool.consume(v);\n   |                ^^^^^^^^^\nnote: but, the lifetime must be valid for the lifetime 'a as defined on the body at 32:54...\n  --&gt; &lt;anon&gt;:32:55\n   |\n32 |     pub fn write(&amp;mut self, buffer: &amp;mut ByteArray&lt;'a&gt;) {\n   |  _______________________________________________________^ starting here...\n33 | |     let v = vec!();\n34 | |     let data = self.pool.consume(v);\n35 | |     buffer.set_data(data);\n36 | |   }\n   | |___^ ...ending here\nnote: ...so that types are compatible (expected &amp;mut ByteArray&lt;'_&gt;, found &amp;mut ByteArray&lt;'a&gt;)\n  --&gt; &lt;anon&gt;:35:12\n   |\n35 |     buffer.set_data(data);\n   |            ^^^^^^^^\n</code></pre>\n\n<p>My question is:</p>\n\n<ol>\n<li><p><strong>Why <code>data</code> does not have lifetime <code>'a</code></strong>? I'm thinking that since <code>pool</code> has lifetime <code>a</code> and <code>consume</code> returns the same lifetime as <code>self</code>, it should have lifetime <code>'a</code>.</p></li>\n<li><p><strong>What's the best way to make this code work as intended?</strong> Basically I want to allocate new bytes and adjust their lifetime to be the same as the memory pool. I know I can use <code>TypedArena</code> directly since <code>alloc</code> does not take a <code>mut</code> reference. However I really want to track other information such as <code>bytes_allocated</code>.</p></li>\n</ol>\n"}, {"tags": ["http", "get", "rust"], "comments": [{"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1491372198, "post_id": 43222429, "comment_id": 73516330, "body": "Have you tried googling for http crates? For example, <a href=\"https://github.com/alexcrichton/curl-rust\" rel=\"nofollow noreferrer\">this might work for you</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1491379466, "post_id": 43222429, "comment_id": 73520642, "body": "This kind of question is off-topic on Stack Overflow, so it likely will be closed. If you haven&#39;t found your answer by then, I invite you to check the Rust tag wiki <a href=\"http://stackoverflow.com/tags/rust/info\">Getting Help</a> section which details other venues for open-ended questions."}], "answers": [{"comments": [{"owner": {"reputation": 5276, "user_id": 1060159, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/d7890a5cb5605356754da0bc842a4426?s=128&d=identicon&r=PG", "display_name": "marmistrz", "link": "https://stackoverflow.com/users/1060159/marmistrz"}, "edited": false, "score": 8, "creation_date": 1503846037, "post_id": 43223270, "comment_id": 78770960, "body": "This no longer works, since <code>hyper::Client::new</code> takes some handle argument."}], "tags": [], "owner": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "is_accepted": true, "score": 12, "last_activity_date": 1520673525, "last_edit_date": 1520673525, "creation_date": 1491373175, "answer_id": 43223270, "question_id": 43222429, "link": "https://stackoverflow.com/questions/43222429/how-do-you-make-a-get-request-in-rust/43223270#43223270", "title": "How do you make a GET request in Rust?", "body": "<p>Take a look at <a href=\"https://github.com/hyperium/hyper\" rel=\"noreferrer\">Hyper</a>.</p>\n\n<p>Sending a GET request is as simple as this.</p>\n\n<pre><code>let client = Client::new();\n\nlet res = client.get(\"http://example.domain\").send().unwrap();\nassert_eq!(res.status, hyper::Ok);\n</code></pre>\n\n<p>You can find more examples in the <a href=\"https://hyper.rs/hyper/v0.10.5/hyper/client/index.html\" rel=\"noreferrer\">documentation</a>.</p>\n\n<p><strong>Edit</strong>:\nIt seems that <a href=\"https://github.com/hyperium/hyper\" rel=\"noreferrer\">Hyper</a> got a bit more complicated since they started to use <a href=\"https://tokio.rs/\" rel=\"noreferrer\">Tokio</a>. Here is updated version.</p>\n\n<pre><code>extern crate futures;\nextern crate hyper;\nextern crate tokio_core;\n\nuse std::io::{self, Write};\nuse futures::{Future, Stream};\nuse hyper::Client;\nuse tokio_core::reactor::Core;\n\n\nfn main() {\n    let mut core = Core::new().unwrap();\n    let client = Client::new(&amp;core.handle());\n\n    let uri = \"http://httpbin.org/ip\".parse().unwrap();\n    let work =\n        client.get(uri).and_then(|res| {\n            println!(\"Response: {}\", res.status());\n\n            res.body().for_each(|chunk| {\n                io::stdout()\n                    .write_all(&amp;chunk)\n                    .map_err(From::from)\n            })\n        });\n    core.run(work).unwrap();\n}\n</code></pre>\n\n<p>And here are the required dependencies.</p>\n\n<pre><code>[dependencies]\nfutures = \"0.1\"\nhyper = \"0.11\"\ntokio-core = \"0.1\"\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 2111, "user_id": 3239436, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/1885f4757c275422d7da578989835776?s=128&d=identicon&r=PG&f=1", "display_name": "Erik Berkun-Drevnig", "link": "https://stackoverflow.com/users/3239436/erik-berkun-drevnig"}, "edited": false, "score": 0, "creation_date": 1519031839, "post_id": 45623133, "comment_id": 84728575, "body": "Unfortunately reqwest requires OpenSSL so not good if you are doing cross compiling"}], "tags": [], "owner": {"reputation": 878, "user_id": 1109785, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JGwAR.jpg?s=128&g=1", "display_name": "nindalf", "link": "https://stackoverflow.com/users/1109785/nindalf"}, "is_accepted": false, "score": 10, "last_activity_date": 1563971689, "last_edit_date": 1563971689, "creation_date": 1502397751, "answer_id": 45623133, "question_id": 43222429, "link": "https://stackoverflow.com/questions/43222429/how-do-you-make-a-get-request-in-rust/45623133#45623133", "title": "How do you make a GET request in Rust?", "body": "<p>The current best practice for this particular problem is to use the <a href=\"https://docs.rs/reqwest/*/reqwest/fn.get.html\" rel=\"noreferrer\"><code>reqwest</code></a> crate, as specified <a href=\"https://rust-lang-nursery.github.io/rust-cookbook/web/clients/requests.html\" rel=\"noreferrer\">in the Rust Cookbook</a>. This code is slightly adapted from the cookbook to run standalone:</p>\n\n<pre><code>extern crate reqwest; // 0.9.18\n\nuse std::io::Read;\n\nfn run() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let mut res = reqwest::get(\"http://httpbin.org/get\")?;\n    let mut body = String::new();\n    res.read_to_string(&amp;mut body)?;\n\n    println!(\"Status: {}\", res.status());\n    println!(\"Headers:\\n{:#?}\", res.headers());\n    println!(\"Body:\\n{}\", body);\n\n    Ok(())\n}\n</code></pre>\n\n<p>As the cookbook mentions, this code will be executed synchronously.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/51044467/155423\">How can I perform parallel asynchronous HTTP GET requests with reqwest?</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1563837208, "post_id": 57133568, "comment_id": 100824745, "body": "An <a href=\"https://stackoverflow.com/a/45623133/155423\">answer that suggests reqwest already exists</a>. Please be very clear about what benefit this new answer provides compared to the existing one."}, {"owner": {"reputation": 31, "user_id": 8661598, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-M6D1HjjBfGw/AAAAAAAAAAI/AAAAAAAAAA0/p4zpkY3-0nU/photo.jpg?sz=128", "display_name": "Luis San Martin", "link": "https://stackoverflow.com/users/8661598/luis-san-martin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1563951318, "post_id": 57133568, "comment_id": 100865708, "body": "previous answer doesn&#39;t compile this onr does :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1563971738, "post_id": 57133568, "comment_id": 100876866, "body": "That&#39;s why we have the capability of making edits to existing answers. It&#39;s been edited."}, {"owner": {"reputation": 31, "user_id": 8661598, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-M6D1HjjBfGw/AAAAAAAAAAI/AAAAAAAAAA0/p4zpkY3-0nU/photo.jpg?sz=128", "display_name": "Luis San Martin", "link": "https://stackoverflow.com/users/8661598/luis-san-martin"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1564040399, "post_id": 57133568, "comment_id": 100901856, "body": "great! but since Im a new user I cannot comment on previous answer neither edit it.."}], "tags": [], "owner": {"reputation": 31, "user_id": 8661598, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-M6D1HjjBfGw/AAAAAAAAAAI/AAAAAAAAAA0/p4zpkY3-0nU/photo.jpg?sz=128", "display_name": "Luis San Martin", "link": "https://stackoverflow.com/users/8661598/luis-san-martin"}, "is_accepted": false, "score": 1, "last_activity_date": 1563736069, "last_edit_date": 1563736069, "creation_date": 1563714913, "answer_id": 57133568, "question_id": 43222429, "link": "https://stackoverflow.com/questions/43222429/how-do-you-make-a-get-request-in-rust/57133568#57133568", "title": "How do you make a GET request in Rust?", "body": "<p>Try to go for reqwest:</p>\n\n<pre><code>extern crate reqwest;\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let mut res = reqwest::get(\"https://httpbin.org/headers\")?;\n\n    // copy the response body directly to stdout\n    std::io::copy(&amp;mut res, &amp;mut std::io::stdout())?;\n\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 2104, "user_id": 5129504, "user_type": "registered", "accept_rate": 89, "profile_image": "https://graph.facebook.com/476994845791992/picture?type=large", "display_name": "Josh Weinstein", "link": "https://stackoverflow.com/users/5129504/josh-weinstein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13556, "favorite_count": 6, "accepted_answer_id": 43223270, "answer_count": 3, "score": 18, "last_activity_date": 1563971689, "creation_date": 1491369638, "last_edit_date": 1491485601, "question_id": 43222429, "link": "https://stackoverflow.com/questions/43222429/how-do-you-make-a-get-request-in-rust", "title": "How do you make a GET request in Rust?", "body": "<p>I noticed that Rust doesn't have a builtin library to deal with HTTP, it only has a <code>net</code> module that deals with raw IP and TCP protocols.</p>\n\n<p>I need to take a <code>&amp;str</code> of the URL, make a HTTP GET request, and if successful return either a <code>String</code> or <code>&amp;str</code> that corresponds to the HTML or JSON or other response in string form.</p>\n\n<p>It would look something like:</p>\n\n<pre><code>use somelib::http;\n\nlet response = http::get(&amp;\"http://stackoverflow.com\");\nmatch response {\n    Some(suc) =&gt; suc,\n    None =&gt; panic!\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1491345430, "post_id": 43218554, "comment_id": 73508957, "body": "The <code>&amp;</code> is there because <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq\" rel=\"nofollow noreferrer\"><code>PartialEq#eq</code></a> takes a reference; <code>*other.k</code> would be moving the key, and <code>other.k</code> would be passing the pointer. Anything else unclear on this matter? Some side notes: Where have you found that implementation? That use of pointers is not something you should see everywhere."}, {"owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1491345621, "post_id": 43218554, "comment_id": 73509016, "body": "Okay, then why does it work for <code>*self.k</code>?  I don&#39;t get the assymmetry here.  It wouldn&#39;t be assymetrical in, say, C++.  I found the example from an old libcore proposal: <a href=\"https://github.com/thestinger/rust-core/blob/master/core/lru.rs\" rel=\"nofollow noreferrer\">github.com/thestinger/rust-core/blob/master/core/lru.rs</a>"}], "answers": [{"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 2, "last_activity_date": 1491347878, "last_edit_date": 1491347878, "creation_date": 1491347483, "answer_id": 43219233, "question_id": 43218554, "link": "https://stackoverflow.com/questions/43218554/using-rust-dereferencing-operators-vs-with-self/43219233#43219233", "title": "Using Rust dereferencing operators &amp;* vs * with Self?", "body": "<pre><code>impl&lt;K: PartialEq&gt; PartialEq for LruKeyRef&lt;K&gt; {\n    fn eq(&amp;self, other: &amp;LruKeyRef&lt;K&gt;) -&gt; bool {\n        unsafe { (*self.k).eq(&amp;*other.k) }\n    }\n}\n</code></pre>\n\n<p>Under typical circumstances, we can call methods taking <code>&amp;self</code> with just a reference to the object. In addition, a chain of references to the object is also implicitly coerced. That is, we can write:</p>\n\n<pre><code>let a: &amp;str = \"I'm a static string\";\nassert_eq!(str.len(), 19);\nassert_eq!((&amp;&amp;&amp;&amp;str).len(), 19);\n</code></pre>\n\n<p>In your case however, we start with a pointer, which must be explicitly dereferenced inside an unsafe scope. Here are the types of all relevant expressions:</p>\n\n<pre><code>self.k : *const K\n(*self.k) : K\nother.k : *const K\n&amp;*other.k : &amp;K\n</code></pre>\n\n<p>Since <a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#tymethod.eq\" rel=\"nofollow noreferrer\"><code>equals</code></a> takes a reference on its right-hand member, we must make it a reference. Unlike in C++, you can not just pass an lvalue as a reference without making this reference-passing explicit, nor can you pass an rvalue to a const reference. You can however, prepend <code>&amp;</code> to a literal in order to obtain a reference to it (<code>foo(&amp;5)</code>). It only appears asymmetrical because (in a way) <code>self.k</code> is the caller and <code>other.k</code> is the callee.</p>\n"}, {"comments": [{"owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "edited": false, "score": 0, "creation_date": 1491362422, "post_id": 43219279, "comment_id": 73513055, "body": "Ah, that was the missing piece.  What an odd consequence of that protocol. And damned confounding to see it in the wild like that, but now that you&#39;ve documented it, I better understand it.  Thank you!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1555161167, "last_edit_date": 1555161167, "creation_date": 1491347715, "answer_id": 43219279, "question_id": 43218554, "link": "https://stackoverflow.com/questions/43218554/using-rust-dereferencing-operators-vs-with-self/43219279#43219279", "title": "Using Rust dereferencing operators &amp;* vs * with Self?", "body": "<p>We wish to call <code>PartialEq::eq</code>:</p>\n\n<pre><code>trait PartialEq&lt;Rhs = Self&gt;\nwhere\n    Rhs: ?Sized,\n{\n    fn eq(&amp;self, other: &amp;Rhs) -&gt; bool;\n}\n</code></pre>\n\n<p>Assuming the default implementation where <code>Rhs</code> = <code>Self</code> and <code>Self</code> = <code>K</code>, we need to end up with two <code>&amp;K</code> types</p>\n\n<ol>\n<li><code>other.k</code> is of type <code>*const K</code></li>\n<li><code>*other.k</code> is of type <code>K</code></li>\n<li><code>&amp;*other.k</code> is of type <code>&amp;K</code></li>\n</ol>\n\n<p>This much should hopefully make sense.</p>\n\n<ol>\n<li><code>self.k</code> is of type <code>*const K</code></li>\n<li><code>*self.k</code> is of type <code>K</code></li>\n</ol>\n\n<p>The piece that's missing that that <a href=\"https://doc.rust-lang.org/book/ch05-03-method-syntax.html#wheres-the---operator\" rel=\"nofollow noreferrer\">method calls are allowed to <em>automatically reference</em> the value</a> they are called on. This is why there's no distinct syntax for a reference and a value, as there would be in C or C++ (<code>foo.bar()</code> vs <code>foo-&gt;bar()</code>).</p>\n\n<p>Thus, the <code>K</code> is automatically referenced to get <code>&amp;K</code>, fulfilling the signature.</p>\n"}], "owner": {"reputation": 15131, "user_id": 166838, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/0c01a983961c34967d0ccedda9eb7d49?s=128&d=identicon&r=PG", "display_name": "Elf Sternberg", "link": "https://stackoverflow.com/users/166838/elf-sternberg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1200, "favorite_count": 1, "accepted_answer_id": 43219279, "answer_count": 2, "score": 2, "last_activity_date": 1555161167, "creation_date": 1491343862, "last_edit_date": 1491347015, "question_id": 43218554, "link": "https://stackoverflow.com/questions/43218554/using-rust-dereferencing-operators-vs-with-self", "title": "Using Rust dereferencing operators &amp;* vs * with Self?", "body": "<p>I want to write an LRU Cache with a memory size limitation rather than the \"number of objects\" limitation in std.  After trying to figure it out for myself, I cheated and looked at <a href=\"https://github.com/thestinger/rust-core/blob/master/core/lru.rs\" rel=\"nofollow noreferrer\">an existing implementation</a>, and I <em>almost</em> understand it, but this stops me:</p>\n\n<pre><code>struct KeyRef&lt;K&gt; {\n    k: *const K,\n}\n\nimpl&lt;K: Hash&gt; Hash for LruKeyRef&lt;K&gt; {\n    fn hash&lt;H: Hasher&gt;(&amp;self, state: &amp;mut H) {\n        unsafe { (*self.k).hash(state) }\n    }\n}\n\nimpl&lt;K: PartialEq&gt; PartialEq for LruKeyRef&lt;K&gt; {\n    fn eq(&amp;self, other: &amp;LruKeyRef&lt;K&gt;) -&gt; bool {\n        unsafe { (*self.k).eq(&amp;*other.k) }\n    }\n}\n</code></pre>\n\n<p>It's that last <code>unsafe</code> line that I don't understand.  I'm using a <code>HashMap</code> as the underlying structure, the key is stored with the value, and I want the hasher to be able to find it. I make the working hash key a reference to the real key and provide <code>Hash</code> and <code>PartialEq</code> functions such that the <code>HashMap</code> can find and use the key for bucketing purposes.  That's easy.</p>\n\n<p>I understand then that I have to compare the two for <code>PartialEq</code>, and so it makes sense to me that I have to use <code>*self.k</code> to dereference the current object, so why <code>&amp;*other.k</code> for the <em>other</em> object?  That's what I don't understand.  Why isn't it just <code>*other.k</code>?  Aren't I just dereferencing both so I can compare the actual keys?</p>\n"}, {"tags": ["rust", "pattern-matching"], "answers": [{"comments": [{"owner": {"reputation": 4150, "user_id": 7470620, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/49f3026fe13841e41d1805178eed9a3c?s=128&d=identicon&r=PG", "display_name": "eiko", "link": "https://stackoverflow.com/users/7470620/eiko"}, "edited": false, "score": 0, "creation_date": 1491321272, "post_id": 43211909, "comment_id": 73495791, "body": "i didn&#39;t know that existed, thank you! i&#39;ll accept your answer in a bit, assuming no other life-changing answers appear before then ^-^"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 17, "last_activity_date": 1600195915, "last_edit_date": 1600195915, "creation_date": 1491320764, "answer_id": 43211909, "question_id": 43211180, "link": "https://stackoverflow.com/questions/43211180/is-there-a-way-to-use-custom-patterns-such-as-a-regex-or-functions-in-a-match/43211909#43211909", "title": "Is there a way to use custom patterns such as a regex or functions in a match?", "body": "<p>Not yet. The <code>match</code> patterns must be composed of things that can be statically verified by the compiler.</p>\n<p>However, you can use a <em>match guard</em>:</p>\n<pre><code>fn rd_tree(chars: std::str::Chars) {\n    while let Some(c) = chars.next() {\n        match c {\n            c if c.is_whitespace() =&gt; {}\n            '(' =&gt; {}\n            ')' =&gt; {}\n            _ =&gt; {}\n        }\n    }\n}\n</code></pre>\n<p>A match guard allows you to run a function against whatever the pattern matched.</p>\n<hr />\n<p>In the future, constant evaluation <em>may</em> be improved to allow calling functions in place of a pattern:</p>\n<pre><code>#[derive(PartialEq, Eq)]\nstruct Foo {\n    f: usize,\n    g: usize,\n}\n\nimpl Foo {\n    const fn repeated(x: usize) -&gt; Self {\n        Foo { f: x, g: x }\n    }\n}\n\nfn main() {\n    let f = Foo { f: 0, g: 1 };\n    match f {\n        const { Foo::repeated(22) } =&gt; println!(&quot;hi&quot;),\n        _ =&gt; println!(&quot;1&quot;),\n    }\n}\n</code></pre>\n<p>This work is tracked in <a href=\"https://github.com/rust-lang/rust/issues/57240\" rel=\"nofollow noreferrer\">issue #57240</a>. <a href=\"https://rust-lang.github.io/rfcs/2920-inline-const.html\" rel=\"nofollow noreferrer\">RFC 2920 &quot;const expressions and patterns&quot;</a> (and its tracking <a href=\"https://github.com/rust-lang/rust/issues/76001\" rel=\"nofollow noreferrer\">issue #76001</a>) are also relevant.</p>\n<p>It's not immediately obvious to me how this would work with your exact example or a regex without a substantial amount of effort though.</p>\n"}], "owner": {"reputation": 4150, "user_id": 7470620, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/49f3026fe13841e41d1805178eed9a3c?s=128&d=identicon&r=PG", "display_name": "eiko", "link": "https://stackoverflow.com/users/7470620/eiko"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3954, "favorite_count": 2, "accepted_answer_id": 43211909, "answer_count": 1, "score": 12, "last_activity_date": 1600195915, "creation_date": 1491318839, "last_edit_date": 1491321083, "question_id": 43211180, "link": "https://stackoverflow.com/questions/43211180/is-there-a-way-to-use-custom-patterns-such-as-a-regex-or-functions-in-a-match", "title": "Is there a way to use custom patterns such as a regex or functions in a match?", "body": "<p>I'm writing a toy programming language in Rust. I prototyped the parser logic in Ruby:</p>\n\n<pre class=\"lang-rb prettyprint-override\"><code>def rd_tree(chars)\n  loop do\n    case c = chars.next\n    when /\\s/\n      # whitespace stuff\n    when \"(\"\n      # open paren stuff\n    when \")\"\n      # close paren stuff\n    else\n      # default stuff\n    end\n  end\nend\n</code></pre>\n\n<p>And now I'm converting it to Rust:</p>\n\n<pre><code>fn rd_tree(chars: std::str::Chars) {\n    while let Some(c) = chars.next() {\n        if c.is_whitespace() {\n            // whitespace stuff\n        } else if c == '(' {\n            // open paren stuff\n        } else if c == ')' {\n            // close paren stuff\n        } else {\n            // default stuff\n        }\n    }\n}\n</code></pre>\n\n<p>I resorted to using an if, else-if chain because as far as I can tell, Rust's match feature is limited to destructuring, enums, and type patterns. Is there a way to match on regexes or boolean functions? If not, is there a more idiomatic pattern here than if, else-if? I expect the logic to have more branches in the future and I want it to stay neat.</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491323299, "post_id": 43212265, "comment_id": 73497208, "body": "Oh my! What an amazing answer! I already feared that the answer would simply be &quot;<code>RefCell</code> is special&quot;, but this is an amazing insight. Thanks \u2665   One question, though: in the <code>foo: Option&lt;fn(&amp;&#39;a i32)&gt;</code> case, can we actually break memory safety? Or is it basically a false positive due to how the compiler thinks internally?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491323644, "post_id": 43212265, "comment_id": 73497428, "body": "@LukasKalbertodt If it&#39;s additional explanation, not questions, feel free. (If it is additional related questions that the comment box is too small, edit the question instead)."}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491324088, "post_id": 43212265, "comment_id": 73497707, "body": "@LukasKalbertodt I believe the <code>Option&lt;fn(&amp;&#39;a i32)&gt;</code> case is a false positive that can be solved with non-lexical lifetime. But I haven&#39;t checked in detail, maybe it would have some bad interaction with threads."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 9, "last_activity_date": 1504038301, "last_edit_date": 1504038301, "creation_date": 1491321755, "answer_id": 43212265, "question_id": 43210387, "link": "https://stackoverflow.com/questions/43210387/is-this-error-due-to-the-compilers-special-knowledge-about-refcell/43212265#43212265", "title": "Is this error due to the compiler&#39;s special knowledge about RefCell?", "body": "<p><code>RefCell&lt;T&gt;</code> contains an <a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"nofollow noreferrer\"><code>UnsafeCell&lt;T&gt;</code></a> which is a special <a href=\"https://doc.rust-lang.org/unstable-book/language-features/lang-items.html\" rel=\"nofollow noreferrer\">lang item</a>. It is <code>UnsafeCell</code> that causes the error. You could check with:</p>\n\n<pre><code>fn error&lt;'a&gt;(foo: &amp;UnsafeCell&lt;Option&lt;&amp;'a mut String&gt;&gt;, s: &amp;'a mut String) {}\n\n...\n\nlet bar = UnsafeCell::new(None);\nerror(&amp;bar, &amp;mut s);\n</code></pre>\n\n<p>But the error is not due to compiler recognizing an UnsafeCell introduces interior mutability, but that an <code>UnsafeCell</code> is <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">invariant</a> in T. In fact, we could reproduce the error using <a href=\"https://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow noreferrer\">PhantomData</a>:</p>\n\n<pre><code>struct Contravariant&lt;T&gt;(PhantomData&lt;fn(T)&gt;);\n\nfn error&lt;'a&gt;(foo: Contravariant&lt;&amp;'a i32&gt;, s: &amp;'a mut String) {}\n\n...\n\nlet bar = Contravariant(PhantomData);\nerror(bar, &amp;mut s);\n</code></pre>\n\n<p>or even just anything that is contravariant or invariant in the lifetime <code>'a</code>:</p>\n\n<pre><code>fn error&lt;'a&gt;(foo: Option&lt;fn(&amp;'a i32)&gt;, s: &amp;'a mut String) {}\n\nlet bar = None;\nerror(bar, &amp;mut s);\n</code></pre>\n\n<p>The reason you can't hide a RefCell is because variance is derived through the fields of the structure. Once you used <code>RefCell&lt;T&gt;</code> somewhere, no matter how deep, the compiler will figure out <code>T</code> is invariant.</p>\n\n<hr>\n\n<p>Now let's see how the compiler determine the E0502 error. First, it's important to remember that the compiler has to choose two specific lifetimes here: the lifetime in the type of the expression <code>&amp;mut s</code> (<code>'a</code>) and the lifetime in the type of <code>bar</code> (let's call it <code>'x</code>). Both are restricted: the former lifetime <code>'a</code> has to be shorter than the scope of <code>s</code>, otherwise we would end up with a reference living longer than the original string. <code>'x</code> has to be larger than the scope of <code>bar</code>, otherwise we could access an dangling pointer through <code>bar</code> (if a type has a lifetime parameter the compiler assume the type can access a value with that lifetime). </p>\n\n<p>With these two basic restriction, the compiler goes through the following steps:</p>\n\n<ol>\n<li>The type <code>bar</code> is <code>Contravariant&lt;&amp;'x i32&gt;</code>.</li>\n<li>The <code>error</code> function accepts any subtype of <code>Contravariant&lt;&amp;'a i32&gt;</code>, where <code>'a</code> is the lifetime of that <code>&amp;mut s</code> expression.</li>\n<li>Thus <code>bar</code> should be a subtype of <code>Contravariant&lt;&amp;'a i32&gt;</code></li>\n<li><code>Contravariant&lt;T&gt;</code> is contravariant over <code>T</code>, i.e. if <code>U &lt;: T</code>, then <code>Contravariant&lt;T&gt; &lt;: Contravariant&lt;U&gt;</code>. </li>\n<li>So the subtyping relation can be satisfied when <code>&amp;'x i32</code> is a <em>supertype</em> of <code>&amp;'a i32</code>.</li>\n<li>Thus <code>'x</code> should be <em>shorter</em> than <code>'a</code>, i.e. <code>'a</code> should <em>outlive</em> <code>'x</code>.  </li>\n</ol>\n\n<p>Similarly, for an invariant type, the derived relation is <code>'a == 'x</code>, and for convariant, <code>'x</code> outlives <code>'a</code>.</p>\n\n<p>Now, the problem here is that the lifetime in the <em>type</em> of <code>bar</code> lives until the end of scope (as per restriction mentioned above):</p>\n\n<pre><code>    let bar = Contravariant(PhantomData);   // &lt;--- 'x starts here -----+\n    error(bar,                              //                          |\n          &amp;mut s);                          // &lt;- 'a starts here ---+   |\n    s.len();                                //                      |   |\n                                            // &lt;--- 'x ends here\u00b9 --+---+\n                                            //                      |\n                                            // &lt;--- 'a ends here\u00b2 --+\n}\n\n// \u00b9 when `bar` goes out of scope\n// \u00b2 'a has to outlive 'x\n</code></pre>\n\n<p>In both contravariant and invariant cases, <code>'a</code> outlives (or equals to) <code>'x</code> means the statement <code>s.len()</code> must be included in the range, causing borrowck error.</p>\n\n<p>Only in the covariant case we could make the range of <code>'a</code> shorter than <code>'x</code>, allowing the temporary object <code>&amp;mut s</code> be dropped before <code>s.len()</code> is called (meaning: at <code>s.len()</code>, <code>s</code> is not considered borrowed anymore):</p>\n\n<pre><code>    let bar = Covariant(PhantomData);       // &lt;--- 'x starts here -----+\n                                            //                          |\n    error(bar,                              //                          |\n          &amp;mut s);                          // &lt;- 'a starts here --+    |\n                                            //                     |    |\n                                            // &lt;- 'a ends here ----+    |\n    s.len();                                //                          |\n}                                           // &lt;--- 'x ends here -------+\n</code></pre>\n"}], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 167, "favorite_count": 2, "accepted_answer_id": 43212265, "answer_count": 1, "score": 12, "last_activity_date": 1504038301, "creation_date": 1491316786, "question_id": 43210387, "link": "https://stackoverflow.com/questions/43210387/is-this-error-due-to-the-compilers-special-knowledge-about-refcell", "title": "Is this error due to the compiler&#39;s special knowledge about RefCell?", "body": "<pre><code>fn works&lt;'a&gt;(foo: &amp;Option&lt;&amp;'a mut String&gt;, s: &amp;'a mut String) {}\nfn error&lt;'a&gt;(foo: &amp;RefCell&lt;Option&lt;&amp;'a mut String&gt;&gt;, s: &amp;'a mut String) {}\n\nlet mut s = \"hi\".to_string();\n\nlet foo = None;\nworks(&amp;foo, &amp;mut s);\n\n// with this, it errors\n// let bar = RefCell::new(None);\n// error(&amp;bar, &amp;mut s);\n\ns.len();\n</code></pre>\n\n<p>If I put in the two lines with the comment, the following error occurs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n  --&gt; &lt;anon&gt;:16:5\n   |\n14 |     error(&amp;bar, &amp;mut s);\n   |                      - mutable borrow occurs here\n15 |     \n16 |     s.len();\n   |     ^ immutable borrow occurs here\n17 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>The signatures of <code>works()</code> and <code>errors()</code> look fairly similar. But apparently the compiler knows that you can cheat on it with a <code>RefCell</code>, because the borrow checker behaves differently.</p>\n\n<p>I can even \"hide\" the <code>RefCell</code> in another type of my own, but the compiler still always does the right thing (errors in case a <code>RefCell</code> could be used). How does the compiler know all that stuff and how does it work? Does the compiler mark types as \"interior mutability container\" or something like that?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1491309293, "post_id": 43206818, "comment_id": 73486190, "body": "OP asks for a mutable reference; <code>as_ref</code> provides an immutable reference. I&#39;d encourage you to answer OP&#39;s <i>stated</i> question so future searchers can get the answer. If that doesn&#39;t answer OP&#39;s <i>actual</i> question, I&#39;d then also explain why it doesn&#39;t need to be mutable in this case."}, {"owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "edited": false, "score": 0, "creation_date": 1491312352, "post_id": 43206818, "comment_id": 73488619, "body": "Yes, can you exaplain please?"}], "tags": [], "owner": {"reputation": 1056, "user_id": 3497181, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e384ad3cea4b2ccaf03271303a94f1f?s=128&d=identicon&r=PG&f=1", "display_name": "rnstlr", "link": "https://stackoverflow.com/users/3497181/rnstlr"}, "is_accepted": false, "score": 2, "last_activity_date": 1491309338, "last_edit_date": 1491309338, "creation_date": 1491307660, "answer_id": 43206818, "question_id": 43203272, "link": "https://stackoverflow.com/questions/43203272/returning-mutable-reference-to-an-optional-struct-member/43206818#43206818", "title": "Returning mutable reference to an optional struct member", "body": "<p>If you call <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap\" rel=\"nofollow noreferrer\"><code>unwrap()</code></a> you move <code>T</code> out of the <code>Option</code>. Since you only borrowed <code>self</code> this leads to the <code>cannot move out of borrowed content</code> error.</p>\n\n<p>If you want to borrow the value inside an <code>Option&lt;T&gt;</code> you can use the <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref\" rel=\"nofollow noreferrer\"><code>as_ref</code></a> method:</p>\n\n<pre><code>extern crate redis;\n\nuse redis::Client;\n\nstruct Db {\n    client: Option&lt;Client&gt;,\n}\n\nimpl Db {\n    fn new() -&gt; Db {\n        Db { client: None }\n    }\n\n    fn get_client(&amp;mut self) -&gt; Result&lt;&amp;Client, &amp;'static str&gt; {\n        if let Some(ref client) = self.client {\n            Ok(client)\n        } else {\n            let connection_string = \"redis://127.0.0.1\";\n            match Client::open(connection_string) {\n                Ok(client) =&gt; {\n                    self.client = Some(client);\n                    Ok(self.client.as_ref().unwrap())\n                }\n                Err(_) =&gt; Err(\"Error!\"),\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut db = Db::new();\n    db.get_client().expect(\"get_client failed\");\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "is_accepted": false, "score": 1, "last_activity_date": 1491324203, "creation_date": 1491324203, "answer_id": 43213082, "question_id": 43203272, "link": "https://stackoverflow.com/questions/43203272/returning-mutable-reference-to-an-optional-struct-member/43213082#43213082", "title": "Returning mutable reference to an optional struct member", "body": "<p>So, there is solution, to which I came</p>\n\n<pre><code>struct Db {\n    connection: Option&lt;Connection&gt;,\n    host: String,\n    port: u16,\n    db: u8,\n}\n\n\nimpl Db {\n\n    fn new(host: String, port: u16, db: u8) -&gt; Db {\n        Db {\n            host: host,\n            port: port,\n            db: db,\n            connection: None,\n        }\n    }\n\n    fn get_connection(&amp;mut self) -&gt; RedisResult&lt;&amp;Connection&gt; {\n        if let Some(ref connection) = self.connection {\n            Ok(connection)\n        }\n        else {\n            let connection_string = format!(\"redis://{0}:{1}/{2}\", self.host, self.port, self.db);\n            self.connection = Some(\n                Client::open(connection_string.as_ref())?.get_connection()?);\n            Ok(self.connection.as_ref().unwrap())\n        }\n    }\n\n    fn keys(&amp;mut self) -&gt; RedisResult&lt;Vec&lt;String&gt;&gt; {\n        let key_iter: redis::Iter&lt;String&gt; = self.get_connection()?.scan()?;\n        Ok(key_iter.collect())\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1079, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1491324203, "creation_date": 1491298078, "last_edit_date": 1491309066, "question_id": 43203272, "link": "https://stackoverflow.com/questions/43203272/returning-mutable-reference-to-an-optional-struct-member", "title": "Returning mutable reference to an optional struct member", "body": "<p>I want to make lazy connection to a Redis database. I have a <code>Db</code> struct, which holds the Redis <code>Client</code>. By default it is <code>None</code>. Here is example code in Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import redis\n\n\nclass Db:\n\n    def __init__(self):\n        self.client = None\n\n    def get_client(self):\n        if self.client is None:\n            self.client = redis.StrictRedis(host='127.0.0.1')\n        return self.client\n</code></pre>\n\n<p>I tried this</p>\n\n<pre><code>extern crate redis;\n\nuse redis::Client;\n\nstruct Db {\n    client: Option&lt;Client&gt;,\n}\n\nimpl Db {\n    fn new() -&gt; Db {\n        Db { client: None }\n    }\n\n    fn get_client(&amp;mut self) -&gt; Result&lt;&amp;Client, &amp;'static str&gt; {\n        if let Some(ref client) = self.client {\n            Ok(client)\n        } else {\n            let connection_string = \"redis://127.0.0.1\";\n            match Client::open(connection_string) {\n                Ok(client) =&gt; {\n                    self.client = Some(client);\n                    Ok(&amp;self.client.unwrap())\n                }\n                Err(err) =&gt; Err(\"Error!\"),\n            }\n        }\n    }\n}\n\nfn main() {\n    let mut db = Db::new();\n    db.get_client();\n}\n</code></pre>\n\n<p>And I have compile errors. I almost understand what compiler says, but I don't know how to solve the problem.</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>    error: borrowed value does not live long enough\n  --&gt; src/main.rs:28:29\n   |\n28 |                         Ok(&amp;self.client.unwrap())\n   |                             ^^^^^^^^^^^^^^^^^^^^ does not live long enough\n29 |                     },\n   |                     - temporary value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the body at 19:66...\n  --&gt; src/main.rs:19:67\n   |\n19 |         fn get_client(&amp;mut self) -&gt; Result&lt;&amp;Client, &amp;'static str&gt; {\n   |                                                                   ^\n\nerror[E0507]: cannot move out of borrowed content\n  --&gt; src/main.rs:28:29\n   |\n28 |                         Ok(&amp;self.client.unwrap())\n   |                             ^^^^ cannot move out of borrowed content\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 37580, "user_id": 1248114, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/4XXrp.jpg?s=128&g=1", "display_name": "arkascha", "link": "https://stackoverflow.com/users/1248114/arkascha"}, "edited": false, "score": 0, "creation_date": 1491289721, "post_id": 43200423, "comment_id": 73472865, "body": "Instead of investing time into a crude workaround you should install the toolchain in a clean way. Use your systems software management system instead of attempting a wild install that relies on some bundled script."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 37580, "user_id": 1248114, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/4XXrp.jpg?s=128&g=1", "display_name": "arkascha", "link": "https://stackoverflow.com/users/1248114/arkascha"}, "edited": false, "score": 1, "creation_date": 1491289867, "post_id": 43200423, "comment_id": 73472960, "body": "@arkascha Using <code>rustup</code> is the <a href=\"https://www.rust-lang.org/en-US/install.html\" rel=\"nofollow noreferrer\">officially recommended method</a>."}, {"owner": {"reputation": 37580, "user_id": 1248114, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/4XXrp.jpg?s=128&g=1", "display_name": "arkascha", "link": "https://stackoverflow.com/users/1248114/arkascha"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491289913, "post_id": 43200423, "comment_id": 73472993, "body": "@LukasKalbertodt Recommended by whom? See? ;-) Many solutions exist where a recommendation exists to use some script bundled with the product, give it full administrative rights and execute it blindly. Does that mean that is a good idea? No!"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 37580, "user_id": 1248114, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/4XXrp.jpg?s=128&g=1", "display_name": "arkascha", "link": "https://stackoverflow.com/users/1248114/arkascha"}, "edited": false, "score": 1, "creation_date": 1491291027, "post_id": 43200423, "comment_id": 73473662, "body": "@arkascha Recommended by the official Rust-team as I linked the official website... about the <code>curl | bash</code> thing: it&#39;s quite a controversial topic, but only because it already looks dangerous. There are many explanations (<a href=\"https://sandstorm.io/news/2015-09-24-is-curl-bash-insecure-pgp-verified-install\" rel=\"nofollow noreferrer\">one example</a>) out there why it&#39;s not as bad as it sounds and why most other methods are worse than everyone thinks (for example, most installation methods (take <code>.deb</code> files) allow arbitrary code execution as root anyway). But I think this is not the right place to discuss this."}, {"owner": {"reputation": 37580, "user_id": 1248114, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/4XXrp.jpg?s=128&g=1", "display_name": "arkascha", "link": "https://stackoverflow.com/users/1248114/arkascha"}, "edited": false, "score": 0, "creation_date": 1491291129, "post_id": 43200423, "comment_id": 73473713, "body": "@I did not want to discuss this. You started ;-) Security is not gained by the package format, but by the repositories."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1491290715, "last_edit_date": 1491290715, "creation_date": 1491289707, "answer_id": 43200527, "question_id": 43200423, "link": "https://stackoverflow.com/questions/43200423/how-do-you-execute-rustc-when-it-is-installed-in-another-userss-home-directory/43200527#43200527", "title": "How do you execute rustc when it is installed in another users&#39;s home directory?", "body": "<p>If you install via <code>rustup</code> (which is recommended) you have <strong>two</strong> important folders in your home directory: <code>.cargo</code> and <code>.rustup</code> (and depending on your version a soft link <code>.multirust</code> pointing to <code>.rustup</code> for backwards-compatibility reasons). So you also have to create a link to <code>.rustup</code>. That's what the strange error message is all about.</p>\n\n<blockquote>\n  <p>I would like to execute rustc from a Linux account different than the one in which it was installed. Is this possible?</p>\n</blockquote>\n\n<p>This, however, is a different question. It's important to note that many commands, even just <code>cargo build</code>, will attempt to write in one of those directories (in case of <code>cargo build</code> to cache downloaded crates). If the second user has full read/write/execute permissions inside both directories mentioned above, it should work -- but it's quite questionable if that's a good solution. If you want, you can move both folders anywhere you like, give both users full permissions to both and create soft-links per user. </p>\n\n<hr>\n\n<p>But again, depending on how much privacy is needed, it gets more complicated (but if, say, you have an account for your work and one account for your hobby stuff, this isn't that important). Here is an overview over both folders:</p>\n\n<ul>\n<li><code>~/.cargo/&lt;several files&gt;</code>: small, user specific, somewhat confidential files (may contain login data for crates.io)</li>\n<li><code>~/.cargo/bin</code>: installed programs and proxies for programs (around 100MB), execute permission needed</li>\n<li><code>~/.cargo/registry</code>: library cache, can get quite big, not confidential</li>\n<li><code>~/.rustup/toolchains</code>: installed compiler versions and everything else you can install via <code>rustup</code></li>\n<li><code>~/.rustup/&lt;tmp and update-hashes&gt;</code>: somewhat temporary files</li>\n<li><code>~/.rustup/settings.toml</code>: small, user specific</li>\n</ul>\n\n<p>So depending in your needs you can have <em>real</em> <code>.cargo</code> and <code>.rustup</code> folders in your home directory and just soft link the folders like <code>.cargo/bin</code> and so on.</p>\n"}], "owner": {"reputation": 5858, "user_id": 1530549, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/9acb42e69fdeeaf6474022411fe61725?s=128&d=identicon&r=PG", "display_name": "Scooter", "link": "https://stackoverflow.com/users/1530549/scooter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 347, "favorite_count": 0, "accepted_answer_id": 43200527, "answer_count": 1, "score": 0, "last_activity_date": 1491290715, "creation_date": 1491289412, "last_edit_date": 1491289786, "question_id": 43200423, "link": "https://stackoverflow.com/questions/43200423/how-do-you-execute-rustc-when-it-is-installed-in-another-userss-home-directory", "title": "How do you execute rustc when it is installed in another users&#39;s home directory?", "body": "<p>I downloaded and installed the Rust compiler via:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>sudo curl https://sh.rustup.rs -sSf | sh\n</code></pre>\n\n<p>Although prefixed with sudo, it still installs to a local directory: <code>$HOME/.cargo</code></p>\n\n<p>From the account where it is installed, doing <code>rustc --version</code> gives <code>1.16.0  (...)</code>.</p>\n\n<p><strong>I would like to execute rustc from a Linux account different than the one in which it was installed. Is this possible?</strong></p>\n\n<p>I created a logical link to the <code>.cargo</code> directory and added <code>$HOME/.cargo/bin</code> to the front of my PATH.</p>\n\n<p>But, <code>rustc --version</code> from this other account gives this puzzling message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no default toolchain configured\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 636, "user_id": 4091722, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/kQuJG.jpg?s=128&g=1", "display_name": "rajiv_", "link": "https://stackoverflow.com/users/4091722/rajiv"}, "edited": false, "score": 2, "creation_date": 1491220816, "post_id": 43181262, "comment_id": 73440807, "body": "It worked! I added  this to my Cargo.toml.  <code>[dependencies] getopts = &quot;0.2.14&quot; </code>"}], "tags": [], "owner": {"reputation": 106, "user_id": 6006744, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c93b8e112ebc19ba5ef0ef35c4d3980b?s=128&d=identicon&r=PG&f=1", "display_name": "fspmarshall", "link": "https://stackoverflow.com/users/6006744/fspmarshall"}, "is_accepted": true, "score": 4, "last_activity_date": 1491212417, "creation_date": 1491212417, "answer_id": 43181262, "question_id": 43180632, "link": "https://stackoverflow.com/questions/43180632/could-not-find-options-in-getopts/43181262#43181262", "title": "Could not find `Options` in `getopts`", "body": "<p>You need to use the <a href=\"https://crates.io/crates/getopts\" rel=\"nofollow noreferrer\">crates.io version</a> instead.  You can see <a href=\"https://github.com/rust-lang-nursery/getopts/blob/master/src/lib.rs#L102-L104\" rel=\"nofollow noreferrer\">here</a> that the built-in version of <code>getopts</code> has been flagged as a compiler internal with <code>rustc_private</code>.  The version on crates.io is basically the same crate.  The compiler-internal version is just kept segregated for various reasons.</p>\n"}], "owner": {"reputation": 636, "user_id": 4091722, "user_type": "registered", "accept_rate": 25, "profile_image": "https://i.stack.imgur.com/kQuJG.jpg?s=128&g=1", "display_name": "rajiv_", "link": "https://stackoverflow.com/users/4091722/rajiv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 161, "favorite_count": 0, "accepted_answer_id": 43181262, "answer_count": 1, "score": 4, "last_activity_date": 1491223135, "creation_date": 1491210549, "last_edit_date": 1491223135, "question_id": 43180632, "link": "https://stackoverflow.com/questions/43180632/could-not-find-options-in-getopts", "title": "Could not find `Options` in `getopts`", "body": "<p>I am trying to use the <code>Options</code> struct in the <code>getopts</code> crate, which exists according to the Rust book. </p>\n\n<p>The code I am running is this. </p>\n\n<pre><code>let mut opts = getopts::Options::new();\n</code></pre>\n\n<p>While building the project the compiler gives the error </p>\n\n<blockquote>\n  <pre class=\"lang-none prettyprint-override\"><code> let mut opts = getopts::Options::new();\n                ^^^^^^^^^^^^^^^^^^^^^ Could not find `Options in `getopts`\n</code></pre>\n</blockquote>\n\n<p>How do I resolve this? I am using the <strong>nightly</strong> version of Rust. </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1491210621, "post_id": 43179471, "comment_id": 73434027, "body": "@ababo Why are you using <code>sha2 = &quot;0.3.0&quot;</code>? The latest version is &quot;0.4.2&quot;."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 3, "last_activity_date": 1491210622, "creation_date": 1491210622, "answer_id": 43180659, "question_id": 43179471, "link": "https://stackoverflow.com/questions/43179471/using-a-struct-which-implements-a-traits-from-a-different-crate/43180659#43180659", "title": "Using a struct which implements a traits from a different crate", "body": "<p>The <code>digest</code> you're using and the <code>digest</code> the <code>sha2</code> crate is using are incompatible.  That they have the same name is irrelevant; as far as the compiler is concerned, you're trying to conflate two entirely different crates.</p>\n\n<p>The quickest way to tell would be to see if <code>digest</code> shows up more than once during compilation, or more than once in your <code>Cargo.lock</code> file.  You can also verify this manually by looking at crate dependencies.  <a href=\"https://crates.io/crates/sha2/0.3.0\" rel=\"nofollow noreferrer\"><code>sha2</code> 0.3.0</a> lists <code>digest</code> 0.3 in its dependencies, and 0.3 is not compatible with 0.4.</p>\n\n<p>You need to either downgrade your crate's dependency on <code>digest</code>, or upgrade your crate's version of <code>sha2</code> to one that uses a newer version of <code>digest</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 106, "user_id": 6006744, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c93b8e112ebc19ba5ef0ef35c4d3980b?s=128&d=identicon&r=PG&f=1", "display_name": "fspmarshall", "link": "https://stackoverflow.com/users/6006744/fspmarshall"}, "is_accepted": false, "score": 0, "last_activity_date": 1491210714, "creation_date": 1491210714, "answer_id": 43180697, "question_id": 43179471, "link": "https://stackoverflow.com/questions/43179471/using-a-struct-which-implements-a-traits-from-a-different-crate/43180697#43180697", "title": "Using a struct which implements a traits from a different crate", "body": "<p>I just ran your code and it compiled fine with these dependency versions:</p>\n\n<pre><code>[dependencies]\nsha2 = \"0.4.2\"\ndigest = \"0.4.0\"\n</code></pre>\n\n<p>Try updating one or both.</p>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 242, "favorite_count": 0, "accepted_answer_id": 43180659, "answer_count": 2, "score": 0, "last_activity_date": 1491222916, "creation_date": 1491206589, "last_edit_date": 1491222916, "question_id": 43179471, "link": "https://stackoverflow.com/questions/43179471/using-a-struct-which-implements-a-traits-from-a-different-crate", "title": "Using a struct which implements a traits from a different crate", "body": "<p>Crate <code>sha2</code> contains the type <code>Sha256</code> which implements the trait <code>Digest</code> defined in the crate <code>digest</code>. This trait is also reexported from <code>sha2</code>.</p>\n\n<p>I want to write a file which doesn't mention <code>sha2</code>, just <code>digest</code>:</p>\n\n<p><strong>merkle_tree.rs:</strong></p>\n\n<pre><code>use digest::Digest;\n\n#[derive(Default)]\npub struct MerkleTree&lt;T: Digest&gt; {\n    digest: T,\n}\n\nimpl&lt;T: Digest+Default&gt; MerkleTree&lt;T&gt; {\n    pub fn new() -&gt; MerkleTree&lt;T&gt; {\n        MerkleTree{ ..Default::default() }\n    }\n}\n</code></pre>\n\n<p><strong>main.rs:</strong></p>\n\n<pre><code>extern crate digest;\nextern crate sha2;\n\nmod merkle_tree;\n\nuse sha2::{Digest, Sha256};\nuse merkle_tree::MerkleTree;\n\nfn main() {\n    let mut mt = MerkleTree::&lt;Sha256&gt;::new();\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p>I have the following output:</p>\n\n<blockquote>\n  <p>error: no associated item named <code>new</code> found for type\n  <code>merkle_tree::MerkleTree&lt;sha2::Sha256&gt;</code> in the current scope\n  the trait <code>digest::Digest</code> is not implemented for <code>sha2::Sha256</code></p>\n</blockquote>\n\n<p><strong>Cargo.toml:</strong></p>\n\n<pre><code>[package]\nname = \"merkle_tree\"\nversion = \"0.1.0\"\nauthors = [\"Simon Prykhodko &lt;semion.ababo@gmail.com&gt;\"]\n\n[dependencies]\ndigest = \"0.4.0\"\nsha2 = \"0.3.0\"\n</code></pre>\n\n<p>What's wrong here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1491222759, "post_id": 43176841, "comment_id": 73442358, "body": "See also <a href=\"http://stackoverflow.com/q/32030756/155423\">Reasons for Dot Notation for Tuple</a>"}], "answers": [{"tags": [], "owner": {"reputation": 9296, "user_id": 1446742, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff5e3600cba841c184385605d1d99d03?s=128&d=identicon&r=PG", "display_name": "fjh", "link": "https://stackoverflow.com/users/1446742/fjh"}, "is_accepted": false, "score": 7, "last_activity_date": 1491201175, "creation_date": 1491201175, "answer_id": 43177901, "question_id": 43176841, "link": "https://stackoverflow.com/questions/43176841/how-to-access-the-element-at-variable-index-of-a-tuple/43177901#43177901", "title": "How to access the element at variable index of a tuple?", "body": "<blockquote>\n  <p>So, is there any way to get the ith value of vec?</p>\n</blockquote>\n\n<p>No, there isn't. Since tuples can contain elements of different types, an expression like this wouldn't have a statically-known type in general.</p>\n\n<p>You could consider using an array instead of a tuple.</p>\n"}, {"comments": [{"owner": {"reputation": 1003, "user_id": 1103760, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/OInfA.png?s=128&g=1", "display_name": "don bright", "link": "https://stackoverflow.com/users/1103760/don-bright"}, "edited": false, "score": 0, "creation_date": 1531443688, "post_id": 43177918, "comment_id": 89608973, "body": "i just got really used to using parenthesis for everything in other languages. which is why i was using tuples instead of arrays. honestly it is just that simple. it helps having clear explanations like this, so thanks."}, {"owner": {"reputation": 36141, "user_id": 4354477, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/SuxtS.gif?s=128&g=1", "display_name": "ForceBru", "link": "https://stackoverflow.com/users/4354477/forcebru"}, "edited": false, "score": 0, "creation_date": 1603462761, "post_id": 43177918, "comment_id": 114053599, "body": "&quot;You could use a macro that unrolls a for loop with variable indexing for a tuple&quot; - how would one do this? It&#39;s possible to <a href=\"https://danielkeep.github.io/tlborm/book/blk-counting.html\" rel=\"nofollow noreferrer\">count with a macro</a>, but <a href=\"https://doc.rust-lang.org/reference/tokens.html#tuple-index\" rel=\"nofollow noreferrer\">tuple indices must be literals</a>, yet it looks like it&#39;s  <a href=\"https://stackoverflow.com/questions/49576878/how-do-i-evaluate-expressions-in-rusts-macro-system\">impossible to evaluate expressions in a macro</a>, let alone compute an expression into a literal..."}, {"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "reply_to_user": {"reputation": 36141, "user_id": 4354477, "user_type": "registered", "accept_rate": 52, "profile_image": "https://i.stack.imgur.com/SuxtS.gif?s=128&g=1", "display_name": "ForceBru", "link": "https://stackoverflow.com/users/4354477/forcebru"}, "edited": false, "score": 0, "creation_date": 1603471194, "post_id": 43177918, "comment_id": 114057559, "body": "@ForceBru I should have been more clear, but this can best be achieved by writing a <a href=\"https://doc.rust-lang.org/reference/procedural-macros.html#function-like-procedural-macros\" rel=\"nofollow noreferrer\">function-like procedural macro</a>. As you mentioned, this would be pretty difficult to do via a conventional macro by example."}], "tags": [], "owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "is_accepted": true, "score": 20, "last_activity_date": 1491201255, "creation_date": 1491201255, "answer_id": 43177918, "question_id": 43176841, "link": "https://stackoverflow.com/questions/43176841/how-to-access-the-element-at-variable-index-of-a-tuple/43177918#43177918", "title": "How to access the element at variable index of a tuple?", "body": "<p>There isn't a way built in the language, because variable indexing on a <strong>heterogeneous</strong> type like a <code>tuple</code> makes it <em>impossible</em> for the compiler to infer the type of the expression.</p>\n\n<p>You could use a macro that unrolls a <code>for</code> loop with variable indexing for a tuple if it is really, <em>really</em> necessary though.</p>\n\n<p>If you are going to be using homogeneous tuples that require variable indexing, why not just use a fixed-length array?</p>\n"}, {"tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 2, "last_activity_date": 1491211278, "last_edit_date": 1495541382, "creation_date": 1491211278, "answer_id": 43180878, "question_id": 43176841, "link": "https://stackoverflow.com/questions/43176841/how-to-access-the-element-at-variable-index-of-a-tuple/43180878#43180878", "title": "How to access the element at variable index of a tuple?", "body": "<p>While there are no built-in methods to extract the <em>i</em>-th value for non-constant <em>i</em>, there exist crates like <a href=\"https://crates.io/crates/tuple\" rel=\"nofollow noreferrer\"><code>tuple</code></a> to implement <a href=\"https://docs.rs/tuple/0.1.5/tuple/#indexing\" rel=\"nofollow noreferrer\">dynamic indexing</a> of a <strong>homogeneous</strong> tuple. </p>\n\n<pre><code>extern crate tuple;\n\n...\n*vec.get_mut(i).unwrap() = value.trim().parse().expect(\"!\");\n</code></pre>\n\n<p>(But, as <a href=\"https://stackoverflow.com/a/43177901/224671\">@fjh</a> mentioned, it is far better to operate on an array <code>[i64; 3]</code> instead of a tuple <code>(i64, i64, i64)</code>.)</p>\n"}], "owner": {"reputation": 42370, "user_id": 3980929, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/xyKrD.png?s=128&g=1", "display_name": "Rakete1111", "link": "https://stackoverflow.com/users/3980929/rakete1111"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5053, "favorite_count": 0, "accepted_answer_id": 43177918, "answer_count": 3, "score": 8, "last_activity_date": 1491316679, "creation_date": 1491196006, "last_edit_date": 1491316679, "question_id": 43176841, "link": "https://stackoverflow.com/questions/43176841/how-to-access-the-element-at-variable-index-of-a-tuple", "title": "How to access the element at variable index of a tuple?", "body": "<p>I'm writing a function to read vectors from stdin, and here is what I have so far:</p>\n\n<pre><code>fn read_vector() -&gt; (i64, i64, i64) {\n    let mut vec = (0, 0, 0);\n    let mut value = String::new();\n\n    for i in 0..3 {\n        io::stdin().read_line(&amp;mut value).expect(\"Failed to read line\");\n        vec.i = value.trim().parse().expect(\"Failed to read number!\"); // error!\n    }\n}\n</code></pre>\n\n<p>However, the annotated line contains an error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no field `i` on type `({integer}, {integer}, {integer})`\n  --&gt; src/main.rs:13:13\n   |\n13 |         vec.i = value.trim().parse().expect(\"Failed to read number!\");\n   |             ^\n</code></pre>\n\n<p>Reading the documentation <a href=\"https://doc.rust-lang.org/std/primitive.tuple.html\" rel=\"noreferrer\">entry</a> doesn't reveal any <code>get</code>, or similar function.</p>\n\n<p>So, is there any way to get the <code>i</code>th value of a tuple?</p>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 229185, "user_id": 251311, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/b6b0ca5d4ef200ec8e3cd1fa2aefd836?s=128&d=identicon&r=PG", "display_name": "zerkms", "link": "https://stackoverflow.com/users/251311/zerkms"}, "edited": false, "score": 1, "creation_date": 1491180943, "post_id": 43175121, "comment_id": 73424119, "body": "<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/vec/struct.Vec.html</a>"}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1491206987, "last_edit_date": 1491206987, "creation_date": 1491181190, "answer_id": 43175153, "question_id": 43175121, "link": "https://stackoverflow.com/questions/43175121/pass-an-array-of-strings-into-a-function-without-having-to-specify-n-compile-ti/43175153#43175153", "title": "Pass an array of strings into a function without having to specify N (compile time constant)", "body": "<p><code>[&amp;str]</code> is an unsized type. You can't manipulate values of unsized types directly, they need to be behind a pointer. In your case, you should use <code>&amp;[&amp;str]</code> (also called a <em>slice</em>).</p>\n\n<pre><code>fn last_el(arr: &amp;[&amp;str]) -&gt; usize {\n    arr.len() - 1\n}\n\nfn main() {\n    let names = [\"this\", \"that\"];\n    println!(\"{}\", names[last_el(&amp;names)]);\n}\n</code></pre>\n\n<p>I'll also note that there's a <a href=\"https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last\" rel=\"noreferrer\"><code>last()</code></a> method defined on slices. It would be used like this:</p>\n\n<pre><code>fn main() {\n    let names = [\"this\", \"that\"];\n    println!(\"{}\", names.last().unwrap()); \n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1491181876, "last_edit_date": 1495541854, "creation_date": 1491181876, "answer_id": 43175220, "question_id": 43175121, "link": "https://stackoverflow.com/questions/43175121/pass-an-array-of-strings-into-a-function-without-having-to-specify-n-compile-ti/43175220#43175220", "title": "Pass an array of strings into a function without having to specify N (compile time constant)", "body": "<p>And to answer the question you <em>asked</em>:</p>\n\n<blockquote>\n  <p>Pass an <strong>array</strong> of strings into a function without having to specify N</p>\n</blockquote>\n\n<p>You cannot:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38941025/155423\">How to define a function with a generic fixed-length array?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28136739/155423\">Is it possible to control the size of an array using the type parameter of a generic?</a></li>\n</ul>\n"}], "owner": {"reputation": 336, "user_id": 6411264, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/b6da9faea5a6ec9f25c4cca74a18ccf6?s=128&d=identicon&r=PG&f=1", "display_name": "UberStuper", "link": "https://stackoverflow.com/users/6411264/uberstuper"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1709, "favorite_count": 2, "accepted_answer_id": 43175153, "answer_count": 2, "score": 2, "last_activity_date": 1491206987, "creation_date": 1491180765, "last_edit_date": 1491181773, "question_id": 43175121, "link": "https://stackoverflow.com/questions/43175121/pass-an-array-of-strings-into-a-function-without-having-to-specify-n-compile-ti", "title": "Pass an array of strings into a function without having to specify N (compile time constant)", "body": "<p>The following code runs:</p>\n\n<pre><code>fn last_el(arr: [&amp;str; 2]) -&gt; usize {\n    arr.len() - 1\n}\n\nfn main() {\n    let names = [\"this\", \"that\"];\n    println!(\"{}\", names[last_el(names)]);\n}\n</code></pre>\n\n<p>However it only does so with <code>[&amp;str; 2]</code> and 2 has to match the number of elements in <code>names</code>. For example, the following code fails to compile:</p>\n\n<pre><code>fn last_el(arr: [&amp;str]) -&gt; usize {\n    arr.len() - 1\n}\n\nfn main(){\n    let names = [\"this\",\"that\"];\n    println!(\"{}\", names[last_el(names)]); \n}\n</code></pre>\n\n<p>How would I write this so that I don't have to specify <code>N</code>?</p>\n\n<p>I understand that <code>arr.len() - 1</code> is probably less of a headache than trying to write a function that does the same thing, but as far as understanding how functions accept arrays with strings in them, why does the second example fail to compile?  </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491150032, "post_id": 43170485, "comment_id": 73414977, "body": "If you are interested in returning a trait see <a href=\"http://stackoverflow.com/q/27535289/155423\">stackoverflow.com/q/27535289/155423</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491150257, "post_id": 43170485, "comment_id": 73415042, "body": "For your error see <a href=\"http://stackoverflow.com/questions/31490913/rust-generics-expected-t-found-foo\" title=\"rust generics expected t found foo\">stackoverflow.com/questions/31490913/&hellip;</a>"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491150649, "post_id": 43170485, "comment_id": 73415173, "body": "@Shepmaster OP is trying return a TlsStream in one branch and TcpStream in another branch, <code>impl Trait</code> is not going to help. The relation to <a href=\"http://stackoverflow.com/questions/31490913/rust-generics-expected-t-found-foo\" title=\"rust generics expected t found foo\">stackoverflow.com/questions/31490913/&hellip;</a> is quite subtle, while the answer does mention trait object, the question causing the error is different from this one."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1491160436, "post_id": 43170485, "comment_id": 73418886, "body": "@kennytm <code>impl Trait</code> is one of the <i>4</i> possibilities in the first answer; another being returning a boxed trait object. And returning a boxed trait object is what the OP did. I&#39;m unclear; why you think it isn&#39;t a duplicate? And I don&#39;t see how the second question is not useful; it&#39;s the exact problem that OP is experiencing - the function says it returns any <code>T</code> that the caller picks, but the implementation ignores that and returns a concrete type."}], "answers": [{"tags": [], "owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "is_accepted": false, "score": 1, "last_activity_date": 1491168037, "last_edit_date": 1491168037, "creation_date": 1491153200, "answer_id": 43171150, "question_id": 43170485, "link": "https://stackoverflow.com/questions/43170485/how-to-return-a-struct-with-a-generic-type-that-implements-the-read-and-write/43171150#43171150", "title": "How to return a struct with a generic type that implements the `Read` and `Write` traits?", "body": "<p>I'm not sure if this is the best solution but it does seem to work. </p>\n\n<p>I created a new trait which is a combination of Read + Write then just stored it as a Box in my struct</p>\n\n<pre><code>trait ReadWrite : Read + Write {}\n\nimpl&lt;T: Read + Write&gt; ReadWrite for T {}\n\npub struct TcpStream{\n    io_delegate : Box&lt;ReadWrite&gt;,\n    config: Config\n}\n\nimpl TcpStream {\n\n    pub fn connect&lt;A: ToSocketAddrs&gt;(config: Config, addr: A) -&gt; TcpStream {\n        let tcp_stream = net::TcpStream::connect(addr).unwrap();\n        if config.ssl {\n            let tls_stream = TlsConnector::builder().unwrap().build().unwrap().connect(\"rem\", tcp_stream).unwrap();\n            return TcpStream {\n                config: config,\n                io_delegate: Box::new(tls_stream)\n            };\n        }\n        return TcpStream{\n                config: config,\n                io_delegate:Box::new(tcp_stream)\n        };\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 563, "user_id": 3366443, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/68857b02d2a34389d07fba497e41e7ba?s=128&d=identicon&r=PG&f=1", "display_name": "rykeeboy", "link": "https://stackoverflow.com/users/3366443/rykeeboy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 573, "favorite_count": 1, "answer_count": 1, "score": 0, "last_activity_date": 1491168037, "creation_date": 1491149270, "last_edit_date": 1491160863, "question_id": 43170485, "link": "https://stackoverflow.com/questions/43170485/how-to-return-a-struct-with-a-generic-type-that-implements-the-read-and-write", "title": "How to return a struct with a generic type that implements the `Read` and `Write` traits?", "body": "<p>I am trying to wrap a <code>TcpStream</code> and <code>TlsStream</code> in one object so that I can interface with either of them using one struct. I am trying to delegate the io methods to one or the other based on a config value but can't figure out how to return a struct with a generic type that implements the <code>Read</code> and <code>Write</code> traits</p>\n\n<p>My code is as follows </p>\n\n<pre><code>pub struct TcpStream&lt;T: Read + Write&gt; {\n    io_delegate: T,\n    config: Config,\n}\n\nimpl&lt;T&gt; TcpStream&lt;T&gt;\n    where T: Read + Write\n{\n    pub fn connect&lt;A: ToSocketAddrs&gt;(config: Config, addr: A) -&gt; io::Result&lt;TcpStream&lt;T&gt;&gt; {\n        let tcp_stream = net::TcpStream::connect(addr).unwrap();\n        if config.ssl {\n            let tls_stream = TlsConnector::builder()\n                .unwrap()\n                .build()\n                .unwrap()\n                .connect(\"rem\", tcp_stream)\n                .unwrap();\n            return Ok(TcpStream {\n                          config: config,\n                          io_delegate: tls_stream,\n                      });\n        }\n        return Ok(TcpStream {\n                      config: config,\n                      io_delegate: tcp_stream,\n                  });\n    }\n}\n</code></pre>\n\n<p>When I try to compile I get the following errors</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/rem/tcp_stream.rs:19:23\n   |\n19 |               return Ok(TcpStream {\n   |  _______________________^ starting here...\n20 | |                 config: config,\n21 | |                 io_delegate: tls_stream\n22 | |             });\n   | |_____________^ ...ending here: expected type parameter, found struct `native_tls::TlsStream`\n   |\n   = note: expected type `rem::tcp_stream::TcpStream&lt;T&gt;`\n              found type `rem::tcp_stream::TcpStream&lt;native_tls::TlsStream&lt;std::net::TcpStream&gt;&gt;`\n\nerror[E0308]: mismatched types\n  --&gt; src/rem/tcp_stream.rs:24:19\n   |\n24 |           return Ok(TcpStream{\n   |  ___________________^ starting here...\n25 | |                 config: config,\n26 | |                 io_delegate: tcp_stream\n27 | |         });\n   | |_________^ ...ending here: expected type parameter, found struct `std::net::TcpStream`\n   |\n   = note: expected type `rem::tcp_stream::TcpStream&lt;T&gt;`\n              found type `rem::tcp_stream::TcpStream&lt;std::net::TcpStream&gt;`\n</code></pre>\n\n<p>Is there a way to achieve this sort of thing?</p>\n"}, {"tags": ["rust", "borrowing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1491148810, "post_id": 43170117, "comment_id": 73414539, "body": "Likely duplicate of <a href=\"http://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a>"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491157107, "post_id": 43170117, "comment_id": 73417607, "body": "@Shepmaster Probably not. There are multiple issues, but OP wants to insert the newly created value into a hashmap and return a reference to the value inside of the hashmap (see the second error which is more important in this case)."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 2, "last_activity_date": 1491157938, "creation_date": 1491157938, "answer_id": 43172038, "question_id": 43170117, "link": "https://stackoverflow.com/questions/43170117/implement-tree-data-structure/43172038#43172038", "title": "Implement tree data structure", "body": "<p>In this case, it's actually necessary to look at the <em>second</em> error message in the compiler output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0382]: use of moved value: `node`\n  --&gt; src/main.rs:22:10\n   |\n21 |     self.children.insert(key, node);\n   |                               ---- value moved here\n22 |     &amp;mut node\n   |          ^^^^ value used here after move\n   |\n   = note: move occurs because `node` has type `Node`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>The variable <code>node</code> is moved <em>into</em> the hashmap in line 21. You can't use it afterwards! In Rust we have <em>move semantics</em>, meaning that everything gets moved by default instead of cloned by default (C++) or referenced by default (Java). You want to return a reference to the <code>Node</code> object <em>inside</em> the hashmap!</p>\n\n<p>An easy way would be to insert <code>node</code> as you are already doing and afterwards fetching the value from the hashmap:</p>\n\n<pre><code>let mut node = Node::new(value);\nself.children.insert(key.clone(), node);\nself.children.get_mut(key).unwrap()\n</code></pre>\n\n<p>This should make clear what the function actually does. However, this code has some disadvantages: First, we have to clone <code>key</code> (we need it for the insertion and the query) and secondly, the hashmap needs calculate the hash of the key twice which is not very efficient. </p>\n\n<p>Luckily, Rust's <code>HashMap</code> has a nice <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>entry()</code>-API</a>. We could change the function like that:</p>\n\n<pre><code>self.children.entry(key).or_insert_with(|| Node::new(value))\n</code></pre>\n\n<p>This is the whole body of <code>add_child()</code>! Now, however, we notice that ... we haven't really thought about what is supposed to happen if the hashmap already contains a value associated with the given key! In the code above, the old value is kept and returned. If you want to do something else (e.g. replace the value), you could just use <code>match</code> on the <code>Entry</code> object:</p>\n\n<pre><code>let node = Node::new(value);\nmatch self.children.entry(key) {\n    Entry::Occupied(e) =&gt; {\n        // Maybe you want to panic!() here... but we will just \n        // replace the value:\n        e.insert(node);  // discarding old value...\n        e.get_mut()\n    }\n    Entry::Vacant(e) =&gt; insert(node),\n}\n</code></pre>\n"}], "owner": {"reputation": 733, "user_id": 2172884, "user_type": "registered", "accept_rate": 29, "profile_image": "https://www.gravatar.com/avatar/f91cadb19b5a80b3d8508edf54300a5c?s=128&d=identicon&r=PG", "display_name": "sinitsynsv", "link": "https://stackoverflow.com/users/2172884/sinitsynsv"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 541, "favorite_count": 0, "accepted_answer_id": 43172038, "answer_count": 1, "score": 2, "last_activity_date": 1491157938, "creation_date": 1491147071, "last_edit_date": 1491148747, "question_id": 43170117, "link": "https://stackoverflow.com/questions/43170117/implement-tree-data-structure", "title": "Implement tree data structure", "body": "<p>I want to implement a tree data structure. I have a <code>Node</code> struct and want it to hold references to child <code>Node</code>s. I tried:</p>\n\n<pre><code>use std::collections::*;\n\n#[derive(Debug)]\nstruct Node {\n    value: String,\n    children: HashMap&lt;String, Node&gt;,\n}\n\n\nimpl Node {\n    fn new(value: String) -&gt; Self {\n        Node {\n            value: value,\n            children: HashMap::new(),\n        }\n    }\n\n    fn add_child(&amp;mut self, key: String, value: String) -&gt; &amp;mut Node {\n        let mut node = Node::new(value);\n        self.children.insert(key, node);\n        &amp;mut node\n    }\n}\n\n\nfn main() {\n    let mut root_node = Node::new(\"root\".to_string());\n    root_node.add_child(\"child_1_1\".to_string(), \"child_1_1_value\".to_string());\n}\n</code></pre>\n\n<p>This code does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `node` does not live long enough\n  --&gt; src/main.rs:22:10\n   |\n22 |     &amp;mut node\n   |          ^^^^ does not live long enough\n23 |   }\n   |   - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the body at 19:67...\n  --&gt; src/main.rs:19:68\n   |\n19 |     fn add_child(&amp;mut self, key: String, value: String) -&gt; &amp;mut Node {\n   |  ____________________________________________________________________^ starting here...\n20 | |     let mut node = Node::new(value);\n21 | |     self.children.insert(key, node);\n22 | |     &amp;mut node\n23 | |   }\n   | |___^ ...ending here\n\nerror[E0382]: use of moved value: `node`\n  --&gt; src/main.rs:22:10\n   |\n21 |     self.children.insert(key, node);\n   |                               ---- value moved here\n22 |     &amp;mut node\n   |          ^^^^ value used here after move\n   |\n   = note: move occurs because `node` has type `Node`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>How can I implement this?</p>\n"}, {"tags": ["hashmap", "rust", "pattern-matching", "optional"], "answers": [{"comments": [{"owner": {"reputation": 341, "user_id": 1683568, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/47b19ae97ea21047d0fd3741f8c63e49?s=128&d=identicon&r=PG", "display_name": "Fat-chunk", "link": "https://stackoverflow.com/users/1683568/fat-chunk"}, "edited": false, "score": 1, "creation_date": 1491139290, "post_id": 43168337, "comment_id": 73411530, "body": "Thank you that worked perfectly!  I will look a bit more into the <code>entry</code> API it looks very useful."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1491136260, "last_edit_date": 1495535459, "creation_date": 1491136260, "answer_id": 43168337, "question_id": 43168218, "link": "https://stackoverflow.com/questions/43168218/error-thrown-citing-match-arms-with-incompatible-types-when-pattern-matching-an/43168337#43168337", "title": "Error thrown citing match arms with incompatible types when pattern matching an Option", "body": "<p>The compiler is referring to the value the match arm bodies return, not the type of the pattern of each match arm.</p>\n\n<pre><code>Some(count) =&gt; *count += 1,\nNone =&gt; map.insert(a, 0),\n</code></pre>\n\n<p>The expression <code>*count += 1</code> evaluates to <code>()</code> (called \"unit\" in Rust, \"void\" in many other languages). The expression <code>map.insert(a, 0)</code> on the other hand returns <code>Option&lt;V&gt;</code> where <code>V</code> is the value type of the hash map (an integer in your case). Suddenly the error message does make some sense:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>= note: expected type `()`\n= note:    found type `std::option::Option&lt;{integer}&gt;`\n</code></pre>\n\n<p>I suppose you don't even want to return something from the <code>match</code> block (remember: <code>match</code> blocks are expressions, too, so you could return something from it). To discard the result of any expression, you can convert it to a statement with <code>;</code>. Let's try this:</p>\n\n<pre><code>match map.get(&amp;a) {\n    Some(count) =&gt; {\n        *count += 1;\n    }\n    None =&gt; {\n        map.insert(a, 0);\n    }\n}\n</code></pre>\n\n<p>Each match arm body is a block now (something between <code>{</code> and <code>}</code>) and each block contains one statement. Note that we technically don't need to change the first match arm, as <code>*count += 1</code> already returns <code>()</code>, but this way it's more consistent.</p>\n\n<hr>\n\n<p>But once you test this, another error related to borrowing will be shown. This is a well known issue and is explained in more detail <a href=\"https://stackoverflow.com/questions/30851464/want-to-add-to-hashmap-using-pattern-match-get-borrow-mutable-more-than-once-at\">here</a>. In short: the borrow checker is not smart enough to recognize that your code is fine and therefore you should use the super nice <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.entry\" rel=\"nofollow noreferrer\"><code>entry</code>-API</a>:</p>\n\n<pre><code>let map = HashMap::new();\nmap.insert(\"a\", 0);\nlet a = \"a\";\n*map.entry(&amp;a).or_insert(0) += 1;\n</code></pre>\n"}], "owner": {"reputation": 341, "user_id": 1683568, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/47b19ae97ea21047d0fd3741f8c63e49?s=128&d=identicon&r=PG", "display_name": "Fat-chunk", "link": "https://stackoverflow.com/users/1683568/fat-chunk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 970, "favorite_count": 0, "accepted_answer_id": 43168337, "answer_count": 1, "score": 5, "last_activity_date": 1491138532, "creation_date": 1491135555, "last_edit_date": 1491138532, "question_id": 43168218, "link": "https://stackoverflow.com/questions/43168218/error-thrown-citing-match-arms-with-incompatible-types-when-pattern-matching-an", "title": "Error thrown citing match arms with incompatible types when pattern matching an Option", "body": "<p>I am fairly new to Rust and cannot get my head around this confusing error.</p>\n\n<p>I am simply trying to match on an <code>Option</code> returned by the <code>get</code> function of a <code>HashMap</code>. If a value is returned I want to increment it, if not I want to add a new element to the map.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>let mut map = HashMap::new();\nmap.insert(\"a\", 0);\nlet a = \"a\";\nmatch map.get(&amp;a) {\n    Some(count) =&gt; *count += 1,\n    None =&gt; map.insert(a, 0),\n}\n</code></pre>\n\n<p>The resulting error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: match arms have incompatible types\n  --&gt; &lt;anon&gt;:7:5\n   |\n7  |       match map.get(&amp;a) {\n   |  _____^ starting here...\n8  | |         Some(count) =&gt; *count += 1,\n9  | |         None =&gt; map.insert(a, 0),\n10 | |     }\n   | |_____^ ...ending here: expected (), found enum `std::option::Option`\n   |\n   = note: expected type `()`\n              found type `std::option::Option&lt;{integer}&gt;`\nnote: match arm with an incompatible type\n  --&gt; &lt;anon&gt;:9:17\n   |\n9  |         None =&gt; map.insert(a, 0),\n   |                 ^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>I am not really sure what types the compiler is complaining about here, as both <code>Some</code> and <code>None</code> are both part of the same enum type. Can anyone explain what issue the compiler is having with my code?</p>\n"}, {"tags": ["reference", "rust", "immutability", "mutable", "ownership"], "comments": [{"owner": {"reputation": 1684, "user_id": 3740708, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/5DOnd.png?s=128&g=1", "display_name": "Noble Mushtak", "link": "https://stackoverflow.com/users/3740708/noble-mushtak"}, "edited": false, "score": 0, "creation_date": 1608869034, "post_id": 43167052, "comment_id": 115704406, "body": "As of Dec. 2020, the code in this post compiles and works fine. Here is a <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=de74998ad44c0ec095f5b53bbfeb691d\" rel=\"nofollow noreferrer\">demonstration on the Rust playground</a>. This is probably because Rust&#39;s borrow checker has improved, and realized that you finished using the mutable borrow on <code>s</code> in <code>half</code> on line 31, so making another immutable borrow of <code>s</code> on line 32 is fine."}, {"owner": {"reputation": 532, "user_id": 1362514, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb1bf6b59609e9a783da7779100734de?s=128&d=identicon&r=PG", "display_name": "Melkor", "link": "https://stackoverflow.com/users/1362514/melkor"}, "reply_to_user": {"reputation": 1684, "user_id": 3740708, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/5DOnd.png?s=128&g=1", "display_name": "Noble Mushtak", "link": "https://stackoverflow.com/users/3740708/noble-mushtak"}, "edited": false, "score": 0, "creation_date": 1608967125, "post_id": 43167052, "comment_id": 115720054, "body": "@NobleMushtak Wow thanks for the update!"}], "answers": [{"comments": [{"owner": {"reputation": 532, "user_id": 1362514, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb1bf6b59609e9a783da7779100734de?s=128&d=identicon&r=PG", "display_name": "Melkor", "link": "https://stackoverflow.com/users/1362514/melkor"}, "edited": false, "score": 0, "creation_date": 1491132683, "post_id": 43167329, "comment_id": 73409618, "body": "Thanks a lot! So the returned <code>&amp;str</code> is also a <code>&amp;mut</code> to the string? And could I take <code>&amp;mut</code> as some kind of &quot;exclusive lock&quot; to a variable that would be released when going out of scope?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 532, "user_id": 1362514, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb1bf6b59609e9a783da7779100734de?s=128&d=identicon&r=PG", "display_name": "Melkor", "link": "https://stackoverflow.com/users/1362514/melkor"}, "edited": false, "score": 0, "creation_date": 1491133915, "post_id": 43167329, "comment_id": 73409955, "body": "Not exactly; the reference returned by the function is immutable, though the rest of your statement is correct - a mutable borrow is a sort of an exclusive lock on the borrowed object."}, {"owner": {"reputation": 532, "user_id": 1362514, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb1bf6b59609e9a783da7779100734de?s=128&d=identicon&r=PG", "display_name": "Melkor", "link": "https://stackoverflow.com/users/1362514/melkor"}, "edited": false, "score": 0, "creation_date": 1491134133, "post_id": 43167329, "comment_id": 73410020, "body": "Got it. Guess I&#39;ll have to get used to these different concepts, but now I can see the basic idea is clear."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 2, "last_activity_date": 1491129924, "last_edit_date": 1491129924, "creation_date": 1491129390, "answer_id": 43167329, "question_id": 43167052, "link": "https://stackoverflow.com/questions/43167052/in-rust-what-exactly-are-mutable-and-immutable-borrows/43167329#43167329", "title": "In Rust, what exactly are mutable and immutable borrows?", "body": "<p>The reason why you can print <code>a</code> after calling a function with a mutable reference to <code>rect</code> is that it returns a <code>u32</code> which is <code>Copy</code>able - there is no need to restrict further uses of <code>rect</code> because it is no longer borrowed after <code>mut_area</code> is called.</p>\n\n<p>Your <code>mut_string</code>, on the other hand, returns a reference to its argument, so the mutable borrow remains in force as long as <code>half</code> is in scope. That's why you may not borrow <code>s</code> immutably for the purpose of <code>println!()</code>.</p>\n\n<p>In order to achieve what you are after I would mutate <code>s</code> outside of the <code>mut_string</code> function (a slightly different name would be a good idea now) so there is no mutable borrow in force - its argument can be borrowed immutably instead:</p>\n\n<pre><code>fn mut_string(s: &amp;str) -&gt; &amp;str {\n    let len = s.len();\n    &amp;s[0..len / 2]\n}\n\nfn main() {\n    let mut rect = Rectangle {\n        height: 50,\n        width: 40,\n    };\n    println!(\"original rect: {:?}\", rect);\n    let a = mut_area(&amp;mut rect); // rect's mutable borrow expires after this assignment\n    println!(\"area of rect: {}\", a);\n    println!(\"now rect: {:?}\", rect);\n\n    let mut s = String::from(\"helloworld\");\n    println!(\"original s: {}\", s);\n    s.push_str(\"!\"); // s is mutated here\n    let half = mut_string(&amp;s); // s is borrowed immutably\n    println!(\"half of the modified string: {}\", half);\n    println!(\"modified s: {}\", s); // another immutable borrow of s\n}\n</code></pre>\n"}], "owner": {"reputation": 532, "user_id": 1362514, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/fb1bf6b59609e9a783da7779100734de?s=128&d=identicon&r=PG", "display_name": "Melkor", "link": "https://stackoverflow.com/users/1362514/melkor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1020, "favorite_count": 0, "accepted_answer_id": 43167329, "answer_count": 1, "score": 2, "last_activity_date": 1491145109, "creation_date": 1491127270, "last_edit_date": 1491145109, "question_id": 43167052, "link": "https://stackoverflow.com/questions/43167052/in-rust-what-exactly-are-mutable-and-immutable-borrows", "title": "In Rust, what exactly are mutable and immutable borrows?", "body": "<p>I'm stuck with the Rust concepts of <strong>borrowing</strong> and <strong>mutable</strong>:</p>\n\n<pre><code>#[derive(Debug)]\nstruct Rectangle {\n    height: u32,\n    width: u32,\n}\n\nfn mut_area(rect_mut: &amp;mut Rectangle) -&gt; u32 {\n    rect_mut.width /= 2;\n    rect_mut.height * rect_mut.width\n}\n\nfn mut_string(s: &amp;mut String) -&gt; &amp;str {\n    s.push_str(\"!\");\n    let len = s.len();\n    &amp;s[0..len / 2]\n}\n\nfn main() {\n    let mut rect = Rectangle {\n        height: 50,\n        width: 40,\n    };\n    println!(\"original rect: {:?}\", rect);\n    let a = mut_area(&amp;mut rect);\n    println!(\"area of rect: {}\", a);\n    println!(\"now rect: {:?}\", rect);\n\n    let mut s = String::from(\"helloworld\");\n    println!(\"original s: {}\", s);\n    let half = mut_string(&amp;mut s);\n    println!(\"half of the modified string: {}\", half);\n    println!(\"modified s: {}\", s);\n}\n</code></pre>\n\n<p>When I tried to compile it, the compiler told me:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `s` as immutable because it is also borrowed as mutable\n  --&gt; &lt;anon&gt;:32:32\n   |\n30 |     let half = mut_string(&amp;mut s);\n   |                                - mutable borrow occurs here\n31 |     println!(\"half of the modified string: {}\", half);\n32 |     println!(\"modified s: {}\", s);\n   |                                ^ immutable borrow occurs here\n33 | }\n   | - mutable borrow ends here\n</code></pre>\n\n<p>I know there's a rule about mutable reference:</p>\n\n<blockquote>\n  <p>you can only have one mutable reference to a particular piece of data in a particular scope.</p>\n</blockquote>\n\n<p>But why can <code>rect</code> be borrowed but <code>s</code> cannot be? And how do I achieve what I want here - to print the modified string after the function call?</p>\n"}, {"tags": ["rust", "optional", "rust-result"], "answers": [{"comments": [{"owner": {"reputation": 2675, "user_id": 545475, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/zl64v.jpg?s=128&g=1", "display_name": "Arnavion", "link": "https://stackoverflow.com/users/545475/arnavion"}, "edited": false, "score": 5, "creation_date": 1491125019, "post_id": 43166454, "comment_id": 73407510, "body": "And the reverse can be done by <code>val.map(|v| v.map(Ok)).unwrap_or_else(|e| Some(Err(e)))</code>"}], "tags": [], "owner": {"reputation": 198293, "user_id": 707111, "user_type": "moderator", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/oXZkh.jpg?s=128&g=1", "display_name": "Ry-", "link": "https://stackoverflow.com/users/707111/ry"}, "is_accepted": false, "score": 8, "last_activity_date": 1498153440, "last_edit_date": 1498153440, "creation_date": 1491123137, "answer_id": 43166454, "question_id": 43166393, "link": "https://stackoverflow.com/questions/43166393/is-it-possible-to-convert-optionresultt-e-to-a-resultoptiont-e-without/43166454#43166454", "title": "Is it possible to convert Option&lt;Result&lt;T, E&gt;&gt; to a Result&lt;Option&lt;T&gt;, E&gt; without using match?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/stable/std/option/enum.Option.html#method.map_or\" rel=\"noreferrer\"><code>Option::map_or()</code></a>:</p>\n\n<pre><code>val.map_or(Ok(None), |v| v.map(Some))\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 12, "last_activity_date": 1549060334, "creation_date": 1549060334, "answer_id": 54487986, "question_id": 43166393, "link": "https://stackoverflow.com/questions/43166393/is-it-possible-to-convert-optionresultt-e-to-a-resultoptiont-e-without/54487986#54487986", "title": "Is it possible to convert Option&lt;Result&lt;T, E&gt;&gt; to a Result&lt;Option&lt;T&gt;, E&gt; without using match?", "body": "<p>In Rust 1.33, <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.transpose\" rel=\"noreferrer\"><code>transpose()</code></a> is stable, so you can just call it:</p>\n\n<pre><code>fn main() {\n    let x: Result&lt;Option&lt;i32&gt;, ()&gt; = Ok(Some(5));\n    let y: Option&lt;Result&lt;i32, ()&gt;&gt; = Some(Ok(5));\n    assert_eq!(x, y.transpose());\n}\n</code></pre>\n"}], "owner": {"reputation": 580, "user_id": 704969, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b74f4dcc07a2089e5994f578c3b4d2f1?s=128&d=identicon&r=PG", "display_name": "GregoryComer", "link": "https://stackoverflow.com/users/704969/gregorycomer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1329, "favorite_count": 1, "accepted_answer_id": 54487986, "answer_count": 2, "score": 12, "last_activity_date": 1556752188, "creation_date": 1491122710, "last_edit_date": 1556752188, "question_id": 43166393, "link": "https://stackoverflow.com/questions/43166393/is-it-possible-to-convert-optionresultt-e-to-a-resultoptiont-e-without", "title": "Is it possible to convert Option&lt;Result&lt;T, E&gt;&gt; to a Result&lt;Option&lt;T&gt;, E&gt; without using match?", "body": "<p>My first thought is to <code>map</code> the <code>Option</code>, but I can't use <code>try!</code> from inside of the closure. The <code>match</code> statement looks unnecessary, but I can't figure out how to simplify it.</p>\n\n<pre><code>fn example&lt;T, E&gt;(val: Option&lt;Result&lt;T, E&gt;&gt;) -&gt; Result&lt;Option&lt;T&gt;, E&gt; {\n    Ok(match val {\n        Some(v) =&gt; Some(v?),\n        None =&gt; None\n    })\n}\n</code></pre>\n"}, {"tags": ["vector", "reference", "rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1491151561, "post_id": 43166122, "comment_id": 73415482, "body": "<code>object_refs = objects.iter().collect();</code>"}, {"owner": {"reputation": 615, "user_id": 4176597, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f118d3068ac55ffc44752d308d50ee7?s=128&d=identicon&r=PG&f=1", "display_name": "ethanabrooks", "link": "https://stackoverflow.com/users/4176597/ethanabrooks"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1491153955, "post_id": 43166122, "comment_id": 73416339, "body": "Thanks!  I actually just stumbled across this solution myself."}], "owner": {"reputation": 615, "user_id": 4176597, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/4f118d3068ac55ffc44752d308d50ee7?s=128&d=identicon&r=PG&f=1", "display_name": "ethanabrooks", "link": "https://stackoverflow.com/users/4176597/ethanabrooks"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 560, "favorite_count": 0, "closed_date": 1491144912, "answer_count": 0, "score": 1, "last_activity_date": 1491151852, "creation_date": 1491120795, "last_edit_date": 1491151852, "question_id": 43166122, "link": "https://stackoverflow.com/questions/43166122/convert-vect-to-vect", "closed_reason": "Duplicate", "title": "Convert Vec&lt;T&gt; to Vec&lt;&amp;T&gt;", "body": "<p>I need to create a vector of references, but it seems like this is incredibly difficult in Rust. This is a simplified version of my current implementation:</p>\n\n<pre><code>struct Object {\n    // stuff\n}\n\nfn f(o: Object) -&gt; Object {\n    // do stuff\n    o\n}\n\nfn main() {\n    let vector = vec![Object {}, Object {}];\n    let mut objects: Vec&lt;Object&gt; = vec![];\n    let mut object_refs: Vec&lt;&amp;Object&gt; = vec![]; // &lt;-- this is what I need\n\n    for object in vector {\n        objects.push(f(object));\n    }\n    for i in 0..objects.len() {\n        object_refs.push(&amp;objects[i]);\n    }\n}\n</code></pre>\n\n<p>Is there a better way to do this?</p>\n\n<p>Here is a link to a rust playground: <a href=\"https://play.rust-lang.org/?gist=2755aa64d96e0632e47488ab10908979&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=2755aa64d96e0632e47488ab10908979&amp;version=stable&amp;backtrace=0</a></p>\n\n<h1>UPDATE</h1>\n\n<p>Thank you for pointing me to that question. I had actually already consulted that post, and found that it did not exactly solve my problem.</p>\n\n<p>Here is how I adapted each 'version' proposed in the top answer for that question:</p>\n\n<pre><code>let v2: Vec&lt;&amp;Object&gt; = v.iter().map(|s| &amp;f(s)).collect();\nlet v3: Vec&lt;&amp;Object&gt; = v.iter().map(|s| f(s)).map(std::ops::Deref::deref).collect();\nlet v4: Vec&lt;&amp;Object&gt; = v.iter().map(|s| f(s) as &amp;Object).collect();\nlet v5: Vec&lt;&amp;Object&gt; = v.iter().map(|s| &amp;f(s)[..]).collect();\nlet v6: Vec&lt;&amp;Object&gt; = v.iter().map(|s| { let s: &amp;Object = &amp;f(s); s }).collect();\nlet v7: Vec&lt;&amp;Object&gt; = v.iter().map(|s| f(s).as_ref()).collect();\nlet v8: Vec&lt;&amp;str&gt; = v.iter().map(|s| f(s)).map(AsRef::as_ref).collect();\n</code></pre>\n\n<p>Some of these versions are clearly intended exclusively for <code>&amp;String</code> types but I've included them for the sake of completeness. You can run them in this rust playground, and verify that they all throw errors:\n<a href=\"https://play.rust-lang.org/?gist=cc3c8fb1f774f230ad07cdd708aed044&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?gist=cc3c8fb1f774f230ad07cdd708aed044&amp;version=stable&amp;backtrace=0</a></p>\n\n<p>It may also be worth mentioning that the <code>Object</code> struct is actually a type imported from an external crate, so I cannot modify it in any way.</p>\n\n<p>The fundamental problem is that the scope of <code>f(s)</code> is inside the iterator. If you use the closure <code>|s| &amp;f(s)</code>, then <code>f(s)</code> gets freed too soon:</p>\n\n<pre><code>error: borrowed value does not live long enough\n  --&gt; &lt;anon&gt;:22:49\n   |\n22 |     let v2: Vec&lt;&amp;Object&gt; = v.iter().map(|s| &amp;f(s)).collect();\n   |                                              ---^\n   |                                              |  |\n   |                                              |  temporary value dropped here while still borrowed\n   |                                              temporary value created here\n ...\n29 | }\n   | - temporary value needs to live until here\n</code></pre>\n\n<p>My original attempt involved storing the actual <code>f(s)</code> values at the top level in one array and then creating a second array with references to the first. It works, but it is very verbose and awkward. If you can point out a better way, I would appreciate it.</p>\n"}, {"tags": ["memory-management", "rust", "borrowing"], "owner": {"reputation": 602, "user_id": 2483955, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c3137853ba46521a3681ce3d9e712384?s=128&d=identicon&r=PG", "display_name": "youngwerth", "link": "https://stackoverflow.com/users/2483955/youngwerth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 44, "favorite_count": 0, "closed_date": 1491084618, "answer_count": 0, "score": 1, "last_activity_date": 1491091683, "creation_date": 1491083275, "last_edit_date": 1491091683, "question_id": 43162371, "link": "https://stackoverflow.com/questions/43162371/why-is-it-that-traits-for-operator-overloading-require-ownership-of-self", "closed_reason": "Duplicate", "title": "Why is it that traits for operator overloading require ownership of self?", "body": "<p>Why can't I just use <code>&amp;self</code> in the <code>Add</code> trait:</p>\n\n<pre><code>pub trait Add&lt;RHS = Self&gt; {\n    type Output;\n    fn add(self, rhs: RHS) -&gt; Self::Output;\n}\n</code></pre>\n\n<p>That way I don't have to worry about my struct moving after I use the <code>+</code> operator. It's generally not a problem for me cause I use <code>#[derive(Debug, Copy, Clone)]</code> but still I wonder why.</p>\n"}, {"tags": ["rust", "atom-editor"], "comments": [{"owner": {"reputation": 12661, "user_id": 5343387, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/15a14cec3014822297a08ed6dfae2563?s=128&d=identicon&r=PG&f=1", "display_name": "Matt Schuchard", "link": "https://stackoverflow.com/users/5343387/matt-schuchard"}, "edited": false, "score": 2, "creation_date": 1491142365, "post_id": 43155036, "comment_id": 73412426, "body": "File a new feature request on their Github tracker."}], "owner": {"reputation": 1697, "user_id": 5172820, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/da4f4afa5dabda9b8e3de78e61e55713?s=128&d=identicon&r=PG&f=1", "display_name": "minecraftplayer1234", "link": "https://stackoverflow.com/users/5172820/minecraftplayer1234"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 48, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1491053904, "creation_date": 1491038634, "last_edit_date": 1491053904, "question_id": 43155036, "link": "https://stackoverflow.com/questions/43155036/how-do-i-close-atoms-rustfmt-popup-automatically", "title": "How do I close Atom&#39;s rustfmt popup automatically?", "body": "<p>I've installed <code>rustfmt</code> through <code>cargo</code> and configured <code>atom-beautify</code> to make it beautify my Rust files on save with <code>rustfmt</code>. When I type something badly, then on save a little popup shows up telling me what I did wrong. It looks like this:</p>\n\n<p><a href=\"https://i.stack.imgur.com/Y8FQM.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Y8FQM.png\" alt=\"enter image description here\"></a></p>\n\n<p>When I correct my mistake and I press <code>Ctrl+S</code> to save, it saves the file, but this popup doesn't disappear, I have to manually close it down (which doesn't happen for golangs <code>gofmt</code> or cpps <code>uncrustify</code>). How can I make it close automatically?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 2, "creation_date": 1490998897, "post_id": 43150295, "comment_id": 73378022, "body": "Not related to your question, but you might wish to consider renaming <code>Drawer</code> to something that doesn&#39;t have a more common second meaning. At least, assuming it&#39;s meant to be pronounced /dr\u0254 \u0259r/ instead of /dror/"}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1490999932, "post_id": 43150295, "comment_id": 73378296, "body": "can you post your error? What you&#39;ve posted doesn&#39;t look like it will compile. The return of TextDrawer is possibly inferring the wrong bounds, but that&#39;s not clear to me. And <code>drawer: &amp;&#39;a mut Drawer&lt;&#39;b&gt;</code> looks wrong, as you don&#39;t need to mut on inner types (mutability is inherited by the reference to the type, and everything is mutable in the Type when a reference to it is)."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 1, "creation_date": 1491001027, "post_id": 43150295, "comment_id": 73378576, "body": "@bluejekyll Your last statement is wrong: you can&#39;t change anything through a <code>&amp;mut &amp;T</code> (mutable reference to an immutable reference). So the mutable reference inside does make sense (except if I&#39;m missing something crucial here)."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 2, "creation_date": 1491001160, "post_id": 43150295, "comment_id": 73378614, "body": "I <a href=\"https://play.rust-lang.org/?gist=40382ec226c45e230335eacc29b03636&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">minimized your example</a> and added lifetime parameters to the <code>text()</code> method and it worked. I didn&#39;t need to add lifetime parameters to the <code>pause()</code> function for example, that still worked. Could you, Felix, explain your last big paragraph in more detail? Possibly with code and error messages? If my linked solution already helped, please let me know -- I&#39;ll make it an answer then."}, {"owner": {"reputation": 155, "user_id": 1455008, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0e12862dc9b8c574b1451155060b6e4d?s=128&d=identicon&r=PG", "display_name": "bluejekyll", "link": "https://stackoverflow.com/users/1455008/bluejekyll"}, "edited": false, "score": 0, "creation_date": 1491002320, "post_id": 43150295, "comment_id": 73378869, "body": "You appear to be correct that it is not &quot;wrong&quot; though, based on your example, it does look unnecessary. Thanks for correcting me."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 0, "creation_date": 1491003681, "post_id": 43150295, "comment_id": 73379178, "body": "@Alec if you dislike fluent interfaces that much, you may wish to reconsider liking Rust, as the pattern is quite common. It also exists in the standard library (<a href=\"https://doc.rust-lang.org/std/fs/struct.DirBuilder.html\" rel=\"nofollow noreferrer\">1</a>, <a href=\"https://doc.rust-lang.org/std/thread/struct.Builder.html\" rel=\"nofollow noreferrer\">2</a>)."}, {"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1491004460, "post_id": 43150295, "comment_id": 73379350, "body": "@Shepmaster I was only half serious - and I definitely meant it as a joke. Those are hardly as &quot;fluent&quot; as the Scala examples I had in mind. Like this Scala snippet <code>stack.pop() should be (2)</code>. :)"}, {"owner": {"reputation": 91, "user_id": 4792079, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-V9XwVZMLA80/AAAAAAAAAAI/AAAAAAAAAC0/ke8S1t9ZpUY/photo.jpg?sz=128", "display_name": "Felix Chapman", "link": "https://stackoverflow.com/users/4792079/felix-chapman"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1491030526, "post_id": 43150295, "comment_id": 73384162, "body": "Thanks for the help everyone! @LukasKalbertodt &#39;s minimal example made me realise I simply had the lifetime parameters on my <code>text</code> method the wrong way around. Once they were the correct way around, I didn&#39;t need to add any lifetimes."}], "answers": [{"tags": [], "owner": {"reputation": 91, "user_id": 4792079, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-V9XwVZMLA80/AAAAAAAAAAI/AAAAAAAAAC0/ke8S1t9ZpUY/photo.jpg?sz=128", "display_name": "Felix Chapman", "link": "https://stackoverflow.com/users/4792079/felix-chapman"}, "is_accepted": false, "score": 1, "last_activity_date": 1491030777, "creation_date": 1491030777, "answer_id": 43153936, "question_id": 43150295, "link": "https://stackoverflow.com/questions/43150295/using-a-struct-containing-a-borrowed-parameter/43153936#43153936", "title": "Using a struct containing a borrowed parameter", "body": "<p>Thanks to the <a href=\"https://play.rust-lang.org/?gist=40382ec226c45e230335eacc29b03636&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">minimal example</a> made by Lukas above, I realised I had simply got the lifetime parameters to my <code>text</code> method backwards.</p>\n\n<p>My incorrect lifetimes:</p>\n\n<pre><code>impl&lt;'a&gt; Drawer&lt;'a&gt; {\n    pub fn text&lt;'b&gt;(&amp;'b mut self) -&gt; TextDrawer&lt;'a, 'b&gt; {\n        // omitted\n    }\n}\n</code></pre>\n\n<p>The correct lifetimes:</p>\n\n<pre><code>impl&lt;'a&gt; Drawer&lt;'a&gt; {\n    pub fn text&lt;'b&gt;(&amp;'b mut self) -&gt; TextDrawer&lt;'b, 'a&gt; {\n        // omitted\n    }\n}\n</code></pre>\n\n<p>After this, everything compiles without any further explicit lifetimes.</p>\n"}], "owner": {"reputation": 91, "user_id": 4792079, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-V9XwVZMLA80/AAAAAAAAAAI/AAAAAAAAAC0/ke8S1t9ZpUY/photo.jpg?sz=128", "display_name": "Felix Chapman", "link": "https://stackoverflow.com/users/4792079/felix-chapman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1491030777, "creation_date": 1490997568, "last_edit_date": 1491003741, "question_id": 43150295, "link": "https://stackoverflow.com/questions/43150295/using-a-struct-containing-a-borrowed-parameter", "title": "Using a struct containing a borrowed parameter", "body": "<p>I'm writing a simple game in Rust, which includes a <code>Drawer</code>, which is constructed once and then passed through many methods as a mutable reference:</p>\n\n<pre><code>pub struct Drawer&lt;'a&gt; {\n    // ...\n    renderer: Renderer&lt;'a&gt;,\n    // ...\n}\n\nfn pause(drawer: &amp;mut Drawer, events: &amp;[Event]) {\n    // ...\n    drawer.draw_text(&amp;TextPos::Centered, \"Paused\", 1);\n    // ...\n}\n</code></pre>\n\n<p>I wanted to refactor my code to introduce a fluent interface for drawing text, such as:</p>\n\n<pre><code>drawer.text()\n    .size(4)\n    .centered()\n    .draw(\"Paused\");\n</code></pre>\n\n<p>I did this by creating a <code>TextDrawer</code> struct, that contains a reference to the <code>Drawer</code>:</p>\n\n<pre><code>pub struct TextDrawer&lt;'a, 'b: 'a&gt; {\n    pos: TextPos,\n    size: u32,\n    drawer: &amp;'a mut Drawer&lt;'b&gt;,\n}\n\nimpl&lt;'a&gt; Drawer&lt;'a&gt; {\n     pub fn text(&amp;mut self) -&gt; TextDrawer {\n        TextDrawer {\n            pos: TextPos::At(0, 0),\n            size: 1,\n            drawer: self,\n        }\n    }\n}\n</code></pre>\n\n<p>I think the lifetimes I've put on the struct are correct (the reference must last as long as the <code>Drawer</code> itself).</p>\n\n<p>However, my <code>text</code> method will not compile until I add explicit lifetimes. When I do, every method that calls <code>text</code> then demands explicit lifetimes, and so on. I'm surprised these lifetimes have to be stated: after all, they're all of the form <code>fn foo&lt;'a, 'b: 'a&gt;(drawer: &amp;mut'a Drawer&lt;'b&gt;)</code>. I had assumed before this point that this was already the inferred lifetime, since it was always necessary for the reference to last as long as the <code>Drawer</code> itself.</p>\n\n<p>Is it necessary for me to put these explicit lifetimes all other my method signatures? Or can I avoid it in some other way?</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490983613, "post_id": 43146831, "comment_id": 73371489, "body": "It may be helpful to show the types of the various <code>buffer</code> variables (presumably the outer one is owned, the closure argument is a reference, then the <code>b</code> is owned again. Also might be worth checking to see if the inner closure might be called after the outer closure has exited."}, {"owner": {"reputation": 1037, "user_id": 387821, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a102f9ad96ea5e9c3fe1c0c18bf2f6a?s=128&d=identicon&r=PG", "display_name": "Mew", "link": "https://stackoverflow.com/users/387821/mew"}, "edited": false, "score": 0, "creation_date": 1490988475, "post_id": 43146831, "comment_id": 73373936, "body": "So if I understand this right: the connect_changed closure will get called with a reference to a TextBuffer. The code that executes that callback owns that TextBuffer and that&#39;s why I can&#39;t move it inside the closure. But a clone is perfectly fine since it got created inside the closure and so is owned by it?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 1037, "user_id": 387821, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a102f9ad96ea5e9c3fe1c0c18bf2f6a?s=128&d=identicon&r=PG", "display_name": "Mew", "link": "https://stackoverflow.com/users/387821/mew"}, "edited": false, "score": 0, "creation_date": 1491001967, "post_id": 43146831, "comment_id": 73378796, "body": "@Mew I think you understood it. I just added more explanation, hopefully making it clearer."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1491001945, "last_edit_date": 1491001945, "creation_date": 1490982730, "answer_id": 43146831, "question_id": 43146645, "link": "https://stackoverflow.com/questions/43146645/why-is-this-clone-needed/43146831#43146831", "title": "Why is this clone needed?", "body": "<blockquote>\n  <p>But as far as I know, with or without clone, both have the same lifetime.</p>\n</blockquote>\n\n<p>This is not quite true. If you clone a variable, you now have two versions of the variable. Each can be owned by a different owner and thus both can have a different lifetime. That's exactly what's happening in your case, it's just a bit hidden -- thanks to closure magic. </p>\n\n<p>Let's look at your code again (I changed a few variable names to refer to them unambiguously later):</p>\n\n<pre><code>buffer_a.connect_changed(move |buffer_b: &amp;TextBuffer| {\n    let b = buffer_b.clone(); // Why is this clone needed?\n    timeout_add_seconds(1, move || {\n        let ref buffer_c = b;\n        Continue(false)\n    });\n});\n</code></pre>\n\n<p>Here, the variable <code>b</code> is created by cloning and first lives in the outer closure (it's a local variable there). But then it is used inside the inner closure which is a <code>move</code> closure. As such, <code>b</code> is moved <em>into</em> the inner closure which then <em>owns</em> the <code>TextBuffer</code>. Yes: the inner closure owns the buffer <code>b</code>. This means that <code>b</code> lives exactly as long as the closure does; <em>independent</em> from the original lifetime! </p>\n\n<p>To make sure we understood everything, just check the types of various variables:</p>\n\n<ul>\n<li><code>buffer_a</code>: type <code>TextBuffer</code></li>\n<li><code>buffer_b</code>: type <code>&amp;TextBuffer</code> (<em>probably</em> borrowed from <code>buffer_a</code>)</li>\n<li><code>b</code>: type <code>TextBuffer</code> again (we cloned <code>buffer_b</code>, with the <code>clone()</code> signature of <code>clone(&amp;T) -&gt; T</code>)</li>\n<li><code>buffer_c</code>: <code>&amp;TextBuffer</code> again (borrowed from <code>b</code>)</li>\n</ul>\n\n<p>This is further mystified by the <code>let ref buffer = b;</code> line. It's more idiomatic to write <code>let buffer = &amp;b;</code> (both versions do the same thing).</p>\n\n<p>And why exactly does Rust complain if we don't clone? The inner closure is required (by <a href=\"https://docs.rs/gtk/0.1.2/gtk/fn.timeout_add_seconds.html\" rel=\"nofollow noreferrer\"><code>timeout_add_seconds()</code></a>) to <em>be</em> <code>'static</code> (more formally: \"to meet the <code>'static</code> requirement). This means the closure can't reference anything that doesn't live forever (<code>'static</code>). If we don't clone, the inner closure would reference <code>buffer_a</code> which doesn't live forever. </p>\n"}], "owner": {"reputation": 1037, "user_id": 387821, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/7a102f9ad96ea5e9c3fe1c0c18bf2f6a?s=128&d=identicon&r=PG", "display_name": "Mew", "link": "https://stackoverflow.com/users/387821/mew"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 135, "favorite_count": 0, "accepted_answer_id": 43146831, "answer_count": 1, "score": 0, "last_activity_date": 1491001945, "creation_date": 1490981931, "last_edit_date": 1490983299, "question_id": 43146645, "link": "https://stackoverflow.com/questions/43146645/why-is-this-clone-needed", "title": "Why is this clone needed?", "body": "<p>I'm learning Rust and creating a very simple application using Rust and Gtk:</p>\n\n<pre><code>extern crate gtk;\n\nuse gtk::prelude::*;\nuse gtk::{Window, WindowType, TextView, TextBuffer, timeout_add_seconds};\n\nfn make_window() {\n    let window = Window::new(WindowType::Toplevel);\n\n    let textview = TextView::new();\n    window.add(&amp;textview);\n\n    let buffer = match textview.get_buffer() {\n        Some(x) =&gt; x,\n        None =&gt; panic!(\"Textview did not contain a buffer.\"),\n    };\n\n    buffer.connect_changed(move |buffer: &amp;TextBuffer| {\n        let b = buffer.clone(); // Why is this clone needed?\n        timeout_add_seconds(1, move || {\n            let ref buffer = b;\n            Continue(false)\n        });\n    });\n    window.show_all();\n}\n\nfn main() {\n    if gtk::init().is_err() {\n        println!(\"Failed to initialize GTK.\");\n        return;\n    }\n\n    make_window();\n    gtk::main();\n}\n</code></pre>\n\n<p>I am confused why that <code>buffer.clone()</code> is needed right before the inner closure.</p>\n\n<p>If I leave it out, I get an error about lifetimes. But as far as I know, with or without clone, both have the same lifetime. So why does one work and one doesn't?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --&gt; src/main.rs:18:17\n   |\n18 |         let b = buffer; // Why is this clone needed?\n   |                 ^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the body at 17:54...\n  --&gt; src/main.rs:17:55\n   |\n17 |       buffer.connect_changed(move |buffer: &amp;TextBuffer| {\n   |  _______________________________________________________^ starting here...\n18 | |         let b = buffer; // Why is this clone needed?\n19 | |         timeout_add_seconds(1, move || {\n20 | |             let ref buffer = b;\n21 | |             Continue(false)\n22 | |         });\n23 | |     });\n   | |_____^ ...ending here\nnote: ...so that expression is assignable (expected &amp;gtk::TextBuffer, found &amp;gtk::TextBuffer)\n  --&gt; src/main.rs:18:17\n   |\n18 |         let b = buffer; // Why is this clone needed?\n   |                 ^^^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@src/main.rs:19:32: 22:10 b:&amp;gtk::TextBuffer]` will meet its required lifetime bounds\n  --&gt; src/main.rs:19:9\n   |\n19 |         timeout_add_seconds(1, move || {\n   |         ^^^^^^^^^^^^^^^^^^^\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 5, "creation_date": 1490973706, "post_id": 43143459, "comment_id": 73365939, "body": "Why bother with that when you can use <code>$(,)*</code> just before the closing brace in the macro pattern?  One rule, and works for trailing comma...s.  Ok, so it&#39;s a <i>little</i> out of spec, but cuts down on repetition tremendously."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1490973960, "post_id": 43143459, "comment_id": 73366077, "body": "@DK. the main reason is because I didn&#39;t realize you could do that ;-) Sounds like a perfectly cromulent answer to me; please add it!"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1490974020, "post_id": 43143459, "comment_id": 73366111, "body": "Eh, you were here first, and you&#39;ve already got four Meaningless Internet Points.  Quicker to edit it into yours as an alternative for best of both."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 8, "creation_date": 1490974371, "post_id": 43143459, "comment_id": 73366315, "body": "@DK. I&#39;ve edited it in, but I&#39;d still advocate for you to add an answer yourself (and I&#39;d edit it back out of this one). Beyond either of us gaining Magic Internet Points, the voting also allows people who come to this question to pick which answer is <i>better</i> for their uses, which is helpful for subsequent people to know what is the more idiomatic solution."}, {"owner": {"reputation": 394, "user_id": 377970, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/sVZIv.jpg?s=128&g=1", "display_name": "Omid", "link": "https://stackoverflow.com/users/377970/omid"}, "edited": false, "score": 0, "creation_date": 1613476516, "post_id": 43143459, "comment_id": 117080945, "body": "You should be aware that the second and third solutions can match one or more commas. <code>define_enum!(Foo1 { , });</code>"}, {"owner": {"reputation": 89, "user_id": 3216513, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/15365b31dde956db92339bcfba373e1f?s=128&d=identicon&r=PG&f=1", "display_name": "G Butler", "link": "https://stackoverflow.com/users/3216513/g-butler"}, "edited": false, "score": 0, "creation_date": 1616015801, "post_id": 43143459, "comment_id": 117874859, "body": "The second solution also allows double-commas and just a comma with nothing else and so only the first solution should be preferred."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 52, "last_activity_date": 1551129048, "last_edit_date": 1551129048, "creation_date": 1490971315, "answer_id": 43143459, "question_id": 43143327, "link": "https://stackoverflow.com/questions/43143327/how-to-allow-optional-trailing-commas-in-macros/43143459#43143459", "title": "How to allow optional trailing commas in macros?", "body": "<h1>Handle both cases</h1>\n\n<p>You can handle both cases by... handling both cases:</p>\n\n<pre><code>macro_rules! define_enum {\n    ($Name:ident { $($Variant:ident,)* }) =&gt; {\n        pub enum $Name {\n            None,\n            $($Variant),*,\n        }\n    };\n    ($Name:ident { $($Variant:ident),* }) =&gt; {\n        define_enum!($Name { $($Variant,)* });\n    };\n}\n\ndefine_enum!(Foo1 { A, B });\ndefine_enum!(Foo2 { A, B, });\n\nfn main() {}\n</code></pre>\n\n<p>We've moved the main implementation to the version that expects the trailing comma. We then added a second clause that matches the case with the missing comma and rewrites it to the version with a comma.</p>\n\n<h1>Make the comma optional</h1>\n\n<p><a href=\"https://stackoverflow.com/questions/43143327/how-to-allow-optional-trailing-commas-in-macros/43143459?noredirect=1#comment73365939_43143459\">DK. points out an alternative</a>, making the trailing comma itself optional:</p>\n\n<pre><code>($Name:ident { $($Variant:ident),* $(,)* }) =&gt; { \n//                                 ^^^^^\n</code></pre>\n\n<p>This avoids the need to delegate from one implementation to the other.</p>\n\n<p>In Rust 2018, starting with Rust 1.32, you can use the <code>?</code> macro repeater to write this in a more obvious manner and disallow multiple trailing commas:</p>\n\n<pre><code>($Name:ident { $($Variant:ident),* $(,)? }) =&gt; { \n//                                 ^^^^^\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 482, "user_id": 5286593, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-TEsNm6kITnY/AAAAAAAAAAI/AAAAAAAAAPA/fyrLkdEoX40/photo.jpg?sz=128", "display_name": "AldaronLau", "link": "https://stackoverflow.com/users/5286593/aldaronlau"}, "is_accepted": false, "score": 9, "last_activity_date": 1593947387, "last_edit_date": 1593947387, "creation_date": 1550974816, "answer_id": 54848146, "question_id": 43143327, "link": "https://stackoverflow.com/questions/43143327/how-to-allow-optional-trailing-commas-in-macros/54848146#54848146", "title": "How to allow optional trailing commas in macros?", "body": "<p>Change the line</p>\n<pre><code>($Name:ident { $($Variant:ident),* }) =&gt; {\n</code></pre>\n<p>to</p>\n<pre><code>($Name:ident { $($Variant:ident),* $(,)? }) =&gt; {\n</code></pre>\n<p>to add an optional comma at the end. This works in stable Rust / 2018 edition. This syntax also works for other separators like a semicolon.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4395, "favorite_count": 5, "accepted_answer_id": 43143459, "answer_count": 2, "score": 45, "last_activity_date": 1593947387, "creation_date": 1490970906, "last_edit_date": 1490971055, "question_id": 43143327, "link": "https://stackoverflow.com/questions/43143327/how-to-allow-optional-trailing-commas-in-macros", "title": "How to allow optional trailing commas in macros?", "body": "<p>Here's a synthetic example of what I want:</p>\n\n<pre><code>macro_rules! define_enum {\n    ($Name:ident { $($Variant:ident),* }) =&gt; {\n        pub enum $Name {\n            None,\n            $($Variant),*,\n        }\n    }\n}\n\ndefine_enum!(Foo { A, B });\n</code></pre>\n\n<p>This code compiles, but if add a comma to it:</p>\n\n<pre><code>define_enum!(Foo { A, B, });\n//                     ^\n</code></pre>\n\n<p>The compilation fails. I can fix it with:</p>\n\n<pre><code>($Name:ident { $($Variant:ident,)* })\n//                             ^\n</code></pre>\n\n<p>but then <code>define_enum!(Foo { A, B });</code> fails,</p>\n\n<p>How should I write a macro to handle both cases:</p>\n\n<pre><code>define_enum!(Foo { A, B });\ndefine_enum!(Foo { A, B, });\n</code></pre>\n"}, {"tags": ["regex", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490970290, "post_id": 43135781, "comment_id": 73363438, "body": "Note: in real code, you should get used to using <code>expect(&quot;what was expected&quot;)</code> rather than <code>unwrap</code>, it makes unexpected issues more easily recognizable."}], "answers": [{"tags": [], "owner": {"reputation": 9345, "user_id": 1021920, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/VukgG.jpg?s=128&g=1", "display_name": "hellow", "link": "https://stackoverflow.com/users/1021920/hellow"}, "is_accepted": false, "score": 1, "last_activity_date": 1586263386, "last_edit_date": 1586263386, "creation_date": 1490948501, "answer_id": 43135888, "question_id": 43135781, "link": "https://stackoverflow.com/questions/43135781/how-can-i-allow-my-program-to-continue-when-a-regex-doesnt-match/43135888#43135888", "title": "How can I allow my program to continue when a regex doesn&#39;t match?", "body": "<p>You can either check with <a href=\"https://docs.rs/regex/1.3.6/regex/struct.Regex.html#method.is_match\" rel=\"nofollow noreferrer\"><code>is_match</code></a> or just use the return type of <code>captures(e)</code> to check it (it's an <a href=\"https://docs.rs/regex/1.3.6/regex/struct.Regex.html#method.captures\" rel=\"nofollow noreferrer\"><code>Option&lt;Captures&lt;'t&gt;&gt;</code></a>) instead of unwrapping it, by using a <code>match</code> (see <a href=\"https://doc.rust-lang.org/std/option/\" rel=\"nofollow noreferrer\">this</a> how to handle options).</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1490965514, "post_id": 43137776, "comment_id": 73359951, "body": "Using <code>is_match</code> here is specifically recommended against: <i>&quot;It is recommended to use this method if <b>all you need to do is test a match</b>&quot;</i> (emphasis mine) \u2014 Using <code>is_match</code> combined with <code>captures</code> causes the regex to be evaluated twice, adding inefficiency."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 10, "last_activity_date": 1490965401, "last_edit_date": 1495540973, "creation_date": 1490954091, "answer_id": 43137776, "question_id": 43135781, "link": "https://stackoverflow.com/questions/43135781/how-can-i-allow-my-program-to-continue-when-a-regex-doesnt-match/43137776#43137776", "title": "How can I allow my program to continue when a regex doesn&#39;t match?", "body": "<p>You probably want to (re-)read <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">the chapter on \"Error Handling\" in the Rust book</a>. Error handling in Rust is mostly done via the types <code>Result&lt;T, E&gt;</code> and <code>Option&lt;T&gt;</code>, both representing an optional value of type <code>T</code> with <code>Result&lt;T, E&gt;</code> carrying additional information about the absence of the main value. </p>\n\n<p>You are calling <code>unwrap()</code> on each <code>Option</code> or <code>Result</code> you encounter. <code>unwrap()</code> is a method saying: \"if there is no value of type <code>T</code>, let the program explode (panic)\". <a href=\"https://stackoverflow.com/questions/39477684/should-i-avoid-unwrap-in-production-application/39478185#39478185\">You only want to call <code>unwrap()</code> if an absence of a value is <em>not</em> expected and thus would be a bug!</a> (NB: actually, the <code>unwrap()</code> in your second line is a perfectly reasonable use!)</p>\n\n<p>But you use <code>unwrap()</code> incorrectly twice: on the result of <code>captures()</code> and on the result of <code>get(1)</code>. Let's tackle <code>captures()</code> first; it returns an <code>Option&lt;_&gt;</code> and <a href=\"https://docs.rs/regex/0.2.1/regex/struct.Regex.html#method.captures\" rel=\"nofollow noreferrer\">the docs say</a>:</p>\n\n<blockquote>\n  <p>If no match is found, then <code>None</code> is returned.</p>\n</blockquote>\n\n<p>In most cases, the input string not matching the regex is to be expected, thus we should deal with it. We could <em>either</em> just <code>match</code> the <code>Option</code> (the standard way to deal with those possible errors, see the Rust book chapter) <em>or</em> we could use <a href=\"https://docs.rs/regex/0.2.1/regex/struct.Regex.html#method.is_match\" rel=\"nofollow noreferrer\"><code>Regex::is_match()</code></a> before, to check if the string matches. </p>\n\n<p>Next up: <code>get(1)</code>. Again, <a href=\"https://docs.rs/regex/0.2.1/regex/struct.Captures.html#method.get\" rel=\"nofollow noreferrer\">the docs tell us</a>:</p>\n\n<blockquote>\n  <p>Returns the match associated with the capture group at index <code>i</code>. If <code>i</code> does not correspond to a capture group, or if the capture group did not participate in the match, then <code>None</code> is returned.</p>\n</blockquote>\n\n<p>But this time, we don't have to deal with that. Why? Our regex (<code>([0-9]+)</code>) is constant and we know that the capture group exists and encloses the whole regex. Thus we can rule out both possible situations that would lead to a <code>None</code>. This means we can <code>unwrap()</code>, because we don't expect the absence of a value.</p>\n\n<p>The resulting code could look like this:</p>\n\n<pre><code>let input = \"abcd123efg\";\nlet re = Regex::new(r\"([0-9]+)\").unwrap();\nmatch re.captures(e) {\n    Some(caps) =&gt; {\n        let cap = caps.get(1).unwrap().as_str();\n        println!(\"{}\", cap);\n    }\n    None =&gt; {\n        // The regex did not match. Deal with it here!\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 844, "favorite_count": 1, "accepted_answer_id": 43137776, "answer_count": 2, "score": 3, "last_activity_date": 1586263386, "creation_date": 1490948189, "last_edit_date": 1490965617, "question_id": 43135781, "link": "https://stackoverflow.com/questions/43135781/how-can-i-allow-my-program-to-continue-when-a-regex-doesnt-match", "title": "How can I allow my program to continue when a regex doesn&#39;t match?", "body": "<p>I want to use the <code>regex</code> crate and capture numbers from a string.</p>\n\n<pre><code>let input = \"abcd123efg\";\nlet re = Regex::new(r\"([0-9]+)\").unwrap();\nlet cap = re.captures(e).unwrap().get(1).unwrap().as_str();\nprintln!(\"{}\", cap);\n</code></pre>\n\n<p>It worked if numbers exist in <code>input</code>, but if numbers don't exist in <code>input</code> I get the following error: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread 'main' panicked at 'called `Option::unwrap()` on a `None` value'\n</code></pre>\n\n<p>I want my program continue if the regex doesn't match. How can I handle this error?</p>\n"}, {"tags": ["compiler-construction", "rust", "compiler-optimization"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1490921419, "post_id": 43130192, "comment_id": 73339560, "body": "You may also be interested in <a href=\"http://stackoverflow.com/q/30414068/155423\">the &quot;null pointer optimization&quot;</a> for <code>Option</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 6, "creation_date": 1490942368, "post_id": 43130192, "comment_id": 73345700, "body": "You are misunderstanding Zero-Cost Abstraction. It does not mean that you get functionality for free; it means that you get the least overhead to implement your functionality. Or it the words of Stroustrup (C++): You don&#39;t pay for what you don&#39;t need, and what you do pay for you could not handcraft better."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1491075342, "post_id": 43130192, "comment_id": 73397274, "body": "Exactly, &quot;zero-cost&quot; referees to cost incurred <i>by the abstraction</i>, not that underlying functionality itself."}], "answers": [{"comments": [{"owner": {"reputation": 109956, "user_id": 159145, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/r8ryC.png?s=128&g=1", "display_name": "Dai", "link": "https://stackoverflow.com/users/159145/dai"}, "edited": false, "score": 0, "creation_date": 1490920587, "post_id": 43130382, "comment_id": 73339372, "body": "Thank you - I didn&#39;t think of testing my hypothesis with compiler output. Can you briefly annotate the assembly? If I&#39;m reading it correctly, the compiler is storing the &quot;has value&quot; flag in a register - as that doesn&#39;t consume real memory I suppose that would still make it zero-cost, at least in this case."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1490921166, "post_id": 43130382, "comment_id": 73339488, "body": "<i>is an assumption that doesn&#39;t apply to every single case</i> \u2014 the meaning of this is that the programmer couldn&#39;t write it better. Would you mind sharing what a better representation of an <code>Option&lt;i32&gt;</code> would be?"}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 109956, "user_id": 159145, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/r8ryC.png?s=128&g=1", "display_name": "Dai", "link": "https://stackoverflow.com/users/159145/dai"}, "edited": false, "score": 0, "creation_date": 1490927746, "post_id": 43130382, "comment_id": 73341085, "body": "@Dai The Option value is saved on the stack. <code>%rbp</code> is the current stack position, and <code>-8(%rbp)</code> means some local variable."}, {"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490928222, "post_id": 43130382, "comment_id": 73341203, "body": "@Shepmaster You can generate separate code paths for None / Some results which skip the tag completely. (similar to what the question implied) Of course it depends on whether you care about the stack space, but less about code size... it could matter if you&#39;re in a recursive function, building <code>Option&lt;SomethingBig&gt;</code>. (that&#39;s a pathological case of course) Here, it doesn&#39;t matter. The better summary is probably &quot;literal zero-cost isn&#39;t always practical/worth considering&quot;?"}, {"owner": {"reputation": 14050, "user_id": 1858225, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/8afcf8a38024eb5b17c0b0b58ff96d79?s=128&d=identicon&r=PG", "display_name": "Kyle Strand", "link": "https://stackoverflow.com/users/1858225/kyle-strand"}, "edited": false, "score": 0, "creation_date": 1490982114, "post_id": 43130382, "comment_id": 73370731, "body": "@viraptor That&#39;s an interesting idea (and one that I&#39;ve thought about with regard to language design), but it only works if the function is only ever called as the argument for a <code>match</code>. But <code>Option</code> is semantically <i>data</i>, and can be used as such; you could, for instance, call a function returning an <code>Option</code>, hold onto it in a variable for a while, and then pass it as an argument to another function."}], "tags": [], "owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "is_accepted": false, "score": 2, "last_activity_date": 1490932057, "last_edit_date": 1490932057, "creation_date": 1490919380, "answer_id": 43130382, "question_id": 43130192, "link": "https://stackoverflow.com/questions/43130192/in-rust-is-option-compiled-to-a-runtime-check-or-an-instruction-jump/43130382#43130382", "title": "In Rust, is Option compiled to a runtime check or an instruction jump?", "body": "<h1>Warning: this comes from the debug build, not release. See the other answer for an optimised version which behaves differently.</h1>\n\n<p>You can check the code on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust playground</a></p>\n\n<p>The function compiles to:</p>\n\n<pre><code>    .cfi_startproc\n    pushq   %rbp\n.Ltmp6:\n    .cfi_def_cfa_offset 16\n.Ltmp7:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\n.Ltmp8:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n.Ltmp9:\n    .loc    1 6 0 prologue_end\n    callq   is_full_moon@PLT\n    movb    %al, -9(%rbp)\n    movb    -9(%rbp), %al\n    testb   $1, %al\n    jne .LBB1_3\n    jmp .LBB1_4\n.LBB1_3:\n    .loc    1 7 0\n    movl    $0, -8(%rbp)\n    .loc    1 6 0\n    jmp .LBB1_5\n.LBB1_4:\n    .loc    1 10 0\n    movl    $1, -8(%rbp)\n    movl    $1, -4(%rbp)\n.LBB1_5:\n    .loc    1 12 0\n    movq    -8(%rbp), %rax\n    addq    $16, %rsp\n    popq    %rbp\n    retq\n.Ltmp10:\n.Lfunc_end1:\n    .size   _ZN8rust_out15may_return_none17hb9719b83eae05d85E, .Lfunc_end1-_ZN8rust_out15may_return_none17hb9719b83eae05d85E\n    .cfi_endproc\n</code></pre>\n\n<p>Which isn't really returning to different places. The space for <code>Option&lt;i32&gt;</code> contains the <code>i32</code> value as well. That means your function is writing either just the <code>None/Some</code> marker:</p>\n\n<pre><code>movl    $0, -8(%rbp)\n</code></pre>\n\n<p>Or the value as well:</p>\n\n<pre><code>movl    $1, -8(%rbp)\nmovl    $1, -4(%rbp)\n</code></pre>\n\n<p>So I guess the answer to your question is that this:</p>\n\n<blockquote>\n  <p>Rust makes a point of providing zero-cost abstractions</p>\n</blockquote>\n\n<p>is an assumption that doesn't apply to every single case.</p>\n"}, {"comments": [{"owner": {"reputation": 30697, "user_id": 31667, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/082b069c287878a1bd5731f44c8f10e7?s=128&d=identicon&r=PG", "display_name": "viraptor", "link": "https://stackoverflow.com/users/31667/viraptor"}, "edited": false, "score": 0, "creation_date": 1490932117, "post_id": 43132017, "comment_id": 73342129, "body": "Thanks for the update! I forgot to switch to the release mode in my answer :("}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 8, "last_activity_date": 1490933900, "last_edit_date": 1490933900, "creation_date": 1490931542, "answer_id": 43132017, "question_id": 43130192, "link": "https://stackoverflow.com/questions/43130192/in-rust-is-option-compiled-to-a-runtime-check-or-an-instruction-jump/43132017#43132017", "title": "In Rust, is Option compiled to a runtime check or an instruction jump?", "body": "<p>It depends entirely on optimization. Consider this implementation (<a href=\"https://play.integer32.com/?gist=9f8da884ba16bb457d8fd5b80d72e77a&amp;version=nightly\" rel=\"noreferrer\">playground</a>):</p>\n\n<pre><code>#![feature(asm)]\n\nextern crate rand;\n\nuse rand::Rng;\n\n#[inline(never)]\nfn is_full_moon() -&gt; bool {\n    rand::thread_rng().gen()\n}\n\nfn may_return_none() -&gt; Option&lt;i32&gt; {\n    if is_full_moon() { None } else { Some(1) }\n}\n\n#[inline(never)]\nfn usage() {\n    let optional = may_return_none();\n    match optional {\n        None =&gt; unsafe { asm!(\"nop\") },\n        Some(v) =&gt; unsafe { asm!(\"nop; nop\") },\n    }\n}\n\nfn main() {\n    usage();\n}\n</code></pre>\n\n<p>Here, I've used inline assembly instead of printing because it doesn't clutter up the resulting output as much. Here's the assembly for <code>usage</code> when compiled in <strong>release mode</strong>:</p>\n\n<pre><code>    .section    .text._ZN10playground5usage17hc2760d0a512fe6f1E,\"ax\",@progbits\n    .p2align    4, 0x90\n    .type   _ZN10playground5usage17hc2760d0a512fe6f1E,@function\n_ZN10playground5usage17hc2760d0a512fe6f1E:\n    .cfi_startproc\n    pushq   %rax\n.Ltmp6:\n    .cfi_def_cfa_offset 16\n    callq   _ZN10playground12is_full_moon17h78e56c4ffd6b7730E\n    testb   %al, %al\n    je  .LBB1_2\n    #APP\n    nop\n    #NO_APP\n    popq    %rax\n    retq\n.LBB1_2:\n    #APP\n    nop\n    nop\n    #NO_APP\n    popq    %rax\n    retq\n.Lfunc_end1:\n    .size   _ZN10playground5usage17hc2760d0a512fe6f1E, .Lfunc_end1-_ZN10playground5usage17hc2760d0a512fe6f1E\n    .cfi_endproc\n</code></pre>\n\n<p>The quick rundown is:</p>\n\n<ol>\n<li>It calls the <code>is_full_moon</code> function (<code>callq   _ZN10playground12is_full_moon17h78e56c4ffd6b7730E</code>).</li>\n<li>The result of the random value is tested (<code>testb   %al, %al</code>)</li>\n<li>One branch goes to the <code>nop</code>, the other goes to the <code>nop; nop</code></li>\n</ol>\n\n<p>Everything else has been optimized out. The function <code>may_return_none</code> basically never exists; no <code>Option</code> was ever created, the value of <code>1</code> was never materialized.</p>\n\n<p>I'm sure that various people have different opinions, but <strong>I</strong> don't think I could have written this any more optimized.</p>\n\n<hr>\n\n<p>Likewise, if we use the value in the <code>Some</code> (which I changed to 42 to find easier):</p>\n\n<pre><code>Some(v) =&gt; unsafe { asm!(\"nop; nop\" : : \"r\"(v)) },\n</code></pre>\n\n<p>Then the value is inlined in the branch that uses it:</p>\n\n<pre><code>    .section    .text._ZN10playground5usage17hc2760d0a512fe6f1E,\"ax\",@progbits\n    .p2align    4, 0x90\n    .type   _ZN10playground5usage17hc2760d0a512fe6f1E,@function\n_ZN10playground5usage17hc2760d0a512fe6f1E:\n    .cfi_startproc\n    pushq   %rax\n.Ltmp6:\n    .cfi_def_cfa_offset 16\n    callq   _ZN10playground12is_full_moon17h78e56c4ffd6b7730E\n    testb   %al, %al\n    je  .LBB1_2\n    #APP\n    nop\n    #NO_APP\n    popq    %rax\n    retq\n.LBB1_2:\n    movl    $42, %eax  ;; Here it is\n    #APP\n    nop\n    nop\n    #NO_APP\n    popq    %rax\n    retq\n.Lfunc_end1:\n    .size   _ZN10playground5usage17hc2760d0a512fe6f1E, .Lfunc_end1-_ZN10playground5usage17hc2760d0a512fe6f1E\n    .cfi_endproc\n</code></pre>\n\n<hr>\n\n<p>However, nothing can \"optimize\" around a contractural obligation; if a function has to return an <code>Option</code>, <em>it has to return an <code>Option</code></em>:</p>\n\n<pre><code>#[inline(never)]\npub fn may_return_none() -&gt; Option&lt;i32&gt; {\n    if is_full_moon() { None } else { Some(42) }\n}\n</code></pre>\n\n<p>This makes some Deep Magic assembly:</p>\n\n<pre><code>    .section    .text._ZN10playground15may_return_none17ha1178226d153ece2E,\"ax\",@progbits\n    .p2align    4, 0x90\n    .type   _ZN10playground15may_return_none17ha1178226d153ece2E,@function\n_ZN10playground15may_return_none17ha1178226d153ece2E:\n    .cfi_startproc\n    pushq   %rax\n.Ltmp6:\n    .cfi_def_cfa_offset 16\n    callq   _ZN10playground12is_full_moon17h78e56c4ffd6b7730E\n    movabsq $180388626432, %rdx\n    leaq    1(%rdx), %rcx\n    testb   %al, %al\n    cmovneq %rdx, %rcx\n    movq    %rcx, %rax\n    popq    %rcx\n    retq\n.Lfunc_end1:\n    .size   _ZN10playground15may_return_none17ha1178226d153ece2E, .Lfunc_end1-_ZN10playground15may_return_none17ha1178226d153ece2E\n    .cfi_endproc\n</code></pre>\n\n<p>Let's hope I get this right...</p>\n\n<ol>\n<li>Load the 64-bit value 0x2A00000000 to %rdx. 0x2A is 42. This is our <code>Option</code> being built; it's the <code>None</code> variant.</li>\n<li>Load %rdx + 1 into %rcx. This is the <code>Some</code> variant.</li>\n<li>We test the random value</li>\n<li>Depending on the result of the test, move the invalid value to %rcx or not</li>\n<li>Move %rcx to %rax - the return register</li>\n</ol>\n\n<p>The main point here is that regardless of optimization, a function that says it's going to return data in a specific format has to do so. Only when it's inlined with other code is it valid to remove that abstraction.</p>\n"}], "owner": {"reputation": 109956, "user_id": 159145, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/r8ryC.png?s=128&g=1", "display_name": "Dai", "link": "https://stackoverflow.com/users/159145/dai"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 893, "favorite_count": 0, "answer_count": 2, "score": 8, "last_activity_date": 1490933900, "creation_date": 1490917964, "last_edit_date": 1490921359, "question_id": 43130192, "link": "https://stackoverflow.com/questions/43130192/in-rust-is-option-compiled-to-a-runtime-check-or-an-instruction-jump", "title": "In Rust, is Option compiled to a runtime check or an instruction jump?", "body": "<p>In Rust, <code>Option</code> is defined as:</p>\n\n<pre><code>pub enum Option&lt;T&gt; {\n    None,\n    Some(T),\n}\n</code></pre>\n\n<p>Used like so:</p>\n\n<pre><code>fn may_return_none() -&gt; Option&lt;i32&gt; {\n    if is_full_moon {\n        None\n    } else {\n        Some(1)\n    }\n}\n\nfn main() {\n    let optional = may_return_none();\n    match optional {\n        None =&gt; println!(\"None\"),\n        Some(v) =&gt; println!(\"Some\"),\n    }\n}\n</code></pre>\n\n<p>I'm not familiar with Rust internals, but initially I assumed it might work similar to <code>Nullable</code> in .NET, so the compiled logic of my above Rust code would be like so:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>// occupies `sizeof(T) + 1` memory space, possibly more depending on `Bool`'s alignment, so `Nullable&lt;Int32&gt;` consumes 5 bytes.\nstruct Nullable&lt;T&gt; {\n    Bool hasValue;\n    T value;\n}\n\nNullable&lt;Int32&gt; MayReturnNone() {\n    if( isFullMoon )\n        // as a `struct`, the Nullable&lt;Int32&gt; instance is returned via the stack\n        return Nullable&lt;Int32&gt;() { HasValue = false }\n    else\n        return Nullable&lt;Int32&gt;() { HasValue = true, Value = 1 }\n}\n\nvoid Test() {\n    Nullable&lt;Int32&gt; optional = may_return_none();\n    if( !optional.HasValue ) println(\"None\");\n    else                     println(\"Some\");\n}\n</code></pre>\n\n<p>However this isn't a zero-cost abstraction because of the space required for the <code>Bool hasValue</code> flag - and Rust makes a point of providing zero-cost abstractions.</p>\n\n<p>I realise that <code>Option</code> could be implemented via a direct return-jump by the compiler, though it would need the exact jump-to values to be provided as arguments on the stack - as though you can push multiple return addresses:</p>\n\n<p>(Psuedocode)</p>\n\n<pre><code>mayReturnNone(returnToIfNone, returnToIfHasValue) {\n\n    if( isFullMoon ) {\n        cleanup-current-stackframe\n        jump-to returnToIfNone\n    else {\n        cleanup-current-stackframe\n        push-stack 1\n        jump-to returnToIfHasValue\n    }\n\ntest() {\n\n    mayReturnNone( instructionAddressOf( ifHasValue ), instructionAddressOf( ifNoValue ) )\nifHasValue:\n    println(\"Some\")\nifNoValue:\n    println(\"None\")\n}\n</code></pre>\n\n<p>Is this how it's implemented? This approach also works for other <code>enum</code> types in Rust - but this specific application I've demonstrated is very brittle and breaks if you want to execute code in-between the call to <code>mayReturnNone</code> and the <code>match</code> statement, for example (as <code>mayReturnNone</code> will jump directly to the <code>match</code>, skipping intermediate instructions).</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1490912484, "post_id": 43129253, "comment_id": 73337296, "body": "Why do I have to use <code>.to_string()</code> in your last example? If I use <code>.to_owned</code> I still end up with a Vec&lt;&amp;str&gt; so you&#39;re definitely onto something..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1490912586, "last_edit_date": 1490912586, "creation_date": 1490911927, "answer_id": 43129253, "question_id": 43129131, "link": "https://stackoverflow.com/questions/43129131/create-vecstring-from-literal/43129253#43129253", "title": "Create Vec&lt;String&gt; from literal", "body": "<blockquote>\n  <p>if you ignore the part with <code>split_whitespace</code></p>\n</blockquote>\n\n<p>Yes, except you cannot ignore this part. <a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace\" rel=\"noreferrer\">The docs for <code>split_whitespace</code></a> state (emphasis mine):</p>\n\n<blockquote>\n  <p>The <strong>iterator returned</strong></p>\n</blockquote>\n\n<p><code>split_whitespace</code> returns an <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\" rel=\"noreferrer\">iterator</a> over the pieces of the string that were separated by whitespace, and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map\" rel=\"noreferrer\"><code>map</code> is a method on <code>Iterator</code></a>.</p>\n\n<p>A <code>Vec</code> is not an iterator. You can see that <code>Vec</code> does not implement it's own <code>map</code> method:</p>\n\n<blockquote>\n  <p>no method named <code>map</code> found for type <code>std::vec::Vec&lt;&amp;str&gt;</code></p>\n</blockquote>\n\n<p>And the compiler tries to suggest what you <em>might</em> have meant, but weren't quite achieving:</p>\n\n<blockquote>\n  <p>note: the method <code>map</code> exists but the following trait bounds were not satisfied:</p>\n</blockquote>\n\n<p>You can get an iterator from a <code>Vec</code> by calling <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter\" rel=\"noreferrer\"><code>Vec::iter</code></a> or <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.into_iter\" rel=\"noreferrer\"><code>into_iter</code></a>:</p>\n\n<pre><code>fn main() {\n    let options: Vec&lt;String&gt; = vec![\"a\", \"b\", \"c\"].into_iter().map(|s| s.to_owned()).collect();\n}\n</code></pre>\n\n<hr>\n\n<p>However, there's no need to allocate two vectors here, an array and a vector is more efficient:</p>\n\n<pre><code>let options: Vec&lt;_&gt; = [\"a\", \"b\", \"c\"].iter().map(|s| s.to_string()).collect();\n</code></pre>\n\n<p>An <a href=\"https://doc.rust-lang.org/std/slice/struct.Iter.html\" rel=\"noreferrer\">iterator over a slice</a> returns references (<code>&amp;T</code>) to the elements in the slice. Since each element is already a <code>&amp;str</code>, the type of <code>s</code> is a <code>&amp;&amp;str</code>. Calling <code>to_owned</code> on a reference to a reference simply clones <em>the reference</em>. You could also have said <code>.map(|&amp;s| s.to_owned())</code>, which <em>dereferences</em> the value once, producing a <code>&amp;str</code>. Calling <code>to_owned</code> on a <code>&amp;str</code> allocates a <code>String</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1500303787, "post_id": 45145246, "comment_id": 77264291, "body": "@Shepmaster Thanks, I searched for a simple syntax. The <code>as</code> keyword is still mysterious for me. I do not know when I can use it because <code>From</code>/<code>Into</code> do not permit to use it."}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 2, "last_activity_date": 1500303815, "last_edit_date": 1500303815, "creation_date": 1500297093, "answer_id": 45145246, "question_id": 43129131, "link": "https://stackoverflow.com/questions/43129131/create-vecstring-from-literal/45145246#45145246", "title": "Create Vec&lt;String&gt; from literal", "body": "<p>If I had to create vectors of <code>String</code>s repeatedly, I would use a macro:</p>\n\n<pre><code>macro_rules! vec_of_strings {\n    // match a list of expressions separated by comma:\n    ($($str:expr),*) =&gt; ({\n        // create a Vec with this list of expressions,\n        // calling String::from on each:\n        vec![$(String::from($str),)*] as Vec&lt;String&gt;\n    });\n}\n\nfn main() {\n    let v1 = vec_of_strings![];\n    let v2 = vec_of_strings![\"hello\", \"world\", \"!\"];\n\n    println!(\"{:?}\", v1);\n    println!(\"{:?}\", v2);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[]\n[\"hello\", \"world\", \"!\"]\n</code></pre>\n"}], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4100, "favorite_count": 2, "accepted_answer_id": 43129253, "answer_count": 2, "score": 5, "last_activity_date": 1500303815, "creation_date": 1490911306, "last_edit_date": 1490912292, "question_id": 43129131, "link": "https://stackoverflow.com/questions/43129131/create-vecstring-from-literal", "title": "Create Vec&lt;String&gt; from literal", "body": "<p>I want to do</p>\n\n<pre><code>fn main() {\n    let options: Vec&lt;String&gt; = vec![\"a\", \"b\", \"c\"].map(|s| s.to_owned()).collect();\n}\n</code></pre>\n\n<p>because this seems like the easiest way to get a vector of owned <code>String</code>s, but I get hit with this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: no method named `map` found for type `std::vec::Vec&lt;&amp;str&gt;` in the current scope\n...\nnote: the method `map` exists but the following trait bounds were not satisfied:\n`std::vec::Vec&lt;&amp;str&gt; : std::iter::Iterator`, `[&amp;str] : std::iter::Iterator`\n</code></pre>\n\n<p>I don't see where the need for the <code>[&amp;str] : std::iter::Iterator</code> bound comes from. if you ignore the part with <code>split_whitespace</code> I'm basically doing what answers on <a href=\"https://users.rust-lang.org/t/rust-how-to-convert-vector-of-raw-strings-to-struct-string/6024\" rel=\"noreferrer\">this question</a> recommend.</p>\n\n<p>How should I be generating this vector?</p>\n"}, {"tags": ["objective-c", "cocoa", "rust", "ffi"], "answers": [{"comments": [{"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1491218090, "post_id": 43148508, "comment_id": 73438971, "body": "Thanks, indeed it works! I tried to create <code>NSAutoreleasePool</code> via <code>cocoa-rs</code> bindings, but it turned out, that they never call to <code>release</code>, so creation <code>NSAutoreleasePool</code> leaked memory by itself."}, {"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1491218150, "post_id": 43148508, "comment_id": 73439038, "body": "I&#39;m just wondering, why don&#39;t we call <code>autorelease</code> for <code>NSBundle::bundleWithUrl()</code>? According to documentation, the function may allocate and initialize memory, doesn&#39;t it mean that we have to call <code>autorelease</code> on it?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 1, "creation_date": 1491218620, "post_id": 43148508, "comment_id": 73439369, "body": "@ScienceSE <code>NSBundle::bundleWithUrl()</code> returns an object that is already <code>-autorelease</code>d. Calling <code>-autorelease</code> again will double-free it."}, {"owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "edited": false, "score": 0, "creation_date": 1491226339, "post_id": 43148508, "comment_id": 73445073, "body": "Thanks, the problem is now solved (I&#39;m now using <code>NSAutoreleasePool</code> from <code>cocoa-rs</code> and <code>drain</code> explicitly). I&#39;m just wondering why did not it work when I tried to call <code>release</code> manually on each object. Do the autoreleased objects ignore <code>release</code>?"}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 4, "last_activity_date": 1491229840, "last_edit_date": 1495542351, "creation_date": 1490989322, "answer_id": 43148508, "question_id": 43127265, "link": "https://stackoverflow.com/questions/43127265/the-correct-way-to-manage-cocoa-memory-when-working-with-objective-c-from-rust/43148508#43148508", "title": "The correct way to manage cocoa memory when working with Objective-C from Rust", "body": "<p>Since Objective-C ARC is not implemented in <code>objc-rs</code>/<code>cocoa-rs</code>, you need to follow the <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html\" rel=\"nofollow noreferrer\">memory management rule</a>, in particular for this question: <em>You must not relinquish ownership of an object you do not own</em>.  That is you should not call <code>autorelease()</code>, <code>release()</code> or <code>dealloc()</code> on any of the returned objects.</p>\n\n<p>What you should do is to <a href=\"https://stackoverflow.com/questions/10121345/autoreleasepool-in-loop-or-loop-in-autoreleasepool\">create an NSAutoreleasePool inside the function</a>, <em>and don't touch anything else</em>. The pool will free all those objects when it is released.</p>\n\n<pre><code>pub fn enumerate_apps()-&gt; Vec&lt;Rc&lt;AppInfo&gt;&gt; {\n    let mut apps_list = Vec::new();\n    unsafe {\n        let autoreleasePool: *mut Object = msg_send![class(\"NSAutoreleasePool\"), new];\n\n        // ...\n        // all code unchanged\n        // ...\n\n        msg_send![autoreleasePool, release];\n    }\n    apps_list\n}\n</code></pre>\n\n<hr>\n\n<p>Why calling <code>autorelease()</code>/<code>release()</code>/<code>dealloc()</code> on <code>bundle_url</code>/<code>app_bundle</code>/<code>info_dict</code> cannot decrease memory? Because it is not just these objects leaking memory. The biggest consumption is the <code>running_apps</code> object. </p>\n\n<p>And why explicitly calling <code>autorelease()</code>/<code>release()</code>/<code>dealloc()</code> is wrong? Let's review the ObjC memory management rules, and compare it with normal Rust code (I assume you know how the <code>Rc&lt;T&gt;</code> type works):</p>\n\n<ol>\n<li><p><strong>You own any object you create</strong> \u2014 You create an object using a method whose name begins with \u201calloc\u201d, \u201cnew\u201d, \u201ccopy\u201d, or \u201cmutableCopy\u201d</p>\n\n<ul>\n<li><p>You could think of it like:</p>\n\n<pre><code>// Objective-C code:\nNSMutableString* s = [NSMutableString new];\nNSMutableString* t = [s mutableCopy];\n\n// Similar to this in Rust:\nlet s: Rc&lt;NSMutableString&gt; = Rc::new(NSMutableString::new());\nlet t: Rc&lt;NSMutableString&gt; = Rc::new(s.mutableCopy());\n</code></pre>\n\n<p>Your code never called any method begins with \"alloc\", \"new\", \"copy\" or \"mutableCopy\", so you don't own any of them. This naming convention is followed by all ObjC APIs.</p></li>\n</ul></li>\n<li><p><strong>You can take ownership of an object using retain</strong>.</p>\n\n<ul>\n<li><p>This is similar to having an object <code>a: Rc&lt;T&gt;</code>, and then you get a new reference by calling <code>b = Rc::clone(&amp;a)</code>. Now <code>b</code> also \"owns\" the original object through reference-counting:</p>\n\n<pre><code>// Objective-C code:\nNSMutableString* u = [t retain];\n\n// Similar to this in Rust:\nlet u: Rc&lt;NSMutableString&gt; = Rc::clone(&amp;u);\n</code></pre>\n\n<p>But you never called <code>retain</code>, so still you don't own any objects.</p></li>\n</ul></li>\n<li><p><strong>When you no longer need it, you must relinquish ownership of an object you own</strong> \u2014 You relinquish ownership of an object by sending it a <code>release</code> message or an <code>autorelease</code> message.</p>\n\n<ul>\n<li><p>In terms of Rust, sending a <code>-release</code> message is equivalent to dropping the Rc object.</p>\n\n<pre><code>// Objective-C code:\n[u release];\n\n// Similar to this in Rust:\ndrop(u);\n</code></pre></li>\n<li><p><code>-autorelease</code> transfers the ownership to the autorelease pool. The most recently allocated NSAutoreleasePool will be found, the ownership of the object be moved into that pool, and we only keep a borrowed reference<sup>(*)</sup>.</p>\n\n<pre><code>// Objective-C code:\nNSMutableString* v = [t autorelease];\n\n// Similar to this in Rust:\nlet pool: &amp;NSAutoreleasePool = find_top_autorelease_pool()?;\nlet v: &amp;NSMutableString = pool.add_object(t);\n// `t` is passed-by-value, so `pool` now owns `t`.\n// `pool` returns a borrowed reference, \n// so that we can still access the memory pointed to by `t`,\n// but we no longer own it.\n</code></pre></li>\n</ul></li>\n<li><p><strong>You must not relinquish ownership of an object you do not own</strong>.</p>\n\n<ul>\n<li>That is you can never drop the memory through a borrowed reference. Well in Rust it is impossible but Objective-C doesn't have a borrow checker.</li>\n</ul></li>\n<li><p>Additionally, calling <code>-dealloc</code> is like explicitly invoking the destructor via <code>drop(*s)</code> in Rust. This bypasses the reference-counting mechanism and <a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html#//apple_ref/doc/uid/20000994-DontLinkElementID_4\" rel=\"nofollow noreferrer\">is explicitly discouraged</a>.</p></li>\n</ol>\n\n<p>Let's recap:</p>\n\n<ul>\n<li>None of the methods you called (<code>sharedWorkspace</code>/<code>runningApplications</code>/<code>objectAtIndex:</code>/<code>bundleURL</code>/<code>bundleWithURL:</code>/<code>infoDictionary</code>) begins with <code>alloc</code>/<code>new</code>/<code>copy</code>/<code>mutableCopy</code>.</li>\n<li>You never called <code>-retain</code>.</li>\n<li><em>That means everything you've got are borrowed</em>, by rules 1 and 2.</li>\n<li><em>That means you should never call <code>release()</code> or <code>autorelease()</code></em>, by rule 4.</li>\n</ul>\n\n<p>Calling <code>-release</code> or <code>-autorelease</code> on objects you don't own result in double-free. This may cause SEGFAULT, or no-op, or any undefined behavior.</p>\n\n<p>Why the program leaks like a sieve if we don't provide an NSAutoreleasePool? The <code>runningApplications</code>/<code>bundleWithURL:</code> methods do allocate objects, but adhering to the Cocoa memory management rule, they call <code>-autorelease</code> internally to ensure you don't get owned objects. But if we don't allocate any pools, <code>-autorelease</code> can transfer the ownership to nowhere, i.e. those auto-released objects become unowned by anyone, and nobody has the ownership to free them, and thus leaked.</p>\n\n<hr>\n\n<p>(*): The analogy is not perfect, because you could get a new ownership with <code>[[x autorelease] retain]</code>. But this detail doesn't matter here.</p>\n"}], "owner": {"reputation": 575, "user_id": 1408421, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/1b26a9d9a04980f0f366addb50cec23a?s=128&d=identicon&r=PG", "display_name": "ScienceSE", "link": "https://stackoverflow.com/users/1408421/sciencese"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 441, "favorite_count": 1, "accepted_answer_id": 43148508, "answer_count": 1, "score": 1, "last_activity_date": 1491229840, "creation_date": 1490903975, "question_id": 43127265, "link": "https://stackoverflow.com/questions/43127265/the-correct-way-to-manage-cocoa-memory-when-working-with-objective-c-from-rust", "title": "The correct way to manage cocoa memory when working with Objective-C from Rust", "body": "<p>I'm struggling with one issue related to the cocoa foundation memory management. Basically I have a project, written in Rust and I'm using <code>cocoa-rs</code> and <code>objc-rs</code> to interact with Objective-C. I'm familiar with memory management in CoreFoundation and CocoaFoundation (I've already read the corresponding articles in documentation). I did not have any memory issues when I worked with CoreFoundation functions, but I'm having a lot of problems when I use CocoaFoundation related stuff, it seems that getting any objects from CocoaFoundation leaks memory.</p>\n\n<p>Here is the simplified version of one of the functions which leads to a memory memory:</p>\n\n<pre><code>pub fn enumerate_apps()-&gt; Vec&lt;Rc&lt;AppInfo&gt;&gt; {\n    let mut apps_list = Vec::new();\n    unsafe {\n        let shared_workspace: *mut Object = msg_send![class(\"NSWorkspace\"), sharedWorkspace];\n        let running_apps: *mut Object = msg_send![shared_workspace, runningApplications];\n\n        let apps_count = msg_send![running_apps, count];\n        for i in 0..apps_count {\n            let app: *mut Object = msg_send![running_apps, objectAtIndex:i];\n\n            // Those ones are not used at the moment, but I actually need them,\n            // I just removed all business logic to keep the example simple and compilable\n            // to demonstrate the problem.\n            let bundle_url: *mut Object = msg_send![app, bundleURL];\n            let app_bundle: *mut Object = msg_send![class(\"NSBundle\"), bundleWithURL:bundle_url];\n            let info_dict: *mut Object = msg_send![app_bundle, infoDictionary];\n\n            apps_list.push(Rc::new(AppInfo {\n                pid: msg_send![app, processIdentifier],\n            }));\n        }\n    }\n    apps_list\n}\n</code></pre>\n\n<p>I tried to call this function inside a loop to make the memory leak visible:</p>\n\n<pre><code>fn main() {\n    loop {\n        for i in 0..200 {\n            enumerate_apps();\n        }\n        std::thread::sleep(std::time::Duration::from_millis(5000));\n    }\n}\n</code></pre>\n\n<p>When I run the application, I can see that it consumes more and more memory over time.</p>\n\n<p>My question is: why? What is the correct way to manage memory in a such FFI code? If I run the same code in XCode, using the plain Objective-C, it works fine and seems that it does not leak memory. Well, the reason why the memory is not leaked in XCode is that ARC is enabled by default. To my knowledge ARC is not enabled when we work with Objective-C from Rust in a such manner, so basically it means that we have to manage memory ourselves. Commenting 3 lines containing <code>bundle_url</code>, <code>app_bundle</code>, <code>info_dict</code> creates an illusion that the memory leak is gone (without commenting them, the process leaks a couple megabytes of memory every 2 seconds), but actually the memory is still leaked, but not that fast.</p>\n\n<p>What I tried:</p>\n\n<ol>\n<li>I tried to create an <code>NSAutoreleasePool</code> in the beginning of the function and call <code>autorelease()</code> for <code>bundle_url</code> and <code>app_bundle</code> upon creation. Did not help, the memory it still leaked.</li>\n<li>I tried to call <code>release()</code> manually on <code>bundle_url</code> and <code>app_bundle</code>, did not have any effect.</li>\n<li>Even tried to call <code>dealloc()</code> on them (which I believe is a wrong way), which also did not help to solve my problem.</li>\n</ol>\n\n<p>Am I doing something wrong? Or is it a bug in <code>objc-rs</code> (I guess this is very unlikely, but who knows)?</p>\n"}, {"tags": ["reference", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490898672, "post_id": 43125429, "comment_id": 73330434, "body": "See also <a href=\"http://stackoverflow.com/q/41413336/155423\">Do all primitive types implement the Copy trait?</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490898749, "post_id": 43125429, "comment_id": 73330487, "body": "See also <a href=\"http://stackoverflow.com/q/37381212/155423\">Copy/move semantics documentation of &amp;T/&amp;mut T types itself</a>"}], "answers": [{"comments": [{"owner": {"reputation": 812, "user_id": 70064, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ead6735753becb8eb0480996f2eeecc1?s=128&d=identicon&r=PG&f=1", "display_name": "Exander", "link": "https://stackoverflow.com/users/70064/exander"}, "edited": false, "score": 0, "creation_date": 1490898033, "post_id": 43125450, "comment_id": 73330071, "body": "But &amp;mut T is moved, right?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 812, "user_id": 70064, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ead6735753becb8eb0480996f2eeecc1?s=128&d=identicon&r=PG&f=1", "display_name": "Exander", "link": "https://stackoverflow.com/users/70064/exander"}, "edited": false, "score": 0, "creation_date": 1490898480, "post_id": 43125450, "comment_id": 73330329, "body": "@Exander: Yes, this is necessary to ensure <b>Aliasing XOR Mutability</b>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490898813, "post_id": 43125450, "comment_id": 73330521, "body": "Thoughts on marking this as a duplicate to the second comment I added on OP?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490899586, "post_id": 43125450, "comment_id": 73330992, "body": "@Shepmaster: Does look like a dupe indeed, I&#39;ll leave you the honour since you hunted it down."}, {"owner": {"reputation": 812, "user_id": 70064, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ead6735753becb8eb0480996f2eeecc1?s=128&d=identicon&r=PG&f=1", "display_name": "Exander", "link": "https://stackoverflow.com/users/70064/exander"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490899737, "post_id": 43125450, "comment_id": 73331075, "body": "@Shepmaster: I agree, and thank you all for your explanations."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1490898038, "last_edit_date": 1490898038, "creation_date": 1490897669, "answer_id": 43125450, "question_id": 43125429, "link": "https://stackoverflow.com/questions/43125429/are-reference-values-copied-in-rust/43125450#43125450", "title": "Are reference values copied in Rust?", "body": "<p>Yes, this is correct.</p>\n\n<p>In Rust terms, <code>&amp;T</code> is <code>Copy</code>, which means that it can be copied bitwise without transferring ownership.</p>\n"}], "owner": {"reputation": 812, "user_id": 70064, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/ead6735753becb8eb0480996f2eeecc1?s=128&d=identicon&r=PG&f=1", "display_name": "Exander", "link": "https://stackoverflow.com/users/70064/exander"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 499, "favorite_count": 0, "closed_date": 1490899751, "answer_count": 1, "score": 3, "last_activity_date": 1490898858, "creation_date": 1490897599, "last_edit_date": 1490898030, "question_id": 43125429, "link": "https://stackoverflow.com/questions/43125429/are-reference-values-copied-in-rust", "closed_reason": "Duplicate", "title": "Are reference values copied in Rust?", "body": "<p>Am I correct to assume that, for the following code</p>\n\n<pre><code>let a = vec![1, 2, 3];\nlet b = &amp;a;\nlet c = b;\n</code></pre>\n\n<p>The memory presentation will be something like this, assuming the value of <code>b</code> is \"B\"?</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  _            _\nb|B|         c|B|\n  |____________|\n  |\n  V\n  _________\na|_________|\n</code></pre>\n\n<p>I'm only asking about immutable references, as there can be only 1 mutable reference, as far as I remember.</p>\n"}, {"tags": ["utf-8", "stream", "rust"], "comments": [{"owner": {"reputation": 29444, "user_id": 3072788, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/220a45c2fcff7e7358d144551b116205?s=128&d=identicon&r=PG&f=1", "display_name": "Alec", "link": "https://stackoverflow.com/users/3072788/alec"}, "edited": false, "score": 2, "creation_date": 1490888805, "post_id": 43122335, "comment_id": 73324300, "body": "UTF-8 is a way of encoding strings using bytes. As with most encodings, not every sequence of bytes is going to correspond to something you can interpret as a UTF-8 string. Since your file is an image, you probably just want to read the raw bytes. <code>bytes</code> and <code>read_to_end</code> could help."}], "answers": [{"comments": [{"owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 0, "creation_date": 1490891964, "post_id": 43123023, "comment_id": 73326432, "body": "thanks for your answer. I used your example but now I get this error : <code>invalid utf-8: invalid byte near index 0</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 0, "creation_date": 1490892334, "post_id": 43123023, "comment_id": 73326692, "body": "@smoqadam that&#39;s very difficult to believe. There is no longer any code shown that tries to make arbitrary bytes into UTF-8. Perhaps you have code that takes the <code>Vec</code> returned and tries to make it into a <code>String</code> again? It&#39;s still the same set of bytes; they can <b>never</b> be transformed to UTF-8 in their present state."}, {"owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 0, "creation_date": 1490893369, "post_id": 43123023, "comment_id": 73327345, "body": "Yes, I need to convert it to string and send to browser. how can do that?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 0, "creation_date": 1490893687, "post_id": 43123023, "comment_id": 73327524, "body": "@smoqadam you <i>cannot</i> treat the raw data of an image as a UTF-8 string. The good news is that <a href=\"https://www.w3.org/Protocols/HTTP/1.0/spec.html\" rel=\"nofollow noreferrer\">the HTTP 1.0 protocol</a> (as well as 1.1, likely 2.0) does not require that the data sent in the body of the request / response be a UTF-8 string. It&#39;s perfectly valid to send back raw bytes, so long as the appropriate headers are specified."}, {"owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 0, "creation_date": 1490906212, "post_id": 43123023, "comment_id": 73334536, "body": "thanks again. I&#39;m new to rust and confused. would you give me an example how can I read an image and return it to the browser?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "edited": false, "score": 1, "creation_date": 1490946233, "post_id": 43123023, "comment_id": 73347885, "body": "@smoqadam it depends a lot on the libraries you are using. The last comment from Shepmaster is pretty clear, but it requires a bit of background knowledge about the way HTTP works. Maybe you should consider reading about the HTTP protocol?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 14, "last_activity_date": 1490890500, "last_edit_date": 1490890500, "creation_date": 1490890050, "answer_id": 43123023, "question_id": 43122335, "link": "https://stackoverflow.com/questions/43122335/what-does-stream-did-not-contain-valid-utf-8-mean/43123023#43123023", "title": "What does &quot;Stream did not contain valid UTF-8&quot; mean?", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noreferrer\">documentation for <code>String</code></a> describes it as:</p>\n\n<blockquote>\n  <p>A UTF-8 encoded, growable string.</p>\n</blockquote>\n\n<p>The <a href=\"https://en.wikipedia.org/wiki/UTF-8\" rel=\"noreferrer\">Wikipedia definition of UTF-8</a> will give you a great deal of background on what that is. The short version is that computers use a unit called a <a href=\"https://en.wikipedia.org/wiki/Byte\" rel=\"noreferrer\">byte</a> to represent data. Unfortunately, these blobs of data represented with bytes have no intrinsic meaning; that has to be provided from outside. UTF-8 is one way of interpreting a sequence of bytes, as are file formats like <a href=\"https://en.wikipedia.org/wiki/JPEG\" rel=\"noreferrer\">JPEG</a>.</p>\n\n<p>UTF-8, like most text encodings, has specific requirements and sequences of bytes that are <em>valid</em> and <em>invalid</em>. Whatever image you have tried to load contains a sequence of bytes that cannot be interpreted as a UTF-8 string; this is what the error message is telling you.</p>\n\n<hr>\n\n<p>To fix it, you should not use a <code>String</code> to hold arbitrary collections of bytes. In Rust, that's better represented by a <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noreferrer\"><code>Vec</code></a>:</p>\n\n<pre><code>fn read_file(mut file_name: String) -&gt; Vec&lt;u8&gt; {\n    file_name = file_name.replace(\"/\", \"\");\n    if file_name.is_empty() {\n        file_name = String::from(\"index.html\");\n    }\n\n    let path = Path::new(&amp;file_name);\n    if !path.exists() {\n        return String::from(\"Not Found!\").into();\n    }\n    let mut file_content = Vec::new();\n    let mut file = File::open(&amp;file_name).expect(\"Unable to open file\");\n    file.read_to_end(&amp;mut file_content).expect(\"Unable to read\");\n    file_content\n}\n</code></pre>\n\n<hr>\n\n<p>To evangelize a bit, this is a great aspect of why Rust is a nice language. Because there is a type that represents \"a set of bytes that is guaranteed to be a valid UTF-8 string\", we can write safer programs since we know that this invariant will always be true. We don't have to keep checking throughout our program to \"make sure\" it's still a string.</p>\n"}, {"tags": [], "owner": {"reputation": 587, "user_id": 2737008, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/ad6f47b0d87276d629d40bf05f406f0f?s=128&d=identicon&r=PG&f=1", "display_name": "rbansal", "link": "https://stackoverflow.com/users/2737008/rbansal"}, "is_accepted": false, "score": 0, "last_activity_date": 1615745969, "creation_date": 1615745969, "answer_id": 66628033, "question_id": 43122335, "link": "https://stackoverflow.com/questions/43122335/what-does-stream-did-not-contain-valid-utf-8-mean/66628033#66628033", "title": "What does &quot;Stream did not contain valid UTF-8&quot; mean?", "body": "<p>If you are getting the error for reading a nonbinary file like config file etc on windows. It might be because of the Type property in the windows.\n<a href=\"https://i.stack.imgur.com/lbtd5.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/lbtd5.png\" alt=\"enter image description here\" /></a></p>\n<p>Make sure that Type is set to File not to Text Document.\nThe Yellow marked file extension will work but the green one will throw the above error.</p>\n"}], "owner": {"reputation": 1929, "user_id": 1103397, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/90a1f2332b047409597c5f61b90d5d67?s=128&d=identicon&r=PG", "display_name": "Saeed M.", "link": "https://stackoverflow.com/users/1103397/saeed-m"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6419, "favorite_count": 0, "accepted_answer_id": 43123023, "answer_count": 2, "score": 5, "last_activity_date": 1615745969, "creation_date": 1490888212, "last_edit_date": 1490889656, "question_id": 43122335, "link": "https://stackoverflow.com/questions/43122335/what-does-stream-did-not-contain-valid-utf-8-mean", "title": "What does &quot;Stream did not contain valid UTF-8&quot; mean?", "body": "<p>I'm creating a simple HTTP server. I need to read the requested image and send it to browser. I'm using this code: </p>\n\n<pre><code>fn read_file(mut file_name: String) -&gt; String {\n    file_name = file_name.replace(\"/\", \"\");\n    if file_name.is_empty() {\n        file_name = String::from(\"index.html\");\n    }\n\n    let path = Path::new(&amp;file_name);\n    if !path.exists() {\n        return String::from(\"Not Found!\");\n    }\n    let mut file_content = String::new();\n    let mut file = File::open(&amp;file_name).expect(\"Unable to open file\");\n    let res = match file.read_to_string(&amp;mut file_content) {\n        Ok(content) =&gt; content,\n        Err(why) =&gt; panic!(\"{}\",why),\n    };\n\n    return file_content;\n}\n</code></pre>\n\n<p>This works if the requested file is text based, but when I want to read an image I get the following message:</p>\n\n<blockquote>\n  <p>stream did not contain valid UTF-8</p>\n</blockquote>\n\n<p>What does it mean and how to fix it?</p>\n"}, {"tags": ["enums", "formatting", "rust"], "comments": [{"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490866382, "post_id": 43113790, "comment_id": 73307381, "body": "I&#39;m primarily interested in solving the <i>easier</i> of the two problems. If we can figure out the latter of the formatting options, that&#39;s just icing."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1490867193, "post_id": 43113790, "comment_id": 73308012, "body": "For future reference: the exact reason for, and solution to, your problem is right there in the error message.  The first line is telling you that <code>T</code> is missing the necessary constraint, and the later notes suggest the form you can use to introduce it."}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1490867337, "post_id": 43113790, "comment_id": 73308101, "body": "DK in hindsight it makes sense. But before seeing the accepted answer, I had no idea what those things even meant. Your comment is helpful nonetheless ^^"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1490867857, "post_id": 43113790, "comment_id": 73308524, "body": "Well, if you run the command it suggests (rustc --explain E0277), it prints out a fuller explanation and an example to show you what it means.  I bring this up just to make sure you are now aware that the information is there."}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1490868005, "post_id": 43113790, "comment_id": 73308634, "body": "Thanks, I really mean it. I&#39;m currently learning using repl.it/languages/rust buy I&#39;ll get rust installed tomorrow - promise \ud83d\ude05"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490878007, "post_id": 43113790, "comment_id": 73315687, "body": "Note that whatever tool you are using has a pretty old version of the Rust compiler. Newer versions have much clearer presentation of error messages, which I&#39;ve updated the post with. If you continue to use online resources, the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust playground</a> is a much better choice (or <a href=\"https://play.integer32.com/\" rel=\"nofollow noreferrer\">my alternative</a>, which allows crates)."}], "answers": [{"comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1490866499, "post_id": 43113863, "comment_id": 73307455, "body": "Also note that <code>x</code> changed to <code>ref x</code>."}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490867002, "post_id": 43113863, "comment_id": 73307861, "body": "Another helpful answer, aochagavia. Wanna take a swing at the secondary list display format?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1490867632, "post_id": 43113863, "comment_id": 73308341, "body": "Just wrote a function for that :)"}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490868201, "post_id": 43113863, "comment_id": 73308771, "body": "arigatou! You&#39;ve given me so many useful things to think about!"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 9, "last_activity_date": 1490877722, "last_edit_date": 1490877722, "creation_date": 1490866442, "answer_id": 43113863, "question_id": 43113790, "link": "https://stackoverflow.com/questions/43113790/how-to-implement-fmtdisplay-on-a-generically-typed-enum-in-rust/43113863#43113863", "title": "How to implement fmt::Display on a generically-typed enum in Rust?", "body": "<h2>Solving the compiler error</h2>\n\n<p>You are missing a trait bound. That is, you need to tell Rust that <code>T</code> can be displayed:</p>\n\n<pre><code>impl&lt;T: fmt::Display&gt; fmt::Display for List&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n            List::Empty =&gt; write!(f, \"()\"),\n            List::Cons(ref x, ref xs) =&gt; write!(f, \"({} {})\", x, xs),  \n        }\n    }\n}\n</code></pre>\n\n<p>Note the trait bound <code>T: fmt::Display</code>. This basically means: if <code>T</code> implements <code>fmt::Display</code>, then <code>List&lt;T&gt;</code> implements <code>fmt::Display</code> as well.</p>\n\n<h2>The icing on the cake</h2>\n\n<p>I am unsure whether you can get nice formatting with a recursive definition. Furthermore, Rust does not guarantee tail-call optimization, so there would always be the possibility of a stack overflow.</p>\n\n<p>An alternative definition could be:</p>\n\n<pre><code>fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n    write!(f, \"(\")?;\n    let mut temp = self;\n    while let List::Cons(ref x, ref xs) = *temp {\n        write!(f, \"{}\", x)?;\n\n        // Print trailing whitespace if there are more elements\n        if let List::Cons(_, _) = **xs {\n            write!(f, \" \")?;\n        }\n\n        temp = xs;\n    }\n\n    write!(f, \")\")\n}\n</code></pre>\n\n<p>Note the <code>?</code> after most <code>write!</code> macro invocations. It basically means: if this <code>write!</code> results in an error, return the error now. Otherwise, continue executing the function.</p>\n"}], "owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2159, "favorite_count": 0, "accepted_answer_id": 43113863, "answer_count": 1, "score": 3, "last_activity_date": 1490877722, "creation_date": 1490866243, "last_edit_date": 1490877673, "question_id": 43113790, "link": "https://stackoverflow.com/questions/43113790/how-to-implement-fmtdisplay-on-a-generically-typed-enum-in-rust", "title": "How to implement fmt::Display on a generically-typed enum in Rust?", "body": "<p>I have implemented my linked list using this recursive enum, but now I'd like to implement a custom display format for it</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\nenum List&lt;A&gt; {\n    Empty,\n    Cons(A, Box&lt;List&lt;A&gt;&gt;),\n}\n\nimpl&lt;T&gt; fmt::Display for List&lt;T&gt; {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        match *self {\n            List::Empty =&gt; write!(f, \"()\"),\n            List::Cons(x, ref xs) =&gt; write!(f, \"({} {})\", x, xs),  \n        }\n    }\n}\n</code></pre>\n\n<p><strong>Error</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `T: std::fmt::Display` is not satisfied\n  --&gt; src/main.rs:13:59\n   |\n13 |             List::Cons(x, ref xs) =&gt; write!(f, \"({} {})\", x, xs),  \n   |                                                           ^ the trait `std::fmt::Display` is not implemented for `T`\n   |\n   = help: consider adding a `where T: std::fmt::Display` bound\n   = note: required by `std::fmt::Display::fmt`\n</code></pre>\n\n<p><strong>Here's the rest of my code if that matters</strong></p>\n\n<pre><code>fn cons&lt;A&gt;(x: A, xs: List&lt;A&gt;) -&gt; List&lt;A&gt; {\n    return List::Cons(x, Box::new(xs));\n}\n\nfn len&lt;A&gt;(xs: &amp;List&lt;A&gt;) -&gt; i32 {\n    match *xs {\n        List::Empty =&gt; 0,\n        List::Cons(_, ref xs) =&gt; 1 + len(xs),\n    }\n}\n\nfn map&lt;A, B&gt;(f: &amp;Fn(&amp;A) -&gt; B, xs: &amp;List&lt;A&gt;) -&gt; List&lt;B&gt; {\n    match *xs {\n        List::Empty =&gt; List::Empty,\n        List::Cons(ref x, ref xs) =&gt; cons(f(x), map(f, xs)),\n    }\n}\n\nfn main() {\n    let xs = cons(1, cons(2, cons(3, List::Empty)));\n    println!(\"{}\", xs);\n    println!(\"{:?}\", len(&amp;xs));\n\n    let f = |x: &amp;i32| (*x) * (*x);\n    let ys = map(&amp;f, &amp;xs);\n    println!(\"{}\", ys);\n    println!(\"{}\", List::Empty);\n}\n</code></pre>\n\n<p><strong>Expected output</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(1 (2 (3 ())))\n3\n(1 (4 (9 ())))\n()\n</code></pre>\n\n<hr>\n\n<p><em>Really</em> what I'd like to see this, but I have absolutely no idea how I'd go about getting this kind of output using <code>fmt::Result</code></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>(1 2 3)\n3\n(1 4 9) \n()\n</code></pre>\n"}, {"tags": ["arguments", "rust", "type-promotion"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1490867842, "post_id": 43112693, "comment_id": 73308511, "body": "<i>&quot;until one needs a function with n arguments&quot;</i> \u2013 Did you consider writing a macro to generate the necessary traits on-demand?"}, {"owner": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1490896218, "post_id": 43112693, "comment_id": 73329027, "body": "I\u2019ve considered to use a macro, but I\u2019m curious if another solution exists."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490878181, "post_id": 43116958, "comment_id": 73315844, "body": "<i>et tu</i>, Matthieu? You&#39;ve switched to the block-style indent for where clauses?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490878929, "post_id": 43116958, "comment_id": 73316440, "body": "What&#39;s the difference of <code>Promote</code> and <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>From</code></a>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1490879676, "post_id": 43116958, "comment_id": 73317131, "body": "@Shepmaster: (1) I&#39;m trying to get used to this block-style indent thing, (2) I used <code>Promote</code> to demonstrate the concept because it was easier to hack in; it started a fairly bit different and I didn&#39;t realize it was now matching <code>Into</code> to be honest. I&#39;m also not sure it&#39;s exactly what the OP wants... or that type inference will not be insufficient."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490879871, "post_id": 43116958, "comment_id": 73317275, "body": "There&#39;s also a benefit in that <i>this crate</i> can then define promotions for standard library types, although I guess <code>From</code> is implemented for widening integer conversions (was it always?)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490880323, "post_id": 43116958, "comment_id": 73317622, "body": "@Shepmaster: I guess the main annoying point with <code>From</code> is around promoting to <code>usize</code>: it&#39;s only implemented for <code>u8</code> in case you would be fiddling around on an 8-bits architecture. So indeed, with a custom trait, you get the opportunity to convert to <code>usize</code> for more types... but it really an incidental property :)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1490880415, "post_id": 43116958, "comment_id": 73317702, "body": "Which also means you get to write code that&#39;s less portable ;-) As someone who wants to write Rust for the AVR, I&#39;m ok with that at times."}, {"owner": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490896365, "post_id": 43116958, "comment_id": 73329097, "body": "@MatthieuM. thank you for your answer. The problem I\u2019m facing consists of multiple nested function / trait method calls, of which each take the simple or promoted type as arguments. Evaluating the function is cheap for the simple type but expensive for the promoted/complex type. Thus, I would like to avoid the promotion if possible. I&#39;ll add an illustrative example to my question."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490897264, "post_id": 43116958, "comment_id": 73329641, "body": "@wiep: I think the modelling of <code>baz</code> is incorrect. You would need to have a different result type for <code>foo</code> and <code>bar</code>, and have <i>those</i> types be <code>Promote&lt;Result&gt;</code>. I&#39;m not surprised it came up, though. Time for v2..."}, {"owner": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490899065, "post_id": 43116958, "comment_id": 73330675, "body": "@MatthieuM. : you&#39;re right. <code>baz</code> might need two additional type parameters for the intermediate results that implement <code>Promote&lt;Result&gt;</code> and <code>Add</code> and for which <code>A, B: Promete&lt;IntermediateResultLeft&gt;</code> and <code>C, D: Promete&lt;IntermediateResultRight&gt;</code> is satisfied. But then the compiler might need a hint. <i>Time for v2...</i> does this mean i should ask a second question?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490899261, "post_id": 43116958, "comment_id": 73330791, "body": "@wiep: Nope, just that I needed some time to work on the second iteration of my solution; to be honest, I kinda knew it would be insufficient since the beginning... but I also knew the second version was a significantly bulkier one so just in case it would have been sufficient. I&#39;ve got it now, just let me edit it in."}, {"owner": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490951998, "post_id": 43116958, "comment_id": 73350982, "body": "@MatthieuM. v2 works nicely and is easily extensible for functions with more then two arguments. Thx! Of course it gets more tedious if more intermediate results are needed. I don&#39;t know how to introduce type aliases in where clauses, but you can use additional type parameter and assign them to the associated types. this cleans things a bit... see <a href=\"https://play.rust-lang.org/?gist=4dca0d690e7a5b4cb1328b3236e31474&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">this playground</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "edited": false, "score": 0, "creation_date": 1490952250, "post_id": 43116958, "comment_id": 73351162, "body": "@wiep: Nice clean-up."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 1, "last_activity_date": 1490899482, "last_edit_date": 1490899482, "creation_date": 1490874253, "answer_id": 43116958, "question_id": 43112693, "link": "https://stackoverflow.com/questions/43112693/is-it-possible-to-calculate-the-return-type-of-a-rust-function-or-trait-method-b/43116958#43116958", "title": "Is it possible to calculate the return type of a Rust function or trait method based on its arguments?", "body": "<p>I would expect the simplest way to implement promotion is to create a <code>Promote</code> trait:</p>\n\n<pre><code>trait Promote&lt;Target&gt; {\n    fn promote(self) -&gt; Target;\n}\n\nimpl&lt;T&gt; Promote&lt;T&gt; for T {\n    fn promote(self) -&gt; T { self }\n}\n</code></pre>\n\n<p><em>Note: I provide a blanket implementation as all types can be promoted to themselves.</em></p>\n\n<p>Using associated types is NOT an option here, because a single type can be promoted to multiple types; thus we just use a regular type parameter.</p>\n\n<hr>\n\n<p>Using this, a simple example is:</p>\n\n<pre><code>impl Promote&lt;u64&gt; for u32 {\n    fn promote(self) -&gt; u64 { self as u64 }\n}\n\nfn add&lt;Result, Left, Right&gt;(left: Left, right: Right) -&gt; Result\n    where\n        Left: Promote&lt;Result&gt;,\n        Right: Promote&lt;Result&gt;,\n        Result: Add&lt;Output = Result&gt;\n{\n    left.promote() + right.promote()\n}\n\nfn main() {\n    let one: u32 = add(1u32, 1u32);\n    let two: u64 = add(1u32, 2u64);\n    let three: u64 = add(2u64, 1u32);\n    let four: u64 = add(2u64, 2u64);\n    println!(\"{} {} {} {}\", one, two, three, four);\n}\n</code></pre>\n\n<p>The only issue is that in the case of two <code>u32</code> arguments, the result type must be specified otherwise the compiler cannot choose between which possible <code>Promote</code> implementation to use: <code>Promote&lt;u32&gt;</code> or <code>Promote&lt;u64&gt;</code>.</p>\n\n<p>I am not sure if this is an issue in practice, however, since at some point you should have a concrete type to anchor type inference. For example:</p>\n\n<pre><code>fn main() {\n    let v = vec![add(1u32, 1u32), add(1u32, 2u64)];\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>compiles without type hint, because <code>add(1u32, 2u64)</code> can only be <code>u64</code>, and therefore since a <code>Vec</code> is a homogeneous collection, <code>add(1u32, 1u32)</code> has to return a <code>u64</code> here.</p>\n\n<hr>\n\n<p>As you experienced, though, sometimes you need the ability to direct the result beyond what type inference can handle. It's fine, you just need another trait for it:</p>\n\n<pre><code>trait PromoteTarget {\n    type Output;\n}\n\nimpl&lt;T&gt; PromoteTarget for (T, T) {\n    type Output = T;\n}\n</code></pre>\n\n<p>And then a little implementation:</p>\n\n<pre><code>impl PromoteTarget for (u32, u64) {\n    type Output = u64;\n}\n\nimpl PromoteTarget for (u64, u32) {\n    type Output = u64;\n}\n</code></pre>\n\n<p>With that out of the way, we can rewrite <code>baz</code> signature to correctly account for all intermediate types. Unfortunately I don't know any way to introduce aliases in a <code>where</code> clause, so brace yourself:</p>\n\n<pre><code>fn baz&lt;Result, A, B, C, D&gt;(a: A, b: B, c: C, d: D) -&gt; Result\n    where\n        A: Promote&lt;&lt;(A, B) as PromoteTarget&gt;::Output&gt;,\n        B: Promote&lt;&lt;(A, B) as PromoteTarget&gt;::Output&gt;,\n        C: Promote&lt;&lt;(C, D) as PromoteTarget&gt;::Output&gt;,\n        D: Promote&lt;&lt;(C, D) as PromoteTarget&gt;::Output&gt;,\n        (A, B): PromoteTarget,\n        (C, D): PromoteTarget,\n        &lt;(A, B) as PromoteTarget&gt;::Output: Promote&lt;Result&gt; + Add&lt;Output = &lt;(A, B) as PromoteTarget&gt;::Output&gt;,\n        &lt;(C, D) as PromoteTarget&gt;::Output: Promote&lt;Result&gt; + Add&lt;Output = &lt;(C, D) as PromoteTarget&gt;::Output&gt;,\n        Result: Add&lt;Output = Result&gt;\n{\n    let lhs = foo(a, b).promote();\n    let rhs = bar(c, d).promote();\n    lhs + rhs\n}\n</code></pre>\n\n<p>Link to the playground <a href=\"https://play.rust-lang.org/?gist=06704759e697755695b9a7b0c5bd7c1c&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">here</a>, so you can check the result:</p>\n\n<blockquote>\n<pre><code>============\nFoo called\nLeft: u32\nRight: u32\nResult: u32\n4\n</code></pre>\n</blockquote>\n"}], "owner": {"reputation": 162, "user_id": 3683514, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/48a886b0d7866bb25cfde8d170f7124a?s=128&d=identicon&r=PG&f=1", "display_name": "wiep", "link": "https://stackoverflow.com/users/3683514/wiep"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 725, "favorite_count": 0, "accepted_answer_id": 43116958, "answer_count": 1, "score": 3, "last_activity_date": 1490899482, "creation_date": 1490863367, "last_edit_date": 1495540459, "question_id": 43112693, "link": "https://stackoverflow.com/questions/43112693/is-it-possible-to-calculate-the-return-type-of-a-rust-function-or-trait-method-b", "title": "Is it possible to calculate the return type of a Rust function or trait method based on its arguments?", "body": "<p>Can I achieve something similar to <a href=\"http://www.boost.org/doc/libs/1_63_0/boost/math/tools/promotion.hpp\" rel=\"nofollow noreferrer\"><code>boost::math::tools::promote_args</code></a> in Rust? See also <a href=\"https://stackoverflow.com/questions/16865376/idiomatic-c11-type-promotion\">Idiomatic C++11 type promotion</a></p>\n\n<p>To be more specific: is it possible to calculate the return type of a function or trait method based on its arguments and ensure, that the return type has the same type as one of the arguments?</p>\n\n<p>Consider the following case. I have two structs:</p>\n\n<pre><code>#[derive(Debug, Clone, Copy)]\nstruct MySimpleType(f64);\n\n#[derive(Debug, Clone, Copy)]\nstruct MyComplexType(f64, f64);\n</code></pre>\n\n<p>where <code>MySimpleType</code> can be promoted to <code>MyComplexType</code> via the <code>From</code> trait.</p>\n\n<pre><code>impl From&lt;MySimpleType&gt; for MyComplexType {\n    fn from(src: MySimpleType) -&gt; MyComplexType {\n        let MySimpleType(x1) = src;\n        MyComplexType(x1, 0.0)\n    }\n }\n</code></pre>\n\n<p>I want to write a function that takes two arguments of types <code>MySimpleType</code> or <code>MyComplexType</code> and return a value of type <code>MySimpleType</code> if all arguments are typed as <code>MySimpleType</code>, otherwise the function should return a value of type <code>MyComplexType</code>. Assuming I have implemented <code>Add&lt;Output=Self&gt;</code> for both types I could do something like this:</p>\n\n<pre><code>trait Foo&lt;S, T&gt; {\n    fn foo(s: S, t: T) -&gt; Self;\n}\n\nimpl&lt;S, T, O&gt; Foo&lt;S, T&gt; for O\n    where O: From&lt;S&gt; + From&lt;T&gt; + Add&lt;Output = Self&gt;\n{\n    fn foo(s: S, t: T) -&gt; Self {\n        let s: O = From::from(s);\n        let t: O = From::from(t);\n        s + t\n    }\n}\n</code></pre>\n\n<p>but then the compiler doesn't know that <code>O</code> should be either <code>S</code> or <code>T</code> and I have to annotate most method calls.</p>\n\n<p>My second attempt is to use a slightly different trait and write two implementations:</p>\n\n<pre><code>trait Foo&lt;S, T&gt; {\n    fn foo(s: S, t: T) -&gt; Self;\n}\n\nimpl Foo&lt;MySimpleType, MySimpleType&gt; for MySimpleType {\n    fn foo(s: MySimpleType, t: MySimpleType) -&gt; Self {\n        s + t\n    }\n}\n\nimpl&lt;S, T&gt; Foo&lt;S, T&gt; for MyComplexType\n    where MyComplexType: From&lt;S&gt; + From&lt;T&gt;\n{\n    fn foo(s: S, t: T) -&gt; Self {\n        let s: MyComplexType = From::from(s);\n        let t: MyComplexType = From::from(t);\n        s + t\n    }\n}\n</code></pre>\n\n<p>but again, the compiler isn't able to figure the return type of</p>\n\n<pre><code>Foo::foo(MySimpleType(1.0), MySimpleType(1.0))\n</code></pre>\n\n<p>The third attempt is something similar to the <code>std::ops::{Add, Mul, ...}</code>. Use an associated type and write a specific implementation for each possible combination of argument types</p>\n\n<pre><code>trait Foo&lt;T&gt; {\n    type Output;\n    fn foo(self, t: T) -&gt; Self::Output;\n}\n\nimpl&lt;T: Add&lt;Output=T&gt;&gt; Foo&lt;T&gt; for T {\n    type Output = Self;\n    fn foo(self, t: T) -&gt; Self::Output {\n        self + t\n    }\n}\n\nimpl Foo&lt;MySimpleType&gt; for MyComplexType {\n    type Output = Self;\n    fn foo(self, t: MySimpleType) -&gt; Self::Output {\n        let t: Self = From::from(t);\n        self + t\n    }\n}\n\nimpl Foo&lt;MyComplexType&gt; for MySimpleType {\n    type Output = MyComplexType;\n    fn foo(self, t: MyComplexType) -&gt; Self::Output {\n        let s: MyComplexType = From::from(self);\n        s + t\n    }\n}\n</code></pre>\n\n<p>This seems to be the best solution until one needs a function with <code>n</code> arguments. Because then one has to write <code>2^n - n + 1</code> <code>impl</code> statements. Of course, this gets even worse if more then two types being considered.</p>\n\n<p>===</p>\n\n<p>Edit:</p>\n\n<p>In my code I've multiple nested function calls and I want to avoid non necessary type promotion, since the evaluation of the functions for the simple type is cheap and expensive for the complex type. By using @MatthieuM. 's proposed solution, this is not achieved. Please consider the following example</p>\n\n<pre><code>#![feature(core_intrinsics)]\n\nuse std::ops::Add;\n\ntrait Promote&lt;Target&gt; {\n    fn promote(self) -&gt; Target;\n}\n\nimpl&lt;T&gt; Promote&lt;T&gt; for T {\n    fn promote(self) -&gt; T {\n        self\n    }\n}\n\nimpl Promote&lt;u64&gt; for u32 {\n    fn promote(self) -&gt; u64 {\n        self as u64\n    }\n}\n\nfn foo&lt;Result, Left, Right&gt;(left: Left, right: Right) -&gt; Result\n    where Left: Promote&lt;Result&gt;,\n        Right: Promote&lt;Result&gt;,\n        Result: Add&lt;Output = Result&gt;\n{\n    println!(\"============\\nFoo called\");\n    println!(\"Left: {}\", unsafe { std::intrinsics::type_name::&lt;Left&gt;() });\n    println!(\"Right: {}\",\n            unsafe { std::intrinsics::type_name::&lt;Right&gt;() });\n    println!(\"Result: {}\",\n            unsafe { std::intrinsics::type_name::&lt;Result&gt;() });\n    left.promote() + right.promote()\n}\n\nfn bar&lt;Result, Left, Right&gt;(left: Left, right: Right) -&gt; Result\n    where Left: Promote&lt;Result&gt;,\n        Right: Promote&lt;Result&gt;,\n        Result: Add&lt;Output = Result&gt;\n{\n    left.promote() + right.promote()\n}\n\nfn baz&lt;Result, A, B, C, D&gt;(a: A, b: B, c: C, d: D) -&gt; Result\n    where A: Promote&lt;Result&gt;,\n        B: Promote&lt;Result&gt;,\n        C: Promote&lt;Result&gt;,\n        D: Promote&lt;Result&gt;,\n        Result: Add&lt;Output = Result&gt;\n{\n    let lhs = foo(a, b).promote();\n    let rhs = bar(c, d).promote();\n    lhs + rhs\n}\n\nfn main() {\n    let one = baz(1u32, 1u32, 1u64, 1u32);\n    println!(\"{}\", one);\n}\n</code></pre>\n"}, {"tags": ["generics", "polymorphism", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490863999, "post_id": 43112482, "comment_id": 73305744, "body": "<i>I am cutting my teeth with Rust</i> =&gt; Good luck :) It can be a bit of work at the beginning to wrap your head around ownership/borrowing but I promise it gets easier going forward! Don&#39;t hesitate to peruse SO when you have an issue, and if you need some discussions/advices that are not suitable here, you can hop in on IRC (<a href=\"https://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust-beginners\" rel=\"nofollow noreferrer\">chat.mibbit.com/&hellip;</a>), reddit (<a href=\"https://www.reddit.com/r/rust/\" rel=\"nofollow noreferrer\">reddit.com/r/rust</a>) or the users forum (<a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">users.rust-lang.org</a>)."}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1490864684, "post_id": 43112482, "comment_id": 73306195, "body": "@MatthieuM.thank you for the warm welcome. I&#39;m finding Rust to be very interesting so far, but yes, some of these things are really throwing me for a loop. Any language I&#39;ve worked with so far doesn&#39;t have anything comparable (that I know of)."}], "answers": [{"comments": [{"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490863255, "post_id": 43112573, "comment_id": 73305203, "body": "Ok thanks! I see the new ownership-related problem but I&#39;m not sure it warrants an entirely separate question because this answer alone will not generate my expected output. Do you think you could help me with the ownership issue here too?"}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490863794, "post_id": 43112573, "comment_id": 73305595, "body": "Interesting... OK, but wouldn&#39;t I want to make my <code>map</code> function <i>borrow</i> <code>xs</code> then too? eg, if I wanted to map over <code>xs</code> twice, it looks like the first call to map <i>moves</i> <code>xs</code> - it seems strange to have to be more explicit using borrowing operator when I&#39;m not mutating the values in my functions. I get the idea that my code will have <code>&amp;</code> before almost every parameter - and likewise <code>&amp;</code> before each argument... does that seem right?"}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490864016, "post_id": 43112573, "comment_id": 73305754, "body": "It depends. In this case it seems reasonable, so you should definitely try it out. Feel free to comment here if you need help."}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490864489, "post_id": 43112573, "comment_id": 73306040, "body": "updated my question to demonstrate my inability to take what you taught me about borrowing in <code>len</code> and apply it in <code>map</code> :("}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490865456, "post_id": 43112573, "comment_id": 73306726, "body": "yikes, it seems like i have a long way to go before this will start to feel natural in any sort of way. Right now my gut reaction is confusion when the <i>default</i> behavior of a function is to &quot;consume&quot; an argument. It seem like that should be called out explicitly like <code>mut</code> but <i>not</i> be consumed by default. I wonder how learning of Rust idioms will change this perspective over time... Anyway, thank you for handling my question so thoroughly. I really appreciate it."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "reply_to_user": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490866858, "post_id": 43112573, "comment_id": 73307733, "body": "It definitely takes some time to get to grips with ownership, but at some moment it does seem natural. It is like doing functional programming for the first time (e.g. how can I program without for loops!?). Feel free to drop by <code>#rust</code> on irc.mozilla.org for any questions you have!"}, {"owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "edited": false, "score": 0, "creation_date": 1490867091, "post_id": 43112573, "comment_id": 73307935, "body": "I&#39;m just about to sleep but I&#39;ll certainly join tomorrow. Thanks ^^"}], "tags": [], "owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "is_accepted": true, "score": 4, "last_activity_date": 1490877911, "last_edit_date": 1490877911, "creation_date": 1490863027, "answer_id": 43112573, "question_id": 43112482, "link": "https://stackoverflow.com/questions/43112482/how-to-implement-a-generic-linked-list-map-function-in-rust/43112573#43112573", "title": "How to implement a generic linked list map function in Rust?", "body": "<p>The error message is big because it happens within a macro, but if you add this: <code>let y = map(f, xs);</code> you get a shorter (and slightly more accurate) one:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; &lt;anon&gt;:32:15\n   |\n32 |   let y = map(f, xs);\n   |               ^ expected reference, found closure\n   |\n   = note: expected type `&amp;std::ops::Fn(_) -&gt; _`\n              found type `[closure@&lt;anon&gt;:31:11: 31:25]`\n</code></pre>\n\n<p>That is, you are passing the closure by value instead of by reference! Using <code>map(&amp;f, xs)</code> (note the ampersand) should solve the error. However, there is another issue with ownership (see below).</p>\n\n<h2>The ownership issue</h2>\n\n<p>The type signature of the <code>len</code> function is <code>fn len&lt;A&gt; (xs: List&lt;A&gt;) -&gt; i32</code>. That means that it will take ownership of the list in order to calculate its length. This is however not what you want, since it would prevent you from using the list afterwards! Hence the error you get from the compiler.</p>\n\n<p>The sensible way to solve this is to let <code>len</code> borrow <code>xs</code> instead of consuming it. Like this:</p>\n\n<pre><code>fn len&lt;A&gt;(xs: &amp;List&lt;A&gt;) -&gt; i32 {\n    match *xs {\n        List::Empty =&gt; 0,\n        List::Cons(_, ref xs) =&gt; 1 + len(xs),\n    }\n}\n</code></pre>\n\n<p>Finally, you will need to modify your <code>main</code> function to reflect this change by calling <code>len</code> like this: <code>len(&amp;xs)</code> (note the ampersand, which you can think of as the borrow operator).</p>\n\n<h2>Making map borrow xs as well</h2>\n\n<p>As naomik pointed out in the comments, <code>map</code> seems to be a candidate as well for borrowing <code>xs</code> instead of consuming it. A possible implementation would be:</p>\n\n<pre><code>fn map&lt;A, B&gt;(f: &amp;Fn(&amp;A) -&gt; B, xs: &amp;List&lt;A&gt;) -&gt; List&lt;B&gt; {\n    match *xs {\n        List::Empty =&gt; List::Empty,\n        List::Cons(ref x, ref xs) =&gt; cons(f(x), map(f, xs)),\n    }\n}\n</code></pre>\n\n<p>The main difference with the original version is that the closure now takes an <code>&amp;A</code> instead of an <code>A</code> (see <code>Fn(&amp;A) -&gt; B</code>). This is natural, since it is impossible to consume a value that is contained in a borrow (it would mean the borrow mechanism is utterly broken).</p>\n\n<p>In main you would need to call <code>map</code> like this:</p>\n\n<pre><code>let f = |x: &amp;i32| (*x) * (*x);\nmap(&amp;f, &amp;xs);\n</code></pre>\n\n<p>Note that <code>f</code> now borrows its parameter instead of consuming it, as is required by the type signature of <code>map</code>.</p>\n\n<h2>Some extra background in closures</h2>\n\n<p>Closures are a bit special in Rust. You can construct them with a nice syntax, but in the end they are just structs that happen to implement the <code>Fn</code>, <code>FnMut</code> or <code>FnOnce</code> traits.</p>\n\n<p>In case you want to pass them by value (and not by reference, as you do in your code), you can make the map function generic by using the following type signature:</p>\n\n<pre><code>fn map&lt;F, A, B&gt; (f: F, xs: List&lt;A&gt;) -&gt; List&lt;B&gt;\n    where F: Fn(A) -&gt; B\n{\n</code></pre>\n\n<p>This also gives you static dispatch. If you want to know more about that you should probably read on <a href=\"https://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow noreferrer\">trait objects and static/dynamic dispatch</a>.</p>\n"}], "owner": {"reputation": 106013, "user_id": 633183, "user_type": "registered", "accept_rate": 66, "profile_image": "https://i.stack.imgur.com/RHeN9.png?s=128&g=1", "display_name": "Thank you", "link": "https://stackoverflow.com/users/633183/thank-you"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 266, "favorite_count": 0, "accepted_answer_id": 43112573, "answer_count": 1, "score": 5, "last_activity_date": 1490877911, "creation_date": 1490862747, "last_edit_date": 1490877849, "question_id": 43112482, "link": "https://stackoverflow.com/questions/43112482/how-to-implement-a-generic-linked-list-map-function-in-rust", "title": "How to implement a generic linked list map function in Rust?", "body": "<p>I am cutting my teeth with Rust and I'm trying to implement a generically-typed linked list. So far my <code>cons</code> and <code>len</code> functions work but there is something wrong with <code>map</code> that I cannot figure out.</p>\n\n<pre><code>use std::fmt;\n\n#[derive(Debug)]\nenum List&lt;A&gt; {\n    Empty,\n    Cons(A, Box&lt;List&lt;A&gt;&gt;),\n}\n\nfn cons&lt;A&gt;(x: A, xs: List&lt;A&gt;) -&gt; List&lt;A&gt; {\n    return List::Cons(x, Box::new(xs));\n}\n\nfn len&lt;A&gt;(xs: List&lt;A&gt;) -&gt; i32 {\n    match xs {\n        List::Empty =&gt; 0,\n        List::Cons(_, xs) =&gt; 1 + len(*xs),\n    }\n}\n\nfn map&lt;A, B&gt;(f: &amp;Fn(A) -&gt; B, xs: List&lt;A&gt;) -&gt; List&lt;B&gt; {\n    match xs {\n        List::Empty =&gt; List::Empty,\n        List::Cons(x, xs) =&gt; cons(f(x), map(f, *xs)),\n    }\n}\n\nfn main() {\n    let xs = cons(1, cons(2, cons(3, List::Empty)));\n    println!(\"{:?}\", xs);\n    println!(\"{:?}\", len(xs));\n    let f = |x: i32| x * x;\n    println!(\"{:?})\", map(f, xs));\n}\n</code></pre>\n\n<p><strong>Error</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:32:27\n   |\n32 |     println!(\"{:?})\", map(f, xs));\n   |                           ^ expected reference, found closure\n   |\n   = note: expected type `&amp;std::ops::Fn(_) -&gt; _`\n              found type `[closure@src/main.rs:31:13: 31:27]`\n</code></pre>\n\n<p><strong>Expected Output</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Cons(1, Cons(2, Cons(3, Empty)))\n3\nCons(1, Cons(4, Cons(9, Empty)))\n</code></pre>\n\n<p>My particular problem is with</p>\n\n<pre><code>println!(\"{:?})\", map(f, xs));\n</code></pre>\n\n<p>If I comment that line out, the first two lines of output are correct. I'm not sure what's wrong with my <code>map</code> call</p>\n\n<hr>\n\n<p><strong>Update</strong></p>\n\n<p>aochagavia helped me understand the function reference issue and the first ownership issue (of many, apparently!) - I'm having trouble using the same technique we used in <code>len</code> in <code>map</code> and getting a new error</p>\n\n<p>My updated <code>map</code> function looks like this</p>\n\n<pre><code>fn map&lt;A, B&gt;(f: &amp;Fn(A) -&gt; B, xs: &amp;List&lt;A&gt;) -&gt; List&lt;B&gt; {\n    match *xs {\n        List::Empty =&gt; List::Empty,\n        List::Cons(x, ref xs) =&gt; cons(f(x), map(f, xs)),\n    }\n}\n</code></pre>\n\n<p>I'm now trying this</p>\n\n<pre><code>let f = |x: i32| x * x;\nlet ys = map(&amp;f, &amp;xs);\nlet zs = map(&amp;f, &amp;xs);\nprintln!(\"{:?})\", ys);\nprintln!(\"{:?})\", zs);\n</code></pre>\n\n<p>The new error is this</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0009]: cannot bind by-move and by-ref in the same pattern\n  --&gt; src/main.rs:23:20\n   |\n23 |         List::Cons(x, ref xs) =&gt; cons(f(x), map(f, xs)),\n   |                    ^  ------ both by-ref and by-move used\n   |                    |\n   |                    by-move pattern here\n</code></pre>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 2444, "user_id": 5733738, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/OQjxC.png?s=128&g=1", "display_name": "Harsha W", "link": "https://stackoverflow.com/users/5733738/harsha-w"}, "edited": false, "score": 2, "creation_date": 1490853295, "post_id": 43109558, "comment_id": 73299439, "body": "<a href=\"http://stackoverflow.com/questions/38050995/how-can-the-location-of-cargos-configuration-directory-be-overridden\" title=\"how can the location of cargos configuration directory be overridden\">stackoverflow.com/questions/38050995/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 6242, "user_id": 1772898, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/6d4dd3f6cc6759c972ec92d819001495?s=128&d=identicon&r=PG&f=1", "display_name": "blueray", "link": "https://stackoverflow.com/users/1772898/blueray"}, "edited": false, "score": 0, "creation_date": 1490872292, "post_id": 43109627, "comment_id": 73311519, "body": "My Appologies, a little mistake in the question. Fixed it. The solution would be - cargo install --root C:\\Rust\\.cargo racer"}], "tags": [], "owner": {"reputation": 3416, "user_id": 2484972, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/ea1c4b2c5aa3c7da2f2740bc1a643ee0?s=128&d=identicon&r=PG", "display_name": "Tatsuyuki Ishi", "link": "https://stackoverflow.com/users/2484972/tatsuyuki-ishi"}, "is_accepted": true, "score": 1, "last_activity_date": 1490853372, "last_edit_date": 1495541853, "creation_date": 1490853372, "answer_id": 43109627, "question_id": 43109558, "link": "https://stackoverflow.com/questions/43109558/how-do-i-change-where-cargo-install-places-binaries/43109627#43109627", "title": "How do I change where `cargo install` places binaries?", "body": "<p>The easiest way is via <code>--root</code>:</p>\n\n<pre><code>cargo install --root C:\\Rust.cargo racer\n</code></pre>\n\n<p><code>CARGO_HOME</code> and others can be set to override this too. Consult the documentation or <a href=\"https://stackoverflow.com/questions/38050995/how-can-the-location-of-cargos-configuration-directory-be-overridden\">How can the location of cargo&#39;s configuration directory be overridden?</a>.</p>\n"}], "owner": {"reputation": 6242, "user_id": 1772898, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/6d4dd3f6cc6759c972ec92d819001495?s=128&d=identicon&r=PG&f=1", "display_name": "blueray", "link": "https://stackoverflow.com/users/1772898/blueray"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 226, "favorite_count": 0, "accepted_answer_id": 43109627, "answer_count": 1, "score": 0, "last_activity_date": 1490877518, "creation_date": 1490853143, "last_edit_date": 1490877518, "question_id": 43109558, "link": "https://stackoverflow.com/questions/43109558/how-do-i-change-where-cargo-install-places-binaries", "title": "How do I change where `cargo install` places binaries?", "body": "<p>I am installing racer, rustfmt &amp; rustsym </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo install racer\ncargo install rustfmt\ncargo install rustsym\n</code></pre>\n\n<p>The packages are being installed in <code>C:\\Users\\&lt;UserName&gt;\\.cargo</code>, but I want it to be <code>C:\\Rust\\.cargo</code>.</p>\n"}, {"tags": ["scope", "rust"], "comments": [{"owner": {"reputation": 1883, "user_id": 3063787, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/07efcc8e6bfa28a4c9984792053bed04?s=128&d=identicon&r=PG&f=1", "display_name": "AaronF", "link": "https://stackoverflow.com/users/3063787/aaronf"}, "edited": false, "score": 0, "creation_date": 1490840874, "post_id": 43107415, "comment_id": 73295773, "body": "I changed it for a better second example."}], "answers": [{"comments": [{"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490845525, "post_id": 43107854, "comment_id": 73296945, "body": "In the second example, why isn&#39;t the type of <code>&amp;b</code> <code>&amp;&amp;&#39;static str</code>?"}, {"owner": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490845801, "post_id": 43107854, "comment_id": 73297015, "body": "Weird - so Rust automatically dereferences arguments as many times as is necessary? <code>getRef(&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;b)</code> compiles just fine."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 1, "creation_date": 1490846229, "post_id": 43107854, "comment_id": 73297109, "body": "@MichaelHewson <a href=\"http://stackoverflow.com/q/28519997/155423\">dereferences and then references once</a>. And not just arguments, but <a href=\"http://stackoverflow.com/q/43036307/155423\">return values and variable assignments too</a>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1084, "user_id": 4302668, "user_type": "registered", "accept_rate": 44, "profile_image": "https://i.stack.imgur.com/EmGum.png?s=128&g=1", "display_name": "Michael Hewson", "link": "https://stackoverflow.com/users/4302668/michael-hewson"}, "edited": false, "score": 0, "creation_date": 1490857969, "post_id": 43107854, "comment_id": 73301978, "body": "@MichaelHewson: It&#39;s a bit weird indeed; very useful for smart pointers though, which is the primary usecase of <code>Deref</code>."}, {"owner": {"reputation": 1883, "user_id": 3063787, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/07efcc8e6bfa28a4c9984792053bed04?s=128&d=identicon&r=PG&f=1", "display_name": "AaronF", "link": "https://stackoverflow.com/users/3063787/aaronf"}, "edited": false, "score": 0, "creation_date": 1490980055, "post_id": 43107854, "comment_id": 73369618, "body": "So <code>a</code> and <code>b</code> have the same lifetime. And you could just pass b in directly to getRef()."}, {"owner": {"reputation": 1883, "user_id": 3063787, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/07efcc8e6bfa28a4c9984792053bed04?s=128&d=identicon&r=PG&f=1", "display_name": "AaronF", "link": "https://stackoverflow.com/users/3063787/aaronf"}, "edited": false, "score": 0, "creation_date": 1490980138, "post_id": 43107854, "comment_id": 73369664, "body": "... without losing ownership in the process?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1883, "user_id": 3063787, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/07efcc8e6bfa28a4c9984792053bed04?s=128&d=identicon&r=PG&f=1", "display_name": "AaronF", "link": "https://stackoverflow.com/users/3063787/aaronf"}, "edited": false, "score": 0, "creation_date": 1490983420, "post_id": 43107854, "comment_id": 73371407, "body": "@AaronF yes, because <a href=\"http://stackoverflow.com/q/37381212/155423\">immutable references implement <code>Copy</code></a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1490846086, "last_edit_date": 1495541850, "creation_date": 1490843679, "answer_id": 43107854, "question_id": 43107415, "link": "https://stackoverflow.com/questions/43107415/seeming-contradictory-borrowing-scenarios-in-rust/43107854#43107854", "title": "Seeming contradictory borrowing scenarios in Rust", "body": "<p>Because they aren't doing the same thing.</p>\n\n<p>If you <a href=\"https://stackoverflow.com/questions/21747136/how-do-i-print-the-type-of-a-variable-in-rust\">print the type of the variable</a>, you'll see that in the first example, <code>v</code> is of type <code>&amp;&amp;str</code>, specifically <code>&amp; &amp;'static str</code>. In the second example, <code>v</code> is of type <code>&amp;str</code>, specifically <code>&amp;'static str</code>.</p>\n\n<p>In the first example, you have a reference to a local value, which indeed goes out of scope. </p>\n\n<p>In the second example, although you take a reference to <code>b</code>, producing a <code>&amp;&amp;str</code>, you then call a function that expects a <code>&amp;str</code>. <a href=\"https://doc.rust-lang.org/book/deref-coercions.html\" rel=\"nofollow noreferrer\"><code>Deref</code> coercion</a> kicks in and automatically dereferences the value. </p>\n\n<p>Thus the second example is equivalent to </p>\n\n<pre><code>fn main() {\n    let a = \"a\";\n    let v;\n    {\n        let b = \"b\";\n        v = b;\n    }\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<p>That is, you are making a copy of an immutable reference to a string that will live the entire life of the program.</p>\n"}], "owner": {"reputation": 1883, "user_id": 3063787, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/07efcc8e6bfa28a4c9984792053bed04?s=128&d=identicon&r=PG&f=1", "display_name": "AaronF", "link": "https://stackoverflow.com/users/3063787/aaronf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 57, "favorite_count": 1, "accepted_answer_id": 43107854, "answer_count": 1, "score": 3, "last_activity_date": 1490846086, "creation_date": 1490840721, "last_edit_date": 1490843491, "question_id": 43107415, "link": "https://stackoverflow.com/questions/43107415/seeming-contradictory-borrowing-scenarios-in-rust", "title": "Seeming contradictory borrowing scenarios in Rust", "body": "<p>This first Rust program won't compile because <code>b</code> is dropped before its reference <code>r</code>, which makes sense:</p>\n\n<pre><code>fn main() {\n    let a = \"a\";\n    let v;\n    {\n        let b = \"b\";\n        v = &amp;b;\n    }\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<p>In this second Rust program, a reference to <code>b</code> is retrieved via a function, and all of the sudden there's no issue:</p>\n\n<pre><code>fn getRef(b: &amp;str) -&gt; &amp;str {\n    b\n}\n\nfn main() {\n    let a = \"a\";\n    let v;\n    {\n        let b = \"b\";\n        v = getRef(&amp;b);\n    }\n    println!(\"{}\", v);\n}\n</code></pre>\n\n<p>The thing is, <code>v</code> is still a reference to <code>b</code>, and <code>b</code> is out of scope for the <code>println!()</code>.</p>\n\n<p>Why are these two different?</p>\n"}]