[{"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 61, "user_id": 3920439, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e188dbadbd868a4b49e7d553e3fa6649?s=128&d=identicon&r=PG&f=1", "display_name": "ThePianoDentist", "link": "https://stackoverflow.com/users/3920439/thepianodentist"}, "edited": false, "score": 0, "creation_date": 1467847853, "post_id": 38234935, "comment_id": 63892390, "body": "thankyou very much! Everything makes a lot more sense now. was confusing myself massively"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 61, "user_id": 3920439, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e188dbadbd868a4b49e7d553e3fa6649?s=128&d=identicon&r=PG&f=1", "display_name": "ThePianoDentist", "link": "https://stackoverflow.com/users/3920439/thepianodentist"}, "edited": false, "score": 0, "creation_date": 1467850408, "post_id": 38234935, "comment_id": 63893084, "body": "@user3920439 no problem! Make sure to upvote questions and answers you find useful here on Stack Overflow, and accept questions that help you the most."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1467845128, "last_edit_date": 1467845128, "creation_date": 1467844749, "answer_id": 38234935, "question_id": 38234306, "link": "https://stackoverflow.com/questions/38234306/how-to-take-ownership-of-variable-for-non-function-code-chunk/38234935#38234935", "title": "How to take ownership of variable for non-function code-chunk", "body": "<pre><code>for tower in &amp;mut game.towers {\n    tower.towers_attack(&amp;mut game)\n}\n</code></pre>\n\n<p>Rust prevents this call because the implementation of <code>towers_attack</code> <em>might</em> be:</p>\n\n<pre><code>fn towers_attack(game: &amp;mut Game) {\n    game.towers.clear()\n}\n</code></pre>\n\n<p>or maybe</p>\n\n<pre><code>fn towers_attack(game: &amp;mut Game) {\n    game.towers.push(...)\n}\n</code></pre>\n\n<p>which causes the vector to be reallocated and thus the iterator to be invalidated, which would cause Bad Things To Happen.</p>\n\n<p>Instead, pass the subset of items you need to <code>towers_attack</code>. For example:</p>\n\n<pre><code>fn towers_attack(lane_creeps: &amp;mut Vec&lt;Creeps&gt;) { ... }\n</code></pre>\n\n<blockquote>\n  <p>I just need to give ownership of game to <code>for tower in &amp;mut game.towers { tower.towers_attack(&amp;mut game) };</code></p>\n</blockquote>\n\n<p>You <strong>always</strong> transfer ownership of the expression to the <code>for</code> loop. In this case, you are passing <em>ownership of a mutable reference</em> to <code>towers</code>.</p>\n\n<blockquote>\n  <p>then return ownership when it exits</p>\n</blockquote>\n\n<p>There's no way to do that; <code>for</code> loops do not return anything.</p>\n"}], "owner": {"reputation": 61, "user_id": 3920439, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e188dbadbd868a4b49e7d553e3fa6649?s=128&d=identicon&r=PG&f=1", "display_name": "ThePianoDentist", "link": "https://stackoverflow.com/users/3920439/thepianodentist"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 78, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1467845128, "creation_date": 1467841523, "last_edit_date": 1467842779, "question_id": 38234306, "link": "https://stackoverflow.com/questions/38234306/how-to-take-ownership-of-variable-for-non-function-code-chunk", "title": "How to take ownership of variable for non-function code-chunk", "body": "<pre><code>for tower in &amp;mut game.towers {\n    tower.towers_attack(&amp;mut game)\n};\n</code></pre>\n\n<p>gives <code>cannot borrow game as mutable more than once at a time [E0499]</code></p>\n\n<p>My code was working however I was refactoring for it to make more sense.</p>\n\n<p>What did work was (main point to note is it is fine with looping twice mutably over the game object, however this is because function has ownership of 'game'?)</p>\n\n<pre><code>impl Attack for Game {\n    fn towers_attack(&amp;mut self) {\n        for tower in &amp;mut self.towers {\n            tower.attacked = false;\n            if tower.hp.is_positive() {\n                for creep in &amp;mut self.lane_creeps {\n                    if tower.position.distance_between(creep.position) &lt; 12.0 &amp;&amp;\n                       creep.side != tower.side &amp;&amp; !tower.attacked {\n                        creep.hp -= tower.attack_damage as i32;\n                        tower.attacked = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n\ngame.towers_attack();\n</code></pre>\n\n<p>Moving the first loop to outside the function and implementing on <code>tower</code> rather than <code>game.tower</code> causes the issue.</p>\n\n<p>I've confused myself a lot, I believe I just need to give ownership of <code>game</code> to <code>for tower in &amp;mut game.towers { tower.towers_attack(&amp;mut game) };</code> then return ownership when it exits, therefore no borrowing occurs if I explicitly give ownership, however I'm not sure if this is possible or makes sense.</p>\n\n<p>The <code>towers_attack</code> function is</p>\n\n<pre><code>impl TowerAttack for Tower {\n    fn towers_attack(&amp;mut self, game: &amp;mut Game) {\n        self.attacked = false;\n        if self.hp.is_positive() {\n            for creep in &amp;mut game.lane_creeps {\n                if self.position.distance_between(creep.position) &lt; 12.0 &amp;&amp;\n                   creep.side != self.side &amp;&amp; !self.attacked {\n                    creep.hp -= self.attack_damage as i32;\n                    self.attacked = true;\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["list", "iterator", "rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1467820636, "post_id": 38227722, "comment_id": 63878721, "body": "actually <code>.rev()</code> probably does not what you expect. It reverses the iterator, so you are now taking elements from the back."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1467877109, "post_id": 38227722, "comment_id": 63900817, "body": "Note: in C++ you should use pre-increment/pre-decrement, it varies from slightly more to much more efficient depending on the iterator."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1467876971, "post_id": 38229471, "comment_id": 63900734, "body": "The reason is simply aliasing vs mutability. <code>Iterator</code> is designed so that you can retain references to the elements that it yielded, so that if you can go back and forth you would be able to have multiple references to the same element (aka: aliasing). Now, imagine that the references in question are mutable: you now have multiple mutable references to the same element, BOOM. So, since yielding mutable references is desirable, the <code>Iterator</code> trait has given up aliasing."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 7, "last_activity_date": 1467917867, "last_edit_date": 1495542760, "creation_date": 1467823965, "answer_id": 38229471, "question_id": 38227722, "link": "https://stackoverflow.com/questions/38227722/iterating-forward-and-backward/38229471#38229471", "title": "Iterating forward and backward", "body": "<p><a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html\" rel=\"nofollow noreferrer\"><code>Iterator</code></a> is similar to <a href=\"http://en.cppreference.com/w/cpp/concept/ForwardIterator\" rel=\"nofollow noreferrer\"><code>ForwardIterator</code></a> of C++. What you want is a <a href=\"http://en.cppreference.com/w/cpp/concept/BidirectionalIterator\" rel=\"nofollow noreferrer\"><code>BidirectionalIterator</code></a>, but Rust does not provide a trait similar to it because of a limitation in the type system.</p>\n\n<p>As <a href=\"https://stackoverflow.com/users/147192/matthieu-m\">Matthieu M</a> said in comments, the way an iterator is defined allows a reference to the yielded element to be kept. And that's a problem if the iterator produces mutable references, because moving forward and backward would allow multiples mutable references to the same element. One way to solve this problem would be to tie the lifetime of the yielded element with <code>&amp;mut self</code>, so a call to <code>next</code> (or <code>prev</code>) would borrow <code>self</code>, but there is no way of doing it in a generic way (there is a <a href=\"https://github.com/rust-lang/rfcs/pull/1598\" rel=\"nofollow noreferrer\">RFC</a> to add such capability).</p>\n\n<p>Looking the <code>Iterator</code> trait definition:</p>\n\n<pre><code>pub trait Iterator {\n    type Item;\n    fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;Self::Item&gt;;\n    // ...\n}\n</code></pre>\n\n<p>we can see that the lifetime of <code>Self::Item</code> is independent of <code>'a</code>. What is necessary to solve the problem is:</p>\n\n<pre><code>pub trait Iterator {\n    type Item&lt;'a&gt;; // hypothetical syntax\n    fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;Self::Item&lt;'a&gt;&gt;;\n    // ...\n}\n</code></pre>\n\n<p>but that is not supported yet.</p>\n\n<hr>\n\n<p>That said, one option is to use a external crate that use a specific iterator (that is, do not implement a trait). The <a href=\"https://crates.io/crates/linked-list\" rel=\"nofollow noreferrer\"><code>linked_list</code></a> crate provides a linked list implementation with <a href=\"http://contain-rs.github.io/linked-list/linked_list/struct.Cursor.html\" rel=\"nofollow noreferrer\"><code>Cursor</code></a>, that allows forward and backward iteration:</p>\n\n<pre><code>use linked_list::LinkedList;\nuse std::iter::FromIterator;\n\nfn main() {\n    // LinkedList::cursor takes &amp;mut self, so lst must be mutable\n    let mut lst = LinkedList::from_iter(0..10);\n    let mut c = lst.cursor();\n\n    c.next();\n    c.next();\n    c.next();\n    c.prev();\n\n    assert_eq!(1, *c.prev().unwrap());\n}\n</code></pre>\n\n<p><code>Cursor</code> does not allow a reference to the yielded element to be kept. The docs says:</p>\n\n<blockquote>\n  <p>A <code>Cursor</code> is like an iterator, except that it can freely seek back-and-forth, and can safely mutate the list during iteration. This is because the lifetime of its yielded references is tied to its own lifetime, instead of just the underlying list. This means cursors cannot yield multiple elements at once.</p>\n</blockquote>\n\n<p>The following example:</p>\n\n<pre><code>let a = c.next();\nlet b = c.next();\n</code></pre>\n\n<p>generates this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: cannot borrow `c` as mutable more than once at a time [E0499]\n    let b = c.next();\n</code></pre>\n\n<p>This happens because <code>next</code> (and <code>prev</code>) borrows from <code>self</code>, that is:</p>\n\n<pre><code>fn next&lt;'a&gt;(&amp;'a mut self) -&gt; Option&lt;&amp;'a mut T&gt;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": false, "score": 3, "last_activity_date": 1467824050, "creation_date": 1467824050, "answer_id": 38229493, "question_id": 38227722, "link": "https://stackoverflow.com/questions/38227722/iterating-forward-and-backward/38229493#38229493", "title": "Iterating forward and backward", "body": "<p>You'll need to implement your own iterator to do this. Here's a sample implementation of one for <code>Vec</code>s:</p>\n\n<pre><code>pub trait ForwardBackwardIterator : Iterator {\n    fn prev(&amp;mut self) -&gt; Option&lt;Self::Item&gt;;\n}\n\npub struct VectorForwardBackwardIterator&lt;'a, Item&gt; where Item : 'a {\n    index: Option&lt;usize&gt;,\n    vector: &amp;'a Vec&lt;Item&gt;,\n}\n\nimpl&lt;'a, Item&gt; VectorForwardBackwardIterator&lt;'a, Item&gt; {\n    fn new(vector: &amp;'a Vec&lt;Item&gt;) -&gt; VectorForwardBackwardIterator&lt;'a, Item&gt; {\n        VectorForwardBackwardIterator { index: None, vector: vector }\n    }\n}\n\nimpl&lt;'a, Item&gt; Iterator for VectorForwardBackwardIterator&lt;'a, Item&gt; {\n    type Item = &amp;'a Item;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a Item&gt; {\n        let index = \n            match self.index {\n                Some(i) =&gt; i + 1,\n                None =&gt; 0\n            };\n\n        self.index = Some(index);\n        self.vector.get(index)\n    }\n}\n\nimpl&lt;'a, Item&gt; ForwardBackwardIterator for VectorForwardBackwardIterator&lt;'a, Item&gt; {\n    fn prev(&amp;mut self) -&gt; Option&lt;&amp;'a Item&gt; {\n        let index = \n            match self.index {\n                Some(0) | None =&gt; return None,\n                Some(i) =&gt; i - 1\n            };\n\n        self.index = Some(index);\n        self.vector.get(index)\n    }\n}\n\nfn main() {\n    let v = vec![0, 1, 2, 3, 4, 5];\n    let mut iterator = VectorForwardBackwardIterator::new(&amp;v);\n\n    println!(\"{:?}\", iterator.next());\n    println!(\"{:?}\", iterator.next());\n    println!(\"{:?}\", iterator.next());\n    println!(\"{:?}\", iterator.prev());\n    println!(\"{:?}\", iterator.prev());\n}\n</code></pre>\n\n<p>This prints out</p>\n\n<pre><code>Some(0)\nSome(1)\nSome(2)\nSome(1)\nSome(0)\n</code></pre>\n"}], "owner": {"reputation": 686, "user_id": 3702880, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xCLqG.jpg?s=128&g=1", "display_name": "Dr. Andrey Belkin", "link": "https://stackoverflow.com/users/3702880/dr-andrey-belkin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4133, "favorite_count": 0, "accepted_answer_id": 38229471, "answer_count": 2, "score": 10, "last_activity_date": 1467917867, "creation_date": 1467818567, "last_edit_date": 1467820011, "question_id": 38227722, "link": "https://stackoverflow.com/questions/38227722/iterating-forward-and-backward", "title": "Iterating forward and backward", "body": "<p>We have a double ended list of structs, e.g. <code>LinkedList</code>.</p>\n\n<p>I need to iterate forward and backward through the elements (like, 4 times forward then 2 times backward then 5 times forward).</p>\n\n<p>In C++ it would be:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>iter++; iter++; ... iter--; ...\n</code></pre>\n\n<p>In Rust, I only see <code>.next()</code> and <code>.rev()</code> which is inconvenient (since after a few iterations I already do not know in which direction I've reversed iteration).</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 14, "last_activity_date": 1467820583, "last_edit_date": 1467820583, "creation_date": 1467818143, "answer_id": 38227570, "question_id": 38227455, "link": "https://stackoverflow.com/questions/38227455/how-are-elements-of-a-vector-left-shifted-in-rust/38227570#38227570", "title": "How are elements of a vector left-shifted in Rust?", "body": "<p>I would use <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\"><code>Vec::drain</code></a>.</p>\n\n<p>You can call it with a range of the elements you want to remove, and it'll shift them over afterwards. Example: (<a href=\"https://play.rust-lang.org/?gist=e6451460055160a4b615df5ff5235bf3&amp;version=stable&amp;backtrace=0\">playpen</a>)</p>\n\n<pre><code>fn main() {\n    let mut v = vec![1, 2, 3];\n\n    v.drain(0..2);\n\n    assert_eq!(vec![3], v);\n}\n</code></pre>\n\n<p>One other note:</p>\n\n<blockquote>\n  <p>I'm dealing with <code>Copy</code> types, and I don't want to pay a penalty higher than what I would with a <code>memmove</code>.</p>\n</blockquote>\n\n<p>Worth noting that moving is <em>always</em> a <code>memcpy</code> in Rust, so the <code>Copy</code> vs non-<code>Copy</code> distinction doesn't matter here. It'd be the same if the types weren't <code>Copy</code>.</p>\n"}], "owner": {"reputation": 435, "user_id": 6517909, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/542422dbe372e54be780ad815e253206?s=128&d=identicon&r=PG&f=1", "display_name": "Doe", "link": "https://stackoverflow.com/users/6517909/doe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1789, "favorite_count": 1, "accepted_answer_id": 38227570, "answer_count": 1, "score": 10, "last_activity_date": 1467820583, "creation_date": 1467817756, "last_edit_date": 1467819246, "question_id": 38227455, "link": "https://stackoverflow.com/questions/38227455/how-are-elements-of-a-vector-left-shifted-in-rust", "title": "How are elements of a vector left-shifted in Rust?", "body": "<p>Is there a safe way to left-shift elements of a vector in Rust? (<code>vec![1, 2, 3]</code> becomes <code>vec![3]</code> when left-shifted two places). I'm dealing with <code>Copy</code> types, and I don't want to pay a penalty higher than what I would with a <code>memmove</code>.</p>\n\n<p>The only solution I've found is unsafe: use <code>memmove</code> directly via <code>ptr::copy</code>.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1467796662, "creation_date": 1467796662, "answer_id": 38220391, "question_id": 38219929, "link": "https://stackoverflow.com/questions/38219929/iterator-filter-double-reference-borrowing-error/38220391#38220391", "title": "Iterator filter() double reference borrowing error", "body": "<p>The main difference between your <code>Token</code> and the doc's <code>i32</code> is that a <code>i32</code> is <code>Copy</code>.</p>\n\n<p>Rust types are, by default, <em>affine types</em>: they may at most be used (transferred by value) once. <code>Copy</code> types are the exception to the rule, they can be used any number of times, because using them does not transfer ownership, it silently produces a <code>Clone</code> instead.</p>\n\n<p>As a result, unless your <code>Token</code> type is made <code>Copy</code> (which also requires <code>Clone</code>), you cannot use the third form presented in the documentation of <code>filter</code>.</p>\n\n<p>You can simply use:</p>\n\n<pre><code>#[derive(Clone, Copy, PartialEq, Eq)]\npub enum Token { .... }\n</code></pre>\n\n<p>to make it <code>Copy</code>, or not use the third form. I would advise the latter unless you are comfortable guaranteeing to your clients that it will remain <code>Copy</code>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user6555228"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 647, "favorite_count": 0, "accepted_answer_id": 38220391, "answer_count": 1, "score": 3, "last_activity_date": 1467807462, "creation_date": 1467795283, "last_edit_date": 1467807462, "question_id": 38219929, "link": "https://stackoverflow.com/questions/38219929/iterator-filter-double-reference-borrowing-error", "title": "Iterator filter() double reference borrowing error", "body": "<p>I am trying to write some Rust code using some iterator magic, but I have a problem with double references and Rust's documentation:</p>\n\n<pre><code>#[derive(PartialEq,Eq)]\npub enum Token {\n    ECOND,\n    SCOND\n}\n\npub fn validate(pgm: &amp;Vec&lt;Token&gt;) -&gt; Result&lt;(), ()&gt; {\n    let valid1 = pgm.iter()\n                    .filter(|&amp;&amp;item|\n                        item == Token::SCOND || item == Token::ECOND\n                    )\n                    .fold(0, |acc: i64, ref x| -&gt; i64 {\n                        if x == &amp;&amp;Token::SCOND {\n                            return acc + 1;\n                        } else {\n                            return acc - 1;\n                        }\n                    });\n\n    if valid1 != 0 {\n        return Err(());\n    }\n    return Ok(());\n}\n</code></pre>\n\n<p>It gives me an error :</p>\n\n<pre><code>error: cannot move out of borrowed content [E0507]\n                        .filter(|&amp;&amp;item|\n                              ^~~~~\nhelp: run `rustc --explain E0507` to see a detailed explanation\nnote: attempting to move value to here\n                        .filter(|&amp;&amp;item|\n                               ^~~~\nhelp: to prevent the move, use `ref item` or `ref mut item` to capture value by reference\n</code></pre>\n\n<p>As stated by <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter\" rel=\"nofollow\">filter's doc</a>, with double references I can write the code these ways, and it works:</p>\n\n<pre><code>.filter(|&amp;item|\n    *item == Token::SCOND || *item == Token::ECOND\n)\n</code></pre>\n\n<p>And also like that:</p>\n\n<pre><code>.filter(|item|\n    **item == Token::SCOND || **item == Token::ECOND\n)\n</code></pre>\n\n<p>But how can I use my solution (which is also the doc solution)? I don't see where is my mistake.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "edited": false, "score": 4, "creation_date": 1467818498, "post_id": 38216027, "comment_id": 63877255, "body": "I should add I don&#39;t see why String can&#39;t implement a Copy trait in principle or practice - QString objects in QT can be copied and they share and maintain an internal buffer. If a copy does something mutable the buffer is first cloned so other copies still hold a reference to the original buffer. In QT it&#39;s still better practice to pass by reference to avoid atomic ref counting but copy is efficient anyway."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "edited": false, "score": 2, "creation_date": 1467830637, "post_id": 38216027, "comment_id": 63884576, "body": "@locka because <i><code>Copy</code> designates types for which making a bitwise copy  creates a valid instance</i>. Copying the bits of such a string could not increment an atomic counter, because it wouldn&#39;t be copying anymore. You get to choose what guarantees you need. You can <a href=\"http://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow noreferrer\">share ownership</a>, <a href=\"http://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\">share ownership across threads</a>, implement <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\">clone on write</a>, etc. It would not be good for a systems language to make that decision (and burden your code) for you."}, {"owner": {"reputation": 1455, "user_id": 2649611, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ff3b4b9e7a105dc104f8d76a0b31e92?s=128&d=identicon&r=PG", "display_name": "cakraww", "link": "https://stackoverflow.com/users/2649611/cakraww"}, "edited": false, "score": 0, "creation_date": 1583172330, "post_id": 38216027, "comment_id": 107018852, "body": "What does it mean by <code>bitwise copy</code>?"}, {"owner": {"reputation": 707, "user_id": 6123297, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-KXgs140Qp_0/AAAAAAAAAAI/AAAAAAAAANM/fM_-QxoxFIw/photo.jpg?sz=128", "display_name": "MG lolenstine", "link": "https://stackoverflow.com/users/6123297/mg-lolenstine"}, "reply_to_user": {"reputation": 1455, "user_id": 2649611, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8ff3b4b9e7a105dc104f8d76a0b31e92?s=128&d=identicon&r=PG", "display_name": "cakraww", "link": "https://stackoverflow.com/users/2649611/cakraww"}, "edited": false, "score": 2, "creation_date": 1584356193, "post_id": 38216027, "comment_id": 107402869, "body": "@cakraww <code>bitwise copy</code> is a shallow copy of all bytes using <code>memcpy</code> or similar <a href=\"https://stackoverflow.com/questions/42749439/what-is-the-difference-between-memberwise-copy-bitwise-copy-shallow-copy-and-d\" title=\"what is the difference between memberwise copy bitwise copy shallow copy and d\">stackoverflow.com/questions/42749439/&hellip;</a>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 54, "last_activity_date": 1538491905, "last_edit_date": 1538491905, "creation_date": 1467776598, "answer_id": 38216027, "question_id": 38215753, "link": "https://stackoverflow.com/questions/38215753/how-do-i-implement-copy-and-clone-for-a-type-that-contains-a-string-or-any-type/38216027#38216027", "title": "How do I implement Copy and Clone for a type that contains a String (or any type that doesn&#39;t implement Copy)?", "body": "<h3>Copy</h3>\n\n<p><a href=\"http://doc.rust-lang.org/stable/std/marker/trait.Copy.html\" rel=\"noreferrer\"><code>Copy</code></a> designates types for which making a bitwise copy creates a valid instance without invalidating the original instance.</p>\n\n<p>This isn't true for <a href=\"http://doc.rust-lang.org/stable/std/string/struct.String.html\" rel=\"noreferrer\"><code>String</code></a>, because <code>String</code> contains a pointer to the string data on the heap and assumes it has unique ownership of that data. When you drop a <code>String</code>, it deallocates the data on the heap. If you had made a bitwise copy of a <code>String</code>, then both instances would try to deallocate the same memory block, which is <em>undefined behaviour</em>. </p>\n\n<p>Since <code>String</code> doesn't implement <code>Copy</code>, <strong>your <code>enum</code> cannot implement <code>Copy</code> either</strong> because the compiler enforces that <code>Copy</code> types are composed only of <code>Copy</code> data members.</p>\n\n<h3>Clone</h3>\n\n<p><a href=\"http://doc.rust-lang.org/stable/std/clone/trait.Clone.html\" rel=\"noreferrer\"><code>Clone</code></a> merely provides a standard <code>clone</code> method, and it's up to each implementor to decide how to implement it. <code>String</code> does implement <code>Clone</code>, so you <em>can</em> put <code>#[derive(Clone)]</code> on your <code>enum</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 483726, "user_id": 217408, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/IlnZm.jpg?s=128&g=1", "display_name": "G&#252;nter Z&#246;chbauer", "link": "https://stackoverflow.com/users/217408/g%c3%bcnter-z%c3%b6chbauer"}, "edited": false, "score": 0, "creation_date": 1572263467, "post_id": 53363895, "comment_id": 103493842, "body": "For <code>#[derive(Clone, Copy)] pub enum ServerResponse {     Ok(String),     Err(String), }</code> I get <code>error[E0204]: the trait &#39;Copy&#39; may not be implemented for this type</code>  <code>Ok(String),    |        ------ this field does not implement &#39;Copy&#39;</code>. Implementing Copy manually leads to a similar error."}], "tags": [], "owner": {"reputation": 789, "user_id": 1846335, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/829ec82ec374442cc44d02453b861f9b?s=128&d=identicon&r=PG", "display_name": "Brandon", "link": "https://stackoverflow.com/users/1846335/brandon"}, "is_accepted": false, "score": 6, "last_activity_date": 1542564978, "last_edit_date": 1542564978, "creation_date": 1542563891, "answer_id": 53363895, "question_id": 38215753, "link": "https://stackoverflow.com/questions/38215753/how-do-i-implement-copy-and-clone-for-a-type-that-contains-a-string-or-any-type/53363895#53363895", "title": "How do I implement Copy and Clone for a type that contains a String (or any type that doesn&#39;t implement Copy)?", "body": "<p>I did some exploring to see what a manual implementation would look like for an enum. I came up with this, but keep in mind you can also do <code>#[derive(Clone)]</code> as stated elsewhere and the compiler will do this for you.</p>\n\n<pre><code>enum Simple {\n    Error(String),\n    Okay,\n    Foo([u32; 5]),\n}\n\nimpl Clone for Simple {\n    fn clone(&amp;self) -&gt; Simple {\n        match self {\n            Error(a) =&gt; Error(a.to_string()),\n            Okay =&gt; Okay,\n            Foo(a) =&gt; Foo(a.clone()),\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 22110, "favorite_count": 8, "accepted_answer_id": 38216027, "answer_count": 2, "score": 51, "last_activity_date": 1588103486, "creation_date": 1467774116, "last_edit_date": 1588103486, "question_id": 38215753, "link": "https://stackoverflow.com/questions/38215753/how-do-i-implement-copy-and-clone-for-a-type-that-contains-a-string-or-any-type", "title": "How do I implement Copy and Clone for a type that contains a String (or any type that doesn&#39;t implement Copy)?", "body": "<p>I have an enum in Rust which has one value that takes a <code>String</code>:</p>\n\n<pre><code>#[derive(Clone, Copy)]\nenum Simple {\n    Error(String),\n    Okay,\n    Foo([u32; 5]),\n}\n\nfn main() {\n    let x = Simple::Error(String::from(\"blah\"));\n    let y = x.clone();\n}\n</code></pre>\n\n<p>The enum value <code>Foo</code> above represents about 10 other enums I use that take copyable types or arrays of them. The compiler doesn't seem to complain about them, only the <code>Error(String)</code> which causes this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0204]: the trait `Copy` may not be implemented for this type\n --&gt; src/main.rs:1:17\n  |\n1 | #[derive(Clone, Copy)]\n  |                 ^^^^\n2 | enum Simple {\n3 |     Error(String),\n  |           ------ this field does not implement `Copy`\n  |\n</code></pre>\n\n<p>For some reason, <code>String</code> is not copyable. I don't get this. How do I implement <code>Clone</code> for an enum for just the one type which has a problem while using the default impl for the rest?</p>\n"}, {"tags": ["rust", "borrow-checker"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467759456, "post_id": 38213453, "comment_id": 63851792, "body": "The <code>RefCell</code> will not resolve this issue. This is a know limitation of the borrow checker and there are some questions/answers about this. I pointed one possible duplicate, but I think we should find a definitive answer (if possible). @Shepmaster do you know a better duplicate?"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1467759464, "post_id": 38213453, "comment_id": 63851795, "body": "Possible duplicate of <a href=\"http://stackoverflow.com/questions/30243606/if-let-borrow-conundrum\">If let borrow conundrum</a>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1467759929, "post_id": 38213453, "comment_id": 63851921, "body": "@malbarbo I don&#39;t think it&#39;s exactly the same as that one. It has to do with a returning a reference from a <code>&amp;mut self</code> method. That causes the mutable borrow to persist. <a href=\"https://play.rust-lang.org/?gist=5a6c22cd3d19b5b5eb9f3a759ecb84aa\" rel=\"nofollow noreferrer\">example</a>"}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1467760844, "post_id": 38213453, "comment_id": 63852158, "body": "Meanwhile I have found a solution, however it looks utterly ugly to me. <a href=\"https://gist.github.com/7f108112b95e2550691095e34c7cf37f\" rel=\"nofollow noreferrer\">gist.github.com/7f108112b95e2550691095e34c7cf37f</a>"}, {"owner": {"reputation": 759, "user_id": 1176628, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ff2296d70542d30deb6fd858c29c5960?s=128&d=identicon&r=PG", "display_name": "krdln", "link": "https://stackoverflow.com/users/1176628/krdln"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467761312, "post_id": 38213453, "comment_id": 63852275, "body": "The simplest way would be to use early <code>return</code> after processing error.  @Shepmaster I think it&#39;s actually quite the same, <code>Option&lt;Chars&gt;</code> also borrows from <code>&amp;mut self</code>, the lifetime parameter is just hidden by elision."}], "answers": [{"comments": [{"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1467836818, "post_id": 38218919, "comment_id": 63887959, "body": "btw, this might be related <a href=\"https://github.com/rust-lang/rust/issues/21906\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/21906</a>"}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": false, "score": 3, "last_activity_date": 1467791804, "creation_date": 1467791804, "answer_id": 38218919, "question_id": 38213453, "link": "https://stackoverflow.com/questions/38213453/match-refcell-x-does-not-live-long-enough/38218919#38218919", "title": "match + RefCell = X does not live long enough", "body": "<p>As krdln suggested, the simplest way to work around this is to return in the <code>if</code> block and thus scope the borrow:</p>\n\n<pre><code>fn add(&amp;mut self, mut m: Box&lt;Item&gt;) {\n    if let Some(e) = m.init() {\n        //process error\n        return;\n    } \n    self.items.push(m);\n}\n</code></pre>\n"}], "owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 717, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1467797258, "creation_date": 1467755780, "last_edit_date": 1467797258, "question_id": 38213453, "link": "https://stackoverflow.com/questions/38213453/match-refcell-x-does-not-live-long-enough", "title": "match + RefCell = X does not live long enough", "body": "<p>I need to initialize an item (<code>fn init(&amp;mut self) -&gt; Option&lt;&amp;Error&gt;</code>), and use it if there's no errors.</p>\n\n<pre><code>pub fn add(&amp;mut self, mut m: Box&lt;Item&gt;) {\n    if let None = m.init() {\n        self.items.push(m);\n    }\n}\n</code></pre>\n\n<p>This works unless I need to check the error if there's any:</p>\n\n<pre><code>pub fn add(&amp;mut self, mut m: Box&lt;Item&gt;) {\n    if let Some(e) = m.init() {\n        //process error\n    } else {\n        self.items.push(m); //won't compile, m is borrowed\n    }\n}\n</code></pre>\n\n<p>Fair. Need to use <code>RefCell</code>. However, this</p>\n\n<pre><code>pub fn add(&amp;mut self, mut m: Box&lt;Item&gt;) {\n    let rc = RefCell::new(m);\n\n    if let Some(e) = rc.borrow_mut().init() {           \n        //process error         \n    } else {\n        self.items.push(rc.borrow_mut())\n    }\n}\n</code></pre>\n\n<p>ends with weird</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `rc` does not live long enough\n        if let Some(e) = rc.borrow_mut().init() {\n                     ^~\nnote: reference must be valid for the destruction scope surrounding block at 75:60...\n    pub fn add_module(&amp;mut self, mut m: Box&lt;RuntimeModule&gt;) {\n                                                        ^\nnote: ...but borrowed value is only valid for the block suffix following statement 0 at 76:30\n        let rc = RefCell::new(m);\n</code></pre>\n\n<p>I tried nearly everything: plain box, <code>Rc</code>'ed box, <code>RefCell</code>'ed box, <code>Rc</code>'ed <code>RefCell</code>. Tried to adapt <a href=\"https://stackoverflow.com/questions/27742032/boxed-value-does-not-live-long-enough\">this answer</a> to my case. No use.</p>\n\n<p>Complete example:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::error::Error;\n\ntrait Item {\n    fn init(&amp;mut self) -&gt; Option&lt;&amp;Error&gt;;\n}\n\nstruct ItemImpl {}\n\nimpl Item for ItemImpl {\n    fn init(&amp;mut self) -&gt; Option&lt;&amp;Error&gt; {\n        None\n    }\n}\n\n//===========================================\n\nstruct Storage {\n    items: Vec&lt;Box&lt;Item&gt;&gt;,\n}\n\nimpl Storage {\n    fn new() -&gt; Storage {\n        Storage{\n            items: Vec::new(),\n        }\n    }\n\n    fn add(&amp;mut self, mut m: Box&lt;Item&gt;) {\n        let rc = RefCell::new(m);\n\n        if let Some(e) = rc.borrow_mut().init() {           \n            //process error         \n        } else {\n            self.items.push(*rc.borrow_mut())\n        }\n    }\n}\n\nfn main() {\n    let mut s = Storage::new();\n    let mut i = Box::new(ItemImpl{});\n    s.add(i);\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=f738d6f5048c982aa0fbe049987fc094&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Playground</a>)</p>\n\n<p>UPD: As suggested, this is a \"family\" of mistakes like I did, it is well explained <a href=\"https://stackoverflow.com/questions/30243606/if-let-borrow-conundrum\">here</a>. However my case has easier solution.</p>\n"}, {"tags": ["time", "rust", "strftime"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1467753005, "post_id": 38211965, "comment_id": 63849610, "body": "I think the <a href=\"https://lifthrasiir.github.io/rust-chrono/chrono/format/strftime/index.html\" rel=\"nofollow noreferrer\">chrono crate</a> has support for that specifier."}], "answers": [{"comments": [{"owner": {"reputation": 1885, "user_id": 5424731, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4bf3b6355750186d1dcef4fbed296d49?s=128&d=identicon&r=PG&f=1", "display_name": "joe_04_04", "link": "https://stackoverflow.com/users/5424731/joe-04-04"}, "edited": false, "score": 0, "creation_date": 1526205538, "post_id": 38212815, "comment_id": 87645585, "body": "I&#39;m getting &quot;Could not find <code>UTC</code> in <code>chrono</code>&quot; when using this code.  Any suggestions?"}, {"owner": {"reputation": 1885, "user_id": 5424731, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/4bf3b6355750186d1dcef4fbed296d49?s=128&d=identicon&r=PG&f=1", "display_name": "joe_04_04", "link": "https://stackoverflow.com/users/5424731/joe-04-04"}, "edited": false, "score": 0, "creation_date": 1526206774, "post_id": 38212815, "comment_id": 87645909, "body": "Figured it out, <code>UTC</code> is actually <code>Utc</code>"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 9, "last_activity_date": 1563548662, "last_edit_date": 1563548662, "creation_date": 1467753111, "answer_id": 38212815, "question_id": 38211965, "link": "https://stackoverflow.com/questions/38211965/how-can-i-print-a-date-time-from-timestrftime-without-leading-zeros/38212815#38212815", "title": "How can I print a date/time from time::strftime without leading zeros?", "body": "<p>Looking <a href=\"https://github.com/rust-lang-deprecated/time/blob/0.1.35/src/lib.rs#L602-L641\" rel=\"nofollow noreferrer\">the code</a> we can confirm that <code>time</code> crate does not support the flag <code>-</code>. Also note that <a href=\"https://github.com/rust-lang-deprecated/time\" rel=\"nofollow noreferrer\"><code>time</code></a> crate is on <code>rust-lang-deprecated</code> user, so it is being deprecated.</p>\n\n<hr>\n\n<p>That said, I recommend you use the <a href=\"https://crates.io/crates/chrono\" rel=\"nofollow noreferrer\"><code>chrono</code></a> crate. In addition to supporting the format specifiers you want, the chrono crate also has support for timezones and much more.</p>\n\n<pre><code>let now = chrono::Utc::now();\nprintln!(\"{}\", now.format(\"%b %-d, %-I:%M\").to_string());\n</code></pre>\n"}], "owner": {"reputation": 8064, "user_id": 2007760, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/da33a5de07879db5ea0d55be9f875932?s=128&d=identicon&r=PG", "display_name": "Peter Uhnak", "link": "https://stackoverflow.com/users/2007760/peter-uhnak"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2566, "favorite_count": 0, "accepted_answer_id": 38212815, "answer_count": 1, "score": 7, "last_activity_date": 1563548662, "creation_date": 1467749714, "last_edit_date": 1467750151, "question_id": 38211965, "link": "https://stackoverflow.com/questions/38211965/how-can-i-print-a-date-time-from-timestrftime-without-leading-zeros", "title": "How can I print a date/time from time::strftime without leading zeros?", "body": "<p>How can I print a date/time without leading zeros? For example, <code>Jul 5, 9:15</code>.</p>\n\n<p>According to the <a href=\"https://doc.rust-lang.org/time/time/index.html\" rel=\"noreferrer\">docs</a> it uses the same syntax as <code>strftime</code>, however suppressing leading zeros </p>\n\n<pre><code>time::strftime(\"%b %-d, %-I:%M\", &amp;time::now()).unwrap()\n</code></pre>\n\n<p>leads to an error:</p>\n\n<blockquote>\n  <p>thread '' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: InvalidFormatSpecifier('-')', ../src/libcore/result.rs:746</p>\n</blockquote>\n\n<p>I suspect Rust doesn't support the glibc extensions that provide this flag (and several others); however there is no syntax for non-prefixed date/time; the alternative (<code>%l</code>) just prefixes with blank space which is equally useless.</p>\n\n<p>I could create the string by hand, but that defeats the purpose of the function.</p>\n"}, {"tags": ["dynamic", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467745087, "post_id": 38210494, "comment_id": 63845358, "body": "Your edit would make this a duplicate of <a href=\"http://stackoverflow.com/questions/27957103/what-is-the-best-way-to-create-a-heterogeneous-collection-of-objects\">What is the best way to create a heterogeneous collection of objects?</a>."}, {"owner": {"reputation": 133611, "user_id": 152602, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7f370b4bd787fc68f9f62d9c6781cb79?s=128&d=identicon&r=PG", "display_name": "Lee", "link": "https://stackoverflow.com/users/152602/lee"}, "edited": false, "score": 0, "creation_date": 1467745422, "post_id": 38210494, "comment_id": 63845543, "body": "Do you actually need to allow any type, or just a closed union of types (e.g. <code>int</code> or <code>string</code>)?"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1467749084, "last_edit_date": 1467749084, "creation_date": 1467744769, "answer_id": 38210628, "question_id": 38210494, "link": "https://stackoverflow.com/questions/38210494/is-there-a-rust-equivalent-to-dynamic-in-c/38210628#38210628", "title": "Is there a Rust equivalent to `dynamic` in C#?", "body": "<p>Not directly. You can just create a new binding for <code>x</code>:</p>\n\n<pre><code>fn main() {\n    let x = 109;\n    let x = \"Hi\";\n}\n</code></pre>\n\n<p>Depending on your use case, you might be able to use a <em>generic bounded by a trait</em> or a <em>trait object</em> to achieve similar goals:</p>\n\n<pre><code>use std::fmt::Display;\n\nfn main() {\n    let mut x: Box&lt;Display&gt; = Box::new(109);\n    x = Box::new(\"Hi\");\n}\n</code></pre>\n\n<p>However, the <a href=\"https://msdn.microsoft.com/en-us/library/dd264736.aspx\" rel=\"nofollow\">C# docs state</a>:</p>\n\n<blockquote>\n  <p>At compile time, an element that is typed as dynamic is assumed to support any operation.</p>\n</blockquote>\n\n<p>This is not true for a trait object; a trait object only can be used for the explicit methods in the trait. I have not found this to be a significant hurdle in the code I have written. Generally, there's a fixed number of methods that I want to call so it's possible to map those to a trait. In other cases, I can provide a generic type to allow the user to specify a type that fits their case.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467747524, "post_id": 38211336, "comment_id": 63846637, "body": "Ah, I was just about to update with this. Note that you cannot downcast to a trait object, so you cannot get &quot;any type that is printable&quot;, for example. Still doesn&#39;t match <code>dynamic</code> because you can&#39;t just call any arbitrary method."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1467785325, "last_edit_date": 1467785325, "creation_date": 1467747296, "answer_id": 38211336, "question_id": 38210494, "link": "https://stackoverflow.com/questions/38210494/is-there-a-rust-equivalent-to-dynamic-in-c/38211336#38211336", "title": "Is there a Rust equivalent to `dynamic` in C#?", "body": "<p>One option is to use a vector of <a href=\"https://doc.rust-lang.org/beta/std/any/trait.Any.html\" rel=\"nofollow\"><code>Any</code></a> (link to beta because the stable docs is not showing the methods defined for <code>Any</code>, but they are stable):</p>\n\n<pre><code>use std::any::Any;\n\nfn main() {\n    let mut v: Vec&lt;Box&lt;Any&gt;&gt; = vec![];\n    v.push(Box::new(102usize));\n    v.push(Box::new(\"Hi\"));\n\n    for item in &amp;v {\n        // to do an operation, it is necessary to downcast to\n        // a concrete type\n        if let Some(x) = item.downcast_ref::&lt;usize&gt;() {\n            println!(\"num = {:?}\", x)\n        }\n    }\n}\n</code></pre>\n\n<p>Note that, contrary to <code>dynamic</code> in <code>C#</code>, that is assumed to support any operation, a value of type <code>Any</code> (<code>Box&lt;Any&gt;</code>) only support the operations defined in <code>Any</code> (<code>Box&lt;Any&gt;</code> and <code>Any</code>). A downcast is necessary to call any method of the concrete type.</p>\n\n<hr>\n\n<p>I think that it is not possible to have a type like <code>dynamic</code> of C# in Rust. To support calling any method on a dynamic value, it is necessary to have (complete) runtime reflection support, and Rust does not provide it.</p>\n\n<p>If you know the methods that will be called, then the best option is to define a trait and use <code>Box&lt;Trait&gt;</code> (<code>Any</code> is not necessary in this case).</p>\n"}], "owner": {"reputation": 298, "user_id": 5257938, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Audpv.png?s=128&g=1", "display_name": "TuxCrafting", "link": "https://stackoverflow.com/users/5257938/tuxcrafting"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 189, "favorite_count": 0, "accepted_answer_id": 38211336, "answer_count": 2, "score": 4, "last_activity_date": 1467785325, "creation_date": 1467744286, "last_edit_date": 1467746964, "question_id": 38210494, "link": "https://stackoverflow.com/questions/38210494/is-there-a-rust-equivalent-to-dynamic-in-c", "title": "Is there a Rust equivalent to `dynamic` in C#?", "body": "<p>Can the following C# code be translated to Rust?</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>dynamic x = 109;\nx = \"Hi\";\n</code></pre>\n\n<p>I'm asking for a general dynamic type to allow creating an array of dynamic values. For example:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>var l = new dynamic[2];\nl[0] = 102;\nl[1] = \"Hi\";\n</code></pre>\n"}, {"tags": ["string", "vector", "rust"], "comments": [{"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "edited": false, "score": 0, "creation_date": 1467715590, "post_id": 38200660, "comment_id": 63826750, "body": "Don&#39;t ask me why, but it works if you do it in two steps. See <a href=\"https://play.rust-lang.org/?gist=c41c369ce69ed2f03fbf8c24fa3961ea&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1467717797, "post_id": 38200660, "comment_id": 63828143, "body": "The <code>String</code> in <code>s</code> is moved into a temporary variable at the end of the match, which ceases to exist at the end of that expression. The superfluous <code>to_string()</code> only makes it worse."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1467718000, "post_id": 38200660, "comment_id": 63828274, "body": "And its not really a duplicate of that question. There the issue is that the return value references a string whose lifetime ends at the end of the block."}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1467718250, "post_id": 38200660, "comment_id": 63828448, "body": "Next time, please post a <a href=\"https://stackoverflow.com/help/mcve\">MCVE</a> yourself."}, {"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "reply_to_user": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1467719232, "post_id": 38200660, "comment_id": 63829035, "body": "&quot;And its not really a duplicate of that question.&quot; @starblue Do you think I should reopen it?"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 40, "favorite_count": 0, "closed_date": 1467715987, "answer_count": 0, "score": 0, "last_activity_date": 1467723107, "creation_date": 1467713320, "last_edit_date": 1467723107, "question_id": 38200660, "link": "https://stackoverflow.com/questions/38200660/get-file-content-as-a-vector-borrowed-value-does-not-live-long-enough", "closed_reason": "Duplicate", "title": "Get file content as a vector: Borrowed value does not live long enough", "body": "<p>I tried to get a file content as a vector. Reading the documentation, I thought I have to do it like this (simplified code, I removed error handling):</p>\n\n<pre><code>use std::fs::File;\nuse std::path::Path;\nuse std::io::Read;\n\nfn main() {\n    let mut s = String::new();\n    let c: Vec&lt;&amp;str&gt; = match open_or_die(\"test.txt\").read_to_string(&amp;mut s) {\n        Err(why) =&gt; panic!(\"fail\"),\n        Ok(_) =&gt; s,\n    }.to_string().split(\"\\n\").collect();\n    println!(\"{}\", c[0]);\n}    \n\nfn open_or_die(filename: &amp;str) -&gt; File {\n    File::open(&amp;Path::new(filename)).unwrap()\n}\n</code></pre>\n\n<p>But I've got a problem with lifetimes:</p>\n\n<pre><code>error: borrowed value does not live long enough\n</code></pre>\n\n<p>I'm still lost with lifetimes. Reading <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.split\" rel=\"nofollow\">the doc</a>, I thought it should work.</p>\n\n<p>What should I do to get a string slices as a vector?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 6, "last_activity_date": 1467714742, "creation_date": 1467714742, "answer_id": 38201170, "question_id": 38198829, "link": "https://stackoverflow.com/questions/38198829/equal-lifetimes-for-different-objects-in-different-places/38201170#38201170", "title": "Equal lifetimes for different objects in different places", "body": "<blockquote>\n  <p>So I think compiler compiles it successfully but it may lead to a runtime error or crash.</p>\n</blockquote>\n\n<p>Unless you are using some <code>unsafe {}</code> code, this can't happen in Rust. Rust always statically checks bounds and it doesn't matter whether the variables are on stack or heap or are fields or whatever.</p>\n\n<p>As for Rust's suggestions: since <a href=\"http://hyper.rs/hyper/v0.9.9/hyper/client/struct.RequestBuilder.html\" rel=\"noreferrer\"><code>RequestBuilder</code></a> has a lifetime itself the following function:</p>\n\n<pre><code>fn request(&amp;self, url: &amp;str, client: &amp;hyper::Client) -&gt; hyper::client::RequestBuilder;\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>fn request&lt;'a, 'b, 'c&gt;(&amp;'a self, url: &amp;'b str, client: &amp;'c hyper::Client) -&gt; hyper::client::RequestBuilder&lt;'a&gt;;\n//                      ^^                                                                                 ^^\n</code></pre>\n\n<p>because of the <a href=\"https://doc.rust-lang.org/book/lifetimes.html#lifetime-elision\" rel=\"noreferrer\">elisions rules</a>. Note the important rule for that examples:</p>\n\n<blockquote>\n  <p>If there are multiple input lifetimes, but one of them is <code>&amp;self</code> or <code>&amp;mut self</code>, the lifetime of self is assigned to all elided output lifetimes.</p>\n</blockquote>\n\n<p>And that's when Rust gives you a misleading suggestion. In your function, the return value depends on <code>client</code> but not actually on <code>self</code>. Rust propose you to give <code>self</code> and <code>client</code> the same lifetime (ie. <code>'a == 'c</code>):</p>\n\n<pre><code>fn request&lt;'a, 'b&gt;(&amp;'a self, url: &amp;'b str, client: &amp;'a hyper::Client) -&gt; hyper::client::RequestBuilder&lt;'a&gt;;\n//                  ^^                              ^^                                                 ^^\n</code></pre>\n\n<p>But it would be sufficient to have:</p>\n\n<pre><code>fn request&lt;'a, 'b, 'c&gt;(&amp;'a self, url: &amp;'b str, client: &amp;'c hyper::Client) -&gt; hyper::client::RequestBuilder&lt;'c&gt;;\n//                      ^^                              ^^                                                 ^^\n</code></pre>\n\n<p>which can be written with elision:</p>\n\n<pre><code>fn request&lt;'c&gt;(&amp;self, url: &amp;str, client: &amp;'c hyper::Client) -&gt; hyper::client::RequestBuilder&lt;'c&gt;;\n//                                        ^^                                                 ^^\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 72, "favorite_count": 0, "accepted_answer_id": 38201170, "answer_count": 1, "score": 2, "last_activity_date": 1467714742, "creation_date": 1467707941, "question_id": 38198829, "link": "https://stackoverflow.com/questions/38198829/equal-lifetimes-for-different-objects-in-different-places", "title": "Equal lifetimes for different objects in different places", "body": "<p>I have a struct <code>UrlShortener</code>:</p>\n\n<pre><code>pub struct UrlShortener {\n    client: hyper::Client,\n}\nimpl UrlShortener {\n    pub fn new() -&gt; UrlShortener {\n        UrlShortener {\n            client: hyper::Client::new(),\n        }\n    }\n\n    pub fn get(&amp;self, url: &amp;str) -&gt; Result&lt;String, Error&gt; {\n        let mut response = MyProvider.request(url, &amp;self.client).send().unwrap();\n        /// ...\n    }\n}\n</code></pre>\n\n<p>The <code>MyProvider</code> looks like this:</p>\n\n<pre><code>pub trait Provider {\n    fn name(&amp;self) -&gt; &amp;str;\n    fn request(&amp;self, url: &amp;str, client: &amp;hyper::Client) -&gt; hyper::client::RequestBuilder;\n}\n\npub struct MyProvider;\nimpl Provider for MyProvider {\n    fn name(&amp;self) -&gt; &amp;str {\n        \"myprovider\"\n    }\n\n    fn request(&amp;self, url: &amp;str, client: &amp;hyper::Client) -&gt; hyper::client::RequestBuilder {\n        client.get(&amp;format!(\"http://example.com/create.php?format=simple&amp;url={}\", url))\n    }\n}\n</code></pre>\n\n<p>The I tried to compile it at first time it did not work:</p>\n\n<pre><code>src/lib.rs:21:16: 21:19 error: cannot infer an appropriate lifetime for autoref due to conflicting requirements [E0495]\nsrc/lib.rs:21         client.get(&amp;format!(\"http://example.com/create.php?format=simple&amp;url={}\", url))\n                             ^~~\nsrc/lib.rs:20:5: 22:6 help: consider using an explicit lifetime parameter as shown: fn request&lt;'a&gt;(&amp;'a self, url: &amp;str, client: &amp;'a hyper::Client)\n -&gt; hyper::client::RequestBuilder\nsrc/lib.rs:20     fn request(&amp;self, url: &amp;str, client: &amp;hyper::Client) -&gt; hyper::client::RequestBuilder {\nsrc/lib.rs:21         client.get(&amp;format!(\"http://example.com/create.php?format=simple&amp;url={}\", url))\nsrc/lib.rs:22     }\nerror: aborting due to previous error\nerror: Could not compile `urlshortener`.\n</code></pre>\n\n<p>I've changed it according the compiler's advice and it is working okay. </p>\n\n<pre><code>fn request&lt;'a&gt;(&amp;'a self, url: &amp;str, client: &amp;'a hyper::Client) -&gt; hyper::client::RequestBuilder {\n    client.get(&amp;format!(\"http://example.com/create.php?format=simple&amp;url={}\", url))\n}\n</code></pre>\n\n<p>The question here is why does it work? What is in my mind:</p>\n\n<blockquote>\n  <p><code>'a</code> lifetime for <code>self</code> in the <code>Provider</code> is different from the lifetime of <code>client: &amp;hyper::Client</code> because these objects are in different places: <code>MyProvider</code> is on the stack and <code>client</code> is a field of the structure of the method I use.</p>\n</blockquote>\n\n<p>So I think compiler compiles it successfully but it may lead to a runtime error or crash. Am I wrong?</p>\n\n<p>\"Correct\" solution from my point of view would be:</p>\n\n<pre><code>fn request&lt;'a, 'b&gt;(&amp;'a self, url: &amp;str, client: &amp;'b hyper::Client) -&gt; hyper::client::RequestBuilder {\n</code></pre>\n"}, {"tags": ["rust", "libc"], "comments": [{"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "edited": false, "score": 1, "creation_date": 1467699706, "post_id": 38196386, "comment_id": 63817525, "body": "You could make <code>buf</code> a <code>Vec&lt;u8&gt;</code> and then call <code>libc::getcwd(buf.as_mut_ptr() as *mut i8, buf.len())</code>. Or something like that."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1467699807, "post_id": 38196386, "comment_id": 63817585, "body": "One note: there is no guarantee that the result of <code>getcwd</code> will be encoded in UTF-8, you might want to look into <code>OsString</code> which is specifically meant to contain those."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "edited": false, "score": 3, "creation_date": 1467699843, "post_id": 38196386, "comment_id": 63817612, "body": "@pyon: might as well use <code>as *mut c_char</code> in case <code>c_char</code> ever changes."}, {"owner": {"reputation": 15683, "user_id": 46571, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/79eede5b02caa81db17f34026b24a734?s=128&d=identicon&r=PG", "display_name": "pyon", "link": "https://stackoverflow.com/users/46571/pyon"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467699938, "post_id": 38196386, "comment_id": 63817665, "body": "@MatthieuM. Yep, you&#39;re right. I just looked at the code snippet, and assumed that <code>i8</code> would be the right type under all circumstances, which you rightly point it needn&#39;t be."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467700310, "post_id": 38196386, "comment_id": 63817832, "body": "@MatthieuM. <code>OsString</code> has <i>no</i> inherent relationship to C strings.  For example, on Windows, <code>OsString</code> is WTF-8, whilst C strings are <i>guaranteed</i> to be in some <i>other</i> encoding (since Win32 doesn&#39;t know what WTF-8 is)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1467700521, "post_id": 38196386, "comment_id": 63817949, "body": "@DK.: Oh, nice. Why should I assume sanity..."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1467701430, "post_id": 38196386, "comment_id": 63818369, "body": "thanks to your comments, I was now able to compile, but I&#39;ve run into the next issue: the resulting string is now empty.."}], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1467723391, "post_id": 38203819, "comment_id": 63832055, "body": "thanks a lot that you took time to write this extensive answer. I&#39;m new both to rust and to os programming, so this gives me quite some pointers which will be valuable in the future. Yes, I could use <code>env::current_dir</code> but I&#39;m trying to be as close to Unix programming as possible."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1467726579, "post_id": 38203819, "comment_id": 63834295, "body": "@PhilippKeller It <i>is</i> &quot;Unix programming&quot; -&gt; See the <a href=\"https://github.com/rust-lang/rust/blob/1.9.0/src/libstd/env.rs#L48-L50\" rel=\"nofollow noreferrer\">implementation of <code>env::current_dir</code></a> and its <a href=\"https://github.com/rust-lang/rust/blob/1.9.0/src/libstd/sys/unix/os.rs#L95-L119\" rel=\"nofollow noreferrer\">inner implementation</a>. Don&#39;t think that because Rust has a nice interface that it&#39;s doing something inane."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1467745507, "post_id": 38203819, "comment_id": 63845579, "body": "I&#39;m reading &quot;Advanced Programming in the Unix Environment&quot; which is a guided reference to &quot;unix programming in C&quot; with all the function definitions and memory constructs. That&#39;s why I want to stay with null terminated strings and all these &quot;obstacles&quot; for now. Thanks for the hint that the actual implementation in <code>std::env::current_dir</code>"}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1467783076, "post_id": 38203819, "comment_id": 63856833, "body": "fyi: I ended up with this: <a href=\"https://gist.github.com/philippkeller/6a9d4787c8962d9dd0f975432cd1e0bc\" rel=\"nofollow noreferrer\">gist.github.com/philippkeller/6a9d4787c8962d9dd0f975432cd1e0&zwnj;&#8203;bc</a> -  CStr has a <code>from_ptr</code> function which converts the <code>NUL</code> terminated string into an array. Also, io has <code>io::Error::last_os_error</code> so the external <code>errno</code> crate is not needed"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1467816900, "post_id": 38203819, "comment_id": 63876184, "body": "@PhilippKeller see my update discussing why that&#39;s a bad idea."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1467829449, "post_id": 38203819, "comment_id": 63883858, "body": "oh dear, of course! I wonder why this has actually worked. Thanks for the corrected code plus the comments. What I wondered was: why is it possible to have two mutable references to the vector? First as <code>mut buf</code> and then as <code>ptr = buf.as_mut_ptr()</code>. The ownership has not moved, has it? Otherwise, why is it possible to call <code>buf.capacity()</code>?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1467831410, "last_edit_date": 1467831410, "creation_date": 1467722644, "answer_id": 38203819, "question_id": 38196386, "link": "https://stackoverflow.com/questions/38196386/converting-output-of-libcgetcwd-into-a-string/38203819#38203819", "title": "Converting output of libc::getcwd into a string", "body": "<p>In <strong>most</strong> cases, you should just use <a href=\"http://doc.rust-lang.org/std/env/fn.current_dir.html\" rel=\"nofollow\"><code>env::current_dir</code></a>. This correctly handles all the platform-specifics for you, such as the \"other\" encodings mentioned in the comments.</p>\n\n<hr>\n\n<p>C strings are kind of terrible. <code>getcwd</code> fills a buffer of some length, but doesn't tell you where it ends; you have to manually find the terminating <code>NUL</code> byte.</p>\n\n<pre><code>extern crate libc;\n\nstatic BUF_BYTES: usize = 4096;\n\nfn main() {\n    let buf = unsafe {\n        let mut buf = Vec::with_capacity(BUF_BYTES);\n        let res = libc::getcwd(buf.as_mut_ptr() as *mut i8, buf.capacity());\n        if res.is_null() {\n            panic!(\"Not long enough\");\n        }\n        let mut len = 0;\n        while *buf.as_mut_ptr().offset(len as isize) != 0 { len += 1 }\n        buf.set_len(len);\n        buf\n    };\n\n    let s = String::from_utf8(buf).expect(\"Found invalid UTF-8\");\n    println!(\"result: {}\", s);\n}\n</code></pre>\n\n<blockquote>\n  <p>seems that buf.len() returns 0</p>\n</blockquote>\n\n<p>Yes, the length is zero because no one told the vector that data was added. Vectors are comprised of three parts - a pointer to data, a length, and a <em>capacity</em>.</p>\n\n<p>The capacity is how much memory is available, the size is how much is used. When treating the vector as a blob to store data into, you want to use the capacity. You then need to inform the vector how many of those bytes were used, so that <code>String::from_utf8</code> knows where the end is.</p>\n\n<p>You'll note that I changed the scope of <code>unsafe</code> to only include the truly unsafe aspects and the code that makes that code actually safe. </p>\n\n<hr>\n\n<p>In fact, you could just copy <a href=\"https://github.com/rust-lang/rust/blob/1.9.0/src/libstd/sys/unix/os.rs#L95-L119\" rel=\"nofollow\">the implementation of <code>env::current_dir</code> for Unix-like systems</a>. It handles the failure cases much nicer and uses the proper types (paths <strong>aren't</strong> strings). Of course, it's even easier to just call <code>env::current_dir</code>. ^_^</p>\n\n<hr>\n\n<blockquote>\n  <p>fyi: I ended up with this</p>\n\n<pre><code>extern crate libc;\n\nuse std::ffi::CStr;\nuse std::io;\nuse std::str;\n\nstatic BUF_BYTES: usize = 4096;\n\nfn main() {\n  let buf = unsafe {\n      let mut buf = Vec::with_capacity(BUF_BYTES);\n      let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n      if libc::getcwd(ptr, buf.capacity()).is_null() {\n          panic!(io::Error::last_os_error());\n      }\n      CStr::from_ptr(ptr).to_bytes()\n  };\n  println!(\"result: {}\", str::from_utf8(buf).unwrap());\n}\n</code></pre>\n</blockquote>\n\n<p>This is <strong>unsafe</strong> and will lead to crashes (in the best case) or silent memory corruption or worse.</p>\n\n<p>When a block ends, any variables within it will be dropped. In this case, the <code>unsafe</code> block creates <code>buf</code>, takes a pointer to it, makes a <code>CStr</code> with the pointer, then <em>frees the <code>Vec</code></em>, invalidating the pointer. It then returns that <code>CStr</code> containing an invalid reference from the block.</p>\n\n<p>Something like this is better:</p>\n\n<pre><code>extern crate libc;\n\nuse std::ffi::{CStr, CString};\nuse std::io;\nuse std::str;\n\nstatic BUF_BYTES: usize = 4096;\n\nfn main() {\n    let buf = unsafe {\n        // Allocate some space to store the result\n        let mut buf = Vec::with_capacity(BUF_BYTES);\n\n        // Call the function, panicking if it fails\n        let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n        if libc::getcwd(ptr, buf.capacity()).is_null() {\n            panic!(io::Error::last_os_error());\n        }\n\n        // Find the first NUL and inform the vector of that\n        let s = CStr::from_ptr(ptr);\n        buf.set_len(s.to_bytes().len());\n\n        // Transfer ownership of the Vec to a CString, ensuring there are no interior NULs\n        CString::new(buf)\n    };\n\n    let s = buf.expect(\"Not a C string\").into_string().expect(\"Not UTF-8\");\n    println!(\"result: {}\", s);\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>I wonder why this has actually worked</p>\n</blockquote>\n\n<p>Likely because nothing changed the memory before you attempted to access it. In a heavily multithreaded environment, I could see more issues arising.</p>\n\n<blockquote>\n  <p>why is it possible to have two mutable references to the vector? First as <code>mut buf</code> and then as <code>ptr = buf.as_mut_ptr()</code>. The ownership has not moved, has it? Otherwise, why is it possible to call <code>buf.capacity()</code></p>\n</blockquote>\n\n<p>You don't actually have two <em>references</em>. <code>buf</code> owns the value, then you get a <em>mutable pointer</em>. There is no compiler protection for pointers, which is part of the reason that an <code>unsafe</code> block is needed</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 506, "favorite_count": 0, "accepted_answer_id": 38203819, "answer_count": 1, "score": 3, "last_activity_date": 1467831410, "creation_date": 1467699459, "last_edit_date": 1467723262, "question_id": 38196386, "link": "https://stackoverflow.com/questions/38196386/converting-output-of-libcgetcwd-into-a-string", "title": "Converting output of libc::getcwd into a string", "body": "<p>I'd like to print out the result of <code>libc::getcwd</code>. My issue is that to create  <code>getcwd</code> takes an <code>i8</code> (<code>c_char</code>) buffer, whereas <code>String::from_utf8</code> needs a <code>u8</code> buffer. I started with:</p>\n\n<pre><code>static BUF_BYTES: usize = 4096;\n\nfn main() {\n    unsafe {\n        let mut buf: Vec&lt;i8&gt; = Vec::with_capacity(BUF_BYTES as usize);\n        libc::getcwd(buf.as_mut_ptr(), buf.len());\n        let s = String::from_utf8(buf).expect(\"Found invalid UTF-8\");\n        println!(\"result: {}\", s);\n    }\n}\n</code></pre>\n\n<p>Which produces the error:</p>\n\n<pre><code>14:32 error: mismatched types:\n expected `std::vec::Vec&lt;u8&gt;`,\n    found `std::vec::Vec&lt;i8&gt;` [E0308]\n</code></pre>\n\n<p>Thanks to the comments, I changed the <code>buf</code> into a <code>Vec&lt;u8&gt;</code> and cast it to a <code>c_char</code> buffer in the <code>getcwd</code> call:</p>\n\n<pre><code>    let mut buf: Vec&lt;u8&gt; = Vec::with_capacity(BUF_BYTES as usize);\n    libc::getcwd(buf.as_mut_ptr() as *mut c_char, buf.len());\n</code></pre>\n\n<p>This compiles but now, when printing the string it is empty (length: 0)</p>\n\n<p>I found that <code>getcwd</code> returns NULL (<code>libc::getcwd(...).is_null()</code> is true), reading the last error via external crate <code>errno</code> (why is this a separate crate to libc?) reveals that <code>getcwd</code> fails with \"Invalid argument\". The source of the problem seems that <code>buf.len()</code> returns 0.</p>\n"}, {"tags": ["compiler-errors", "rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1467676706, "post_id": 38193358, "comment_id": 63812342, "body": "Well, I got half of it. I have the kettle boiling now to make a coffee. Next time I&#39;ll have my coffee before answering, hah."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1467675195, "last_edit_date": 1495540739, "creation_date": 1467675195, "answer_id": 38193358, "question_id": 38193085, "link": "https://stackoverflow.com/questions/38193085/rust-borrowing-compilation-errors/38193358#38193358", "title": "Rust borrowing compilation errors", "body": "<p>Ultimately, you are attempting to <a href=\"https://stackoverflow.com/q/32300132/155423\">store a value and a reference to that value in the same struct</a>. Unlike other formulations, this <em>specific</em> case allows you to \"tie the knot\" of references, but probably doesn't do what you want. For example, after calling <code>init</code>, you will <em>never</em> be able to move the <code>Lexer</code> because moving it would invalidate the reference.</p>\n\n<p>It also explains the \"borrow again\" error. Because the lifetime is applied to self, and it's a mutable reference, the lexer itself will keep the mutable reference forever, meaning nothing else can ever mutate it, including itself.</p>\n\n<p>The short answer is: don't organize your code that way. For whatever reason, parsing and lexing is a popular problem in the Rust community. Check out how other libraries do it.</p>\n\n<p>Or check out how iterators work in general. The item being iterated over stays in place, and a separate iterator is returned that references the original item.</p>\n\n<p>Splitting your code into the same two pieces will likely be the best direction.</p>\n"}], "owner": {"reputation": 621, "user_id": 3638594, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d2e0428a10215aa7cf22257a82a4851b?s=128&d=identicon&r=PG&f=1", "display_name": "soarjay", "link": "https://stackoverflow.com/users/3638594/soarjay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 66, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1467675195, "creation_date": 1467672459, "last_edit_date": 1467674230, "question_id": 38193085, "link": "https://stackoverflow.com/questions/38193085/rust-borrowing-compilation-errors", "title": "Rust borrowing compilation errors", "body": "<p>I'm trying to learn Rust by writing a simple lexer. Here is what I have so far...</p>\n\n<pre><code>use std::fs::File;\nuse std::io::Read;\nuse std::str::Chars;\n\npub struct Lexer&lt;'a&gt; {\n    file_name: String,\n    file_contents: String,\n    iterator: Option&lt;Chars&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Lexer&lt;'a&gt; {\n\n    fn new(fname: &amp;str) -&gt; Lexer {\n        Lexer {\n            file_name: fname.to_string(),\n            file_contents: String::new(),\n            iterator: None,\n        }\n    }\n\n\n    // Reads the file contents and creates iterator\n    fn init(&amp;'a mut self) { \n\n        // Open the file\n        let mut f = File::open(&amp;self.file_name).expect(\"Couldn't open file\");\n\n        // Read the contents\n        f.read_to_string(&amp;mut self.file_contents).expect(\"Couldn't read file contents\");\n\n        self.iterator = Some(self.file_contents.chars());\n\n    }\n\n    // Gets the next character\n    fn get_next(&amp;mut self) -&gt; Option&lt;char&gt; {\n\n        self.iterator.unwrap().next()\n\n    }\n\n}\n\nfn main() {\n\n    let mut lexer = Lexer::new(\"test.txt\");\n    lexer.init();\n\n    // Assuming the file \"text.txt\" contains \"Hello World\" \n    // then the following two lines should print \"H\" then \"e\"\n\n    println!(\"{}\", lexer.get_next().unwrap());\n    println!(\"{}\", lexer.get_next().unwrap());\n\n}\n</code></pre>\n\n<p>However when I try to compile it I get the following two errors:</p>\n\n<pre><code>cannot move out of borrowed content [E0507]\nmain.rs:38          self.iterator.unwrap().next()\n</code></pre>\n\n<p>and</p>\n\n<pre><code>cannot borrow `lexer` as mutable more than once at a time [E0499]\nmain.rs:49      println!(\"{}\", lexer.get_next().unwrap());\n</code></pre>\n\n<p>A Google of the first error reveals that <code>Clone()</code>-ing is a possible solution for this kind of error, but I believe this won't work in this case as the iterators state needs to update every time <code>next()</code> is called.</p>\n\n<p>Does anyone have any suggestions on how to overcome these issues and get it to compile?</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1467653080, "post_id": 38189014, "comment_id": 63804970, "body": "<a href=\"https://play.rust-lang.org/?code=fn%20test_vec()%20-%3E%20Vec%3C%26%27static%20str%3E%20%7B%0A%20%20%20%20vec!%5B%22foo%22%2C%20%22bar%22%5D%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22%7B%3A%3F%7D%22%2C%20test_vec())%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1467651171, "creation_date": 1467651171, "answer_id": 38189354, "question_id": 38189014, "link": "https://stackoverflow.com/questions/38189014/how-can-i-return-a-string-vector/38189354#38189354", "title": "How can I return a String Vector?", "body": "<p>A <code>&amp;str</code> is not a <code>String</code>. It is a \"string slice\", meaning a kind of pointer into a <code>String</code> or something equivalent that is stored somewhere else. In your case you are using string literals (using quotes gives you string literals). String literals are of the type <code>&amp;'static str</code>, because they are stored in the same place where the compiled code is stored and thus are available for the <code>'static</code> lifetime, which means for (at least) the entire runtime of your program.</p>\n\n<p>So the easy fix is to have your method return that specific type: <code>&amp;'static str</code>.</p>\n\n<hr>\n\n<p>The compiler cannot infer a lifetime for the returned reference, because your function does not take any arguments of reference type. The only way the compiler will infer a lifetime in a function's signature, is by assuming that if you are returning a reference, it needs to live shorter than the argument it's referring to. There's more information in <a href=\"https://doc.rust-lang.org/book/lifetimes.html#lifetime-elision\">The Book</a></p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1459, "favorite_count": 2, "accepted_answer_id": 38189354, "answer_count": 1, "score": 0, "last_activity_date": 1467667649, "creation_date": 1467649582, "last_edit_date": 1467667649, "question_id": 38189014, "link": "https://stackoverflow.com/questions/38189014/how-can-i-return-a-string-vector", "title": "How can I return a String Vector?", "body": "<p>How can I return a String Vector in Rust? I tried:</p>\n\n<pre><code>fn test_vec() -&gt; Vec&lt;&amp;str&gt; {\n    vec!(\"foo\", \"bar\")\n}\n</code></pre>\n\n<p>The compiler says something about lifetimes, but I'm not sure my problem is really about lifetimes:</p>\n\n<pre><code>src/main.rs:9:22: 9:26 error: missing lifetime specifier [E0106]\n</code></pre>\n\n<p>I'm a bit lost, I think I misunderstood (or forgot to learn) something.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467640612, "post_id": 38186103, "comment_id": 63798491, "body": "There&#39;s no need for <code>PhantomData&lt;T&gt;</code>. Just replace it with <code>T</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467641773, "post_id": 38186103, "comment_id": 63799236, "body": "(I think). Something like how byteorder does it."}, {"owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1467651600, "post_id": 38186103, "comment_id": 63804440, "body": "Is there an RFC for boolean expressions in trait bounds?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "edited": false, "score": 0, "creation_date": 1467652920, "post_id": 38186103, "comment_id": 63804908, "body": "@MaikKlein not exactly about the case in question, but with <a href=\"https://github.com/rust-lang/rfcs/pull/1657\" rel=\"nofollow noreferrer\">this RFC</a> my answer would change a lot anyway."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467653224, "post_id": 38186103, "comment_id": 63805015, "body": "@Shepmaster Without using <code>PhantomData</code> we have to construct an object of type <code>T</code> which is a bit problematic... so we had to bound <code>T: Default</code> or anything. I think :P"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1467639344, "creation_date": 1467639344, "answer_id": 38186103, "question_id": 38185385, "link": "https://stackoverflow.com/questions/38185385/how-to-share-functionality-in-rust/38186103#38186103", "title": "How to share functionality in Rust?", "body": "<p>Your question is pretty broad and touches many topics. But your <code>PhantomData</code> idea could be a good solution. You can write different <code>impl</code> blocks for different generic types. I added a few things to your code:</p>\n\n<pre><code>struct VectorType;\nstruct NormalType;\nstruct PointType;\nstruct Vector&lt;T = VectorType&gt; {\n    data: [f32; 2],\n    _type: PhantomData&lt;T&gt;,\n}\ntype Normal = Vector&lt;NormalType&gt;;\ntype Point = Vector&lt;PointType&gt;;\n\n// --- above this line is old code --------------------\n\ntrait Pointy {}\nimpl Pointy for VectorType {}\nimpl Pointy for PointType {}\n\n// implement for all vector types\nimpl&lt;T&gt; Vector&lt;T&gt; {\n    fn new() -&gt; Self {\n        Vector {\n            data: [0.0, 0.0],\n            _type: PhantomData,\n        }\n    }\n}\n\n// impl for 'pointy' vector types\nimpl&lt;T: Pointy&gt; Vector&lt;T&gt; {\n    fn add&lt;R&gt;(&amp;mut self, other: Vector&lt;R&gt;) {}\n    fn transform(&amp;mut self) { /* standard matrix multiplication */ }\n}\n\n// impl for normals\nimpl Vector&lt;NormalType&gt; {\n    fn transform(&amp;mut self) { /* tranposed inversed matrix stuff */ }\n}\n\nfn main() {\n    let mut n = Normal::new();\n    let mut p = Point::new();\n    n.transform();\n    p.transform();\n\n    // n.add(Normal::new());  // ERROR:\n    // no method named `add` found for type `Vector&lt;NormalType&gt;` in the current scope\n    p.add(Point::new());\n}\n</code></pre>\n\n<blockquote>\n  <p>Is it possible to express boolean expression for trait bounds?</p>\n</blockquote>\n\n<p>No (not yet). But you can solve it in this case as shown above: you create a new trait (<code>Pointy</code>) and implement it for the types in your \"or\"-condition. Then you bound with that trait.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 112, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1467639344, "creation_date": 1467637140, "last_edit_date": 1467638161, "question_id": 38185385, "link": "https://stackoverflow.com/questions/38185385/how-to-share-functionality-in-rust", "title": "How to share functionality in Rust?", "body": "<pre><code>struct Vector {\n    data: [f32; 2]\n}\n\nimpl Vector {\n   //many methods\n}\n</code></pre>\n\n<p>Now I want to create a <code>Normal</code> which will almost behave exactly like a <code>Vector</code> but I need to differentiate the type. Because for example transforming a normal is different than transforming a vector. You need to transform it with the tranposed(inverse) matrix for example.</p>\n\n<p>Now I could do it like this:</p>\n\n<pre><code>struct Normal {\n    v: Vector\n}\n</code></pre>\n\n<p>And then reimplement all the functionality </p>\n\n<pre><code>impl Normal {\n    fn dot(self, other: Normal) -&gt; f32 {\n        Vector::dot(self.v, other.v)\n    }\n    ....\n}\n</code></pre>\n\n<p>I think I could also do it with <a href=\"http://doc.rust-lang.org/std/marker/struct.PhantomData.html\" rel=\"nofollow\"><code>PhantomData</code></a></p>\n\n<pre><code>struct VectorType;\nstruct NormalType;\nstruct PointType;\nstruct Vector&lt;T = VectorType&gt; {\n    data: [f32; 2],\n    _type: PhantomData&lt;T&gt;,\n}\ntype Normal = Vector&lt;NormalType&gt;;\n</code></pre>\n\n<p>But then I also need a way to implement functionality for specific types. </p>\n\n<p>It should be easy to implement for example <code>add</code> for everything so that it is possible to add <code>point + vector</code>.</p>\n\n<p>Or functionality specific to some type</p>\n\n<pre><code>impl Vector&lt;NormalType&gt; {..} // Normal specific stuff\n</code></pre>\n\n<p>Not sure how I would implement functionality for a subrange. For example maybe the dot product only makes sense for normals and vectors but not points.</p>\n\n<p>Is it possible to express boolean expression for trait bounds?</p>\n\n<pre><code>trait NormalTrait;\ntrait VectorTrait;\nimpl NormalTrait for NormalType {}\nimpl VectorTrait for VectorType {}\n\nimpl&lt;T: PointTrait or VectorTrait&gt; for Vector&lt;T&gt; {\n    fn dot(self, other: Vector&lt;T&gt;) -&gt; f32 {..} \n}\n</code></pre>\n\n<p>What are my alternatives?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 25774, "user_id": 1048479, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/a9b214fab73f4c18ded501d976a2294c?s=128&d=identicon&r=PG", "display_name": "Nick Tomlin", "link": "https://stackoverflow.com/users/1048479/nick-tomlin"}, "edited": false, "score": 1, "creation_date": 1467632919, "post_id": 38183903, "comment_id": 63793721, "body": "Thanks for the macro, that&#39;s quite nice! While <code>to_string</code> is slightly shorter than <code>String::From</code>, is there any advantage in using it over <code>String::from</code>?"}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "reply_to_user": {"reputation": 25774, "user_id": 1048479, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/a9b214fab73f4c18ded501d976a2294c?s=128&d=identicon&r=PG", "display_name": "Nick Tomlin", "link": "https://stackoverflow.com/users/1048479/nick-tomlin"}, "edited": false, "score": 0, "creation_date": 1467633180, "post_id": 38183903, "comment_id": 63793884, "body": "It actually is equivalent: have a look at the <code>to_string</code> implementation <a href=\"https://doc.rust-lang.org/src/collections/up/src/libcollections/string.rs.html#1768-1774\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/collections/up/src/libcollections/&hellip;</a>"}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 21, "last_activity_date": 1467632573, "creation_date": 1467632573, "answer_id": 38183903, "question_id": 38183551, "link": "https://stackoverflow.com/questions/38183551/concisely-initializing-a-vector-of-strings/38183903#38183903", "title": "Concisely initializing a vector of Strings", "body": "<p>You can use the <code>to_string()</code> method directly on the literals:</p>\n\n<pre><code>let test_args = vec![\"-w\".to_string(), \"60\".to_string(), \"arg\".to_string()];\n</code></pre>\n\n<p>Otherwise a macro to do this would be as simple as:</p>\n\n<pre><code>macro_rules! vec_of_strings {\n    ($($x:expr),*) =&gt; (vec![$($x.to_string()),*]);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=bfb5144953af92f8ff8a2ec9b5861c93&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">See play.rust.org example</a></p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 11, "last_activity_date": 1467637740, "creation_date": 1467637740, "answer_id": 38185570, "question_id": 38183551, "link": "https://stackoverflow.com/questions/38183551/concisely-initializing-a-vector-of-strings/38185570#38185570", "title": "Concisely initializing a vector of Strings", "body": "<p>JDemler already provided a nice answer. I have two additional things to say:</p>\n\n<p>First, you can also use <code>into()</code> instead of <code>to_string()</code> for all elements but the first. This is slightly shorter and also equivalent to <code>to_string()</code>/<code>String::from()</code>. Looks like this:</p>\n\n<pre><code>vec![\"a\".to_string(), \"b\".into(), \"c\".into()];\n</code></pre>\n\n<hr>\n\n<p>Second, you might want to redesign your arg parsing. I will assume here that you won't mutate the <code>String</code>s you get from <code>env::args()</code>. I imagine your current function to look like:</p>\n\n<pre><code>fn parse_args(args: &amp;[String]) -&gt; SomeResult { ... }\n</code></pre>\n\n<p>But you can make that function more generic by not accepting <code>String</code>s but <a href=\"http://doc.rust-lang.org/std/convert/trait.AsRef.html\" rel=\"noreferrer\"><code>AsRef&lt;str&gt;</code></a>. It would look like this:</p>\n\n<pre><code>fn parse_args&lt;T: AsRef&lt;str&gt;&gt;(args: &amp;[T]) -&gt; SomeResult { ... }\n</code></pre>\n\n<p>In the documentation you can see that <code>String</code> as well as <code>str</code> itself implement that trait. Therefore you can pass a <code>&amp;[String]</code> <em>and</em> a <code>&amp;[&amp;str]</code> into your function. Awesome, eh?</p>\n\n<hr>\n\n<p>In similar fashion, if you want to accept anything that can be converted into an owned <code>String</code>, you can accept <code>&lt;T: Into&lt;String&gt;&gt;</code> and if you want to return either a <code>String</code> or an <code>&amp;str</code>, you can use <a href=\"http://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"noreferrer\"><code>Cow</code></a>. You can read more about that <a href=\"http://hermanradtke.com/2015/05/29/creating-a-rust-function-that-returns-string-or-str.html\" rel=\"noreferrer\">here</a> and <a href=\"http://hermanradtke.com/2015/05/06/creating-a-rust-function-that-accepts-string-or-str.html\" rel=\"noreferrer\">here</a>.</p>\n\n<p>Apart from all that: there are plenty of good CLI-Arg parsers out there (<a href=\"https://github.com/kbknapp/clap-rs\" rel=\"noreferrer\"><code>clap-rs</code></a>, <a href=\"https://github.com/docopt/docopt.rs\" rel=\"noreferrer\"><code>docopt-rs</code></a>, ...), so you might not need to write your own.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1467641360, "last_edit_date": 1495541379, "creation_date": 1467641360, "answer_id": 38186733, "question_id": 38183551, "link": "https://stackoverflow.com/questions/38183551/concisely-initializing-a-vector-of-strings/38186733#38186733", "title": "Concisely initializing a vector of Strings", "body": "<p>I agree that <a href=\"https://stackoverflow.com/a/38185570/155423\">Lukas Kalbertodt's answer</a> is the best \u2014 use generics to accept anything that can look like a slice of strings.</p>\n\n<p>However, you can clean up the <code>map</code> version a little bit:</p>\n\n<ol>\n<li>There's no need to allocate a vector for the initial set of strings.</li>\n<li>There's no need to use the complete type (<code>Vec&lt;String&gt;</code>); you could specify just the collection (<code>Vec&lt;_&gt;</code>). If you pass the result to a function that only accepts a <code>Vec&lt;String&gt;</code>, then you don't need any explicit types at all; it can be completely inferred.</li>\n<li>You can use a slightly shorter <code>s.into()</code> in the <code>map</code>.</li>\n</ol>\n\n<hr>\n\n<pre><code>fn do_stuff_with_args(args: Vec&lt;String&gt;) { println!(\"{}\", args.len()) }\n\nfn main() {\n    let args = [\"-w\", \"60\", \"args\"].iter().map(|&amp;s| s.into()).collect();\n    do_stuff_with_args(args);\n}\n</code></pre>\n"}], "owner": {"reputation": 25774, "user_id": 1048479, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/a9b214fab73f4c18ded501d976a2294c?s=128&d=identicon&r=PG", "display_name": "Nick Tomlin", "link": "https://stackoverflow.com/users/1048479/nick-tomlin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14969, "favorite_count": 8, "accepted_answer_id": 38183903, "answer_count": 3, "score": 18, "last_activity_date": 1467641360, "creation_date": 1467631417, "last_edit_date": 1467640455, "question_id": 38183551, "link": "https://stackoverflow.com/questions/38183551/concisely-initializing-a-vector-of-strings", "title": "Concisely initializing a vector of Strings", "body": "<p>I'm trying to create a vector of <code>String</code>s to test arg parsing (since this is what <code>std::env::args()</code> returns) but struggling with how to do this concisely.</p>\n\n<p>What I want:</p>\n\n<pre><code>let test_args = vec![\"-w\", \"60\", \"arg\"]; // should array of Strings\nlet expected_results = my_arg_parser(test_args);\n</code></pre>\n\n<p>This obviously doesn't work because the vectors contents are all <code>&amp;str</code>s.</p>\n\n<p>Using <code>String::from</code> but works but doesn't scale well and is ugly :)</p>\n\n<pre><code>let args = vec![String::from(\"-w\"), String::from(\"60\"), String::from(\"args\")];\n</code></pre>\n\n<p>I could map over the references and return string objects, but this seems very verbose:</p>\n\n<pre><code>let args = vec![\"-w\", \"60\", \"args\"].iter().map(|x| x.to_string()).collect::&lt;Vec&lt;String&gt;&gt;();\n</code></pre>\n\n<p>Should I just create a helper function to do the conversion, or is there an easier way?</p>\n"}, {"tags": ["rust", "iron"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1467646865, "creation_date": 1467646865, "answer_id": 38188369, "question_id": 38179117, "link": "https://stackoverflow.com/questions/38179117/how-can-i-use-server-sent-events-in-iron/38188369#38188369", "title": "How can I use Server-Sent events in Iron?", "body": "<p>I think the short answer is: <em>you can't</em>. The current version of Iron is built on a single request-response interaction. This can be seen in your code because the only way to send a response is to return it; terminating the handler thread.</p>\n\n<p>There's an issue in Iron to <a href=\"https://github.com/iron/iron/issues/446\" rel=\"nofollow\">utilize the new async support in Hyper</a>, which itself was <a href=\"https://github.com/hyperium/hyper/issues/395\" rel=\"nofollow\">merged relatively recently</a>. There are even <a href=\"https://github.com/hyperium/hyper/issues/719\" rel=\"nofollow\">other people trying to use Server-Send Events in Hyper</a> that haven't succeeded yet.</p>\n\n<hr>\n\n<p>If you are willing to use the Hyper master branch, something like this seems to work. No guarantees that this is a <em>good</em> solution or that it doesn't eat up all your RAM or CPU. It seems to work in Chrome though.</p>\n\n<pre><code>extern crate hyper;\n\nuse std::time::{Duration, Instant};\nuse std::io::prelude::*;\n\nuse hyper::{Control, Encoder, Decoder, Next };\nuse hyper::server::{Server, HandlerFactory, Handler, Request, Response};\nuse hyper::status::StatusCode;\nuse hyper::header::ContentType;\nuse hyper::net::{HttpStream};\n\n\nfn main() {\n    let address = \"0.0.0.0:7777\".parse().expect(\"Invalid address\");\n    let server = Server::http(&amp;address).expect(\"Invalid server\");\n\n    let (_listen, server_loop) = server.handle(MyFactory).expect(\"Failed to handle\");\n\n    println!(\"Starting...\");\n    server_loop.run();\n}\n\n\nstruct MyFactory;\n\nimpl HandlerFactory&lt;HttpStream&gt; for MyFactory {\n    type Output = MyHandler;\n\n    fn create(&amp;mut self, ctrl: Control) -&gt; Self::Output {\n        MyHandler {\n            control: ctrl,\n        }\n    }\n}\n\n\nstruct MyHandler {\n    control: Control,\n}\n\nimpl Handler&lt;HttpStream&gt; for MyHandler {\n    fn on_request(&amp;mut self, _request: Request&lt;HttpStream&gt;) -&gt; Next {\n        println!(\"A request was made\");\n        Next::write()\n    }\n\n    fn on_request_readable(&amp;mut self, _request: &amp;mut Decoder&lt;HttpStream&gt;) -&gt; Next {\n        println!(\"Request has data to read\");\n        Next::write()\n    }\n\n    fn on_response(&amp;mut self, response: &amp;mut Response) -&gt; Next {\n        println!(\"A response is ready to be sent\");\n\n        response.set_status(StatusCode::Ok);\n        let mime = \"text/event-stream\".parse().expect(\"Invalid MIME\");\n        response.headers_mut().set(ContentType(mime));\n\n        every_duration(Duration:: from_secs(1), self.control.clone());\n\n        Next::wait()\n    }\n\n    fn on_response_writable(&amp;mut self, response: &amp;mut Encoder&lt;HttpStream&gt;) -&gt; Next {\n        println!(\"A response can be written\");\n\n        // Waited long enough, send some data\n        let fake_data = r#\"event: userconnect\ndata: {\"username\": \"bobby\", \"time\": \"02:33:48\"}\"#;\n\n        println!(\"Writing some data\");\n        response.write_all(fake_data.as_bytes()).expect(\"Failed to write\");\n        response.write_all(b\"\\n\\n\").expect(\"Failed to write\");\n\n        Next::wait()\n    }\n}\n\nuse std::thread;\n\nfn every_duration(max_elapsed: Duration, control: Control) {\n    let mut last_sent: Option&lt;Instant&gt; = None;\n    let mut count = 0;\n\n    thread::spawn(move || {\n        loop {\n            // Terminate after a fixed number of messages\n            if count &gt;= 5 {\n                println!(\"Maximum messages sent, ending\");\n                control.ready(Next::end()).expect(\"Failed to trigger end\");\n                return;\n            }\n\n            // Wait a little while between messages\n            if let Some(last) = last_sent {\n                let elapsed = last.elapsed();\n                println!(\"It's been {:?} since the last message\", elapsed);\n\n                if elapsed &lt; max_elapsed {\n                    let remaining = max_elapsed - elapsed;\n                    println!(\"There's {:?} remaining\", remaining);\n                    thread::sleep(remaining);\n                }\n            }\n\n            // Trigger a message\n            control.ready(Next::write()).expect(\"Failed to trigger write\");\n\n            last_sent = Some(Instant::now());\n            count += 1;\n        }\n    });\n}\n</code></pre>\n\n<p>And the client-side JS:</p>\n\n<pre><code>var evtSource = new EventSource(\"http://127.0.0.1:7777\");\n\nevtSource.addEventListener(\"userconnect\", function(e) {\n    const obj = JSON.parse(e.data);\n    console.log(obj);\n}, false);\n</code></pre>\n"}], "owner": {"reputation": 1138, "user_id": 561327, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/bcee6691999f40d243e9e2da6807fc81?s=128&d=identicon&r=PG", "display_name": "Luke B.", "link": "https://stackoverflow.com/users/561327/luke-b"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 576, "favorite_count": 1, "accepted_answer_id": 38188369, "answer_count": 1, "score": 2, "last_activity_date": 1483457313, "creation_date": 1467617460, "last_edit_date": 1467640669, "question_id": 38179117, "link": "https://stackoverflow.com/questions/38179117/how-can-i-use-server-sent-events-in-iron", "title": "How can I use Server-Sent events in Iron?", "body": "<p>I have a small Rust application that receives some requests through a serial port, does some processing and saves the results locally. I wanted to use a browser as a remote monitor so I can see everything that is happening and as I understand SSEs are pretty good for that.</p>\n\n<p>I tried using Iron for that but I can't find a way to keep the connection open. The request handlers all need to return a <code>Response</code>, so I can't keep sending data.</p>\n\n<p>This was my (dumb) attempt:</p>\n\n<pre><code>fn monitor(req: &amp;mut Request) -&gt; IronResult&lt;Response&gt; {\n    let mut headers = Headers::new();\n    headers.set(ContentType(Mime(TopLevel::Text, SubLevel::EventStream, vec![])));\n    headers.set(CacheControl(vec![CacheDirective::NoCache]));\n\n    println!(\"{:?}\", req);\n\n    let mut count = 0;\n    loop {\n        let mut response = Response::with((iron::status::Ok, format!(\"data: Count!:{}\", count)));\n        response.headers = headers.clone();\n        return Ok(response); //obviously won't do what I want\n\n        count += 1;\n        std::thread::sleep_ms(1000);\n    }\n}\n</code></pre>\n"}, {"tags": ["rust", "rust-diesel"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467592719, "post_id": 38175300, "comment_id": 63778442, "body": "Getting Diesel to do anything that I want it to do is... challenging. Are you sure you need to use the object directly instead of something like <code>&quot;1.0::numeric&quot;</code>?"}], "answers": [{"comments": [{"owner": {"reputation": 3368, "user_id": 385966, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/0f674817f8c6e149518f0a4b4ad3d560?s=128&d=identicon&r=PG", "display_name": "sgrif", "link": "https://stackoverflow.com/users/385966/sgrif"}, "edited": false, "score": 3, "creation_date": 1467648501, "post_id": 38175685, "comment_id": 63803054, "body": "Just wanted to add onto this and mention that <code>PgNumeric</code> is not really designed to be used directly by users. It&#39;s instead the direct representation of how it&#39;s stored in PG. This is similar to our <code>PgTimestamp</code> type, which our higher level impls are built on, but users are meant to use <code>chrono::NaiveDateTime</code> or <code>std::time::SystemTime</code> instead. The difference being that we don&#39;t have a higher level thing that we serialize to instead. Happy to add if there&#39;s a reasonable bigdecimal crate to work with."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1467594107, "creation_date": 1467594107, "answer_id": 38175685, "question_id": 38175300, "link": "https://stackoverflow.com/questions/38175300/how-to-insert-a-decimal-number-with-diesels-pgnumeric-type/38175685#38175685", "title": "How to insert a decimal number with Diesel&#39;s PgNumeric type?", "body": "<p>Short answer: <code>PgNumeric::Positive { weight: 0, scale: 4, digits: [5, 4321] }</code></p>\n\n<p>More examples:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>// 9.87654321::numeric\nPgNumeric::Positive { weight: 0, scale: 8, digits: [9, 8765, 4321] }\n\n// 12345.6789::numeric\nPgNumeric::Positive { weight: 1, scale: 4, digits: [1, 2345, 6789] }\n\n// 100000000.000000002::numeric\nPgNumeric::Positive { weight: 2, scale: 9, digits: [1, 0, 0, 0, 0, 2000] }\n\n// 0.3::numeric\nPgNumeric::Positive { weight: -1, scale: 1, digits: [3000] }\n</code></pre>\n\n<p>It looks as if the algorithm is:</p>\n\n<ol>\n<li><p>Group your number into chunks of 4 digits starting at the decimal point and working outward. These are the <strong>digits</strong>.</p></li>\n<li><p>Count the number of <em>chunks</em> needed to represent the integral part and subtract one. This is the <strong>weight</strong>.</p></li>\n<li><p>Count the number of <em>digits</em> needed to represent the fractional part. This is the <strong>scale</strong>.</p></li>\n</ol>\n\n<h2>Test harness</h2>\n\n<p>Here's the code I am playing with, extracted from the tests:</p>\n\n<pre><code>extern crate diesel;\n\nuse diesel::*;\nuse diesel::types::*;\n\nuse diesel::pg::data_types::PgNumeric;\nuse diesel::pg::PgConnection;\n\n type PgBackend = &lt;PgConnection as Connection&gt;::Backend;\n\nfn main() {\n    let query = \"100000000.000000002::numeric\";\n    let expected_value = PgNumeric::Negative {\n        digits: vec![31],\n        weight: 0,\n        scale: 1,\n    };\n    assert_eq!(expected_value, query_single_value::&lt;Numeric, PgNumeric&gt;(query));\n}\n\nfn query_single_value&lt;T, U: Queryable&lt;T, PgBackend&gt;&gt;(sql_str: &amp;str) -&gt; U\n    where PgBackend: HasSqlType&lt;T&gt;,\n{\n    use diesel::expression::dsl::sql;\n    let connection = connection();\n    select(sql::&lt;T&gt;(sql_str)).first(&amp;connection).unwrap()\n}\n\nfn connection() -&gt; PgConnection {\n    let result = connection_without_transaction();\n    result.begin_test_transaction().unwrap();\n    result\n}\n\nfn connection_without_transaction() -&gt; PgConnection {\n    let connection_url = \"postgres://localhost/some_db\";\n    ::diesel::pg::PgConnection::establish(&amp;connection_url).unwrap()\n}\n</code></pre>\n\n<h2>Potentially useful background information</h2>\n\n<p>From the <a href=\"https://www.postgresql.org/docs/9.5/static/datatype-numeric.html\" rel=\"nofollow\">Postgres docs</a>:</p>\n\n<blockquote>\n  <p>The <strong>scale</strong> of a numeric is the count of decimal digits in the fractional part, to the right of the decimal point. The <strong>precision</strong> of a numeric is the total count of significant digits in the whole number, that is, the number of digits to both sides of the decimal point. So the number 23.5141 has a precision of 6 and a scale of 4.</p>\n</blockquote>\n\n<p>However, the <a href=\"http://doxygen.postgresql.org/backend_2utils_2adt_2numeric_8c_source.html\" rel=\"nofollow\">Postgres code</a> says:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>/*\n * In the NumericShort format, the remaining 14 bits of the header word\n * (n_short.n_header) are allocated as follows: 1 for sign (positive or\n * negative), 6 for dynamic scale, and 7 for weight.  In practice, most\n * commonly-encountered values can be represented this way.\n *\n * In the NumericLong format, the remaining 14 bits of the header word\n * (n_long.n_sign_dscale) represent the display scale; and the weight is\n * stored separately in n_weight.\n */\n</code></pre>\n"}], "owner": {"reputation": 89, "user_id": 5415055, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-WooSZwj0O1g/AAAAAAAAAAI/AAAAAAAAAac/YmPU5fTtfHs/photo.jpg?sz=128", "display_name": "Cameron Mochrie", "link": "https://stackoverflow.com/users/5415055/cameron-mochrie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 763, "favorite_count": 2, "accepted_answer_id": 38175685, "answer_count": 1, "score": 2, "last_activity_date": 1474089201, "creation_date": 1467589300, "last_edit_date": 1474089201, "question_id": 38175300, "link": "https://stackoverflow.com/questions/38175300/how-to-insert-a-decimal-number-with-diesels-pgnumeric-type", "title": "How to insert a decimal number with Diesel&#39;s PgNumeric type?", "body": "<p>I am stumped as to how to use the <code>PgNumeric</code> type for decimal numbers. I noticed in the <a href=\"https://github.com/diesel-rs/diesel/blob/9c5fec63c081ac14ed920f18bb6216d6b786f0a7/diesel_tests/tests/types.rs\" rel=\"nofollow\">tests</a> that <code>1.0</code> and <code>-31.0</code> were inserted into a table using the following instances:</p>\n\n<pre><code>PgNumeric::Positive { weight: 0, scale: 1, digits: vec![1] } \n</code></pre>\n\n<p>and </p>\n\n<pre><code>PgNumeric::Negative  {weight: 0, scale: 1, digits: vec![31] }\n</code></pre>\n\n<p>I can't seem to figure out how to insert a value with digits to the right of the decimal (like <code>5.4321</code>) into a table.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1467580152, "creation_date": 1467580152, "answer_id": 38174368, "question_id": 38174188, "link": "https://stackoverflow.com/questions/38174188/storing-a-function-trait-object-in-a-struct-does-not-live-long-enough/38174368#38174368", "title": "Storing a function trait object in a struct does not live long enough", "body": "<p>Doing as the compiler suggests (<em>consider using a <code>let</code> binding to increase its lifetime</em>) allows the code to compile:</p>\n\n<pre><code>fn main() {\n    fn first(x: f64) -&gt; f64 {\n        x\n    }\n    fn second(x: f64) -&gt; f64 {\n        x\n    }\n\n    let x = &amp;first;\n    let y = &amp;second;\n    let test = Example::new(x, y);\n\n    println!(\"{}\", test.test_func(1.0, 2.0));\n}\n</code></pre>\n\n<p>As does</p>\n\n<pre><code>let x = first;\nlet y = second;\nlet test = Example::new(&amp;x, &amp;y);\n</code></pre>\n\n<p>I believe (but don't know how to prove) that the problem is that something has to be created to adapt the function pointer (<code>fn(f64) -&gt; f64</code>) into a trait object  (<code>&amp;Fn(f64) -&gt; f64</code>). However, creating it in the <code>new</code> call means that it will immediately be dropped when the statement returns.</p>\n\n<p>This is similar to the case of a literal reference, which has the same error:</p>\n\n<pre><code>struct Foo&lt;'a&gt;(&amp;'a u8);\n\nfn main() {\n    let f = Foo(&amp;4);\n    println!(\"{}\", f.0);\n}\n</code></pre>\n"}], "owner": {"reputation": 21, "user_id": 6544901, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JuVB5.jpg?s=128&g=1", "display_name": "mkrum", "link": "https://stackoverflow.com/users/6544901/mkrum"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 103, "favorite_count": 0, "answer_count": 1, "score": 2, "last_activity_date": 1467580152, "creation_date": 1467578801, "last_edit_date": 1467579497, "question_id": 38174188, "link": "https://stackoverflow.com/questions/38174188/storing-a-function-trait-object-in-a-struct-does-not-live-long-enough", "title": "Storing a function trait object in a struct does not live long enough", "body": "<p>I'm trying to store two functions in a struct like this:</p>\n\n<pre><code>struct Example&lt;'a&gt; {\n    func1: &amp;'a Fn(f64) -&gt; f64,\n    func2: &amp;'a Fn(f64) -&gt; f64,\n}\n\nimpl&lt;'a&gt; Example&lt;'a&gt; {\n\n    fn new(f1: &amp;'a Fn(f64) -&gt; f64, f2: &amp;'a Fn(f64) -&gt; f64) -&gt; Example&lt;'a&gt; {\n        Example {\n            func1: f1,\n            func2: f2,\n        }\n    }\n\n    fn test_func(self, x: f64, y: f64) -&gt; f64 {\n        (self.func1)(x) + (self.func2)(y)\n   }\n}\n\n\nfn main() {\n    fn first(x: f64) -&gt; f64 {\n        x\n    }\n    fn second(x: f64) -&gt; f64 {\n        x\n    }\n    let test = Example::new(&amp;first, &amp;second);\n    test.test_func(1.0, 2.0);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8c1c73b5a317d80c02ad2c581ebdcaed&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust playground</a></p>\n\n<p>Generates the following errors: </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>borrowed value does not live long enough\n    let test = Example::new(&amp;first, &amp;second);\n                            ^~~~~\nnote: reference must be valid for the block suffix following statement 2 at 28:45...\n    let test = Example::new(&amp;first, &amp;second);\n    test.test_func(1.0, 2.0);\n}\nnote: ...but borrowed value is only valid for the statement at 28:4\n    let test = Example::new(&amp;first, &amp;second);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nhelp: consider using a `let` binding to increase its lifetime\n    let test = Example::new(&amp;first, &amp;second);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: borrowed value does not live long enough\n    let test = Example::new(&amp;first, &amp;second);\n                                    ^~~~~~\nnote: reference must be valid for the block suffix following statement 2 at 28:45...\n    let test = Example::new(&amp;first, &amp;second);\n    test.test_func(1.0, 2.0);\n}\nnote: ...but borrowed value is only valid for the statement at 28:4\n    let test = Example::new(&amp;first, &amp;second);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nhelp: consider using a `let` binding to increase its lifetime\n    let test = Example::new(&amp;first, &amp;second);\n    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>I'm confused as to how this is an issue of lifetimes, since both of the functions and the struct should share the same lifetime in main. Also confused as to why the compiler's suggestion seems to be identical to what I already have.</p>\n"}, {"tags": ["string", "io", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1467562803, "creation_date": 1467562803, "answer_id": 38171882, "question_id": 38171684, "link": "https://stackoverflow.com/questions/38171684/comparing-a-string-against-a-string-read-from-input-does-not-match-in-rust/38171882#38171882", "title": "Comparing a string against a string read from input does not match in Rust", "body": "<p>Your input string contains a trailing newline. Use <code>trim</code> to remove it:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    let mut input = String::new();\n    io::stdin()\n        .read_line(&amp;mut input)\n        .expect(\"failed to read line\");\n\n    if input.trim() == \"q\" {\n        println!(\"wow\") ;\n    }\n}\n</code></pre>\n\n<p>You could see this yourself by printing the value of the input</p>\n\n<pre><code>println!(\"{:?}\", input);\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ./foo\nq\n\"q\\n\"\n</code></pre>\n"}], "owner": {"reputation": 389, "user_id": 5464210, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/59d9acb97d2975758f1edf80ad1f4840?s=128&d=identicon&r=PG&f=1", "display_name": "unskilledidiot", "link": "https://stackoverflow.com/users/5464210/unskilledidiot"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3521, "favorite_count": 1, "closed_date": 1483995153, "accepted_answer_id": 38171882, "answer_count": 1, "score": 1, "last_activity_date": 1483994893, "creation_date": 1467561316, "last_edit_date": 1483994893, "question_id": 38171684, "link": "https://stackoverflow.com/questions/38171684/comparing-a-string-against-a-string-read-from-input-does-not-match-in-rust", "closed_reason": "Duplicate", "title": "Comparing a string against a string read from input does not match in Rust", "body": "<p>In the following code, I was expecting the message \u201cwow\u201d to be printed when the user enters \u201cq\u201d, but it does not.</p>\n\n<pre><code>fn main() {\n    let mut input = String::new();\n    io::stdin().read_line(&amp;mut input)\n        .expect(\"failed to read line\");\n\n    if input == \"q\" {\n       println!(\"wow\") ;\n    }\n}\n</code></pre>\n\n<p>Why is the message not printed as expected?</p>\n"}, {"tags": ["performance", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467555457, "post_id": 38170718, "comment_id": 63768698, "body": "<i>What is the fastest way to return something (don&#39;t care what)</i> \u2014 if the correctness of the program is not a concern, I&#39;d suggest transforming all divisions / remainders to be the constant value <code>42</code>, regardless of arguments. This should improve the speed of most programs."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1467559479, "post_id": 38170718, "comment_id": 63769886, "body": "I think this question isn&#39;t Rust specific at all. I&#39;d probably rephrase it (removing everything unrelated) and chose different tags. It seems like it could be best answered by x86 and assembly people..."}, {"owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1467562272, "post_id": 38170718, "comment_id": 63770758, "body": "0 may be faster than 42 in some cases (<code>xor eax,eax</code> vs <code>mov eax,42</code>). Ditto Lukas."}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "edited": false, "score": 0, "creation_date": 1467564018, "post_id": 38170718, "comment_id": 63771282, "body": "I&#39;m guessing that the fastest way would be to branch. <code>if y != 0 { x &#47; y } else { 0 }</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "edited": false, "score": 0, "creation_date": 1467570104, "post_id": 38170718, "comment_id": 63773196, "body": "@dtolnay a good point; I was mostly being silly because it seems like correctness not mattering shouldn&#39;t be true. ^_^ @Adrian no branch (and no division!) at all is even faster, thus why returning <code>0</code> all the time should be preferred."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1467593332, "post_id": 38170718, "comment_id": 63778542, "body": "I want a fast solution, but I also want it to be portable Rust. That&#39;s why I chose the tags."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1467633511, "post_id": 38170718, "comment_id": 63794092, "body": "What&#39;s the use case for silently returning a wrong answer instead of panicking?  Do you still want that if panic vs wrong answer doesn&#39;t affect the speed when that case isnt&#39; hit?"}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1467571993, "post_id": 38173148, "comment_id": 63773765, "body": "You might as well include the assembly and the various compiler versions, platforms, etc. all of which will contribute towards the evaluation of &quot;fastest&quot;. For example, what&#39;s the PPC assembly look like? Or maybe ARM?"}], "tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": false, "score": 1, "last_activity_date": 1467686390, "last_edit_date": 1467686390, "creation_date": 1467570916, "answer_id": 38173148, "question_id": 38170718, "link": "https://stackoverflow.com/questions/38170718/what-is-the-fastest-way-to-handle-overflow-on-integer-division-remainder-without/38173148#38173148", "title": "What is the fastest way to handle overflow on integer division/remainder without panic?", "body": "<pre><code>pub fn nopanic_signed_div(x: i32, y: i32) -&gt; i32 {\n    if y == 0 || y == -1 {\n        // Divide by -1 is equivalent to neg; we don't care what\n        // divide by zero returns.\n        x.wrapping_neg()\n    } else {\n        // (You can replace this with unchecked_div to make it more\n        // obvious this will never panic.)\n        x / y\n    }\n}\n</code></pre>\n\n<p>This produces the following on x86-64 with \"rustc 1.11.0-nightly (6e00b5556 2016-05-29)\":</p>\n\n<pre><code>    movl    %edi, %eax\n    leal    1(%rsi), %ecx\n    cmpl    $1, %ecx\n    ja  .LBB0_2\n    negl    %eax\n    retq\n.LBB0_2:\n    cltd\n    idivl   %esi\n    retq\n</code></pre>\n\n<p>It should produce something similar on other platforms.</p>\n\n<p>At least one branch is necessary because LLVM IR considers divide by zero to be undefined behavior.  Checking for 0 and -1 separately would involve an extra branch.  With those constraints, there isn't really any other choice.</p>\n\n<p>(It might be possible to come up with something slightly faster with inline assembly, but it would be a terrible idea because you would end up generating much worse code in the case of dividing by a constant.)</p>\n\n<hr>\n\n<p>Whether this solution is actually appropriate probably depends on what your goal is; a divide by zero is probably a logic error, so silently accepting it seems like a bad idea.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1467583457, "post_id": 38174687, "comment_id": 63776739, "body": "You might as well include the various compiler versions, platforms, etc. that this solution supports. All of this contributes towards the evaluation of &quot;fastest&quot;. For example, it&#39;s unlikely this will work on all the tier-1 platforms that Rust supports."}, {"owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1467583679, "post_id": 38174687, "comment_id": 63776785, "body": "@Shepmaster Yeah, this isn&#39;t very portable, and requires a nightly compiler. However, it should work on any x86 system, which includes all of the tier-1 platforms."}], "tags": [], "owner": {"reputation": 13948, "user_id": 283342, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/e3ef6dbec3a443e7cda5b5624311ca08?s=128&d=identicon&r=PG&f=1", "display_name": "Adrian", "link": "https://stackoverflow.com/users/283342/adrian"}, "is_accepted": false, "score": 2, "last_activity_date": 1467660796, "last_edit_date": 1467660796, "creation_date": 1467583052, "answer_id": 38174687, "question_id": 38170718, "link": "https://stackoverflow.com/questions/38170718/what-is-the-fastest-way-to-handle-overflow-on-integer-division-remainder-without/38174687#38174687", "title": "What is the fastest way to handle overflow on integer division/remainder without panic?", "body": "<p>Disclaimer: this isn't really a serious answer. It is almost certainly slower than the naive solution of using an if statement to check whether the divisor is zero.</p>\n\n<pre><code>#![feature(asm)]\n\nfn main() {\n    println!(\"18 / 3 = {}\", f(18, 3));\n    println!(\"2555 / 10 = {}\", f(2555, 10));\n    println!(\"-16 / 3 = {}\", f(-16, 3));\n    println!(\"7784388 / 0 = {}\", f(7784388, 0));\n}\n\nfn f(x: i32, y: i32) -&gt; i32 {\n    let z: i32;\n    unsafe {\n        asm!(\n            \"\n            test %ecx, %ecx\n            lahf\n            and $$0x4000, %eax\n            or %eax, %ecx\n            mov %ebx, %eax\n            cdq\n            idiv %ecx\n            \"\n            : \"={eax}\"(z)\n            : \"{ebx}\"(x), \"{ecx}\"(y)\n            : \"{edx}\"\n        );\n    }\n    z\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=2fc811fe1ce2b2e25122dc7807f953b6&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Rust Playground</a></p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 169, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1467686390, "creation_date": 1467554636, "last_edit_date": 1467666266, "question_id": 38170718, "link": "https://stackoverflow.com/questions/38170718/what-is-the-fastest-way-to-handle-overflow-on-integer-division-remainder-without", "title": "What is the fastest way to handle overflow on integer division/remainder without panic?", "body": "<p>I'm still improving <a href=\"https://github.com/llogiq/overflower\" rel=\"nofollow\">overflower</a> to handle integer overflow. One goal was to be able use <code>#[overflow(wrap)]</code> to avoid panics on overflow. However, I found out that the <code>.wrapping_div(_)</code> and <code>.wrapping_rem(_)</code> functions of the standard integer types do in fact panic when dividing by zero. Edit: To motivate this use case better: Within interrupt handlers, we absolutely want to avoid panics. I assume that the div-by-zero condition is highly unlikely, but we still need to return a \"valid\" value for some definition of valid.</p>\n\n<p>One possible solution is saturating the value (which I do when code is annotated with <code>#[overflow(saturate)]</code>), but this is likely relatively slow (especially since other,more  operations are also saturated). So I want to add an <code>#[overflow(no_panic)]</code> mode that avoids panics completely, and is almost as fast as <code>#[overflow(wrap)]</code> in all cases.</p>\n\n<p>My question is: What is the fastest way to return <em>something</em> (don't care what) without panicking on dividing (or getting the remainder) by zero?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 8789, "user_id": 539465, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/2acba600ecfbe1cc2e7f3c94b686ac84?s=128&d=identicon&r=PG", "display_name": "Valentin Lorentz", "link": "https://stackoverflow.com/users/539465/valentin-lorentz"}, "edited": false, "score": 0, "creation_date": 1467553250, "post_id": 38170221, "comment_id": 63768011, "body": "<a href=\"https://doc.rust-lang.org/std/path/struct.PathBuf.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/path/struct.PathBuf.html</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1509310323, "post_id": 38170298, "comment_id": 80956670, "body": "Can you add a dynamic example, where the list is build at runtime?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 4251, "user_id": 1829329, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/f345b0578d338c5b52e9af599f7a9f19?s=128&d=identicon&r=PG", "display_name": "Zelphir Kaltstahl", "link": "https://stackoverflow.com/users/1829329/zelphir-kaltstahl"}, "edited": false, "score": 0, "creation_date": 1509319657, "post_id": 38170298, "comment_id": 80959167, "body": "@Zelphir it wouldn&#39;t be much different. The function declaration (of <code>test</code>) would be exactly like in my code above. You would simply fill the <code>dirs</code> vector differently. But this is not really what this question is about... I&#39;m a bit confused by your request, sorry."}, {"owner": {"reputation": 4158, "user_id": 51700, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/43c427f1fe62eb5f74fe6782a257f2ac?s=128&d=identicon&r=PG", "display_name": "Mark Essel", "link": "https://stackoverflow.com/users/51700/mark-essel"}, "edited": false, "score": 0, "creation_date": 1550094277, "post_id": 38170298, "comment_id": 96148723, "body": "btw this was super helpful to a new rust dev, I had run into docs on PathRef and AsRef&lt;&gt; but they were over my head. &amp;Path tapped into my c++ background to references"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 3, "last_activity_date": 1467552905, "last_edit_date": 1467552905, "creation_date": 1467551719, "answer_id": 38170298, "question_id": 38170221, "link": "https://stackoverflow.com/questions/38170221/how-to-pass-list-of-paths-to-a-function/38170298#38170298", "title": "How to pass list of paths to a function?", "body": "<p>Indeed, <code>Path</code> is an unsized type, just like <code>str</code>. Pretty much  the only sensible way to work with a <code>Path</code> is to take a reference to it: <code>&amp;Path</code> (just like <code>&amp;str</code>). So your example would look like this:</p>\n\n<pre><code>use std::path::Path;\n\nfn test(dirs: &amp;[&amp;Path]) {}\n\nfn main() {\n    let dirs = vec![Path::new(\"/tmp\"), Path::new(\"/var/tmp\")];\n    test(&amp;dirs);\n}\n</code></pre>\n\n<p>Not that I also changed the <code>&amp;Vec&lt;_&gt;</code> to <code>&amp;[_]</code>. A reference to a <code>Vec</code> is not more powerful than a slice (<code>&amp;[_]</code>), thus the idiomatic way is to pass slices instead of references to vectors.</p>\n\n<hr>\n\n<p>The above solution is the correct way if you don't want to transfer ownership to the <code>test</code> function. If you want to transfer ownership (including the string buffer actually saving the path data), you should use <code>PathBuf</code>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1098, "favorite_count": 0, "accepted_answer_id": 38170298, "answer_count": 1, "score": 5, "last_activity_date": 1467552905, "creation_date": 1467551225, "last_edit_date": 1467551826, "question_id": 38170221, "link": "https://stackoverflow.com/questions/38170221/how-to-pass-list-of-paths-to-a-function", "title": "How to pass list of paths to a function?", "body": "<p>I want to pass list of directory names to function,\nlike so:</p>\n\n<pre><code>use std::path::Path;\n\nfn test(dirs: &amp;Vec&lt;Path&gt;) {}\n\nfn main() {\n    let dirs = vec![Path::new(\"/tmp\"), Path::new(\"/var/tmp\")];\n    test(dirs);\n}\n</code></pre>\n\n<p>But it does not compile:</p>\n\n<pre><code>&lt;anon&gt;:3:5: 4:6 error: the trait bound `[u8]: std::marker::Sized` is not satisfied [E0277]\n&lt;anon&gt;:3     fn test(dirs: &amp;Vec&lt;Path&gt;) {\n&lt;anon&gt;:4     }\n&lt;anon&gt;:3:5: 4:6 help: see the detailed explanation for E0277\n&lt;anon&gt;:3:5: 4:6 note: `[u8]` does not have a constant size known at compile-time\n&lt;anon&gt;:3:5: 4:6 note: required because it appears within the type `std::sys::os_str::Slice`\n&lt;anon&gt;:3:5: 4:6 note: required because it appears within the type `std::ffi::OsStr`\n&lt;anon&gt;:3:5: 4:6 note: required because it appears within the type `std::path::Path`\n&lt;anon&gt;:3:5: 4:6 note: required by `std::vec::Vec`\n</code></pre>\n\n<p>Looks like Path not <code>Sized</code>?</p>\n\n<p>How should I fix this, if I do not want to pass <code>Vec&lt;String&gt;</code> to function?\nMaybe <code>PathBuf</code>? How to implement this in rusty way?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467640022, "post_id": 38176456, "comment_id": 63798138, "body": "Not quite, <code>take()</code> does not take ownership of <code>self.next</code>."}], "tags": [], "owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "is_accepted": false, "score": 0, "last_activity_date": 1467601898, "creation_date": 1467601898, "answer_id": 38176456, "question_id": 38169534, "link": "https://stackoverflow.com/questions/38169534/cannot-move-out-of-borrowed-content-while-creating-a-mutable-iterator-over-a-lin/38176456#38176456", "title": "Cannot move out of borrowed content while creating a mutable iterator over a linked list", "body": "<p>After re-reading the article, I think I get the answer:</p>\n\n<p><code>self.next.map</code> would move the <code>self.next</code> as value (into the function you provided to <code>map</code>). But the <code>self</code> is borrowed as mutable. So <code>self.next</code> could not be moved out of borrowed <code>self</code>. The way to solve it is to <code>take()</code> the ownership of <code>self.next</code> first. Correct?</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 0, "last_activity_date": 1467640201, "last_edit_date": 1592644375, "creation_date": 1467640201, "answer_id": 38186359, "question_id": 38169534, "link": "https://stackoverflow.com/questions/38169534/cannot-move-out-of-borrowed-content-while-creating-a-mutable-iterator-over-a-lin/38186359#38186359", "title": "Cannot move out of borrowed content while creating a mutable iterator over a linked list", "body": "<p>Let's have a look at the description of <code>take</code>:</p>\n<blockquote>\n<pre><code>fn take(&amp;mut self) -&gt; Option&lt;T&gt;\n</code></pre>\n<p>Takes the value out of the option, leaving a None in its place.</p>\n</blockquote>\n<p>So, <code>take</code> does not take ownership of <code>self.next</code> (impossible because <code>self</code> is only borrowed), but instead takes ownership of the content of <code>self.next</code>, replacing it with valid content.</p>\n<p>Note that this can be accomplished generically using the <code>std::mem::replace</code> function, which accepts any type; <code>take</code> is just sugar for <code>Option</code>.</p>\n"}], "owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 257, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1467640201, "creation_date": 1467545684, "last_edit_date": 1467551489, "question_id": 38169534, "link": "https://stackoverflow.com/questions/38169534/cannot-move-out-of-borrowed-content-while-creating-a-mutable-iterator-over-a-lin", "title": "Cannot move out of borrowed content while creating a mutable iterator over a linked list", "body": "<p>In the book <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/second-iter-mut.html\" rel=\"nofollow\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a>:</p>\n\n<pre><code>impl&lt;'a, T&gt; Iterator for IterMut&lt;'a, T&gt; {\n    type Item = &amp;'a mut T;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.next.map(|node| {\n            self.next = node.next.as_mut().map(|node| &amp;mut **node);\n            &amp;mut node.elem\n        })\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/second.rs:104:9: 104:13 error: cannot move out of borrowed content\nsrc/second.rs:104         self.next.map(|node| {\n                          ^~~~\n</code></pre>\n\n<p>I cannot understand why <code>take()</code> must be invoked before <code>map()</code>. The <code>self.next</code> is moved out for mutation, and <code>take()</code> also moves, correct?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1467542653, "creation_date": 1467542653, "answer_id": 38169139, "question_id": 38168956, "link": "https://stackoverflow.com/questions/38168956/take-slice-of-certain-length-known-at-compile-time/38169139#38169139", "title": "Take slice of certain length known at compile time", "body": "<p>I think the answer is no as it is; a slice doesn't have a size (or minimum size) as part of the type, so there's nothing for the compiler to check; and similarly a vector is dynamically sized so there's no way to check at compile time that you can take a slice of the right size.</p>\n\n<p>The only way I can see for the information to be even in principle available at compile time is if the function is applied to a compile-time known array.  I think you'd still need to implement a procedural macro to do the check (so nightly Rust only, and it's not easy to do).</p>\n\n<p>If the problem is efficiency rather than compile-time checking, you may be able to adjust your code so that, for example, you do one check for <code>n*4</code> elements being available before <code>n</code> calls to your function; you could use the unsafe <code>get_unchecked</code> to avoid later redundant bounds checks.  Obviously you'd need to be careful to avoid mistakes in the implementation.</p>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 5, "last_activity_date": 1467542915, "last_edit_date": 1495541707, "creation_date": 1467542915, "answer_id": 38169182, "question_id": 38168956, "link": "https://stackoverflow.com/questions/38168956/take-slice-of-certain-length-known-at-compile-time/38169182#38169182", "title": "Take slice of certain length known at compile time", "body": "<p>Yes, kind of. The first step is easy: change the argument type from <code>&amp;[u8]</code> to <code>[u8; 4]</code>:</p>\n\n<pre><code>fn unpack_u32(data: [u8; 4]) -&gt; u32 { ... }\n</code></pre>\n\n<p>But transforming a slice (like <code>&amp;v[1..5]</code>) into an object of type <code>[u8; 4]</code> is hard. You can of course create such an array simply by specifying all elements, like so:</p>\n\n<pre><code>unpack_u32([v[1], v[2], v[3], v[4]]);\n</code></pre>\n\n<p>But this is rather ugly to type and doesn't scale well with array size. So the question is <a href=\"https://stackoverflow.com/questions/25428920/how-to-get-a-slice-as-an-array-in-rust\">\"How to get a slice as an array in Rust?\"</a>. I used a slightly modified version of Matthieu M.'s answer to said question (<a href=\"https://play.rust-lang.org/?gist=cd5884a4b370d629f5b5fd55b8a9ec0e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">playground</a>):</p>\n\n<pre><code>fn unpack_u32(data: [u8; 4]) -&gt; u32 {\n    // as before without assert\n}\n\nuse std::convert::AsMut;\n\nfn clone_into_array&lt;A, T&gt;(slice: &amp;[T]) -&gt; A\n    where A: Default + AsMut&lt;[T]&gt;,\n          T: Clone\n{\n    assert_eq!(slice.len(), std::mem::size_of::&lt;A&gt;()/std::mem::size_of::&lt;T&gt;());\n\n    let mut a = Default::default();\n    &lt;A as AsMut&lt;[T]&gt;&gt;::as_mut(&amp;mut a).clone_from_slice(slice);\n    a\n}\n\nfn main() {\n    let v = vec![0_u8, 1, 2, 3, 4, 5, 6, 7, 8];\n    println!(\"res: {:X}\", unpack_u32(clone_into_array(&amp;v[1..5])));    \n}\n</code></pre>\n\n<p>As you can see, there is still an <code>assert</code> and thus the possibility of runtime failure. The Rust compiler isn't able to know that <code>v[1..5]</code> is 4 elements long, because <code>1..5</code> is just syntactic sugar for <a href=\"http://doc.rust-lang.org/std/ops/struct.Range.html\" rel=\"nofollow noreferrer\"><code>Range</code></a> which is just a type the compiler knows nothing special about.</p>\n"}, {"tags": [], "owner": {"reputation": 21, "user_id": 6856861, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-B54BTOKv9iE/AAAAAAAAAAI/AAAAAAAAA5c/FHoh0_xTZ1Q/photo.jpg?sz=128", "display_name": "Frank Rehberger", "link": "https://stackoverflow.com/users/6856861/frank-rehberger"}, "is_accepted": false, "score": 2, "last_activity_date": 1474440042, "creation_date": 1474440042, "answer_id": 39609143, "question_id": 38168956, "link": "https://stackoverflow.com/questions/38168956/take-slice-of-certain-length-known-at-compile-time/39609143#39609143", "title": "Take slice of certain length known at compile time", "body": "<p>I had a similar problem, creating a fixed byte-array on stack corresponding to const length of other byte-array (which may change during development time)</p>\n\n<p>A combination of compiler plugin and macro was the solution:</p>\n\n<p><a href=\"https://github.com/frehberg/rust-sizedbytes\" rel=\"nofollow\">https://github.com/frehberg/rust-sizedbytes</a></p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1831, "favorite_count": 0, "answer_count": 3, "score": 1, "last_activity_date": 1474440042, "creation_date": 1467541275, "last_edit_date": 1467543580, "question_id": 38168956, "link": "https://stackoverflow.com/questions/38168956/take-slice-of-certain-length-known-at-compile-time", "title": "Take slice of certain length known at compile time", "body": "<p>In this code:</p>\n\n<pre><code>fn unpack_u32(data: &amp;[u8]) -&gt; u32 {\n    assert_eq!(data.len(), 4);\n    let res = data[0] as u32 |\n    (data[1] as u32) &lt;&lt; 8 |\n    (data[2] as u32) &lt;&lt; 16 |\n        (data[3] as u32) &lt;&lt; 24;\n    res\n}\n\nfn main() {\n    let v = vec![0_u8, 1_u8, 2_u8, 3_u8, 4_u8, 5_u8, 6_u8, 7_u8, 8_u8];\n    println!(\"res: {:X}\", unpack_u32(&amp;v[1..5]));    \n}\n</code></pre>\n\n<p>the function <code>unpack_u32</code> accepts only slices of length 4. Is there any way to replace the runtime check <code>assert_eq</code> with a compile time check?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 8, "last_activity_date": 1486140315, "last_edit_date": 1495541422, "creation_date": 1467541511, "answer_id": 38168984, "question_id": 38168811, "link": "https://stackoverflow.com/questions/38168811/export-function-only-to-module-test/38168984#38168984", "title": "Export function only to module test?", "body": "<p><strong>As of Rust 1.15 your code works without problems!</strong> </p>\n\n<p>Previously only public symbols were imported via a wildcard-import (like <code>use super::*;</code>). This behavior changed as specified in <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md\" rel=\"nofollow noreferrer\">RFC 1560</a>. You can see my full previous answer in the <a href=\"https://stackoverflow.com/revisions/38168984/4\">edit logs</a>.</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 767, "favorite_count": 0, "accepted_answer_id": 38168984, "answer_count": 1, "score": 4, "last_activity_date": 1618131147, "creation_date": 1467540090, "last_edit_date": 1618131147, "question_id": 38168811, "link": "https://stackoverflow.com/questions/38168811/export-function-only-to-module-test", "title": "Export function only to module test?", "body": "<p>I use the standard way (according to the <a href=\"https://doc.rust-lang.org/book/ch11-01-writing-tests.html\" rel=\"nofollow noreferrer\">Rust book</a>) to write unit tests:</p>\n<pre><code>fn func() -&gt; i32 {\n    0\n}\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn func_test() {\n        let res = func();\n    }\n}\n</code></pre>\n<p>to make it compile, I have to make <code>func</code> public via the <code>pub</code> keyword.</p>\n<p>Is it possible to make <code>func</code> private, but use it inside the inner test module?</p>\n"}, {"tags": ["types", "rust", "traits", "monkeypatching"], "answers": [{"comments": [{"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "edited": false, "score": 0, "creation_date": 1467610550, "post_id": 38168413, "comment_id": 63782085, "body": "Thanks for pointing out the function description issue. I had done too many edits and tweaks to the question as I messed with it."}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 4, "last_activity_date": 1467536807, "creation_date": 1467536807, "answer_id": 38168413, "question_id": 38166766, "link": "https://stackoverflow.com/questions/38166766/is-it-bad-form-to-extend-inherent-types-in-a-library/38168413#38168413", "title": "Is it bad form to extend inherent types in a library?", "body": "<p>There are a few things about your code.</p>\n\n<p>First, you can't write an <code>impl</code>-block for a type you are not defining in your own crate. The best you can do is to define a new trait and then implement that trait for foreign types. This is something that is common practice and often called \"extension trait\", using the naming scheme <code>*Ext</code>, like for example <a href=\"http://doc.rust-lang.org/std/os/linux/fs/trait.MetadataExt.html\" rel=\"nofollow\"><code>MetadataExt</code></a>. So we can build it like so:</p>\n\n<pre><code>trait DownsampleExt {\n    fn downsample(&amp;mut self, factor: usize);\n}\n</code></pre>\n\n<p>Now we have to implement it for <code>Vec</code>. In your code you use the <code>IndexMut</code> trait as if you want to make sure the vector itself is mutably indexable. But since <code>Vec</code> is already a concrete type (or rather type constructor), the compiler already knows that it is mutably indexable. So this already works:</p>\n\n<pre><code>impl&lt;T&gt; DownsampleExt for Vec&lt;T&gt; {\n    fn downsample(&amp;mut self, factor: usize) {\n        // action code\n    }\n}\n</code></pre>\n\n<p>If the <code>DownsampleExt</code> trait is in scope, you can call <code>downsample</code> on any <code>Vec</code> object.</p>\n\n<p>Your action code, however, still contains a few bugs/has a few problems:</p>\n\n<ul>\n<li>You said \"that takes a Vec and returns a copy of it with fewer values\", but the code you gave us mutates the vector instead of creating a copy! Be aware that your description doesn't match your code.</li>\n<li>You don't check for <code>factor == 0</code></li>\n<li>Your <code>for</code> loop doesn't work: when we remove elements while iterating over the indices, the invalidate the indices. Whenever you remove one element you mustn't increase the index in that iteration. </li>\n<li>Also note that your algorithm runs in O(n\u00b2), because <code>remove</code> is a linear time algorithm. This might not be what you want.</li>\n</ul>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 38168413, "answer_count": 1, "score": 1, "last_activity_date": 1467610487, "creation_date": 1467520552, "last_edit_date": 1467610487, "question_id": 38166766, "link": "https://stackoverflow.com/questions/38166766/is-it-bad-form-to-extend-inherent-types-in-a-library", "title": "Is it bad form to extend inherent types in a library?", "body": "<p>I have a function <code>downsample_vec</code> that takes a <code>Vec</code> and removes some of its values based on their positions. I had trouble annotating the right traits (I only needed <code>Clone</code> and <code>Index</code>, but couldn't make it work), so I decided to use <code>self</code> to see if I could convince the compiler to make the right inferences:</p>\n\n<pre><code>impl Vec&lt;IndexMut&lt;usize&gt;&gt; {\n    fn downsample&lt;usize&gt;(&amp;mut self, factor: usize) {\n        let len = self.len();\n        if factor &gt; len {\n            self.clear(); // downsample factor skips all elements\n        } else if factor == 1 {\n            return; // no actual downsampling\n        }\n\n        for ind in 0..len() {\n            if ind % factor != 0 {\n                self.remove(ind);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This gives the compile error <code>the value of the associated type `Output` (from the trait `std::ops::Index`) must be specified [E0191]</code>.</p>\n\n<p>I'm not exactly sure how to specify the output type, and didn't find any references on how to do this, just blogs on traits in general. My main resource was <a href=\"https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src/libcollections/vec.rs#L666\" rel=\"nofollow\">the rust vec <code>.retain()</code> source</a>.</p>\n\n<p>Is it bad form to locally monkeypatch <code>Vec</code> like this in a specific library in the first place, or is there a right way to do this? (The original separate function I wrote is viewable in <a href=\"https://play.rust-lang.org/?gist=10484030e7ab5768c9117c675d128f41&amp;version=stable&amp;backtrace=2\" rel=\"nofollow\">the playground</a>).</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 5, "last_activity_date": 1467535072, "creation_date": 1467535072, "answer_id": 38168191, "question_id": 38166580, "link": "https://stackoverflow.com/questions/38166580/why-does-iter-borrow-the-list-as-immutable/38168191#38168191", "title": "Why does iter() borrow the list as immutable?", "body": "<p>From the linked article:</p>\n\n<pre><code>pub struct Iter&lt;T&gt; {\n    next: Option&lt;&amp;Node&lt;T&gt;&gt;,\n}\n</code></pre>\n\n<p>So the iterator has a reference.  Expanding to make the lifetime more explicit:</p>\n\n<pre><code>pub struct Iter&lt;'a, T&gt; {\n    next: Option&lt;&amp;'a Node&lt;T&gt;&gt;,\n}\n</code></pre>\n\n<p>Now looking at the <code>iter</code> method:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt; {\n    pub fn iter(&amp;self) -&gt; Iter&lt;T&gt; {\n        ...\n    }\n}\n</code></pre>\n\n<p>I'm leaving out the implementation for clarity, since Rust's borrowing rules stop at the declaration too.  Now if we put the elided types back in:</p>\n\n<pre><code>pub fn iter&lt;'a&gt;(&amp;'a self) -&gt; Iter&lt;'a, T&gt; {...}\n</code></pre>\n\n<p>Since there is only a <code>&amp;self</code> argument, the return value gets the same elided lifetime.  See the <a href=\"https://doc.rust-lang.org/nomicon/lifetime-elision.html\">elided lifetimes documentation</a>.</p>\n\n<p>The end result is that the <code>Iter&lt;'a, T&gt;</code> has the same lifetime as the reference passed to the <code>iter()</code> method - so that reference's lifetime must be extended to at least as long as the <code>Iter</code> object's.  Therefore you can't borrow mutably (for the <code>pop</code> method) while the <code>Iter</code> is alive.</p>\n\n<p>There is a good reason for this; if the <code>pop</code> were to succeed, the iterator would then have a dangling reference to the former head, leading to memory unsafety.</p>\n"}], "owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 490, "favorite_count": 0, "accepted_answer_id": 38168191, "answer_count": 1, "score": 1, "last_activity_date": 1467551167, "creation_date": 1467518061, "last_edit_date": 1467551167, "question_id": 38166580, "link": "https://stackoverflow.com/questions/38166580/why-does-iter-borrow-the-list-as-immutable", "title": "Why does iter() borrow the list as immutable?", "body": "<p>In <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/second-iter.html\" rel=\"nofollow\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a>, the <code>iter()</code> creates an iterator:</p>\n\n<pre><code>impl&lt;T&gt; List&lt;T&gt; {\n    pub fn iter(&amp;self) -&gt; Iter&lt;T&gt; {\n        Iter { next: self.head.as_ref().map(|node| &amp;**node) }\n    }\n}\n</code></pre>\n\n<p>I try to test if the iterator prevents further modification on the list:</p>\n\n<pre><code>let mut list = List::new();\nlist.push(1);\n\nlet mut iter = list.iter();\nlist.pop();\n</code></pre>\n\n<p>The compiler reports an error:</p>\n\n<pre><code>list2.rs:114:1: 114:5 error: cannot borrow `list` as mutable because it is also borrowed as immutable [E0502]\nlist2.rs:114 list.pop();\n             ^~~~\nlist2.rs:113:24: 113:28 note: previous borrow of `list` occurs here; the immutable borrow prevents subsequent moves or mutable borrows of `list` until the borrow ends\nlist2.rs:113         let mut iter = list.iter();\n                                    ^~~~\n</code></pre>\n\n<p>It seems that Rust would indeed prevent unsafe operations, but from the syntax, why does <code>list.iter()</code> borrow the <code>list</code>? In the method, it just return the reference of the head element.</p>\n"}, {"tags": ["error-handling", "io", "rust"], "answers": [{"comments": [{"owner": {"reputation": 621, "user_id": 3638594, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d2e0428a10215aa7cf22257a82a4851b?s=128&d=identicon&r=PG&f=1", "display_name": "soarjay", "link": "https://stackoverflow.com/users/3638594/soarjay"}, "edited": false, "score": 0, "creation_date": 1467507620, "post_id": 38165780, "comment_id": 63759357, "body": "Thanks for your response. To clarify, I realise that OO methods can return values. The reason I didn&#39;t want to return a value is that is seems kind of clunky to have to deal with the <code>Result</code> for each method. In this simple case, I don&#39;t want my code to try and recover from the error (most likely caused by the file not being found) - I want it to print a useful error message and then die."}, {"owner": {"reputation": 621, "user_id": 3638594, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d2e0428a10215aa7cf22257a82a4851b?s=128&d=identicon&r=PG&f=1", "display_name": "soarjay", "link": "https://stackoverflow.com/users/3638594/soarjay"}, "edited": false, "score": 0, "creation_date": 1467507817, "post_id": 38165780, "comment_id": 63759394, "body": "Another way of thinking about it is that I am trying to achieve something similar to Java&#39;s <code>Runtime Exception</code>. I.e. I am aware that an error can occur but if it does, it is irrecoverable so the best thing to do is kill the program and produce a useful error message."}, {"owner": {"reputation": 621, "user_id": 3638594, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d2e0428a10215aa7cf22257a82a4851b?s=128&d=identicon&r=PG&f=1", "display_name": "soarjay", "link": "https://stackoverflow.com/users/3638594/soarjay"}, "edited": false, "score": 0, "creation_date": 1467508123, "post_id": 38165780, "comment_id": 63759428, "body": "Ah, <code>expect()</code> is exactly what I&#39;m looking for. Thanks very much for your help."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1467507832, "last_edit_date": 1467507832, "creation_date": 1467507146, "answer_id": 38165780, "question_id": 38165707, "link": "https://stackoverflow.com/questions/38165707/object-oriented-design-patterns-for-error-checking/38165780#38165780", "title": "Object oriented design patterns for error checking", "body": "<blockquote>\n  <p>In the OO approach, I haven't used the <code>try!</code> macro as I don't want the method to return any value.</p>\n</blockquote>\n\n<p>It's unclear why you think that \"object oriented\" means \"doesn't return a value\". If an error can occur, the code should indicate that.</p>\n\n<p>Many languages have the equivalent of <em>exceptions</em> \u2014 out of band values that are thrown (also known as \"returned\") from a function or method. Note that this means that these languages allow for two disjoint types to be returned from a given function: the \"normal\" type and the \"exceptional\" type. That is a close equivalent for Rust's <code>Result</code>: <code>Result&lt;NormalType, ExceptionalType&gt;</code>.</p>\n\n<p>Exceptional isn't a great term for this, as you should <em>expect</em> that opening a file should fail. There's an infinite number of ways that it could not work, but only a narrow subset of ways that it can succeed.</p>\n\n<p>Panicking is closer to \"kill the entire program / thread <strong>right now</strong>\". Unlike C, you are forced to either deal with a problem, pass it back to the caller, or kill the program (panic). </p>\n\n<p>If you would have thrown an exception in a language that supports them, use a <code>Result</code>. If you would have killed the program, or don't want to handle an error, use a panic.</p>\n\n<hr>\n\n<p>If you want to panic in your particular case, use <code>unwrap</code>, or even better, <code>expect</code>:</p>\n\n<pre><code>fn get_file_contents(&amp;mut self) {\n    let mut f = File::open(&amp;self.file_name).expect(\"Couldn't open file\");\n    f.read_to_string(&amp;mut self.file_contents).expect(\"Couldn't read file\");\n}\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p>seems kind of clunky to have to deal with the <code>Result</code> for each method.</p>\n</blockquote>\n\n<p>Which is why the <a href=\"http://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"nofollow\">Error Handling section of <em>The Rust Programming Language</em></a> spends a good amount of time discussing the <code>try!</code> macro:</p>\n\n<blockquote>\n  <p>A cornerstone of error handling in Rust is the <code>try!</code> macro. The <code>try!</code> macro abstracts case analysis like combinators, but unlike combinators, it also abstracts control flow. Namely, it can abstract the early return pattern seen above.</p>\n</blockquote>\n\n<p>(this makes more sense in context of the page)</p>\n\n<blockquote>\n  <p>I don't want my code to try and recover from the error (most likely caused by the file not being found) - I want it to print a useful error message and then die</p>\n</blockquote>\n\n<p>Then by all means, panic. There's more succinct AND more detailed ways to do it (as shown above).</p>\n"}], "owner": {"reputation": 621, "user_id": 3638594, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/d2e0428a10215aa7cf22257a82a4851b?s=128&d=identicon&r=PG&f=1", "display_name": "soarjay", "link": "https://stackoverflow.com/users/3638594/soarjay"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 38165780, "answer_count": 1, "score": 0, "last_activity_date": 1467507832, "creation_date": 1467506275, "last_edit_date": 1467506889, "question_id": 38165707, "link": "https://stackoverflow.com/questions/38165707/object-oriented-design-patterns-for-error-checking", "title": "Object oriented design patterns for error checking", "body": "<p>I have written the following function that reads the contents of a text file and <code>panic!</code>s if an error is encountered.</p>\n\n<pre><code>fn get_file_contents(name: String) -&gt; Result&lt;String, io::Error&gt; {\n    let mut f = try!(File::open(name));\n    let mut contents = String::new();\n    try!(f.read_to_string(&amp;mut contents));\n    Ok(contents)\n}\n</code></pre>\n\n<p>And the contents are extracted from the <code>Result</code> using:</p>\n\n<pre><code>let file_contents = match get_file_contents(file_name) {\n    Ok(contents) =&gt; contents,\n    Err(err) =&gt; panic!(\"{}\", err)\n};\n</code></pre>\n\n<p>I am now trying to reimplement this in an object oriented manner using structures and implementations. I created the following structure:</p>\n\n<pre><code>struct FileReader {\n    file_name: String,\n    file_contents: String,\n}\n</code></pre>\n\n<p>and implemented the following methods:</p>\n\n<pre><code>impl FileReader {\n    fn new(fname: &amp;str) -&gt; FileReader {\n        FileReader {\n            file_name: fname.to_string(),\n            file_contents: String::new(),\n        }\n    }\n\n    fn get_file_contents(&amp;mut self) {\n        let mut f = match File::open(&amp;self.file_name) {\n            Ok(file) =&gt; file,\n            Err(err) =&gt; panic!(\"{}\", err)\n        };\n\n        match f.read_to_string(&amp;mut self.file_contents) {\n            Ok(size) =&gt; size,\n            Err(err) =&gt; panic!(\"{}\", err)\n        };\n    }\n}\n</code></pre>\n\n<p>In the OO approach, I haven't used the <code>try!</code> macro as I don't want the method to return any value. Is my OO implementation of <code>get_file_contents</code> a typical way of achieving this functionality? If not, can you please suggest an alternative way?</p>\n"}, {"tags": ["generics", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "edited": false, "score": 0, "creation_date": 1467494909, "post_id": 38164471, "comment_id": 63757129, "body": "That makes sense. Should I then use Box::new() to in the match arms of choose mapper? or should each new() return a Box&lt;Mapper&gt;?  If I do this, then if I try to do this in another module:"}, {"owner": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "edited": false, "score": 0, "creation_date": 1467498911, "post_id": 38164471, "comment_id": 63757918, "body": "So clearly, I have to use Box::new(), bute when I try to call choose_mapper from another module and assign the result to either a variable, or struct field, I get this error:   unable to infer enough type information about <code>_</code>; type annotations or generic parameter binding required.   I have tried casting and type specification to no avail..."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "edited": false, "score": 0, "creation_date": 1467499948, "post_id": 38164471, "comment_id": 63758112, "body": "Did you remove <code>&lt;M: Mapper&gt;</code>? If you return a box, the function is not generic anymore."}, {"owner": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "edited": false, "score": 0, "creation_date": 1467519124, "post_id": 38164471, "comment_id": 63760830, "body": "I ended up removing it, which worked! But I&#39;m confused. If it&#39;s not generic, how is it able to return various types? Or is it just that it returns a pointer to a heap allocated data structure?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "reply_to_user": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "edited": false, "score": 0, "creation_date": 1467540889, "post_id": 38164471, "comment_id": 63764938, "body": "\u201cOr is it just that it returns a pointer to a heap allocated data structure?\u201d \u2192 Yes, that&#39;s the only way for a function to return any trait instance for now, hence the <code>impl Trait</code> RFC."}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 0, "last_activity_date": 1467493526, "creation_date": 1467493526, "answer_id": 38164471, "question_id": 38164344, "link": "https://stackoverflow.com/questions/38164344/having-trouble-understanding-traits-and-generics-in-rust/38164471#38164471", "title": "Having trouble understanding traits and generics in Rust", "body": "<p><code>pub fn choose_mapper&lt;M: Mapper&gt;(rom_header: &amp;RomHeader) -&gt; M</code> means that the function returns <code>M</code>, which is some (not any) <code>Mapper</code>. The generics are provided <em>by the caller</em> (either explicitly with <code>choose_mapper::&lt;SomeM&gt;(foo)</code> or most of the time inferred from context as in <code>let bar: SomeM = choose_mapper(foo)</code>).</p>\n\n<p>Your function tries to return a <code>Mapper1</code> (which is some <code>M</code>, but not necessarily the same as the one the caller wants).</p>\n\n<p>You should change the signatures to</p>\n\n<pre><code>pub fn choose_mapper(rom_header: &amp;RomHeader) -&gt; Box&lt;Mapper&gt;;\n</code></pre>\n\n<p>which allows the function to choose what it returns.</p>\n\n<p>Interestingly there is <a href=\"https://github.com/rust-lang/rfcs/pull/1522\" rel=\"nofollow\">a very active RFC</a> which would allow a function to choose what it returns (usually referred as <code>impl Trait</code>, although the syntax has not been chosen yet).</p>\n"}], "owner": {"reputation": 31, "user_id": 5562343, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd054f7d5766db6c6d8c113ba944a9ea?s=128&d=identicon&r=PG&f=1", "display_name": "cafeclimber", "link": "https://stackoverflow.com/users/5562343/cafeclimber"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 245, "favorite_count": 1, "accepted_answer_id": 38164471, "answer_count": 1, "score": 0, "last_activity_date": 1467493526, "creation_date": 1467492336, "question_id": 38164344, "link": "https://stackoverflow.com/questions/38164344/having-trouble-understanding-traits-and-generics-in-rust", "title": "Having trouble understanding traits and generics in Rust", "body": "<p>I'm incredibly new to trying to write generics, and Rust's traits continue to elude my understanding. I've got this piece of code:</p>\n\n<pre><code>pub trait Mapper {\n    fn prg_rom_read(&amp;self, addr: u16) -&gt; u8 {}\n    fn prg_rom_write(&amp;mut self, addr: u16, val: u8) {}\n    fn chr_rom_read(&amp;self, addr: u16) -&gt; u8 {}\n    fn chr_rom_write(&amp;mut self, addr: u16, val: u8) {}\n}\n\npub fn choose_mapper&lt;M: Mapper&gt;(rom_header: &amp;RomHeader) -&gt; M {\n    match rom_header.mapper_number {\n        0 =&gt; Mapper1::new(rom_header),\n        _ =&gt; panic!(\"Unsupported mapper: {:#}\", rom_header.mapper_number),\n    }\n}\n\nstruct Mapper1 {\n    prg_ram: Box&lt;[u8]&gt;,\n    prg_rom: Box&lt;[u8]&gt;,\n    chr: Box&lt;[u8]&gt;,\n}\n\nimpl Mapper1 {\n    pub fn new(rom_header: &amp;RomHeader) -&gt; Self {\n        Mapper1 {\n            prg_ram: {\n                let size = rom_header.prg_ram_size as usize * 8192;\n                vec![0; size].into_boxed_slice()\n            },\n            prg_rom: {\n                let size = rom_header.prg_rom_size as usize * 16384;\n                vec![0; size].into_boxed_slice()\n            },\n            chr: {\n                let size = rom_header.chr_rom_size as usize * 8192;\n                vec![0; size].into_boxed_slice()\n            },\n        }\n    }\n}\n\nimpl Mapper for Mapper1 {\n    fn prg_rom_read(&amp;self, addr: u16) -&gt; u8 {}\n\n    fn prg_rom_write(&amp;mut self, addr: u16, val: u8) {}\n\n    fn chr_rom_read(&amp;self, addr: u16) -&gt; u8 {}\n\n    fn chr_rom_write(&amp;mut self, addr: u16, val: u8) {}\n}\n</code></pre>\n\n<p>in which I try to define a trait, impl that trait on several structs, then have a function which returns one of those structs. Is this even possible?</p>\n\n<p>I get the compiler error: </p>\n\n<pre><code>expected `_`,\n    found `mapper::Mapper1`\n(expected type parameter,\n    found struct `mapper::Mapper1`) [E0308]\nsrc/mapper.rs:11     match rom_header.mapper_number {\nsrc/mapper.rs:12         0 =&gt; Mapper1::new(rom_header),\nsrc/mapper.rs:13         _ =&gt; panic!(\"Unsupported mapper: {:#}\", rom_header.mapper_number),\nsrc/mapper.rs:14     }\nsrc/mapper.rs:11:5: 14:6 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/mapper.rs:12:14: 12:38 note: match arm with an incompatible type\nsrc/mapper.rs:12         0 =&gt; Mapper1::new(rom_header),\n                              ^~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 10, "last_activity_date": 1565395428, "last_edit_date": 1565395428, "creation_date": 1467491346, "answer_id": 38164215, "question_id": 38163675, "link": "https://stackoverflow.com/questions/38163675/iterate-two-vectors-with-different-lengths/38164215#38164215", "title": "Iterate two vectors with different lengths", "body": "<p><a href=\"https://crates.io/crates/itertools\" rel=\"nofollow noreferrer\"><code>itertools</code></a> has a method <a href=\"https://docs.rs/itertools/latest/itertools/trait.Itertools.html#method.zip_longest\" rel=\"nofollow noreferrer\"><code>zip_longest</code></a> that does just that:</p>\n\n<pre><code>use itertools::Itertools;\nuse itertools::EitherOrBoth::{Both, Left, Right};\n\nfor it in xs.iter().zip_longest(ys.iter()) {\n    match it {\n        Both(x, y) =&gt; println!(\"x={}, y={}\", x, y),\n        Left(x) =&gt; println!(\"x={}, no matching Y\", x),\n        Right(y) =&gt; println!(\"y={}, no matching X\", y),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 10, "last_activity_date": 1565395535, "last_edit_date": 1565395535, "creation_date": 1467540807, "answer_id": 38168890, "question_id": 38163675, "link": "https://stackoverflow.com/questions/38163675/iterate-two-vectors-with-different-lengths/38168890#38168890", "title": "Iterate two vectors with different lengths", "body": "<p>The implementation without external crates:</p>\n\n<pre><code>let mut it_xs = xs.iter();\nlet mut it_ys = ys.iter();\nloop {\n    match (it_xs.next(), it_ys.next()) {\n        (Some(x), Some(y)) =&gt; println!(\"x={}, y={}\", x, y),\n        (Some(x), None) =&gt; println!(\"x={}, no matching Y\", x),  \n        (None, Some(y)) =&gt; println!(\"y={}, no matching X\", y), \n        (None, None) =&gt; break,\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1384, "favorite_count": 2, "accepted_answer_id": 38164215, "answer_count": 2, "score": 4, "last_activity_date": 1565395535, "creation_date": 1467487206, "last_edit_date": 1565395423, "question_id": 38163675, "link": "https://stackoverflow.com/questions/38163675/iterate-two-vectors-with-different-lengths", "title": "Iterate two vectors with different lengths", "body": "<p>I have two <code>Vec</code>s that can be of different lengths, for example:</p>\n\n<pre><code>let xs = vec![1, 2, 3, 4, 5];\nlet ys = vec![11, 12, 13];\n</code></pre>\n\n<p>I want to iterate over them in pairs, printing:</p>\n\n<pre><code>x=1, y=11\nx=2, y=12\nx=3, y=13\nx=4; no matching Y\nx=5; no matching Y\n</code></pre>\n\n<p>I can use <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip\" rel=\"nofollow noreferrer\"><code>Iterator::zip</code></a> to get the pairs with matching elements in both <code>xs</code> and <code>ys</code>:</p>\n\n<pre><code>for (x, y) in xs.iter().zip(ys.iter()) {\n    println!(\"x={}, y={}\", x, y);\n}\n</code></pre>\n\n<p>but for the \"no matching\" bits I need complex code that checks the length and takes a slice of the rest.</p>\n\n<p>I wanted a solution that's fully iterator-based, so I tried:</p>\n\n<pre><code>let mut it_xs = xs.iter();\nlet mut it_ys = ys.iter();\nwhile let (Some(x), Some(y)) = (it_xs.next(), it_ys.next()) {\n    println!(\"x={}, y={}\", x, y);\n}\nwhile let Some(x) = it_xs.next() {\n    println!(\"x={}, no matching Y\", x);\n}\nwhile let Some(y) = it_ys.next() {\n    println!(\"y={}, no matching X\", y);\n}\n</code></pre>\n\n<p>which does not work correctly, as the first loop skips the first element that doesn't have a match in the other list (x=4).</p>\n\n<p>Is it possible to solve with the help of an iterator without slicing the rest of the larger <code>Vec</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": false, "score": 3, "last_activity_date": 1467492103, "creation_date": 1467492103, "answer_id": 38164314, "question_id": 38163126, "link": "https://stackoverflow.com/questions/38163126/error-xxx-does-not-live-long-enough/38164314#38164314", "title": "error: xxx does not live long enough", "body": "<p>In the first case <code>b\"Hi\"</code> is a byte literal, and has type <code>&amp;'static [u8]</code> which means \u201cslice of <code>u8</code> with infinite lifetime\u201d. The function <code>put</code> needs some lifetime <code>'x</code>, since <code>'static</code> live is bigger than any lifetime, Rust is happy to use it.</p>\n\n<p>In the second case</p>\n\n<pre><code>let my_str = \"hi\".to_string();\nlet username = my_str.as_bytes();\n</code></pre>\n\n<p><code>username</code> is a reference to the inner buffer of <code>my_str</code> and cannot outlive it. The compiler complains because the first argument of <code>put</code> should have a lifetime <code>'x</code> which is broader than that of <code>my_str</code> (local to <code>user_add</code>). Rust won't allow you to do that because <code>db</code> would point to dangling data at the end of the function call:</p>\n\n<pre><code>user_add(input, &amp;mut db);\n// `my_str` was local to `user_add` and doesn't exist anymore\n// if Rust had allowed you to put it in `db`, `db` would now contain some invalid data here\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 39, "user_id": 6542116, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb3f8f40eda2e051251c948638e146e5?s=128&d=identicon&r=PG&f=1", "display_name": "Mateus", "link": "https://stackoverflow.com/users/6542116/mateus"}, "is_accepted": false, "score": 1, "last_activity_date": 1467495902, "creation_date": 1467495902, "answer_id": 38164736, "question_id": 38163126, "link": "https://stackoverflow.com/questions/38163126/error-xxx-does-not-live-long-enough/38164736#38164736", "title": "error: xxx does not live long enough", "body": "<p>Thanks to @mcarton for answering why the error happens. In this answer I hope it becames clear how to solve it too.</p>\n\n<hr>\n\n<p>The compiler's code generation is perfect but the error message is\njust terribly confusing to me.</p>\n\n<p>The problem was in another library that I made, that happens to be a\ndatabase. The database struct contains an entry that holds slices.\nThe lifetime of the slices was set as:</p>\n\n<pre><code>struct Entry&lt;'a&gt; {\n    key: &amp;'a [u8],\n    value: &amp;'a [u8],\n}\n\npub struct Database&lt;'a&gt; {\n    file: File,\n    entries: Vec&lt;Entry&lt;'a&gt;&gt;,\n}\n</code></pre>\n\n<p>It means that the data that the slice holds need to live longer than the\ndatabase struct. The <code>username</code> variable goes out of scope but the database holding a reference to it still lives. So it means that the database would have to hold data that lives longer than it, like static variables, which makes the database useless.</p>\n\n<p>The library compiled okay. But the error showed elsewhere.</p>\n\n<p>The solution for that was to exchange the slices for vectors because\nvectors are not pointers. The vectors can live less than the database.</p>\n\n<pre><code>struct Entry {\n    key: Vec&lt;u8&gt;,\n    value: Vec&lt;u8&gt;,\n}\n\npub struct Database {\n    file: File,\n    entries: Vec&lt;Entry&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 39, "user_id": 6542116, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/fb3f8f40eda2e051251c948638e146e5?s=128&d=identicon&r=PG&f=1", "display_name": "Mateus", "link": "https://stackoverflow.com/users/6542116/mateus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 685, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1467495902, "creation_date": 1467483050, "question_id": 38163126, "link": "https://stackoverflow.com/questions/38163126/error-xxx-does-not-live-long-enough", "title": "error: xxx does not live long enough", "body": "<p>This works:</p>\n\n<pre><code>fn user_add&lt;'x&gt;(data: &amp;'x Input, db: &amp;'x mut Database&lt;'x&gt;) -&gt; HandlerOutput {\n    //let input: UserAddIn = json::decode(&amp;data.post).unwrap();\n    //let username = input.username.as_bytes();\n    //let password = input.password.as_bytes();\n    db.put(b\"Hi\", b\"hello\");\n    //db.delete(username);\n    Ok(\"Hi\".to_string())\n}\n</code></pre>\n\n<p>This does not work:</p>\n\n<pre><code>fn user_add&lt;'x&gt;(data: &amp;'x Input, db: &amp;'x mut Database&lt;'x&gt;) -&gt; HandlerOutput {\n    //let input: UserAddIn = json::decode(&amp;data.post).unwrap();\n    //let username = input.username.as_bytes();\n    //let password = input.password.as_bytes();\n    let my_str = \"hi\".to_string();\n    let username = my_str.as_bytes();\n    db.put(username, b\"hello\");\n    //db.delete(username);\n    Ok(\"Hi\".to_string())\n}\n</code></pre>\n\n<p>Compiler output:</p>\n\n<pre><code>src/handlers.rs:85:17: 85:23 error: `my_str` does not live long enough\nsrc/handlers.rs:85      let username = my_str.as_bytes();\n                                       ^~~~~~\nsrc/handlers.rs:80:77: 89:2 note: reference must be valid for the lifetime 'x as defined on the block at 80:76...\nsrc/handlers.rs:80 fn user_add&lt;'x&gt;(data: &amp;'x Input, db: &amp;'x mut Database&lt;'x&gt;) -&gt; HandlerOutput {\nsrc/handlers.rs:81      //let input: UserAddIn = json::decode(&amp;data.post).unwrap();\nsrc/handlers.rs:82      //let username = input.username.as_bytes();\nsrc/handlers.rs:83      //let password = input.password.as_bytes();\nsrc/handlers.rs:84      let my_str = \"hi\".to_string();\nsrc/handlers.rs:85      let username = my_str.as_bytes();\n                   ...\nsrc/handlers.rs:84:32: 89:2 note: ...but borrowed value is only valid for the block suffix following statement 0 at 84:31\nsrc/handlers.rs:84      let my_str = \"hi\".to_string();\nsrc/handlers.rs:85      let username = my_str.as_bytes();\nsrc/handlers.rs:86      db.put(username, b\"hello\");\nsrc/handlers.rs:87      //db.delete(username);\nsrc/handlers.rs:88      Ok(\"Hi\".to_string())\nsrc/handlers.rs:89 }\n</code></pre>\n\n<p>I've seen several questions about lifetime in Rust and I think the book is not <strong>that</strong> clear about it. I still use lifetimes as trial and error. This specific case has confused me because I've made several attempts fighting against the compiler and this is just the last error I got. If you have some Rust skills please consider editing the part about lifetimes in the book.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 2121, "user_id": 257122, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/6ff4f60ceb95eb94677b152e6f18ca4a?s=128&d=identicon&r=PG", "display_name": "Ashwin Jayaprakash", "link": "https://stackoverflow.com/users/257122/ashwin-jayaprakash"}, "edited": false, "score": 0, "creation_date": 1547353501, "post_id": 38163076, "comment_id": 95161722, "body": "Similar question: <a href=\"https://stackoverflow.com/questions/40531912/what-is-the-usage-of-the-asterisk-symbol-in-rust\" title=\"what is the usage of the asterisk symbol in rust\">stackoverflow.com/questions/40531912/&hellip;</a>"}], "answers": [{"comments": [{"owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1467483452, "post_id": 38163137, "comment_id": 63754319, "body": "I see. What do you suggest to use where both forms are allowed and yield the same results? Should I stick to the asterisk everytime, or should I take advantage of the convenience implementations?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "edited": false, "score": 0, "creation_date": 1467484240, "post_id": 38163137, "comment_id": 63754511, "body": "You should use them, that&#39;s why they exit. Superfluous dereferencing doesn&#39;t clarify the code, it just adds line noise."}, {"owner": {"reputation": 125, "user_id": 2355974, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ee3465385cfc746c6a27ae8ecf3d8f52?s=128&d=identicon&r=PG", "display_name": "cspin", "link": "https://stackoverflow.com/users/2355974/cspin"}, "edited": false, "score": 0, "creation_date": 1480283569, "post_id": 38163137, "comment_id": 68886260, "body": "Should the third sentence be &quot;For convenience... which makes <b><code>b</code></b> work...&quot; because <code>b</code> is the function with the immutable reference that is not explicitly dereferenced?"}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 5, "last_activity_date": 1480283947, "last_edit_date": 1480283947, "creation_date": 1467483098, "answer_id": 38163137, "question_id": 38163076, "link": "https://stackoverflow.com/questions/38163076/when-can-i-omit-dereferencing-with-the-asterisk-operator/38163137#38163137", "title": "When can I omit dereferencing with the asterisk operator?", "body": "<p>You can only add types for which the operator is defined by implementing the <code>Add</code> trait. In both examples where you do <code>1 + *x</code>, the type of <code>*x</code> is <code>i32</code> and indeed <code>i32 + i32</code> is defined. For convenience there is also an implementation of <code>i32 + &amp;i32</code> (and <code>&amp;i32 + i32</code> and <code>&amp;i32 + &amp;i32</code>) which makes <code>b</code> work, but this is <em>just</em> for the specific case of one immutable reference, it doesn't extend to, say <code>&amp;&amp;i32</code> or <code>&amp;mut i32</code>. That's why <code>d</code> does not work.</p>\n"}], "owner": {"reputation": 4421, "user_id": 1173529, "user_type": "registered", "accept_rate": 97, "profile_image": "https://www.gravatar.com/avatar/4f64aeede68ff9de9a5100ece80e3a87?s=128&d=identicon&r=PG", "display_name": "Midiparse", "link": "https://stackoverflow.com/users/1173529/midiparse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 656, "favorite_count": 0, "accepted_answer_id": 38163137, "answer_count": 1, "score": 6, "last_activity_date": 1480284359, "creation_date": 1467482775, "last_edit_date": 1480284359, "question_id": 38163076, "link": "https://stackoverflow.com/questions/38163076/when-can-i-omit-dereferencing-with-the-asterisk-operator", "title": "When can I omit dereferencing with the asterisk operator?", "body": "<p>I have a hard time understanding when to use the asterisk operator for dereferencing and when can I omit it.</p>\n\n<pre><code>fn main() { a(); b(); c(); d(); }\n\nfn a() {\n    let v = 1;\n    let x = &amp;v;\n    println!(\"a {}\", *x);\n    println!(\"a {}\", 1 + *x);\n}\n\nfn b() {\n    let v = 1;\n    let x = &amp;v;\n    println!(\"b {}\", x);\n    println!(\"b {}\", 1 + x);\n}\n\nfn c() {\n    let mut v = 1;\n    let mut x = &amp;mut v;\n    println!(\"c {}\", *x);\n    println!(\"c {}\", 1 + *x);\n}\n\nfn d() {\n    let mut v = 1;\n    let mut x = &amp;mut v;\n    println!(\"d {}\", x);\n    println!(\"d {}\", 1 + x); // error\n}\n</code></pre>\n\n<p>The above code sample almost compiles except the last statement where I add one to the the mutable reference <code>x</code>. There I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `_: std::ops::Add&lt;&amp;mut _&gt;` is not satisfied [E0277]\n</code></pre>\n\n<p>Anywhere else both asterisk and non-asterisk versions are valid and give expected results.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 1, "last_activity_date": 1467492684, "creation_date": 1467492684, "answer_id": 38164375, "question_id": 38163017, "link": "https://stackoverflow.com/questions/38163017/find-function-names-in-a-module/38164375#38164375", "title": "Find function names in a module", "body": "<p>Rust is a static language and does not have any kind of introspection at runtime.\n<a href=\"https://github.com/phildawes/racer\" rel=\"nofollow\">racer</a> is the <em>de facto</em> standard tool for Rust completion. I don't know whether it could be used for a REPL (should be, it can complete as one types) or even if it can be used as a library though (its <code>Cargo.toml</code> suggests it).</p>\n"}], "owner": {"reputation": 11, "user_id": 6501841, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SEEnK.jpg?s=128&g=1", "display_name": "user6501841", "link": "https://stackoverflow.com/users/6501841/user6501841"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 122, "favorite_count": 0, "accepted_answer_id": 38164375, "answer_count": 1, "score": 0, "last_activity_date": 1467552984, "creation_date": 1467482352, "last_edit_date": 1467552984, "question_id": 38163017, "link": "https://stackoverflow.com/questions/38163017/find-function-names-in-a-module", "title": "Find function names in a module", "body": "<p>How can I get a vector of the names of functions stored in a module, similar to how this works in Python:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import inspect\ninspect.getmembers(module)\n</code></pre>\n\n<p>I'm trying to write a basic REPL as a learning exercise and want to add line completion, The output type doesn't matter so much as long as it's usable.</p>\n\n<ol>\n<li><p>Is this possible in Rust?</p></li>\n<li><p>Is there a library already designed for this?</p></li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 4, "last_activity_date": 1467474438, "creation_date": 1467474438, "answer_id": 38161845, "question_id": 38161695, "link": "https://stackoverflow.com/questions/38161695/how-can-i-optimize-reading-a-utf-8-string-from-a-file-with-a-known-offset-and-si/38161845#38161845", "title": "How can I optimize reading a UTF-8 string from a file with a known offset and size?", "body": "<ol>\n<li><p>Rust has no concept of \"write-only\" memory, so the only way to avoid initialising the <code>Vec</code> would be with <code>unsafe</code> code.  Unless you can <em>prove</em> this is an <em>actual</em> performance problem for your program, just leave it as-is.</p></li>\n<li><p>You could just use <a href=\"http://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8\" rel=\"nofollow\"><code>String::from_utf8</code></a> instead, which does the conversion in-place.</p></li>\n</ol>\n"}, {"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467481639, "post_id": 38162128, "comment_id": 63753851, "body": "I need exactly <code>length</code> bytes, not to end of file as <code>read_to_string</code> do."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467483979, "post_id": 38162128, "comment_id": 63754443, "body": "That is why it is used the function <code>take()</code> <a href=\"http://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/io/trait.Read.html#method.take</a>"}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467485250, "post_id": 38162128, "comment_id": 63754810, "body": "But <code>take</code> read <code>at most</code>, not exactly number of bytes, I need error if file not contains enough bytes."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467485477, "post_id": 38162128, "comment_id": 63754878, "body": "You&#39;re right, I did not realize this. But you can check the number of bytes after reading"}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467486121, "post_id": 38162128, "comment_id": 63755038, "body": "Fixed. It gives error if number of bytes is not equal to the <code>length</code>"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1467485944, "last_edit_date": 1467485944, "creation_date": 1467476421, "answer_id": 38162128, "question_id": 38161695, "link": "https://stackoverflow.com/questions/38161695/how-can-i-optimize-reading-a-utf-8-string-from-a-file-with-a-known-offset-and-si/38162128#38162128", "title": "How can I optimize reading a UTF-8 string from a file with a known offset and size?", "body": "<p>You can use <code>read_to_string()</code> function in combination with <code>take()</code> function to read the exact number of bytes:</p>\n\n<pre><code>fn test(file: &amp;mut File, offset: u64, length: usize) -&gt; Result&lt;String, String&gt; {\n    try!(file.seek(SeekFrom::Start(offset)).map_err(|err| err.to_string()));\n    let mut res = String::new();//or you can use ::with_capacity(length);\n    try!(file.take(length as u64)\n            .read_to_string(&amp;mut res)\n            .map_err(|err| err.to_string())\n            .and_then(|x| if x!=length {Err(\"wrong num bytes\".to_string())}else{Ok(x)})\n    );\n    Result::Ok(res)\n}\n</code></pre>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 634, "favorite_count": 0, "answer_count": 2, "score": 0, "last_activity_date": 1467552799, "creation_date": 1467473318, "last_edit_date": 1467552799, "question_id": 38161695, "link": "https://stackoverflow.com/questions/38161695/how-can-i-optimize-reading-a-utf-8-string-from-a-file-with-a-known-offset-and-si", "title": "How can I optimize reading a UTF-8 string from a file with a known offset and size?", "body": "<p>I want to read a UTF-8 string from a file with a known offset and size,\nso I wrote:</p>\n\n<pre><code>fn test(file: &amp;mut File, offset: u64, length: usize) -&gt; Result&lt;String, String&gt; {\n    try!(file.seek(SeekFrom::Start(offset)).map_err(|err| err.to_string()));\n    let mut buffer = Vec::&lt;u8&gt;::with_capacity(length);\n    buffer.resize(length, 0_u8);\n    try!(file.read_exact(&amp; mut buffer).map_err(|err| err.to_string()));\n    let utf8_s = try!(from_utf8(&amp;buffer).map_err(|err| \"invalid utf-8 data in data\".to_string()));\n    Result::Ok(String::from(utf8_s))\n}\n</code></pre>\n\n<p>In my code I dislike two things:</p>\n\n<ol>\n<li><p>I initialized <code>Vec</code> with 0, but this is useless, because on the\nnext line I call <code>file.read_exact</code>. Can I allocate memory in heap without\ninitializing it?</p></li>\n<li><p>I created <code>Vec</code> on the heap and at the end I allocate memory again via <code>String</code>. I allocate the same amount of memory and copy from one location to another. Is it possible to implement this function with <code>length</code> memory requirements, not <code>2 * length</code>?</p></li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 80313, "user_id": 196561, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/6836267883ea7234253b2100f222dbbc?s=128&d=identicon&r=PG", "display_name": "osgx", "link": "https://stackoverflow.com/users/196561/osgx"}, "edited": false, "score": 0, "creation_date": 1467469119, "post_id": 38161061, "comment_id": 63750393, "body": "The self argument is special, <a href=\"http://stackoverflow.com/questions/32304595/whats-the-difference-between-self-and-self\" title=\"whats the difference between self and self\">stackoverflow.com/questions/32304595/&hellip;</a> &quot;self when used as first method argument, is a shorthand for self: Self ... Self in method arguments is syntactic sugar for the receiving type of the method&quot; &amp; <a href=\"https://doc.rust-lang.org/book/method-syntax.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/method-syntax.html</a> &quot;Methods take a special first parameter, of which there are three variants: self, &amp;self, and &amp;mut self. You can think of this first parameter as being the foo in foo.bar().&quot;"}], "answers": [{"comments": [{"owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467469992, "post_id": 38161193, "comment_id": 63750668, "body": "yes, I also found it&#39;s moved, but what&#39;s meaning of such tuple struct?"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 1, "creation_date": 1467471124, "post_id": 38161193, "comment_id": 63750987, "body": "@kingluo It&#39;s just... a struct? They&#39;re described <a href=\"http://doc.rust-lang.org/book/structs.html#tuple-structs\" rel=\"nofollow noreferrer\">in the book</a> but they&#39;re conceptually the same as any other struct."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 2, "last_activity_date": 1467469556, "creation_date": 1467469556, "answer_id": 38161193, "question_id": 38161061, "link": "https://stackoverflow.com/questions/38161061/why-is-self-is-not-moved-when-calling-into-iter-on-a-linked-list/38161193#38161193", "title": "Why is self is not moved when calling into_iter on a linked list?", "body": "<p>The <code>self</code> argument is <em>not</em> special (in any way that's relevant to this question). The object on which <code>into_iter</code> is called <em>is</em> moved. Furthermore, in the method, the variable <code>self</code> is then moved into the <code>IntoIter</code> struct, just as any <code>x</code> in this example:</p>\n\n<pre><code>fn into_iter_external&lt;T&gt;(x: List&lt;T&gt;) -&gt; IntoIter&lt;T&gt; {\n    IntoIter(x)\n}\n</code></pre>\n"}], "owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 76, "favorite_count": 0, "accepted_answer_id": 38161193, "answer_count": 1, "score": -1, "last_activity_date": 1467552582, "creation_date": 1467468564, "last_edit_date": 1467552582, "question_id": 38161061, "link": "https://stackoverflow.com/questions/38161061/why-is-self-is-not-moved-when-calling-into-iter-on-a-linked-list", "title": "Why is self is not moved when calling into_iter on a linked list?", "body": "<p>In the book <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/second-into-iter.html\" rel=\"nofollow\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a>, it tries to create an iterator for the list:</p>\n\n<pre><code>pub struct IntoIter&lt;T&gt;(List&lt;T&gt;);\n\nimpl&lt;T&gt; List&lt;T&gt; {\n    pub fn into_iter(self) -&gt; IntoIter&lt;T&gt; {\n        IntoIter(self)\n    }\n}\n</code></pre>\n\n<p>Why is <code>self</code> not moved? Is the <code>self</code> argument is <code>pub fn into_iter(self)</code> a reference or value? Is <code>self</code> special and does not obey the common rules for moving or borrowing? What's the relationship between the <code>IntoIter</code> and <code>List</code>?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467461455, "post_id": 38159961, "comment_id": 63748231, "body": "Thanks for answer, but why compiler&#39;s error emitted only for usage of <code>IFoo</code> or <code>IBoo</code>? Why I can define <code>trait</code> with functions without <code>self</code>, and errors emitted only when I made attempt to use such trait?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 3, "creation_date": 1467461609, "post_id": 38159961, "comment_id": 63748281, "body": "@user1244932 Because traits aren&#39;t <i>just</i> used for dynamic dispatch.  There&#39;s no issue with static dispatch.  The compiler doesn&#39;t have to construct a vtable <i>unless</i> you ask it to, and that&#39;s the point at which it complains."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1467461690, "post_id": 38159961, "comment_id": 63748305, "body": "Thanks again for answer"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1484561113, "post_id": 38159961, "comment_id": 70544988, "body": "Does aSpex&#39;s answer invalidate this one? It seems that <code>trait IBoo { fn new() -&gt; Box&lt;IBoo&gt; where Self: Sized; }</code> compiles just fine. (Haven&#39;t tried actually <i>calling</i> <code>new</code>, though.)"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 0, "creation_date": 1484572079, "post_id": 38159961, "comment_id": 70551329, "body": "@user4815162342 It doesn&#39;t invalidate it, but it&#39;s definitely the better answer.  Sometimes, I wish the author of an accepted answer could &quot;redirect&quot; to another, better answer."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1484572518, "post_id": 38159961, "comment_id": 70551627, "body": "OK, I think I get it now. The sentence from your answer, &quot;because you&#39;ve defined a method that cannot be dynamically dispatched, the IBoo trait <i>as a whole</i> is disqualified from being used with dynamic dispatch&quot; still stands. What aSpex&#39;s solution does is explicitly make <code>new()</code> unavailable to trait objects, thus making it (so to say) optional. With non-trait-object-safe <code>new</code> out of the way, the trait again becomes eligible for use with trait-object types such as <code>Box&lt;IBoo&gt;</code>."}, {"owner": {"reputation": 428, "user_id": 1349005, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/5fb89edff2da0d0fe819bc5335ddf556?s=128&d=identicon&r=PG", "display_name": "Lindenk", "link": "https://stackoverflow.com/users/1349005/lindenk"}, "edited": false, "score": 0, "creation_date": 1563220371, "post_id": 38159961, "comment_id": 100620151, "body": "I&#39;m surprised this wasn&#39;t implemented to only put trait-object safe methods in the vtable and complain only when a non-trait-object safe method call is attempted using dynamic dispatch. It seems rather short sighted to disqualify traits already being used with static dispatch from using dynamic dispatch likely halfway through an implementation because the compiler can&#39;t overlook the obvious intentions of a programmer."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 20, "last_activity_date": 1519498492, "last_edit_date": 1519498492, "creation_date": 1467461177, "answer_id": 38159961, "question_id": 38159771, "link": "https://stackoverflow.com/questions/38159771/why-can-a-trait-not-construct-itself/38159961#38159961", "title": "Why can a trait not construct itself?", "body": "<p>The compiler tells you the <em>exact</em> reason this doesn't work:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0038]: the trait `IBoo` cannot be made into an object\n --&gt; src/main.rs:2:5\n  |\n2 |     fn new() -&gt; Box&lt;IBoo&gt;;\n  |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `IBoo` cannot be made into an object\n  |\n  = note: method `new` has no receiver\n</code></pre>\n\n<p>Note the last line.  It's telling you that the reason for the error is that <code>new()</code> doesn't depend on having an instance of a value implementing the <code>IBoo</code> trait.</p>\n\n<p>By not taking a pointer of some kind to <code>self</code>, the method <em>cannot</em> be invoked by dynamic dispatch.  If it can't be invoked by dynamic dispatch, this means it cannot go into the trait's associated vtable.  There <em>has</em> to be an associated vtable, because that's how something like <code>Box&lt;IBoo&gt;</code> <em>works</em>.  Some time ago, the core Rust developers decided that including even a <em>single</em> \"non-object safe\" method in a trait disqualified the <em>whole trait</em> from being used as an object.</p>\n\n<p>To put it in other words: because you've defined a method that cannot be dynamically dispatched, the <code>IBoo</code> trait <em>as a whole</em> is disqualified from being used with dynamic dispatch.</p>\n\n<p>If you want some kind of constructor function, you need to have some <em>other</em> way of writing that.  This could be using plain function pointers, or an <code>IBooFactory</code> trait, as you might with Java.</p>\n"}, {"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1467465221, "post_id": 38160136, "comment_id": 63749332, "body": "Thanks for this! I didn&#39;t realise it was possible to add <code>Self</code> constraints to individual trait methods. I had thought constraints had to be on the trait itself, and that this sort of problem could only be approached by breaking the trait up."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1467472487, "post_id": 38160136, "comment_id": 63751377, "body": "Thanks for writing this up; I <i>completely</i> forgot about that."}, {"owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "edited": false, "score": 0, "creation_date": 1544898861, "post_id": 38160136, "comment_id": 94441859, "body": "More <a href=\"https://stackoverflow.com/questions/30938499/why-is-the-sized-bound-necessary-in-this-trait\">detail</a> about <code>Self: Sized</code>, go!"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 20, "last_activity_date": 1519499269, "last_edit_date": 1519499269, "creation_date": 1467462361, "answer_id": 38160136, "question_id": 38159771, "link": "https://stackoverflow.com/questions/38159771/why-can-a-trait-not-construct-itself/38160136#38160136", "title": "Why can a trait not construct itself?", "body": "<p>This is from the <a href=\"https://doc.rust-lang.org/error-index.html#E0038\" rel=\"noreferrer\">description of E0038</a>:</p>\n\n<blockquote>\n  <h3>Method has no receiver</h3>\n  \n  <p>Methods that do not take a <code>self</code> parameter can't be called since\n  there won't be a way to get a pointer to the method table for them.</p>\n\n<pre><code>trait Foo {\n    fn foo() -&gt; u8;\n}\n</code></pre>\n  \n  <p>This could be called as <code>&lt;Foo as Foo&gt;::foo()</code>, which would not be able\n  to pick an implementation.</p>\n  \n  <p>Adding a <code>Self: Sized</code> bound to these methods will generally make this\n  compile.</p>\n\n<pre><code>trait Foo {\n    fn foo() -&gt; u8 where Self: Sized;\n}\n</code></pre>\n</blockquote>\n\n<p>You can do this:</p>\n\n<pre><code>trait IBoo {\n    fn new() -&gt; Box&lt;IBoo&gt;\n    where\n        Self: Sized;\n}\n</code></pre>\n\n<p>In other cases, you can place the restriction on the entire impl:</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4081, "favorite_count": 2, "accepted_answer_id": 38159961, "answer_count": 2, "score": 16, "last_activity_date": 1519499269, "creation_date": 1467459921, "last_edit_date": 1519498452, "question_id": 38159771, "link": "https://stackoverflow.com/questions/38159771/why-can-a-trait-not-construct-itself", "title": "Why can a trait not construct itself?", "body": "<p>This code give me a compilation error:</p>\n\n<pre><code>trait IBoo {\n    fn new() -&gt; Box&lt;IBoo&gt;;\n}\n</code></pre>\n\n<p>while this code compiles without any error:</p>\n\n<pre><code>trait IBoo {\n    //fn new() -&gt; Box&lt;IBoo&gt;;\n}\n\ntrait IFoo {\n    fn new() -&gt; Box&lt;IBoo&gt;;\n}\n</code></pre>\n\n<ol>\n<li>Why does the first one not compile? <code>rustc --explain E0038</code> does not give me a direct hint why it is not possible.</li>\n<li>Is it possible to combine construction and methods in one interface (trait)?</li>\n</ol>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "is_accepted": true, "score": 5, "last_activity_date": 1467556910, "last_edit_date": 1467556910, "creation_date": 1467452065, "answer_id": 38158645, "question_id": 38158167, "link": "https://stackoverflow.com/questions/38158167/is-it-possible-to-create-a-macro-to-implement-builder-pattern-methods/38158645#38158645", "title": "Is it possible to create a macro to implement builder pattern methods?", "body": "<p>After reading <a href=\"https://doc.rust-lang.org/book/macros.html\" rel=\"nofollow\">the documentation</a>, I've come up with this code:</p>\n\n<pre><code>macro_rules! builder_field {\n    ($field:ident, $field_type:ty) =&gt; {\n        pub fn $field&lt;'a&gt;(&amp;'a mut self,\n                          $field: $field_type) -&gt; &amp;'a mut Self {\n            self.$field = $field;\n            self\n        }\n    };\n}\n\nstruct Struct {\n    pub hello: bool,\n}\nimpl Struct {\n    builder_field!(hello, bool);\n}\n\nfn main() {\n    let mut s = Struct {\n        hello: false,\n    };\n    s.hello(true);\n    println!(\"Struct hello is: {}\", s.hello);\n}\n</code></pre>\n\n<p>It does exactly what I need: creates a public builder method with specified name, specified member and type.</p>\n"}, {"tags": [], "owner": {"reputation": 472, "user_id": 10801822, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/146a7214b29438ffcb5a9ee6ce8b90ff?s=128&d=identicon&r=PG", "display_name": "LeoVen", "link": "https://stackoverflow.com/users/10801822/leoven"}, "is_accepted": false, "score": 1, "last_activity_date": 1596136790, "creation_date": 1596136790, "answer_id": 63179939, "question_id": 38158167, "link": "https://stackoverflow.com/questions/38158167/is-it-possible-to-create-a-macro-to-implement-builder-pattern-methods/63179939#63179939", "title": "Is it possible to create a macro to implement builder pattern methods?", "body": "<p>To complement the already accepted answer, since it is 4 years old by now, you should check out the crate <a href=\"https://github.com/colin-kiegel/rust-derive-builder\" rel=\"nofollow noreferrer\">rust-derive-builder</a>. It uses procedural macros to automatically implement the builder pattern for any struct.</p>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 557, "favorite_count": 0, "accepted_answer_id": 38158645, "answer_count": 2, "score": 3, "last_activity_date": 1596136790, "creation_date": 1467448415, "last_edit_date": 1467553173, "question_id": 38158167, "link": "https://stackoverflow.com/questions/38158167/is-it-possible-to-create-a-macro-to-implement-builder-pattern-methods", "title": "Is it possible to create a macro to implement builder pattern methods?", "body": "<p>I have a <a href=\"https://aturon.github.io/ownership/builders.html\" rel=\"nofollow\">builder pattern</a> implemented for my struct:</p>\n\n<pre><code>pub struct Struct {\n    pub grand_finals_modifier: bool,\n}\nimpl Struct { \n    pub fn new() -&gt; Struct {\n        Struct {\n            grand_finals_modifier: false,\n        }\n    }\n\n    pub fn grand_finals_modifier&lt;'a&gt;(&amp;'a mut self, name: bool) -&gt; &amp;'a mut Struct {\n        self.grand_finals_modifier = grand_finals_modifier;\n        self\n    }\n}\n</code></pre>\n\n<p>Is it possible in Rust to make a macro for methods like this to generalize and avoid a lot of duplicating code? Something that we can use as the following:</p>\n\n<pre><code>impl Struct {\n    builder_field!(hello, bool);\n}     \n</code></pre>\n"}, {"tags": ["arrays", "rust"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 27, "last_activity_date": 1467442502, "creation_date": 1467442502, "answer_id": 38157410, "question_id": 38157335, "link": "https://stackoverflow.com/questions/38157335/what-does-mean-in-a-rust-format-string/38157410#38157410", "title": "What does {:?} mean in a Rust format string?", "body": "<p>This is explained (along with the rest of the formatting syntax) in the <a href=\"http://doc.rust-lang.org/std/fmt/index.html\"><code>std::fmt</code></a> documentation.</p>\n\n<p><code>{...}</code> surrounds all formatting directives.  <code>:</code> separates the name or ordinal of the thing being formatted (which in this case is <em>omitted</em>, and thus means \"the next thing\") from the formatting options.  The <code>?</code> is a formatting option that triggers the use of the <code>std::fmt::Debug</code> implementation of the thing being formatted, as opposed to the default <code>Display</code> trait, or one of the other traits (like <code>UpperHex</code> or <code>Octal</code>).</p>\n\n<p>Thus, <code>{:?}</code> formats the \"next\" value passed to a formatting macro, and supports anything that implements <code>Debug</code>.</p>\n"}], "owner": {"reputation": 2165, "user_id": 5460216, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/v3Z3y.png?s=128&g=1", "display_name": "7_R3X", "link": "https://stackoverflow.com/users/5460216/7-r3x"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3268, "favorite_count": 4, "accepted_answer_id": 38157410, "answer_count": 1, "score": 14, "last_activity_date": 1467552353, "creation_date": 1467441984, "last_edit_date": 1467552353, "question_id": 38157335, "link": "https://stackoverflow.com/questions/38157335/what-does-mean-in-a-rust-format-string", "title": "What does {:?} mean in a Rust format string?", "body": "<p>I found out that <code>{:?}</code> prints an entire array in Rust. I want to know what is it called and how exactly it works. Is it only limited to printing arrays or could it also be used elsewhere for other purposes?</p>\n"}, {"tags": ["c", "gcc", "rust", "dynamic-linking", "dlsym"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1467401277, "post_id": 38152638, "comment_id": 63734820, "body": "What are the Rust signature for <code>my_function</code>?"}, {"owner": {"reputation": 367, "user_id": 2230446, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iqBqb.jpg?s=128&g=1", "display_name": "Alex Lamson", "link": "https://stackoverflow.com/users/2230446/alex-lamson"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1467401687, "post_id": 38152638, "comment_id": 63734969, "body": "@malbarbo It&#39;s <code>pub extern &quot;C&quot; fn my_function(my_string: *const c_char) -&gt; *const c_char</code>"}], "answers": [{"tags": [], "owner": {"reputation": 367, "user_id": 2230446, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iqBqb.jpg?s=128&g=1", "display_name": "Alex Lamson", "link": "https://stackoverflow.com/users/2230446/alex-lamson"}, "is_accepted": true, "score": 0, "last_activity_date": 1467403471, "creation_date": 1467403471, "answer_id": 38153187, "question_id": 38152638, "link": "https://stackoverflow.com/questions/38152638/how-to-dynamically-load-a-rust-library-in-c/38153187#38153187", "title": "How to dynamically load a Rust library in C?", "body": "<p>I ran it through <code>gdb</code> and it turns out the library was trying to call a function in the calling program that didn't exist. </p>\n"}], "owner": {"reputation": 367, "user_id": 2230446, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iqBqb.jpg?s=128&g=1", "display_name": "Alex Lamson", "link": "https://stackoverflow.com/users/2230446/alex-lamson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 435, "favorite_count": 1, "accepted_answer_id": 38153187, "answer_count": 1, "score": 0, "last_activity_date": 1467403471, "creation_date": 1467400832, "question_id": 38152638, "link": "https://stackoverflow.com/questions/38152638/how-to-dynamically-load-a-rust-library-in-c", "title": "How to dynamically load a Rust library in C?", "body": "<p>I'm trying to dynamically link a Rust .so library with a C program in Linux with gcc. Using only <code>dlopen</code> and <code>dlclose</code> results in no errors, but I get a segmentation fault with the following code:</p>\n\n<pre><code>char * (*my_function)(char *);\nchar *my_input_string = \"foo\";\n\n//...abbreviated code...\n\nmy_function = dlsym(handle, \"my_function\");\nchar *my_output_string = (*my_function)(my_input_string);\n</code></pre>\n\n<p>I'm using <code>gcc -g foo.c -ldl -o foo</code> to compile, if that matters.</p>\n\n<p>I know that it's finding the symbol because I used <code>#[no_mangle]</code> in the rust library and the <code>my_function</code> pointer is not null</p>\n"}, {"tags": ["rust", "hyper"], "answers": [{"comments": [{"owner": {"reputation": 842, "user_id": 2585716, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Lx7Cy.png?s=128&g=1", "display_name": "Antonio Feitosa", "link": "https://stackoverflow.com/users/2585716/antonio-feitosa"}, "edited": false, "score": 2, "creation_date": 1541788493, "post_id": 38148283, "comment_id": 93349867, "body": "What about <code>&quot;hyper = 012.14&quot;</code>?"}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 13, "last_activity_date": 1467552085, "last_edit_date": 1467552085, "creation_date": 1467384341, "answer_id": 38148283, "question_id": 38148163, "link": "https://stackoverflow.com/questions/38148163/displaying-the-response-body-with-hyper-only-shows-the-size-of-the-body/38148283#38148283", "title": "Displaying the response body with Hyper only shows the size of the body", "body": "<p>You are reading the result of the <code>get</code> into <code>s</code> but you are printing the result of this function, which is the number of bytes read. <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"noreferrer\">See the documentation for <code>Read::read_to_string</code></a>.</p>\n\n<p>Thus the code which prints the retrieved content is:</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::client::Client;\nuse std::io::Read;\n\nfn main () {\n\n    let client = Client::new();\n    let mut s = String::new();\n\n    let res = client.get(\"https://www.reddit.com/r/programming/.rss\")\n                    .send()\n                    .unwrap()\n                    .read_to_string(&amp;mut s)\n                    .unwrap();\n\n    println!(\"Result: {}\", s);\n\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 362, "user_id": 6575507, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/e31ade8688aaab8e5ac3ccd6093d338b?s=128&d=identicon&r=PG&f=1", "display_name": "mmatous", "link": "https://stackoverflow.com/users/6575507/mmatous"}, "is_accepted": false, "score": 3, "last_activity_date": 1543869515, "last_edit_date": 1543869515, "creation_date": 1543868927, "answer_id": 53601371, "question_id": 38148163, "link": "https://stackoverflow.com/questions/38148163/displaying-the-response-body-with-hyper-only-shows-the-size-of-the-body/53601371#53601371", "title": "Displaying the response body with Hyper only shows the size of the body", "body": "<p>As of hyper 0.12, the following works, provided the webpage is valid UTF-8:</p>\n\n<pre><code>extern crate hyper;\nextern crate hyper_tls;\n\nuse hyper::Client;\nuse hyper::rt::{self, Future, Stream};\nuse hyper_tls::HttpsConnector;\n\nfn main() {\n    rt::run(rt::lazy(|| {\n        let https = HttpsConnector::new(4).unwrap();\n        let client = Client::builder().build::&lt;_, hyper::Body&gt;(https);\n\n        client.get(\"https://www.reddit.com/r/programming/.rss\".parse().unwrap())\n            .and_then(|res| {\n                println!(\"status {}\", res.status());\n                res.into_body().concat2()\n            }).map(|body| {\n                println!(\"Body {}\", String::from_utf8(body.to_vec()).unwrap());\n            })\n            .map_err(|err| {\n                println!(\"error {}\", err)\n            })\n    }));\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 796, "user_id": 959847, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/40d3fdc131dbfeae3a893a354bcbcf67?s=128&d=identicon&r=PG", "display_name": "euclio", "link": "https://stackoverflow.com/users/959847/euclio"}, "is_accepted": false, "score": 6, "last_activity_date": 1576860017, "creation_date": 1576860017, "answer_id": 59428663, "question_id": 38148163, "link": "https://stackoverflow.com/questions/38148163/displaying-the-response-body-with-hyper-only-shows-the-size-of-the-body/59428663#59428663", "title": "Displaying the response body with Hyper only shows the size of the body", "body": "<p>Here is how to print the response status and body using tokio 0.2, hyper 0.13, and async/await syntax.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::error::Error;\n\nuse hyper::body;\nuse hyper::{Body, Client, Response};\nuse hyper_tls::HttpsConnector;\nuse tokio;\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn Error + Send + Sync&gt;&gt; {\n    let https = HttpsConnector::new();\n    let client = Client::builder().build::&lt;_, Body&gt;(https);\n\n    let res = client\n        .get(\"https://www.reddit.com/r/programming/.rss\".parse().unwrap())\n        .await?;\n\n    println!(\"Status: {}\", res.status());\n\n    let body_bytes = body::to_bytes(res.into_body()).await?;\n    let body = String::from_utf8(body_bytes.to_vec()).expect(\"response was not valid utf-8\");\n    println!(\"Body: {}\", body);\n\n    Ok(())\n}\n</code></pre>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2820, "favorite_count": 0, "accepted_answer_id": 38148283, "answer_count": 3, "score": 6, "last_activity_date": 1576860017, "creation_date": 1467383989, "last_edit_date": 1467552034, "question_id": 38148163, "link": "https://stackoverflow.com/questions/38148163/displaying-the-response-body-with-hyper-only-shows-the-size-of-the-body", "title": "Displaying the response body with Hyper only shows the size of the body", "body": "<p>I tried to display the content (body) of an URL as text using Hyper</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::client::Client;\nuse std::io::Read;\n\nfn main () {\n\n    let client = Client::new();\n    let mut s = String::new();\n\n    let res = client.get(\"https://www.reddit.com/r/programming/.rss\")\n                    .send()\n                    .unwrap()\n                    .read_to_string(&amp;mut s)\n                    .unwrap();\n\n    println!(\"Result: {}\", res);\n\n}\n</code></pre>\n\n<p>But running this script just returns the size of the body:</p>\n\n<pre><code>Result: 22871\n</code></pre>\n\n<p>What did I do wrong? Did I misunderstood something?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467384175, "post_id": 38147757, "comment_id": 63726047, "body": "I still cannot understand what it means. The default clean up way by rust compiler is bad?"}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "reply_to_user": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467384537, "post_id": 38147757, "comment_id": 63726280, "body": "For each function call, the compiler needs to introduce some overhead for storing registers. (see <a href=\"https://en.wikibooks.org/wiki/X86_Disassembly/Functions_and_Stack_Frames\" rel=\"nofollow noreferrer\">en.wikibooks.org/wiki/X86_Disassembly/&hellip;</a> for example). This allocates memory on the stack. If it happens too often, the stack overflows: <a href=\"https://en.wikipedia.org/wiki/Stack_overflow\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Stack_overflow</a>"}, {"owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467384756, "post_id": 38147757, "comment_id": 63726426, "body": "Yes, I know the recursion function calls consume resources. But by default, the list and nodes has no associated destructor. It just release memory. So by default, no function call happens for destruction, isn&#39;t it? In fact, you could try to benchmark the list operations with and without explicit destructor, and you could see the default one (without destructor) has better performance. So that&#39;s why I ask for the reason to associate destructor to the list."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1467385056, "post_id": 38147757, "comment_id": 63726631, "body": "&quot;list and nodes has no associated destructor&quot; This is not a correct statement. They do have a destructor, namely, the one which calls <code>Drop</code> on the <code>Box</code> instance. Also, there is no &quot;just releasing memory&quot;; memory deallocation is still a function call."}, {"owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467385302, "post_id": 38147757, "comment_id": 63726787, "body": "The Box&lt;Node&gt; has destructor? provided by rust? But anyway, why when I remove the &quot;impl Drop for List&quot; and do some benchmark, it has better performance?"}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "edited": false, "score": 0, "creation_date": 1467385355, "post_id": 38147757, "comment_id": 63726821, "body": "The fact that there is no destructor in your code, does not mean, there is no destructor. There is always a default destructor which is automatically added by the compiler. It calls drop on self and then on the children, as the written out code in the article shows. See <a href=\"https://doc.rust-lang.org/nomicon/destructors.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nomicon/destructors.html</a>"}, {"owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "edited": false, "score": 0, "creation_date": 1467385590, "post_id": 38147757, "comment_id": 63726950, "body": "Then how to explain the benchmark result? (see my edit in my question) It&#39;s conflicted with what the author said &quot;The automatic handling is going to be bad.&quot;."}, {"owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "edited": false, "score": 0, "creation_date": 1467386333, "post_id": 38147757, "comment_id": 63727416, "body": "In my tests I get said stackoverflow. I added the example test in the answer."}], "tags": [], "owner": {"reputation": 978, "user_id": 6426219, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9qNtI.jpg?s=128&g=1", "display_name": "JDemler", "link": "https://stackoverflow.com/users/6426219/jdemler"}, "is_accepted": true, "score": 8, "last_activity_date": 1606858945, "last_edit_date": 1606858945, "creation_date": 1467382729, "answer_id": 38147757, "question_id": 38147453, "link": "https://stackoverflow.com/questions/38147453/do-we-need-to-manually-create-a-destructor-for-a-linked-list/38147757#38147757", "title": "Do we need to manually create a destructor for a linked list?", "body": "<p>You are correct. The list would clean itself up. As the author stated:</p>\n<blockquote>\n<p>All that's handled for us automatically... with one hitch.</p>\n</blockquote>\n<p>They then explain why the automatic handling is bad:\nThe automatic destruction process calls <code>drop</code> for the head of the list, which in turn calls <code>drop</code> for the first element. And so on and so on.</p>\n<p>This is a function calling a function calling a function (with infinite possible repetitions) which will blow up your stack sooner or later.</p>\n<p>This test causes such a stack overflow:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[test]\nfn build_really_big_stack() {\n    let mut stack = List::new();\n    for i in 0..1_000_000 {\n        stack.push(i);\n    }\n}\n</code></pre>\n<p>If you build with <code>--release</code> for both versions, it shows that they perform nearly equally:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[bench]\nfn bench_auto_destructor(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let mut list = List::new();\n        for i in 0..1000 {\n            list.push(i);\n        }\n        assert_eq!(list.pop(), Some(999));\n    });\n}\n\n#[bench]\nfn bench_man_destructor(b: &amp;mut Bencher) {\n    b.iter(|| {\n        let mut list = ManualDestructorList::new();\n        for i in 0..1000 {\n            list.push(i);\n        }\n        assert_eq!(list.pop(), Some(999));\n    });\n}\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>test bench_auto_destructor ... bench:      81,296 ns/iter (+/- 302)\ntest bench_man_destructor  ... bench:      85,756 ns/iter (+/- 164)\n</code></pre>\n<p>With only one element, like in your benchmarks:</p>\n<pre class=\"lang-none prettyprint-override\"><code>test bench_auto_destructor ... bench:          69 ns/iter (+/- 1)\ntest bench_man_destructor  ... bench:          67 ns/iter (+/- 2)\n</code></pre>\n<p>Read the article to the end, its explanation is better than mine.</p>\n"}, {"comments": [{"owner": {"reputation": 1229, "user_id": 548685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/beb83a43b70c848e989dd5b435501f5d?s=128&d=identicon&r=PG", "display_name": "Miere", "link": "https://stackoverflow.com/users/548685/miere"}, "edited": false, "score": 0, "creation_date": 1607570748, "post_id": 38150082, "comment_id": 115316829, "body": "I finally got to understand the reason behind the destructor in that example. I&#39;ve noticed an increasing number of blunt answers here in SO, most doesn&#39;t provide the foundation required to understand the problem as a whole and what led to its solutions. Thanks, mate."}], "tags": [], "owner": {"reputation": 5534, "user_id": 1484555, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/9ede0b6ed1e9d2f7037ff60242dd7561?s=128&d=identicon&r=PG", "display_name": "almel", "link": "https://stackoverflow.com/users/1484555/almel"}, "is_accepted": false, "score": 5, "last_activity_date": 1467390363, "creation_date": 1467390363, "answer_id": 38150082, "question_id": 38147453, "link": "https://stackoverflow.com/questions/38147453/do-we-need-to-manually-create-a-destructor-for-a-linked-list/38150082#38150082", "title": "Do we need to manually create a destructor for a linked list?", "body": "<p>The reason the author is making you implement your own drop for Link is that calling the destructor on the linked list is not <a href=\"https://stackoverflow.com/questions/33923/what-is-tail-recursion\">tail recursive</a>, and so if a very large <code>List</code> (i.e. a <code>List</code> whose node count is greater than the number of stack frames allowed by the Rust compiler) goes out of scope and is thus deallocated, then you'll get a stack overflow error when all those drop functions are called recursively. Go read the link I gave above to understand what tail recursion is, but replace the <code>recsum()</code> function with the <code>Link</code>'s <code>drop</code> function, and you'll understand why the author made you write your own destructor.</p>\n\n<p>Imagine a <code>List</code> with 1_000_000 <code>Node</code>'s. When that <code>List</code> gets deallocated your stack will look like</p>\n\n<pre><code>(Stack Frame #1) List.drop();    // all work is done in this frame, so no need to save stack frame\n(Stack Frame #2) self.ptr.drop(); self.ptr.deallocate(); // uh oh! stack frame must be preserved throughout all recursive calls because deallocate must be called after self.ptr.drop() returns\n(Stack Frame #3) self.ptr.drop(); self.ptr.deallocate();\n...\n(Stack Frame #1_000_000) self.ptr.drop(); self.ptr.deallocate(); // we'll never reach here, because a stack overflow error would have been occurred long ago\n</code></pre>\n"}], "owner": {"reputation": 1309, "user_id": 5055251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f45f990533303b61a6b335198be63a1b?s=128&d=identicon&r=PG&f=1", "display_name": "kingluo", "link": "https://stackoverflow.com/users/5055251/kingluo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 370, "favorite_count": 0, "accepted_answer_id": 38147757, "answer_count": 2, "score": 4, "last_activity_date": 1606858945, "creation_date": 1467381827, "last_edit_date": 1606858764, "question_id": 38147453, "link": "https://stackoverflow.com/questions/38147453/do-we-need-to-manually-create-a-destructor-for-a-linked-list", "title": "Do we need to manually create a destructor for a linked list?", "body": "<p>I'm reading <a href=\"http://cglab.ca/%7Eabeinges/blah/too-many-lists/book/README.html\" rel=\"nofollow noreferrer\"><em>Learning Rust With Entirely Too Many Linked Lists</em></a> and I'm confused about why the linked list (stack) <a href=\"http://cglab.ca/%7Eabeinges/blah/too-many-lists/book/first-drop.html\" rel=\"nofollow noreferrer\">needs a destructor</a>.</p>\n<p>I think when the list value is out of the scope, the list itself, and all nodes would be clean up. Is it just for demonstration?</p>\n<p>I benchmarked the version with and without a manual destructor and I found the &quot;without destructor&quot; one has better performance:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>for _ in 1..30000000 {\n    let mut list = List::new();\n    list.push(1);\n    assert_eq!(list.pop(), Some(1));\n}\n</code></pre>\n<p>With manual destructor:</p>\n<pre class=\"lang-none prettyprint-override\"><code>real    0m11.216s\nuser    0m11.192s\nsys     0m 0.020s\n</code></pre>\n<p>Without manual destructor:</p>\n<pre class=\"lang-none prettyprint-override\"><code>real    0m9.071s\nuser    0m9.044s\nsys     0m0.004s\n</code></pre>\n"}, {"tags": ["debugging", "rust", "debug-print"], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": false, "score": 8, "last_activity_date": 1467366861, "creation_date": 1467366861, "answer_id": 38142369, "question_id": 38141056, "link": "https://stackoverflow.com/questions/38141056/does-rust-have-a-debug-macro/38142369#38142369", "title": "Does Rust have a debug macro?", "body": "<p>You could define them yourself, but it would be simpler to use the <a href=\"https://crates.io/crates/log\"><code>log</code></a> crate, which defines several macros for various purposes (see <a href=\"https://doc.rust-lang.org/log/log/index.html\">the <code>log</code> documentation</a>).</p>\n\n<p>Note that the crate only provides the <em>frontend</em> for logging; you'll also need to select a backend.  There's a basic example in the <code>log</code> documentation, or you could use something like <a href=\"https://crates.io/crates/env_logger\"><code>env_logger</code></a> or <a href=\"https://crates.io/crates/log4rs\"><code>log4rs</code></a>.</p>\n"}, {"comments": [{"owner": {"reputation": 721, "user_id": 503585, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/XKZml.jpg?s=128&g=1", "display_name": "CJ McAllister", "link": "https://stackoverflow.com/users/503585/cj-mcallister"}, "edited": false, "score": 6, "creation_date": 1512510416, "post_id": 38150040, "comment_id": 82285588, "body": "This can be a little more concise by piggybacking off of the existing <code>debug_assertions</code> attribute that controls macros such as <code>debug_assert!</code>.  Just change the <code>#[cfg(feature = &quot;my_debug&quot;)]</code> bits to <code>#[cfg(debug_assertions)]</code> and drop the change to <code>Cargo.toml</code>. This way the debug code is automatically ignored for release builds!"}, {"owner": {"reputation": 541, "user_id": 577976, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dff291f55204a19c52013c5d38b336ab?s=128&d=identicon&r=PG", "display_name": "MappaM", "link": "https://stackoverflow.com/users/577976/mappam"}, "edited": false, "score": 0, "creation_date": 1613726253, "post_id": 38150040, "comment_id": 117170206, "body": "Nowadays this gives &quot;error: macros that expand to items must be delimited with braces or followed by a semicolon&quot;"}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 7, "last_activity_date": 1476261464, "last_edit_date": 1476261464, "creation_date": 1467390237, "answer_id": 38150040, "question_id": 38141056, "link": "https://stackoverflow.com/questions/38141056/does-rust-have-a-debug-macro/38150040#38150040", "title": "Does Rust have a debug macro?", "body": "<p>Although it makes sense to use something like the <code>log</code> crate as mentioned in DK's answer, here's how to do the direct equivalent of what you asked:</p>\n\n<pre><code>// The debug version\n#[cfg(feature = \"my_debug\")]\nmacro_rules! debug_print {\n    ($( $args:expr ),*) =&gt; { println!( $( $args ),* ); }\n}\n\n// Non-debug version\n#[cfg(not(feature = \"my_debug\"))]\nmacro_rules! debug_print {\n    ($( $args:expr ),*) =&gt; {}\n}\n\nfn main() {\n    debug_print!(\"Debug only {}\", 123);\n}\n</code></pre>\n\n<p>And in your <code>Cargo.toml</code>, add a <code>[features]</code> section:</p>\n\n<pre><code>[features]\nmy_debug = []\n</code></pre>\n\n<p>The output then appears with <code>cargo run --features my_debug</code>, and doesn't with a plain <code>cargo run</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 541, "user_id": 577976, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/dff291f55204a19c52013c5d38b336ab?s=128&d=identicon&r=PG", "display_name": "MappaM", "link": "https://stackoverflow.com/users/577976/mappam"}, "edited": false, "score": 1, "creation_date": 1613726815, "post_id": 54431057, "comment_id": 117170481, "body": "I&#39;ve got rust 1.50 but even compiling with &#39;cargo build --release&#39; I get the output? How to disable it in release mode?"}], "tags": [], "owner": {"reputation": 325, "user_id": 10067591, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/AzqYZ.png?s=128&g=1", "display_name": "ObliqueMotion", "link": "https://stackoverflow.com/users/10067591/obliquemotion"}, "is_accepted": false, "score": 22, "last_activity_date": 1551374165, "last_edit_date": 1551374165, "creation_date": 1548803714, "answer_id": 54431057, "question_id": 38141056, "link": "https://stackoverflow.com/questions/38141056/does-rust-have-a-debug-macro/54431057#54431057", "title": "Does Rust have a debug macro?", "body": "<h1>Rust 1.32.0</h1>\n\n<p><a href=\"https://blog.rust-lang.org/2019/01/17/Rust-1.32.0.html\" rel=\"noreferrer\">Rust 1.32.0</a> stabilized the <a href=\"https://doc.rust-lang.org/std/macro.dbg.html\" rel=\"noreferrer\"><code>dbg!()</code></a> macro, which outputs:</p>\n\n<ul>\n<li>The file name on which the macro was called.</li>\n<li>The line number on which the macro was called.</li>\n<li>A pretty print of the argument (which must implement the <a href=\"https://doc.rust-lang.org/std/fmt/trait.Debug.html\" rel=\"noreferrer\"><code>Debug</code></a> trait).</li>\n</ul>\n\n<p><strong>Note:</strong> <code>dbg!()</code> moves its argument, so you may want to pass non-copy types by reference. </p>\n\n<h3>Example: Array of Points (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7d63bc7d31497295c7f4abadf622e2c1\" rel=\"noreferrer\">Playground</a>)</h3>\n\n<pre><code>#[derive(Debug)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let points = [\n        Point { x: 0, y: 0 },\n        Point { x: 2, y: 3 },\n        Point { x: 5, y: 7 },\n    ];\n\n    dbg!(&amp;points);\n}\n</code></pre>\n\n<p><strong>Program Output</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[src/main.rs:14] &amp;points = [\n    Point {\n        x: 0,\n        y: 0\n    },\n    Point {\n        x: 2,\n        y: 3\n    },\n    Point {\n        x: 5,\n        y: 7\n    }\n]\n</code></pre>\n\n<h3>Example: Conditional Compilation (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2de72998b52d70177e40b45605544b6f\" rel=\"noreferrer\">Playground</a>)</h3>\n\n<p>The OP expressed a desire to display the debug content only when compiling in debug mode.   </p>\n\n<p>The following is a way to achieve this:</p>\n\n<pre><code>#[cfg(debug_assertions)]\nmacro_rules! debug {\n    ($x:expr) =&gt; { dbg!($x) }\n}\n\n#[cfg(not(debug_assertions))]\nmacro_rules! debug {\n    ($x:expr) =&gt; { std::convert::identity($x) }\n}\n\nfn main() {\n    let x = 4;\n    debug!(x);\n    if debug!(x == 5) {\n        println!(\"x == 5\");\n    } else {\n        println!(\"x != 5\");\n    }\n}\n</code></pre>\n\n<p><strong>Program Output (Debug Mode)</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>---------------------Standard Error-----------------------\n\n[src/main.rs:13] x = 4\n[src/main.rs:14] x == 5 = false\n\n---------------------Standard Output----------------------\n\nx != 5\n</code></pre>\n\n<p><strong>Program Output (Release Mode)</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>---------------------Standard Output----------------------\n\nx != 5\n</code></pre>\n\n<h1>Before Rust 1.32.0</h1>\n\n<p>You could <a href=\"https://stackoverflow.com/a/38142369/10067591\">use the log crate</a> or you could <a href=\"https://stackoverflow.com/a/38150040/10067591\">define one yourself</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 2853, "user_id": 3062525, "user_type": "registered", "profile_image": "https://graph.facebook.com/1114414642001809/picture?type=large", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432", "link": "https://stackoverflow.com/users/3062525/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%92%d0%b0%d1%81%d0%b8%d0%bb%d1%8c%d0%b5%d0%b2"}, "is_accepted": false, "score": 1, "last_activity_date": 1568632448, "last_edit_date": 1568632448, "creation_date": 1568630345, "answer_id": 57955092, "question_id": 38141056, "link": "https://stackoverflow.com/questions/38141056/does-rust-have-a-debug-macro/57955092#57955092", "title": "Does Rust have a debug macro?", "body": "<p>Macro based on Chris Emerson answer and CJ McAllister comment</p>\n\n<pre><code>// Disable warnings\n\n#[allow(unused_macros)]\n\n// The debug version\n\n#[cfg(debug_assertions)]\nmacro_rules! log {\n    ($( $args:expr ),*) =&gt; { println!( $( $args ),* ); }\n}\n\n// Non-debug version\n\n#[cfg(not(debug_assertions))]\nmacro_rules! log {\n    ($( $args:expr ),*) =&gt; {()}\n}\n</code></pre>\n\n<p>Using</p>\n\n<pre><code>log!(\"Don't be crazy\");\nlog!(\"Answer is {}\", 42);\n\n</code></pre>\n\n<p>Building by <code>cargo build --release</code> will replace all <code>log!(...)</code> with unit tuple <code>();</code></p>\n\n<p>I didn't found the way to replace to nothing but I think compiler will do it.</p>\n"}], "owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5878, "favorite_count": 4, "accepted_answer_id": 38150040, "answer_count": 4, "score": 10, "last_activity_date": 1568632448, "creation_date": 1467363123, "last_edit_date": 1548814636, "question_id": 38141056, "link": "https://stackoverflow.com/questions/38141056/does-rust-have-a-debug-macro", "title": "Does Rust have a debug macro?", "body": "<p>In C++, I use something like this <code>DEBUG</code> macro:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#ifdef DEBUG\n#define DEBUG_STDERR(x) (std::cerr &lt;&lt; (x))\n#define DEBUG_STDOUT(x) (std::cout &lt;&lt; (x))\n#else \n#define DEBUG_STDERR(x)\n#define DEBUG_STDOUT(x)\n#endif\n</code></pre>\n\n<p>Does Rust have something similar?</p>\n"}, {"tags": ["multithreading", "server", "concurrency", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467358285, "post_id": 38135706, "comment_id": 63709248, "body": "Have you tried using a <code>Arc&lt;Mutex&lt;...&gt;&gt;</code> ?"}, {"owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467378049, "post_id": 38135706, "comment_id": 63721692, "body": "No, because I think that I will got problems using <code>Mutex</code>, especially because no one of my module will access to a field that is already by a module. Each module has it own field in <code>Data</code> - so give <code>Mutex</code> to <code>Arc</code> will block uselessly my struct right...?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467380590, "post_id": 38135706, "comment_id": 63723569, "body": "It only blocks while processing, but you can perfectly do it with more granularity :)"}, {"owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467381090, "post_id": 38135706, "comment_id": 63723918, "body": "Ok, I will try it, thank you :-) I will post the solution in if it works."}, {"owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467382094, "post_id": 38135706, "comment_id": 63724634, "body": "Ok so, I tried to use <code>Mutex</code> with <code>Arc</code> and it seems working! Next level: granularity... Thanks a lot again ;-)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467385972, "post_id": 38135706, "comment_id": 63727193, "body": "To increase granularity, if <code>logs</code>, <code>measures</code> and <code>statements</code> can be updated independently, you can use one <code>Mutex</code> for each of them."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 0, "last_activity_date": 1467381755, "creation_date": 1467381755, "answer_id": 38147427, "question_id": 38135706, "link": "https://stackoverflow.com/questions/38135706/how-do-i-create-a-structure-that-can-be-used-in-a-rust-multithreaded-server/38147427#38147427", "title": "How do I create a structure that can be used in a Rust multithreaded server?", "body": "<p>The insight of Rust is that memory safety is achieved by enforcing <strong>Aliasing XOR Mutability</strong>.</p>\n\n<p>Enforcing this single principle prevents whole classes of bugs: <em>pointer/iterator invalidation</em> (which was the goal) and also <em>data races</em>.</p>\n\n<hr>\n\n<p>As much as possible, Rust will try to enforce this principle at compile-time; however it can also enforce it at run-time if the user opts in by using dedicated types/methods.</p>\n\n<p><code>Arc::get_mut</code> is such a method. An <code>Arc</code> (Atomic Reference Counted pointer) is specifically meant to share a reference between multiple owners, which means aliasing, and as a result disallows mutability by default; <code>Arc::get_mut</code> will perform a run-time check: if the pointer is actually not alias (count of 1), then it allows mutability.</p>\n\n<p>However, as you realized, this is not suitable in your case since the <code>Arc</code> is aliased at that point in time.</p>\n\n<hr>\n\n<p>So you need to turn to other types.</p>\n\n<p>The simplest solution is <code>Arc&lt;Mutex&lt;...&gt;&gt;</code>, <code>Arc</code> allows sharing, <code>Mutex</code> allows controlled mutability, together you can share with run-time controlled mutability enforced by the <code>Mutex</code>.</p>\n\n<p>This is coarse-grained, but might very well be sufficient.</p>\n\n<p>More sophisticated approaches can use <code>RwLock</code> (Reader-Writer lock), more granular <code>Mutex</code> or even atomics; but I would advise starting with a single <code>Mutex</code> and see how it goes, you have to walk before you run.</p>\n"}], "owner": {"reputation": 49, "user_id": 5106547, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ace690d3cfd76bc43694c6c6b8577cea?s=128&d=identicon&r=PG", "display_name": "WebTogz", "link": "https://stackoverflow.com/users/5106547/webtogz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 226, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1603219747, "creation_date": 1467336658, "last_edit_date": 1603219747, "question_id": 38135706, "link": "https://stackoverflow.com/questions/38135706/how-do-i-create-a-structure-that-can-be-used-in-a-rust-multithreaded-server", "title": "How do I create a structure that can be used in a Rust multithreaded server?", "body": "<p>I want to implement a simple server, used by 3 different module of my project.<br>\nThese modules will send data to the server, which will save it into a file and merge these informations when these modules will finish their job.\nAll these informations have a timestamp (a float) and a label (a float or a string).</p>\n\n<p>This is my data structure to save these informations:</p>\n\n<pre><code>pub struct Data {\n    file_name: String,\n    logs: Vec&lt;(f32, String)&gt;,\n    measures: Vec&lt;(f32, f32)&gt;,\n    statements: Vec&lt;(f32, String)&gt;,\n}\n</code></pre>\n\n<p>I use <code>socket</code> to interact with the server.</p>\n\n<p>I use also <code>Arc</code>\u00a0to implement a <code>Data</code> struct and make it shareable for each of these modules.<br>\nSo, when I handle the client, I verify if the message sent by the module is correct, and if it is I call a new function that process and save the message in the good data structure field (<code>logs</code>,  <code>measures</code> or <code>statements</code>).</p>\n\n<pre><code>// Current ip address\nlet ip_addr: &amp;str = &amp;format!(\"{}:{}\",\n                             &amp;ip,\n                             port);\n\n// Bind the current IP address\nlet listener = match TcpListener::bind(ip_addr) {\n    Ok(listener) =&gt; listener,\n    Err(error) =&gt; panic!(\"Canno't bind {}, due to error {}\",\n                         ip_addr,\n                         error),\n};\n\nlet global_data_struct = Data::new(DEFAULT_FILE.to_string());\nlet global_data_struct_shared = Arc::new(global_data_struct);\n\n// Get and process streams\nfor stream in listener.incoming() {\n    let mut global_data_struct_shared_clone = global_data_struct_shared.clone();\n    thread::spawn(move || {\n        // Borrow stream\n        let stream = stream;\n        match stream {\n            // Get the stream value\n            Ok(mut stream_v) =&gt; {\n                let current_ip = stream_v.peer_addr().unwrap().ip();\n                let current_port = stream_v.peer_addr().unwrap().port();\n                println!(\"Connected with peer {}:{}\", current_ip, current_port);\n                // PROBLEM IN handle_client!\n                // A get_mut from global_data_struct_shared_clone\n                // returns to me None, not a value - so I\n                // can't access to global_data_struct_shared_clone\n                // fields :'(\n                handle_client(&amp;mut stream_v, &amp;mut global_data_struct_shared_clone);\n            },\n            Err(_) =&gt; error!(\"Canno't decode stream\"),\n        }\n    });\n}\n\n// Stop listening\ndrop(listener);\n</code></pre>\n\n<p>I have some problems to get a mutable reference in <code>handle_client</code> to process fields in <code>global_data_struct_shared_clone</code>, because the <code>Arc::get_mut(global_data_struct_shared_clone)</code>\u00a0returns to me <code>None</code> - due to the <code>global_data_struct_shared.clone()</code> for each incoming request.</p>\n\n<p>Can someone help me to manage correctly this structure between these 3 modules please?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1492105590, "post_id": 38134158, "comment_id": 73858042, "body": "For future visitors: (especially the title of) this question is very much related to <a href=\"http://stackoverflow.com/questions/25818082/vector-of-objects-belonging-to-a-trait\">this question</a>."}], "answers": [{"comments": [{"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1468081188, "post_id": 38134793, "comment_id": 63986207, "body": "Thanks! I don&#39;t think I would <i>ever</i> have got to that from the error messages, or all the books I&#39;ve read/Am reading. I&#39;ve found them all a bit vague on the static vs. const thing, and I wouldn&#39;t have thought to use const for an initialized structure like that....as all the examples switch to static for non primitives (i32 etc)."}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1468163984, "post_id": 38134793, "comment_id": 64003867, "body": "Any ideas on how I can make a &quot;SampleRunner + &#39;static&quot; able to be shared across threads? note: <code>SampleRunner + &#39;static</code> cannot be shared between threads safely. How to implement &quot;Sync&quot; on it?"}, {"owner": {"reputation": 24454, "user_id": 5108418, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/AN6Pg.png?s=128&g=1", "display_name": "Tamas Hegedus", "link": "https://stackoverflow.com/users/5108418/tamas-hegedus"}, "reply_to_user": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1468225236, "post_id": 38134793, "comment_id": 64020889, "body": "@AndrewMackenzie see <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>"}, {"owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "edited": false, "score": 0, "creation_date": 1468593995, "post_id": 38134793, "comment_id": 64206361, "body": "My goal was to avoid the need for any run-time like RefCell, as everything is static/const and read-only, so it should be sharable across threads as-is."}], "tags": [], "owner": {"reputation": 24454, "user_id": 5108418, "user_type": "registered", "accept_rate": 72, "profile_image": "https://i.stack.imgur.com/AN6Pg.png?s=128&g=1", "display_name": "Tamas Hegedus", "link": "https://stackoverflow.com/users/5108418/tamas-hegedus"}, "is_accepted": true, "score": 1, "last_activity_date": 1467329632, "last_edit_date": 1467329632, "creation_date": 1467329054, "answer_id": 38134793, "question_id": 38134158, "link": "https://stackoverflow.com/questions/38134158/create-vector-of-objects-implementing-a-trait-in-rust/38134793#38134793", "title": "Create vector of objects implementing a trait in Rust", "body": "<p>There are two little errors in the code. The first is described by the error, it tells us that the static value is not safe as it does not implement the Sync trait. It just tries to prepare for the case when the static value is manipulated from multiple threads. Here, the best solution is simply to mark the value as <code>const</code>. After that, there is some problem with the lifetime of <code>&amp;SAMPLE1</code> in main, can be solved by \"using the let keyword to increase it's lifetime\".</p>\n\n<p>The code after these little modifications compiles, and looks like this:</p>\n\n<pre><code>use std::io::{Result};\n\npub struct SampleResult {\n    metric: String\n}\n\npub trait SampleRunner {\n    fn run(&amp;self, &amp;'static str) -&gt; Result&lt;SampleResult&gt;;\n}\n\npub struct Sample {\n    name: &amp;'static str,\n    runner: &amp;'static SampleRunner\n}\n\n// Make it const\nconst SAMPLE1: Sample = Sample { name: \"sample\", runner: &amp;Sample1 };\n\nstruct Sample1;\n\nimpl SampleRunner for Sample1 {\n    fn run(&amp;self, name: &amp;'static str) -&gt; Result&lt;SampleResult&gt; {\n        println!(\"Name: {}\", name);\n        Ok(SampleResult {metric: \"OK\".to_string() })\n    }\n}\n\nfn main() {\n    // Extend the lifetime of the borrow by assigning it to a scope variable\n    let borrowed_sample1 : &amp;Sample = &amp;SAMPLE1;\n    let sample_set: Vec&lt;&amp;Sample&gt; = vec!(borrowed_sample1);\n\n    for sample in sample_set.iter() {\n        match sample.runner.run(sample.name) {\n        Ok(result) =&gt; println!(\"Success\"),\n        _ =&gt; panic!(\"failed\")\n        }\n    }\n}\n</code></pre>\n\n<p>However, I see that you are not satisfied with the code as you have to create a new struct for every implementation of <code>SampleRunner</code>. There is another way, using lambda functions (the Rust docs just refers to them as <a href=\"https://doc.rust-lang.org/book/closures.html\" rel=\"nofollow\">Closures</a>).</p>\n\n<pre><code>use std::io::{Result};\n\npub struct SampleResult {\n    metric: String\n}\n\ntype SampleRunner = Fn(&amp;'static str) -&gt; Result&lt;SampleResult&gt;;\n\npub struct Sample {\n    name: &amp;'static str,\n    runner: &amp;'static SampleRunner\n}\n\n// Still const, use a lambda as runner    \nconst SAMPLE1: Sample = Sample { name: \"sample\", runner: &amp;|name| {\n  println!(\"Name: {}\", name);\n  Ok(SampleResult {metric: \"OK\".to_string() })\n} };\n\nfn main() {\n    let borrowed_sample1 : &amp;Sample = &amp;SAMPLE1;\n    let sample_set: Vec&lt;&amp;Sample&gt; = vec!(borrowed_sample1);\n\n    for sample in sample_set.iter() {\n        // Must parenthese sample.runner so rust knows its a field not a method\n        match (sample.runner)(sample.name) {\n        Ok(result) =&gt; println!(\"Success\"),\n        _ =&gt; panic!(\"failed\")\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 5005, "user_id": 573149, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/Wn0FW.jpg?s=128&g=1", "display_name": "Andrew Mackenzie", "link": "https://stackoverflow.com/users/573149/andrew-mackenzie"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2180, "favorite_count": 0, "accepted_answer_id": 38134793, "answer_count": 1, "score": 0, "last_activity_date": 1492105558, "creation_date": 1467325173, "last_edit_date": 1492105558, "question_id": 38134158, "link": "https://stackoverflow.com/questions/38134158/create-vector-of-objects-implementing-a-trait-in-rust", "title": "Create vector of objects implementing a trait in Rust", "body": "<p>In Java-speak, I am trying to create a collection (vector) of objects (strict instances), each one of which implements an interface (trait), so I can then iterate over the collection and call a method on all of them.</p>\n\n<p>I have reduced it down to one sample file below which contains all the parts that I hope will make it easier to get answers.</p>\n\n<pre><code>// main.rs - try and compile using just \"rustc main.rs\"\nuse std::io::Result;\n\n/// ////// Part 1\n// Types used by implementors of the trait, and in creating a vector of implementors of the trai\npub struct SampleResult {\n    metric: String,\n}\n\npub trait SampleRunner {\n    fn run(&amp;self, &amp;'static str) -&gt; Result&lt;SampleResult&gt;;\n}\n\npub struct Sample {\n    name: &amp;'static str,\n    runner: &amp;'static SampleRunner,\n}\n\n/// /////// Part 2\n/// Create one specific static instance of such as Sample\nstatic SAMPLE1: Sample = Sample {\n    name: \"sample\",\n    runner: &amp;Sample1,\n};\n\n// need a struct to hold the run method to satisfy the trait???\nstruct Sample1;\n\n// Implement the trait for this specific struct\nimpl SampleRunner for Sample1 {\n    fn run(&amp;self, name: &amp;'static str) -&gt; Result&lt;SampleResult&gt; {\n        println!(\"Name: {}\", name);\n        Ok(SampleResult { metric: \"OK\".to_string() })\n    }\n}\n\n/// /////// Part 3\n/// Using the existing static instances of Sample struct, by creating a vector of references for them\n/// then iterating over the vector and calling the trait method on each one\nfn main() {\n    let sample_set: Vec&lt;&amp;Sample&gt; = vec![&amp;SAMPLE1];\n\n    for sample in sample_set.iter() {\n        match sample.runner.run(sample.name) {\n            Ok(result) =&gt; println!(\"Success\"),\n            _ =&gt; panic!(\"failed\"),\n        }\n    }\n}\n</code></pre>\n\n<p>That particular example fails with the message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `SampleRunner + 'static: std::marker::Sync` is not satisfied in `Sample`\n  --&gt; &lt;anon&gt;:21:1\n   |\n21 |   static SAMPLE1: Sample = Sample {\n   |  _^ starting here...\n22 | |     name: \"sample\",\n23 | |     runner: &amp;Sample1,\n24 | | };\n   | |__^ ...ending here: within `Sample`, the trait `std::marker::Sync` is not implemented for `SampleRunner + 'static`\n   |\n   = note: `SampleRunner + 'static` cannot be shared between threads safely\n   = note: required because it appears within the type `&amp;'static SampleRunner + 'static`\n   = note: required because it appears within the type `Sample`\n   = note: shared static variables must have a type that implements `Sync`\n</code></pre>\n\n<p>But I have had many different problems depending on the approach I have taken, related to <code>Sync</code>, <code>Sized</code>, etc etc.</p>\n"}, {"tags": ["rust", "inference", "collect"], "answers": [{"comments": [{"owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 0, "creation_date": 1467317506, "post_id": 38131912, "comment_id": 63695995, "body": "Good suggestion with fold - first I wasnt sure if I should use map or fold...but fold is actually the best solution for this because of the aggregator...stupid me :("}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "edited": false, "score": 1, "creation_date": 1467353749, "post_id": 38131912, "comment_id": 63706834, "body": "@xetra11: if you do not use the result of <code>collect</code>, then you should look for another way to consume the iterator. <code>for char in string</code> is another possibility, and quite more lightweight than this <code>drain</code> + <code>map</code> + <code>collect</code>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467353809, "post_id": 38131912, "comment_id": 63706865, "body": "I would note that <code>drain</code> is useless here, and mutating the <code>String</code> is useless too. <code>fn resolve_score(string: &amp;str) -&gt; u16</code> is quite sufficient."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 6, "last_activity_date": 1467506086, "last_edit_date": 1495542776, "creation_date": 1467315744, "answer_id": 38131912, "question_id": 38131661, "link": "https://stackoverflow.com/questions/38131661/trying-to-drain-a-string-and-map-on-its-chars-but-failing-because-of-type-infere/38131912#38131912", "title": "Trying to drain a string and map on its chars but failing because of type inference", "body": "<p>You should use <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html?search=#method.fold\" rel=\"nofollow noreferrer\"><code>Iterator::fold</code></a> instead of <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html?search=#method.collect\" rel=\"nofollow noreferrer\"><code>Iterator::collect</code></a>:</p>\n\n<pre><code>fn resolve_score(string: String) -&gt; u16 {\n    string.chars().fold(0, |mut score, char| {\n        match char {\n            'a' =&gt; score += 1,\n            'f' =&gt; score += 4,\n            _ =&gt; (),\n        }\n        score\n    })\n}\n</code></pre>\n\n<p>The <code>Iterator::collect</code> docs say:</p>\n\n<blockquote>\n  <p>Transforms an iterator into a collection.</p>\n</blockquote>\n\n<p>and <code>Iterator::fold</code>:</p>\n\n<blockquote>\n  <p>An iterator adaptor that applies a function, producing a single, final value.</p>\n</blockquote>\n\n<p>In your code you are interested in producing a single final value (<code>score</code>), not a collection, so <code>fold</code> is more appropriate.</p>\n\n<p><em>Observation</em>: your function takes the ownership of the string, so using <code>drain</code> makes no difference because the string will be dropped anyway (thanks for the comment <a href=\"https://stackoverflow.com/users/147192/matthieu-m\">Matthieu M</a>). If your intention is to consume the string, making it empty, but not take the ownership, you can declare the function like this:</p>\n\n<pre><code>fn resolve_score(string: &amp;mut String) -&gt; u16\n</code></pre>\n\n<p>and use <code>drain</code>, so the string will be empty after the function returns. If the string does not need to be consumed, you can receive a <code>&amp;str</code> parameter:</p>\n\n<pre><code>fn resolve_score(string: &amp;str) -&gt; u16   \n</code></pre>\n\n<hr>\n\n<p>Also note that <code>collect</code> failed because it was not possible to infer which collection to produce. You could have written:</p>\n\n<pre><code>fn resolve_score(string: String) -&gt; u16 {\n    let mut score: u16 = 0;\n    string.chars()\n        .map(|char| {\n            match char {\n                'a' =&gt; score += 1,\n                'f' =&gt; score += 4,\n                _ =&gt; (),\n            };\n        })\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n    score\n}\n</code></pre>\n\n<p>but this would be weird because you would not use the resulting collection (of empty values).</p>\n"}], "owner": {"reputation": 4354, "user_id": 5967828, "user_type": "registered", "accept_rate": 65, "profile_image": "https://i.stack.imgur.com/fJ7P2.jpg?s=128&g=1", "display_name": "xetra11", "link": "https://stackoverflow.com/users/5967828/xetra11"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1182, "favorite_count": 0, "accepted_answer_id": 38131912, "answer_count": 1, "score": 1, "last_activity_date": 1467506086, "creation_date": 1467314662, "last_edit_date": 1467315936, "question_id": 38131661, "link": "https://stackoverflow.com/questions/38131661/trying-to-drain-a-string-and-map-on-its-chars-but-failing-because-of-type-infere", "title": "Trying to drain a string and map on its chars but failing because of type inference", "body": "<p>This code (<a href=\"https://play.rust-lang.org/?gist=099357d062b383b26269460e12fa8a08&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>fn resolve_score(string: String) -&gt; u16 {\n    let mut score: u16;\n    string\n        .drain(..)\n        .map(|char| {\n            match char {\n                'a' =&gt; score += 1,\n                'f' =&gt; score += 4,\n                _ =&gt; ()\n            };\n        })\n        .collect();\n}\n</code></pre>\n\n<p>generates this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>&lt;anon&gt;:16:14: 16:21 error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]\n&lt;anon&gt;:16             .collect();\n                       ^~~~~~~\n&lt;anon&gt;:16:14: 16:21 help: see the detailed explanation for E0282\nerror: aborting due to previous error\n</code></pre>\n\n<p>How can I fix this?</p>\n"}, {"tags": ["enums", "rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1467291744, "post_id": 38123761, "comment_id": 63679136, "body": "Sounds like missing functionality..."}], "answers": [{"comments": [{"owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 0, "creation_date": 1467302848, "post_id": 38126997, "comment_id": 63687819, "body": "whoa ! Never could have guessed that - i gave up when <code>C::X</code> failed. But the fact it works this way (while not the other way) seems a bit of an  obfuscation, no ? Nonetheless it solves my issue of typing template parameters everywhere so thanks !"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "edited": false, "score": 3, "creation_date": 1467304210, "post_id": 38126997, "comment_id": 63688705, "body": "@ustulation I <i>believe</i> the thing is that <code>A</code> the <i>type</i> and <code>A</code> the <i>namespace</i> are different things as far as the compiler knows.  <code>type</code> takes care of the former, not the latter.  Not a great state of affairs, but them&#39;s the breaks.  I&#39;d expect it to get improved at <i>some</i> point."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1467299123, "creation_date": 1467299123, "answer_id": 38126997, "question_id": 38123761, "link": "https://stackoverflow.com/questions/38123761/unable-to-type-alias-a-specialised-generic-enum/38126997#38126997", "title": "Unable to type alias a specialised generic enum", "body": "<blockquote>\n  <p>Is there a way around it (because typing the whole thing seems to be cumbersome)?</p>\n</blockquote>\n\n<p>You can specify <code>C</code> as the type of the variable so you can use <code>A::X</code> or <code>A::Y</code> without explicit specifying the type parameter:</p>\n\n<pre><code>let val0: C = A::X;\nlet val1: C = A::Y(B);\n</code></pre>\n"}], "owner": {"reputation": 3029, "user_id": 1060004, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/ZOBMa.jpg?s=128&g=1", "display_name": "ustulation", "link": "https://stackoverflow.com/users/1060004/ustulation"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 207, "favorite_count": 0, "accepted_answer_id": 38126997, "answer_count": 1, "score": 6, "last_activity_date": 1467299123, "creation_date": 1467291307, "question_id": 38123761, "link": "https://stackoverflow.com/questions/38123761/unable-to-type-alias-a-specialised-generic-enum", "title": "Unable to type alias a specialised generic enum", "body": "<p>Given the following:</p>\n\n<pre><code>use std::fmt::Debug;\n\n#[derive(Debug)]\nenum A&lt;T: Debug&gt; {\n    X,\n    Y(T),\n}\n\n#[derive(Debug)]\nstruct B;\n\ntype C = A&lt;B&gt;;\n// use A&lt;B&gt; as C; // Does not compile\n</code></pre>\n\n<p>I can use it as:</p>\n\n<pre><code>fn main() {\n    let val0 = A::X::&lt;B&gt;;\n    let val1 = A::Y::&lt;B&gt;(B);\n    println!(\"{:?}\\t{:?}\", val0, val1);\n}\n</code></pre>\n\n<p>But then for more than one generic parameter (or if <code>A</code>, <code>B</code> etc were much longer names then to alias it I tried the following but it doesn't compile:</p>\n\n<pre><code>fn main() {\n    let val0 = C::X;\n    let val1 = C::Y(B);\n    println!(\"{:?}\\t{:?}\", val0, val1);\n}\n</code></pre>\n\n<p>with errors:</p>\n\n<pre><code>src/main.rs:656:16: 656:20 error: no associated item named `X` found for type `A&lt;B&gt;` in the current scope\nsrc/main.rs:656     let val0 = C::X;\n                               ^~~~\nsrc/main.rs:657:16: 657:20 error: no associated item named `Y` found for type `A&lt;B&gt;` in the current scope\nsrc/main.rs:657     let val1 = C::Y(B);\n</code></pre>\n\n<p>As also noted i am unable to use <code>use</code> to solve the problem. Is there a way around it (because typing the whole thing seems to be cumbersome) ?</p>\n\n<pre><code>rustc --version\nrustc 1.9.0 (e4e8b6668 2016-05-18)\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 3, "creation_date": 1467285419, "post_id": 38121035, "comment_id": 63674686, "body": "Does this recent article help?  <a href=\"http://xion.io/post/code/rust-patterns-ref.html\" rel=\"nofollow noreferrer\">xion.io/post/code/rust-patterns-ref.html</a>"}], "answers": [{"comments": [{"owner": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "edited": false, "score": 0, "creation_date": 1467290003, "post_id": 38122164, "comment_id": 63677876, "body": "Just for completion, can you talk about why using <code>&amp;mut</code> instead of <code>ref mut</code> gives an error?"}, {"owner": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "edited": false, "score": 0, "creation_date": 1467299794, "post_id": 38122164, "comment_id": 63685592, "body": "That doesn&#39;t sound right. I first thing I tried was <code>let &amp;mut local = &amp;mut self.foo</code> and it <i>didn&#39;t</i> work. The compiler says I can&#39;t move out of borrowed content. It makes sense now, but I just wanted it mentioned in your answer because it confused me initially."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "edited": false, "score": 0, "creation_date": 1467300904, "post_id": 38122164, "comment_id": 63686512, "body": "I used type <code>u32</code> in my examples. It is <b>copyable</b> type. Apparently you used some <b>non-copyable</b> data type"}, {"owner": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "edited": false, "score": 0, "creation_date": 1467301139, "post_id": 38122164, "comment_id": 63686699, "body": "Ah yes I forgot to mention that. Let me update my question. Sorry."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "reply_to_user": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "edited": false, "score": 0, "creation_date": 1467301346, "post_id": 38122164, "comment_id": 63686837, "body": "Anyway first example will work fine with non-copyable types too. There is no safe way to move out non-copyable data from borrowed variable. However you can clone it or use unsafe <code>mem::replace</code>"}], "tags": [], "owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "is_accepted": false, "score": 2, "last_activity_date": 1467303480, "last_edit_date": 1495535336, "creation_date": 1467287151, "answer_id": 38122164, "question_id": 38121035, "link": "https://stackoverflow.com/questions/38121035/assignment-from-borrowed-content/38122164#38122164", "title": "Assignment from borrowed content", "body": "<p>The expression <code>let ref mut local = &amp;mut self.foo</code> gives you doble reference i.e. <code>&amp;mut &amp;mut T</code></p>\n\n<p>There are examples of how you can do what you're trying:</p>\n\n<pre><code>struct Foo{\n    foo:u32,\n}\n\nimpl Foo{\n    fn f(&amp;mut self) {\n        // let ref mut local = &amp;mut self.foo;\n        // let z:()=local;//found type `&amp;mut &amp;mut u32`\n        {\n            let ref mut local = self.foo;\n            *local = 40;\n        }\n        println!(\"{}\",self.foo);\n        {\n            let local = &amp;mut self.foo;\n            *local = 41;\n        }\n        println!(\"{}\",self.foo); \n        {\n            let &amp;mut Foo{foo:ref mut local} = self;\n            *local = 42;\n        }\n        println!(\"{}\",self.foo);\n    }\n}\n\nfn main() {\n    let mut f = Foo{foo:0};\n    f.f();\n}\n</code></pre>\n\n<p>The <code>ref</code> is necessary to obtain references to the fields of a struct when doing pattern matching or destructuring via the <code>let</code> binding.</p>\n\n<hr>\n\n<blockquote>\n  <p>why using <code>&amp;mut</code> instead of <code>ref mut</code> gives an error?</p>\n</blockquote>\n\n<p>Expression <code>let &amp;mut local = self.foo</code> gives mismatched types error. </p>\n\n<p>Here Rust tries to destructure the value in the right side (<code>u32</code>) to some mutable reference (<code>&amp;mut_</code>) in the left side. </p>\n\n<p>To make it work you need to write  <code>let &amp;mut local = &amp;mut self.foo</code>. </p>\n\n<p>However this is a full equivalent of the <code>let local = self.foo</code></p>\n\n<p>If type of the <code>self.foo</code> is <strong>non-copyable</strong> you will get error <code>E0507</code> \"cannot move out of borrowed content\". Causes of this error is perfectly explained in the <a href=\"https://doc.rust-lang.org/error-index.html#E0507\" rel=\"nofollow noreferrer\">Rust Compiler Error Index</a>, in the <a href=\"http://doc.rust-lang.org/stable/book/references-and-borrowing.html\" rel=\"nofollow noreferrer\">Rust Book</a> and in <a href=\"https://stackoverflow.com/search?page=1&amp;tab=relevance&amp;q=%5Brust%5D%20move%20out%20borrowed%20content\">dozens of answers on StackOwerflow</a></p>\n\n<hr>\n\n<p>P.S. Highly recommend to read the article on the link posted by @Chris Emerson</p>\n"}], "owner": {"reputation": 6658, "user_id": 293048, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/f6dc18955196327fce8300800c7fee5e?s=128&d=identicon&r=PG", "display_name": "someguy", "link": "https://stackoverflow.com/users/293048/someguy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 795, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1467303480, "creation_date": 1467284041, "last_edit_date": 1467301252, "question_id": 38121035, "link": "https://stackoverflow.com/questions/38121035/assignment-from-borrowed-content", "title": "Assignment from borrowed content", "body": "<p>Consider this trivial piece of code:</p>\n\n<pre><code>fn f(&amp;mut self) {\n    let ref mut local = &amp;mut self.foo;\n}\n</code></pre>\n\n<p>What I wanted to do here was assign <code>self.foo</code> to <code>local</code> so that I could use <code>local</code> in its place. I had to fight a bit with the compiler, though. Instead of <code>ref mut</code>, I was trying <code>&amp;mut</code>, but the compiler was complaining that it <code>cannot move out of borrowed content</code>. Note that <code>self.foo</code> does not inherit the <code>Copy</code> trait.</p>\n\n<p>From what I understand, the different between <code>&amp;</code> and <code>ref</code> is that the former accepts a pointer on the right-hand side, while the latter accepts a value. What I find confusing is that <code>&amp;mut self.foo</code> looks like a pointer to me. Why is it then that <code>ref</code> is correct?</p>\n"}, {"tags": ["java", "java-native-interface", "rust", "jna"], "answers": [{"comments": [{"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 1, "creation_date": 1467293495, "post_id": 38124522, "comment_id": 63680425, "body": "Swig can handle rust? I mean explicity, not genetate c/c++ which I have To glue to rust code."}, {"owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "edited": false, "score": 1, "creation_date": 1467293691, "post_id": 38124522, "comment_id": 63680578, "body": "Plus documentation of jnaerator point about c/c++, objective-c, but not rust, is it really support rust?"}], "tags": [], "owner": {"reputation": 9289, "user_id": 17175, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9a89d4cf026c5eb3af2b3fdea1925723?s=128&d=identicon&r=PG", "display_name": "technomage", "link": "https://stackoverflow.com/users/17175/technomage"}, "is_accepted": false, "score": 0, "last_activity_date": 1467293168, "creation_date": 1467293168, "answer_id": 38124522, "question_id": 38118501, "link": "https://stackoverflow.com/questions/38118501/how-to-automate-java-bindings-for-rust-code/38124522#38124522", "title": "How to automate Java bindings for Rust code?", "body": "<p>You can use <a href=\"https://code.google.com/archive/p/jnaerator/\" rel=\"nofollow\">jnaerator</a> to auto-generate your structure mappings for JNA.</p>\n\n<p>Alternatively, if you want to use JNI (and compile some more native code) you should go with <a href=\"http://www.swig.org\" rel=\"nofollow\">SWIG</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 574, "user_id": 566234, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3c1e7d744f8b073e6ca1581aaeff8e0a?s=128&d=identicon&r=PG", "display_name": "James Gilles", "link": "https://stackoverflow.com/users/566234/james-gilles"}, "is_accepted": true, "score": 5, "last_activity_date": 1469217165, "last_edit_date": 1469217165, "creation_date": 1469216289, "answer_id": 38534124, "question_id": 38118501, "link": "https://stackoverflow.com/questions/38118501/how-to-automate-java-bindings-for-rust-code/38534124#38534124", "title": "How to automate Java bindings for Rust code?", "body": "<p>In order to provide <code>#[jni]</code> annotations that work like that you'd need to use a compiler plugin. It would be an awesome tool, but it doesn't exist yet, as far as I know.</p>\n\n<p>There are bits and pieces of tooling lying around that might be helpful, if you want to create a project that does this.</p>\n\n<p>Plugins are currently unstable, and don't work on non-nightly rust; you would probably want to use <a href=\"https://github.com/serde-rs/syntex\" rel=\"nofollow\">syntex</a>, which provides a stable interface to compiler plugins. You could also write a <a href=\"https://doc.rust-lang.org/book/compiler-plugins.html\" rel=\"nofollow\">raw plugin</a> (see <a href=\"https://manishearth.github.io/rust-internals-docs/rustc_plugin/registry/struct.Registry.html\" rel=\"nofollow\">here</a> for the API for those), but most people won't be able to use it.</p>\n\n<p>There's <a href=\"https://github.com/Sean1708/rusty-cheddar\" rel=\"nofollow\">rusty-cheddar</a>, which generates c header files; you could take a look at that to see how it works. The author of that also seems to be working on a more general bindings-generation framework, but I don't know if it's active. You might be able to hook the output of cheddar up to something like JNAerator, but it probably won't create the prettiest interfaces on the java side.</p>\n\n<p>There's also <a href=\"https://github.com/Yamakaky/rust-bindgen\" rel=\"nofollow\">rust-bindgen</a> and <a href=\"https://github.com/jameysharp/corrode\" rel=\"nofollow\">corrode</a>, which work in the other direction; they translate c headers and arbitrary c code to rust respectively. I don't know if that's actually helpful.</p>\n\n<p><a href=\"https://github.com/sfackler/rust-jni-sys\" rel=\"nofollow\">JNI-sys</a> provides low-level JNI bindings; <a href=\"https://github.com/Geal/rust_on_mobile\" rel=\"nofollow\">rust-on-mobile</a> is a small project that uses it. Also see <a href=\"http://nitschinger.at/First-Steps-with-Rust-and-JNI/\" rel=\"nofollow\">First steps with Rust and Java</a>, a blog post that shows some rudiments of getting things hooked up.</p>\n\n<p>Finally, there's <a href=\"https://crates.io/crates/cbox\" rel=\"nofollow\">cbox</a>, which lets you work around awkwardness with ownership and FFI.</p>\n"}, {"tags": [], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "is_accepted": false, "score": 5, "last_activity_date": 1488919385, "creation_date": 1488919385, "answer_id": 42657955, "question_id": 38118501, "link": "https://stackoverflow.com/questions/38118501/how-to-automate-java-bindings-for-rust-code/42657955#42657955", "title": "How to automate Java bindings for Rust code?", "body": "<p>Finally I created such <a href=\"https://github.com/Dushistov/rust_swig\" rel=\"noreferrer\">project (link to github repository)</a> to automate\nbinding creation.</p>\n"}], "owner": {"reputation": 7560, "user_id": 1034749, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/2022f0caae119ed6232cf370bb9d9d3a?s=128&d=identicon&r=PG", "display_name": "fghj", "link": "https://stackoverflow.com/users/1034749/fghj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1957, "favorite_count": 5, "accepted_answer_id": 38534124, "answer_count": 3, "score": 12, "last_activity_date": 1488919385, "creation_date": 1467277454, "last_edit_date": 1469220254, "question_id": 38118501, "link": "https://stackoverflow.com/questions/38118501/how-to-automate-java-bindings-for-rust-code", "title": "How to automate Java bindings for Rust code?", "body": "<p>I want to call Rust code from Java / Android, and I've found 3 variants to do so:</p>\n\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Java_Native_Interface\" rel=\"noreferrer\">JNI</a></li>\n<li><a href=\"https://github.com/java-native-access/jna\" rel=\"noreferrer\">JNA</a></li>\n<li><a href=\"https://github.com/jnr/jnr-ffi\" rel=\"noreferrer\">JNR FFI</a></li>\n</ol>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Java_Native_Interface\" rel=\"noreferrer\">JNI</a> looks good and powerful enough, but you have to\nwrite too much code by hand.</p>\n\n<p><a href=\"https://github.com/java-native-access/jna\" rel=\"noreferrer\">JNA</a>, if not taking into consideration that it <a href=\"https://github.com/drrb/java-rust-example/issues/5\" rel=\"noreferrer\">crashes on my machine</a>, requires writing Rust struct data type description in Java by hand,\nthe same problem with <a href=\"https://github.com/jnr/jnr-ffi\" rel=\"noreferrer\">JNR FFI</a>.</p>\n\n<p>So I wonder how difficult will be generate <a href=\"https://en.wikipedia.org/wiki/Java_Native_Interface\" rel=\"noreferrer\">JNI</a> code\nfor <code>traits</code> and <code>struct</code> with macros or a compiler plugin?\nThis compiler should match traits implementations for concrete struct,\nand also struct</p>\n\n<pre><code>#[JNI]\nstruct Foo {\n    a: i32,\n}\n\ntrait Boo {\n    fn f(&amp;self, b: f64) -&gt; f64;\n}\n#[JNI]\nimpl Boo for Foo {\n    fn f(&amp;self, b: f64) -&gt; f64 {\n        0f64\n    }\n}\n</code></pre>\n\n<p>and create Java classes for struct and Java classes with <code>native</code> functions, plus generate <code>pub</code> <code>no_mangle</code> functions that wrap traits functions.</p>\n"}, {"tags": ["rust", "operator-precedence"], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": true, "score": 8, "last_activity_date": 1467274145, "creation_date": 1467274145, "answer_id": 38117390, "question_id": 38117315, "link": "https://stackoverflow.com/questions/38117315/does-if-let-with-a-pair-short-circuit/38117390#38117390", "title": "Does if-let with a pair short-circuit?", "body": "<p>It does not shortcut. To pattern-match against the pair, the pair must be fully constructed, which means both <code>f</code> and <code>g</code> have been called. There is no lazy evaluation where the pattern match could happen before the values are calculated.</p>\n\n<p>(By the way, it's easy to try out, and the Rust compiler pretty much <em>is</em> the spec right now.)</p>\n"}], "owner": {"reputation": 1115, "user_id": 890016, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/BO6bH.png?s=128&g=1", "display_name": "Mario Carneiro", "link": "https://stackoverflow.com/users/890016/mario-carneiro"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 359, "favorite_count": 0, "accepted_answer_id": 38117390, "answer_count": 1, "score": 5, "last_activity_date": 1467274145, "creation_date": 1467273868, "question_id": 38117315, "link": "https://stackoverflow.com/questions/38117315/does-if-let-with-a-pair-short-circuit", "title": "Does if-let with a pair short-circuit?", "body": "<p>Suppose <code>f()</code> and <code>g()</code> return <code>Option&lt;T&gt;</code>.</p>\n\n<pre><code>if let (Some(x), Some(y)) = (f(), g()) {\n    h();\n}\n</code></pre>\n\n<p>If <code>f()</code> returns <code>None</code>, will <code>g()</code> be evaluated? Is evaluation guaranteed or prohibited by the spec?</p>\n"}, {"tags": ["error-handling", "rust"], "comments": [{"owner": {"reputation": 47141, "user_id": 1643939, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Mww2p.png?s=128&g=1", "display_name": "nemo", "link": "https://stackoverflow.com/users/1643939/nemo"}, "edited": false, "score": 2, "creation_date": 1467274042, "post_id": 38116454, "comment_id": 63667064, "body": "Please consult an article about <a href=\"https://doc.rust-lang.org/book/error-handling.html\" rel=\"nofollow noreferrer\">error handling in rust</a>. For an advanced read about error handling you might consider reading <a href=\"http://joeduffyblog.com/2016/02/07/the-error-model/\" rel=\"nofollow noreferrer\">this article</a> as well."}], "answers": [{"comments": [{"owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "edited": false, "score": 0, "creation_date": 1467274003, "post_id": 38117020, "comment_id": 63667044, "body": "Thanks! &quot;cleanly exiting&quot; -&gt; that&#39;s my problem. I have read that <code>process::exit</code> is not &quot;clean&quot;"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "edited": false, "score": 0, "creation_date": 1467274889, "post_id": 38117020, "comment_id": 63667582, "body": "<code>process::exit</code> is not less &quot;clean&quot; than <code>panic!</code>. It&#39;s just guaranteed not to try to run cleanup code, while <code>panic!</code> might try to run destructors depending on your setup"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1467277709, "post_id": 38117020, "comment_id": 63669360, "body": "Just to clarify: the only way I&#39;m aware of to &quot;cleanly&quot; exit a Rust program is to make said exit <i>an explicit part of your code</i>.  There is <i>no</i> magic &quot;shut everything down cleanly&quot; wand to wave.  One thing you <i>could</i> try is having cleanup logic in a separate &quot;monitor&quot; process, but again, that&#39;s something you have to explicitly write yourself."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 7, "last_activity_date": 1467274842, "last_edit_date": 1467274842, "creation_date": 1467273040, "answer_id": 38117020, "question_id": 38116454, "link": "https://stackoverflow.com/questions/38116454/how-to-panic-in-production/38117020#38117020", "title": "How to panic! in production", "body": "<p><code>panic!</code> is not the right way to stop a program.</p>\n\n<p>Its sole purpose is to abort when everything is about to go south and you have no way to recover. If you are expecting some wrong behaviour anywhere, use <code>Result</code> and recover from that behaviour by printing a nice message and cleanly exiting.</p>\n\n<p>If you have <code>panic!</code>s or <code>assert!</code>ions in your code and they trigger, the message you showed is the only correct thing that should be displayed, because it's a bug in your code and there's no clean way to recover from a bug.</p>\n\n<p>Note that <code>panic!</code> does not necessarily perform cleanup. If you panic, and another panic happens in a <code>Drop</code> impl, the program simply aborts. Also there's a setting for rustc that turns off the cleanup on panic and simply aborts on the <code>panic!</code>.</p>\n"}], "owner": {"reputation": 22928, "user_id": 978690, "user_type": "registered", "accept_rate": 94, "profile_image": "https://i.stack.imgur.com/lNUl6.png?s=128&g=1", "display_name": "rap-2-h", "link": "https://stackoverflow.com/users/978690/rap-2-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 184, "favorite_count": 1, "accepted_answer_id": 38117020, "answer_count": 1, "score": 1, "last_activity_date": 1467274842, "creation_date": 1467271470, "last_edit_date": 1467274126, "question_id": 38116454, "link": "https://stackoverflow.com/questions/38116454/how-to-panic-in-production", "title": "How to panic! in production", "body": "<p><code>Panic!</code> seems to be the right way to stop a program while in development mode. But one should not ship a program that displays such a message for an excepted error:</p>\n\n<pre><code>thread '&lt;main&gt;' panicked at 'error message: ()', x.rs:785\n</code></pre>\n\n<p>Is there any way to exit a program early with an error code, without displaying developer oriented text? I could use <code>process::exit</code> but I've read that it does not perform cleanup, so what should we use?</p>\n"}, {"tags": ["rust", "lifetime", "directed-acyclic-graphs", "graph-traversal"], "comments": [{"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 2, "creation_date": 1467267164, "post_id": 38114271, "comment_id": 63663337, "body": "Have you read this <a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/fourth-iteration.html#iter\" rel=\"nofollow noreferrer\">cglab.ca/~abeinges/blah/too-many-lists/book/&hellip;</a> ?  Although it is about <code>Rc</code> queues, it can really help you."}, {"owner": {"reputation": 8973, "user_id": 713961, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/30e8520a25cb0fa4a91acca77059244d?s=128&d=identicon&r=PG", "display_name": "Matt Kline", "link": "https://stackoverflow.com/users/713961/matt-kline"}, "reply_to_user": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1467268134, "post_id": 38114271, "comment_id": 63663771, "body": "...If I&#39;m reading the section correctly, the author ran face-first into the same problem I&#39;m having and gave up. To wit, &quot;Rc&lt;RefCell&gt; has really truly finally failed us.&quot;"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1467270961, "post_id": 38114271, "comment_id": 63665261, "body": "@MattKline: That&#39;s actually &quot;Anyway, that&#39;s me giving up on Iter and IterMut. We could do them, but ugh.&quot;, so it Gankro&#39;s mind it&#39;s possible, but maybe not elegant."}, {"owner": {"reputation": 3566, "user_id": 5138648, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1fdbc41d6ae88135845b5d965dac0b13?s=128&d=identicon&r=PG", "display_name": "aSpex", "link": "https://stackoverflow.com/users/5138648/aspex"}, "edited": false, "score": 0, "creation_date": 1467272096, "post_id": 38114271, "comment_id": 63665934, "body": "Yeah, looks like there is no way with <code>Rc&lt;RefCell&gt;</code>"}], "answers": [{"tags": [], "owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "is_accepted": true, "score": 3, "last_activity_date": 1467313338, "creation_date": 1467313338, "answer_id": 38131303, "question_id": 38114271, "link": "https://stackoverflow.com/questions/38114271/safely-traversing-a-directed-acyclic-graph/38131303#38131303", "title": "Safely traversing a directed acyclic graph", "body": "<p>Rc isn't really a problem here: if you get rid of the RefCells, everything just compiles.  Actually, in some situations, this might be a solution: if you need to mutate the contents of the node, but not the edges, you can just change your data structure so the edges aren't inside a RefCell.</p>\n\n<p>The argument also isn't really the problem; this compiles:</p>\n\n<pre><code>fn walk_to_end(node: &amp;Link&lt;DagNode&gt;) -&gt; Link&lt;DagNode&gt; {\n    let nb = node.borrow();\n    match nb.edge {\n        Some(ref prev) =&gt; walk_to_end(prev),\n        None =&gt; node.clone()\n    }\n}\n</code></pre>\n\n<p>The problem here is really returning the result. Basically, there isn't any way to write the return value you want.  I mean, you could theoretically make your method return a wrapper around a <code>Vec&lt;Ref&lt;T&gt;&gt;</code>, but that's a lot more expensive than just bumping the reference count on the result.</p>\n\n<p>More generally, <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> is difficult to work with because it's a complicated data structure: you can safely mutate multiple nodes at the same time, and it keeps track of exactly how many edges reference each node.</p>\n\n<p>Note that you don't have to dip into unsafe code to use an arena.  <a href=\"https://crates.io/crates/typed-arena\" rel=\"nofollow\">https://crates.io/crates/typed-arena</a> provides a safe API for arenas.  I'm not sure why the example you linked to uses UnsafeCell; it certainly isn't necessary.</p>\n"}], "owner": {"reputation": 8973, "user_id": 713961, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/30e8520a25cb0fa4a91acca77059244d?s=128&d=identicon&r=PG", "display_name": "Matt Kline", "link": "https://stackoverflow.com/users/713961/matt-kline"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 623, "favorite_count": 1, "accepted_answer_id": 38131303, "answer_count": 1, "score": 2, "last_activity_date": 1467313338, "creation_date": 1467262654, "last_edit_date": 1467265087, "question_id": 38114271, "link": "https://stackoverflow.com/questions/38114271/safely-traversing-a-directed-acyclic-graph", "title": "Safely traversing a directed acyclic graph", "body": "<p>I'm attempting to build and traverse a DAG. There seems to be two feasible approaches: use <code>Rc&lt;RefCell&lt;Node&gt;&gt;</code> for edges, or utilize an arena allocator and some <code>unsafe</code> code. (<a href=\"https://aminb.gitbooks.io/rust-for-c/content/graphs/index.html\" rel=\"nofollow\">See details here.</a>)</p>\n\n<p>I'm opting for the former, but having difficulty traversing the graph to its edges, as any borrow of a child node relies on borrows to its parents:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::rc::Rc;\n\n// See: https://aminb.gitbooks.io/rust-for-c/content/graphs/index.html,\n//      https://github.com/nrc/r4cppp/blob/master/graphs/src/ref_graph.rs\npub type Link&lt;T&gt; = Rc&lt;RefCell&lt;T&gt;&gt;;\n\npub struct DagNode {\n    /// Each node can have several edges flowing *into* it, i.e. several owners,\n    /// hence the use of Rc. RefCell is used so we can have mutability\n    /// while building the graph.\n    pub edge: Option&lt;Link&lt;DagNode&gt;&gt;,\n\n    // Other data here\n}\n\n// Attempt to walk down the DAG until we reach a leaf.\nfn walk_to_end(node: &amp;Link&lt;DagNode&gt;) -&gt; &amp;Link&lt;DagNode&gt; {\n    let nb = node.borrow();\n    match nb.edge {\n        Some(ref prev) =&gt; walk_to_end(prev),\n        // Here be dragons: the borrow relies on all previous borrows,\n        // so this fails to compile.\n        None =&gt; node\n    }\n}\n</code></pre>\n\n<p>I could modify the reference counts, i.e.</p>\n\n<pre><code>fn walk_to_end(node: Link&lt;HistoryNode&gt;) -&gt; Link&lt;HistoryNode&gt; {\n    let nb = node.borrow();\n    match nb.previous {\n        Some(ref prev) =&gt; walk_to_end(prev.clone()),\n        None =&gt; node.clone()\n    }\n}\n</code></pre>\n\n<p>but bumping the reference counts every time you traverse a node seems like quite the hack. What is the idiomatic approach here?</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 861, "user_id": 4085230, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cd9e0208894241fb67b47aafc4e316ff?s=128&d=identicon&r=PG&f=1", "display_name": "Mark Rousskov", "link": "https://stackoverflow.com/users/4085230/mark-rousskov"}, "is_accepted": false, "score": 4, "last_activity_date": 1467254019, "creation_date": 1467254019, "answer_id": 38113035, "question_id": 38112773, "link": "https://stackoverflow.com/questions/38112773/a-macro-with-quotes-around-a-metavariable/38113035#38113035", "title": "A macro with quotes around a metavariable", "body": "<p>The <a href=\"https://doc.rust-lang.org/std/macro.stringify!.html\" rel=\"nofollow\"><code>stringify!</code></a> macro should work. It provides a string representation of the passed argument as a <code>&amp;'static str</code>, which can then be passed directly into <code>println!</code> to print it to stdout.</p>\n"}], "owner": {"reputation": 327, "user_id": 1954355, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/9316a697f30054e3672ac1c0fb7813be?s=128&d=identicon&r=PG", "display_name": "graeme", "link": "https://stackoverflow.com/users/1954355/graeme"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 694, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1467254019, "creation_date": 1467251820, "question_id": 38112773, "link": "https://stackoverflow.com/questions/38112773/a-macro-with-quotes-around-a-metavariable", "title": "A macro with quotes around a metavariable", "body": "<p>I want to println! a macro identifier, (mostly for testing macros), but if I do it like this:</p>\n\n<pre><code>macro_rules! printname(\n(\n    $name:ident;\n) =&gt; (\n    println!(\"$name\");\n)\n\nlet this_name = \"hello\";\n\nprintname!(this_name);\n</code></pre>\n\n<p>it just prints </p>\n\n<blockquote>\n  <p>$name</p>\n</blockquote>\n\n<p>and if i do <code>println!(\"{}\", $name);</code> it of course substitutes in the variable <code>this_name</code> and prints </p>\n\n<blockquote>\n  <p>hello</p>\n</blockquote>\n\n<p>What I actually want it to do is print </p>\n\n<blockquote>\n  <p>this_name</p>\n</blockquote>\n\n<p>Is there a way to quote a metavariable to get its value?</p>\n"}]