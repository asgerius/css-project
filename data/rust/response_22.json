[{"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "edited": false, "score": 0, "creation_date": 1434039539, "post_id": 30768611, "comment_id": 49622207, "body": "By the way, it&#39;s helpful if you paste the full error message, including the line number and column where it occurred."}], "answers": [{"comments": [{"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 0, "creation_date": 1434008407, "post_id": 30769857, "comment_id": 49599668, "body": "No, the code is not already working. - It will not compile because of the access to <code>self.cclient</code>. - How can assigning <code>None</code> close the connection? This would be completely logical in a garbage collected language, but as far as I understand in Rust closing is done at compile time iff the owning variable goes out of scope. - Simply assigning a variable will not let anything go out of scope, right?"}, {"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 0, "creation_date": 1434011557, "post_id": 30769857, "comment_id": 49601667, "body": "Ok, inserting a <code>.take()</code> indeed seems to be a solution. However I still have no clue what exactly the problem is and why <code>.take()</code> solves that."}, {"owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "reply_to_user": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "edited": false, "score": 0, "creation_date": 1434039274, "post_id": 30769857, "comment_id": 49622007, "body": "A value is dropped not only when its owner goes out of scope, but also when its owner receives a new value.  Demonstration: <a href=\"http://is.gd/xeSnoI\" rel=\"nofollow noreferrer\">is.gd/xeSnoI</a>"}], "tags": [], "owner": {"reputation": 536, "user_id": 1965152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d6510925e8442d33419b7e89bee18564?s=128&d=identicon&r=PG", "display_name": "mbrubeck", "link": "https://stackoverflow.com/users/1965152/mbrubeck"}, "is_accepted": true, "score": 2, "last_activity_date": 1434040026, "last_edit_date": 1434040026, "creation_date": 1433984411, "answer_id": 30769857, "question_id": 30768611, "link": "https://stackoverflow.com/questions/30768611/how-to-move-borrowed-content-to-close-connection/30769857#30769857", "title": "How to move borrowed content to close connection", "body": "<p>I assume the error in the original code is from this line:</p>\n\n<pre><code>let mut client=self.cclient.expect(\"connection is gone\");\n</code></pre>\n\n<p>This isn't allowed because <code>Option::expect</code> takes ownership of its argument, but <code>readable</code> only has a borrowed reference.  Only an owner can move a value to a new owner.</p>\n\n<p>You could solve this by using <code>Option:::take</code>.  Instead of moving the original option, this just borrows and mutates it, changing it to <code>None</code> and returning its original value:</p>\n\n<pre><code>let client = self.cclient.take().expect(\"connection is gone\");\n// Now `client` is a TcpStream and `self.cclient` is None.\n</code></pre>\n\n<p>However, it's not necessary to move the value at all.  You already have a mutable reference, so you can just mutate it in place:</p>\n\n<pre><code>C_CLIENT =&gt; {\n    if hint.is_hup() {\n        event_loop.deregister(&amp;self.cclient);\n        self.cclient = None;\n    } else  {\n        let mut buf: [u8; 500] = [0; 500];\n        let l = self.cclient.read(&amp;mut buf).unwrap();\n        println!(\"read {} bytes.\",l);\n    }\n},\n</code></pre>\n\n<p>When you write <code>self.cclient = None;</code>, the old value of self.cclient is dropped immediately, closing the connection.  In Rust, a value is dropped when it is no longer owned.  This can happen when its owner goes out of scope or when its owner is reassigned.  The Rust compiler statically inserts drop calls when a variable goes out of scope or is reassigned.</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 196, "favorite_count": 0, "accepted_answer_id": 30769857, "answer_count": 1, "score": 2, "last_activity_date": 1434040026, "creation_date": 1433976381, "question_id": 30768611, "link": "https://stackoverflow.com/questions/30768611/how-to-move-borrowed-content-to-close-connection", "title": "How to move borrowed content to close connection", "body": "<p>The following code should accept tcp connection, read from them, and close them on hangup.</p>\n\n<pre><code>extern crate mio;\nuse mio::{EventLoop,Token,ReadHint};\nuse mio::tcp::{TcpListener, TcpStream};\nuse std::io::Read;\n\nconst L_CLIENT: Token = Token(0);\nconst C_CLIENT: Token = Token(1);\n\nfn sa(port:u16) -&gt; std::net::SocketAddr {\n  let ipa : std::net::Ipv4Addr = std::net::Ipv4Addr::new(127,0,0,1);\n  std::net::SocketAddr::V4(std::net::SocketAddrV4::new(ipa,port))\n}\n\nfn main(){\n  let mut event_loop = EventLoop::new().unwrap();\n\n  let lclient = TcpListener::bind(&amp;sa(4000)).unwrap();\n  event_loop.register(&amp;lclient, L_CLIENT).unwrap();\n\n  println!(\"running loop...\");\n  event_loop.run(&amp;mut MyHandler{lclient:lclient,cclient:None}).unwrap();\n  println!(\"done.\");\n}\n\nstruct MyHandler{\n  lclient:TcpListener,\n  cclient:Option&lt;TcpStream&gt;,\n}\n\nimpl mio::Handler for MyHandler {\n  type Timeout = ();\n  type Message = ();\n\n  fn readable(&amp;mut self, event_loop: &amp;mut EventLoop&lt;Self&gt;, token: Token, hint: ReadHint){\n    match token {\n      L_CLIENT =&gt; {\n        let s=self.lclient.accept().unwrap().expect(\"no client??\");\n        match self.cclient{\n          None =&gt; {event_loop.register(&amp;s,C_CLIENT);self.cclient=Some(s);}\n          Some(_) =&gt;{println!(\"ignore second client\");} // s should be closed as it goes out of scope\n        }\n      },\n      C_CLIENT =&gt; {\n        let mut client=self.cclient.expect(\"connection is gone\"); // what's the problem here?\n        if hint.is_hup() {\n          event_loop.deregister(&amp;client);\n          self.cclient=None; // how to close connection? \n        } else  {\n          let mut buf: [u8; 500] = [0; 500];\n          let l=client.read(&amp;mut buf).unwrap();\n          println!(\"read {} bytes.\",l);\n        }\n      },\n      _ =&gt;{println!(\"other Token\");}\n    }\n  }\n}\n</code></pre>\n\n<p>This almost works. In the C_CLIENT case I want to handle a client hangup. In that case I guess I need to move ownership for the connection from my handler to the method in order to let it go out of scope to close it.</p>\n\n<p>Unfortunately rust will not allow me to move the connection:</p>\n\n<pre><code> error: cannot move out of borrowed content\n</code></pre>\n\n<p>As far as I understand the problem is that <code>&amp;self</code> is borrowed in the <code>readable</code> method and therefore is not able to access its fields.</p>\n\n<p>How do I access the connection? (avoiding the above error.)</p>\n\n<p>How do I close that connection? (i.e. transfer ownership.)</p>\n"}, {"tags": ["rust", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 9, "last_activity_date": 1433973969, "creation_date": 1433973969, "answer_id": 30768128, "question_id": 30768063, "link": "https://stackoverflow.com/questions/30768063/does-a-b-a-mean-that-the-lifetime-b-must-outlive-the-lifetime-a/30768128#30768128", "title": "Does &lt;&#39;a, &#39;b: &#39;a&gt; mean that the lifetime &#39;b must outlive the lifetime &#39;a?", "body": "<p>Yes, you're broadly right.</p>\n\n<p>A bound <code>&lt;...: 'a&gt;</code> means that <code>...</code> (either a type or another lifetime) needs to be able to outlive <code>'a</code>. E.g. <code>'b: 'a</code> means that \"<code>'b</code> must live at least as long as <code>'a</code>\" (not strictly outlives, though: they can be the same).</p>\n"}, {"tags": [], "owner": {"reputation": 5913, "user_id": 899752, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/CzfBy.jpg?s=128&g=1", "display_name": "mdup", "link": "https://stackoverflow.com/users/899752/mdup"}, "is_accepted": true, "score": 25, "last_activity_date": 1433974927, "creation_date": 1433974927, "answer_id": 30768319, "question_id": 30768063, "link": "https://stackoverflow.com/questions/30768063/does-a-b-a-mean-that-the-lifetime-b-must-outlive-the-lifetime-a/30768319#30768319", "title": "Does &lt;&#39;a, &#39;b: &#39;a&gt; mean that the lifetime &#39;b must outlive the lifetime &#39;a?", "body": "<p>The colon is read \"outlives\", so</p>\n\n<pre><code>'long: 'short\n</code></pre>\n\n<p>is read \"<code>'long</code> outlives <code>'short</code>\".</p>\n\n<p>As for an official doc on the topic, the only place I've seen it documented so far is in the <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0192-bounds-on-object-and-generic-types.md\">RFC on lifetime bounds</a>.</p>\n"}], "owner": {"reputation": 18308, "user_id": 1375209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/dweAo.png?s=128&g=1", "display_name": "toro2k", "link": "https://stackoverflow.com/users/1375209/toro2k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2866, "favorite_count": 4, "accepted_answer_id": 30768319, "answer_count": 2, "score": 18, "last_activity_date": 1433974927, "creation_date": 1433973659, "question_id": 30768063, "link": "https://stackoverflow.com/questions/30768063/does-a-b-a-mean-that-the-lifetime-b-must-outlive-the-lifetime-a", "title": "Does &lt;&#39;a, &#39;b: &#39;a&gt; mean that the lifetime &#39;b must outlive the lifetime &#39;a?", "body": "<p>I want to implement a builder similar to the debug <a href=\"https://github.com/rust-lang/rust/blob/8a3f5af8c98e123247a2847c52474f42874d23fa/src/libcore/fmt/builders.rs\">builders</a> defined by the standard library. They are defined using structures like the following:</p>\n\n<pre><code>struct DebugFoo&lt;'a, 'b: 'a&gt; {\n    fmt: &amp;'a mut std::fmt::Formatter&lt;'b&gt;\n}\n</code></pre>\n\n<p>Since I don't understand what the form <code>&lt;'a, 'b: 'a&gt;</code> means nor I can find it mentioned in the Rust book or the Rust reference (at least concerning lifetimes), I just tried to remove what I don't understand to see what happens:</p>\n\n<pre><code>struct DebugFoo&lt;'a, 'b&gt; {\n    fmt: &amp;'a mut std::fmt::Formatter&lt;'b&gt;\n}\n</code></pre>\n\n<p>Compiling it I get this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>in type `&amp;'a mut core::fmt::Formatter&lt;'b&gt;`, reference has a longer \nlifetime than the data it references\n</code></pre>\n\n<p>And this note:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the pointer is valid for the lifetime 'a as defined on the struct at 1:0\nbut the referenced data is only valid for the lifetime 'b as defined on\nthe struct at 1:0\n</code></pre>\n\n<p>It makes sense to me: <code>'a</code> and <code>'b</code> are different lifetimes so, to be on the safe side, Rust (the borrow checker?) assumes that <code>'a</code> will outlive <code>'b</code>, and throws the error. </p>\n\n<p>Now I can guess that <code>&lt;'a, 'b: 'a&gt;</code> means that the lifetime <code>'b</code> must be longer than the lifetime <code>'a</code>. I've guessed right? Or there is more? How can I find it documented?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 261, "user_id": 2407776, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1738d99b3c543b63e1c05bcee6b31689?s=128&d=identicon&r=PG", "display_name": "Erik", "link": "https://stackoverflow.com/users/2407776/erik"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433955900, "post_id": 30761960, "comment_id": 49578190, "body": "Sorry about that. Your answer worked perfectly, but I went ahead and added the complete broken example anyway for future reference."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433964482, "post_id": 30761960, "comment_id": 49583385, "body": "Thanks! It&#39;s impressive the number of people that get their answer and forget about making the question any good. Go you!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1433954340, "creation_date": 1433954340, "answer_id": 30762353, "question_id": 30761960, "link": "https://stackoverflow.com/questions/30761960/how-can-i-wrap-any-impl-of-stderrorerror-to-ease-error-propagation/30762353#30762353", "title": "How can I wrap any impl of std::error::Error to ease error propagation?", "body": "<p>This is one way you can convert an <code>Option&lt;Box&lt;Trait&gt;&gt;</code> to an <code>Option&lt;&amp;Trait&gt;</code>. I'm avoiding all of the trait implementation to clearly show the interesting code:</p>\n\n<pre><code>use std::error::Error;\n\npub struct StrErr {\n    c: Option&lt;Box&lt;Error&gt;&gt;\n}\n\nimpl StrErr {\n    fn cause(&amp;self) -&gt; Option&lt;&amp;Error&gt; {\n        self.c.as_ref().map(|e| &amp;**e)\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>We use <a href=\"http://doc.rust-lang.org/core/option/enum.Option.html#method.as_ref\" rel=\"nofollow\"><code>Option::as_ref</code></a> to avoid consuming the <code>self.c</code> item. The <code>map</code> closure is provided with a <code>&amp;Box&lt;Trait&gt;</code>, so we dereference it twice to get to a <code>Trait</code>, and then reference it once to get to a <code>&amp;Trait</code>.</p>\n"}], "owner": {"reputation": 261, "user_id": 2407776, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1738d99b3c543b63e1c05bcee6b31689?s=128&d=identicon&r=PG", "display_name": "Erik", "link": "https://stackoverflow.com/users/2407776/erik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 830, "favorite_count": 0, "accepted_answer_id": 30762353, "answer_count": 1, "score": 3, "last_activity_date": 1433956716, "creation_date": 1433953185, "last_edit_date": 1433956716, "question_id": 30761960, "link": "https://stackoverflow.com/questions/30761960/how-can-i-wrap-any-impl-of-stderrorerror-to-ease-error-propagation", "title": "How can I wrap any impl of std::error::Error to ease error propagation?", "body": "<p>I'm trying to simplify the error flow in a webapp I'm working on, and my plan was to make a struct that implements <code>std::error::Error</code> and just forwards the result of <code>description()</code> for whatever kind of error it's wrapped around. I've implemented <code>From</code> for the types of errors I want to wrap, so this struct makes it easy to use <code>try!</code> to get a uniform error result.  Here's what I have so far for the struct:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>#![feature(convert)]\nuse std::error::{Error};\nuse std::fmt::{self,Display,Formatter};\nuse std::io::{self,Read};\nuse std::ops::Deref;\nuse std::fs::{File};\n\n#[derive(Debug)]\npub struct StrErr{\n    desc:String,\n    c: Option&lt;Box&lt;Error&gt;&gt;\n}\nimpl StrErr{\n    pub fn new(msg:String) -&gt;Self{\n        StrErr{desc:msg, c:None}\n    }\n}\n\nimpl Error for StrErr{\n    fn description(&amp;self) -&gt; &amp;str{\n        self.desc.as_str()\n    }\n    fn cause(&amp; self) -&gt; Option&lt;&amp; Error&gt; {\n        self.c.map(|e| e.deref())\n    }\n}\n\nimpl Display for StrErr {\n    fn fmt(&amp;self, f:&amp;mut Formatter) -&gt; Result&lt;(),fmt::Error&gt; {\n        f.write_str(self.desc.as_str())\n    } \n}\n\nimpl From&lt;io::Error&gt; for StrErr {\n    fn from(o:io::Error) -&gt; Self {\n        StrErr{desc: String::from(o.description()),c:Some(Box::new(o))}\n    }\n}\n\n\nfn main(){\n    let contrived = Some(\"foo.txt\")\n        .ok_or_else(|| StrErr::new(String::from(\"error message\")))\n        .and_then(|filename| Ok(try!(File::open(filename))))\n        .and_then(|mut file| {\n            let mut content = String::new();\n            try!(file.read_to_string(&amp;mut content));\n            Ok(content)\n        });\n    if let Ok(content) = contrived {\n        println!(\"Got content: {}\", content);\n    } else {\n        println!(\"got an error\");\n    }\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/Gvzten\" rel=\"nofollow\">playground</a></p>\n\n<p>The problem is with the <code>cause()</code> method - I can't return a reference to the inner <code>Error</code> instance because <code>e</code> doesn't live long enough. Is there a different way I can structure this so that I can keep the generic reference to anything that implements <code>Error</code> (which I currently do by putting it in a Box) but I can still fully implement the <code>Error</code> trait (which is expecting a ref to the parent <code>Error</code>)?</p>\n\n<p>I've worked around it by just punting on <code>cause()</code> and having it return <code>None</code>, but I'd much rather conform to the intent of the trait.</p>\n\n<pre><code>rustc 1.2.0-nightly (613e57b44 2015-06-01) (built 2015-06-02)\n</code></pre>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1434004364, "post_id": 30759271, "comment_id": 49597254, "body": "Note: Rust indent style is 4 spaces."}], "answers": [{"tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 5, "last_activity_date": 1434004406, "last_edit_date": 1434004406, "creation_date": 1433961066, "answer_id": 30764517, "question_id": 30759271, "link": "https://stackoverflow.com/questions/30759271/detecting-client-hangup-in-mio/30764517#30764517", "title": "Detecting client hangup in MIO", "body": "<p>The default when calling <code>register</code> on mio v0.3.5 is to register only for the <code>readable</code> <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/v0.3.x/mio/struct.Interest.html\" rel=\"nofollow\">Interest</a>, so that is the only hint you will get.</p>\n\n<p>If you want to be warned for hup as well, you need to use the function <a href=\"http://rustdoc.s3-website-us-east-1.amazonaws.com/mio/v0.3.x/mio/struct.EventLoop.html#method.register_opt\" rel=\"nofollow\">register_opt</a> and give your <code>Interest</code> and <code>PollOpt</code> as parameters, so your code becomes:</p>\n\n<pre><code>extern crate mio;\nuse mio::{EventLoop,Token,ReadHint,PollOpt,Interest};\nuse std::io::Read;\n\nfn main() {\n    let listener = mio::tcp::TcpListener::bind(\"localhost:1234\").unwrap();\n    let (stream,_) : (mio::tcp::TcpStream, _)  =  listener.accept().unwrap();\n\n    let mut event_loop = EventLoop::new().unwrap();\n    let interest = Interest::readable() | Interest::hup();\n    event_loop.register_opt(&amp;stream,Token(0), interest,PollOpt::level()).unwrap();\n    println!(\"run...\");\n    event_loop.run(&amp;mut H{stream:stream}).unwrap();\n}\n\nstruct H{stream : mio::tcp::TcpStream}\n\nimpl mio::Handler for H {\n    type Timeout = ();\n    type Message = ();\n\n    fn readable(&amp;mut self, event_loop : &amp;mut EventLoop&lt;Self&gt;, _ : Token, hint: ReadHint){\n        let mut buf: [u8; 500] = [0; 500];\n        if hint.is_hup() {\n            println!(\"Recieved hup, exiting\");\n            event_loop.shutdown();\n            return;\n        }\n        println!(\"{} {}\",hint.is_data(),self.stream.read(&amp;mut buf).unwrap());\n        std::thread::sleep_ms(1000);\n    }\n}\n</code></pre>\n\n<p>I think the default for the convenience function <code>register</code> has changed in v0.4.0 to be <code>Interest::all()</code> so this shouldn't be a problem in the future.</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 775, "favorite_count": 0, "accepted_answer_id": 30764517, "answer_count": 1, "score": 4, "last_activity_date": 1434004406, "creation_date": 1433946360, "question_id": 30759271, "link": "https://stackoverflow.com/questions/30759271/detecting-client-hangup-in-mio", "title": "Detecting client hangup in MIO", "body": "<p>When using MIO (0.3.5) how do I detect the termination of a connection?</p>\n\n<p>I tried the following:</p>\n\n<pre><code>extern crate mio;\nuse mio::{EventLoop,Token,ReadHint};\nuse std::io::Read;\n\nfn main(){\n  let listener = mio::tcp::TcpListener::bind(\"localhost:1234\").unwrap();\n  let (stream,_) : (mio::tcp::TcpStream, _)  =  listener.accept().unwrap();\n\n  let mut event_loop = EventLoop::new().unwrap();\n  event_loop.register(&amp;stream,Token(0)).unwrap();\n  println!(\"run...\");\n  event_loop.run(&amp;mut H{stream:stream}).unwrap();\n}\n\nstruct H{stream : mio::tcp::TcpStream}\n\nimpl mio::Handler for H{\n  type Timeout = ();\n  type Message = ();\n\n  fn readable(&amp;mut self, _ : &amp;mut EventLoop&lt;Self&gt;, _ : Token, hint: ReadHint){\n    let mut buf: [u8; 500] = [0; 500];\n    println!(\"{} {}\",(hint==ReadHint::data()),self.stream.read(&amp;mut buf).unwrap());\n    std::thread::sleep_ms(1000);\n  }\n}\n</code></pre>\n\n<p>Run this. Connect to it using something like <code>nc localhost 1234</code>. Terminate connection by using Ctrl-C. My code will think there is new data available (<code>hint==ReadHint::data()</code>). A try to read it will result in zero bytes available.</p>\n\n<p>Shouldn't the hint be something like <code>ReadHint::hup()</code>?</p>\n"}, {"tags": ["rust", "qemu", "arm64", "osdev"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433952260, "post_id": 30758232, "comment_id": 49575890, "body": "This sounds like a bug report, not a question. If so, it should be <a href=\"https://github.com/rust-lang/rust/issues\" rel=\"nofollow noreferrer\">filed on the Github repo</a>."}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433954039, "post_id": 30758232, "comment_id": 49577025, "body": "I&#39;m not sure that this is a bug. Maybe I missed some mandatory CPU initialisation step in start.s."}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433962682, "post_id": 30758232, "comment_id": 49582379, "body": "I don&#39;t see anything obviously wrong with the produced code. Could you post a disassembly of the code with opt-level=3? Also FYI you will probably have to do a bootstrap phase in C to set up some pagetables, as in my experience Rust generates unaligned accesses (that I could not disable), and unaligned accesses are forbidden before setting up pagetables. (note: I don&#39;t know if qemu emulates this behaviour)"}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1433963412, "post_id": 30758232, "comment_id": 49582803, "body": "Just added into the question&#39;s body."}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433966453, "post_id": 30758232, "comment_id": 49584421, "body": "Well I don&#39;t see any difference in the code that could explain that your program both prints something (thus gets pretty far) and then loops. And as I don&#39;t have a development environment set up at the moment it is hard for me to do proper tests. A wild guess would be that you somehow get an exception somewhere and it could explain the loop (you didn&#39;t set up an exception vector), but I can&#39;t see how the instructions executed after the <code>strb</code> could lead to an exception ..."}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1433966665, "post_id": 30758232, "comment_id": 49584518, "body": "Yes, it&#39;s really strange. The code seems to be quite correct. Maybe it&#39;s a bug in QEMU?"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433967042, "post_id": 30758232, "comment_id": 49584722, "body": "Might be ... I guess you could try with ARM free (but closed source) emulator Foundation Model, but you would have to change the memory map."}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1433967413, "post_id": 30758232, "comment_id": 49584959, "body": "Isn&#39;t it initially mapped as 1:1?"}, {"owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "edited": false, "score": 0, "creation_date": 1433967990, "post_id": 30758232, "comment_id": 49585318, "body": "No I mean that as far as I remember the PL011 is mapped somewhere else. I also think that you would have to make sure your code is in the boot rom, and the stack somewhere in the SRAM."}, {"owner": {"reputation": 18029, "user_id": 3156750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/73e00c291e7b746a34f28622a64f0492?s=128&d=identicon&r=PG&f=1", "display_name": "Notlikethat", "link": "https://stackoverflow.com/users/3156750/notlikethat"}, "edited": false, "score": 2, "creation_date": 1433975454, "post_id": 30758232, "comment_id": 49588941, "body": "Is your stack area actually writable memory? I don&#39;t know how faithfully QEMU behaves simulating hardware responses with the MMU off, but if the pushes go nowhere, and at the end of <code>boot</code> the pop of the return address reads as zero, then the fun would begin..."}, {"owner": {"reputation": 18029, "user_id": 3156750, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/73e00c291e7b746a34f28622a64f0492?s=128&d=identicon&r=PG&f=1", "display_name": "Notlikethat", "link": "https://stackoverflow.com/users/3156750/notlikethat"}, "edited": false, "score": 2, "creation_date": 1433976801, "post_id": 30758232, "comment_id": 49589402, "body": "From a brief poke around I don&#39;t see any machines that qemu-system-aarch64 emulates other than mach-virt, and according to what I can only assume is <a href=\"http://git.qemu.org/?p=qemu.git;a=blob;f=hw/arm/virt.c;h=1b1cc716add0d85a004bc71cc4ad4f077816a5a3;hb=HEAD#l112\" rel=\"nofollow noreferrer\">the relevant memory map</a> your stack is pointing at the boot ROM - one can imagine how successful that&#39;s likely to be ;)"}], "answers": [{"comments": [{"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1434344754, "post_id": 30773675, "comment_id": 49719612, "body": "I&#39;ve just added an offset statement in linker script: . = 1024M;"}], "tags": [], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "is_accepted": true, "score": 1, "last_activity_date": 1434369076, "last_edit_date": 1495541738, "creation_date": 1434005631, "answer_id": 30773675, "question_id": 30758232, "link": "https://stackoverflow.com/questions/30758232/rustc-llvm-generates-faulty-code-for-aarch64-with-opt-level-0/30773675#30773675", "title": "Rustc/LLVM generates faulty code for aarch64 with opt-level=0", "body": "<p>I've succeeded to run the non-optimised code without abnormalities. Thanks to <a href=\"https://stackoverflow.com/users/3156750/notlikethat\">Notlikethat</a> for the idea. My stack was just mapped into readonly memory.</p>\n\n<p>So I've just added the offset statement into my linker script (\". = 1024M;\") in order to make all the symbols to start from 1GiB (where RAM begins). After this modification the code started to work properly.</p>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 276, "favorite_count": 0, "accepted_answer_id": 30773675, "answer_count": 1, "score": 5, "last_activity_date": 1434369076, "creation_date": 1433943985, "last_edit_date": 1433967733, "question_id": 30758232, "link": "https://stackoverflow.com/questions/30758232/rustc-llvm-generates-faulty-code-for-aarch64-with-opt-level-0", "title": "Rustc/LLVM generates faulty code for aarch64 with opt-level=0", "body": "<p>I have two files which are assembled/compiled/linked into minimalistic kernel.</p>\n\n<p>start.s:</p>\n\n<pre><code>    .set CPACR_EL1_FPEN, 0b11 &lt;&lt; 20\n\n    .set BOOT_STACK_SIZE, 8 * 1024\n\n    .global __boot_stack\n    .global __start\n    .global __halt\n\n    .bss\n    .align 16\n__boot_stack:\n    .fill BOOT_STACK_SIZE\n\n    .text\n__start:\n    /* disable FP and SIMD traps */\n    mov x0, #CPACR_EL1_FPEN\n    msr cpacr_el1, x0\n\n    /* set stack */\n    adr x0, __boot_stack\n    add sp, x0, #BOOT_STACK_SIZE\n\n    /* call the Rust entry point */\n    bl __boot\n\n__halt:\n    /* halt CPU */\n    wfi\n    b __halt\n</code></pre>\n\n<p>boot.rs:</p>\n\n<pre><code>#[no_mangle]\npub extern fn __boot() {\n    unsafe {\n        let ptr = 0x9000000 as *mut u8;\n        *ptr = '!' as u8;\n   }\n}\n</code></pre>\n\n<p>For opt-level=3 the resulting code outputs single '!' to a serial port (as was intended). For opt-level=0 I have a strange infinite loop (e.g. '!!!!!!!!!....'). Here is the disassembled dump of the problematic code:</p>\n\n<pre><code>0000000000000000 &lt;__kernel_begin&gt;:\n   0:   d2a00600    mov x0, #0x300000               // #3145728\n   4:   d5181040    msr cpacr_el1, x0\n   8:   100007c0    adr x0, 100 &lt;__boot_stack&gt;\n   c:   9140081f    add sp, x0, #0x2, lsl #12\n  10:   94000003    bl  1c &lt;__boot&gt;\n\n0000000000000014 &lt;__halt&gt;:\n  14:   d503207f    wfi\n  18:   17ffffff    b   14 &lt;__halt&gt;\n\n000000000000001c &lt;__boot&gt;:\n  1c:   a9bf7bfd    stp x29, x30, [sp,#-16]!\n  20:   910003fd    mov x29, sp\n  24:   94000003    bl  30 &lt;aarch64::boot::__boot::__rust_abi&gt;\n  28:   a8c17bfd    ldp x29, x30, [sp],#16\n  2c:   d65f03c0    ret\n\n0000000000000030 &lt;aarch64::boot::__boot::__rust_abi&gt;:\n  30:   d10043ff    sub sp, sp, #0x10\n  34:   52a12008    mov w8, #0x9000000              // #150994944\n  38:   2a0803e9    mov w9, w8\n  3c:   f90007e9    str x9, [sp,#8]\n  40:   52800428    mov w8, #0x21                   // #33\n  44:   39000128    strb    w8, [x9]\n  48:   910043ff    add sp, sp, #0x10\n  4c:   d65f03c0    ret\n</code></pre>\n\n<p>The code is tested using qemu-system-aarch64. I don't see serious problems with it (except redundancy). Can you suggest a possible cause of such abnormal behaviour?</p>\n\n<p>P.S. This is the optimised version which works properly:</p>\n\n<pre><code>0000000000000000 &lt;__kernel_begin&gt;:\n   0:   d2a00600    mov x0, #0x300000               // #3145728\n   4:   d5181040    msr cpacr_el1, x0\n   8:   1007ffc0    adr x0, 10000 &lt;__boot_stack&gt;\n   c:   9140081f    add sp, x0, #0x2, lsl #12\n  10:   94000003    bl  1c &lt;__boot&gt;\n\n0000000000000014 &lt;__halt&gt;:\n  14:   d503207f    wfi\n  18:   17ffffff    b   14 &lt;__halt&gt;\n\n000000000000001c &lt;__boot&gt;:\n  1c:   52a12008    mov w8, #0x9000000              // #150994944\n  20:   52800429    mov w9, #0x21                   // #33\n  24:   39000109    strb    w9, [x8]\n  28:   d65f03c0    ret\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": false, "score": 9, "last_activity_date": 1454320571, "last_edit_date": 1454320571, "creation_date": 1433974650, "answer_id": 30768272, "question_id": 30757914, "link": "https://stackoverflow.com/questions/30757914/can-i-mark-a-function-as-deprecated/30768272#30768272", "title": "Can I mark a function as deprecated?", "body": "<p><strong>Update:</strong> <code>#[deprecated]</code> is currently (as of February 2016) available in nightly. It should be available in stable around about the beginning of March 2016.</p>\n\n<p>There's no way to do this in external libraries, yet.</p>\n\n<p>Doing it is very desirable (I've certainly wanted it several times), but the decision was made to focus design and implementation efforts on functionality that was needed by the standard library at 1.0, and postpone optimising a design for external libraries until later. The <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md\" rel=\"nofollow\">RFC</a> discusses it a little:</p>\n\n<blockquote>\n  <p>It's important to note that these stability attributes are only known to be useful to the standard distribution, because of the explicit linkage to language versions and release channels. [...]. A general mechanism for indicating API stability will be reconsidered in the future.</p>\n  \n  <p>[...]</p>\n  \n  <p>With respect to stability attributes and Cargo, the proposed design is very specific to the standard library and the Rust compiler without being intended for use by third-party libraries. It is planned to extend Cargo's own support for features (distinct from Rust features) to enable this form of feature development in a first-class method through Cargo. At this time, however, there are no concrete plans for this design and it is unlikely to happen soon.</p>\n</blockquote>\n\n<p>There was significant discussion on the pull request itself too:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/507#discussion-diff-22027318\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/pull/507#discussion-diff-22027318</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/507#issuecomment-68570789\" rel=\"nofollow\">https://github.com/rust-lang/rfcs/pull/507#issuecomment-68570789</a> (summary comment)</li>\n</ul>\n\n<p>(That RFC is the canonical source for information about this.)</p>\n\n<blockquote>\n  <p>I have no experience, but I'm considering experimenting with compiler plugins and custom attributes, but I guess that would require the consumer to also use the plugin, which is maybe unreasonable (or may be an unreasonable amount of work for me to implement?)</p>\n</blockquote>\n\n<p>Yes, it would require the consumer to use the plugin, and I'm not totally sure if the compiler makes it easy for a plugin to get all the information it needs to emulate the current built-in <code>#[deprecated]</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 4509, "user_id": 740067, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b5ab928a16fe85b254a9cb182307d48a?s=128&d=identicon&r=PG", "display_name": "xliiv", "link": "https://stackoverflow.com/users/740067/xliiv"}, "edited": false, "score": 0, "creation_date": 1552939794, "post_id": 37766834, "comment_id": 97193065, "body": "Does it work? I&#39;m getting ``` error: This deprecation annotation is useless                                                                                               = note: #[warn(unused_imports)] on by default   ```"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "reply_to_user": {"reputation": 4509, "user_id": 740067, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/b5ab928a16fe85b254a9cb182307d48a?s=128&d=identicon&r=PG", "display_name": "xliiv", "link": "https://stackoverflow.com/users/740067/xliiv"}, "edited": false, "score": 2, "creation_date": 1552996431, "post_id": 37766834, "comment_id": 97213440, "body": "@xliiv You can&#39;t put a deprecated attribute inside an <code>impl Trait for Type</code>. Put the attribute directly on the method inside <code>trait Trait</code> instead."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 31, "last_activity_date": 1465667358, "creation_date": 1465667358, "answer_id": 37766834, "question_id": 30757914, "link": "https://stackoverflow.com/questions/30757914/can-i-mark-a-function-as-deprecated/37766834#37766834", "title": "Can I mark a function as deprecated?", "body": "<p>Since <a href=\"https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-190-2016-05-26\">Rust 1.9.0 (2016 May 26th)</a> you can use the <code>#[deprecated]</code> attribute in your own crates (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1270-deprecation.md\">RFC 1270</a>). The syntax is:</p>\n\n<pre><code>#[deprecated(since=\"0.5.0\", note=\"please use `new_method` instead\")]\npub fn old_method() { ..; }\n</code></pre>\n\n<p>It will throw the following warning whenever you use <code>old_method</code>:</p>\n\n<pre><code>&lt;anon&gt;:6:5: 6:15 warning: use of deprecated item: please use `new_method` instead, #[warn(deprecated)] on by default\n&lt;anon&gt;:6     old_method()\n             ^~~~~~~~~~\n</code></pre>\n\n<p>You may find more information in the RFC.</p>\n"}], "owner": {"reputation": 65308, "user_id": 2556117, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/cde5c1d8e38358013a16a3f7a686ae87?s=128&d=identicon&r=PG", "display_name": "Fraser", "link": "https://stackoverflow.com/users/2556117/fraser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4010, "favorite_count": 2, "accepted_answer_id": 37766834, "answer_count": 2, "score": 36, "last_activity_date": 1465667358, "creation_date": 1433943160, "last_edit_date": 1433955655, "question_id": 30757914, "link": "https://stackoverflow.com/questions/30757914/can-i-mark-a-function-as-deprecated", "title": "Can I mark a function as deprecated?", "body": "<p>I'd like to mark functions/methods as deprecated.  I tried to apply the <code>deprecated</code> attribute:</p>\n\n<pre><code>#[deprecated]\nfn old_way_of_doing_it() {\n</code></pre>\n\n<p>but this yields an error:</p>\n\n<blockquote>\n<pre><code>error: stability attributes may not be used outside of the standard library\n</code></pre>\n</blockquote>\n\n<p>Is there a way in which I can have the compiler warn a consumer of my library that a function is deprecated?</p>\n\n<p>I have no experience, but I'm considering experimenting with compiler plugins and custom attributes, but I guess that would require the consumer to also use the plugin, which is maybe unreasonable (or may be an unreasonable amount of work for me to implement?)</p>\n\n<p>As a side question out of curiosity, why is the deprecated attribute only applicable to the standard library?</p>\n"}, {"tags": ["vim", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 195, "user_id": 4598879, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0804833fc4f55c51b042eb05c6cb303a?s=128&d=identicon&r=PG&f=1", "display_name": "hakononakani", "link": "https://stackoverflow.com/users/4598879/hakononakani"}, "edited": false, "score": 0, "creation_date": 1433947652, "post_id": 30758978, "comment_id": 49572459, "body": "Now that was helpful, did I get it right that <code>~&#47;.multirust&#47;...&#47;git&#47;checkouts</code> will then be the correct value for <code>$RUST_SRC_PATH</code>?"}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "reply_to_user": {"reputation": 195, "user_id": 4598879, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0804833fc4f55c51b042eb05c6cb303a?s=128&d=identicon&r=PG&f=1", "display_name": "hakononakani", "link": "https://stackoverflow.com/users/4598879/hakononakani"}, "edited": false, "score": 0, "creation_date": 1433948391, "post_id": 30758978, "comment_id": 49573077, "body": "@hakononakani: Unfortunately, that&#39;s not the case. The correct RUST_SRC_PATH would be wherever you git clone the rust repository. <code>~&#47;.multirust&#47;toolchains&#47;*&#47;git&#47;checkouts</code> will contain the code of crates you downloaded, but you can&#39;t (yet) rely on auto-completion based on that code. There&#39;s <a href=\"https://github.com/phildawes/racer/issues/264\" rel=\"nofollow noreferrer\">a GitHub issue for that</a>. racer might automatically look in <code>~&#47;.cargo</code> for the code of certain crates, but it doesn&#39;t appear to be reliable yet."}, {"owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "reply_to_user": {"reputation": 195, "user_id": 4598879, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0804833fc4f55c51b042eb05c6cb303a?s=128&d=identicon&r=PG&f=1", "display_name": "hakononakani", "link": "https://stackoverflow.com/users/4598879/hakononakani"}, "edited": false, "score": 0, "creation_date": 1433948555, "post_id": 30758978, "comment_id": 49573207, "body": "@hakononakani: <a href=\"https://github.com/phildawes/racer/blob/3827cf13b2f8be71c27285cd7c017a4701d0c2b7/src/racer/cargo.rs#L57-L80\" rel=\"nofollow noreferrer\">It appears</a> that racer will also inspect crates downloaded with multirust."}], "tags": [], "owner": {"reputation": 4391, "user_id": 1768238, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/664064d00df3f2536ec209ab5df7df4c?s=128&d=identicon&r=PG", "display_name": "tilpner", "link": "https://stackoverflow.com/users/1768238/tilpner"}, "is_accepted": true, "score": 1, "last_activity_date": 1433945716, "creation_date": 1433945716, "answer_id": 30758978, "question_id": 30757349, "link": "https://stackoverflow.com/questions/30757349/right-way-to-set-up-rust-using-vim/30758978#30758978", "title": "Right way to set up Rust using Vim", "body": "<blockquote>\n  <p>The plugin needs setting up the src location for rust which is in fact not that big of a deal, if I would know where said directory was</p>\n</blockquote>\n\n<p>I couldn't find the sources either. If you just want the sources without all the history:</p>\n\n<p>For 1.0.0,</p>\n\n<pre><code>git clone --depth=1 --branch 1.0.0 --single-branch https://github.com/rust-lang/rust/\n</code></pre>\n\n<p>or for nightly</p>\n\n<pre><code>git clone --depth=1 --single-branch https://github.com/rust-lang/rust/\n</code></pre>\n\n<blockquote>\n  <p>Second I've looked through the cargo docs and and didn't find anything to where the extern dependencies are cloned into (wouldn't this be the source directory?)</p>\n</blockquote>\n\n<p>In the standard installation, there's a directory <code>.cargo</code> in your home directory, which contains <code>git/checkouts</code> for the cloned crates.</p>\n\n<p>You should probably try <a href=\"https://github.com/brson/multirust\" rel=\"nofollow\">multirust</a> though, which allows you to easily manage multiple Rust installations in <code>~/.multirust</code>.</p>\n\n<p>With multirust, your crate checkouts might be in e.g. <code>~/.multirust/toolchains/nightly/cargo/git/checkouts</code>, not <code>~/.cargo/git/checkout</code>.</p>\n\n<blockquote>\n  <p>Is the quint essence to clone the rust repository and build it yourself?</p>\n</blockquote>\n\n<p>No, that's luckily not necessary anymore, unless you're working on the compiler/stdlibs, or trying to cross-compile. With multirust, updating is reduced to <code>multirust update</code> or <code>multirust update nightly</code>, etc.</p>\n"}], "owner": {"reputation": 195, "user_id": 4598879, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0804833fc4f55c51b042eb05c6cb303a?s=128&d=identicon&r=PG&f=1", "display_name": "hakononakani", "link": "https://stackoverflow.com/users/4598879/hakononakani"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2178, "favorite_count": 0, "accepted_answer_id": 30758978, "answer_count": 1, "score": 3, "last_activity_date": 1434326991, "creation_date": 1433941818, "last_edit_date": 1434326991, "question_id": 30757349, "link": "https://stackoverflow.com/questions/30757349/right-way-to-set-up-rust-using-vim", "title": "Right way to set up Rust using Vim", "body": "<p>I've finally started to dive into <a href=\"http://www.rust-lang.org/\" rel=\"nofollow\">Rust</a> and want to clarify some issues when it comes to setting up everything nicely.</p>\n\n<p>I'm using vim on Linux and found a nice plugin for syntax highlighting. Autocompletion is somewhat troublesome though, using phildawes/racer.</p>\n\n<p>The plugin needs the src location for Rust which is in fact not that big of a deal, if I would know where said directory was (I only found the binaries and libs when using the suggested <code>curl &lt;...&gt; | sh</code> install). The sources are downloadable separately, although I didn't find an install for Rust that sets up the sources in let's say e.g. /usr/local/src/rust only the binaries and libs.</p>\n\n<p>Second I've looked through the Cargo docs and and didn't find anything to where the extern dependencies are cloned into (wouldn't this be the source directory?)</p>\n\n<p>Also should the Rust sources be updated setting up everything manually is kind of lame?</p>\n\n<p>Is the quintessence to clone the Rust repository and build it yourself?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1433926011, "post_id": 30751117, "comment_id": 49556937, "body": "I&#39;d just like to pre-emptively ask for some more information.  The only cogent answer I could give at the moment is: &quot;what you&#39;re asking for is impossible&quot;.  Can you explain what all the generic types are for?  Do they <i>really</i> need to be generic, or is it acceptable for an implementation of, say, the ActorSpawner trait to <i>dictate</i> the specific ActorRef/Actor/Message combination to the caller?"}, {"owner": {"reputation": 168, "user_id": 593887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eafa2b71948957b4a1acff879967b846?s=128&d=identicon&r=PG", "display_name": "Peter Kolloch", "link": "https://stackoverflow.com/users/593887/peter-kolloch"}, "edited": false, "score": 0, "creation_date": 1433972199, "post_id": 30751117, "comment_id": 49587671, "body": "Hi DK, actually it would be acceptable if the ActorSpawner would dictate the types of ActorRefs it produces. But since kers solution doesn&#39;t require it, there is no reason to. Thanks for your interest into this question, anyways!"}], "answers": [{"comments": [{"owner": {"reputation": 168, "user_id": 593887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eafa2b71948957b4a1acff879967b846?s=128&d=identicon&r=PG", "display_name": "Peter Kolloch", "link": "https://stackoverflow.com/users/593887/peter-kolloch"}, "edited": false, "score": 0, "creation_date": 1433971161, "post_id": 30752269, "comment_id": 49587117, "body": "Thank you, @ker! That was something I tried but didn&#39;t realise that I need either the nightly rust for or an additional Box."}, {"owner": {"reputation": 168, "user_id": 593887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eafa2b71948957b4a1acff879967b846?s=128&d=identicon&r=PG", "display_name": "Peter Kolloch", "link": "https://stackoverflow.com/users/593887/peter-kolloch"}, "edited": false, "score": 0, "creation_date": 1433972035, "post_id": 30752269, "comment_id": 49587585, "body": "I hope, I explained the idea of the code in question now in an understandable fashion. Thanks again for your help."}, {"owner": {"reputation": 168, "user_id": 593887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eafa2b71948957b4a1acff879967b846?s=128&d=identicon&r=PG", "display_name": "Peter Kolloch", "link": "https://stackoverflow.com/users/593887/peter-kolloch"}, "edited": false, "score": 0, "creation_date": 1433972475, "post_id": 30752269, "comment_id": 49587799, "body": "I extended/changed your playpen a little bit by adding a self argument and a litte example of using the code: <a href=\"http://is.gd/AIWMgs\" rel=\"nofollow noreferrer\">is.gd/AIWMgs</a>"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 4, "last_activity_date": 1495943086, "last_edit_date": 1495943086, "creation_date": 1433928178, "answer_id": 30752269, "question_id": 30751117, "link": "https://stackoverflow.com/questions/30751117/how-to-implement-a-factory-trait-that-returns-generic-values-with-a-matching-typ/30752269#30752269", "title": "How to implement a factory trait that returns generic values with a matching type parameter?", "body": "<blockquote>\n  <p>Is it possible to implement <code>ActorSpawner::spawn</code></p>\n</blockquote>\n\n<p><a href=\"https://play.rust-lang.org/?gist=86bcf4601ae8d97ea3dc2cd54ddb3fbd&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Yes</a>, but there's no useful implementation as I see it</p>\n\n<blockquote>\n  <p>or to achieve something similar with another signature</p>\n</blockquote>\n\n<p>I believe you were expecting an <code>Arc&lt;ActorRef&lt;Message&gt;&gt;</code> to be returned. So you could use the <code>DeadActorSpawner</code> through the <code>ActorSpawner</code> trait without knowing about the <code>Dead</code>* types.</p>\n\n<p>What you actually did was to attempt to specialize the <code>spawn</code> function to return an <code>Arc&lt;DeadRef&gt;</code>. I modified your <code>ActorSpawner</code> to return a trait-object: </p>\n\n<pre><code>pub trait ActorSpawner {\n    fn spawn&lt;Message, A&gt;(actor: A) -&gt; Arc&lt;ActorRef&lt;Message&gt;&gt; where A: Actor&lt;Message&gt;;\n}\n\nstruct DeadActorSpawner;\nimpl ActorSpawner for DeadActorSpawner {\n    fn spawn&lt;Message, A&gt;(actor: A) -&gt; Arc&lt;ActorRef&lt;Message&gt;&gt;\n        where A: Actor&lt;Message&gt;\n    {\n        Arc::new(DeadRef)\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4a0087e18b5a57b21faca4d0d2ae55df&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground example</a></p>\n"}], "owner": {"reputation": 168, "user_id": 593887, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eafa2b71948957b4a1acff879967b846?s=128&d=identicon&r=PG", "display_name": "Peter Kolloch", "link": "https://stackoverflow.com/users/593887/peter-kolloch"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 991, "favorite_count": 1, "accepted_answer_id": 30752269, "answer_count": 1, "score": 6, "last_activity_date": 1495943086, "creation_date": 1433925202, "last_edit_date": 1495942901, "question_id": 30751117, "link": "https://stackoverflow.com/questions/30751117/how-to-implement-a-factory-trait-that-returns-generic-values-with-a-matching-typ", "title": "How to implement a factory trait that returns generic values with a matching type parameter?", "body": "<p>Consider the following code (simplified but compilable):</p>\n\n<pre><code>use std::sync::Arc;\n\npub trait ActorRef&lt;Message&gt; { /* ... */ }\npub trait Actor&lt;Message&gt; { /* ... */ }\npub trait ActorSpawner {\n    /// Spawns a new actor returning an actor ref \n    /// for passing messages to it.\n    fn spawn&lt;Message,A,R&gt;(actor: A) -&gt; Arc&lt;R&gt;\n        where R: ActorRef&lt;Message&gt;, A: Actor&lt;Message&gt;;\n}\n</code></pre>\n\n<p>Is it possible to implement <code>ActorSpawner::spawn</code> or to achieve something similar with another signature?</p>\n\n<h1>The idea</h1>\n\n<p>The code in the question is simplified to reduce it to the core parts that I couldn't solve.</p>\n\n<p>In general, an <code>Actor</code> should have mutable state which is changed by the processing messages (a process method is missing from the example). You can spawn an <code>Actor</code> and can communicate with it via an <code>ActorRef</code> (the send method is missing from the example).</p>\n\n<p>I want to allow different ways of \"spawning\" an <code>Actor</code>. E.g. the message processing might happen on one thread per actor. Or the processing might be done on a thread pool which is shared by other actors.</p>\n\n<p>Other code might depend on creating further actors. The underlying mechanism used should be abstracted. Since the trait <code>ActorSpawner</code>.</p>\n\n<h1>My attempts to solve it</h1>\n\n<p>Let's assume that we have some dummy implementations for <code>Actor</code> and <code>ActorRef</code>:</p>\n\n<pre><code>struct NoopActor;\nimpl&lt;Message&gt; Actor&lt;Message&gt; for NoopActor {}\n\nstruct DeadRef;\nimpl&lt;Message&gt; ActorRef&lt;Message&gt; for DeadRef {}\n</code></pre>\n\n<p>It should now be possible to implement the trait somehow using these dummy implementations.</p>\n\n<p>This is my first attempt:</p>\n\n<pre><code>struct DeadActorSpawner;\nimpl ActorSpawner for DeadActorSpawner {\n    fn spawn&lt;Message,A,R&gt;(actor: A) -&gt; Arc&lt;R&gt;\n        where R: ActorRef&lt;Message&gt;, A: Actor&lt;Message&gt; \n    {\n        Arc::new(DeadRef)\n    }\n}\n</code></pre>\n\n<p>resulting in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:29:18\n   |\n29 |         Arc::new(DeadRef)\n   |                  ^^^^^^^ expected type parameter, found struct `DeadRef`\n   |\n   = note: expected type `R`\n              found type `DeadRef`\n</code></pre>\n\n<p>Or another one:</p>\n\n<pre><code>struct DeadActorSpawner;\nimpl ActorSpawner for DeadActorSpawner {\n    fn spawn&lt;Message,A,R&gt;(actor: A) -&gt; Arc&lt;DeadRef&gt;\n    {\n        Arc::new(DeadRef)\n    }\n}\n</code></pre>\n\n<p>resulting in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0053]: method `spawn` has an incompatible type for trait\n  --&gt; src/main.rs:25:42\n   |\n12 |     fn spawn&lt;Message, A, R&gt;(actor: A) -&gt; Arc&lt;R&gt;\n   |                                          ------ type in trait\n...\n25 |     fn spawn&lt;Message, A, R&gt;(actor: A) -&gt; Arc&lt;DeadRef&gt; {\n   |                                          ^^^^^^^^^^^^ expected type parameter, found struct `DeadRef`\n   |\n   = note: expected type `fn(A) -&gt; std::sync::Arc&lt;R&gt;`\n              found type `fn(A) -&gt; std::sync::Arc&lt;DeadRef&gt;`\n</code></pre>\n\n<p>I have tried numerous other things to no avail including using associated types for the <code>Message</code> in <code>Actor</code> and <code>ActorRef</code>.</p>\n"}, {"tags": ["buffer", "rust", "slice", "mutable"], "answers": [{"comments": [{"owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "edited": false, "score": 0, "creation_date": 1433957576, "post_id": 30750115, "comment_id": 49579223, "body": "My concern is with reallocations. How can I find out if the <code>vec!</code> macro does a <code>with_capacity</code>?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 5, "last_activity_date": 1433922154, "creation_date": 1433922154, "answer_id": 30750115, "question_id": 30749918, "link": "https://stackoverflow.com/questions/30749918/creating-byte-buffers-in-rust/30750115#30750115", "title": "Creating byte buffers in rust", "body": "<p>You could just create the vec with a given size directly:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>vec![0; num_points]\n</code></pre>\n\n<p>Or use iterators:</p>\n\n<pre><code>repeat(0).take(num_points).collect::&lt;Vec&lt;_&gt;&gt;()\n</code></pre>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6409, "favorite_count": 0, "closed_date": 1433923001, "accepted_answer_id": 30750115, "answer_count": 1, "score": 4, "last_activity_date": 1433922154, "creation_date": 1433921607, "question_id": 30749918, "link": "https://stackoverflow.com/questions/30749918/creating-byte-buffers-in-rust", "closed_reason": "Duplicate", "title": "Creating byte buffers in rust", "body": "<p>What is the most efficient way to get access to <code>&amp;mut [u8]</code>? Right now I'm borrowing from a Vec but it would be easier to just allocate the buffer more directly.</p>\n\n<p>The best I can do right now is to preallocate a vector then push out its length but there is no way this is idiomatic.</p>\n\n<pre><code>    let mut points_buf : Vec&lt;u8&gt; = Vec::with_capacity(points.len() * point::POINT_SIZE);\n    for _ in (0..points_buf.capacity()) {\n        points_buf.push(0);\n    }\n    file.read(&amp;mut points_buf[..]).unwrap();\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 147, "user_id": 1332945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f82b072350910616eda0107349492f65?s=128&d=identicon&r=PG", "display_name": "siyu", "link": "https://stackoverflow.com/users/1332945/siyu"}, "edited": false, "score": 0, "creation_date": 1433905423, "post_id": 30746351, "comment_id": 49547820, "body": "Thanks! Why doest rust implement add trait for reference then?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 147, "user_id": 1332945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f82b072350910616eda0107349492f65?s=128&d=identicon&r=PG", "display_name": "siyu", "link": "https://stackoverflow.com/users/1332945/siyu"}, "edited": false, "score": 0, "creation_date": 1433905591, "post_id": 30746351, "comment_id": 49547851, "body": "@siyu it does - that&#39;s the snippet of code I pasted. However, it doesn&#39;t implement the trait for a double-reference and a value, which is what your case is."}, {"owner": {"reputation": 147, "user_id": 1332945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f82b072350910616eda0107349492f65?s=128&d=identicon&r=PG", "display_name": "siyu", "link": "https://stackoverflow.com/users/1332945/siyu"}, "edited": false, "score": 0, "creation_date": 1433905839, "post_id": 30746351, "comment_id": 49547897, "body": "Yes. But why do it when it makes things so confusing? (I can&#39;t know whether something is an integer or a reference to an integer in a glance)"}, {"owner": {"reputation": 147, "user_id": 1332945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f82b072350910616eda0107349492f65?s=128&d=identicon&r=PG", "display_name": "siyu", "link": "https://stackoverflow.com/users/1332945/siyu"}, "edited": false, "score": 0, "creation_date": 1433905915, "post_id": 30746351, "comment_id": 49547916, "body": "Typo in first comment: doest -&gt; does"}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433916331, "post_id": 30746351, "comment_id": 49551025, "body": "siyu@ doubly inderected references are actually quite rare in real-world code. You can dereference manually with <code>*x</code>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1433958549, "last_edit_date": 1433958549, "creation_date": 1433905179, "answer_id": 30746351, "question_id": 30746212, "link": "https://stackoverflow.com/questions/30746212/what-does-actually-do/30746351#30746351", "title": "What does &amp; actually do?", "body": "<p><code>&amp;</code> takes the reference of the operand. This can be thought of as finding the memory address that the value is stored at.</p>\n\n<p>Your example works because <code>+</code> is implemented using the <a href=\"http://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"nofollow\"><code>Add</code> trait</a>, which has the following variants:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Add&lt;i32&gt; for i32\nimpl&lt;'a&gt; Add&lt;i32&gt; for &amp;'a i32\nimpl&lt;'a&gt; Add&lt;&amp;'a i32&gt; for i32\nimpl&lt;'a, 'b&gt; Add&lt;&amp;'a i32&gt; for &amp;'b i32\n</code></pre>\n\n<p>That is, you can add any pair of references and non-references. However, your second example would have two levels of indirection (<code>&amp;&amp;i32</code>), and the <code>Add</code> trait isn't implemented for that many levels of reference.</p>\n"}], "owner": {"reputation": 147, "user_id": 1332945, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f82b072350910616eda0107349492f65?s=128&d=identicon&r=PG", "display_name": "siyu", "link": "https://stackoverflow.com/users/1332945/siyu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 30746351, "answer_count": 1, "score": 4, "last_activity_date": 1433958549, "creation_date": 1433904333, "last_edit_date": 1433904895, "question_id": 30746212, "link": "https://stackoverflow.com/questions/30746212/what-does-actually-do", "title": "What does &amp; actually do?", "body": "<p>I am trying to understand Rust's reference.</p>\n\n<pre><code>fn main() {\n    let x: i32 = 0;\n    println!(\"{}\", x+1); // this works\n    println!(\"{}\", (&amp;x)+1); // this works\n    //println!(\"{}\", (&amp;(&amp;x))+1); // but this failed\n}\n</code></pre>\n\n<p>What I get:</p>\n\n<pre><code>    1\n    1\n</code></pre>\n\n<p>What does <code>&amp;</code> actually do? Why can <code>&amp;x</code> be added like it is an integer but not <code>&amp;(&amp;x)</code>?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433896928, "post_id": 30745077, "comment_id": 49545888, "body": "Your question doesn&#39;t actually specify your file layout or where <code>Query</code> is actually defined."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1433897043, "creation_date": 1433897043, "answer_id": 30745238, "question_id": 30745077, "link": "https://stackoverflow.com/questions/30745077/use-of-undeclared-type-that-is-defined-in-another-file/30745238#30745238", "title": "Use of undeclared type that is defined in another file", "body": "<p>This is documented in the Rust book, specifically the <a href=\"http://doc.rust-lang.org/stable/book/crates-and-modules.html#importing-modules-with-use\" rel=\"noreferrer\">section on modules</a>. When you have different modules, you need to bring items from the other modules into scope using the <code>use</code> keyword.</p>\n\n<pre><code>mod query {\n    pub struct Query;\n}\n\n// Bring Query into scope\nuse query::Query;\n\nstruct Row(Vec&lt;Query&gt;);\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 325, "user_id": 3864563, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/42e13fd8a963ff46905794b6ac1927cb?s=128&d=identicon&r=PG&f=1", "display_name": "user3864563", "link": "https://stackoverflow.com/users/3864563/user3864563"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 593, "favorite_count": 0, "accepted_answer_id": 30745238, "answer_count": 1, "score": -5, "last_activity_date": 1433897043, "creation_date": 1433895722, "last_edit_date": 1433896882, "question_id": 30745077, "link": "https://stackoverflow.com/questions/30745077/use-of-undeclared-type-that-is-defined-in-another-file", "title": "Use of undeclared type that is defined in another file", "body": "<p>So, I have a hierarchy of files that have their own classes. Here is an example:</p>\n\n<pre><code>mod query;\n\nstruct Row&lt;T&gt;{\n    data: Vec&lt;Query&lt;T&gt;&gt;,\n}\n\nimpl&lt;T&gt; Row&lt;T&gt;{\n    fn new(array: Vec&lt;Query&lt;T&gt;&gt;) -&gt; Row&lt;T&gt;{\n        Row{\n          data: array,\n        }\n    }\n}\n</code></pre>\n\n<p>Although it says the files are there, it says that \"Query is an undeclared type,\" even when it exists in another file. The code works when everything is in the same file.</p>\n"}, {"tags": ["rust", "deprecated"], "answers": [{"comments": [{"owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 0, "creation_date": 1433890964, "post_id": 30744186, "comment_id": 49544277, "body": "Aha, you&#39;re right. Looks like the <code>#[deny(deprecated)]</code> is <a href=\"https://github.com/servo/string-cache/blob/45f19068decb55c6e328efc4dcb1544f82aa5b35/src/lib.rs#L15\" rel=\"nofollow noreferrer\">set by the library itself</a>. Can I override it?"}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "reply_to_user": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "edited": false, "score": 1, "creation_date": 1433892670, "post_id": 30744186, "comment_id": 49544805, "body": "@WilfredHughes: no, you cannot change the code of crates you depend on."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 3, "creation_date": 1433914788, "post_id": 30744186, "comment_id": 49550387, "body": "@Chris Morgan: short of forking the code (where available) and depending on your own fork."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1433890363, "creation_date": 1433890363, "answer_id": 30744186, "question_id": 30744105, "link": "https://stackoverflow.com/questions/30744105/how-do-i-allow-deprecated-features/30744186#30744186", "title": "How do I allow deprecated features?", "body": "<p>The compiler doesn't impose any restrictions on the usage of deprecated methods by default:</p>\n\n<pre><code>fn main() {\n   (32.0f64).is_positive();\n}\n</code></pre>\n\n<p>Compiles, but has the warning:</p>\n\n<pre><code>warning: use of deprecated item: renamed to is_sign_positive, #[warn(deprecated)] on by default\n</code></pre>\n\n<p>Your error message helps point to the culprit:</p>\n\n<pre><code>#[deny(deprecated)] on by default\n</code></pre>\n\n<p>You'll have to figure out where the <code>deny</code> is specified.</p>\n"}], "owner": {"reputation": 25907, "user_id": 509706, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/yedDa.png?s=128&g=1", "display_name": "Wilfred Hughes", "link": "https://stackoverflow.com/users/509706/wilfred-hughes"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1596, "favorite_count": 0, "answer_count": 1, "score": 7, "last_activity_date": 1433892535, "creation_date": 1433889887, "last_edit_date": 1433892535, "question_id": 30744105, "link": "https://stackoverflow.com/questions/30744105/how-do-i-allow-deprecated-features", "title": "How do I allow deprecated features?", "body": "<p>I have a Rust project that depends on string_cache, which requires nightly. However, the latest version of nightly is refusing to compile due to deprecated features:</p>\n\n<pre><code>$ cargo build\n   Compiling string_cache v0.1.0 (https://github.com/servo/string-cache#45f19068)\n/home/wilfred/.multirust/toolchains/nightly/cargo/git/checkouts/string-cache-efa5c30b1d5a962c/master/src/atom/mod.rs:65:21: 65:37 error: use of deprecated item: use `String::from` instead, #[deny(deprecated)] on by default\n/home/wilfred/.multirust/toolchains/nightly/cargo/git/checkouts/string-cache-efa5c30b1d5a962c/master/src/atom/mod.rs:65             string: String::from_str(string_to_add),\n                                                                                                                                            ^~~~~~~~~~~~~~~~\nerror: aborting due to previous error\nCould not compile `string_cache`.\n\nTo learn more, run the command again with --verbose.\n</code></pre>\n\n<p>How do I compile string_cache? I've tried adding</p>\n\n<pre><code>#![allow(deprecated)]\n</code></pre>\n\n<p>to my main.rs, but that doesn't change the behaviour.</p>\n"}, {"tags": ["c", "memory", "rust"], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1433891758, "post_id": 30742180, "comment_id": 49544520, "body": "Low level programmers, don&#39;t worry: future rust will remove this drop flag entirely."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433927126, "post_id": 30742180, "comment_id": 49557658, "body": "<a href=\"https://github.com/rust-lang/rust/issues/5016\" rel=\"nofollow noreferrer\">Tracking issue</a>. There is recent progress, more than appears there. I&#39;m hopeful it will be sometime this year."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 3, "creation_date": 1433932588, "post_id": 30742180, "comment_id": 49561376, "body": "Maybe this answer should explain a bit more? Use <code>repr(C)</code> to pass structs in ffi, and use <code>Drop</code> on \u201cregular Rust\u201d structs if you need to. If you need both, embed the <code>repr(C)</code> struct inside the regular rust struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433970195, "post_id": 30742180, "comment_id": 49586640, "body": "@bluss mind giving my last update a look-see and some feedback?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1433970173, "last_edit_date": 1495542185, "creation_date": 1433881587, "answer_id": 30742180, "question_id": 30742004, "link": "https://stackoverflow.com/questions/30742004/correct-idiom-for-freeing-reprc-structs-using-drop-trait/30742180#30742180", "title": "Correct idiom for freeing repr(C) structs using Drop trait", "body": "<p>I think you are conflating two concepts. A struct should be <code>repr(C)</code> if you wish for the layout of the struct to <em>directly correspond</em> to the layout of the struct as a C compiler would lay it out. That is, it has the same in-memory <code>repr</code>esentation.</p>\n\n<p>However, you <em>don't</em> need that if you are just holding a raw pointer, and are not going to pass the holding structure back to C. The short solution in this case is \"remove <code>repr(C)</code>\".</p>\n\n<p>To explain a bit more about the error...</p>\n\n<blockquote>\n  <p>implementing Drop adds hidden state to types, possibly conflicting with <code>#[repr(C)]</code></p>\n</blockquote>\n\n<p>This was discussed in <a href=\"https://github.com/rust-lang/rust/issues/24585\" rel=\"nofollow noreferrer\">issue 24585</a>. When an object is dropped, a hidden flag (the \"state\") is set that indicates that the object has been dropped, preventing multiple drops from occurring. However, hidden bits mean that what you see in Rust does not correspond to what the bytes of the struct would look like in C, negating the purpose of the <code>repr(C)</code>.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/30742004/correct-idiom-for-freeing-reprc-structs-using-drop-trait/30742180#comment49561376_30742180\">cribbed from @bluss</a>:</p>\n\n<blockquote>\n  <p>Low level programmers, don't worry: <a href=\"https://github.com/rust-lang/rust/issues/5016\" rel=\"nofollow noreferrer\">future Rust</a> will remove this drop flag entirely.</p>\n</blockquote>\n\n<p>And</p>\n\n<blockquote>\n  <p>Use <code>repr(C)</code> to pass structs in FFI, and use <code>Drop</code> on \"regular Rust\" structs if you need to. If you need both, embed the <code>repr(C)</code> struct inside the regular struct. </p>\n</blockquote>\n\n<p>Imagine we had a library that exposes a C struct with two 8-bit numbers, and methods that take and return that struct:</p>\n\n<pre><code>typedef struct {\n    char a;\n    char b;\n} tuple_t;\n\ntuple_t tuple_increment(tuple_t position);\n</code></pre>\n\n<p>In this case, you would definitely want to mimic that struct and match the C representation in Rust:</p>\n\n<pre><code>#[repr(C)]\nstruct Tuple {\n    a: libc::char,\n    b: libc::char,\n}\n</code></pre>\n\n<p>However, if the library returned pointers to the struct, and you never need to poke into it (the structure is <em>opaque</em>) then you don't need to worry about <code>repr(C)</code>:</p>\n\n<pre><code>void tuple_increment(tuple_t *position);\n</code></pre>\n\n<p>Then you can just use that pointer and implement Drop:</p>\n\n<pre><code>struct TuplePointer(*mut libc::c_void);\n\nimpl Drop for TuplePointer {\n    // Call the appropriate free function from the library\n}\n</code></pre>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 439, "favorite_count": 1, "accepted_answer_id": 30742180, "answer_count": 1, "score": 11, "last_activity_date": 1433970173, "creation_date": 1433880997, "last_edit_date": 1433889104, "question_id": 30742004, "link": "https://stackoverflow.com/questions/30742004/correct-idiom-for-freeing-reprc-structs-using-drop-trait", "title": "Correct idiom for freeing repr(C) structs using Drop trait", "body": "<p>This code works fine but gives a compiler warning on Rust nightly (1.2)</p>\n\n<pre><code>#[repr(C)]\nstruct DbaxCell { \n    cell: *const c_void\n}\n\n#[link(name=\"CDbax\", kind=\"dylib\")] \nextern {\n    fn new_dCell(d: c_double) -&gt; *const c_void;\n    fn deleteCell(c: *const c_void);\n}\n\nimpl DbaxCell {\n    fn new(x: f64) -&gt; DbaxCell {\n        unsafe {\n            DbaxCell { cell: new_dCell(x) }\n        }\n    }\n}\n\nimpl Drop for DbaxCell {\n    fn drop(&amp;mut self) {\n        unsafe {\n            deleteCell(self.cell);\n        }\n    }\n}\n</code></pre>\n\n<p>It links to a C library and creates/deletes cell objects correctly. However it gives a warning</p>\n\n<pre><code>src\\lib.rs:27:1: 33:2 warning: implementing Drop adds hidden state to types, possibly conflicting with `#[repr(C)]`, #[warn(drop_with_repr_extern)] on by default\n\\src\\lib.rs:27 impl Drop for DbaxCell {\n\\src\\lib.rs:28     fn drop(&amp;mut self) {\n\\src\\lib.rs:29         unsafe {\n\\src\\lib.rs:30             deleteCell(self.cell);\n\\src\\lib.rs:31         }\n\\src\\lib.rs:32     }\n</code></pre>\n\n<p>What is the right way to do this to ensure that these <code>DbaxCell</code>s are cleaned up correctly and no warning is given?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 2734, "user_id": 973730, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ed204943500512835fc90fb9ac790367?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/973730/simon"}, "edited": false, "score": 1, "creation_date": 1433882433, "post_id": 30741989, "comment_id": 49540658, "body": "Right, I was trying to use <code>collect</code> but it didn&#39;t work. Now I see that this was because I had an iterator of <code>&amp;char</code> instead of <code>char</code>. I added <code>map</code> before <code>collect</code> to perform conversion and now it works. Thanks."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 2734, "user_id": 973730, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ed204943500512835fc90fb9ac790367?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/973730/simon"}, "edited": false, "score": 6, "creation_date": 1434019764, "post_id": 30741989, "comment_id": 49607402, "body": "There&#39;s a shorthand for that conversion by the way (<code>&amp;T -&gt; T</code>), the iterator adaptor <code>.cloned()</code>."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": true, "score": 40, "last_activity_date": 1433880969, "creation_date": 1433880969, "answer_id": 30741989, "question_id": 30741926, "link": "https://stackoverflow.com/questions/30741926/how-to-convert-iterator-of-chars-to-string/30741989#30741989", "title": "How to convert iterator of chars to String?", "body": "<p><code>.collect()</code> is generic in what collection it produces, and it can produce the <code>String</code> for you!</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let s = \"abc\".chars().collect::&lt;String&gt;();\n</code></pre>\n\n<p>The trait <a href=\"http://doc.rust-lang.org/std/iter/trait.FromIterator.html\"><code>FromIterator</code></a> determines which elements you can collect into which kind of collection, and among the implementors you can find <code>String</code> twice:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl FromIterator&lt;char&gt; for String\nimpl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for String\n</code></pre>\n\n<p>Both iterators of <code>char</code> and of <code>&amp;str</code> can be collected to <code>String</code>.</p>\n"}], "owner": {"reputation": 2734, "user_id": 973730, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ed204943500512835fc90fb9ac790367?s=128&d=identicon&r=PG", "display_name": "Simon", "link": "https://stackoverflow.com/users/973730/simon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11029, "favorite_count": 4, "accepted_answer_id": 30741989, "answer_count": 1, "score": 31, "last_activity_date": 1433880969, "creation_date": 1433880753, "question_id": 30741926, "link": "https://stackoverflow.com/questions/30741926/how-to-convert-iterator-of-chars-to-string", "title": "How to convert iterator of chars to String?", "body": "<p>I need something like <code>.collect()</code> but which will produce <code>String</code> instead of container of <code>char</code>s, i.e. I need an inverse of <a href=\"https://doc.rust-lang.org/std/string/struct.String.html#method.chars\" rel=\"noreferrer\">chars()</a>. I cannot find anything suitable in the documentation. Of course I can implement such a function myself but I'm sure there must be standard solution to this problem.</p>\n\n<p>I'm using stable Rust.</p>\n"}, {"tags": ["closures", "rust"], "answers": [{"comments": [{"owner": {"reputation": 1877, "user_id": 1095379, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a3e4557ab1cd0bc5040e1d401cc7cae3?s=128&d=identicon&r=PG", "display_name": "jeremija", "link": "https://stackoverflow.com/users/1095379/jeremija"}, "edited": false, "score": 0, "creation_date": 1433877208, "post_id": 30740248, "comment_id": 49537503, "body": "So <code>let &amp;x = my_pointer</code> is actually an alternative to <code>let x = *my_pointer</code>, and it also works in function parameters declarations? If so, why does using <code>|x|</code> not throw an error? From my experience with C, would expect to receive a pointer here. Or does rust implicitly  allocate a copy of value of the original <code>x</code> on the stack here?"}, {"owner": {"reputation": 1877, "user_id": 1095379, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a3e4557ab1cd0bc5040e1d401cc7cae3?s=128&d=identicon&r=PG", "display_name": "jeremija", "link": "https://stackoverflow.com/users/1095379/jeremija"}, "edited": false, "score": 0, "creation_date": 1433877816, "post_id": 30740248, "comment_id": 49537874, "body": "Ohhh, I&#39;ve got a lot to learn :) Thank you - it&#39;s much clearer to me now!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1433877644, "last_edit_date": 1433877644, "creation_date": 1433875336, "answer_id": 30740248, "question_id": 30739991, "link": "https://stackoverflow.com/questions/30739991/whats-the-difference-between-filterx-and-filterx/30740248#30740248", "title": "What&#39;s the difference between filter(|x|) and filter(|&amp;x|)?", "body": "<p>When used as a pattern match (and closure and function arguments are also pattern matches), the <code>&amp;</code> <strong>binds</strong> to a reference, making the variable the <strong>dereferenced</strong> value.</p>\n\n<pre><code>fn main() {\n    let an_int: u8 = 42;\n    // Note that the `&amp;` is on the right side of the `:`\n    let ref_to_int: &amp;u8 = &amp;an_int; \n    // Note that the `&amp;` is on the left side of the `:`\n    let &amp;another_int = ref_to_int;\n    let () = another_int;\n}\n</code></pre>\n\n<p>Has the error:</p>\n\n<pre><code>error: mismatched types:\n expected `u8`,\n    found `()`\n</code></pre>\n\n<p>If you look at your error message for your case, it indicates that you can't dereference it, because it <em>isn't a reference</em>:</p>\n\n<pre><code>error: type `_` cannot be dereferenced\n</code></pre>\n\n<blockquote>\n  <p>I didn't have to dereference the x pointer by using *x.</p>\n</blockquote>\n\n<p>That's because you implicitly dereferenced it in the pattern match.</p>\n\n<blockquote>\n  <p>I understand that using a reference |&amp;x| is more efficient</p>\n</blockquote>\n\n<p>If this were true, then there would be no reason to use anything but references! Namely, references require extra indirection to get to the real data. There's some measurable cut-off point where passing items by value is more efficient than passing references to them.</p>\n\n<blockquote>\n  <p>If so, why does using <code>|x|</code> not throw an error?  From my experience with C, I would expect to receive a pointer here.</p>\n</blockquote>\n\n<p>And you do, in the form of a <em>reference</em>. <code>x</code> is a reference to (in this example) an <code>i32</code>. However, the <code>%</code> operator is provided by the trait <a href=\"http://doc.rust-lang.org/std/ops/trait.Rem.html\"><code>Rem</code></a>, which is implemented for all pairs of reference / value:</p>\n\n<pre><code>impl Rem&lt;i32&gt; for i32\nimpl&lt;'a&gt; Rem&lt;i32&gt; for &amp;'a i32\nimpl&lt;'a&gt; Rem&lt;&amp;'a i32&gt; for i32\nimpl&lt;'a, 'b&gt; Rem&lt;&amp;'a i32&gt; for &amp;'b i32\n</code></pre>\n\n<p>This allows you to not need to explicitly dereference it.</p>\n\n<blockquote>\n  <p>Or does Rust implicitly allocate a copy of value of the original <code>x</code> on the stack here?</p>\n</blockquote>\n\n<p>It emphatically does <strong>not</strong> do that. In fact, it would be unsafe to do that, unless the iterated items implemented <code>Copy</code> (or potentially <code>Clone</code>, in which case it could also be expensive). This is why references are used as the closure argument.</p>\n"}], "owner": {"reputation": 1877, "user_id": 1095379, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/a3e4557ab1cd0bc5040e1d401cc7cae3?s=128&d=identicon&r=PG", "display_name": "jeremija", "link": "https://stackoverflow.com/users/1095379/jeremija"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 174, "favorite_count": 0, "accepted_answer_id": 30740248, "answer_count": 1, "score": 6, "last_activity_date": 1433877644, "creation_date": 1433874454, "last_edit_date": 1433875164, "question_id": 30739991, "link": "https://stackoverflow.com/questions/30739991/whats-the-difference-between-filterx-and-filterx", "title": "What&#39;s the difference between filter(|x|) and filter(|&amp;x|)?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/nightly/book/iterators.html#iterator-adapters\" rel=\"noreferrer\">Rust Book</a> there is an example of calling <code>filter()</code> on an iterator:</p>\n\n<pre><code>for i in (1..100).filter(|&amp;x| x % 2 == 0) {\n    println!(\"{}\", i);\n}\n</code></pre>\n\n<p>There is an explanation below but I'm having trouble understanding it:</p>\n\n<blockquote>\n  <p>This will print all of the even numbers between one and a hundred. <strong>(Note that because filter doesn't consume the elements that are being iterated over, it is passed a reference to each element, and thus the filter predicate uses the &amp;x pattern to extract the integer itself.)</strong></p>\n</blockquote>\n\n<p>This, however does not work:</p>\n\n<pre><code>for i in (1..100).filter(|&amp;x| *x % 2 == 0) {\n    println!(\"i={}\", i);\n}\n</code></pre>\n\n<p>Why is the argument to the closure a reference <code>|&amp;x|</code>, instead of <code>|x|</code>? And what's the difference between using <code>|&amp;x|</code> and <code>|x|</code>?</p>\n\n<p>I understand that using a reference <code>|&amp;x|</code> is more efficient, but I'm puzzled by the fact that I didn't have to dereference the <code>x</code> pointer by using <code>*x</code>.</p>\n"}, {"tags": ["vector", "casting", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433872958, "post_id": 30738505, "comment_id": 49534940, "body": "Perhaps you want something like <a href=\"http://stackoverflow.com/q/28127165/155423\">stackoverflow.com/q/28127165/155423</a> ?"}, {"owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433876460, "post_id": 30738505, "comment_id": 49537083, "body": "Not quite, I don&#39;t want to change memory representation and bincode does not appear to give the in-place swap I want. I want to control how the values are read for endianness by borrowing a Vec&lt;T&gt; as a Vec&lt;u8&gt; (same total size for both), I want to do in place manipulation of the Vec&lt;u8&gt; in chunks and then go back to use the data as a Vec&lt;T&gt;. I need access to the underlying slice as if it were &amp;[u8] temporarily to manipulate byte orders."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433877169, "post_id": 30738505, "comment_id": 49537484, "body": "I don&#39;t know the answer, but I wonder how you could be sure that there aren&#39;t padding issues - like if a 15-byte struct was actually padded to 16 bytes for storage reasons; every 16 bytes would be a piece of undefined memory..."}, {"owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433882422, "post_id": 30738505, "comment_id": 49540653, "body": "Right, that&#39;s a good point. I think alignment will be OK and I&#39;m pretty sure that the vector&#39;s backing array will store the values aligned one directly after the other. Also, I may need to force the representation of the struct to be <code>#[repr(C)]</code> so the struct is close packed."}], "answers": [{"comments": [{"owner": {"reputation": 2409, "user_id": 2284570, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/9bd1d26aad2cfb7ece066d94c128d529?s=128&d=identicon&r=PG", "display_name": "user2284570", "link": "https://stackoverflow.com/users/2284570/user2284570"}, "edited": false, "score": 0, "creation_date": 1609064521, "post_id": 34709820, "comment_id": 115738973, "body": "Does this trigers a new memory allocation?"}], "tags": [], "owner": {"reputation": 8764, "user_id": 1162888, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ad1b7cc2be3bf5120b508c56590e6293?s=128&d=identicon&r=PG", "display_name": "Simon Sapin", "link": "https://stackoverflow.com/users/1162888/simon-sapin"}, "is_accepted": false, "score": 1, "last_activity_date": 1452453978, "creation_date": 1452453978, "answer_id": 34709820, "question_id": 30738505, "link": "https://stackoverflow.com/questions/30738505/casting-slice-of-values-to-a-slice-of-bytes/34709820#34709820", "title": "Casting slice of values to a slice of bytes", "body": "<p>The memory representation of <code>&amp;mut [T]</code> is <code>(*mut T, usize)</code> where usize is the number of <code>T</code> elements in the slice, not the number of bytes. So transmuting a slice of say 20 points gives you a slice of 20 bytes.</p>\n\n<p>You have to compute the correct number of bytes:</p>\n\n<pre><code>let n_bytes = points.len() * std::mem::size_of::&lt;Point&gt;();\nlet points_buf = std::slice::from_raw_parts_mut(points.as_mut_ptr(), n_bytes);\n</code></pre>\n\n<p>(Then of course deal of all the rest of the unsafety.)</p>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1296, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1452453978, "creation_date": 1433869529, "question_id": 30738505, "link": "https://stackoverflow.com/questions/30738505/casting-slice-of-values-to-a-slice-of-bytes", "title": "Casting slice of values to a slice of bytes", "body": "<p>I am experimenting with an API where the callers provide a <code>Vec&lt;Point&gt;</code> which they want me to fill in with data. They can allocate room in the vector by creating it with <code>with_capacity</code> then push out its size by doing <code>push(Point{...})</code>. Then I will fill the underlying buffer with bytes from the disk, switch their endian representation as necessary, and then provide it back as a <code>Vec&lt;Point&gt;</code>.</p>\n\n<p>Here is the function which takes their vector and fills it with data. The problem is that transmute only works when the types are of the same size, a <code>Point</code> is 12 bytes and transmute throws away 11 of those bytes.</p>\n\n<pre><code>fn read_points(&amp;self, offset: u64, points: &amp;mut [point::Point]) {\n    let mut file = self.handle.borrow_mut();\n    file.seek(SeekFrom::Start(offset)).unwrap();\n\n    // bleep bloorp. danger!\n    let points_buf : &amp;mut [u8] = unsafe { mem::transmute(points) };\n    file.read(points_buf).unwrap();\n\n    // should take the 12 bytes and do the endian swaps\n    for mut chunk in points_buf.chunks_mut(point::POINT_SIZE) {\n        let point = point::buf_to_point(chunk);\n        let buf : &amp;mut [u8] = &amp;mut chunk;\n        point::fill_buf(buf, point.timestamp, point.value);\n    }\n}\n</code></pre>\n\n<p>Can this API be done in Rust or should I should I switch to doing safer but slower copy operations?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433864525, "post_id": 30735490, "comment_id": 49529617, "body": "Are you sure you&#39;re using nightly? <a href=\"http://is.gd/S7X1yu\" rel=\"nofollow noreferrer\">This</a> code works for me. I&#39;ve just added <code>#[feature(rand)]</code> and everything compiled exactly as you provided."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 1, "creation_date": 1433865007, "post_id": 30735490, "comment_id": 49529998, "body": "@VladimirMatveev I don&#39;t think <code>#[bench]</code> methods are compiled in the playpen. <a href=\"http://is.gd/el8M4f\" rel=\"nofollow noreferrer\">is.gd/el8M4f</a>"}], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433863930, "post_id": 30736477, "comment_id": 49529129, "body": "Do I need to use cargo to build then? Because this was just a small benchmark, I tried to use rustc directly."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1433864420, "post_id": 30736477, "comment_id": 49529532, "body": "@llogiq You can always link to a crate by hand, doing everything that Cargo would do ^_^. I don&#39;t know for sure that there&#39;s no way to access the built-in random functionality, but <a href=\"http://is.gd/NJdvBt\" rel=\"nofollow noreferrer\">my first attempt failed</a>. I have found it pretty easy to spin up one-off Cargo projects, so that&#39;s the direction I would recommend."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433864584, "post_id": 30736477, "comment_id": 49529675, "body": "This doesn&#39;t seem to be the reason for the error because the author explicitly specified that nightly compiler is used (and nightlies can use external crates freely, albeit with feature annotation)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433864680, "post_id": 30736477, "comment_id": 49529750, "body": "@VladimirMatveev check my <a href=\"http://is.gd/NJdvBt\" rel=\"nofollow noreferrer\">attempt to use the crate in a nightly</a>. The function <a href=\"https://github.com/rust-lang/rust/blob/621a10e7f32d790c39a0b4528369cf7959dd7d34/src/libstd/rand/mod.rs#L159\" rel=\"nofollow noreferrer\"><code>thread_rng</code> is in a private module</a>, not just feature-gated. Also, &quot;external crates&quot; is a bit misleading - I&#39;d suggest that &quot;external crates&quot; are those from crates.io, not those secretly bundled with the compiler ;-)."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433865005, "post_id": 30736477, "comment_id": 49529994, "body": "@Shepmaster could I just use a different rng then?"}, {"owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "edited": false, "score": 0, "creation_date": 1468246251, "post_id": 30736477, "comment_id": 64034898, "body": "Funny, I just ran into this exact same issue\u2026 I was expecting the error to be &quot;missing crate &#39;rand&#39;&quot; but it was entirely unexpected!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1481311627, "last_edit_date": 1481311627, "creation_date": 1433863753, "answer_id": 30736477, "question_id": 30735490, "link": "https://stackoverflow.com/questions/30735490/unresolved-name-randthread-rng/30736477#30736477", "title": "unresolved name rand::thread_rng", "body": "<p>You can reproduce this in Rust 1.0 (and at least up through 1.13):</p>\n\n<pre><code>extern crate rand;\n\nfn main() {\n    rand::thread_rng();\n}\n</code></pre>\n\n<p>With the same error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0425]: unresolved name `rand::thread_rng`\n --&gt; &lt;anon&gt;:4:5\n  |\n4 |     rand::thread_rng();\n  |     ^^^^^^^^^^^^^^^^ unresolved name\n</code></pre>\n\n<p>To fix this, you need to add the <code>rand</code> crate to your Cargo.toml:</p>\n\n<pre><code>[dependencies]\nrand = \"*\"\n</code></pre>\n\n<p>This is due to the fact that <a href=\"https://github.com/rust-lang/rust/tree/7b0f2af27f18b6c81fe6a2faab0ba96e0da3bba5/src/librand\" rel=\"noreferrer\">Rust has an internal, hidden crate also called <code>rand</code></a>. When the 1.0 stability guarantees were looming, many of these mostly-internal crates were spun out to <a href=\"https://github.com/rust-lang/rand\" rel=\"noreferrer\">their own repos</a> and <a href=\"https://crates.io/crates/rand\" rel=\"noreferrer\">hosted on crates.io</a>. However, the compiler still needed parts of these crates, and so stubs of them were left in the compiler, but marked private.</p>\n\n<blockquote>\n  <p>could I just use a different rng then?</p>\n</blockquote>\n\n<p>A clever idea that appears to work! For future people, this <strong>only</strong> applies to nightly builds, and that means you accept whatever breaking code might happen!</p>\n\n<pre><code>#![feature(rand)]\n\nextern crate rand;\n\nuse rand::Rng;\n\nfn main() {\n    let mut rng = rand::IsaacRng::new_unseeded();\n    println!(\"{}\", rng.gen_range(0, 10));\n}\n</code></pre>\n\n<p>The biggest downside is that every run of the program will have the same sequence of numbers, because it will always have the same seed. This may be a benefit for benchmarking though!</p>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4157, "favorite_count": 0, "accepted_answer_id": 30736477, "answer_count": 1, "score": 12, "last_activity_date": 1481311627, "creation_date": 1433861276, "last_edit_date": 1433864456, "question_id": 30735490, "link": "https://stackoverflow.com/questions/30735490/unresolved-name-randthread-rng", "title": "unresolved name rand::thread_rng", "body": "<p>I wanted to use some random numbers for a benchmark:</p>\n\n<pre><code>#![feature(test)]\n\n/// benchmarks for different map implementation\nextern crate test;\nextern crate rand;\n\nuse test::Bencher;\nuse rand::Rng;\n\n#[bench]\nfn setup_random_hashmap(b: &amp;mut Bencher) {\n    let mut val : u32 = 0;\n    let mut rng = rand::thread_rng();\n    let mut map = std::collections::HashMap::new();\n\n    b.iter(|| { map.insert(rng.gen::&lt;u32&gt;(), val); val += 1; })\n}\n</code></pre>\n\n<p>However, rustc comes back with:</p>\n\n<pre><code>bench.rs:14:16: 14:32 error: unresolved name `rand::thread_rng`\nbench.rs:14     let mut rng = rand::thread_rng();\n</code></pre>\n\n<p>thread_rng is defined in <code>rand</code> as a <code>pub fn</code>. What declaration am I missing? I am using <code>1.2.0-nightly (8f9f2fe97 2015-06-07)</code>.</p>\n"}, {"tags": ["compiler-errors", "rust", "lifetime"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1433843018, "post_id": 30728254, "comment_id": 49513107, "body": "I&#39;d recommend reading the Rust Book: <a href=\"http://doc.rust-lang.org/book/lifetimes.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/lifetimes.html</a>.  You&#39;re also confusing borrowed pointers and raw pointers, which isn&#39;t going to get you anywhere.  Finally, you appear to be trying to make a doubly linked list, which is <i>not</i> something you should be attempting before learning the basic semantics of the language: Rust is exceptionally unforgiving about this."}, {"owner": {"reputation": 325, "user_id": 3864563, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/42e13fd8a963ff46905794b6ac1927cb?s=128&d=identicon&r=PG&f=1", "display_name": "user3864563", "link": "https://stackoverflow.com/users/3864563/user3864563"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1433843676, "post_id": 30728254, "comment_id": 49513592, "body": "I am reading the book and am currently working with referencing the next and previous query object. Though, it seems I need pointers to do that because otherwise it will be accessing &#39;infinite&#39; queries, as the book has stated I think."}], "answers": [{"comments": [{"owner": {"reputation": 325, "user_id": 3864563, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/42e13fd8a963ff46905794b6ac1927cb?s=128&d=identicon&r=PG&f=1", "display_name": "user3864563", "link": "https://stackoverflow.com/users/3864563/user3864563"}, "edited": false, "score": 0, "creation_date": 1433851986, "post_id": 30730410, "comment_id": 49519431, "body": "Yeah, I was attempting to create a form of a database from scratch using this method, but apparently it isn&#39;t possible at the moment. I&#39;ll find some way to do it."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1433848367, "last_edit_date": 1495542844, "creation_date": 1433848367, "answer_id": 30730410, "question_id": 30728254, "link": "https://stackoverflow.com/questions/30728254/getting-missing-lifetime-specifier-error/30730410#30730410", "title": "Getting &#39;Missing Lifetime specifier&#39; error", "body": "<p>First, note that <code>&amp;T</code>/<code>&amp;mut T</code> and <code>*const T</code>/<code>*mut T</code> are different types of pointers in Rust. The former are called \"references\" and they are statically checked in various ways (including borrowing analysis) and they can't be null or point to some invalid object. The latter are called \"raw pointers\" and are used primarily in abstractions implementations and for FFI.</p>\n\n<p>Consequently, writing    </p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>Query {\n    data: name,\n    prev: ptr::null(),\n    next: ptr::null(),\n}\n</code></pre>\n\n<p>when <code>prev</code> and <code>next</code> are of type <code>&amp;Whatever</code> is incorrect - <code>ptr::null()</code> returns values of type <code>*const Whatever</code> which is not compatible (safely) with <code>&amp;Whatever</code>.</p>\n\n<p>References in Rust always have some lifetime associated with them - it is used by the compiler to check that references always point to valid pieces of data. This lifetime is specified in reference type: <code>&amp;'a T</code>. In most cases the compiler can infer correct lifetimes automatically, so you seldom need to write them in types of local variables or even in function declarations:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let x: &amp;str = \"hello\";\n\nfn print_str(s: &amp;str) { println!(\"{}\", s); }\n</code></pre>\n\n<p>However, when you want to put references to a structure, there is just no way the compiler can infer the lifetime in the structure declaration (because it can be arbitrary and depends on the way the structure values \nare used), and so you need to specify lifetime parameters explicitly:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Query&lt;'a, T&gt; {\n    data: T,\n    prev: &amp;'a Query&lt;'a, T&gt;,\n    next: &amp;'a Query&lt;'a, T&gt;,\n}\n</code></pre>\n\n<p>In this particular case, though, it seems that you want to implement some kind of doubly linked structure. Unfortunately, Rust references can't be used for this. Lifetime requirements prohibit creation of loops via references - you just can't store a reference to <code>x</code> in <code>y</code> if <code>x</code> has a reference to <code>y</code> inside it. The only way such structure can be constructed is through mutation:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let mut x = SomeStructure(None);\nlet y = SomeStructure(Some(&amp;x));\nx.0 = Some(&amp;y);\n</code></pre>\n\n<p>But you can't mutate an object which has a reference pointing to it, that is, the above code is invalid.</p>\n\n<p>The thing you're trying to achieve is usually called <a href=\"https://stackoverflow.com/questions/5004162/what-does-it-mean-for-a-data-structure-to-be-intrusive\">intrusive data structures</a>, and for now they are not well supported in Rust. There is an <a href=\"https://github.com/rust-lang/rfcs/issues/417\" rel=\"nofollow noreferrer\">RFC issue</a> on that, and we may probably see some progress on them in future.</p>\n\n<p>There are several things you can do here, the most easiest one probably would be to refactor your code in such a way that you won't need to use a doubly-linked structure. Almost always you can put your data in a contiguous array like <code>Vec</code> and use indices to access it, and most likely it would be more efficient even for simple traversal because of cache locality.</p>\n\n<p>Another option would be to use a non-intrusive linked list, like the one which is available <a href=\"http://doc.rust-lang.org/std/collections/struct.LinkedList.html\" rel=\"nofollow noreferrer\">in the standard library</a>.</p>\n\n<p>And, of course, you can always drop to using raw pointers. There is nothing wrong in using them when they are required, and most of the standard library abstractions (like the linked list above) are using them in some way internally. In your case, however, they should be the last resort - most likely there are ways to do what you want without them.</p>\n"}], "owner": {"reputation": 325, "user_id": 3864563, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/42e13fd8a963ff46905794b6ac1927cb?s=128&d=identicon&r=PG&f=1", "display_name": "user3864563", "link": "https://stackoverflow.com/users/3864563/user3864563"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2537, "favorite_count": 0, "accepted_answer_id": 30730410, "answer_count": 1, "score": 2, "last_activity_date": 1592363416, "creation_date": 1433842343, "last_edit_date": 1433855083, "question_id": 30728254, "link": "https://stackoverflow.com/questions/30728254/getting-missing-lifetime-specifier-error", "title": "Getting &#39;Missing Lifetime specifier&#39; error", "body": "<p>This is my code:</p>\n\n<pre><code>use std::ptr;\n\nstruct Query&lt;T&gt;{\n  data: T,\n  prev: &amp; Query&lt;T&gt;,\n  next: &amp; Query&lt;T&gt;,\n}\nimpl&lt;T&gt; Query&lt;T&gt;{\n  fn new(name: T) -&gt; Query&lt;T&gt;{\n    Query{\n      data: name,\n      prev: ptr::null(),\n      next: ptr::null(),\n    }\n  }\n}\n</code></pre>\n\n<p>I keep getting 'missing lifetime specifier' where I am referencing <code>&amp;Query&lt;T&gt;</code>. How do I fix this error?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433843420, "post_id": 30728081, "comment_id": 49513416, "body": "So you want to only specify the total count of problems, not the full problem names, or would you be fine with a macro that requires you to list all the problem numbers like <code>[1, 2]</code> in your case"}, {"owner": {"reputation": 1056, "user_id": 2689033, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/efcbe50f34f7fe00124b5b240bc7fe24?s=128&d=identicon&r=PG&f=1", "display_name": "kunerd", "link": "https://stackoverflow.com/users/2689033/kunerd"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433843861, "post_id": 30728081, "comment_id": 49513740, "body": "I think the macro using <code>[1, 2]</code> should be fine at the moment."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1433847214, "post_id": 30728081, "comment_id": 49516089, "body": "@kunerd: when writing it out like that, using <code>Vec&lt;Box&lt;Problem&gt;&gt;</code> is unnecessary, requiring allocations; it can be defined completely statically, <code>&amp;&#39;static [&amp;&#39;static Problem]</code>"}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 2, "last_activity_date": 1433849266, "creation_date": 1433849266, "answer_id": 30730722, "question_id": 30728081, "link": "https://stackoverflow.com/questions/30728081/how-to-combine-different-algorithms-in-one-executable/30730722#30730722", "title": "How to combine different algorithms in one executable", "body": "<p>You can use a <a href=\"https://doc.rust-lang.org/nightly/book/macros.html#repetition\" rel=\"nofollow\">macro with repetition</a> to generate your list without having to type out the full path and name every time.</p>\n\n<pre><code>macro_rules! problem_vec(\n    ($( $prob:tt ),*) =&gt; ({\n        &amp;[\n            $(\n                &amp;concat_idents!(Proble, $prob),\n            )*\n        ]\n    });\n);\nconst PROBLEMS: &amp;'static[&amp;'static ProjectEulerProblem] = problem_vec!(m1, m2);\n</code></pre>\n\n<p>Note, you cannot simply use indices, because the <code>concat_idents</code> macro requires an identifier and numbers are not identifiers. <code>concat_idents</code> is also only available on nightly. On stable you need to give the entire struct name:</p>\n\n<pre><code>macro_rules! problem_vec(\n    ($( $prob:ident ),*) =&gt; ({\n        &amp;[\n            $(\n                &amp;problems::$prob,\n            )*\n        ]\n    });\n);\n\nconst PROBLEMS: &amp;'static [&amp;'static problems::ProjectEulerProblem] = problem_vec!(\n    Problem1, Problem2\n);\n</code></pre>\n\n<p><a href=\"http://is.gd/OFxUAT\" rel=\"nofollow\">PlayPen</a></p>\n"}, {"tags": [], "owner": {"reputation": 6357, "user_id": 6086311, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/cb99289473f6393b89474785f2d294d1?s=128&d=identicon&r=PG", "display_name": "dtolnay", "link": "https://stackoverflow.com/users/6086311/dtolnay"}, "is_accepted": false, "score": 0, "last_activity_date": 1524942669, "creation_date": 1524942669, "answer_id": 50080156, "question_id": 30728081, "link": "https://stackoverflow.com/questions/30728081/how-to-combine-different-algorithms-in-one-executable/50080156#50080156", "title": "How to combine different algorithms in one executable", "body": "<p>My <a href=\"https://github.com/dtolnay/mashup\" rel=\"nofollow noreferrer\"><strong><code>mashup</code></strong></a> crate lets you define a concise way to build the problems array as <code>problems![1, 2]</code>. This approach works with any Rust version >= 1.15.0.</p>\n\n<hr>\n\n<pre><code>#[macro_use]\nextern crate mashup;\n\nmod problems {\n    pub trait ProjectEulerProblem {\n        fn run(&amp;self);\n    }\n\n    pub struct Problem1;\n    impl ProjectEulerProblem for Problem1 {\n        fn run(&amp;self) {\n            println!(\"running Project Euler problem 1\");\n        }\n    }\n\n    pub struct Problem2;\n    impl ProjectEulerProblem for Problem2 {\n        fn run(&amp;self) {\n            println!(\"running Project Euler problem 2\");\n        }\n    }\n}\n\nmacro_rules! problems {\n    ($($number:tt),*) =&gt; {{\n        // Use mashup to define a substitution macro `m!` that replaces every\n        // occurrence of the tokens `\"Problem\" $number` in its input with the\n        // concatenated identifier `Problem $number`.\n        mashup! {\n            $(\n                m[\"Problem\" $number] = Problem $number;\n            )*\n        }\n\n        // Invoke the substitution macro to build a slice of problems. This\n        // expands to:\n        //\n        //     &amp;[\n        //         &amp;problems::Problem1 as &amp;problems::ProjectEulerProblem,\n        //         &amp;problems::Problem2 as &amp;problems::ProjectEulerProblem,\n        //     ]\n        m! {\n            &amp;[\n                $(\n                    &amp;problems::\"Problem\" $number as &amp;problems::ProjectEulerProblem,\n                )*\n            ]\n        }\n    }}\n}\n\nfn main() {\n    for p in problems![1, 2] {\n        p.run();\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1056, "user_id": 2689033, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/efcbe50f34f7fe00124b5b240bc7fe24?s=128&d=identicon&r=PG&f=1", "display_name": "kunerd", "link": "https://stackoverflow.com/users/2689033/kunerd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 79, "favorite_count": 0, "accepted_answer_id": 30730722, "answer_count": 2, "score": 1, "last_activity_date": 1524942669, "creation_date": 1433841929, "last_edit_date": 1433855114, "question_id": 30728081, "link": "https://stackoverflow.com/questions/30728081/how-to-combine-different-algorithms-in-one-executable", "title": "How to combine different algorithms in one executable", "body": "<p>To learn Rust, I have started to implement some of the Project Euler problems. Now I want to take the next step and create a console based user interface, which has the ability for running all or only specific problems. Another requirement is that the user should be able to pass optional parameters only to a specific problem.</p>\n\n<p>My current solution is to have a Trait <code>ProjectEulerProblem</code> that declares for example <code>run()</code>. With that I can do something like this:</p>\n\n<pre><code>fn main() {\n    let args: Args = Args::docopt().decode().unwrap_or_else(|e| e.exit());\n\n    let problems: Vec&lt;Box&lt;problems::ProjectEulerProblem&gt;&gt; = vec![\n        box problems::Problem1,\n        box problems::Problem2\n    ];\n\n    match args.flag_problem {\n        Some(x) =&gt; println!(\"Result of problem: {} is {}\", x, problems[x-1].run()),\n        None    =&gt; println!(\"No problem number given.\")\n    }\n}\n</code></pre>\n\n<p>My question is, is there a way to get rid of the explicit <code>problems</code> vector initialization, maybe by using macros? Alternative ideas for implementing my application like described above are also welcome.</p>\n"}, {"tags": ["generics", "rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 2, "creation_date": 1433836559, "post_id": 30725907, "comment_id": 49508943, "body": ".rlib is a format private to rustc which is prone to change at any point and has no intention of compatibility guarantees."}], "answers": [{"tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 18, "last_activity_date": 1433836649, "creation_date": 1433836649, "answer_id": 30726157, "question_id": 30725907, "link": "https://stackoverflow.com/questions/30725907/how-are-the-generic-functions-and-types-stored-in-an-rlib/30726157#30726157", "title": "How are the generic functions and types stored in an rlib?", "body": "<p>An <code>rlib</code> is a regular static library (built in the <code>ar</code> format) that contains additional metadata.  That metadata contains, among other things, the complete, serialised abstract syntax tree (AST) for all generics and functions marked with <code>#[inline]</code>.</p>\n\n<p>It's a bit like if there was a C++ compiler that shoved a library's header files into the compiled binary, and then read them out again when linking against that library.</p>\n"}], "owner": {"reputation": 682, "user_id": 4719039, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/0901a072c48b7ab95f6552fbf3b5bfb4?s=128&d=identicon&r=PG&f=1", "display_name": "F001", "link": "https://stackoverflow.com/users/4719039/f001"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 759, "favorite_count": 3, "accepted_answer_id": 30726157, "answer_count": 1, "score": 18, "last_activity_date": 1433855143, "creation_date": 1433835812, "last_edit_date": 1433855143, "question_id": 30725907, "link": "https://stackoverflow.com/questions/30725907/how-are-the-generic-functions-and-types-stored-in-an-rlib", "title": "How are the generic functions and types stored in an rlib?", "body": "<p>In C++, the templates can not be generated into dynamic libraries, we can only use them by header files.</p>\n\n<p>In C#, generic functions and types can be interpreted by intermediate language in .NET.</p>\n\n<p>Rust has no virtual machine, and the generics can be stored in the <code>rlib</code> files. How does it managed to achieve this? What is the format of rlib files?</p>\n"}, {"tags": ["dll", "rust"], "comments": [{"owner": {"reputation": 11391, "user_id": 2508150, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/6213045ef38ad15e90df7f6d7909f549?s=128&d=identicon&r=PG", "display_name": "Paolo M", "link": "https://stackoverflow.com/users/2508150/paolo-m"}, "edited": false, "score": 0, "creation_date": 1433835814, "post_id": 30725579, "comment_id": 49508546, "body": "What if you try to build the dll with GCC?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1433836248, "post_id": 30725579, "comment_id": 49508781, "body": "rust got msvc support a few days ago, but I don&#39;t think there are any msvc-nightlies, and I don&#39;t know how far that support goes. You can try building your own mvsc-rustc by calling <code>.&#47;configure</code> with <code>--target x86_64-pc-windows-msvc</code> let us know how it went! related PR: <a href=\"https://github.com/rust-lang/rust/pull/25848\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/pull/25848</a>"}], "answers": [{"comments": [{"owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 0, "creation_date": 1433839129, "post_id": 30726071, "comment_id": 49510444, "body": "I meant static lib, not dll. Sadly our &#39;corporate&#39; libraries are all written using MSVC so it&#39;s not really an option for me to change them. I&#39;ll give the above a go"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "edited": false, "score": 2, "creation_date": 1433857776, "post_id": 30726071, "comment_id": 49524161, "body": "@Ronnie, if you meant static lib and not DLL, you should probably update your question to reflect that. Currently it states several times that it is a DLL."}, {"owner": {"reputation": 936, "user_id": 3842894, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/pdZRP.jpg?s=128&g=1", "display_name": "MichaelsonBritt", "link": "https://stackoverflow.com/users/3842894/michaelsonbritt"}, "edited": false, "score": 0, "creation_date": 1549910285, "post_id": 30726071, "comment_id": 96066066, "body": "Works perfectly.  Thank you for this, you&#39;re my hero.  Search efforts had implied that libraries like FFI or libloaderapi or winapi would be needed, yet a complete code example was not forthcoming.  With your answer, using a windows .dll from Rust becomes trivial and is supported in core."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 10, "last_activity_date": 1433836331, "creation_date": 1433836331, "answer_id": 30726071, "question_id": 30725579, "link": "https://stackoverflow.com/questions/30725579/linking-to-a-static-lib-compiled-with-msvc/30726071#30726071", "title": "Linking to a static lib compiled with MSVC", "body": "<p>Ok, a few things.  First of all, there's no such thing as a \"static DLL\": a DLL is a <em>dynamically</em> linked library.</p>\n\n<p>Secondly, Rust uses the MinGW toolchain and runtime.  Mixing MSVC and MinGW runtimes can cause odd things to happen, so it's probably best avoided if at all possible.  Rust has only recently landed <em>very early</em> support for building using the MSVC runtime.</p>\n\n<p>However, you <em>can</em> get this <em>specific</em> example to work, apparently without any ill effects.  You just need to change a few things:</p>\n\n<ul>\n<li><p>You need to use a dynamic library; my understanding is that this makes bad interactions a little less likely.</p></li>\n<li><p>You need to <em>actually</em> compile <code>say_hello</code> with <code>C</code> linkage, not <code>C++</code> linkage.  You did this in the header, but not in the source file.</p></li>\n<li><p>You need to publicly export <code>say_hello</code> from the library.</p></li>\n</ul>\n\n<p>Thus:</p>\n\n<p><code>hello.rs</code>:</p>\n\n<pre><code>#[link(name=\"hello\", kind=\"dylib\")]\nextern {\n    fn say_hello();\n}\n\nfn main() {\n    unsafe { say_hello(); }\n}\n</code></pre>\n\n<p><code>hello.h</code>:</p>\n\n<pre><code>#ifndef HELLO_H\n#define HELLO_H\n\nextern \"C\" {\n    __declspec(dllexport) void say_hello();\n}\n\n#endif\n</code></pre>\n\n<p><code>hello.cpp</code>:</p>\n\n<pre><code>#include &lt;cstdio&gt;\n\n#include \"hello.h\"\n\nvoid say_hello() {\n    printf(\"hello world\\n\");\n}\n</code></pre>\n\n<p><code>build.cmd</code></p>\n\n<pre><code>cl /LD hello.cpp\nrustc -L. hello.rs\n</code></pre>\n\n<p>On my machine, this produces <code>hello.exe</code> and <code>hello.dll</code>; when run, <code>hello.exe</code> prints out <code>hello world</code>.</p>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1968, "favorite_count": 1, "accepted_answer_id": 30726071, "answer_count": 1, "score": 5, "last_activity_date": 1433863064, "creation_date": 1433834954, "last_edit_date": 1433863064, "question_id": 30725579, "link": "https://stackoverflow.com/questions/30725579/linking-to-a-static-lib-compiled-with-msvc", "title": "Linking to a static lib compiled with MSVC", "body": "<p>I'm trying to link with a simple C lib on windows against Rust library</p>\n\n<p>My lib is .h</p>\n\n<pre><code>extern \"C\" {\n    void say_hello(const char* s);\n}\n</code></pre>\n\n<p>.cpp</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid say_hello(const char* s) {\n    printf(\"hello world\");\n}\n</code></pre>\n\n<p>My Rust file</p>\n\n<pre><code>#[link(name=\"CDbax\", kind=\"static\")]\nextern \"C\" {\n    fn say_hello(s: *const libc::c_char) -&gt; () ;\n}\n</code></pre>\n\n<p>Linking fails by giving an error with one of the data symbols</p>\n\n<pre><code>error: linking with `gcc` failed: exit code: 1\nnote: \"gcc\" \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\" \"-Wl,--nxcompat\" \"-Wl,--large-address-aware\" \"-shared-libgcc\" \"-L\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\" \"e:\\Rust\\DBTools\\DBAnalytics\\target\\debug\\DBAnalytics.o\" \"-o\" \"e:\\Rust\\DBTools\\DBAnalytics\\target\\debug\\DBAnalytics.dll\" \"e:\\Rust\\DBTools\\DBAnalytics\\target\\debug\\DBAnalytics.metadata.o\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\libstd-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\libcollections-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\librustc_unicode-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\librand-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\liballoc-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\liblibc-11582ce5.rlib\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\\libcore-11582ce5.rlib\" \"-L\" \"e:\\Rust\\DBTools\\DBAnalytics\\target\\debug\" \"-L\" \"e:\\Rust\\DBTools\\DBAnalytics\\target\\debug\\deps\" \"-L\" \"C:\\Program Files (x86)\\Rust 1.2\\bin\\rustlib\\i686-pc-windows-gnu\\lib\" \"-L\" \"e:\\Rust\\DBTools\\DBAnalytics\\.rust\\bin\\i686-pc-windows-gnu\" \"-L\" \"e:\\Rust\\DBTools\\DBAnalytics\\bin\\i686-pc-windows-gnu\" \"-Wl,-Bstatic\" \"-Wl,--whole-archive\" \"-l\" \"CDbax\" \"-Wl,--no-whole-archive\" \"-Wl,-Bdynamic\" \"-l\" \"ws2_32\" \"-l\" \"userenv\" \"-l\" \"advapi32\" \"-shared\" \"-l\" \"compiler-rt\"\nnote: Warning: corrupt .drectve at end of def file\nCannot export ??_C@_0M@LACCCNMM@hello?5world?$AA@: symbol not found\n</code></pre>\n\n<p>The library is build on MSVC2013 as a simple static lib. The string \"hello world\" is in the data section, so I wouldn't expect it to cause a link error. Are there some specific settings I need to be aware about when linking with C libraries on windows?</p>\n\n<p>Btw it's 32bit MSVC lib.</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433784585, "post_id": 30714058, "comment_id": 49488380, "body": "This may not be a true duplicate, but as asked it seems the same. Feel free to update your title and question to better reflect why it isn&#39;t a duplicate and we can unmark it as such."}], "answers": [{"comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 1, "creation_date": 1433788010, "post_id": 30714382, "comment_id": 49490324, "body": "&quot;<code>x += y</code> is equivalent (in terms of operator overloading) to <code>x = x + y</code>&quot; \u2192 I thought <code>+=</code> wasn&#39;t yet overloadable at all."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1433795220, "post_id": 30714382, "comment_id": 49494445, "body": "I think Veedrac is right"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433838776, "post_id": 30714382, "comment_id": 49510203, "body": "I stand corrected, thanks."}, {"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 0, "creation_date": 1591341984, "post_id": 30714382, "comment_id": 110024199, "body": "Overloading += has been added since this question was originally asked."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 15, "last_activity_date": 1433838900, "last_edit_date": 1433838900, "creation_date": 1433780572, "answer_id": 30714382, "question_id": 30714058, "link": "https://stackoverflow.com/questions/30714058/rust-string-concatenation/30714382#30714382", "title": "Rust String concatenation", "body": "<p>First, in Rust <code>x += y</code> is not overloadable, so <code>+=</code> operator won't work for anything except basic numeric types. However, even if it worked for strings, it would be equivalent to <code>x = x + y</code>, like in the following:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>res = res + format!(\"{} {}\\n\",i.to_string(),ch.to_string())\n</code></pre>\n\n<p>Even if this were allowed by the type system (it is not because <code>String + String</code> \"overload\" is not defined in Rust), this is still not how <a href=\"http://en.wikipedia.org/wiki/Fold_(higher-order_function)\"><code>fold()</code></a> operates. You want this:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>res + &amp;format!(\"{} {}\\n\", i, ch)\n</code></pre>\n\n<p>or, as a compilable example,</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn main(){\n    let x = \"hello\";\n    let res : String = x.chars().enumerate().fold(String::new(), |res, (i, ch)| {\n        res + &amp;format!(\"{} {}\\n\", i, ch)\n    });\n\n    println!(\"{}\", res);\n}\n</code></pre>\n\n<p>When you perform a fold, you don't reassign the accumulator variable, you need to return the new value for it to be used on the next iteration, and this is exactly what <code>res + format!(...)</code> do.</p>\n\n<p>Note that I've removed <code>to_string()</code> invocations because they are completely unnecessary - in fact, <code>x.to_string()</code> is equivalent to <code>format!(\"{}\", x)</code>, so you only perform unnecessary allocations here.</p>\n\n<p>Additionally, I'm taking <code>format!()</code> result by reference: <code>&amp;format!(...)</code>. This is necessary because <code>+</code> \"overload\" for strings is defined for <code>String + &amp;str</code> pair of types, so you need to convert from <code>String</code> (the result of <code>format!()</code>) to <code>&amp;str</code>, and this can be done simply by using <code>&amp;</code> here (because of deref coercion).</p>\n\n<p>In fact, the following would be more efficient:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt::Write;\n\nfn main(){\n    let x = \"hello\";\n    let res: String = x.chars().enumerate().fold(String::new(), |mut res, (i, ch)| {\n        write!(&amp;mut res, \"{} {}\\n\", i, ch).unwrap();\n        res\n    });\n\n    println!(\"{}\", res);\n}\n</code></pre>\n\n<p>which could be written more idiomatically as</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::fmt::Write;\n\nfn main(){\n    let x = \"hello\";\n\n    let mut res = String::new(); \n    for (i, ch) in x.chars().enumerate() {\n        write!(&amp;mut res, \"{} {}\\n\", i, ch).unwrap();\n    }\n\n    println!(\"{}\", res);\n}\n</code></pre>\n\n<p>(try it on <a href=\"http://is.gd/yBQUZg\">playpen</a>)</p>\n\n<p>This way no extra allocations (i.e. new strings from <code>format!()</code>) are created. We just fill the string with the new data, very similar, for example, to how <code>StringBuilder</code> in Java works. <code>use std::fmt::Write</code> here is needed to allow calling <code>write!()</code> on <code>&amp;mut String</code>.</p>\n\n<p>I would also suggest reading <a href=\"http://doc.rust-lang.org/book/strings.html\">the chapter on strings</a> in the official Rust book (and the book as a whole if you're new to Rust). It explains what <code>String</code> and <code>&amp;str</code> are, how they are different and how to work with them efficiently.</p>\n"}], "owner": {"reputation": 125, "user_id": 4986687, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/33984acccb9b3208545055a839c2b6e6?s=128&d=identicon&r=PG&f=1", "display_name": "Francisco Rubin Capalbo", "link": "https://stackoverflow.com/users/4986687/francisco-rubin-capalbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10730, "favorite_count": 1, "closed_date": 1433783917, "accepted_answer_id": 30714382, "answer_count": 1, "score": 8, "last_activity_date": 1465313114, "creation_date": 1433779528, "last_edit_date": 1465313114, "question_id": 30714058, "link": "https://stackoverflow.com/questions/30714058/rust-string-concatenation", "closed_reason": "Duplicate", "title": "Rust String concatenation", "body": "<p>I started programming with Rust this week and I am having a lot of problems understanding how Strings work. </p>\n\n<p>Right now, I am trying to do a simple program that prints a list of players appending their order(for learning purposes only).</p>\n\n<pre><code>let res : String = pl.name.chars().enumerate().fold(String::new(),|res,(i,ch)| -&gt; String {\n    res+=format!(\"{} {}\\n\",i.to_string(),ch.to_string());\n});\n\nprintln!(\"{}\", res);\n</code></pre>\n\n<p>This is my idea, I know I could just use a for loop but the objective is to understand the different Iterator functions. </p>\n\n<p>So, my problem is that the String concatenation does not work.</p>\n\n<pre><code>   Compiling prueba2 v0.1.0 (file:///home/pancho111203/projects/prueba2)\nsrc/main.rs:27:13: 27:16 error: binary assignment operation `+=` cannot be applied to types `collections::string::String` and `collections::string::String` [E0368]\nsrc/main.rs:27             res+=format!(\"{} {}\\n\",i.to_string(),ch.to_string());\n                           ^~~\nerror: aborting due to previous error\nCould not compile `prueba2`.\n</code></pre>\n\n<p>I tried using &amp;str but it is not possible to create them from <code>i</code> and <code>ch</code> values.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1433757955, "post_id": 30705698, "comment_id": 49470100, "body": "Well the first thing that strikes me, is that associated consts define the const in the for part i.e <code>HasNumber for Two</code> rather than <code>HasNumber&lt;Two&gt; for T</code>. However I already encountered some ICEs here, so I think it&#39;s just this feature being very new."}, {"owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "edited": false, "score": 0, "creation_date": 1433762279, "post_id": 30705698, "comment_id": 49472849, "body": "Thanks, that PR comment answers my question."}], "answers": [{"tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 6, "last_activity_date": 1433771322, "creation_date": 1433771322, "answer_id": 30710884, "question_id": 30705698, "link": "https://stackoverflow.com/questions/30705698/why-can-associated-constants-not-depend-on-type-parameters/30710884#30710884", "title": "Why can associated constants not depend on type parameters?", "body": "<p>Short answer: It's not implemented yet, since it's hard to get right. There's even an open RFC named \"<a href=\"https://github.com/rust-lang/rfcs/pull/1062\">Constants that depend on type parameters in generic code</a>\" for it.</p>\n\n<p>Long answer:</p>\n\n<p>This used to be a <a href=\"https://github.com/rust-lang/rust/issues/25046\">compiler-bug that caused the compiler to crash</a>. It was \"fixed\" by @quantheory in <a href=\"https://github.com/rust-lang/rust/pull/25091\">PR 25091</a> by making this an error instead of a crash. @quantheory commented that</p>\n\n<blockquote>\n  <p>I haven't been able to deal with the array size or recursion issues yet for associated consts, though my hope was that the change I made for range match patterns might help with array sizes, too.</p>\n</blockquote>\n\n<p>@quantheory also notes that this will stay an error until something along the lines of <a href=\"https://github.com/rust-lang/rfcs/pull/1062\">RFC 1062</a> is merged. Comments on the RFC are always appreciated, as they might hilight forgotten use-cases.</p>\n"}], "owner": {"reputation": 471, "user_id": 1204992, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/7ea79d59662f7180c29da5a1be5a9284?s=128&d=identicon&r=PG", "display_name": "Ferio", "link": "https://stackoverflow.com/users/1204992/ferio"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 824, "favorite_count": 0, "accepted_answer_id": 30710884, "answer_count": 1, "score": 10, "last_activity_date": 1433771322, "creation_date": 1433756218, "last_edit_date": 1433765738, "question_id": 30705698, "link": "https://stackoverflow.com/questions/30705698/why-can-associated-constants-not-depend-on-type-parameters", "title": "Why can associated constants not depend on type parameters?", "body": "<p>Is this just a current limitation or is there a technical reason? As generic functions get compiled to specialized code, I don\u2019t see what should prevent it from working. It also works fine in the <code>main</code> function.</p>\n\n<p>Example (<a href=\"http://is.gd/AMBcVY\">playground</a>):</p>\n\n<pre><code>#![feature(associated_consts)]\ntrait HasNumber&lt;T&gt; {\n    const Number: usize;\n}\n\nenum One {}\nenum Two {}\n\nenum Foo {}\n\nimpl&lt;T&gt; HasNumber&lt;One&gt; for T {\n    const Number: usize = 1;\n}\n\nimpl&lt;T&gt; HasNumber&lt;Two&gt; for T {\n    const Number: usize = 2;\n}\n\nfn use_number&lt;T, H: HasNumber&lt;T&gt;&gt;() {\n    let a: [u8; H::Number] = unsafe { ::std::mem::uninitialized() };\n}\n\nfn main() {\n    let a: [u8; &lt;Foo as HasNumber&lt;One&gt;&gt;::Number] = unsafe { ::std::mem::uninitialized() };\n    println!(\"{}\", &lt;Foo as HasNumber&lt;One&gt;&gt;::Number); \n    println!(\"{}\", &lt;Foo as HasNumber&lt;Two&gt;&gt;::Number);    \n}\n</code></pre>\n"}, {"tags": ["rust", "mio"], "comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 2, "creation_date": 1433715466, "post_id": 30698561, "comment_id": 49456264, "body": "Please report this on <a href=\"https://github.com/rust-lang/rfcs/issues\" rel=\"nofollow noreferrer\">rust&#39;s issue tracker</a>"}, {"owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "reply_to_user": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433715886, "post_id": 30698561, "comment_id": 49456383, "body": "I already did: <a href=\"https://github.com/rust-lang/rust/issues/26080\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/26080</a> - not sure if it was the perfect place."}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433716563, "post_id": 30698561, "comment_id": 49456538, "body": "thank you, I think that&#39;s the place"}], "answers": [{"comments": [{"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "edited": false, "score": 0, "creation_date": 1433794066, "post_id": 30714855, "comment_id": 49493839, "body": "I was just stumped that it worked like this, and now I don&#39;t think we can call it a bug. Rust is stable so we need to get friendly with this feature. :-|"}], "tags": [], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "is_accepted": true, "score": 7, "last_activity_date": 1433858219, "last_edit_date": 1433858219, "creation_date": 1433782181, "answer_id": 30714855, "question_id": 30698561, "link": "https://stackoverflow.com/questions/30698561/no-error-for-two-traits-implementing-the-same-method/30714855#30714855", "title": "No error for two traits implementing the same method", "body": "<p>@bluss found the problem:</p>\n\n<pre><code>struct Type;\n\ntrait A {\n    fn foo(&amp;self) -&gt; bool { false }\n}\n\ntrait B : Sized {\n    fn foo(self) -&gt; bool { true }\n}\n\nimpl A for Type { }\nimpl B for Type { }\n\nfn main() {\n    println!(\"{}\", Type.foo());   // This will call B::foo -- it will prefer `self`.\n}\n</code></pre>\n\n<p>If both types use a slightly different <code>self</code> type, Rust treats them as different and calling the method simply prefers one of them.</p>\n\n<p>This is probably a bug in Rust. For details have a look at the corresponding <a href=\"http://github.com/rust-lang/rust/issues/26080\" rel=\"nofollow\">Rust issue</a>.</p>\n"}], "owner": {"reputation": 22448, "user_id": 1870481, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/478e3c60bf48e069b2f79bddd202d600?s=128&d=identicon&r=PG", "display_name": "michas", "link": "https://stackoverflow.com/users/1870481/michas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1102, "favorite_count": 0, "accepted_answer_id": 30714855, "answer_count": 1, "score": 15, "last_activity_date": 1433858219, "creation_date": 1433712087, "last_edit_date": 1433713948, "question_id": 30698561, "link": "https://stackoverflow.com/questions/30698561/no-error-for-two-traits-implementing-the-same-method", "title": "No error for two traits implementing the same method", "body": "<p>According to <a href=\"https://doc.rust-lang.org/book/ufcs.html\" rel=\"noreferrer\">the docs</a>, Rust should complain if I try to call a method provided by two different traits like this:</p>\n\n<pre><code>trait Foo {\n    fn f(&amp;self);\n}\n\ntrait Bar {\n    fn f(&amp;self);\n}\n\nstruct Baz;\n\nimpl Foo for Baz {\n    fn f(&amp;self) { println!(\"Baz\u2019s impl of Foo\"); }\n}\n\nimpl Bar for Baz {\n    fn f(&amp;self) { println!(\"Baz\u2019s impl of Bar\"); }\n}\n\nfn main(){\n    let b = Baz;\n    b.f();\n}\n</code></pre>\n\n<p>Running this results in the expected <code>error: multiple applicable methods in scope</code> error.</p>\n\n<p>However I get no error for this:</p>\n\n<pre><code>extern crate mio;\nuse mio::buf::RingBuf;\nuse mio::buf::Buf;\nuse std::io::Read;\n\nfn main() {\n    let buf = RingBuf::new(10);\n    let bytes = buf.bytes();\n    println!(\"{:?}\", bytes);\n}\n</code></pre>\n\n<p><code>mio::buf::RingBuf</code> implements both <code>Buf</code> and <code>Read</code>. Both traits provide a <code>bytes</code> method.</p>\n\n<p>I would expect Rust to complain with the same error as above. Instead it silently chooses the \"wrong\" implementation and later <code>println</code> complains about the wrong type.</p>\n\n<p>Any idea why I don't get an error here?</p>\n\n<p>If I remove <code>use std::io::Read;</code> everything works fine. But with that trait in scope suddenly the implementation of Read is used and bytes has the \"wrong\" type.</p>\n\n<p>(I am using Rust 1.0.0)</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433713179, "post_id": 30698544, "comment_id": 49455641, "body": "FYI, the Rust style is 4-space indents."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1433712403, "creation_date": 1433712403, "answer_id": 30698603, "question_id": 30698544, "link": "https://stackoverflow.com/questions/30698544/using-a-no-method-trait-implementation-in-a-different-module/30698603#30698603", "title": "Using a no-method trait implementation in a different module", "body": "<p>Even though your <code>Gene</code> trait has no methods, <code>TraderGene</code> will not automatically implement it, even if it implements all of <code>Gene</code>'s supertraits. You must write an empty <code>impl</code> in your <code>genetics</code> module:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl Gene for TraderGene {}\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 4984258, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7935c05e393bb0cd984923fd917fc931?s=128&d=identicon&r=PG&f=1", "display_name": "Dustin", "link": "https://stackoverflow.com/users/4984258/dustin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 289, "favorite_count": 0, "accepted_answer_id": 30698603, "answer_count": 1, "score": 2, "last_activity_date": 1433713142, "creation_date": 1433711937, "last_edit_date": 1433713142, "question_id": 30698544, "link": "https://stackoverflow.com/questions/30698544/using-a-no-method-trait-implementation-in-a-different-module", "title": "Using a no-method trait implementation in a different module", "body": "<p>I have lib.rs:</p>\n\n<pre><code>pub mod genetics {\n  use std;\n\n  pub trait RandNewable {\n    fn new() -&gt; Self;\n  }\n\n  pub trait Gene : std::fmt::Debug + Copy + Clone + RandNewable {}\n\n  #[derive(Debug, Copy, Clone)]\n  pub struct TraderGene {\n    cheat: bool,\n  }\n\n  impl RandNewable for TraderGene {\n    fn new() -&gt; TraderGene {\n      TraderGene {\n        cheat: true,\n      }\n    }\n  }\n\n  #[derive(Debug)]\n  pub struct DNA&lt;G: Gene&gt; {\n    genes: [G; 3],\n  }\n\n  impl &lt;G: Gene&gt; DNA&lt;G&gt; {\n    pub fn create() -&gt; DNA&lt;G&gt; {\n      DNA {\n        genes: [RandNewable::new(), RandNewable::new(), RandNewable::new()],\n      }\n    }\n\n    pub fn mutate(&amp;self) -&gt; DNA&lt;G&gt; {\n      let mut copy = self.genes;\n      copy[0] = RandNewable::new();\n      DNA {\n        genes: copy,\n      }\n    }\n  }\n}\n</code></pre>\n\n<p>and I'm trying to use the definitions in main.rs:</p>\n\n<pre><code>extern crate trafficgame;\n\nuse trafficgame::genetics::{DNA, TraderGene, Gene, RandNewable};\n\nfn main() {\n  let t1: DNA&lt;TraderGene&gt; = DNA::create();\n  let t2 = t1.mutate();\n}\n</code></pre>\n\n<p>but I'm getting two errors:</p>\n\n<pre><code>the trait `trafficgame::genetics::Gene` is not implemented for the type `trafficgame::genetics::TraderGene\n</code></pre>\n\n<p>and</p>\n\n<pre><code>type `trafficgame::genetics::DNA&lt;trafficgame::genetics::TraderGene&gt;` does not implement any method in scope named `mutate`\n</code></pre>\n\n<p><code>TraderGene</code> definitely implements the <code>Gene</code> trait, but it seems like the impl for <code>RandNewable</code> isn't in scope in main. The other problem is that since mutate isn't declared in a trait, I don't know what to import in main in order to reference mutate. Am I organizing things incorrectly?</p>\n"}, {"tags": ["data-structures", "hashmap", "hashtable", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433708816, "post_id": 30698061, "comment_id": 49454503, "body": "Please make your example code a <a href=\"/help/mcve\">MCVE</a>. For example, you don&#39;t need to include <i>any</i> randomness to reproduce your error. Additionally, you can just provide a <i>single</i> value to <code>nums</code>. Make your code small, make it reproduce one problem, and ideally make it run on the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playpen</a>. Please have the curtesy to spend a bit of time when asking in order to save the time of many people who will read this to learn or attempt to answer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433708933, "post_id": 30698061, "comment_id": 49454549, "body": "You are asking two questions (another thing to please not do). I&#39;ve marked this as a duplicate of one of them. For your other question, please review <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+does+not+live+long+enough\">the multitude of questions about that error</a> and potentially ask a new question, detailing (a) why your problem is different or (b) what you don&#39;t understand about them."}], "owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 41, "favorite_count": 0, "closed_date": 1433708878, "answer_count": 0, "score": 0, "last_activity_date": 1433708627, "creation_date": 1433708372, "last_edit_date": 1433708627, "question_id": 30698061, "link": "https://stackoverflow.com/questions/30698061/borrow-mutable-and-immutable-reference-in-the-same-block", "closed_reason": "Duplicate", "title": "Borrow mutable and immutable reference in the same block", "body": "<p>I'm trying to implement my own naive HashMap/HashTable data structure in Rust. The first step is to create a table of type <code>Vec&lt;&amp;mut Bucket&gt;</code> where <code>type Bucket = Vec&lt;i64&gt;</code>.</p>\n\n<p>I'm having problems actually filling the table with data... I'm reading 1 000 000 integers from an input file and storing them into 100 000 buckets. For each number from the input, I assign a random bucket. I first check if the bucket already exists and if it does, I push the number onto the bucket. Otherwise, I create the bucket and store it in the table.</p>\n\n<p>I have encountered two problems while doing this: </p>\n\n<p>The <strong>first problem</strong> is that I get an error saying <code>'b' does not live long enough</code> while the creating the bucket. How do I preserve the bucket even after it's scope has ended?</p>\n\n<p>The <strong>second problem</strong> is that I'm borrowing the <code>table</code> both mutably and immutably but I'm not sure how to avoid this.</p>\n\n<pre><code>use std::env;\n// other libs...\n\nextern crate rand;\nuse rand::{thread_rng, Rng};\n\ntype Bucket = Vec&lt;i64&gt;;\n\nfn main() {\n    let mut rng = thread_rng();\n\n    let mut nums = // read 1 million i64s, ie. vec![4253564645, 2394887235, ...] \n    println!(\"input consumed!\");\n\n    let mut table: Vec&lt;&amp;mut Bucket&gt; = Vec::new();\n\n    for x in nums.iter() { \n        let key: usize = rng.gen_range(0, 99999);\n        println!(\"{}\", key);\n\n        if let Some(mut b) = table.get(key) { // &lt;-- immutable borrow\n            b.push(x);\n        } else {\n            let mut b = vec![x]; // &lt;-- `b` does not live long enough\n            table.insert(key, &amp;mut b); //  &lt;-- mutable borrow\n        }\n    }\n}\n</code></pre>\n\n<p>If you want to run the example the whole thing is here: <a href=\"https://gist.github.com/neektza/f96d8bf92ee66f1c1703\" rel=\"nofollow\">https://gist.github.com/neektza/f96d8bf92ee66f1c1703</a></p>\n\n<p>P.S.\nI'm using Rust 1.0.0</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1433704692, "creation_date": 1433704692, "answer_id": 30697502, "question_id": 30697362, "link": "https://stackoverflow.com/questions/30697362/how-do-i-implement-a-function-which-prints-a-vector-of-any-type-and-length/30697502#30697502", "title": "How do I implement a function which prints a vector of any type and length?", "body": "<h3>Problem 1</h3>\n\n<pre><code>fn print_vec&lt;T&gt;(v: &amp;T);\n</code></pre>\n\n<p>Your function declaration wants a <strong>reference</strong> to an item, but you are passing in the item (<code>[1,2,3]</code>). Let's change your code to pass in a reference:</p>\n\n<pre><code>print_vec(&amp;vec);\n</code></pre>\n\n<h3>Problem 2</h3>\n\n<p>You are calling <code>println</code>, but the macro is called <code>println!</code>.</p>\n\n<h3>Problem 3</h3>\n\n<pre><code>error: type `&amp;T` does not implement any method in scope named `iter`\n</code></pre>\n\n<p>You have a reference to <em>any type</em>, and not all types implement the method <code>iter</code>! For example, what would <code>5.iter()</code> mean? Or <code>true.iter()</code>? So, let's change it to a type that does have that method \u2014 a <em>slice</em>:</p>\n\n<pre><code>fn print_vec&lt;T&gt;(v: &amp;[T])\n</code></pre>\n\n<h3>Problem 4</h3>\n\n<pre><code>error: the trait `core::fmt::Display` is not implemented for the type `T`\n</code></pre>\n\n<p>We have said that we want a slice, but the items in the slice can be <em>any type</em>, and not all types are printable! We can use a <em>trait bound</em> to restrict the type of <code>T</code> to only things that can be printed using the <code>{}</code> formatter:</p>\n\n<pre><code>fn print_vec&lt;T&gt;(v: &amp;[T])\n    where T: std::fmt::Display\n</code></pre>\n\n<h3>All together</h3>\n\n<pre><code>fn print_vec&lt;T&gt;(v: &amp;[T])\n    where T: std::fmt::Display\n{\n    for i in v.iter() {\n        println!(\"{}\", i);\n    }\n}\n\nfn main() {\n    let vec = [1, 2, 3];\n    print_vec(&amp;vec);\n} \n</code></pre>\n\n<h3>Extra note</h3>\n\n<pre><code>let vec = [1, 2, 3];\n</code></pre>\n\n<p>You should <strong>not</strong> call this variable <code>vec</code>, because it <em>is not a <code>Vec</code></em>. In fact, it is an <em>array</em>. In Rust, arrays, <code>Vec</code>s, and slices are all distinct concepts \u2014 I'm sure there are other questions detailing the differences.</p>\n\n<p>For similar reasons, you shouldn't call the method <code>print_vec</code>, as it accepts a slice now.</p>\n"}], "owner": {"reputation": 640, "user_id": 4031159, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/7bf29b1d2fa0c521888127dc319053eb?s=128&d=identicon&r=PG&f=1", "display_name": "TM90", "link": "https://stackoverflow.com/users/4031159/tm90"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 345, "favorite_count": 0, "accepted_answer_id": 30697502, "answer_count": 1, "score": 2, "last_activity_date": 1433704692, "creation_date": 1433703783, "last_edit_date": 1433704132, "question_id": 30697362, "link": "https://stackoverflow.com/questions/30697362/how-do-i-implement-a-function-which-prints-a-vector-of-any-type-and-length", "title": "How do I implement a function which prints a vector of any type and length?", "body": "<p>I am trying to implement a function which takes a vector of any type and any lengths to print it.</p>\n\n<p>This is my implementation right now:</p>\n\n<pre><code>fn print_vec&lt;T&gt;(v: &amp;T) {\n    for i in v.iter() {\n        println(\"{}\",i);\n    }\n}\n\nfn main() {\n    let vec = [1,2,3];\n    print_vec(vec);\n}\n</code></pre>\n\n<p>but I get the following error:</p>\n\n<pre><code>mismatched types:\nexpected '&amp;_'\nfound '[_; 3]'\n</code></pre>\n"}, {"tags": ["windows", "rust", "ffi"], "answers": [{"tags": [], "owner": {"reputation": 1479, "user_id": 4450817, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/566922fb80a38c57d6a0db0be0f42f3b?s=128&d=identicon&r=PG&f=1", "display_name": "Vaelden", "link": "https://stackoverflow.com/users/4450817/vaelden"}, "is_accepted": true, "score": 6, "last_activity_date": 1433715567, "creation_date": 1433715567, "answer_id": 30699042, "question_id": 30695291, "link": "https://stackoverflow.com/questions/30695291/linking-with-a-windows-library-outside-the-build-folder/30699042#30699042", "title": "Linking with a Windows library outside the build folder", "body": "<p>I think the issue is that you are mistaking the <em>manifest</em> of your project with the <em>cargo\nconfiguration</em>.</p>\n\n<ul>\n<li>The <em>manifest</em> is the <code>Cargo.toml</code> file at the root of your project. It describes your project itself.</li>\n<li>The <em>cargo configuration</em> describes particular settings for cargo, and allow for example to override dependencies, or in your case override build scripts. The <em>cargo configuration files</em> have a <a href=\"http://doc.crates.io/config.html#hierarchical-structure\" rel=\"nofollow\">hierarchical structure</a>:</li>\n</ul>\n\n<blockquote>\n  <p>Cargo allows to have local configuration for a particular project or\n  global configuration (like git). Cargo also extends this ability to a\n  hierarchical strategy. If, for example, cargo were invoked in\n  /home/foo/bar/baz, then the following configuration files would be\n  probed for:</p>\n\n<pre><code>/home/foo/bar/baz/.cargo/config\n/home/foo/bar/.cargo/config\n/home/foo/.cargo/config\n/home/.cargo/config\n/.cargo/config\n</code></pre>\n  \n  <p>With this structure you can specify local configuration per-project,\n  and even possibly check it into version control. You can also specify\n  personal default with a configuration file in your home directory.</p>\n</blockquote>\n\n<p>So if you move the relevant part:</p>\n\n<pre><code>[target.x86_64-pc-windows-gnu.CDbax]\nrustc-link-lib = [\"CDbax\"]\nrustc-link-search = [\"Z:/Somepath//CPP/CDbax/x64/Debug/\"]\nroot = \"Z:/Somepath//CPP/CDbax/x64/Debug/\"\n</code></pre>\n\n<p>to any correct location for a cargo configuration file, it should work.</p>\n"}], "owner": {"reputation": 2439, "user_id": 2294472, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/231b9fba4257295e39e1484a410d246d?s=128&d=identicon&r=PG", "display_name": "Delta_Fore", "link": "https://stackoverflow.com/users/2294472/delta-fore"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3237, "favorite_count": 0, "accepted_answer_id": 30699042, "answer_count": 1, "score": 6, "last_activity_date": 1433845067, "creation_date": 1433690897, "last_edit_date": 1495535433, "question_id": 30695291, "link": "https://stackoverflow.com/questions/30695291/linking-with-a-windows-library-outside-the-build-folder", "title": "Linking with a Windows library outside the build folder", "body": "<p>Is there a way to link with a library that's not in the current package path.</p>\n\n<p>This <a href=\"https://stackoverflow.com/questions/30545958/ffi-example-from-book-cannot-find-lanneclib-under-windows\">link</a> suggests placing everything under the local directory. Our packages are installed in some repository elsewhere. I just want to specify the libpath to it on windows.</p>\n\n<pre><code>authors = [\"Me\"]\nlinks = \"CDbax\"\n\n[target.x86_64-pc-windows-gnu.CDbax]\nrustc-link-lib = [\"CDbax\"]\nrustc-link-search = [\"Z:/Somepath//CPP/CDbax/x64/Debug/\"]\nroot = \"Z:/Somepath//CPP/CDbax/x64/Debug/\"\n</code></pre>\n\n<p>But trying cargo build -v gives me</p>\n\n<pre><code>package `hello v0.1.0 (file:///H:/Users/Mushfaque.Cradle/Documents/Rustc/hello)` specifies that it links to `CDbax` but does not have a custom build script\n</code></pre>\n\n<p>From the cargo <a href=\"http://doc.crates.io/build-script.html#overriding-build-scripts\" rel=\"nofollow noreferrer\">build script support</a> guide, it seems to suggest that this should work. But I can see that it hasn't added the path. Moving the lib into the local <code>bin\\x68_64-pc-windows-gnu\\</code> path works however.</p>\n\n<p><strong>Update</strong>\nThanks to the answer below, I thought I'd update this to give the final results of what worked on my machine so others find it useful.</p>\n\n<p>In the Cargo.toml add</p>\n\n<pre><code>links = \"CDbax\"\nbuild = \"build.rs\"\n</code></pre>\n\n<p>Even though there is no build.rs file, it seems to require it (?) otherwise complains with </p>\n\n<pre><code>package `xxx v0.1.0` specifies that it links to `CDbax` but does not have a custom build script\n</code></pre>\n\n<p>Followed by Vaelden answer's create a 'config' file in .cargo</p>\n\n<p>If this is a sub crate, you don't need to put the links= tag in the parent crate, even though it's a dll; even with a 'cargo run'. I assume it adds the dll path to the execution environment</p>\n"}, {"tags": ["multithreading", "function", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433644813, "post_id": 30689373, "comment_id": 49438258, "body": "Edited =) Not sure if it&#39;s good enough though."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1433645270, "post_id": 30689373, "comment_id": 49438332, "body": "Note that the Rust style is 4-space indents."}, {"owner": {"reputation": 8404, "user_id": 243712, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/5347c683b6963f418d1b16c65917bf3f?s=128&d=identicon&r=PG", "display_name": "poolie", "link": "https://stackoverflow.com/users/243712/poolie"}, "edited": false, "score": 1, "creation_date": 1433645437, "post_id": 30689373, "comment_id": 49438362, "body": "Please post the actual errors."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1433645230, "last_edit_date": 1433645230, "creation_date": 1433643291, "answer_id": 30689419, "question_id": 30689373, "link": "https://stackoverflow.com/questions/30689373/threaded-calling-of-functions-in-a-vector/30689419#30689419", "title": "Threaded calling of functions in a vector", "body": "<h2>Updated question</h2>\n\n<blockquote>\n  <p>I meant \"call them in their own thread\"</p>\n</blockquote>\n\n<p>The easiest thing to do is avoid the <code>Fn*</code> traits, if possible. If you know that you are only using full functions, then it's straightforward:</p>\n\n<pre><code>use std::thread;\n\nfn a() { println!(\"a\"); }\nfn b() { println!(\"b\"); }\n\nfn main() {\n    let fns = vec![a as fn(), b as fn()];\n\n    for &amp;f in &amp;fns {\n        thread::spawn(move || f());\n    }\n\n    thread::sleep_ms(500);\n}\n</code></pre>\n\n<p>If you can't use that for some reason (like you want to accept closures), then you will need to be a bit more explicit and use <code>Arc</code>:</p>\n\n<pre><code>use std::thread;\nuse std::sync::Arc;\n\nfn a() { println!(\"a\"); }\nfn b() { println!(\"b\"); }\n\nfn main() {\n    let fns = vec![\n        Arc::new(Box::new(a) as Box&lt;Fn() + Send + Sync&gt;),\n        Arc::new(Box::new(b) as Box&lt;Fn() + Send + Sync&gt;),\n    ];\n\n    for f in &amp;fns {\n        let my_f = f.clone();\n        thread::spawn(move || my_f());\n    }\n\n    thread::sleep_ms(500);\n}\n</code></pre>\n\n<p>Here, we can create a <em>reference-counted trait object</em>. We can clone the trait object (increasing the reference count) each time we spawn a new thread. Each thread gets its own reference to the trait object.</p>\n\n<blockquote>\n  <p>If I use <code>thread::scoped</code>, it works too</p>\n</blockquote>\n\n<p><code>thread::scoped</code> is pretty awesome; it's really unfortunate that it needed to be marked unstable due to some complex interactions that weren't the best.</p>\n\n<p>One of the benefits of a scoped thread is that the thread is <em>guaranteed</em> to end by a specific time: when the <code>JoinGuard</code> is dropped. That means that scoped threads are allowed to contain <em>non-<code>'static</code></em> references, so long as those references last longer than the thread!</p>\n\n<p>A spawned thread has no such guarantees about how long they live; these threads may live \"forever\". Any references they take must also live \"forever\", thus the <code>'static</code> restriction.</p>\n\n<p>This serves to explain your original problem. You have a vector with a non-<code>'static</code> lifetime, but you are handing references that point into that vector to the thread. If the vector were to be deallocated <em>before</em> the thread exited, you could attempt to access undefined memory, which leads to crashes in C or C++ programs. This is Rust helping you out!</p>\n\n<h2>Original question</h2>\n\n<blockquote>\n  <p>Call functions in vector without consuming them</p>\n</blockquote>\n\n<p>The answer is that you just call them:</p>\n\n<pre><code>fn a() { println!(\"a\"); }\nfn b() { println!(\"b\"); }\n\nfn main() {\n    let fns = vec![Box::new(a) as Box&lt;Fn()&gt;, Box::new(b) as Box&lt;Fn()&gt;];\n    fns[0]();\n    fns[1]();\n    fns[0]();\n    fns[1]();\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/gTXTGj\" rel=\"nofollow\">Playpen</a></p>\n"}], "owner": {"reputation": 355, "user_id": 4417079, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/73dl7.jpg?s=128&g=1", "display_name": "Shien", "link": "https://stackoverflow.com/users/4417079/shien"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 97, "favorite_count": 0, "accepted_answer_id": 30689419, "answer_count": 1, "score": 3, "last_activity_date": 1433645230, "creation_date": 1433642703, "last_edit_date": 1433644894, "question_id": 30689373, "link": "https://stackoverflow.com/questions/30689373/threaded-calling-of-functions-in-a-vector", "title": "Threaded calling of functions in a vector", "body": "<p>I have an <code>EventRegistry</code> which people can use to register event listeners. It then calls the appropriate listeners when an event is broadcast. But, when I try to multithread it, it doesn't compile. How would I get this code working?</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::collections::HashMap;\nuse std::thread;\n\nstruct EventRegistry&lt;'a&gt; {\n  event_listeners: HashMap&lt;&amp;'a str, Vec&lt;Box&lt;Fn() + Sync&gt;&gt;&gt;\n}\n\nimpl&lt;'a&gt; EventRegistry&lt;'a&gt; {\n  fn new() -&gt; EventRegistry&lt;'a&gt; {\n    EventRegistry {\n      event_listeners: HashMap::new()\n    }\n  }\n\n  fn add_event_listener(&amp;mut self, event: &amp;'a str, listener: Box&lt;Fn() + Sync&gt;) {\n\n    match self.event_listeners.get_mut(event) {\n      Some(listeners) =&gt; {\n        listeners.push(listener);\n        return\n      },\n      None =&gt; {}\n    };\n\n    let mut listeners = Vec::with_capacity(1);\n    listeners.push(listener);\n\n    self.event_listeners.insert(event, listeners);\n  }\n\n  fn broadcast_event(&amp;mut self, event: &amp;str) {\n\n    match self.event_listeners.get(event) {\n      Some(listeners) =&gt; {\n        for listener in listeners.iter() {\n          let _ = thread::spawn(|| {\n            listener();\n          });\n        }\n      }\n      None =&gt; {}\n    }\n\n  }\n}\n\nfn main() {\n  let mut main_registry = EventRegistry::new();\n\n  main_registry.add_event_listener(\"player_move\", Box::new(|| {\n    println!(\"Hey, look, the player moved!\");\n  }));\n\n  main_registry.broadcast_event(\"player_move\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9acab352c3b2880b35b0&amp;version=nightly\" rel=\"nofollow\">Playpen</a> (not sure if it's minimal, but it produces the error)</p>\n\n<p>If I use <code>thread::scoped</code>, it works too, but that's unstable, and I think it only works because it immediately joins back to the main thread.</p>\n"}, {"tags": ["module", "rust", "traits"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 5, "last_activity_date": 1567013161, "last_edit_date": 1567013161, "creation_date": 1433611295, "answer_id": 30685564, "question_id": 30685529, "link": "https://stackoverflow.com/questions/30685529/use-trait-from-submodule-with-same-name-as-struct/30685564#30685564", "title": "Use trait from submodule with same name as struct", "body": "<p>If you don't wish to import both (or can't for whatever reason), you can use <a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\" rel=\"nofollow noreferrer\">Fully Qualified Syntax</a> (FQS) to use the trait's method directly:</p>\n\n<pre><code>fn main() {\n    let dog = Dog;\n    traits::Dog::bark(&amp;dog);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 7, "last_activity_date": 1567013205, "last_edit_date": 1567013205, "creation_date": 1433611363, "answer_id": 30685575, "question_id": 30685529, "link": "https://stackoverflow.com/questions/30685529/use-trait-from-submodule-with-same-name-as-struct/30685575#30685575", "title": "Use trait from submodule with same name as struct", "body": "<p>You could rename the trait when importing it to get the same result without renaming the trait globally:</p>\n\n<pre><code>use traits::Dog as DogTrait;\n</code></pre>\n\n<p>The compiler now even suggests this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>help: you can use `as` to change the binding name of the import\n   |\n1  | use crate::traits::Dog as OtherDog;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/stable/rust-by-example/mod/use.html\" rel=\"nofollow noreferrer\">documentation</a></p>\n"}], "owner": {"reputation": 28131, "user_id": 1956010, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/bfdcb4596e9da98cccbf9a0069fdff6c?s=128&d=identicon&r=PG", "display_name": "nwellnhof", "link": "https://stackoverflow.com/users/1956010/nwellnhof"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1492, "favorite_count": 0, "answer_count": 2, "score": 8, "last_activity_date": 1567013318, "creation_date": 1433611088, "last_edit_date": 1567013318, "question_id": 30685529, "link": "https://stackoverflow.com/questions/30685529/use-trait-from-submodule-with-same-name-as-struct", "title": "Use trait from submodule with same name as struct", "body": "<p>Trying to compile the following Rust code</p>\n\n<pre><code>mod traits {\n    pub trait Dog {\n        fn bark(&amp;self) {\n            println!(\"Bow\");\n        }\n    }\n}\n\nstruct Dog;\n\nimpl traits::Dog for Dog {}\n\nfn main() {\n    let dog = Dog;\n    dog.bark();\n}\n</code></pre>\n\n<p>gives the error message</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0599]: no method named `bark` found for type `Dog` in the current scope\n  --&gt; src/main.rs:15:9\n   |\n9  | struct Dog;\n   | ----------- method `bark` not found for this\n...\n15 |     dog.bark();\n   |         ^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope, perhaps add a `use` for it:\n   |\n1  | use crate::traits::Dog;\n   |\n</code></pre>\n\n<p>If I add <code>use crate::traits::Dog;</code>, the error becomes:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0255]: the name `Dog` is defined multiple times\n  --&gt; src/main.rs:11:1\n   |\n1  | use crate::traits::Dog;\n   |     ------------------ previous import of the trait `Dog` here\n...\n11 | struct Dog;\n   | ^^^^^^^^^^^ `Dog` redefined here\n   |\n   = note: `Dog` must be defined only once in the type namespace of this module\n</code></pre>\n\n<p>If I rename <code>trait Dog</code> to <code>trait DogTrait</code>, everything works. How can I use a trait from a submodule that has the same name as a struct in my main module?</p>\n"}, {"tags": ["file-io", "rust"], "comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 4, "creation_date": 1433607872, "post_id": 30684624, "comment_id": 49429813, "body": "Unrelated to the question itself, but <code>.to_owned()</code> is faster than <code>.to_string()</code>, and is the preferred alternative unless you want to stringify some Show-implementing type."}, {"owner": {"reputation": 1065, "user_id": 4981490, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53bf3109ef8efa03d82559b91a54b2b6?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/4981490/aleksandr"}, "reply_to_user": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433690379, "post_id": 30684624, "comment_id": 49448478, "body": "Thanks. I will use it."}, {"owner": {"reputation": 986, "user_id": 6819040, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/IJDZr.jpg?s=128&g=1", "display_name": "AurevoirXavier", "link": "https://stackoverflow.com/users/6819040/aurevoirxavier"}, "edited": false, "score": 3, "creation_date": 1536229956, "post_id": 30684624, "comment_id": 91352994, "body": "Since <a href=\"https://github.com/rust-lang/rust/pull/32586\" rel=\"nofollow noreferrer\">specialize ToString for str</a>, <code>.to_string()</code> is as fast as <code>.to_owned()</code>."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 46, "last_activity_date": 1517264036, "last_edit_date": 1517264036, "creation_date": 1433605663, "answer_id": 30684735, "question_id": 30684624, "link": "https://stackoverflow.com/questions/30684624/what-is-the-best-variant-for-appending-a-new-line-in-a-text-file/30684735#30684735", "title": "What is the best variant for appending a new line in a text file?", "body": "<p>Using <a href=\"http://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.append\" rel=\"noreferrer\"><code>OpenOptions::append</code></a> is the clearest way to append to a file:</p>\n\n<pre><code>use std::fs::OpenOptions;\nuse std::io::prelude::*;\n\nfn main() {\n    let mut file = OpenOptions::new()\n        .write(true)\n        .append(true)\n        .open(\"my-file\")\n        .unwrap();\n\n    if let Err(e) = writeln!(file, \"A new line!\") {\n        eprintln!(\"Couldn't write to file: {}\", e);\n    }\n}\n</code></pre>\n\n<p>As of Rust 1.8.0 (<a href=\"https://github.com/rust-lang/rust/commit/42f4dd047af2de895df2754f7222b39f10cb6205\" rel=\"noreferrer\">commit</a>) and <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1252-open-options.md\" rel=\"noreferrer\">RFC 1252</a>, <code>append(true)</code> implies <code>write(true)</code>. This should not be a problem anymore.</p>\n\n<p>Before Rust 1.8.0, you must use <strong>both</strong> <code>write</code> and <code>append</code> \u2014 the first one allows you to write bytes into a file, the second specifies where the bytes will be written.</p>\n"}], "owner": {"reputation": 1065, "user_id": 4981490, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/53bf3109ef8efa03d82559b91a54b2b6?s=128&d=identicon&r=PG&f=1", "display_name": "Aleksandr", "link": "https://stackoverflow.com/users/4981490/aleksandr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 13093, "favorite_count": 4, "accepted_answer_id": 30684735, "answer_count": 1, "score": 25, "last_activity_date": 1517264036, "creation_date": 1433604849, "last_edit_date": 1517263936, "question_id": 30684624, "link": "https://stackoverflow.com/questions/30684624/what-is-the-best-variant-for-appending-a-new-line-in-a-text-file", "title": "What is the best variant for appending a new line in a text file?", "body": "<p>I am using this code to append a new line to the end of a file:</p>\n\n<pre><code>let text = \"New line\".to_string();\n\nlet mut option = OpenOptions::new();\noption.read(true);\noption.write(true);\noption.create(true);\n\nmatch option.open(\"foo.txt\") {\n    Err(e) =&gt; {\n        println!(\"Error\");\n    }\n    Ok(mut f) =&gt; {\n        println!(\"File opened\");\n        let size = f.seek(SeekFrom::End(0)).unwrap();\n        let n_text = match size {\n            0 =&gt; text.clone(),\n            _ =&gt; format!(\"\\n{}\", text),\n        };\n        match f.write_all(n_text.as_bytes()) {\n            Err(e) =&gt; {\n                println!(\"Write error\");\n            }\n            Ok(_) =&gt; {\n                println!(\"Write success\");\n            }\n        }\n\n        f.sync_all();\n    }\n}\n</code></pre>\n\n<p>It works, but I think it's too difficult. I found <code>option.append(true);</code>, but if I use it instead of <code>option.write(true);</code> I get \"Write error\".</p>\n"}, {"tags": ["rust", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "edited": false, "score": 2, "creation_date": 1433618830, "post_id": 30681876, "comment_id": 49433052, "body": "Yeah, that will work. Man, Rust is really making me think differently about the way I program."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 9, "last_activity_date": 1471193180, "last_edit_date": 1471193180, "creation_date": 1433587424, "answer_id": 30681876, "question_id": 30681468, "link": "https://stackoverflow.com/questions/30681468/passing-mutable-self-reference-to-method-of-owned-object/30681876#30681876", "title": "Passing mutable self reference to method of owned object", "body": "<p>Currently your <code>Ball</code> struct needs to know about the <code>Field</code> it's contained in to be able to update itself. This doesn't compile because the result would be cyclic references combined with mutation. You could make this work by using <code>Cell</code> or <code>RefCell</code> (the latter having a performance cost) but it would be even better to structure the code differently. Let the <code>Field</code> struct check for and resolve <code>Ball</code>-<code>Ball</code> and <code>Ball</code>-<code>Wall</code> collisions. The <code>Ball</code> struct's <code>update</code> function can handle updating the <code>Ball</code>'s position.</p>\n\n<pre><code>// Ball's update function\nfn update(&amp;mut self) {\n    // update position\n}\n\n// Field's update function\nfn update(&amp;mut self) {\n    for ball in self.balls.iter_mut() {\n        ball.update();\n    }\n\n    // check for collisions\n\n    // resolve any collisions\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 669, "user_id": 564149, "user_type": "registered", "accept_rate": 25, "profile_image": "https://www.gravatar.com/avatar/16545c90d086185237ee2c2153256290?s=128&d=identicon&r=PG", "display_name": "knut", "link": "https://stackoverflow.com/users/564149/knut"}, "edited": false, "score": 0, "creation_date": 1593531105, "post_id": 38944523, "comment_id": 110811347, "body": "This was a really extensive and nice answer @Shepmaster. One of the hardest things starting out with Rust might just be to learn these patterns. Beyond the linked list book, I wish there was a resources with solutions like this in one place. It helps you think about the code, and how to shape it within Rust&#39;s natural boundaries."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1534520812, "last_edit_date": 1534520812, "creation_date": 1471194218, "answer_id": 38944523, "question_id": 30681468, "link": "https://stackoverflow.com/questions/30681468/passing-mutable-self-reference-to-method-of-owned-object/38944523#38944523", "title": "Passing mutable self reference to method of owned object", "body": "<p>Here's a smaller example:</p>\n\n<pre><code>struct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;Field) {}\n}\n\nstruct Field {\n    ball: Ball,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        self.ball.update(self)\n    }\n}\n</code></pre>\n\n<h1>The problem</h1>\n\n<p>When you pass in a reference to <code>Field</code>, you are making the guarantee that the <code>Field</code> cannot change (the <em>immutable</em> part of \"immutable reference\"). However, this code is also attempting to mutate a part of it: the ball! Which reference should be authoritative, <code>self</code> or <code>field</code>, in the implementation of <code>Ball::update</code>?</p>\n\n<h1>Solution: use only the fields you need</h1>\n\n<p>You can separate the parts of the structure needed for <code>update</code> and those not needed and use them <em>before</em> calling the <code>update</code> function:</p>\n\n<pre><code>struct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;u8) {}\n}\n\nstruct Field {\n    players: u8,\n    ball: Ball,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        self.ball.update(&amp;self.players)\n    }\n}\n</code></pre>\n\n<p>You can even bundle these piecemeal references up into a tidy package:</p>\n\n<pre><code>struct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: BallUpdateInfo) {}\n}\n\nstruct BallUpdateInfo&lt;'a&gt; {\n    players: &amp;'a u8,\n}\n\nstruct Field {\n    players: u8,\n    ball: Ball,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        let info = BallUpdateInfo { players: &amp;self.players };\n        self.ball.update(info)\n    }\n}\n</code></pre>\n\n<p>Or restructure your containing struct to separate the information from the beginning:</p>\n\n<pre><code>struct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;UpdateInfo) {}\n}\n\nstruct UpdateInfo {\n    players: u8,\n}\n\nstruct Field {\n    update_info: UpdateInfo,\n    ball: Ball,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        self.ball.update(&amp;self.update_info)\n    }\n}\n</code></pre>\n\n<h1>Solution: remove the member from <code>self</code></h1>\n\n<p>You could also go the <em>other</em> way and remove the <code>Ball</code> from the <code>Field</code> before making any changes to it. If you can easily / cheaply make a <code>Ball</code>, try replacing it:</p>\n\n<pre><code>use std::mem;\n\n#[derive(Default)]\nstruct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;Field) {}\n}\n\nstruct Field {\n    ball: Ball,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        let mut ball = mem::replace(&amp;mut self.ball, Ball::default());\n        ball.update(self);\n        self.ball = ball;\n    }\n}\n</code></pre>\n\n<p>If you can't easily make a new value, you can use an <code>Option</code> and <code>take</code> it:</p>\n\n<pre><code>struct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;Field) {}\n}\n\nstruct Field {\n    ball: Option&lt;Ball&gt;,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        if let Some(mut ball) = self.ball.take() {\n            ball.update(self);\n            self.ball = Some(ball);\n        }\n    }\n}\n</code></pre>\n\n<h1>Solution: runtime checks</h1>\n\n<p>You can move borrow checking to runtime instead of compile-time via <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a>:</p>\n\n<pre><code>use std::cell::RefCell;\n\nstruct Ball {\n    size: u8,\n}\n\nimpl Ball {\n    fn update(&amp;mut self, field: &amp;Field) {}\n}\n\nstruct Field {\n    ball: RefCell&lt;Ball&gt;,\n}\n\nimpl Field {\n    fn update(&amp;mut self) {\n        self.ball.borrow_mut().update(self)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 95188, "user_id": 440119, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/5ec9ca2a92a94a5470396073129d79e7?s=128&d=identicon&r=PG", "display_name": "Benjamin Lindley", "link": "https://stackoverflow.com/users/440119/benjamin-lindley"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3282, "favorite_count": 0, "accepted_answer_id": 30681876, "answer_count": 2, "score": 10, "last_activity_date": 1534520812, "creation_date": 1433584866, "last_edit_date": 1501887630, "question_id": 30681468, "link": "https://stackoverflow.com/questions/30681468/passing-mutable-self-reference-to-method-of-owned-object", "title": "Passing mutable self reference to method of owned object", "body": "<p>The following is a simple simulation with a field which is a rectangular area with two balls bouncing around in it. The <code>Field</code> struct has an <code>update</code> method, which calls <code>update</code> on each of the balls. The balls, in their <code>update</code> method, need to move around based on their velocity. But they also need to react to each other, as well as the boundaries of the field.:</p>\n\n<pre><code>fn main() {\n    let mut field = Field::new(Vector2d { x: 100, y: 100 });\n    field.update();\n}\n\n#[derive(Copy, Clone)]\nstruct Vector2d {\n    x: i32,\n    y: i32,\n}\n\nstruct Ball {\n    radius: i32,\n    position: Vector2d,\n    velocity: Vector2d,\n}\n\nimpl Ball {\n    fn new(radius: i32, position: Vector2d, velocity: Vector2d) -&gt; Ball {\n        Ball {\n            radius: radius,\n            position: position,\n            velocity: velocity,\n        }\n    }\n\n    fn update(&amp;mut self, field: &amp;Field) {\n        // check collisions with walls\n        // and other objects\n    }\n}\n\nstruct Field {\n    size: Vector2d,\n    balls: [Ball; 2],\n}\n\nimpl Field {\n    fn new(size: Vector2d) -&gt; Field {\n        let position_1 = Vector2d {\n            x: size.x / 3,\n            y: size.y / 3,\n        };\n        let velocity_1 = Vector2d { x: 1, y: 1 };\n        let position_2 = Vector2d {\n            x: size.x * 2 / 3,\n            y: size.y * 2 / 3,\n        };\n        let velocity_2 = Vector2d { x: -1, y: -1 };\n\n        let ball_1 = Ball::new(1, position_1, velocity_1);\n        let ball_2 = Ball::new(1, position_2, velocity_2);\n\n        Field {\n            size: size,\n            balls: [ball_1, ball_2],\n        }\n    }\n\n    fn update(&amp;mut self) {\n        // this does not compile\n        self.balls[0].update(self);\n        self.balls[1].update(self);\n    }\n}\n</code></pre>\n\n<p>How do I get the information about the boundaries and the other ball to the <code>Ball</code> struct's update function? These lines in the <code>Field::update</code> do not compile:</p>\n\n<pre><code>self.balls[0].update(self);\nself.balls[1].update(self);\n</code></pre>\n\n<p>Giving the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*self` as immutable because `self.balls[..]` is also borrowed as mutable\n  --&gt; src/main.rs:62:30\n   |\n62 |         self.balls[0].update(self);\n   |         -------------        ^^^^- mutable borrow ends here\n   |         |                    |\n   |         |                    immutable borrow occurs here\n   |         mutable borrow occurs here\n</code></pre>\n\n<p>which I understand, but I don't know how to get around this.</p>\n"}, {"tags": ["input", "rust", "stdin"], "answers": [{"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1433570659, "post_id": 30679311, "comment_id": 49420049, "body": "I tried this, but it says it needs an i32. I used .collect() on the .bytes() but still no luck."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433579438, "post_id": 30679311, "comment_id": 49421986, "body": "I think it&#39;s more idiomatic to use <code>next()</code> instead of <code>nth(0)</code>. Though they are exactly the same thing."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1433579728, "post_id": 30679311, "comment_id": 49422056, "body": "@VladimirMatveev Agreed, I had changed the code given in the answer just enough to make it work (And I forgot the <code>as i32</code> cast. Damn)."}], "tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 2, "last_activity_date": 1499384191, "last_edit_date": 1499384191, "creation_date": 1433568902, "answer_id": 30679311, "question_id": 30678953, "link": "https://stackoverflow.com/questions/30678953/how-to-read-a-single-character-from-input-as-u8/30679311#30679311", "title": "How to read a single character from input as u8?", "body": "<p>First, make your input mutable, then use <code>bytes()</code> instead of <code>chars()</code>.</p>\n\n<pre><code>let mut input = String::new();\nlet string = std::io::stdin().read_line(&amp;mut input).ok().expect(\"Failed to read line\");\nlet bytes = input.bytes().nth(0).expect(\"no byte read\");\n</code></pre>\n\n<p>Please note that Rust strings are a sequence of UTF-8 codepoints, which are not necessarily byte-sized. Depending on what you are trying to achieve, using a <code>char</code> may be the better option.</p>\n"}, {"comments": [{"owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "edited": false, "score": 0, "creation_date": 1433617626, "post_id": 30679861, "comment_id": 49432741, "body": "Thanks, I was using .bytes() on the string and having problems, but it turns out I was using it wrong. This is working for me, I just have to unwrap it."}, {"owner": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 1, "creation_date": 1539840568, "post_id": 30679861, "comment_id": 92648558, "body": "This seems to require Enter to be pushed before it grabs the byte."}, {"owner": {"reputation": 16645, "user_id": 402322, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/GWEWt.gif?s=128&g=1", "display_name": "ceving", "link": "https://stackoverflow.com/users/402322/ceving"}, "reply_to_user": {"reputation": 287228, "user_id": 1240268, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/RN9Mw.jpg?s=128&g=1", "display_name": "Andy Hayden", "link": "https://stackoverflow.com/users/1240268/andy-hayden"}, "edited": false, "score": 0, "creation_date": 1560621784, "post_id": 30679861, "comment_id": 99800409, "body": "@AndyHayden stdin is typically line buffered.Use <a href=\"https://unix.stackexchange.com/questions/25372/turn-off-buffering-in-pipe\">stdbuf</a> to change it."}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 20, "last_activity_date": 1499384224, "last_edit_date": 1499384224, "creation_date": 1433573361, "answer_id": 30679861, "question_id": 30678953, "link": "https://stackoverflow.com/questions/30678953/how-to-read-a-single-character-from-input-as-u8/30679861#30679861", "title": "How to read a single character from input as u8?", "body": "<p>Reading just a byte and casting it to <code>i32</code>:</p>\n\n<pre><code>use std::io::Read;\n\nlet input: Option&lt;i32&gt; = std::io::stdin()\n    .bytes() \n    .next()\n    .and_then(|result| result.ok())\n    .map(|byte| byte as i32);\n\nprintln!(\"{:?}\", input);\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 4808573, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/oFwhb.jpg?s=128&g=1", "display_name": "pengowen123", "link": "https://stackoverflow.com/users/4808573/pengowen123"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7498, "favorite_count": 0, "accepted_answer_id": 30679861, "answer_count": 2, "score": 11, "last_activity_date": 1499384224, "creation_date": 1433565327, "last_edit_date": 1499384113, "question_id": 30678953, "link": "https://stackoverflow.com/questions/30678953/how-to-read-a-single-character-from-input-as-u8", "title": "How to read a single character from input as u8?", "body": "<p>I am currently building a simple interpreter for <a href=\"http://en.wikipedia.org/wiki/Brainfuck\" rel=\"nofollow noreferrer\" title=\"Wikipedia\">this language</a> for practice. The only problem left to overcome is reading a single byte as a character from user input. I have the following code so far, but I need a way to turn the <code>String</code> that the second lines makes into a <code>u8</code> or another integer that I can cast:</p>\n\n<pre><code>let input = String::new()\nlet string = std::io::stdin().read_line(&amp;mut input).ok().expect(\"Failed to read line\");\nlet bytes = string.chars().nth(0) // Turn this to byte?\n</code></pre>\n\n<p>The value in bytes should be a <code>u8</code> which I can cast to a <code>i32</code> to use elsewhere. Perhaps there is a simpler way to do this, otherwise I will use any solution that works.</p>\n"}, {"tags": ["import", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433547061, "post_id": 30677258, "comment_id": 49416106, "body": "Have you looked at any of the <a href=\"http://stackoverflow.com/search?q=%5Brust%5D+Unresolved+Import\">other questions that mention the same error</a>? If so, how does your question differ from them? Have you tried to make a <a href=\"/help/mcve\">smaller testcase</a>?"}, {"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433547234, "post_id": 30677258, "comment_id": 49416154, "body": "I&#39;ve checked out most of the &#39;unresolved import&#39; questions. They mostly centre around getting symbols from outside a crate but I want to do the opposite. I&#39;ll try narrowing the problem down."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433547403, "post_id": 30677258, "comment_id": 49416199, "body": "It&#39;s considered good practice to tell us what you&#39;ve tried and what questions you&#39;ve seen. Also include why those attempts and question don&#39;t work or what you don&#39;t understand from them. This prevents us from guessing what your real problem is, makes it easier for you to get answers, and generally improves your how useful your question is to future searchers."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1433564713, "post_id": 30677258, "comment_id": 49419085, "body": "I can&#39;t see any obvious cause, but... does <code>shader</code> contain any imports from <code>context</code>?  Glob imports can cause issues if you end up with a module recursively depending on itself.  Try removing the <code>*</code> and listing all the symbols you actually use."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 1, "creation_date": 1433569730, "post_id": 30677258, "comment_id": 49419876, "body": "Also does your shader module actually have any public items?"}], "answers": [{"comments": [{"owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "edited": false, "score": 0, "creation_date": 1433824224, "post_id": 30687811, "comment_id": 49503291, "body": "Thanks for the great information, unfortunately I already understand the basics. @DK i think has found the issue as i used cyclical glob imports. (I came from a Java world where <code>import myPackage.*;</code> is fine)"}, {"owner": {"reputation": 1122, "user_id": 4970650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/496526a825adf2e6587a19d3a6d391f7?s=128&d=identicon&r=PG", "display_name": "Cirelli94", "link": "https://stackoverflow.com/users/4970650/cirelli94"}, "edited": false, "score": 0, "creation_date": 1575382343, "post_id": 30687811, "comment_id": 104542212, "body": "My problem is similar but I don&#39;t think you answered correctly Harrison... Infact I can&#39;t do this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e51977fc203b23a39793816253d1aa43\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 1122, "user_id": 4970650, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/496526a825adf2e6587a19d3a6d391f7?s=128&d=identicon&r=PG", "display_name": "Cirelli94", "link": "https://stackoverflow.com/users/4970650/cirelli94"}, "edited": false, "score": 4, "creation_date": 1575382367, "post_id": 30687811, "comment_id": 104542228, "body": "in my real problem &quot;my&quot; and &quot;cool&quot; are two different files, so two mods. But in my I can&#39;t recall cool with super:: neither with crate!"}], "tags": [], "owner": {"reputation": 623, "user_id": 3170577, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f727fbe1dc113a0d2150a9e5062c907a?s=128&d=identicon&r=PG", "display_name": "HarrisonG16", "link": "https://stackoverflow.com/users/3170577/harrisong16"}, "is_accepted": false, "score": 36, "last_activity_date": 1549809552, "last_edit_date": 1549809552, "creation_date": 1433626671, "answer_id": 30687811, "question_id": 30677258, "link": "https://stackoverflow.com/questions/30677258/how-do-i-import-from-a-sibling-module/30687811#30687811", "title": "How do I import from a sibling module?", "body": "<p>Note that the behavior of <code>use</code> has changed from Rust 2015 to Rust 2018. See <a href=\"https://stackoverflow.com/q/54289071/155423\">What are the valid path roots in the use keyword?</a> for details.</p>\n\n<h1>Rust 2018</h1>\n\n<p>To import a module on the same level, do the following:</p>\n\n<p><strong>random_file_0.rs</strong></p>\n\n<pre><code>// Note how this is a public function. It has to be in order to be\n// usable from other files (in this case `random_file_1.rs`)\npub fn do_something() -&gt; bool {\n    true\n}\n</code></pre>\n\n<p><strong>random_file_1.rs</strong></p>\n\n<pre><code>use super::random_file_0;\n\n#[test]\nfn do_something_else() {\n    assert!(random_file_0::do_something());\n}\n</code></pre>\n\n<p>or an alternative <strong>random_file_1.rs</strong>:</p>\n\n<pre><code>use crate::random_file_0;\n\n#[test]\nfn do_something_else() {\n    assert!(random_file_0::do_something());\n}\n</code></pre>\n\n<p><strong>lib.rs</strong></p>\n\n<pre><code>mod random_file_0;\nmod random_file_1;\n</code></pre>\n\n<p>See <a href=\"https://doc.rust-lang.org/1.32.0/rust-by-example/mod/super.html\" rel=\"noreferrer\">Rust By Example</a> for more information and examples. If that doesn't work, here is the code it shows:</p>\n\n<pre><code>fn function() {\n    println!(\"called `function()`\");\n}\n\nmod cool {\n    pub fn function() {\n        println!(\"called `cool::function()`\");\n    }\n}\n\nmod my {\n    fn function() {\n        println!(\"called `my::function()`\");\n    }\n\n    mod cool {\n        pub fn function() {\n            println!(\"called `my::cool::function()`\");\n        }\n    }\n\n    pub fn indirect_call() {\n        // Let's access all the functions named `function` from this scope!\n        print!(\"called `my::indirect_call()`, that\\n&gt; \");\n\n        // The `self` keyword refers to the current module scope - in this case `my`.\n        // Calling `self::function()` and calling `function()` directly both give\n        // the same result, because they refer to the same function.\n        self::function();\n        function();\n\n        // We can also use `self` to access another module inside `my`:\n        self::cool::function();\n\n        // The `super` keyword refers to the parent scope (outside the `my` module).\n        super::function();\n\n        // This will bind to the `cool::function` in the *crate* scope.\n        // In this case the crate scope is the outermost scope.\n        {\n            use cool::function as root_function;\n            root_function();\n        }\n    }\n}\n\nfn main() {\n    my::indirect_call();\n}\n</code></pre>\n\n<h1>Rust 2015</h1>\n\n<p>To import a module on the same level, do the following:</p>\n\n<p><code>random_file_0.rs</code>:</p>\n\n<pre><code>// Note how this is a public function. It has to be in order to be\n// usable from other files (in this case `random_file_1.rs`)\npub fn do_something() -&gt; bool {\n    true\n}\n</code></pre>\n\n<p><code>random_file_1.rs</code>:</p>\n\n<pre><code>use super::random_file_0;\n\n#[test]\nfn do_something_else() {\n    assert!(random_file_0::do_something());\n}\n</code></pre>\n\n<p>or an alternative <code>random_file_1.rs</code>:</p>\n\n<pre><code>use ::random_file_0;\n\n#[test]\nfn do_something_else() {\n    assert!(random_file_0::do_something());\n}\n</code></pre>\n\n<p><code>lib.rs</code>:</p>\n\n<pre><code>mod random_file_0;\nmod random_file_1;\n</code></pre>\n\n<p>Here is another example from a previous version of Rust By Example:</p>\n\n<pre><code>fn function() {\n    println!(\"called `function()`\");\n}\n\nmod my {\n    pub fn indirect_call() {\n        // Let's access all the functions named `function` from this scope\n        print!(\"called `my::indirect_call()`, that\\n&gt; \");\n\n        // `my::function` can be called directly\n        function();\n\n        {\n            // This will bind to the `cool::function` in the *crate* scope\n            // In this case the crate scope is the outermost scope\n            use cool::function as root_cool_function;\n\n            print!(\"&gt; \");\n            root_cool_function();\n        }\n\n        {\n            // `self` refers to the current module scope, in this case: `my`\n            use self::cool::function as my_cool_function;\n\n            print!(\"&gt; \");\n            my_cool_function();\n        }\n\n        {\n            // `super` refers to the parent scope, i.e. outside of the `my`\n            // module\n            use super::function as root_function;\n\n            print!(\"&gt; \");\n            root_function();\n        }\n    }\n\n    fn function() {\n        println!(\"called `my::function()`\");\n    }\n\n    mod cool {\n        pub fn function() {\n            println!(\"called `my::cool::function()`\");\n        }\n    }\n}\n\nmod cool {\n    pub fn function() {\n        println!(\"called `cool::function()`\");\n    }\n}\n\nfn main() {\n    my::indirect_call();\n}\n</code></pre>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 14207, "favorite_count": 9, "answer_count": 1, "score": 42, "last_activity_date": 1549809552, "creation_date": 1433546836, "last_edit_date": 1537395555, "question_id": 30677258, "link": "https://stackoverflow.com/questions/30677258/how-do-i-import-from-a-sibling-module", "title": "How do I import from a sibling module?", "body": "<p>In <code>src/lib.rs</code> I have the following</p>\n\n<pre><code>extern crate opal_core;\n\nmod functions;\nmod context;\nmod shader;\n</code></pre>\n\n<p>Then in <code>src/context.rs</code> I have something like this, which tries to import symbols from <code>src/shader.rs</code>:</p>\n\n<pre><code>use opal_core::shader::Stage;\nuse opal_core::shader::Shader as ShaderTrait;\nuse opal_core::GraphicsContext as GraphicsContextTrait;\n\nuse functions::*; // this import works fine\nuse shader::*; // this one doesn't\n\npub struct GraphicsContext {\n    functions: Gl\n}\n\nfn shader_stage_to_int(stage: &amp;Stage) -&gt; u32 {\n    match stage {\n        &amp;Stage::Vertex =&gt; VERTEX_SHADER,\n        &amp;Stage::Geometry =&gt; GEOMETRY_SHADER,\n        &amp;Stage::Fragment =&gt; FRAGMENT_SHADER,\n    }\n}\n\nimpl GraphicsContextTrait for GraphicsContext {\n\n    /// Creates a shader object\n    fn create_shader(&amp;self, stage: Stage, source: &amp;str) -&gt; Box&lt;ShaderTrait&gt; {\n        let id;\n\n        unsafe {\n            id = self.functions.CreateShader(shader_stage_to_int(&amp;stage));\n        }\n\n        let shader = Shader {\n            id: id,\n            stage: stage,\n            context: self\n        };\n\n        Box::new(shader)\n    }\n}\n</code></pre>\n\n<p>The problem is that the statement <code>use shader::*;</code> gives the error <em>unresolved import</em>.</p>\n\n<p>I was reading the docs and they said that <code>use</code> statements always go from the root of the current crate (<code>opal_driver_gl</code>) so I thought <code>shader::*</code> should be importing <code>opal_driver_gl::shader::*</code> but it doesn't appear to do so. Do I need to use the <code>self</code> or <code>super</code> keywords here?</p>\n\n<p>Thanks if you can help. </p>\n"}, {"tags": ["namespaces", "rust"], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 6, "last_activity_date": 1433546926, "last_edit_date": 1433546926, "creation_date": 1433544669, "answer_id": 30676965, "question_id": 30676809, "link": "https://stackoverflow.com/questions/30676809/disabling-default-namespaces/30676965#30676965", "title": "Disabling default namespaces", "body": "<p>It's not a matter of 'default namespaces', it's <a href=\"http://doc.rust-lang.org/stable/std/prelude/index.html\">the prelude</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1433546906, "creation_date": 1433546906, "answer_id": 30677273, "question_id": 30676809, "link": "https://stackoverflow.com/questions/30676809/disabling-default-namespaces/30677273#30677273", "title": "Disabling default namespaces", "body": "<p>You can create your own <code>String</code> by... creating your own String:</p>\n\n<pre><code>struct String {\n    len: u8,\n}\n\nfn main() {}\n</code></pre>\n\n<p>You can then disambiguate which <code>String</code> you want using fully-qualified paths:</p>\n\n<pre><code>fn main() {\n    // String::new();\n    // error: type `String` does not implement any method in scope named `new`\n\n    std::string::String::new();\n}\n</code></pre>\n\n<p>The full list of automatically-imported items can be found <a href=\"https://github.com/rust-lang/rust/blob/c78c0994b1df5e365058f301330d06fa035c3734/src/libstd/prelude/v1.rs\" rel=\"noreferrer\">in the prelude</a> (version 1, at the time of writing).</p>\n"}], "owner": {"reputation": 28131, "user_id": 1956010, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/bfdcb4596e9da98cccbf9a0069fdff6c?s=128&d=identicon&r=PG", "display_name": "nwellnhof", "link": "https://stackoverflow.com/users/1956010/nwellnhof"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 116, "favorite_count": 0, "accepted_answer_id": 30677273, "answer_count": 2, "score": 4, "last_activity_date": 1433546926, "creation_date": 1433543680, "last_edit_date": 1433546677, "question_id": 30676809, "link": "https://stackoverflow.com/questions/30676809/disabling-default-namespaces", "title": "Disabling default namespaces", "body": "<p>Rust seems to <code>use</code> some namespaces by default. For example, I don't have to use <code>std::string::String</code> and can simply type <code>String</code>. How can I define my own <code>struct String</code> without clashing with <code>std::string::String</code>? And where can I find a list of the namespaces that are included by default?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1433545693, "post_id": 30673285, "comment_id": 49415771, "body": "<code>type Target = Box&lt;Quack&gt;;</code> is <code>type Target = Box&lt;Quack + &#39;static&gt;;</code>, and <code>&amp;&#39;a Box&lt;Quack&gt;</code> is <code>&amp;&#39;a Box&lt;Quack + &#39;a&gt;</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1433529848, "post_id": 30673443, "comment_id": 49409138, "body": "Specifically, this helps because <code>struct QuackWrap { value: Box&lt;Quack&gt; }</code> is equivalent to <code>struct QuackWrap { value: Box&lt;Quack + &#39;static&gt; }</code>."}, {"owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433530937, "post_id": 30673443, "comment_id": 49409645, "body": "@Shepmaster Thanks for the explanation. I didn&#39;t know precisely which implicit lifetime was being added where, so I left my answer as just the fix. Answering why this broke in the first place is quite helpful."}], "tags": [], "owner": {"reputation": 287982, "user_id": 69755, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/6aa87e056bd2ee342fbd56eb2110603c?s=128&d=identicon&r=PG", "display_name": "Brian Campbell", "link": "https://stackoverflow.com/users/69755/brian-campbell"}, "is_accepted": true, "score": 7, "last_activity_date": 1433529814, "last_edit_date": 1433529814, "creation_date": 1433529028, "answer_id": 30673443, "question_id": 30673285, "link": "https://stackoverflow.com/questions/30673285/implementing-deref-on-a-struct-that-owns-a-boxed-trait/30673443#30673443", "title": "Implementing Deref on a struct that owns a boxed trait", "body": "<p>When in doubt, add more lifetime annotations:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::{Deref, DerefMut};\n\ntrait Quack {\n    fn quack(&amp;self);\n}\n\nstruct QuackWrap&lt;'b&gt; {\n    value: Box&lt;Quack + 'b&gt;\n}\n\nimpl&lt;'b&gt; Deref for QuackWrap&lt;'b&gt;{\n    type Target = Box&lt;Quack + 'b&gt;;\n\n    fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Box&lt;Quack + 'b&gt; {\n        &amp;self.value\n    }\n}\n\nimpl&lt;'b&gt; DerefMut for QuackWrap&lt;'b&gt; {\n    fn deref_mut&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut Box&lt;Quack + 'b&gt; {\n        &amp;mut self.value\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433547695, "post_id": 30675863, "comment_id": 49416262, "body": "<i>There may be a more concise way ...</i> \u2014 Newtypes (and all tuple structs) offer positional accessors. Here&#39;s a <a href=\"http://is.gd/Q6weUR\" rel=\"nofollow noreferrer\">slightly smaller example</a>"}], "tags": [], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "is_accepted": false, "score": 1, "last_activity_date": 1433538557, "creation_date": 1433538557, "answer_id": 30675863, "question_id": 30673285, "link": "https://stackoverflow.com/questions/30673285/implementing-deref-on-a-struct-that-owns-a-boxed-trait/30675863#30675863", "title": "Implementing Deref on a struct that owns a boxed trait", "body": "<p>Based on Brian's answer and Shepmaster's explanation, I updated my code as follow. I also simplified the <code>QuackWrap</code> struct. (That wasn't strictly necessary, but it's arguably better style than what I was doing before.)</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::{Deref, DerefMut};\n\ntrait Quack {\n    fn quack(&amp;self);\n}\n\nstruct QuackWrap(Box&lt;Quack&gt;);\n\nimpl Deref for QuackWrap {\n    type Target = Box&lt;Quack + 'static&gt;;\n\n    fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Box&lt;Quack + 'static&gt; {\n        let QuackWrap(ref v) = *self;\n        v\n    }\n}\n\nimpl DerefMut for QuackWrap {\n    fn deref_mut&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut Box&lt;Quack + 'static&gt; {\n        let QuackWrap(ref mut v) = *self;\n        v\n    }\n}\n</code></pre>\n\n<p>There may be a more concise way to destructure <code>QuackWrap</code> in the <code>deref</code> and <code>deref_mut</code> implementations. Some of those more obscure syntax rules elude me. But for now this is fine.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1245, "favorite_count": 0, "accepted_answer_id": 30673443, "answer_count": 2, "score": 6, "last_activity_date": 1433538557, "creation_date": 1433528410, "question_id": 30673285, "link": "https://stackoverflow.com/questions/30673285/implementing-deref-on-a-struct-that-owns-a-boxed-trait", "title": "Implementing Deref on a struct that owns a boxed trait", "body": "<p>I'd like to implement <code>Deref</code> and <code>DefrefMut</code> on a struct that owns a boxed trait, e.g.:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::ops::{Deref, DerefMut};\n\ntrait Quack {\n    fn quack(&amp;self);\n}\n\nstruct QuackWrap {\n    value: Box&lt;Quack&gt;\n}\n\nimpl Deref for QuackWrap {\n    type Target = Box&lt;Quack&gt;;\n\n    fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Box&lt;Quack&gt; {\n        &amp;self.value\n    }\n}\n\nimpl DerefMut for QuackWrap {\n    fn deref_mut&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut Box&lt;Quack&gt; {\n        &amp;mut self.value\n    }\n}\n</code></pre>\n\n<p>This fails to compile with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:14:5: 16:6 error: method `deref` has an incompatible type for trait: expected bound lifetime parameter 'a, found concrete lifetime [E0053]\nsrc/main.rs:14     fn deref&lt;'a&gt;(&amp;'a self) -&gt; &amp;'a Box&lt;Quack&gt; {\nsrc/main.rs:15         &amp;self.value\nsrc/main.rs:16     }\nsrc/main.rs:20:5: 22:6 error: method `deref_mut` has an incompatible type for trait: expected bound lifetime parameter 'a, found concrete lifetime [E0053]\nsrc/main.rs:20     fn deref_mut&lt;'a&gt;(&amp;'a mut self) -&gt; &amp;'a mut Box&lt;Quack&gt; {\nsrc/main.rs:21         &amp;mut self.value\nsrc/main.rs:22     }\n</code></pre>\n\n<p>If I replace <code>Box&lt;Quack&gt;</code> with <code>Box&lt;String&gt;</code> (or a similar type), it works. The problem is that <code>Quack</code> is a trait. But I'm not sure why that generated the error message it did. Any ideas?</p>\n\n<p>My question is similar to <a href=\"https://stackoverflow.com/questions/27836444/how-do-you-implement-deref-on-a-generic-type-containing-a-trait-in-rust\">another SO question</a>, but not quite the same. In that question, the struct has a type parameter with the trait as a constraint. Whereas in my question, there is no type parameter.</p>\n\n<p>I don't want to confuse the issues, but there's a good reason that I need <code>Box&lt;Quack&gt;</code> in my application. I.e. I can't replace <code>Quack</code> with a type parameter. In case you care, the reason is <a href=\"https://stackoverflow.com/questions/30657436/traits-in-algebraic-data-types/30672566#30672566\">discussed further in another SO question</a>.</p>\n"}, {"tags": ["module", "rust"], "answers": [{"comments": [{"owner": {"reputation": 123, "user_id": 687927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d89bad6553ab41249dc17b2c187fd87?s=128&d=identicon&r=PG", "display_name": "morcmarc", "link": "https://stackoverflow.com/users/687927/morcmarc"}, "edited": false, "score": 0, "creation_date": 1433518332, "post_id": 30670329, "comment_id": 49402962, "body": "Yeah sorry, the <code>B::world()</code> is indeed wrapped in an other function. I&#39;m using cargo to compile the project. Could be a bug in cargo then?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 123, "user_id": 687927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d89bad6553ab41249dc17b2c187fd87?s=128&d=identicon&r=PG", "display_name": "morcmarc", "link": "https://stackoverflow.com/users/687927/morcmarc"}, "edited": false, "score": 0, "creation_date": 1433518471, "post_id": 30670329, "comment_id": 49403052, "body": "If using Cargo is necessary to reproduce, please post your <code>Cargo.toml</code> file.  As it stands, the example as given compiles just fine."}, {"owner": {"reputation": 123, "user_id": 687927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d89bad6553ab41249dc17b2c187fd87?s=128&d=identicon&r=PG", "display_name": "morcmarc", "link": "https://stackoverflow.com/users/687927/morcmarc"}, "edited": false, "score": 0, "creation_date": 1433525134, "post_id": 30670329, "comment_id": 49406748, "body": "It worked. Thanks for clarifying it. Is it idiomatic however to use <code>super::module_name</code>? It feels a bit awkward."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 10, "last_activity_date": 1433520840, "last_edit_date": 1433520840, "creation_date": 1433517998, "answer_id": 30670329, "question_id": 30670129, "link": "https://stackoverflow.com/questions/30670129/access-submodule-from-another-submodule-when-both-submodules-are-in-the-same-mai/30670329#30670329", "title": "Access submodule from another submodule when both submodules are in the same main module", "body": "<p>The problem is that <code>use</code> paths are <em>absolute, not relative</em>.  When you say <code>use A;</code> what you are actually saying is \"use the symbol <code>A</code> in the root module of this crate\", which would be <code>lib.rs</code>.</p>\n\n<p>What you need to use is <code>use super::A;</code>, that or the full path: <code>use foo::A;</code>.</p>\n\n<p>I wrote up a an article on <a href=\"https://gist.github.com/DanielKeep/470f4e114d28cd0c8d43\" rel=\"noreferrer\">Rust's module system and how paths work</a> that might help clear this up if the <a href=\"http://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"noreferrer\">Rust Book chapter on Crates and Modules</a> doesn't.</p>\n"}], "owner": {"reputation": 123, "user_id": 687927, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3d89bad6553ab41249dc17b2c187fd87?s=128&d=identicon&r=PG", "display_name": "morcmarc", "link": "https://stackoverflow.com/users/687927/morcmarc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3723, "favorite_count": 1, "accepted_answer_id": 30670329, "answer_count": 1, "score": 10, "last_activity_date": 1433520840, "creation_date": 1433517465, "last_edit_date": 1433520111, "question_id": 30670129, "link": "https://stackoverflow.com/questions/30670129/access-submodule-from-another-submodule-when-both-submodules-are-in-the-same-mai", "title": "Access submodule from another submodule when both submodules are in the same main module", "body": "<p>I'm using <code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)</code> and I've got the following setup:</p>\n\n<pre><code>my_app/\n|\n|- my_lib/\n|   |\n|   |- foo\n|   |   |- mod.rs\n|   |   |- a.rs\n|   |   |- b.rs\n|   |\n|   |- lib.rs\n|   |- Cargo.toml\n|\n|- src/\n|   |- main.rs\n|\n|- Cargo.toml\n</code></pre>\n\n<p>src/main.rs:</p>\n\n<pre><code>extern crate my_lib;\n\nfn main() {\n  my_lib::some_function();\n}\n</code></pre>\n\n<p>my_lib/lib.rs:</p>\n\n<pre><code>pub mod foo;\n\nfn some_function() {\n  foo::do_something();\n}\n</code></pre>\n\n<p>my_lib/foo/mod.rs:</p>\n\n<pre><code>pub mod a;\npub mod b;\n\npub fn do_something() {\n  b::world();\n}\n</code></pre>\n\n<p>my_lib/foo/a.rs:</p>\n\n<pre><code>pub fn hello() {\n  println!(\"Hello world\");\n}\n</code></pre>\n\n<p>my_lib/foo/b.rs:</p>\n\n<pre><code>use a;\npub fn world() {\n  a::hello();\n}\n</code></pre>\n\n<p>Cargo.toml:</p>\n\n<pre><code>[dependencies.my_lib]\npath = \"my_lib\"\n</code></pre>\n\n<p>When I try to compile it I get the following error thrown for the <code>use</code> statement in <code>B.rs</code>:</p>\n\n<pre><code>unresolved import `A`. There is no `A` in `???`\n</code></pre>\n\n<p>What am I missing? Thanks.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 7072, "user_id": 1816262, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IcKpN.png?s=128&g=1", "display_name": "OMGtechy", "link": "https://stackoverflow.com/users/1816262/omgtechy"}, "edited": false, "score": 2, "creation_date": 1433507766, "post_id": 30666707, "comment_id": 49395288, "body": "I&#39;m not familiar with Rust, but the error message implies that Branch is not copyable, therefore neither is the enum."}, {"owner": {"reputation": 1288, "user_id": 1876626, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e81a0d90315dfb0b3f64c0936a34699e?s=128&d=identicon&r=PG", "display_name": "Joonazan", "link": "https://stackoverflow.com/users/1876626/joonazan"}, "reply_to_user": {"reputation": 7072, "user_id": 1816262, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/IcKpN.png?s=128&g=1", "display_name": "OMGtechy", "link": "https://stackoverflow.com/users/1816262/omgtechy"}, "edited": false, "score": 0, "creation_date": 1433507970, "post_id": 30666707, "comment_id": 49395434, "body": "Yes, the problem is with Branch. I actually have a theory now why it doesn&#39;t work: making a shallow copy of the root of a tree would cause aliasing. But I can&#39;t figure out how to fix this. Without Copy I can&#39;t fill an array with Empy for example."}, {"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 1, "creation_date": 1433510103, "post_id": 30666707, "comment_id": 49397012, "body": "@Joonazan: <code>[Octtree::Empty, Octtree::Empty, Octtree::Empty, Octtree::Empty, Octtree::Empty, Octtree::Empty, Octtree::Empty, Octtree::Empty]</code>. Problem solved. (And yes, I am absolutely serious about that. If you wish to use arrays, that\u2019s how you\u2019d do it.)"}, {"owner": {"reputation": 1288, "user_id": 1876626, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e81a0d90315dfb0b3f64c0936a34699e?s=128&d=identicon&r=PG", "display_name": "Joonazan", "link": "https://stackoverflow.com/users/1876626/joonazan"}, "reply_to_user": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1433510611, "post_id": 30666707, "comment_id": 49397377, "body": "@ChrisMorgan: Not very convenient. In Go for example you&#39;d create an array of the desired size and then fill it. Rust needs some kind of immutable array that can be filled once."}], "answers": [{"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 6, "last_activity_date": 1433508446, "creation_date": 1433508446, "answer_id": 30666954, "question_id": 30666707, "link": "https://stackoverflow.com/questions/30666707/why-is-an-enum-containing-a-box-not-copyable/30666954#30666954", "title": "Why is an enum containing a Box not copyable?", "body": "<p>Copy is only for types that are trivially copyable. Box is not Copy because merely copying the pointer would violate the single ownership principle.</p>\n\n<p>You want to use Clone and its clone method here.</p>\n"}], "owner": {"reputation": 1288, "user_id": 1876626, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/e81a0d90315dfb0b3f64c0936a34699e?s=128&d=identicon&r=PG", "display_name": "Joonazan", "link": "https://stackoverflow.com/users/1876626/joonazan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 437, "favorite_count": 0, "accepted_answer_id": 30666954, "answer_count": 1, "score": 3, "last_activity_date": 1505114657, "creation_date": 1433507653, "last_edit_date": 1505114657, "question_id": 30666707, "link": "https://stackoverflow.com/questions/30666707/why-is-an-enum-containing-a-box-not-copyable", "title": "Why is an enum containing a Box not copyable?", "body": "<p>Boxes and arrays are copyable, so why does this not compile?</p>\n\n<pre><code>#[derive(Debug, Copy, Clone)]\nenum Octree{\n    Branch(Box&lt;[Octree; 8]&gt;),\n    Filled,\n    Empty,\n}\n</code></pre>\n\n<p>Compile error:</p>\n\n<pre><code>main.rs:3:17: 3:21 error: the trait `Copy` may not be implemented for this type; variant `Branch` does not implement `Copy` [E0205]\n</code></pre>\n\n<p><strong>EDIT:</strong> Ok, so I don't want <code>Octree</code> to be copyable after all. But how do I make it mutable? I want to be able to change children of a node.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 196, "user_id": 3225867, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c15812633767e611a0cf9b86a3b4599a?s=128&d=identicon&r=PG&f=1", "display_name": "JoaoBapt", "link": "https://stackoverflow.com/users/3225867/joaobapt"}, "edited": false, "score": 0, "creation_date": 1578422278, "post_id": 30661354, "comment_id": 105430596, "body": "It is good to point that <code>impl Trait</code> actually creates a <i>generic</i> function, which uses <i>static</i> polymorphism. So, if the objective is having dynamic polymorphism (aka having the behavior change at runtime), it is still better to return a (boxed) trait object, aka <code>Box&lt;dyn Shader&gt;</code>."}, {"owner": {"reputation": 81, "user_id": 7324205, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Wvr4o.jpg?s=128&g=1", "display_name": "Meet Sinojia", "link": "https://stackoverflow.com/users/7324205/meet-sinojia"}, "edited": false, "score": 0, "creation_date": 1597931230, "post_id": 30661354, "comment_id": 112298072, "body": "Why can&#39;t <code>impl Shader</code> be returned from a trait method? I am in a situation where I don&#39;t need a conditional return type, as each struct that implements a trait would only return a particular variant. But I am still forced to use <code>Box&lt;dyn Shader&gt;</code> approach because I need to use a trait method."}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "edited": false, "score": 2, "creation_date": 1598025627, "post_id": 30661354, "comment_id": 112333274, "body": "In short, because the language does not support it.  The language does not yet support it because this requires more type system machinery that we have not finished yet."}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 36, "last_activity_date": 1532621710, "last_edit_date": 1532621710, "creation_date": 1433491229, "answer_id": 30661354, "question_id": 30661046, "link": "https://stackoverflow.com/questions/30661046/how-do-i-return-an-instance-of-a-trait-from-a-method/30661354#30661354", "title": "How do I return an instance of a trait from a method?", "body": "<h3>Rust 1.26 and up</h3>\n\n<p><a href=\"https://blog.rust-lang.org/2018/05/10/Rust-1.26.html\" rel=\"noreferrer\"><code>impl Trait</code> now exists</a>:</p>\n\n<pre><code>fn create_shader(&amp;self) -&gt; impl Shader {\n    let shader = MyShader;\n    shader\n}\n</code></pre>\n\n<p>It does have limitations, such as not being able to be used in a trait method and it cannot be used when the concrete return type is conditional. In those cases, you need to use the trait object answer below.</p>\n\n<h3>Rust 1.0 and up</h3>\n\n<p>You need to return a <em>trait object</em> of some kind, such as <code>&amp;T</code> or <code>Box&lt;T&gt;</code>, and you're right that <code>&amp;T</code> is impossible in this instance:</p>\n\n<pre><code>fn create_shader(&amp;self) -&gt; Box&lt;Shader&gt; {\n    let shader = MyShader;\n    Box::new(shader)\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/27535289/155423\">What is the correct way to return an Iterator (or any other trait)?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29760668/155423\">Conditionally iterate over one of several possible iterators</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 565, "user_id": 646733, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/ec748bb46aace72908ff78afeb3b87d8?s=128&d=identicon&r=PG", "display_name": "Djvu", "link": "https://stackoverflow.com/users/646733/djvu"}, "edited": false, "score": 0, "creation_date": 1461937956, "post_id": 30670444, "comment_id": 61439317, "body": "even if you do not add the as_trait() function, you can still call the <code>get_name</code> method."}], "tags": [], "owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "is_accepted": false, "score": 2, "last_activity_date": 1529596860, "last_edit_date": 1529596860, "creation_date": 1433518320, "answer_id": 30670444, "question_id": 30661046, "link": "https://stackoverflow.com/questions/30661046/how-do-i-return-an-instance-of-a-trait-from-a-method/30670444#30670444", "title": "How do I return an instance of a trait from a method?", "body": "<p>I think you can use generics and static dispatch (I have no idea if those are the right terms, I just saw someone else use them) to create something like this.</p>\n\n<p>This isn't exactly \"returning as a trait\", but it is letting functions use traits generically. The syntax is a little obscure, in my opinion, so it's easy to miss.</p>\n\n<p>I asked <a href=\"https://stackoverflow.com/q/30630810/155423\">Using generic iterators instead of specific list types</a> about returning the <code>Iterator</code> trait. It gets ugly. </p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=df2c444cc377ff034aeb8b87d2c7ba3d&amp;version=stable&amp;mode=debug\" rel=\"nofollow noreferrer\">In the playground</a>:</p>\n\n<pre><code>struct MyThing {\n    name: String,\n}\n\ntrait MyTrait {\n    fn get_name(&amp;self) -&gt; String;\n}\n\nimpl MyTrait for MyThing {\n    fn get_name(&amp;self) -&gt; String {\n        self.name.clone()\n    }\n}\n\nfn as_trait&lt;T: MyTrait&gt;(t: T) -&gt; T {\n    t\n}\n\nfn main() {\n    let t = MyThing {\n        name: \"James\".to_string(),\n    };\n    let new_t = as_trait(t);\n\n    println!(\"Hello, world! {}\", new_t.get_name());\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 666, "user_id": 4256058, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/t81xy.png?s=128&g=1", "display_name": "Cristian Oliveira", "link": "https://stackoverflow.com/users/4256058/cristian-oliveira"}, "is_accepted": false, "score": 6, "last_activity_date": 1529596761, "last_edit_date": 1529596761, "creation_date": 1458364683, "answer_id": 36098169, "question_id": 30661046, "link": "https://stackoverflow.com/questions/30661046/how-do-i-return-an-instance-of-a-trait-from-a-method/36098169#36098169", "title": "How do I return an instance of a trait from a method?", "body": "<p>I think this is what you were searching for; <a href=\"https://gist.github.com/cristianoliveira/722204361927761ae69c150fde040059\" rel=\"nofollow noreferrer\">a simple factory implemented in Rust</a>:</p>\n\n<pre><code>pub trait Command {\n    fn execute(&amp;self) -&gt; String;\n}\n\nstruct AddCmd;\nstruct DeleteCmd;\n\nimpl Command for AddCmd {\n    fn execute(&amp;self) -&gt; String {\n        \"It add\".into()\n    }\n}\n\nimpl Command for DeleteCmd {\n    fn execute(&amp;self) -&gt; String {\n        \"It delete\".into()\n    }\n}\n\nfn command(s: &amp;str) -&gt; Option&lt;Box&lt;Command + 'static&gt;&gt; {\n    match s {\n        \"add\" =&gt; Some(Box::new(AddCmd)),\n        \"delete\" =&gt; Some(Box::new(DeleteCmd)),\n        _ =&gt; None,\n    }\n}\n\nfn main() {\n    let a = command(\"add\").unwrap();\n    let d = command(\"delete\").unwrap();\n    println!(\"{}\", a.execute());\n    println!(\"{}\", d.execute());\n}\n</code></pre>\n"}], "owner": {"reputation": 1126, "user_id": 2046365, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/Fs6fE.jpg?s=128&g=1", "display_name": "neon64", "link": "https://stackoverflow.com/users/2046365/neon64"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 15076, "favorite_count": 7, "accepted_answer_id": 30661354, "answer_count": 3, "score": 32, "last_activity_date": 1570625753, "creation_date": 1433490152, "last_edit_date": 1570625753, "question_id": 30661046, "link": "https://stackoverflow.com/questions/30661046/how-do-i-return-an-instance-of-a-trait-from-a-method", "title": "How do I return an instance of a trait from a method?", "body": "<p>I'm trying to create a function that returns an instance of the <code>Shader</code> trait. Here is my drastically simplified code:</p>\n\n<pre><code>trait Shader {}\n\nstruct MyShader;\nimpl Shader for MyShader {}\n\nstruct GraphicsContext;\n\nimpl GraphicsContext {\n    fn create_shader(&amp;self) -&gt; Shader {\n        let shader = MyShader;\n        shader\n    }\n}\n\nfn main() {}\n</code></pre>\n\n<p>However I receive the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Shader + 'static: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:10:32\n   |\n10 |     fn create_shader(&amp;self) -&gt; Shader {\n   |                                ^^^^^^ `Shader + 'static` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `Shader + 'static`\n   = note: the return type of a function must have a statically known size\n</code></pre>\n\n<p>Newer versions of the compiler have this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `(dyn Shader + 'static)` cannot be known at compilation time\n --&gt; src/main.rs:9:32\n  |\n9 |     fn create_shader(&amp;self) -&gt; Shader {\n  |                                ^^^^^^ doesn't have a size known at compile-time\n  |\n  = help: the trait `std::marker::Sized` is not implemented for `(dyn Shader + 'static)`\n  = note: to learn more, visit &lt;https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n  = note: the return type of a function must have a statically known size\n</code></pre>\n\n<p>This makes sense as the compiler doesn't know the size of the trait, but nowhere can I find the recommended way of fixing this.\nPassing back a reference with <code>&amp;</code> wouldn't work as far as I know because the reference would outlive the lifetime of its creator.</p>\n\n<p>Perhaps I need to use <code>Box&lt;T&gt;</code>?</p>\n"}, {"tags": ["vector", "rust"], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": false, "score": 4, "last_activity_date": 1433506965, "last_edit_date": 1433506965, "creation_date": 1433488315, "answer_id": 30660470, "question_id": 30660311, "link": "https://stackoverflow.com/questions/30660311/is-it-possible-to-find-an-element-in-a-vect-and-remove-it/30660470#30660470", "title": "Is it possible to find an element in a Vec&lt;T&gt; and remove it?", "body": "<p>You could always use an <code>into_iter()</code> to destructure the Vec into an iterator, <code>filter(..)</code> that for the element and <code>collect()</code> into a new Vec:</p>\n\n<pre><code>list.into_iter().filter(|e| !factors.contains(e)).collect();\n</code></pre>\n\n<p>You may need to specify the type of collect (which should be Vec&lt;<em>T</em>> where <em>T</em> is the type of your element) unless you bind it into a variable of the right type.</p>\n\n<p>Edit: Following A.B.'s advice, you could also write</p>\n\n<pre><code>list.retain(|e| !factors.contains(e))\n</code></pre>\n\n<p>Note that both would be within O(L \u00d7 F) where L is the len of <code>list</code> and F the len of <code>factors</code>. For small L and/or F, this will be fine. Otherwise it may be better to convert factors into a HashSet first.</p>\n"}, {"tags": [], "owner": {"reputation": 22050, "user_id": 497364, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d8fd4eb2ae966a16e698b3e61217a7e1?s=128&d=identicon&r=PG", "display_name": "Paolo Falabella", "link": "https://stackoverflow.com/users/497364/paolo-falabella"}, "is_accepted": false, "score": 3, "last_activity_date": 1433489012, "last_edit_date": 1433489012, "creation_date": 1433488354, "answer_id": 30660486, "question_id": 30660311, "link": "https://stackoverflow.com/questions/30660311/is-it-possible-to-find-an-element-in-a-vect-and-remove-it/30660486#30660486", "title": "Is it possible to find an element in a Vec&lt;T&gt; and remove it?", "body": "<p>There is no simultaneous \"find and remove\" method, that I know of.\nVec has:</p>\n\n<ul>\n<li><a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.remove\" rel=\"nofollow\">remove</a> is the general method to remove an element and shift all the ones that follow to fill the gap  </li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.swap_remove\" rel=\"nofollow\">swap_remove</a> remove this element and replace it with the last (avoids all the shifting, so it's generally quicker)  </li>\n<li><a href=\"https://doc.rust-lang.org/stable/std/vec/struct.Vec.html#method.pop\" rel=\"nofollow\">pop</a> removes the last element (very efficient, might not be what you need if you want to remove an element in the middle of the Vec)  </li>\n</ul>\n\n<p>you could do something like:</p>\n\n<pre><code>let mut v = vec![1, 2, 3];\n// iterate through the vector and return the position for the\n// first element == 2. If something is found bind it to the name\n// index\nif let Some(index) = v.iter().position(|&amp;i| i == 2) {\n    v.remove(index); // remove the element at the position index (2)\n}\n\nprintln!(\"{:?}\", v); // prints [1, 3]\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433501750, "post_id": 30660754, "comment_id": 49391363, "body": "Ah interesting, it shifts the focus which is probably why finding it might be difficult."}, {"owner": {"reputation": 281, "user_id": 2150877, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c0bcbfac01034df1d541bd732e3555b1?s=128&d=identicon&r=PG", "display_name": "NecroTechno", "link": "https://stackoverflow.com/users/2150877/necrotechno"}, "edited": false, "score": 0, "creation_date": 1433805967, "post_id": 30660754, "comment_id": 49498679, "body": "Awesome. Thanks for that!"}], "tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": true, "score": 11, "last_activity_date": 1433489291, "creation_date": 1433489291, "answer_id": 30660754, "question_id": 30660311, "link": "https://stackoverflow.com/questions/30660311/is-it-possible-to-find-an-element-in-a-vect-and-remove-it/30660754#30660754", "title": "Is it possible to find an element in a Vec&lt;T&gt; and remove it?", "body": "<p>The example can be written as:</p>\n\n<pre><code>let mut list = (0..10).collect::&lt;Vec&lt;u32&gt;&gt;();\nlist.retain(|element| element % 2 == 0);\nassert_eq!(&amp;list[..], &amp;[0, 2, 4, 6, 8]);\n</code></pre>\n\n<p>The relevant documentation can be found here: <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\">https://doc.rust-lang.org/std/vec/struct.Vec.html</a></p>\n"}], "owner": {"reputation": 281, "user_id": 2150877, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/c0bcbfac01034df1d541bd732e3555b1?s=128&d=identicon&r=PG", "display_name": "NecroTechno", "link": "https://stackoverflow.com/users/2150877/necrotechno"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6886, "favorite_count": 1, "accepted_answer_id": 30660754, "answer_count": 3, "score": 14, "last_activity_date": 1433506965, "creation_date": 1433487745, "question_id": 30660311, "link": "https://stackoverflow.com/questions/30660311/is-it-possible-to-find-an-element-in-a-vect-and-remove-it", "title": "Is it possible to find an element in a Vec&lt;T&gt; and remove it?", "body": "<p>In Rust, is there an in built function for finding and removing elements of a vector, both simultaneously and as separate actions?</p>\n\n<p>For example:</p>\n\n<pre><code>for f in factors {\n    if f in list {\n        list.remove(f);\n    }\n}\n</code></pre>\n\n<p>Currently, the rust documentation is still a tad confusing, so while my search as shown up nothing, I feel like there is a good chance someone else may have found it.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 70403, "user_id": 29809, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/943a45958eb537b816a95920fb0be24c?s=128&d=identicon&r=PG", "display_name": "R Samuel Klatchko", "link": "https://stackoverflow.com/users/29809/r-samuel-klatchko"}, "is_accepted": true, "score": 5, "last_activity_date": 1502386022, "last_edit_date": 1502386022, "creation_date": 1433474170, "answer_id": 30657799, "question_id": 30657778, "link": "https://stackoverflow.com/questions/30657778/consider-removing-this-semicolon-error/30657799#30657799", "title": "&quot;consider removing this semicolon&quot; error", "body": "<p>The return value from a Rust function is the last expression not followed by a semicolon. With the semicolon, your method doesn't return anything. Without the last semicolon, it returns the value of <code>write!(f, \"OMG! {}\", self.0)</code>.</p>\n\n<p>You can read more about that <a href=\"https://doc.rust-lang.org/stable/book/first-edition/functions.html\" rel=\"nofollow noreferrer\">in <em>The Rust Programming Language</em> chapter about functions</a>; look for the part starting with \"What about returning a value?\".</p>\n"}], "owner": {"reputation": 321, "user_id": 369668, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/afb3c9b2472e781f9cf62c3b466d0527?s=128&d=identicon&r=PG&f=1", "display_name": "Giovanni Tirloni", "link": "https://stackoverflow.com/users/369668/giovanni-tirloni"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 260, "favorite_count": 0, "accepted_answer_id": 30657799, "answer_count": 1, "score": 3, "last_activity_date": 1502386022, "creation_date": 1433473930, "last_edit_date": 1502385937, "question_id": 30657778, "link": "https://stackoverflow.com/questions/30657778/consider-removing-this-semicolon-error", "title": "&quot;consider removing this semicolon&quot; error", "body": "<p>While following the <a href=\"http://rustbyexample.com\" rel=\"nofollow noreferrer\">rustbyexample.com</a> tutorial, I typed the following code:</p>\n\n<pre><code>impl fmt::Display for Structure {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        let x = format!(\"{}\", \"something\");\n        write!(f, \"OMG! {}\", self.0);\n    }   \n}   \n</code></pre>\n\n<p>And got the following error from the compiler:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n --&gt; src/main.rs:5:58\n  |\n5 |       fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n  |  __________________________________________________________^\n6 | |         let x = format!(\"{}\", \"something\");\n7 | |         write!(f, \"OMG! {}\", self.0);\n8 | |     }   \n  | |_____^ expected enum `std::result::Result`, found ()\n  |\n  = note: expected type `std::result::Result&lt;(), std::fmt::Error&gt;`\n             found type `()`\nhelp: consider removing this semicolon:\n --&gt; src/main.rs:7:37\n  |\n7 |         write!(f, \"OMG! {}\", self.0);\n  |                                     ^\n</code></pre>\n\n<p>Why is the semicolon relevant (or not) here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433485744, "post_id": 30657436, "comment_id": 49381932, "body": "Note: <code>RefCell</code> is unnecessary here, I can reproduce the issue with <code>Rc&lt;Box&lt;Quack&gt;&gt;</code>."}, {"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1433523601, "post_id": 30657436, "comment_id": 49405941, "body": "Matthieu, you are correct. <code>RefCell</code> is unnecessary to make the error occur. Based on Vladimir&#39;s answer below, I can see why the same error occurs with or without <code>RefCell</code>."}], "answers": [{"comments": [{"owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "edited": false, "score": 0, "creation_date": 1433520624, "post_id": 30660522, "comment_id": 49404281, "body": "Thanks! How would you implement this pattern? The pattern I mean is this: You have a bunch of mutable objects. For efficiency, they can be accessed via different lookup structures, e.g. a hash, a binary tray, and a vector. Some of these lookup structures need objects of different types that all implement a trait. I could wrap them in Enums. Or I could create wrapper structs that own Boxes."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1470229148, "post_id": 30660522, "comment_id": 64862465, "body": "According to this RFC ( <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion&zwnj;&#8203;.md</a> ) the target wrapper type should implement CoerceUnsized in order to make trait auto-coersion possible. However RefCell at the moment misses this implementation, but still is coerseable for stack-based entities ( <a href=\"https://stackoverflow.com/questions/30861295/how-to-i-pass-rcrefcellboxmystruct-to-a-function-accepting-rcrefcellbox\" title=\"how to i pass rcrefcellboxmystruct to a function accepting rcrefcellbox\">stackoverflow.com/questions/30861295/&hellip;</a> ). Box implements CoerceUnsized and is coerseable on its own, but not in the RefCell, which is utterly weird."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1470229301, "post_id": 30660522, "comment_id": 64862577, "body": "I tried to implement own RefCell that implements CoerceUnsized, with no success ( <a href=\"https://play.rust-lang.org/?gist=27e5b540bfceaa9db79abea5f6526d48&amp;version=nightly&amp;backtrace=2\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a> ), and it&#39;s is even more unclear why it&#39;s so, cause the RefCell is just a runtime borrow checker for the UnsafeCell, which is just a wrapper like QuackWrap from the example below."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1470234014, "post_id": 30660522, "comment_id": 64866201, "body": "Ah, I see. Box&lt;T&gt; here acts as &amp;T, so besides of the inner value&#39;s vtable cut while holding a trait object, it also does not give the full vtable info to the objects that wrap it, and that is why it&#39;s so far not possible to cast wrapped DST types. Looks like we need to use unsafe and make a new DST type wrapper with manual vtable management."}, {"owner": {"reputation": 944, "user_id": 817019, "user_type": "registered", "accept_rate": 70, "profile_image": "https://i.stack.imgur.com/xhltk.jpg?s=128&g=1", "display_name": "snuk182", "link": "https://stackoverflow.com/users/817019/snuk182"}, "edited": false, "score": 0, "creation_date": 1470238251, "post_id": 30660522, "comment_id": 64869538, "body": "Also this article describes that very well <a href=\"http://cglab.ca/~abeinges/blah/rust-reuse-and-recycle/\" rel=\"nofollow noreferrer\">cglab.ca/~abeinges/blah/rust-reuse-and-recycle</a>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 6, "last_activity_date": 1433493508, "last_edit_date": 1433493508, "creation_date": 1433488464, "answer_id": 30660522, "question_id": 30657436, "link": "https://stackoverflow.com/questions/30657436/traits-in-algebraic-data-types/30660522#30660522", "title": "Traits in algebraic data types", "body": "<p>This is a correct behavior, even if it is somewhat unfortunate.</p>\n\n<p>In the first case we have this:</p>\n\n<pre><code>let mut pond: Vec&lt;Box&lt;Quack&gt;&gt; = Vec::new();\nlet duck: Box&lt;Duck&gt; = Box::new(Duck);\npond.push(duck);\n</code></pre>\n\n<p>Note that <code>push()</code>, when called on <code>Vec&lt;Box&lt;Quack&gt;&gt;</code>, accepts <code>Box&lt;Quack&gt;</code>, and you're passing <code>Box&lt;Duck&gt;</code>. This is OK - rustc is able to understand that you want to convert a boxed value to a trait object, like here:</p>\n\n<pre><code>let duck: Box&lt;Duck&gt; = Box::new(Duck);\nlet quack: Box&lt;Quack&gt; = duck;  // automatic coercion to a trait object\n</code></pre>\n\n<p>In the second case we have this:</p>\n\n<pre><code>let mut lake: Vec&lt;Rc&lt;RefCell&lt;Box&lt;Quack&gt;&gt;&gt;&gt; = Vec::new();\nlet mallard: Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(Duck)));\nlake.push(mallard);\n</code></pre>\n\n<p>Here <code>push()</code> accepts <code>Rc&lt;RefCell&lt;Box&lt;Quack&gt;&gt;&gt;</code> while you provide <code>Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt;</code>:</p>\n\n<pre><code>let mallard: Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(Duck)));\nlet quack: Rc&lt;RefCell&lt;Box&lt;Quack&gt;&gt;&gt; = mallard;\n</code></pre>\n\n<p>And now there is a trouble. <code>Box&lt;T&gt;</code> is a DST-compatible type, so it can be used as a container for a trait object. The same thing will soon be true for <code>Rc</code> and other smart pointers when <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\">this RFC</a> is implemented. However, in this case there is no coercion from a concrete type to a trait object because <code>Box&lt;Duck&gt;</code> is inside of additional layers of types (<code>Rc&lt;RefCell&lt;..&gt;&gt;</code>).</p>\n\n<p>Remember, trait object is a fat pointer, so <code>Box&lt;Duck&gt;</code> is different from <code>Box&lt;Quack&gt;</code> in size. Consequently, in principle, they are not directly compatible: you can't just take bytes of <code>Box&lt;Duck&gt;</code> and write them to where <code>Box&lt;Quack&gt;</code> is expected. Rust performs a special conversion, that is, it obtains a pointer to the virtual table for <code>Duck</code>, constructs a fat pointer and writes it to <code>Box&lt;Quack&gt;</code>-typed variable.</p>\n\n<p>When you have <code>Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt;</code>, however, rustc would need to know how to construct and destructure both <code>RefCell</code> and <code>Rc</code> in order to apply the same fat pointer conversion to its internals. Naturally, because these are library types, it can't know how to do it. This is also true for any other wrapper type, e.g. <code>Arc</code> or <code>Mutex</code> or even <code>Vec</code>. You don't expect that it would be possible to use <code>Vec&lt;Box&lt;Duck&gt;&gt;</code> as <code>Vec&lt;Box&lt;Quack&gt;&gt;</code>, right?</p>\n\n<p>Also there is a fact that in the example with <code>Rc</code> the Rcs created out of <code>Box&lt;Duck&gt;</code> and <code>Box&lt;Quack&gt;</code> wouldn't have been connected - they would have had different reference counters.</p>\n\n<p>That is, a conversion from a concrete type to a trait object can only happen if you have direct access to a smart pointer which supports DST, not when it is hidden inside some other structure.</p>\n\n<p>That said, I see how it <em>may be</em> possible to allow this for a few select types. For example, we could introduce some kind of <code>Construct</code>/<code>Unwrap</code> traits which are known to the compiler and which it could use to \"reach\" inside of a stack of wrappers and perform trait object conversion inside them. However, no one designed this thing and provided an RFC about it yet - probably because it is not a widely needed feature.</p>\n"}, {"tags": [], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "is_accepted": false, "score": 1, "last_activity_date": 1433527003, "last_edit_date": 1433527003, "creation_date": 1433525705, "answer_id": 30672566, "question_id": 30657436, "link": "https://stackoverflow.com/questions/30657436/traits-in-algebraic-data-types/30672566#30672566", "title": "Traits in algebraic data types", "body": "<p><a href=\"https://stackoverflow.com/a/30660522/284681\">Vladimir's answer</a> explained what the\ncompiler is doing. Based on that information, I developed a solution: Creating a wrapper\nstruct around <code>Box&lt;Quack&gt;</code>.</p>\n\n<p>The wrapper is called <code>QuackWrap</code>. It has a fixed size, and it can be used just like any\nother struct (I think). The <code>Box</code> inside <code>QuackWrap</code> allows me to build a <code>QuackWrap</code>\naround any trait that implements <code>Quack</code>. Thus, I can have a <code>Vec&lt;Rc&lt;RefCell&lt;QuackWrap&gt;&gt;&gt;</code>\nwhere the inner values are a mixture of <code>Duck</code>s, <code>Goose</code>s, etc.</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\ntrait Quack {\n    fn quack(&amp;self);\n}\n\nstruct Duck;\n\nimpl Quack for Duck {\n    fn quack(&amp;self) { println!(\"Quack!\"); }\n}\n\nstruct QuackWrap(Box&lt;Quack&gt;);\n\nimpl QuackWrap {\n    pub fn new&lt;T: Quack + 'static&gt;(value: T) -&gt; QuackWrap {\n        QuackWrap(Box::new(value))\n    }\n}\n\nfn main() {\n    let mut pond: Vec&lt;Box&lt;Quack&gt;&gt; = Vec::new();\n    let duck: Box&lt;Duck&gt; = Box::new(Duck);\n    pond.push(duck); // This is valid.\n\n    // This would be a type error:\n    //let mut lake: Vec&lt;Rc&lt;RefCell&lt;Box&lt;Quack&gt;&gt;&gt;&gt; = Vec::new();\n    //let mallard: Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(Duck)));\n    //lake.push(mallard); // This is a type mismatch.\n\n    // Instead, we can do this:\n    let mut lake: Vec&lt;Rc&lt;RefCell&lt;QuackWrap&gt;&gt;&gt; = Vec::new();\n    let mallard: Rc&lt;RefCell&lt;QuackWrap&gt;&gt; = Rc::new(RefCell::new(QuackWrap::new(Duck)));\n    lake.push(mallard); // This is valid.\n}\n</code></pre>\n\n<p>As an added convenience, I'll probably want to implement <code>Deref</code> and <code>DefrefMut</code> on\n<code>QuackWrap</code>. But that's not necessary for the above example.</p>\n"}], "owner": {"reputation": 6225, "user_id": 284681, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/6148631c6a332d77f1f6cb5e6b382f29?s=128&d=identicon&r=PG", "display_name": "rlkw1024", "link": "https://stackoverflow.com/users/284681/rlkw1024"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 606, "favorite_count": 0, "accepted_answer_id": 30660522, "answer_count": 2, "score": 9, "last_activity_date": 1433527003, "creation_date": 1433471462, "last_edit_date": 1433482433, "question_id": 30657436, "link": "https://stackoverflow.com/questions/30657436/traits-in-algebraic-data-types", "title": "Traits in algebraic data types", "body": "<p>I'm having trouble understanding the rules about traits in algebraic data types.\nHere's a simplified example:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>use std::rc::Rc;\nuse std::cell::RefCell;\n\ntrait Quack {\n    fn quack(&amp;self);\n}\n\nstruct Duck;\n\nimpl Quack for Duck {\n    fn quack(&amp;self) { println!(\"Quack!\"); }\n}\n\nfn main() {\n    let mut pond: Vec&lt;Box&lt;Quack&gt;&gt; = Vec::new();\n    let duck: Box&lt;Duck&gt; = Box::new(Duck);\n    pond.push(duck); // This is valid.\n\n    let mut lake: Vec&lt;Rc&lt;RefCell&lt;Box&lt;Quack&gt;&gt;&gt;&gt; = Vec::new();\n    let mallard: Rc&lt;RefCell&lt;Box&lt;Duck&gt;&gt;&gt; = Rc::new(RefCell::new(Box::new(Duck)));\n    lake.push(mallard); // This is a type mismatch.\n}\n</code></pre>\n\n<p>The above fails to compile, yielding the following error message:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> expected `alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;Quack&gt;&gt;&gt;`,\n    found `alloc::rc::Rc&lt;core::cell::RefCell&lt;Box&lt;Duck&gt;&gt;&gt;`\n(expected trait Quack,\n    found struct `Duck`) [E0308]\nsrc/main.rs:19     lake.push(mallard);\n</code></pre>\n\n<p>Why is it that <code>pond.push(duck)</code> is valid, yet <code>lake.push(mallard)</code> isn't? In both cases, a <code>Duck</code> has been supplied where a <code>Quack</code> was expected. In the former, the compiler is happy, but in the latter, it's not.</p>\n\n<p>Is the reason for this difference related to <code>CoerceUnsized</code>?</p>\n"}, {"tags": ["closures", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433459959, "post_id": 30655741, "comment_id": 49374308, "body": "Perhaps a duplicate of <a href=\"http://stackoverflow.com/q/28521637/155423\">stackoverflow.com/q/28521637/155423</a> ?"}, {"owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433461495, "post_id": 30655741, "comment_id": 49374759, "body": "I hoped since y:usize was Copy-able, it could be taken by value by the inner closure, thus avoiding the need for any borrowing..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433461671, "post_id": 30655741, "comment_id": 49374815, "body": "I agree, and I&#39;m a bit surprised that there&#39;s an error here at all \u2014 I have a feeling it has to do with that <code>FnMut</code>. There may also be a real bug, as sprinkling <code>.clone()</code> on all the variables doesn&#39;t fix the problem as I thought it would either."}], "answers": [{"comments": [{"owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 2, "creation_date": 1433490970, "post_id": 30659346, "comment_id": 49384821, "body": "You could also write &quot;fn make&lt;T,F&gt;(n: usize, m: usize, ref f: F) -&gt; Vec&lt;T&gt;&quot; to take a reference to the closure."}, {"owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "reply_to_user": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "edited": false, "score": 0, "creation_date": 1433521872, "post_id": 30659346, "comment_id": 49405007, "body": "Perfect! I got confused by the second error, I didn&#39;t realize it was talking about f... @A.B.: Nice! I keep forgetting about patterns in function arguments."}], "tags": [], "owner": {"reputation": 11676, "user_id": 2536143, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/689fac88d8019eabd3421e6c740be7ae?s=128&d=identicon&r=PG", "display_name": "Levans", "link": "https://stackoverflow.com/users/2536143/levans"}, "is_accepted": true, "score": 11, "last_activity_date": 1539174278, "last_edit_date": 1539174278, "creation_date": 1433484090, "answer_id": 30659346, "question_id": 30655741, "link": "https://stackoverflow.com/questions/30655741/how-to-use-closures-in-a-nested-map/30659346#30659346", "title": "How to use closures in a nested map?", "body": "<p>In your case the inner closure <code>|x| f(x,y)</code> is a borrowing closure, which takes its environment (<code>y</code> and <code>f</code>) by reference.</p>\n\n<p>The way <code>.flat_map(..)</code> works, it forbids you to keep a reference to <code>y</code>, which is not from the outer scope. Thus we need to have your closure take its environment by value, which is not a problem for <code>y</code> being a <code>usize</code> which is <code>Copy</code>:</p>\n\n<pre><code>(0..m).flat_map(|y| (0..n).map(move |x| f(x, y))).collect()\n</code></pre>\n\n<p>However, now another problem arises:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n --&gt; src/main.rs:5:36\n  |\n1 | fn make&lt;T, F&gt;(n: usize, m: usize, f: F) -&gt; Vec&lt;T&gt;\n  |                                   - captured outer variable\n...\n5 |     (0..m).flat_map(|y| (0..n).map(move |x| f(x,y))).collect()\n  |                                    ^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n</code></pre>\n\n<p>Here, we are trying to move <code>f</code> as well into the closure, which is definitely not possible (unless <code>m</code> is <code>1</code>, but the compiler cannot know that).</p>\n\n<p>Since <code>f</code> is a <code>Fn(usize, usize) -&gt; T</code>, we could just as well explicitly pass a <code>&amp;</code> reference to it, and <code>&amp;</code> references are <code>Copy</code>:</p>\n\n<pre><code>fn make&lt;T, F&gt;(n: usize, m: usize, f: F) -&gt; Vec&lt;T&gt;\nwhere\n    F: Fn(usize, usize) -&gt; T,\n{\n    let f_ref = &amp;f;\n    (0..m)\n        .flat_map(|y| (0..n).map(move |x| f_ref(x, y)))\n        .collect()\n}\n</code></pre>\n\n<p>In this case, the closure takes its environment by value, and this environment is composed of <code>y</code> and <code>f_ref</code>, both of them being <code>Copy</code>, everything is well.</p>\n"}, {"tags": [], "owner": {"reputation": 429, "user_id": 5081997, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-GmesG-HGk2A/AAAAAAAAAAI/AAAAAAAACLI/lmInTd8OR3A/photo.jpg?sz=128", "display_name": "cotigao", "link": "https://stackoverflow.com/users/5081997/cotigao"}, "is_accepted": false, "score": 1, "last_activity_date": 1539525219, "last_edit_date": 1539525219, "creation_date": 1539145465, "answer_id": 52732610, "question_id": 30655741, "link": "https://stackoverflow.com/questions/30655741/how-to-use-closures-in-a-nested-map/52732610#52732610", "title": "How to use closures in a nested map?", "body": "<p>Adding to <a href=\"https://stackoverflow.com/a/30659346/155423\">Levans's excellent answer</a>, another way of defining the function would be</p>\n\n<pre><code>fn make&lt;T, F&gt;(n: usize, m: usize, f: F) -&gt; Vec&lt;T&gt;\nwhere\n    F: Fn(usize, usize) -&gt; T + Copy,\n{\n    (0..m).flat_map(|y| (0..n).map(move |x| f(x, y))).collect()\n}\n</code></pre>\n\n<p>Since we know that <code>|x, y| x + y</code> is a <code>Copy</code> type, <code>f</code> would get copied for every callback that <code>flat_map</code> invokes. I would still prefer Levans's way as this would not be as efficient as copying a reference.</p>\n"}], "owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1684, "favorite_count": 1, "accepted_answer_id": 30659346, "answer_count": 2, "score": 14, "last_activity_date": 1539525219, "creation_date": 1433459525, "last_edit_date": 1539174157, "question_id": 30655741, "link": "https://stackoverflow.com/questions/30655741/how-to-use-closures-in-a-nested-map", "title": "How to use closures in a nested map?", "body": "<p>I am trying to make a 2-dimensional matrix from a functor that creates each element, and store it as a flat <code>Vec</code> (each row concatenated).</p>\n\n<p>I used nested <code>map</code> (actually a <code>flat_map</code> and a nested <code>map</code>) to create each row and concatenate it. <a href=\"https://play.rust-lang.org/?gist=3d61ca851d17a7be106b&amp;version=stable\" rel=\"noreferrer\">Here is what I tried</a>:</p>\n\n<pre><code>fn make&lt;T, F&gt;(n: usize, m: usize, f: F) -&gt; Vec&lt;T&gt;\nwhere\n    F: Fn(usize, usize) -&gt; T,\n{\n    (0..m).flat_map(|y| (0..n).map(|x| f(x, y))).collect()\n}\n\nfn main() {\n    let v = make(5, 5, |x, y| x + y);\n\n    println!(\"{:?}\", v);\n}\n</code></pre>\n\n<p>Unfortunately, I get an error during compilation:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `y` does not live long enough\n --&gt; src/main.rs:5:45\n  |\n5 |     (0..m).flat_map(|y| (0..n).map(|x| f(x, y))).collect()\n  |                                    ---      ^ -          - borrowed value needs to live until here\n  |                                    |        | |\n  |                                    |        | borrowed value only lives until here\n  |                                    |        borrowed value does not live long enough\n  |                                    capture occurs here\n</code></pre>\n\n<p>How does one use closures in nested maps? I worked around this issue <a href=\"https://play.rust-lang.org/?gist=ee962e3d7c8f40e03f0e&amp;version=stable\" rel=\"noreferrer\">by using a single map on <code>0..n*m</code></a>, but I'm still interested in the answer.</p>\n"}, {"tags": ["eclipse", "rust"], "answers": [{"tags": [], "owner": {"reputation": 469, "user_id": 3238865, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/41ZZj.jpg?s=128&g=1", "display_name": "grey00", "link": "https://stackoverflow.com/users/3238865/grey00"}, "is_accepted": true, "score": 11, "last_activity_date": 1433451105, "creation_date": 1433451105, "answer_id": 30653904, "question_id": 30653556, "link": "https://stackoverflow.com/questions/30653556/how-do-i-configure-the-path-to-the-rust-installation-when-using-rustdt-with-ecli/30653904#30653904", "title": "How do I configure the path to the Rust installation when using RustDT with Eclipse?", "body": "<p>Well, I found the answer. Posting it here so that future people may find it too. When you go to preferences, click on Rust itself, don't expand it.</p>\n\n<p><img src=\"https://i.imgur.com/OQWRa7K.png\" alt=\"its here\"></p>\n"}], "owner": {"reputation": 469, "user_id": 3238865, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/41ZZj.jpg?s=128&g=1", "display_name": "grey00", "link": "https://stackoverflow.com/users/3238865/grey00"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1172, "favorite_count": 0, "accepted_answer_id": 30653904, "answer_count": 1, "score": 8, "last_activity_date": 1433451105, "creation_date": 1433449816, "last_edit_date": 1433450061, "question_id": 30653556, "link": "https://stackoverflow.com/questions/30653556/how-do-i-configure-the-path-to-the-rust-installation-when-using-rustdt-with-ecli", "title": "How do I configure the path to the Rust installation when using RustDT with Eclipse?", "body": "<p>The <a href=\"https://github.com/RustDT/RustDT\" rel=\"noreferrer\">RustDT github page</a> says this: </p>\n\n<blockquote>\n  <p>The Rust installation is required for project building. The path to the installation should be configured in Preferences/Rust.</p>\n</blockquote>\n\n<p>I go into <code>Preferences/Rust</code> in Eclipse, but I only see options for text/background colors and formatting settings. Where can I link the path to the installation?</p>\n"}, {"tags": ["rust", "rust-crates"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433444825, "post_id": 30652005, "comment_id": 49367478, "body": "Your example works for me with <code>rustc 1.0.0 (a59de37e9 2015-05-13) (built 2015-05-14)</code>. I did have to add an empty <code>main</code> method to main.rs."}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433445187, "post_id": 30652005, "comment_id": 49367647, "body": "Hm you&#39;re right it does work... it doesn&#39;t work in the actual code though. There are <code>extern crate</code> statements in <code>module1&#47;mod.rs</code>, though, does that affect it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433445314, "post_id": 30652005, "comment_id": 49367712, "body": "Yes. This question is probably a dupe of <a href=\"http://stackoverflow.com/q/27653198/155423\">stackoverflow.com/q/27653198/155423</a> then."}, {"owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433445559, "post_id": 30652005, "comment_id": 49367838, "body": "Oh wait I figured it out. I defined <code>module1&#47;mod.rs</code> to be a library crate in order to generate documentation"}], "owner": {"reputation": 352, "user_id": 4966649, "user_type": "registered", "accept_rate": 0, "profile_image": "https://www.gravatar.com/avatar/529ce500a0fa87c9a7660f9837fdb651?s=128&d=identicon&r=PG", "display_name": "brandonchinn178", "link": "https://stackoverflow.com/users/4966649/brandonchinn178"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 954, "favorite_count": 0, "closed_date": 1507726453, "answer_count": 0, "score": 0, "last_activity_date": 1433446480, "creation_date": 1433444546, "last_edit_date": 1433446480, "question_id": 30652005, "link": "https://stackoverflow.com/questions/30652005/using-items-in-submodules-from-extern-crate-in-root-module", "closed_reason": "Duplicate", "title": "Using items in submodules from `extern crate` in root module", "body": "<p>My understanding is that <code>extern crate foo;</code> declarations in the root module are then importable in any submodule with <code>use foo::bar</code>. While this works in one submodule, it doesn't work in the other submodule. Any ideas why this might not work?</p>\n\n<pre><code>|--- main.rs\n|--- module1\n     |--- mod.rs\n     |--- submod1.rs\n|--- module2\n     |--- mod.rs\n     |--- submod2.rs\n\n// main.rs\nextern crate rustc_serialize;\nmod module1;\nmod module2;\n\n// module1/mod.rs\nmod submod1;\n\n// module1/submod1.rs\nuse rustc_serialize::json; // WORKS\n\n// module2/mod.rs\nmod submod2;\n\n// module2/submod2.rs\nuse rustc_serialize::json; // DOESN'T WORK\n</code></pre>\n\n<p>EDIT: I forgot that in my project, <code>module1</code> is defined as a library crate, which detached it from the usual import namespaces</p>\n"}, {"tags": ["macros", "documentation", "rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1433443027, "post_id": 30651555, "comment_id": 49366536, "body": "This seems to be mentioned in the source link you referred to: <i>Second, we\u2019ll need to add our own <code>main()</code> as well</i>. FWIW, this is because once you start defining top-level items (like <code>extern crate</code>), the doc test harness assumes that you want to have full control of the example."}, {"owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433657843, "post_id": 30651555, "comment_id": 49440242, "body": "And a snippet of code without main() is invalid? We can&#39;t document how to write libraries?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433680939, "post_id": 30651555, "comment_id": 49445744, "body": "examples of code in documentation blocks are automatically compiled <b>and run</b>. This is done to ensure that documentation examples stay correct, and is really useful. To run code, a main method is needed. Because you are defining top-level items, the main method is not added for you, as I mentioned previously. If you don&#39;t want to compile examples, you can disable compiling individual examples. You can also comment out parts of example code that are uninteresting to show but needed to compile. None of this precludes documenting a library."}, {"owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433693308, "post_id": 30651555, "comment_id": 49449441, "body": "Hmmm... there is the no_run keyword to compile but not run this blocks, but they still require a main() function :("}], "tags": [], "owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "is_accepted": false, "score": 2, "last_activity_date": 1433442914, "creation_date": 1433442914, "answer_id": 30651555, "question_id": 30651196, "link": "https://stackoverflow.com/questions/30651196/how-do-i-properly-write-macro-documentation-if-the-macro-is-defined-in-a-module/30651555#30651555", "title": "How do I properly write macro documentation if the macro is defined in a module?", "body": "<p>Well adding a main function did the trick. My example code did not need to run anything (just compile) so I didn't even bother adding a main function, but apparently adding it puts the code in a virtual \"crate root\", and it accepts the macro_use. Yay!</p>\n\n<p>So what I did is just add :</p>\n\n<pre><code>/// # fn main() { }\n</code></pre>\n"}], "owner": {"reputation": 1606, "user_id": 559833, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/0cf07c8cc2ec5892dd92722bf28e07e1?s=128&d=identicon&r=PG", "display_name": "Gyscos", "link": "https://stackoverflow.com/users/559833/gyscos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 486, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1433442914, "creation_date": 1433441689, "last_edit_date": 1433442876, "question_id": 30651196, "link": "https://stackoverflow.com/questions/30651196/how-do-i-properly-write-macro-documentation-if-the-macro-is-defined-in-a-module", "title": "How do I properly write macro documentation if the macro is defined in a module?", "body": "<p>I defined a macro in a module, and it works fine.\nNow, I'm trying to document said macro with an example. <a href=\"https://github.com/steveklabnik/rust/commit/fbc823d1e337e546b5bf7e6fc53f26b51a8583f2\" rel=\"nofollow\">Apparently</a>, I need to manually specify the crate line to ask for macros:</p>\n\n<pre><code>/// ```\n/// # #[macro_use] extern crate foo;\n/// // Some code\n/// ```\n</code></pre>\n\n<p>However, I now get an error saying:</p>\n\n<pre><code>error: an `extern crate` loading macros must be at the crate root\n</code></pre>\n\n<p>Apparently the example code is loaded in the macro's module, and does not seem compatible with <code>macro_use</code>...</p>\n\n<p>I can't believe everyone writes macros directly in the root module... right?</p>\n"}, {"tags": ["plugins", "rust", "lint", "internals"], "answers": [{"comments": [{"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "edited": false, "score": 0, "creation_date": 1433488014, "post_id": 30650773, "comment_id": 49383100, "body": "Cool. I was even able to <code>.zip</code> the <code>iter</code> of <code>Name</code>s with a slice of <code>&amp;str</code>s and compare them without building a Vec first."}], "tags": [], "owner": {"reputation": 10840, "user_id": 1198729, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0a3069491bfded90cdf623341cadc1d1?s=128&d=identicon&r=PG", "display_name": "Manishearth", "link": "https://stackoverflow.com/users/1198729/manishearth"}, "is_accepted": true, "score": 2, "last_activity_date": 1433440252, "creation_date": 1433440252, "answer_id": 30650773, "question_id": 30648412, "link": "https://stackoverflow.com/questions/30648412/how-to-find-out-what-type-a-rustcmiddletyty-represents/30650773#30650773", "title": "How to find out what type a rustc::middle::ty::Ty represents?", "body": "<p>You need use <a href=\"http://manishearth.github.io/rust-internals-docs/rustc/middle/ty/fn.with_path.html\" rel=\"nofollow\"><code>with_path</code></a> on the DefId. You will be provided an iterator over <a href=\"http://manishearth.github.io/rust-internals-docs/syntax/ast_map/enum.PathElem.html\" rel=\"nofollow\"><code>PathElem</code></a>s which you must consume.</p>\n\n<p>The following is a rough sketch, but should give you an array of <code>Name</code>s if you tweak it a bit.</p>\n\n<pre><code>if let ty_enum(did, ..) = ty.sty {\n  tcx.with_path(did, |iter| iter.map(|elem| elem.name())).collect::&lt;Vec&lt;Name&gt;&gt;;\n}\n</code></pre>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 95, "favorite_count": 0, "accepted_answer_id": 30650773, "answer_count": 1, "score": 6, "last_activity_date": 1433440252, "creation_date": 1433432811, "last_edit_date": 1433433905, "question_id": 30648412, "link": "https://stackoverflow.com/questions/30648412/how-to-find-out-what-type-a-rustcmiddletyty-represents", "title": "How to find out what type a rustc::middle::ty::Ty represents?", "body": "<p>For writing yet another lint in Rust, I need to make sure that the type of an Expr is actually an <code>Option&lt;_&gt;</code> (or any pointer to one). I have already walked any <code>ptr</code>s and <code>rptr</code>s to their conclusion and am left with a <code>rustc::middle::ty</code> that in my test case debugs to (manually formatted for better readability):</p>\n\n<pre><code>TyS { \n  sty: ty_enum(\n    DefId { \n      krate: 2, \n      node: 117199 \n    }, \n    Substs { \n      types: VecPerParamSpace {\n        TypeSpace: [\n          TyS { \n            sty: ty_int(i32), \n            flags: 0, \n            region_depth: 0 \n          }\n        ],\n        SelfSpace: [], \n        FnSpace: [], \n      }, \n      regions: NonerasedRegions(\n        VecPerParamSpace {\n          TypeSpace: [], \n          SelfSpace: [], \n          FnSpace: [], \n        }\n      )\n    }\n  ), \n  flags: 0, \n  region_depth: 0 \n}\n</code></pre>\n\n<p>However, now I'm a bit lost \u2013 how do I find out if the TyS is actually an Option&lt;_> type?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "edited": false, "score": 0, "creation_date": 1433456727, "post_id": 30648065, "comment_id": 49373180, "body": "Another difference between the <code>std</code> fa&#231;ade and the other crates it sources things from is that <code>std</code> has been mostly stabilised, but the other crates are unstable."}, {"owner": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "edited": false, "score": 0, "creation_date": 1433515765, "post_id": 30648065, "comment_id": 49401177, "body": "@DK. while I&#39;m <b>very</b> new to rust, I understand what you&#39;re saying... but this naturally leads to the next question, why? Why are things re-exported? Doesn&#39;t that naturally lead to confusion (mine at least) as to which to use?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "edited": false, "score": 0, "creation_date": 1433516283, "post_id": 30648065, "comment_id": 49401577, "body": "@wspeirs Not once someone says &quot;just use the version in <code>std</code>&quot;.  It&#39;s re-exported because it is <b>only</b> <code>std</code> that&#39;s been stabilised.  The other crates are more or less an implementation detail that you&#39;re not supposed to depend on."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 7, "last_activity_date": 1433431768, "creation_date": 1433431768, "answer_id": 30648065, "question_id": 30647683, "link": "https://stackoverflow.com/questions/30647683/which-library-to-use-for-weak-references/30648065#30648065", "title": "Which library to use for Weak references", "body": "<p>Rust's standard library is actually made up of multiple, interconnected crates.  <code>std</code>, aside from containing some of its own functionality, acts as a \"facade\" over these other crates, publicly re-exporting the bits that have been stabilised.</p>\n\n<p>There is, in fact, only one <code>Weak</code>: the one in <code>alloc</code>.  It's just that <code>std</code> re-exports it.  As for which one to use: if something is available through <code>std</code>, use it through <code>std</code>: that's the path that's unlikely to change...</p>\n\n<p>...except when it comes to unstable features, of which <code>Weak</code> is one: it's unstable, so there are no guarantees.</p>\n"}], "owner": {"reputation": 1141, "user_id": 3723253, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/30c73937b4ce6d91021ea607cc64fa04?s=128&d=identicon&r=PG&f=1", "display_name": "wspeirs", "link": "https://stackoverflow.com/users/3723253/wspeirs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 337, "favorite_count": 0, "accepted_answer_id": 30648065, "answer_count": 1, "score": 2, "last_activity_date": 1433431768, "creation_date": 1433430760, "question_id": 30647683, "link": "https://stackoverflow.com/questions/30647683/which-library-to-use-for-weak-references", "title": "Which library to use for Weak references", "body": "<p>I realize things are still in flux, but why is <code>Weak</code> referenced in 2 different places in the documentation?</p>\n\n<p><code>std::rc::Weak</code> - <a href=\"http://doc.rust-lang.org/stable/std/rc/struct.Weak.html\" rel=\"nofollow\">http://doc.rust-lang.org/stable/std/rc/struct.Weak.html</a></p>\n\n<p><code>alloc::rc::Weak</code> - <a href=\"http://doc.rust-lang.org/stable/alloc/rc/struct.Weak.html\" rel=\"nofollow\">http://doc.rust-lang.org/stable/alloc/rc/struct.Weak.html</a></p>\n\n<p>Maybe I'm missing something, but the only difference I see in the two is the fmt function signatures:</p>\n\n<pre><code>impl&lt;T&gt; Debug for Weak&lt;T&gt; where T: Debug\nfn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result&lt;(), Error&gt;\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>impl&lt;T: Debug&gt; Debug for Weak&lt;T&gt;\nfn fmt(&amp;self, f: &amp;mut Formatter) -&gt; Result\n</code></pre>\n\n<p>So which one should I use? They're both marked as \"unstable\".</p>\n"}, {"tags": ["garbage-collection", "rust"], "comments": [{"owner": {"reputation": 1553, "user_id": 3839220, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/8062ce7db5476fc8d470bba1e7cc785d?s=128&d=identicon&r=PG&f=1", "display_name": "metro-man", "link": "https://stackoverflow.com/users/3839220/metro-man"}, "reply_to_user": {"reputation": 14720, "user_id": 2074608, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/WzNwl.png?s=128&g=1", "display_name": "Qantas 94 Heavy", "link": "https://stackoverflow.com/users/2074608/qantas-94-heavy"}, "edited": false, "score": 0, "creation_date": 1433427664, "post_id": 30646165, "comment_id": 49356545, "body": "Ohh I see. So it&#39;s because of the ownership and borrow thing it knows where to de-allocate stuff?"}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 5, "creation_date": 1433430574, "post_id": 30646165, "comment_id": 49358860, "body": "Well, I think we say that Rust is not a garbage-collected language because any form of garbage collection (be it reference counting or some tracing GC, which is not yet written) is <i>optional</i> - if you don&#39;t want to use it, then you don&#39;t have to, and you won&#39;t suffer from its absence (except in isolated cases, but then again, you are free to use it only in some part of your program, if you want). Languages like Java or Python do not allow not to use their GC and their libraries are heavily dependent on garbage collection, so they are usually called &quot;garbage-collected&quot;."}, {"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1433432494, "post_id": 30646165, "comment_id": 49360206, "body": "@metro-man you are right. Thanks to ownership and borrowing Rust can know when things must be deallocated. Sometimes, however, that is not enough."}, {"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 4, "creation_date": 1433443236, "post_id": 30646165, "comment_id": 49366650, "body": "<i>ARC</i> != <code>Arc</code>. Rust&#39;s <code>Arc</code> means &quot;atomically reference counted&quot; and refers to a particular pointer type that is <i>optionally used</i>. It is not the same as ARC, which is just a type of global garbage collector that Objective-C and Swift use."}, {"owner": {"reputation": 17462, "user_id": 97964, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/6Nrh5.jpg?s=128&g=1", "display_name": "jocull", "link": "https://stackoverflow.com/users/97964/jocull"}, "edited": false, "score": 0, "creation_date": 1433549508, "post_id": 30646165, "comment_id": 49416606, "body": "The whole ARC thing is a very confusing marketing point."}], "owner": {"reputation": 1553, "user_id": 3839220, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/8062ce7db5476fc8d470bba1e7cc785d?s=128&d=identicon&r=PG&f=1", "display_name": "metro-man", "link": "https://stackoverflow.com/users/3839220/metro-man"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 83, "favorite_count": 0, "closed_date": 1433427731, "answer_count": 0, "score": 0, "last_activity_date": 1433427004, "creation_date": 1433427004, "question_id": 30646165, "link": "https://stackoverflow.com/questions/30646165/how-is-rust-not-garbage-collected-even-though-it-uses-arc", "closed_reason": "Duplicate", "title": "How is Rust not garbage collected, even though it uses ARC?", "body": "<p>Rust is advertised as not being a garbage collected language. Though, if I recall correctly, it uses Automatic Reference Counting. I remember reading a thread on Reddit, probably in r/programming on how ARC is a form of garbage collection. And now I'm confused, is it or isn't it? Is Rust garbage collected, or is it not? Can someone please clear this up for me?</p>\n"}, {"tags": ["iterator", "rust"], "answers": [{"comments": [{"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1433424744, "post_id": 30642388, "comment_id": 49354334, "body": "Side note, what if <code>filter_fn</code>/closure had to take another parameter? Like say <code>Vec&lt;i32&gt;</code>."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "reply_to_user": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 1, "creation_date": 1433425327, "post_id": 30642388, "comment_id": 49354775, "body": "Neither <code>filter_fn()</code> nor closure cannot take an additional parameter because it won&#39;t correspond to <code>filter()</code> signature anymore. You can <i>capture</i> <code>Vec&lt;i32&gt;</code> in a closure, like <code>move |node| node.s.len() == vector.head().unwrap_or(12) as usize</code>, but it won&#39;t be different from capturing <code>criteria</code> as in my first example."}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 7, "last_activity_date": 1433416793, "last_edit_date": 1495542580, "creation_date": 1433416470, "answer_id": 30642388, "question_id": 30641167, "link": "https://stackoverflow.com/questions/30641167/figuring-out-return-type-of-closure/30642388#30642388", "title": "Figuring out return type of closure", "body": "<p>I clearly remember that this was answered before a few times (I even wrote about it in an answer <a href=\"https://stackoverflow.com/a/30641982/788207\">a few minutes before</a>) but I can't find a link now, so here it goes.</p>\n\n<p>The problem with your code is that you use a closure as <code>filter()</code> argument:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>.filter(|node| node.s == \"meh\")\n</code></pre>\n\n<p>Unboxed closures in Rust are implemented as anonymous types which, naturally, can't be named, so there is <em>no</em> way to write a signature of a function which returns an iterator which uses a closure. That's what the error message you're getting is about:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> expected `fn(&amp;Node&lt;'_&gt;) -&gt; bool`,\n    found `[closure &lt;anon&gt;:27:21: 27:43]`\n(expected fn pointer,\n    found closure) [E0308]\n</code></pre>\n\n<p>There are several ways around this, one of them is to use trait objects:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn filter&lt;'b&gt;(&amp;'b self, criteria: &amp;'b str) -&gt; Box&lt;Iterator&lt;Item=Node&lt;'a&gt;+'b&gt;&gt;\n{\n    Box::new(self.descendants().filter(move |node| node.s == criteria))\n}\n</code></pre>\n\n<p>Given that your closure has a non-empty environment, this is the only way for your code to work. If your closure didn't capture anything, you could use a static function whose type can be written out:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>pub fn filter(&amp;self) -&gt; Filter&lt;Descendants&lt;'a&gt;, fn(&amp;Node&lt;'a&gt;) -&gt; bool&gt; {\n    fn filter_fn&lt;'b&gt;(node: &amp;Node&lt;'b&gt;) -&gt; bool {\n        node.s == \"meh\"\n    }\n    self.descendants().filter(filter_fn)\n}\n</code></pre>\n"}], "owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 596, "favorite_count": 0, "accepted_answer_id": 30642388, "answer_count": 1, "score": 3, "last_activity_date": 1433416796, "creation_date": 1433413086, "last_edit_date": 1495539837, "question_id": 30641167, "link": "https://stackoverflow.com/questions/30641167/figuring-out-return-type-of-closure", "title": "Figuring out return type of closure", "body": "<p>I'm having troubles figuring out the type signature of the <code>fn filter</code> function in following example.</p>\n\n<p><strong>The Node and Descendant definition is just there for syntax . It's not meant to do anything!</strong></p>\n\n<pre><code>use std::iter::Filter;\n\n#[derive(Clone)]\npub struct Node&lt;'a&gt; {\n   s: &amp;'a str,\n}\n\npub struct Descendants&lt;'a&gt;{\n    iter: Node&lt;'a&gt;\n}\n\nimpl&lt;'a&gt; Iterator for Descendants&lt;'a&gt; {\n    type Item = Node&lt;'a&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Node&lt;'a&gt;&gt; {\n        Some(Node {s: self.iter.s})\n    }\n}\n\nimpl&lt;'a&gt; Node&lt;'a&gt; {\n    pub fn descendants(&amp;self) -&gt; Descendants&lt;'a&gt; {\n        Descendants{ iter: Node{s: self.s} }  \n    }\n\n    pub fn filter(&amp;self, criteria: &amp;str) -&gt; Filter&lt;Descendants&lt;'a&gt;, fn(&amp;'a Node&lt;'a&gt;)-&gt;bool &gt; {\n        self.descendants()\n            .filter(|node| node.s == \"meh\")\n    }\n}\n\nfn main() {\n    let doc = Node{s: \"str\"};\n\n}\n</code></pre>\n\n<p><a href=\"http://is.gd/GCJdih\" rel=\"nofollow noreferrer\">(Playground link)</a></p>\n\n<p>The error I get is following:</p>\n\n<pre><code>&lt;anon&gt;:27:28: 27:34 error: the type of this value must be known in this context\n&lt;anon&gt;:27             .filter(|node| node.s == \"meh\")\n                                     ^~~~~~\n&lt;anon&gt;:27:21: 27:43 error: mismatched types:\n expected `fn(&amp;Node&lt;'_&gt;) -&gt; bool`,\n    found `[closure &lt;anon&gt;:27:21: 27:43]`\n(expected fn pointer,\n    found closure) [E0308]\n&lt;anon&gt;:27             .filter(|node| node.s == \"meh\")\n                              ^~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:27:14: 27:44 error: type mismatch: the type `fn(&amp;Node&lt;'_&gt;) -&gt; bool` implements the trait `core::ops::FnMut&lt;(&amp;Node&lt;'_&gt;,)&gt;`, but the trait `for&lt;'r&gt; core::ops::FnMut&lt;(&amp;'r Node&lt;'_&gt;,)&gt;` is required (expected concrete lifetime, found bound lifetime parameter ) [E0281]\n&lt;anon&gt;:27             .filter(|node| node.s == \"meh\")\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n&lt;anon&gt;:27:14: 27:44 error: type mismatch resolving `for&lt;'r&gt; &lt;fn(&amp;Node&lt;'_&gt;) -&gt; bool as core::ops::FnOnce&lt;(&amp;'r Node&lt;'_&gt;,)&gt;&gt;::Output == bool`:\n expected bound lifetime parameter ,\n    found concrete lifetime [E0271]\n&lt;anon&gt;:27             .filter(|node| node.s == \"meh\")\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nerror: aborting due to 4 previous errors\nplaypen: application terminated with error code 101\n</code></pre>\n\n<p>When I as per this question <a href=\"https://stackoverflow.com/questions/27535289/correct-way-to-return-an-iterator\">Correct way to return an Iterator?</a> I tried to replace <code>pub fn filter(&amp;self, criteria: &amp;str) -&gt; Filter&lt;Descendants&lt;'a&gt;, fn(&amp;'a Node&lt;'a&gt;)-&gt;bool &gt;</code> with <code>pub fn filter(&amp;self, criteria: &amp;str) -&gt; ()</code> I get</p>\n\n<pre><code>&lt;anon&gt;:26:9: 27:44 error: mismatched types:\n expected `()`,\n    found `core::iter::Filter&lt;Descendants&lt;'_&gt;, [closure &lt;anon&gt;:27:21: 27:43]&gt;`\n</code></pre>\n\n<p>What I'm supposed to replace <code>closure</code> with? </p>\n\n<p>Alternatively, if it's too hard and finicky to return a <code>Filter</code>, how do I write the <code>Wrapper</code> for <code>fn filter()</code> return type?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 3023, "user_id": 1691145, "user_type": "registered", "accept_rate": 87, "profile_image": "https://www.gravatar.com/avatar/4b6744a17b41f3b0e5c7554a43a04094?s=128&d=identicon&r=PG", "display_name": "Justin Raymond", "link": "https://stackoverflow.com/users/1691145/justin-raymond"}, "edited": false, "score": 0, "creation_date": 1523203270, "post_id": 30640075, "comment_id": 86452573, "body": "Another use case for disabling concurrency is when tests are run inside a debugger."}], "tags": [], "owner": {"reputation": 74030, "user_id": 1256624, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/EdJaa.jpg?s=128&g=1", "display_name": "huon", "link": "https://stackoverflow.com/users/1256624/huon"}, "is_accepted": true, "score": 18, "last_activity_date": 1433410692, "last_edit_date": 1433410692, "creation_date": 1433410107, "answer_id": 30640075, "question_id": 30639965, "link": "https://stackoverflow.com/questions/30639965/are-the-built-in-integration-tests-run-concurrently-or-sequentially/30640075#30640075", "title": "Are the built-in integration tests run concurrently or sequentially?", "body": "<p>The built-in testing framework runs concurrently by default. It is designed to offer useful but simple support for testing, that covers many needs, and a lot of functionality can/<em>should</em> be tested with each test independent of the others. (Being independent means they can be run in parallel.)</p>\n\n<p>That said, it does listen to the <code>RUST_TEST_THREADS</code> environment variable, e.g. <code>RUST_TEST_THREADS=1 cargo test</code> will run tests on a single thread. However, if you want this functionality for your tests always, you may be interested in not using <code>#[test]</code>, or, at least, not directly.</p>\n\n<p>The most flexible way is via <code>cargo</code>'s support for tests that completely define their own framework, via something like the following in your <code>Cargo.toml</code>:</p>\n\n<pre><code>[[test]]\nname = \"foo\"\nharness = false\n</code></pre>\n\n<p>With that, <code>cargo test</code> will compile and run <code>tests/foo.rs</code> as a binary. This can then ensure that operations are sequenced/reset appropriately.</p>\n\n<p>Alternatively, maybe a framework like <a href=\"https://github.com/reem/stainless\"><code>stainless</code></a> has the functionality you need. (I've not used it so I'm not sure.)</p>\n"}, {"tags": [], "owner": {"reputation": 362, "user_id": 5093093, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JOv6r.jpg?s=128&g=1", "display_name": "porkbrain", "link": "https://stackoverflow.com/users/5093093/porkbrain"}, "is_accepted": false, "score": 1, "last_activity_date": 1607265712, "last_edit_date": 1607265712, "creation_date": 1607133451, "answer_id": 65153058, "question_id": 30639965, "link": "https://stackoverflow.com/questions/30639965/are-the-built-in-integration-tests-run-concurrently-or-sequentially/65153058#65153058", "title": "Are the built-in integration tests run concurrently or sequentially?", "body": "<p>An alternative to an env var is the <a href=\"https://doc.rust-lang.org/nightly/cargo/commands/cargo-test.html\" rel=\"nofollow noreferrer\"><code>--test-threads</code></a> flag. Set it to a single thread to run your tests sequentially.</p>\n<pre class=\"lang-none prettyprint-override\"><code>cargo test -- --test-threads 1\n</code></pre>\n"}], "owner": {"reputation": 226, "user_id": 2505233, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c31fd9bdfb590d7023076b8534e2eea1?s=128&d=identicon&r=PG", "display_name": "Dzmitry Misiuk", "link": "https://stackoverflow.com/users/2505233/dzmitry-misiuk"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1436, "favorite_count": 0, "accepted_answer_id": 30640075, "answer_count": 2, "score": 13, "last_activity_date": 1607265712, "creation_date": 1433409838, "last_edit_date": 1433425063, "question_id": 30639965, "link": "https://stackoverflow.com/questions/30639965/are-the-built-in-integration-tests-run-concurrently-or-sequentially", "title": "Are the built-in integration tests run concurrently or sequentially?", "body": "<p>I am writing integration tests to work with a database. In the start of each test, I clear the storage and create some data. </p>\n\n<p>I want my tests to run sequentially to ensure that I am working with an empty database. But it seems that integration tests are run concurrently because sometimes I get existing documents after cleaning the database. </p>\n\n<p>I checked the database and found that the documents created in different tests have approximately the same creation time, even when I'm adding a delay for each test (with <code>std::thread::sleep_ms(10000)</code>).</p>\n\n<p>Can you clarify how the integration tests are run and is it possible run them in order?</p>\n"}, {"tags": ["rust", "osdev"], "comments": [{"owner": {"reputation": 50347, "user_id": 1763356, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/zGWG9.png?s=128&g=1", "display_name": "Veedrac", "link": "https://stackoverflow.com/users/1763356/veedrac"}, "edited": false, "score": 0, "creation_date": 1433412941, "post_id": 30639543, "comment_id": 49346372, "body": "Does <code>write_str</code> work fine?"}, {"owner": {"reputation": 8143, "user_id": 809387, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/05492b2e997c17b51ea4621dbee0df60?s=128&d=identicon&r=PG", "display_name": "Griwes", "link": "https://stackoverflow.com/users/809387/griwes"}, "edited": false, "score": 0, "creation_date": 1436467034, "post_id": 30639543, "comment_id": 50637577, "body": "Please include the relevant code directly in the question - that way it won&#39;t go away before the answer."}, {"owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "edited": false, "score": 0, "creation_date": 1436512468, "post_id": 30639543, "comment_id": 50653926, "body": "I&#39;m not sure about an exact location of the problem. I can assume that the cause is in improper bootstrapping assembly. Should I provide the assembly lines?"}], "answers": [{"tags": [], "owner": {"reputation": 31, "user_id": 14721946, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c1ea623782234bc1a1955f7d392e791a?s=128&d=identicon&r=PG&f=1", "display_name": "Nathan McMillan", "link": "https://stackoverflow.com/users/14721946/nathan-mcmillan"}, "is_accepted": false, "score": 0, "last_activity_date": 1609600611, "creation_date": 1609600611, "answer_id": 65540684, "question_id": 30639543, "link": "https://stackoverflow.com/questions/30639543/writewrite-fmt-doesnt-work-properly-on-bare-metal/65540684#65540684", "title": "Write::write_fmt doesn&#39;t work properly on bare metal", "body": "<pre><code>write!(writer, &quot;format {}&quot;, &quot;1&quot;).unwrap();\n</code></pre>\n<p>I don't think this will help you with you problem, but when I had a similar problem <code>write!</code> would only print the str arguments. If you can find a #![no_std] function that converts i32 to str then this might help you with what you're trying to do.</p>\n"}], "owner": {"reputation": 1041, "user_id": 2772588, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/b6fb04e8ecf4cae2da6d45b813f7829c?s=128&d=identicon&r=PG", "display_name": "ababo", "link": "https://stackoverflow.com/users/2772588/ababo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 402, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1609600611, "creation_date": 1433408680, "last_edit_date": 1434362809, "question_id": 30639543, "link": "https://stackoverflow.com/questions/30639543/writewrite-fmt-doesnt-work-properly-on-bare-metal", "title": "Write::write_fmt doesn&#39;t work properly on bare metal", "body": "<p>On x86_64 architectures, the <code>write!</code> macro works as expected with string arguments, but not with integers. When an integer argument is used, I get a strange loop (e.g. <code>write!(writer, \"Hello {}!\", 123)</code> produces infinite \"Hello Hello Hello...\"). On aarch64, the <code>write!</code> macro does not work at all.</p>\n\n<p>I build libcore using the following command:</p>\n\n<pre><code>rustc -C opt-level=3 -Z no-landing-pads -C no-stack-check \\\n  --crate-type rlib --target {arch}-unknown-linux-gnu lib.rs\n</code></pre>\n\n<p>where <code>{arch}</code> is respectively <code>x86_64</code> or <code>aarch64</code>.</p>\n\n<p>My code is built using the same code generation options. The libcore version corresponds to my compiler. The problematic code is <a href=\"https://github.com/ababo/toy/tree/720453ad2ef7bcdc5001b031eec638910a7d5ac2\" rel=\"nofollow\">here</a>. Can you suggest a possible cause of the problem?</p>\n\n<p>IMPORTANT UPDATES:</p>\n\n<p><a href=\"https://github.com/ababo/arwen/tree/fba82660f7bbca42bd7813fbe5cf3b197b3754df\" rel=\"nofollow\">Here</a> is more distilled code. The libcore is built within the project so everything is under control. The loop above comes from machine rebooting. The code perfectly works on aarch64 but strangely crashes inside Write::write_fmt on x86_64. Carefully checked my startup assembly - doesn't seem to have errors there.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1433425495, "post_id": 30635858, "comment_id": 49354892, "body": "Oh, <code>impl MyTrait for Box&lt;MyTrait&gt;</code> \u2014 that&#39;s a lot simpler than I expected. I was looking at the <a href=\"https://github.com/rust-lang/rust/blob/0aeb9f6f08c353c71d962d5cc7a231e73040ca3c/src/libcore/iter.rs\" rel=\"nofollow noreferrer\">source of <code>Iterator</code></a> which didn&#39;t mention <code>Box</code> at all; I should have just looked at the implementation list in the docs instead :-)"}], "tags": [], "owner": {"reputation": 72538, "user_id": 497043, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/16a138ff3b9c8f1663f8a0613c47b60a?s=128&d=identicon&r=PG", "display_name": "Chris Morgan", "link": "https://stackoverflow.com/users/497043/chris-morgan"}, "is_accepted": true, "score": 6, "last_activity_date": 1433396867, "creation_date": 1433396867, "answer_id": 30635858, "question_id": 30633823, "link": "https://stackoverflow.com/questions/30633823/how-do-i-make-my-own-adapter-methods-able-to-consume-a-trait-object/30635858#30635858", "title": "How do I make my own adapter methods able to consume a trait object?", "body": "<p>Because <code>Iterator</code> is object safe, the trait object <code>Iterator</code> implements <code>Iterator</code>.</p>\n\n<p>Because <code>impl&lt;I: Iterator + ?Sized&gt; Iterator for Box&lt;I&gt;</code>, the boxed trait object <code>Box&lt;Iterator&gt;</code> implements <code>Iterator</code>.</p>\n\n<p>Thus in your case the solution is to implement <code>Foo</code> for <code>Box&lt;Foo&gt;</code>. This could be generic like <code>Iterator</code>\u2019s (<code>impl&lt;T: ?Sized + Foo&gt; Foo for Box&lt;T&gt; { }</code>) or it could be specific (<code>impl Foo for Box&lt;Foo&gt; { }</code>).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 229, "favorite_count": 0, "accepted_answer_id": 30635858, "answer_count": 1, "score": 7, "last_activity_date": 1507384111, "creation_date": 1433383961, "last_edit_date": 1507384111, "question_id": 30633823, "link": "https://stackoverflow.com/questions/30633823/how-do-i-make-my-own-adapter-methods-able-to-consume-a-trait-object", "title": "How do I make my own adapter methods able to consume a trait object?", "body": "<p>I have a trait that has \"adapter methods\" that consume the method:</p>\n\n<pre><code>struct Bar&lt;T&gt;(T);\n\ntrait Foo {\n    fn make_bar(self) -&gt; Bar&lt;Self&gt;\n    where\n        Self: Sized,\n    {\n        Bar(self)\n    }\n}\n\nimpl Foo for u8 {}\nimpl Foo for bool {}\n</code></pre>\n\n<p>This is modeled after <code>Iterator</code>. When I use a <code>Box&lt;Iterator&gt;</code>, I can still call <code>Iterator</code> adapter methods like <code>map</code> or <code>filter</code>:</p>\n\n<pre><code>fn main() {\n    let a = vec![1, 2, 3];\n    let b: Box&lt;Iterator&lt;Item = u8&gt;&gt; = Box::new(a.into_iter());\n    let c = b.map(|x| x * 2);\n    for z in c {\n        println!(\"{}\", z)\n    }\n}\n</code></pre>\n\n<p>However, the methods I've defined don't work in the same way:</p>\n\n<pre><code>fn main() {\n    let a: Box&lt;Foo&gt; = Box::new(42);\n    a.make_bar();\n}\n</code></pre>\n\n<p>This fails with the errors</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `Foo: std::marker::Sized` is not satisfied\n  --&gt; src/main.rs:18:7\n   |\n18 |     a.make_bar();\n   |       ^^^^^^^^ `Foo` does not have a constant size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `Foo`\n</code></pre>\n\n<p>It's absolutely correct that <code>Foo</code> does not have a size - it's a trait. However, <code>Box&lt;Foo&gt;</code> <em>should</em> have a size, as I understand it. What is <code>Iterator</code> doing differently from my code?</p>\n"}, {"tags": ["printf", "rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1433399004, "post_id": 30633256, "comment_id": 49337650, "body": "<i>the impl does not reference any types defined in this crate</i> =&gt; still, in this case, the wording is confusing; <code>Vec&lt;ArchiveInfo&gt;</code> does reference a type defined in this crate after all."}, {"owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "edited": false, "score": 0, "creation_date": 1433442494, "post_id": 30633256, "comment_id": 49366189, "body": "I am not familiar with the <code>&amp;self.0</code> bit. Looks like your structure is positional so I suppose it does a positional lookup?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "edited": false, "score": 0, "creation_date": 1433442749, "post_id": 30633256, "comment_id": 49366357, "body": "@xrl oh yes, sorry. You can have a <code>tuple struct</code> where the struct members are anonymous, but available positionally (<code>.0</code>, <code>.1</code>, ...). When it is a single member, it&#39;s called a <i>newtype</i>, which is a nice way of wrapping your own semantics around an existing type."}, {"owner": {"reputation": 1611, "user_id": 7526319, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/aUMpl.jpg?s=128&g=1", "display_name": "Sajuuk", "link": "https://stackoverflow.com/users/7526319/sajuuk"}, "edited": false, "score": 0, "creation_date": 1564467785, "post_id": 30633256, "comment_id": 101029608, "body": "An irrelevant question here, struct Foo(Vec&lt;u8&gt;); what is this syntax (of parenthesis)?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1611, "user_id": 7526319, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/aUMpl.jpg?s=128&g=1", "display_name": "Sajuuk", "link": "https://stackoverflow.com/users/7526319/sajuuk"}, "edited": false, "score": 0, "creation_date": 1564489431, "post_id": 30633256, "comment_id": 101041186, "body": "@Sajuuk <a href=\"https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\" rel=\"nofollow noreferrer\">doc.rust-lang.org/book/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 13, "last_activity_date": 1533131915, "last_edit_date": 1533131915, "creation_date": 1433379317, "answer_id": 30633256, "question_id": 30633177, "link": "https://stackoverflow.com/questions/30633177/implement-fmtdisplay-for-vect/30633256#30633256", "title": "Implement fmt::Display for Vec&lt;T&gt;", "body": "<p>As this error states, you <strong>cannot</strong> implement a trait for a type you don't own:</p>\n\n<blockquote>\n  <p>the impl does not reference any types defined in this crate; only traits defined in the current crate can be implemented for arbitrary types</p>\n</blockquote>\n\n<p>However, you can implement <code>Display</code> for your wrapper type. The piece you are missing is to use the <a href=\"https://doc.rust-lang.org/std/macro.try.html\" rel=\"noreferrer\"><code>try!</code></a> macro or the try operator <code>?</code>:</p>\n\n<pre><code>use std::fmt;\n\nstruct Foo(Vec&lt;u8&gt;);\n\nimpl fmt::Display for Foo {\n    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result {\n        write!(f, \"Values:\\n\")?;\n        for v in &amp;self.0 {\n            write!(f, \"\\t{}\", v)?;\n        }\n        Ok(())\n    }\n}\n\nfn main() {\n    let f = Foo(vec![42]);\n    println!(\"{}\", f);\n}\n</code></pre>\n"}], "owner": {"reputation": 1668, "user_id": 311358, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/0b2b51e4cceb4a0c1609b81815001b69?s=128&d=identicon&r=PG", "display_name": "xrl", "link": "https://stackoverflow.com/users/311358/xrl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2789, "favorite_count": 1, "accepted_answer_id": 30633256, "answer_count": 1, "score": 7, "last_activity_date": 1533131915, "creation_date": 1433378572, "question_id": 30633177, "link": "https://stackoverflow.com/questions/30633177/implement-fmtdisplay-for-vect", "title": "Implement fmt::Display for Vec&lt;T&gt;", "body": "<p>I want to implement the <code>fmt::Display</code> for a nested struct commonly used in my code.</p>\n\n<pre><code>// The root structure\npub struct WhisperFile&lt;'a&gt; {\n    pub path: &amp;'a str,\n    pub handle: RefCell&lt;File&gt;,\n    pub header: Header\n}\n\npub struct Header{\n    pub metadata: metadata::Metadata,\n    pub archive_infos: Vec&lt;archive_info::ArchiveInfo&gt;\n}\n\npub struct Metadata {\n   // SNIP\n}\n\npub struct ArchiveInfo {\n   // SNIP\n}\n</code></pre>\n\n<p>As you can see, this is a non-trivial tree of data. The <code>archive_infos</code> property on <code>Header</code> can be quite long when presented as one line.</p>\n\n<p>I would like to emit something along the lines of</p>\n\n<pre><code>WhisperFile ({PATH})\n  Metadata\n    ...\n  ArchiveInfo (0)\n    ...\n  ArchiveInfo (N)\n    ...\n</code></pre>\n\n<p>But when I try to display <code>Vec&lt;ArchiveInfo&gt;</code> I get that Display is not implemented. I can implement <code>fmt::Display</code> for <code>ArchiveInfo</code> but that's not enough since <code>fmt::Display</code> is not implemented for the parent container <code>Vec</code>. If I implement fmt::Display for <code>collections::vec::Vec&lt;ArchiveInfo&gt;</code> I get <code>the impl does not reference any types defined in this crate; only traits defined in the current crate can be implemented for arbitrary types</code>.</p>\n\n<p>I have tried iterating over the vec and calling <code>write!()</code> but I couldn't figure out what the control flow should look like. I think <code>write!()</code> needs to be return value of the function but that breaks down with multiple calls.</p>\n\n<p>How can I pretty print a Vec of my structures?</p>\n"}]