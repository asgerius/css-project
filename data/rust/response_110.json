[{"tags": ["rust", "borrow-checker"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1487194551, "last_edit_date": 1495539934, "creation_date": 1487193328, "answer_id": 42260202, "question_id": 42260092, "link": "https://stackoverflow.com/questions/42260092/how-to-avoid-multiple-mutable-borrows-of-a-vector-when-inserting-a-value-if-the/42260202#42260202", "title": "How to avoid multiple mutable borrows of a vector when inserting a value if the vector is empty?", "body": "<p>You don't. Well, you \"avoid\" having multiple borrows by... not having multiple borrows.</p>\n\n<pre><code>fn main() {\n    let mut vec = vec![];\n\n    if vec.first().is_none() {\n        vec.push(5);\n    }\n}\n</code></pre>\n\n<p>Even more idiomatically:</p>\n\n<pre><code>if vec.is_empty() {\n    vec.push(5);\n}\n</code></pre>\n\n<p>In both cases, we borrow <code>vec</code> to make the method call, but terminate that borrow before the body of the <code>if</code> is executed. Compare that to the <code>match</code> where the borrow is made in the match head expression, and then shared with the match arms.</p>\n\n<hr>\n\n<blockquote>\n  <p>take one mutable borrow that can be used for both cases</p>\n</blockquote>\n\n<p>That's not how it works. You have to understand how memory plays out and what a reference is. A <code>Vec</code> contains a pointer to memory where the data is stored. </p>\n\n<p>When you get a reference to data the vector, the reference holds the address of the memory for the data, and the compiler ensures there's only one of those allowed to mutate the <code>Vec</code>. When you <code>push</code> a value, that may need to allocate new memory to store all the data. This may invalidate the reference you hold. If that were to occur, then the next time you use the reference, it would point to some other, unrelated piece of memory, your program would crash, your users data would be exposed to security vulnerabilities, etc. etc. etc.</p>\n\n<hr>\n\n<p>The entire point of the <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"nofollow noreferrer\">issue you linked</a> and the related <a href=\"https://github.com/rust-lang/rfcs/issues/811\" rel=\"nofollow noreferrer\">pre-RFC</a> is that this code <em>should</em> be able to be determined as safe:</p>\n\n<pre><code>match vec.first() {\n    None =&gt; vec.push(5),\n    Some(v) =&gt; unreachable!(),\n}\n</code></pre>\n\n<p>In this case, the programmer can see that we never use the borrow in the <code>None</code> case, so the the compiler could theoretically end the borrow before executing any of the match arms or otherwise make the two arms disjoint with respect to lifetimes. It <strong>does not do that now</strong>. </p>\n\n<p>However, in your version of code, it's actually <em>worse</em>. By explicitly taking the borrow and keeping it in a variable, you could be extending how long the borrow needs to stay around, forcing them to overlap.</p>\n\n<p>Currently, the only solution is to reorder your code to artificially constrain borrows. I've not found this very annoying in practice, as usually there's a better organization of code anyway.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30243606/155423\">If let borrow conundrum</a></li>\n<li><a href=\"https://stackoverflow.com/q/40482981/155423\">`if` condition remains borrowed in body</a></li>\n<li><a href=\"https://stackoverflow.com/q/39177087/155423\">&quot;cannot borrow as mutable more than once at a time&quot; in if-else</a></li>\n<li><a href=\"https://stackoverflow.com/q/41601197/155423\">Is there a way to release a binding before it goes out of scope?</a></li>\n<li><a href=\"https://stackoverflow.com/q/38213453/155423\">match + RefCell = X does not live long enough</a></li>\n<li>Any of the <a href=\"https://stackoverflow.com/search?q=is%3Aq+%5Brust%5D+as+mutable+because+it+is+also+borrowed+as+immutable\">90+ Rust questions that have the error message \"mutable because it is also borrowed as immutable\"</a></li>\n</ul>\n"}], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 715, "favorite_count": 0, "accepted_answer_id": 42260202, "answer_count": 1, "score": 4, "last_activity_date": 1487194551, "creation_date": 1487192951, "last_edit_date": 1487193408, "question_id": 42260092, "link": "https://stackoverflow.com/questions/42260092/how-to-avoid-multiple-mutable-borrows-of-a-vector-when-inserting-a-value-if-the", "title": "How to avoid multiple mutable borrows of a vector when inserting a value if the vector is empty?", "body": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/6393\" rel=\"nofollow noreferrer\">this github discussion</a> you find this code that draws the ire of the borrow checker:</p>\n\n<pre><code>fn main() {\n    let mut vec = vec!();\n\n    match vec.first() {\n        None =&gt; vec.push(5),\n        Some(v) =&gt; unreachable!(),\n    }\n}\n</code></pre>\n\n<p>I understand why having a mutation while immutable borrows are outstanding is problematic. I assumed that a solution was to explicitly only have one borrow (a mutable one) but it still resulted in my having two borrows, an immutable borrow and then a mutable borrow:</p>\n\n<pre><code>fn main() {\n    let mut vec: Vec&lt;i32&gt; = vec!();\n\n    let r_vec: &amp;mut Vec&lt;i32&gt; = &amp;mut vec;\n\n    match r_vec.first() {\n       None =&gt; r_vec.push(5),\n       Some(v) =&gt; unreachable!(),\n   }   \n} \n</code></pre>\n\n<p>The compiler is still not happy:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `*r_vec` as mutable because it is also borrowed as immutable\n --&gt; testrust.rs:7:17\n  |\n6 |     match r_vec.first() {\n  |           ----- immutable borrow occurs here\n7 |         None =&gt; r_vec.push(5),\n  |                 ^^^^^ mutable borrow occurs here\n8 |         Some(v) =&gt; unreachable!(),\n9 |     }\n  |     - immutable borrow ends here\n</code></pre>\n\n<p>Why does my workaround not work, and what is the proper way to get around this issue?</p>\n"}, {"tags": ["rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487185051, "post_id": 42255868, "comment_id": 71673503, "body": "This type of question is not really appropriate for Stack Overflow. It would be better for the <a href=\"https://www.reddit.com/r/rust\" rel=\"nofollow noreferrer\">Rust subreddit</a>, the <a href=\"https://users.rust-lang.org/\" rel=\"nofollow noreferrer\">users forum</a>, or <a href=\"https://www.rust-lang.org/en-US/community.html\" rel=\"nofollow noreferrer\">IRC</a>"}], "answers": [{"comments": [{"owner": {"reputation": 67, "user_id": 7177648, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e337c0018392204443c8dd1d93f9418?s=128&d=identicon&r=PG&f=1", "display_name": "J. Dough", "link": "https://stackoverflow.com/users/7177648/j-dough"}, "edited": false, "score": 0, "creation_date": 1487274017, "post_id": 42256535, "comment_id": 71722844, "body": "Thank you very much, this helped a lot."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 4, "last_activity_date": 1487180600, "last_edit_date": 1495540806, "creation_date": 1487180600, "answer_id": 42256535, "question_id": 42255868, "link": "https://stackoverflow.com/questions/42255868/why-do-i-need-these-lifetime-but-not-others-how-to-know-the-correct-signature-a/42256535#42256535", "title": "Why do I need these lifetime but not others, how to know the correct signature and how can I identify the parameters needing lifetimes?", "body": "<p>The compiler's great at telling you when you need to specify lifetimes, but not necessarily so good at letting you know which ones.</p>\n\n<p>First of all, it's worth mentioning that there <em>are</em> lifetimes on every reference; it's just that there are <a href=\"https://stackoverflow.com/questions/40325690/lifetime-elision\">lifetime elision rules</a> which say how the compiler will fill them in if you don't specify them.</p>\n\n<p>Back to your signature:</p>\n\n<pre><code>fn create_formula(formula: &amp; mut HashMap&lt;&amp; str, &amp;str&gt;, input: &amp;str, re: Regex)-&gt;std::borrow::Cow&lt;_, str&gt;\n</code></pre>\n\n<p>The first lifetime definitely needed is the one in <code>Cow&lt;_, str&gt;</code>; you need to have a lifetime to put into there to declare the function.  There are two choices: declare one, or use <code>'static</code>.  In this case, the <code>Cow</code> may point at part of the <code>input</code> parameter, so you need to tie them together.  First the new lifetime needs declaring by adding <code>&lt;'t&gt;</code> (any name would do) after the function name, and then using it for <code>input</code> and the return type:</p>\n\n<pre><code>fn create_formula&lt;'t&gt;(formula: &amp; mut HashMap&lt;&amp; str, &amp;str&gt;, input: &amp;'t str, re: Regex)-&gt;std::borrow::Cow&lt;'t, str&gt;\n</code></pre>\n\n<p>And finally you're putting borrowed parts of <code>input</code> into the <code>HashMap</code>.  If the <code>input</code> lifetime (which we've now named <code>'t</code>) isn't tied to the <code>HashMap</code> value, someone could pass in a hash map which lives longer than the input, leading to dangling pointers in the map.  So we need to constrain it too, giving the final version:</p>\n\n<pre><code>fn create_formula&lt;'t&gt;(formula: &amp; mut HashMap&lt;&amp;str, &amp;'t str&gt;, input: &amp;'t str, re: Regex)-&gt;std::borrow::Cow&lt;'t, str&gt;\n</code></pre>\n\n<p>The key thing is that function signatures need to convince the compiler that all the uses of references are safe, and that often means you have to be explicit about the relationships between different reference parameters (and lifetime-parametric types) when the default (via the elision rules) don't say the right thing.</p>\n"}], "owner": {"reputation": 67, "user_id": 7177648, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e337c0018392204443c8dd1d93f9418?s=128&d=identicon&r=PG&f=1", "display_name": "J. Dough", "link": "https://stackoverflow.com/users/7177648/j-dough"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 96, "favorite_count": 0, "accepted_answer_id": 42256535, "answer_count": 1, "score": 0, "last_activity_date": 1487184247, "creation_date": 1487178503, "last_edit_date": 1487184247, "question_id": 42255868, "link": "https://stackoverflow.com/questions/42255868/why-do-i-need-these-lifetime-but-not-others-how-to-know-the-correct-signature-a", "title": "Why do I need these lifetime but not others, how to know the correct signature and how can I identify the parameters needing lifetimes?", "body": "<p>This is my first bit of Rust code. I added the lifetime parameters to the inner function only because the compiler told me to. Although I understand the lifetime explanation in the Rust book, I couldn't have written this signature by myself. </p>\n\n<pre><code>fn transform_the_expression() {\n    fn create_formula&lt;'t&gt;(formula: &amp; mut HashMap&lt;&amp; str, &amp;'t str&gt;, input: &amp;'t str, re: Regex)-&gt;std::borrow::Cow&lt;'t, str&gt;{\n        let replacement = re.find(input).unwrap();\n        formula.insert(\"1\", replacement.as_str());\n        let rest = re.replace(input, \"1\");\n        return rest;\n    }\n\n    let input = \"(a+(b*c))\";\n    use regex::Regex;\n    let re = Regex::new(r\"\\([\\w\\d][/*+-^][\\w\\d]\\)\").unwrap();\n    use std::collections::HashMap;\n    let mut formula = HashMap::new();\n\n    let result = create_formula(&amp;mut formula, input, re);\n\n    println!(\"result = {:?}\", result);\n\n}\n</code></pre>\n\n<ul>\n<li>Why do I need lifetimes at these 3 places in the signature?</li>\n<li>Why don't I need them at the other places?</li>\n<li>How I would go about writing the correct signature without the compiler telling me what to do? </li>\n<li>How can I identify the parameters needing lifetimes?</li>\n</ul>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487168315, "post_id": 42250930, "comment_id": 71661352, "body": "<i>Why</i>? Why not just have an empty struct, take the <code>self</code> parameter, and not use it?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487168400, "post_id": 42250930, "comment_id": 71661407, "body": "@Shepmaster: Why use a trait to start with? ;)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487168476, "post_id": 42250930, "comment_id": 71661464, "body": "@MatthieuM. my spidey-sense tells me that sometimes they are going to want state. For example, <code>Foo</code> is probably the actual handler and <code>data</code> should be accessed through <code>self</code>."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487168843, "post_id": 42250930, "comment_id": 71661721, "body": "@Shepmaster  No, I not need state. I just need syntax like <code>impl Handler for X</code>, because of it make clear what function from &gt;20 functions belong to which variant."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487168941, "post_id": 42250930, "comment_id": 71661801, "body": "@MatthieuM. <code>Why use a trait to start with?</code>, because of <code>trait</code> have clear syntax describing which interface I implement to which thing, I have &gt; 20 such functions, and to simplify finding of such functions I need such or similar syntax."}, {"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487169002, "post_id": 42250930, "comment_id": 71661854, "body": "@Shepmaster &gt;Why? Why not just have an empty struct, take the self parameter, and not use it?  Because of I want ideal solution, and useless 64 bit pointer is not great."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487169090, "post_id": 42250930, "comment_id": 71661935, "body": "@user1244932 why do you think the optimizer won&#39;t remove the pointer? Why are you micro-optimizing stuff like this <b>without measuring</b>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487169260, "post_id": 42250930, "comment_id": 71662050, "body": "@Shepmaster: To be fair, the compiler would have a hard-time removing the data pointer, since <i>one</i> implementation of <code>Handler</code> could perfectly actually <i>use</i> the data pointer."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487169294, "post_id": 42250930, "comment_id": 71662085, "body": "@MatthieuM. wouldn&#39;t monomorphization deal with that?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487169381, "post_id": 42250930, "comment_id": 71662141, "body": "@Shepmaster: <code>&amp;Handler</code> is an object trait; monomorphization could avoid allocating an object (using 1 as the data pointer), but it would still take 64-bits."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1487169474, "post_id": 42250930, "comment_id": 71662219, "body": "@user1244932: Your question is far from clear. From your comments it would appear that you want <code>Handler</code> to have <b>multiple</b> associated functions; if that&#39;s the case it should be reflected in the question! (When you said many converters, I assumed an instance of <code>Foo</code> would have a single converter/function since <code>Handler</code> has a single function and you would have multiple instances of <code>Foo</code>)"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487169816, "post_id": 42250930, "comment_id": 71662477, "body": "@MatthieuM. that&#39;s why I&#39;d change it to <code>Foo&lt;H: Handler&gt; { handler: H, &#47;* ... *&#47; }</code> ;-)"}], "answers": [{"comments": [{"owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1487168751, "post_id": 42251897, "comment_id": 71661651, "body": "No, as I pointed in question I already use such code as you show. The problem that I have many such functions as <code>aaa</code> and to organize them I need something like traits to simplify finding suitable function in code and show other guys what interface that should implement"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "edited": false, "score": 0, "creation_date": 1487170264, "post_id": 42251897, "comment_id": 71662850, "body": "Updated; I&#39;d recommend using trait objects in this case unless you really have a stringent requirement, but just in case I showed how to build a virtual table on your own."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 1, "last_activity_date": 1487170224, "last_edit_date": 1487170224, "creation_date": 1487168377, "answer_id": 42251897, "question_id": 42250930, "link": "https://stackoverflow.com/questions/42250930/is-it-possible-to-use-a-trait-as-syntax-sugar-for-a-free-function/42251897#42251897", "title": "Is it possible to use a trait as syntax sugar for a free function?", "body": "<p>There is a misunderstanding here:</p>\n\n<ol>\n<li>Rust has functions</li>\n<li>Rust has \"functors\"</li>\n<li>Rust has traits</li>\n</ol>\n\n<p>A function is just that:</p>\n\n<pre><code>fn i_am_a_function(a: i32) -&gt; String { a.to_string() }\n</code></pre>\n\n<p>A functor is a function object, that is a function associated to some state. Rust actually has 3 of them:</p>\n\n<pre><code>FnOnce(i32) -&gt; String\nFnMut(i32) -&gt; String\nFn(i32) -&gt; String\n</code></pre>\n\n<p>And finally Rust has traits:</p>\n\n<pre><code>trait Handler {\n    fn non_object_safe(a: i32) -&gt; String;\n    fn object_safe(&amp;self, a: i32) -&gt; String;\n}\n</code></pre>\n\n<p>Traits can be used in two situations:</p>\n\n<ul>\n<li>to provide bounds in generic functions</li>\n<li><strong>when object safe</strong>, to provide type erasure</li>\n</ul>\n\n<p>Roughly speaking, a trait is not object safe if any of its associated functions:</p>\n\n<ul>\n<li>does not have a <code>&amp;self</code> or <code>&amp;mut self</code> parameter</li>\n<li>mentions <code>Self</code> (the type) </li>\n</ul>\n\n<p>For more information on either concept, check the Rust Book.</p>\n\n<hr>\n\n<p>In your situation, you could use:</p>\n\n<ol>\n<li>A simple pointer to function: <code>fn(i32) -&gt; String</code></li>\n<li>A functor <code>Fn(i32) -&gt; String</code></li>\n<li>An object safe trait</li>\n</ol>\n\n<p>The only thing you cannot use is a non object-safe trait, and of course thanks to Murphy, it's the one option you picked.</p>\n\n<p>In your case, the simplest solution is to use an object safe trait:</p>\n\n<pre><code>trait Handler {\n    fn handle(&amp;self, a: i32) -&gt; String;\n}\n\nstruct A;\n\nimpl Handler for A {\n    fn handle(&amp;self, a: i32) -&gt; String {\n        a.to_string()\n    }\n}\n\nconst STATIC_A: &amp;'static Handler = &amp;A;\n\nstruct Foo {\n    data: &amp;'static str,\n    handler: &amp;'static Handler,\n}\n\nfn main() {\n    let foo = Foo { data: \"aaa\", handler: STATIC_A };\n    println!(\"{}\", foo.handler.handle(3));\n}\n</code></pre>\n\n<p>If that 64-bits overhead for the data-pointer <em>really</em> bother you, then you can use function pointers and build your own virtual table:</p>\n\n<pre><code>struct Handler {\n    handle: fn(i32) -&gt; String,\n}\n\nfn aaa(a: i32) -&gt; String {\n    a.to_string()\n}\n\nconst STATIC_A: &amp;'static Handler = &amp;Handler { handle: aaa };\n\nstruct Foo {\n    data: &amp;'static str,\n    handler: &amp;'static Handler,\n}\n\nfn main() {\n    let foo = Foo { data: \"aaa\", handler: STATIC_A };\n    println!(\"{}\", (foo.handler.handle)(3));\n}\n</code></pre>\n\n<p>It's less ergonomic, but it's also 64-bits smaller!</p>\n"}], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 223, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1487170224, "creation_date": 1487165818, "last_edit_date": 1495540395, "question_id": 42250930, "link": "https://stackoverflow.com/questions/42250930/is-it-possible-to-use-a-trait-as-syntax-sugar-for-a-free-function", "title": "Is it possible to use a trait as syntax sugar for a free function?", "body": "<p>I want to call function depending on external data,\nlike this:</p>\n\n<pre><code>struct Foo {\n    data: &amp;'static str,\n    handler: Option&lt;fn (i32) -&gt; String&gt;,\n}\n\nfn aaa_converter(_: i32) -&gt; String { unimplemented!(); }\nfn bbb_converter(_: i32) -&gt; String { unimplemented!(); }\n\nfn main() {\n    let _ = Foo{data: \"aaa\", handler: Some(aaa_converter)};\n    let _ = Foo{data: \"bbb\", handler: Some(bbb_converter)};\n    let _ = Foo{data: \"ccc\", handler: None};\n}\n</code></pre>\n\n<p>I have as input the string \"aaa\", and I need to call <code>aaa_converter</code>. All works fine, I put <code>Foo</code> objects into the hash map and call proper <code>handler</code> if not <code>None</code>.</p>\n\n<p>Now I have many such converters and I want to help from the language to deal with them.</p>\n\n<p>Ideally, there would be syntax like this:</p>\n\n<pre><code>trait Handler {\n    fn handle(a: i32) -&gt; String;\n}\n\nimpl Handler for \"aaa\" {\n    // ...\n}\n</code></pre>\n\n<p>The best match that I can have is:</p>\n\n<pre><code>trait Handler {\n    fn handle(/*&amp;self, */a: i32) -&gt; String;\n}\n\nstruct aaa;\n\nimpl Handler for aaa {\n    fn handle(/*&amp;self, */a: i32) -&gt; String {\n        unimplemented!();\n    }\n}\n\nstruct Foo {\n    data: &amp;'static str,\n    handler: &amp;'static Handler,\n}\n\nfn main() {}\n</code></pre>\n\n<p>But such code does not compile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait `Handler` cannot be made into an object\n   = note: method `handle` has no receiver\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/25355139/how-to-call-a-trait-method-without-a-struct-instance\">How to call a trait method without a struct instance?</a> looks related, but the RFC linked in the answer is out of date. It's also possible something changed since then in the language?</p>\n\n<p>Is it possible to use a trait as a simple pointer to a free function?</p>\n\n<p>Or is there another way to organize handlers?</p>\n"}, {"tags": ["string", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1487159785, "post_id": 42248444, "comment_id": 71655470, "body": "Why, though? You can get the reference from <code>Cow</code> by dereferencing it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1487159890, "post_id": 42248444, "comment_id": 71655549, "body": "@ljedrz: presumably, so that <code>input = create_formula(input, re);</code> works."}], "answers": [{"comments": [{"owner": {"reputation": 67, "user_id": 7177648, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e337c0018392204443c8dd1d93f9418?s=128&d=identicon&r=PG&f=1", "display_name": "J. Dough", "link": "https://stackoverflow.com/users/7177648/j-dough"}, "edited": false, "score": 0, "creation_date": 1487162591, "post_id": 42248756, "comment_id": 71657390, "body": "Thank you, that was very helpful. The function into() seems to be deprecated and replaced by into_owned(), at least borrows.rs doesn&#39;t contains it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 67, "user_id": 7177648, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e337c0018392204443c8dd1d93f9418?s=128&d=identicon&r=PG&f=1", "display_name": "J. Dough", "link": "https://stackoverflow.com/users/7177648/j-dough"}, "edited": false, "score": 2, "creation_date": 1487162732, "post_id": 42248756, "comment_id": 71657490, "body": "The function <code>into</code> is a bit hard to find, because it is automatically implemented. I advise you to check out <code>std::convert::From</code> and its evil twin <code>std::convert::Into</code>: for any implementation of <code>X::from(Y) -&gt; X</code> you get an implementation of <code>Y::into(self) -&gt; X</code> auto-magically."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1487159862, "creation_date": 1487159862, "answer_id": 42248756, "question_id": 42248444, "link": "https://stackoverflow.com/questions/42248444/return-str-instead-of-stdborrowcow-str/42248756#42248756", "title": "Return &amp;str instead of std::borrow::Cow&lt;&#39;_, str&gt;", "body": "<p>You <strong>cannot</strong>.</p>\n\n<hr>\n\n<p>The cornerstone of Rust is <strong>ownership</strong>, which is a concept you need to understand.</p>\n\n<p>A <code>&amp;str</code> <em>borrows</em> but does not <em>own</em>, it refers to a piece of memory that someone else owns. The borrow-checker will ensure, at compile-time, that whoever owns the piece of memory that is referred to will live <em>longer</em> than <code>&amp;str</code>, as otherwise <code>&amp;str</code> would point into the ether.</p>\n\n<p>In this case, think of:</p>\n\n<ul>\n<li><code>String</code> being a cat</li>\n<li><code>&amp;str</code> being a hand-held device running a live-feed of this cat (which is followed by a tiny camera drone)</li>\n</ul>\n\n<p>Obviously, you can only have a live-feed of the cat as long as it <em>lives</em>, after that, ...</p>\n\n<p>And your question is asking:</p>\n\n<blockquote>\n  <p>If I kill the cat, how do I still get a live-feed?</p>\n</blockquote>\n\n<p>You cannot.</p>\n\n<hr>\n\n<p>In your case, <code>re.replace</code> creates a <code>Cow&lt;'t, str&gt;</code>. If you look at the definition of <code>Cow</code> you'll notice that it is:</p>\n\n<ul>\n<li>either a <code>&amp;str</code></li>\n<li>or a <code>String</code></li>\n</ul>\n\n<p>It is a <code>&amp;str</code> <em>only</em> if no replacement occurred, and otherwise it is a <code>String</code>.</p>\n\n<p>You cannot know, statically, which it is, so you need to consider the \"worst case\" alternative: think of it as a <code>String</code>.</p>\n\n<p>What's the lifetime of this <code>String</code>: it depends whether you return it from the function or not, if you don't, it cannot outlive the function's frame.</p>\n\n<p>And if it doesn't outlive the function frame, you cannot have a live-feed that outlive the function frame.</p>\n\n<hr>\n\n<p>So?</p>\n\n<p>My advice is to use a <code>String</code>. It'll be vastly simpler:</p>\n\n<pre><code>fn transform_the_expression() {\n    use regex::Regex;\n\n    fn create_formula(input: &amp;str, re: &amp;Regex) -&gt; String {\n        re.replace(input, \"1\").into()\n    }\n\n    let mut input = String::from(\"(a+(b*c))\");\n    let re = Regex::new(r\"\\([\\w\\d][/*+-^][\\w\\d]\\)\").unwrap();\n\n    println!(\"input = {:?}\", input);\n    input = create_formula(&amp;input, &amp;re);\n    println!(\"input = {:?}\", input);\n}\n</code></pre>\n"}], "owner": {"reputation": 67, "user_id": 7177648, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2e337c0018392204443c8dd1d93f9418?s=128&d=identicon&r=PG&f=1", "display_name": "J. Dough", "link": "https://stackoverflow.com/users/7177648/j-dough"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1233, "favorite_count": 0, "accepted_answer_id": 42248756, "answer_count": 1, "score": 5, "last_activity_date": 1487167705, "creation_date": 1487159031, "last_edit_date": 1487167705, "question_id": 42248444, "link": "https://stackoverflow.com/questions/42248444/return-str-instead-of-stdborrowcow-str", "title": "Return &amp;str instead of std::borrow::Cow&lt;&#39;_, str&gt;", "body": "<p>I want to update the variable input which is of type <code>&amp;str</code>. How can I make the inner function return the <code>&amp;str</code> instead of the <code>Cow</code>?</p>\n\n<p>This may be not a problem with the language but with the regex-crate. Is there one that is more straightforward?</p>\n\n<pre><code>fn transform_the_expression() {\n\n    fn create_formula&lt;'t&gt;(input: &amp;'t str, re: Regex) -&gt; std::borrow::Cow&lt;'t, str&gt; {\n        let changed_string = re.replace(input, \"1\");\n        return changed_string;\n    }\n\n    let mut input = \"(a+(b*c))\";\n    use regex::Regex;\n    let re = Regex::new(r\"\\([\\w\\d][/*+-^][\\w\\d]\\)\").unwrap();\n\n    println!(\"input = {:?}\", input);\n    input = create_formula(input, re);\n    println!(\"input = {:?}\", input);\n}\n</code></pre>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 0, "creation_date": 1487151361, "post_id": 42245181, "comment_id": 71649268, "body": "Aha, of course! So when I attempted to create a really simple example, I accidentally created an invalid example."}, {"owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 0, "creation_date": 1487151547, "post_id": 42245181, "comment_id": 71649407, "body": "So the reason why my &quot;manual&quot; next-method works, is because it&#39;s signature doesn&#39;t allow more than one return value from next to be alive at the same time? Whereas the signature for the Iterator-trait&#39;s next-method does?  Put in another way - the Iterator trait promises that next() will not return the same mutable reference twice. But my implementation was trying to do just that."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "edited": false, "score": 1, "creation_date": 1487153680, "post_id": 42245181, "comment_id": 71651080, "body": "Yes, that&#39;s right - I&#39;ve added a bit to my answer to try to cover that."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 5, "last_activity_date": 1487167613, "last_edit_date": 1487167613, "creation_date": 1487150365, "answer_id": 42245181, "question_id": 42243964, "link": "https://stackoverflow.com/questions/42243964/how-do-i-implement-a-container-with-support-for-a-mutable-iterator/42245181#42245181", "title": "How do I implement a container with support for a mutable iterator?", "body": "<p>It's not possible to implement the iterator as is, because it would allow you to get more than one mutable reference to the same item, breaking Rust's aliasing/borrowing rules.  Good thing the borrow checker caught the error!  :-)</p>\n\n<p>For example, extending your <code>main</code> example:</p>\n\n<pre><code>fn main() {\n    let mut cont = Container::new();\n\n    let mut it = cont.iter_mut();\n    let alias_1 = it.next();\n    let alias_2 = it.next();\n    // alias_1 and alias_2 both would have mutable references to cont.val!\n}\n</code></pre>\n\n<p>Other <code>iter_mut</code> iterators (for example the one one on vectors/slices) return references to different items on each step, so don't have this problem.</p>\n\n<p>If you really need to iterate over something logically mutable, you may be able to iterate immutably but use interior mutability via <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a> or <a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"nofollow noreferrer\"><code>Cell</code></a>.</p>\n\n<p>The reason the <code>manual_next</code> function compiles is that you're not constrained to the <code>Iterator::next</code> signature, and it is in fact perfectly safe to call once (or more if you don't keep the result).  However if you try to save the result, it keeps the <code>IterMut</code> borrowed mutably and you couldn't call it again:</p>\n\n<pre><code>let mut cont = Container::new();\n\nlet mut it = cont.iter_mut();\nlet x = manual_next(&amp;mut it);\nmanual_next(&amp;mut it);  // Error: `it` is still borrowed mutably\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=6137af5eb28a7ceb77bfaf07a3d40e9a&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>In contrast, <code>Iterator::next</code> has a type which makes things like <code>collect</code>ing into a vector possible.</p>\n"}], "owner": {"reputation": 553, "user_id": 395763, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/54f5eda87ee0c28ba55a1523c1c07689?s=128&d=identicon&r=PG", "display_name": "avl_sweden", "link": "https://stackoverflow.com/users/395763/avl-sweden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 859, "favorite_count": 1, "closed_date": 1526957128, "accepted_answer_id": 42245181, "answer_count": 1, "score": 5, "last_activity_date": 1487167613, "creation_date": 1487146782, "last_edit_date": 1487167528, "question_id": 42243964, "link": "https://stackoverflow.com/questions/42243964/how-do-i-implement-a-container-with-support-for-a-mutable-iterator", "closed_reason": "Duplicate", "title": "How do I implement a container with support for a mutable iterator?", "body": "<p>I want to design a toy container class with support for mutable iterators, but I'm having trouble sorting out the lifetimes of the iterator and its reference to the container.</p>\n\n<p>I've tried to create a minimal non-compiling example:</p>\n\n<pre><code>struct Payload {\n    value: i32,\n}\n\nstruct Container {\n    val: Payload,\n}\n\nstruct IterMut&lt;'a&gt; {\n    cont: &amp;'a mut Container,\n    cnt: i32,\n}\n\nimpl&lt;'a&gt; Container {\n    fn new() -&gt; Container {\n        Container { val: Payload { value: 42 } }\n    }\n    fn iter_mut(&amp;'a mut self) -&gt; IterMut&lt;'a&gt; {\n        IterMut {\n            cont: self,\n            cnt: 10,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Iterator for IterMut&lt;'a&gt; {\n    type Item = &amp;'a mut Payload;\n\n    fn next&lt;'b&gt;(&amp;'b mut self) -&gt; Option&lt;Self::Item&gt; {\n        self.cnt -= 1;\n\n        if self.cnt &lt; 0 {\n            return None;\n        } else {\n            Some(&amp;mut self.cont.val)\n        }\n    }\n}\n\nfn main() {\n    let mut cont = Container::new();\n\n    let mut it = cont.iter_mut();\n    it.next();\n}\n</code></pre>\n\n<p>The above is intended to implement a real stupid container that returns the same item 10 times when iterated over using <code>iter_mut()</code>. </p>\n\n<p>I can't figure out how to implement <code>Iterator::next</code>.</p>\n\n<p>I did manage to write a regular function that implements the same semantics as what I want for <code>next</code>:</p>\n\n<pre><code>fn manual_next&lt;'a, 'b&gt;(i: &amp;'a mut IterMut&lt;'b&gt;) -&gt; Option&lt;&amp;'a mut Payload&gt; {\n    i.cnt -= 1;\n\n    if i.cnt &lt; 0 {\n        return None;\n    } else {\n        Some(&amp;mut i.cont.val)\n    }\n}\n</code></pre>\n\n<p>This doesn't help, because I can't manage to adapt it to implement <code>Iterator::next</code>, and without implementing <code>Iterator</code>, my container can't be iterated over in for-loops, which I want.</p>\n"}, {"tags": ["io", "rust"], "answers": [{"comments": [{"owner": {"reputation": 340, "user_id": 8244977, "user_type": "registered", "profile_image": "https://graph.facebook.com/100007678740593/picture?type=large", "display_name": "BingLi224", "link": "https://stackoverflow.com/users/8244977/bingli224"}, "edited": false, "score": 0, "creation_date": 1586871363, "post_id": 42247224, "comment_id": 108282895, "body": "This doesn&#39;t work for me (<code>dyn Read</code>). After <code>io::copy(..)</code>, the result from <code>read(..)</code> is still in same as reading before <code>io::copy(..)</code>. Why?"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 10, "last_activity_date": 1487155806, "creation_date": 1487155806, "answer_id": 42247224, "question_id": 42243355, "link": "https://stackoverflow.com/questions/42243355/how-to-advance-through-data-from-the-stdioread-trait-when-seek-isnt-impleme/42247224#42247224", "title": "How to advance through data from the std::io::Read trait when Seek isn&#39;t implemented?", "body": "<p>You can use <a href=\"https://doc.rust-lang.org/std/io/fn.copy.html\" rel=\"noreferrer\"><code>io::copy()</code></a>, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"noreferrer\"><code>Read::take()</code></a> and <a href=\"https://doc.rust-lang.org/std/io/fn.sink.html\" rel=\"noreferrer\"><code>io::sink()</code></a> to discard a specific number of bytes:</p>\n\n<pre><code>let mut file = File::open(\"foo.txt\").unwrap();\n\n// Discard 27 bytes\nio::copy(&amp;mut file.by_ref().take(27), &amp;mut io::sink());\n\n// Read the rest\nlet mut interesting_contents = Vec::new();\nfile.read_to_end(&amp;mut interesting_contents).unwrap();\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=7d256161e326480085170407417499d9&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>Here, we also have to use <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.by_ref\" rel=\"noreferrer\"><code>by_ref()</code></a> in order to be able to still use the file afterwards.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 807, "favorite_count": 2, "accepted_answer_id": 42247224, "answer_count": 1, "score": 8, "last_activity_date": 1534095150, "creation_date": 1487144671, "last_edit_date": 1534095150, "question_id": 42243355, "link": "https://stackoverflow.com/questions/42243355/how-to-advance-through-data-from-the-stdioread-trait-when-seek-isnt-impleme", "title": "How to advance through data from the std::io::Read trait when Seek isn&#39;t implemented?", "body": "<p>What's the best way to read from a type implementing the <code>std::io::Read</code> trait when the contents of the output isn't important?</p>\n\n<p>Possible options I see are:</p>\n\n<ul>\n<li>Read single bytes in a loop.</li>\n<li>Allocate a <em>potentially huge</em> vector and read into that.</li>\n<li>Something in-between... <em>read into a fixed sized buffer in a loop</em>.</li>\n</ul>\n\n<p>The first 2 options don't seem ideal, the third is OK but inconvenient.</p>\n\n<p>Does Rust provide a convenient way to achieve this?</p>\n"}, {"tags": ["rust", "slice", "notation"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 3, "creation_date": 1487148469, "post_id": 42241233, "comment_id": 71647298, "body": "There&#39;s also just <code>&amp;my_vec</code> if the slice type is required (e.g. in a function argument, or for a return value)"}], "answers": [{"comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 1, "creation_date": 1487149613, "post_id": 42243428, "comment_id": 71648013, "body": "I don&#39;t think we should be looking at MIR, since it almost doesn&#39;t perform optimizations. I would expect both variants to compile to the same assembly after the LLVM pass"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1487149864, "post_id": 42243428, "comment_id": 71648197, "body": "That&#39;s the most probable outcome, but it&#39;s not feasible to verify this with LLVM IR / ASM, since without actual output <i>everything</i> will be optimized away (especially in the release mode)."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 1, "creation_date": 1487150550, "post_id": 42243428, "comment_id": 71648667, "body": "<code>RangeFull</code> is zero-sized so I don&#39;t think the additional allocation matters that much."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487155452, "post_id": 42243428, "comment_id": 71652470, "body": "Strictly no difference at LLVM IR level (after optimizations)."}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 0, "last_activity_date": 1487149068, "last_edit_date": 1487149068, "creation_date": 1487144950, "answer_id": 42243428, "question_id": 42241233, "link": "https://stackoverflow.com/questions/42241233/is-there-any-practical-considerations-to-prefer-one-notation-for-converting-vect/42243428#42243428", "title": "Is there any practical considerations to prefer one notation for converting vectors into slices?", "body": "<p>As far as I can tell based on current nightly release-mode MIR, the first variant is preferable since it does one allocation less:</p>\n\n<pre><code>let mut _0: ();\nscope 1 {\n    let _1: std::vec::Vec&lt;i32&gt;;\n    scope 2 {\n        let _6: &amp;[i32];\n    }\n}\nlet mut _2: ();\nlet mut _3: std::boxed::Box&lt;[i32]&gt;;\nlet mut _4: std::boxed::Box&lt;[i32; 3]&gt;;\nlet mut _5: std::boxed::Box&lt;[i32; 3]&gt;;\nlet mut _7: &amp;[i32];\nlet mut _8: &amp;std::vec::Vec&lt;i32&gt;;\nlet mut _9: std::ops::RangeFull; // not present in variant 1\n</code></pre>\n\n<p>However, I don't know how it would look like after further optimizations - those may be different based on the target usage.</p>\n"}, {"comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 1, "creation_date": 1487156740, "post_id": 42247092, "comment_id": 71653400, "body": "This is the correct answer. One shouldn&#39;t worry about small things like that. Optimizers are like really smart these days. Which is a good thing because it takes the burden of thinking about performance for every line of code from us. Measure and identify the problem first; you can still worry about micro optimization then :)"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1487167309, "last_edit_date": 1487167309, "creation_date": 1487155430, "answer_id": 42247092, "question_id": 42241233, "link": "https://stackoverflow.com/questions/42241233/is-there-any-practical-considerations-to-prefer-one-notation-for-converting-vect/42247092#42247092", "title": "Is there any practical considerations to prefer one notation for converting vectors into slices?", "body": "<p>There is strictly no difference after optimizations:</p>\n\n<pre><code>#[no_mangle]\nextern {\n    fn simple(ptr: *const u8, len: usize) -&gt; usize;\n}\n\nfn take_slice(slice: &amp;[u8]) {\n    unsafe { simple(slice.as_ptr(), slice.len()); }\n}\n\n#[inline(never)]\nfn take_vec_auto(v: &amp;Vec&lt;u8&gt;) {\n    take_slice(v);\n}\n\n#[inline(never)]\nfn take_vec_deref(v: &amp;Vec&lt;u8&gt;) {\n    take_slice(&amp;*v);\n}\n\n#[inline(never)]\nfn take_vec_index(v: &amp;Vec&lt;u8&gt;) {\n    take_slice(&amp;v[..]);\n}\n</code></pre>\n\n<p>Leads to the following LLVM IR <a href=\"https://play.rust-lang.org/?gist=2434b4d5276d02e325a142b89776156e&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">on the playground</a>:</p>\n\n<blockquote>\n  <pre><code>; Function Attrs: noinline nounwind uwtable\ndefine internal fastcc void @_ZN8rust_out13take_vec_auto17h2827abd8ce79beacE(i8* %.0.0.0.0.0.val, i64 %.0.1.val) unnamed_addr #0 {\nentry-block:\n  %0 = tail call i64 @simple(i8* nonnull %.0.0.0.0.0.val, i64 %.0.1.val) #2\n  ret void\n}\n\n; Function Attrs: noinline nounwind uwtable\ndefine internal fastcc void @_ZN8rust_out14take_vec_deref17h66cf4ce954b36d1dE(i8* %.0.0.0.0.0.val, i64 %.0.1.val) unnamed_addr #0 {\nentry-block:\n  %0 = tail call i64 @simple(i8* nonnull %.0.0.0.0.0.val, i64 %.0.1.val) #2\n  ret void\n}\n\n; Function Attrs: noinline nounwind uwtable\ndefine internal fastcc void @_ZN8rust_out14take_vec_index17h77571b14bbdb120cE(i8* %.0.0.0.0.0.val, i64 %.0.1.val) unnamed_addr #0 {\nentry-block:\n  %0 = tail call i64 @simple(i8* nonnull %.0.0.0.0.0.val, i64 %.0.1.val) #2\n  ret void\n}\n</code></pre>\n</blockquote>\n\n<p>So it is mostly a matter of style, and style is subjective.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 77, "favorite_count": 0, "accepted_answer_id": 42247092, "answer_count": 2, "score": 1, "last_activity_date": 1487167309, "creation_date": 1487135877, "last_edit_date": 1487167270, "question_id": 42241233, "link": "https://stackoverflow.com/questions/42241233/is-there-any-practical-considerations-to-prefer-one-notation-for-converting-vect", "title": "Is there any practical considerations to prefer one notation for converting vectors into slices?", "body": "<p>A vector can be de-referenced into a slice by either of:</p>\n\n<ul>\n<li><code>let slice = &amp;*my_vec;</code></li>\n<li><code>let slice = &amp;my_vec[..];</code></li>\n</ul>\n\n<p>I prefer the second, even though its more verbose, I find it more clear especially when the statement is mixed with densely used operators, and where de-referencing has different implications depending on <code>Box</code>/<code>Vec</code>/pointer types.</p>\n\n<p>On the other hand, it uses a redundant range.</p>\n\n<p>I'd like to ignore code-style personal preference and focus on tangible differences. Do they ever compile down to different code for release builds?</p>\n"}, {"tags": ["rust", "serde"], "answers": [{"tags": [], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "is_accepted": true, "score": 7, "last_activity_date": 1487167063, "last_edit_date": 1487167063, "creation_date": 1487135969, "answer_id": 42241251, "question_id": 42241033, "link": "https://stackoverflow.com/questions/42241033/skip-struct-field-when-serializing/42241251#42241251", "title": "Skip struct field when serializing", "body": "<p>The correct annotation is <a href=\"https://serde.rs/attributes.html#field-attributes\" rel=\"noreferrer\"><code>#[serde(skip_serializing)]</code></a>.</p>\n"}], "owner": {"reputation": 33796, "user_id": 45525, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/TKzgD.png?s=128&g=1", "display_name": "Synesso", "link": "https://stackoverflow.com/users/45525/synesso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 708, "favorite_count": 0, "accepted_answer_id": 42241251, "answer_count": 1, "score": 4, "last_activity_date": 1487167063, "creation_date": 1487134601, "last_edit_date": 1487167051, "question_id": 42241033, "link": "https://stackoverflow.com/questions/42241033/skip-struct-field-when-serializing", "title": "Skip struct field when serializing", "body": "<p>Given the struct:</p>\n\n<pre><code>#[derive(Debug, Serialize)]\npub struct ReqMetrics {\n    start: Timespec,\n    pub name: String\n}\n</code></pre>\n\n<p>How can I ensure that Serde ignores the field <code>start</code> when serializing?</p>\n"}, {"tags": ["io", "rust", "traits"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487136794, "post_id": 42240663, "comment_id": 71641455, "body": "I have deleted my answer. This question is now <i>substantially bigger</i> and provides <i>alot more context</i> than when originally asked."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487149197, "post_id": 42240663, "comment_id": 71647745, "body": "@simon-whitehead, apologies for not giving a comprehensive question initially, I thought there might be some totally obvious thing I was missing which didn&#39;t require working code example."}], "answers": [{"comments": [{"owner": {"reputation": 12061, "user_id": 87191, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/5a32c1cfc71ebf97967c5d6fd2cf2cf2?s=128&d=identicon&r=PG", "display_name": "simao", "link": "https://stackoverflow.com/users/87191/simao"}, "edited": false, "score": 1, "creation_date": 1614698318, "post_id": 42241174, "comment_id": 117461014, "body": "In more recent versions of rust you can also use <code>as_slice()</code> to convert a <code>Vec</code> to a slice and then you can use methods from <code>Read</code>."}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": true, "score": 27, "last_activity_date": 1614715926, "last_edit_date": 1614715926, "creation_date": 1487135518, "answer_id": 42241174, "question_id": 42240663, "link": "https://stackoverflow.com/questions/42240663/how-to-read-stdioread-from-a-vec-or-slice/42241174#42241174", "title": "How to read (std::io::Read) from a Vec or Slice?", "body": "<p>While vectors don't support <code>std::io::Read</code>, slices do.</p>\n<p>There is some confusion here caused by Rust being able to coerce a <code>Vec</code> into a slice in some situations but not others.</p>\n<p>In this case, an explicit coercion to a slice is needed because at the stage coercions are applied, the compiler doesn't know that <code>Vec&lt;u8&gt;</code> <em>doesn't</em> implement <code>Read</code>.</p>\n<hr />\n<p>The code in the question will work when the vector is coerced into a slice  using one of the following methods:</p>\n<ul>\n<li><code>read_4_bytes(&amp;*vec_as_file)</code></li>\n<li><code>read_4_bytes(&amp;vec_as_file[..])</code></li>\n<li><code>read_4_bytes(vec_as_file.as_slice())</code>.</li>\n</ul>\n<hr />\n<p>Note:</p>\n<ul>\n<li>When asking the question initially, I was taking <code>&amp;Read</code> instead of <code>Read</code>. This made passing a reference to a slice fail, unless I'd passed in <code>&amp;&amp;*vec_as_file</code> which I didn't think to do.</li>\n<li>Recent versions of rust you can also use <code>as_slice()</code> to convert a Vec to a slice.</li>\n<li><em>Thanks to @arete on <code>#rust</code> for finding the solution!</em></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 760, "user_id": 10795361, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zisK3.png?s=128&g=1", "display_name": "Alexander Fadeev", "link": "https://stackoverflow.com/users/10795361/alexander-fadeev"}, "is_accepted": false, "score": 16, "last_activity_date": 1583675427, "last_edit_date": 1592644375, "creation_date": 1583663431, "answer_id": 60586574, "question_id": 42240663, "link": "https://stackoverflow.com/questions/42240663/how-to-read-stdioread-from-a-vec-or-slice/60586574#60586574", "title": "How to read (std::io::Read) from a Vec or Slice?", "body": "<h1>std::io::Cursor</h1>\n<p><code>std::io::Cursor</code> is a simple and useful wrapper that implements <code>Read</code> for <code>Vec&lt;u8&gt;</code>, so it allows to use vector as a readable entity.</p>\n<pre><code>let mut file = Cursor::new(vector);\n\nread_something(&amp;mut file);\n</code></pre>\n<p>And <a href=\"https://static.rust-lang.org/doc/master/std/io/struct.Cursor.html#examples\" rel=\"noreferrer\">documentation</a> shows how to use <code>Cursor</code> instead of <code>File</code> to write unit-tests!</p>\n<p>Working example:</p>\n<pre><code>use std::io::Cursor;\nuse std::io::Read;\n\nfn read_something(file: &amp;mut impl Read) {\n    let _ = file.read(&amp;mut [0; 8]);\n}\n\nfn main() {\n    let vector = vec![1, 2, 3, 4];\n\n    let mut file = Cursor::new(vector);\n\n    read_something(&amp;mut file);\n}\n</code></pre>\n<p>From the <a href=\"https://static.rust-lang.org/doc/master/std/io/struct.Cursor.html\" rel=\"noreferrer\">documentation</a> about <code>std::io::Cursor</code>:</p>\n<blockquote>\n<p>Cursors are typically used with in-memory buffers to allow them to implement <code>Read</code> and/or <code>Write</code>...</p>\n<p>The standard library implements some I/O traits on various types which are commonly used as a buffer, like <code>Cursor&lt;Vec&lt;u8&gt;&gt;</code> and <code>Cursor&lt;&amp;[u8]&gt;</code>.</p>\n</blockquote>\n<hr />\n<h1>Slice</h1>\n<p>The example above works for <strong>slices</strong> as well. In that case it would look like the following:</p>\n<pre><code>read_something(&amp;mut &amp;vector[..]);\n</code></pre>\n<p>Working example:</p>\n<pre><code>use std::io::Read;\n\nfn read_something(file: &amp;mut impl Read) {\n    let _ = file.read(&amp;mut [0; 8]);\n}\n\nfn main() {\n    let vector = vec![1, 2, 3, 4];\n\n    read_something(&amp;mut &amp;vector[..]);\n}\n</code></pre>\n<p><code>&amp;mut &amp;vector[..]</code> is a &quot;mutable reference to a slice&quot; (a reference to a reference to a part of vector), so I just find the explicit option with <code>Cursor</code> to be more clear and elegant.</p>\n<hr />\n<h1>Cursor &lt;-&gt; Slice</h1>\n<p>Even more: if you have a <code>Cursor</code> that owns a buffer, and you need to emulate, for instance, a part of a &quot;file&quot;, you can get a <code>slice</code> from the <code>Cursor</code> and pass to the function.</p>\n<pre><code>read_something(&amp;mut &amp;file.get_ref()[1..3]);\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 10453, "favorite_count": 3, "accepted_answer_id": 42241174, "answer_count": 2, "score": 20, "last_activity_date": 1614715926, "creation_date": 1487132221, "last_edit_date": 1487168074, "question_id": 42240663, "link": "https://stackoverflow.com/questions/42240663/how-to-read-stdioread-from-a-vec-or-slice", "title": "How to read (std::io::Read) from a Vec or Slice?", "body": "<p><code>Vec</code>s support <code>std::io::Write</code>, so code can be written that takes a <code>File</code> or <code>Vec</code>, for example. From the API reference, it looks like neither <code>Vec</code> nor slices support <code>std::io::Read</code>.</p>\n\n<p>Is there a convenient way to achieve this? Does it require writing a wrapper struct?</p>\n\n<p>Here is an example of working code, that reads and writes a file, with a single line commented that should read a vector.</p>\n\n<pre><code>use ::std::io;\n\n// Generic IO\nfn write_4_bytes&lt;W&gt;(mut file: W) -&gt; Result&lt;usize, io::Error&gt;\n    where W: io::Write,\n{\n    let len = file.write(b\"1234\")?;\n    Ok(len)\n}\n\nfn read_4_bytes&lt;R&gt;(mut file: R) -&gt; Result&lt;[u8; 4], io::Error&gt;\n    where R: io::Read,\n{\n    let mut buf: [u8; 4] = [0; 4];\n    file.read(&amp;mut buf)?;\n    Ok(buf)\n}\n\n// Type specific\n\nfn write_read_vec() {\n    let mut vec_as_file: Vec&lt;u8&gt; = Vec::new();\n\n    {   // Write\n        println!(\"Writing Vec... {}\", write_4_bytes(&amp;mut vec_as_file).unwrap());\n    }\n\n    {   // Read\n//      println!(\"Reading File... {:?}\", read_4_bytes(&amp;vec_as_file).unwrap());\n        //                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        //                               Comment this line above to avoid an error!\n    }\n}\n\nfn write_read_file() {\n    let filepath = \"temp.txt\";\n    {   // Write\n        let mut file_as_file = ::std::fs::File::create(filepath).expect(\"open failed\");\n        println!(\"Writing File... {}\", write_4_bytes(&amp;mut file_as_file).unwrap());\n    }\n\n    {   // Read\n        let mut file_as_file = ::std::fs::File::open(filepath).expect(\"open failed\");\n        println!(\"Reading File... {:?}\", read_4_bytes(&amp;mut file_as_file).unwrap());\n    }\n}\n\nfn main() {\n    write_read_vec();\n    write_read_file();\n}\n</code></pre>\n\n<p>This fails with the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;u8&gt;: std::io::Read` is not satisfied\n  --&gt; src/main.rs:29:42\n   |\n29 |         println!(\"Reading File... {:?}\", read_4_bytes(&amp;vec_as_file).unwrap());\n   |                                          ^^^^^^^^^^^^ the trait `std::io::Read` is not implemented for `std::vec::Vec&lt;u8&gt;`\n   |\n   = note: required by `read_4_bytes`\n</code></pre>\n\n<p>I'd like to write tests for a file format encoder/decoder, without having to write to the file-system.</p>\n"}, {"tags": ["types", "rust", "buffer", "clone", "lines"], "answers": [{"comments": [{"owner": {"reputation": 376, "user_id": 2720307, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xGoEL.jpg?s=128&g=1", "display_name": "Ianlet", "link": "https://stackoverflow.com/users/2720307/ianlet"}, "edited": false, "score": 0, "creation_date": 1487127631, "post_id": 42239642, "comment_id": 71638940, "body": "That makes way more sense, indeed. I was stuck on the idea of cloning the lines because most of the methods of <code>io::Lines</code> are consuming the iterator and I didn&#39;t think <code>collect</code> was adapted to the situation. Thanks!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1494164738, "last_edit_date": 1494164738, "creation_date": 1487125421, "answer_id": 42239642, "question_id": 42239398, "link": "https://stackoverflow.com/questions/42239398/type-mismatch-when-cloning-the-lines-of-the-trait-bufread/42239642#42239642", "title": "Type mismatch when cloning the lines of the trait BufRead", "body": "<p>Review the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"nofollow noreferrer\"><code>Iterator::cloned</code></a> definition:</p>\n\n<pre><code>fn cloned&lt;'a, T&gt;(self) -&gt; Cloned&lt;Self&gt; \n    where Self: Iterator&lt;Item=&amp;'a T&gt;, \n          T: 'a + Clone\n</code></pre>\n\n<p>And the implementation of <code>Iterator</code> for <a href=\"https://doc.rust-lang.org/std/io/struct.Lines.html\" rel=\"nofollow noreferrer\"><code>io::Lines</code></a>: </p>\n\n<pre><code>impl&lt;B: BufRead&gt; Iterator for Lines&lt;B&gt; {\n    type Item = Result&lt;String&gt;;\n}\n</code></pre>\n\n<p>You cannot use <code>cloned</code> because the iterator item is not a reference. You cannot \"tell\" the compiler otherwise; that's not how types work.</p>\n\n<blockquote>\n  <p>As I have to iterate at least two times over the lines of the trait <code>BufRead</code>, I am cloning the lines of my <code>BufRead</code></p>\n</blockquote>\n\n<p>That doesn't really make sense. Cloning the lines of the reader wouldn't save anything. In fact, it would probably just make things <em>worse</em>. You'd be creating the strings once, not using them except for cloning them, then creating them a third time when you iterate again.</p>\n\n<p>If you wish to avoid recreating all the strings, <code>collect</code> all the strings into a <code>Vec</code> or other collection and then iterate over that multiple times:</p>\n\n<pre><code>pub fn analyze&lt;T: BufRead&gt;(document: T) -&gt; Result&lt;DocumentMetadata, ()&gt; {\n    let lines: Result&lt;Vec&lt;_&gt;, _&gt; = document.lines().collect();\n    let lines = lines.unwrap();\n    let language = guess_language(&amp;lines);\n\n    // Do more lexical analysis based on document language\n\n    Ok(DocumentMetadata {\n        language: language,\n        // ...\n    })\n}\n\nfn guess_language&lt;'a, I&gt;(lines: I) -&gt; String \n    where I: IntoIterator&lt;Item = &amp;'a String&gt;,\n{\n    for line in lines {\n        // Try to guess language\n    }\n    \"en\".to_string()\n}\n</code></pre>\n"}], "owner": {"reputation": 376, "user_id": 2720307, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/xGoEL.jpg?s=128&g=1", "display_name": "Ianlet", "link": "https://stackoverflow.com/users/2720307/ianlet"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 195, "favorite_count": 0, "accepted_answer_id": 42239642, "answer_count": 1, "score": 0, "last_activity_date": 1494164738, "creation_date": 1487123486, "last_edit_date": 1487124452, "question_id": 42239398, "link": "https://stackoverflow.com/questions/42239398/type-mismatch-when-cloning-the-lines-of-the-trait-bufread", "title": "Type mismatch when cloning the lines of the trait BufRead", "body": "<p>To get better with Rust, I've decided to implement a simple lexer that analyzes some documents line by line.</p>\n\n<p>As I have to iterate at least two times over the lines of the trait <code>BufRead</code>, I am cloning the lines of my <code>BufRead</code> but I get the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0271]: type mismatch resolving `&lt;std::io::Lines&lt;T&gt; as std::iter::Iterator&gt;::Item == &amp;_`\n  --&gt; &lt;anon&gt;:18:23\n   |\n18 |     let lines = lines.cloned();\n   |                       ^^^^^^ expected enum `std::result::Result`, found reference\n   |\n   = note: expected type `std::result::Result&lt;std::string::String, std::io::Error&gt;`\n   = note:    found type `&amp;_\n\nerror[E0271]: type mismatch resolving `&lt;std::io::Lines&lt;T&gt; as std::iter::Iterator&gt;::Item == &amp;_`\n</code></pre>\n\n<p>I understand what the error is, but based on the <a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Afmt%3A%3AWrite%3B%0Ause%20std%3A%3Aio%3A%3A%7BBufRead%2C%20BufReader%2C%20Lines%2C%20Read%7D%3B%0A%0Apub%20struct%20DocumentMetadata%20%7B%0A%20%20%20%20language%3A%20String%2C%0A%20%20%20%20%2F%2F%20...%0A%7D%0A%0Apub%20fn%20analyze%3CT%3A%20BufRead%3E(document%3A%20T)%20-%3E%20Result%3CDocumentMetadata%2C%20()%3E%20%7B%0A%20%20%20%20let%20lines%20%3D%20document.lines()%3B%0A%20%20%20%20let%20language%20%3D%20guess_language(%26lines)%3B%0A%20%20%20%20%0A%20%20%20%20%2F%2F%20Do%20more%20lexical%20analysis%20based%20on%20document%20language%0A%0A%20%20%20%20Ok(DocumentMetadata%20%7B%0A%20%20%20%20%20%20%20%20language%3A%20language%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20...%0A%20%20%20%20%7D)%0A%7D%0A%0Afn%20guess_language%3CT%3A%20BufRead%3E(lines%3A%20%26Lines%3CT%3E)%20-%3E%20String%20%7B%0A%20%20%20%20let%20lines%20%3D%20lines.cloned()%3B%0A%20%20%20%20for%20line%20in%20lines%20%7B%0A%20%20%20%20%20%20%20%20let%20line%20%3D%20line.unwrap()%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20Try%20to%20guess%20language%0A%20%20%20%20%7D%0A%20%20%20%20%22en%22.to_string()%0A%7D%0A%0A%23%5Btest%5D%0Afn%20it_guesses_document_language()%20%7B%0A%20%20%20%20let%20mut%20document%20%3D%20String%3A%3Anew()%3B%0A%20%20%20%20writeln!(%26mut%20document%2C%20%22%23%20language%3A%20en%22).unwrap()%3B%0A%20%20%20%20let%20document%20%3D%20BufReader%3A%3Anew(document.as_str().as_bytes())%3B%0A%0A%20%20%20%20match%20analyze(document)%20%7B%0A%20%20%20%20%20%20%20%20Ok(metadata)%20%3D%3E%20assert_eq!(%22en%22.to_string()%2C%20metadata.language)%2C%0A%20%20%20%20%20%20%20%20Err(_)%20%3D%3E%20panic!()%2C%0A%20%20%20%20%7D%0A%7D&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">following code</a>, how can I tell the compiler what the <code>Item</code> of the <code>Iterator</code> should be so it can correctly cast the type?</p>\n\n<pre><code>use std::fmt::Write;\nuse std::io::{BufRead, BufReader, Lines, Read};\n\npub struct DocumentMetadata {\n    language: String,\n    // ...\n}\n\npub fn analyze&lt;T: BufRead&gt;(document: T) -&gt; Result&lt;DocumentMetadata, ()&gt; {\n    let lines = document.lines();\n    let language = guess_language(&amp;lines);\n\n    // Do more lexical analysis based on document language\n\n    Ok(DocumentMetadata {\n        language: language,\n        // ...\n    })\n}\n\nfn guess_language&lt;T: BufRead&gt;(lines: &amp;Lines&lt;T&gt;) -&gt; String {\n    let lines = lines.cloned();\n    for line in lines {\n        let line = line.unwrap();\n        // Try to guess language\n    }\n    \"en\".to_string()\n}\n\n#[test]\nfn it_guesses_document_language() {\n    let mut document = String::new();\n    writeln!(&amp;mut document, \"# language: en\").unwrap();\n    let document = BufReader::new(document.as_str().as_bytes());\n\n    match analyze(document) {\n        Ok(metadata) =&gt; assert_eq!(\"en\".to_string(), metadata.language),\n        Err(_) =&gt; panic!(),\n    }\n}\n</code></pre>\n\n<p>For unit testing purpose, I am building a buffer with a <code>String</code> but in a normal usage I read it from a <code>File</code>.</p>\n"}, {"tags": ["x86", "rust", "wrapper", "abi"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487119627, "post_id": 42238878, "comment_id": 71636841, "body": "I don&#39;t know - but just as a sanity check: you decompiled a <i>release</i> build yes?"}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487119679, "post_id": 42238878, "comment_id": 71636861, "body": "No, I am decompiling the debug build"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487122951, "post_id": 42238878, "comment_id": 71637830, "body": "For my own curiosity, what ABI is this and on what platform?"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487123320, "post_id": 42238878, "comment_id": 71637927, "body": "Looks eerily like its jumping back into some shadow space to grab some data which is what the 64-bit Windows ABI specifies.. kinda hard to tell though. @ChaseWalden for my curiosity as well (I haven&#39;t looked into the inner workings of naked functions in Rust) what happens when you don&#39;t embed the function in an implementation of a struct. What if its just a pure function out on its own? I&#39;m wondering whether that &quot;prelude&quot; there is pulling <code>self</code> from somewhere."}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487124144, "post_id": 42238878, "comment_id": 71638106, "body": "@Shepmaster, you are right. it is asm! not asm. I retyped my code in my question rather than copy and paste. It is asm! in my actual code, just a mild typo in my actual question. Also, the ABI is an old package that I wrote to interface with one of my embedded projects. Its not very clean and I haven&#39;t released it since it&#39;s just for one board I made. I am trying to use the ABI I already have implemented as rewriting it would be a lot of refactoring on the board firmware and the interfacing library"}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487124253, "post_id": 42238878, "comment_id": 71638136, "body": "@SimonWhitehead, I suspect you are right about that. I am thinking that it may have something to do with the prelude for self, but I was wondering if there was a way to eliminate it completely."}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "edited": false, "score": 0, "creation_date": 1487126888, "post_id": 42238878, "comment_id": 71638744, "body": "Upon further research, it looks like this may be a bug (or is it a feature?). Not a direct match to this scenario, but similar. Here is the Issue ticket <a href=\"https://github.com/rust-lang/rust/issues/34043\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/34043</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1487152643, "post_id": 42238878, "comment_id": 71650224, "body": "@ChaseWalden: I think you have found your answer, there is no point in naked functions taking arguments, since using those arguments require an agreement on how they are passed (ABI) which is at odds with the <code>naked</code> attribute which specifies not to assume any ABI."}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487194319, "post_id": 42238878, "comment_id": 71678533, "body": "@MatthieuM: I would partially agree on that. It is not necessarily that it doesn&#39;t assume an ABI, just that the pro/epilogue are skipped on code generation. I would suggest reading the naked fn PR, specifically this comment: <a href=\"https://github.com/rust-lang/rfcs/pull/1201#issuecomment-121248070\" rel=\"nofollow noreferrer\">github.com/rust-lang/rfcs/pull/1201#issuecomment-121248070</a>. In other languages, like D, arguments can be passed, it is up to the developer to handle the parameter passing"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487231472, "post_id": 42263232, "comment_id": 71692121, "body": "It may be worth opening an issue for this :)"}, {"owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487520423, "post_id": 42263232, "comment_id": 71811619, "body": "@MatthieuM: Possibly... I am still trying to figure out what the purpose of moving the arguments onto the stack is. I am almost starting to think that what SimonWhitehead in the above comment thread suggested, that the callee is storing the values in &quot;shadow space&quot; which is strange since I am on a Mac"}], "tags": [], "owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "is_accepted": true, "score": 2, "last_activity_date": 1487208604, "creation_date": 1487208604, "answer_id": 42263232, "question_id": 42238878, "link": "https://stackoverflow.com/questions/42238878/why-are-there-extra-asm-instructions-in-a-naked-rust-function/42263232#42263232", "title": "Why are there extra ASM instructions in a naked Rust function?", "body": "<p>After tinkering with this more, (and figuring how to effectively disassemble my release build), I found that the extra instructions are only added during the debug build (or at least when -O0). </p>\n\n<p>When compiling the code with -O2, I found that all of the assembly was inlined, but that is easily fixed with an <code>#[inline(never)]</code> directive. Now the arguments are being passed correctly without the extra instructions ruining my registers :)</p>\n\n<p>Now I just need to have the code only run -O2 on just these functions and not the rest of the debug build...</p>\n"}], "owner": {"reputation": 1122, "user_id": 892584, "user_type": "registered", "accept_rate": 94, "profile_image": "https://www.gravatar.com/avatar/4403f52eda5458b0ce029c80a379a09d?s=128&d=identicon&r=PG", "display_name": "Chase Walden", "link": "https://stackoverflow.com/users/892584/chase-walden"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1013, "favorite_count": 2, "accepted_answer_id": 42263232, "answer_count": 1, "score": 4, "last_activity_date": 1487982452, "creation_date": 1487119522, "last_edit_date": 1487982452, "question_id": 42238878, "link": "https://stackoverflow.com/questions/42238878/why-are-there-extra-asm-instructions-in-a-naked-rust-function", "title": "Why are there extra ASM instructions in a naked Rust function?", "body": "<p>I am wrapping a low level ABI in Rust, taking advantage of the <code>naked</code> function feature. Here is my code and relevant disassembly</p>\n\n<pre><code>#![feature(asm)]\n#![feature(naked_functions)]\n\nstruct MyStruct {\n    someVar: i64, // not important\n                  // ...\n}\n\nimpl MyStruct {\n    #[naked]\n    extern \"C\" fn wrap(&amp;self) {\n        unsafe {\n            asm!(\"NOP\" :::: \"volatile\");\n            // not sure if the volatile option is needed, but I\n            // figured it wouldn't hurt\n        }\n    }\n}\n</code></pre>\n\n<p>Disassembled with LLDB:</p>\n\n<pre><code>ABIWrap`ABIWrap::{{impl}}::wrap:\n  * 0x100001310 &lt;+0&gt;:  movq   %rdi, -0x10(%rbp)\n  * 0x100001314 &lt;+4&gt;:  movq   %rsi, -0x8(%rbp)\n  * 0x100001318 &lt;+8&gt;:  movq   -0x10(%rbp), %rax\n  * 0x10000131c &lt;+12&gt;: movq   -0x8(%rbp), %rcx\n  * 0x100001320 &lt;+16&gt;: movq   %rax, -0x20(%rbp)\n  * 0x100001324 &lt;+20&gt;: movq   %rcx, -0x18(%rbp)\n    0x100001328 &lt;+24&gt;: nop    \n    0x100001329 &lt;+25&gt;: retq   \n    0x10000132a &lt;+26&gt;: nopw   (%rax,%rax)\n</code></pre>\n\n<p>The 6 lines preceding the NOP (I've marked with <code>*</code>) are what I am confused by. Shouldn't the <code>naked</code> directive leave, for lack of a better term, a naked function?</p>\n\n<p>I am attempting to allow the arguments to just pass through this function to the ABI as it follows roughly the same calling convention as Rust, I just need to swap one or two of the registers, hence the inline assembly. </p>\n\n<p>Is there a way to get rid of these 6 preceding instructions? I am calling against the ABI a lot and the previous way I was calling against it was causing a decent amount of overhead. I want to make sure that the registers containing any important values aren't overwritten. </p>\n\n<p>Side note: is the \"volatile\" option needed? I wasn't sure but added it anyways.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1487107575, "post_id": 42236166, "comment_id": 71632493, "body": "I know you&#39;ve just tried to create a small example.. but the trait usage here is pretty useless. Turning your example on its head slightly, I <a href=\"https://play.rust-lang.org/?gist=2ae7e995af81de014bd8a59971021649&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">have seen this technique used in a few codebases</a>."}, {"owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487108779, "post_id": 42236166, "comment_id": 71633072, "body": "@SimonWhitehead I&#39;m not sure what your code is supposed to achieve. It does not accept a different number of arguments at all and for some reason it creates a second type instead of the enum."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1487108949, "post_id": 42236166, "comment_id": 71633146, "body": "The purpose is to demonstrate the <i>use of an enum</i> as a way to &quot;overload&quot; the function. You can use an enum variant to pass different numbers of arguments into the function. So it flips your example on its head by using an enum as the mechanism to &quot;overload&quot; - I just used a struct as an example to highlight that the enum in my example is the main part."}], "answers": [{"comments": [{"owner": {"reputation": 8325, "user_id": 1350209, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bd2f0eb2365d2a1fcd6f4eb4d40366b1?s=128&d=identicon&r=PG", "display_name": "Cole Johnson", "link": "https://stackoverflow.com/users/1350209/cole-johnson"}, "edited": false, "score": 3, "creation_date": 1590514987, "post_id": 42237778, "comment_id": 109706536, "body": "404 on the link"}], "tags": [], "owner": {"reputation": 13635, "user_id": 547365, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/ddefbca930fdd39846b698bab7ac3146?s=128&d=identicon&r=PG", "display_name": "w.brian", "link": "https://stackoverflow.com/users/547365/w-brian"}, "is_accepted": false, "score": 11, "last_activity_date": 1487113666, "last_edit_date": 1487113666, "creation_date": 1487113077, "answer_id": 42237778, "question_id": 42236166, "link": "https://stackoverflow.com/questions/42236166/is-it-possible-to-overload-a-function-with-different-numbers-of-arguments-using/42237778#42237778", "title": "Is it possible to overload a function with different numbers of arguments (using traits)", "body": "<p>It is <em>technically</em> possible, but not in a way that's practical. You need to use Rust's <a href=\"https://doc.rust-lang.org/book/ufcs.html\">Universal Function Call Syntax</a> in order for it to disambiguate the calls to <code>new</code>. </p>\n\n<pre><code>fn main() {\n    let x = &lt;MixedInts as __Constructor1&lt;i32&gt;&gt;::new(2i32);\n    let y = &lt;MixedInts as __Constructor2&lt;i32, i32&gt;&gt;::new(2i32, 2i32);\n}\n</code></pre>\n\n<p>The Iron framework has an interesting <a href=\"http://ironframework.io/doc/modifier/trait.Modifier.html\">Modifier pattern</a> that I <em>think</em> accomplishes what you want. While it's pretty clever, it's ultimately confusing to the user.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487151768, "post_id": 42238787, "comment_id": 71649562, "body": "Note: Rust does support overloading via traits; it seems less practical than using Into/From, but it is supported."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 12, "last_activity_date": 1487118917, "creation_date": 1487118917, "answer_id": 42238787, "question_id": 42236166, "link": "https://stackoverflow.com/questions/42236166/is-it-possible-to-overload-a-function-with-different-numbers-of-arguments-using/42238787#42238787", "title": "Is it possible to overload a function with different numbers of arguments (using traits)", "body": "<p>Rust doesn't support overloaded functions/methods. As a workaround, you can use tuples to receive multiple values in a single argument. You can then define a trait and implement it for the admissible types of that single argument, and the function will simply delegate to the trait's implementation.</p>\n\n<pre><code>enum MixedInts {\n    SmallInt(i32),\n    TwoSmallInts(i32, i32),\n}\n\ntrait IntoMixedInts {\n    fn into(self) -&gt; MixedInts;\n}\n\nimpl MixedInts {\n    fn new&lt;A&gt;(args: A) -&gt; MixedInts\n        where A: IntoMixedInts\n    {\n        args.into()\n    }\n}\n\nimpl IntoMixedInts for i32 {\n    fn into(self) -&gt; MixedInts {\n        MixedInts::SmallInt(self)\n    }\n}\n\nimpl IntoMixedInts for (i32, i32) {\n    fn into(self) -&gt; MixedInts {\n        MixedInts::TwoSmallInts(self.0, self.1)\n    }\n}\n\nfn main() {\n    let x = MixedInts::new(2i32);\n    let y = MixedInts::new((2i32, 2i32));\n}\n</code></pre>\n\n<p><strong>Note:</strong> In this example, you could use the standard <code>From</code> and <code>Into</code> traits instead of defining your own trait. It might not work for other traits, though, due to the coherence rules (the rules that ensure that there can only exist one implementation of a certain trait for a certain type).</p>\n\n<pre><code>enum MixedInts {\n    SmallInt(i32),\n    TwoSmallInts(i32, i32),\n}\n\nimpl MixedInts {\n    fn new&lt;A&gt;(args: A) -&gt; MixedInts\n        where A: Into&lt;MixedInts&gt;\n    {\n        args.into()\n    }\n}\n\nimpl From&lt;i32&gt; for MixedInts {\n    fn from(a: i32) -&gt; MixedInts {\n        MixedInts::SmallInt(a)\n    }\n}\n\nimpl From&lt;(i32, i32)&gt; for MixedInts {\n    fn from((a, b): (i32, i32)) -&gt; MixedInts {\n        MixedInts::TwoSmallInts(a, b)\n    }\n}\n\nfn main() {\n    let x = MixedInts::new(2i32);\n    let y = MixedInts::new((2i32, 2i32));\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487263626, "post_id": 42278050, "comment_id": 71716389, "body": "Could you clarify how this differs from <a href=\"http://stackoverflow.com/a/42238787/155423\">the existing answer that suggests using <code>From</code> and <code>Into</code></a>?"}, {"owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487270665, "post_id": 42278050, "comment_id": 71720920, "body": "The only difference is that I replaced the code inside main to make use of the From/Into implementations."}], "tags": [], "owner": {"reputation": 1686, "user_id": 1217063, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/xRgTZ.jpg?s=128&g=1", "display_name": "ampron", "link": "https://stackoverflow.com/users/1217063/ampron"}, "is_accepted": false, "score": 0, "last_activity_date": 1487263568, "last_edit_date": 1487263568, "creation_date": 1487258642, "answer_id": 42278050, "question_id": 42236166, "link": "https://stackoverflow.com/questions/42236166/is-it-possible-to-overload-a-function-with-different-numbers-of-arguments-using/42278050#42278050", "title": "Is it possible to overload a function with different numbers of arguments (using traits)", "body": "<p>I would suggest making use of the <code>From</code>/<code>Into</code> traits in the standard library.</p>\n\n<pre><code>#[derive(PartialEq, Eq, Debug)]\nenum MixedInts {\n    SmallInt(i32),\n    TwoSmallInts(i32, i32),\n}\n\nimpl From&lt;i32&gt; for MixedInts {\n    fn from(n: i32) -&gt; Self {\n        MixedInts::SmallInt(n)\n    }\n}\n\nimpl From&lt;(i32, i32)&gt; for MixedInts {\n    fn from((a, b): (i32, i32)) -&gt; Self {\n        MixedInts::TwoSmallInts(a, b)\n    }\n}\n\nfn main() {\n    let x: MixedInts = 2_i32.into();\n    assert_eq!(x, MixedInts::SmallInt(2));\n\n    let y: MixedInts = (2_i32, 2_i32).into();\n    assert_eq!(y, MixedInts::TwoSmallInts(2, 2));\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=9b5994910cb82da84f892f69d26caacf&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\" title=\"example on Rust Playground\">example on Rust Playground</a></p>\n"}], "owner": {"reputation": 2159, "user_id": 2570866, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/719063be2f6f7ca6be51df7833a26c25?s=128&d=identicon&r=PG", "display_name": "JelteF", "link": "https://stackoverflow.com/users/2570866/jeltef"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 6526, "favorite_count": 3, "answer_count": 3, "score": 6, "last_activity_date": 1487263568, "creation_date": 1487106199, "last_edit_date": 1487123010, "question_id": 42236166, "link": "https://stackoverflow.com/questions/42236166/is-it-possible-to-overload-a-function-with-different-numbers-of-arguments-using", "title": "Is it possible to overload a function with different numbers of arguments (using traits)", "body": "<p>I'm trying to have a <code>new</code> constructor with one and with two arguments, but I can't seem to figure out how to do this. Is this even possible at the moment?</p>\n\n<p>What I have now gives me an error that multiple applicable items are in scope (<a href=\"https://play.rust-lang.org/?gist=4a7c13ebcd73abfcebdc5eaaf40d9ad0&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">playground</a>)</p>\n\n<pre><code>trait __Constructor1&lt;T&gt; {\n    fn new(T) -&gt; Self;\n}\ntrait __Constructor2&lt;T, U&gt; {\n    fn new(T, U) -&gt; Self;\n}\n\nenum MixedInts {\n    SmallInt(i32),\n    TwoSmallInts(i32, i32),\n}\n\nimpl __Constructor1&lt;i32&gt; for MixedInts {\n    fn new(__0: i32) -&gt; MixedInts {\n        MixedInts::SmallInt(__0)\n    }\n}\nimpl __Constructor2&lt;i32, i32&gt; for MixedInts {\n    fn new(__0: i32, __1: i32) -&gt; MixedInts {\n        MixedInts::TwoSmallInts(__0, __1)\n    }\n}\n\nfn main() {\n    let x = MixedInts::new(2i32);\n    let y = MixedInts::new(2i32, 2i32);\n}\n</code></pre>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1487107833, "post_id": 42235980, "comment_id": 71632625, "body": "I&#39;m not sure if this will work given its calling out to a C lib .. so I&#39;ll leave it as a comment. You can <a href=\"http://play.integer32.com/?gist=73690b49554593f652e397f29b447a90&amp;version=stable\" rel=\"nofollow noreferrer\">try letting the compiler infer the types .. but you need to cast the value to a pointer (not a reference)</a>"}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1487222591, "post_id": 42235980, "comment_id": 71687926, "body": "@SimonWhitehead this worked! Care to write that into an answer? Matthieu&#39;s answer is probably how it <i>should</i> be done (giving the ownership over to C and then take it back) but your answer is a good alternative IMO"}, {"owner": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 0, "creation_date": 1536286839, "post_id": 42235980, "comment_id": 91378113, "body": "@SimonWhitehead Your answer seems gone :("}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 1733, "user_id": 1460102, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/e70df89ccf5e5509e4aae9ef4ed5b865?s=128&d=identicon&r=PG", "display_name": "xxks-kkk", "link": "https://stackoverflow.com/users/1460102/xxks-kkk"}, "edited": false, "score": 0, "creation_date": 1536287841, "post_id": 42235980, "comment_id": 91378281, "body": "@zack I never wrote it as an answer in the end! The answers here are suitable :)"}], "answers": [{"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1487136963, "post_id": 42236728, "comment_id": 71641526, "body": "IMO the memory where the pointer points to needs already be allocated (I have this wrong in my example above, I guess it needs to be <code>std::mem::zeroed()</code>). From the man page of <code>pthread_join</code>: &quot;On return from a successful pthread_join() call with a non-NULL value_ptr argument, the value passed to pthread_exit() by the terminating thread is stored in the location referenced by value_ptr&quot;"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1487178299, "post_id": 42236728, "comment_id": 71669176, "body": "@hansaplast You only need to allocate the storage for pointer-to-pointer. What memory the pointer you obtain that way will point to is anyone&#39;s guess. It is not even required to be a valid address - for example, if the thread is canceled, <code>result_ptr</code> will contain <code>libc::PTHREAD_CANCELED</code> (on Linux)."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1487223124, "post_id": 42236728, "comment_id": 71688116, "body": "Aha, <code>libc::PTHREAD_CANCELED</code> is written into the location where the first pointer points to, so it is no longer a pointer-to-pointer then. But what about the other scenario when the thread passes a value to <code>pthread_exit</code>? Isn&#39;t that value copied to the location the pointer-to-pointer points to? That at least how I understand the explanation in the man page"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 2, "creation_date": 1487313311, "post_id": 42236728, "comment_id": 71737645, "body": "@hansaplast It is true that the &quot;value&quot; is copied - but that &quot;value&quot; is simply the value of the pointer itself, i.e. the address. (More precisely, it&#39;s a pointer-sized integer which may or may not contain an actual dereferencable address - it can e.g. also be NULL.) The standard doesn&#39;t specify whether this pointer points to heap-allocated data, or to static-allocated data, or whether it points to anything at all (in case it&#39;s NULL or an arbitrary integer cast to <code>void *</code>). That is entirely a matter of contract between the code that calls <code>pthread_exit</code> and the code that calls <code>pthread_join</code>."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1487332487, "post_id": 42236728, "comment_id": 71749244, "body": "I&#39;ve now noticed that as initially written, the code in the answer had the incorrect type for <code>result_ptr</code>, which should be <code>*mut c_void</code> and not just <code>c_void</code>. I&#39;ve now corrected it (and tested it to compile), which hopefully eliminated some of the confusion."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1487410505, "post_id": 42236728, "comment_id": 71780869, "body": "thanks for the edit. And indeed when the thread puts a stack allocated struct into <code>pthread_exit</code> it&#39;s no longer there when I try to access it over <code>pthread_join</code> (it&#39;s actually segfaulting). I guess the explanation in the man page is a bit misleading in this case"}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1487430065, "post_id": 42236728, "comment_id": 71786853, "body": "@hansaplast A stack-allocated struct can&#39;t work because a stack is per-thread, so exiting a thread destroys its stack. The man page is correct, as long as you understand that the &quot;value&quot; being copied is simply the pointer supplied to <code>pthread_exit</code>. If you take into account that C has no concept of a copy constructor, and that the library function such as <code>pthread_exit</code> doesn&#39;t know the size of the structure passed to it, it&#39;s clear that a more involved copying of the data is out of the question."}, {"owner": {"reputation": 6509, "user_id": 356011, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/d17ff41be1044be6fb5ef186b83efb20?s=128&d=identicon&r=PG", "display_name": "marathon", "link": "https://stackoverflow.com/users/356011/marathon"}, "edited": false, "score": 0, "creation_date": 1511803272, "post_id": 42236728, "comment_id": 81988897, "body": "the rust code no longer compiles:  <code>error[E0605]: non-primitive cast: </code>*mut libc::c_void` as `&amp;mut ThreadResult``"}], "tags": [], "owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "is_accepted": false, "score": 5, "last_activity_date": 1511907541, "last_edit_date": 1511907541, "creation_date": 1487108336, "answer_id": 42236728, "question_id": 42235980, "link": "https://stackoverflow.com/questions/42235980/create-mut-mut-to-a-struct/42236728#42236728", "title": "Create *mut *mut to a struct", "body": "<p>The code can't work as written; that is because the C thread doesn't really \"fill in the struct\" in the memory you point to. It is responsible for allocating its own memory (or receiving it from another thread beforehand) and filling it out. The only thing the C thread \"returns\" is a single <em>address</em>, and this address is picked up by <code>pthread_join</code>.</p>\n\n<p>This is why <code>pthread_join</code> receives a <code>void **</code>, i.e. the pointer to a <code>void *</code>. That kind of <em>output parameter</em> enables <code>pthread_join</code> to store (return) the <code>void *</code> pointer provided by the freshly finished thread. The thread can provide the pointer either by passing it to <code>pthread_exit</code> or by returning it from the <code>start_routine</code> passed to <code>pthread_create</code>. In Rust, the raw pointer can be received with code like this:</p>\n\n<pre><code>let mut c_result: *mut libc::c_void = ptr::null_mut();\nlibc::pthread_join(tid1, &amp;mut c_result as *mut _);\n// C_RESULT now contains the raw pointer returned by the worker's\n// start routine, or passed to pthread_exit()\n</code></pre>\n\n<p>The contents and size of the memory that the returned pointer points to are a matter of contract between the thread being joined and the thread that is joining it. If the worker thread is implemented in C and designed to be invoked by other C code, then an obvious choice is for it to allocate memory for a result structure, fill it out, and provide a pointer to allocated memory. For example:</p>\n\n<pre><code>struct ThreadResult { ... };\n\n...\nThreadResult *result = malloc(sizeof(struct ThreadResult));\nresult-&gt;field1 = value1;\n...\npthread_exit(result);\n</code></pre>\n\n<p>In that case your Rust code that joins the thread can interpret the result by replicating the C structure and picking up its ownership:</p>\n\n<pre><code>// obtain a raw-pointer c_result through pthread_join as \n// shown above:\nlet mut c_result = ...;\nlibc::pthread_join(tid1, &amp;mut c_result as *mut _);\n\n#[repr(C)]\nstruct ThreadResult { ... } // fields copy-pasted from C\n\nunsafe {\n    // convert the raw pointer to a Rust reference, so that we may\n    // inspect its contents\n    let result = &amp;mut *(c_result as *mut ThreadResult);\n\n    // ... inspect result.field1, etc ...\n\n    // free the memory allocated in the thread\n    libc::free(c_result);\n    // RESULT is no longer usable\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1487162496, "post_id": 42248165, "comment_id": 71657316, "body": "What do you mean with &quot;leaking memory&quot;? And: isn&#39;t the <code>Box::new</code> immediately dropped after finishing the <code>into_raw</code> part and causing a dangling pointer?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 1, "creation_date": 1487162608, "post_id": 42248165, "comment_id": 71657400, "body": "@hansaplast: If this was the case, what would be the point of <code>into_raw</code>? Have you read the documentation I linked to? It explains exactly the function behavior."}, {"owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1487162906, "post_id": 42248165, "comment_id": 71657619, "body": "I did not see the link. Thanks a lot for the documentation, that answers my question above. I <i>will</i> shove it back into a box, but what would happen if I didn&#39;t? Isn&#39;t the memory freed when main ends and p is dropped?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 2, "creation_date": 1487163189, "post_id": 42248165, "comment_id": 71657794, "body": "@hansaplast: <code>p</code> is a raw pointer, and raw pointers don&#39;t express ownership (or lack of). Rust doesn&#39;t know whether <code>sample</code> is now responsible for deleting the memory or not, so it won&#39;t do anything. If you don&#39;t shove it into a <code>Box</code>, it will leak. Note that leaking is safe, and in small quantities is harmless (in really large quantities, you&#39;ll have issues, however the D or Clang compilers for example do not release their memory to be faster)."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "reply_to_user": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "edited": false, "score": 0, "creation_date": 1511814781, "post_id": 42248165, "comment_id": 81994903, "body": "Applied to @hansaplast&#39;s problem, this solution leaks memory regardless, since the pointer returned by <code>into_raw</code> is unconditionally <b>overwritten</b> by <code>pthread_join</code>, so the original <code>Box</code> is lost entirely. If you <i>do</i> turn the (new) value of <code>p</code> back into a (new) <code>Box</code>, unless it came from Rust in the first place (which seems unlikely since you&#39;re calling out to C to obtain it), it could crash or corrupt the allocator when it&#39;s eventually dropped."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1511854148, "post_id": 42248165, "comment_id": 82008070, "body": "@trentcl: Indeed; for <code>pthread_join</code> there is no need to allocate anything before passing the pointer."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 5, "last_activity_date": 1487158300, "creation_date": 1487158300, "answer_id": 42248165, "question_id": 42235980, "link": "https://stackoverflow.com/questions/42235980/create-mut-mut-to-a-struct/42248165#42248165", "title": "Create *mut *mut to a struct", "body": "<p>There are several issues here:</p>\n\n<ul>\n<li><code>Box</code> is a pointer to a heap-allocated resource, you can extract the pointer itself using <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.into_raw\" rel=\"noreferrer\"><code>Box::into_raw(some_box)</code></a>,</li>\n<li>References are not silently coerced into pointers (even though they have the same representation), you need an explicit cast,</li>\n<li>You need to cast from your concrete type to <code>c_void</code>, type inference may be able to do that</li>\n<li>You have a reference to a reference to a pointer, you need a pointer to a pointer; you have one too many levels of indirection.</li>\n</ul>\n\n<p>Let's make it work:</p>\n\n<pre><code>// pthread interface, reduced\nstruct Void;\n\nfn sample(_: *mut *mut Void) {}\n\n// actual code\nstruct Foo {}\n\nfn main() {\n    let mut p = Box::into_raw(Box::new(Foo{})) as *mut Void;\n    sample(&amp;mut p as *mut _);\n}\n</code></pre>\n\n<p>Note that this is leaking memory (as a result of <code>into_raw</code>), normally the memory should be shoved back into a <code>Box</code> with <code>from_raw</code> for the destructor of <code>Foo</code> to be called and the memory to be freed.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1996, "favorite_count": 1, "accepted_answer_id": 42248165, "answer_count": 2, "score": 7, "last_activity_date": 1511907541, "creation_date": 1487105554, "last_edit_date": 1487222748, "question_id": 42235980, "link": "https://stackoverflow.com/questions/42235980/create-mut-mut-to-a-struct", "title": "Create *mut *mut to a struct", "body": "<p>I'm trying to call <code>pthread_join</code> with a pointer to my struct in order that the C thread can fill in the struct to the memory I point it to. (Yes, I'm aware that this is highly unsafe..)</p>\n\n<p>The function signature of <code>pthread_join</code>:</p>\n\n<pre><code>pub unsafe extern fn pthread_join(native: pthread_t,\n                                  value: *mut *mut c_void)\n                                  -&gt; c_int\n</code></pre>\n\n<p>I'm doing this as an exercise of porting C code from a book to Rust. The C code:</p>\n\n<pre><code>pthread_t   tid1;\nstruct foo  *fp;\nerr = pthread_create(&amp;tid1, NULL, thr_fn1, NULL);\nerr = pthread_join(tid1, (void *)&amp;fp);\n</code></pre>\n\n<p>I came up with this code:</p>\n\n<pre><code>extern crate libc;\nuse libc::{pthread_t, pthread_join};\n\nstruct Foo {}\n\nfn main() {\n    let tid1:pthread_t = std::mem::uninitialized();\n    let mut fp:Box&lt;Foo&gt; = std::mem::uninitialized();\n    let value = &amp;mut fp;\n    pthread_join(tid1, &amp;mut value);\n}\n</code></pre>\n\n<p>But the error I see is:</p>\n\n<pre><code>error[E0308]: mismatched types\n  --&gt; src/bin/11-threads/f04-bogus-pthread-exit.rs:51:24\n   |\n51 |     pthread_join(tid1, &amp;mut value);\n   |                        ^^^^^^^^^^ expected *-ptr, found mutable reference\n   |\n   = note: expected type `*mut *mut libc::c_void`\n              found type `&amp;mut &amp;mut std::boxed::Box&lt;Foo&gt;`\n</code></pre>\n\n<p>Is it even possible to achieve this just using casts, or do I need to transmute?</p>\n"}, {"tags": ["rust"], "owner": {"reputation": 5913, "user_id": 1244932, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/d2c608e688b798896e8b516855fc1ab1?s=128&d=identicon&r=PG", "display_name": "user1244932", "link": "https://stackoverflow.com/users/1244932/user1244932"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 31, "favorite_count": 0, "closed_date": 1487104868, "answer_count": 0, "score": 2, "last_activity_date": 1487103107, "creation_date": 1487103107, "question_id": 42235334, "link": "https://stackoverflow.com/questions/42235334/why-function-reference-not-live-enough", "closed_reason": "Duplicate", "title": "why function reference not live enough?", "body": "<p>I want to make optional reference to function,\nand try this:   </p>\n\n<pre><code>struct Foo {\n    cb: Option&lt;&amp;'static Fn(u32)-&gt;u32&gt;,\n}\n\nfn f1(a: u32) -&gt; u32 { a }\n\nfn main() {\n    let foo = Foo{cb: Some(&amp;f1)};\n}\n</code></pre>\n\n<p>but compiler report error <code>borrowed value does not live long enough</code>, so question:</p>\n\n<ol>\n<li>Why <code>f1</code> not live long enough?</li>\n<li>How should I fix this code?</li>\n</ol>\n"}, {"tags": ["types", "binary", "rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 5, "creation_date": 1487095790, "post_id": 42232864, "comment_id": 71626072, "body": "What is a binary integer type? You could say ALL numbers in Rust are binary (except perhaps BigNum), since the bit length is a distinguishing factor between them (x{8,16,32,64} where x is one of i,u). But what would a binary number have that is different to any other n-ary number?"}, {"owner": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 1, "creation_date": 1487095817, "post_id": 42232864, "comment_id": 71626092, "body": "bool is a binary type. I&#39;m not really sure what you mean with this question."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1487096183, "post_id": 42232864, "comment_id": 71626306, "body": "Perhaps you could show us what having a &quot;binary numeric type&quot; would allow?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 1540, "user_id": 2606171, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/F4ncy.png?s=128&g=1", "display_name": "belst", "link": "https://stackoverflow.com/users/2606171/belst"}, "edited": false, "score": 0, "creation_date": 1487096209, "post_id": 42232864, "comment_id": 71626329, "body": "@belst I added a &#39;numeric&#39; qualifier to my question"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 5, "creation_date": 1487096445, "post_id": 42232864, "comment_id": 71626451, "body": "Downvotes here also mean &quot;it is unclear or not useful&quot;. I&#39;m pretty sure that&#39;s the majority of your downvotes: people who have <i>no idea</i> what it is you are trying to ask."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487096466, "post_id": 42232864, "comment_id": 71626463, "body": "@Shepmaster Honestly, I sort of resent the idea that I have to justify a question about &quot;why wasn&#39;t this feature included&quot; by arguing on behalf of the feature. Plenty of languages handle binary numbers in a way that enables properties afforded by their base-2 representation to be used directly in a way that is transparent to the programmer. That seems <i>exactly</i> like something a type system would be best at setting out."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1487096490, "post_id": 42232864, "comment_id": 71626477, "body": "..Wait, do you mean <b>binary literals</b>? Something like 0b0101010?"}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1487096635, "post_id": 42232864, "comment_id": 71626558, "body": "Like Verilog? Where you can treat an integer as a bit vector?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 9, "creation_date": 1487096687, "post_id": 42232864, "comment_id": 71626586, "body": "I&#39;m not asking you to justify, I&#39;m saying <b>I have no idea what you are asking</b>... And you haven&#39;t clarified the question yet. As @Kroltan mentioned, a <code>u8</code> <i>is</i> a binary numeric type! It&#39;s a number, it&#39;s represented as binary, you can do bitwise manipulation on it, you can declare it with a specific bit pattern. The problem is that you&#39;ve mentioned all of that already, but are asking about something else that you haven&#39;t defined for us! Give us an example of another language handling it in the way you want, give us <i>something</i>, <i>anything</i>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 0, "creation_date": 1487096723, "post_id": 42232864, "comment_id": 71626611, "body": "@E_net4 OP cannot mean that, the <i>very first</i> thing they state is &quot;Rust has binary literals&quot;. Since they already know about it, they wouldn&#39;t be asking about it."}, {"owner": {"reputation": 328, "user_id": 3880958, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/95963a44712b973e2fd7766baa419478?s=128&d=identicon&r=PG", "display_name": "wdv4758h", "link": "https://stackoverflow.com/users/3880958/wdv4758h"}, "edited": false, "score": 1, "creation_date": 1487097006, "post_id": 42232864, "comment_id": 71626744, "body": "random guess, binary support in Erlang ?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 5, "creation_date": 1487097555, "post_id": 42232864, "comment_id": 71627058, "body": "Could you explain the difference between <code>b8</code> and <code>u8</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1487097566, "post_id": 42232864, "comment_id": 71627064, "body": "That last edit was useful, but please keep going. One thing you could add would be examples of what &quot;the appropriate mathematical operations in its field&quot; would be."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487098332, "post_id": 42232864, "comment_id": 71627444, "body": "Are you asking essentially the same question as <a href=\"http://stackoverflow.com/q/27673674/155423\">Data type that only takes on a range of values</a>, but restricted to powers-of-two instead of arbitrary integers?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487098968, "post_id": 42232864, "comment_id": 71627775, "body": "@Shepmaster That question seems to be asking about the syntax of defining integers in a finite field, but my question is about why there are no implementations in Rust that allow binary numbers of specific length to be handled in roughly the same way as any other numeric type, e.g., with the operations a programmer would expect a numeric type to have. Right now, if you want to get into binary math in Rust, you go right back to C-like bit-twiddling, syntactically speaking."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487101522, "post_id": 42232864, "comment_id": 71629200, "body": "@MatthieuM. I added a paragraph about u8 and b8. Hope it helps."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1487102099, "post_id": 42232864, "comment_id": 71629528, "body": "<i>there&#39;s no way to make the direct statement <code>0000 0101</code> + <code>0000 0111</code></i>, and I&#39;m confused yet again. Why is <code>b0000_0101 + b0000_0111</code> not sufficient?"}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487102390, "post_id": 42232864, "comment_id": 71629694, "body": "@Shepmaster I think we&#39;re straying back into &quot;arguing for/against a feature&quot;, which I wanted to avoid. I think that&#39;s a strange extra requirement for the programmer to have to remember, which seems more appropriate for a dynamically typed language like Python, than a statically typed language like Rust. The result of that statement is a <code>u8</code>, right? The <code>b</code> and underscore there are equal syntactic effort in reading and writing as a type literal like <code>3_f64</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1487102870, "post_id": 42232864, "comment_id": 71629910, "body": "I truly apologize because I feel like you and I are simply not speaking the same language. Just to be clear, that <a href=\"http://play.integer32.com/?gist=3fc8fdee67389a9397dbdb0eca492fed&amp;version=stable\" rel=\"nofollow noreferrer\">code works today</a> (except for the typo I made in the literal syntax). The result can be any of the existing integral types. Are you asking for the ability to type <i>literally</i> <code>110</code> and have it be parsed as binary? Note that the base prefix and the size of the type are orthogonal; you can write <code>0x32u8</code> or <code>0o777i6</code> or <code>0b1001010u64</code>. The underscore is required due to parsing."}, {"owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487103262, "post_id": 42232864, "comment_id": 71630119, "body": "Let us <a href=\"http://chat.stackoverflow.com/rooms/135716/discussion-between-bright-star-and-shepmaster\">continue this discussion in chat</a>."}], "answers": [{"tags": [], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "is_accepted": true, "score": 2, "last_activity_date": 1488472934, "last_edit_date": 1488472934, "creation_date": 1488428961, "answer_id": 42546896, "question_id": 42232864, "link": "https://stackoverflow.com/questions/42232864/why-is-there-no-arbitrary-sized-binary-integer-type-in-rust/42546896#42546896", "title": "Why is there no arbitrary-sized binary integer type in Rust?", "body": "<p>In good faith, and perhaps so we can all agree nobody here is crazy (?), I <a href=\"https://crates.io/crates/finite-fields\" rel=\"nofollow noreferrer\">implemented a crate</a> that is an attempt at capturing the semantics of finite fields in Rust independent of the underlying expectations of the language or hardware. I have to warn you that it is neither rigorously tested nor efficiently implemented, but it compiles and so does its examples.</p>\n\n<p>It offers the following semantics:</p>\n\n<ul>\n<li><p>If you can think of a finite field as either a set of coefficients of a restricted polynomial, or as a vector of p-adic numbers, you can define a type that will store the coefficients as a vector that quacks like a number. For example, a field of two-digit binary numbers can be generated with the following macro:</p>\n\n<pre><code>#![allow(non_camel_case_types)]\n#[macro_use] extern crate finite_fields;\n\nbinary_type! { b2, 2 }\n</code></pre>\n\n<p>That macro expands into the implementation of a newtype struct carrying an array:</p>\n\n<pre><code>/// A binary number ($fieldwidth digits).\n#[derive(Clone, Copy, PartialEq)]\npub struct $tyname([b1; $fieldwidth]);\n\nimpl $tyname {\n  pub fn new(vals: [b1; $fieldwidth]) -&gt; $tyname {\n    $tyname(vals)\n  }\n} // ...\n</code></pre></li>\n<li><p>The types defined admit the usual arithmetic operations with overflow errors on saturation and divide by zero errors. Specifically, I implemented <code>Ordering</code>, <code>Add</code>, <code>Sub</code>, <code>Mul</code>, <code>Div</code>, <code>BitXor</code>, <code>Index</code>, and <code>IndexMut</code> on \"unit\" n-ary types in macros, and then used those as the digits of larger macro-generated n-ary numbers.</p>\n\n<pre><code>/// Arithmetic addition with overflow error.\nimpl Add for $tyname {\n  type Output = Result&lt;$tyname, OverflowError&gt;;\n  fn add(self, other: $tyname) -&gt; Result&lt;$tyname, OverflowError&gt; {\n    let sum = self.0 + other.0;\n    if sum &gt; $arity - 1 {\n      Err(OverflowError::Default { arg1: self.to_string(),\n                                   arg2: other.to_string() })\n    } else {\n      Ok($tyname(sum as $storsize))\n    }\n  }\n}\n</code></pre></li>\n<li><p>Finite fields of any arity can be defined, but the storage type has to be specified by the user to meet with the standard types used by Rust:</p>\n\n<pre><code>/// Creates a ternary type named `t2`, with a unit type named `t1`, storing each\n/// digit in a `u8`, with two digits.\nnary_type! { t2, t1, 3, u8, 2 }\n</code></pre>\n\n<p>This was the locus of my confusion. The answer as shown by this crate's implementation is that yes, you <em>can</em> raise arbitrary finite field semantics to the level of \"natural\" (i.e., base-10, base-2, base-8, and base-16) numeric fields embedded into the language and hardware (i.e., you can pretend they're regular numeric types and get the Rustic checks you expect, if you believe newtypes are types), but you still need to pay the piper in the form of storage overhead (and probably incurable calculation inefficiency). I don't think I'm alone in being caught up short by that ontological fault line between discrete math and applied CS, but I'm not sure it matters any more.</p></li>\n<li><p>At any rate, you can do totally goofy things with the same basic macros, like work in base-7:</p>\n\n<pre><code>/// Creates a septary type named `s3`, with a unit type named `s1`, each digit\n/// stored in a `u8`, with three digits.\nnary_type! { s3, s1, 7, u8, 3 }\n</code></pre></li>\n</ul>\n\n<p>Hooray. Let's all get drunk and forget the whole thing happened.</p>\n"}], "owner": {"reputation": 5006, "user_id": 2023432, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/89ZPT.png?s=128&g=1", "display_name": "bright-star", "link": "https://stackoverflow.com/users/2023432/bright-star"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1242, "favorite_count": 0, "accepted_answer_id": 42546896, "answer_count": 1, "score": 2, "last_activity_date": 1488472934, "creation_date": 1487094390, "last_edit_date": 1487101854, "question_id": 42232864, "link": "https://stackoverflow.com/questions/42232864/why-is-there-no-arbitrary-sized-binary-integer-type-in-rust", "title": "Why is there no arbitrary-sized binary integer type in Rust?", "body": "<p>Rust has binary literals, a binary formatter, and a host of integer types, but no explicit binary numeric type.</p>\n\n<h2>'Almost-binary' integers</h2>\n\n<p>It's true that the expected implementation of an unsigned integer is a big/little-endian binary number in general purpose machines. However, that's far removed from the syntax of a high-level language. For example, if I have an eight-bit binary number <code>0000 0101</code> that I want to treat syntactically like a primitive numeric type, I have two problems: (1) the character representation of the number, and (2) the type declaration for the number. If I decide to stick with <code>u8</code>, I have to add a layer of string operations (in Rust) or a layer of vector operations (<a href=\"https://www.mathworks.com/help/matlab/ref/dec2bin.html\" rel=\"noreferrer\">in MATLAB</a>, for example) where numbers will be displayed or declared literally, and I have to ensure that the binary representation is converted to its equivalent in <code>u8</code>. In this situation, there's no way to make the direct statement <code>0000 0101 + 0000 0111</code> without this machinery bubbling up to the syntactic level, and that's just for binary types whose sizes happen to line up with integer types.</p>\n\n<h2>A 'true' binary type</h2>\n\n<p>An example would be, say, a hypothetical type <code>b3</code>, which is a 3-bit binary number, supporting the appropriate mathematical operations in its field. At a minimum, those operations would be arithmetic, closed over the type <code>b3</code>, of course. (The one defining the type would have to define a convention for how that closure is achieved in practice, e.g., by wrapping or asserting that the result of an operation that can't be expressed in <code>b3</code> is not defined.)</p>\n\n<p>A binary type like this could be declared as such and then used syntactically the same way as any other numeric type. Thus, <code>101 + 001 == 110</code>, without the need to deploy bitwise operators, among other added requirements. </p>\n\n<h3>Under the hood</h3>\n\n<p>If these operations seem prosaic in a programming language that is already expected to have binary representations at its foundation, note that there are subtleties in <a href=\"https://en.wikipedia.org/wiki/Finite_field_arithmetic\" rel=\"noreferrer\">implementing finite field arithmetic in C-like languages</a>:</p>\n\n<pre><code>/* Multiply two numbers in the GF(2^8) finite field defined \n * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0\n * using the Russian Peasant Multiplication algorithm\n * (the other way being to do carry-less multiplication followed by a modular reduction)\n */\nuint8_t gmul(uint8_t a, uint8_t b) {\n    uint8_t p = 0; /* the product of the multiplication */\n    while (b) {\n        if (b &amp; 1) /* if b is odd, then add the corresponding a to p (final product = sum of all a's corresponding to odd b's) */\n            p ^= a; /* since we're in GF(2^m), addition is an XOR */\n\n        if (a &amp; 0x80) /* GF modulo: if a &gt;= 128, then it will overflow when shifted left, so reduce */\n            a = (a &lt;&lt; 1) ^ 0x11b; /* XOR with the primitive polynomial x^8 + x^4 + x^3 + x + 1 (0b1_0001_1011) \u2013 you can change it but it must be irreducible */\n        else\n            a &lt;&lt;= 1; /* equivalent to a*2 */\n        b &gt;&gt;= 1; /* equivalent to b // 2 */\n    }\n    return p;\n}\n</code></pre>\n\n<h2>Why bother?</h2>\n\n<p>A Rust type with trait implementations accomplishing the above would collapse all of that down to <code>Mul for b8</code>, which seems to me to be a great feature about Rust. Being able to refer to characteristics of a <code>b8</code> number using a more formal and standard interface than bitmasks and shifts would also seem to be a useful thing Rust could offer here.</p>\n\n<p>What are the reasons why no such types are present anywhere in the core or crates?</p>\n"}, {"tags": ["rust", "pattern-matching"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487068058, "post_id": 42222655, "comment_id": 71607075, "body": "Straight from the <a href=\"https://doc.rust-lang.org/beta/book/match.html\" rel=\"nofollow noreferrer\">Rust Book: 4.14 Match</a> (2nd example). I advise you read the book (or at least check it when you have a question)."}, {"owner": {"reputation": 4916, "user_id": 3991400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5049bb61601c16ae408f5a56b5ed2518?s=128&d=identicon&r=PG&f=1", "display_name": "midor", "link": "https://stackoverflow.com/users/3991400/midor"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1487110259, "post_id": 42222655, "comment_id": 71633770, "body": "tbh I find the notion honorable, but the book hardly useful (I actually checked, but checked the pattern matching section, which has no example with an assignment). The book is very hard to search and misses a keyword index. I asked because I got some completely unrelated error message out of the compiler, since I forgot the colon after the first clause, and google returned no useful information."}], "answers": [{"comments": [{"owner": {"reputation": 4916, "user_id": 3991400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5049bb61601c16ae408f5a56b5ed2518?s=128&d=identicon&r=PG&f=1", "display_name": "midor", "link": "https://stackoverflow.com/users/3991400/midor"}, "edited": false, "score": 0, "creation_date": 1487065953, "post_id": 42222708, "comment_id": 71605644, "body": "Yeah, thanks, just figured it out. Forgot the comma at the end of the &quot;case&quot;-clause. Will accept once I can."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": true, "score": 10, "last_activity_date": 1487079143, "last_edit_date": 1487079143, "creation_date": 1487065581, "answer_id": 42222708, "question_id": 42222655, "link": "https://stackoverflow.com/questions/42222655/assignment-from-rust-match-statement/42222708#42222708", "title": "Assignment from Rust match statement", "body": "<p>In Rust, nearly every statement is also an expression.</p>\n\n<p>You can do this:</p>\n\n<pre><code>fn main() {\n    let a = 3;\n    let b = match a {\n        x if x % 2 == 1 =&gt; false,\n        _ =&gt; true,\n    };\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=ef1ff1ec0462261a4c3c46e2fd484a1d&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">Playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": false, "score": 2, "last_activity_date": 1487066110, "last_edit_date": 1487066110, "creation_date": 1487065624, "answer_id": 42222724, "question_id": 42222655, "link": "https://stackoverflow.com/questions/42222655/assignment-from-rust-match-statement/42222724#42222724", "title": "Assignment from Rust match statement", "body": "<p>Sure there is:</p>\n\n<pre><code>fn main() {\n    let a = 1;\n\n    let b = match a % 2 {\n        1 =&gt; false,\n        _ =&gt; true\n    };\n\n    assert_eq!(b, false);\n}\n</code></pre>\n\n<p>Relevant Rust Reference chapter: <a href=\"https://doc.rust-lang.org/reference.html#match-expressions\" rel=\"nofollow noreferrer\">match expressions</a>.</p>\n\n<p>Though in your case a simple <code>if</code> would suffice:</p>\n\n<pre><code>let b = if a % 2 == 1 { false } else { true };\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>let b = a % 2 != 1;\n</code></pre>\n"}], "owner": {"reputation": 4916, "user_id": 3991400, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/5049bb61601c16ae408f5a56b5ed2518?s=128&d=identicon&r=PG&f=1", "display_name": "midor", "link": "https://stackoverflow.com/users/3991400/midor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5537, "favorite_count": 2, "accepted_answer_id": 42222708, "answer_count": 2, "score": 5, "last_activity_date": 1487079143, "creation_date": 1487065420, "last_edit_date": 1487079128, "question_id": 42222655, "link": "https://stackoverflow.com/questions/42222655/assignment-from-rust-match-statement", "title": "Assignment from Rust match statement", "body": "<p>Is there an idiom in Rust which is used to assign the value of a variable based on a match clause? I know something like </p>\n\n<pre><code>val b = a match {\n     case x if x % 2 == 1 =&gt; false\n     case _ =&gt; true\n}\n</code></pre>\n\n<p>from Scala and was wondering whether you can do the same in Rust. Is there a way to evaluate a match clause as an expression and return something from it or is it just a statement in Rust?</p>\n"}, {"tags": ["module", "rust"], "comments": [{"owner": {"reputation": 432, "user_id": 3381781, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/b43561da313b4da4bde48ceb6d26b75f?s=128&d=identicon&r=PG&f=1", "display_name": "Masked Man", "link": "https://stackoverflow.com/users/3381781/masked-man"}, "edited": false, "score": 0, "creation_date": 1487058022, "post_id": 42220379, "comment_id": 71601086, "body": "This should be struct but I just ask about module."}], "answers": [{"comments": [{"owner": {"reputation": 432, "user_id": 3381781, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/b43561da313b4da4bde48ceb6d26b75f?s=128&d=identicon&r=PG&f=1", "display_name": "Masked Man", "link": "https://stackoverflow.com/users/3381781/masked-man"}, "edited": false, "score": 0, "creation_date": 1487060659, "post_id": 42220536, "comment_id": 71602375, "body": "Where to put re-exporting symbol ?"}, {"owner": {"reputation": 432, "user_id": 3381781, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/b43561da313b4da4bde48ceb6d26b75f?s=128&d=identicon&r=PG&f=1", "display_name": "Masked Man", "link": "https://stackoverflow.com/users/3381781/masked-man"}, "edited": false, "score": 0, "creation_date": 1487061022, "post_id": 42220536, "comment_id": 71602578, "body": "I knew it now. Put in mod.rs. I just researched."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1487095914, "post_id": 42220536, "comment_id": 71626145, "body": "Also you can reexport all public items from a module directly: <code>pub use self::leg::*;</code> etc"}, {"owner": {"reputation": 11121, "user_id": 12958, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/f1bb6e5c84ee4cbf4790d08b4515e62c?s=128&d=identicon&r=PG", "display_name": "justin.m.chase", "link": "https://stackoverflow.com/users/12958/justin-m-chase"}, "edited": false, "score": 2, "creation_date": 1577904912, "post_id": 42220536, "comment_id": 105279013, "body": "Can you show the example solution across multiple files? The original question was asking about how to split the modules into multiple files and its not clear for this example how to do that."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 6, "last_activity_date": 1577899670, "last_edit_date": 1577899670, "creation_date": 1487058477, "answer_id": 42220536, "question_id": 42220379, "link": "https://stackoverflow.com/questions/42220379/how-to-have-multiple-files-with-one-module/42220536#42220536", "title": "How to have multiple files with one module?", "body": "<p>You cannot.</p>\n\n<p>You can have <em>more</em> modules than files (the typical examples being <code>mod tests</code> nested in the file), but not the reverse.</p>\n\n<hr>\n\n<p>However, this does not matter because you can use encapsulation + re-export.</p>\n\n<p>The default when declaring a submodule with <code>mod xxx;</code> is that <code>xxx</code> is <em>private</em>: no user of the current module will know that it depends on <code>xxx</code>.</p>\n\n<p>Combine this with selecting re-exporting symbols:</p>\n\n<pre><code>pub use self::leg::walk;\npub use self::head::nose::smell;\npub use self::tail::iron_tail;\npub use self::mouth::sonic_bark;\n</code></pre>\n\n<p>And you can call those directly: <code>dog::walk()</code>, <code>dog::smell()</code>, ...</p>\n\n<p>Therefore, private imports and public re-exports help you have a <em>hidden</em> internal hierarchy while exposing a flat public interface.</p>\n\n<hr>\n\n<p>Complete example:</p>\n\n<pre><code>mod dog {\n    pub use self::head::nose::smell;\n    pub use self::leg::walk;\n    pub use self::mouth::sonic_bark;\n    pub use self::tail::iron_tail;\n\n    mod leg {\n        pub fn walk() {}\n    }\n\n    mod head {\n        pub mod nose {\n            pub fn smell() {}\n        }\n    }\n\n    mod tail {\n        pub fn iron_tail() {}\n    }\n\n    mod mouth {\n        pub fn sonic_bark() {}\n    }\n}\n\nfn main() {\n    dog::sonic_bark();\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1562081821, "creation_date": 1562081821, "answer_id": 56855879, "question_id": 42220379, "link": "https://stackoverflow.com/questions/42220379/how-to-have-multiple-files-with-one-module/56855879#56855879", "title": "How to have multiple files with one module?", "body": "<p>It <em>is</em> possible, but you should <strong>absolutely not do this</strong> because it's unidiomatic, will probably break various tools and IDEs, and is just generally confusing. Please don't read this except for educational purposes.</p>\n\n<hr>\n\n<p>The trick is to use <a href=\"https://doc.rust-lang.org/std/macro.include.html\" rel=\"nofollow noreferrer\"><code>include!</code></a> to directly import source code.</p>\n\n<p><strong>Filesystem</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>do-not-do-this\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dog-head.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dog-tail.rs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dog.rs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p><strong>src/main.rs</strong></p>\n\n<pre><code>mod dog;\n\nfn main() {\n    dog::bark();\n    dog::wag();\n}\n</code></pre>\n\n<p><strong>src/dog.rs</strong></p>\n\n<pre><code>include!(\"dog-head.rs\");\ninclude!(\"dog-tail.rs\");\n</code></pre>\n\n<p><strong>src/dog-head.rs</strong></p>\n\n<pre><code>pub fn bark() {\n    eprintln!(\"Woof\");\n}\n</code></pre>\n\n<p><strong>src/dog-tail.rs</strong></p>\n\n<pre><code>pub fn wag() {\n    eprintln!(\"Swish\");\n}\n</code></pre>\n"}], "owner": {"reputation": 432, "user_id": 3381781, "user_type": "registered", "accept_rate": 47, "profile_image": "https://www.gravatar.com/avatar/b43561da313b4da4bde48ceb6d26b75f?s=128&d=identicon&r=PG&f=1", "display_name": "Masked Man", "link": "https://stackoverflow.com/users/3381781/masked-man"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1477, "favorite_count": 0, "accepted_answer_id": 42220536, "answer_count": 2, "score": 6, "last_activity_date": 1577899670, "creation_date": 1487057933, "last_edit_date": 1577899638, "question_id": 42220379, "link": "https://stackoverflow.com/questions/42220379/how-to-have-multiple-files-with-one-module", "title": "How to have multiple files with one module?", "body": "<p>I don't understand why we have only one file per module.</p>\n\n<pre><code>// main.rs\n\nmod dog; // Find dog in dog.rs or dog/mod.rs\nfn main() {\n    dog::sonic_bark();\n}\n</code></pre>\n\n<p>When <code>dog</code> grows larger and has lots of functions, it's not good to have all of them in one file.</p>\n\n<p>How I can separate them without using</p>\n\n<pre><code>dog::leg::walk();\ndog::head::nose::smell();\ndog::tail::iron_tail();\ndog::mouth::sonic_bark();\n</code></pre>\n\n<p>I want to just use <code>dog::sonic_bark();</code></p>\n"}, {"tags": ["generics", "rust", "dereference"], "answers": [{"comments": [{"owner": {"reputation": 173, "user_id": 7332766, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/09c09b5a09dd0212bb9db55e05bcd4b1?s=128&d=identicon&r=PG&f=1", "display_name": "divbyzero", "link": "https://stackoverflow.com/users/7332766/divbyzero"}, "edited": false, "score": 0, "creation_date": 1487059400, "post_id": 42220740, "comment_id": 71601767, "body": "Thanks! I tried <code>Borrow</code>, but I wasn&#39;t using it right."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 7, "last_activity_date": 1487059270, "creation_date": 1487059270, "answer_id": 42220740, "question_id": 42218030, "link": "https://stackoverflow.com/questions/42218030/deref-coercion-with-generics/42220740#42220740", "title": "Deref coercion with generics", "body": "<p>Some of <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html\"><code>HashMap</code></a>'s methods, i.e. <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.get\"><code>get</code></a>, <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.contains_key\"><code>contains_key</code></a>, <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.get_mut\"><code>get_mut</code></a> and <a href=\"https://doc.rust-lang.org/stable/std/collections/struct.HashMap.html#method.remove\"><code>remove</code></a>, can receive a borrowed version of the key type. They do this by using the <a href=\"https://doc.rust-lang.org/stable/std/borrow/trait.Borrow.html\"><code>Borrow</code></a> trait. They are generic over a type parameter <code>Q</code> that can be any type that can represent a borrow of a key. It works this way: when <code>X</code> implements <code>Borrow&lt;Y&gt;</code>, it means that an <code>&amp;X</code> can be borrowed as a <code>&amp;Y</code>. For example, <a href=\"https://doc.rust-lang.org/stable/std/string/struct.String.html#implementations\"><code>String</code> implements <code>Borrow&lt;str&gt;</code></a>, so a <code>&amp;String</code> can be borrowed as a <code>&amp;str</code>.</p>\n\n<p>You can take advantage of this by introducing an additional type parameter on your function and adding the correct bounds.</p>\n\n<pre><code>use std::borrow::Borrow;\nuse std::collections::HashMap;\nuse std::hash::Hash;\n\nfn if_found_update&lt;K, V, Q&gt;(data: &amp;mut HashMap&lt;K, V&gt;, k: &amp;Q, v: &amp;V, f: &amp;Fn(&amp;V, &amp;V) -&gt; V) -&gt; bool\n    where K: Hash + Eq + Borrow&lt;Q&gt;,\n          Q: ?Sized + Hash + Eq\n{\n    if let Some(e) = data.get_mut(k) {\n        *e = f(e, v);\n        return true;\n    }\n    false\n} \n\nfn main() {\n    let mut h: HashMap&lt;String, i64&gt; = HashMap::new();\n    h.insert(\"A\".to_string(), 0);\n    let one = 1 as i64;\n    fn update(e1: &amp;i64, e2: &amp;i64) -&gt; i64 { e1 + e2 }\n    let k: &amp;str = \"A\";\n    println!(\"{}\", if_found_update(&amp;mut h, &amp;\"A\".to_string(), &amp;one, &amp;update));\n    println!(\"{}\", if_found_update(&amp;mut h, k, &amp;one, &amp;update));\n}\n</code></pre>\n"}], "owner": {"reputation": 173, "user_id": 7332766, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/09c09b5a09dd0212bb9db55e05bcd4b1?s=128&d=identicon&r=PG&f=1", "display_name": "divbyzero", "link": "https://stackoverflow.com/users/7332766/divbyzero"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 271, "favorite_count": 0, "accepted_answer_id": 42220740, "answer_count": 1, "score": 3, "last_activity_date": 1487079373, "creation_date": 1487047503, "last_edit_date": 1487079373, "question_id": 42218030, "link": "https://stackoverflow.com/questions/42218030/deref-coercion-with-generics", "title": "Deref coercion with generics", "body": "<p>I am trying to write a parameterized function <code>if_found_update</code> that updates a value in the hash if it exists:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn if_found_update&lt;K, V&gt;(data: &amp;mut HashMap&lt;K, V&gt;, k: &amp;K, v: &amp;V, f: &amp;Fn(&amp;V, &amp;V) -&gt; V) -&gt; bool\n    where K: std::cmp::Eq,\n          K: std::hash::Hash\n{\n    if let Some(e) = data.get_mut(k) {\n        *e = f(e, v);\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let mut h: HashMap&lt;String, i64&gt; = HashMap::new();\n    h.insert(\"A\".to_string(), 0);\n    let one = 1 as i64;\n    fn update(e1: &amp;i64, e2: &amp;i64) -&gt; i64 {\n        e1 + e2\n    };\n    let k: &amp;str = &amp;\"A\".to_string();\n    println!(\"{}\",\n             if_found_update(&amp;mut h, &amp;\"A\".to_string(), &amp;one, &amp;update)); // works\n    println!(\"{}\", if_found_update(&amp;mut h, k, &amp;one, &amp;update)); // fails to compile\n}\n</code></pre>\n\n<p><code>if_found_update(&amp;mut h, &amp;\"A\".to_string(), &amp;one, &amp;update);</code> works fine, but <code>if_found_update(&amp;mut h, k, &amp;one, &amp;update)</code> fails to compile with:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:24:44\n   |\n24 |     println!(\"{}\", if_found_update(&amp;mut h, k, &amp;one, &amp;update)); // fails to compile\n   |                                            ^ expected struct `std::string::String`, found str\n   |\n   = note: expected type `&amp;std::string::String`\n   = note:    found type `&amp;str`\n</code></pre>\n\n<p>I think it's because it fails to for the appropriate deref coercion. Is there a way to get something like this to work? </p>\n"}, {"tags": ["http", "tcp", "rust"], "answers": [{"comments": [{"owner": {"reputation": 323, "user_id": 6039371, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf93ffed843f66eeb081062f5f10de04?s=128&d=identicon&r=PG&f=1", "display_name": "FrontMage", "link": "https://stackoverflow.com/users/6039371/frontmage"}, "edited": false, "score": 0, "creation_date": 1487038013, "post_id": 42216469, "comment_id": 71594622, "body": "Thanks for the valuable insight, I will re-read those chapters. That <code>[0u8]</code> was stupid, I thought file.read_to_end would wipe out the vector then use it as an empty one."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1487036935, "last_edit_date": 1487036935, "creation_date": 1487036535, "answer_id": 42216469, "question_id": 42216349, "link": "https://stackoverflow.com/questions/42216349/how-to-send-jpg-as-http-through-a-tcpstream/42216469#42216469", "title": "How to send .jpg as HTTP through a TcpStream?", "body": "<p><strong>Always fix compiler warnings</strong>, especially ones about results you aren't using. Go back and re-read <em>The Rust Programming Language</em> chapter on <a href=\"https://doc.rust-lang.org/stable/book/error-handling.html\" rel=\"noreferrer\">error handling</a> to refresh yourself on the topic.</p>\n\n<p>However, that's not your problem here. I don't know what you think that <code>let mut buf = vec![0u8];</code> does, but you don't want it. That allocates a vector with exactly one value in it, an 8-bit zero. You then send that rogue byte before your JPEG, which makes it no longer valid JPEG. Removing that allows your program to work:</p>\n\n<pre><code>fn response(path: &amp;str, mut stream: TcpStream) {\n    let file_path = format!(\"/tmp/images/{}\", path);\n\n    let mut buf = Vec::new();\n    let mut file = File::open(&amp;file_path).unwrap();\n    file.read_to_end(&amp;mut buf).unwrap();\n\n    let mut encoded = Vec::new();\n    {\n        let mut encoder = Encoder::with_chunks_size(&amp;mut encoded, 8);\n        encoder.write_all(&amp;buf).unwrap();\n    }\n\n    let headers = [\n        \"HTTP/1.1 200 OK\",\n        \"Content-type: image/jpeg\",\n        \"Transfer-Encoding: chunked\",\n        \"\\r\\n\"\n    ];\n    let mut response = headers.join(\"\\r\\n\")\n        .to_string()\n        .into_bytes();\n    response.extend(encoded);\n\n    match stream.write(&amp;response) {\n        Ok(_) =&gt; println!(\"Response sent\"),\n        Err(e) =&gt; println!(\"Failed sending response: {}\", e),\n    }\n}\n</code></pre>\n\n<p>However, your program has a <strong>giant security hole</strong> known as <a href=\"https://www.owasp.org/index.php/Path_Traversal\" rel=\"noreferrer\">path traversal</a>. You should <em>not</em> expose this anywhere that has any valuable information.</p>\n"}], "owner": {"reputation": 323, "user_id": 6039371, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/bf93ffed843f66eeb081062f5f10de04?s=128&d=identicon&r=PG&f=1", "display_name": "FrontMage", "link": "https://stackoverflow.com/users/6039371/frontmage"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1097, "favorite_count": 0, "accepted_answer_id": 42216469, "answer_count": 1, "score": 1, "last_activity_date": 1487036935, "creation_date": 1487035666, "last_edit_date": 1487035852, "question_id": 42216349, "link": "https://stackoverflow.com/questions/42216349/how-to-send-jpg-as-http-through-a-tcpstream", "title": "How to send .jpg as HTTP through a TcpStream?", "body": "<p>I tried to write a static HTTP file server, but I'm stuck when I try to send a <code>.jpg</code> file through <code>TcpStream</code>.</p>\n\n<p>Even if I <code>read</code> the file as binary, the browser doesn't seem to be able to decode the image:</p>\n\n<pre><code>extern crate chunked_transfer;\nuse std::net::{TcpListener, TcpStream};\nuse std::io::{Read, Write};\nuse std::thread;\nuse std::fs::File;\nuse chunked_transfer::Encoder;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:9527\").unwrap();\n    println!(\"Listening for connections on port {}\", 9527);\n    for stream in listener.incoming() {\n        match stream {\n            Ok(stream) =&gt; {\n                thread::spawn(|| handle_client(stream));\n            }\n            Err(e) =&gt; println!(\"Unable to connect: {}\", e),\n        }\n    }\n}\n\nfn get_path(mut stream: &amp;TcpStream) -&gt; String {\n    let mut buf = [0u8; 4096];\n    match stream.read(&amp;mut buf) {\n        Ok(_) =&gt; {\n            let req_str = String::from_utf8_lossy(&amp;buf);\n            let path: Vec&lt;&amp;str&gt; = req_str.lines().next().unwrap().split(\" \").collect();\n            println!(\"GET {}\", path[1]);\n            // println!(\"{}\", req_str);\n            path[1].to_string()\n        }\n        Err(e) =&gt; {\n            println!(\"Unable to read stream: {}\", e);\n            \"/\".to_string()\n        }\n    }\n}\n\nfn response(path: &amp;str, mut stream: TcpStream) {\n    let file_path: &amp;str = &amp;(\"/home/xinbg/Downloads/wallpaper\".to_string() + path);\n    println!(\"{}\", file_path);\n    let mut buf = vec![0u8];\n    let file = File::open(file_path);\n    file.unwrap().read_to_end(&amp;mut buf);\n\n    let mut encoded: Vec&lt;u8&gt; = vec![];\n    {\n        let mut encoder = Encoder::with_chunks_size(&amp;mut encoded, 8);\n        encoder.write_all(&amp;buf);\n    }\n\n    let headers =\n        [\"HTTP/1.1 200 OK\", \"Content-type: image/jpeg\", \"Transfer-Encoding: chunked\", \"\\r\\n\"];\n    let mut response: Vec&lt;u8&gt; = headers.join(\"\\r\\n\")\n        .to_string()\n        .into_bytes();\n    response.extend(encoded);\n\n    match stream.write(&amp;response) {\n        Ok(_) =&gt; println!(\"Response sent\"),\n        Err(e) =&gt; println!(\"Failed sending response: {}\", e),\n    }\n}\n\nfn handle_client(stream: TcpStream) {\n    response(&amp;get_path(&amp;stream), stream);\n}\n</code></pre>\n\n<p>I heard that there is some kind of \"HTTP server standard guide book\" stuff, any idea where to find it?</p>\n"}, {"tags": ["testing", "macros", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1487032003, "post_id": 42215714, "comment_id": 71593036, "body": "@LukasKalbertodt this one appears to have <code>macro_export</code> and the macro is imported before it&#39;s used; mind connecting the dots to the duplicate for me?"}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1487060670, "post_id": 42215714, "comment_id": 71602386, "body": "@Shepmaster Nevermind, my mistake. Was tired ;-)"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1487032711, "creation_date": 1487032711, "answer_id": 42215964, "question_id": 42215714, "link": "https://stackoverflow.com/questions/42215714/macro-undefined-when-test-module-is-moved-to-a-separate-file/42215964#42215964", "title": "Macro undefined when test module is moved to a separate file", "body": "<p>The problem here is that you aren't compiling what you think you are compiling. Check it out:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo test --verbose\n   Compiling export v0.1.0 (file:///private/tmp/export)\n     Running `rustc --crate-name my_test_mod tests/my_test_mod.rs ...`\n</code></pre>\n\n<p>When you run <code>cargo test</code>, it assumes that <em>every</em> .rs file is a test to be run. It doesn't know that <strong>my_test_mod.rs</strong> should only be compiled as part of another test!</p>\n\n<p>The easiest solution is to move your module to the other valid module location, in a separate directory: <strong>tests/my_test_mod/mod.rs</strong>. Cargo will not recursively look inside the directory for test files.</p>\n"}], "owner": {"reputation": 293, "user_id": 478658, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/357dd2bc31ed5785c639b641415c3db5?s=128&d=identicon&r=PG", "display_name": "Sebastian", "link": "https://stackoverflow.com/users/478658/sebastian"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 88, "favorite_count": 0, "accepted_answer_id": 42215964, "answer_count": 1, "score": 3, "last_activity_date": 1487032711, "creation_date": 1487030842, "last_edit_date": 1487032189, "question_id": 42215714, "link": "https://stackoverflow.com/questions/42215714/macro-undefined-when-test-module-is-moved-to-a-separate-file", "title": "Macro undefined when test module is moved to a separate file", "body": "<p>I am writing a test for a macro I want to export. The test works as long as I keep my tests in a single file, but as soon as I put the tests module in a separate file, I get an error.</p>\n\n<p><strong>export/src/lib.rs</strong></p>\n\n<pre><code>pub mod my_mod {\n    #[macro_export]\n    macro_rules! my_macro {\n        ( $x:expr ) =&gt; { $x + 1 };\n    }\n\n    pub fn my_func(x: isize) -&gt; isize {\n        my_macro!(x)\n    }\n}\n</code></pre>\n\n<p><strong>export/tests/lib.rs</strong></p>\n\n<pre><code>#[macro_use]\nextern crate export;\n\nmod my_test_mod {\n    use export::my_mod;\n\n    #[test]\n    fn test_func() {\n        assert_eq!(my_mod::my_func(1), 2);\n    }\n\n    #[test]\n    fn test_macro() {\n        assert_eq!(my_macro!(1), 2);\n    }\n}\n</code></pre>\n\n<p>Running <code>cargo test</code> indicates that both tests passed. If I extract <code>my_test_mod</code> to a file it no longer compiles.</p>\n\n<p><strong>export/src/lib.rs</strong></p>\n\n<p>Unchanged</p>\n\n<p><strong>export/tests/lib.rs</strong></p>\n\n<pre><code>#[macro_use]\nextern crate export;\n\nmod my_test_mod;\n</code></pre>\n\n<p><strong>export/tests/my_test_mod.rs</strong></p>\n\n<pre><code>use export::my_mod;\n\n#[test]\nfn test_func() {\n    assert_eq!(my_mod::my_func(1), 2);\n}\n\n#[test]\nfn test_macro() {\n    assert_eq!(my_macro!(1), 2); // error: macro undefined: 'my_macro!'\n}\n</code></pre>\n\n<p>This gives me an error that the macro is undefined.</p>\n"}, {"tags": ["enums", "rust", "quote"], "answers": [{"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1486996787, "post_id": 42206643, "comment_id": 71574519, "body": "What if we have &quot;use Enum as E;&quot; in our code or we did not even provided <code>use</code> for it so it must be prepended with &quot;cratename::&quot; ? Personally I think there must be a method of getting <code>fully qualified name</code> for the requested item. P.S. My question implies that your code in your answer is incorrect too :)"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 1, "creation_date": 1486997333, "post_id": 42206643, "comment_id": 71574907, "body": "Probably you should always use the fully qualified name, including crate, just to be safe. It&#39;s quite ugly though. I&#39;ll update the answer."}, {"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 0, "creation_date": 1487096068, "post_id": 42206643, "comment_id": 71626245, "body": "You can <code>use</code> it once inside the function, then you would only need to FQN it in the impl and in the <code>use</code> itself."}, {"owner": {"reputation": 1069, "user_id": 5923374, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/bd4f47d4ba513ba8ed316520a12f94a9?s=128&d=identicon&r=PG&f=1", "display_name": "Ford O.", "link": "https://stackoverflow.com/users/5923374/ford-o"}, "edited": false, "score": 0, "creation_date": 1598258567, "post_id": 42206643, "comment_id": 112388710, "body": "This answer is out of date. <code>tokens.append(&amp;str)</code> no longer works."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 2, "last_activity_date": 1486997833, "last_edit_date": 1486997833, "creation_date": 1486996670, "answer_id": 42206643, "question_id": 42206417, "link": "https://stackoverflow.com/questions/42206417/how-to-implement-quotetotokens-for-an-enum/42206643#42206643", "title": "How to implement quote::ToTokens for an enum?", "body": "<p>I think you are looking for something like:</p>\n\n<pre><code>impl quote::ToTokens for Enum {\n    fn to_tokens(&amp;self, tokens: &amp;mut quote::Tokens) {\n        tokens.append(\"Enum\");\n        tokens.append(\"::\");\n        match *self {\n           Enum::A =&gt; tokens.append(\"A\"),\n           Enum::B =&gt; tokens.append(\"B\")\n        }\n    }\n}\n</code></pre>\n\n<p>If you are concerned with how the enum has been imported, then you should re-import it to make sure it is not conflicting with anything else:</p>\n\n<pre><code>impl quote::ToTokens for Enum {\n    fn to_tokens(&amp;self, tokens: &amp;mut quote::Tokens) {\n        tokens.append(\"{\");\n        tokens.append(\"use\");\n        tokens.append_separated(&amp;[\"module_name\", \"Enum\"], \"::\");\n        tokens.append(\";\");\n        tokens.append(\"Enum\");\n        tokens.append(\"::\");\n        match *self {\n           Enum::A =&gt; tokens.append(\"A\"),\n           Enum::B =&gt; tokens.append(\"B\")\n        }\n        tokens.append(\"}\");\n    }\n}\n</code></pre>\n\n<p>Which will produce:</p>\n\n<pre><code> { use module_name::Enum; Enum::A }\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 258, "favorite_count": 0, "accepted_answer_id": 42206643, "answer_count": 1, "score": 4, "last_activity_date": 1486997833, "creation_date": 1486996001, "last_edit_date": 1486997055, "question_id": 42206417, "link": "https://stackoverflow.com/questions/42206417/how-to-implement-quotetotokens-for-an-enum", "title": "How to implement quote::ToTokens for an enum?", "body": "<p>I am implementing a procedural macro and I need to provide my own structures to the outside. I need to implement <code>quote::ToTokens</code> trait for my structures, but I don't understand how. I have tried this code but did not succeed. This code is compilable, but it is not valid:</p>\n\n<pre><code>#[derive(Debug, Serialize, Clone)]\npub enum Enum {\n    A,\n    B,\n}\nimpl quote::ToTokens for Enum {\n    fn to_tokens(&amp;self, tokens: &amp;mut quote::Tokens) {\n        tokens.append(\"Enum::B\");\n    }\n}\n</code></pre>\n\n<p>The <a href=\"https://dtolnay.github.io/syn/quote/trait.ToTokens.html\" rel=\"nofollow noreferrer\"><code>quote::ToTokens</code> example</a> does not explain this.</p>\n"}, {"tags": ["rust", "byte", "constants", "data-conversion"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1486977939, "post_id": 42199727, "comment_id": 71562608, "body": "<i>I couldn&#39;t figure out how to achieve when using bit-shifting on a literal byte string</i>. Please provide such previous work when you ask a question"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1487032605, "post_id": 42199727, "comment_id": 71593222, "body": "@ker, I started doing this but then had one of these questions flagged to move to &quot;code-review&quot;, I find if I post example code the answers focus too much on picking apart naive code, instead of whats possible, especially when my approach may be wrong in the first place. Nevertheless I don&#39;t mind to post examples."}], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1487225347, "post_id": 42200602, "comment_id": 71688969, "body": "Unfortunately constants created using this method can&#39;t be used as values in match statements (Causes error E0080, see note in my own answer)."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1487235969, "post_id": 42200602, "comment_id": 71694830, "body": "correct, that is a nightly feature that has been around for a while. You can open an RFC to make it stable."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 3, "last_activity_date": 1486977900, "creation_date": 1486977900, "answer_id": 42200602, "question_id": 42199727, "link": "https://stackoverflow.com/questions/42199727/how-to-construct-const-integers-from-literal-byte-expressions/42200602#42200602", "title": "How to construct const integers from literal byte expressions?", "body": "<p>You can build a macro for each type by indexing into the array and bitshifting the parts to the correct position. An example expression for your u16 is</p>\n\n<pre><code>((b\"ID\"[0] as u16) &lt;&lt; 8) | (b\"ID\"[1] as u16)\n</code></pre>\n\n<p>You can replace the <code>b\"ID\"</code> by a macro replacement <code>$e</code> which comes from a <code>$e:expr</code>.</p>\n\n<p>To achieve the length check, you can insert a useless <code>*$e as [u8; 2]</code>, which will fail to compile if the types don't match.</p>\n"}, {"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1487030048, "post_id": 42201782, "comment_id": 71592480, "body": "Maybe a <code>match</code> expression instead of a <code>let</code> statement would do the trick? <code>match $w { w =&gt; .. }</code>"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1487030510, "post_id": 42201782, "comment_id": 71592597, "body": "As with nearly all clever tricks in this context, it gives: <code>error[E0016]: blocks in constants are limited to items and tail expressions</code>."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1487031900, "post_id": 42201782, "comment_id": 71593016, "body": "That&#39;s if you wrap the <code>match</code> in a block. Otherwise, you get... an internal compiler error (oops!). Then the only solution I can think of is a <code>const fn</code> (which is an unstable feature), to bind the expression to an argument (and a <code>const fn</code> also gives you type checking)."}], "tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 2, "last_activity_date": 1487225124, "last_edit_date": 1487225124, "creation_date": 1486981593, "answer_id": 42201782, "question_id": 42199727, "link": "https://stackoverflow.com/questions/42199727/how-to-construct-const-integers-from-literal-byte-expressions/42201782#42201782", "title": "How to construct const integers from literal byte expressions?", "body": "<p>Based on @ker's suggestion, here are portable macros that create constant identifiers based on fixed size byte strings:</p>\n\n<p><strong>Warning:</strong> there are some limitations on these constants that aren't immediately obvious (see notes below).</p>\n\n<p>The following macros support:</p>\n\n<pre><code>const MY_ID:   u16 = u16_code!(b\"ID\");\nconst MY_WORD: u32 = u32_code!(b\"WORD\");\nconst MY_LONG: u64 = u64_code!(b\"LONGWORD\");\n</code></pre>\n\n<p>Implementation:</p>\n\n<pre><code>#[cfg(target_endian = \"little\")]\n#[macro_export]\nmacro_rules! u16_code {\n    ($w:expr) =&gt; {\n        ((($w[0] as u16) &lt;&lt;  0) |\n         (($w[1] as u16) &lt;&lt;  8) |\n         ((*$w as [u8; 2])[0] as u16 * 0))\n    }\n}\n#[cfg(target_endian = \"big\")]\n#[macro_export]\nmacro_rules! u16_code {\n    ($w:expr) =&gt; {\n        ((($w[1] as u16) &lt;&lt;  0) |\n         (($w[0] as u16) &lt;&lt;  8) |\n         ((*$w as [u8; 2])[0] as u16 * 0))\n    }\n}\n\n#[cfg(target_endian = \"little\")]\n#[macro_export]\nmacro_rules! u32_code {\n    ($w:expr) =&gt; {\n        ((($w[0] as u32) &lt;&lt;  0) |\n         (($w[1] as u32) &lt;&lt;  8) |\n         (($w[2] as u32) &lt;&lt; 16) |\n         (($w[3] as u32) &lt;&lt; 24) |\n         ((*$w as [u8; 4])[0] as u32 * 0))\n    }\n}\n#[cfg(target_endian = \"big\")]\n#[macro_export]\nmacro_rules! u32_code {\n    ($w:expr) =&gt; {\n        ((($w[3] as u32) &lt;&lt;  0) |\n         (($w[2] as u32) &lt;&lt;  8) |\n         (($w[1] as u32) &lt;&lt; 16) |\n         (($w[0] as u32) &lt;&lt; 24) |\n         ((*$w as [u8; 4])[0] as u32 * 0))\n    }\n}\n\n#[cfg(target_endian = \"little\")]\n#[macro_export]\nmacro_rules! u64_code {\n    ($w:expr) =&gt; {\n        ((($w[0] as u64) &lt;&lt;  0) |\n         (($w[1] as u64) &lt;&lt;  8) |\n         (($w[2] as u64) &lt;&lt; 16) |\n         (($w[3] as u64) &lt;&lt; 24) |\n         (($w[4] as u64) &lt;&lt; 32) |\n         (($w[5] as u64) &lt;&lt; 40) |\n         (($w[6] as u64) &lt;&lt; 48) |\n         (($w[7] as u64) &lt;&lt; 56) |\n         ((*$w as [u8; 8])[0] as u64 * 0))\n    }\n}\n#[cfg(target_endian = \"big\")]\n#[macro_export]\nmacro_rules! u64_code {\n    ($w:expr) =&gt; {\n        ((($w[7] as u64) &lt;&lt;  0) |\n         (($w[6] as u64) &lt;&lt;  8) |\n         (($w[5] as u64) &lt;&lt; 16) |\n         (($w[4] as u64) &lt;&lt; 24) |\n         (($w[3] as u64) &lt;&lt; 32) |\n         (($w[2] as u64) &lt;&lt; 40) |\n         (($w[1] as u64) &lt;&lt; 48) |\n         (($w[0] as u64) &lt;&lt; 56) |\n         ((*$w as [u8; 8])[0] as u64 * 0))\n    }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Note 1)</strong> the line that checks the size needed to be or'd with the constant because separate statements aren't supported in constant expressions (<code>E0016</code>).</p>\n\n<p>I'd also have preferred to use <code>if cfg!(target_endian = \"big\")</code> within the one macro, but the same limitation for constants prevents it.</p>\n\n<p><strong>Note 2)</strong> There is potentially a problem using these macros for non-constant input, where the argument could be instantiated for every byte <em>(and possibly the sanity check for size)</em>. I looked into assigning a variable, but this causes error <code>E0016</code> too. </p>\n\n<p><strong>Note 3)</strong> While Rust allows these values to be declared as <code>const</code> they can't be used in <code>match</code> statements.</p>\n\n<p>eg: </p>\n\n<pre><code>error[E0080]: constant evaluation error\n   --&gt; src/mod.rs:112:23\n    |\n112 | const MY_DATA: u32 = u32_code!(b\"DATA\");\n    |                      ^^^^^^^^^^^^^^^^^^ the index operation on const values is unstable\n    |\nnote: for pattern here\n   --&gt; src/mod.rs:224:13\n    |\n224 |             MY_DATA =&gt; {\n    |             ^^^^^^^\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 564, "favorite_count": 0, "answer_count": 2, "score": 3, "last_activity_date": 1487225124, "creation_date": 1486975019, "last_edit_date": 1495540394, "question_id": 42199727, "link": "https://stackoverflow.com/questions/42199727/how-to-construct-const-integers-from-literal-byte-expressions", "title": "How to construct const integers from literal byte expressions?", "body": "<p>Is there a way to construct a <code>const</code> integer from a literal byte expression, either using a byte string or a macro which constructs the integer?</p>\n\n<p>For example:</p>\n\n<pre><code>const MY_ID:   u16 = u16_code!(ID);\nconst MY_WORD: u32 = u32_code!(WORD);\nconst MY_LONG: u64 = u64_code!(LONGWORD);\n</code></pre>\n\n<p>Or something similar, passing in <code>b\"ID\"</code> instead of <code>ID</code>? <strong>*</strong></p>\n\n<p>It should fail to compile when the wrong number of characters are passed too, something I couldn't figure out how to achieve when using bit-shifting on a literal byte string.</p>\n\n<hr>\n\n<p>Here's a simple example that works on a basic level, but fails to ensure correctly sized arguments.</p>\n\n<pre><code>// const MY_ID: u16 = u16_code!(b\"ID\");\n#[cfg(target_endian = \"little\")]\nmacro_rules! u16_code {\n    ($w:expr) =&gt; { ((($w[0] as u16) &lt;&lt;  0) | (($w[1] as u16) &lt;&lt;  8)) }\n}\n#[cfg(target_endian = \"big\")]\nmacro_rules! u16_code {\n    ($w:expr) =&gt; { ((($w[1] as u16) &lt;&lt;  0) | (($w[0] as u16) &lt;&lt;  8)) }\n}\n</code></pre>\n\n<hr>\n\n<p><strong>*</strong> See related question: <a href=\"https://stackoverflow.com/questions/42199312\">Is there a byte equivalent of the &#39;stringify&#39; macro?</a></p>\n"}, {"tags": ["macros", "rust"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1486973816, "post_id": 42199312, "comment_id": 71560349, "body": "Why not just use <code>str.as_bytes()</code> to convert the result?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 3, "creation_date": 1486974080, "post_id": 42199312, "comment_id": 71560468, "body": "Conversion functions can&#39;t be used for constructing <code>const</code> values at the moment."}, {"owner": {"reputation": 121, "user_id": 602002, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4fe9af6a5e6b2102d0438e4ece6c14cd?s=128&d=identicon&r=PG", "display_name": "Lawliet", "link": "https://stackoverflow.com/users/602002/lawliet"}, "edited": false, "score": 1, "creation_date": 1492681005, "post_id": 42199312, "comment_id": 74084570, "body": "Might be able to work around this with the <code>lazy_static</code> crate to create a &quot;const&quot;."}], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1527789694, "post_id": 50630229, "comment_id": 88270372, "body": "It is also possible to write a proc-macro-hack like <a href=\"https://github.com/mahou-shoujo/bytify-rs\" rel=\"nofollow noreferrer\">bytify</a> which works on stable Rust 1.15.0+, but the steps are quite tedious and it&#39;s better to let whoever that written the package to submit the answer."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": false, "score": 3, "last_activity_date": 1527789592, "creation_date": 1527789592, "answer_id": 50630229, "question_id": 42199312, "link": "https://stackoverflow.com/questions/42199312/is-there-a-byte-equivalent-of-the-stringify-macro/50630229#50630229", "title": "Is there a byte equivalent of the &#39;stringify&#39; macro?", "body": "<p>If you are using nightly Rust (since 1.28.0-nightly, 2018-05-23), you may enable the <code>const_str_as_bytes</code> feature which turns <code>as_bytes()</code> into a <code>const</code> function.</p>\n\n<pre><code>#![feature(const_str_as_bytes)]\n\nfn main() {\n    const AAA: &amp;[u8] = stringify!(aaa).as_bytes();\n    println!(\"{:?}\", AAA);  // [97, 97, 97]\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?gist=d476cc8505d4de98aa75e8fa097b869b&amp;version=nightly&amp;mode=release\" rel=\"nofollow noreferrer\">Demo</a>)</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 752, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1569990652, "creation_date": 1486973279, "last_edit_date": 1569990652, "question_id": 42199312, "link": "https://stackoverflow.com/questions/42199312/is-there-a-byte-equivalent-of-the-stringify-macro", "title": "Is there a byte equivalent of the &#39;stringify&#39; macro?", "body": "<p>Rust has a <a href=\"https://doc.rust-lang.org/std/macro.stringify.html\" rel=\"nofollow noreferrer\"><code>stringify!</code></a> macro to get an expression as a string.\nIs there a way to get the equivalent functionality that outputs bytes instead?</p>\n\n<p>As if the expression were written as a byte string literal, e.g.: <code>b\"some text\"</code>.</p>\n\n<hr>\n\n<p>The reason to use a macro instead of <code>str.as_bytes()</code> is that conversion functions can't be used to construct <code>const</code> values.<a href=\"https://stackoverflow.com/questions/42199727\">See this question for why you might want to use this macro</a>.</p>\n"}, {"tags": ["struct", "rust", "padding"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486971411, "post_id": 42198466, "comment_id": 71559203, "body": "<i>this means you may have members which aren&#39;t optimally aligned for access.</i> =&gt; My tests on the latest x86_64 processors hint there&#39;s no longer a penalty for unaligned access; could still be an issue with unaligned SIMD types though."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486973674, "post_id": 42198466, "comment_id": 71560290, "body": "Even though I realize I can probably <i>get away</i> with packing all my structs, I don&#39;t want to try port my software to another platform and run into some performance hit because packing happened not to matter for the one I&#39;m currently on. It shouldn&#39;t be <i>that</i> hard to do this, as stated in the question, some way already exists, its just not that nice."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486976887, "post_id": 42198466, "comment_id": 71561995, "body": "Note that another platform may mean another ABI, and therefore another memory layout; so, in any case, porting may be an issue. Is your requirement strictly about not having uninitialized bytes or do you want to warn about padding for other reasons as well? (the two could have vastly different answers)"}, {"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1486976907, "post_id": 42198466, "comment_id": 71562000, "body": "Or crashes. Other architectures aren&#39;t generally so forgiving about unaligned access."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486977196, "post_id": 42198466, "comment_id": 71562180, "body": "@matthieu-m, I suspect <i>why</i> I don&#39;t want padding is outside the scope of the question and would lead to an overly spesific answer. If Rust can&#39;t do this, or if the kludge I suggested is the only way... (without using unstable features). Then probably best just to answer that this isn&#39;t supported."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486977504, "post_id": 42198466, "comment_id": 71562350, "body": "I&#39;m just making sure we&#39;re not facing a X/Y problem; it would be silly for you to get stuck with the kludge you suggested when there&#39;s an elegant solution for the <i>underlying</i> question you never asked :)"}, {"owner": {"reputation": 3830, "user_id": 652122, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/4bea535e568438ebad50bcf64f55fb2e?s=128&d=identicon&r=PG", "display_name": "paiv", "link": "https://stackoverflow.com/users/652122/paiv"}, "edited": false, "score": 0, "creation_date": 1486978153, "post_id": 42198466, "comment_id": 71562733, "body": "Might have a separate compile step with <code>-Z print-type-sizes</code> and grep for padding?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 4, "creation_date": 1486986130, "post_id": 42198466, "comment_id": 71567599, "body": "You can write a lint that checks the <code>Layout</code> of the type for padding."}, {"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "edited": false, "score": 0, "creation_date": 1488074527, "post_id": 42198466, "comment_id": 72069789, "body": "There is <a href=\"https://manishearth.github.io/rust-internals-docs/rustc/ty/layout/enum.Layout.html\" rel=\"nofollow noreferrer\">generated documentation for the rustc API for the memory Layout of its types</a> and an <a href=\"https://github.com/Manishearth/rust-clippy/blob/4b29f9a36478575bd174f388ad3cfbef4a84d0cc/clippy_lints/src/large_enum_variant.rs#L67\" rel=\"nofollow noreferrer\">example of rust-clippy checking the memory Layout of types</a>."}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 155, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1487030808, "creation_date": 1486970081, "last_edit_date": 1487030808, "question_id": 42198466, "link": "https://stackoverflow.com/questions/42198466/how-to-warn-error-when-a-struct-is-padded", "title": "How to warn/error when a struct is padded?", "body": "<p>In certain unusual cases it may be a requirement that a struct isn't padded <em>(so the memory of the struct is ensured not to contain uninitialized bytes for example)</em>.</p>\n\n<p>While it's possible to use <code>#[repr(packed)]</code>, this means you may have members which aren't optimally aligned for access.</p>\n\n<p>In C, some software uses manual padding, where GCC's <code>-Wpadded</code> can be used to warn if the struct is padded.</p>\n\n<p>Is there a way to warn/error when a struct is padded?<br>\nOr some way to ensure manually padded structs don't have any padding?</p>\n\n<hr>\n\n<p>The closest thing to this I could come up with is to define the struct twice, pack one, then check if the sizes differ, but this is a kludge.</p>\n\n<p>With some careful use of <code>include</code> it may be possible to avoid actually writing out the struct twice, but it's still a last-resort.</p>\n"}, {"tags": ["rust", "lifetime-scoping"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1486955167, "last_edit_date": 1486955167, "creation_date": 1486954087, "answer_id": 42195917, "question_id": 42195849, "link": "https://stackoverflow.com/questions/42195849/mutable-reference-lives-long-enough-when-function-is-called-directly-but-doesn/42195917#42195917", "title": "Mutable reference lives long enough when function is called directly, but doesn&#39;t live long enough when called through an intermediate function", "body": "<p>You are taking a reference to <code>domain</code>. <code>domain</code> is the local variable for the argument and is already a reference. <code>domain</code> only lasts for the duration of the function invocation, so that's how a long a reference to that value can exist.</p>\n\n<p>To fix it, don't try to take a reference to a reference:</p>\n\n<pre><code>type Domain = String;\ntype Entity = String;\ntype Direction = String;\n\npub fn component_of_mut&lt;'a, C&gt;(domain: &amp;'a mut Domain, entity: Entity) -&gt; Option&lt;&amp;'a mut C&gt;\n    where C: 'static\n{\n    unimplemented!()\n}\n\nfn facing_of_mut&lt;'a&gt;(domain: &amp;'a mut Domain, entity: Entity) -&gt; Option&lt;&amp;'a mut Direction&gt; {\n    component_of_mut(domain, entity)\n}\n\nfn main() {}\n</code></pre>\n"}], "owner": {"reputation": 531, "user_id": 1129180, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/b019579587da874e2910428d2c23c63c?s=128&d=identicon&r=PG", "display_name": "Flaise", "link": "https://stackoverflow.com/users/1129180/flaise"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 93, "favorite_count": 0, "accepted_answer_id": 42195917, "answer_count": 1, "score": 2, "last_activity_date": 1486955947, "creation_date": 1486953597, "last_edit_date": 1486955947, "question_id": 42195849, "link": "https://stackoverflow.com/questions/42195849/mutable-reference-lives-long-enough-when-function-is-called-directly-but-doesn", "title": "Mutable reference lives long enough when function is called directly, but doesn&#39;t live long enough when called through an intermediate function", "body": "<p>For the following Rust code:</p>\n\n<pre><code>fn facing_of_mut&lt;'a&gt;(domain: &amp;'a mut Domain, entity: Entity) -&gt; Option&lt;&amp;'a mut Direction&gt; {\n    component_of_mut(&amp;mut domain, entity)\n}\n</code></pre>\n\n<p>...the compiler outputs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `domain` does not live long enough\n --&gt; src/facing.rs:5:27\n  |\n5 |     component_of_mut(&amp;mut domain, entity)\n  |                           ^^^^^^ does not live long enough\n6 | }\n  | - borrowed value only lives until here\n  |\nnote: borrowed value must be valid for the lifetime 'a as defined on the body at 4:90...\n --&gt; src/facing.rs:4:91\n  |\n4 |   fn facing_of_mut&lt;'a&gt;(domain: &amp;'a mut Domain, entity: Entity) -&gt; Option&lt;&amp;'a mut Direction&gt; {\n  |  ___________________________________________________________________________________________^ starting here...\n5 | |     component_of_mut(&amp;mut domain, entity)\n6 | | }\n  | |_^ ...ending here\n</code></pre>\n\n<p>I don't understand the error message because I thought the purpose of declaring those lifetimes was specifically to require that whatever object is passed as the <code>domain</code> parameter lives as long as the <code>Direction</code> reference in the return value that depends on the memory allocated by <code>domain</code>.</p>\n\n<p>The signature of <code>component_of_mut</code> is:</p>\n\n<pre><code>pub fn component_of_mut&lt;'a, C: 'static&gt;(domain: &amp;'a mut Domain, entity: Entity) -&gt; Option&lt;&amp;'a mut C&gt;\n</code></pre>\n\n<p>...and I can call it directly in unit tests without lifetime errors during compilation. It's only when <code>facing_of_mut</code> calls it that I get errors.</p>\n"}, {"tags": ["multithreading", "locking", "rust"], "owner": {"reputation": 149, "user_id": 4146323, "user_type": "registered", "accept_rate": 71, "profile_image": "https://lh3.googleusercontent.com/-_env-LLlT78/AAAAAAAAAAI/AAAAAAAAAdc/3YneQMotNAI/photo.jpg?sz=128", "display_name": "edoz90", "link": "https://stackoverflow.com/users/4146323/edoz90"}, "delete_vote_count": 0, "reopen_vote_count": 1, "close_vote_count": 0, "is_answered": false, "view_count": 370, "favorite_count": 0, "closed_date": 1486952707, "answer_count": 0, "score": 2, "last_activity_date": 1486952675, "creation_date": 1486952410, "last_edit_date": 1486952543, "question_id": 42195706, "link": "https://stackoverflow.com/questions/42195706/how-can-i-return-the-inner-value-of-a-mutexguard-type", "closed_reason": "Duplicate", "title": "How can I return the inner value of a `MutexGuard` type?", "body": "<p>This is my example code:</p>\n\n<pre><code>use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    println!(\"{:?}\", test());\n}\n\nfn test() -&gt; Vec&lt;(u32, u32)&gt; {\n    let lock = Arc::new(Mutex::new(Vec::new()));\n    let threads = Vec::new();\n\n    for _ in 0..8 {\n        let l = lock.clone();\n        threads.push(thread::spawn(move || {\n           let mut _lock = l.lock().unwrap();\n           _lock.push((12, 28));\n        }));\n    }\n\n    for t in threads { t.join(); }\n\n    return lock.lock().unwrap();\n}\n</code></pre>\n\n<p>The error is mismatched types: expected 'Vec' found 'MutextGuard', I've tested without 'lock()' also.</p>\n\n<p>Is there a solution or a better approach to this kind of problem?</p>\n"}, {"tags": ["multithreading", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486950026, "post_id": 42195265, "comment_id": 71552903, "body": "The Rust term for such a thread is a &quot;scoped&quot; thread. There is no way to do this in the standard library, but multiple crates provide the functionality. The linked duplicate discusses some of them."}, {"owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486958373, "post_id": 42195265, "comment_id": 71554922, "body": "Ah, that&#39;s the phrase I should have been searching for. I managed to get a version of the above code working using <a href=\"https://crates.io/crates/crossbeam\" rel=\"nofollow noreferrer\">crossbeam</a> after a minimum of fuss."}], "owner": {"reputation": 738, "user_id": 4496839, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/050b67773c3fcf861e786289b932daeb?s=128&d=identicon&r=PG&f=1", "display_name": "Ryan1729", "link": "https://stackoverflow.com/users/4496839/ryan1729"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 36, "favorite_count": 0, "closed_date": 1486949975, "answer_count": 0, "score": 1, "last_activity_date": 1486958273, "creation_date": 1486948486, "last_edit_date": 1486958273, "question_id": 42195265, "link": "https://stackoverflow.com/questions/42195265/how-to-specify-that-threads-should-not-outlive-the-function-they-were-created-in", "closed_reason": "Duplicate", "title": "How to specify that threads should not outlive the function they were created in?", "body": "<p>I'm trying to solve the toy problem of finding the longest string in a slice, in parallel. But I ran into the following compiler error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0495]: cannot infer an appropriate lifetime for autoref due\nto conflicting requirements\n  --&gt; main.rs:10:33\n   |\n10 |     for assigned_lines in input.chunks(max_lines_per_worker as usize) {\n   |                                 ^^^^^^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1\ndefined on the body at 5:59...\n  --&gt; main.rs:5:60\n   |\n5  | pub fn max_length(input: &amp;[&amp;str], workers: usize) -&gt; usize {\n   |                                                            ^\nnote: ...so that reference does not outlive borrowed content\n  --&gt; main.rs:10:27\n   |\n10 |     for assigned_lines in input.chunks(max_lines_per_worker as usize) {\n   |                           ^^^^^\n   = note: but, the lifetime must be valid for the static lifetime...\nnote: ...so that the type `[closure@main.rs:11:36: 19:10 assigned_lines:&amp;[&amp;str]]` will meet its required lifetime bounds\n  --&gt; main.rs:11:22\n   |\n11 |         let handle = thread::spawn(move || {\n   |                      ^^^^^^^^^^^^^\n</code></pre>\n\n<p>If I understand correctly, the compiler is complaining because it can't figure out that the threads (and thus the closed over values) should not live beyond the end of this function. I need to tell it that somehow, probably by specifying a lifetime?. I don't know what to put the lifetime specifier(s) onto, and there doesn't seem to be some kind of special <code>'this_function</code> lifetime, so I'm not sure what (say) marking <code>handles</code> and each individual <code>handle</code> with the same lifetime would do to solve the problem.</p>\n\n<p>Here's the code that produced the error message.</p>\n\n<pre><code>use std::thread;\nuse std::cmp::max;\n\npub fn max_length(input: &amp;[&amp;str], workers: usize) -&gt; usize {\n    let mut result = 0;\n    let max_lines_per_worker = (input.len() as f32 / workers as f32).ceil();\n    let mut handles = Vec::new();\n\n    for assigned_lines in input.chunks(max_lines_per_worker as usize) {\n        let handle = thread::spawn(move || {\n            let mut count = 0;\n\n            for line in assigned_lines {\n                count = max(count, line.len())\n            }\n\n            count\n        });\n\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        if let Ok(count) = handle.join() {\n            result = max(result, count);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    println!(\"{:?}\", max_length(&amp;LINES, 3));\n}\n\nconst LINES: [&amp;'static str; 4] = [\"abc\", \"123\", \"qwerty\", \"zxcvbnm\"];\n</code></pre>\n"}, {"tags": ["build", "rust", "musl"], "comments": [{"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1486991244, "post_id": 42192850, "comment_id": 71570747, "body": "Not exactly an answer to your question, but since all you want to do is to build a static executable might want to just check out <a href=\"https://github.com/clux/muslrust\" rel=\"nofollow noreferrer\">github.com/clux/muslrust</a> instead."}, {"owner": {"reputation": 1641, "user_id": 7527436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da2b5613a6f66629ad967c5b18ef4545?s=128&d=identicon&r=PG&f=1", "display_name": "fzgregor", "link": "https://stackoverflow.com/users/7527436/fzgregor"}, "reply_to_user": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1487060251, "post_id": 42192850, "comment_id": 71602189, "body": "This image uses <code>rustup</code> to install a pre-compiled version of the rust std library compiled with musl which you can use then to statically compile rust applications. I want to build static rust applications with my customized version of musl."}], "owner": {"reputation": 1641, "user_id": 7527436, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/da2b5613a6f66629ad967c5b18ef4545?s=128&d=identicon&r=PG&f=1", "display_name": "fzgregor", "link": "https://stackoverflow.com/users/7527436/fzgregor"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 1387, "favorite_count": 0, "answer_count": 0, "score": 6, "last_activity_date": 1487153422, "creation_date": 1486931261, "last_edit_date": 1487153422, "question_id": 42192850, "link": "https://stackoverflow.com/questions/42192850/how-do-i-build-the-rust-standard-library-with-a-custom-musl", "title": "How do I build the Rust standard library with a custom musl?", "body": "<p>I want to build static Rust executables with a customized version of musl. As a first step, I'm making myself familiar with Rust's build system.</p>\n\n<p>I took the slightly outdated <a href=\"https://github.com/fzgregor/docker-rust-musl\" rel=\"nofollow noreferrer\"><code>docker-rust-musl</code></a> GitHub project and updated URLs that went out-of-date. Everything seems to work well with the build, but when I want to compile with <code>x86_64-unknown-linux-musl</code> the compiler doesn't find the musl <code>std</code> crate:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>root@beb234fba4af:/build# cat example.rs\nfn main() { println!(\"hi!\"); panic!(\"failed\"); }\n\nroot@beb234fba4af:/build# rustc --target=x86_64-unknown-linux-musl example.rs\nerror[E0463]: can't find crate for `std`\n  |\n  = note: the `x86_64-unknown-linux-musl` target may not be installed\n\nerror: aborting due to previous error\n</code></pre>\n\n<p>In fact, <code>/usr/local/lib/rustlib/</code> only contains the <code>x86_64-unknown-linux-gnu</code> directory, even though output during the build indicates that <code>x86_64-unknown-linux-musl</code> is built:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[...]\nBuilding stage2 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-musl)\n[...]\n</code></pre>\n\n<p>However, when it comes to the installation step <code>x86_64-unknown-linux-gnu</code> is nowhere to be seen:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[...]\nInstall std stage2 (x86_64-unknown-linux-gnu)\ninstall: creating uninstall script at /usr/local/lib/rustlib/uninstall.sh\ninstall: installing component 'rust-std-x86_64-unknown-linux-gnu'\n\n    std is standing at the ready.\n\nInstall rustc stage2 (x86_64-unknown-linux-gnu)\ninstall: creating uninstall script at /usr/local/lib/rustlib/uninstall.sh\ninstall: installing component 'rustc'\n\n    Rust is ready to roll.\n\nBuild completed in 0:31:07\n</code></pre>\n\n<p>What do I have to do to install the <code>x86_64-unknown-linux-musl</code> Rust standard library?</p>\n\n<p><strong>Progress:</strong></p>\n\n<p>Digging through the build environment revealed that <code>make all</code> builds the Rust <code>std</code> library with <code>musl</code> but the subsequent <code>make install</code> step does not install it.\nWe have a <a href=\"https://github.com/fzgregor/docker-rust-musl/commit/e82d24e07f43a70de4a22dc6a2bf676d4187f196\" rel=\"nofollow noreferrer\">temporary fix</a> in the <code>build.sh</code> script of the previously mentioned docker image. \nIt is unclear whether that is an issue of the build environment or of its usage.</p>\n\n<p>The issue is <a href=\"https://github.com/rust-lang/rust/issues/39235\" rel=\"nofollow noreferrer\">known</a> to the Rust developers. No eta of the fix, however.</p>\n"}, {"tags": ["io", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486945081, "post_id": 42189386, "comment_id": 71551736, "body": "This is an excellent answer too, would be nice to mark both as correct!"}, {"owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "reply_to_user": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486979651, "post_id": 42189386, "comment_id": 71563700, "body": "@ideasman42 I would not mind if you mark this as answer, as this also applies if <code>Seek</code> is not or cannot be implemented."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "edited": false, "score": 0, "creation_date": 1486991682, "post_id": 42189386, "comment_id": 71571022, "body": "@wimh eh, I dunno. Accepting is up to whatever helps the OP the most in their specific case. Upvotes come to the answers that future people find useful."}, {"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1570897527, "post_id": 42189386, "comment_id": 103065438, "body": "Is there a crate defining this struct? It seems to be handy, and I don&#39;t want to reinvent it everywhere."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 0, "creation_date": 1571059039, "post_id": 42189386, "comment_id": 103103934, "body": "@SOFe it probably is somewhere, but I don&#39;t know where."}, {"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 1, "creation_date": 1571072049, "post_id": 42189386, "comment_id": 103110388, "body": "I ended up making a library for that: <a href=\"https://docs.rs/count-write\" rel=\"nofollow noreferrer\">docs.rs/count-write</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1486913095, "creation_date": 1486913095, "answer_id": 42189386, "question_id": 42187591, "link": "https://stackoverflow.com/questions/42187591/how-to-keep-track-of-how-many-bytes-written-when-using-stdiowrite/42189386#42189386", "title": "How to keep track of how many bytes written when using &#39;std::io::Write&#39;?", "body": "<p><code>Write</code> has two required methods: <code>write</code> and <code>flush</code>. Since <code>write</code> already returns the number of bytes written, you just track that:</p>\n\n<pre><code>use std::io::{self, Write};\n\nstruct ByteCounter&lt;W&gt; {\n    inner: W,\n    count: usize,\n}\n\nimpl&lt;W&gt; ByteCounter&lt;W&gt;\n    where W: Write\n{\n    fn new(inner: W) -&gt; Self {\n        ByteCounter {\n            inner: inner,\n            count: 0,\n        }\n    }\n\n    fn into_inner(self) -&gt; W {\n        self.inner\n    }\n\n    fn bytes_written(&amp;self) -&gt; usize {\n        self.count\n    }\n}\n\nimpl&lt;W&gt; Write for ByteCounter&lt;W&gt;\n    where W: Write\n{\n    fn write(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt; {\n        let res = self.inner.write(buf);\n        if let Ok(size) = res {\n            self.count += size\n        }\n        res\n    }\n\n    fn flush(&amp;mut self) -&gt; io::Result&lt;()&gt; {\n        self.inner.flush()\n    }\n}\n\nfn main() {\n    let out = std::io::stdout();\n    let mut out = ByteCounter::new(out);\n    writeln!(&amp;mut out, \"Hello, world! {}\", 42).unwrap();\n    println!(\"Wrote {} bytes\", out.bytes_written());\n}\n</code></pre>\n\n<p>It's important to <em>not</em> delegate <code>write_all</code> or <code>write_fmt</code> because these do not return the count of bytes. Delegating them would allow bytes to be written and not tracked.</p>\n"}, {"tags": [], "owner": {"reputation": 14451, "user_id": 33499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/17c590aa4c56918b47c7ba5e39dba5d8?s=128&d=identicon&r=PG", "display_name": "wimh", "link": "https://stackoverflow.com/users/33499/wimh"}, "is_accepted": false, "score": 5, "last_activity_date": 1486946950, "last_edit_date": 1486946950, "creation_date": 1486913136, "answer_id": 42189395, "question_id": 42187591, "link": "https://stackoverflow.com/questions/42187591/how-to-keep-track-of-how-many-bytes-written-when-using-stdiowrite/42189395#42189395", "title": "How to keep track of how many bytes written when using &#39;std::io::Write&#39;?", "body": "<p>If the type you write to implements <a href=\"https://doc.rust-lang.org/std/io/trait.Seek.html\" rel=\"nofollow noreferrer\"><code>std::io::Seek</code></a>, you can use <code>seek</code> to get the current position:</p>\n\n<pre><code>pos = f.seek(SeekFrom::Current(0))?;\n</code></pre>\n\n<p><code>Seek</code> is implemented by <a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"nofollow noreferrer\"><code>std::fs::File</code></a> (and <a href=\"https://doc.rust-lang.org/std/io/struct.BufWriter.html\" rel=\"nofollow noreferrer\"><code>std::io::BufWriter</code></a> if the wrapped type implements <code>Seek</code> too).</p>\n\n<hr>\n\n<p>So the function signature:</p>\n\n<pre><code>use ::std::io::{Write, Seek, SeekFrom, Error};\n\nfn my_write&lt;W: Write&gt;(f: &amp;mut W) -&gt; Result&lt;(), Error&gt; { ... }\n</code></pre>\n\n<p>Needs to have the <code>Seek</code> trait added:</p>\n\n<pre><code>fn my_write&lt;W: Write + Seek&gt;(f: &amp;mut W) -&gt; Result&lt;(), Error&gt; { ... }\n</code></pre>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 537, "favorite_count": 0, "accepted_answer_id": 42189386, "answer_count": 2, "score": 6, "last_activity_date": 1506864697, "creation_date": 1486902908, "last_edit_date": 1506864697, "question_id": 42187591, "link": "https://stackoverflow.com/questions/42187591/how-to-keep-track-of-how-many-bytes-written-when-using-stdiowrite", "title": "How to keep track of how many bytes written when using &#39;std::io::Write&#39;?", "body": "<p>When writing to a binary file-format, its useful to be able to check how many bytes have been written (for alignment for example), or just to ensure nested functions wrote the correct amount of data.</p>\n\n<p>Is there a way to inspect <code>std::io::Write</code> to know how much has been written? If not, what would be a good approach to wrap the writer so it could track how many bytes have been written?</p>\n"}, {"tags": ["parsing", "rust", "nom"], "answers": [{"comments": [{"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1486890817, "post_id": 42184133, "comment_id": 71533970, "body": "Thank you that works very good! How long did it take you until you know nom enough to do that in a reasonable amount of time? I&#39;m working on a larger project that requires parsing a lot of strings, for simpler stuff I use nom but still struggle to find my way around, like, i never saw an example of <code>!recognize</code> before"}, {"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1486891735, "post_id": 42184133, "comment_id": 71534162, "body": "For example: i want to parse a string now first by a function i wrote <code>parse_camel_case</code> then for each word parse it by <code>parse_camel_case</code>. I am checking the example parsers but nothing seems to what I want do, pipeing the <code>Vec&lt;&amp;str&gt;</code> from one parser to another. No idea how to proceed then."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1486913630, "post_id": 42184133, "comment_id": 71540744, "body": "This is basically why I participate in Stack Overflow ;-) For example, I knew about <code>recognize!</code> because <a href=\"http://stackoverflow.com/q/36300373/155423\">someone asked about it before</a>. I&#39;m not the biggest fan of nom&#39;s documentation (so I wrote my own parser library with <b>even less</b> documentation, naturally). Your follow up question should probably be posted as a separate topic as I don&#39;t know how to solve it and it&#39;s unlikely someone who does will read these comments."}, {"owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "edited": false, "score": 0, "creation_date": 1486947337, "post_id": 42184133, "comment_id": 71552305, "body": "Thanks, yeah, this is what also prevents me creating my &quot;main parser&quot; using nom, I loose too much time trying to find how to use things. So I mainly  use nom for parsing smaller substrings which still seem doable. I will probably create a follow up question, for now I created a regular function that first calls snake case split and then for each item there splits it again for camel case. Works ok for now, but not so pretty code."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1486872740, "creation_date": 1486872740, "answer_id": 42184133, "question_id": 42183708, "link": "https://stackoverflow.com/questions/42183708/parsing-camel-case-strings-with-nom/42184133#42184133", "title": "Parsing camel case strings with nom", "body": "<p>You are looking for things that start with any character, followed by a number of non-uppercase letters. As a regex, that would look akin to <code>.[a-z]*</code>. Translated directly to nom, that's something like:</p>\n\n<pre><code>#[macro_use]\nextern crate nom;\n\nuse nom::anychar;\n\nfn is_uppercase(a: u8) -&gt; bool { (a as char).is_uppercase() }\n\nnamed!(char_and_more_char&lt;()&gt;, do_parse!(\n    anychar &gt;&gt;\n    take_till!(is_uppercase) &gt;&gt;\n    ()\n));\n\nnamed!(camel_case&lt;(&amp;str)&gt;, map_res!(recognize!(char_and_more_char), std::str::from_utf8));\n\nnamed!(p_camel_case&lt;&amp;[u8], Vec&lt;&amp;str&gt;&gt;, many0!(camel_case));\n\nfn main() {\n    println!(\"{:?}\", p_camel_case(b\"helloWorld\"));\n    // Done([], [\"hello\", \"World\"])\n\n    println!(\"{:?}\", p_camel_case(b\"HelloWorld\"));\n    // Done([], [\"Hello\", \"World\"])\n}\n</code></pre>\n\n<p>Of course, you probably need to be careful about actually matching proper non-ASCII bytes, but you should be able to extend this in a straight-forward manner.</p>\n"}], "owner": {"reputation": 14748, "user_id": 132728, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/3e932264fb24dfdfd63dc467bfb1e957?s=128&d=identicon&r=PG", "display_name": "Max", "link": "https://stackoverflow.com/users/132728/max"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 957, "favorite_count": 0, "accepted_answer_id": 42184133, "answer_count": 1, "score": 2, "last_activity_date": 1486872740, "creation_date": 1486867819, "last_edit_date": 1486871941, "question_id": 42183708, "link": "https://stackoverflow.com/questions/42183708/parsing-camel-case-strings-with-nom", "title": "Parsing camel case strings with nom", "body": "<p>I want to parse a string like <code>\"ParseThis\"</code> or <code>\"parseThis\"</code> into a vector of strings like <code>[\"Parse\", \"This\"]</code> or <code>[\"parse\", \"this\"]</code> using the nom crate.</p>\n\n<p>All attempts I've tried do not return the expected result. It's possible that I don't understand yet how to use all the functions in nom.</p>\n\n<p>I tried:</p>\n\n<pre><code>named!(camel_case&lt;(&amp;str)&gt;, \n       map_res!(\n           take_till!(is_not_uppercase),\n           std::str::from_utf8));\n\nnamed!(p_camel_case&lt;&amp;[u8], Vec&lt;&amp;str&gt;&gt;,\n       many0!(camel_case));\n</code></pre>\n\n<p>But <code>p_camel_case</code> just returns a <code>Error(Many0)</code> for parsing a string that starts with an uppercase letter and for parsing a string that starts with a lowercase letter it returns <code>Done</code> but with an empty string as a result.</p>\n\n<p>How can I tell nom that I want to parse the string, separated by uppercase letters (given there can be a first uppercase or lowercase letter)?</p>\n"}, {"tags": ["multithreading", "rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1486912200, "creation_date": 1486912200, "answer_id": 42189226, "question_id": 42182573, "link": "https://stackoverflow.com/questions/42182573/program-with-a-spawned-thread-panics-when-optimization-enabled/42189226#42189226", "title": "Program with a spawned thread panics when optimization enabled", "body": "<p>This is a <a href=\"https://github.com/rust-lang/rust/issues/28728\">known issue (#28728)</a>. In short, LLVM optimizes away loops that <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-144834539\">have no observable side-effects</a>:</p>\n\n<blockquote>\n  <p>The implementation may assume that any thread will eventually do one\n  of the following:</p>\n  \n  <ul>\n  <li>terminate</li>\n  <li>make a call to a library I/O function</li>\n  <li>access or modify a volatile object, or</li>\n  <li>perform a synchronization operation or an atomic operation</li>\n  </ul>\n</blockquote>\n\n<p>In the cases here, none of these hold, so LLVM removes the loop entirely. However, the Rust compiler has generated code that assumes the loop never returns. This mismatch causes the crash.</p>\n\n<p>Since having an infinite loop with no side-effects is basically useless, this issue is <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-144834431\">not of critical priority</a>. The Rust team is currently <a href=\"https://llvm.org/bugs/show_bug.cgi?id=31217\">waiting for LLVM to provide a better solution</a>.</p>\n\n<p>As a workaround, you should simply do something inside the loop, which is likely what you want to do anyway ^_^</p>\n"}], "owner": {"reputation": 671, "user_id": 7551820, "user_type": "registered", "accept_rate": 100, "profile_image": "https://lh6.googleusercontent.com/-qFYkSwbZduE/AAAAAAAAAAI/AAAAAAAAAdQ/MmHqIWG-_xQ/photo.jpg?sz=128", "display_name": "Laurence", "link": "https://stackoverflow.com/users/7551820/laurence"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 227, "favorite_count": 0, "accepted_answer_id": 42189226, "answer_count": 1, "score": 9, "last_activity_date": 1486912200, "creation_date": 1486856623, "last_edit_date": 1486875539, "question_id": 42182573, "link": "https://stackoverflow.com/questions/42182573/program-with-a-spawned-thread-panics-when-optimization-enabled", "title": "Program with a spawned thread panics when optimization enabled", "body": "<p>When I use <code>rustc 1.rs</code> to compile the following code, it runs endlessly as expected.</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    thread::spawn(|| {\n        let a = 2;\n        loop {\n            a*a;\n        }\n    }).join();\n}\n</code></pre>\n\n<p>A shorter version:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    thread::spawn(|| {\n        loop {}\n    }).join();\n}\n</code></pre>\n\n<p>However, if I use <code>rustc -O 1.rs</code> to compile two programs above, they crash:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>thread '&lt;unnamed&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 0, message: \"Success\" } }', src/libcore/result.rs:837\nstack backtrace:\n1:     0x5650bd0acada - std::sys::imp::backtrace::tracing::imp::write::h917062bce4ff48c3\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/sys/unix/backtrace/tracing/gcc_s.rs:42\n2:     0x5650bd0b068f - std::panicking::default_hook::{{closure}}::h0bacac31b5ed1870\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:247\n3:     0x5650bd0aee7c - std::panicking::default_hook::h5897799da33ece67\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:263\n4:     0x5650bd0af4d7 - std::panicking::rust_panic_with_hook::h109e116a3a861224\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:451\n5:     0x5650bd0af364 - std::panicking::begin_panic::hbb38be1379e09df0\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:413\n6:     0x5650bd0af289 - std::panicking::begin_panic_fmt::h26713cea9bce3ab0\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:397\n7:     0x5650bd0af217 - rust_begin_unwind\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/panicking.rs:373\n8:     0x5650bd0e2f3d - core::panicking::panic_fmt::hcfbb59eeb7f27f75\n                        at /build/rustc-1.14.0+dfsg1/src/libcore/panicking.rs:69\n9:     0x5650bd0a6e84 - core::result::unwrap_failed::h15a0fc826f4081f4\n10:     0x5650bd0b7ffa - __rust_maybe_catch_panic\n                        at /build/rustc-1.14.0+dfsg1/src/libpanic_unwind/lib.rs:97\n11:     0x5650bd0a6fc1 - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::he32a93ebea7bc7ad\n12:     0x5650bd0ae6c4 - std::sys::imp::thread::Thread::new::thread_start::ha102a6120fc52763\n                        at /build/rustc-1.14.0+dfsg1/src/liballoc/boxed.rs:605\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/sys_common/thread.rs:21\n                        at /build/rustc-1.14.0+dfsg1/src/libstd/sys/unix/thread.rs:84\n13:     0x7fc2d0042423 - start_thread\n14:     0x7fc2cfb6e9be - __clone\n15:                0x0 - &lt;unknown&gt;\n</code></pre>\n\n<p>If I remove all code in the closure, it exits with no error:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    thread::spawn(|| {\n    }).join();\n}\n</code></pre>\n\n<p>If I add <code>println!()</code> in the loop, it works well too:</p>\n\n<pre><code>use std::thread;\n\nfn main() {\n    thread::spawn(|| {\n        loop {\n            println!(\"123\")\n        }\n    }).join();\n}\n</code></pre>\n\n<p>I tested this on Rust 1.14 and 1.15, the same problem appears in both.</p>\n\n<p>Is this because I'm using something wrong or is it a bug?</p>\n"}, {"tags": ["rust", "traits"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486838231, "post_id": 42178842, "comment_id": 71522441, "body": "Cross-posted on <a href=\"https://www.reddit.com/r/rust/comments/5tfrfc/implementation_for_trait_that_is_already_provided/\" rel=\"nofollow noreferrer\">r/rust</a>."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1486836391, "creation_date": 1486836391, "answer_id": 42179361, "question_id": 42178842, "link": "https://stackoverflow.com/questions/42178842/implement-from-on-a-trait-which-has-self-as-member/42179361#42179361", "title": "Implement From on a trait which has Self as member", "body": "<p>There is actually a precedent in the Rust standard library: <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow noreferrer\"><code>Iterator::collect</code></a> is about creating a new value from an iterator.</p>\n\n<p>Following this model, rather than implementing <a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"nofollow noreferrer\"><code>std::convert::From</code></a>, you should implement <a href=\"https://doc.rust-lang.org/std/iter/trait.FromIterator.html\" rel=\"nofollow noreferrer\"><code>std::iter::FromIterator</code></a>.</p>\n\n<p>And then there will be no conflict.</p>\n"}], "owner": {"reputation": 5620, "user_id": 2281094, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/519338ca46fa26b27cd23ea7db40c2c5?s=128&d=identicon&r=PG", "display_name": "Zorf", "link": "https://stackoverflow.com/users/2281094/zorf"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 111, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1486848886, "creation_date": 1486833670, "last_edit_date": 1486848886, "question_id": 42178842, "link": "https://stackoverflow.com/questions/42178842/implement-from-on-a-trait-which-has-self-as-member", "title": "Implement From on a trait which has Self as member", "body": "<p>I want to be able to convert any iterator into <code>MyType</code>.</p>\n\n<pre><code>impl&lt;T, I: IntoIterator&lt;Item = T&gt;&gt; From&lt;I&gt; for MyType&lt;T&gt;\n</code></pre>\n\n<p>As in</p>\n\n<pre><code>MyType&lt;T&gt;::from&lt;I: IntoIterator&gt;(iter: I) -&gt; MyType&lt;T&gt;\n</code></pre>\n\n<p>As one expects, it makes sense for <code>MyType</code> to itself be convertible to an <code>Iterator</code> and satisfy <code>IntoIterator</code> as a trait, and it does.</p>\n\n<p>But <code>From</code> is automatically implemented reflexively for any type, any type can convert into itself of course, and this is where the compiler barks:</p>\n\n<pre><code>error[E0119]: conflicting implementations of trait \n`std::convert::From&lt;MyType&lt;_&gt;&gt;` for type `MyType&lt;_&gt;`:\n</code></pre>\n\n<p>My generic implementation for all <code>IntoIterators</code> conflicts with the default one. If Rust did not provide a default one then it would actually work albeit being needlessly expensive.</p>\n\n<p>Is there any way to implement the trait for any member of <code>IntoIterator</code> except <code>MyType</code>?</p>\n"}, {"tags": ["json", "rust"], "comments": [{"owner": {"reputation": 175, "user_id": 7550581, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f63f367004c401f48d621323a443b4b2?s=128&d=identicon&r=PG&f=1", "display_name": "kriw", "link": "https://stackoverflow.com/users/7550581/kriw"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486913044, "post_id": 42178125, "comment_id": 71540548, "body": "Sorry, I noticed that I mistook the enum definition, so modified the definition."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486914188, "post_id": 42178125, "comment_id": 71540955, "body": "Good! Then I think the <code>build.rs</code> approach is feasible. Isolate this definition in the smallest file possible and you&#39;re good to go."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 10, "last_activity_date": 1486830670, "creation_date": 1486830670, "answer_id": 42178319, "question_id": 42178125, "link": "https://stackoverflow.com/questions/42178125/can-rust-macros-parse-json/42178319#42178319", "title": "Can Rust macros parse JSON?", "body": "<p>There are multiple ways to parse json at compile-time. In order of \"involvement\":</p>\n\n<ul>\n<li>using the <a href=\"http://doc.crates.io/build-script.html\"><code>build.rs</code> script</a> to generate your source code during build; it's technically cheating, of course, but it's easy,</li>\n<li>using a <code>const</code> function in combination with the <a href=\"https://doc.rust-lang.org/std/macro.include_str.html\"><code>include_str!</code></a>, it would require nightly and I am not sure whether the compile-time engine is powerful enough at the time being,</li>\n<li>writing a compiler plugin, which is what <code>include_str!</code> is, it also requires nightly and the interface may change with each release of the compiler.</li>\n</ul>\n\n<p>Thus I would advise you to use the <code>build.rs</code> script approach for now since it's both simple and stable.</p>\n"}], "owner": {"reputation": 175, "user_id": 7550581, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f63f367004c401f48d621323a443b4b2?s=128&d=identicon&r=PG&f=1", "display_name": "kriw", "link": "https://stackoverflow.com/users/7550581/kriw"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 490, "favorite_count": 1, "accepted_answer_id": 42178319, "answer_count": 1, "score": 12, "last_activity_date": 1486912920, "creation_date": 1486829663, "last_edit_date": 1486912920, "question_id": 42178125, "link": "https://stackoverflow.com/questions/42178125/can-rust-macros-parse-json", "title": "Can Rust macros parse JSON?", "body": "<p>I'd like to define constant values by using a JSON configuration file, something like this:</p>\n\n<pre><code>enum E {\n    ONE = get!(include_json!(\"a.json\"), 0),\n    TWO = get!(include_json!(\"a.json\"), 1),\n}\n</code></pre>\n\n<p>Is there any way to parse JSON at compile-time?</p>\n"}, {"tags": ["rust", "llvm", "llvm-ir"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1486828590, "post_id": 42177712, "comment_id": 71519059, "body": "I am not sure how you&#39;ll manage to do it, but I certainly wish you luck. Having mutation testing in Rust would be awesome."}], "answers": [{"tags": [], "owner": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "is_accepted": true, "score": 1, "last_activity_date": 1487079507, "last_edit_date": 1487079507, "creation_date": 1487079311, "answer_id": 42227574, "question_id": 42177712, "link": "https://stackoverflow.com/questions/42177712/how-do-i-find-the-function-pointers-for-tests-from-the-llvm-ir-code-of-a-rust-pr/42227574#42227574", "title": "How do I find the function pointers for tests from the LLVM IR code of a Rust program?", "body": "<p>I <a href=\"https://github.com/mull-project/mull/pull/109\" rel=\"nofollow noreferrer\">made it work</a> by using the brute-force approach that I outlined in my question. Using the LLVM C++ API, we:</p>\n\n<ul>\n<li>find a pointer to <code>test_main_static</code></li>\n<li>find the reference to <code>@ref.e</code> in <code>test_main_static</code></li>\n<li>enumerate through <code>@ref.e</code> structure and find the test function pointers</li>\n</ul>\n\n<p>The approach seems to work but our concern is still that it might be not portable across different versions of Rust/LLVM. One of our next steps will be to implement checks of integrity of the LLVM IR produced by <code>rustc --test</code>. Another step will be to try this <code>RustTestFinder</code> on real code bases and see if we have any problems.</p>\n\n<p>I would still appreciate any information about LLVM IR produced by <code>rustc --test</code> that could make things more straightforward.</p>\n"}], "owner": {"reputation": 9778, "user_id": 598057, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/af77229cbfe1a0bff2b5ea064ef3271a?s=128&d=identicon&r=PG", "display_name": "Stanislav Pankevich", "link": "https://stackoverflow.com/users/598057/stanislav-pankevich"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 256, "favorite_count": 1, "accepted_answer_id": 42227574, "answer_count": 1, "score": 7, "last_activity_date": 1487079507, "creation_date": 1486827450, "last_edit_date": 1486828750, "question_id": 42177712, "link": "https://stackoverflow.com/questions/42177712/how-do-i-find-the-function-pointers-for-tests-from-the-llvm-ir-code-of-a-rust-pr", "title": "How do I find the function pointers for tests from the LLVM IR code of a Rust program?", "body": "<p>We are developing a <a href=\"https://github.com/mull-project/mull\" rel=\"nofollow noreferrer\">mutation testing system based on LLVM</a>. The system supports C++ projects that use GoogleTest and I am trying to support Rust. To do so, we need to accomplish the following steps:</p>\n\n<ol>\n<li>Compile the language into LLVM IR. Rust supports this.</li>\n<li>Find the tests in the LLVM IR.</li>\n<li>Run the tests the code that is exercised by the tests (\"testees\").</li>\n</ol>\n\n<p>The challenge is to find the unit test methods via LLVM IR API.</p>\n\n<p>Consider <a href=\"https://github.com/mull-project/mull/blob/54d0e6f4ddea458a5d77fa707b26acef9f5a6093/lab/rust/example.rs\" rel=\"nofollow noreferrer\">the following example</a>. It has 4 tests and one testee function:</p>\n\n<pre><code>pub fn sum(a: i32, b: i32) -&gt; i32 {\n    return a + b;\n}\n\npub fn just_print() {\n    println!(\"I am just_print() function. I just say hello!\");\n}\n\n#[test]\nfn rusttest_foo_sum1() {\n    assert!(sum(3, 4) == 7);\n}\n\n#[test]\nfn rusttest_foo_sum2() {\n    assert!(sum(4, 5) == 9);\n}\n\n#[test]\nfn rusttest_foo_sum3() {\n    assert!(sum(5, 6) == 11);\n}\n\n#[test]\nfn rusttest_foo_sum4() {\n    assert!(sum(5, 6) == 11);\n}\n</code></pre>\n\n<p>This is <a href=\"https://github.com/mull-project/mull/blob/54d0e6f4ddea458a5d77fa707b26acef9f5a6093/lab/rust/example.ll.pretty\" rel=\"nofollow noreferrer\">the slightly prettified LLVM IR</a> that is produced when compiling this Rust code.</p>\n\n<p>Having explored that LLVM IR for a while, one can notice that Rust/Cargo run tests via a function <code>main</code> that invokes the <code>test_main_static</code> function which is given arrays of descriptions. Each description is a pair of a test function name and a test function pointer. <a href=\"https://github.com/mull-project/mull/blob/b5b9bdf1d3c8c876b45c3096006a4dd4dfba4493/lab/rust/example.ll.pretty#L47\" rel=\"nofollow noreferrer\">See the <code>@ref.e</code> at line 47</a>.</p>\n\n<p>Our challenge is to collect function pointers to these tests by parsing this sophisticated struct layout so that later we can run these functions via LLVM JIT by giving it the function pointers we accumulated.</p>\n\n<p>The obvious brute-force approach we are going to take is to run through this struct layout and parse the structs carefully and find the correct offsets of the test functions. This approach appears to be not portable across different versions of Rust or LLVM IR that might change in a future.</p>\n\n<p>What is the easiest and at the same time reliable way of finding the test function pointers, other than the default of parsing the offsets by hand?</p>\n\n<p>This question has been also <a href=\"https://users.rust-lang.org/t/need-help-in-parsing-llvm-ir-code-generated-by-a-rust-program-having-unit-tests/9407\" rel=\"nofollow noreferrer\">cross-posted to the Rust forums</a>.</p>\n"}, {"tags": ["rust", "pattern-matching", "boxing"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1486826623, "post_id": 42177226, "comment_id": 71518389, "body": "You read through the <b>entire Rust Book</b>, got to chapter 6.8 about <code>box</code> syntax, but didn&#39;t read the intro to chapter 6 entitled <a href=\"https://doc.rust-lang.org/stable/book/nightly-rust.html\" rel=\"nofollow noreferrer\">Nightly Rust</a> that describes the first 2/3 of your question?"}, {"owner": {"reputation": 399, "user_id": 7421598, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/cXstR.jpg?s=128&g=1", "display_name": "Eva Red", "link": "https://stackoverflow.com/users/7421598/eva-red"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486827081, "post_id": 42177226, "comment_id": 71518522, "body": "@S U are right. I just  skipped to the syntax of Rust. It seems that the intro is also important..."}], "answers": [{"comments": [{"owner": {"reputation": 399, "user_id": 7421598, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/cXstR.jpg?s=128&g=1", "display_name": "Eva Red", "link": "https://stackoverflow.com/users/7421598/eva-red"}, "edited": false, "score": 0, "creation_date": 1486826035, "post_id": 42177376, "comment_id": 71518217, "body": "Ah ha. So if I don&#39;t use match, is there any other way to get the content in the Box?"}, {"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "reply_to_user": {"reputation": 399, "user_id": 7421598, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/cXstR.jpg?s=128&g=1", "display_name": "Eva Red", "link": "https://stackoverflow.com/users/7421598/eva-red"}, "edited": false, "score": 1, "creation_date": 1486826148, "post_id": 42177376, "comment_id": 71518250, "body": "Yes; you just need to dereference it with an asterisk, e.g. <code>assert_eq!(*Box::new(1), 1);</code>"}, {"owner": {"reputation": 399, "user_id": 7421598, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/cXstR.jpg?s=128&g=1", "display_name": "Eva Red", "link": "https://stackoverflow.com/users/7421598/eva-red"}, "edited": false, "score": 0, "creation_date": 1486826703, "post_id": 42177376, "comment_id": 71518411, "body": "got it. Thank:)"}], "tags": [], "owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "is_accepted": true, "score": 11, "last_activity_date": 1486826684, "last_edit_date": 1486826684, "creation_date": 1486825553, "answer_id": 42177376, "question_id": 42177226, "link": "https://stackoverflow.com/questions/42177226/how-do-i-use-the-box-keyword-in-pattern-matching/42177376#42177376", "title": "How do I use the box keyword in pattern matching?", "body": "<p>You are using a <code>#[feature]</code> and those can only be used with a <a href=\"https://doc.rust-lang.org/book/nightly-rust.html\" rel=\"noreferrer\">nightly Rust compiler</a>. I don't think it is currently possible to match against a <code>Box</code> in stable Rust, but nightly allows the following way of doing it (like you attempted in the beginning):</p>\n\n<pre><code>#![feature(box_patterns)]\n\nfn main() {\n    let b = Some(Box::new(5));\n    match b {\n        Some(box y) =&gt; print!(\"{:?}\", y),\n        _ =&gt; print!(\"{:?}\", 1),\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1889, "user_id": 1036501, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/z8PwP.png?s=128&g=1", "display_name": "zstewart", "link": "https://stackoverflow.com/users/1036501/zstewart"}, "is_accepted": false, "score": 5, "last_activity_date": 1486826749, "last_edit_date": 1486826749, "creation_date": 1486825860, "answer_id": 42177423, "question_id": 42177226, "link": "https://stackoverflow.com/questions/42177226/how-do-i-use-the-box-keyword-in-pattern-matching/42177423#42177423", "title": "How do I use the box keyword in pattern matching?", "body": "<p>Rust has <a href=\"https://doc.rust-lang.org/stable/book/release-channels.html\" rel=\"noreferrer\">three release channels: stable, beta, and nightly</a>.</p>\n\n<p>Stable is the main release, and the Rust developers take care to make sure that features and updates made to the stable channel are, well, stable. That means that they're fully implemented and safe to use, but most importantly, when the Rust developers add a feature to stable, it means that they are making a commitment to backwards compatibility.</p>\n\n<p>The backwards compatibility commitment is important because it means that developers can start using stable features in libraries without having to worry about whether they'll have to rewrite large parts of their library from scratch when the language is updated.</p>\n\n<p>There are other features available in Rust, for example the <code>box</code> syntax, which aren't completely finalized yet. Many of these have partial or nearly complete implementations, but their exact syntax and implementation is still subject to change. Because these features are not considered stable, they are potentially subject to backwards-incompatible changes which could break your existing code if you depend on them.</p>\n\n<p>For example, there are, or were, two proposals for syntax for what's called \"placement new\" (avoiding the need to first allocate on the stack then copy to the heap):</p>\n\n<pre><code>in PLACE { BLOCK }\nPLACE &lt;- EXPR\n</code></pre>\n\n<p>When placement new reaches stable, only one syntax will be available. However, during development, the Rust team may experiment with multiple ways of doing things, and change them as they see fit. Anyone using unstable features will have to update their code any time the compiler or language APIs change.</p>\n\n<p>But sometimes people want to take that risk, and make use of features that aren't available in the stable release yet, knowing they may have their code broken by future releases.</p>\n\n<p>For that there is the nightly release. This is a version of the compiler that is built with unstable features and APIs enabled. If you use the nightly release, you can use <code>box</code> syntax and a variety of other features not deemed ready for stable release.</p>\n\n<p>Probably the easiest way to get a nightly build, and to switch between nightly and stable releases is to install rust using <a href=\"https://github.com/rust-lang-nursery/rustup.rs\" rel=\"noreferrer\">rustup</a>.</p>\n\n<p>Rustup makes it easy to install Rust compilers targeting different platforms, and to switch between stable, nightly, and beta releases.</p>\n"}], "owner": {"reputation": 399, "user_id": 7421598, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/cXstR.jpg?s=128&g=1", "display_name": "Eva Red", "link": "https://stackoverflow.com/users/7421598/eva-red"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4683, "favorite_count": 1, "accepted_answer_id": 42177376, "answer_count": 2, "score": 8, "last_activity_date": 1537361818, "creation_date": 1486824621, "last_edit_date": 1537361818, "question_id": 42177226, "link": "https://stackoverflow.com/questions/42177226/how-do-i-use-the-box-keyword-in-pattern-matching", "title": "How do I use the box keyword in pattern matching?", "body": "<p>This code is shown in <a href=\"https://doc.rust-lang.org/stable/book/box-syntax-and-patterns.html\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a>:</p>\n\n<pre><code>#![feature(box_syntax, box_patterns)]\n\nfn main() {\n    let b = Some(box 5);\n    match b {\n        Some(box n) if n &lt; 0 =&gt; {\n            println!(\"Box contains negative number {}\", n);\n        }\n        Some(box n) if n &gt;= 0 =&gt; {\n            println!(\"Box contains non-negative number {}\", n);\n        }\n        None =&gt; {\n            println!(\"No box\");\n        }\n        _ =&gt; unreachable!(),\n    }\n}\n</code></pre>\n\n<p>But when I run it, the following error occurs:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0554]: #[feature] may not be used on the stable release channel\n</code></pre>\n\n<p>I also tried</p>\n\n<pre><code>fn main() {\n    let b = Some(box 5);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: box expression syntax is experimental; \n</code></pre>\n\n<p>Is it because my version of Rust is not the latest? How I can get the content in <code>Box::new()</code>? I tried</p>\n\n<pre><code>fn main() {\n    let b = Some(Box::new(5));\n    match b {\n        Some(Box::new(y)) =&gt; print!(\"{:?}\", y), \n\n        _ =&gt; print!(\"{:?}\", 1),\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0164]: `Box::new` does not name a tuple variant or a tuple struct\n--&gt; main.rs:6:14\n  |\n6 |         Some(Box::new(y)) =&gt; print!(\"{:?}\", y), \n  |              ^^^^^^^^^^^ not a tuple variant or struct\n</code></pre>\n"}, {"tags": ["windows", "linker", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 1, "creation_date": 1486826800, "post_id": 42176644, "comment_id": 71518441, "body": "Is the ZeroMq compiled for gnu abi?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486854453, "post_id": 42176644, "comment_id": 71527302, "body": "Why are you using <code>[target.x86_64-pc-windows-gnu.chainsaw]</code>? Where did you learn about that syntax? The <a href=\"http://doc.crates.io/config.html\" rel=\"nofollow noreferrer\">Cargo docs don&#39;t mention it</a>, they only go so far as the triple."}], "owner": {"reputation": 30739, "user_id": 1804599, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/v91P3.jpg?s=128&g=1", "display_name": "rightfold", "link": "https://stackoverflow.com/users/1804599/rightfold"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 267, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1486829369, "creation_date": 1486821095, "last_edit_date": 1486829369, "question_id": 42176644, "link": "https://stackoverflow.com/questions/42176644/how-do-i-link-libzmq-on-windows", "title": "How do I link libzmq on Windows?", "body": "<p>I want to link libzmq with my Rust program. I have this in <code>~\\.cargo\\config</code>:</p>\n\n<pre><code>[target.x86_64-pc-windows-gnu.chainsaw]\nrustc-link-search = [\"C:\\\\Program Files\\\\ZeroMQ 4.0.4\\\\bin\"]\n</code></pre>\n\n<p>Running <code>cargo test</code> results in this error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Compiling chainsaw v0.0.1 (file:///D:/chainsaw)\nerror: linking with `gcc` failed: exit code: 1\n  |\n  = note: \"gcc\" \"-Wl,--enable-long-section-names\" \"-fno-use-linker-plugin\" \"-Wl,--nxcompat\" \"-nostdlib\" \"-m64\" \"C:\\\\Rust\n\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\crt2.o\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\rsbegin.o\" \"-L\"\n \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\" \"D:\\\\chainsaw\\\\target\\\\debug\\\\deps\\\\chainsaw-0154e16e13da8295.0.o\"\n \"-o\" \"D:\\\\chainsaw\\\\target\\\\debug\\\\deps\\\\chainsaw-0154e16e13da8295.exe\" \"-Wl,--gc-sections\" \"-nodefaultlibs\" \"-L\" \"D:\\\\\nchainsaw\\\\target\\\\debug\\\\deps\" \"-L\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\" \"-Wl,-Bstatic\" \"-Wl,-Bdynamic\"\n\"-l\" \"zmq\" \"D:\\\\chainsaw\\\\target\\\\debug\\\\deps\\\\liblibc-29ef97a68464c2b7.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows\n-gnu\\\\lib\\\\libtest-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libterm-f5a209a9.rlib\" \"C:\\\\Rust\\\n\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libgetopts-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\n\\\\libstd-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libpanic_unwind-f5a209a9.rlib\" \"C:\\\\Rust\\\\l\nib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libunwind-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\l\nibrand-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libcollections-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\n\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\librustc_unicode-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\li\nb\\\\liblibc-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\liballoc-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\r\nustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\liballoc_system-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\\nlibcore-f5a209a9.rlib\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\libcompiler_builtins-f5a209a9.rlib\" \"-l\" \"ke\nrnel32\" \"-l\" \"ws2_32\" \"-l\" \"userenv\" \"-l\" \"shell32\" \"-l\" \"advapi32\" \"-l\" \"gcc_eh\" \"-lmingwex\" \"-lmingw32\" \"-lgcc\" \"-lmsv\ncrt\" \"-luser32\" \"-lkernel32\" \"C:\\\\Rust\\\\lib\\\\rustlib\\\\x86_64-pc-windows-gnu\\\\lib\\\\rsend.o\"\n  = note: ld: cannot find -lzmq\n</code></pre>\n\n<p>As you can see, <code>-L \"C:\\Program Files\\ZeroMQ 4.0.4\\bin\"</code> is not being passed to the linker.</p>\n\n<p>Why does setting <code>rustc-link-search</code> in the Cargo config file not work?</p>\n\n<p>I have already checked these things:</p>\n\n<ul>\n<li>Cargo actually reads the config file</li>\n<li>The directory exists</li>\n<li><code>x86_64-pc-windows-gnu</code> is my target triple</li>\n<li>\"chainsaw\" is the name of my target</li>\n<li>The same error occurs when doing a clean build</li>\n</ul>\n"}, {"tags": ["rust", "html5ever", "kuchiki"], "comments": [{"owner": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1486827193, "post_id": 42175825, "comment_id": 71518572, "body": "I have never used kuchiki, but from looking at the documentation, maybe the following would work: since we are talking about HTML tags, you should be able to obtain the underlying element by calling <code>as_element</code> on the <code>Node</code>. That way you can obtain an <code>ElementData</code>, which has the fields <code>name</code> and <code>attributes</code>. I guess the <code>name</code> should be equal to the tag, so you could combine that with the attributes to reconstruct the HTML. This is just a guess, however."}, {"owner": {"user_type": "does_not_exist", "display_name": "user1115652"}, "reply_to_user": {"reputation": 4190, "user_id": 2110623, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/a5f1b5f95d5b3bb75901fb546cd1c52d?s=128&d=identicon&r=PG", "display_name": "aochagavia", "link": "https://stackoverflow.com/users/2110623/aochagavia"}, "edited": false, "score": 0, "creation_date": 1486840858, "post_id": 42175825, "comment_id": 71523337, "body": "thanks for answering. I know I can reconstruct a html tag, but ideally I would just get the part from the input-stream exactly, which might differ from a reconstruction, as if the software didn&#39;t consider this part of the text something that needed to be parsed. I realize this could only work if html5ever keeps track somehow of which text positions were responsible for each node in the parsed tree, and I haven&#39;t seen any proof of that."}, {"owner": {"reputation": 752, "user_id": 7496656, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zMGuk.jpg?s=128&g=1", "display_name": "Jan Zerebecki", "link": "https://stackoverflow.com/users/7496656/jan-zerebecki"}, "edited": false, "score": 0, "creation_date": 1488071904, "post_id": 42175825, "comment_id": 72069286, "body": "Just an idea I didn&#39; test: If nothing made a copy of the input string during parsing and construction of the nodes into the form you own, then the <code>&amp;str</code> of the node name would be pointing into the original input. If that were true you would have the text positions you spoke about."}, {"owner": {"reputation": 11388, "user_id": 220485, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/bTrsL.jpg?s=128&g=1", "display_name": "Daniel Fath", "link": "https://stackoverflow.com/users/220485/daniel-fath"}, "edited": false, "score": 0, "creation_date": 1577205729, "post_id": 42175825, "comment_id": 105121472, "body": "Could you give an example of what input you want vs what output you expect? You can&#39;t get open/close tags exactly, because by the time Kuchiki gets the tags, those values have been abstracted away. I.e. html doesn&#39;t care if you have open/closed or auto close tags."}, {"owner": {"reputation": 11878, "user_id": 588759, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/216ea4da5cae7be4030b6242ab90631c?s=128&d=identicon&r=PG", "display_name": "rofrol", "link": "https://stackoverflow.com/users/588759/rofrol"}, "edited": false, "score": 0, "creation_date": 1578395571, "post_id": 42175825, "comment_id": 105416575, "body": "Could this <a href=\"https://users.rust-lang.org/t/get-tag-name-with-kuchiki-html5ever\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/get-tag-name-with-kuchiki-html5ever</a> help you?"}], "owner": {"user_type": "does_not_exist", "display_name": "user1115652"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 171, "favorite_count": 0, "answer_count": 0, "score": 3, "last_activity_date": 1486826257, "creation_date": 1486815858, "last_edit_date": 1486826257, "question_id": 42175825, "link": "https://stackoverflow.com/questions/42175825/how-to-get-an-html-tag-as-2-strings-opening-tag-closing-tag-without-its-cont", "title": "How to get an HTML tag as 2 strings (opening tag, closing tag), without its contents from kuchiki?", "body": "<p>I am writing an HTML to Markdown converter in Rust, using Kuchiki to get access to the parsed tree from html5ever.</p>\n\n<p>For unknown HTML tags, I want to provide the possibility to ignore them and pass them through to the output string, but still processing their children as normal. For that, I need the textual representation of the tag without its contents, but I can't figure how best to do that.</p>\n\n<p>The best I can come up with is:</p>\n\n<ol>\n<li>Clone the node</li>\n<li>Drop its children</li>\n<li>Call <code>node.to_string</code></li>\n<li>\"parse\" the string with a regular expression to separate the opening and closing tags.</li>\n</ol>\n\n<p>I feel there must be a better way. I don't think Kuchiki provides this functionality out of the box, but I also don't know how to get access to the html5ever API through Kuchiki, and I also don't get from the html5ever API documentation whether they would provide some functionality like this. </p>\n"}, {"tags": ["recursion", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486827410, "post_id": 42174338, "comment_id": 71518639, "body": "Rust does not have tail-call optimization, so unbounded recursion is a bad idea. Prefer iteration."}, {"owner": {"reputation": 14780, "user_id": 210905, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e9e2d3ebb7e06cd11a5ca3fdaf12cce9?s=128&d=identicon&r=PG", "display_name": "Odomontois", "link": "https://stackoverflow.com/users/210905/odomontois"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486842201, "post_id": 42174338, "comment_id": 71523753, "body": "@Shepmaster Yeah, that&#39;s why I was hoping to make <code>fix</code> more like <code>Trampoline</code> later"}], "answers": [{"comments": [{"owner": {"reputation": 14780, "user_id": 210905, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e9e2d3ebb7e06cd11a5ca3fdaf12cce9?s=128&d=identicon&r=PG", "display_name": "Odomontois", "link": "https://stackoverflow.com/users/210905/odomontois"}, "edited": false, "score": 0, "creation_date": 1486816190, "post_id": 42175281, "comment_id": 71515152, "body": "What do you think about latter approach? Could it be done with some <code>trait Fix</code> with some existential definition of <code>F</code> ?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "reply_to_user": {"reputation": 14780, "user_id": 210905, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e9e2d3ebb7e06cd11a5ca3fdaf12cce9?s=128&d=identicon&r=PG", "display_name": "Odomontois", "link": "https://stackoverflow.com/users/210905/odomontois"}, "edited": false, "score": 2, "creation_date": 1486816383, "post_id": 42175281, "comment_id": 71515215, "body": "@Odomontois You can&#39;t return a closure by value.  I mean that in the &quot;you can&#39;t eat the sun&quot; sense, not the &quot;you can&#39;t eat an entire horse (unless you&#39;re <i>really</i> hungry) &quot; sense.  No amount of trying to be clever will get around not being able to do it.    You <i>will</i> be able to once <code>impl Trait</code> is stable, but it isn&#39;t, so that doesn&#39;t help."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486828075, "post_id": 42175281, "comment_id": 71518874, "body": "<a href=\"http://play.integer32.com/?gist=dd2bd680003e46577d4d76135abfd514&amp;version=nightly\" rel=\"nofollow noreferrer\">I&#39;m not sure if <code>impl Trait</code> can even handle it now</a>."}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 10, "last_activity_date": 1486826984, "last_edit_date": 1486826984, "creation_date": 1486812292, "answer_id": 42175281, "question_id": 42174338, "link": "https://stackoverflow.com/questions/42174338/write-fix-point-function-in-rust/42175281#42175281", "title": "Write fix point function in Rust", "body": "<p>Firstly, variable names don't exist until after they're initialised.  You can't have <code>fixed</code> refer to itself like that.</p>\n\n<p>Secondly, you can't return closures by-value from a function, period.  Generic parameters are chosen by the <em>caller</em>, and the caller has no idea what the type of a closure inside the function is going to be.</p>\n\n<p>I'm not claiming that what follows is the best way of doing this, but it was the simplest I was able to come up with that type-checks.</p>\n\n<pre><code>fn guess_loop&lt;T&gt;(actual: T, recur: &amp;Fn(T)) -&gt; ()\n    where T: Ord + FromStr + Display + Copy,\n          &lt;T as FromStr&gt;::Err: Debug\n{\n    // ...\n}\n\nfn fix&lt;T, R, F&gt;(func: F) -&gt; Box&lt;Fn(T) -&gt; R&gt;\n    where T: 'static,\n          R: 'static,\n          F: Fn(T, &amp;Fn(T) -&gt; R) -&gt; R + 'static\n{\n    use std::cell::RefCell;\n    use std::rc::Rc;\n\n    let fixed = Rc::new(RefCell::new(None));\n    let fixed_fn = {\n        let fixed = fixed.clone();\n        move |val: T| -&gt; R {\n            let fixed_ref = fixed.borrow();\n            let fixed_ref: &amp;Box&lt;_&gt; = fixed_ref.as_ref().unwrap();\n            func(val, &amp;**fixed_ref)\n        }\n    };\n    *fixed.borrow_mut() = Some(Box::new(fixed_fn));\n\n    Box::new(move |val: T| -&gt; R {\n        let fixed_ref = fixed.borrow();\n        let fixed_ref: &amp;Box&lt;_&gt; = fixed_ref.as_ref().unwrap();\n        fixed_ref(val)\n    })\n}\n</code></pre>\n\n<p>In order for <code>fixed_fn</code> to refer to itself, we have to create something for it to read from <em>before</em> it exists.  Unfortunately, this means having a cycle, and Rust <em>hates</em> cycles.  So, we do this by constructing a reference-counted <code>RefCell&lt;Option&lt;_&gt;&gt;</code> that starts with <code>None</code>, and which will be mutated later to contain the fixed-point closure.</p>\n\n<p>Secondly, we can't use this handle as a callable, so we have to explicitly pull a pointer to the closure out so that we can pass it to <code>func</code>.</p>\n\n<p>Third, the compiler doesn't seem to be able to infer the type of <code>fixed</code> correctly.  I was hoping it would be able to work out that it is <code>Rc&lt;RefCell&lt;Option&lt;{closure}&gt;&gt;&gt;</code>, but it refused to do so.  As a result, we have to resort to storing a <code>Box&lt;Fn(T) -&gt; R&gt;</code>, since we can't name the type of the closure explicitly.</p>\n\n<p>Finally, we have to construct a <em>new</em> closure that takes a second handle to <code>fixed</code>, unpacks it, and calls it.  Again, we can't use <code>fixed</code> as a callable directly.  We also can't re-use the closure <em>inside</em> <code>fixed</code>, because to do that we'd have to put that inside its own <code>Rc</code> and at that point, things are starting to get crazy.</p>\n\n<p>... <em>more</em> crazy.</p>\n\n<p>Finally, we have to return this second closure in a <code>Box</code> because, as I said before, we can't return closures by value because we can't name their types in the signature.</p>\n\n<p>*<em>deep breath</em>*</p>\n\n<p>If someone has a simpler solution, I'd love to see it.  :P</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1486863703, "last_edit_date": 1486863703, "creation_date": 1486856828, "answer_id": 42182597, "question_id": 42174338, "link": "https://stackoverflow.com/questions/42174338/write-fix-point-function-in-rust/42182597#42182597", "title": "Write fix point function in Rust", "body": "<p>This can be done at zero runtime cost if you're willing to use unstable features (i.e. a nightly compiler) and willing to... obfuscate your code slightly.</p>\n\n<p>First, we need to turn the result of <code>fix</code> into a named struct. This struct needs to implement <code>Fn</code>, so we'll implement it manually (this is an unstable feature).</p>\n\n<pre><code>    #![feature(fn_traits)]\n    #![feature(unboxed_closures)]\n\nextern crate rand;\n\nuse rand::Rng;\nuse std::cmp::Ordering;\n\nfn try_guess&lt;T: Ord&gt;(guess: T, actual: T) -&gt; bool {\n    match guess.cmp(&amp;actual) {\n        Ordering::Less =&gt; {\n            println!(\"Too small\");\n            false\n        }\n        Ordering::Greater =&gt; {\n            println!(\"Too big\");\n            false\n        }\n        Ordering::Equal =&gt; {\n            println!(\"You win!\");\n            true\n        }\n    }\n}\n\nstruct Fix&lt;F&gt;\n    where F: Fn(i32, &amp;Fix&lt;F&gt;)\n{\n    func: F,\n}\n\nimpl&lt;F&gt; FnOnce&lt;(i32,)&gt; for Fix&lt;F&gt;\n    where F: Fn(i32, &amp;Fix&lt;F&gt;)\n{\n    type Output = ();\n\n    extern \"rust-call\" fn call_once(self, args: (i32,)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;F&gt; FnMut&lt;(i32,)&gt; for Fix&lt;F&gt;\n    where F: Fn(i32, &amp;Fix&lt;F&gt;)\n{\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (i32,)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;F&gt; Fn&lt;(i32,)&gt; for Fix&lt;F&gt;\n    where F: Fn(i32, &amp;Fix&lt;F&gt;)\n{\n    extern \"rust-call\" fn call(&amp;self, (val,): (i32,)) -&gt; Self::Output {\n        (self.func)(val, self);\n    }\n}\n\nfn fix&lt;F&gt;(func: F) -&gt; Fix&lt;F&gt;\n    where F: Fn(i32, &amp;Fix&lt;F&gt;)\n{\n    Fix { func: func }\n}\n\nfn guess_loop&lt;F&gt;(actual: i32, recur: &amp;F)\n    where F: Fn(i32)\n{\n    let guess_int = rand::thread_rng().gen_range(1, 51);\n\n    if guess_int != actual {\n        recur(actual)\n    }\n}\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1, 51);\n\n    fix(guess_loop)(secret_number);\n}\n</code></pre>\n\n<p>However, we're not done yet. This fails to compile with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0281]: type mismatch: the type `fn(i32, &amp;_) {guess_loop::&lt;_&gt;}` implements the trait `for&lt;'r&gt; std::ops::Fn&lt;(i32, &amp;'r _)&gt;`, but the trait `for&lt;'r&gt; std::ops::Fn&lt;(i32, &amp;'r Fix&lt;fn(i32, &amp;_) {guess_loop::&lt;_&gt;}&gt;)&gt;` is required (cyclic type of infinite size)\n  --&gt; src/main.rs:77:5\n   |\n77 |     fix(guess_loop)(secret_number);\n   |     ^^^\n   |\n   = note: required by `fix`\n</code></pre>\n\n<p><em>Note:</em> In case you're not aware, in Rust, each function has its own, zero-sized type. If a function is generic, then each instantiation of that function will have its own type as well. For example, the type of <code>guess_loop::&lt;X&gt;</code> will be reported by the compiler as <code>fn(i32, &amp;X) {guess_loop::&lt;X&gt;}</code> (as you can see in the error message above, except with underscores where the concrete type hasn't been resolved yet). That type can be coerced to a function pointer type implicitly in some contexts or explicitly with a cast (<code>as</code>).</p>\n\n<p>The problem is that, in the expression <code>fix(guess_loop)</code>, the compiler needs to instantiate <code>guess_loop</code>, which is a generic function, and it looks like the compiler isn't able to figure out the proper type to instantiate it with. In fact, the type we would like to set for type parameter <code>F</code> references the type of <code>guess_loop</code>. If we were to write it out in the style reported by the compiler, the type would look like <code>fn(i32, &amp;Fix&lt;X&gt;) {guess_loop::&lt;Fix&lt;&amp;X&gt;&gt;}</code>, where <code>X</code> is replaced by the type itself (you can see now where the \"cyclic type of infinite size\" comes from).</p>\n\n<p>We can solve this by replacing the <code>guess_loop</code> function by a <em>non-generic</em> struct (we'll call it <code>GuessLoop</code>) that implements <code>Fn</code> by referring to itself. (You can't do this with a normal function because you can't name a function's type.)</p>\n\n<pre><code>struct GuessLoop;\n\nimpl&lt;'a&gt; FnOnce&lt;(i32, &amp;'a Fix&lt;GuessLoop&gt;)&gt; for GuessLoop {\n    type Output = ();\n\n    extern \"rust-call\" fn call_once(self, args: (i32, &amp;Fix&lt;GuessLoop&gt;)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a&gt; FnMut&lt;(i32, &amp;'a Fix&lt;GuessLoop&gt;)&gt; for GuessLoop {\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (i32, &amp;Fix&lt;GuessLoop&gt;)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a&gt; Fn&lt;(i32, &amp;'a Fix&lt;GuessLoop&gt;)&gt; for GuessLoop {\n    extern \"rust-call\" fn call(&amp;self, (actual, recur): (i32, &amp;Fix&lt;GuessLoop&gt;)) -&gt; Self::Output {\n        let guess_int = rand::thread_rng().gen_range(1, 51);\n\n        if !try_guess(guess_int, actual) {\n            recur(actual)\n        }\n    }\n}\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1, 51);\n\n    fix(GuessLoop)(secret_number);\n}\n</code></pre>\n\n<p>Notice that <code>GuessLoop</code>'s implementation of <code>Fn</code> is no longer generic on the type of the <code>recur</code> parameter. What if we tried to make the implementation of <code>Fn</code> generic (while still leaving the struct itself non-generic, to avoid cyclic types)?</p>\n\n<pre><code>struct GuessLoop;\n\nimpl&lt;'a, F&gt; FnOnce&lt;(i32, &amp;'a F)&gt; for GuessLoop\n    where F: Fn(i32),\n{\n    type Output = ();\n\n    extern \"rust-call\" fn call_once(self, args: (i32, &amp;'a F)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a, F&gt; FnMut&lt;(i32, &amp;'a F)&gt; for GuessLoop\n    where F: Fn(i32),\n{\n    extern \"rust-call\" fn call_mut(&amp;mut self, args: (i32, &amp;'a F)) -&gt; Self::Output {\n        self.call(args)\n    }\n}\n\nimpl&lt;'a, F&gt; Fn&lt;(i32, &amp;'a F)&gt; for GuessLoop\n    where F: Fn(i32),\n{\n    extern \"rust-call\" fn call(&amp;self, (actual, recur): (i32, &amp;'a F)) -&gt; Self::Output {\n        let guess_int = rand::thread_rng().gen_range(1, 51);\n\n        if !try_guess(guess_int, actual) {\n            recur(actual)\n        }\n    }\n}\n</code></pre>\n\n<p>Unfortunately, this fails to compile with the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0275]: overflow evaluating the requirement `&lt;Fix&lt;GuessLoop&gt; as std::ops::FnOnce&lt;(i32,)&gt;&gt;::Output == ()`\n  --&gt; src/main.rs:99:5\n   |\n99 |     fix(GuessLoop)(secret_number);\n   |     ^^^\n   |\n   = note: required because of the requirements on the impl of `for&lt;'r&gt; std::ops::Fn&lt;(i32, &amp;'r Fix&lt;GuessLoop&gt;)&gt;` for `GuessLoop`\n   = note: required by `fix`\n</code></pre>\n\n<p>Essentially, the compiler is unable to verify that <code>Fix&lt;GuessLoop&gt;</code> implements <code>Fn(i32)</code>, because in order to do that, it needs to verify that <code>GuessLoop</code> implements <code>Fn(i32, &amp;Fix&lt;GuessLoop&gt;)</code>, but that is only true if <code>Fix&lt;GuessLoop&gt;</code> implements <code>Fn(i32)</code> (because that <code>impl</code> is conditional), which is only true if <code>GuessLoop</code> implements <code>Fn(i32, &amp;Fix&lt;GuessLoop&gt;)</code> (because that <code>impl</code> is conditional too), which... you get the idea. In order words, the two implementations of <code>Fn</code> here are dependent on each other, and the compiler is unable to resolve that.</p>\n"}, {"comments": [{"owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486870181, "post_id": 42182841, "comment_id": 71530354, "body": "@Shepmaster I wasn\u2019t aware that the <a href=\"https://github.com/rust-lang-nursery/fmt-rfcs/blob/master/guide/guide.md\" rel=\"nofollow noreferrer\">Rust style</a> requires <code>{</code> to go on the next line?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486870318, "post_id": 42182841, "comment_id": 71530368, "body": "My process is to copy code, paste it into the playground, and run rustfmt. That uses the default settings, which is the defacto universal style, as I understand it. Specifically, the <code>{</code> goes on the next line once there are <code>where</code> clauses, and each where clause goes on a unique line. The <code>{</code> is not on the next line in all cases."}, {"owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486878982, "post_id": 42182841, "comment_id": 71531762, "body": "Thanks for the info!"}], "tags": [], "owner": {"reputation": 7872, "user_id": 440302, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e785baf6d4a2626b8649d5b538c51858?s=128&d=identicon&r=PG", "display_name": "Rufflewind", "link": "https://stackoverflow.com/users/440302/rufflewind"}, "is_accepted": false, "score": 4, "last_activity_date": 1486863634, "last_edit_date": 1486863634, "creation_date": 1486858846, "answer_id": 42182841, "question_id": 42174338, "link": "https://stackoverflow.com/questions/42174338/write-fix-point-function-in-rust/42182841#42182841", "title": "Write fix point function in Rust", "body": "<p>Starting at where you left off:</p>\n\n<pre><code>fn fix&lt;T, R, F&gt;(func: fn(T, F) -&gt; R) -&gt; F\n    where F: Fn(T) -&gt; R\n{\n    |val: T| func(val, fix(func))\n}\n</code></pre>\n\n<p>The returned object has an unnameable closure type.  Using a generic type won\u2019t help here, since the type of the closure is decided by the callee, not the caller.  Here\u2019s where <code>impl</code> traits come in handy:</p>\n\n<pre><code>fn fix&lt;T, R, F&gt;(func: fn(T, F) -&gt; R) -&gt; impl Fn(T) -&gt; R\n    where F: Fn(T) -&gt; R\n{\n    |val: T| func(val, fix(func))\n}\n</code></pre>\n\n<p>We can\u2019t pass <code>fix(func)</code> to <code>func</code> because it expects a nameable type for <code>F</code>.  We\u2019ll have to settle for a trait object instead:</p>\n\n<pre><code>fn fix&lt;T, R&gt;(func: fn(T, &amp;Fn(T) -&gt; R) -&gt; R) -&gt; impl Fn(T) -&gt; R {\n    |val: T| func(val, &amp;fix(func))\n}\n</code></pre>\n\n<p>Now it\u2019s time to fight the lifetime checker.  The compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>only named lifetimes are allowed in `impl Trait`, but `` was found in the type `\u2026`\n</code></pre>\n\n<p>This is a somewhat cryptic message.  Since impl traits are always <code>'static</code> by default, this is a roundabout way of saying: \u201cthe closure does not live long enough for <code>'static</code>\u201d.  To get the <em>real</em> error message, we append <code>+ 'static</code> to the <code>impl Fn(T) -&gt; R</code> and recompile:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>closure may outlive the current function, but it borrows `func`, which is owned by the current function\n</code></pre>\n\n<p>So that was the real problem.  It is <em>borrowing</em> <code>func</code>.  We don\u2019t need to borrow <code>func</code> because <code>fn</code> is <code>Copy</code>, so we can duplicate it as much as we want.  Let\u2019s prepend the closure with <code>move</code> and get rid of the <code>+ 'static</code> from earlier:</p>\n\n<pre><code>fn fix&lt;T, R&gt;(func: fn(T, &amp;Fn(T) -&gt; R) -&gt; R) -&gt; impl Fn(T) -&gt; R {\n    move |val: T| func(val, &amp;fix(func))\n}\n</code></pre>\n\n<p>And voila, it works!  Well, almost \u2026 you\u2019ll have to edit <code>guess_loop</code> and change <code>fn(T) -&gt; ()</code> to <code>&amp;Fn(T) -&gt; ()</code>.  I\u2019m actually quite amazed that this solution doesn\u2019t require any allocations.</p>\n\n<p>If you can\u2019t use <code>impl</code> traits, you can instead write:</p>\n\n<pre><code>fn fix&lt;T, R&gt;(func: fn(T, &amp;Fn(T) -&gt; R) -&gt; R) -&gt; Box&lt;Fn(T) -&gt; R&gt;\n    where T: 'static,\n          R: 'static\n{\n    Box::new(move |val: T| func(val, fix(func).as_ref()))\n}\n</code></pre>\n\n<p>which is unfortunately not allocation-free.</p>\n\n<p>Also, we can generalize the result a bit to allow arbitrary closures and lifetimes:</p>\n\n<pre><code>fn fix&lt;'a, T, R, F&gt;(func: F) -&gt; impl 'a + Fn(T) -&gt; R\n    where F: 'a + Fn(T, &amp;Fn(T) -&gt; R) -&gt; R + Copy\n{\n    move |val: T| func(val, &amp;fix(func))\n}\n</code></pre>\n\n<hr>\n\n<p>In the process of figuring out a solution for your problem, I ended up writing a <em>simpler</em> version of <code>fix</code>, which actually ended up guide me towards a solution to <em>your</em> <code>fix</code> function:</p>\n\n<pre><code>type Lazy&lt;'a, T&gt; = Box&lt;FnBox() -&gt; T + 'a&gt;;\n\n// fix: (Lazy&lt;T&gt; -&gt; T) -&gt; T\nfn fix&lt;'a, T, F&gt;(f: F) -&gt; T\n    where F: Fn(Lazy&lt;'a, T&gt;) -&gt; T + Copy + 'a\n{\n    f(Box::new(move || fix(f)))\n}\n</code></pre>\n\n<p>Here\u2019s a demonstration of how <em>this</em> <code>fix</code> function could be used to calculate the factorial:</p>\n\n<pre><code>fn factorial(n: u64) -&gt; u64 {\n    // f: Lazy&lt;u64 -&gt; u64&gt; -&gt; u64 -&gt; u64\n    fn f(fac: Lazy&lt;'static, Box&lt;FnBox(u64) -&gt; u64&gt;&gt;) -&gt; Box&lt;FnBox(u64) -&gt; u64&gt; {\n        Box::new(move |n| {\n            if n == 0 {\n                1\n            } else { \n                n * fac()(n - 1)\n            }\n        })\n    }\n    fix(f)(n)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9010, "user_id": 812034, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/b646bea073b6f95ee97064322877a87a?s=128&d=identicon&r=PG", "display_name": "Earth Engine", "link": "https://stackoverflow.com/users/812034/earth-engine"}, "is_accepted": false, "score": 3, "last_activity_date": 1498736751, "last_edit_date": 1498736751, "creation_date": 1497781892, "answer_id": 44614059, "question_id": 42174338, "link": "https://stackoverflow.com/questions/42174338/write-fix-point-function-in-rust/44614059#44614059", "title": "Write fix point function in Rust", "body": "<p>This is an answer to <a href=\"https://stackoverflow.com/questions/44511030/how-to-implement-the-y-combinator-in-rust\">my own question about implementing the Y combinator</a> which is a subset of this question. In pure lambda expression, a version of the Y combinator looks like</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>\u03bbf.(\u03bbw.w w)(\u03bbw.f (w w))\n</code></pre>\n\n<p>The solution in <a href=\"https://rosettacode.org/wiki/Y_combinator#Rust\" rel=\"nofollow noreferrer\">Rosetta Code</a> is too complicated and used <code>Box</code> to allocate memory in the heap. I want to simplify this.</p>\n\n<p>First, let's implement the type <code>Mu&lt;T&gt;</code> as a trait instead.</p>\n\n<pre><code>trait Mu&lt;T&gt; {\n    fn unroll(&amp;self, &amp;Mu&lt;T&gt;) -&gt; T;\n}\n</code></pre>\n\n<p>Note that we need this trait to be object safe, which means we cannot ask for <code>Self</code> in any of its definition so the second parameter is typed <code>&amp;Mu&lt;T&gt;</code> and it is a trait object.</p>\n\n<p>Now we can write a generic <code>trait</code> implementation:</p>\n\n<pre><code>impl&lt;T, F: Fn(&amp;Mu&lt;T&gt;) -&gt; T&gt; Mu&lt;T&gt; for F {\n    fn unroll(&amp;self, o: &amp;Mu&lt;T&gt;) -&gt; T {\n        self(o)\n    }\n}\n</code></pre>\n\n<p>With this, we can now write the y combinator as the following:</p>\n\n<pre><code>fn y&lt;T, F: Fn(T) -&gt; T&gt;(f: &amp;F) -&gt; T {\n    (&amp;|w: &amp;Mu&lt;T&gt;| w.unroll(w))(&amp;|w: &amp;Mu&lt;T&gt;| f(w.unroll(w)))\n}\n</code></pre>\n\n<p>The above compiles in the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Rust playground</a> without enabling any features and using only the stable channel so this is a pretty good answer to my question.</p>\n\n<p>However, the above would not work in practice because Rust is call-by-value but the code above is the call-by-name Y combinator. </p>\n\n<h3>The call-by-value solution</h3>\n\n<p>To work with the stable channel without requiring any features, we cannot return closures (which requires <code>impl Trait</code>). Instead, I came up with making another <code>Mu2</code> type that takes two type parameters:</p>\n\n<pre><code>trait Mu2&lt;T, R&gt; {\n    fn unroll(&amp;self, &amp;Mu2&lt;T, R&gt;, t: T) -&gt; R;\n}\n</code></pre>\n\n<p>As above, let's implement this new trait.</p>\n\n<pre><code>impl&lt;T, R, F&gt; Mu2&lt;T, R&gt; for F\nwhere\n    F: Fn(&amp;Mu2&lt;T, R&gt;, T) -&gt; R,\n{\n    fn unroll(&amp;self, o: &amp;Mu2&lt;T, R&gt;, t: T) -&gt; R {\n        self(o, t)\n    }\n}\n</code></pre>\n\n<p>The new Y combinator:</p>\n\n<pre><code>fn y&lt;T, R, F&gt;(f: &amp;F, t: T) -&gt; R\nwhere\n    F: Fn(&amp;Fn(T) -&gt; R, T) -&gt; R,\n{\n    (&amp;|w: &amp;Mu2&lt;T, R&gt;, t| w.unroll(w, t))((&amp;|w: &amp;Mu2&lt;T, R&gt;, t| f(&amp;|t| w.unroll(w, t), t)), t)\n}\n</code></pre>\n\n<p>Now it is time to test our new facility.</p>\n\n<pre><code>fn main() {\n    let fac = &amp;|f: &amp;Fn(i32) -&gt; i32, i| if i &gt; 0 { i * f(i - 1) } else { 1 };\n    println!(\"{}\", y(fac, 10))\n}\n</code></pre>\n\n<p>Results in:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>3628800\n</code></pre>\n\n<p>All done!</p>\n\n<p>You can see that the <code>y</code> function has a slightly different signature than the questioner's <code>fix</code>, but it shouldn't matter.</p>\n\n<p><strong>The direct recurring version</strong></p>\n\n<p>The same technology to avoid returning a closure can be used for the normal direct recurring version as well:</p>\n\n<pre><code>fn fix&lt;T, R, F&gt;(f: &amp;F, t: T) -&gt; R\nwhere\n    F: Fn(&amp;Fn(T) -&gt; R, T) -&gt; R,\n{\n    f(&amp;|t| fix(f, t), t)        \n}\n\nfn fib(i: i32) -&gt; i32 {\n    let fn_ = &amp;|f:&amp;Fn(i32) -&gt; i32, x| if x &lt; 2 { x } else { f(x-1) + f(x-2) };\n    fix(fn_, i)\n}\n</code></pre>\n\n<p>Basically, whenever you need to return a closure from a function, you can add the closure's parameter to the function, and change the return type to the closure's return type. Later on when you need a real closure, just create the closure by partial evaluating that function.</p>\n\n<p><strong>Further discussions</strong></p>\n\n<p>Compare to other languages, in Rust there is a big difference: the function given to find fix point must not have any internal states. In Rust this is a requirement that the <code>F</code> type parameter of <code>y</code> must be <code>Fn</code>, not <code>FnMut</code> or <code>FnOnce</code>.</p>\n\n<p>For example, we cannot implement a <code>fix_mut</code> that would be used like</p>\n\n<pre><code>fn fib1(i: u32) -&gt; u32 {\n    let mut i0 = 1;\n    let mut i1 = 1;\n    let fn_ = &amp;mut |f:&amp;Fn(u32) -&gt; u32, x| \n        match x {\n            0 =&gt; i0,\n            1 =&gt; i1,\n            _ =&gt; {\n                let i2 = i0;\n                i0 = i1;\n                i1 = i1 + i2;\n                f(x)\n            }\n        };\n\n    fix_mut(fn_, i)\n}\n</code></pre>\n\n<p>without unsafe code whilst this version, if it works, performs much better (O(N)) than the version given above (O(2^N)).</p>\n\n<p>This is because you can only have one <code>&amp;mut</code> of one object at a single time. But the idea of Y combinator, or even the fix point function, requires capturing/passing the function at the same time when calling it, that's two references and you can't just mark any of them immutable without marking another so.</p>\n\n<p>On the other hand, I was wonder if we could do something that other languages usually not able to but Rust seems to be able. I was thinking restricting the first argument type of <code>F</code> from <code>Fn</code> to <code>FnOnce</code> (as <code>y</code> function will provide the implementation, change to <code>FnMut</code> does not make sense, we know it will not have states, but change to <code>FnOnce</code> means we want it to be used only once), Rust would not allow at the moment as we cannot pass unsized object by value.</p>\n\n<p>So basically, this implementation is the most flexible solution we could think of.</p>\n\n<p>By the way, the work around of the immutable restriction is to use pseudo-mutation:</p>\n\n<pre><code>fn fib(i: u32) -&gt; u32 {\n    let fn_ = &amp;|f:&amp;Fn((u32,u32,u32)) -&gt; u32, (x,i,j)| \n        match x {\n            0 =&gt; i,\n            1 =&gt; j,\n            _ =&gt; {\n                f((x-1,j,i+j))\n            }\n        };\n    fix(&amp;fn_, (i,1,1))\n}\n</code></pre>\n"}], "owner": {"reputation": 14780, "user_id": 210905, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/e9e2d3ebb7e06cd11a5ca3fdaf12cce9?s=128&d=identicon&r=PG", "display_name": "Odomontois", "link": "https://stackoverflow.com/users/210905/odomontois"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 910, "favorite_count": 1, "accepted_answer_id": 42175281, "answer_count": 4, "score": 12, "last_activity_date": 1498736751, "creation_date": 1486805592, "last_edit_date": 1486827240, "question_id": 42174338, "link": "https://stackoverflow.com/questions/42174338/write-fix-point-function-in-rust", "title": "Write fix point function in Rust", "body": "<p>I've just started Rust tutorial and ended with such code using recursion</p>\n\n<pre><code>extern crate rand;\n\nuse std::io;\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::str::FromStr;\nuse std::fmt::{Display, Debug};\n\nfn try_guess&lt;T: Ord&gt;(guess: T, actual: T) -&gt; bool {\n    match guess.cmp(&amp;actual) {\n        Ordering::Less =&gt; {\n            println!(\"Too small\");\n            false\n        }\n        Ordering::Greater =&gt; {\n            println!(\"Too big\");\n            false\n        }\n        Ordering::Equal =&gt; {\n            println!(\"You win!\");\n            true\n        }\n    }\n}\n\nfn guess_loop&lt;T: Ord + FromStr + Display + Copy&gt;(actual: T)\n    where &lt;T as FromStr&gt;::Err: Debug\n{\n    println!(\"PLease input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess_int: T = guess.trim()\n        .parse()\n        .expect(\"Should enter integer number\");\n\n    println!(\"You guessed {} !\", guess_int);\n\n    if !try_guess(guess_int, actual) {\n        guess_loop(actual)\n    }\n}\n\nfn main() {\n    println!(\"Guess the number!!!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 51);\n\n    guess_loop(secret_number);\n\n}\n</code></pre>\n\n<p>I was hoping to factor-out the recursion from the <code>guess_loop</code> function and introduced a fix point operator:</p>\n\n<pre><code>fn guess_loop&lt;T: Ord + FromStr + Display + Copy&gt;(actual: T, recur: fn(T) -&gt; ()) -&gt; ()\n    where &lt;T as FromStr&gt;::Err: Debug\n{\n    println!(\"PLease input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess_int: T = guess.trim()\n        .parse()\n        .expect(\"Should enter integer number\");\n\n    println!(\"You guessed {} !\", guess_int);\n\n    if !try_guess(guess_int, actual) {\n        recur(actual)\n    }\n}\n\nfn fix&lt;T, R&gt;(func: fn(T, fn(T) -&gt; R) -&gt; R) -&gt; fn(T) -&gt; R {\n    fn fixed(val: T) -&gt; R {\n        func(val, fixed)\n    }\n    fixed\n}\n\nfn main() {\n    println!(\"Guess the number!!!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 51);\n\n    fix(guess_loop)(secret_number);\n}\n</code></pre>\n\n<p>but this led to numerous errors, such as </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0401]: can't use type parameters from outer function; try using a local type parameter instead\n  --&gt; src/main.rs:49:19\n   |\n49 |     fn fixed(val: T) -&gt; R {\n   |                   ^ use of type variable from outer function\n\nerror[E0401]: can't use type parameters from outer function; try using a local type parameter instead\n  --&gt; src/main.rs:49:25\n   |\n49 |     fn fixed(val: T) -&gt; R {\n   |                         ^ use of type variable from outer function\n\nerror[E0434]: can't capture dynamic environment in a fn item; use the || { ... } closure form instead\n  --&gt; src/main.rs:50:9\n   |\n50 |         func(val, fixed)\n   |         ^^^^\n</code></pre>\n\n<p>My next attempt was changing <code>guess_loop</code>'s definition to</p>\n\n<pre><code>fn guess_loop&lt;T: Ord + FromStr + Display + Copy, F&gt;(actual: T, recur: F) -&gt; ()\nwhere &lt;T as FromStr&gt;::Err: Debug,\n      F: Fn(T) -&gt; ()\n{ ... }\n</code></pre>\n\n<p>and redefine <code>fix</code> as </p>\n\n<pre><code>fn fix&lt;T, R, F&gt;(func: fn(T, F) -&gt; R) -&gt; F\n    where F: Fn(T) -&gt; R\n{\n    let fixed = |val: T| func(val, fix(func));\n    fixed\n}\n</code></pre>\n\n<p>this led to </p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:53:5\n   |\n53 |     fixed\n   |     ^^^^^ expected type parameter, found closure\n   |\n   = note: expected type `F`\n   = note:    found type `[closure@src/main.rs:52:17: 52:46 func:_]`\n\nerror: the type of this value must be known in this context\n  --&gt; src/main.rs:61:5\n   |\n61 |     fix(guess_loop)(secret_number);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>How can I write a similar <code>fix</code> function?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486820783, "post_id": 42174800, "comment_id": 71516559, "body": "Thanks works perfectly, used this to answer my own question here: <a href=\"http://stackoverflow.com/a/42176533/432509\">stackoverflow.com/a/42176533/432509</a> . The <code>apply_args_reverse</code> macro might be useful to others, since it allows reversing arguments for existing macros."}], "tags": [], "owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "is_accepted": true, "score": 5, "last_activity_date": 1486808923, "creation_date": 1486808923, "answer_id": 42174800, "question_id": 42171483, "link": "https://stackoverflow.com/questions/42171483/how-to-recursively-take-the-last-argument-of-a-macro/42174800#42174800", "title": "How to recursively take the last argument of a macro?", "body": "<p>There is no \"backtracking\" in the macro parser, so no you can't do this directly with <code>$($head:tt)* $tail:tt</code>. But you can do it by reversing it yourself. </p>\n\n<pre><code>macro_rules! concat_reverse {\n    ([] $($reversed:tt)*) =&gt; { \n        concat!($(stringify!($reversed)),*)  // base case\n    };\n    ([$first:tt $($rest:tt)*] $($reversed:tt)*) =&gt; { \n        concat_reverse!([$($rest)*] $first $($reversed)*)  // recursion\n    };\n}\n\nfn main() {\n    println!(\"{}\", concat_reverse!([e d c b a]))\n    // output: abcde\n}\n</code></pre>\n\n<p>The macro trace looks like:</p>\n\n<pre><code>   concat_reverse!([e d c b a])\n== concat_reverse!([d c b a] e)\n== concat_reverse!([c b a] d e)\n== concat_reverse!([b a] c d e)\n== concat_reverse!([a] b c d e)\n== concat_reverse!([] a b c d e)\n== concat!(stringify!(a), stringify!(b), stringify!(c), stringify!(d), stringify!(e))\n</code></pre>\n\n<p>You could do some \"map\" and \"reduce\" operation (e.g. for counting) in the recursion phase.</p>\n\n<p>Note that this method will eat your recursion depth, you may need to raise your <code>#![recursion_limit=\"...\"]</code>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 726, "favorite_count": 0, "accepted_answer_id": 42174800, "answer_count": 1, "score": 0, "last_activity_date": 1486808923, "creation_date": 1486779655, "last_edit_date": 1495541820, "question_id": 42171483, "link": "https://stackoverflow.com/questions/42171483/how-to-recursively-take-the-last-argument-of-a-macro", "title": "How to recursively take the last argument of a macro?", "body": "<p>Using a simple recursive macro like the example below, its common to take the first argument, then glob the rest.</p>\n\n<pre><code>macro_rules! count_tts {\n    () =&gt; {0usize};\n    ($_head:tt $($tail:tt)*) =&gt; {1usize + count_tts!($($tail)*)};\n}\n</code></pre>\n\n<p>Is there a way to recursively take the last argument?</p>\n\n<p>This makes it possible to:</p>\n\n<ul>\n<li>Handle the arguments in reverse.</li>\n<li>Take all the previous arguments into account (count them for example, <a href=\"https://stackoverflow.com/questions/42171160\">see related question</a>)</li>\n</ul>\n\n<p>Something like <code>($($head:tt)* $tail:tt)</code> ... but this doesn't work.</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1486782974, "last_edit_date": 1495540411, "creation_date": 1486782157, "answer_id": 42171703, "question_id": 42171160, "link": "https://stackoverflow.com/questions/42171160/using-argument-number-in-macro-expansion/42171703#42171703", "title": "Using argument number in macro expansion?", "body": "<p>This can be done:</p>\n\n<ul>\n<li>First counting all arguments.</li>\n<li>Using a recursive macro, so the <code>tail*</code> arguments can be counted.</li>\n<li>Optionally storing the list of structs in a macro so both macro invocations don't need to repeat the list.</li>\n</ul>\n\n<p>Working example:</p>\n\n<pre><code>struct Foo {_var: bool}\nstruct Bar {_var: u8}\nstruct Baz {_var: i16}\n\ntrait NumberStruct {\n    fn struct_number() -&gt; usize;\n}\n\nmacro_rules! count_tts {\n    () =&gt; {0usize};\n    ($_head:tt $($tail:tt)*) =&gt; {1usize + count_tts!($($tail)*)};\n}\n\nmacro_rules! number_structs_impl {\n    () =&gt; {};\n    ($head:tt $($tail:tt)*) =&gt; {\n        impl NumberStruct for $head {\n            fn struct_number() -&gt; usize {\n                return STRUCT_NUM - (1 + count_tts!($($tail)*));\n            }\n        }\n        number_structs_impl!($($tail)*);\n    };\n}\n\n// avoid repeating same structs\nmacro_rules! apply_structs {\n    ($macro_id:ident) =&gt; (\n        $macro_id! {\n            Foo\n            Bar\n            Baz\n        }\n    )\n}\n\nconst STRUCT_NUM: usize = apply_structs!(count_tts);\napply_structs!(number_structs_impl);\n\nfn main() {\n    // see if the numbers are correct\n    macro_rules! print_numbers {\n        ($($t:tt)*) =&gt; ($(\n            print!(\"{}:{} \", stringify!($t), $t::struct_number());\n        )*)\n    }\n\n    // should print:\n    // Baz:2 Bar:1 Foo:0\n    print_numbers!(Baz Bar Foo);\n    println!();\n}\n</code></pre>\n\n<hr>\n\n<p>Note: I'm posting this answer to show its possible, however it is a bit of a messy solution since it involves passing macros to macros and two invocations, this could be done more cleanly if recursive macros could be expanded, taking the <strong>last</strong> argument each recursion, <a href=\"https://stackoverflow.com/questions/42171483\">see related question</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "is_accepted": false, "score": 0, "last_activity_date": 1486824084, "last_edit_date": 1495541364, "creation_date": 1486820479, "answer_id": 42176533, "question_id": 42171160, "link": "https://stackoverflow.com/questions/42171160/using-argument-number-in-macro-expansion/42176533#42176533", "title": "Using argument number in macro expansion?", "body": "<p>An approach to defining numbered implementations is to use a recursive macro. A unique number can be created by <a href=\"https://stackoverflow.com/a/38361018/432509\">counting arguments</a>, in this case counting trailing arguments.</p>\n\n<p>The problem with this, is the indices are reversed where the first struct has the largest number, the last struct zero.</p>\n\n<p>If you only need the numbers to be unique, it wont matter, however in this case I want each structs index to match the order its passed to the macro.</p>\n\n<p>Input arguments can be reversed using a recursive macro, <a href=\"https://stackoverflow.com/a/42174800/432509\">see this example</a>.</p>\n\n<p>Using this macro, its possible to write a generic macro:</p>\n\n<pre><code>apply_args_reverse!(macro_name, arg1 arg2 arg3)\n</code></pre>\n\n<p>Which expands into:</p>\n\n<pre><code>macro_name!(arg3 arg2 arg1)\n</code></pre>\n\n<p>Of course thats not very useful on its own, but it can be useful if the arguments aren't written directly, but passed as arguments.</p>\n\n<p>This can be used to create make a macro that expands with the number of each argument as follows:</p>\n\n<pre><code>struct Foo {_var: bool}\nstruct Bar {_var: u8}\nstruct Baz {_var: i16}\n\ntrait NumberStruct {\n    fn struct_number() -&gt; usize;\n}\n\nmacro_rules! count_args_space {\n    () =&gt; {0_usize};\n    ($_head:tt $($tail:tt)*) =&gt; {1_usize + count_args_space!($($tail)*)};\n}\n\nmacro_rules! number_structs_impl {\n    (@single $t:tt $($tail:tt)*) =&gt; (\n        impl NumberStruct for $t {\n            fn struct_number() -&gt; usize {\n                return count_args_space!($($tail)*);\n            }\n        }\n    );\n\n    () =&gt; {};\n    ($head:tt $($tail:tt)*) =&gt; {\n        number_structs_impl!(@single $head $($tail)*);\n        number_structs_impl!($($tail)*);\n    };\n}\n\nmacro_rules! apply_args_reverse {\n    ($macro_id:tt [] $($reversed:tt)*) =&gt; {\n        $macro_id!($($reversed) *);\n    };\n    ($macro_id:tt [$first:tt $($rest:tt)*] $($reversed:tt)*) =&gt; {\n        apply_args_reverse!($macro_id [$($rest)*] $first $($reversed)*);\n    };\n    // Entry point, use brackets to recursively reverse above.\n    ($macro_id:tt, $($t:tt)*) =&gt; {\n        apply_args_reverse!($macro_id [ $($t)* ]);\n    };\n}\n\n// Note that both commands below work, and can be swapped to reverse argument order.\n\n// number_structs_impl!(Foo Bar Baz);\napply_args_reverse!(number_structs_impl, Foo Bar Baz);\n\nfn main() {\n    // see if the numbers are correct\n    macro_rules! print_numbers {\n        ($($t:tt)*) =&gt; ($(\n            print!(\"{}:{} \", stringify!($t), $t::struct_number());\n        )*)\n    }\n\n    print_numbers!(Baz Bar Foo);\n    println!();\n}\n</code></pre>\n\n<p>Notice the statements:</p>\n\n<pre><code>number_structs_impl!(Foo Bar Baz);\n</code></pre>\n\n<p>... and</p>\n\n<pre><code>apply_args_reverse!(number_structs_impl, Foo Bar Baz);\n</code></pre>\n\n<p>... are interchangeable, swapping which is commented reverses the order of numbers assigned to each struct.</p>\n\n<hr>\n\n<p>Note: keeping my <a href=\"https://stackoverflow.com/a/42171703/432509\">other answer</a>, while this is more concise, it's also more fragile, prone to hard-to-troubleshoot problems, since macro expansion gets deeply nested <em>(I found this while getting it to work at least)</em>.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 507, "favorite_count": 0, "answer_count": 2, "score": 2, "last_activity_date": 1486824084, "creation_date": 1486776175, "question_id": 42171160, "link": "https://stackoverflow.com/questions/42171160/using-argument-number-in-macro-expansion", "title": "Using argument number in macro expansion?", "body": "<p>When expanding arguments to a macro, is there a way to include the argument number within the macro</p>\n\n<p>Here is a complete example showing how this might be used to assign an index to a struct using a trait. Currently <code>struct_number()</code> always returns 0, could this be made to return a constant number based on the order of the argument to the macro?</p>\n\n<pre><code>struct Foo {_var: bool}\nstruct Bar {_var: u8}\nstruct Baz {_var: i16}\n\ntrait NumberStruct {\n    fn struct_number() -&gt; usize;\n}\n\nmacro_rules! number_structs_impl {\n    ($($t:ty)*) =&gt; ($(\n        impl NumberStruct for $t {\n            fn struct_number() -&gt; usize {\n               // How to return a number based on the argument order?\n                return 0;\n            }\n        }\n    )*)\n}\n\nnumber_structs_impl!(Foo Bar Baz);\n\nfn main() {\n    // see if the numbers are correct\n    macro_rules! print_numbers {\n        ($($t:tt)*) =&gt; ($(\n            print!(\"{}:{} \", stringify!($t), $t::struct_number());\n        )*)\n    }\n\n    // should print:\n    // Baz:2 Bar:1 Foo:0\n    print_numbers!(Baz Bar Foo);\n    println!();\n}\n</code></pre>\n"}, {"tags": ["tree", "rust", "ffi"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486764555, "post_id": 42168921, "comment_id": 71503820, "body": "In common usage, <i>trees</i> are unidirectional; <i>graphs</i> are bidirectional. <i>Trees</i> are easy to handle in Rust, <i>graphs</i> are not."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486766440, "post_id": 42168921, "comment_id": 71504488, "body": "Also, don&#39;t name your member variables with leading underscores; this isn&#39;t C++. In Rust, a leading underscore indicates that a value is unused, and you should never have an unused value in a struct."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1486829842, "post_id": 42168921, "comment_id": 71519499, "body": "Having a backpointer to the parent does not invalidate the defining characteristic of a tree, which is that a node has only one parent, and that there are no cycles. In fact, a standard way to define trees <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" rel=\"nofollow noreferrer\">uses graphs</a>. Since Rust&#39;s collection library supports a <code>LinkedList&lt;T&gt;</code>, bidirectional pointing must be possible."}], "owner": {"reputation": 7076, "user_id": 350385, "user_type": "registered", "accept_rate": 64, "profile_image": "https://i.stack.imgur.com/qXLk6.jpg?s=128&g=1", "display_name": "passy", "link": "https://stackoverflow.com/users/350385/passy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 87, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1486764495, "creation_date": 1486762041, "last_edit_date": 1486764495, "question_id": 42168921, "link": "https://stackoverflow.com/questions/42168921/representing-tree-structures-via-ffi-in-rust", "title": "Representing tree structures via FFI in Rust", "body": "<p>I'm new to Rust and have picked a project that's way over my head.</p>\n\n<p>I have an existing C library I want to provide Rust bindings for. The fundamental data structure of the library is a node, which can have many children and zero or one parent.</p>\n\n<p>In my <code>sys</code> library, I represent the opaque pointer I get from the C lib as</p>\n\n<pre><code>pub enum NodeRef {}\n</code></pre>\n\n<p>Furthermore, I have these FFI declarations</p>\n\n<pre><code>extern {\n    pub fn NodeNew() -&gt; *mut NodeRef;\n    pub fn NodeInsertChild(node: *mut NodeRef, child: *mut NodeRef, index: uint32_t);\n    pub fn NodeGetParent(node: *const NodeRef) -&gt; *mut NodeRef;\n    pub fn NodeFree(node: *mut NodeRef);\n}\n</code></pre>\n\n<p>Now to the hard part. I want to wrap these in a safe interface.</p>\n\n<pre><code>#[derive(Debug, PartialEq, Eq)]\npub struct Node {\n    reference: *mut ffi::NodeRef,\n    __parent: Option&lt;???&gt;,\n}\n\n\nimpl Drop for Node {\n    fn drop(&amp;mut self) {\n        unsafe { ffi::NodeFree(self.reference) }\n    }\n}\n\nimpl Node {\n    pub fn new() -&gt; Self {\n        let node = unsafe { ffi::NodeNew() };\n        assert!(!node.is_null());\n        Node {\n            reference: node,\n            __parent: None\n        }\n    }\n\n    pub fn push_front(&amp;mut self, node: &amp;mut Node) {\n        unsafe { ffi::NodeInsertChild(self.reference, node.reference, 0) }\n        node.__parent = Some(???);\n    }\n\n    pub fn parent(&amp;self) -&gt; Option&lt;???&gt; {\n        self.__parent\n    }\n\n}\n</code></pre>\n\n<p>I want to represent actions for adding children and retrieving the parent of a node. However, I'm not sure how to correctly specify the lifetimes of the objects. I reckon that I need to hold on to a reference of the parent myself in order to reason about its lifetime, as returning <code>ffi::NodeGetParent</code> would lead to double-freeing a node.</p>\n"}, {"tags": ["rust", "rust-tokio"], "answers": [{"tags": [], "owner": {"reputation": 1047, "user_id": 204442, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/92fa12e9d6c3916c06b7f0043da30d0a?s=128&d=identicon&r=PG", "display_name": "SpamapS", "link": "https://stackoverflow.com/users/204442/spamaps"}, "is_accepted": false, "score": 1, "last_activity_date": 1498017990, "creation_date": 1498017990, "answer_id": 44666716, "question_id": 42164981, "link": "https://stackoverflow.com/questions/42164981/how-to-achieve-zero-copy-in-tokio-coreiocodecdecode/44666716#44666716", "title": "How to achieve zero-copy in tokio_core::io::Codec::decode(...)?", "body": "<p>Recent versions of <a href=\"https://crates.io/crates/tokio-core\" rel=\"nofollow noreferrer\">tokio-core</a> don't contain the <code>codec</code> module, it has been moved to <a href=\"https://crates.io/crates/tokio-io\" rel=\"nofollow noreferrer\">tokio-io</a>. While moving, it was also switched from <code>EasyBuf</code> to <code>BytesMut</code> from the <a href=\"https://crates.io/crates/bytes\" rel=\"nofollow noreferrer\">bytes crate</a>. With that change your buffers will come in as a <code>BytesMut</code> which is built for 0-copy buffer consumption. You can consume the buffer by using <code>split_to()</code>, which will return a <code>BytesMut</code> of the data before the position you split from and advance the beginning of the buffer to that pointer. Here's an example from a tokio port of a server I've been working on, <a href=\"https://github.com/SpamapS/rustygear\" rel=\"nofollow noreferrer\">rustygear</a>:</p>\n\n<pre><code>pub struct PacketCodec {\n    pub data_todo: Option&lt;usize&gt;,\n}\n\ntype PacketItem = Frame&lt;PacketHeader, BytesMut, io::Error&gt;;\nimpl PacketHeader {\n    pub fn admin_decode(buf: &amp;mut BytesMut) -&gt; Result&lt;Option&lt;PacketItem&gt;, io::Error&gt; {\n        let newline = buf[..].iter().position(|b| *b == b'\\n');\n        if let Some(n) = newline {\n            let line = buf.split_to(n);\n            buf.split_to(1); // drop the newline itself\n            let data_str = match str::from_utf8(&amp;line[..]) {\n                Ok(s) =&gt; s,\n                Err(_) =&gt; return Err(io::Error::new(io::ErrorKind::Other, \"invalid string\")),\n            };\n            info!(\"admin command data: {:?}\", data_str);\n            let command = match data_str.trim() {\n                \"version\" =&gt; ADMIN_VERSION,\n                \"status\" =&gt; ADMIN_STATUS,\n                _ =&gt; ADMIN_UNKNOWN,\n            };\n            return Ok(Some(Frame::Message {\n                message: PacketHeader {\n                    magic: PacketMagic::TEXT,\n                    ptype: command,\n                    psize: 0,\n                },\n                body: false,\n            }));\n        }\n        Ok(None) // Wait for more data\n    }\n\n    pub fn decode(buf: &amp;mut BytesMut) -&gt; Result&lt;Option&lt;PacketItem&gt;, io::Error&gt; {\n        debug!(\"Decoding {:?}\", buf);\n        // Peek at first 4\n        // Is this a req/res\n        if buf.len() &lt; 4 {\n            return Ok(None);\n        }\n        let mut magic_buf: [u8; 4] = [0; 4];\n        magic_buf.clone_from_slice(&amp;buf[0..4]);\n        let magic = match magic_buf {\n            REQ =&gt; PacketMagic::REQ,\n            RES =&gt; PacketMagic::RES,\n            // TEXT/ADMIN protocol\n            _ =&gt; PacketMagic::TEXT,\n        };\n        debug!(\"Magic is {:?}\", magic);\n        if magic == PacketMagic::TEXT {\n            debug!(\"admin protocol detected\");\n            return PacketHeader::admin_decode(buf);\n        }\n        if buf.len() &lt; 12 {\n            return Ok(None);\n        }\n        buf.split_to(4);\n        // Now get the type\n        let ptype = buf.split_to(4).into_buf().get_u32::&lt;BigEndian&gt;();\n        debug!(\"We got a {}\", &amp;PTYPES[ptype as usize].name);\n        // Now the length\n        let psize = buf.split_to(4).into_buf().get_u32::&lt;BigEndian&gt;();\n        debug!(\"Data section is {} bytes\", psize);\n        Ok(Some(Frame::Message {\n            message: PacketHeader {\n                magic: magic,\n                ptype: ptype,\n                psize: psize,\n            },\n            body: true, // TODO: false for 0 psize?\n        }))\n    }\n}\n\nimpl Decoder for PacketCodec {\n    type Item = Frame&lt;PacketHeader, BytesMut, io::Error&gt;;\n    type Error = io::Error;\n\n    fn decode(&amp;mut self, buf: &amp;mut BytesMut) -&gt; Result&lt;Option&lt;Self::Item&gt;, io::Error&gt; {\n        match self.data_todo {\n            None =&gt; {\n                match PacketHeader::decode(buf)? {\n                    Some(Frame::Message { message, body }) =&gt; {\n                        self.data_todo = Some(message.psize as usize);\n                        Ok(Some(Frame::Message {\n                            message: message,\n                            body: body,\n                        }))\n                    }\n                    Some(_) =&gt; panic!(\"Expecting Frame::Message, got something else\"),\n                    None =&gt; Ok(None),\n                }\n            }\n            Some(0) =&gt; {\n                self.data_todo = None;\n                Ok(Some(Frame::Body { chunk: None }))\n            }\n            Some(data_todo) =&gt; {\n                let chunk_size = min(buf.len(), data_todo);\n                self.data_todo = Some(data_todo - chunk_size);\n                Ok(Some(Frame::Body { chunk: Some(buf.split_to(chunk_size)) }))\n            }\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 3183, "user_id": 651368, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/2b8a70f5cb38a9e7565e128e6243ac20?s=128&d=identicon&r=PG", "display_name": "Byron", "link": "https://stackoverflow.com/users/651368/byron"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2090, "favorite_count": 1, "answer_count": 1, "score": 3, "last_activity_date": 1498017990, "creation_date": 1486746643, "last_edit_date": 1486801946, "question_id": 42164981, "link": "https://stackoverflow.com/questions/42164981/how-to-achieve-zero-copy-in-tokio-coreiocodecdecode", "title": "How to achieve zero-copy in tokio_core::io::Codec::decode(...)?", "body": "<p>My goal is implement a <code>Codec</code> which drains the provided <code>EasyBuf</code> to the message boundaries and decodes it into structures which merely reference the contents to prevent unnecessary copying.\nLooking into the implementation of <code>EasyBuf</code>, it seems that would not currently be possible, but maybe I am missing something.</p>\n\n<p>Here is the code I was playing with and doing this is actually <em>desired</em> for <a href=\"https://github.com/nhellwig/tokio-cassandra\" rel=\"nofollow noreferrer\">tokio-cassandra</a>: </p>\n\n<pre><code>struct V&lt;'a&gt; {\n    s: &amp;'a [u8],\n}\n\nstruct R&lt;'a&gt; {\n    b: EasyBuf,\n    v: Option&lt;V&lt;'a&gt;&gt;,\n}\n\n\nstruct C;\n\nimpl Codec for C {\n    type In = R&lt;'static&gt;;\n    type Out = String;\n\n    fn decode(&amp;mut self, buf: &amp;mut EasyBuf) -&gt; io::Result&lt;Option&lt;Self::In&gt;&gt; {\n        let mut r = R {\n            b: buf.clone(),\n            v: None,\n        };\n        r.v = Some(V { s: r.b.as_slice() });\n        Ok(Some(r))\n    }\n    fn encode(&amp;mut self, msg: Self::Out, buf: &amp;mut Vec&lt;u8&gt;) -&gt; io::Result&lt;()&gt; {\n        Ok(())\n    }\n}\n\n\nfn main() {\n    let b = EasyBuf::new();\n    let mut r = R { b: b, v: None };\n    r.v = Some(V { s: r.b.as_slice() });\n}\n\n\nuse std::fmt;\nuse std::io;\nuse std::ops::{Deref, DerefMut};\nuse std::sync::Arc;\n\n\n\n#[derive(Clone)]\npub struct EasyBuf {\n    buf: Arc&lt;Vec&lt;u8&gt;&gt;,\n    start: usize,\n    end: usize,\n}\n\npub struct EasyBufMut&lt;'a&gt; {\n    buf: &amp;'a mut Vec&lt;u8&gt;,\n    end: &amp;'a mut usize,\n}\n\nimpl EasyBuf {\n    pub fn new() -&gt; EasyBuf {\n        EasyBuf::with_capacity(8 * 1024)\n    }\n\n    pub fn with_capacity(cap: usize) -&gt; EasyBuf {\n        EasyBuf {\n            buf: Arc::new(Vec::with_capacity(cap)),\n            start: 0,\n            end: 0,\n        }\n    }\n\n    fn set_start(&amp;mut self, start: usize) -&gt; &amp;mut EasyBuf {\n        assert!(start &lt;= self.buf.as_ref().len());\n        assert!(start &lt;= self.end);\n        self.start = start;\n        self\n    }\n\n    fn set_end(&amp;mut self, end: usize) -&gt; &amp;mut EasyBuf {\n        assert!(end &lt;= self.buf.len());\n        assert!(self.start &lt;= end);\n        self.end = end;\n        self\n    }\n\n    pub fn len(&amp;self) -&gt; usize {\n        self.end - self.start\n    }\n\n    pub fn as_slice(&amp;self) -&gt; &amp;[u8] {\n        self.as_ref()\n    }\n\n    pub fn split_off(&amp;mut self, at: usize) -&gt; EasyBuf {\n        let mut other = EasyBuf { buf: self.buf.clone(), ..*self };\n        let idx = self.start + at;\n        other.set_start(idx);\n        self.set_end(idx);\n        return other;\n    }\n\n    pub fn drain_to(&amp;mut self, at: usize) -&gt; EasyBuf {\n        let mut other = EasyBuf { buf: self.buf.clone(), ..*self };\n        let idx = self.start + at;\n        other.set_end(idx);\n        self.set_start(idx);\n        return other;\n    }\n\n    pub fn get_mut(&amp;mut self) -&gt; EasyBufMut {\n        if Arc::get_mut(&amp;mut self.buf).is_some() {\n            let buf = Arc::get_mut(&amp;mut self.buf).unwrap();\n            buf.drain(..self.start);\n            self.start = 0;\n            return EasyBufMut {\n                buf: buf,\n                end: &amp;mut self.end,\n            };\n        }\n\n        let mut v = Vec::with_capacity(self.buf.capacity());\n        v.extend_from_slice(self.as_ref());\n        self.start = 0;\n        self.buf = Arc::new(v);\n        EasyBufMut {\n            buf: Arc::get_mut(&amp;mut self.buf).unwrap(),\n            end: &amp;mut self.end,\n        }\n    }\n}\n\nimpl AsRef&lt;[u8]&gt; for EasyBuf {\n    fn as_ref(&amp;self) -&gt; &amp;[u8] {\n        &amp;self.buf[self.start..self.end]\n    }\n}\n\nimpl&lt;'a&gt; Deref for EasyBufMut&lt;'a&gt; {\n    type Target = Vec&lt;u8&gt;;\n\n    fn deref(&amp;self) -&gt; &amp;Vec&lt;u8&gt; {\n        self.buf\n    }\n}\n\nimpl&lt;'a&gt; DerefMut for EasyBufMut&lt;'a&gt; {\n    fn deref_mut(&amp;mut self) -&gt; &amp;mut Vec&lt;u8&gt; {\n        self.buf\n    }\n}\n\nimpl From&lt;Vec&lt;u8&gt;&gt; for EasyBuf {\n    fn from(vec: Vec&lt;u8&gt;) -&gt; EasyBuf {\n        let end = vec.len();\n        EasyBuf {\n            buf: Arc::new(vec),\n            start: 0,\n            end: end,\n        }\n    }\n}\n\nimpl&lt;'a&gt; Drop for EasyBufMut&lt;'a&gt; {\n    fn drop(&amp;mut self) {\n        *self.end = self.buf.len();\n    }\n}\n\n/// Encoding and decoding of frames via buffers.\n///\n/// This trait is used when constructing an instance of `Framed`. It provides\n/// two types: `In`, for decoded input frames, and `Out`, for outgoing frames\n/// that need to be encoded. It also provides methods to actually perform the\n/// encoding and decoding, which work with corresponding buffer types.\n///\n/// The trait itself is implemented on a type that can track state for decoding\n/// or encoding, which is particularly useful for streaming parsers. In many\n/// cases, though, this type will simply be a unit struct (e.g. `struct\n/// HttpCodec`).\npub trait Codec {\n    /// The type of decoded frames.\n    type In;\n\n    /// The type of frames to be encoded.\n    type Out;\n\n    /// Attempts to decode a frame from the provided buffer of bytes.\n    ///\n    /// This method is called by `Framed` whenever bytes are ready to be parsed.\n    /// The provided buffer of bytes is what's been read so far, and this\n    /// instance of `Decode` can determine whether an entire frame is in the\n    /// buffer and is ready to be returned.\n    ///\n    /// If an entire frame is available, then this instance will remove those\n    /// bytes from the buffer provided and return them as a decoded\n    /// frame. Note that removing bytes from the provided buffer doesn't always\n    /// necessarily copy the bytes, so this should be an efficient operation in\n    /// most circumstances.\n    ///\n    /// If the bytes look valid, but a frame isn't fully available yet, then\n    /// `Ok(None)` is returned. This indicates to the `Framed` instance that\n    /// it needs to read some more bytes before calling this method again.\n    ///\n    /// Finally, if the bytes in the buffer are malformed then an error is\n    /// returned indicating why. This informs `Framed` that the stream is now\n    /// corrupt and should be terminated.\n    fn decode(&amp;mut self, buf: &amp;mut EasyBuf) -&gt; io::Result&lt;Option&lt;Self::In&gt;&gt;;\n\n    /// A default method available to be called when there are no more bytes\n    /// available to be read from the underlying I/O.\n    ///\n    /// This method defaults to calling `decode` and returns an error if\n    /// `Ok(None)` is returned. Typically this doesn't need to be implemented\n    /// unless the framing protocol differs near the end of the stream.\n    fn decode_eof(&amp;mut self, buf: &amp;mut EasyBuf) -&gt; io::Result&lt;Self::In&gt; {\n        match try!(self.decode(buf)) {\n            Some(frame) =&gt; Ok(frame),\n            None =&gt; Err(io::Error::new(io::ErrorKind::Other, \"bytes remaining on stream\")),\n        }\n    }\n\n    /// Encodes a frame into the buffer provided.\n    ///\n    /// This method will encode `msg` into the byte buffer provided by `buf`.\n    /// The `buf` provided is an internal buffer of the `Framed` instance and\n    /// will be written out when possible.\n    fn encode(&amp;mut self, msg: Self::Out, buf: &amp;mut Vec&lt;u8&gt;) -&gt; io::Result&lt;()&gt;;\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e713197492c1bafda0f9b0a693aeb2ed&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<h3>Thoughts</h3>\n\n<ul>\n<li>I don't think this can be done currently due to the missing lifetime in <code>Codec::In</code> - we have to declare it <code>'static</code> and that is the problem for the borrow checker.</li>\n<li>It could be implemented by returning the <code>EasyBuf</code> itself (<code>Codec::In = EasyBuf</code>) and do the decoding in a later step, for instance in a future chained similarly as in <a href=\"https://github.com/tokio-rs/tokio-core/blob/717e99ca80ae57820f4dbe7574421afd28d9f1d9/examples/connect.rs#L63\" rel=\"nofollow noreferrer\">this example</a></li>\n<li>It could also be implemented by just parsing indices into the EasyBuf, and by generating actual datatypes with references lazily. A string for example would just be a <code>(usize, *const u8)</code>, which later becomes a <code>&amp;str</code> when requested by the user.</li>\n</ul>\n"}, {"tags": ["rust", "unsafe", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 4, "creation_date": 1486744400, "post_id": 42163975, "comment_id": 71493345, "body": "It is a <i>very bad idea</i> to use <code>unsafe</code> code if you cannot explain why it is indeed safe."}, {"owner": {"reputation": 623, "user_id": 1955971, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/f1d7c2842d4d6be9c8f79e1384f284af?s=128&d=identicon&r=PG", "display_name": "Aleksander Fular", "link": "https://stackoverflow.com/users/1955971/aleksander-fular"}, "edited": false, "score": 0, "creation_date": 1486744429, "post_id": 42163975, "comment_id": 71493370, "body": "You could maybe achieve what you want using splices. split vector into two slices for example elements [0,1,2] and [3...] and you then process 0,1,2. and then in next iteration take [0.1.2] from that 2nd splice.  Also VecDeque comes to mind."}, {"owner": {"reputation": 148712, "user_id": 19750, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/13b41b2620da0b1e630715e0c91a0b03?s=128&d=identicon&r=PG", "display_name": "Josh Lee", "link": "https://stackoverflow.com/users/19750/josh-lee"}, "edited": false, "score": 0, "creation_date": 1486744487, "post_id": 42163975, "comment_id": 71493405, "body": "Does your parser really consume a Vec? I would imagine your parser would be happy with a slice."}, {"owner": {"reputation": 61, "user_id": 7546768, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5eac288dbdef63b2acfd84733b714024?s=128&d=identicon&r=PG&f=1", "display_name": "Roderick", "link": "https://stackoverflow.com/users/7546768/roderick"}, "edited": false, "score": 0, "creation_date": 1486745315, "post_id": 42163975, "comment_id": 71493904, "body": "The buffer&#39;s being read from a very large file so I can&#39;t fit it all in memory at once (and the buffer changes as I read the file so I have lifetime issues with slices). Copying is an okay solution, but I was looking to see if there was something a bit more clever I could do to prevent that."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486744303, "post_id": 42164155, "comment_id": 71493290, "body": "@Shepmaster: it allocates, I don&#39;t like allocations :)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486744564, "post_id": 42164155, "comment_id": 71493443, "body": "@Shepmaster: Well, the OP asked without allocations ;) We can either edit the title to reflect it or I can edit my answer to include <code>Vec::split_off</code> as an allocating alternative. I&#39;m not sure what&#39;s the best, what do you think?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486744750, "post_id": 42164155, "comment_id": 71493562, "body": "@Shepmaster: I was looking at <i>Is it possible to do this without copying out one of the Vecs?</i>; I can modify my answer for now, seems easier."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 4, "last_activity_date": 1486745342, "last_edit_date": 1486745342, "creation_date": 1486744048, "answer_id": 42164155, "question_id": 42163975, "link": "https://stackoverflow.com/questions/42163975/splitting-a-vec/42164155#42164155", "title": "Splitting a `Vec`", "body": "<p>Unfortunately, that's not how memory allocators work. It might have been possible in the past, when memory was at a premium, but today's allocators are geared for speed rather than memory preservation.</p>\n\n<p>A common implementation of memory allocators is to use slabs. Basically, it's:</p>\n\n<pre><code>struct Allocator {\n    less_than_32_bytes: List&lt;[u8; 32]&gt;,\n    less_than_64_bytes: List&lt;[u8; 64]&gt;,\n    less_than_128_bytes: List&lt;[u8; 128]&gt;,\n    less_than_256_bytes: List&lt;[u8; 256]&gt;,\n    less_than_512_bytes: List&lt;[u8; 512]&gt;,\n    ...\n}\n</code></pre>\n\n<p>When you request 96 bytes, it takes an element from <code>less_than_128_bytes</code>.</p>\n\n<p>When you free that element, it frees <em>all</em> of it, not just the first N bytes, and the whole block is now re-usable. Any pointer inside the block is now dangling and should NOT be dereferenced.</p>\n\n<p>Furthermore, trying to free a pointer in the middle of a block will only confuse the allocator: it won't find it, because the contract is that you address blocks by their first byte.</p>\n\n<p>You violated the contract using <code>unsafe</code> code, <em>BOOM</em>.</p>\n\n<hr>\n\n<p>The solution I propose is simple:</p>\n\n<ul>\n<li>use a single <code>Vec&lt;u8&gt;</code> containing the <em>whole</em> buffer to parse</li>\n<li>use slices into this <code>Vec</code> for parsing</li>\n</ul>\n\n<p>Rust will check the lifetimes, so your slices cannot outlive the buffer, and slicing a slice further (<code>s[..offset]</code>, <code>s[offset..]</code>) does not allocate.</p>\n\n<hr>\n\n<p>If you don't mind <em>one</em> allocation, there's <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.split_off\" rel=\"nofollow noreferrer\"><code>Vec::split_off</code></a> which allocates a new <code>Vec</code> big enough for the split part. </p>\n"}], "owner": {"reputation": 61, "user_id": 7546768, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5eac288dbdef63b2acfd84733b714024?s=128&d=identicon&r=PG&f=1", "display_name": "Roderick", "link": "https://stackoverflow.com/users/7546768/roderick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2036, "favorite_count": 0, "answer_count": 1, "score": 6, "last_activity_date": 1486745342, "creation_date": 1486743522, "last_edit_date": 1486743957, "question_id": 42163975, "link": "https://stackoverflow.com/questions/42163975/splitting-a-vec", "title": "Splitting a `Vec`", "body": "<p>I'm trying to write a little buffer-thing for parsing so I can pull records off the front of as I parse them out, ideally without making any copies and just transferring ownership of chunks of the front of the buffer off as I run. Here's my implementation:</p>\n\n<pre><code>struct BufferThing {\n    buf: Vec&lt;u8&gt;,\n}\n\nimpl BufferThing {\n    fn extract(&amp;mut self, size: usize) -&gt; Vec&lt;u8&gt; {\n        assert!(size &lt;= self.buf.len());\n        let remaining: usize = self.buf.len() - size;\n        let ptr: *mut u8 = self.buf.as_mut_ptr();\n\n        unsafe {\n            self.buf = Vec::from_raw_parts(ptr.offset(size as isize), remaining, remaining);\n            Vec::from_raw_parts(ptr, size, size)\n        }\n    }\n}\n</code></pre>\n\n<p>This compiles, but panics with a <code>signal: 11, SIGSEGV: invalid memory reference</code> as it starts running. This is mostly the same code as the example in <a href=\"https://doc.rust-lang.org/nomicon/borrow-splitting.html\" rel=\"noreferrer\">the Nomicon</a>, but I'm trying to do it on <code>Vec</code>'s and I'm trying to split a field instead of the object itself.</p>\n\n<p>Is it possible to do this without copying out one of the <code>Vec</code>s? And is there some section of the Nomicon or other documentation that explains why I'm blowing everything up in the <code>unsafe</code> block?</p>\n"}, {"tags": ["rust", "lifetime", "borrow-checker"], "answers": [{"comments": [{"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1486758392, "post_id": 42162816, "comment_id": 71501084, "body": "In face nox&#39;s suggestion lacked the type annotation on <code>tmp</code>.  I added it out of unnecessary paranoia."}], "tags": [], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "is_accepted": false, "score": 0, "last_activity_date": 1486739898, "creation_date": 1486739898, "answer_id": 42162816, "question_id": 42162151, "link": "https://stackoverflow.com/questions/42162151/rust-error-e0495-using-split-at-mut-in-a-closure/42162816#42162816", "title": "Rust error E0495 using split_at_mut in a closure", "body": "<p>An IRC user <a href=\"https://github.com/nox\" rel=\"nofollow noreferrer\">nox</a> provided a clean answer by using <code>mem::replace</code> to move the <code>&amp;mut [T]</code> that needs mutation out of the way first : </p>\n\n<pre><code>fn reserve&lt;'heap, T&gt;(heap: &amp;mut &amp;'heap mut [T], len: usize) -&gt; &amp;'heap mut [T] {\n    let tmp: &amp;'heap mut [T] = ::std::mem::replace(&amp;mut *heap, &amp;mut []);\n    let (reserved, tmp) = tmp.split_at_mut(len);\n    *heap = tmp;\n    reserved\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 0, "creation_date": 1486758157, "post_id": 42163901, "comment_id": 71500984, "body": "I&#39;ll give this best answer just for &quot;dance&quot;.  ;)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "edited": false, "score": 1, "creation_date": 1486815164, "post_id": 42163901, "comment_id": 71514885, "body": "@JeffBurdges: <a href=\"https://this-week-in-rust.org/blog/2017/01/24/this-week-in-rust-166/\" rel=\"nofollow noreferrer\">Quote of the week 166</a>: <i>Yeah, it&#39;s like learning to dance when your partner (borrow checker) already knows all the steps. When you&#39;re just getting started, you step on their toes a lot, but over time you get the motions down. Eventually, you can start to anticipate their movements and start to appreciate the music as part of the dance, instead of just concentrating on getting your feet in the right place.</i>"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 2, "last_activity_date": 1486743336, "creation_date": 1486743336, "answer_id": 42163901, "question_id": 42162151, "link": "https://stackoverflow.com/questions/42162151/rust-error-e0495-using-split-at-mut-in-a-closure/42163901#42163901", "title": "Rust error E0495 using split_at_mut in a closure", "body": "<p>This is a borrowing issue:</p>\n\n<pre><code>fn assign_split_at_mut&lt;'a, 'b, T&gt;(s: &amp;'b mut &amp;'a mut [T], mid: usize) -&gt; &amp;'a mut [T] {\n    let (x, y) = (*s: &amp;'a mut [T]).split_at_mut(mid);\n    *s = y;\n    x\n}\n</code></pre>\n\n<p>Specifically, <code>split_at_mut</code> borrows <code>s</code>, so you cannot <em>also</em> assign to <code>s</code> while it is borrowed.</p>\n\n<p>To understand the issue, imagine that we were talking about vectors here, with <code>s: &amp;mut Vec&lt;T&gt;</code>: you could first borrow a slice from the <code>Vec</code> and then use <code>s</code> to mutate it.</p>\n\n<p>This is why Rust specifies that the <em>whole access path</em> is borrowed, not just the leaf.</p>\n\n<hr>\n\n<p>Okay, so what now?</p>\n\n<p>As mentioned by @nox, the solution is to \"dance\":</p>\n\n<ul>\n<li>move the ownership of <code>&amp;'a mut [T]</code> out of <code>s</code> to a local variable</li>\n<li>borrow this local variable</li>\n<li>assign to <code>s</code></li>\n</ul>\n\n<p>This way, the borrow checker is appeased since it knows that modifying <code>s</code> cannot affect the local variable and its borrows.</p>\n\n<p>There are various ways to move the ownership out of <code>&amp;mut X</code> depending on the situation, some common ways are:</p>\n\n<ul>\n<li><code>std::mem::replace</code>,</li>\n<li><code>std::mem::swap</code>,</li>\n<li><code>Option::take</code> if <code>X</code> is an <code>Option</code>,</li>\n<li>...</li>\n</ul>\n\n<p>In your case, <code>replace</code> is the simpler. And the solution provided by @nox is rather simple:</p>\n\n<pre><code>fn reserve&lt;'heap, T&gt;(heap: &amp;mut &amp;'heap mut [T], len: usize) -&gt; &amp;'heap mut [T] {\n    let tmp: &amp;'heap mut [T] = ::std::mem::replace(&amp;mut *heap, &amp;mut []);\n    let (reserved, tmp) = tmp.split_at_mut(len);\n    *heap = tmp;\n    reserved\n}\n</code></pre>\n"}], "owner": {"reputation": 4036, "user_id": 667457, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/33f9a9233b25c8230f5b5edb38493842?s=128&d=identicon&r=PG", "display_name": "Jeff Burdges", "link": "https://stackoverflow.com/users/667457/jeff-burdges"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 152, "favorite_count": 0, "accepted_answer_id": 42163901, "answer_count": 2, "score": 2, "last_activity_date": 1486743336, "creation_date": 1486737966, "last_edit_date": 1486738717, "question_id": 42162151, "link": "https://stackoverflow.com/questions/42162151/rust-error-e0495-using-split-at-mut-in-a-closure", "title": "Rust error E0495 using split_at_mut in a closure", "body": "<p>I'm encountering an <em>\"error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\"</em> with this simple function:</p>\n\n<pre><code>fn assign_split_at_mut&lt;'a, 'b, T&gt;(s: &amp;'b mut &amp;'a mut [T], mid: usize) -&gt; &amp;'a mut [T] {\n    let (x, y) = (*s: &amp;'a mut [T]).split_at_mut(mid);\n    *s = y;\n    x\n}\n</code></pre>\n\n<p>I wrote a <a href=\"https://play.rust-lang.org/?code=%23![feature%28type_ascription%29]%0A%0Afn%20assign_split_at_mut%3C%27a%2C%27b%2CT%3E%28s%3A%20%26%27b%20mut%20%26%27a%20mut%20[T]%2C%20mid%3A%20usize%29%20-%3E%20%26%27a%20mut%20[T]%20%7B%0A%20%20%20%20let%20%28x%2Cy%29%20%3D%20%28*s%20%3A%20%26%27a%20mut%20[T]%29.split_at_mut%3A%3A%3C%27a%3E%28mid%29%3B%0A%20%20%20%20*s%20%3D%20y%3B%0A%20%20%20%20x%0A%7D%0A%0A%2F*%0Afn%20assign_split_at_mut_unsafe%3C%27a%2CT%3E%28s%3A%20%26mut%20%26%27a%20mut%20[T]%2C%20mid%3A%20usize%29%20-%3E%20%26%27a%20mut%20[T]%20%7B%0A%20%20%20%20let%20len%20%3D%20%28*s%3A%20%26%27a%20mut%20[T]%29.len%28%29%3B%0A%20%20%20%20let%20ptr%20%3D%20%28*s%3A%20%26%27a%20mut%20[T]%29.as_mut_ptr%28%29%3B%0A%0A%20%20%20%20unsafe%20%7B%0A%20%20%20%20%20%20%20%20use%20std%3A%3Aslice%3A%3Afrom_raw_parts_mut%3B%0A%20%20%20%20%20%20%20%20assert!%28mid%20%3C%3D%20len%29%3B%0A%20%20%20%20%20%20%20%20*s%3A%20%26%27a%20mut%20[T]%20%3D%20from_raw_parts_mut%28ptr.offset%28mid%20as%20isize%29%2C%20len%20-%20mid%29%3B%0A%20%20%20%20%20%20%20%20from_raw_parts_mut%28ptr%2C%20mid%29%0A%20%20%20%20%7D%0A%7D%0A*%2F%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20println!%28%22Hello%20world!%22%29%3B%0A%7D&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">playpen example</a> including this <code>unsafe</code> variant of <code>split_at_mut</code> that does work.</p>\n\n<pre><code>fn assign_split_at_mut_unsafe&lt;'a, T&gt;(s: &amp;mut &amp;'a mut [T], mid: usize) -&gt; &amp;'a mut [T] {\n    let len = (*s: &amp;'a mut [T]).len();\n    let ptr = (*s: &amp;'a mut [T]).as_mut_ptr();\n\n    unsafe {\n        use std::slice::from_raw_parts_mut;\n        assert!(mid &lt;= len);\n        *s: &amp;'a mut [T] = from_raw_parts_mut(ptr.offset(mid as isize), len - mid);\n        from_raw_parts_mut(ptr, mid)\n    }\n}\n</code></pre>\n\n<p>In fact, I want to write roughly this:</p>\n\n<pre><code>pub fn slice_header&lt;'a&gt;(&amp;'static self, mut header: &amp;'a mut [u8])\n  -&gt; MyResult&lt;HeaderRefs&lt;'a&gt;&gt;\n{\n    // ...\n    let take = |l: usize| -&gt; &amp;'a mut [u8] {\n        let (x,y) = header.split_at_mut(l);\n        header = y;  x\n    };\n    let hr = HeaderRefs {\n        params: self,\n        alpha: array_mut_ref![take(32),0,32],\n        gamma: array_mut_ref![take(16),32,16],\n        beta: take(self.beta_length as usize),\n        surb_log: take(self.surblog_length as usize),\n        surb: take(self.surb_length()),\n    };\n    // ...\n    Ok(hr)\n}\n</code></pre>\n\n<p>I believe it would work fine if I simply wrote out a bunch of </p>\n\n<pre><code>let (alpha,header) = header.split_at_mut(32);\nlet (gamma,header) = header.split_at_mut(16);\n// ...\n</code></pre>\n\n<p>Maybe it'd work if I put them into an array.  I cannot get it to work with a closure, which would look much cleaner.  </p>\n"}, {"tags": ["io", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1486734325, "post_id": 42160773, "comment_id": 71486739, "body": "What about <code>std::io::BufWriter</code>?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1486734422, "post_id": 42160773, "comment_id": 71486805, "body": "@ljedrz AFAICS this is just an intermediate buffer that wraps another writer (it&#39;s only storing many small writes in a buffer before flushing, but isn&#39;t intended to be the target you write to)... unless I misunderstood the docs."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486734454, "post_id": 42160773, "comment_id": 71486829, "body": "Do you mean you want to allocate a bunch of smaller buffers and then do one combine/copy into a big buffer at the end?"}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486734565, "post_id": 42160773, "comment_id": 71486901, "body": "@Chris Emerson, yes on a bunch of smaller buffers, and <i>maybe</i> combine at the end. But not necessarily. Could do other operations on it too (in memory compression, keep as-is for re-use... whatever)."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1486734982, "post_id": 42160773, "comment_id": 71487151, "body": "The documentation doesn&#39;t list any obvious implementations of <code>std::io::Write</code> that do what you want, so I think you&#39;d need to implement it."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "edited": false, "score": 0, "creation_date": 1486735078, "post_id": 42160773, "comment_id": 71487222, "body": "Suspected this, no big-deal, just wondered if I was missing something obvious, or if it was implemented in some other part of stdlib."}, {"owner": {"reputation": 102109, "user_id": 1600898, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/01377f8b31f24b0265854666b29d0c03?s=128&d=identicon&r=PG", "display_name": "user4815162342", "link": "https://stackoverflow.com/users/1600898/user4815162342"}, "edited": false, "score": 1, "creation_date": 1486735155, "post_id": 42160773, "comment_id": 71487271, "body": "This seems like a rather specialized requirement (where details can matter, to boot). In addition to that, it is quite easy to implement the <code>Write</code> trait to do what you want, e.g. using a <code>Vec&lt;Vec&lt;u8&gt;&gt;</code>."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1486742135, "post_id": 42160773, "comment_id": 71491994, "body": "note that system malloc or mmap (but not necessarily jemalloc) should be cheap. You can reserve a lot of address space in advance and it won&#39;t actually need the memory until you touch those pages. so either a crate providing <code>Write</code> over mmaped-memory or trying <code>Vec</code> with system malloc might work. Of course that requires 64bit systems and probably tempfile-backed memory to avoid overcommit problems."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1486737737, "creation_date": 1486737737, "answer_id": 42162061, "question_id": 42160773, "link": "https://stackoverflow.com/questions/42160773/is-there-a-way-to-write-to-a-memory-buffer-using-stdiowrite-without-re-alloc/42162061#42162061", "title": "Is there a way to write to a memory buffer using std::io::Write without re-allocation?", "body": "<p>There is no such support in the Rust 1.15.1 standard library. </p>\n\n<p>Once you've implemented such a data structure that handles being created and avoids whatever memory fragmentation issues you have, implementing <code>Write</code> should be straightforward.</p>\n\n<p>If you have memory fragmentation issues on a 64-bit machine (16 Exabytes)\n or the smaller 48-bit addressing (256 terabytes), I would recommend rechecking your solution for appropriateness to the problem domain.</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1303, "favorite_count": 0, "answer_count": 1, "score": 0, "last_activity_date": 1486737745, "creation_date": 1486733950, "last_edit_date": 1486737745, "question_id": 42160773, "link": "https://stackoverflow.com/questions/42160773/is-there-a-way-to-write-to-a-memory-buffer-using-stdiowrite-without-re-alloc", "title": "Is there a way to write to a memory buffer using std::io::Write without re-allocation?", "body": "<p>Is there a way to use <code>std::io::Write</code> to write a stream directly to memory, without either pre-allocating the final at the outset, or potentially re-allocating the entire array while writing?</p>\n\n<p>While <code>Vec</code> implements <code>Write</code>, this requires contiguous memory and I assume may re-allocate as with regular vector resizing.</p>\n\n<p>Does Rust's <code>stdlib</code> support something like this, or would it need to be implemented?</p>\n\n<hr>\n\n<p>I want to write to memory which has the potential to go into multiple GiB. It's possible the memory is fragmented and it's possible that a contiguous region of the size I want isn't available. Instead, it's quite efficient to allocate many chunks (probably fixed power-of-2 size), and allocate more chunks as they're needed.</p>\n\n<p>Once finished you could read the data back, compress the chunks in memory, cache some to disk, binary-diff with previous writes to de-duplicate chunks... etc.</p>\n"}, {"tags": ["rust", "idioms"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 3, "creation_date": 1486724281, "post_id": 42157511, "comment_id": 71480538, "body": "Type aliases are explained in the <a href=\"https://doc.rust-lang.org/book/type-aliases.html\" rel=\"nofollow noreferrer\">Type Aliases section of the book</a>; is there something about that which is unclear?"}, {"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1486725726, "post_id": 42157511, "comment_id": 71481487, "body": "Yes. Namely, what&#39;s the purpose of defining a type alias for a function signature? What can you &quot;do&quot; with it? Is it some sort of a function pointer?"}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1486725837, "post_id": 42157511, "comment_id": 71481576, "body": "It&#39;s not a function signature; it&#39;s a function pointer type.  <code>const X: i32 = 0;</code> is to <code>i32</code> as <code>fn f(i32) -&gt; String { ... }</code> is to <code>fn(i32) -&gt; String</code>.  It&#39;s a type like any other type.  All this is doing is defining a function pointer type with the given signature.  That there&#39;s a type alias involved is irrelevant; it doesn&#39;t change anything."}], "answers": [{"comments": [{"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 0, "creation_date": 1486726683, "post_id": 42158449, "comment_id": 71482059, "body": "Perfectly explained! TYVM."}, {"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 0, "creation_date": 1486726792, "post_id": 42158449, "comment_id": 71482130, "body": "Also, by &quot;identity of function&quot; I assume you mean <i>function name</i>, i.e. &quot;hello&quot;?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 1, "creation_date": 1486726868, "post_id": 42158449, "comment_id": 71482171, "body": "@neektza: No... not really. In the case of generic functions, each instance of the generic function has its own identity, so it&#39;s a bit more complex."}, {"owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 0, "creation_date": 1486726977, "post_id": 42158449, "comment_id": 71482235, "body": "Can you point me to the relevant part of the docs please (related to &quot;function identities&quot;)?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "edited": false, "score": 0, "creation_date": 1486728958, "post_id": 42158449, "comment_id": 71483408, "body": "@neektza: I don&#39;t think it&#39;s an official term. I&#39;ll remove the italics."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1486735045, "post_id": 42158449, "comment_id": 71487200, "body": "Regarding &quot;each function has a unique type, which cannot be named&quot;: what does this mean? If I have <code>fn greet(name: &amp;str) { println!(&quot;hello, {}&quot;, name); }</code>, why can&#39;t I say that <code>greet</code> has the type <code>fn(&amp;str) -&gt; ()</code>?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1486735392, "post_id": 42158449, "comment_id": 71487397, "body": "@trentcl: You could say so, but it would be inaccurate. I invite you to inspect how <code>Box&lt;Fn(&amp;str) -&gt; ()&gt;</code> is represented at the binary level =&gt; there is no data pointer (it&#39;s &quot;1&quot;), and instead the function to be called is in the v-table. This is only possible because each function has its own type, and therefore its own v-table."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1486740229, "post_id": 42158449, "comment_id": 71490741, "body": "@Matthieu Thanks. Is that only a fact about the implementation of rustc, and not a feature of the type system? Because from a theoretical standpoint it seems that there is no difference between my statement and yours. (I have no background in type theory, just trying to understand better)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 1, "creation_date": 1486741603, "post_id": 42158449, "comment_id": 71491630, "body": "@trentcl: I don&#39;t have a background in type theory so... I would expect that we can say that <code>fn(&amp;str) -&gt; ()</code> is a super-type of the actual type of <code>hello</code>, but this is something that should be asked to one of the rustc developers (Niko, for example)."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 9, "last_activity_date": 1486728970, "last_edit_date": 1486728970, "creation_date": 1486726564, "answer_id": 42158449, "question_id": 42157511, "link": "https://stackoverflow.com/questions/42157511/what-is-a-function-signature-and-type/42158449#42158449", "title": "What is a function signature and type?", "body": "<p>The signature of a function describes:</p>\n\n<ul>\n<li>its name</li>\n<li>its arguments</li>\n<li>its result</li>\n<li>in the case of generic functions, its generic parameters, with potentially specific bounds</li>\n</ul>\n\n<p>For example, if you define:</p>\n\n<pre><code>fn hello(s: &amp;str) {\n    println!(\"Hello {}\", s);\n}\n</code></pre>\n\n<p>The function signature is <code>fn hello(&amp;str)</code>.</p>\n\n<hr>\n\n<p>In Rust, each function has a unique <em>type</em>, which cannot be named.</p>\n\n<p>However, if you have a function, you can also coerce it into a generic <code>fn</code> type which does not care about the identity of the function, but only about how it can be used.</p>\n\n<p>For the above function, this generic type is: <code>fn(&amp;str)</code> (or <code>fn(&amp;str) -&gt; ()</code> if we wish to be explicit).</p>\n\n<hr>\n\n<p>This generic type is useful to abstract over multiple functions with a similar signature. For example:</p>\n\n<pre><code>fn add(left: i32, right: i32) -&gt; i32 { left + right }\nfn sub(left: i32, right: i32) -&gt; i32 { left - right }\n\nfn select(name: &amp;str) -&gt; fn(i32, i32) -&gt; i32 {\n    match name {\n        \"add\" =&gt; add,\n        \"sub\" =&gt; sub,\n        _ =&gt; unimplemented!(),\n    }\n}\n\nfn main() {\n    let fun = select(\"add\");\n    println!(\"{} + {} = {}\", 1, 2, fun(1, 2));\n}\n</code></pre>\n\n<hr>\n\n<p>It is close to function pointers in C or C++, however unlike function pointers it cannot be null.</p>\n\n<p>If you need a nullable function, you can use <code>Option&lt;fn(i32, i32) -&gt; i32&gt;</code> instead.</p>\n\n<hr>\n\n<p>And thus finally we come to this type alias: it's simply a shortcut because the generic <code>fn</code> type is long. Like any other type alias.</p>\n"}], "owner": {"reputation": 353, "user_id": 833591, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/32a2f52a30d53f12b0d8e3f0696fe4ac?s=128&d=identicon&r=PG", "display_name": "neektza", "link": "https://stackoverflow.com/users/833591/neektza"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2758, "favorite_count": 0, "accepted_answer_id": 42158449, "answer_count": 1, "score": 2, "last_activity_date": 1486738079, "creation_date": 1486723753, "last_edit_date": 1486738079, "question_id": 42157511, "link": "https://stackoverflow.com/questions/42157511/what-is-a-function-signature-and-type", "title": "What is a function signature and type?", "body": "<p>I found the type alias below in an Scheme interpreter I'm studying. While evaluating the AST, it recognizes a function either as a natively supported function, or as a user defined function. I understand the second part of the <code>Enum</code> definition, but the first part eludes me. </p>\n\n<pre><code>pub enum Function {\n    Native(ValueOperation),\n    Scheme(Vec&lt;String&gt;, Vec&lt;Value&gt;, Rc&lt;RefCell&lt;Environment&gt;&gt;),\n}\n\n\ntype ValueOperation = fn(&amp;[Value], Rc&lt;RefCell&lt;Environment&gt;&gt;) -&gt; Result&lt;Value, RuntimeError&gt;;\n</code></pre>\n\n<p>How does this type alias work? Does this definition say that a <code>ValueOperation</code> is just a shorthand for a function signature? I was unable to find any mention of this idiom in the official docs/books.</p>\n\n<p>What's the purpose of defining a type alias for a function signature? What can you \"do\" with it? Is it some sort of a function pointer? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1486718124, "post_id": 42155212, "comment_id": 71476666, "body": "In your example, what&#39;s the type of <code>a_owned</code>? Do you want it to be <code>Foo</code> too?"}, {"owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1486718240, "post_id": 42155212, "comment_id": 71476733, "body": "I would love for it to be a <code>Foo</code> with the lifetime parameter erased, but it&#39;s more the ergonomics of use that I&#39;m interested in. i.e. to not have to define new types."}], "answers": [{"comments": [{"owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "edited": false, "score": 0, "creation_date": 1486741140, "post_id": 42155707, "comment_id": 71491328, "body": "Do you know if there&#39;s any way to define IntoOwned for Foo, so that foo.into_owned() would return a Foo&lt;&#39;static&gt;?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "edited": false, "score": 1, "creation_date": 1486741485, "post_id": 42155707, "comment_id": 71491545, "body": "@dnaq: Sure, you just need two implementations: <code>impl&lt;&#39;a&gt; Borrow&lt;Foo&lt;&#39;a&gt;&gt; for Foo&lt;&#39;static&gt;</code>, and then <code>impl&lt;&#39;a&gt; ToOwned for Foo&lt;&#39;a&gt; { type Owned = Foo&lt;&#39;static&gt;; }</code>"}, {"owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "edited": false, "score": 0, "creation_date": 1487012408, "post_id": 42155707, "comment_id": 71584264, "body": "Seems like I can&#39;t add that implementation for <code>Borrow</code> because of conflicting trait bounds. I guess that the instantiation of <code>impl&lt;&#39;a&gt; Borrow&lt;Foo&lt;&#39;a&gt;&gt; for Foo&lt;&#39;static&gt;</code> where &#39;a == &#39;static is the issue."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 8, "last_activity_date": 1486718542, "creation_date": 1486718542, "answer_id": 42155707, "question_id": 42155212, "link": "https://stackoverflow.com/questions/42155212/convenient-way-to-transform-struct-with-cow-fields-to-owned/42155707#42155707", "title": "Convenient way to transform struct with Cow-fields to owned", "body": "<p>Building blocks:</p>\n\n<ul>\n<li><code>Cow::into_owned</code> will return the owned version.</li>\n<li><code>'static</code> is the lifetime of the program</li>\n</ul>\n\n<p>Therefore we can write a utility function:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn into_owned&lt;'a, B&gt;(c: Cow&lt;'a, B&gt;) -&gt; Cow&lt;'static, B&gt;\n    where B: 'a + ToOwned + ?Sized\n{\n    Cow::Owned(c.into_owned())\n}\n</code></pre>\n\n<p>You can expand this to <code>Foo&lt;'a&gt;</code> becoming <code>Foo&lt;'static&gt;</code> by simply applying the transformation on all fields.</p>\n"}], "owner": {"reputation": 1884, "user_id": 78264, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/184b96c136e7aa7b05b8e1539f345c70?s=128&d=identicon&r=PG", "display_name": "dnaq", "link": "https://stackoverflow.com/users/78264/dnaq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 694, "favorite_count": 0, "accepted_answer_id": 42155707, "answer_count": 1, "score": 5, "last_activity_date": 1486738193, "creation_date": 1486717073, "last_edit_date": 1486738193, "question_id": 42155212, "link": "https://stackoverflow.com/questions/42155212/convenient-way-to-transform-struct-with-cow-fields-to-owned", "title": "Convenient way to transform struct with Cow-fields to owned", "body": "<p>I have a struct defined like</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    field1: &amp;'a str,\n    field2: &amp;'a str,\n    field3: &amp;'a u8,\n    // ...\n}\n</code></pre>\n\n<p>that I use for returning parsing results from an <code>mmap</code>ped file. For some successful parses, I want to store the results for later processing and for various reasons that processing will happen after the memory is released. I could do something like</p>\n\n<pre><code>struct OwnedFoo {\n    field1: String,\n    field2: String,\n    field3: Vec&lt;u8&gt;,\n    // ...\n}\n</code></pre>\n\n<p>and manually converting all <code>Foo</code>s that I'm interested in into <code>OwnedFoos</code>. However I'm wondering if I could do something like:</p>\n\n<pre><code>struct Foo&lt;'a&gt; {\n    field1: Cow&lt;'a, str&gt;,\n    field2: Cow&lt;'a, str&gt;,\n    field3: Cow&lt;'a, u8&gt;,\n    ...\n}\n</code></pre>\n\n<p>instead and if there's any way to automatically make all the <code>Cow</code>s owned and erase the lifetime parameter. I haven't found anything in the library documentation that seems applicable.</p>\n\n<p>Something like:</p>\n\n<pre><code>let a = Foo { ... };\nlet a_owned = a.into_owned();\n// do stuff with a_owned that I can't do with a\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486714298, "post_id": 42154376, "comment_id": 71474576, "body": "Have you read <a href=\"https://doc.rust-lang.org/book/crates-and-modules.html\" rel=\"nofollow noreferrer\">the crate and module</a> section of the book? It&#39;s a good starting point."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486714553, "post_id": 42154376, "comment_id": 71474697, "body": "The short answer: <code>use</code> was designed so that you can generally move your modules around without having to change the imports. By default, it resolves all names from the <i>root</i>. To change the default, you can use <code>use self::</code> to start from the current module or <code>use super::</code> to start from the parent module (and you use <code>use super::super::</code> to get to the grand-parent module)."}], "owner": {"reputation": 1148, "user_id": 1312837, "user_type": "registered", "accept_rate": 72, "profile_image": "https://www.gravatar.com/avatar/2f52d7e8217159e88041ed2dfc033951?s=128&d=identicon&r=PG", "display_name": "user1312837", "link": "https://stackoverflow.com/users/1312837/user1312837"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 116, "favorite_count": 0, "closed_date": 1486714457, "answer_count": 0, "score": 0, "last_activity_date": 1486713875, "creation_date": 1486713875, "question_id": 42154376, "link": "https://stackoverflow.com/questions/42154376/include-module-from-the-same-directory-level", "closed_reason": "Duplicate", "title": "include module from the same directory level", "body": "<p>For example, I have ./main.rs and 2 dirs \"a\", \"b\". At ./a/x.rs I need to call function from ./b/y.rs.</p>\n\n<p>I try to add \"mod b;\" at the top of ./a/x.rs but get a compilation error. </p>\n\n<p>How can I include module from the same dir level? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486688119, "post_id": 42149711, "comment_id": 71465734, "body": "See <a href=\"http://stackoverflow.com/questions/32209391/how-to-store-a-sqliteconnection-and-sqlitestatement-objects-in-the-same-struct-i\" title=\"how to store a sqliteconnection and sqlitestatement objects in the same struct i\">stackoverflow.com/questions/32209391/&hellip;</a> for a close approximation to your question, which prompted the question this was marked as a duplicate of."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486688495, "post_id": 42149711, "comment_id": 71465832, "body": "I see that <a href=\"http://stackoverflow.com/questions/32209391/how-to-store-a-sqliteconnection-and-sqlitestatement-objects-in-the-same-struct-i\" title=\"how to store a sqliteconnection and sqlitestatement objects in the same struct i\">stackoverflow.com/questions/32209391/&hellip;</a> doesn&#39;t actually have an answer with working code."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486688540, "post_id": 42149711, "comment_id": 71465845, "body": "Also re the other question you link to: I&#39;m not using any references in my struct."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486688662, "post_id": 42149711, "comment_id": 71465881, "body": "Please make sure you read the <b>duplicate</b> question thoroughly. Specifically, you just said the moral equivalent of <i>&quot;Sometimes, I&#39;m not even taking a reference of the value and I get the same error&quot;</i> from the duplicate. Hint: that&#39;s what those <code>&#39;a</code> lifetimes mean - a reference."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1486688664, "post_id": 42149711, "comment_id": 71465883, "body": "The last line of this comment is my own experience every time I come to StackOverflow with Rust questions: <a href=\"https://news.ycombinator.com/item?id=13586363\" rel=\"nofollow noreferrer\">news.ycombinator.com/item?id=13586363</a>"}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486688738, "post_id": 42149711, "comment_id": 71465906, "body": "Can you explain why a lifetime implies a reference?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486689096, "post_id": 42149711, "comment_id": 71465989, "body": "I apologize; I&#39;m not attempting to yell at you at all. It&#39;s just that your question has already been asked, so I marked it as a duplicate. <b>Duplicates aren&#39;t inherently bad</b>, they just create more signposts for people to search and find the answers. I also pointed to to another question that asks the same thing as this one, substituting SQLite for Postgres, which likewise has an answer. As for <i>why a lifetime implies a reference</i> \u2014 that seems like a perfectly reasonable question to ask. The short version is that that&#39;s what lifetimes <b>are</b> \u2014 how long a reference is valid for."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486689263, "post_id": 42149711, "comment_id": 71466053, "body": "It&#39;s actually slightly more nuanced, so I&#39;ve unduped. You still wont be able to do what you want, but I&#39;ll show why in a second."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486689406, "post_id": 42149711, "comment_id": 71466097, "body": "If a lifetime implies a reference, then is my struct the same thing as <code>pub struct Db&lt;&#39;a&gt; {   conn: Connection,   tx: &amp;&#39;a Transaction&lt;&#39;a&gt;,   insert_user: &amp;&#39;a Statement&lt;&#39;a&gt;, }</code>? If so, why does using that change the compiler errors?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486701722, "post_id": 42149711, "comment_id": 71469505, "body": "Please do not edit your question to ask follow-up questions; just go ahead and <i>ask a new question</i>. The entire point of Stack Overflow is to provide a canonical resource for questions and answers to those questions. One of the ways that is done is by having questions where the titles map to the question being asked. Your follow up question only tenuously has to deal with &quot;a database connection bundle&quot;, so more properly lives somewhere else."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486701753, "post_id": 42149711, "comment_id": 71469517, "body": "I will also point once again to <a href=\"http://stackoverflow.com/q/32300132/155423\">the other question</a> which has a section that again addresses your question. You can find it by searching for <b>There is a special case where the lifetime tracking is overzealous: when you have something placed on the heap</b>"}], "answers": [{"comments": [{"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 1, "creation_date": 1486690507, "post_id": 42149977, "comment_id": 71466436, "body": "So from your linked answer and <a href=\"http://stackoverflow.com/questions/36230710/how-does-rust-move-stack-variables-that-are-not-copyable\" title=\"how does rust move stack variables that are not copyable\">stackoverflow.com/questions/36230710/&hellip;</a> I see that when the Rust docs say &quot;moved&quot;, they mean not just &quot;moved to a new owner&quot; but also &quot;moved to a new place in RAM&quot;. That is a new piece of information to me that is pretty helpful."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1486690580, "post_id": 42149977, "comment_id": 71466456, "body": "&quot;Now this makes even less sense because now we are just making up lifetime.&quot; --- I don&#39;t see why it makes less sense. Normally when a function returns a thing, the thing lives as long as it is assigned to something. Why can&#39;t <code>-&gt; Db</code> work the same way?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1486690672, "post_id": 42149977, "comment_id": 71466488, "body": "Yes, &quot;lifetime&quot; is probably more properly stated as &quot;the scope of the program where the address of a value is guaranteed not to change&quot;, but no one would say that."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 1, "creation_date": 1486691430, "post_id": 42149977, "comment_id": 71466705, "body": "Okay, I really appreciate your patience and helpfulness. I wrote an answer myself that shows working code close to what I want. There are still concepts I don&#39;t understand yet, but I&#39;m working on it. In particular: since my struct has no references, doesn&#39;t that everything &quot;moves&quot; into it and it becomes the owner of those things? But I do understand how <code>conn</code> can never move since <code>tx</code> has a reference to it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1486691679, "post_id": 42149977, "comment_id": 71466787, "body": "@PaulAJungwirth your struct 100% has references in it, they just happen to be inside another struct. See the above definition of <code>Transaction</code> \u2014 it contains a reference. Therefore your struct, which contains <code>Transaction</code>, has a reference."}, {"owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1486691948, "post_id": 42149977, "comment_id": 71466856, "body": "Can you elaborate on this?: &quot;If you want to transfer ownership, you just do that.&quot; How do you just do it?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "edited": false, "score": 0, "creation_date": 1486692171, "post_id": 42149977, "comment_id": 71466910, "body": "@PaulAJungwirth you have to <i>have</i> ownership first; something like a <code>Box&lt;T&gt;</code> instead of a <code>&amp;T</code>, a <code>Vec&lt;T&gt;</code> instead of <code>&amp;[T]</code> or a <code>String</code> instead of a <code>&amp;str</code>. That&#39;s basically the entire thesis in <a href=\"http://stackoverflow.com/a/29429698/155423\">Return local String as a slice</a>. Then you return it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1499690063, "last_edit_date": 1499690063, "creation_date": 1486689766, "answer_id": 42149977, "question_id": 42149711, "link": "https://stackoverflow.com/questions/42149711/rust-lifetime-for-database-connection-bundle/42149977#42149977", "title": "Rust lifetime for database connection bundle", "body": "<p>Starting with this function:</p>\n\n<pre><code>fn make_db(url: &amp;str) -&gt; Db {\n    unimplemented!()\n}\n</code></pre>\n\n<p>Due to <a href=\"https://doc.rust-lang.org/stable/book/second-edition/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"nofollow noreferrer\">lifetime elision</a>, this is equivalent to:</p>\n\n<pre><code>fn make_db&lt;'a&gt;(url: &amp;'a str) -&gt; Db&lt;'a&gt; {\n    unimplemented!()\n}\n</code></pre>\n\n<p>That is, the lifetimes of all the references inside the <code>Db</code> struct <strong>must</strong> live as long as the string slice passed in. That only makes sense if the struct is holding on to the string slice.</p>\n\n<hr>\n\n<p>To \"solve\" that, we can try to separate the lifetimes:</p>\n\n<pre><code>fn make_db&lt;'a, 'b&gt;(url: &amp;'a str) -&gt; Db&lt;'b&gt; {\n    unimplemented!()\n}\n</code></pre>\n\n<p>Now this makes <em>even less sense</em> because now we are just making up a lifetime. Where is that <code>'b</code> coming from? What happens if the caller of <code>make_db</code> decides that the concrete lifetime for the generic lifetime parameter <code>'b</code> should be <code>'static</code>? This is further explained in <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>, search for \"something is really wrong with our creation function\".</p>\n\n<p>We also see the part of the question with \"Sometimes, I'm not even taking a reference of the value\" in <a href=\"https://stackoverflow.com/q/32300132/155423\">the other question</a>, which says in the answer:</p>\n\n<blockquote>\n  <p>the <code>Child</code> instance contains a reference to the <code>Parent</code> that created it,</p>\n</blockquote>\n\n<p>If we check out the <a href=\"https://docs.rs/postgres/0.13.6/postgres/struct.Connection.html\" rel=\"nofollow noreferrer\">definition for <code>Connection::transaction</code></a>:</p>\n\n<pre><code>fn transaction&lt;'a&gt;(&amp;'a self) -&gt; Result&lt;Transaction&lt;'a&gt;&gt;\n</code></pre>\n\n<p>or <a href=\"https://github.com/sfackler/rust-postgres/blob/postgres-v0.13.6/postgres/src/transaction.rs#L150-L156\" rel=\"nofollow noreferrer\">the definition</a> if you don't believe the docs:</p>\n\n<pre><code>pub struct Transaction&lt;'conn&gt; {\n    conn: &amp;'conn Connection,\n    depth: u32,\n    savepoint_name: Option&lt;String&gt;,\n    commit: Cell&lt;bool&gt;,\n    finished: bool,\n}\n</code></pre>\n\n<p>Yup, a <code>Transaction</code> keeps a reference to its parent <code>Connection</code>. Now that we see that <code>Transaction</code> has a reference to <code>Connection</code> we can return to <a href=\"https://stackoverflow.com/q/32300132/155423\">the other question</a> to see how to solve the problem: split apart the structs so that the nesting mirrors the lifetimes.</p>\n\n<p>This was a very long-winded way of saying: no, you cannot create a single structure that contains a database and a transaction of that database due to the implementation of the postgres crate. Presumably the crate is implemented in this fashion for maximum performance.</p>\n\n<hr>\n\n<blockquote>\n  <p>I don't see why [returning <code>Db&lt;'b&gt;</code>] makes less sense. Normally when a function returns a thing, the thing lives as long as it is assigned to something. Why can't <code>-&gt; Db</code> work the same way?</p>\n</blockquote>\n\n<p>The entire point of references is that you don't own the referred-to value. You return <code>Db</code> and the caller of <code>make_db</code> would own that, but <strong>what owns the thing that <code>Db</code> is referring to</strong>? Where did it come from? You cannot return a reference to something local as that would violate all of Rust's safety rules. If you want to transfer ownership, you just do that. </p>\n\n<p>See also</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/32682876/155423\">Is there any way to return a reference to a variable created in a function?</a></li>\n<li><a href=\"https://stackoverflow.com/q/29428227/155423\">Return local String as a slice (&amp;str)</a></li>\n</ul>\n"}, {"tags": [], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "is_accepted": true, "score": 1, "last_activity_date": 1486691324, "last_edit_date": 1495540055, "creation_date": 1486691219, "answer_id": 42150176, "question_id": 42149711, "link": "https://stackoverflow.com/questions/42149711/rust-lifetime-for-database-connection-bundle/42150176#42150176", "title": "Rust lifetime for database connection bundle", "body": "<p>Using <a href=\"https://stackoverflow.com/a/42149977/155423\">the other answer</a>, I put together working code that lets me bundle up the transaction and all the prepared statements, and pass them around together:</p>\n\n<pre><code>extern crate postgres;\n\nuse postgres::{Connection, TlsMode};\nuse postgres::transaction::Transaction;\nuse postgres::stmt::Statement;\n\npub struct Db&lt;'a&gt; {\n    tx: Transaction&lt;'a&gt;,\n    insert_user: Statement&lt;'a&gt;,\n}\n\nfn make_db(conn: &amp;Connection) -&gt; Db {\n    let tx = conn.transaction().unwrap();\n    let insert_user = tx.prepare(\"INSERT INTO users VALUES ($1)\").unwrap();\n    Db {\n        tx: tx,\n        insert_user: insert_user,\n    }\n}\n\npub fn main() {\n    let conn = Connection::connect(\"postgres://paul@localhost/t\", TlsMode::None).unwrap();\n    let db = make_db(&amp;conn);\n    for u in &amp;[\"foo\", \"bar\"] {\n        db.insert_user.execute(&amp;[&amp;u]);\n    }\n    db.tx.commit().unwrap();\n}\n</code></pre>\n\n<p>As I understand it, Rust wants to guarantee that <code>conn</code> lives as long as <code>db</code>, so by keeping <code>conn</code> outside of the \"constructor\", the lexical structure ensures that it won't get removed too early.</p>\n\n<p>My struct still doesn't encapsulate <code>conn</code>, which seems too bad to me, but at least it lets me keep everything else together.</p>\n"}], "owner": {"reputation": 20458, "user_id": 122087, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/431c64e3e3fd0c892ad2a7e4150cf63e?s=128&d=identicon&r=PG", "display_name": "Paul A Jungwirth", "link": "https://stackoverflow.com/users/122087/paul-a-jungwirth"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 776, "favorite_count": 3, "accepted_answer_id": 42150176, "answer_count": 2, "score": 2, "last_activity_date": 1499690063, "creation_date": 1486687975, "last_edit_date": 1495542399, "question_id": 42149711, "link": "https://stackoverflow.com/questions/42149711/rust-lifetime-for-database-connection-bundle", "title": "Rust lifetime for database connection bundle", "body": "<p>I'm trying to design a struct to carry around a Postgres connection, transaction, and a bunch of prepared statements, and then execute the prepared statements repeatedly. But I'm running into lifetime problems. Here is what I've got:</p>\n\n<pre><code>extern crate postgres;\n\nuse postgres::{Connection, TlsMode};\nuse postgres::transaction::Transaction;\nuse postgres::stmt::Statement;\n\npub struct Db&lt;'a&gt; {\n    conn: Connection,\n    tx: Transaction&lt;'a&gt;,\n    insert_user: Statement&lt;'a&gt;,\n}\n\nfn make_db(url: &amp;str) -&gt; Db {\n    let conn = Connection::connect(url, TlsMode::None).unwrap();\n    let tx = conn.transaction().unwrap();\n    let insert_user = tx.prepare(\"INSERT INTO users VALUES ($1)\").unwrap();\n    Db {\n        conn: conn,\n        tx: tx,\n        insert_user: insert_user,\n    }\n}\n\npub fn main() {\n    let db = make_db(\"postgres://paul@localhost/t\");\n    for u in &amp;[\"foo\", \"bar\"] {\n        db.insert_user.execute(&amp;[&amp;u]);\n    }\n    db.tx.commit().unwrap();\n}\n</code></pre>\n\n<p>Here is the error I'm getting (on Rust 1.15.0 stable):</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: `conn` does not live long enough\n  --&gt; src/main.rs:15:14\n   |\n15 |     let tx = conn.transaction().unwrap();\n   |              ^^^^ does not live long enough\n...\n22 | }\n   | - borrowed value only lives until here\n   |\nnote: borrowed value must be valid for the anonymous lifetime #1 defined on the body at 13:28...\n  --&gt; src/main.rs:13:29\n   |\n13 | fn make_db(url: &amp;str) -&gt; Db {\n   |                             ^\n</code></pre>\n\n<p>I've read the Rust book (I've lost count how many times), but I'm not sure how to make progress here. Any suggestions?</p>\n\n<p><strong>EDIT:</strong> Thinking about this some more I still don't understand why in principle I can't tell Rust, \"<code>conn</code> lives as long as <code>Db</code> does\". The issue is with moving <code>conn</code>, but what if I don't move it? I understand why in C you can't return a pointer to stack-allocated memory, e.g.:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>#include &lt;stdio.h&gt;\n\nint *build_array() {\n  int ar[] = {1,2,3};\n  return ar;\n}\n\nint main() {\n  int *ar = build_array();\n  printf(\"%d\\n\", ar[1]);\n}\n</code></pre>\n\n<p>And I get how that is similar to in Rust <a href=\"https://stackoverflow.com/questions/29428227/return-local-string-as-a-slice-str\">returning a <code>&amp;str</code></a> or <a href=\"https://stackoverflow.com/questions/21309167/how-do-i-return-an-owned-array-from-a-function\">returning a vec slice</a>.</p>\n\n<p>But in Rust you <em>can</em> do this:</p>\n\n<pre><code>#[derive(Debug)]\nstruct S {\n    ar: Vec&lt;i32&gt;,\n}\n\nfn build_array() -&gt; S {\n    let v = vec![1, 2, 3];\n    S { ar: v }\n}\n\nfn main() {\n    let s = build_array();\n    println!(\"{:?}\", s);\n}\n</code></pre>\n\n<p>And my understanding is that Rust is smart enough so that returning <code>S</code> doesn't actually require a move; essentially it is going straight to the caller's stack frame.</p>\n\n<p>So I don't understand why it can't also put <code>Db</code> (including <code>conn</code>) in the caller's stack frame. Then no moves would be required, and <code>tx</code> would never hold an invalid address. I feel like Rust should be able to figure that out. I tried adding a lifetime hint, like this:</p>\n\n<pre><code>pub struct Db&lt;'a&gt; {\n    conn: Connection&lt;'a&gt;,\n    tx: Transaction&lt;'a&gt;,\n    insert_user: Statement&lt;'a&gt;,\n}\n</code></pre>\n\n<p>But that gives an \"unexpected lifetime parameter\" error. I can accept that Rust can't follow the logic, but I'm curious if there is a reason why in principle it couldn't.</p>\n\n<p>It <em>does</em> seem that putting <code>conn</code> on the heap should solve my problems, but I can't get this to work either:</p>\n\n<pre><code>pub struct Db&lt;'a&gt; {\n    conn: Box&lt;Connection&gt;,\n    tx: Transaction&lt;'a&gt;,\n    insert_user: Statement&lt;'a&gt;,\n}\n</code></pre>\n\n<p>Even with a <code>let conn = Box::new(Connection::connect(...));</code>, Rust still tells me \"conn does not live long enough\". Is there some way to make this work with <code>Box</code>, or is that a dead end?</p>\n\n<p><strong>EDIT 2:</strong> I tried doing this with macros also, to avoid any extra stack frames:</p>\n\n<pre><code>extern crate postgres;\n\nuse postgres::{Connection, TlsMode};\nuse postgres::transaction::Transaction;\nuse postgres::stmt::Statement;\n\npub struct Db&lt;'a&gt; {\n    conn: Connection,\n    tx: Transaction&lt;'a&gt;,\n    insert_user: Statement&lt;'a&gt;,\n}\n\nmacro_rules! make_db {\n      ( $x:expr ) =&gt; {\n        {\n          let conn = Connection::connect($x, TlsMode::None).unwrap();\n          let tx = conn.transaction().unwrap();\n          let insert_user = tx.prepare(\"INSERT INTO users VALUES ($1)\").unwrap();\n          Db {\n            conn: conn,\n            tx: tx,\n            insert_user: insert_user,\n          }\n        }\n      }\n    }\n\n\npub fn main() {\n    let db = make_db!(\"postgres://paul@localhost/t\");\n    for u in &amp;[\"foo\", \"bar\"] {\n        db.insert_user.execute(&amp;[&amp;u]);\n    }\n    db.tx.commit().unwrap();\n}\n</code></pre>\n\n<p>But that still tells me that conn does not live long enough. It seems that moving it into the struct should really not require any real RAM changes, but Rust still won't let me do it.</p>\n"}, {"tags": ["rust", "traits"], "answers": [{"comments": [{"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 3, "creation_date": 1486675352, "post_id": 42146795, "comment_id": 71460589, "body": "Also, because the stdlib includes many variations of <code>impl&lt;T, U&gt; Into&lt;U&gt; for T where U: From&lt;T&gt;</code> you can also do this after implementing <code>From</code>: <code>let component: &amp;mut Point = component.into();</code>"}], "tags": [], "owner": {"reputation": 8378, "user_id": 124538, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/82159aeb57c52bc0c7bfe6e9c832c3ea?s=128&d=identicon&r=PG", "display_name": "Wesley Wiser", "link": "https://stackoverflow.com/users/124538/wesley-wiser"}, "is_accepted": true, "score": 5, "last_activity_date": 1486677985, "last_edit_date": 1486677985, "creation_date": 1486674113, "answer_id": 42146795, "question_id": 42146565, "link": "https://stackoverflow.com/questions/42146565/impl-convertfrom-for-mutable-reference/42146795#42146795", "title": "impl convert::From for (mutable) reference", "body": "<p>One way to do this would be to specify the type of <code>component</code> like this:</p>\n\n<pre><code>let component: &amp;mut Point = From::from(component);\n</code></pre>\n\n<p>As <a href=\"https://stackoverflow.com/users/1517578/simon-whitehead\">Simon Whitehead</a> pointed out, the more idiomatic way to do this would be to use the corresponding function <a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"nofollow noreferrer\"><code>into()</code></a>:</p>\n\n<pre><code>let component: &amp;mut Point = component.into();\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 3, "last_activity_date": 1486705677, "creation_date": 1486705677, "answer_id": 42152321, "question_id": 42146565, "link": "https://stackoverflow.com/questions/42146565/impl-convertfrom-for-mutable-reference/42152321#42152321", "title": "impl convert::From for (mutable) reference", "body": "<p>The proper syntax is:</p>\n\n<pre><code>let component = &lt;&amp;mut Point&gt;::from(component);\n</code></pre>\n\n<p>It's essentially the \"turbofish\" syntax without the leading <code>::</code>.</p>\n"}], "owner": {"reputation": 653, "user_id": 2051092, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/6eabdb0f0b8be9a8fef78646df1a392a?s=128&d=identicon&r=PG", "display_name": "GGalizzi", "link": "https://stackoverflow.com/users/2051092/ggalizzi"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 136, "favorite_count": 0, "accepted_answer_id": 42146795, "answer_count": 2, "score": 2, "last_activity_date": 1486705677, "creation_date": 1486673277, "question_id": 42146565, "link": "https://stackoverflow.com/questions/42146565/impl-convertfrom-for-mutable-reference", "title": "impl convert::From for (mutable) reference", "body": "<p>I'm trying to implement <code>From</code> for a type I want to get as a mutable reference, so I impl it for a <code>&amp;mut TheType</code>, but then how do I properly call <code>from</code>? Attempts I performed fail because it tries to do reflexion (TheType from TheType) or can't (or don't know how to) call <code>from</code> from a type <code>&amp;mut TheType</code>.</p>\n\n<p>Code will explain it better hopefully:</p>\n\n<pre><code>enum Component {\n    Position(Point),\n    //other stuff\n}\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl&lt;'a&gt; std::convert::From&lt;&amp;'a mut Component&gt; for &amp;'a mut Point {\n    fn from(comp: &amp;'a mut Component) -&gt; &amp;mut Point {\n        // If let or match for Components that can contain Points\n        if let &amp;mut Component::Position(ref mut point) = comp {\n            point\n        } else { panic!(\"Cannot make a Point out of this component!\"); }\n    }\n}\n\n// Some function somewhere where I know for a fact that the component passed can contain a Point. And I need to modify the contained Point. I could do if let or match here, but that would easily bloat my code since there's a few other Components I want to implement similar Froms and several functions like this one. \nfn foo(..., component: &amp;mut Component) {\n    // Error: Tries to do a reflexive From, expecting a Point, not a Component\n    // Meaning it is trying to make a regular point, and then grab a mutable ref out of it, right?\n    let component = &amp;mut Point::from(component)\n\n    // I try to do this, but seems like this is not a thing.\n    let component = (&amp;mut Point)::from(component) // Error: unexpected ':'\n\n    ...\n}\n</code></pre>\n\n<p>Is what I'm trying to do here possible? The <code>impl From</code> above compiles just fine, is just the calling of it that escapes me.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486655684, "post_id": 42141129, "comment_id": 71448574, "body": "The bottom type is called <code>!</code> in Rust. Does it work for you?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486655818, "post_id": 42141129, "comment_id": 71448668, "body": "Which part are you suggesting is onerous? If it&#39;s the turbofish aspect, how do you suggest the bottom type be specified other than that?"}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486655895, "post_id": 42141129, "comment_id": 71448719, "body": "@MatthieuM. No, it does not match the trait bound."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486656064, "post_id": 42141129, "comment_id": 71448839, "body": "@Shepmaster <code>::&lt;!&gt;</code> would be ok but it doesn&#39;t work anyway, <code>::&lt;some potentially complex type that the user has to figure out first and needs to be imported&gt;</code> is not. Note that those are trait bounds, so the API user would have to figure out a possible candidate type (that he doesn&#39;t even intend to instantiate!) just to pass <code>None</code>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1486656069, "post_id": 42141302, "comment_id": 71448844, "body": "@trentcl: It&#39;s a work in progress, there are many things that don&#39;t work with uninhabited types that one would expect to work."}, {"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1486657693, "post_id": 42141302, "comment_id": 71449965, "body": "Sorry for deleting my comment and making you look like talking to yourself! For others, what I asked (before Shepmaster edited his answer to include the information) was &quot;But does <code>!</code> implement any trait bound?&quot;"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1486656667, "last_edit_date": 1486656667, "creation_date": 1486655919, "answer_id": 42141302, "question_id": 42141129, "link": "https://stackoverflow.com/questions/42141129/create-a-generic-struct-with-optiont-without-specifying-t-when-instantiating-w/42141302#42141302", "title": "Create a generic struct with Option&lt;T&gt; without specifying T when instantiating with None", "body": "<p>There's <a href=\"https://github.com/rust-lang/rust/issues/35121\" rel=\"nofollow noreferrer\">a feature in the works</a> that allows specifying the <em>never type</em> as <code>!</code>. This is not present in stable Rust, so you need to use a nightly and a feature flag:</p>\n\n<pre><code>#![feature(never_type)]\n\nfn thing&lt;T&gt;() -&gt; Option&lt;T&gt; {\n    None\n}\n\nfn main() {\n    thing::&lt;!&gt;();\n}\n</code></pre>\n\n<p>However, this doesn't work for your case yet (this is part of the reason that it's unstable):</p>\n\n<pre><code>#![feature(never_type)]\n\ntrait NothingImplementsMe {}\n\nfn thing&lt;T&gt;() -&gt; Option&lt;T&gt; \n    where T: NothingImplementsMe,\n{\n    None\n}\n\nfn main() {\n    thing::&lt;!&gt;();\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `!: NothingImplementsMe` is not satisfied\n  --&gt; src/main.rs:12:5\n   |\n12 |     thing::&lt;!&gt;();\n   |     ^^^^^^^^^^ the trait `NothingImplementsMe` is not implemented for `!`\n   |\n   = note: required by `thing`\n</code></pre>\n\n<p>The very first unresolved question on the tracking issue is:</p>\n\n<blockquote>\n  <p>What traits should we implement for <code>!</code>? </p>\n</blockquote>\n\n<hr>\n\n<p>Since this feature is both unstable and doesn't do what you want, you may want to consider creating your own bespoke \"bottom\" type:</p>\n\n<pre><code>trait AlmostNothingImplementsMe {\n    fn foo();\n}\n\nstruct Nope;\nimpl AlmostNothingImplementsMe for Nope {\n    fn foo() { unimplemented!() }\n}\n\nfn thing&lt;T&gt;() -&gt; Option&lt;T&gt; \n    where T: AlmostNothingImplementsMe,\n{\n    None\n}\n\nfn main() {\n    thing::&lt;Nope&gt;();\n}\n</code></pre>\n\n<p>To improve the UX of this, I'd suggest creating a builder of some type that starts you off with the faux-bottom type:</p>\n\n<pre><code>mod nested {\n    pub trait AlmostNothingImplementsMe {\n        fn foo();\n    }\n\n    pub struct Nope;\n    impl AlmostNothingImplementsMe for Nope {\n        fn foo() { unimplemented!() }\n    }\n\n    pub fn with_value&lt;T&gt;(t: T) -&gt; Option&lt;T&gt; \n        where T: AlmostNothingImplementsMe,\n    {\n        Some(t)\n    }\n\n    pub fn without_value() -&gt; Option&lt;Nope&gt; {\n        None\n    }\n}\n\nfn main() {\n    nested::without_value();\n}\n</code></pre>\n\n<p>You can see this similar pattern <a href=\"https://docs.rs/hyper/0.10.4/hyper/client/struct.Client.html\" rel=\"nofollow noreferrer\">in crates like Hyper</a>, although it boxes the concrete type so you don't see it from the outside.</p>\n"}, {"comments": [{"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1486656907, "post_id": 42141588, "comment_id": 71449394, "body": "<code>()</code> does not fulfill trait bounds and they cannot be implemented when the traits come from external crates"}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 2, "creation_date": 1486657107, "post_id": 42141588, "comment_id": 71449538, "body": "You haven&#39;t said what the bounds are; I am suggesting implementing them (in some reasonable default way, possibly involving <code>unreachable!()</code> or <code>assert!()</code>) for some kind of default type (<code>()</code> as an example) and using that as the default."}, {"owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 0, "creation_date": 1486657319, "post_id": 42141588, "comment_id": 71449697, "body": "But it is not a general solution since it assumes that all traits are crate-local."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "reply_to_user": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "edited": false, "score": 2, "creation_date": 1486657594, "post_id": 42141588, "comment_id": 71449894, "body": "True it&#39;s not general; I was just offering an option which might work in some similar cases. As I mentioned a custom type could be substituted instead of <code>()</code> which would resolve the non-local trait issue."}], "tags": [], "owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "is_accepted": false, "score": 2, "last_activity_date": 1486656777, "creation_date": 1486656777, "answer_id": 42141588, "question_id": 42141129, "link": "https://stackoverflow.com/questions/42141129/create-a-generic-struct-with-optiont-without-specifying-t-when-instantiating-w/42141588#42141588", "title": "Create a generic struct with Option&lt;T&gt; without specifying T when instantiating with None", "body": "<p>One option to avoid the need to the turbofish operator is to have a type alias:</p>\n\n<pre><code>trait MyTrait {}\nimpl MyTrait for () {}\n\nstruct Foo&lt;T: MyTrait&gt; {\n    i: isize,\n    o: Option&lt;T&gt;,\n}\n\ntype Bar = Foo&lt;()&gt;;\n\nfn main() {\n    let foo_default = Bar { i: 1, o: None };\n}\n</code></pre>\n\n<p>I used <code>()</code> as the default for simplicity, but <code>!</code> (when available) or your own bottom type as in @Shepmaster's answer may be better.</p>\n\n<p>A constructor function could also work if you don't mind <code>Foo::new_default(i)</code> or similar.</p>\n"}], "owner": {"reputation": 34798, "user_id": 1362755, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/97aa8c37ffa60c4262955aefae56e605?s=128&d=identicon&r=PG", "display_name": "the8472", "link": "https://stackoverflow.com/users/1362755/the8472"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1569, "favorite_count": 0, "accepted_answer_id": 42141302, "answer_count": 2, "score": 2, "last_activity_date": 1502665664, "creation_date": 1486655483, "last_edit_date": 1502665664, "question_id": 42141129, "link": "https://stackoverflow.com/questions/42141129/create-a-generic-struct-with-optiont-without-specifying-t-when-instantiating-w", "title": "Create a generic struct with Option&lt;T&gt; without specifying T when instantiating with None", "body": "<p>I have a </p>\n\n<pre><code>struct Foo&lt;T&gt;\nwhere\n    T: // ... some complex trait bound ...\n{\n    a: Bar,\n    b: Option&lt;T&gt;,\n}\n</code></pre>\n\n<p>When attempting to instantiate the struct with a <code>b: None</code> the compiler complains that it cannot infer the type and requires a type hint e.g. via the turbofish syntax. That is onerous on the caller because they will have to find a type that fulfills the trait bounds and import it despite not caring about that optional functionality.</p>\n\n<p>I think what I am looking for would be a bottom type that automatically fulfills any trait bounds but cannot be instantiated so that <code>None::&lt;Bottom&gt;</code> could be used, but I have not found such a type in the documentation.</p>\n"}, {"tags": ["rust", "llvm", "volatile", "llvm-ir"], "comments": [{"owner": {"reputation": 654, "user_id": 4079123, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/0c28786e5157a528eb01657fda5a46b6?s=128&d=identicon&r=PG&f=1", "display_name": "Bharadwaj", "link": "https://stackoverflow.com/users/4079123/bharadwaj"}, "edited": false, "score": 0, "creation_date": 1486643998, "post_id": 42136775, "comment_id": 71440035, "body": "I found the mapping list <a href=\"https://f0rki.gitbooks.io/mapping-high-level-constructs-to-llvm-ir/content/\" rel=\"nofollow noreferrer\">here</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486644203, "post_id": 42136775, "comment_id": 71440182, "body": "Note that this list is not specific to Rust, and there is no guarantee that rustc will actually follow it."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486647107, "post_id": 42136775, "comment_id": 71442290, "body": "Oh, and thanks for the link; a very useful resource for fledgling compiler writers!"}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 4, "last_activity_date": 1486651416, "last_edit_date": 1486651416, "creation_date": 1486644089, "answer_id": 42137029, "question_id": 42136775, "link": "https://stackoverflow.com/questions/42136775/is-there-a-way-to-prevent-emitted-llvm-ir-from-removing-unused-functions/42137029#42137029", "title": "Is there a way to prevent emitted LLVM IR from removing unused functions?", "body": "<blockquote>\n  <p>Is there such a list of elements and IR code template mapping or list?</p>\n</blockquote>\n\n<p>The <code>rustc</code> code.</p>\n\n<p>It might seem tongue in the cheek, but it's actually the only answer available.</p>\n\n<p>Rust's ABI is not stable specifically because the Rust developers wish to retain the ability to change these kinds of things whenever a better performing way of doing them appears.</p>\n\n<p>This applies to the in-memory representation of structures, to the calling conventions, etc...</p>\n\n<blockquote>\n  <p>Is there some sort of qualifier in Rust so that emitted IR retains all the functions?</p>\n</blockquote>\n\n<p>The simplest way to retain a function is:</p>\n\n<ul>\n<li>compiling as a library and marking the function <code>pub</code></li>\n</ul>\n\n<p>It's also possible to use <code>#[inline(never)]</code> but this is more fragile as a smart linker could realize the function is never called. Making the symbol available externally forces the linker's hand into retaining it.</p>\n"}], "owner": {"reputation": 654, "user_id": 4079123, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/0c28786e5157a528eb01657fda5a46b6?s=128&d=identicon&r=PG&f=1", "display_name": "Bharadwaj", "link": "https://stackoverflow.com/users/4079123/bharadwaj"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 530, "favorite_count": 0, "accepted_answer_id": 42137029, "answer_count": 1, "score": 4, "last_activity_date": 1486651416, "creation_date": 1486643364, "last_edit_date": 1486651359, "question_id": 42136775, "link": "https://stackoverflow.com/questions/42136775/is-there-a-way-to-prevent-emitted-llvm-ir-from-removing-unused-functions", "title": "Is there a way to prevent emitted LLVM IR from removing unused functions?", "body": "<p>I am trying to analyse the LLVM-IR emitted by the <code>rustc</code> front end. The plan is to emit the IR for specific language elements. Is there such a list of elements and IR code template mapping or list?</p>\n\n<p>The compiler is intelligent enough to remove the unused functions in the emitted IR as wel:, unless something is printed on to the console using <code>println!</code>, the compiler removes every function used. </p>\n\n<p>This doesn't work as well, having said that <code>x</code> isn't used anywhere or also when <code>x</code> is overwritten.</p>\n\n<pre><code>let x = function();\n</code></pre>\n\n<p>Is there some sort of qualifier in Rust so that emitted IR retains all the functions?</p>\n"}, {"tags": ["iterator", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1486640113, "post_id": 42134874, "comment_id": 71437440, "body": "You could easily do an <code>iter_pairs</code>, <code>iter_triples</code> once you decide what to do if there aren&#39;t enough items at the end, but not a generic &quot;any size tuple&quot; one with Rust at the moment."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486641679, "post_id": 42134874, "comment_id": 71438415, "body": "If there aren&#39;t enough it would do nothing, as with slice functions."}, {"owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1486641757, "post_id": 42134874, "comment_id": 71438465, "body": "This was pointed out to me on IRC <code>https:&#47;&#47;docs.rs&#47;itertools&#47;*&#47;itertools&#47;trait.Itertools.html#m&zwnj;&#8203;ethod.tuple_windows</code> would like to look into its code before posting answer though."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486651822, "post_id": 42136442, "comment_id": 71445655, "body": "Sorry to downvote, but <i>The exact syntax requested is impossible in Rust</i> is not true; please check <a href=\"http://stackoverflow.com/a/42139758/155423\">my answer</a>. Most of the rest of your analysis makes sense though."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1486653043, "post_id": 42136442, "comment_id": 71446554, "body": "@Shepmaster: Your answer does not have the exact syntax requested either. The request is <code>for (prev, next) in some_iter.windows(2)</code>, with 2 a runtime parameter, which I interpret as meaning that I could pass 3 and have <code>for (n0, n1, n2) in some_iter.windows(3)</code> and that&#39;s impossible. You chose to focus on <code>(prev, next)</code> and ignore the runtime parameter, it may be OK with the OP, but as far as I am concerned this is not what they asked for (and I don&#39;t read minds)."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486653478, "post_id": 42136442, "comment_id": 71446899, "body": "A good point. specifying <i>both</i> the tuple size and an argument to <code>windows</code> would not make sense, especially if there was a mismatch. I might encourage you to draw explicit attention to that in your answer - perhaps adding an example?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1486653981, "post_id": 42136442, "comment_id": 71447306, "body": "@Shepmaster: I am not quite sure what kind of example you mean; I already cited that types cannot depend on values unless one uses Dependent Typing and I am at a loss at how to illustrate it to be honest. Maybe it&#39;s not that important since your answer is clearly better."}, {"owner": {"reputation": 1298, "user_id": 1102119, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/13045f5496c970abe6b1a6ead4891b0a?s=128&d=identicon&r=PG", "display_name": "kccqzy", "link": "https://stackoverflow.com/users/1102119/kccqzy"}, "edited": false, "score": 0, "creation_date": 1542536073, "post_id": 42136442, "comment_id": 93596335, "body": "Your answer makes a lot of sense, but I cannot help but feel that the lack of <code>chunks</code> and <code>windows</code> on iterators is an issue. As you had already so, it&#39;s actually really easy to implement <code>chunks</code> with a dynamic allocation of only c elements where c is the size of the chunk; in contrast using <code>collect::&lt;Vec&lt;_&gt;&gt;</code> and then chunking means we need a dynamic allocation of n elements where n is the total number of elements produced by the iterators. Your <code>chunks</code> example can be optimized to do a single allocation, so performance won&#39;t hurt."}, {"owner": {"reputation": 2446, "user_id": 5359531, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/b7636325b68a8f82a8f7b30fdfff251a?s=128&d=identicon&r=PG&f=1", "display_name": "user5359531", "link": "https://stackoverflow.com/users/5359531/user5359531"}, "edited": false, "score": 0, "creation_date": 1565723867, "post_id": 42136442, "comment_id": 101439405, "body": "&gt; <code>This is left as an exercise to the reader.</code>  the <code>windows</code> functionality described here is exactly what I am looking for but I am not sure how to implement it, still new to Rust. Is there an example?"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 25, "last_activity_date": 1486653355, "last_edit_date": 1486653355, "creation_date": 1486642399, "answer_id": 42136442, "question_id": 42134874, "link": "https://stackoverflow.com/questions/42134874/are-there-equivalents-to-slicechunks-windows-for-iterators-to-loop-over-pairs/42136442#42136442", "title": "Are there equivalents to slice::chunks/windows for iterators to loop over pairs, triplets etc?", "body": "<p><strong>TL;DR</strong>: The best way to have <code>chunks</code> and <code>windows</code> on an arbitrary iterator/collection is to first <code>collect</code> it into a <code>Vec</code> and iterate over <em>that</em>.</p>\n\n<hr>\n\n<p>The exact syntax requested is impossible in Rust.</p>\n\n<p>The issue is that in Rust, a function's signature is depending on <em>types</em>, not <em>values</em>, and while Dependent Typing exists, there are few languages that implement it (it's hard).</p>\n\n<p>This is why <code>chunks</code> and <code>windows</code> return a sub-slice by the way; the number of elements in a <code>&amp;[T]</code> is not part of the type and therefore can be decided at run-time.</p>\n\n<hr>\n\n<p>Let's pretend you asked for: <code>for slice in some_iter.windows(2)</code> instead then.</p>\n\n<p>Where would the storage backing this slice live?</p>\n\n<p>It cannot live:</p>\n\n<ul>\n<li>in the original collection because a <code>LinkedList</code> doesn't have a contiguous storage </li>\n<li>in the iterator because of the definition of <code>Iterator::Item</code>, there is no lifetime available</li>\n</ul>\n\n<p>So, unfortunately, slices can only be used when the backing storage is a slice.</p>\n\n<hr>\n\n<p>If dynamic allocations are accepted, then it is possible to use <code>Vec&lt;Iterator::Item&gt;</code> as the <code>Item</code> of the chunking iterator.</p>\n\n<pre><code>struct Chunks&lt;I: Iterator&gt; {\n    elements: Vec&lt;&lt;I as Iterator&gt;::Item&gt;,\n    underlying: I,\n}\n\nimpl&lt;I: Iterator&gt; Chunks&lt;I&gt; {\n    fn new(iterator: I, size: usize) -&gt; Chunks&lt;I&gt; {\n        assert!(size &gt; 0);\n\n        let mut result = Chunks {\n           underlying: iterator, elements: Vec::with_capacity(size)\n        };\n        result.refill(size);\n        result\n    }\n\n    fn refill(&amp;mut self, size: usize) {\n        assert!(self.elements.is_empty());\n\n        for _ in 0..size {\n            match self.underlying.next() {\n                Some(item) =&gt; self.elements.push(item),\n                None =&gt; break,\n            }\n        }\n    }\n}\n\nimpl&lt;I: Iterator&gt; Iterator for Chunks&lt;I&gt; {\n    type Item = Vec&lt;&lt;I as Iterator&gt;::Item&gt;;\n\n    fn next(&amp;mut self) -&gt; Option&lt;Self::Item&gt; {\n        if self.elements.is_empty() {\n            return None;\n        }\n\n        let new_elements = Vec::with_capacity(self.elements.len());\n        let result = std::mem::replace(&amp;mut self.elements, new_elements);\n\n        self.refill(result.len());\n\n        Some(result)\n    }\n}\n\nfn main() {\n    let v = vec!(1, 2, 3, 4, 5);\n\n    for slice in Chunks::new(v.iter(), 2) {\n        println!(\"{:?}\", slice);\n    }\n}\n</code></pre>\n\n<p>Will return:</p>\n\n<blockquote>\n<pre><code>[1, 2]\n[3, 4]\n[5]\n</code></pre>\n</blockquote>\n\n<hr>\n\n<p>The canny reader will realize that I surreptitiously switched from <code>windows</code> to <code>chunks</code>.</p>\n\n<p><code>windows</code> is more difficult, because it returns the same element multiple times which require that the element be <code>Clone</code>. Also, since it needs returning a full <code>Vec</code> each time, it will need internally to keep a <code>Vec&lt;Vec&lt;Iterator::Item&gt;&gt;</code>.</p>\n\n<p>This is left as an exercise to the reader.</p>\n\n<hr>\n\n<p>Finally, a note on <strong>performance</strong>: all those allocations are gonna hurt (especially in the <code>windows</code> case).</p>\n\n<p>The best allocation strategy is generally to allocate a single chunk of memory and then live off that (unless the amount is really massive, in which case streaming is required).</p>\n\n<p>It's called <code>collect::&lt;Vec&lt;_&gt;&gt;()</code> in Rust.</p>\n\n<p>And since the <code>Vec</code> has a <code>chunks</code> and <code>windows</code> methods (by virtue of implementing <code>Deref&lt;Target=[T]&gt;</code>), you can then use that instead:</p>\n\n<pre><code>for slice in v.iter().collect::&lt;Vec&lt;_&gt;&gt;().chunks(2) {\n    println!(\"{:?}\", slice);\n}\n\nfor slice in v.iter().collect::&lt;Vec&lt;_&gt;&gt;().windows(2) {\n    println!(\"{:?}\", slice);\n}\n</code></pre>\n\n<p>Sometimes the best solutions are the simplest.</p>\n"}, {"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486653837, "post_id": 42139758, "comment_id": 71447190, "body": "Would it work with a tuple of 3 elements? Looking at the doc it seems it could be possible."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1486654270, "post_id": 42139758, "comment_id": 71447527, "body": "@MatthieuM. yep, but the number of implementations <i>is</i> limited to a 4-tuple (which I&#39;ve added)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486655347, "post_id": 42139758, "comment_id": 71448323, "body": "Yes, well... in the absence of variadics it&#39;s otherwise painful to implement I guess (and bulky too)."}, {"owner": {"reputation": 3657, "user_id": 874671, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d874715650c92331b59b1ba8792ea84e?s=128&d=identicon&r=PG", "display_name": "dshepherd", "link": "https://stackoverflow.com/users/874671/dshepherd"}, "edited": false, "score": 0, "creation_date": 1517768077, "post_id": 42139758, "comment_id": 84219265, "body": "Was this removed from the latest version of itertools? I can&#39;t see it <a href=\"https://docs.rs/itertools/0.7.6/itertools/\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 3657, "user_id": 874671, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d874715650c92331b59b1ba8792ea84e?s=128&d=identicon&r=PG", "display_name": "dshepherd", "link": "https://stackoverflow.com/users/874671/dshepherd"}, "edited": false, "score": 1, "creation_date": 1517768356, "post_id": 42139758, "comment_id": 84219364, "body": "@dshepherd I continue to see both methods. I&#39;ve updated the links to the documentation and provided playground links."}, {"owner": {"reputation": 3657, "user_id": 874671, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/d874715650c92331b59b1ba8792ea84e?s=128&d=identicon&r=PG", "display_name": "dshepherd", "link": "https://stackoverflow.com/users/874671/dshepherd"}, "edited": false, "score": 1, "creation_date": 1517770013, "post_id": 42139758, "comment_id": 84219893, "body": "Ah, I was looking at the list of free functions rather than the list of functions on the itertools trait."}, {"owner": {"reputation": 84731, "user_id": 510937, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=128&d=identicon&r=PG", "display_name": "Bakuriu", "link": "https://stackoverflow.com/users/510937/bakuriu"}, "edited": false, "score": 0, "creation_date": 1600617687, "post_id": 42139758, "comment_id": 113137912, "body": "This does not handle the case where the input is not divisible by the chunk length, right? So it is <b>not</b> an equivalent of <code>chunk</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 84731, "user_id": 510937, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/70b13a9ae1aae1ca1aa6ac8dab4643f2?s=128&d=identicon&r=PG", "display_name": "Bakuriu", "link": "https://stackoverflow.com/users/510937/bakuriu"}, "edited": false, "score": 0, "creation_date": 1600630100, "post_id": 42139758, "comment_id": 113141336, "body": "@Bakuriu you can get the remaining pieces via <a href=\"https://docs.rs/itertools/0.9.0/itertools/structs/struct.Tuples.html#method.into_buffer\" rel=\"nofollow noreferrer\"><code>Tuples::into_buffer</code></a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 28, "last_activity_date": 1600630497, "last_edit_date": 1600630497, "creation_date": 1486651764, "answer_id": 42139758, "question_id": 42134874, "link": "https://stackoverflow.com/questions/42134874/are-there-equivalents-to-slicechunks-windows-for-iterators-to-loop-over-pairs/42139758#42139758", "title": "Are there equivalents to slice::chunks/windows for iterators to loop over pairs, triplets etc?", "body": "<p>It's possible to take chunks of an iterator using <a href=\"https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.tuples\" rel=\"noreferrer\"><code>Itertools::tuples</code></a>, up to a 4-tuple:</p>\n<pre><code>use itertools::Itertools; // 0.9.0\n\nfn main() {\n    let some_iter = vec![1, 2, 3, 4, 5, 6].into_iter();\n\n    for (prev, next) in some_iter.tuples() {\n        println!(&quot;{}--{}&quot;, prev, next);\n    }\n}\n</code></pre>\n<p>(<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7742f0716b13224e9982bbca72d999be\" rel=\"noreferrer\">playground</a>)</p>\n<pre class=\"lang-none prettyprint-override\"><code>1--2\n3--4\n5--6\n</code></pre>\n<p>If you don't know that your iterator exactly fits into the chunks, you can use <a href=\"https://docs.rs/itertools/0.9.0/itertools/structs/struct.Tuples.html#method.into_buffer\" rel=\"noreferrer\"><code>Tuples::into_buffer</code></a> to access any leftovers:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use itertools::Itertools; // 0.9.0\n\nfn main() {\n    let some_iter = vec![1, 2, 3, 4, 5].into_iter();\n\n    let mut t = some_iter.tuples();\n    for (prev, next) in t.by_ref() {\n        println!(&quot;{}--{}&quot;, prev, next);\n    }\n    for leftover in t.into_buffer() {\n        println!(&quot;{}&quot;, leftover);\n    }\n}\n</code></pre>\n<p>(<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=d93062b2b97200a1ee45b23ba08be502\" rel=\"noreferrer\">playground</a>)</p>\n<pre class=\"lang-none prettyprint-override\"><code>1--2\n3--4\n5\n</code></pre>\n<p>It's also possible to take up to 4-tuple windows with <a href=\"https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.tuple_windows\" rel=\"noreferrer\"><code>Itertools::tuple_windows</code></a>:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>use itertools::Itertools; // 0.9.0\n\nfn main() {\n    let some_iter = vec![1, 2, 3, 4, 5, 6].into_iter();\n\n    for (prev, next) in some_iter.tuple_windows() {\n        println!(&quot;{}--{}&quot;, prev, next);\n    }\n}\n</code></pre>\n<p>(<a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a7ccc9075a58559fbcb8dfb10a1521ce\" rel=\"noreferrer\">playground</a>)</p>\n<pre class=\"lang-none prettyprint-override\"><code>1--2\n2--3\n3--4\n4--5\n5--6\n</code></pre>\n<p>If you need to get partial chunks / windows, you can get</p>\n"}], "owner": {"reputation": 29662, "user_id": 432509, "user_type": "registered", "accept_rate": 47, "profile_image": "https://i.stack.imgur.com/2vl0v.png?s=128&g=1", "display_name": "ideasman42", "link": "https://stackoverflow.com/users/432509/ideasman42"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 12728, "favorite_count": 4, "accepted_answer_id": 42136442, "answer_count": 2, "score": 28, "last_activity_date": 1612018169, "creation_date": 1486637966, "last_edit_date": 1612018169, "question_id": 42134874, "link": "https://stackoverflow.com/questions/42134874/are-there-equivalents-to-slicechunks-windows-for-iterators-to-loop-over-pairs", "title": "Are there equivalents to slice::chunks/windows for iterators to loop over pairs, triplets etc?", "body": "<p>It can be useful to iterate over multiple variables at once, overlapping (<a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.windows\" rel=\"nofollow noreferrer\"><code>slice::windows</code></a>), or not (<a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.chunks\" rel=\"nofollow noreferrer\"><code>slice::chunks</code></a>).</p>\n<p>This only works for slices; is it possible to do this for iterators, using tuples for convenience?</p>\n<p>Something like the following could be written:</p>\n<pre><code>for (prev, next) in some_iter.windows(2) {\n    ...\n}\n</code></pre>\n<p>If not, could it be implemented as a trait on existing iterators?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486627810, "post_id": 42130132, "comment_id": 71429465, "body": "That&#39;s an interesting requirement! Have you tried to hack your way by providing a &quot;fake&quot; <code>lib.rs</code> that just lists the <code>extern crate</code>? It would probably create a <code>target</code> repository but you can always delete that after executing <code>cargo build</code>."}, {"owner": {"reputation": 52747, "user_id": 38055, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/d7912ba2ab72397e157148de151cd9e9?s=128&d=identicon&r=PG", "display_name": "Tomas Aschan", "link": "https://stackoverflow.com/users/38055/tomas-aschan"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486629272, "post_id": 42130132, "comment_id": 71430207, "body": "That&#39;s an interesting idea! ;) Will try it when I get home. I&#39;m completely new to Rust, so I don&#39;t know much about inner workings or what is required to make something build correctly - trial and error has been my approach so far..."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1486631353, "post_id": 42130132, "comment_id": 71431460, "body": "I don&#39;t have much experience with Cargo myself, so it&#39;s more of a tentative work-around. For all I know there&#39;s exactly the command you want available already."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1486633400, "post_id": 42130132, "comment_id": 71432924, "body": "Is <a href=\"https://github.com/alexcrichton/cargo-vendor\" rel=\"nofollow noreferrer\"><code>cargo vendor</code></a> useful here?"}, {"owner": {"reputation": 52747, "user_id": 38055, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/d7912ba2ab72397e157148de151cd9e9?s=128&d=identicon&r=PG", "display_name": "Tomas Aschan", "link": "https://stackoverflow.com/users/38055/tomas-aschan"}, "reply_to_user": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486672116, "post_id": 42130132, "comment_id": 71458800, "body": "@ChrisEmerson: After struggling for quite some time with getting <code>cargo vendor</code> to install and run correctly on my image, I note that the deps are downloaded, but not built. I&#39;m looking into if I can get them to precompile as well..."}], "answers": [{"comments": [{"owner": {"reputation": 7746, "user_id": 1091436, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/3nutk.jpg?s=128&g=1", "display_name": "VasiliNovikov", "link": "https://stackoverflow.com/users/1091436/vasilinovikov"}, "edited": false, "score": 0, "creation_date": 1593442847, "post_id": 42139535, "comment_id": 110776214, "body": "Generalized on libs/binaries, one could probably use the syntax <code>COPY Cargo.* .&#47;</code>  (ADD works similarly as well, although is probably discouraged <a href=\"https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile\" rel=\"nofollow noreferrer\">nickjanetakis.com/blog/&hellip;</a> )"}, {"owner": {"reputation": 1400, "user_id": 6658955, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/IysCW.jpg?s=128&g=1", "display_name": "UselesssCat", "link": "https://stackoverflow.com/users/6658955/uselessscat"}, "edited": false, "score": 0, "creation_date": 1601858955, "post_id": 42139535, "comment_id": 113527981, "body": "Hi, Why <code>cargo build</code> and <code>cargo build --release</code> and not only the cargo build with release option?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1400, "user_id": 6658955, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/IysCW.jpg?s=128&g=1", "display_name": "UselesssCat", "link": "https://stackoverflow.com/users/6658955/uselessscat"}, "edited": false, "score": 2, "creation_date": 1601859741, "post_id": 42139535, "comment_id": 113528086, "body": "@UselesssCat the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">playground</a> allows you to compile your code in both debug and release modes, so we needed to precompile all the dependencies in both modes."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 18, "last_activity_date": 1528898593, "last_edit_date": 1528898593, "creation_date": 1486651167, "answer_id": 42139535, "question_id": 42130132, "link": "https://stackoverflow.com/questions/42130132/can-cargo-download-and-build-dependencies-without-also-building-the-application/42139535#42139535", "title": "Can Cargo download and build dependencies without also building the application?", "body": "<p>There is no native support for building just the dependencies in Cargo, as far as I know. There is <a href=\"https://github.com/rust-lang/cargo/issues/2644\" rel=\"noreferrer\">an open issue for it</a>. I wouldn't be surprised if you could submit something to Cargo to accomplish it though, or perhaps create a third-party Cargo addon. I've wanted this functionality for <code>cargo doc</code> as well, when my own code is too broken to compile ;-)</p>\n\n<p>However, the <a href=\"https://play.rust-lang.org/\" rel=\"noreferrer\">Rust playground</a> that I maintain does accomplish your end goal. There's a <a href=\"https://github.com/integer32llc/rust-playground/blob/master/compiler/base/Dockerfile\" rel=\"noreferrer\">base Docker container</a> that installs Rustup and copies in a <a href=\"https://github.com/integer32llc/rust-playground/blob/master/compiler/base/Cargo.toml\" rel=\"noreferrer\"><code>Cargo.toml</code></a> with all of the crates available for the playground. <a href=\"https://github.com/integer32llc/rust-playground/blob/dea331e1de3e22eb6fd6f6a1556df6c874700607/compiler/base/Dockerfile#L32-L39\" rel=\"noreferrer\">The build steps create a blank project (with a dummy <code>src/lib.rs</code>), then calls <code>cargo build</code> and <code>cargo build --release</code> to compile the crates</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>RUN cd / &amp;&amp; \\\n    cargo new playground\nWORKDIR /playground\n\nADD Cargo.toml /playground/Cargo.toml\nRUN cargo build\nRUN cargo build --release\nRUN rm src/*.rs\n</code></pre>\n\n<p>All of the downloaded crates are stored in the Docker image's <code>$HOME/.cargo</code> directory and all of the built crates are stored in the applications <code>target/{debug,release}</code> directories.</p>\n\n<p>Later on, the real source files are copied into the container and <code>cargo build</code> / <code>cargo run</code> can be executed again, using the now-compiled crates.</p>\n\n<p>If you were building an executable project, you'd want to copy in the Cargo.lock as well.</p>\n"}, {"tags": [], "owner": {"reputation": 2138, "user_id": 4284401, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rz99Q.jpg?s=128&g=1", "display_name": "Zac Delventhal", "link": "https://stackoverflow.com/users/4284401/zac-delventhal"}, "is_accepted": false, "score": 5, "last_activity_date": 1522905928, "creation_date": 1522905928, "answer_id": 49664709, "question_id": 42130132, "link": "https://stackoverflow.com/questions/42130132/can-cargo-download-and-build-dependencies-without-also-building-the-application/49664709#49664709", "title": "Can Cargo download and build dependencies without also building the application?", "body": "<p>If you add a dummy main or lib file, you can use <code>cargo build</code> to just pull down the dependencies. I'm currently using this solution for my Docker based project:</p>\n\n<pre><code>COPY Cargo.toml .\nRUN mkdir src \\\n    &amp;&amp; echo \"// dummy file\" &gt; src/lib.rs \\\n    &amp;&amp; cargo build\n</code></pre>\n\n<p>I'm using <code>--volumes</code>, so I'm done at this point. The host volumes come in and blow away the dummy file, and cargo uses the cached dependencies when I go to build the source later. This solution will work just as well if you want to add a <code>COPY</code> (or <code>ADD</code>) later and use the cached dependencies though.</p>\n"}, {"tags": [], "owner": {"reputation": 2853, "user_id": 3062525, "user_type": "registered", "profile_image": "https://graph.facebook.com/1114414642001809/picture?type=large", "display_name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432", "link": "https://stackoverflow.com/users/3062525/%d0%94%d0%bc%d0%b8%d1%82%d1%80%d0%b8%d0%b9-%d0%92%d0%b0%d1%81%d0%b8%d0%bb%d1%8c%d0%b5%d0%b2"}, "is_accepted": false, "score": 2, "last_activity_date": 1568730314, "last_edit_date": 1568730314, "creation_date": 1568713574, "answer_id": 57971620, "question_id": 42130132, "link": "https://stackoverflow.com/questions/42130132/can-cargo-download-and-build-dependencies-without-also-building-the-application/57971620#57971620", "title": "Can Cargo download and build dependencies without also building the application?", "body": "<p>Based on a <a href=\"https://github.com/rust-lang/cargo/issues/2644#issuecomment-335272535\" rel=\"nofollow noreferrer\">GitHub comment</a></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>FROM rust:1.37\n\nWORKDIR /usr/src\n\n# Create blank project\nRUN USER=root cargo new PROJ\n\n# We want dependencies cached, so copy those first.\nCOPY Cargo.toml /usr/src/PROJ/\nCOPY Cargo.lock /usr/src/PROJ/\n\nWORKDIR /usr/src/PROJ\n\n# This is a dummy build to get the dependencies cached.\nRUN cargo build --release\n\n# Now copy in the rest of the sources\nCOPY MyPROJECT/src /usr/src/PROJ/src/\n\n# This is the actual build.\nRUN cargo build --release \\\n    &amp;&amp; mv target/release/appname /bin \\\n    &amp;&amp; rm -rf /usr/src/PROJ\n\nWORKDIR /\n\nEXPOSE 8888\n\nCMD [\"/bin/appname\"]\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 73, "user_id": 10631039, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/175abf97989da64fe49cd82ed276a235?s=128&d=identicon&r=PG", "display_name": "user96425", "link": "https://stackoverflow.com/users/10631039/user96425"}, "is_accepted": false, "score": 0, "last_activity_date": 1584130794, "creation_date": 1584130794, "answer_id": 60676806, "question_id": 42130132, "link": "https://stackoverflow.com/questions/42130132/can-cargo-download-and-build-dependencies-without-also-building-the-application/60676806#60676806", "title": "Can Cargo download and build dependencies without also building the application?", "body": "<p>I just wanted to post this here so others will see it going forward.  There's an experimental tool for Docker I've just started using called cargo-wharf (<a href=\"https://github.com/denzp/cargo-wharf/tree/master/cargo-wharf-frontend\" rel=\"nofollow noreferrer\">https://github.com/denzp/cargo-wharf/tree/master/cargo-wharf-frontend</a>).  It's a Docker BuildKit frontend that caches built cargo dependencies for you.  If you only change one of your source files, that's the only thing that gets rebuilt when you call <code>docker build</code>.    You use it by annotating your Cargo.toml file, then directing Docker to your Cargo.toml instead of a Dockerfile.  Go check it out, it's exactly what I wanted.  (I am in no way affiliated with the project.)</p>\n"}], "owner": {"reputation": 52747, "user_id": 38055, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/d7912ba2ab72397e157148de151cd9e9?s=128&d=identicon&r=PG", "display_name": "Tomas Aschan", "link": "https://stackoverflow.com/users/38055/tomas-aschan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5563, "favorite_count": 5, "answer_count": 4, "score": 36, "last_activity_date": 1584130794, "creation_date": 1486623235, "question_id": 42130132, "link": "https://stackoverflow.com/questions/42130132/can-cargo-download-and-build-dependencies-without-also-building-the-application", "title": "Can Cargo download and build dependencies without also building the application?", "body": "<p>Is there a way to tell <a href=\"http://doc.crates.io/guide.html\" rel=\"noreferrer\">Cargo</a> to install and build all my dependencies, but not attempt to build my application?</p>\n\n<p>I thought <code>cargo install</code> would do that, but it actually goes all the way to building my app too. I want to get to a state where <code>cargo build</code> would find all dependencies ready to use, but without touching the <code>/src</code> directory.</p>\n\n<hr>\n\n<p><strong>What I'm really trying to accomplish:</strong></p>\n\n<p>I'm trying to build a Docker image for a Rust application, where I'd like to do the following steps:</p>\n\n<p>Build time (<code>docker build .</code>):</p>\n\n<ol>\n<li>import a docker image with rust tooling installed</li>\n<li>add my Cargo.toml and Cargo.lock files</li>\n<li>download and build all dependencies</li>\n<li>add my source directory to the image</li>\n<li>build my source code</li>\n</ol>\n\n<p>Run time (<code>docker run ...</code>):</p>\n\n<ol>\n<li>run the application</li>\n</ol>\n\n<p>I've tried the following <code>Dockerfile</code>, but the indicated step builds my application as well (which of course fails since the source directory isn't there yet):</p>\n\n<pre><code>FROM jimmycuadra/rust\n\nADD Cargo.toml /source\nADD Cargo.lock /source\n\nRUN cargo install # &lt;-- failure here\n\nADD src /source/src\nRUN cargo build\n\nENTRYPOINT cargo run\n</code></pre>\n\n<p>The reason I want to separate the install dependencies step from actually building my application, is that if I don't change the dependencies, I want Docker to be able use a cached image with all dependencies already installed and built. Thus, I can't <code>ADD /src /source/src</code> until <em>after</em> installing the dependecies, as that would invalidate the cached image when I change my own code.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 3, "creation_date": 1486627436, "post_id": 42128666, "comment_id": 71429254, "body": "We need a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a>, because I cannot reproduce your issue without <code>InstructionSequence</code>, <code>Value</code> and <code>Frame</code> and the definition of <code>literal_to_value</code>... try to isolate your issue on the Rust Playground and edit your question with a link there. Apart from that, in general you SHOULD NOT have the same lifetime on the <code>struct</code> <i>and</i> on <code>&amp;self</code>. It&#39;s a very bad idea, and only occurs when the <code>struct</code> tries to store references to its own members... <a href=\"http://stackoverflow.com/questions/26349778/how-can-i-provide-a-reference-to-a-struct-that-is-a-sibling\">and that&#39;s not possible</a>."}, {"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 0, "creation_date": 1486633058, "post_id": 42128666, "comment_id": 71432691, "body": "An <code>&amp;mut</code> borrow conflicting with itself is often because the reference is kept alive until the next loop iteration."}], "answers": [{"comments": [{"owner": {"reputation": 2379, "user_id": 929772, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/944e45061dc58d6d996c2b605cce6c09?s=128&d=identicon&r=PG", "display_name": "gmalette", "link": "https://stackoverflow.com/users/929772/gmalette"}, "edited": false, "score": 0, "creation_date": 1486845319, "post_id": 42134397, "comment_id": 71524754, "body": "This is a good explanation of what&#39;s going on, thanks! It also made me realize that my program doesn&#39;t allow static lifetimes like I was trying to do. Activation needs to be mutable, so I used an <code>Rc&lt;RefCell&gt;</code>"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 1, "last_activity_date": 1486636678, "last_edit_date": 1495540409, "creation_date": 1486636678, "answer_id": 42134397, "question_id": 42128666, "link": "https://stackoverflow.com/questions/42128666/fighting-with-not-understanding-rust-borrow-checker/42134397#42134397", "title": "Fighting with / not understanding Rust borrow checker", "body": "<p>The value you push on the stack keeps a mutable borrow on <code>self.frames</code> active. On the second loop iteration, that borrow is still active, so you can't take a second borrow on <code>self.frames</code>.</p>\n\n<p><code>Vm::literal_to_value</code> doesn't need a mutable reference to the activation object, so you can change your code to take an immutable reference instead:</p>\n\n<pre><code>match instruction {\n    &amp;Instruction::Push(ref value) =&gt; {\n        let top_activation = &amp;self.frames.last().unwrap().activation;\n        self.stack.push(Vm::literal_to_value(value, top_activation))\n    },\n    _ =&gt; ()\n};\n</code></pre>\n\n<p>That makes <code>run</code> compile, but then your tests fail to compile. That's because with this signature:</p>\n\n<pre><code>pub fn run(&amp;'a mut self)\n</code></pre>\n\n<p>you're linking the lifetime of <code>self</code> with the lifetime parameter on <code>Vm</code>. Essentially, the type of <code>self</code> here is <code>&amp;'a mut Vm&lt;'a&gt;</code>; the fact that <code>'a</code> occurs twice here, combined with the fact that it's a mutable borrow (rather than an immutable borrow) tells Rust that the <code>Vm</code> <em>maintains a mutable borrow on itself within one of its fields</em>. Therefore, the <code>Vm</code> object will \"lock\" itself once you call <code>run</code>. That means that after calling <code>run</code>, you can't do anything else on the <code>Vm</code>! The bottom line is that <a href=\"https://stackoverflow.com/q/32300132/234590\">you can't have a field in a struct that is a reference to a value that is owned by the same struct</a>.</p>\n"}], "owner": {"reputation": 2379, "user_id": 929772, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/944e45061dc58d6d996c2b605cce6c09?s=128&d=identicon&r=PG", "display_name": "gmalette", "link": "https://stackoverflow.com/users/929772/gmalette"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 155, "favorite_count": 0, "accepted_answer_id": 42134397, "answer_count": 1, "score": 0, "last_activity_date": 1486636678, "creation_date": 1486616877, "question_id": 42128666, "link": "https://stackoverflow.com/questions/42128666/fighting-with-not-understanding-rust-borrow-checker", "title": "Fighting with / not understanding Rust borrow checker", "body": "<p>I started writing Rust code a few days ago, and just now had my first encounter with the borrow checker.</p>\n\n<pre><code>#[derive(Clone, Eq, Debug, PartialEq)]\npub struct Vm&lt;'a&gt; {\n    instructions: Rc&lt;InstructionSequence&gt;,\n    pc: usize,\n    stack: Vec&lt;Value&lt;'a&gt;&gt;,\n    frames: Vec&lt;Frame&lt;'a&gt;&gt;,\n}\n\nimpl&lt;'a&gt; Vm&lt;'a&gt; {\n    pub fn run(&amp;'a mut self) {\n        loop {\n            let instruction = self.instructions.get(self.pc).unwrap();\n\n            match instruction {\n                &amp;Instruction::Push(ref value) =&gt; {\n                    let top_activation = &amp;mut self.frames.last_mut().unwrap().activation;\n                    self.stack.push(Vm::literal_to_value(value, top_activation))\n                },\n\n                _ =&gt; ()\n            };\n        };\n    }\n}\n</code></pre>\n\n<p><a href=\"https://github.com/exceptional-lang/exceptional-rs/blob/4a124c50c9b1f78ef713e6e14077939031f9771d/src/vm.rs#L153-L159\" rel=\"nofollow noreferrer\">full code here</a></p>\n\n<p>Rust gives me the following errors:</p>\n\n<pre><code>error[E0499]: cannot borrow `self.frames` as mutable more than once at a time\n   --&gt; src/vm.rs:157:47\n    |\n157 |                     let top_activation = &amp;mut self.frames.last_mut().unwrap().activation;\n    |                                               ^^^^^^^^^^^\n    |                                               |\n    |                                               second mutable borrow occurs here\n    |                                               first mutable borrow occurs here\n...\n181 |     }\n    |     - first borrow ends here\n\nerror[E0499]: cannot borrow `self.frames` as mutable more than once at a time\n   --&gt; src/vm.rs:157:47\n    |\n157 |                     let top_activation = &amp;mut self.frames.last_mut().unwrap().activation;\n    |                                               ^^^^^^^^^^^\n    |                                               |\n    |                                               second mutable borrow occurs here\n    |                                               first mutable borrow occurs here\n...\n181 |     }\n    |     - first borrow ends here\n\nerror: aborting due to 2 previous errors\n</code></pre>\n\n<p>I don't understand why it's getting borrowed twice. What's going on?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1486608130, "post_id": 42126320, "comment_id": 71422479, "body": "I think one directory is created for each version of Rust."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1486609144, "post_id": 42126320, "comment_id": 71422732, "body": "@kennytm if that were the case, I&#39;d expect to have over 15 versions (up to the current stable 1.15, plus beta, nightly and pre-1.0 versions), not just the 3."}, {"owner": {"reputation": 3039, "user_id": 2851815, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/37MCt.png?s=128&g=1", "display_name": "\u043d\u0430\u0431\u0438\u044f\u0447\u043b\u044d\u0432\u044d\u043b\u0438", "link": "https://stackoverflow.com/users/2851815/%d0%bd%d0%b0%d0%b1%d0%b8%d1%8f%d1%87%d0%bb%d1%8d%d0%b2%d1%8d%d0%bb%d0%b8"}, "edited": false, "score": 1, "creation_date": 1486609632, "post_id": 42126320, "comment_id": 71422844, "body": "Interesting, the users of <code>cargo-update</code> also <a href=\"https://github.com/nabijaczleweli/cargo-update/issues/15\" rel=\"nofollow noreferrer\">report</a> that the newest one sometimes is not the one used by <code>cargo</code>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 6, "last_activity_date": 1486616151, "creation_date": 1486616151, "answer_id": 42128555, "question_id": 42126320, "link": "https://stackoverflow.com/questions/42126320/why-does-cargo-create-multiple-directories-for-the-same-registry/42128555#42128555", "title": "Why does Cargo create multiple directories for the same registry?", "body": "<p><a href=\"https://github.com/rust-lang/cargo/blob/c5679e21ef8c7deabce3911ce04ead338ff063be/src/cargo/core/source.rs#L437-L450\" rel=\"noreferrer\">The hash is based on two fields</a>: the kind of source (central repository, git reference, local path, etc.) and the source's URL.</p>\n\n<p>Cargo used to delegate to rust-url's implementation of <code>Hash</code> for <code>Url</code>, which changed over time. Cargo's implementation was last changed in <a href=\"https://github.com/rust-lang/cargo/pull/2737\" rel=\"noreferrer\">pull request 2737</a> in order to fix <a href=\"https://github.com/rust-lang/cargo/issues/1710\" rel=\"noreferrer\">issue 1710</a>; Cargo now hashes the URL string, rather than the <code>Url</code> object, in order to produce a more stable hash that doesn't depend on rust-url's behavior.</p>\n\n<p>Also, <a href=\"https://github.com/rust-lang/cargo/blob/c5679e21ef8c7deabce3911ce04ead338ff063be/src/cargo/util/hex.rs#L20-L24\" rel=\"noreferrer\">Cargo uses the now-deprecated <code>SipHasher</code></a> as the hash function. Because it's deprecated, it's possible that Cargo might change to another hash function in the future (or <code>SipHasher</code> might move to a crate and Cargo will use that, who knows).</p>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 92, "favorite_count": 0, "accepted_answer_id": 42128555, "answer_count": 1, "score": 5, "last_activity_date": 1486616151, "creation_date": 1486601282, "question_id": 42126320, "link": "https://stackoverflow.com/questions/42126320/why-does-cargo-create-multiple-directories-for-the-same-registry", "title": "Why does Cargo create multiple directories for the same registry?", "body": "<p>Cargo stores the source code of downloaded crates in <code>$HOME/.cargo/registry/src</code> (or the appropriate <code>$CARGO_HOME</code> directory). I get that each unique registry I use will create a separate directory, presumably to prevent conflicts.</p>\n\n<p>What I don't understand is why the same repository would create multiple directories:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ ls -ld ~/.cargo/registry/src/github.com-*\ndrwxr-xr-x   473 shep  staff  16082 Dec 27  2015 ~/.cargo/registry/src/github.com-0a35038f75765ae4\ndrwxr-xr-x  1187 shep  staff  40358 Feb  8 19:10 ~/.cargo/registry/src/github.com-1ecc6299db9ec823\ndrwxr-xr-x   380 shep  staff  12920 Sep 11 12:16 ~/.cargo/registry/src/github.com-88ac128001ac3a9a\n</code></pre>\n\n<p>Presumably the hash that is appended to the end plays some role in this. What causes Cargo to create one of these directories? Will it ever go back to a previous directory and continue using it?</p>\n"}]