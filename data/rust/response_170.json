[{"tags": ["loops", "rust", "pattern-matching", "control-flow"], "comments": [{"owner": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 0, "creation_date": 1523484822, "post_id": 49785136, "comment_id": 86585735, "body": "You could get rid of the <code>let data</code> and the <code>continue</code> and then just put &quot;other stuff&quot; inside the <code>Ok(x) =&gt;</code> case."}, {"owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "reply_to_user": {"reputation": 339851, "user_id": 149392, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7a561ec0875fcbbe3066ea8fe288ec77?s=128&d=identicon&r=PG", "display_name": "sepp2k", "link": "https://stackoverflow.com/users/149392/sepp2k"}, "edited": false, "score": 0, "creation_date": 1523485051, "post_id": 49785136, "comment_id": 86585810, "body": "@sepp2k True, but that&#39;ll quickly turn into a lot of nested code when there&#39;re multiple resultish operations inside the loop. Would writing a macro be a way out?"}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523485176, "post_id": 49785136, "comment_id": 86585846, "body": "&quot;avoid copy-pasting the Err/Ok branches on this&quot; what is copy-pasted here?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523490381, "post_id": 49785136, "comment_id": 86587259, "body": "You are missing the point of struct like <code>Result</code>, this force code to check the error, if there was something to bypass this, what would be the point ? This construct is so frequent in Rust that <code>?</code> is used to avoid copy of code. For <b>test only or in main function</b>, you can use <code>.unwrap()</code> or <code>.expect()</code>"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523495328, "post_id": 49785136, "comment_id": 86588298, "body": "I&#39;m not going to edit the question, but I think the title would be more appropriate as &quot;How do I concisely compose Results?&quot; - It seems like your question isn&#39;t specifically about <code>if let</code>, seeing as that it&#39;s effectively seeking an alternative to the language construct."}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 2, "creation_date": 1523515869, "post_id": 49785136, "comment_id": 86594482, "body": "One way to concisely compose <code>Result</code>s is to use one of the comprehension crates like <a href=\"https://crates.io/crates/map_for\" rel=\"nofollow noreferrer\">map_for</a> or <a href=\"https://crates.io/crates/mdo\" rel=\"nofollow noreferrer\">mdo</a>. (Note: I&#39;m the author of <code>map_for</code>)"}, {"owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523516856, "post_id": 49785136, "comment_id": 86595048, "body": "@mcarton added the copy/paste"}, {"owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523517264, "post_id": 49785136, "comment_id": 86595252, "body": "@BHustus true, fixed that"}, {"owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523517484, "post_id": 49785136, "comment_id": 86595375, "body": "@Stargateur I&#39;m not bypassing the result or error handling, but trying to avoid the copy-paste of the same error handling logic over and over again. Question title better reflects this now I hope, sorry."}], "answers": [{"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523570097, "post_id": 49785300, "comment_id": 86627691, "body": "Worth noting, I believe you could also do this with a closure as well, if you don&#39;t want to make an entirely separate function in another part of your source code. Though I don&#39;t know how good that would look..."}, {"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523570806, "post_id": 49785300, "comment_id": 86627980, "body": "@BHustus Indeed, but I believe that a separate function is easier to read here. :)"}], "tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": false, "score": 11, "last_activity_date": 1523526099, "last_edit_date": 1523526099, "creation_date": 1523485728, "answer_id": 49785300, "question_id": 49785136, "link": "https://stackoverflow.com/questions/49785136/is-there-a-shortcut-to-unwrap-or-continue-in-a-loop/49785300#49785300", "title": "Is there a shortcut to unwrap or continue in a loop?", "body": "<p>If you are going to \"unwrap or continue\" on results often, consider encapsulating that logic in a separate function. With it, you can take advantage of the <code>?</code> syntax to raise errors out of the function. The loop's flow logic can then be written in a single place (although at this point, you might no longer need the <code>continue</code>).</p>\n\n<pre><code>loop {\n    if let Err(err) = do_event() {\n        warn!(\"An error: {}; skipped.\", err);\n        // continue; // you also don't need this\n    }\n}\n\nfn do_event() -&gt; Result&lt;(), YourErrorType&gt; {\n    let data = do_something()?; // \n    let x = something_more()?;  // error propagation!\n    Ok(())\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": false, "score": 6, "last_activity_date": 1523495098, "last_edit_date": 1523495098, "creation_date": 1523494415, "answer_id": 49786409, "question_id": 49785136, "link": "https://stackoverflow.com/questions/49785136/is-there-a-shortcut-to-unwrap-or-continue-in-a-loop/49786409#49786409", "title": "Is there a shortcut to unwrap or continue in a loop?", "body": "<p>If you have to chain multiple <code>Ok</code>s together, need to use one <code>Ok</code>'s value in the next operation, and don't care about <em>where</em> in the chain the error arises, consider <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then\" rel=\"noreferrer\"><code>and_then</code></a>:</p>\n\n<pre><code>loop {\n    let outcome = something()\n                  .and_then(|a| something_else(a))\n                  .and_then(|a| another_thing(a))\n                  .and_then(|a| {\n                      let b = a + salt;\n                      one_more(b)\n                  });\n    if let Err(e) = outcome {\n        warn!(\"An error: {}; skipped.\", e);\n    }\n}\n</code></pre>\n\n<p>Where <code>something</code>, <code>something_else</code>, <code>another_thing</code> and <code>one_more</code> all return some form of <code>Result</code>. Even though this example removes the <code>continue</code> statement, <code>and_then</code> effectively emulates it by short-circuiting when the <code>Result</code> is of type <code>Err</code>. All further calls down the line will be skipped over.</p>\n\n<p>You can make this even more concise by using non-closures on the statements that only require one function call:</p>\n\n<pre><code>loop {\n    let outcome = something()\n                  .and_then(something_else)\n                  .and_then(another_thing)\n                  .and_then(|a| one_more(a + salt));\n    if let Err(e) = outcome {\n        warn!(\"An error: {}; skipped.\", e);\n    }\n}\n</code></pre>\n\n<p>(Note the lack of parentheses on the functions, which indicates they're being used as callable objects rather than taking their return value)</p>\n"}, {"tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": true, "score": 13, "last_activity_date": 1523569680, "creation_date": 1523569680, "answer_id": 49806368, "question_id": 49785136, "link": "https://stackoverflow.com/questions/49785136/is-there-a-shortcut-to-unwrap-or-continue-in-a-loop/49806368#49806368", "title": "Is there a shortcut to unwrap or continue in a loop?", "body": "<p>While I think that E_net4's answer is probably the best one, I'm adding a macro for posterity in case creating a separate function and early-returning with the <code>?</code> operator is for some reason undesirable.</p>\n\n<p>Here is a simple <code>skip_fail!</code> macro that <code>continue</code>s a containing loop when passed an error:</p>\n\n<pre><code>macro_rules! skip_fail {\n    ($res:expr) =&gt; {\n        match $res {\n            Ok(val) =&gt; val,\n            Err(e) =&gt; {\n                warn!(\"An error: {}; skipped.\", e);\n                continue;\n            }\n        }\n    };\n}\n</code></pre>\n\n<p>This macro can be used as <code>let ok_value = skip_fail!(do_something());</code></p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=fecf1b774f5252cbb5ed2a0d0df3c17d&amp;version=stable\" rel=\"noreferrer\">Playground link which uses skip_fail to print out numbers divisible by 1, 2, and 3, and print an error when one of the divisions would truncate.</a></p>\n\n<p>Again, I believe that using <code>?</code> in a separate function, and returning an <code>Ok(end_result)</code> if nothing fails, is probably the most idiomatic solution, so if you can use that answer you probably should.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1583371442, "post_id": 60536805, "comment_id": 107097009, "body": "<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2c6af7747193cfa30c105084d4c3c2d7\" rel=\"nofollow noreferrer\">An IIFE is the stable equivalent</a>, which is effectively the same as pointed out in <a href=\"https://stackoverflow.com/a/49785300/155423\">E_net4&#39;s answer</a>."}, {"owner": {"reputation": 60850, "user_id": 221955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG", "display_name": "Michael Anderson", "link": "https://stackoverflow.com/users/221955/michael-anderson"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1583377041, "post_id": 60536805, "comment_id": 107098086, "body": "@Shepmaster that&#39;s neat. I&#39;ve added that code to the question. But out of interest what does IIFE stand for?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1583377096, "post_id": 60536805, "comment_id": 107098102, "body": "<a href=\"https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\" rel=\"nofollow noreferrer\">Immediately invoked function expression</a>"}], "tags": [], "owner": {"reputation": 60850, "user_id": 221955, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/0bc09e1bd45610fc85274cd7bb002c56?s=128&d=identicon&r=PG", "display_name": "Michael Anderson", "link": "https://stackoverflow.com/users/221955/michael-anderson"}, "is_accepted": false, "score": 2, "last_activity_date": 1583377256, "last_edit_date": 1583377256, "creation_date": 1583369906, "answer_id": 60536805, "question_id": 49785136, "link": "https://stackoverflow.com/questions/49785136/is-there-a-shortcut-to-unwrap-or-continue-in-a-loop/60536805#60536805", "title": "Is there a shortcut to unwrap or continue in a loop?", "body": "<p>If you're open to using unstable features, you can use a try block for this:</p>\n\n<pre><code>#![feature(try_blocks)]\n\npub fn something() -&gt; Result&lt;String, String&gt; {\n    Err(String::from(\"Badness\"))\n}\n\npub fn something_else() -&gt; Result&lt;String, String&gt; {\n    Ok(String::from(\"Ok\"))\n}\n\npub fn main() {\n    loop {\n        let result: Result&lt;(), String&gt; = try {\n            let data = something()?;\n            let data2 = something_else()?;\n        };\n        if let Err(e) = result {\n            println!(\"An error: {}; skipped.\", e)\n        }\n    }\n}\n</code></pre>\n\n<p>As shepmaster mentions in the comments this can be done without any unstable featurtes using a closure which is immediately evaluated (an Immediately Invoked Function Expression, or IIFE for short). This is the modification to the solution by E_net4 proposed by MutantOctopus in that solutions comments.</p>\n\n<pre><code>pub fn something() -&gt; Result&lt;String, String&gt; {\n    Err(String::from(\"Badness\"))\n}\n\npub fn something_else() -&gt; Result&lt;String, String&gt; {\n    Ok(String::from(\"Ok\"))\n}\n\npub fn main() {\n    loop {\n        let result: Result&lt;(), String&gt; = (|| {\n            let data = something()?;\n            let data2 = something_else()?;\n            Ok(())\n        })();\n        if let Err(e) = result {\n            println!(\"An error: {}; skipped.\", e)\n        }\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4195, "favorite_count": 0, "accepted_answer_id": 49806368, "answer_count": 4, "score": 5, "last_activity_date": 1583377256, "creation_date": 1523484679, "last_edit_date": 1583352506, "question_id": 49785136, "link": "https://stackoverflow.com/questions/49785136/is-there-a-shortcut-to-unwrap-or-continue-in-a-loop", "title": "Is there a shortcut to unwrap or continue in a loop?", "body": "<p>Consider this:</p>\n\n<pre><code>loop {\n    let data = match something() {\n        Err(err) =&gt; {\n            warn!(\"An error: {}; skipped.\", err);\n            continue;\n        },\n        Ok(x) =&gt; x\n    };\n\n    let data2 = match somethingElse() {\n        Err(err) =&gt; {\n            warn!(\"An error: {}; skipped.\", err);\n            continue;\n        },\n        Ok(x) =&gt; x\n    };\n\n    // and so on\n}\n</code></pre>\n\n<p>If I didn't need to assign the ok-value to <code>data</code>, I'd use <code>if let Err(err) = something()</code>, but is there a shortcut to the code above that'd avoid copy-pasting the Err/Ok branches on this, I think, typical scenario? Something like the <code>if let</code> that would also return the ok-value.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 8, "last_activity_date": 1523483427, "creation_date": 1523483427, "answer_id": 49784947, "question_id": 49784874, "link": "https://stackoverflow.com/questions/49784874/what-is-the-rust-way-of-using-continue-from-inside-a-closure/49784947#49784947", "title": "What is the Rust way of using continue from inside a closure?", "body": "<p><code>unwrap_or_else</code> is just a convenience method around a <code>match</code> usually used in method call chains. As this is not the case here, you can simply use a <code>match</code> instead, and since you only seem to be interested by the <code>Err</code> case, you can also use <code>if let</code>:</p>\n\n<pre><code>loop {\n    if let Err(err) = something() {\n        warn!(\"Something bad happened: {}\", err);\n        continue;\n    }\n\n    // other stuff\n}\n</code></pre>\n"}], "owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 527, "favorite_count": 0, "accepted_answer_id": 49784947, "answer_count": 1, "score": 4, "last_activity_date": 1523576421, "creation_date": 1523482987, "last_edit_date": 1523576421, "question_id": 49784874, "link": "https://stackoverflow.com/questions/49784874/what-is-the-rust-way-of-using-continue-from-inside-a-closure", "title": "What is the Rust way of using continue from inside a closure?", "body": "<p>This isn't possible, but very much desired:</p>\n\n<pre><code>loop {\n    something().unwrap_or_else(|err| {\n        warn!(\"Something bad happened: {}\", err);\n        continue;\n    });\n\n    // other stuff\n}\n</code></pre>\n\n<p>What is the Rust way of solving it?</p>\n"}, {"tags": ["multithreading", "rust", "mutex"], "comments": [{"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1523474111, "post_id": 49782694, "comment_id": 86580936, "body": "I&#39;m curious if you can fabricate a minimal example that doesn&#39;t compile but you think its safe, sound, and should compile. Outside of my curiosity, that might also lead to better suggestions for workarounds."}, {"owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1523474554, "post_id": 49782694, "comment_id": 86581169, "body": "OK, the more I re-read it the more sense your question makes as-written. The problem is that <i>you want</i> both shared ownership and interior mutability of the <code>Players</code> in your <code>HashMap</code>s <i>and you want</i> those HashMaps shared between threads, <i>but</i> <code>Rc&lt;RefCell&lt;T&gt;&gt;</code> isn&#39;t <code>Send</code>."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1523475591, "post_id": 49782694, "comment_id": 86581722, "body": "<a href=\"https://play.rust-lang.org/?gist=75e144ecfb9b8a8bb44d41989aeb0d40&amp;version=stable\" rel=\"nofollow noreferrer\">Here</a>&#39;s an isolated working example. Yes, I do understand that Rust requires this for safety reasons. But in my case, I&#39;m only accessing individual players in just one thread. So a Mutex&lt;Player&gt; seems wasteful here and only serves to satisfy Rust compiler :/"}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 3, "creation_date": 1523476941, "post_id": 49783414, "comment_id": 86582496, "body": "I think this answers the question. But I&#39;m not sure if I&#39;d actually have enough confidence or understanding of the consequences to actually implement it in production code."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523476941, "post_id": 49783414, "comment_id": 86582497, "body": "Thanks. I guess I&#39;ll have to use unsafe."}], "tags": [], "owner": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "is_accepted": false, "score": 1, "last_activity_date": 1523476667, "last_edit_date": 1523476667, "creation_date": 1523476264, "answer_id": 49783414, "question_id": 49782694, "link": "https://stackoverflow.com/questions/49782694/forced-to-use-of-mutex-when-its-not-required/49783414#49783414", "title": "Forced to use of Mutex when it&#39;s not required", "body": "<p><code>Send</code> is a marker trait that governs which objects can have ownership transferred across thread boundaries. It is automatically implemented for any type that is entirely composed of <code>Send</code> types. It is also an unsafe trait because manually implementing this trait can cause the compiler to not enforce the concurrency safety that we love about Rust.</p>\n\n<p>The problem is that <code>Rc&lt;RefCell&lt;Player&gt;&gt;</code> isn't <code>Send</code> and thus your <code>PlayerList</code> isn't <code>Send</code> and thus can't be <em>sent</em> to another thread, even when wrapped in an <code>Arc&lt;Mutex&lt;&gt;&gt;</code>. The <code>unsafe</code> workaround would be to <code>unsafe impl Send</code> for your <code>PlayerList</code> struct.</p>\n\n<p>Putting this code into your playground example allows it to compile the same way as the original with <code>Arc&lt;Mutex&lt;Player&gt;&gt;</code></p>\n\n<pre><code>struct PlayerList {\n    by_name: HashMap&lt;String, Rc&lt;RefCell&lt;Player&gt;&gt;&gt;,\n    by_uuid: HashMap&lt;Uuid, Rc&lt;RefCell&lt;Player&gt;&gt;&gt;,\n}\n\nunsafe impl Send for PlayerList {}\n\nimpl PlayerList {\n    fn add_player(&amp;mut self, p: Player) {\n        let name = p.name.clone();\n        let uuid = p.uuid;\n\n        let p = Rc::new(RefCell::new(p));\n        self.by_name.insert(name, Rc::clone(&amp;p));\n        self.by_uuid.insert(uuid, p);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=efef1ddf0376f6ada2676fbbb0724d91&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>The <a href=\"https://doc.rust-lang.org/nomicon/send-and-sync.html\" rel=\"nofollow noreferrer\">Nomicon</a> is sadly a little sparse at explaining what rules have have to be enforced by the programmer when unsafely implementing <code>Send</code> for a type containing <code>Rc</code>s, but accessing in only one thread seems safe enough...</p>\n\n<p>For completeness, <a href=\"https://doc.rust-lang.org/book/second-edition/ch16-04-extensible-concurrency-sync-and-send.html\" rel=\"nofollow noreferrer\">here's TRPL's bit on Send and Sync</a></p>\n"}, {"comments": [{"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523544019, "post_id": 49791659, "comment_id": 86613526, "body": "But how would I do that? The network thread needs player list to add players to it :/"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 4, "creation_date": 1523546331, "post_id": 49791659, "comment_id": 86615224, "body": "@WingerSendon: By sending a message from the network thread to the main thread, informing it that a new player connected? At the moment, you are &quot;Communicating by Sharing&quot;, and you could shift toward &quot;Sharing by Communicating&quot; instead. The former usually has synchronization primitives (such as mutexes, atomics, ...) all over the place, and may face contention/dead-lock issues, while the latter usually has communication queues (channels) and requires an &quot;asynchronous&quot; style of programming."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523551046, "post_id": 49791659, "comment_id": 86618179, "body": "Omg I was thinking about that just now. It&#39;s more intuitive and really solves this problem. Can you please edit your answer to add that as a workaround? I&#39;ll accept this answer."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523558295, "post_id": 49791659, "comment_id": 86622002, "body": "@WingerSendon: Done :)"}, {"owner": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "edited": false, "score": 0, "creation_date": 1526765547, "post_id": 49791659, "comment_id": 87873988, "body": "The later is often used on *nix with processes exchanging flat data (streams of octets) by local sockets and pipes. Careless programmers often produce deadlocks where two processes are stuck waiting for data from the other."}, {"owner": {"reputation": 7287, "user_id": 963864, "user_type": "registered", "accept_rate": 17, "profile_image": "https://www.gravatar.com/avatar/94e2dd813e278309b6281b4a4b7fdddd?s=128&d=identicon&r=PG", "display_name": "curiousguy", "link": "https://stackoverflow.com/users/963864/curiousguy"}, "edited": false, "score": 0, "creation_date": 1526766267, "post_id": 49791659, "comment_id": 87874130, "body": "&quot;<i>while the latter usually has communication queues (channels)</i>&quot; you mean, like the <b>mutex_unlock</b> message sent to the communication channel of the <b>mutex_lock</b> threads? Or the <b>cv_signal</b> message sent on the <b>cv_wait</b> channel?"}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1523576923, "last_edit_date": 1523576923, "creation_date": 1523521937, "answer_id": 49791659, "question_id": 49782694, "link": "https://stackoverflow.com/questions/49782694/forced-to-use-of-mutex-when-its-not-required/49791659#49791659", "title": "Forced to use of Mutex when it&#39;s not required", "body": "<blockquote>\n  <p>As I'm only accessing <code>Players</code> in the main thread, locking everytime to do that is both annoying and less performant.</p>\n</blockquote>\n\n<p>You mean, as right now you are only accessing <code>Players</code> in the main thread, but at any time later you may accidentally introduce an access to them in another thread?</p>\n\n<p>From the point of view of the language, if you can get a reference to a value, you may use the value. Therefore, if multiple threads have a reference to a value, this value should be safe to use from multiple threads. There is no way to enforce, at compile-time, that a particular value, although accessible, is actually never used.</p>\n\n<p>This raises the question, however:</p>\n\n<p><em>If the value is never used by a given thread, why does this thread have access to it in the first place?</em></p>\n\n<p>It seems to me that you have a <em>design</em> issue. If you can manage to redesign your program so that only the main thread has access to the <code>PlayerList</code>, then you will immediately be able to use <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>.</p>\n\n<p>For example, you could instead have the network thread send a message to the main thread announcing that a new player connected.</p>\n\n<p>At the moment, you are \"Communicating by Sharing\", and you could shift toward \"Sharing by Communicating\" instead. The former usually has synchronization primitives (such as mutexes, atomics, ...) all over the place, and may face contention/dead-lock issues, while the latter usually has communication queues (channels) and requires an \"asynchronous\" style of programming.</p>\n"}, {"comments": [{"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523557302, "post_id": 49803144, "comment_id": 86621449, "body": "Thank you. Using async sockets is in my TODO list. I&#39;m just waiting for async-await to evolve a bit, since using future combinators is a bit awkward at the moment, to me at least."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523565001, "post_id": 49803144, "comment_id": 86625556, "body": "@WingerSendon For a game, I&#39;d prefer an event based design over async-await, even in languages where it&#39;s available. In the first iteration, you just have one place in the game loop where you dequeue all incoming messages. On the sending side you can use an infinite output buffer for the first iteration."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523618585, "post_id": 49803144, "comment_id": 86645848, "body": "Rust uses an event loop based design for async-await though (readiness based design). So I think async-await can work well with it considering the fact that async-await is just syntax sugar for building the <code>Future</code> state machine."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "reply_to_user": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523620423, "post_id": 49803144, "comment_id": 86647010, "body": "@WingerSendon I&#39;m talking about the style you write your own code in. Processing all incoming messages once per frame is a great fit for most games. I don&#39;t see how the sequential flow of async-await would be useful there."}, {"owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "edited": false, "score": 0, "creation_date": 1523620816, "post_id": 49803144, "comment_id": 86647294, "body": "I&#39;m writing a game server and yeah I&#39;m gonna be using channels to send messages from networking thread to main thread&#39;s loop. Async-await is for the socket processing as I don&#39;t want to be blocking if I don&#39;t want thread per player.."}], "tags": [], "owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "is_accepted": false, "score": 1, "last_activity_date": 1523555904, "creation_date": 1523555904, "answer_id": 49803144, "question_id": 49782694, "link": "https://stackoverflow.com/questions/49782694/forced-to-use-of-mutex-when-its-not-required/49803144#49803144", "title": "Forced to use of Mutex when it&#39;s not required", "body": "<p>I suggest solving this threading problem using a multi-sender-single-receiver channel. The network threads get a <code>Sender&lt;Player&gt;</code> and no direct access to the player list.</p>\n\n<p>The <code>Receiver&lt;Player&gt;</code> gets stored inside the <code>PlayerList</code>. The only thread accessing the <code>PlayerList</code> is the main thread, so you can remove the <code>Mutex</code> around it. Instead in the place where the main-thread used to lock the mutexit dequeue all pending players from the <code>Receiver&lt;Player&gt;</code>, wraps them in an <code>Rc&lt;RefCell&lt;&gt;&gt;</code> and adds them to the appropriate collections.</p>\n\n<hr>\n\n<p>Though looking at the bigger designing, I wouldn't use a per-player thread in the first place. Instead I'd use some kind single threaded event-loop based design. (I didn't look into which Rust libraries are good in that area, but tokio seems popular)</p>\n"}], "owner": {"reputation": 3381, "user_id": 3964654, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/ITt1C.jpg?s=128&g=1", "display_name": "wingerse", "link": "https://stackoverflow.com/users/3964654/wingerse"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 526, "favorite_count": 0, "accepted_answer_id": 49791659, "answer_count": 3, "score": 3, "last_activity_date": 1523577184, "creation_date": 1523473473, "last_edit_date": 1523577184, "question_id": 49782694, "link": "https://stackoverflow.com/questions/49782694/forced-to-use-of-mutex-when-its-not-required", "title": "Forced to use of Mutex when it&#39;s not required", "body": "<p>I am writing a game and have a player list defined as follows:</p>\n\n<pre><code>pub struct PlayerList {\n    by_name: HashMap&lt;String, Arc&lt;Mutex&lt;Player&gt;&gt;&gt;,\n    by_uuid: HashMap&lt;Uuid, Arc&lt;Mutex&lt;Player&gt;&gt;&gt;,\n}\n</code></pre>\n\n<p>This struct has methods for adding, removing, getting players, and getting the player count.</p>\n\n<p>The <code>NetworkServer</code> and <code>Server</code> shares this list as follows:</p>\n\n<pre><code>NetworkServer {\n    ...\n    player_list: Arc&lt;Mutex&lt;PlayerList&gt;&gt;,\n    ...\n}\n\nServer {\n    ...\n    player_list: Arc&lt;Mutex&lt;PlayerList&gt;&gt;,\n    ...\n}\n</code></pre>\n\n<p>This is inside an <code>Arc&lt;Mutex&gt;</code> because the <code>NetworkServer</code> accesses the list in a different thread (network loop).<br>\nWhen a player joins, a thread is spawned for them and they are added to the player_list.  </p>\n\n<p>Although the only operation I'm doing is adding to <code>player_list</code>, I'm forced to use <code>Arc&lt;Mutex&lt;Player&gt;&gt;</code> instead of the more natural <code>Rc&lt;RefCell&lt;Player&gt;&gt;</code> in the <code>HashMap</code>s because <code>Mutex&lt;PlayerList&gt;</code> requires it. I am not accessing players from the network thread (or any other thread) so it makes no sense to put them under a <code>Mutex</code>. Only the <code>HashMap</code>s need to be locked, which I am doing using <code>Mutex&lt;PlayerList&gt;</code>. But Rust is pedantic and wants to protect against all misuses.  </p>\n\n<p>As I'm only accessing <code>Player</code>s in the main thread, locking every time to do that is both annoying and less performant. Is there a workaround instead of using <code>unsafe</code> or something?</p>\n\n<p>Here's an example:</p>\n\n<pre><code>use std::cell::Cell;\nuse std::collections::HashMap;\nuse std::ffi::CString;\nuse std::rc::Rc;\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\n#[derive(Clone, Copy, PartialEq, Eq, Hash)]\nstruct Uuid([u8; 16]);\n\nstruct Player {\n    pub name: String,\n    pub uuid: Uuid,\n}\n\nstruct PlayerList {\n    by_name: HashMap&lt;String, Arc&lt;Mutex&lt;Player&gt;&gt;&gt;,\n    by_uuid: HashMap&lt;Uuid, Arc&lt;Mutex&lt;Player&gt;&gt;&gt;,\n}\n\nimpl PlayerList {\n    fn add_player(&amp;mut self, p: Player) {\n        let name = p.name.clone();\n        let uuid = p.uuid;\n\n        let p = Arc::new(Mutex::new(p));\n        self.by_name.insert(name, Arc::clone(&amp;p));\n        self.by_uuid.insert(uuid, p);\n    }\n}\n\nstruct NetworkServer {\n    player_list: Arc&lt;Mutex&lt;PlayerList&gt;&gt;,\n}\n\nimpl NetworkServer {\n    fn start(&amp;mut self) {\n        let player_list = Arc::clone(&amp;self.player_list);\n        thread::spawn(move || {\n            loop {\n                // fake network loop\n                // listen for incoming connections, accept player and add them to player_list.\n                player_list.lock().unwrap().add_player(Player {\n                    name: \"blahblah\".into(),\n                    uuid: Uuid([0; 16]),\n                });\n            }\n        });\n    }\n}\n\nstruct Server {\n    player_list: Arc&lt;Mutex&lt;PlayerList&gt;&gt;,\n    network_server: NetworkServer,\n}\n\nimpl Server {\n    fn start(&amp;mut self) {\n        self.network_server.start();\n        // main game loop\n        loop {\n            // I am only accessing players in this loop in this thread. (main thread)\n            // so Mutex for individual player is not needed although rust requires it.\n        }\n    }\n}\n\nfn main() {\n    let player_list = Arc::new(Mutex::new(PlayerList {\n        by_name: HashMap::new(),\n        by_uuid: HashMap::new(),\n    }));\n    let network_server = NetworkServer {\n        player_list: Arc::clone(&amp;player_list),\n    };\n    let mut server = Server {\n        player_list,\n        network_server,\n    };\n    server.start();\n}\n</code></pre>\n"}, {"tags": ["rust", "mio"], "answers": [{"comments": [{"owner": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1523576907, "post_id": 49786017, "comment_id": 86629597, "body": "I  wonder if you know why that code quoted in your last paragraph does the <code>as u64</code> and then back with <code>as i32</code>. Why not keep it <code>i32</code> through the whole expression?"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 49065, "user_id": 13422, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/94b309d78a1253a334e9b82643a8dc97?s=128&d=identicon&r=PG", "display_name": "Zan Lynx", "link": "https://stackoverflow.com/users/13422/zan-lynx"}, "edited": false, "score": 0, "creation_date": 1523578214, "post_id": 49786017, "comment_id": 86629897, "body": "@ZanLynx <code>millis()</code> return an <code>u64</code>, In order to avoid overflow because timeout is an C <code>int</code> (they suppose C <code>int</code> has 32 bits), they compare this value to <code>i32::MAX</code> to do that need to first cast it to u64, then they take the minimum, so the final result is positive and can&#39;t overflow an <code>i32</code>."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": false, "score": 1, "last_activity_date": 1523576603, "last_edit_date": 1523576603, "creation_date": 1523491057, "answer_id": 49786017, "question_id": 49779851, "link": "https://stackoverflow.com/questions/49779851/what-is-mios-behaviour-on-a-poll-with-a-zero-duration-timeout/49786017#49786017", "title": "What is Mio&#39;s behaviour on a Poll with a zero duration timeout?", "body": "<p>I suppose you want a Linux answer cause you link to a Linux manual.</p>\n\n<p><code>mio</code> <a href=\"https://github.com/carllerche/mio/blob/c419ed6ef3bb00314251d3ba5e6f2c01f3997225/src/poll.rs#L294-L300\" rel=\"nofollow noreferrer\">uses <code>epoll()</code>, not <code>select()</code>, on Linux</a>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>/// |      OS    |  Selector |\n/// |------------|-----------|\n/// | Linux      | [epoll]   |\n/// | OS X, iOS  | [kqueue]  |\n/// | Windows    | [IOCP]    |\n/// | FreeBSD    | [kqueue]  |\n/// | Android    | [epoll]   |\n</code></pre>\n\n<p>And the relevant quote from <code>epoll()</code> is:</p>\n\n<blockquote>\n  <p>The timeout argument specifies the minimum number of milliseconds that epoll_wait() will block. (This interval will be rounded up to the system clock granularity, and kernel scheduling delays mean that the blocking interval may overrun by a small amount.) Specifying a timeout of -1 causes epoll_wait() to block indefinitely, while specifying a timeout equal to zero cause epoll_wait() to return immediately, even if no events are available.</p>\n</blockquote>\n\n<p>So, <code>Duration::from_secs(0)</code> will not wait for incoming event. You can check the code of <code>mio</code> <a href=\"https://github.com/carllerche/mio/blob/c419ed6ef3bb00314251d3ba5e6f2c01f3997225/src/sys/unix/epoll.rs#L65-L67\" rel=\"nofollow noreferrer\">here</a></p>\n\n<pre><code>let timeout_ms = timeout\n            .map(|to| cmp::min(millis(to), i32::MAX as u64) as i32)\n            .unwrap_or(-1);\n</code></pre>\n\n<p>We can see that the behavior of <code>mio</code> will copy the behavior of <code>epoll()</code>.</p>\n"}], "owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 194, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1523576603, "creation_date": 1523462901, "last_edit_date": 1523576494, "question_id": 49779851, "link": "https://stackoverflow.com/questions/49779851/what-is-mios-behaviour-on-a-poll-with-a-zero-duration-timeout", "title": "What is Mio&#39;s behaviour on a Poll with a zero duration timeout?", "body": "<p>According to the <a href=\"https://docs.rs/mio/0.6.14/mio/struct.Poll.html\" rel=\"nofollow noreferrer\"><code>mio::Poll</code> docs</a>:</p>\n\n<blockquote>\n  <p>The function will block until either at least one readiness event has been received or timeout has elapsed. A timeout of None means that poll will block until a readiness event has been received.\n  ...\n  Note that the timeout will be rounded up to the system clock granularity (usually 1ms), and kernel scheduling delays mean that the blocking interval may be overrun by a small amount.</p>\n</blockquote>\n\n<p>Meanwhile, Linux's <a href=\"http://man7.org/linux/man-pages/man2/select.2.html\" rel=\"nofollow noreferrer\"><code>select()</code> has the zero timeout feature</a>:</p>\n\n<blockquote>\n  <p>If both fields of the timeval structure are zero, then select() returns immediately.  (This is useful for polling.)</p>\n</blockquote>\n\n<p>What is Mio's behaviour on a <code>Duration::from_secs(0)</code>, would it work like Linux's <code>select()</code>?</p>\n"}, {"tags": ["floating-point", "formatting", "rust"], "answers": [{"tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": true, "score": 14, "last_activity_date": 1523461106, "last_edit_date": 1523461106, "creation_date": 1523460054, "answer_id": 49778870, "question_id": 49778643, "link": "https://stackoverflow.com/questions/49778643/how-to-format-an-f32-with-a-specific-precision-and-prepended-zeros/49778870#49778870", "title": "How to format an f32 with a specific precision and prepended zeros?", "body": "<p>The first number (after the zero) is the <strong>total</strong> number of characters.</p>\n\n<p>So you <strong>do</strong> display your number with 5 characters. If you want to have 5 numbers before the dot, you must type:</p>\n\n<pre><code>println!(\"{:09.3}\", 123.45);\n</code></pre>\n\n<p>Output: <code>00123.450</code></p>\n\n<p>Because 9 minus 3 minus the dot = 5 digits.</p>\n"}], "owner": {"reputation": 833, "user_id": 3297655, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/df1bc6c2cef925a8f52d36b3290958b9?s=128&d=identicon&r=PG&f=1", "display_name": "chabapok", "link": "https://stackoverflow.com/users/3297655/chabapok"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 286, "favorite_count": 1, "accepted_answer_id": 49778870, "answer_count": 1, "score": 10, "last_activity_date": 1523461106, "creation_date": 1523459333, "last_edit_date": 1523461073, "question_id": 49778643, "link": "https://stackoverflow.com/questions/49778643/how-to-format-an-f32-with-a-specific-precision-and-prepended-zeros", "title": "How to format an f32 with a specific precision and prepended zeros?", "body": "<p>What format string should I use in the <code>println!</code> macro in order to print <code>0.0</code> as <code>00000.000</code>?</p>\n\n<pre><code>println!(\"={:05.3}\", 0.0);\n</code></pre>\n\n<p>Output: <code>=0.000</code></p>\n\n<p>Expected: <code>=00000.000</code></p>\n"}, {"tags": ["rust", "actor", "rust-actix"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523457982, "post_id": 49777802, "comment_id": 86571415, "body": "Note: if you have not already, I suggest asking on the r/rust reddit channel, where the author of the framework is quite active. If you do so, please be sure to cross-reference with this question."}, {"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523458807, "post_id": 49777802, "comment_id": 86572103, "body": "@GustavoBasso If you get an answer there, don&#39;t forget to come back here and answer your own question in case someone else would ever have the same!"}], "answers": [{"tags": [], "owner": {"reputation": 1215, "user_id": 275072, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/fc6516848b54b6fff9818395c93425b4?s=128&d=identicon&r=PG", "display_name": "dustin.b", "link": "https://stackoverflow.com/users/275072/dustin-b"}, "is_accepted": false, "score": 8, "last_activity_date": 1523475241, "last_edit_date": 1523475241, "creation_date": 1523461943, "answer_id": 49779507, "question_id": 49777802, "link": "https://stackoverflow.com/questions/49777802/does-the-rust-actors-framework-actix-guarantee-message-order-between-two-actors/49779507#49779507", "title": "Does the Rust actors framework Actix guarantee message order between two actors?", "body": "<p>The order in which messages are received from one single actor to another single actor is deterministic:</p>\n\n<blockquote>\n  <p>Order is deterministic. Actix uses mpsc queue for messages</p>\n</blockquote>\n\n<p>See the <a href=\"https://www.reddit.com/r/rust/comments/8bhp4s/does_actix_rust_actors_framework_guarantee/dx6sqa3/\" rel=\"noreferrer\">answer from the author in the rust subreddit</a>. </p>\n"}], "owner": {"reputation": 113, "user_id": 6428315, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-wQ_-RMbdBU4/AAAAAAAAAAI/AAAAAAAAB9I/PexSBHk6E28/photo.jpg?sz=128", "display_name": "Gustavo Basso", "link": "https://stackoverflow.com/users/6428315/gustavo-basso"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1280, "favorite_count": 0, "answer_count": 1, "score": 11, "last_activity_date": 1523576254, "creation_date": 1523457046, "last_edit_date": 1523576254, "question_id": 49777802, "link": "https://stackoverflow.com/questions/49777802/does-the-rust-actors-framework-actix-guarantee-message-order-between-two-actors", "title": "Does the Rust actors framework Actix guarantee message order between two actors?", "body": "<p>In the case of one single actor sending a message to another single actor.</p>\n\n<p>I couldn't find anything about this in the official documentation.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 2, "creation_date": 1523451429, "post_id": 49775759, "comment_id": 86566434, "body": "<a href=\"https://doc.rust-lang.org/src/alloc/vec.rs.html#1163-1165\" rel=\"nofollow noreferrer\">doc.rust-lang.org/src/alloc/vec.rs.html#1163-1165</a>"}, {"owner": {"reputation": 791, "user_id": 4747937, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/d9d99088c98489a7e0f718631b9e82fc?s=128&d=identicon&r=PG&f=1", "display_name": "kevlarr", "link": "https://stackoverflow.com/users/4747937/kevlarr"}, "reply_to_user": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "edited": false, "score": 0, "creation_date": 1523451508, "post_id": 49775759, "comment_id": 86566491, "body": "@YuryTarabanko Ugh, embarrassing... I had a hard time finding that one... Can you post that as an answer please?"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 6, "creation_date": 1523451901, "post_id": 49775759, "comment_id": 86566777, "body": "@kevlarr: Nothing embarrassing here; except for the Docs of course. It would indeed be nice that the complexity of each collection method was made explicit in its doc. I mean, the implementation of <code>len</code> is easy here, but what&#39;s the complexity of <code>drain_filter</code>?"}, {"owner": {"reputation": 791, "user_id": 4747937, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/d9d99088c98489a7e0f718631b9e82fc?s=128&d=identicon&r=PG&f=1", "display_name": "kevlarr", "link": "https://stackoverflow.com/users/4747937/kevlarr"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523452398, "post_id": 49775759, "comment_id": 86567183, "body": "@MatthieuM. good point!"}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 4, "creation_date": 1523462454, "post_id": 49775759, "comment_id": 86574762, "body": "<code>push()</code> is not <code>O(1)</code> but amortized <code>O(1)</code>, sometime the resize need <code>O(n)</code>"}, {"owner": {"reputation": 791, "user_id": 4747937, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/d9d99088c98489a7e0f718631b9e82fc?s=128&d=identicon&r=PG&f=1", "display_name": "kevlarr", "link": "https://stackoverflow.com/users/4747937/kevlarr"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523463198, "post_id": 49775759, "comment_id": 86575205, "body": "@Stargateur Oh good call, I missed that distinction"}, {"owner": {"reputation": 791, "user_id": 4747937, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/d9d99088c98489a7e0f718631b9e82fc?s=128&d=identicon&r=PG&f=1", "display_name": "kevlarr", "link": "https://stackoverflow.com/users/4747937/kevlarr"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523588177, "post_id": 49775759, "comment_id": 86632073, "body": "Thank you @Shepmaster for the good edits to question &amp; answer"}], "answers": [{"tags": [], "owner": {"reputation": 39499, "user_id": 351705, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/5vFwo.jpg?s=128&g=1", "display_name": "Yury Tarabanko", "link": "https://stackoverflow.com/users/351705/yury-tarabanko"}, "is_accepted": true, "score": 10, "last_activity_date": 1523576056, "last_edit_date": 1523576056, "creation_date": 1523451623, "answer_id": 49775848, "question_id": 49775759, "link": "https://stackoverflow.com/questions/49775759/what-is-the-runtime-complexity-of-veclen/49775848#49775848", "title": "What is the runtime complexity of Vec::len?", "body": "<p>It is <code>O(1)</code> as of <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/liballoc/vec.rs#L1163-L1165\" rel=\"nofollow noreferrer\">the implemented code</a> in Rust 1.25.0:</p>\n\n<pre><code>pub fn len(&amp;self) -&gt; usize {\n    self.len\n}\n</code></pre>\n"}], "owner": {"reputation": 791, "user_id": 4747937, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/d9d99088c98489a7e0f718631b9e82fc?s=128&d=identicon&r=PG&f=1", "display_name": "kevlarr", "link": "https://stackoverflow.com/users/4747937/kevlarr"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 357, "favorite_count": 0, "accepted_answer_id": 49775848, "answer_count": 1, "score": 10, "last_activity_date": 1523576056, "creation_date": 1523451332, "last_edit_date": 1523575961, "question_id": 49775759, "link": "https://stackoverflow.com/questions/49775759/what-is-the-runtime-complexity-of-veclen", "title": "What is the runtime complexity of Vec::len?", "body": "<p>Given a vector...</p>\n\n<pre><code>let v = vec![1, 2, 3, 4, 5];\n</code></pre>\n\n<p>Is calling <code>v.len()</code> O(1) or O(n)?</p>\n\n<hr>\n\n<p>Neither \"The Book\" (from what I can tell so far) nor <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#len.v\" rel=\"noreferrer\">the docs</a> mention whether <code>.len()</code> is constant time or not, and I cannot find anything on Stack Overflow or elsewhere.</p>\n\n<p>I'm assuming it's O(1) since <code>[]</code>, <code>.push()</code>, and <code>.pop()</code> <a href=\"https://doc.rust-lang.org/std/vec/\" rel=\"noreferrer\">all are</a>, but I want to be sure before I litter my code with <code>v.len()</code>.</p>\n\n<p>I know that I can easily just store/reference the return of <code>len</code> but in some situations - like inner functions - I don't want to keep having to pass both a vector <em>and</em> an int around.</p>\n\n<p>Thanks to @Stargateur for pointing out that indexing's O(1) is different from push/pop's <em>amortized</em> O(1)</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523432234, "post_id": 49769034, "comment_id": 86553354, "body": "In task manager I have lld -flavor wasm -L ~/.rustup/toolchain/nightly-i686-unknown-linux-gnu/lib/rustl&zwnj;&#8203;ib/wasm32-unknown-un&zwnj;&#8203;known/lib  ~/myproject/target/wasm32-/debug/deps/longnames.rcgu.o etc and it doesn&#39;t consume cpu"}, {"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523459347, "post_id": 49769034, "comment_id": 86572496, "body": "When I stop the lld process from manager ther goes a big trace"}, {"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523540226, "post_id": 49769034, "comment_id": 86610624, "body": "I tried to use gdb for lld process and the output is:"}, {"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523546338, "post_id": 49769034, "comment_id": 86615229, "body": "Got the advice to use -C link-args=--no-threads but when I did     cargo rustc --target=wasm32-unknown-unknown -- -C link-args=--no-threads    the compiling still hangs  and gdb shows exact stack trace with 9 frames and __kernel_vsyscall() waiting"}], "answers": [{"comments": [{"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523949372, "post_id": 49810287, "comment_id": 86759193, "body": "Thank you for help.I checked with gcc -v and it shows   COLLECT_LTO_WRAPPER=/usr/lib/gcc/i686-linux-gnu/6/lto-wrappe&zwnj;&#8203;r Target: i686-linux-gnu"}, {"owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523949566, "post_id": 49810287, "comment_id": 86759314, "body": "So does it mean that by default gcc 6 compiles to 32bit, but really somehow from logs it targets x86-64.  Need advice"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523950010, "post_id": 49810287, "comment_id": 86759551, "body": "It should be that gcc binaries came from a gcc 32 bit download?"}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "edited": false, "score": 0, "creation_date": 1523950931, "post_id": 49810287, "comment_id": 86760081, "body": "Just downloaded gcc-6 from ubuntu 16.04 PPA and a quick test confirm that it create 64-bit executable."}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 1, "last_activity_date": 1523599496, "creation_date": 1523599496, "answer_id": 49810287, "question_id": 49769034, "link": "https://stackoverflow.com/questions/49769034/libwasm-bindgen-a2e136f9a24e6618-rlib-hangs-and-doesnt-consume-cpu-when-compili/49810287#49810287", "title": "libwasm_bindgen-a2e136f9a24e6618.rlib hangs and doesn&#39;t consume CPU when compiling", "body": "<p>A process waits in <code>__kernel_vsyscall()</code> when there is a blocked system call.</p>\n\n<p>I'm not able to say why in this particular case: I've done a quick test on my machine with your recipe and it works.</p>\n\n<p>Looking at the logs it seems that you have a 64 bit target (<code>x86_64-unknown-linux-gnu</code>) but from the comments it seems you use a toolchain for i686 cpu.</p>\n\n<p>Verify that the toolchain is <code>nightly-x86_64-unknown-linux-gnu</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "is_accepted": false, "score": 0, "last_activity_date": 1523971526, "creation_date": 1523971526, "answer_id": 49879373, "question_id": 49769034, "link": "https://stackoverflow.com/questions/49769034/libwasm-bindgen-a2e136f9a24e6618-rlib-hangs-and-doesnt-consume-cpu-when-compili/49879373#49879373", "title": "libwasm_bindgen-a2e136f9a24e6618.rlib hangs and doesn&#39;t consume CPU when compiling", "body": "<p>Recently tried to build this example on x86-64 linux-gnu os and it passed.So the problem has the angle with weak support for 32bit platforms from wasm-bindgen itself.Thanks </p>\n"}], "owner": {"reputation": 51, "user_id": 6735387, "user_type": "registered", "accept_rate": 0, "profile_image": "https://i.stack.imgur.com/AzzRM.jpg?s=128&g=1", "display_name": "Grigoriy", "link": "https://stackoverflow.com/users/6735387/grigoriy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 83, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1524856119, "creation_date": 1523431790, "last_edit_date": 1524856119, "question_id": 49769034, "link": "https://stackoverflow.com/questions/49769034/libwasm-bindgen-a2e136f9a24e6618-rlib-hangs-and-doesnt-consume-cpu-when-compili", "title": "libwasm_bindgen-a2e136f9a24e6618.rlib hangs and doesn&#39;t consume CPU when compiling", "body": "<p>I have started learning wasm-bindgen recently. And even with first example, js-hello-world, there was a weird problem.\n<a href=\"https://github.com/rust-lang-nursery/rust-wasm\" rel=\"nofollow noreferrer\">https://github.com/rust-lang-nursery/rust-wasm</a></p>\n\n<p>I did as was written, set rustc to nightly, then:</p>\n\n<pre><code>rustup target add wasm32-unknown-unknown\ncargo install wasm-bindgen-cli\ncargo new js-hello-world --lib\n</code></pre>\n\n<p>This is Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"js-hello-world\"\nversion = \"0.1.0\"\nauthors = [\"myname@mydomain.com\"]\n\n[dependencies]\nwasm-bindgen = \"0.2.1\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n</code></pre>\n\n<p>And lib.rs:</p>\n\n<pre><code>#![feature(proc_macro, wasm_custom_section, wasm_import_module)]\nextern crate wasm_bindgen;\n\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\nextern {\n    fn alert(s: &amp;str);\n}\n\n#[wasm_bindgen]\npub fn greet(name: &amp;str) {\n    alert(&amp;format!(\"Hello, {}!\", name));\n}\n</code></pre>\n\n<p>Now when I build:</p>\n\n<pre><code>cargo build --target=wasm32-unknown-unknown -vv\n</code></pre>\n\n<p>Compilation actually hangs not consuming even cpu resources:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   Fresh unicode-xid v0.1.0\n   Fresh serde v1.0.37\n   Fresh fnv v1.0.6\n   Fresh num-traits v0.2.2\n   Fresh dtoa v0.4.2\n   Fresh itoa v0.4.1\n   Fresh proc-macro2 v0.3.6\n   Fresh serde_json v1.0.13\n   Fresh quote v0.5.1\n   Fresh syn v0.13.1\n   Fresh serde_derive_internals v0.23.0\n   Fresh serde_derive v1.0.37\n   Fresh wasm-bindgen-shared v0.2.1\n   Fresh wasm-bindgen-backend v0.2.1\n   Fresh wasm-bindgen-macro v0.2.1\n   Fresh wasm-bindgen v0.2.1\n   Compiling js-hello-world v0.1.0 (file:///home/markelovg/container/js-hello-world)\n Running `rustc --crate-name js_hello_world src/lib.rs --crate-type cdylib --emit=dep-info,link -C debuginfo=2 -C metadata=a4ec1c36c55eb3a5 --out-dir /home/markelovg/container/js-hello-world/target/wasm32-unknown-unknown/debug/deps --target wasm32-unknown-unknown -C incremental=/home/markelovg/container/js-hello-world/target/wasm32-unknown-unknown/debug/incremental -L dependency=/home/markelovg/container/js-hello-world/target/wasm32-unknown-unknown/debug/deps -L dependency=/home/markelovg/container/js-hello-world/target/debug/deps --extern wasm_bindgen=/home/markelovg/container/js-hello-world/target/wasm32-unknown-unknown/debug/deps/libwasm_bindgen-a2e136f9a24e6618.rlib`\n</code></pre>\n\n<p>This <code>libwasm_bingden-a2e136f9a24e6618.rlib</code> dependency exists in my project but nothing then happens. How to resolve this issue?</p>\n\n<p>I also tried to use gdb for lld process and this is the output:</p>\n\n<pre><code>    (gdb) bt\n    #0 0xb7753cf9 in __kernel_vsyscall ()\n    #1 0xb7727800 in futex_wait_cancelable (private=, expected=0, futex_word=0xbf817dac) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\n    #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf817d6c, cond=0xbf817d84) at pthread_cond_wait.c:502\n    #3 __pthread_cond_wait (cond=0xbf817d84, mutex=0xbf817d6c) at pthread_cond_wait.c:655\n    #4 0x09dec825 in __gthread_cond_wait (__mutex=, __cond=0xbf817d84)\n    at /tmp/gcc-build/x86_64-unknown-linux-gnu/32/libstdc++-v3/include/x86_64-unknown-linux-gnu/bits/gthr-default.h:864\n    #5 std::condition_variable::wait (this=0xbf817d84, __lock=...) at ../../../../../../gcc-4.8.5/libstdc++-v3/src/c++11/condition_variable.cc:52\n    #6 0x08308ce9 in lld::wasm::writeResult() ()\n    #7 0x082f8580 in (anonymous namespace)::LinkerDriver::link(llvm::ArrayRef&lt;char const*&gt;) [clone .constprop.291] ()\n    #8 0x082f8cbc in lld::wasm::link(llvm::ArrayRef&lt;char const*&gt;, bool, llvm::raw_ostream&amp;) ()\n    #9 0x08093078 in main ()\n</code></pre>\n\n<p>Can somebody clarify to me why it waits in __kernel_vsyscall()  ?</p>\n"}, {"tags": ["syntax", "rust", "operators", "placement-new"], "comments": [{"owner": {"reputation": 836, "user_id": 2971839, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/ae42092534f65bffafcc85cc02e7d35b?s=128&d=identicon&r=PG&f=1", "display_name": "Keozon", "link": "https://stackoverflow.com/users/2971839/keozon"}, "edited": false, "score": 0, "creation_date": 1523395281, "post_id": 49762055, "comment_id": 86541652, "body": "Looks like placement_new was scrapped... so right now it does nothing?"}, {"owner": {"reputation": 917, "user_id": 3014263, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rFh51.jpg?s=128&g=1", "display_name": "AbhiNickz", "link": "https://stackoverflow.com/users/3014263/abhinickz"}, "edited": false, "score": 0, "creation_date": 1523428148, "post_id": 49762055, "comment_id": 86551127, "body": "Using this gives this error: <code>error[E0658]: placement-in expression syntax is experimental and subject to change. (see issue #27779)</code>. Looks like it is going to be used like this if approved: <code>let v = Vec::new(); &#47;&#47; The old syntax in v.back() { 10 }; &#47;&#47; The new syntax.  v.back() &lt;- 10; &#47;&#47; This clearly looks better to me.</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2966, "user_id": 3022310, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/7f10ec2b45320ee843e539d705c31d08?s=128&d=identicon&r=PG", "display_name": "turbulencetoo", "link": "https://stackoverflow.com/users/3022310/turbulencetoo"}, "edited": false, "score": 0, "creation_date": 1523576814, "post_id": 49762055, "comment_id": 86629577, "body": "@turbulencetoo please be careful of where you link. That&#39;s a fork of the official RFCs repo, <b>not the official one itself</b>. <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1228-placement-left-arrow.md\" rel=\"nofollow noreferrer\">The official RFC repo</a> contains updates, such as the fact that this RFC has been unaccepted."}], "answers": [{"comments": [{"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 3, "creation_date": 1523444521, "post_id": 49770760, "comment_id": 86561530, "body": "It&#39;s worth noting that those RFCs were originally accepted (hence why they were semi-implemented on nightly), <a href=\"https://github.com/rust-lang/rust/pull/48333\" rel=\"nofollow noreferrer\">but as of a week ago have been &#39;unaccepted&#39;</a> due to various soundness issues. It&#39;s likely that an entirely new RFC will have to be submitted for this to make a return. <code>box</code> syntax is still around though, as the compiler itself makes pretty heavy use of it."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 14, "last_activity_date": 1523481604, "last_edit_date": 1523481604, "creation_date": 1523437037, "answer_id": 49770760, "question_id": 49762055, "link": "https://stackoverflow.com/questions/49762055/what-is-the-symbol-in-rust/49770760#49770760", "title": "What is the &lt;- symbol in Rust?", "body": "<p>The <code>&lt;-</code> operator is <em>not</em> part of stable Rust. At least not yet.</p>\n\n<p>There is an <a href=\"https://github.com/rust-lang/rfcs/pull/1228\" rel=\"noreferrer\">RFC</a> which proposes syntax involving <code>&lt;-</code> for writing new objects directly to specific places in memory, as an alternative to <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0809-box-and-in-for-stdlib.md#motivation\" rel=\"noreferrer\">another RFC</a>, which proposes <code>in</code>. This is a generalisation of the (currently unstable) <code>box</code> syntax, which lets you allocate directly to the heap, without a temporary stack allocation.</p>\n\n<p>Currently, there isn't a way to do that without using <code>unsafe</code> code, and often you'll need to allocate on the stack first. There's a discussion of the underlying problem in <a href=\"https://github.com/pnkfelix/rfcs/blob/fsk-placement-box-rfc/text/0000-placement-box.md#motivation\" rel=\"noreferrer\">this RFC</a> which is the first of a chain of related RFCs and gives the background motivation, but the key reasons are:</p>\n\n<ul>\n<li>Working with hardware which expects objects to be written to specific memory addresses. You can do this unsafely in Rust now, but it would be nicer if SDKs could provide a safe and performant API for this.</li>\n<li>It is faster to write directly to a pre-allocated portion of the heap, rather than allocate new memory every time.</li>\n<li>When allocating memory for a new object, it would be faster to do that directly on the heap, rather than first allocating on the stack and then cloning or moving.</li>\n</ul>\n\n<p>In C++, there is a feature called \"placement new\", which accomplishes this by letting you supply a parameter to <code>new</code>, which is an existing pointer at which to start writing. For example:</p>\n\n<pre><code>// For comparison, a \"normal new\", allocating on the heap\nstring *foo = new string(\"foo\");\n\n// Allocate a buffer\nchar *buffer = new char[100];\n// Allocate a new string starting at the beginning of the buffer \nstring *bar = new (buffer) string(\"bar\");\n</code></pre>\n\n<p>From what I can gather, the above C++ example might look like something like this in Rust with <code>&lt;-</code>:</p>\n\n<pre><code>// Memory allocated on heap (with temporary stack allocation in the process)\nlet foo = Box::new(*b\"foo\"); \n// Or, without the stack allocation, when box syntax stabilises:\nlet foo = box *b\"foo\";\n\n// Allocate a buffer\nlet mut buffer = box [0u8; 100];\n// Allocate a new bytestring starting at the beginning of the buffer \nlet bar = buffer[0..3] &lt;- b\"bar\";\n</code></pre>\n\n<p>I wouldn't expect this <em>exact</em> code to compile as-is, even if the placement feature was implemented. But notice it is not currently possible in Rust to do what the last line is <em>trying</em> to do: allocate <code>b\"bar\"</code> directly at the start of the buffer, without allocating on the stack first. In Rust right now, there just isn't a way to do that. Even <code>unsafe</code> code doesn't help you here. You'd still have to allocate on the stack first and then clone it to the buffer:</p>\n\n<pre><code>// Note that b\"bar\" is allocated first on the stack before being copied\n// into the buffer\nbuffer[0..3].clone_from_slice(&amp;b\"bar\"[0..3]);\nlet bar = &amp;buffer[0..3];\n</code></pre>\n\n<p>And <code>box</code> syntax wouldn't help here either. That would allocate new heap memory, and you'd still then have to copy the data to the buffer.</p>\n\n<p>For the simpler case of avoiding temporary stack allocation when allocating new objects on the heap, the <code>box</code> syntax will solve that when it stabilises. Rust will need to solve the more complicated cases at some point in the future, but it it is not yet certain that <code>&lt;-</code> is the syntax that will emerge.</p>\n"}], "owner": {"reputation": 841, "user_id": 1780027, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/48fb6924b550df2f89c44647f0a8be19?s=128&d=identicon&r=PG", "display_name": "FredMan", "link": "https://stackoverflow.com/users/1780027/fredman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 932, "favorite_count": 2, "accepted_answer_id": 49770760, "answer_count": 1, "score": 10, "last_activity_date": 1547570505, "creation_date": 1523390619, "last_edit_date": 1547570505, "question_id": 49762055, "link": "https://stackoverflow.com/questions/49762055/what-is-the-symbol-in-rust", "title": "What is the &lt;- symbol in Rust?", "body": "<p>What is the <code>&lt;-</code> operator/expression in Rust? You can find <a href=\"https://doc.rust-lang.org/reference/expressions.html\" rel=\"nofollow noreferrer\">the symbol here</a>.</p>\n\n<p>I happened to be looking at a page describing expressions and operations in Rust. I do not program in Rust, so I asked a friend who is pro-Rust what this symbol is but even he doesn't know what it is.</p>\n"}, {"tags": ["x86", "rust", "simd", "intrinsics"], "comments": [{"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 5, "creation_date": 1523383375, "post_id": 49760123, "comment_id": 86535527, "body": "You can use the same intrinsic in Rust via <code>std::arch</code>: <a href=\"https://doc.rust-lang.org/nightly/core/arch/x86_64/fn._mm_movemask_epi8.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/nightly/core/arch/x86_64/&hellip;</a> --- Note that this is a nightly only API, but is planned to be stabilized soon. If you need to do this on stable Rust, then the easiest path is to probably right your SIMD routine in C."}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523434377, "post_id": 49768861, "comment_id": 86554595, "body": "Why <code>core::arch</code> and not <code>std::arch</code>? Also, why <code>_mm_tzcount_32</code> and not <a href=\"https://doc.rust-lang.org/std/primitive.u32.html#method.trailing_zeros\" rel=\"nofollow noreferrer\"><code>u32::trailing_zeroes</code></a>?"}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523480059, "post_id": 49768861, "comment_id": 86584010, "body": "It looks like _mmtzcount_32 just calls the assembly instruction tzcntl while u32::trailing_zeros does more (but feel free to correct me if I&#39;m wrong): <a href=\"https://play.rust-lang.org/?gist=8008a2a62494c2b8d55fc1c89d3ca401&amp;version=nightly\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523480133, "post_id": 49768861, "comment_id": 86584042, "body": "Updated to use std::arch"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523515212, "post_id": 49768861, "comment_id": 86594112, "body": "<code>trailing_zeros</code> has a check for a 0 argument; I am not sure about the intrinsic behavior with a 0 argument, my experience is with gcc intrinsics in this regard which specify that a 0 argument leads to undefined behavior."}, {"owner": {"reputation": 52741, "user_id": 555045, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/182d0ce855c8324a596648c04643e8f9?s=128&d=identicon&r=PG", "display_name": "nicomp", "link": "https://stackoverflow.com/users/555045/nicomp"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1523743715, "post_id": 49768861, "comment_id": 86688441, "body": "@MatthieuM. <code>_mm_tzcnt_32</code> is (by equivalence with the <code>tzcnt</code> instruction) defined for a zero input. The GCC built-in is probably unspecified for 0 so it can use an instruction(sequence) that breaks for zero, such as the simplest use of <code>bsf</code> (which does not write to its destination when the input is zero)"}], "tags": [], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "is_accepted": false, "score": 1, "last_activity_date": 1523480102, "last_edit_date": 1523480102, "creation_date": 1523431236, "answer_id": 49768861, "question_id": 49760123, "link": "https://stackoverflow.com/questions/49760123/rust-get-index-of-true-bytes-in-simd-vector/49768861#49768861", "title": "Rust get index of true bytes in SIMD vector", "body": "<p><code>std::arch</code> contains an exhaustive set of intrinsic operations. This can be done using <code>core::arch</code> and <code>std::simd</code> as follows:</p>\n\n<pre><code>use std::arch::x86_64::{self, __m128i};\nuse std::simd::{u8x16, FromBits};\n\nunsafe fn get_matching_idx(arr1: &amp;[u8], arr2: &amp;[u8]) -&gt; u32 {\n    let vec1 = __m128i::from_bits(u8x16::load_aligned_unchecked(arr1));\n    let vec2 = __m128i::from_bits(u8x16::load_aligned_unchecked(arr2));\n    return x86_64::_mm_movemask_epi8(x86_64::_mm_cmpeq_epi8(vec1, vec2)) as u32;\n}\n\nfn main() {\n    // let arr1 = ...\n    // let arr2 = ...\n\n    unsafe {\n        let mut mask = get_matching_idx(arr1, arr2);\n    }\n    let mut delta_i = 0;\n    // This assumes a little endian machine (note it counts trailing 0s)\n    while group_mask &gt; 0 {\n        let tz = x86_64::_mm_tzcnt_32(mask);\n        let i = tz + delta_i;\n        // Do something...\n        group_mask &gt;&gt;= tz + 1;\n        delta_i += tz + 1;\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 7937, "user_id": 1413793, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8c593877e04020316731318e597c80e4?s=128&d=identicon&r=PG&f=1", "display_name": "user1413793", "link": "https://stackoverflow.com/users/1413793/user1413793"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 435, "favorite_count": 0, "answer_count": 1, "score": 4, "last_activity_date": 1523480102, "creation_date": 1523382836, "last_edit_date": 1523383590, "question_id": 49760123, "link": "https://stackoverflow.com/questions/49760123/rust-get-index-of-true-bytes-in-simd-vector", "title": "Rust get index of true bytes in SIMD vector", "body": "<p>I want to compare two vectors of 16 bytes and get every matching index. A small example to illustrate what I want:</p>\n\n<pre><code>fn get_matching_idx(arr1: &amp;[u8], arr2: &amp;[u8]) {\n    let vec1 = u8x16::load_aligned(arr1);    \n    let vec2 = u8x16::load_aligned(arr2);\n    let matches = vec1.eq(vec2);\n    for i in 0..16 {\n        if matches.extract_unchecked(i) {\n            // Do something with the index\n        }\n    }\n}\n</code></pre>\n\n<p>Ideally, I'd just want to \"Do something\" for the set indices, rather than checking every single one (there will be a low number of matches).</p>\n\n<p>Is there a way to get the matching indices using intrinsics, rather than iterating through the whole vector? With gcc for example, I could use <a href=\"https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8&amp;expand=3609\" rel=\"nofollow noreferrer\">_mm_movemask_epi8</a> to bit pack the vector and then repeated applications of <code>__builtin_clz</code> to get the index of the first set bit (which is more performant for sparse numbers which I would have). Alternatively, I could have a lookup table which did the right thing for each nibble in my bit-packed integer (e.g. the first answer <a href=\"https://stackoverflow.com/questions/28506500/extract-set-bytes-position-from-simd-vector\">here</a>).</p>\n\n<p>Is there an equivalent of these instructions in rust?</p>\n\n<p>I'm compiling for an Intel x86-64 processor and cross platform support is not a requirement.</p>\n\n<p>NOTE: I'd prefer a solution in native (safe) rust, but this is not a hard requirement. I am fine writing unsafe rust, or even using some sort of FFI to link to the aforementioned methods.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 1, "creation_date": 1523386563, "post_id": 49759470, "comment_id": 86537412, "body": "More of a side note than an actual answer: the implementation of <code>ResultExt</code> can be improved here, since <code>is_err</code> followed by fetching the error and/or result value is not idiomatic. You can also use the <code>write!</code> macro instead of a raw call to <code>write</code>. <a href=\"https://play.rust-lang.org/?gist=988424f06b008737c6490dc2077c9e57&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 2, "creation_date": 1523430031, "post_id": 49759470, "comment_id": 86552091, "body": "Note that you can remove the <code>ResultExt</code> trait and simply do <code>x.unwrap_or_else(|_|panic!(&quot;Ah-ha! An error! {}&quot;, &quot;blahh&quot;));</code> which is not much more verbose than your current solution and is more explicit (it states clearly that this <code>unwrap</code>s the <code>Result</code>, whereas your solution looks more like <code>or_else</code> which returns a <code>Result</code>)."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1523575409, "post_id": 49761127, "comment_id": 86629278, "body": "You should use <a href=\"https://doc.rust-lang.org/std/macro.format_args.html\" rel=\"nofollow noreferrer\"><code>format_args!</code></a> to avoid needless allocation. <a href=\"https://play.rust-lang.org/?gist=ee5143ed496c66472df55a4b021a5c98&amp;version=stable\" rel=\"nofollow noreferrer\">One possible example</a>."}], "tags": [], "owner": {"reputation": 4874, "user_id": 595304, "user_type": "registered", "accept_rate": 95, "profile_image": "https://www.gravatar.com/avatar/e4cc4011841c2a363c66e259c68a567f?s=128&d=identicon&r=PG", "display_name": "evotopid", "link": "https://stackoverflow.com/users/595304/evotopid"}, "is_accepted": false, "score": 3, "last_activity_date": 1523615643, "last_edit_date": 1523615643, "creation_date": 1523386823, "answer_id": 49761127, "question_id": 49759470, "link": "https://stackoverflow.com/questions/49759470/how-to-mimic-varargs-for-utility-functions/49761127#49761127", "title": "How to mimic varargs for utility functions?", "body": "<p>I don't think the API you suggested is particularly unergonomic. If maximum performance matters, it might make sense to put the error generation in a closure or provide an API for that too, so the <code>String</code> is only allocated when there is actually an error, which might be especially relevant when something is particularly expensive to format. (Like all the <code>_else</code> methods for <a href=\"https://doc.rust-lang.org/std/result/enum.Result.html?search=#method.unwrap_or_else\" rel=\"nofollow noreferrer\"><code>std::result::Result</code></a>.)</p>\n\n<p>However, you might be able to make it more ergonomic by defining a macro which takes a result, a <code>&amp;str</code> and format parameters. This could look like this for example: (This is based on @E_net4's comment)</p>\n\n<pre><code>macro_rules! or_exit {\n    ($res:expr, $fmt:expr, $($arg:tt)+) =&gt; {\n        $res.unwrap_or_else(|e| {\n            let message = format!($fmt, $($arg)+);\n            eprintln!(\"FATAL: {} ({})\\n\", message, e);\n            process::exit(1)\n        })\n    };\n}\n\nfn main() {\n    let x: Result&lt;i32, &amp;'static str&gt; = Err(\"dumb user, please replace\");\n    let _ = or_exit!(x, \"Ah-ha! An error! {}\", \"blahh\");\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0fc3c4c9846024d1b9776432b37d8d5d&amp;version=stable\" rel=\"nofollow noreferrer\">Rust Playground</a></p>\n\n<p>Note this might not yield the best error messages if users supply invalid arguments, I did not want to change your code too much, but if you decide to actually have the macro only be sugar and nothing else you should probably extend your API to take a closure instead of a string. You might want also to reconsider the naming of the macro.</p>\n"}], "owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 231, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1523615643, "creation_date": 1523380503, "last_edit_date": 1523575474, "question_id": 49759470, "link": "https://stackoverflow.com/questions/49759470/how-to-mimic-varargs-for-utility-functions", "title": "How to mimic varargs for utility functions?", "body": "<p><code>Result.expect()</code>'s console output wasn't what I needed, so I extended <code>Result</code> with my own version:</p>\n\n<pre><code>trait ResultExt&lt;T&gt; {\n    fn or_exit(self, message: &amp;str) -&gt; T;\n}\n\nimpl&lt;T&gt; ResultExt&lt;T&gt; for ::std::result::Result&lt;T, Error&gt; {\n    fn or_exit(self, message: &amp;str) -&gt; T {\n        if self.is_err() {\n            io::stderr().write(format!(\"FATAL: {} ({})\\n\", message, self.err().unwrap()).as_bytes()).unwrap();\n            process::exit(1);\n        }\n        return self.unwrap();\n    }\n}\n</code></pre>\n\n<p>As I understand, Rust doesn't support varargs yet, so I have to use it like that, correct?</p>\n\n<pre><code>something().or_exit(&amp;format!(\"Ah-ha! An error! {}\", \"blah\"));\n</code></pre>\n\n<p>That's too verbose compared to either Java, Kotlin or C. What is the preferred way to solve this?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 52334, "user_id": 702638, "user_type": "registered", "accept_rate": 98, "profile_image": "https://www.gravatar.com/avatar/892f65bc0a8a0949ab88598de7d83cab?s=128&d=identicon&r=PG", "display_name": "Hunter McMillen", "link": "https://stackoverflow.com/users/702638/hunter-mcmillen"}, "edited": false, "score": 6, "creation_date": 1523379150, "post_id": 49759054, "comment_id": 86533064, "body": "<code>it</code> is still a variable, same with <code>$_</code> in Perl"}, {"owner": {"reputation": 5308, "user_id": 4038191, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/10ec10e81b5315fe2147c38bf3e15e9e?s=128&d=identicon&r=PG", "display_name": "EvilTak", "link": "https://stackoverflow.com/users/4038191/eviltak"}, "edited": false, "score": 0, "creation_date": 1523380582, "post_id": 49759054, "comment_id": 86533939, "body": "If you want to reuse the binding (variable) name, you can wrap the temporary usage in a block."}], "answers": [{"tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 0, "last_activity_date": 1523385415, "creation_date": 1523385415, "answer_id": 49760765, "question_id": 49759054, "link": "https://stackoverflow.com/questions/49759054/re-using-values-without-declaring-variables/49760765#49760765", "title": "Re-using values without declaring variables", "body": "<p>This is similar</p>\n\n<pre><code>{\n    let text_address = \"127.0.0.1:135\";\n    TcpListener::bind(text_address).expect(format!(\"Failed to connect to {}\", text_address));\n}\n// now text_address is out of scope\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "is_accepted": true, "score": 4, "last_activity_date": 1523388534, "creation_date": 1523388534, "answer_id": 49761531, "question_id": 49759054, "link": "https://stackoverflow.com/questions/49759054/re-using-values-without-declaring-variables/49761531#49761531", "title": "Re-using values without declaring variables", "body": "<p>According to <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/let.html\" rel=\"nofollow noreferrer\">this reference</a>, <code>T.let</code> in Kotlin is a generic method-like function which runs a closure <code>(T) -&gt; R</code> with the given value <code>T</code> passed as the first argument. From this perspective, it resembles a mapping operation from <code>T</code> to <code>R</code>. Under Kotlin's syntax though, it looks like a means of making a scoped variable with additional emphasis.</p>\n\n<p>We could do the exact same thing in Rust, but it doesn't bring anything new to the table, nor makes the code cleaner (using <code>_let</code> because <code>let</code> is a keyword in Rust):</p>\n\n<pre><code>trait LetMap {\n    fn _let&lt;F, R&gt;(self, mut f: F) -&gt; R\n    where\n        Self: Sized,\n        F: FnMut(Self) -&gt; R,\n    {\n        f(self)\n    }\n}\nimpl&lt;T&gt; LetMap for T {}\n\n// then...\n\n\"something\"._let(|it| {\n    println!(\"it = {}\", it);\n    \"good\"\n});\n</code></pre>\n\n<p>When dealing with a single value, it is actually more idiomatic to just declare a variable. If you need to constrain the variable (and/or the value's lifetime) to a particular scope, just place it in a block:</p>\n\n<pre><code>let conn = {\n    let text_address = \"127.0.0.1:135\";\n    TcpListener::bind(text_address)?\n};\n</code></pre>\n\n<p>There is also one more situation worth mentioning: Kotlin has an idiom for nullable values where <code>x?.let</code> is used to conditionally perform something when the value isn't null.</p>\n\n<pre><code>val value = ...\n\nvalue?.let {\n    ... // execute this block if not null\n}\n</code></pre>\n\n<p>In Rust, an <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"nofollow noreferrer\"><code>Option</code></a> already provides a similar feature, either through pattern matching or the many available methods with conditional execution: <code>map</code>, <code>map_or_else</code>, <code>unwrap_or_else</code>, <code>and_then</code>, and more.</p>\n\n<pre><code>let value: Option&lt;_&gt; = get_opt();\n\n// 1: pattern matching\nif let Some(non_null_value) = value {\n    // ...\n}\n\n// 2: functional methods\nlet new_opt_value: Option&lt;_&gt; = value.map(|non_null_value| {\n    \"a new value\"\n}).and_then(some_function_returning_opt);\n</code></pre>\n"}], "owner": {"reputation": 15580, "user_id": 318558, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/8f961340d115c2b75968f226f1d2dc24?s=128&d=identicon&r=PG", "display_name": "Yuri Geinish", "link": "https://stackoverflow.com/users/318558/yuri-geinish"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 86, "favorite_count": 0, "accepted_answer_id": 49761531, "answer_count": 2, "score": 0, "last_activity_date": 1523388534, "creation_date": 1523379076, "question_id": 49759054, "link": "https://stackoverflow.com/questions/49759054/re-using-values-without-declaring-variables", "title": "Re-using values without declaring variables", "body": "<p>In Kotlin, I can re-use values so:</p>\n\n<pre><code>\"127.0.0.1:135\".let {\n    connect(it) ?: System.err.println(\"Failed to connect to $it\")\n}\n</code></pre>\n\n<p>Is anything similar possible in Rust? To avoid using a temporary variable like this:</p>\n\n<pre><code>let text_address = \"127.0.0.1:135\";\nTcpListener::bind(text_address).expect(format!(\"Failed to connect to {}\", text_address));\n</code></pre>\n"}, {"tags": ["c++", "winapi", "rust", "bit-fields", "bitflags"], "comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 9, "creation_date": 1523374869, "post_id": 49757417, "comment_id": 86530503, "body": "Just a small note: <code>winapi</code> is <i>not</i> generated automatically.  It&#39;s transcribed by hand. Every attempt made to bind win32 to Rust automatically has ended in failure, the headers standing triumphant over the bloodied corpses of the conversion programs, their authors broken in mind and spirit.  There&#39;s a reason the head of the <code>winapi</code> project is a rabbit."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1523375073, "post_id": 49757417, "comment_id": 86530645, "body": "To be slightly more on-topic: I wouldn&#39;t bother trying to do this via unions and bitflags.  I don&#39;t think the <code>bitflags</code> crate was designed for this level of contortion.  I&#39;d just write getters/setters on a <code>#[repr(C)] struct MessageBoxFlags(u8);</code>."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 3, "creation_date": 1523375247, "post_id": 49757417, "comment_id": 86530748, "body": "Did you see the crate <a href=\"https://docs.rs/bitfield/0.12.1/bitfield/\" rel=\"nofollow noreferrer\">bitfield</a>?"}], "answers": [{"tags": [], "owner": {"reputation": 207, "user_id": 1485708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80993d784d810d391c31f18901577c07?s=128&d=identicon&r=PG", "display_name": "Maurice Kayser", "link": "https://stackoverflow.com/users/1485708/maurice-kayser"}, "is_accepted": true, "score": 5, "last_activity_date": 1607904368, "last_edit_date": 1607904368, "creation_date": 1524765285, "answer_id": 50049252, "question_id": 49757417, "link": "https://stackoverflow.com/questions/49757417/rust-bitfields-and-enumerations-c-style/50049252#50049252", "title": "Rust bitfields and enumerations C++ style", "body": "<p>The <a href=\"https://docs.rs/bitfield/0.12.1/bitfield/\" rel=\"nofollow noreferrer\">bitfield</a> crate @Boiethios mentioned is kind of what I wanted. I created my own first macro crate <a href=\"https://github.com/MauriceKayser/rs-bitfield\" rel=\"nofollow noreferrer\">bitfield</a> which allows me to write the following:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>#[bitfield::bitfield(32)]\nstruct Styles {\n    #[field(size = 4)] button: Button,\n    #[field(size = 4)] icon: Icon,\n    #[field(size = 4)] default_button: DefaultButton,\n    #[field(size = 2)] modality: Modality,\n    style: Style\n}\n\n#[derive(Copy, Clone, bitfield::Flags)]\n#[repr(u8)]\nenum Style {\n    Help = 14,\n    Foreground = 16,\n    DefaultDesktopOnly,\n    TopMost,\n    Right,\n    RightToLeftReading,\n    ServiceNotification\n}\n\n#[derive(Clone, Copy, bitfield::Field)]\n#[repr(u8)]\nenum Button {\n    Ok,\n    OkCancel,\n    AbortRetryIgnore,\n    YesNoCancel,\n    YesNo,\n    RetryCancel,\n    CancelTryContinue\n}\n\n#[derive(Clone, Copy, bitfield::Field)]\n#[repr(u8)]\nenum DefaultButton {\n    One,\n    Two,\n    Three,\n    Four\n}\n\n#[derive(Clone, Copy, bitfield::Field)]\n#[repr(u8)]\nenum Icon {\n    None,\n    Stop,\n    Question,\n    Exclamation,\n    Information\n}\n\n#[derive(Clone, Copy, bitfield::Field)]\n#[repr(u8)]\nenum Modality {\n    Application,\n    System,\n    Task\n}\n</code></pre>\n<p>I can then use the code like this:</p>\n<pre class=\"lang-rust prettyprint-override\"><code>let styles = Styles::new()\n    .set_button(Button::CancelTryContinue)\n    .set_icon(Icon::Exclamation)\n    .set_style(Style::Foreground, true)\n    .set_style(Style::TopMost, true);\n\nlet result = user32::MessageBoxW(/* ... */, styles);\n</code></pre>\n"}], "owner": {"reputation": 207, "user_id": 1485708, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/80993d784d810d391c31f18901577c07?s=128&d=identicon&r=PG", "display_name": "Maurice Kayser", "link": "https://stackoverflow.com/users/1485708/maurice-kayser"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1291, "favorite_count": 0, "accepted_answer_id": 50049252, "answer_count": 1, "score": 6, "last_activity_date": 1607904368, "creation_date": 1523373745, "last_edit_date": 1600151911, "question_id": 49757417, "link": "https://stackoverflow.com/questions/49757417/rust-bitfields-and-enumerations-c-style", "title": "Rust bitfields and enumerations C++ style", "body": "<p>I'm a Rust beginner which comes from C/C++. To start off I tried to create a simple &quot;Hello-World&quot; like program for Microsoft Windows using <a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms645505.aspx\" rel=\"nofollow noreferrer\">user32.MessageBox</a> where I stumbled upon a problem related to bitfields. <em>Disclaimer: All code snippets were written in the SO editor and might contain errors.</em></p>\n<h1>MessageBox &quot;Hello-World&quot; in C</h1>\n<p>The consolidated C declarations needed to call the UTF-16LE version of the function are:</p>\n<pre class=\"lang-c prettyprint-override\"><code>enum MessageBoxResult {\n    IDFAILED,\n    IDOK,\n    IDCANCEL,\n    IDABORT,\n    IDRETRY,\n    IDIGNORE,\n    IDYES,\n    IDNO,\n    IDTRYAGAIN = 10,\n    IDCONTINUE\n};\n\nenum MessageBoxType {\n    // Normal enumeration values.\n    MB_OK,\n    MB_OKCANCEL,\n    MB_ABORTRETRYIGNORE,\n    MB_YESNOCANCEL,\n    MB_YESNO,\n    MB_RETRYCANCEL,\n    MB_CANCELTRYCONTINUE,\n\n    MB_ICONERROR            = 0x10UL,\n    MB_ICONQUESTION         = 0x20UL,\n    MB_ICONEXCLAMATION      = 0x30UL,\n    MB_ICONINFORMATION      = 0x40UL,\n\n    MB_DEFBUTTON1           = 0x000UL,\n    MB_DEFBUTTON2           = 0x100UL,\n    MB_DEFBUTTON3           = 0x200UL,\n    MB_DEFBUTTON4           = 0x300UL,\n\n    MB_APPLMODAL            = 0x0000UL,\n    MB_SYSTEMMODAL          = 0x1000UL,\n    MB_TASKMODAL            = 0x2000UL,\n\n    // Flag values.\n    MB_HELP                 = 1UL &lt;&lt; 14,\n\n    MB_SETFOREGROUND        = 1UL &lt;&lt; 16,\n    MB_DEFAULT_DESKTOP_ONLY = 1UL &lt;&lt; 17,\n    MB_TOPMOST              = 1UL &lt;&lt; 18,\n    MB_RIGHT                = 1UL &lt;&lt; 19,\n    MB_RTLREADING           = 1UL &lt;&lt; 20,\n    MB_SERVICE_NOTIFICATION = 1UL &lt;&lt; 21\n};\n\nMessageBoxResult __stdcall MessageBoxW(\n    HWND            hWnd,\n    const wchar_t * lpText,\n    const wchar_t * lpCaption,\n    MessageBoxType  uType\n);\n</code></pre>\n<p>Usage:</p>\n<pre><code>MessageBoxType mbType = MB_YESNO | MB_ICONEXCLAMATION | MB_DEFBUTTON3 | MB_TOPMOST;\nif ((mbType &amp; 0x0F /* All bits for buttons */ == MB_YESNO) &amp;&amp; (mbType &amp; 0xF0 /* All bits for icons */ == MB_ICONEXCLAMATION) &amp;&amp; (mbType &amp; 0xF00 /* All bits for default buttons */ == MB_DEFBUTTON3) &amp;&amp; (mbType &amp; MB_TOPMOST != 0)) {\n    MessageBoxW(NULL, L&quot;Text&quot;, L&quot;Title&quot;, mbType);\n}\n</code></pre>\n<p>The <code>MessageBoxType</code> enumeration contains enumeration values and flag values. The problem with that is that <code>MB_DEFBUTTON2</code> and <code>MB_DEFBUTTON3</code> can be used together and &quot;unexpectedly&quot; result in <code>MB_DEFBUTTON4</code>. Also the access is quite error prone and ugly, I have to <code>|</code>, <code>&amp;</code> and shift everything manually when checking for flags in the value.</p>\n<h1>MessageBox &quot;Hello-World&quot; in C++</h1>\n<p>In C++ the same enumeration can be cleverly put into a structure, which has the same size as the enumeration and makes the access way easier, safer and prettier. It makes use of bitfields - <a href=\"https://stackoverflow.com/questions/6043483/why-bit-endianness-is-an-issue-in-bitfields\">the layout of bitfields not defined by the C standard</a>, but since I only want to use it for x86-Windows it is always the same, so I can rely on it.</p>\n<pre class=\"lang-cpp prettyprint-override\"><code>enum class MessageBoxResult : std::uint32_t {\n    Failed,\n    Ok,\n    Cancel,\n    Abort,\n    Retry,\n    Ignore,\n    Yes,\n    No,\n    TryAgain = 10,\n    Continue\n};\n\nenum class MessageBoxButton : std::uint32_t {\n    Ok,\n    OkCancel,\n    AbortRetryIgnore,\n    YesNoCancel,\n    YesNo,\n    RetryCancel,\n    CancelTryContinue\n};\n\nenum class MessageBoxDefaultButton : std::uint32_t {\n    One,\n    Two,\n    Three,\n    Four\n};\n\n// Union so one can access all flags as a value and all boolean values separately.\nunion MessageBoxFlags {\n    enum class Flags : std::uint32_t {\n        None,\n        Help                = 1UL &lt;&lt; 0,\n        SetForeground       = 1UL &lt;&lt; 2,\n        DefaultDesktopOnly  = 1UL &lt;&lt; 3,\n        TopMost             = 1UL &lt;&lt; 4,\n        Right               = 1UL &lt;&lt; 5,\n        RtlReading          = 1UL &lt;&lt; 6,\n        ServiceNotification = 1UL &lt;&lt; 7\n    };\n\n    // Flags::operator|, Flags::operator&amp;, etc. omitted here.\n\n    Flags flags;\n    struct {\n        bool help                   : 1;\n        char _padding0              : 1;\n        bool setForeground          : 1;\n        bool defaultDesktopOnly     : 1;\n        bool topMost                : 1;\n        bool right                  : 1;\n        bool rtlReading             : 1;\n        bool serviceNotification    : 1;\n        char _padding1              : 8;\n        char _padding2              : 8;\n        char _padding3              : 8;\n    };\n\n    constexpr MessageBoxFlags(const Flags flags = Flags::None)\n        : flags(flags) {}\n};\n\nenum class MessageBoxIcon : std::uint32_t {\n    None,\n    Stop,\n    Question,\n    Exclamation,\n    Information\n};\n\nenum class MessageBoxModality : std::uint32_t {\n    Application,\n    System,\n    Task\n};\n\nunion MessageBoxType {\n    std::uint32_t value;\n    struct {                                          // Used bits                                   Minimum (Base 2)                          Maximum (Base 2)                          Min (Base 16) Max (Base 16)\n        MessageBoxButton button                 :  4; // 0000.0000.0000.0000|0000.0000.0000.XXXX     0000.0000.0000.0000|0000.0000.0000.0000 - 0000.0000.0000.0000|0000.0000.0000.0110 : 0x0000.0000 - 0x0000.0006\n        MessageBoxIcon icon                     :  4; // 0000.0000.0000.0000|0000.0000.XXXX.0000     0000.0000.0000.0000|0000.0000.0001.0000 - 0000.0000.0000.0000|0000.0000.0100.0000 : 0x0000.0010 - 0x0000.0040\n        MessageBoxDefaultButton defaultButton   :  4; // 0000.0000.0000.0000|0000.XXXX.0000.0000     0000.0000.0000.0000|0000.0001.0000.0000 - 0000.0000.0000.0000|0000.0011.0000.0000 : 0x0000.0100 - 0x0000.0300\n        MessageBoxModality modality             :  2; // 0000.0000.0000.0000|00XX.0000.0000.0000     0000.0000.0000.0000|0001.0000.0000.0000 - 0000.0000.0000.0000|0010.0000.0000.0000 : 0x0000.1000 - 0x0000.2000\n        MessageBoxFlags::Flags flags            :  8; // 0000.0000.00XX.XXXX|XX00.0000.0000.0000     0000.0000.0000.0000|0100.0000.0000.0000 - 0000.0000.0010.0000|0000.0000.0000.0000 : 0x0000.4000 - 0x0020.0000\n        std::uint32_t _padding0                 : 10; // XXXX.XXXX.XX00.0000|0000.0000.0000.0000     \n    };\n\n    MessageBoxType(\n        const MessageBoxButton button,\n        const MessageBoxIcon icon = MessageBoxIcon::None,\n        const MessageBoxDefaultButton defaultButton = MessageBoxDefaultButton::One,\n        const MessageBoxModality modality = MessageBoxModality::Application,\n        const MessageBoxFlags::Flags flags = MessageBoxFlags::Flags::None\n    ) : button(button), icon(icon), defaultButton(defaultButton), modality(modality), flags(flags), _padding0(0) {}\n\n    MessageBoxType() : value(0) {}\n};\n\nMessageBoxResult __stdcall MessageBoxW(\n    HWND            parentWindow,\n    const wchar_t * text,\n    const wchar_t * caption,\n    MessageBoxType  type\n);\n</code></pre>\n<p>Usage:</p>\n<pre><code>auto mbType = MessageBoxType(MessageBoxButton::YesNo, MessageBoxIcon::Exclamation, MessageBoxDefaultButton::Three, MessageBoxModality::Application, MessageBoxFlags::Flags::TopMost);\nif (mbType.button == MessageBoxButton::YesNo &amp;&amp; mbType.icon == MessageBoxIcon::Exclamation &amp;&amp; mbType.defaultButton == MessageBoxDefaultButton::Three &amp;&amp; mbType.flags.topMost) {\n    MessageBoxW(nullptr, L&quot;Text&quot;, L&quot;Title&quot;, mbType);\n}\n</code></pre>\n<p>With this C++ version I can access flags as boolean values and have enumeration classes for the other types, all while it still being a simple <code>std::uint32_t</code> in memory. Now I struggled to implement this in Rust.</p>\n<h1>MessageBox &quot;Hello-World&quot; in Rust</h1>\n<pre class=\"lang-rust prettyprint-override\"><code>#[repr(u32)]\nenum MessageBoxResult {\n    Failed,\n    Ok,\n    Cancel,\n    Abort,\n    Retry,\n    Ignore,\n    Yes,\n    No,\n    TryAgain = 10,\n    Continue\n}\n\n#[repr(u32)]\nenum MessageBoxButton {\n    Ok,\n    OkCancel,\n    AbortRetryIgnore,\n    YesNoCancel,\n    YesNo,\n    RetryCancel,\n    CancelTryContinue\n}\n\n#[repr(u32)]\nenum MessageBoxDefaultButton {\n    One,\n    Two,\n    Three,\n    Four\n}\n\n#[repr(u32)]\nenum MessageBoxIcon {\n    None,\n    Stop,\n    Question,\n    Exclamation,\n    Information\n}\n\n#[repr(u32)]\nenum MessageBoxModality {\n    Application,\n    System,\n    Task\n}\n\n// MessageBoxFlags and MessageBoxType ?\n</code></pre>\n<p>I know about the <a href=\"https://crates.io/crates/winapi\" rel=\"nofollow noreferrer\">WinApi crate</a> which to my understanding is generated automatically from VC++-header files which doesn't help, because I will have the same problems as in C. I also saw the <a href=\"https://doc.rust-lang.org/bitflags/bitflags/macro.bitflags.html\" rel=\"nofollow noreferrer\">bitflags macro</a> but it seems to me it doesn't handle this kind of &quot;complexity&quot;.</p>\n<p>How would I implement <code>MessageBoxFlags</code> and <code>MessageBoxType</code> in Rust, so I can access it in a nice (not necessarily the same) way as in my C++ implementation?</p>\n"}, {"tags": ["rust", "sdl-2"], "comments": [{"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 2, "creation_date": 1523347325, "post_id": 49747073, "comment_id": 86511192, "body": "Questions seeking debugging help (&quot;<b>why isn&#39;t this code working?</b>&quot;) must include the desired behavior, a specific problem or error and the shortest code  necessary to reproduce it <b>in the question itself</b>. Questions without a <b>clear problem statement</b> are not useful to other readers. See: <a href=\"https://stackoverflow.com/help/mcve\">How to create a Minimal, Complete, and Verifiable example</a>."}, {"owner": {"reputation": 714, "user_id": 653157, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62a73f3cd5a324fb02065a00c1b9e3f2?s=128&d=identicon&r=PG", "display_name": "osamu", "link": "https://stackoverflow.com/users/653157/osamu"}, "reply_to_user": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1523395019, "post_id": 49747073, "comment_id": 86541523, "body": "Tim, I updated the code. Now it includes a shortest code example."}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 0, "creation_date": 1523398950, "post_id": 49747073, "comment_id": 86543013, "body": "Can you please add the error output?"}], "answers": [{"tags": [], "owner": {"reputation": 714, "user_id": 653157, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62a73f3cd5a324fb02065a00c1b9e3f2?s=128&d=identicon&r=PG", "display_name": "osamu", "link": "https://stackoverflow.com/users/653157/osamu"}, "is_accepted": false, "score": 0, "last_activity_date": 1523409365, "creation_date": 1523409365, "answer_id": 49764977, "question_id": 49747073, "link": "https://stackoverflow.com/questions/49747073/how-to-solve-this-rust-lifetime-bound-issue-of-sdl2/49764977#49764977", "title": "How to solve this rust lifetime bound issue of SDL2?", "body": "<p>Alright, I am able to fix this issue by moving context creation to the outer scope. It cannot be put on a struct.</p>\n\n<pre><code>fn start(ttf_context: &amp;Sdl2TtfContext) {\n    let font = ttf_context.load_font(\"./assets/Supermercado-Regular.ttf\", 50).unwrap();\n    let glyph_renderer = GlyphRenderer { font };\n\n    let app = App {\n        glyph_renderer,\n    };\n\n    app.render();\n}\n\nfn main() {\n    let ttf_context = ttf::init().unwrap();\n    start(&amp;ttf_context);\n}\n</code></pre>\n"}], "owner": {"reputation": 714, "user_id": 653157, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/62a73f3cd5a324fb02065a00c1b9e3f2?s=128&d=identicon&r=PG", "display_name": "osamu", "link": "https://stackoverflow.com/users/653157/osamu"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 253, "favorite_count": 0, "closed_date": 1523575645, "answer_count": 1, "score": -3, "last_activity_date": 1523409365, "creation_date": 1523342612, "last_edit_date": 1523395092, "question_id": 49747073, "link": "https://stackoverflow.com/questions/49747073/how-to-solve-this-rust-lifetime-bound-issue-of-sdl2", "closed_reason": "Duplicate", "title": "How to solve this rust lifetime bound issue of SDL2?", "body": "<p>I'm trying to render some font using sdl2 ttf. The type of Font type in sdl2 has a lifetime dependency on the context using PhantomData. I find it very difficult to use. Here's the the minimal code I'm trying to use.</p>\n\n<p>main.rs</p>\n\n<pre><code>extern crate sdl2;\n\nuse sdl2::ttf::{self, Font};\nuse sdl2::ttf::Sdl2TtfContext;\n\nstruct App&lt;'ttf&gt; {\n    ctx: Sdl2TtfContext,\n    glyph_renderer: GlyphRenderer&lt;'ttf&gt;,\n}\n\nimpl&lt;'ttf&gt; App&lt;'ttf&gt; {\n    fn render(&amp;self) {}\n}\n\nstruct GlyphRenderer&lt;'ttf&gt; {\n    font: Font&lt;'ttf, 'static&gt;,\n}\n\nfn main() {\n    let ttf_context = ttf::init().unwrap();\n\n    let font = ttf_context.load_font(\"./assets/Supermercado-Regular.ttf\", 50).unwrap();\n    let glyph_renderer = GlyphRenderer { font };\n\n    let app = App {\n        ctx: ttf_context,\n        glyph_renderer,\n    };\n\n    app.render();\n}\n</code></pre>\n\n<p>Cargo.toml</p>\n\n<pre><code>[package]\nname = \"demo-rust\"\nversion = \"0.1.0\"\nauthors = [\"clojure\"]\n\n[dependencies.sdl2]\nversion = \"0.31.0\"\ndefault-features = false\nfeatures = [\"ttf\"]\n</code></pre>\n\n<ol>\n<li>ttf_context is moved. I can solve this one, but by changing code in a ugly way.</li>\n<li>Font has lifetime bound on context. Cannot fix this one.</li>\n</ol>\n\n<p>This documentation contains the declaration of <code>Sdl2TtfContext</code> and <code>Font</code>, should you find it useful. <a href=\"https://rust-sdl2.github.io/rust-sdl2/sdl2/\" rel=\"nofollow noreferrer\">DOC</a></p>\n"}, {"tags": ["pointers", "types", "rust", "dereference", "lifetime"], "answers": [{"tags": [], "owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "is_accepted": false, "score": 0, "last_activity_date": 1523339969, "last_edit_date": 1523339969, "creation_date": 1523339616, "answer_id": 49746258, "question_id": 49745183, "link": "https://stackoverflow.com/questions/49745183/cannot-move-out-of-borrowed-content-when-filtering-a-vecstring/49746258#49746258", "title": "Cannot move out of borrowed content when filtering a Vec&lt;String&gt;", "body": "<p><strong>Short version:</strong> Remove the dereference and <code>push(line.clone())</code> instead.</p>\n\n<hr>\n\n<h2>The why</h2>\n\n<p>Take the following code:</p>\n\n<pre><code>fn main() {\n    let mut foo = vec![1, 2, 3, 4, 5];\n\n    for num in foo {\n        println!(\"{}\", num);\n    }\n\n    foo.push(6);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=e817f228bc233a4378ebd0185273b894&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>When running this code, the following error is raised:</p>\n\n<pre><code>error[E0382]: use of moved value: `foo`\n --&gt; src/main.rs:8:5\n  |\n4 |     for num in foo {\n  |                --- value moved here\n...\n8 |     foo.push(6);\n  |     ^^^ value used here after move\n  |\n  = note: move occurs because `foo` has type `std::vec::Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n</code></pre>\n\n<p>This error rises because Rust <code>for</code> loops <em>take ownership</em> of the iterator in question, specifically via the <a href=\"https://doc.rust-lang.org/1.6.0/std/iter/trait.IntoIterator.html\" rel=\"nofollow noreferrer\"><code>IntoIterator</code></a> trait. The for loop in the above code can be equivalently written as <code>for num in foo.into_iter()</code>.</p>\n\n<p>Note the <a href=\"https://doc.rust-lang.org/1.6.0/std/iter/trait.IntoIterator.html#tymethod.into_iter\" rel=\"nofollow noreferrer\">signature of <code>into_iter()</code></a>. It takes <code>self</code> rather than <code>&amp;self</code>; in other words, <em>ownership</em> of the value is moved into the function, which creates an iterator for use in the <code>for</code> loop, and the generated iterator is dropped at the end of the loop. Hence why the above code fails: We are attempting to use a variable which was \"handed over\" to something else. In other languages, the typical term used is that the value used for the loop is <em>consumed</em>.</p>\n\n<p>Acknowledging this behavior gets us to the root of your problem, namely the \"move\" in <code>cannot move out of borrowed content</code>. When you have a reference, like <code>lines</code> (a reference to a <code>Vec</code>), you have only that - a <em>borrow</em>. You do not have <em>ownership</em> of the object, and therefore you cannot <em>give</em> ownership of that object to something else, which could cause memory errors that Rust is designed to prevent. Dereferencing <code>lines</code> effectively says \"I want to give <em>the original vector</em> to this loop\", which you can't do, since the original vector belongs to someone else.</p>\n\n<p>Loosely speaking - and I may be wrong on this front, someone please correct me if I am - but dereferencing in Rust is, in most cases, only useful for modifying the object in the left-hand side of an assignment, since basically any use of a dereference in the right-hand side of an expression will try to move the item. For example:</p>\n\n<pre><code>fn main() {\n    let mut foo = vec![1, 2, 3, 4, 5];\n    println!(\"{:?}\", foo);\n\n    {\n        let num_ref: &amp;mut i32 = &amp;mut foo[2]; // Take a reference to an item in the vec\n        *num_ref = 12; // Modify the item pointed to by num_ref\n    }\n\n    println!(\"{:?}\", foo);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=630903ca5667bb81f994c6955f6b7224&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>The above code will print:</p>\n\n<pre><code>[1, 2, 3, 4, 5]\n[1, 2, 12, 4, 5]\n</code></pre>\n\n<hr>\n\n<h2>The how</h2>\n\n<p>So the unfortunate truth is that there is no way to use the dereference in this case. But you're in luck - there's an easy way to solve your issue of type mismatch. The handy trait, <a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"nofollow noreferrer\"><code>Clone</code></a>, defines a function called <code>clone()</code> that is expected to create an entirely new instance of the type, with the same values. Most basic types in Rust implement <code>Clone</code>, including <code>String</code>. So with a single function call, your type mismatch woes go away:</p>\n\n<pre><code>fn select_lines(pattern: &amp;String, lines: &amp;Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    let mut selected_lines: Vec&lt;String&gt; = Vec::new();\n\n    for line in lines {\n        if line.contains(pattern) {\n            // 'line.clone()' will create a new String for\n            // each line that contains the pattern, and\n            // place it into the vector.\n            selected_lines.push(line.clone());\n        }\n    }\n\n    selected_lines\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=8f84e9e1ff09dc58b4170bc466816523&amp;version=stable\" rel=\"nofollow noreferrer\">Playground, with an example</a></p>\n\n<p><code>clone()</code> is your friend, and you should get familiar with it, but be aware that it does require additional memory (up to double, if all the lines match), and that the lines placed into <code>selected_lines</code> cannot be easily linked back to their counterparts in <code>lines</code>. You shouldn't worry about the memory issue until you move out of experimentation and into production with very large datasets, but if the latter problem poses an issue, I'd like to point you to this alternative solution, which does edit the function signature in order to return <em>references</em> to the matching lines instead:</p>\n\n<pre><code>fn select_lines&lt;'a&gt;(pattern: &amp;String, lines: &amp;'a Vec&lt;String&gt;) -&gt; Vec&lt;&amp;'a String&gt; {\n    let mut selected_lines: Vec&lt;&amp;'a String&gt; = Vec::new();\n\n    for line in lines {\n        if line.contains(pattern) {\n            selected_lines.push(&amp;line);\n        }\n    }\n\n    selected_lines\n}\n</code></pre>\n\n<p>This example includes <a href=\"https://doc.rust-lang.org/1.9.0/book/lifetimes.html\" rel=\"nofollow noreferrer\">Lifetimes</a>, which is something you likely won't need to learn for a while, but you're free to examine this example as you wish!</p>\n\n<p><a href=\"https://play.rust-lang.org/?gist=32d52504823eff2ae9bdb7520ff90cb6&amp;version=stable\" rel=\"nofollow noreferrer\">Playground link, with an example, and some mutability edits.</a></p>\n"}, {"comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523340883, "post_id": 49746352, "comment_id": 86507346, "body": "I find it interesting that the &quot;another spin&quot; method doesn&#39;t require explicit lifetimes (because the compiler can infer them?), but then I&#39;m not exactly the expert on lifetimes either."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523342320, "post_id": 49746352, "comment_id": 86508108, "body": "It does get a bit &quot;murkier&quot; depending on how you use that option @BHustus. If you&#39;re passing these arguments through multiple callsites then the compiler will begin to complain about type mismatches. When this scenario pops up I either bite the bullet and just <code>Clone</code> things or try for <i>smaller</i> allocations with a tiny wrapper object (much like the stdlib does with iterator types). For the OPs simple example though it should work alright."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523349724, "post_id": 49746352, "comment_id": 86512655, "body": "@BHustus yes, the <a href=\"https://doc.rust-lang.org/book/second-edition/ch10-03-lifetime-syntax.html\" rel=\"nofollow noreferrer\">compiler infer lifetimes</a>: If there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters"}], "tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 6, "last_activity_date": 1523574414, "last_edit_date": 1523574414, "creation_date": 1523340029, "answer_id": 49746352, "question_id": 49745183, "link": "https://stackoverflow.com/questions/49745183/cannot-move-out-of-borrowed-content-when-filtering-a-vecstring/49746352#49746352", "title": "Cannot move out of borrowed content when filtering a Vec&lt;String&gt;", "body": "<p>The issue is that you're trying to move ownership of the <code>String</code> instances <em>out</em> of your <code>lines</code> parameter (which is an input parameter) ... transferring ownership into the return value (the output).</p>\n\n<p>There are a couple of options for you.</p>\n\n<h3>Option 1 - <code>Clone</code></h3>\n\n<p>The easiest to grok for you would be to just clone the lines out:</p>\n\n<pre><code>selected_lines.push(line.clone());\n</code></pre>\n\n<p>Now that you've cloned the lines ... there's no ownership issue. What you're returning is <em>new instances</em> of <code>String</code>s in a vector. They're just copies of the ones you passed in.</p>\n\n<h3>Option 2 - <a href=\"https://doc.rust-lang.org/1.17.0/book/lifetimes.html\" rel=\"nofollow noreferrer\">Lifetimes</a></h3>\n\n<p>Another option (to avoid the extra allocations), is to just let the compiler know that you're not going to return any references that are left dangling:</p>\n\n<pre><code>// introduce a lifetime to let the compiler know what you're\n// trying to do. This lifetime basically says \"the Strings I'm returning\n// in the vector live for at least as long as the Strings coming in\nfn select_lines&lt;'a&gt;(pattern: &amp;String, lines: &amp;'a Vec&lt;String&gt;) -&gt; Vec&lt;&amp;'a String&gt; { \n    let mut selected_lines: Vec&lt;&amp;String&gt; = Vec::new();\n\n    for line in lines {\n        if line.contains(pattern) {\n            selected_lines.push(line);\n        }\n    }\n\n    selected_lines\n}\n</code></pre>\n\n<p>That is how you can fix your immediate problem.</p>\n\n<h3>Another spin</h3>\n\n<p>If I were to write this though, I would change it slightly. Here's another spin on it:</p>\n\n<pre><code>fn select_lines&lt;I&gt;(pattern: I, lines: &amp;[I]) -&gt; Vec&lt;&amp;str&gt;\nwhere\n    I: AsRef&lt;str&gt;,\n{\n    let mut selected_lines: Vec&lt;&amp;str&gt; = Vec::new();\n\n    for line in lines {\n        if line.as_ref().contains(pattern.as_ref()) {\n            selected_lines.push(line.as_ref());\n        }\n    }\n\n    selected_lines\n}\n</code></pre>\n\n<p>You can use this version with <code>String</code>s, or <code>&amp;str</code>s, vectors, or slices.</p>\n\n<pre><code>let lines = vec![\"Hello\", \"Stack\", \"overflow\"];\n\nlet selected = select_lines(\"over\", &amp;lines);\n\n// prints \"overflow\"\nfor l in selected {\n    println!(\"Line: {}\", l);\n}\n\nlet lines2 = [String::from(\"Hello\"), String::from(\"Stack\"), \"overflow\".into()];\n\nlet selected2 = select_lines(String::from(\"He\"), &amp;lines2);\n\n// prints \"Hello\"\nfor l in selected2 {\n    println!(\"Line again: {}\", l);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4255eb0594706e6152f49472309771f5&amp;version=stable\" rel=\"nofollow noreferrer\">Here it is running on the playground</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1523574608, "creation_date": 1523574608, "answer_id": 49807115, "question_id": 49745183, "link": "https://stackoverflow.com/questions/49745183/cannot-move-out-of-borrowed-content-when-filtering-a-vecstring/49807115#49807115", "title": "Cannot move out of borrowed content when filtering a Vec&lt;String&gt;", "body": "<p>The other answers are correct, but the idiomatic solution would not involve reinventing the wheel:</p>\n\n<pre><code>fn main() {\n    let lines = vec![\"Hello\", \"Stack\", \"overflow\"];\n\n    // Vec&lt;String&gt;\n    let selected: Vec&lt;_&gt; = lines\n        .iter()\n        .filter(|l| l.contains(\"over\"))\n        .cloned()\n        .collect();\n    println!(\"{:?}\", selected);\n\n    // Vec&lt;&amp;String&gt;\n    let selected: Vec&lt;_&gt; = lines\n        .iter()\n        .filter(|l| l.contains(\"over\"))\n        .collect();\n    println!(\"{:?}\", selected);\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/40006219/155423\">Why is it discouraged to accept a reference to a String (&amp;String), Vec (&amp;Vec) or Box (&amp;Box) as a function argument?</a></li>\n</ul>\n"}], "owner": {"reputation": 23, "user_id": 9622685, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9bea98585faf7a6b4d0d28fa0b038240?s=128&d=identicon&r=PG&f=1", "display_name": "jdnjd", "link": "https://stackoverflow.com/users/9622685/jdnjd"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1038, "favorite_count": 0, "accepted_answer_id": 49746352, "answer_count": 3, "score": 2, "last_activity_date": 1523574608, "creation_date": 1523333470, "last_edit_date": 1523574332, "question_id": 49745183, "link": "https://stackoverflow.com/questions/49745183/cannot-move-out-of-borrowed-content-when-filtering-a-vecstring", "title": "Cannot move out of borrowed content when filtering a Vec&lt;String&gt;", "body": "<p>I'm trying to implement a function to return a vector of all strings containing a pattern out of (<code>Vec&lt;String&gt;</code>) and into another <code>Vec&lt;String&gt;</code>.</p>\n\n<p>This is what I tried:</p>\n\n<pre><code>fn select_lines(pattern: &amp;String, lines: &amp;Vec&lt;String&gt;) -&gt; Vec&lt;String&gt; {\n    let mut selected_lines: Vec&lt;String&gt; = Vec::new();\n\n    for line in *lines {\n        if line.contains(pattern) {\n            selected_lines.push(line);\n        }\n    }\n\n    selected_lines\n}\n</code></pre>\n\n<p>The leads to an error on the line with the for loop (at *lines). I'm very new to Rust (started learning Rust yesterday!) and right now almost clueless on how to resolve this error.</p>\n\n<p>I can remove the <code>*</code> and that error goes away but errors regarding type mismatch start to culminate. I would like to keep the signature of the function intact. Is there a way?</p>\n"}, {"tags": ["rust", "rust-macros"], "comments": [{"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1523347848, "post_id": 49745163, "comment_id": 86511494, "body": "In my opinion, a compiler plugin is more suitable for this kind of use case. But unfortunately, it is not yet stabilized :("}, {"owner": {"reputation": 26154, "user_id": 5436257, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/iGuaK.jpg?s=128&g=1", "display_name": "Joe Clay", "link": "https://stackoverflow.com/users/5436257/joe-clay"}, "edited": false, "score": 3, "creation_date": 1523355715, "post_id": 49745163, "comment_id": 86516677, "body": "In case you&#39;re not aware of the existing libraries in this space - <a href=\"https://github.com/Stebalien/horrorshow-rs\" rel=\"nofollow noreferrer\">Horrowshow</a> is written with <code>macro_rules</code> and <a href=\"https://github.com/lfairy/maud\" rel=\"nofollow noreferrer\">Maud</a> is a procedural macro. If you&#39;re totally stuck, maybe looking at their code could help you out. Totally understand if you&#39;re wanting to figure it out for yourself, though :)"}], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 0, "last_activity_date": 1523454055, "creation_date": 1523454055, "answer_id": 49776712, "question_id": 49745163, "link": "https://stackoverflow.com/questions/49745163/creating-mixed-recursive-macro-to-create-a-html-templating-dsl/49776712#49776712", "title": "Creating mixed recursive macro to create a HTML templating DSL", "body": "<p>With the current Rust macro system it seems that it is not possible to implements such macro rule.</p>\n\n<p>Simplifying, the needed rule sounds like:</p>\n\n<p>the input is a list of different and intermixed patterns of the form <code>\"literal\"</code> and <code>tag(elem)</code>.</p>\n\n<p>Zero or more literals <code>\"a\",\"b\" ...</code> can be matched with the rule:</p>\n\n<pre><code>( $(label:tt),* )\n</code></pre>\n\n<p>Zero or more <code>tag(element)</code> can be matched with:</p>\n\n<pre><code>( $( $tag:ident ( $inner:tt ) ),* )\n</code></pre>\n\n<p>But how to define a rule that match such a sequence of different structured items?</p>\n\n<p>Also a simple rule like this (zero or more <code>literal</code> followed by zero or more <code>tag(element))</code>:</p>\n\n<pre><code>$( $literal:tt ),*  $( $tag:ident ( $($inner:tt)* ) ),*\n</code></pre>\n\n<p>gives the error:</p>\n\n<pre><code>error: local ambiguity: multiple parsing options: built-in NTs tt ('literal') or ident ('tag').\n</code></pre>\n"}], "owner": {"reputation": 29150, "user_id": 931340, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/32ce9f314c902bc1fdbc6e7f9dd608c1?s=128&d=identicon&r=PG", "display_name": "olanod", "link": "https://stackoverflow.com/users/931340/olanod"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 190, "favorite_count": 0, "answer_count": 1, "score": 1, "last_activity_date": 1523576188, "creation_date": 1523333331, "last_edit_date": 1523576188, "question_id": 49745163, "link": "https://stackoverflow.com/questions/49745163/creating-mixed-recursive-macro-to-create-a-html-templating-dsl", "title": "Creating mixed recursive macro to create a HTML templating DSL", "body": "<p>I'm new to Rust and even more to the macro engine, I'm trying to come up with a way of creating a DSL that I'll use for HTML templating that looks like the following,</p>\n\n<pre><code>h! {\n  foo(\n    \"bar\",\n    tag_with_parens(),\n    tag_without_parens,\n    \"some other expression\",\n    element(child),\n  ), \n  \"tags and strings can be siblings\",\n}\n</code></pre>\n\n<p>I've toyed around a bit but I'm not sure if it's even possible</p>\n\n<pre><code>macro_rules! h {\n    // single idents and strings are matched here\n    ($t:tt) =&gt; { h!($t(),) };\n    ($t:tt( $($inner:tt),* )) =&gt; {h!($t($($inner),*),)};\n    ($t:tt( $($inner:tt),* ), $($rest:tt),*) =&gt; {{\n        // recursion with the contents of the tag            \n        h!($($inner),*);\n        // do something with the rest of the parameters\n        h!($($rest),*);\n    }};\n}\n</code></pre>\n\n<p>In this simple example, I'm using <code>tt</code> since it matches both identifiers and the string literals but it breaks when the token is followed by the parenthesis because I imagine it considers it a separate token. I get <code>error: no rules expected the token (</code>. Also if I want to support not only passing a string but any expression it would have to be different</p>\n\n<p>An extra credit assignment that would be my next step if I get the previous thing to work would be optional attributes as first argument. :)</p>\n\n<pre><code>h!(foo({ident=\"expr\", bar}, \"content\"))\n</code></pre>\n"}, {"tags": ["rust", "closures", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523306042, "post_id": 49740877, "comment_id": 86497057, "body": "The closure has nothing to do with it. I believe this question to already be answered by <a href=\"https://stackoverflow.com/q/36048741/155423\">Why does compilation not fail when a member of a moved value is assigned to?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/49740877/edit\">edit</a> your question to explain the differences. If you agree, you can mark this question as a duplicate."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523307141, "post_id": 49740877, "comment_id": 86497578, "body": "Incidentally, your closure doesn&#39;t need to be a reference. You could just do <code>let c = move || &#47;* ... *&#47;; (c)();</code>"}], "owner": {"reputation": 3480, "user_id": 2686821, "user_type": "registered", "accept_rate": 68, "profile_image": "https://www.gravatar.com/avatar/5dd46afe4f5a75f2667569582b20ac9b?s=128&d=identicon&r=PG&f=1", "display_name": "soupybionics", "link": "https://stackoverflow.com/users/2686821/soupybionics"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 55, "favorite_count": 1, "closed_date": 1523307877, "answer_count": 0, "score": 1, "last_activity_date": 1523305877, "creation_date": 1523304404, "last_edit_date": 1523305877, "question_id": 49740877, "link": "https://stackoverflow.com/questions/49740877/why-does-rust-allow-modification-of-a-mutable-struct-after-moving-it-into-a-clos", "closed_reason": "Duplicate", "title": "Why does Rust allow modification of a mutable struct after moving it into a closure?", "body": "<p>What makes the following piece of code able to compile?</p>\n\n<pre><code>#[derive(Debug)]\nstruct Abc {\n    x: i32,\n}\n\nfn main() {\n    let mut n = Abc { x: 20 };\n    let c = &amp;move || {\n        println!(\"{:?}\", n);\n    };\n\n    (*c)();\n    n.x = 12; //-&gt; But n is moved??\n}\n</code></pre>\n"}, {"tags": ["rust", "signals-slots"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1523297599, "post_id": 49738983, "comment_id": 86492751, "body": "Unrelated, but for idiomatic code: <code>if let</code> instead of a <code>match</code> with one arm, <code>Option::is_some()</code>, and <code>Option::map_or</code>. These will shorten your implementations"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523298303, "post_id": 49738983, "comment_id": 86493097, "body": "Did you use a reference in C++, or did you use a smart-pointer?"}, {"owner": {"reputation": 1202, "user_id": 673679, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ac5b75f2ba59f84ac69e71018275702b?s=128&d=identicon&r=PG", "display_name": "user673679", "link": "https://stackoverflow.com/users/673679/user673679"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523299759, "post_id": 49738983, "comment_id": 86493842, "body": "@MatthieuM. Well, technically a <code>std::function</code>... (which would in turn store a reference to <code>*this</code> I guess). I did try to use <code>Fn</code> initially, but had problems with it."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 0, "creation_date": 1523332402, "post_id": 49738983, "comment_id": 86504538, "body": "Compiling with nightly and <code>#![feature(nll)]</code> gives a somewhat better error message."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523344810, "post_id": 49738983, "comment_id": 86509620, "body": "@user673679: I see; then you probably have a lifetime issue in C++ and never realized it :)"}, {"owner": {"reputation": 1202, "user_id": 673679, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ac5b75f2ba59f84ac69e71018275702b?s=128&d=identicon&r=PG", "display_name": "user673679", "link": "https://stackoverflow.com/users/673679/user673679"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523346105, "post_id": 49738983, "comment_id": 86510454, "body": "@MatthieuM. Not really. Or at least... it&#39;s for the code supplying the <code>std::function</code> to ensure that the move / copy semantics  and lifetimes of whatever is stored in the <code>std::function</code> are correct, not for the signal / connection code."}, {"owner": {"reputation": 1202, "user_id": 673679, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ac5b75f2ba59f84ac69e71018275702b?s=128&d=identicon&r=PG", "display_name": "user673679", "link": "https://stackoverflow.com/users/673679/user673679"}, "edited": false, "score": 0, "creation_date": 1523346110, "post_id": 49738983, "comment_id": 86510457, "body": "(I see now that my immediate issues above can be solved by putting the listener in an <code>Rc&lt;RefCell&lt;Listener&gt;&gt;</code>, and then storing a <code>Weak&lt;RefCell&lt;Notifiable&lt;E&gt;&gt;&gt;</code>, but I don&#39;t like the way it forces all listeners to suddenly be shared pointers on the heap... I think there&#39;s probably a cleaner way)."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1523349164, "post_id": 49738983, "comment_id": 86512298, "body": "@user673679: Rust won&#39;t stand for &quot;it&#39;s up to the caller to&quot;, unless the function is marked <code>unsafe</code>. This makes implementing observers trickier... but safer."}], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 3, "last_activity_date": 1523349108, "creation_date": 1523349108, "answer_id": 49748946, "question_id": 49738983, "link": "https://stackoverflow.com/questions/49738983/why-do-i-get-does-not-live-long-enough-errors-when-reimplementing-c-signals/49748946#49748946", "title": "Why do I get &quot;does not live long enough&quot; errors when reimplementing C++ signals &amp; slots in Rust?", "body": "<p>Signals/Slots are complicated. <em>Really complicated</em>.</p>\n\n<p>In C++, you can use <a href=\"https://www.boost.org/doc/libs/1_66_0/doc/html/signals.html\" rel=\"nofollow noreferrer\"><code>Boost.Signals</code></a>, a library crafted by C++ experts which... ah wait no. Despite their expertise, the authors of Boost.Signals didn't manage to make it thread-safe, you should use <a href=\"https://www.boost.org/doc/libs/1_66_0/doc/html/signals2.html\" rel=\"nofollow noreferrer\"><code>Boost.Signals2</code></a> instead.</p>\n\n<p>Chances are, your homegrown C++ implementation requires care to use, lest it invokes undefined behavior.</p>\n\n<p>A straightforward port of such a library will not work in Rust. The goal of Rust is to be upfront about undefined behavior: you have to clearly mark unsafe code as... <code>unsafe</code>.</p>\n\n<hr>\n\n<p>In fine, a Signals/Slots implementation is akin to an Observer, and an Observer traditionally requires a <em>cyclic ownership</em>. This works well in Garbage Collected languages, but requires more forethought when memory is managed manually.</p>\n\n<p>The most straightforward, and error-prone, solution is to use a pair of <code>Rc</code>/<code>Weak</code> (or <code>Arc</code>/<code>Weak</code> for multi-threaded code). It is up to the developer to strategically place <code>Weak</code> pointers to break the cycles (lest they leak).</p>\n\n<p>In Rust, there is another hurdle: cyclic ownership implies <em>aliasing</em>. By default, Rust requires that aliased content be immutable which is quite limiting. To regain mutability, you will need <em>interior mutability</em>, either with <code>Cell</code> or <code>RefCell</code> (or <code>Mutex</code> for multi-threaded code).</p>\n\n<p>The good news: despite all the intricacies, if your code compile it will be safe (though it may still leak).</p>\n\n<hr>\n\n<p>Another solution, to avoid all the heap allocations inherent to such a design, is to move toward a message-passing scheme instead. Instead of directly invoking a method on an object, you can send a message to an object via its ID. A difficulty of this scheme is that messages are asynchronous, so the method called can only communicate a result by sending a message back.</p>\n\n<p><a href=\"https://www.youtube.com/watch?v=qr9GTTST_Dk\" rel=\"nofollow noreferrer\">Citybound</a> is a game developed in Rust using fine-grained actors communicating with such a scheme. There is also the <a href=\"https://github.com/actix/actix\" rel=\"nofollow noreferrer\"><code>actix</code></a> actor framework, which has been quite finely tuned performance wise as can be seen on the TechEmpower benchmarks (placed 7 in <a href=\"https://www.techempower.com/benchmarks/#section=data-r15&amp;hw=ph&amp;test=plaintext\" rel=\"nofollow noreferrer\">Round 15</a>).</p>\n"}], "owner": {"reputation": 1202, "user_id": 673679, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/ac5b75f2ba59f84ac69e71018275702b?s=128&d=identicon&r=PG", "display_name": "user673679", "link": "https://stackoverflow.com/users/673679/user673679"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 159, "favorite_count": 0, "accepted_answer_id": 49748946, "answer_count": 1, "score": 0, "last_activity_date": 1523349108, "creation_date": 1523296863, "last_edit_date": 1523298153, "question_id": 49738983, "link": "https://stackoverflow.com/questions/49738983/why-do-i-get-does-not-live-long-enough-errors-when-reimplementing-c-signals", "title": "Why do I get &quot;does not live long enough&quot; errors when reimplementing C++ signals &amp; slots in Rust?", "body": "<p>As a learning exercise, I've been translating a fairly standard C++ signal implementation into Rust:</p>\n\n<pre><code>use std::cell::RefCell;\nuse std::collections::BTreeMap;\nuse std::rc::{Rc, Weak};\n\ntrait Notifiable&lt;E&gt; {\n    fn notify(&amp;self, e: &amp;E);\n}\n\nstruct SignalData&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    listeners: BTreeMap&lt;usize, &amp;'l Notifiable&lt;E&gt;&gt;,\n}\n\nstruct Signal&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    next_id: usize,\n    data: Rc&lt;RefCell&lt;SignalData&lt;'l, E&gt;&gt;&gt;,\n}\n\nstruct Connection&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    id: usize,\n    data: Weak&lt;RefCell&lt;SignalData&lt;'l, E&gt;&gt;&gt;,\n}\n\nimpl&lt;'l, E&gt; Signal&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    pub fn new() -&gt; Self {\n        Self {\n            next_id: 1,\n            data: Rc::new(RefCell::new(SignalData {\n                listeners: BTreeMap::new(),\n            })),\n        }\n    }\n\n    pub fn connect(&amp;mut self, l: &amp;'l Notifiable&lt;E&gt;) -&gt; Connection&lt;'l, E&gt; {\n        let id = self.get_next_id();\n        self.data.borrow_mut().listeners.insert(id, l);\n        Connection {\n            id: id,\n            data: Rc::downgrade(&amp;self.data),\n        }\n    }\n\n    pub fn disconnect(&amp;mut self, connection: &amp;mut Connection&lt;'l, E&gt;) {\n        self.data.borrow_mut().listeners.remove(&amp;connection.id);\n        connection.data = Weak::new();\n    }\n\n    pub fn is_connected_to(&amp;self, connection: &amp;Connection&lt;'l, E&gt;) -&gt; bool {\n        match connection.data.upgrade() {\n            Some(data) =&gt; Rc::ptr_eq(&amp;data, &amp;self.data),\n            None =&gt; false,\n        }\n    }\n\n    pub fn clear(&amp;mut self) {\n        self.data.borrow_mut().listeners.clear();\n    }\n\n    pub fn is_empty(&amp;self) -&gt; bool {\n        self.data.borrow().listeners.is_empty()\n    }\n\n    pub fn notify(&amp;self, e: &amp;E) {\n        for (_, l) in &amp;self.data.borrow().listeners {\n            l.notify(e);\n        }\n    }\n\n    fn get_next_id(&amp;mut self) -&gt; usize {\n        let id = self.next_id;\n        self.next_id += 1;\n        id\n    }\n}\n\nimpl&lt;'l, E&gt; Connection&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    pub fn new() -&gt; Self {\n        Connection {\n            id: 0,\n            data: Weak::new(),\n        }\n    }\n\n    pub fn is_connected(&amp;self) -&gt; bool {\n        match self.data.upgrade() {\n            Some(_) =&gt; true,\n            None =&gt; false,\n        }\n    }\n\n    pub fn disconnect(&amp;mut self) {\n        match self.data.upgrade() {\n            Some(data) =&gt; {\n                data.borrow_mut().listeners.remove(&amp;self.id);\n                self.data = Weak::new();\n            }\n            None =&gt; (),\n        }\n    }\n}\n\nimpl&lt;'l, E&gt; Drop for Connection&lt;'l, E&gt;\nwhere\n    E: 'l,\n{\n    fn drop(&amp;mut self) {\n        self.disconnect();\n    }\n}\n</code></pre>\n\n<p>This compiles and behaves as expected for simple test code:</p>\n\n<pre><code>struct Event {}\nstruct Listener {}\n\nimpl Notifiable&lt;Event&gt; for Listener {\n    fn notify(&amp;self, _e: &amp;Event) {\n        println!(\"1: event\");\n    }\n}\n\nfn main() {\n    let l1 = Listener {};\n    let l2 = Listener {};\n    let mut s = Signal::&lt;Event&gt;::new();\n    let c1 = s.connect(&amp;l1);\n    let mut c2 = s.connect(&amp;l2);\n\n    println!(\"c2: {}\", c2.is_connected());\n    s.disconnect(&amp;mut c2);\n    println!(\"c2: {}\", c2.is_connected());\n\n    let e = Event {};\n    s.notify(&amp;e);\n\n    println!(\"done!\");\n}\n</code></pre>\n\n<p>However, if I try something more similar to the envisaged use case, it doesn't compile:</p>\n\n<pre><code>struct Event {}\nstruct System&lt;'l&gt; {\n    signal: Signal&lt;'l, Event&gt;,\n}\nstruct Listener&lt;'l&gt; {\n    connection: Connection&lt;'l, Event&gt;,\n}\n\nimpl&lt;'l&gt; Notifiable&lt;Event&gt; for Listener&lt;'l&gt; {\n    fn notify(&amp;self, _e: &amp;Event) {\n        println!(\"1: event\");\n    }\n}\n\nfn main() {\n    let mut listener = Listener {\n        connection: Connection::new(),\n    };\n    let mut system = System {\n        signal: Signal::new(),\n    };\n\n    listener.connection = system.signal.connect(&amp;listener);\n\n    println!(\"is_connected(): {}\", listener.connection.is_connected());\n    system.signal.disconnect(&amp;mut listener.connection);\n    println!(\"is_connected(): {}\", listener.connection.is_connected());\n\n    let e = Event {};\n    system.signal.notify(&amp;e);\n\n    println!(\"done!\");\n}\n</code></pre>\n\n<p>Which gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0597]: `listener` does not live long enough\n   --&gt; src/main.rs:147:50\n    |\n147 |     listener.connection = system.signal.connect(&amp;listener);\n    |                                                  ^^^^^^^^ borrowed value does not live long enough\n...\n157 | }\n    | - `listener` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created\n</code></pre>\n\n<p>It seems that my problems stem from <code>SignalData</code>, where I store the collection of listeners as references: <code>listeners: BTreeMap&lt;usize, &amp;'l Notifiable&lt;E&gt;&gt;</code>. That lifetime requirement seems to propagate ever outwards.</p>\n\n<p>The purpose of the <code>Connection</code> class (at least in C++) is to allow disconnection from the <code>Listener</code> end, and manage the lifetime of the connection, removing the <code>Listener</code> entry from the signal when it goes out of scope.</p>\n\n<p>The lifetime of the <code>Connection</code> must be less than or equal to that of both the <code>Signal</code> and the relevant <code>Listener</code>. However, the lifetime of the <code>Listener</code> and <code>Signal</code> should otherwise be entirely independent.</p>\n\n<p>Is there a way to alter my implementation to achieve this, or is it fundamentally broken?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1523289741, "post_id": 49737010, "comment_id": 86488490, "body": "You have specified one of the operands to <code>i8</code>, so that type is propagated to the other variables. Does <a href=\"https://stackoverflow.com/q/38854408/1233251\">this question</a> answer your question?"}, {"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 3, "creation_date": 1523293783, "post_id": 49737010, "comment_id": 86490633, "body": "The default is only used when the type can&#39;t be inferred."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523298576, "post_id": 49737010, "comment_id": 86493222, "body": "Have you seen <a href=\"https://stackoverflow.com/q/21747136/155423\">How do I print the type of a variable in Rust?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 149, "user_id": 9620327, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/99e332d7a37e81bbdd511c2b7dadfad5?s=128&d=identicon&r=PG&f=1", "display_name": "r_duck", "link": "https://stackoverflow.com/users/9620327/r-duck"}, "edited": false, "score": 0, "creation_date": 1523325275, "post_id": 49739549, "comment_id": 86503005, "body": "thanks a lot. am new to rust and stackoverflow and amazed how helpful ppl hav been"}, {"owner": {"reputation": 17210, "user_id": 2436175, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/CK0Zo.png?s=128&g=1", "display_name": "Antonio", "link": "https://stackoverflow.com/users/2436175/antonio"}, "reply_to_user": {"reputation": 149, "user_id": 9620327, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/99e332d7a37e81bbdd511c2b7dadfad5?s=128&d=identicon&r=PG&f=1", "display_name": "r_duck", "link": "https://stackoverflow.com/users/9620327/r-duck"}, "edited": false, "score": 0, "creation_date": 1525216300, "post_id": 49739549, "comment_id": 87268209, "body": "@r_duck You should consider <a href=\"https://meta.stackexchange.com/a/5235/225842\">accepting the answer</a> if you are satisfied with it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 17210, "user_id": 2436175, "user_type": "registered", "accept_rate": 81, "profile_image": "https://i.stack.imgur.com/CK0Zo.png?s=128&g=1", "display_name": "Antonio", "link": "https://stackoverflow.com/users/2436175/antonio"}, "edited": false, "score": 0, "creation_date": 1525313109, "post_id": 49739549, "comment_id": 87309918, "body": "@Antonio <a href=\"https://stackoverflow.com/users/9620327/r-duck\">The OP doesn&#39;t seem to accept any answers</a> for whatever reason."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 4, "last_activity_date": 1523299162, "creation_date": 1523299162, "answer_id": 49739549, "question_id": 49737010, "link": "https://stackoverflow.com/questions/49737010/why-does-a-integral-literal-infer-the-same-type-as-it-is-added-to-instead-of-i32/49739549#49739549", "title": "Why does a integral literal infer the same type as it is added to instead of i32, the default integral type?", "body": "<p>There is only one relevant implementation of <a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"nofollow noreferrer\"><code>Add</code></a> involving an <code>i8</code> and a non-reference integer: </p>\n\n<pre><code>impl Add&lt;i8&gt; for i8 {\n    type Output = i8;\n}\n</code></pre>\n\n<p>That means that, for the code to be able to compile, if one side of the addition is known to be an <code>i8</code>, the other side must also be. Since <a href=\"https://stackoverflow.com/q/41996784/155423\"> <code>{integer}</code> doesn't have a type yet</a>, it's free to vary and the compiler assigns it the type <code>i8</code>.</p>\n\n<p>This applies once (as in your first code block), twice (as in your second), or as many times as it needs to:</p>\n\n<pre><code>fn main() {\n    let a = 1;\n    let b = 1 + a;\n    let c = 1 + b;\n    let d = 1 + c;\n    let e = 1 + d;\n    let f = 1 + e;\n    let g = 1 + f;\n\n    let sum = g + 1i8;\n\n    let _: () = a;   // found type `i8`\n    let _: () = sum; // found type `i8`\n}\n</code></pre>\n\n<blockquote>\n  <p><code>i32</code> (the default type)</p>\n</blockquote>\n\n<p>\"Default\" isn't the best name for this. It's only used <em>when type inference couldn't pin down the concrete type</em>. Thus, you'll often hear this called the \"fallback\" type.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38854408/155423\">Do literal integral values have a specific type in Rust?</a></li>\n<li><a href=\"https://stackoverflow.com/q/41996784/155423\">What is the {integer} in a compiler error message?</a></li>\n<li><a href=\"https://stackoverflow.com/q/21747136/155423\">How do I print the type of a variable in Rust?</a></li>\n</ul>\n"}], "owner": {"reputation": 149, "user_id": 9620327, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/99e332d7a37e81bbdd511c2b7dadfad5?s=128&d=identicon&r=PG&f=1", "display_name": "r_duck", "link": "https://stackoverflow.com/users/9620327/r-duck"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 89, "favorite_count": 1, "answer_count": 1, "score": 2, "last_activity_date": 1523299162, "creation_date": 1523289364, "last_edit_date": 1523298524, "question_id": 49737010, "link": "https://stackoverflow.com/questions/49737010/why-does-a-integral-literal-infer-the-same-type-as-it-is-added-to-instead-of-i32", "title": "Why does a integral literal infer the same type as it is added to instead of i32, the default integral type?", "body": "<p>Why does the variable <code>no_type</code> infer to <code>i8</code> and not to <code>i32</code> (the default type)?</p>\n\n<pre><code>fn main() {\n    let no_type = 25;\n\n    let int8: i8 = 10;\n\n    let sum = no_type + int8;\n    println!(\"{} + {} = {}\", no_type, int8, sum);\n}\n</code></pre>\n\n<hr>\n\n<p>What is the type of <code>x</code> and <code>y</code>?</p>\n\n<pre><code>fn main() {\n    let x = 12;\n    let y = 13;\n\n    println!(\"{}\", x + y);\n\n    let z: i8 = 10;\n    println!(\"{}\", z + x);\n}\n</code></pre>\n"}, {"tags": ["rust", "pipe", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 917, "user_id": 3014263, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rFh51.jpg?s=128&g=1", "display_name": "AbhiNickz", "link": "https://stackoverflow.com/users/3014263/abhinickz"}, "is_accepted": true, "score": 1, "last_activity_date": 1523280787, "last_edit_date": 1523280787, "creation_date": 1523280370, "answer_id": 49734144, "question_id": 49733027, "link": "https://stackoverflow.com/questions/49733027/how-to-capture-the-output-of-a-process-piped-into-a-rust-program/49734144#49734144", "title": "How to capture the output of a process piped into a Rust program?", "body": "<pre><code>use std::io;\n\nfn main() {\n    loop {\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&amp;mut input)\n            .expect(\"failed to read from pipe\");\n        input = input.trim().to_string();\n        if input == \"\" {\n            break;\n        }\n        println!(\"Pipe output: {}\", input);\n    }\n}\n</code></pre>\n\n<p><strong>OUTPUT:</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>[18:50:29 Abhinickz@wsl -&gt; pipe$ pwd\n/mnt/d/Abhinickz/dev_work/learn_rust/pipe\n[18:50:46 Abhinickz@wsl -&gt; pipe$ pwd | cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n    Running `target/debug/pipe`\nPipe output: /mnt/d/Abhinickz/dev_work/learn_rust/pipe\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 917, "user_id": 3014263, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rFh51.jpg?s=128&g=1", "display_name": "AbhiNickz", "link": "https://stackoverflow.com/users/3014263/abhinickz"}, "edited": false, "score": 0, "creation_date": 1523280743, "post_id": 49734178, "comment_id": 86482280, "body": "Thanks Peter, I did found this after posting this question, but this fails to read the output greater than 1 line."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 917, "user_id": 3014263, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rFh51.jpg?s=128&g=1", "display_name": "AbhiNickz", "link": "https://stackoverflow.com/users/3014263/abhinickz"}, "edited": false, "score": 0, "creation_date": 1523286596, "post_id": 49734178, "comment_id": 86486369, "body": "You can just do this in a loop, and bail out when the line has zero length.  I&#39;ll update my answer with that."}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": false, "score": 4, "last_activity_date": 1523287616, "last_edit_date": 1523287616, "creation_date": 1523280461, "answer_id": 49734178, "question_id": 49733027, "link": "https://stackoverflow.com/questions/49733027/how-to-capture-the-output-of-a-process-piped-into-a-rust-program/49734178#49734178", "title": "How to capture the output of a process piped into a Rust program?", "body": "<p>You just need to read from <code>Stdin</code>.</p>\n\n<p>This is based on an example taken from <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html\" rel=\"nofollow noreferrer\">the documentation</a>:</p>\n\n<pre><code>use std::io;\n\nfn main() {\n    loop {\n        let mut input = String::new();\n        match io::stdin().read_line(&amp;mut input) {\n            Ok(len) =&gt; if len == 0 {\n                return;\n            } else {\n                println!(\"{}\", input);\n            } \n            Err(error) =&gt; {\n                eprintln!(\"error: {}\", error);\n                return;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>It's mostly the docs example wrapped in a loop, breaking out of the loop when there is no more input, or if there is an error.</p>\n\n<p>The other changes is that it's better in your context to write errors to <code>stderr</code>, which is why the error branch uses <code>eprintln!</code>, instead of <code>println!</code>.  This macro probably wasn't available when that documentation was written.</p>\n"}, {"comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523284608, "post_id": 49734423, "comment_id": 86484838, "body": "If I understand correctly <code>lock()</code>, this will break the purpose of a pipe, <code>find</code> will write its output in a stream, but you are currently lock and read only what find has already read. A <code>while</code> loop with <code>read_line()</code> will not be more idiomatic and functional ?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523290810, "post_id": 49734423, "comment_id": 86489066, "body": "@Stargateur that is incorrect. <code>lock</code> means that nothing else in the process may read from STDIN, not that it will stop reading data from outside the process. This has more performance than the <code>loop</code> suggested elsewhere (but is not the fastest possibility) and iterators are very idiomatic."}, {"owner": {"reputation": 77, "user_id": 4723053, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8c2fa4cbb65d1307be11dbac91a75abc?s=128&d=identicon&r=PG&f=1", "display_name": "Hanif Bin Ariffin", "link": "https://stackoverflow.com/users/4723053/hanif-bin-ariffin"}, "edited": false, "score": 0, "creation_date": 1613389043, "post_id": 49734423, "comment_id": 117051285, "body": "tools like <code>grep</code> doesn&#39;t lock when its invoked alone. How does that work?"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 9, "last_activity_date": 1523292231, "last_edit_date": 1523292231, "creation_date": 1523281235, "answer_id": 49734423, "question_id": 49733027, "link": "https://stackoverflow.com/questions/49733027/how-to-capture-the-output-of-a-process-piped-into-a-rust-program/49734423#49734423", "title": "How to capture the output of a process piped into a Rust program?", "body": "<p>Use <a href=\"https://doc.rust-lang.org/std/io/trait.BufRead.html#method.lines\" rel=\"noreferrer\"><code>BufRead::lines</code></a> on a <a href=\"https://doc.rust-lang.org/std/io/struct.Stdin.html#method.lock\" rel=\"noreferrer\">locked handle to standard input</a>:</p>\n\n<pre><code>use std::io::{self, BufRead};\n\nfn main() {\n    let stdin = io::stdin();\n    for line in stdin.lock().lines() {\n        let line = line.expect(\"Could not read line from standard in\");\n        println!(\"{}\", line);\n    }\n}\n</code></pre>\n\n<p>If you wanted to reuse the allocation of the <code>String</code>, you could use the loop form:</p>\n\n<pre><code>use std::io::{self, Read};\n\nfn main() {\n    let stdin = io::stdin();\n    let mut stdin = stdin.lock(); // locking is optional\n\n    let mut line = String::new();\n\n    // Could also `match` on the `Result` if you wanted to handle `Err` \n    while let Ok(n_bytes) = stdin.read_to_string(&amp;mut line) {\n        if n_bytes == 0 { break }\n        println!(\"{}\", line);\n        line.clear();\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 917, "user_id": 3014263, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/rFh51.jpg?s=128&g=1", "display_name": "AbhiNickz", "link": "https://stackoverflow.com/users/3014263/abhinickz"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3216, "favorite_count": 2, "accepted_answer_id": 49734144, "answer_count": 3, "score": 7, "last_activity_date": 1523294971, "creation_date": 1523277040, "last_edit_date": 1523294971, "question_id": 49733027, "link": "https://stackoverflow.com/questions/49733027/how-to-capture-the-output-of-a-process-piped-into-a-rust-program", "title": "How to capture the output of a process piped into a Rust program?", "body": "<p>I know how to read the command line arguments, but I am having difficulties reading the command output from a pipe.</p>\n\n<ol>\n<li><p>Connect a program (A) that outputs data to my Rust program using a pipe:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>A | R\n</code></pre></li>\n<li><p>The program should consume the data line by line as they come.</p>\n\n<p><code>$ pwd | cargo run</code> should print the <code>pwd</code> output.</p>\n\n<p>OR </p>\n\n<p><code>$ find . | cargo run</code> should output the <code>find</code> command output which is more than 1 line.</p></li>\n</ol>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 1, "creation_date": 1523276138, "post_id": 49732613, "comment_id": 86479069, "body": "This seems more like a bug report than a question. What kind of answer are you hoping for?"}, {"owner": {"reputation": 11, "user_id": 3447239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b9821503b1a54c950a153e7e13d92f0a?s=128&d=identicon&r=PG&f=1", "display_name": "user3447239", "link": "https://stackoverflow.com/users/3447239/user3447239"}, "reply_to_user": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1523277883, "post_id": 49732613, "comment_id": 86480228, "body": "Well, after writing this out it does indeed feel more like a bug report. But where and how should I report this? I can&#39;t reproduce it without using xargo, but nothing makes it look like it is xargo&#39;s fault. Should I just report in xargo repository?"}, {"owner": {"reputation": 13169, "user_id": 967945, "user_type": "registered", "accept_rate": 54, "profile_image": "https://www.gravatar.com/avatar/47244a17f72cee237f57f4c4b9613ea1?s=128&d=identicon&r=PG", "display_name": "Dan Hulme", "link": "https://stackoverflow.com/users/967945/dan-hulme"}, "edited": false, "score": 0, "creation_date": 1523279137, "post_id": 49732613, "comment_id": 86481193, "body": "It looks like a bug in <code>lld</code> to me, but of course to the LLVM folks your source code wouldn&#39;t count as a minimal example. I guess you could start with xargo - if nothing else they&#39;d know who are the right people to blame/tell. My first guess would be <code>rustc</code> though."}], "owner": {"reputation": 11, "user_id": 3447239, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b9821503b1a54c950a153e7e13d92f0a?s=128&d=identicon&r=PG&f=1", "display_name": "user3447239", "link": "https://stackoverflow.com/users/3447239/user3447239"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 246, "favorite_count": 0, "answer_count": 0, "score": 1, "last_activity_date": 1523275665, "creation_date": 1523275665, "question_id": 49732613, "link": "https://stackoverflow.com/questions/49732613/rustc-hangs-forever-while-compiling-a-no-std-binary", "title": "rustc hangs forever while compiling a no_std binary", "body": "<p>I was reading the <a href=\"https://os.phil-opp.com/second-edition/\" rel=\"nofollow noreferrer\">second edition of Writing an OS in Rust</a>. On the third chapter I got a problem - defining a static <code>spin::Mutex</code> hangs the compiler. I managed to reduce the code to this:</p>\n\n<ul>\n<li><p>src/main.rs</p>\n\n<pre><code>#![feature(lang_items, start)]\n#![no_std]\n#![no_main]\n\nuse core::sync::atomic::{Ordering, ATOMIC_BOOL_INIT};\n\n#[no_mangle]\npub extern \"C\" fn _start() -&gt; ! {\n    let b = ATOMIC_BOOL_INIT;\n    b.store(true, Ordering::SeqCst);\n    loop {}\n}\n\n#[lang = \"eh_personality\"] pub extern fn eh_personality() {}\n#[lang = \"panic_fmt\"] pub extern fn panic_fmt() -&gt; ! { loop {} }\n</code></pre></li>\n<li><p>Cargo.toml</p>\n\n<pre><code>[package]\nname = \"repro\"\nversion = \"0.1.0\"\n\n[profile.dev]\npanic = \"abort\"\n\n[profile.release]\npanic = \"abort\"\n</code></pre></li>\n<li><p>x86_64-repro.json</p>\n\n<pre><code>{\n    \"llvm-target\": \"x86_64-unknown-none\",\n    \"data-layout\": \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\",\n    \"linker-flavor\": \"ld.lld\",\n    \"target-endian\": \"little\",\n    \"target-pointer-width\": \"64\",\n    \"target-c-int-width\": \"32\",\n    \"arch\": \"x86_64\",\n    \"os\": \"none\",\n    \"executables\": true,\n    \"disable-redzone\": true,\n    \"features\": \"-mmx,-sse,+soft-float\",\n    \"panic-strategy\": \"abort\"\n}\n</code></pre></li>\n</ul>\n\n<p>With this, when I run <code>xargo build --target=x86_64-repro</code> it just seems to hang forever on <code>Compiling repro v0.1.0 (file:...)</code>. I left it for 10 minutes, and it does not seem to be making any progress (no processor usage, used memory amount does not change).</p>\n\n<ul>\n<li>OS: Windows 10</li>\n<li>Toolchain: <code>nightly-x86_64-pc-windows-gnu</code></li>\n<li>rustc: <code>rustc 1.27.0-nightly (056f589fb 2018-04-07)</code></li>\n<li>Cargo: <code>cargo 1.26.0-nightly (b70ab13b3 2018-04-04)</code></li>\n<li>Xargo: <code>xargo 0.3.12</code></li>\n</ul>\n\n<p>Enabling logging in rustc with <code>$env:RUST_LOG=debug</code> shows that compilation seems to be stuck on linking:</p>\n\n<pre><code>    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_root - trying C:\\Users\\djade\\Desktop\\osprojrep\\Cargo.toml\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_root - trying C:\\Users\\djade\\Desktop\\Cargo.toml\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_root - trying C:\\Users\\djade\\Cargo.toml\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_root - trying C:\\Users\\Cargo.toml\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_root - trying C:\\Cargo.toml\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::workspace: find_members - only me as a member\n    DEBUG 2018-04-09T11:38:55Z: cargo::ops::resolve: attempting to prefer repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro)\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::registry: load/missing  file:///C:/Users/djade/Desktop/osprojrep/repro\n    DEBUG 2018-04-09T11:38:55Z: cargo::sources::config: loading: file:///C:/Users/djade/Desktop/osprojrep/repro\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::resolver: initial activation: repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro)\n    DEBUG 2018-04-09T11:38:55Z: cargo::ops::resolve: attempting to prefer repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro)\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::registry: load/locked   file:///C:/Users/djade/Desktop/osprojrep/repro\n    DEBUG 2018-04-09T11:38:55Z: cargo::core::resolver: initial activation: repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro)\n    INFO 2018-04-09T11:38:55Z: jobserver::imp: created jobserver Client { sem: Handle(0x230), name: \"__rust_jobserver_semaphore_3539026941\" }\n    DEBUG 2018-04-09T11:38:55Z: cargo::ops::cargo_rustc::context: probe_target_info\n    DEBUG 2018-04-09T11:38:56Z: cargo::ops::cargo_rustc::fingerprint: fingerprint at: C:\\Users\\djade\\Desktop\\osprojrep\\repro\\target\\x86_64-repro\\debug\\.fingerprint\\repro-1e7ce729192ba73b\\bin-repro-1e7ce729192ba73b\n    INFO 2018-04-09T11:38:56Z: cargo::ops::cargo_rustc::fingerprint: fingerprint error for repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro): failed to read `C:\\Users\\djade\\Desktop\\osprojrep\\repro\\target\\x86_64-repro\\debug\\.fingerprint\\repro-1e7ce729192ba73b\\bin-repro-1e7ce729192ba73b`\n    INFO 2018-04-09T11:38:56Z: cargo::ops::cargo_rustc::fingerprint:   cause: The system cannot find the file specified. (os error 2)\n    INFO 2018-04-09T11:38:56Z: cargo::ops::cargo_rustc::context::compilation_files: Target filenames: [OutputFile { path: \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b\", hardlink: Some(\"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\repro\"), flavor: Normal }]\n    INFO 2018-04-09T11:38:56Z: cargo::ops::cargo_rustc::job_queue: start: repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro) =&gt; Target(bin: repro)/Profile(build) =&gt; Target\n    Compiling repro v0.1.0 (file:///C:/Users/djade/Desktop/osprojrep/repro)\n    INFO 2018-04-09T11:38:56Z: jobserver::imp: opened environment semaphore __rust_jobserver_semaphore_3539026941\n    INFO 2018-04-09T11:38:56Z: rustc_driver: codegen backend candidate: C:\\Users\\djade\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\codegen-backends\n    INFO 2018-04-09T11:38:56Z: rustc_driver: probing C:\\Users\\djade\\.rustup\\toolchains\\nightly-x86_64-pc-windows-gnu\\lib\\rustlib\\x86_64-pc-windows-gnu\\codegen-backends for a codegen backend\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: resolving crate `extern crate compiler_builtins as compiler_builtins`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: falling back to a load\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: lib candidate: C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcompiler_builtins-95e63877493349a0.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: rlib reading metadata from: \\\\?\\C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcompiler_builtins-95e63877493349a0.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: reading \"libcompiler_builtins-95e63877493349a0.rlib\" =&gt; Duration { secs: 0, nanos: 223543 }\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: register crate `extern crate compiler_builtins as compiler_builtins`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: resolving dep crate core hash: `59386c7ce0d7be7a` extra filename: `-fd00811e13d47697`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: resolving crate `extern crate core as core`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: falling back to a load\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: lib candidate: C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcore-fd00811e13d47697.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: rlib reading metadata from: \\\\?\\C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcore-fd00811e13d47697.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::locator: reading \"libcore-fd00811e13d47697.rlib\" =&gt; Duration { secs: 0, nanos: 219532 }\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: register crate `extern crate core as core`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: resolving crate `extern crate core as core`\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader: resolved crates:\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   name: compiler_builtins\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   cnum: 1\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   hash: 5fe7de92c54e02b5\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   reqd: Explicit\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:    rlib: \\\\?\\C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcompiler_builtins-95e63877493349a0.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   name: core\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   cnum: 2\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   hash: 59386c7ce0d7be7a\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:   reqd: Explicit\n    INFO 2018-04-09T11:38:56Z: rustc_metadata::creader:    rlib: \\\\?\\C:\\Users\\djade\\.xargo\\lib\\rustlib\\x86_64-repro\\lib\\libcore-fd00811e13d47697.rlib\n    INFO 2018-04-09T11:38:56Z: rustc_mir::build: fn_id DefId(0/0:7 ~ repro[4180]::_start[0]) has attrs Borrowed([Attribute { id: AttrId(3), style: Outer, path: path(no_mangle), tokens: TokenStream { kind: Empty }, is_sugared_doc: false, span: src\\main.rs:7:1: 7:13 }])\n    INFO 2018-04-09T11:38:56Z: rustc_mir::build: fn_id DefId(0/0:8 ~ repro[4180]::eh_personality[0]) has attrs Borrowed([Attribute { id: AttrId(4), style: Outer, path: path(lang), tokens: TokenStream { kind: Stream([TokenStream { kind: Tree(Token(src\\main.rs:14:8: 14:9, Eq)) }, TokenStream { kind: Tree(Token(src\\main.rs:14:10: 14:26, Literal(Str_(eh_personality), None))) }]) }, is_sugared_doc: false, span: src\\main.rs:14:1: 14:27 }])\n    INFO 2018-04-09T11:38:56Z: rustc_mir::build: fn_id DefId(0/0:9 ~ repro[4180]::panic_fmt[0]) has attrs Borrowed([Attribute { id: AttrId(5), style: Outer, path: path(lang), tokens: TokenStream { kind: Stream([TokenStream { kind: Tree(Token(src\\main.rs:15:8: 15:9, Eq)) }, TokenStream { kind: Tree(Token(src\\main.rs:15:10: 15:21, Literal(Str_(panic_fmt), None))) }]) }, is_sugared_doc: false, span: src\\main.rs:15:1: 15:22 }])\n    Pre-trans\n    Ty interner             total           ty region  both\n        TyAdt             :    129 75.9%,  0.0%   0.0%  0.0%\n        TyArray           :      0  0.0%,  0.0%   0.0%  0.0%\n        TySlice           :      0  0.0%,  0.0%   0.0%  0.0%\n        TyRawPtr          :      4  2.4%,  0.0%   0.0%  0.0%\n        TyRef             :     19 11.2%,  0.0%   0.0%  0.0%\n        TyFnDef           :      4  2.4%,  0.0%   0.0%  0.0%\n        TyFnPtr           :      0  0.0%,  0.0%   0.0%  0.0%\n        TyGenerator       :      0  0.0%,  0.0%   0.0%  0.0%\n        TyGeneratorWitness:      0  0.0%,  0.0%   0.0%  0.0%\n        TyDynamic         :      0  0.0%,  0.0%   0.0%  0.0%\n        TyClosure         :      0  0.0%,  0.0%   0.0%  0.0%\n        TyTuple           :      1  0.6%,  0.0%   0.0%  0.0%\n        TyParam           :     11  6.5%,  0.0%   0.0%  0.0%\n        TyInfer           :      1  0.6%,  0.6%   0.0%  0.0%\n        TyProjection      :      1  0.6%,  0.0%   0.0%  0.0%\n        TyAnon            :      0  0.0%,  0.0%   0.0%  0.0%\n        TyForeign         :      0  0.0%,  0.0%   0.0%  0.0%\n                    total    170         0.6%   0.0%  0.0%\n    Substs interner: #45\n    Region interner: #47\n    Stability interner: #2\n    Interpret interner: #0\n    Layout interner: #0\n    INFO 2018-04-09T11:38:56Z: rustc_trans_utils::link: LinkMeta { crate_hash: Svh { hash: 14623612180396971999 } }\n    INFO 2018-04-09T11:38:56Z: rustc_trans::base: trans_instance(core::sync::atomic::atomic_store::&lt;u8&gt;)\n    INFO 2018-04-09T11:38:56Z: rustc_trans::base: trans_instance(&lt;core::cell::UnsafeCell&lt;T&gt;&gt;&lt;u8&gt;::get)\n    INFO 2018-04-09T11:38:56Z: rustc_trans::base: trans_instance(core::sync::atomic::AtomicBool::store)\n    INFO 2018-04-09T11:38:56Z: rustc_trans::base: trans_instance(_start)\n    Post-trans\n    Ty interner             total           ty region  both\n        TyAdt             :    129 60.6%,  0.0%   0.0%  0.0%\n        TyArray           :      0  0.0%,  0.0%   0.0%  0.0%\n        TySlice           :      0  0.0%,  0.0%   0.0%  0.0%\n        TyRawPtr          :      6  2.8%,  0.0%   0.0%  0.0%\n        TyRef             :     37 17.4%,  0.0%   0.0%  0.0%\n        TyFnDef           :     18  8.5%,  0.0%   0.0%  0.0%\n        TyFnPtr           :      7  3.3%,  0.0%   0.0%  0.0%\n        TyGenerator       :      0  0.0%,  0.0%   0.0%  0.0%\n        TyGeneratorWitness:      0  0.0%,  0.0%   0.0%  0.0%\n        TyDynamic         :      0  0.0%,  0.0%   0.0%  0.0%\n        TyClosure         :      0  0.0%,  0.0%   0.0%  0.0%\n        TyTuple           :      3  1.4%,  0.0%   0.0%  0.0%\n        TyParam           :     11  5.2%,  0.0%   0.0%  0.0%\n        TyInfer           :      1  0.5%,  0.5%   0.0%  0.0%\n        TyProjection      :      1  0.5%,  0.0%   0.0%  0.0%\n        TyAnon            :      0  0.0%,  0.0%   0.0%  0.0%\n        TyForeign         :      0  0.0%,  0.0%   0.0%  0.0%\n                    total    213         0.5%   0.0%  0.0%\n    Substs interner: #50\n    Region interner: #48\n    Stability interner: #2\n    Interpret interner: #11\n    Layout interner: #15\n    INFO 2018-04-09T11:38:56Z: rustc_trans::back::link: preparing CrateTypeExecutable to \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b\"\n    INFO 2018-04-09T11:38:56Z: rustc_trans::back::link: \"lld\" \"-flavor\" \"gnu\" \"-L\" \"C:\\\\Users\\\\djade\\\\.xargo\\\\lib\\\\rustlib\\\\x86_64-repro\\\\lib\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b.3ik0x0hz6l66cx38.rcgu.o\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b.45pc7c65foh9i35f.rcgu.o\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b.4hrpdi97o8cjelph.rcgu.o\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b.57k06xfugllsc526.rcgu.o\" \"-o\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\\\\repro-1e7ce729192ba73b\" \"--gc-sections\" \"-L\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\x86_64-repro\\\\debug\\\\deps\" \"-L\" \"C:\\\\Users\\\\djade\\\\Desktop\\\\osprojrep\\\\repro\\\\target\\\\debug\\\\deps\" \"-L\" \"C:\\\\Users\\\\djade\\\\.xargo\\\\lib\\\\rustlib\\\\x86_64-repro\\\\lib\" \"-Bstatic\" \"C:\\\\Users\\\\djade\\\\.xargo\\\\lib\\\\rustlib\\\\x86_64-repro\\\\lib\\\\libcore-fd00811e13d47697.rlib\" \"C:\\\\Users\\\\djade\\\\.xargo\\\\lib\\\\rustlib\\\\x86_64-repro\\\\lib\\\\libcompiler_builtins-95e63877493349a0.rlib\" \"-Bdynamic\"\n</code></pre>\n\n<p>A couple more things that might be of interest:</p>\n\n<ul>\n<li>Compiling with xargo for default target instead of <code>x86_64-repro</code> fails with a linker error <code>file format not recognized</code> about some object file somewhere inside <code>.xargo</code>.</li>\n<li>Compiling with cargo for default target fails with a much longer linker message regarding missing references to <code>rust_eh_personality</code>.</li>\n<li>Changing <code>main.rs</code> to <code>lib.rs</code> makes it compile successfully.</li>\n<li>Removing <code>b.store(...);</code> makes it compile successfully.</li>\n</ul>\n\n<p>So, what is this? Xargo bug? Rustc bug? Linker bug? Is my configuration wrong somewhere?</p>\n"}, {"tags": ["types", "rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1523270054, "post_id": 49730693, "comment_id": 86475235, "body": "FWIW, <code>1u32.shl(2i32)</code> works."}, {"owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "reply_to_user": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 0, "creation_date": 1523271201, "post_id": 49730693, "comment_id": 86475932, "body": "That&#39;s nice, but alas only solves my issue in the rare cases where the right-hand side is a constant."}], "answers": [{"tags": [], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "is_accepted": true, "score": 5, "last_activity_date": 1523574206, "last_edit_date": 1523574206, "creation_date": 1523355930, "answer_id": 49751227, "question_id": 49730693, "link": "https://stackoverflow.com/questions/49730693/why-is-stdopsshlshl-not-equal-to/49751227#49751227", "title": "Why is std::ops::Shl::shl not equal to &lt;&lt;?", "body": "<p>This is not a bug. The reason for this is some <a href=\"https://github.com/rust-lang/rust/blob/a1c21ed7e21642b85947ba5d030bbaeffbe377de/src/librustc_typeck/check/op.rs#L103-L110\" rel=\"nofollow noreferrer\">special binary operations handling for non (or semi-)inferred types in typeck</a>.</p>\n\n<p>A workaround is to fix the return type of the expression by using an <code>if</code>-expression where one branch is the original binary operation and the other is the mutated operation, e.g.</p>\n\n<pre><code>(if ::mutagen::now(42) {\n     ::mutagen::ShlShr::shl(left, right)\n } else {\n     left &lt;&lt; right\n })\n</code></pre>\n"}], "owner": {"reputation": 11705, "user_id": 2765603, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/WkhcQ.jpg?s=128&g=1", "display_name": "llogiq", "link": "https://stackoverflow.com/users/2765603/llogiq"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 320, "favorite_count": 1, "accepted_answer_id": 49751227, "answer_count": 1, "score": 9, "last_activity_date": 1523574206, "creation_date": 1523269309, "last_edit_date": 1523289977, "question_id": 49730693, "link": "https://stackoverflow.com/questions/49730693/why-is-stdopsshlshl-not-equal-to", "title": "Why is std::ops::Shl::shl not equal to &lt;&lt;?", "body": "<p>In <a href=\"https://github.com/llogiq/mutagen\" rel=\"nofollow noreferrer\">mutagen</a>, I use specialization to mutate\nbinary operations where possible. Basically, I replace <code>a + b</code> with\n<code>::mutagen::AddSub::add(a, b, mutation_count)</code> Alas, it fails in the presence\nof shift operations, because type inference fails.</p>\n\n<p>I've reduced the problem to a <em>very</em> simple test case:</p>\n\n<pre><code>use std::ops::Shl;\n\nfn main() {\n    println!(\"{}\", 1u32.shl(2) * 3);\n}\n</code></pre>\n\n<p>This fails with <code>error[E0277]: cannot multiply i32 to u32</code>. This appears to\nhappen because <code>std::ops::Shl</code> is implemented for all sorts of integers, and\nwhile those <code>impl</code>s always return the self type (but not Self, as I see from\nthe source), typeck may not see through them, and coming up empty, defaulting\nto <code>i32</code>. If you replace the <code>1u32.shl(2)</code> with <code>(1u32 &lt;&lt; 2)</code>, it works.</p>\n\n<p>So forwarding <code>std::ops::Shl</code>/<code>Shr</code> won't work either using a custom trait\n(as in <code>pub trait AddSub</code>) or using a wrapper type for the left-hand side of\nthe operation. In both cases, the type inference fails to see the equality of\n<code>Self</code> and <code>Self::Output</code> for integer shifts, despite knowing <code>Self</code>.</p>\n\n<p>Is this a bug? Is there a workaround? What causes it?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 15864, "user_id": 1870153, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/juCKe.png?s=128&g=1", "display_name": "ljedrz", "link": "https://stackoverflow.com/users/1870153/ljedrz"}, "edited": false, "score": 1, "creation_date": 1523264141, "post_id": 49727495, "comment_id": 86471706, "body": "Related: <a href=\"https://stackoverflow.com/questions/39595782/when-are-numeric-literals-assigned-to-default-types\">When are numeric literals assigned to default types?</a>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523295324, "post_id": 49727495, "comment_id": 86491555, "body": "<a href=\"https://stackoverflow.com/q/41996784/155423\">What is the {integer} in a compiler error message?</a>"}], "answers": [{"comments": [{"owner": {"reputation": 508, "user_id": 11950764, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8213f0ffc9106d7663c4b5f29f4ec9e5?s=128&d=identicon&r=PG", "display_name": "joe", "link": "https://stackoverflow.com/users/11950764/joe"}, "edited": false, "score": 0, "creation_date": 1567655302, "post_id": 49727599, "comment_id": 102028942, "body": "Can anyone explain why <code>|arr| arr.into_iter()</code> (instead of <code>.clone()</code>) doesn&#39;t work? I thought <code>into_iter</code> yields owned values rather than references, but that seems not to be the case?"}], "tags": [], "owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "is_accepted": true, "score": 8, "last_activity_date": 1523258841, "creation_date": 1523258841, "answer_id": 49727599, "question_id": 49727495, "link": "https://stackoverflow.com/questions/49727495/why-do-i-get-the-error-fromiteratorinteger-is-not-implemented-for-veci32/49727599#49727599", "title": "Why do I get the error FromIterator&lt;&amp;{integer}&gt; is not implemented for Vec&lt;i32&gt; when using a FlatMap iterator?", "body": "<p><code>{integer}</code> is a placeholder the compiler uses when it knows something has an integer type, but not <em>which</em> integer type.</p>\n\n<p>The problem is that you're trying to collect a sequence of \"references to integer\" into a sequence of \"integer\".  Either change to <code>Vec&lt;&amp;i32&gt;</code>, or dereference the elements in the iterator.</p>\n\n<pre><code>fn main() {\n    let arr_of_arr = [[1, 2], [3, 4]];\n    let res = arr_of_arr.iter()\n        .flat_map(|arr| arr.iter())\n        .cloned() // or `.map(|e| *e)` since `i32` are copyable\n        .collect::&lt;Vec&lt;i32&gt;&gt;();\n}\n</code></pre>\n"}], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3189, "favorite_count": 2, "accepted_answer_id": 49727599, "answer_count": 1, "score": 8, "last_activity_date": 1523295377, "creation_date": 1523258449, "last_edit_date": 1523295377, "question_id": 49727495, "link": "https://stackoverflow.com/questions/49727495/why-do-i-get-the-error-fromiteratorinteger-is-not-implemented-for-veci32", "title": "Why do I get the error FromIterator&lt;&amp;{integer}&gt; is not implemented for Vec&lt;i32&gt; when using a FlatMap iterator?", "body": "<p>Consider this snippet:</p>\n\n<pre><code>fn main() {\n    let arr_of_arr = [[1, 2], [3, 4]];\n    let res = arr_of_arr\n        .iter()\n        .flat_map(|arr| arr.iter())\n        .collect::&lt;Vec&lt;i32&gt;&gt;();\n}\n</code></pre>\n\n<p>The compiler error is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::vec::Vec&lt;i32&gt;: std::iter::FromIterator&lt;&amp;{integer}&gt;` is not satisfied\n --&gt; src/main.rs:6:10\n  |\n6 |         .collect::&lt;Vec&lt;i32&gt;&gt;();\n  |          ^^^^^^^ a collection of type `std::vec::Vec&lt;i32&gt;` cannot be built from an iterator over elements of type `&amp;{integer}`\n  |\n  = help: the trait `std::iter::FromIterator&lt;&amp;{integer}&gt;` is not implemented for `std::vec::Vec&lt;i32&gt;`\n</code></pre>\n\n<p>Why does this snippet not compile?</p>\n\n<p>In particular, I'm not able to understand the error messages: what type represents <code>&amp;{integer}</code>? </p>\n"}, {"tags": ["python", "python-3.x", "rust", "pytorch", "tensor"], "answers": [{"tags": [], "owner": {"reputation": 2696, "user_id": 366553, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/5a07b05ddc37550d0dd6311c4a4c31ca?s=128&d=identicon&r=PG", "display_name": "Peteris", "link": "https://stackoverflow.com/users/366553/peteris"}, "is_accepted": true, "score": 5, "last_activity_date": 1540027416, "last_edit_date": 1540027416, "creation_date": 1523281832, "answer_id": 49734613, "question_id": 49724954, "link": "https://stackoverflow.com/questions/49724954/how-are-pytorchs-tensors-implemented/49734613#49734613", "title": "How are PyTorch&#39;s tensors implemented?", "body": "<h2>Contiguous array</h2>\n\n<p>The commonly used way to store such data is in a single array that is laid out as a single, contiguous block within memory. More concretely, a 3x3x3 tensor would be stored simply as a single array of 27 values, one after the other. </p>\n\n<p>The only place where the dimensions are used is to calculate the mapping between the (many) coordinates and the offset within that array. For example, to fetch the item <code>[3, 1, 1]</code> you would need to know if it is a 3x3x3 matrix, a 9x3x1 matrix, or a 27x1x1 matrix - in all cases the \"storage\" would be 27 items long, but the interpretation of \"coordinates\" would be different. If you use zero-based indexing, the calculation is trivial, but you need to know the length of each dimension.</p>\n\n<p>This does mean that resizing and similar operations may require copying the whole array, but that's ok, you trade off the performance of those (rare) operations to gain performance for the much more common operations, e.g. sequential reads.</p>\n"}, {"tags": [], "owner": {"reputation": 16445, "user_id": 1648033, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/9ebc39951f074abef926aa636ed33cd1?s=128&d=identicon&r=PG", "display_name": "chthonicdaemon", "link": "https://stackoverflow.com/users/1648033/chthonicdaemon"}, "is_accepted": false, "score": 4, "last_activity_date": 1524196065, "last_edit_date": 1524196065, "creation_date": 1524157835, "answer_id": 49926627, "question_id": 49724954, "link": "https://stackoverflow.com/questions/49724954/how-are-pytorchs-tensors-implemented/49926627#49926627", "title": "How are PyTorch&#39;s tensors implemented?", "body": "<p>PyTorch stores its tensors by default in dense format. According to <a href=\"http://pytorch.org/docs/master/tensors.html\" rel=\"nofollow noreferrer\">the docs</a>,</p>\n\n<blockquote>\n  <p>Each tensor has an associated torch.Storage, which holds its data. The\n  tensor class provides multi-dimensional, strided view of a storage and\n  defines numeric operations on it.</p>\n</blockquote>\n\n<p>As you may imagine, when storing large tensors with many zeros, it is a very inefficient use of memory to store all the values. Therefore, PyTorch also supplies <a href=\"http://pytorch.org/docs/master/sparse.html\" rel=\"nofollow noreferrer\">sparse tensors</a>. From that page:</p>\n\n<blockquote>\n  <p>Torch supports sparse tensors in COO(rdinate) format, which can\n  efficiently store and process tensors for which the majority of\n  elements are zeros.</p>\n</blockquote>\n\n<p>If you are interested in the trade-offs between different sparse formats, it may be useful to start with the vast literature which exists on storing <a href=\"https://en.wikipedia.org/wiki/Sparse_matrix\" rel=\"nofollow noreferrer\">sparse matrices</a>. Many of the techniques used for matrices (which are effectively rank 2 tensors) translate to multiple dimensions. <a href=\"http://groups.csail.mit.edu/commit/papers/2016/parker-thesis.pdf\" rel=\"nofollow noreferrer\">This masters dissertation</a> goes into considerable detail about the implementation of sparse tensors specifically.</p>\n\n<p>The summary of the Wikipedia link as well as the dissertation is </p>\n\n<ul>\n<li><p>Formats which are easy to specify and modify are often computationally inefficient, therefore sparse structures are often constructed using one specification but stored in another</p></li>\n<li><p>It is important to choose a storage format which aligns with your expected usage. For instance, matrix-matrix multiplication requires efficient column access, while matrix-vector multiplication requires efficient row access.</p></li>\n</ul>\n\n<p>Lastly, I recommend looking at <a href=\"https://github.com/vbarrielle/sprs\" rel=\"nofollow noreferrer\">sprs</a> for a good sparse matrix library for Rust. It may be a good place to start when looking to extend to multiple dimensions.</p>\n"}], "owner": {"reputation": 718, "user_id": 5476495, "user_type": "registered", "accept_rate": 62, "profile_image": "https://i.stack.imgur.com/HmZ5k.png?s=128&g=1", "display_name": "RyanM", "link": "https://stackoverflow.com/users/5476495/ryanm"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1163, "favorite_count": 0, "accepted_answer_id": 49734613, "answer_count": 2, "score": 14, "last_activity_date": 1540027416, "creation_date": 1523242743, "last_edit_date": 1540027213, "question_id": 49724954, "link": "https://stackoverflow.com/questions/49724954/how-are-pytorchs-tensors-implemented", "title": "How are PyTorch&#39;s tensors implemented?", "body": "<p>I am building my own Tensor class in Rust, and I am trying to make it like PyTorch's implementation. </p>\n\n<p><em>What is the most efficient way to store tensors programmatically, but, specifically, in a strongly typed language like Rust?</em> <em>Are there any resources that provide good insights into how this is done?</em></p>\n\n<p>I am currently building a contiguous array, so that, given dimensions of <code>3 x 3 x 3</code>, my array would just have <code>3^3</code> elements in it, which would represent the tensor. However, this does make some of the mathematical operations and manipulations of the array harder.</p>\n\n<p>The dimension of the tensor should be dynamic, so that I could have a tensor with <code>n</code> dimensions.</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1523240372, "post_id": 49723779, "comment_id": 86463323, "body": "<i>Or simply because semantic versioning often cannot be relied upon - a symptom of the chronic issue of pre-1.0.0 packages in Rust.</i> These two statements are not related to each other. If you don&#39;t believe in semantic versioning or humans ability to follow it, then the fact that a crate is pre- or post-1.0 will have no bearing whatsoever."}, {"owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523256587, "post_id": 49723779, "comment_id": 86467771, "body": "Sure - pre-1.0.0, packages are explicitly volatile. However, this means that 90% of the packages in my Cargo.lock can/should not be automatically updated. Perhaps I should&#39;ve said &quot;...because semantic versioning guarantees are often unavailable&quot;."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 2, "creation_date": 1523258075, "post_id": 49723779, "comment_id": 86468495, "body": "Actually, semver as followed by Cargo provides versioning guarantees for pre-1.0 versions just fine.  If the major version is 0, then changing the minor version is considered breaking.  If that&#39;s also 0, then changing the revision number is considered breaking.  Pre-1.0 semver is just regular semver with the digits shifted over."}, {"owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1523275749, "post_id": 49723779, "comment_id": 86478813, "body": "@DK thanks for pointing that out. It even alludes to this in <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#the-version-field\" rel=\"nofollow noreferrer\">the book</a> :)"}], "answers": [{"comments": [{"owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "edited": false, "score": 0, "creation_date": 1523257196, "post_id": 49724673, "comment_id": 86468048, "body": "Thanks - I was unaware of <code>--precise.</code>. Re: the code working just fine, version 0.5.0 was broken, and 0.5.1 was released about an hour after I posted this question!"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1523241770, "last_edit_date": 1523241770, "creation_date": 1523239980, "answer_id": 49724673, "question_id": 49723779, "link": "https://stackoverflow.com/questions/49723779/can-i-force-the-use-of-my-dependencies-cargo-lock-when-resolving-package-versio/49724673#49724673", "title": "Can I force the use of my dependencies&#39; Cargo.lock when resolving package versions?", "body": "<p>No, you cannot use a library's Cargo.lock.</p>\n\n<blockquote>\n  <p>as it uses some structures from bson to interact with mongodb.</p>\n</blockquote>\n\n<p>This is the root problem. Currently, it's unknown to the dependency resolver that one crate has exposed another crate's types in a public interface. That will be addressed when <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1977-public-private-dependencies.md\" rel=\"nofollow noreferrer\">RFC 1977</a> is implemented.</p>\n\n<p>As described in <a href=\"https://stackoverflow.com/q/38574874/155423\">Consolidating cargo dependencies</a>, you can nudge the version of the dependency to be consolidated:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo update -p bson:0.11.1 --precise 0.10.0\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38574874/155423\">Consolidating cargo dependencies</a></li>\n<li><a href=\"https://stackoverflow.com/q/27770031/155423\">Set specific version of the dependency of a project&#39;s dependency in Cargo.toml or Cargo.lock</a></li>\n</ul>\n\n<hr>\n\n<p>That being said, <em>because</em> of semver, your code works just fine:</p>\n\n<p></p>\n\n<pre><code>[dependencies]\nwither = \"0.5.1\"\nmongodb = \"0.3.7\"\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo tree --invert -p bson\nbson v0.10.0\n\u251c\u2500\u2500 mongodb v0.3.7\n\u2502   \u251c\u2500\u2500 example v0.1.0 (file:///private/tmp/example)\n\u2502   \u2514\u2500\u2500 wither v0.5.1\n\u2502       \u2514\u2500\u2500 example v0.1.0 (file:///private/tmp/example) (*)\n</code></pre>\n\n<blockquote>\n  <p>Seemingly unavoidably, bson 0.10.0 is used for mongodb, and bson 0.11.1 is used for wither. </p>\n</blockquote>\n\n<p>This is not the case, as you can tell by (a) the example above and (b) your own statements about the acceptable version ranges.</p>\n"}], "owner": {"reputation": 21, "user_id": 691695, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/06b6020832a347423b829dd58353111d?s=128&d=identicon&r=PG", "display_name": "Toby Dimmick", "link": "https://stackoverflow.com/users/691695/toby-dimmick"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1122, "favorite_count": 0, "accepted_answer_id": 49724673, "answer_count": 1, "score": 1, "last_activity_date": 1523360811, "creation_date": 1523229906, "last_edit_date": 1523360811, "question_id": 49723779, "link": "https://stackoverflow.com/questions/49723779/can-i-force-the-use-of-my-dependencies-cargo-lock-when-resolving-package-versio", "title": "Can I force the use of my dependencies&#39; Cargo.lock when resolving package versions?", "body": "<p>The <a href=\"https://doc.rust-lang.org/cargo/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries\" rel=\"nofollow noreferrer\">Cargo FAQ states</a> that <code>Cargo.lock</code> is not used for libraries, instead using dependency version ranges found in <code>Cargo.toml</code>, to reduce lib duplication among shared dependencies.</p>\n\n<p>However, I think there are instances where using a known successful build of a lib dependency is preferable. Namely, when a dependency no longer builds due to updates of its <em>own</em> dependencies.</p>\n\n<p>Is it possible to configure Cargo to favour a library's <code>Cargo.lock</code>, over <code>Cargo.toml</code>, if it's available? Preferably on a by-package basis.</p>\n\n<hr>\n\n<p>(<strong>Update</strong>: the issue below has been fixed in wither 0.5.1, where the dependency is now <code>mongodb = \"0.10.*\"</code>. However, it seems that this issue would re-appear if mongodb updates its bson dependency - at least until wither's dependencies are updated once again to match. Or, as @Shepmaster mentions in his answer, until <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1977-public-private-dependencies.md\" rel=\"nofollow noreferrer\">RFC 1977</a> is implemented.)</p>\n\n<p>My particular situation is trying to use the package <a href=\"https://docs.rs/wither/0.5.0/wither/index.html\" rel=\"nofollow noreferrer\">wither 0.5.0</a>:</p>\n\n<ul>\n<li>wither's <code>Cargo.toml</code> specifies dependencies <code>mongodb = \"&lt;1.0\"</code> and <code>bson = \"&lt;1.0\"</code></li>\n<li>mongodb's <code>Cargo.toml</code> specifies <code>bson = \"0.10.0\"</code></li>\n<li>bson's latest version is at <code>0.11.1</code></li>\n</ul>\n\n<p>Without configuring dependencies further, <code>bson 0.10.0</code> is used for mongodb, and <code>bson 0.11.1</code> is used for wither. This causes compilation of wither to fail, as it uses some structures from bson to interact with mongodb.</p>\n\n<p>My current workaround is a locally-cloned copy of wither, with an edited <code>Cargo.toml</code> to fix its version of bson. However, the <a href=\"https://github.com/thedodd/wither\" rel=\"nofollow noreferrer\">git repository</a> includes a committed <code>Cargo.lock</code>, which would allow me at least to use this repository as my dependency target, rather than cloning and modifying the package myself.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523221038, "post_id": 49722434, "comment_id": 86458810, "body": "Whether this is a bug or a feature, you might want to open an issue about the error message, because it is quite confusing."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523221063, "post_id": 49722434, "comment_id": 86458820, "body": "@mcarton Indeed, I think I will."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523222087, "post_id": 49722434, "comment_id": 86459115, "body": "@Shepmaster Wow, that&#39;s even more bizzare."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523222952, "post_id": 49722434, "comment_id": 86459404, "body": "@Shepmaster I added a note about it. I could just rewrite the whole question to concern that case, but I&#39;m not sure if it would be bad etiquette. Also, it may potentially make the question harder to find for people who had my problem."}, {"owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "reply_to_user": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "edited": false, "score": 0, "creation_date": 1523223865, "post_id": 49722434, "comment_id": 86459712, "body": "Proceeding on the assumption that this is a compiler bug, I&#39;ve opened an issue: <a href=\"https://github.com/rust-lang/rust/issues/49793\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/49793</a>."}], "answers": [{"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 0, "last_activity_date": 1523278161, "creation_date": 1523278161, "answer_id": 49733389, "question_id": 49722434, "link": "https://stackoverflow.com/questions/49722434/why-am-i-not-allowed-to-transmute-a-value-containing-a-traits-associated-type/49733389#49733389", "title": "Why am I not allowed to transmute a value containing a trait&#39;s associated type?", "body": "<p>It seems that for <code>transmute</code> size compatibility can't be verified at compile time for generic T values: so you have to use &amp;T references:</p>\n\n<pre><code>unsafe fn change_t&lt;B: Bar&gt;(foo: &amp;B::Baz) -&gt; &amp;B::Baz {\n    ::std::mem::transmute(foo)\n}\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/30328366/pointer-stashing-generics-via-memtransmute\">This related question</a> contains some interesting details about <code>transmuting</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 121, "user_id": 7487146, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/E4wJD.png?s=128&g=1", "display_name": "Denis Kotlyarov", "link": "https://stackoverflow.com/users/7487146/denis-kotlyarov"}, "is_accepted": false, "score": 0, "last_activity_date": 1567277996, "creation_date": 1567277996, "answer_id": 57740882, "question_id": 49722434, "link": "https://stackoverflow.com/questions/49722434/why-am-i-not-allowed-to-transmute-a-value-containing-a-traits-associated-type/57740882#57740882", "title": "Why am I not allowed to transmute a value containing a trait&#39;s associated type?", "body": "<p><strong>I think</strong> the question is old, but always relevant.</p>\n\n<p>I released a library that solves your question, but it requires a nightly compiler. Give it a try.</p>\n\n<p>=======</p>\n\n<p><strong>crates:</strong> <a href=\"https://crates.io/crates/cluFullTransmute\" rel=\"nofollow noreferrer\">https://crates.io/crates/cluFullTransmute</a></p>\n\n<p><strong>git:</strong> <a href=\"https://github.com/clucompany/cluFullTransmute\" rel=\"nofollow noreferrer\">https://github.com/clucompany/cluFullTransmute</a></p>\n"}], "owner": {"reputation": 2244, "user_id": 1825860, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/b9e1d70a0cbe81683a016e700d3239bf?s=128&d=identicon&r=PG", "display_name": "AlphaModder", "link": "https://stackoverflow.com/users/1825860/alphamodder"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 342, "favorite_count": 1, "answer_count": 2, "score": 4, "last_activity_date": 1567277996, "creation_date": 1523219217, "last_edit_date": 1523223106, "question_id": 49722434, "link": "https://stackoverflow.com/questions/49722434/why-am-i-not-allowed-to-transmute-a-value-containing-a-traits-associated-type", "title": "Why am I not allowed to transmute a value containing a trait&#39;s associated type?", "body": "<p>I have a type defined as follows (by another crate): </p>\n\n<pre><code>trait Bar {\n    type Baz;\n}\n\nstruct Foo&lt;B: Bar, T&gt; {\n    baz: B::Baz,\n    t: ::std::marker::PhantomData&lt;T&gt;\n}\n</code></pre>\n\n<p>The type parameter <code>T</code> serves to encode some data at compile-time, and no instances of it will ever exist.</p>\n\n<p>I would like to store a number of <code>Foo</code>s, all with the same <code>B</code>, but with different <code>T</code>s, in a <code>Vec</code>. Any time I am adding to or removing from this <code>Vec</code> I will know the proper <code>T</code> for the item in question by other means.</p>\n\n<p>I know I could have a <code>Vec&lt;Box&lt;Any&gt;&gt;</code>, but do not want to incur the overhead of dynamic dispatch here.</p>\n\n<p>I decided to make it a <code>Vec&lt;Foo&lt;B, ()&gt;&gt;</code>, and transmute to the proper type whenever necessary. However, to my surprise, a function like the following is not allowed:</p>\n\n<pre><code>unsafe fn change_t&lt;B: Bar, T, U&gt;(foo: Foo&lt;B, T&gt;) -&gt; Foo&lt;B, U&gt; {\n    ::std::mem::transmute(foo)\n}\n</code></pre>\n\n<p>This gives the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0512]: transmute called with types of different sizes\n  --&gt; src/main.rs:13:5\n   |\n13 |     ::std::mem::transmute(foo)\n   |     ^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: source type: Foo&lt;B, T&gt; (size can vary because of &lt;B as Bar&gt;::Baz)\n   = note: target type: Foo&lt;B, U&gt; (size can vary because of &lt;B as Bar&gt;::Baz)\n</code></pre>\n\n<p>I find this very confusing, as both types have the same <code>B</code>, so their <code>B::Baz</code>es must also be the same, and the type <code>T</code> should not affect the type's layout whatsoever. Why is this not allowed?</p>\n\n<p>It's been brought it to my attention that this sort of <code>transmute</code> results in an error even when the type parameter <code>T</code> is not present at all! </p>\n\n<pre><code>trait Bar {\n    type Baz;\n}\n\nstruct Foo&lt;B: Bar&gt; {\n    baz: B::Baz,\n}\n\nunsafe fn change_t&lt;B: Bar&gt;(foo: B::Baz) -&gt; B::Baz {\n    ::std::mem::transmute(foo)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0fb6d491bc15f9b5e191f6b8a93ef2d5&amp;version=stable\" rel=\"nofollow noreferrer\">playground</a></p>\n\n<p>Bizarrely, it is not possible to translate even between <code>B::Baz</code> and <code>B::Baz</code>. Unless there is some extremely subtle reasoning that makes this unsafe, this seems very much like a compiler bug. </p>\n"}, {"tags": ["json", "rust", "serde"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523192188, "post_id": 49717966, "comment_id": 86448934, "body": "You must use a <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"nofollow noreferrer\">hashmap</a>"}, {"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 1, "creation_date": 1523201243, "post_id": 49717966, "comment_id": 86451826, "body": "@Stargateur No, any associative container like <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"nofollow noreferrer\"><code>BTreeMap</code></a> can be used. You can even implement one on your own. See the docs <a href=\"https://serde.rs/impl-serialize.html#serializing-a-sequence-or-map\" rel=\"nofollow noreferrer\">here</a> and <a href=\"https://serde.rs/impl-deserialize.html\" rel=\"nofollow noreferrer\">here</a>."}], "answers": [{"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 7, "last_activity_date": 1531493441, "last_edit_date": 1531493441, "creation_date": 1523201084, "answer_id": 49719480, "question_id": 49717966, "link": "https://stackoverflow.com/questions/49717966/how-to-deserialize-a-strongly-typed-json-dictionary-in-serde/49719480#49719480", "title": "How to (de)serialize a strongly typed JSON dictionary in Serde?", "body": "<p>You have a logic error in your code. The structure in your JSON file describes an associative array but your <code>Dictionary</code> does not support multiple key-value-pairs. As <a href=\"https://stackoverflow.com/questions/49717966/how-to-deserialize-a-strongly-typed-json-dictionary-in-serde#comment86448934_49717966\">Stargateur stated in the comments</a>, you may use <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a> as  <code>Serde</code> has <code>Serialize</code> and <code>Deserialize</code> implementations for <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a>.</p>\n\n<p>Instead of using a single key-value-pair, you can rewrite your <code>Dictionary</code> as</p>\n\n<pre><code>type Dictionary = HashMap&lt;String, DictionaryValue&gt;;\n</code></pre>\n\n<p>and you can retrieve the data for example by</p>\n\n<pre><code>let dict: Dictionary = serde_json::from_str(json_string).unwrap();\n</code></pre>\n\n<p>If you now want to wrap everything in a <code>Dictionary</code>-struct it will look like this: </p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Dictionary {\n    inner: HashMap&lt;String, DictionaryValue&gt;,\n}\n</code></pre>\n\n<p>The problem is, that <code>serde_json</code> now expects </p>\n\n<pre><code>{\n  \"inner\": {\n    \"foo\" : { \"data\" : 42 },\n    \"bar\" : { \"data\" : 1337 }\n  }\n}\n</code></pre>\n\n<p>To get rid of this, you can add the <code>serde(flatten)</code> <a href=\"https://serde.rs/attributes.html\" rel=\"noreferrer\">attribute</a> to <code>Dictionary</code>:</p>\n\n<pre><code>#[derive(Serialize, Deserialize, Debug)]\nstruct Dictionary {\n    #[serde(flatten)]\n    inner: HashMap&lt;String, DictionaryValue&gt;,\n}\n</code></pre>\n\n<p>If <a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noreferrer\"><code>HashMap</code></a> or any <a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"noreferrer\"><code>BTreeMap</code></a> from <code>std</code> does not fit your needs, you can also implement your <code>Dictionary</code> on your own. See the docs <a href=\"https://serde.rs/impl-serialize.html#serializing-a-sequence-or-map\" rel=\"noreferrer\">here</a> and <a href=\"https://serde.rs/impl-deserialize.html\" rel=\"noreferrer\">here</a> for more details.</p>\n"}], "owner": {"reputation": 368, "user_id": 5148606, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/nQY2e.png?s=128&g=1", "display_name": "Filippo Costa", "link": "https://stackoverflow.com/users/5148606/filippo-costa"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2227, "favorite_count": 0, "accepted_answer_id": 49719480, "answer_count": 1, "score": 3, "last_activity_date": 1531493441, "creation_date": 1523191593, "last_edit_date": 1523208746, "question_id": 49717966, "link": "https://stackoverflow.com/questions/49717966/how-to-deserialize-a-strongly-typed-json-dictionary-in-serde", "title": "How to (de)serialize a strongly typed JSON dictionary in Serde?", "body": "<p>I am writing a Rust application that handles JSON messages from a TypeScript client with a public interface. I have written some code using <code>serde_derive</code> and it works well, but I can't figure out how to implement dictionaries; e.g.:</p>\n\n<pre><code>{\n  \"foo\" : { \"data\" : 42 },\n  \"bar\" : { \"data\" : 1337 }\n}\n</code></pre>\n\n<p>Here the keys are the strings <code>\"foo\"</code> and <code>\"bar\"</code> and the dictionary's values follow this schema:</p>\n\n<pre><code>use serde_derive;\nuse serde_json::Number;\n\n#[derive(Serialize, Deserialize)]\nstruct DictionaryValue {\n    data: Number,\n}\n</code></pre>\n\n<p>I am looking to access the JSON data in this manner:</p>\n\n<pre><code>#[derive(Serialize, Deserialize)]\nstruct Dictionary {\n    key: String,\n    value: DictionaryValue,\n}\n</code></pre>\n\n<p>How can I (de)serialize my JSON data into/from <code>Dictionary</code> using Serde?</p>\n"}, {"tags": ["rust", "ffi"], "comments": [{"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1523206652, "post_id": 49717806, "comment_id": 86453735, "body": "I&#39;m not able to reproduce your problem (for me it works). Could I ask how do you defined the FFI for t()?"}, {"owner": {"reputation": 323, "user_id": 3624854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ythYB.png?s=128&g=1", "display_name": "pearzl", "link": "https://stackoverflow.com/users/3624854/pearzl"}, "reply_to_user": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1523207367, "post_id": 49717806, "comment_id": 86454006, "body": "@attdona <code>extern { fn t(data: libc::uint8_t);}</code>, and I use a build.rs to compile it to static lib."}, {"owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "edited": false, "score": 0, "creation_date": 1523217369, "post_id": 49717806, "comment_id": 86457588, "body": "Try <code>extern &quot;C&quot; { fn t(data: *mut u8); }</code>"}], "answers": [{"comments": [{"owner": {"reputation": 323, "user_id": 3624854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ythYB.png?s=128&g=1", "display_name": "pearzl", "link": "https://stackoverflow.com/users/3624854/pearzl"}, "edited": false, "score": 0, "creation_date": 1523207955, "post_id": 49718329, "comment_id": 86454211, "body": "Thanks, that make sense.But I still have a question. I find some detail on internet about the temporary thing, and I found this: <a href=\"https://github.com/rust-lang/rust/issues/37970#event-870309062\" rel=\"nofollow noreferrer\">temporary variable</a>. It looks like the same problem as mine, why my compiler didn&#39;t  give any error message?  my rustc is &#183;rustc 1.23.0 (766bd11c8 2018-01-01)&#183;"}, {"owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "reply_to_user": {"reputation": 323, "user_id": 3624854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ythYB.png?s=128&g=1", "display_name": "pearzl", "link": "https://stackoverflow.com/users/3624854/pearzl"}, "edited": false, "score": 0, "creation_date": 1523208059, "post_id": 49718329, "comment_id": 86454249, "body": "Because that\u2019s a reference, but you have a raw pointer here. This is exactly why doing this is unsafe!"}], "tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": true, "score": 1, "last_activity_date": 1523193896, "creation_date": 1523193896, "answer_id": 49718329, "question_id": 49717806, "link": "https://stackoverflow.com/questions/49717806/modifying-content-in-c-function-with-rust-data-produces-unknown-values/49718329#49718329", "title": "Modifying content in C function with Rust data produces unknown values", "body": "<p>I <em>believe</em> what is happening here is</p>\n\n<p><code>let data = Vec::with_capacity(1024).as_mut_ptr();</code></p>\n\n<p>This is ends up producing undefined behavior. Here, the <code>Vec&lt;T&gt;</code> is temporary, and so will deallocate its memory after this line runs, so you're passing in a bad pointer to the C.</p>\n\n<p>That you get different results when moving code around also seems to imply there's UB here.</p>\n"}], "owner": {"reputation": 323, "user_id": 3624854, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ythYB.png?s=128&g=1", "display_name": "pearzl", "link": "https://stackoverflow.com/users/3624854/pearzl"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 60, "favorite_count": 0, "accepted_answer_id": 49718329, "answer_count": 1, "score": 0, "last_activity_date": 1523209277, "creation_date": 1523190427, "last_edit_date": 1523209277, "question_id": 49717806, "link": "https://stackoverflow.com/questions/49717806/modifying-content-in-c-function-with-rust-data-produces-unknown-values", "title": "Modifying content in C function with Rust data produces unknown values", "body": "<p>I'm trying to call a C function in Rust, and I met a strange problem. This code reproduces my problem:</p>\n\n<p>C </p>\n\n<pre class=\"lang-c prettyprint-override\"><code>int t(uint8_t *data){\n    *data = 1;\n    *(data+1) = 2;\n    *(data+2) = 3;\n}\n</code></pre>\n\n\n\n<pre><code>// block1\nunsafe {\n    let data = Vec::with_capacity(1024).as_mut_ptr();\n    t(data);\n    println!(\"{:?}\", Vec::from_raw_parts(data, 4, 4));\n}\n\n// block2\nunsafe {\n    let mut data: Vec&lt;u8&gt; = Vec::with_capacity(1024);\n    let pdata = data.as_mut_ptr();\n    t(pdata);\n    println!(\"{:?}\", Vec::from_raw_parts(pdata, 4, 4));\n}\n</code></pre>\n\n<p>I expect the output to be <code>[1, 2, 3, 0]</code>.</p>\n\n<p>Only \"block2\" works, \"block1\" outputs <code>[91, 57, 49, 44]</code>. I have no idea where that comes from.</p>\n\n<p>The most confusing thing is that when I put \"block1\" after \"block2\" and run them together, they both output <code>[1, 2, 3, 0]</code> correctly.</p>\n\n<p>What didn't I notice? What's the difference between two blocks?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 97030, "user_id": 189205, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c60305494593d556e57a3cf8e4a8c163?s=128&d=identicon&r=PG", "display_name": "interjay", "link": "https://stackoverflow.com/users/189205/interjay"}, "edited": false, "score": 2, "creation_date": 1523183535, "post_id": 49716865, "comment_id": 86446807, "body": "They are <a href=\"https://doc.rust-lang.org/book/second-edition/ch05-01-defining-structs.html#tuple-structs-without-named-fields-to-create-different-types\" rel=\"nofollow noreferrer\">Tuple structs</a>."}], "answers": [{"comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 6, "creation_date": 1523193572, "post_id": 49718206, "comment_id": 86449324, "body": "Inconveniently enough, a color is a bad example of a tuple struct :) Since it could be RGB, HSV, HSL, or any other 3-component encoding. But point taken."}], "tags": [], "owner": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "is_accepted": true, "score": 11, "last_activity_date": 1589727957, "last_edit_date": 1589727957, "creation_date": 1523193087, "answer_id": 49718206, "question_id": 49716865, "link": "https://stackoverflow.com/questions/49716865/what-are-structs-with-round-brackets-in-rust-for/49718206#49718206", "title": "What are structs with round brackets in Rust for?", "body": "<p>As pointed out in the comments, those are <a href=\"https://doc.rust-lang.org/book/ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\" rel=\"noreferrer\">Tuple Structs</a>. They are useful when you want to distinguish one tuple from others, but naming each of its fields would be redundant or needlessly verbose. In other words you clarify the purpose of a tuple by naming it.</p>\n\n<p>Tuple structs can be used to create a simple value objects.</p>\n\n<pre><code>struct Color(i32, i32, i32);\n\nlet black = Color(0, 0, 0);\n</code></pre>\n"}], "owner": {"reputation": 4710, "user_id": 2281274, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/sHobc.gif?s=128&g=1", "display_name": "George Shuklin", "link": "https://stackoverflow.com/users/2281274/george-shuklin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 807, "favorite_count": 0, "accepted_answer_id": 49718206, "answer_count": 1, "score": 9, "last_activity_date": 1589727957, "creation_date": 1523183140, "last_edit_date": 1523209016, "question_id": 49716865, "link": "https://stackoverflow.com/questions/49716865/what-are-structs-with-round-brackets-in-rust-for", "title": "What are structs with round brackets in Rust for?", "body": "<p>I found a language construct I don't understand:</p>\n\n<pre><code>pub struct OpenOptions(fs_imp::OpenOptions);\n</code></pre>\n\n<p>I even created a compilable piece of code with those brackets but I still couldn't understand it:</p>\n\n<pre><code>struct Foo {\n    bar: i32,\n}\n\nstruct Baz(Foo);\n\nfn main() {\n    let mut x: Baz = Baz(Foo{ bar: 3 });\n}\n</code></pre>\n\n<p>What are those round brackets for?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": true, "score": 1, "last_activity_date": 1523144525, "creation_date": 1523144525, "answer_id": 49713044, "question_id": 49712872, "link": "https://stackoverflow.com/questions/49712872/refactoring-to-workspace-structure-causes-extern-crate-imports-to-not-work/49713044#49713044", "title": "Refactoring to workspace structure causes extern crate imports to not work", "body": "<p>In <code>workspace_test/Cargo.toml</code> you create a package with the binary <code>root</code>. If you execute <code>cargo run</code>, it runs the <code>main.rs</code>, but since you didn't state the dependencies in this manifest file, the error occurs. The dependency is only specified in <code>workspace_test/root/Cargo.toml</code>, which is not used at this point.</p>\n\n<p>I assume you want to use the workspaces proposed by the RFC. You can create a workspace with virtual manifests, which must neither specify a <code>[package]</code> nor <code>[[bin]]</code>, so just remove them. <code>workspace_test/Cargo.toml</code> now looks like this:</p>\n\n<pre><code>[workspace]\nmembers = [\n    \"root\"\n]\n</code></pre>\n\n<p>If you only have one executable, you can now pass the package: <code>-p/--package</code></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo run -p root\n</code></pre>\n\n<p>or specify the manifest path manually:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo run --manifest-path root/Cargo.toml\n</code></pre>\n\n<p>If <code>root/Cargo.toml</code> contains multiple targets, you can just append the <code>--lib</code> or <code>--bin</code> flags as usual. E.g. this would execute the <code>abc</code>-binary specified in <code>workspace_test/root/Cargo.toml</code>:</p>\n\n<pre><code>cargo run -p root --bin abc\n</code></pre>\n"}], "owner": {"reputation": 1003, "user_id": 4957011, "user_type": "registered", "accept_rate": 82, "profile_image": "https://lh3.googleusercontent.com/-qCvohWQdhyo/AAAAAAAAAAI/AAAAAAAAAyc/5cVJx4KgEFE/photo.jpg?sz=128", "display_name": "Phoenix", "link": "https://stackoverflow.com/users/4957011/phoenix"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 554, "favorite_count": 0, "accepted_answer_id": 49713044, "answer_count": 1, "score": 0, "last_activity_date": 1523144525, "creation_date": 1523142528, "question_id": 49712872, "link": "https://stackoverflow.com/questions/49712872/refactoring-to-workspace-structure-causes-extern-crate-imports-to-not-work", "title": "Refactoring to workspace structure causes extern crate imports to not work", "body": "<p>I need different parts of my project to use different versions of the same extern crate so I'm refactoring my Rust project to be divided into multiple packages via the workspaces system using <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1525-cargo-workspace.md\" rel=\"nofollow noreferrer\">this</a> as a guide. Doing so is causing all my pub extern crate imports to not work.</p>\n\n<p>This post is very similar to one I created very recently and then deleted - this version contains a minimal, complete, and verifiable example.</p>\n\n<p>Here's my project structure</p>\n\n<pre><code>workspace_test/\n  root/\n    src/\n      main.rs\n    Cargo.toml\n  Cargo.toml\n</code></pre>\n\n<p>workspace_test/Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"workspace_test\"\nversion = \"0.1.0\"\nauthors = [\"Phoenix &lt;kahlo.phoenix@gmail.com&gt;\"]\n\n[workspace]\nmembers = [\n    \"root\"\n]\n\n[[bin]]\nname = \"root\"\npath = \"root/src/main.rs\"\n</code></pre>\n\n<p>workspace_test/root/Cargo.toml:</p>\n\n<pre><code>[package]\nname = \"root\"\nversion = \"0.1.0\"\nauthors = [\"Phoenix &lt;kahlo.phoenix@gmail.com&gt;\"]\n\n[dependencies]\ntime = \"0.1\"\n</code></pre>\n\n<p>workspace_test/root/src/main.rs:</p>\n\n<pre><code>pub extern crate time;\n\nfn main() {\n    println!(\"Hello, world!\");\n}\n</code></pre>\n\n<p><a href=\"https://github.com/gretchenfrage/ws_problem\" rel=\"nofollow noreferrer\">This is also on github</a>, so it can easily be cloned and <code>cargo run</code>'d.</p>\n\n<p>This is the error:</p>\n\n<pre><code>error[E0463]: can't find crate for `time`\n --&gt; root/src/main.rs:1:1\n  |\n1 | pub extern crate time;\n  | ^^^^^^^^^^^^^^^^^^^^^^ can't find crate\n\nerror: aborting due to previous error\n\nerror: Could not compile `workspace_test`.\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1523135819, "post_id": 49711836, "comment_id": 86437642, "body": "<code>&amp;vec![...</code> needlessly allocates memory here. You can just use <code>&amp;[...</code>."}, {"owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523136422, "post_id": 49711836, "comment_id": 86437803, "body": "@Shepmaster I haven&#39;t added a <code>where std::borrow::Cow&lt;&#39;_, str&gt;: std::convert::From&lt;&amp;T&gt;</code> because it basically states that I want the std lib type Cow to implement From&lt;&amp;T&gt;. If that&#39;s not already the case then my adding the constraint won&#39;t help.  Thanks for the <code>&amp;vec![]</code> hint!"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 3, "last_activity_date": 1523137341, "creation_date": 1523137341, "answer_id": 49712239, "question_id": 49711836, "link": "https://stackoverflow.com/questions/49711836/handling-collections-of-stdborrowcow/49712239#49712239", "title": "Handling collections of std::borrow::Cow", "body": "<p>Your code cannot be made generic <em>because it doesn't work in the non-generic case</em> to start with. Substitute the concrete type in:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn encode_text&lt;'a, T: Into&lt;Cow&lt;'a, str&gt;&gt;&gt;(text: T) {}\n\nfn encode_texts(texts: &amp;[&amp;'static str]) {\n    for text in texts {\n        encode_text(text);\n    }\n}\n\nfn main() {\n    encode_texts(&amp;[\"foo\", \"bar\"]);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::borrow::Cow&lt;'_, str&gt;: std::convert::From&lt;&amp;&amp;str&gt;` is not satisfied\n --&gt; src/main.rs:7:9\n  |\n7 |         encode_text(text);\n  |         ^^^^^^^^^^^ the trait `std::convert::From&lt;&amp;&amp;str&gt;` is not implemented for `std::borrow::Cow&lt;'_, str&gt;`\n  |\n  = help: the following implementations were found:\n            &lt;std::borrow::Cow&lt;'a, std::path::Path&gt; as std::convert::From&lt;&amp;'a std::path::Path&gt;&gt;\n            &lt;std::borrow::Cow&lt;'a, std::path::Path&gt; as std::convert::From&lt;std::path::PathBuf&gt;&gt;\n            &lt;std::borrow::Cow&lt;'a, str&gt; as std::convert::From&lt;&amp;'a str&gt;&gt;\n            &lt;std::borrow::Cow&lt;'a, [T]&gt; as std::convert::From&lt;&amp;'a [T]&gt;&gt;\n          and 2 others\n  = note: required because of the requirements on the impl of `std::convert::Into&lt;std::borrow::Cow&lt;'_, str&gt;&gt;` for `&amp;&amp;str`\nnote: required by `encode_text`\n --&gt; src/main.rs:3:1\n  |\n3 | fn encode_text&lt;'a, T: Into&lt;Cow&lt;'a, str&gt;&gt;&gt;(text: T) {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p><a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"nofollow noreferrer\"><code>Cow</code></a> has a limited set of <code>From</code> implementations:</p>\n\n<pre><code>impl&lt;'a&gt; From&lt;&amp;'a str&gt; for Cow&lt;'a, str&gt; {}\n\nimpl&lt;'a, T&gt; From&lt;&amp;'a [T]&gt; for Cow&lt;'a, [T]&gt;\nwhere\n    T: Clone\n{}\n\nimpl&lt;'a, T&gt; From&lt;Vec&lt;T&gt;&gt; for Cow&lt;'a, [T]&gt;\nwhere\n    T: Clone,\n{}\n\nimpl&lt;'a&gt; From&lt;String&gt; for Cow&lt;'a, str&gt; {}\n</code></pre>\n\n<p>Converting from a <code>&amp;&amp;str</code> is not in the list. This makes some amount of sense as dereferencing one level from <code>&amp;&amp;str</code> would give you <code>&amp;str</code>, which wouldn't be useful in a <code>Cow</code>.</p>\n\n<p>Instead, I'd implement the code as taking any iterator where the value can be converted to a <code>Cow</code>. You then need to adapt the slice before passing it in:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn encode_text&lt;'a, T&gt;(_text: T)\nwhere\n    T: Into&lt;Cow&lt;'a, str&gt;&gt;,\n{}\n\nfn encode_texts&lt;'a, I&gt;(texts: I)\nwhere\n    I: IntoIterator,\n    I::Item: Into&lt;Cow&lt;'a, str&gt;&gt;,\n{\n    for text in texts {\n        encode_text(text);\n    }\n}\n\nfn main() {\n    encode_texts([\"foo\", \"bar\"].iter().cloned());\n}\n</code></pre>\n"}], "owner": {"reputation": 55, "user_id": 2886152, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/162a94170f6c646c99c480a42f8b8670?s=128&d=identicon&r=PG&f=1", "display_name": "Leopard2A5", "link": "https://stackoverflow.com/users/2886152/leopard2a5"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 148, "favorite_count": 0, "accepted_answer_id": 49712239, "answer_count": 1, "score": 0, "last_activity_date": 1523137341, "creation_date": 1523133985, "last_edit_date": 1523136493, "question_id": 49711836, "link": "https://stackoverflow.com/questions/49711836/handling-collections-of-stdborrowcow", "title": "Handling collections of std::borrow::Cow", "body": "<p>I have this setup:</p>\n\n<pre><code>use std::borrow::Cow;\n\nfn encode_text&lt;'a, T: Into&lt;Cow&lt;'a, str&gt;&gt;&gt;(text: T) {}\n\nfn encode_texts&lt;'a, T: Into&lt;Cow&lt;'a, str&gt;&gt;&gt;(texts: &amp;[T]) {\n    for text in texts {\n        encode_text(text);\n    }\n}\n\nfn main() {\n    encode_texts(&amp;vec![\"foo\", \"bar\"]);\n}\n</code></pre>\n\n<p>The error that I get is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `std::borrow::Cow&lt;'_, str&gt;: std::convert::From&lt;&amp;T&gt;` is not satisfied\n --&gt; src/main.rs:7:9\n  |\n7 |         encode_text(text);\n  |         ^^^^^^^^^^^ the trait `std::convert::From&lt;&amp;T&gt;` is not implemented for `std::borrow::Cow&lt;'_, str&gt;`\n  |\n  = help: consider adding a `where std::borrow::Cow&lt;'_, str&gt;: std::convert::From&lt;&amp;T&gt;` bound\n  = note: required because of the requirements on the impl of `std::convert::Into&lt;std::borrow::Cow&lt;'_, str&gt;&gt;` for `&amp;T`\nnote: required by `encode_text`\n --&gt; src/main.rs:3:1\n  |\n3 | fn encode_text&lt;'a, T: Into&lt;Cow&lt;'a, str&gt;&gt;&gt;(text: T) {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>This makes sense as a <code>T</code> is a valid param to <code>encode_text</code> and <code>&amp;T</code> is not, but somehow I fail to get this to work. I can't call <code>encode_text(*text)</code> because I can't move it out of borrowed content (the <code>texts</code> param of <code>encode_texts</code>). </p>\n\n<p>I haven't added a <code>where std::borrow::Cow&lt;'_, str&gt;: std::convert::From&lt;&amp;T&gt;</code> because it basically states that I want the standard library type <code>Cow</code> to implement <code>From&lt;&amp;T&gt;</code>. If that's not already the case, then my adding the constraint won't help.</p>\n\n<p>I am stuck and I can't find any resources on how to work with <code>Cow</code>s in collections or slices.</p>\n"}, {"tags": ["rust", "polymorphism"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523135352, "post_id": 49711812, "comment_id": 86437529, "body": "You cannot. I believe this to be already answered by <a href=\"https://stackoverflow.com/q/39150216/155423\">Implementing a trait for multiple types at once</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/49711812/edit\">edit</a> your question to explain the exact differences."}, {"owner": {"reputation": 956, "user_id": 5267244, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/2211dfc83612c3406869f14a1187fb30?s=128&d=identicon&r=PG&f=1", "display_name": "David", "link": "https://stackoverflow.com/users/5267244/david"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523135497, "post_id": 49711812, "comment_id": 86437573, "body": "I agree. Didn&#39;t find that question, here. Sorry for the duplicate and thank you for the comment."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523135634, "post_id": 49711812, "comment_id": 86437601, "body": "There&#39;s no need to apologize for duplicates! Each duplicate leaves a signpost back to another question. Now this question will help people who phrased the question in the same way you did to find the right answer!"}, {"owner": {"reputation": 4565, "user_id": 1134885, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7c428466054762cf7d4b5fb5f4396fa2?s=128&d=identicon&r=PG", "display_name": "NovaDenizen", "link": "https://stackoverflow.com/users/1134885/novadenizen"}, "edited": false, "score": 0, "creation_date": 1523158670, "post_id": 49711812, "comment_id": 86441506, "body": "Maybe you could have each implement <code>trait HasA { fn getA(&amp;mut self) -&gt; &amp;mut i32; }</code>, then implement <code>impl&lt;T: HasA&gt; T { fn is(&amp;mut self); }</code>.  It&#39;s not quite the same thing but the logical structure is something like what you want."}], "owner": {"reputation": 956, "user_id": 5267244, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/2211dfc83612c3406869f14a1187fb30?s=128&d=identicon&r=PG&f=1", "display_name": "David", "link": "https://stackoverflow.com/users/5267244/david"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 13, "favorite_count": 0, "closed_date": 1523135579, "answer_count": 0, "score": 0, "last_activity_date": 1523135222, "creation_date": 1523133869, "last_edit_date": 1523135222, "question_id": 49711812, "link": "https://stackoverflow.com/questions/49711812/how-can-i-implement-a-trait-method-once-for-multiple-structs-without-defining-me", "closed_reason": "Duplicate", "title": "How can I implement a trait method once for multiple structs without defining methods to access the fields?", "body": "<p>I have two structs <code>A</code> and <code>B</code> that are similar and have overlapping behaviour. I defined a trait which both of the structs implement.</p>\n\n<p>Both structs have the same field <code>a</code> and the method <code>is(&amp;self)</code> defined in the trait has the exact same implementation in both struct, so I wanted to move the implementation to the trait, instead of having duplicate code in both structs. </p>\n\n<p>However, the <code>is(&amp;self)</code> method needs to access field <code>a</code> of <code>&amp;self</code> for the calculation of the return value.</p>\n\n<p>Here some example code of the problem:</p>\n\n<pre><code>trait T {\n    fn is(&amp;self) -&gt; bool;\n    // other methods\n}\n\npub struct A {\n    a: i32,\n}\n\nimpl T for A {\n    fn is(&amp;self) -&gt; bool {\n        // This calculation is actually more complex\n        self.a &gt; 0\n    }\n    // other methods of T\n}\n\npub struct B {\n    a: i32,\n    // more fields\n}\n\nimpl T for B {\n    fn is(&amp;self) -&gt; bool {\n        // This calculation is actually more complex\n        self.a &gt; 0\n    }\n    // other methods of T, that are implemented differently from A's implementations\n}\n</code></pre>\n\n<p>How can I implement the <code>is(&amp;self)</code> method once for struct <code>A</code> and <code>B</code> without defining methods in the trait to access the field <code>a</code>?</p>\n"}, {"tags": ["generics", "rust", "traits"], "comments": [{"owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1523259157, "post_id": 49711479, "comment_id": 86469058, "body": "Your first example <a href=\"https://play.integer32.com/?gist=8926ba000a1b5a1ca48c659078af7b69&amp;version=stable\" rel=\"nofollow noreferrer\">works for me</a>"}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "reply_to_user": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "edited": false, "score": 0, "creation_date": 1523281141, "post_id": 49711479, "comment_id": 86482555, "body": "@Jmb True, but it&#39;s not possible to make objects of that trait: <a href=\"https://play.integer32.com/?gist=066b22be8dc9286bf88f7da709d095ff&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a> (or I don&#39;t know how)"}, {"owner": {"reputation": 9614, "user_id": 7715250, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/21e16ee79a2d82cf66a9f8c9a45e4021?s=128&d=identicon&r=PG&f=1", "display_name": "J. Doe", "link": "https://stackoverflow.com/users/7715250/j-doe"}, "edited": false, "score": 0, "creation_date": 1523362770, "post_id": 49711479, "comment_id": 86521451, "body": "I am stuck on almost the same case as this, did you already solved it?"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1523364418, "post_id": 49711479, "comment_id": 86522690, "body": "Why don&#39;t you add a <code>hash</code> method in your trait that you call in your second try?"}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "reply_to_user": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1523364691, "post_id": 49711479, "comment_id": 86522922, "body": "@Boiethios Ah yes you&#39;re right, it was kind of preparing for the next step (using trait object <code>&amp;Hasher</code>) which needs a new method name. But it doesn&#39;t make sense that I changed the name one step early, sorry."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 1, "creation_date": 1523365457, "post_id": 49711479, "comment_id": 86523529, "body": "@Mark I&#39;m writing a POC"}], "answers": [{"comments": [{"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523380569, "post_id": 49754682, "comment_id": 86533929, "body": "Ow yeah that&#39;s pretty smart, I feel silly for not thinking of just returning the struct&#39;s hash! However..."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523380710, "post_id": 49754682, "comment_id": 86534020, "body": "I do wish I could use the same <code>Hasher</code>, a little bit for performance (this way I&#39;d just delegate to the struct&#39;s <code>hash</code> method), but mostly because it seems the <code>Hasher</code> is passed for a reason (although I&#39;m not too clear on how <code>Hasher</code>s differ)."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523381596, "post_id": 49754682, "comment_id": 86534533, "body": "(This is what I mean: <a href=\"https://play.integer32.com/?gist=745649a956638fb9fbeed0aa2420eb07&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>) - don&#39;t get me wrong though, the answer is smart and works for most practical cases; if nothing even better appears I&#39;ll accept it"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523447817, "post_id": 49754682, "comment_id": 86563755, "body": "@Mark: Do you mean reusing the same <code>Hasher</code> instance across multiple objects?"}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523512452, "post_id": 49754682, "comment_id": 86592757, "body": "@MatthieuM. Ideally the same instance, but the same type would already be an improvement."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523512983, "post_id": 49754682, "comment_id": 86592999, "body": "@MatthieuM. It&#39;s good that you raise the problem with hash collisions. In my case, I&#39;ll just accept the hash collision (my <code>eq</code> is not based on <code>hash</code>). It may be a performance problem but should work fine otherwise, right?"}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523513201, "post_id": 49754682, "comment_id": 86593095, "body": "Thanks for the update, I like it, I think it&#39;s an improvement. I&#39;m surprised, I thought it&#39;s not possible to go from trait object method (<code>my_hash</code>) to generic (<code>hash</code>) since trait object type is dynamic and generic type is static. I&#39;ll look into that."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523514959, "post_id": 49754682, "comment_id": 86593981, "body": "@Mark: My point was more than an instance of <code>Hasher</code> should only be used for 1 (complete) object. The flow is (1) initialize the <code>Hasher</code>, (2) hash the fields and (3) finalize the <code>Hasher</code>. There is no provision from starting again from there; so a fresh new instance of <code>Hasher</code> needs be created for the next object. Each time. This is why <code>HashMap</code> takes a <code>HashBuilder</code> generic parameter."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "reply_to_user": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523519625, "post_id": 49754682, "comment_id": 86596577, "body": "@Mark About your last comment, this is kinda hack that permits this. You should test it because I&#39;m not 100% sure it works (I crated a <code>&amp;mut &amp;mut H</code>)"}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523737366, "post_id": 49754682, "comment_id": 86686735, "body": "I tried to verify the hash works by calculating it explicitly, but don&#39;t know how to get it to work :-( <a href=\"https://play.integer32.com/?gist=3e692d9b1b4a6a91cb81ae14fb4d13d3&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>"}], "tags": [], "owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "is_accepted": false, "score": 1, "last_activity_date": 1523448923, "last_edit_date": 1523448923, "creation_date": 1523366142, "answer_id": 49754682, "question_id": 49711479, "link": "https://stackoverflow.com/questions/49711479/how-can-i-create-hashable-trait-objects-trait-objects-with-generic-method-para/49754682#49754682", "title": "How can I create hashable trait objects / trait objects with generic method parameters?", "body": "<p>You can put the desired functionalities in your trait, <em>i.e.</em> you mix your second and third attempts:</p>\n\n<pre><code>use std::hash::{Hash, Hasher};\nuse std::collections::hash_map::DefaultHasher;\nuse std::collections::HashSet;\n\n#[derive(Hash)]\nstruct Foo(i32);\n\n#[derive(Hash)]\nstruct Bar(String);\n\n// Put the desired functionalities in your trait\n\ntrait MyTrait {\n    fn my_hash(&amp;self, h: &amp;mut Hasher);\n    fn my_eq(&amp;self, other: &amp;MyTrait) -&gt; bool {\n        let mut hasher1 = DefaultHasher::new();\n        let mut hasher2 = DefaultHasher::new();\n\n        self.my_hash(&amp;mut hasher1);\n        other.my_hash(&amp;mut hasher2);\n        hasher1.finish() == hasher2.finish()\n    }\n\n    // other funcs\n}\n\nimpl MyTrait for Foo {\n    fn my_hash(&amp;self, mut h: &amp;mut Hasher) {\n        self.hash(&amp;mut h)\n    }\n}\n\nimpl MyTrait for Bar {\n    fn my_hash(&amp;self, mut h: &amp;mut Hasher) {\n        self.hash(&amp;mut h)\n    }\n}\n\n// Implement needed traits for your trait\n\nimpl Hash for MyTrait {\n    fn hash&lt;H: Hasher&gt;(&amp;self, hasher: &amp;mut H) {\n        self.my_hash(hasher)\n    }\n}\n\nimpl PartialEq for MyTrait {\n    fn eq(&amp;self, other: &amp;MyTrait) -&gt; bool {\n        self.my_eq(other)\n    }\n}\n\nimpl Eq for MyTrait {}\n\n// This compiles\n\nfn main() {\n    let foo = Foo(42);\n    let bar = Bar(\"answer\".into());\n    let mut set = HashSet::new();\n\n    set.insert(&amp;foo as &amp;MyTrait);\n    set.insert(&amp;bar);\n}\n</code></pre>\n\n<p>In my opinion, this is not a good thing to implement <code>Hash</code> for a trait in your way, because you do not know what is the concrete type beside the trait. Someone could implement the trait for both the same type, like:</p>\n\n<pre><code>struct Foo(String);\nstruct Bar(String);\n</code></pre>\n\n<p>In this case, how do you want to handle <code>Foo(\"hello\")</code> vs <code>Bar(\"hello\")</code>? Are they the same item? Because they will have the same hash.</p>\n\n<p>The real question, in your case, is: <em>how do you define what is same or not from a trait?</em> In my opinion, a better way to handle this is to calculate the hash from \"business\" trait methods, for example:</p>\n\n<pre><code>#[derive(Hash)]\nstruct Baz(...); // Business item\n#[derive(Hash)]\nstruct Qux(...); // Another business item\n\ntrait MyTrait {\n    // all those returned items make my MyTrait unique\n    fn description(&amp;self) -&gt; &amp;str;\n    fn get_baz(&amp;self) -&gt; Baz;\n    fn get_qux(&amp;self) -&gt; Qux;\n}\n\nimpl Hash for MyTrait {\n    fn hash&lt;H: Hasher&gt;(&amp;self, hasher: &amp;mut H) {\n        self.description().hash(hasher);\n        self.get_baz().hash(hasher);\n        self.get_qux().hash(hasher);\n    }\n}\n</code></pre>\n\n<p>A trait is only a contract or a partial consideration of a thing (just like when you say that a \"human being\" is a \"developer\"). You should not (in my humble opinion) consider a trait as a concrete type.</p>\n"}, {"comments": [{"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523513769, "post_id": 49779676, "comment_id": 86593357, "body": "The summary is correct, except that the distinction between <code>TunedMyTrait</code> and <code>MyTrait</code> is an implementation thing; if they can be the same that&#39;d be even better. As for Java, yeah it&#39;s probably based on various langauges that build vtables in jit or at runtime. But I think the problem is reasonable (solution probably isn&#39;t): I want to compare and hash objects that are runtime-polymorphic. Aren&#39;t trait objects the only runtime polymorphism? It surprises me that this problem doesn&#39;t come up more often."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523513887, "post_id": 49779676, "comment_id": 86593433, "body": "The enum idea is creative, I like it. But it is more restricted, it only works for closed groups of objects."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523649370, "post_id": 49779676, "comment_id": 86664427, "body": "The id is also a creative solution, thanks. Of course a totally unique id is even harder than a hash, so it sort of moves the problem. But when applicable, the code is much simpler this way."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523726505, "post_id": 49779676, "comment_id": 86683564, "body": "Example for enum: <a href=\"https://play.integer32.com/?gist=fb6126ff415526fb8ba4fcc471014941&amp;version=stable\" rel=\"nofollow noreferrer\">play.integer32.com/&hellip;</a>"}, {"owner": {"reputation": 6367, "user_id": 6914441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1", "display_name": "jferard", "link": "https://stackoverflow.com/users/6914441/jferard"}, "reply_to_user": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523739022, "post_id": 49779676, "comment_id": 86687215, "body": "@Mark The example for enum is really cool. Concerning the unique <code>id</code>: my feeling is that if you cannot produce a correct <code>id</code>, the objects should not go in the same <code>HashMap</code> or <code>HashSet</code>. That said, if you want a totally unique <code>id</code>, go with something like <code>format!(&quot;{:p}&quot;, &amp;foo))</code> (the adress as a String). But if a <code>Foo</code> may be equal to another <code>Foo</code>, or even to a <code>Bar</code>, you have to consider the main attributes of the trait. In your example, I would take a tuple <code>(u64, String)</code>: <code>(0, a.to_text())</code> for <code>Alpha</code>s and <code>(1, b.to_text())</code> for <code>Beta</code>s."}, {"owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "edited": false, "score": 0, "creation_date": 1523789222, "post_id": 49779676, "comment_id": 86696625, "body": "It was hard to choose between the answers, but I&#39;ll go with this one for the various creative ideas, and because I can&#39;t get the other one to work."}], "tags": [], "owner": {"reputation": 6367, "user_id": 6914441, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbc12c764b93fa915b8e5384f521fe12?s=128&d=identicon&r=PG&f=1", "display_name": "jferard", "link": "https://stackoverflow.com/users/6914441/jferard"}, "is_accepted": true, "score": 8, "last_activity_date": 1523569748, "last_edit_date": 1523569748, "creation_date": 1523462411, "answer_id": 49779676, "question_id": 49711479, "link": "https://stackoverflow.com/questions/49711479/how-can-i-create-hashable-trait-objects-trait-objects-with-generic-method-para/49779676#49779676", "title": "How can I create hashable trait objects / trait objects with generic method parameters?", "body": "<p>I'm not a Rust expert, but it seems to me that you try to turn Rust into Java (don't be offended: I really do like Java). </p>\n\n<blockquote>\n  <p>How can I create hashable trait objects?</p>\n</blockquote>\n\n<p>You don't want to create a hashtable of trait objects (it's easy), you want to create a hashtable of traits that <em>are not</em> trait objects and that's why you encounter difficulties.</p>\n\n<h1>The problem</h1>\n\n<p>I summarize: you have some various structs that implement traits <code>MyTrait</code>, <code>Hash</code> and <code>Eq</code>, and you would like to put those mixed structs into a single a hashstable as a <code>TunedMyTrait</code> trait objects. This requires \n<code>TunedMyTrait</code> to be a subtrait of <code>Hash</code> and <code>Eq</code>. But whereas <code>MyTrait</code> can be made a trait object, <em><code>TunedMyTrait</code> cannot</em>.</p>\n\n<p>I'm sure you know why, but I will try to make it clear for other readers, using <a href=\"https://github.com/brson/rust-anthology/blob/master/src/all-about-trait-objects.md\" rel=\"noreferrer\">this valuable resource</a>. (I put it in my own words, don't be shy and edit it if you think that isn't clear.) Trait objects rely on something that is called \"object safety\" (see <a href=\"https://github.com/nox/rust-rfcs/blob/master/text/0255-object-safety.md\" rel=\"noreferrer\">the RFC 255</a>). \"Object safety\" means: all methods of the trait must be object-safe.</p>\n\n<p>Rust makes an intensive usage of the stack, thus it has to know the size of everything it can. After the borrow checker, that's one of the difficulties and the beauties of Rust. A trait object is typed and sized: it is some kind of \"fat\" pointer that contains information on the concrete type. Every method call is delegated to the concrete type, using a <code>vtable</code> of methods. I don't get into details, but some issues may occur with this delegation and the \"safety check\" was created to avoid those issues. Here:</p>\n\n<ul>\n<li>the method <code>fn eq(&amp;self, other: &amp;Rhs) -&gt; bool</code> where <code>Rhs = Self</code> is not object safe, because at runtime, <code>Rhs</code> was erased, and thus the concrete type and the size of <code>other</code> is not known.</li>\n<li>the method <code>fn hash&lt;H: Hasher&gt;(&amp;self, hasher: &amp;mut H)</code> is not object safe, because the <code>vtable</code> is not built for every concrete type <code>H</code>.</li>\n</ul>\n\n<h1>The solution</h1>\n\n<p>Okay. <code>MyTrait</code> is a trait object, but <code>TunedMyTrait</code> is not. Yet only <code>TunedMyTrait</code> objects may be valid keys for your hashtable. What can you do? </p>\n\n<p>You can try, as you did, to hack the object safety mechanism. You found a solution to hack <code>PartialEq</code> (with a cast try, <a href=\"https://stackoverflow.com/questions/25339603/how-to-test-for-equality-between-trait-objects\">How to test for equality between trait objects?</a>), and you have now another hack from @Boiethios (which basically makes of hash a non generic function). If you finally reach your goal, I can imagine the future reader of the code: \"OMG, what is this guy trying to do?\" or (worse): \"I'm not sure of what it does, but I'm pretty sure it would run faster if...\". You have hacked a protection of the language and your code is likely to create issues worse than the problem you are trying to solve. This reminds me this kind of discussion: <a href=\"https://stackoverflow.com/questions/3403909/get-generic-type-of-class-at-runtime\">Get generic type of class at runtime</a>. And then? What will you do with this piece of code?</p>\n\n<p>Or you can be reasonable. There are some possiblities: you use a hashtable with keys that are really of the same concrete type, you box your <code>MyTrait</code> objects, you use an enum... There may be other ways (as said, I'm not a Rust expert).</p>\n\n<p>Don't get me wrong: hacking a language is really fun and helps to understand deeply its mechanics and limits (note: if you hadn't asked that question, I wouldn't have had a close look at DST and trait objects, thus I thank you). But you have to be serious if you intend to do something serious: Rust is not Java...</p>\n\n<p><strong>EDIT</strong></p>\n\n<blockquote>\n  <p>I want to compare and hash objects that are runtime-polymorphic.</p>\n</blockquote>\n\n<p>That's not difficult, but you also want to put them in a <code>HashMap</code>, and that is the problem.</p>\n\n<p>I will give you another insight. Basically, you know that a hashtable is an array of buckets. Rust uses open adressing to resolve hash collisions (specifically: Robin Hood hashing), that means that every bucket will contain 0 or 1 pair <code>(key, value)</code>. When you <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/collections/hash/table.rs#L476\" rel=\"noreferrer\">put a pair <code>(key, value)</code> in an empty bucket</a>, the tuple <code>(key, value)</code> is written in the buffer array, at the position <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/collections/hash/table.rs#L242\" rel=\"noreferrer\"><code>pair_start + index * sizeof::&lt;K, V&gt;()</code></a>, according to <a href=\"https://doc.rust-lang.org/1.22.0/std/primitive.pointer.html\" rel=\"noreferrer\">the definition of <code>offset</code></a>. It's obvious that you need <em>sized</em> pairs.</p>\n\n<p>If you could use trait object, you would have fat pointer, which is sized. But that's not possible for the reasons already stated. All the ideas I proposed are focused on this: have sized keys (assuming that values are already sized). Concrete type: obviously sized. Boxing: size of a pointer. Enum: size of the biggest element + size of the tag + padding.</p>\n\n<h1>Basic example with boxing</h1>\n\n<p><em>WARNING: I tried hard to find an example on the internet, but didn't find anything. So I decided to create from scratch a basic example with boxing, but I'm not sure this is the right way to do it. Please comment or edit if needed.</em></p>\n\n<p>First, add to your trait a method that identifies every instance of any concrete type that implements <code>MyTrait</code> with a <strong>comparable</strong> and <strong>hashable</strong> value, let's say an <code>id</code> method that returns an <code>i64</code>:</p>\n\n<pre><code>trait MyTrait {\n    fn id(&amp;self) -&gt; i64; // any comparable and hashable type works instead of i64\n}\n</code></pre>\n\n<p><code>Foo</code> and <code>Bar</code> concrete types will implement this method (the implementation given here is totally stupid):</p>\n\n<pre><code>struct Foo(u32);\n\nimpl MyTrait for Foo {\n    fn id(&amp;self) -&gt; i64 {\n        -(self.0 as i64)-1 // negative to avoid collisions with Bar\n    }\n}\n\nstruct Bar(String);\n\nimpl MyTrait for Bar {\n    fn id(&amp;self) -&gt; i64 {\n        self.0.len() as i64 // positive to avoid collisions with Foo\n    }\n}\n</code></pre>\n\n<p>Now, we have to implement <code>Hash</code> and <code>Eq</code>, in order to put <code>MyTrait</code> in a <code>HashMap</code>. But if we do it for <code>MyTrait</code>, we get a trait that can't be a trait object, because <code>MyTrait</code> is not sized. Let's implement it for <code>Box&lt;Trait&gt;</code>, which is sized:</p>\n\n<pre><code>impl Hash for Box&lt;MyTrait&gt; {\n    fn hash&lt;H&gt;(&amp;self, state: &amp;mut H) where H: Hasher {\n        self.id().hash(state)\n    }\n}\n\nimpl PartialEq for Box&lt;MyTrait&gt; {\n    fn eq(&amp;self, other: &amp;Box&lt;MyTrait&gt;) -&gt; bool {\n        self.id() == other.id()\n    }\n}\n\nimpl Eq for Box&lt;MyTrait&gt; {}\n</code></pre>\n\n<p>We used the <code>id</code> method to implement <code>eq</code> and <code>hash</code>. </p>\n\n<p>Now, think of <code>Box&lt;MyTrait&gt;</code>: 1. it is sized; 2. it implements <code>Hash</code> and <code>Eq</code>. That means that it can be used as a key for a <code>HashMap</code>:</p>\n\n<pre><code>fn main() {\n    let foo = Foo(42);\n    let bar = Bar(\"answer\".into());\n    let mut my_map = HashMap::&lt;Box&lt;MyTrait&gt;, i32&gt;::new();\n    my_map.insert(Box::new(foo), 1);\n    my_map.insert(Box::new(bar), 2);\n\n    println!(\"{:?}\", my_map.get(&amp;(Box::new(Foo(42)) as Box&lt;MyTrait&gt;)));\n    println!(\"{:?}\", my_map.get(&amp;(Box::new(Foo(41)) as Box&lt;MyTrait&gt;)));\n    println!(\"{:?}\", my_map.get(&amp;(Box::new(Bar(\"answer\".into())) as Box&lt;MyTrait&gt;)));\n    println!(\"{:?}\", my_map.get(&amp;(Box::new(Bar(\"question\".into())) as Box&lt;MyTrait&gt;)));\n</code></pre>\n\n<p>}</p>\n\n<p>Output:</p>\n\n<pre><code>    Some(1)\n    None\n    Some(2)\n    None\n</code></pre>\n\n<p>try it: <a href=\"https://play.integer32.com/?gist=85edc6a92dd50bfacf2775c24359cd38&amp;version=stable\" rel=\"noreferrer\">https://play.integer32.com/?gist=85edc6a92dd50bfacf2775c24359cd38&amp;version=stable</a></p>\n\n<p>I'm not sure it solves your problem, but I don't really know what you are trying to do...</p>\n"}], "owner": {"reputation": 15065, "user_id": 723090, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/ML1tj.png?s=128&g=1", "display_name": "Mark", "link": "https://stackoverflow.com/users/723090/mark"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1634, "favorite_count": 4, "accepted_answer_id": 49779676, "answer_count": 2, "score": 11, "last_activity_date": 1523569748, "creation_date": 1523131393, "last_edit_date": 1523366237, "question_id": 49711479, "link": "https://stackoverflow.com/questions/49711479/how-can-i-create-hashable-trait-objects-trait-objects-with-generic-method-para", "title": "How can I create hashable trait objects / trait objects with generic method parameters?", "body": "<p>I have some structs that implement both <code>Hash</code> and <code>MyTrait</code>. I'm using them as <code>&amp;MyTrait</code> trait objects.</p>\n\n<p>Now I want <code>&amp;MyTrait</code> to also implement <code>Hash</code>. I've tried a few things:</p>\n\n<ul>\n<li><p>Naively, <code>trait MyTrait: Hash {}</code>:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait `MyTrait` cannot be made into an object\n</code></pre></li>\n<li><p>Then I tried this:</p>\n\n<pre><code>impl Hash for MyTrait {\n    fn hash&lt;H: Hasher&gt;(&amp;self, hasher: &amp;mut H) {\n        // ...\n    }\n}\n</code></pre>\n\n<p>but I need to delegate to the <code>hash</code> method of the concrete type of <code>self</code>, I think.</p></li>\n<li><p>So the naive next step is to put this on <code>MyTrait</code>:</p>\n\n<pre><code>fn my_hash&lt;H: Hasher&gt;(&amp;self, hasher: &amp;mut H);\n</code></pre>\n\n<p>which brings me right back to the first point.</p></li>\n<li><p>I read something about using a trait object instead of generic parameter, which sounds smart, so I put this on <code>MyTrait</code></p>\n\n<pre><code>fn my_hash(&amp;self, hasher: &amp;mut H);\n</code></pre>\n\n<p>Then I need to actually implement this. Preferably not by hand for every trait:</p>\n\n<pre><code>impl&lt;T: 'static + Hash&gt; MyTrait for T {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self as &amp;Any\n    }\n\n    fn my_hash(&amp;self, hasher: &amp;mut Hasher) {\n        self.as_any().downcast_ref::&lt;T&gt;().unwrap().hash(hasher)\n    }\n}\n</code></pre>\n\n<p>but then</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the trait bound `std::hash::Hasher: std::marker::Sized` is not satisfied\n`std::hash::Hasher` does not have a constant size known at compile-time\n</code></pre>\n\n<p>So I'd have to downcast <code>Hasher</code>\u2026</p></li>\n<li><p>If downcasting <code>Hasher</code> is the way, I need a generic parameter <code>H</code> that can convert to an <code>Any</code> <code>Hasher</code>, Let's try:</p>\n\n<pre><code>trait AnyHasher {\n    fn as_any(&amp;self) -&gt; &amp;Any;\n}\n\nimpl&lt;H: 'static + Hasher&gt; AnyHasher for H {\n    fn as_any(&amp;self) -&gt; &amp;Any {\n        self as &amp;Any\n    }\n}\n</code></pre>\n\n<p>and then to downcast</p>\n\n<pre><code>impl&lt;T: 'static + Hash, H: 'static + Hasher&gt; MyTrait for T {\n    // ...\n    fn my_hash(&amp;self, hasher: &amp;mut AnyHasher) {\n        let h = hasher.as_any().downcast_ref::&lt;H&gt;().unwrap();\n        self.as_any().downcast_ref::&lt;T&gt;().unwrap().hash(h)\n    }\n}\n</code></pre>\n\n<p>but alas</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>the type parameter `H` is not constrained by the impl trait, self type, or predicates\n</code></pre>\n\n<p>which I guess is true, but then I'm stuck. (Also it seems kind of ridiculous so far).</p></li>\n</ul>\n\n<p>Can this can be done? If so, how?</p>\n\n<p>I previously asked about <a href=\"https://stackoverflow.com/questions/49466199/default-trait-method-implementation-for-all-trait-objects\"><code>PartialEq</code> for trait objects</a>, which was hard because information the concrete type of the trait object is needed. That was solved with downcasting, but I didn't manage to apply that solution here.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523127660, "post_id": 49710852, "comment_id": 86435371, "body": "I think it would be any trait that is automatically implemented, it&#39;s certainly the case for <code>Sized</code>, but I wonder if this would apply to <code>Send</code> and <code>Sync</code>..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1523128519, "post_id": 49710852, "comment_id": 86435643, "body": "@MatthieuM. I think <code>Sized</code> might be even more special than <code>Send</code> and <code>Sync</code>..."}], "answers": [{"comments": [{"owner": {"reputation": 2731, "user_id": 109414, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/2b68fe77303968e573ca1e7004462ae7?s=128&d=identicon&r=PG", "display_name": "Edd Barrett", "link": "https://stackoverflow.com/users/109414/edd-barrett"}, "edited": false, "score": 0, "creation_date": 1527086923, "post_id": 49710956, "comment_id": 87995634, "body": "I totally agree that the name of this feature is confusing. It&#39;s just caught me out (I was trying to opt <i>out</i> of <code>Send</code>). Thanks for the explanation."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 39, "last_activity_date": 1614349911, "last_edit_date": 1614349911, "creation_date": 1523127887, "answer_id": 49710956, "question_id": 49710852, "link": "https://stackoverflow.com/questions/49710852/what-is-an-auto-trait-in-rust/49710956#49710956", "title": "What is an auto trait in Rust?", "body": "<p>An <em>auto trait</em> is the new name for the terribly named<sup>1</sup> <em>opt-in, built-in trait</em> (OIBIT).</p>\n<p>These are an unstable feature where a trait is automatically implemented for every type unless they opt-out or contain a value that does not implement the trait:</p>\n<pre><code>#![feature(optin_builtin_traits)]\n\nauto trait IsCool {}\n\n// Everyone knows that `String`s just aren't cool\nimpl !IsCool for String {}\n\nstruct MyStruct;\nstruct HasAString(String);\n\nfn check_cool&lt;C: IsCool&gt;(_: C) {}\n\nfn main() {\n    check_cool(42);\n    check_cool(false);\n    check_cool(MyStruct);\n    \n    // the trait bound `std::string::String: IsCool` is not satisfied\n    // check_cool(String::new());\n    \n    // the trait bound `std::string::String: IsCool` is not satisfied in `HasAString`\n    // check_cool(HasAString(String::new()));\n}\n</code></pre>\n<p>Familiar examples include <a href=\"https://doc.rust-lang.org/std/marker/trait.Send.html\" rel=\"nofollow noreferrer\"><code>Send</code></a> and <a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"nofollow noreferrer\"><code>Sync</code></a>:</p>\n<pre><code>pub unsafe auto trait Send { }\npub unsafe auto trait Sync { }\n</code></pre>\n<p>Further information is available in the <a href=\"https://doc.rust-lang.org/unstable-book/language-features/auto-traits.html\" rel=\"nofollow noreferrer\">Unstable Book</a>.</p>\n<hr />\n<p><sup>1</sup> These traits are neither opt-in (they are opt-out) nor necessarily built-in (user code using nightly may use them). Of the 5 words in their name, 4 were outright lies.</p>\n"}], "owner": {"reputation": 817, "user_id": 1171215, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8064f01d26a726422b200cfe4483e4ac?s=128&d=identicon&r=PG", "display_name": "Martin", "link": "https://stackoverflow.com/users/1171215/martin"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7332, "favorite_count": 4, "accepted_answer_id": 49710956, "answer_count": 1, "score": 27, "last_activity_date": 1614349911, "creation_date": 1523127212, "last_edit_date": 1523128794, "question_id": 49710852, "link": "https://stackoverflow.com/questions/49710852/what-is-an-auto-trait-in-rust", "title": "What is an auto trait in Rust?", "body": "<p>Trying to solve the problem described in <a href=\"https://stackoverflow.com/questions/49710684/trait-bound-sized-is-not-satisfied-for-sized-trait\">Trait bound Sized is not satisfied for Sized trait</a>, I found the following code gives the following error:</p>\n\n<pre><code>trait SizedTrait: Sized {\n    fn me() -&gt; Self;\n}\n\ntrait AnotherTrait: Sized {\n    fn another_me() -&gt; Self;\n}\n\nimpl AnotherTrait for SizedTrait + Sized {\n    fn another_me() {\n        Self::me()\n    }\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0225]: only auto traits can be used as additional traits in a trait object\n --&gt; src/main.rs:9:36\n  |\n9 | impl AnotherTrait for SizedTrait + Sized {\n  |                                    ^^^^^ non-auto additional trait\n</code></pre>\n\n<p>But the <a href=\"https://doc.rust-lang.org/book/second-edition\" rel=\"noreferrer\">Rust Book</a> does not mention <code>auto trait</code> at all.</p>\n\n<p>What is an auto trait in Rust and how does it differ from a non-auto trait?</p>\n"}, {"tags": ["rust", "pattern-matching"], "comments": [{"owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "edited": false, "score": 1, "creation_date": 1523126239, "post_id": 49710608, "comment_id": 86434892, "body": "You want to get a <code>&amp;mut &amp;mut T</code>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "edited": false, "score": 1, "creation_date": 1523126347, "post_id": 49710608, "comment_id": 86434929, "body": "@Arjan that is correct. Note that I make no claim about this being a <i>useful</i> thing to do, although I&#39;m sure someone will come along and explain why it might be useful in some case."}, {"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1576040746, "post_id": 49710608, "comment_id": 104764981, "body": "Is this also considered as workaround? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=1e7eba4ea2e59fc5e7aec2aae17356aa\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1576053007, "post_id": 49710608, "comment_id": 104769318, "body": "Like <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=24e08d46d9daa7cd94eac0b3c953766c\" rel=\"nofollow noreferrer\">this</a>?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1576076238, "post_id": 49710608, "comment_id": 104782006, "body": "@&#214;merErden yes, I think that counts as a workaround because it requires that the value being matched on have the <code>as_mut</code> method, and it&#39;s not just a general piece of syntax."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 9280, "user_id": 794457, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/2d564695b517c0a1080a887633a40b1e?s=128&d=identicon&r=PG", "display_name": "edwardw", "link": "https://stackoverflow.com/users/794457/edwardw"}, "edited": false, "score": 0, "creation_date": 1576076282, "post_id": 49710608, "comment_id": 104782033, "body": "@edwardw ditto:  I think that counts as a workaround because it requires that the value being matched on have the <code>as_mut</code> method, and it&#39;s not just a general piece of syntax."}, {"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1576217293, "post_id": 49710608, "comment_id": 104834863, "body": "@Shepmaster How about this? Dereference to access <code>mut var</code> then borrow mutable for two times :  <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a87aaed059097e8a72817f09560d782e\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1576227956, "post_id": 49710608, "comment_id": 104838915, "body": "Basically re-borrow as mutable then borrow this <code>mut</code> reference as mutable"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 5152, "user_id": 1601571, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/56403b8ee9f5066ce3f75b9783cc9b2b?s=128&d=identicon&r=PG", "display_name": "&#214;mer Erden", "link": "https://stackoverflow.com/users/1601571/%c3%96mer-erden"}, "edited": false, "score": 0, "creation_date": 1576597746, "post_id": 49710608, "comment_id": 104947627, "body": "@&#214;merErden that&#39;s still not doing it <i>in</i> the pattern, correct?"}], "answers": [{"tags": [], "owner": {"reputation": 599, "user_id": 10642437, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Hly4F.jpg?s=128&g=1", "display_name": "Erdem Savasci", "link": "https://stackoverflow.com/users/10642437/erdem-savasci"}, "is_accepted": false, "score": -1, "last_activity_date": 1576766765, "creation_date": 1576766765, "answer_id": 59412034, "question_id": 49710608, "link": "https://stackoverflow.com/questions/49710608/is-it-possible-to-create-a-mutable-value-of-a-mutable-reference-in-a-pattern/59412034#59412034", "title": "Is it possible to create a mutable value of a mutable reference in a pattern?", "body": "<p>Below code may give an idea for the possible solution to the problem. It's just a sample &amp; testable code to provide a tiny example that aimed at the issue. Of course it may not cover the whole intents and purposes.</p>\n\n<pre><code>fn main() {\n    let mut score = Some(42i32);\n\n    let res = if let Some(41) = score {\n        println!(\"41 is matched\");\n        1i32\n    } else if let Some(ref mut s) = score { //&amp;mut score {\n        //let mut s2 = s;\n        //println!(\"s: {:#?}\", s);\n        test(&amp;mut &amp;mut *s); // This part may be like this for borrowing\n        //println!(\"s: {:#?}\", s);\n        1i32\n    } else {\n        0i32\n    };\n\n    //println!(\"Result: {:#?}\", score);\n    assert_eq!(res, 1i32);\n}\n\nfn test(ref mut s: &amp;mut &amp;mut i32) -&gt; i32 {\n    //let mut s2 = s;\n    return test2(&amp;mut *s);\n}\n\nfn test2(n: &amp;mut i32) -&gt; i32 {\n    *n += 1;\n    //println!(\"Value: {}\", *(*n));\n    return *n;\n}\n</code></pre>\n\n<p>Live Version: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7c3e7e1ee712a31f74b201149365035f\" rel=\"nofollow noreferrer\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7c3e7e1ee712a31f74b201149365035f</a></p>\n\n<p>Gist Link: <a href=\"https://gist.github.com/7c3e7e1ee712a31f74b201149365035f\" rel=\"nofollow noreferrer\">https://gist.github.com/7c3e7e1ee712a31f74b201149365035f</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1578926595, "creation_date": 1578926595, "answer_id": 59718807, "question_id": 49710608, "link": "https://stackoverflow.com/questions/49710608/is-it-possible-to-create-a-mutable-value-of-a-mutable-reference-in-a-pattern/59718807#59718807", "title": "Is it possible to create a mutable value of a mutable reference in a pattern?", "body": "<p>Not a direct answer, but possible workarounds</p>\n\n<h1>Create an intermediate variable</h1>\n\n<pre><code>if let Some(ref mut s) = score {\n    let mut s = s;\n    &amp;mut s;\n}\n</code></pre>\n\n<pre><code>#[derive(Debug)]\nstruct X;\n\nenum Foo&lt;T&gt; {\n    Bar(T),\n    _Baz,\n}\n\nfn main() {\n    let mut score = Foo::Bar(X);\n\n    if let Foo::Bar(ref mut s) = score {\n        //let x = s;\n        //println!(\"{:?}\", **x); ! not possible\n        let x = &amp;mut &amp;mut *s; // &amp;mut &amp;mut X\n        println!(\"{:?}\", **x);\n    }\n}\n</code></pre>\n\n<h1>For <code>Option</code> specifically</h1>\n\n<pre><code>if let Some(ref mut s) = score.as_mut() {\n    s; //:&amp;mut &amp;mut i32\n}\n</code></pre>\n\n<pre><code>if let Some(mut s) = score.as_mut() {\n    &amp;mut s;\n}\n</code></pre>\n"}], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 349, "favorite_count": 1, "answer_count": 2, "score": 7, "last_activity_date": 1578926682, "creation_date": 1523125733, "last_edit_date": 1578926682, "question_id": 49710608, "link": "https://stackoverflow.com/questions/49710608/is-it-possible-to-create-a-mutable-value-of-a-mutable-reference-in-a-pattern", "title": "Is it possible to create a mutable value of a mutable reference in a pattern?", "body": "<p>When pattern-matching, you can specify that you'd like to get a mutable reference to the contained value by using <code>ref mut</code>: </p>\n\n<pre><code>let mut score = Some(42);\nif let Some(ref mut s) = score {\n    &amp;mut s;\n}\n</code></pre>\n\n<p>However, the inner value is not mutable:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `s` as mutable\n --&gt; src/main.rs:4:14\n  |\n4 |         &amp;mut s;\n  |              ^\n  |              |\n  |              cannot reborrow mutably\n  |              try removing `&amp;mut` here\n</code></pre>\n\n<p>I tried to add in another <code>mut</code>, but that was not valid:</p>\n\n<pre><code>if let Some(mut ref mut s) = score {\n    &amp;mut s;\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error: the order of `mut` and `ref` is incorrect\n --&gt; src/main.rs:3:17\n  |\n3 |     if let Some(mut ref mut s) = score {\n  |                 ^^^^^^^ help: try switching the order: `ref mut`\n\nerror: expected identifier, found keyword `mut`\n --&gt; src/main.rs:3:25\n  |\n3 |     if let Some(mut ref mut s) = score {\n  |                         ^^^ expected identifier, found keyword\n\nerror: expected one of `)`, `,`, or `@`, found `s`\n --&gt; src/main.rs:3:29\n  |\n3 |     if let Some(mut ref mut s) = score {\n  |                             ^ expected one of `)`, `,`, or `@` here\n</code></pre>\n"}, {"tags": ["tree", "rust", "lifetime"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523121687, "post_id": 49709624, "comment_id": 86433404, "body": "Can you explain, in words, what you believe this line of code is doing? <code>Node::Internal(ref mut node) =&gt; BTree::insert_at_internal_node(&amp;mut node, key)</code>"}, {"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523121940, "post_id": 49709624, "comment_id": 86433480, "body": "@shepmaster This is getting the (mutable reference to) the relevant node (pulling it out of the enum object through a match) and applying it as an argument to the <code>insert</code> function. I understand <i>that</i> the resulting reference can&#39;t outlive the reference applied to the function; I just don&#39;t understand <i>how</i> to make it live longer. (cont)"}, {"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523121987, "post_id": 49709624, "comment_id": 86433504, "body": "(from cont) I think the problem is that the nodes own their children (and therefore this problem is fundamental), rather than the tree object owning everything. I guess ownership is not transitive, which is fine. But I don&#39;t see how to fix this."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523122164, "post_id": 49709624, "comment_id": 86433572, "body": "Thank you. Can you please go further and explain why you wrote this specific bit of code: <code>&amp;mut node</code>. What do you believe that <code>node</code> is at that point?"}, {"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523122513, "post_id": 49709624, "comment_id": 86433701, "body": "@Shepmaster I was just trying to get it to compile. The semantics of <code>match self.root</code> are unclear to me when I only have a mutable reference to <code>self</code> (and hence to <code>self.root</code>). I was trying to find a way to say &quot;give me a mutable reference to the thing inside <code>self.root</code>&quot; and this appeared to achieve that."}], "answers": [{"comments": [{"owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "edited": false, "score": 0, "creation_date": 1523141166, "post_id": 49710539, "comment_id": 86438813, "body": "Yes! Thank you!  I still am not sure what the <code>ref</code> in <code>InternalNode(ref mut node)</code> means, or what it would mean if I left it off. So I am afraid I will keep making these mistakes :|"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "edited": false, "score": 0, "creation_date": 1523141286, "post_id": 49710539, "comment_id": 86438839, "body": "@RichardRast <a href=\"https://doc.rust-lang.org/book/second-edition/ch18-03-pattern-syntax.html#ref-and-ref-mut-to-create-references-in-patterns\" rel=\"nofollow noreferrer\"><code>ref</code> and <code>ref mut</code> to Create References in Patterns</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1523125289, "creation_date": 1523125289, "answer_id": 49710539, "question_id": 49709624, "link": "https://stackoverflow.com/questions/49709624/borrowed-value-does-not-live-long-enough-when-matching-on-a-b-tree-node-enum-t/49710539#49710539", "title": "&quot;Borrowed value does not live long enough&quot; when matching on a B-Tree node enum to get a reference", "body": "<p>TL;DR \u2014 remove <code>&amp;mut</code> from the calls:</p>\n\n<pre><code>let (_inserted_at, success) = match self.root {\n    Node::Internal(ref mut node) =&gt; BTree::insert_at_internal_node(node, key),\n    Node::Leaf(ref mut node) =&gt; BTree::insert_at_leaf_node(node, key),\n};\n</code></pre>\n\n<hr>\n\n<p>Your problem can be reduced to this (and probably further, but this still has the general shape of the original):</p>\n\n<pre><code>enum Node {\n    Internal(InternalNode),\n}\n\nenum NodeRefMut&lt;'a&gt; {\n    Internal(&amp;'a mut InternalNode),\n}\n\nstruct InternalNode;\n\nfn insert(mut root: Node) {\n    let _inserted_at = match root {\n        Node::Internal(ref mut node) =&gt; internal(&amp;mut node),\n    };\n}\n\nfn internal&lt;'a&gt;(_internal: &amp;'a mut InternalNode) -&gt; NodeRefMut&lt;'a&gt; {\n    unimplemented!()\n}\n</code></pre>\n\n<p>If you <a href=\"https://stackoverflow.com/q/21747136/155423\">print out the type of <code>node</code></a>, you'll see that by using <code>ref mut</code> in the pattern, you've <em>already</em> created a <code>&amp;mut Node</code>:</p>\n\n<pre><code>Node::Internal(ref mut node) =&gt; {\n    let _: () = node;\n    internal(&amp;mut node)\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0308]: mismatched types\n  --&gt; src/main.rs:14:21\n   |\n14 |         let _: () = node; \n   |                     ^^^^ expected (), found mutable reference\n   |\n   = note: expected type `()`\n              found type `&amp;mut InternalNode`\n</code></pre>\n\n<p>When you take a second mutable reference, you are taking a mutable reference to the variable that's only in scope in the match arm. The lifetime of that variable is exactly what the error message points out: the match arm itself.</p>\n\n<p>Interestingly, this error only occurs because you are returning a value from the <code>match</code>. If you don't, you get a different error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0596]: cannot borrow immutable local variable `node` as mutable\n  --&gt; src/main.rs:17:27\n   |\n17 |             internal(&amp;mut node)\n   |                           ^^^^\n   |                           |\n   |                           cannot reborrow mutably\n   |                           try removing `&amp;mut` here\n</code></pre>\n\n<p>Because the variable <code>node</code> is indeed itself not mutable!</p>\n"}], "owner": {"reputation": 1293, "user_id": 850659, "user_type": "registered", "accept_rate": 55, "profile_image": "https://www.gravatar.com/avatar/772249379272025f1525849064eae7fd?s=128&d=identicon&r=PG", "display_name": "Richard Rast", "link": "https://stackoverflow.com/users/850659/richard-rast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 114, "favorite_count": 0, "accepted_answer_id": 49710539, "answer_count": 1, "score": 0, "last_activity_date": 1523125289, "creation_date": 1523119300, "last_edit_date": 1523123627, "question_id": 49709624, "link": "https://stackoverflow.com/questions/49709624/borrowed-value-does-not-live-long-enough-when-matching-on-a-b-tree-node-enum-t", "title": "&quot;Borrowed value does not live long enough&quot; when matching on a B-Tree node enum to get a reference", "body": "<p>I am trying to implement a B-tree in Rust, and I'm struggling with how to manage lifetimes interacting with <code>match</code> statements. I am new to Rust and while I think I understand what lifetimes are and how they work, I can't figure out how to make them do what I want.</p>\n\n<p>My data structure looks like this:</p>\n\n<pre><code>enum Node&lt;T: Key&gt; {\n    Internal(InternalNode&lt;T&gt;),\n    Leaf(LeafNode&lt;T&gt;),\n}\n\nenum NodeRef&lt;'a, T: 'a + Key&gt; {\n    Internal(&amp;'a InternalNode&lt;T&gt;),\n    Leaf(&amp;'a LeafNode&lt;T&gt;),\n}\n\nenum NodeRefMut&lt;'a, T: 'a + Key&gt; {\n    Internal(&amp;'a mut InternalNode&lt;T&gt;),\n    Leaf(&amp;'a mut LeafNode&lt;T&gt;),\n}\n\nstruct InternalNode&lt;T: Key&gt; {\n    keys: Vec&lt;T&gt;,\n    children: Vec&lt;Box&lt;Node&lt;T&gt;&gt;&gt;,\n    num_keys: usize,\n}\n\nstruct LeafNode&lt;T: Key&gt; {\n    keys: Vec&lt;T&gt;,\n    num_keys: usize,\n}\n\npub struct BTree&lt;T: Key&gt; {\n    num_keys: usize,\n    root: Node&lt;T&gt;\n}\n</code></pre>\n\n<p>In a B-tree insertion, you need to insert into a node and then keep a reference to the node you inserted into, so you can balance and split. This is not a question about the algorithm but here is a code fragment which illustrates the problem:</p>\n\n<pre><code>pub fn insert(&amp;mut self, key: T) -&gt; bool {\n    let (_inserted_at, success) = match self.root {\n        Node::Internal(ref mut node) =&gt;\n            BTree::insert_at_internal_node(&amp;mut node, key),\n\n        Node::Leaf(ref mut node) =&gt;\n            BTree::insert_at_leaf_node(&amp;mut node, key),\n    };\n\n    panic!() // snip\n}\n\nfn insert_at_leaf_node&lt;'a&gt;(leaf: &amp;'a mut LeafNode&lt;T&gt;, key: T) -&gt; (NodeRefMut&lt;'a, T&gt;, bool) {\n    panic!() // snip\n}\n\nfn insert_at_internal_node&lt;'a&gt;(internal: &amp;'a mut InternalNode&lt;T&gt;, key: T) -&gt; (NodeRefMut&lt;'a, T&gt;, bool) {\n    panic!() // snip\n}\n</code></pre>\n\n<p>Then we get the following fairly clear error that I don't know how to resolve:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   error[E0597]: `node` does not live long enough\n--&gt; src/trees/mod.rs:102:53\n    |\n102 |                 BTree::insert_at_internal_node(&amp;mut node, key),\n    |                                                     ^^^^ borrowed value does not live long enough\n...\n106 |         };\n    |         - `node` dropped here while still borrowed\n...\n109 |     }\n    |     - borrowed value needs to live until here\n\nerror[E0597]: `node` does not live long enough\n--&gt; src/trees/mod.rs:105:49\n    |\n105 |                 BTree::insert_at_leaf_node(&amp;mut node, key),\n    |                                                 ^^^^ borrowed value does not live long enough\n106 |         };\n    |         - `node` dropped here while still borrowed\n...\n109 |     }\n    |     - borrowed value needs to live until here\n</code></pre>\n\n<p>Essentially, we need a mutable reference to the leaf node we inserted into, which the <code>insert_at</code> methods have no trouble producing. However, when I'm doing the <code>match</code> statement it produces a mutable reference to a node that only lives as long as the match statement (so the produced reference can't outlive the match block, defeating the purpose).</p>\n\n<p>At the moment I just want to mutably borrow everything (I have an <code>&amp;mut self</code> for a reason) but I don't know how to do this.</p>\n"}, {"tags": ["rust", "traits", "standard-library"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523117628, "post_id": 49707186, "comment_id": 86432145, "body": "Strictly speaking, <code>Result&lt;&amp;&#39;a str&gt;</code> wouldn&#39;t often be a usable return type for this problem, because it implies the <code>&amp;&#39;a str</code> is a reference to a part of the struct that is being called on (since you can&#39;t return a reference to something created in a function)."}, {"owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523119010, "post_id": 49707186, "comment_id": 86432591, "body": "@BHustus Oh, that should be my fault :P (I think I also can&#39;t return <code>str</code> directly, right?) What about returning <code>Result&lt;&#39;a String&gt;</code>? p.s. I&#39;d think returning <code>Result&lt;String&gt;</code> incorrect, because the reference doesn&#39;t live long enough, right?"}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523119200, "post_id": 49707186, "comment_id": 86432653, "body": "<code>&#39;a</code> and other lifetimes are only relevant when you&#39;re returning <i>references</i>. When returning a <code>Result&lt;String&gt;</code>, you&#39;re <i>moving</i> the String, which means you don&#39;t need to worry about how long it lives. Lifetimes are only designed to keep references from pointing at things after they&#39;re deleted."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523119252, "post_id": 49707186, "comment_id": 86432673, "body": "(In other words, <code>&amp;&#39;a str</code> means &quot;a reference to a <code>str</code> that lives for <i>at least</i> the duration <code>&#39;a</code>.)"}, {"owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "reply_to_user": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523120082, "post_id": 49707186, "comment_id": 86432930, "body": "@BHustus That clarifies a lot. Thank you! I have changed the return type to <code>Result&lt;String&gt;</code>."}, {"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 0, "creation_date": 1523121300, "post_id": 49707186, "comment_id": 86433282, "body": "Also keep in mind that lifetimes are <i>descriptive</i> and not <i>prescriptive</i>. You can&#39;t define arbitrary lifetimes, you can&#39;t make something live longer by giving it a lifetime. And by explicitly denoting lifetimes, what you&#39;re usually doing is giving an <i>assurance</i> to the compiler, rather than an <i>instruction</i> (ex. the reference in the return value cannot outlive the struct this function is being called on). That&#39;s something I was hung up on for a while."}], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 10, "creation_date": 1523104255, "post_id": 49707299, "comment_id": 86428050, "body": "If I remember correctly, it&#39;s <i>specifically</i> so that you can re-use the <code>String</code> buffer multiple times.  Functions that <i>accept</i> a buffer are always more flexible than those that <i>return</i> one."}, {"owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "edited": false, "score": 0, "creation_date": 1523119845, "post_id": 49707299, "comment_id": 86432848, "body": "For performance reason makes a lot sense, and this is also what I suspect the most :)"}, {"owner": {"reputation": 454, "user_id": 1641838, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6241a1834ea3d5b72a3a9944d328ec69?s=128&d=identicon&r=PG", "display_name": "C.W.", "link": "https://stackoverflow.com/users/1641838/c-w"}, "edited": false, "score": 0, "creation_date": 1593059898, "post_id": 49707299, "comment_id": 110648044, "body": "I was wondering, for performance reason, why isn&#39;t a String returned since Rust has Return Value Optimization (RVO). But, performance is more about RVO."}], "tags": [], "owner": {"reputation": 14973, "user_id": 128186, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/46c330659979615fe50c46f5f553b39f?s=128&d=identicon&r=PG", "display_name": "Arjan", "link": "https://stackoverflow.com/users/128186/arjan"}, "is_accepted": false, "score": 8, "last_activity_date": 1523115628, "last_edit_date": 1523115628, "creation_date": 1523103415, "answer_id": 49707299, "question_id": 49707186, "link": "https://stackoverflow.com/questions/49707186/why-doesnt-readread-to-string-return-the-string/49707299#49707299", "title": "Why doesn&#39;t Read::read_to_string() return the string?", "body": "<p>I do not know the real reason but there are some advantages:</p>\n\n<ul>\n<li>You control how the <code>String</code> is allocated. You can take it from a pool, reuse it, etc.</li>\n<li>You can read to the same string from multiple <code>read_to_string</code> (or similar) calls. There's no need to concatenate strings</li>\n<li>The size of the resulting string (in the case of passing as parameter) does not tell you how many bytes you have read (because the <code>String</code> can be non-empty), this is why <code>usize</code> is returned in a <code>Result</code></li>\n</ul>\n\n<p>The signature</p>\n\n<pre><code>fn read_to_string(&amp;mut self) -&gt; Result&lt;String&gt; { ... }\n</code></pre>\n\n<p>might look more natural if coming from higher level languages but it gives no control over the <code>String</code> and its allocation.</p>\n"}, {"comments": [{"owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "edited": false, "score": 0, "creation_date": 1524139379, "post_id": 49709903, "comment_id": 86856753, "body": "Thank you! This is the answer I wanted :) (Strange, I didn&#39;t see any notifications for your answer posted.) By the way, why linking to Aaron Turon&#39;s repository instead of the rust-lang repository?"}, {"owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "edited": false, "score": 0, "creation_date": 1524139470, "post_id": 49709903, "comment_id": 86856802, "body": "For those interested: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0517-io-os-reform.md#read\" rel=\"nofollow noreferrer\">this section</a> is where the quotation is obtained from."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 7, "last_activity_date": 1523121214, "creation_date": 1523121214, "answer_id": 49709903, "question_id": 49707186, "link": "https://stackoverflow.com/questions/49707186/why-doesnt-readread-to-string-return-the-string/49709903#49709903", "title": "Why doesn&#39;t Read::read_to_string() return the string?", "body": "<p><a href=\"https://github.com/aturon/rfcs/blob/io-reader-writer/text/0517-io-os-reform.md\" rel=\"noreferrer\">RFC 517 (IO reform)</a> states (emphasis mine):</p>\n\n<blockquote>\n  <p>The <code>read_to_end</code> and <code>read_to_string</code> methods <strong>now take explicit buffers\n  as input</strong>. This has multiple benefits:</p>\n  \n  <ul>\n  <li><p>Performance. When it is known that reading will involve some large\n  number of bytes, the buffer can be preallocated in advance.</p></li>\n  <li><p>\"Atomicity\" concerns. For <code>read_to_end</code>, it's possible to use this API\n  to retain data collected so far even when a read fails in the middle.\n  For <code>read_to_string</code>, this is not the case, because UTF-8 validity\n  cannot be ensured in such cases; but if intermediate results are\n  wanted, one can use <code>read_to_end</code> and convert to a <code>String</code> only at the\n  end.</p></li>\n  </ul>\n</blockquote>\n\n<p>Before Rust 1.0, <a href=\"https://doc.rust-lang.org/0.12.0/std/io/trait.Reader.html#method.read_to_string\" rel=\"noreferrer\"><code>Reader::read_to_string</code></a> <em>did</em> return a <code>String</code>. It was a deliberate decision to move away from that. </p>\n\n<p>A <code>read_and_create_string</code> function can be created \"on top\" of <code>Read::read_to_string</code>, but the opposite is not true. Code in the standard library needs to be very flexible.</p>\n"}], "owner": {"reputation": 498, "user_id": 2854555, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/2056d56888b443ab438fb956e898cc9d?s=128&d=identicon&r=PG", "display_name": "renyuneyun", "link": "https://stackoverflow.com/users/2854555/renyuneyun"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 955, "favorite_count": 0, "accepted_answer_id": 49709903, "answer_count": 2, "score": 6, "last_activity_date": 1523121214, "creation_date": 1523102594, "last_edit_date": 1523119935, "question_id": 49707186, "link": "https://stackoverflow.com/questions/49707186/why-doesnt-readread-to-string-return-the-string", "title": "Why doesn&#39;t Read::read_to_string() return the string?", "body": "<p>In the <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noreferrer\"><code>Read</code> trait</a>, many functions/methods take a <code>buf: &amp;mut XXX</code> as (one of the) parameter(s) and return <code>Result&lt;usize&gt;</code>. For example, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"noreferrer\"><code>read_to_string()</code></a> takes <code>buf: &amp;mut String</code> as one of the parameters and returns <code>Result&lt;usize&gt;</code>.</p>\n\n<p>As I came from many languages, the so-called <em>modern</em> ones usually return the string for a <code>read_string()</code> function call. The design of the <code>Read</code> trait in Rust kind of shocks me because it doesn't <strong>return</strong> the string, but rather <strong>passes it as a parameter</strong> (similar to C or other more primitive languages).</p>\n\n<p>I'm aware the return value (<code>Result</code>) is used to indicate whether the read succeeded or not, and it can be passed to <code>match</code> expressions. (I've learned Lisp and Go previously, so I'm not questioning this kind of design.)</p>\n\n<p>Why didn't the core developers design this trait as \"returning the string together with the error message\"?</p>\n\n<p>For example, why not design it like this:</p>\n\n<pre><code>fn read(&amp;mut self) -&gt; Result&lt;String&gt; { ... }\n</code></pre>\n\n<p>The <code>String</code> also contains the length, so the user can access the length by calling <code>.len()</code> when needed. The user can concatenate it to any other <code>String</code> if (s)he wishes, but the key point is that there is no need to create / have one before calling this function.</p>\n\n<p>Is there any particular reasons to design this trait like what it is now?</p>\n\n<p>p.s. I'm still learning Rust (by following <a href=\"https://doc.rust-lang.org/book/\" rel=\"noreferrer\"><em>The Rust Programming Language</em></a>), and am reading the second edition after reading most of the first edition. Please correct me if the code above contains any errors (especially when dealing with lifetimes).</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 1927, "user_id": 953419, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/0f79e690bef0b6c98676b5751056e0a1?s=128&d=identicon&r=PG", "display_name": "seamus", "link": "https://stackoverflow.com/users/953419/seamus"}, "edited": false, "score": 0, "creation_date": 1523098214, "post_id": 49706546, "comment_id": 86426364, "body": "Derp. Thanks. Will mark as answered after time limit is up"}, {"owner": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "edited": false, "score": 1, "creation_date": 1523100423, "post_id": 49706546, "comment_id": 86426911, "body": "Ouch -- everyone who found this surprising and had to learn the Rust way now has to unlearn that -- every piece of documentation written since then is now wrong, my Kindle ebook &quot;Programming Rust&quot; is wrong, and so are all the printed copies of it. Wow. Rust is not a baby language anymore, it has real users. This seems like a really strange change to make at this stage."}, {"owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "reply_to_user": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "edited": false, "score": 1, "creation_date": 1523100999, "post_id": 49706546, "comment_id": 86427037, "body": "@FredrickBrennan I have checked and all calls in &quot;Programming Rust&quot; are <code>cargo new --bin</code> which is as it was, what have changed is that <code>cargo new</code> (without any flags) will now behave different. If you have been using flags always then nothing will change."}, {"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "reply_to_user": {"reputation": 6165, "user_id": 1901658, "user_type": "registered", "accept_rate": 82, "profile_image": "https://www.gravatar.com/avatar/95eee89c6704eb4d075c33821c61af72?s=128&d=identicon&r=PG", "display_name": "Fredrick Brennan", "link": "https://stackoverflow.com/users/1901658/fredrick-brennan"}, "edited": false, "score": 0, "creation_date": 1523101032, "post_id": 49706546, "comment_id": 86427047, "body": "@FredrickBrennan This concern cargo not rust directly."}], "tags": [], "owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "is_accepted": true, "score": 16, "last_activity_date": 1523115344, "last_edit_date": 1523115344, "creation_date": 1523098025, "answer_id": 49706546, "question_id": 49706460, "link": "https://stackoverflow.com/questions/49706460/why-does-cargo-new-create-a-binary-instead-of-a-library/49706546#49706546", "title": "Why does `cargo new` create a binary instead of a library?", "body": "<blockquote>\n  <h3>Cargo features</h3>\n  \n  <p>Cargo\u2019s CLI has one really important change this release: <code>cargo new</code> will now default to generating a binary, rather than a library. We try to keep Cargo\u2019s CLI quite stable, but this change is important, and is unlikely to cause breakage.</p>\n  \n  <p>For some background, <code>cargo new</code> accepts two flags: <code>--lib</code>, for creating libraries, and <code>--bin</code>, for creating binaries, or executables. If you don\u2019t pass one of these flags, in previous versions of Cargo, it would default to <code>--lib</code>. We made this decision because each binary (often) depends on many libraries, and so the library case is more common. However, this is incorrect; each library is depended upon by many binaries. Furthermore, when getting started, what you often want is a program you can run and play around with. It\u2019s not just new Rustaceans though; even very long-time community members have said that they find this default surprising. As such, we\u2019re changing it.</p>\n</blockquote>\n\n<p><a href=\"https://blog.rust-lang.org/2018/03/29/Rust-1.25.html\" rel=\"noreferrer\">Source</a></p>\n"}, {"tags": [], "owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "is_accepted": false, "score": 4, "last_activity_date": 1523098336, "creation_date": 1523098336, "answer_id": 49706594, "question_id": 49706460, "link": "https://stackoverflow.com/questions/49706460/why-does-cargo-new-create-a-binary-instead-of-a-library/49706594#49706594", "title": "Why does `cargo new` create a binary instead of a library?", "body": "<p>Since Cargo 1.25 <code>cargo new</code> <a href=\"https://github.com/rust-lang/cargo/pull/5029\" rel=\"nofollow noreferrer\">defaults to creating a binary crate, instead of a library crate</a>. </p>\n\n<blockquote>\n  <p>cargo new accepts two flags: --lib, for creating libraries, and --bin, for creating binaries, or executables.</p>\n</blockquote>\n\n<p>See the <a href=\"https://github.com/rust-lang/rust/blob/e0a9bd0f3cfd20694ff62ac8b74747adcdbbfa99/RELEASES.md#cargo\" rel=\"nofollow noreferrer\">Changelog for 1.25</a>.</p>\n"}], "owner": {"reputation": 1927, "user_id": 953419, "user_type": "registered", "accept_rate": 69, "profile_image": "https://www.gravatar.com/avatar/0f79e690bef0b6c98676b5751056e0a1?s=128&d=identicon&r=PG", "display_name": "seamus", "link": "https://stackoverflow.com/users/953419/seamus"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2412, "favorite_count": 0, "accepted_answer_id": 49706546, "answer_count": 2, "score": 10, "last_activity_date": 1523115344, "creation_date": 1523097498, "last_edit_date": 1523115265, "question_id": 49706460, "link": "https://stackoverflow.com/questions/49706460/why-does-cargo-new-create-a-binary-instead-of-a-library", "title": "Why does `cargo new` create a binary instead of a library?", "body": "<p>I am creating a library with Rust. On library creation I type</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>cargo new name\n</code></pre>\n\n<p>According to the docs this should create a lib, because <code>--bin</code> is omitted.\nHowever, the file is auto set to a binary. </p>\n\n<p>Is there a setting I have to adjust to disable auto setting all projects to binary?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523088421, "post_id": 49705007, "comment_id": 86423795, "body": "&quot;enum for polymorphism,&quot; ???"}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 16936, "user_id": 7076153, "user_type": "registered", "accept_rate": 50, "profile_image": "https://i.stack.imgur.com/erPUC.png?s=128&g=1", "display_name": "Stargateur", "link": "https://stackoverflow.com/users/7076153/stargateur"}, "edited": false, "score": 0, "creation_date": 1523089130, "post_id": 49705007, "comment_id": 86423974, "body": "<a href=\"https://keepcalmandlearnrust.com/2017/03/polymorphism-in-rust-enum-vs-trait-struct/\" rel=\"nofollow noreferrer\">keepcalmandlearnrust.com/2017/03/&hellip;</a>"}], "answers": [{"tags": [], "owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "is_accepted": false, "score": 1, "last_activity_date": 1523086729, "creation_date": 1523086729, "answer_id": 49705073, "question_id": 49705007, "link": "https://stackoverflow.com/questions/49705007/is-there-a-way-to-use-existing-structs-as-enum-variants/49705073#49705073", "title": "Is there a way to use existing structs as enum variants?", "body": "<p>No, that's exactly how that works.</p>\n"}, {"comments": [{"owner": {"reputation": 2509, "user_id": 3719101, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/Z4L8i.jpg?s=128&g=1", "display_name": "iago-lito &#39;considering leaving", "link": "https://stackoverflow.com/users/3719101/iago-lito-considering-leaving"}, "edited": false, "score": 0, "creation_date": 1558695067, "post_id": 49706301, "comment_id": 99194593, "body": "Can the boilerplate be reduced / sugared a little with macros then? Or is it too complicated because they would span accross <code>enum</code> <i>and</i> <code>struct</code> <i>and</i> maybe <a href=\"https://stackoverflow.com/q/51567350/3719101\">traits</a> definitions ?"}], "tags": [], "owner": {"reputation": 20827, "user_id": 2733851, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/MUOS4.png?s=128&g=1", "display_name": "mcarton", "link": "https://stackoverflow.com/users/2733851/mcarton"}, "is_accepted": true, "score": 10, "last_activity_date": 1584555101, "last_edit_date": 1584555101, "creation_date": 1523096385, "answer_id": 49706301, "question_id": 49705007, "link": "https://stackoverflow.com/questions/49705007/is-there-a-way-to-use-existing-structs-as-enum-variants/49706301#49706301", "title": "Is there a way to use existing structs as enum variants?", "body": "<p>There have been multiple RFCs about making enum variants their own type:</p>\n\n<ul>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/1450\" rel=\"nofollow noreferrer\">RFC 1450: Types for enum variants</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/2593\" rel=\"nofollow noreferrer\">RFC 2593: Enum variant types</a></li>\n</ul>\n\n<p>Unfortunately, they have been postponed or not yet decided on as this is not considered a language priority.</p>\n\n<p>This means that right now, the way you have proposed is the only way to have types for enum variants.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1674, "favorite_count": 0, "accepted_answer_id": 49706301, "answer_count": 2, "score": 7, "last_activity_date": 1584555101, "creation_date": 1523086049, "last_edit_date": 1523115160, "question_id": 49705007, "link": "https://stackoverflow.com/questions/49705007/is-there-a-way-to-use-existing-structs-as-enum-variants", "title": "Is there a way to use existing structs as enum variants?", "body": "<p>I'm using an enum for polymorphism, similar to the following:</p>\n\n<pre><code>enum MyType {\n    Variant1 { a: i32, b: i32 },\n    Variant2 { a: bool, b: bool },\n}\n</code></pre>\n\n<p>Is there clean way to use existing structs for <code>Variant1</code> and <code>Variant2</code>? I've done the following:</p>\n\n<pre><code>struct Variant1 {\n    a: i32,\n    b: i32,\n}\n\nstruct Variant2 {\n    a: bool,\n    b: bool,\n}\n\nenum MyType {\n    Variant1(Variant1),\n    Variant2(Variant2),\n}\n</code></pre>\n\n<p>but it feels pretty clunky. I was wondering if there's a better way to accomplish a similar thing.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 2, "creation_date": 1523086835, "post_id": 49704931, "comment_id": 86423410, "body": "How much more succinct do you want it? Implicit conversion from primitive to <code>Value</code>? By the way, you don&#39;t need to specify the vector&#39;s element type here; the compiler can deduce it."}, {"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "reply_to_user": {"reputation": 60956, "user_id": 8922, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/f1634a09333f7b391db92e1d2bea6253?s=128&d=identicon&r=PG", "display_name": "Sebastian Redl", "link": "https://stackoverflow.com/users/8922/sebastian-redl"}, "edited": false, "score": 0, "creation_date": 1523087260, "post_id": 49704931, "comment_id": 86423501, "body": "Yeah I guess this isn&#39;t any worse than C unions. I think it mostly feels strange that I&#39;m effectively just renaming the primitive types."}], "answers": [{"comments": [{"owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "edited": false, "score": 0, "creation_date": 1523123437, "post_id": 49710051, "comment_id": 86433982, "body": "Yeah, in my actual project I&#39;m not using Float and Int, since the values I&#39;m storing have additional semantic meaning I&#39;m able to encode in the name, so it feels less wasteful."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 1, "last_activity_date": 1523122077, "creation_date": 1523122077, "answer_id": 49710051, "question_id": 49704931, "link": "https://stackoverflow.com/questions/49704931/is-there-a-more-succinct-way-to-use-an-enum-especially-when-it-only-has-primitiv/49710051#49710051", "title": "Is there a more succinct way to use an enum especially when it only has primitive types?", "body": "<p>No, there is not. </p>\n\n<p>There are tricks to reduce the amount of code:</p>\n\n<ol>\n<li>There's no need to specify the type of the vector.</li>\n<li>You could construct the vector all at once.</li>\n<li>You could import the enum variants.</li>\n</ol>\n\n\n\n<pre><code>fn main() {\n    use Value::*;\n    let vec = vec![Int(0), Float(1.0)];\n}\n</code></pre>\n\n<blockquote>\n  <p>it mostly feels strange that I'm effectively just renaming the primitive types</p>\n</blockquote>\n\n<p>That's just an artifact of your program. For example, there's no real difference to the computer between your enum and this one:</p>\n\n<pre><code>enum MagicSpell {\n    Multiplier(f32),\n    NumberOfStomachs(i32),\n}\n</code></pre>\n\n<p>However, the semantics (a.k.a. the names) are highly different.</p>\n"}], "owner": {"reputation": 6086, "user_id": 943814, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/e8b4b9fc52a3084be9a2de004e0bb6dc?s=128&d=identicon&r=PG", "display_name": "anderspitman", "link": "https://stackoverflow.com/users/943814/anderspitman"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 102, "favorite_count": 0, "accepted_answer_id": 49710051, "answer_count": 1, "score": 0, "last_activity_date": 1523122077, "creation_date": 1523085504, "last_edit_date": 1523121800, "question_id": 49704931, "link": "https://stackoverflow.com/questions/49704931/is-there-a-more-succinct-way-to-use-an-enum-especially-when-it-only-has-primitiv", "title": "Is there a more succinct way to use an enum especially when it only has primitive types?", "body": "<p>I'm using an enum for polymorphism in Rust. I need to have a vector that can have integers or floating point values in it:</p>\n\n<pre><code>enum Value {\n    Float(f32),\n    Int(i32),\n}\n\nlet vec = Vec::&lt;Value&gt;::new();\nvec.push(Value::Int(0));\nvec.push(Value::Float(1.0));\n</code></pre>\n\n<p>Is there a more succinct way to do this, particularly when you're only using primitive types?</p>\n"}, {"tags": ["rust", "closures", "borrow-checker"], "comments": [{"owner": {"reputation": 2816, "user_id": 5402030, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/pT1Sp.png?s=128&g=1", "display_name": "MutantOctopus", "link": "https://stackoverflow.com/users/5402030/mutantoctopus"}, "edited": false, "score": 1, "creation_date": 1523078434, "post_id": 49703990, "comment_id": 86421555, "body": "I think that whatever answer you get is going to be its own, special, Rust-style brand of weird. Each closure is referencing the same object (<code>data</code>); there&#39;s no way to guarantee they aren&#39;t both being called at the same time, which could cause undefined and decidedly non-Rustic behavior. Without using a special wrapper like a Mutex or somesuch, of course."}, {"owner": {"reputation": 3212, "user_id": 2731452, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/xA89V.jpg?s=128&g=1", "display_name": "red75prime", "link": "https://stackoverflow.com/users/2731452/red75prime"}, "edited": false, "score": 2, "creation_date": 1523108728, "post_id": 49703990, "comment_id": 86429347, "body": "There&#39;s probably a duplicate question, so just a comment. Mutating a value while there&#39;s immutable reference to it is undefined behavior. You can <a href=\"https://play.rust-lang.org/?gist=81d5e7272c566e98d8b69857fd69e8e6&amp;version=stable\" rel=\"nofollow noreferrer\">use <code>RefCell</code></a> to avoid it."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1579619594, "last_edit_date": 1579619594, "creation_date": 1523117794, "answer_id": 49709386, "question_id": 49703990, "link": "https://stackoverflow.com/questions/49703990/cant-borrow-mutably-within-two-different-closures-in-the-same-scope/49709386#49709386", "title": "Can&#39;t borrow mutably within two different closures in the same scope", "body": "<p>The problem is rooted in the fact that there's information that <em>you</em> know that the compiler doesn't.</p>\n\n<p>As mentioned in the comments, you cannot mutate a value while there is a immutable reference to it \u2014 otherwise it wouldn't be immutable! It happens that your function needs to access the data immutably once and then mutably, but the compiler doesn't know that from the <em>signature</em> of the function. All it can tell is that the function can call the closures in any order and any number of times, which would include using the immutable data after it's been mutated.</p>\n\n<p>I'm guessing that your original code indeed does that \u2014 it probably loops and accesses the \"immutable\" data after mutating it.</p>\n\n<h3>Compile-time borrow checking</h3>\n\n<p>One solution is to stop capturing the data in the closure. Instead, \"promote\" the data to an argument of the function and the closures:</p>\n\n<pre><code>fn foo&lt;T, F, G&gt;(n: i32, data: &amp;mut T, closure: F, mut mut_closure: G)\nwhere\n    F: Fn(&amp;mut T, i32) -&gt; bool,\n    G: FnMut(&amp;mut T, i32),\n{\n    if closure(data, n) {\n        mut_closure(data, n);\n    }\n}\n\nfn main() {\n    let mut data = 0;\n\n    foo(\n        0,\n        &amp;mut data,\n        |data, n| *data == n,\n        |data, n| *data += n,\n    );\n}\n</code></pre>\n\n<p>However, I believe that two inter-related closures like that will lead to poor maintainability. Instead, give a name to the concept and make a trait:</p>\n\n<pre><code>trait FillTarget {\n    fn test(&amp;self, _: i32) -&gt; bool;\n    fn do_it(&amp;mut self, _: i32);\n}\n\nfn foo&lt;F&gt;(n: i32, mut target: F)\nwhere\n    F: FillTarget,\n{\n    if target.test(n) {\n        target.do_it(n);\n    }\n}\n\nstruct Simple(i32);\n\nimpl FillTarget for Simple {\n    fn test(&amp;self, n: i32) -&gt; bool {\n        self.0 == n\n    }\n\n    fn do_it(&amp;mut self, n: i32) {\n        self.0 += n\n    }\n}\n\nfn main() {\n    let data = Simple(0);\n    foo(0, data);\n}\n</code></pre>\n\n<h3>Run-time borrow checking</h3>\n\n<p>Because your code has a temporal need for the mutability (you only need it either mutable or immutable at a given time), you could also switch from compile-time borrow checking to run-time borrow checking. As mentioned in the comments, tools like <code>Cell</code>, <code>RefCell</code>, and <code>Mutex</code> can be used for this:</p>\n\n<pre><code>use std::cell::Cell;\n\nfn main() {\n    let data = Cell::new(0);\n\n    foo(\n        0,\n        |n| data.get() == n,\n        |n| data.set(data.get() + n),\n    );\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/30275982/155423\">When I can use either Cell or RefCell, which should I choose?</a></li>\n<li><a href=\"https://stackoverflow.com/q/30831037/155423\">Situations where Cell or RefCell is the best choice</a></li>\n<li><a href=\"https://stackoverflow.com/q/45674479/155423\">Need holistic explanation about Rust&#39;s cell and reference counted types</a></li>\n</ul>\n\n<h3>Unsafe programmer-brain-time borrow checking</h3>\n\n<p><code>RefCell</code> and <code>Mutex</code> have a (small) amount of runtime overhead. If you've <strong>profiled</strong> and determined that to be a bottleneck, you can use unsafe code. The usual unsafe caveats apply: it's now up to you, the fallible programmer, to ensure your code doesn't perform any undefined behavior. This means <em>you have to know what is and is not undefined behavior</em>!</p>\n\n<pre><code>use std::cell::UnsafeCell;\n\nfn main() {\n    let data = UnsafeCell::new(0);\n\n    foo(\n        0,\n        |n| unsafe { *data.get() == n },\n        |n| unsafe { *data.get() += n },\n    );\n}\n</code></pre>\n\n<p>I, another fallible programmer, believe this code to be safe because there will never be temporal mutable aliasing of <code>data</code>. However, that requires knowledge of <em>what <code>foo</code> does</em>. If it called one closure at the same time as the other, this would most likely become undefined behavior.</p>\n\n<h3>Additional comments</h3>\n\n<ol>\n<li><p>There's no reason to take references to your generic closure types for the closures</p></li>\n<li><p>There's no reason to use <code>-&gt; ()</code> on the closure type, you can just omit it.</p></li>\n</ol>\n"}], "owner": {"reputation": 311, "user_id": 5565524, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/4e01d4510756240d09c3b3054f8e1c3a?s=128&d=identicon&r=PG&f=1", "display_name": "Tilded", "link": "https://stackoverflow.com/users/5565524/tilded"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 760, "favorite_count": 2, "accepted_answer_id": 49709386, "answer_count": 1, "score": 7, "last_activity_date": 1579619594, "creation_date": 1523076907, "last_edit_date": 1523115981, "question_id": 49703990, "link": "https://stackoverflow.com/questions/49703990/cant-borrow-mutably-within-two-different-closures-in-the-same-scope", "title": "Can&#39;t borrow mutably within two different closures in the same scope", "body": "<p>My goal is to make a function (specifically, floodfill) that works independent of the underlying data structure. I tried to do this by passing in two closures: one for querying, that borrows some data immutably, and another for mutating, that borrows the same data mutably.</p>\n\n<p>Example (tested on <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug\" rel=\"noreferrer\">the Rust Playground</a>):</p>\n\n<pre><code>#![feature(nll)]\n\nfn foo&lt;F, G&gt;(n: i32, closure: &amp;F, mut_closure: &amp;mut G)\nwhere\n    F: Fn(i32) -&gt; bool,\n    G: FnMut(i32) -&gt; (),\n{\n    if closure(n) {\n        mut_closure(n);\n    }\n}\n\nfn main() {\n    let mut data = 0;\n    let closure = |n| data == n;\n    let mut mut_closure = |n| {\n        data += n;\n    };\n    foo(0, &amp;closure, &amp;mut mut_closure);\n}\n</code></pre>\n\n<p>Error: (Debug, Nightly)</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0502]: cannot borrow `data` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:16:27\n   |\n15 |     let closure = |n| data == n;\n   |                   --- ---- previous borrow occurs due to use of `data` in closure\n   |                   |\n   |                   immutable borrow occurs here\n16 |     let mut mut_closure = |n| {\n   |                           ^^^ mutable borrow occurs here\n17 |         data += n;\n   |         ---- borrow occurs due to use of `data` in closure\n18 |     };\n19 |     foo(0, &amp;closure, &amp;mut mut_closure);\n   |            -------- borrow later used here\n</code></pre>\n\n<p>I did come up with a solution, but it is very ugly. It works if I combine the closures into one and specify which behavior I want with a parameter:</p>\n\n<pre><code>// #![feature(nll)] not required for this solution\n\nfn foo&lt;F&gt;(n: i32, closure: &amp;mut F)\nwhere\n    F: FnMut(i32, bool) -&gt; Option&lt;bool&gt;,\n{\n    if closure(n, false).unwrap() {\n        closure(n, true);\n    }\n}\n\nfn main() {\n    let mut data = 0;\n    let mut closure = |n, mutate| {\n        if mutate {\n            data += n;\n            None\n        } else {\n            Some(data == n)\n        }\n    };\n    foo(0, &amp;mut closure);\n}\n</code></pre>\n\n<p>Is there any way I can appease the borrow checker without this weird way of combining closures?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 17608, "user_id": 3650362, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Fqdi1.jpg?s=128&g=1", "display_name": "trentcl", "link": "https://stackoverflow.com/users/3650362/trentcl"}, "edited": false, "score": 0, "creation_date": 1539521986, "post_id": 49702229, "comment_id": 92524269, "body": "Possible duplicate of <a href=\"https://stackoverflow.com/questions/50905324/why-must-the-associated-type-be-specified-in-a-collection-of-references-to-types\">Why must the associated type be specified in a collection of references to types implementing a trait?</a>"}], "answers": [{"tags": [], "owner": {"reputation": 1602, "user_id": 5947247, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f5212b96ae435bb73b9980f34b2913e8?s=128&d=identicon&r=PG&f=1", "display_name": "Isaac van Bakel", "link": "https://stackoverflow.com/users/5947247/isaac-van-bakel"}, "is_accepted": false, "score": 1, "last_activity_date": 1539523691, "last_edit_date": 1539523691, "creation_date": 1539519914, "answer_id": 52802614, "question_id": 49702229, "link": "https://stackoverflow.com/questions/49702229/the-value-of-the-associated-type-must-be-specified-when-storing-a-struct-with/52802614#52802614", "title": "&quot;the value of the associated type must be specified&quot; when storing a struct with a type argument in another struct", "body": "<p>Your issue is that <code>Device + 'static</code> is not a type, but a bound, so you can't use it as a type argument. You can parameterise the struct with a type parameter that fulfills the bound:</p>\n\n<pre><code>pub struct Foo&lt;D : Device + 'static&gt; {\n    iface: Interface&lt;'static, 'static, 'static, D&gt;,  \n}\n</code></pre>\n\n<p>I don't think the compiler will allow for the kind of erasure you might be looking for - consider if we had similar code:</p>\n\n<pre><code>trait Foo&lt;A&gt; {\n    fn get_a() -&gt; A;\n}\n\nstruct Bar {\n    foo: Box&lt;Foo&lt;A&gt;&gt;,\n}\n\n// How would the compiler describe this type?\nlet a: ??? = some_bar.foo.get_a();\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 6861720, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/edfbcf83eddb9c18f9ed3e6c0619ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "Dragonight", "link": "https://stackoverflow.com/users/6861720/dragonight"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1317, "favorite_count": 0, "answer_count": 1, "score": 3, "last_activity_date": 1539523691, "creation_date": 1523057140, "last_edit_date": 1523059655, "question_id": 49702229, "link": "https://stackoverflow.com/questions/49702229/the-value-of-the-associated-type-must-be-specified-when-storing-a-struct-with", "title": "&quot;the value of the associated type must be specified&quot; when storing a struct with a type argument in another struct", "body": "<p>I would like to know how to have the struct <code>Interface</code> as a field in another struct when there is a type argument. </p>\n\n<pre><code>pub struct Interface&lt;'a, 'b, 'c, DeviceT: Device + 'a&gt; {}\n\npub struct Foo {\n    iface: Interface&lt;'static, 'static, 'static, Device + 'static&gt;,\n}\n\npub trait Device {\n    type RxBuffer: AsRef&lt;[u8]&gt;;\n    type TxBuffer: AsRef&lt;[u8]&gt; + AsMut&lt;[u8]&gt;;\n}\n</code></pre>\n\n<p>This results in the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0191]: the value of the associated type `TxBuffer` (from the trait `Device`) must be specified\n --&gt; src/main.rs:4:49\n  |\n4 |     iface: Interface&lt;'static, 'static, 'static, Device + 'static&gt;,\n  |                                                 ^^^^^^^^^^^^^^^^ missing associated type `TxBuffer` value\n\nerror[E0191]: the value of the associated type `RxBuffer` (from the trait `Device`) must be specified\n --&gt; src/main.rs:4:49\n  |\n4 |     iface: Interface&lt;'static, 'static, 'static, Device + 'static&gt;,\n  |                                                 ^^^^^^^^^^^^^^^^ missing associated type `RxBuffer` value\n</code></pre>\n\n<p>What is the correct way of having <code>interface</code> inside <code>Foo</code>?</p>\n"}, {"tags": ["rust", "rust-cargo"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1523039531, "post_id": 49698978, "comment_id": 86411245, "body": "I believe following the <a href=\"https://github.com/rust-lang-nursery/cli-wg/\" rel=\"nofollow noreferrer\">CLI working group</a> will be most fruitful. They have a specific issue for <a href=\"https://github.com/rust-lang-nursery/cli-wg/issues/23\" rel=\"nofollow noreferrer\">documentation of CLI apps</a>, which includes man pages."}, {"owner": {"reputation": 221, "user_id": 6914995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/749d6e0e943a088f536d1d3cff31fd9c?s=128&d=identicon&r=PG&f=1", "display_name": "Espen H", "link": "https://stackoverflow.com/users/6914995/espen-h"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1523040152, "post_id": 49698978, "comment_id": 86411537, "body": "Thanks for the links! After reading the documentation issue it seems man pages are an issue that has not been solved yet. I see ripgrep has a <a href=\"https://github.com/BurntSushi/ripgrep/blob/master/build.rs#L71\" rel=\"nofollow noreferrer\">working approach</a>. I&#39;ll have a look into that."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 5, "creation_date": 1523043960, "post_id": 49698978, "comment_id": 86413259, "body": "The key insight to ripgrep&#39;s approach was to define a light abstraction over clap that stores the state of each clap arg, which can then be reused to build the tedious parts of a man page pretty easily. This abstraction layer could be avoided if clap grew an API to query its arguments. (But that is a fairly sizable change to clap, and solving the specific case of ripgrep is much easier than the fully general case.)"}], "answers": [{"tags": [], "owner": {"reputation": 2455, "user_id": 10173009, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/VGJ2F.png?s=128&g=1", "display_name": "codesections", "link": "https://stackoverflow.com/users/10173009/codesections"}, "is_accepted": false, "score": 1, "last_activity_date": 1570372823, "creation_date": 1570372823, "answer_id": 58258326, "question_id": 49698978, "link": "https://stackoverflow.com/questions/49698978/what-is-the-idiomatic-way-of-writing-man-pages-for-rust-cli-tools/58258326#58258326", "title": "What is the idiomatic way of writing man pages for Rust CLI tools?", "body": "<p>The current best approach I am aware of is to use the <a href=\"https://github.com/rust-cli/man\" rel=\"nofollow noreferrer\">man</a> crate.  It is still a work in progress, and adding better support for man-page generation is an area that the CLI Working Group is actively working on.</p>\n\n<p>As described in more detail in the README, <code>man</code> lets generate man pages from syntax like:</p>\n\n<pre><code>use man::prelude::*;\n\nfn main() {\n    let page = Manual::new(\"basic\")\n        .about(\"A basic example\")\n        .author(Author::new(\"Alice Person\").email(\"alice@person.com\"))\n        .author(Author::new(\"Bob Human\").email(\"bob@human.com\"))\n        .flag(\n            Flag::new()\n                .short(\"-d\")\n                .long(\"--debug\")\n                .help(\"Enable debug mode\"),\n        )\n        .flag(\n            Flag::new()\n                .short(\"-v\")\n                .long(\"--verbose\")\n                .help(\"Enable verbose mode\"),\n        )\n        .option(\n            Opt::new(\"output\")\n                .short(\"-o\")\n                .long(\"--output\")\n                .help(\"The file path to write output to\"),\n        )\n        .example(\n            Example::new()\n                .text(\"run basic in debug mode\")\n                .command(\"basic -d\")\n                .output(\"Debug Mode: basic will print errors to the console\")\n            )\n        .custom(\n            Section::new(\"usage note\")\n                .paragraph(\"This program will overwrite any file currently stored at the output path\")\n        )\n        .render();\n\n    println!(\"{}\", page);\n}\n</code></pre>\n"}], "owner": {"reputation": 221, "user_id": 6914995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/749d6e0e943a088f536d1d3cff31fd9c?s=128&d=identicon&r=PG&f=1", "display_name": "Espen H", "link": "https://stackoverflow.com/users/6914995/espen-h"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 444, "favorite_count": 1, "answer_count": 1, "score": 13, "last_activity_date": 1570372823, "creation_date": 1523039249, "last_edit_date": 1523039361, "question_id": 49698978, "link": "https://stackoverflow.com/questions/49698978/what-is-the-idiomatic-way-of-writing-man-pages-for-rust-cli-tools", "title": "What is the idiomatic way of writing man pages for Rust CLI tools?", "body": "<p>CLI apps on Unix-like OSes generally provide man pages for reference. I have not yet seen any good guide on how to do this in the Rust ecosystem - what is the idiomatic way of doing this?</p>\n\n<p>I am aware of the Cargo <a href=\"https://doc.rust-lang.org/cargo/reference/build-scripts.html\" rel=\"noreferrer\">build scripts</a> feature, is this the way it is generally done? If yes, how would it generate man pages and how would it handle man installation on different OSes?</p>\n"}, {"tags": ["parsing", "rust", "nom"], "comments": [{"owner": {"reputation": 420, "user_id": 5133139, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/qltJF.jpg?s=128&g=1", "display_name": "\u30af\u30ea\u30db", "link": "https://stackoverflow.com/users/5133139/%e3%82%af%e3%83%aa%e3%83%9b"}, "edited": false, "score": 1, "creation_date": 1523033529, "post_id": 49696838, "comment_id": 86408097, "body": "Do you have to use nom for this? Couldn&#39;t you just bitwise <code>&amp; 2</code> your i32s in a loop until you hit a false?"}, {"owner": {"reputation": 1119, "user_id": 193584, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/58bf89ba2dfa037971b05d1afb0480a3?s=128&d=identicon&r=PG", "display_name": "xds2000", "link": "https://stackoverflow.com/users/193584/xds2000"}, "edited": false, "score": 0, "creation_date": 1523063446, "post_id": 49696838, "comment_id": 86419345, "body": "cloud you please reformat your question, input more example for your case, i don&#39;t understand your question anyone."}, {"owner": {"reputation": 2434, "user_id": 4591251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/22ad6242d3ca1d772c46a5d00389d925?s=128&d=identicon&r=PG", "display_name": "Ross MacArthur", "link": "https://stackoverflow.com/users/4591251/ross-macarthur"}, "edited": false, "score": 0, "creation_date": 1523087252, "post_id": 49696838, "comment_id": 86423498, "body": "I have updated the question. I have to use nom because this is part of a bigger parser. Maybe the best way is to manually write the parsing function that fits into nom."}, {"owner": {"reputation": 2434, "user_id": 4591251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/22ad6242d3ca1d772c46a5d00389d925?s=128&d=identicon&r=PG", "display_name": "Ross MacArthur", "link": "https://stackoverflow.com/users/4591251/ross-macarthur"}, "edited": false, "score": 0, "creation_date": 1523087441, "post_id": 49696838, "comment_id": 86423550, "body": "Like something like <code>fn parse_field(i: &amp;[u8]) -&gt; IResult&lt;&amp;[u8], [u32; 8]&gt; { .... }</code>"}], "answers": [{"tags": [], "owner": {"reputation": 8789, "user_id": 539465, "user_type": "registered", "accept_rate": 81, "profile_image": "https://www.gravatar.com/avatar/2acba600ecfbe1cc2e7f3c94b686ac84?s=128&d=identicon&r=PG", "display_name": "Valentin Lorentz", "link": "https://stackoverflow.com/users/539465/valentin-lorentz"}, "is_accepted": true, "score": 1, "last_activity_date": 1528020742, "creation_date": 1528020742, "answer_id": 50665257, "question_id": 49696838, "link": "https://stackoverflow.com/questions/49696838/conditionally-parsing-an-array-based-on-previous-elements-with-nom/50665257#50665257", "title": "Conditionally parsing an array based on previous elements with nom", "body": "<p>Here is a parser that matches the last <code>u32</code> of your input:</p>\n\n<pre><code>named!(last_u32&lt;u32&gt;,\n  verify!(le_u32, |n:u32| (n &amp; 0b1) != 0) // Matches iff the 31st bit is set\n);\n</code></pre>\n\n<p>you can then use it like this:</p>\n\n<pre><code>named!(parse_field&lt;Vec&lt;u32&gt;&gt;,\n  map!(\n    many_till!(le_u32, last_u32),\n    |(mut v,n)| { v.push(n); v } // Add the last u32 to the vector\n  ) \n);\n</code></pre>\n"}], "owner": {"reputation": 2434, "user_id": 4591251, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/22ad6242d3ca1d772c46a5d00389d925?s=128&d=identicon&r=PG", "display_name": "Ross MacArthur", "link": "https://stackoverflow.com/users/4591251/ross-macarthur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 452, "favorite_count": 0, "accepted_answer_id": 50665257, "answer_count": 1, "score": 2, "last_activity_date": 1528020742, "creation_date": 1523030596, "last_edit_date": 1523087214, "question_id": 49696838, "link": "https://stackoverflow.com/questions/49696838/conditionally-parsing-an-array-based-on-previous-elements-with-nom", "title": "Conditionally parsing an array based on previous elements with nom", "body": "<p>I need to parse an array of 32 bit ints (little endian), from an array of u8s, however the next int only exists if the 31st bit of the current int is set. If the rest don't exist then the rest of the array should be set to zeroes. I'm not sure how to go about conditionally parsing the next element.</p>\n\n<p>Lets say the field is 4 bytes long. Then the result of the parse_field function would be that the 4 bytes would be parsed with le_u32, and that would be the first element in the [u32; 8] array. If however, this field's 31st bit is set. Then there exists another 4 bytes that is also like this field and it goes in the next element in the array. If it is not set then the function must return, the array with the rest of the elements set to zero. And this continue for each existing field.</p>\n\n<p>For example for the following input:</p>\n\n<pre><code>0x8000000a\n0x8000000b\n...\n</code></pre>\n\n<p>You would get <code>[0x8000000a, 0x8000000b, 0, 0, 0, 0, 0, 0]</code></p>\n\n<p>But if the input is </p>\n\n<pre><code>0x8000000a\n0x8000000b\n0x8000000c\n0x8000000d\n0x8000000e\n....\n</code></pre>\n\n<p>Then you would get <code>[0x8000000a, 0x8000000b, 0x8000000c, 0x8000000d, 0x8000000e, 0, 0, 0]</code></p>\n\n<pre><code>extern crate nom;\n\nuse nom::*;\n\n#[derive(Clone, Copy, Debug)]\nstruct Derp {\n    field: [u32; 8]\n}\n\nnamed!(parse_field&lt;[u32; 8]&gt;,\n\n    // what do I do here\n\n);\n\n\nnamed!(parse_derp&lt;Derp&gt;,\n    do_parse!(\n        field: parse_field &gt;&gt;\n        (Derp {\n            field: field\n        })\n    )\n);\n\nfn main() {\n    let temp = [0x0a, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x00, 0x80];\n    println!(\"{:?}\", parse_derp(&amp;temp));\n}\n</code></pre>\n\n<p>Also is it possibly better to use a Vec here?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1523024875, "post_id": 49694989, "comment_id": 86402678, "body": "I believe your question to already be answered by <a href=\"https://stackoverflow.com/q/47662253/155423\">Why is it legal to borrow a temporary?</a>. If you disagree, please <a href=\"https://stackoverflow.com/posts/49694989/edit\">edit</a> your question to explain why it is different."}, {"owner": {"reputation": 170, "user_id": 2996594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SNhXT.jpg?s=128&g=1", "display_name": "djrollins", "link": "https://stackoverflow.com/users/2996594/djrollins"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1523025155, "post_id": 49694989, "comment_id": 86402878, "body": "@Shepmaster. Yes, thank you. The specifics of my question were answered by <a href=\"https://stackoverflow.com/a/47663168/2996594\">this answer</a> on the question you linked"}], "owner": {"reputation": 170, "user_id": 2996594, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/SNhXT.jpg?s=128&g=1", "display_name": "djrollins", "link": "https://stackoverflow.com/users/2996594/djrollins"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": false, "view_count": 28, "favorite_count": 0, "closed_date": 1523025280, "answer_count": 0, "score": 2, "last_activity_date": 1523024688, "creation_date": 1523024566, "last_edit_date": 1523024688, "question_id": 49694989, "link": "https://stackoverflow.com/questions/49694989/how-does-rust-deal-with-the-intermediate-value-in-a-single-expression-that-creat", "closed_reason": "Duplicate", "title": "How does Rust deal with the intermediate value in a single expression that creates a reference-to-reference?", "body": "<p>I was playing around with pointers and references in Rust and noticed you can create a pointer-to-pointer or reference-to-reference in a single expression:</p>\n\n<pre><code>let i = 0;\nlet irr = &amp;(&amp;i);\nlet ipp: *const *const i32 = &amp;(&amp;i as *const i32);\n</code></pre>\n\n<p>If I was to try something similar in C, I would get a compile error because the 'addressof' operator returns an rvalue which doesn't have a storage location so cannot be pointed to:</p>\n\n<pre><code>int i = 0;\nint *ip = &amp;i;\nint **ipp = &amp;ip;\nint **ipp = &amp;(&amp;i); /* error: cannot take the address of an rvalue of type 'int *' */\n</code></pre>\n\n<p>How does Rust deal with the intermediate pointer/reference? Does it silently put it on the stack or is there some other magic going on?</p>\n"}, {"tags": ["casting", "rust", "unsafe"], "comments": [{"owner": {"reputation": 5700, "user_id": 3131852, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/26365707ecfa02e221f5192aaaa29a43?s=128&d=identicon&r=PG", "display_name": "Tim Diekmann", "link": "https://stackoverflow.com/users/3131852/tim-diekmann"}, "edited": false, "score": 3, "creation_date": 1523010252, "post_id": 49690459, "comment_id": 86392887, "body": "This is platform dependent, since you don&#39;t take the <a href=\"https://en.wikipedia.org/wiki/Endianness\" rel=\"nofollow noreferrer\">byteorder</a> into account."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 5, "creation_date": 1523011448, "post_id": 49690459, "comment_id": 86393638, "body": "<a href=\"https://docs.rs/byteorder/1.2.2/byteorder/trait.ByteOrder.html#tymethod.from_slice_u32\" rel=\"nofollow noreferrer\">docs.rs/byteorder/1.2.2/byteorder/&hellip;</a> can be used to account for byte order, without copying and is a no-op when the source byte order is the same as the host byte order. Otherwise, I believe your code is safe. Note that the reverse isn&#39;t necessarily safe! (Because of alignment.)"}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1523014018, "post_id": 49690459, "comment_id": 86395237, "body": "Related: <a href=\"https://codereview.stackexchange.com/questions/187013/base64-string-\" title=\"base64 string \">codereview.stackexchange.com/questions/187013/base64-string-</a>&zwnj;&#8203;\u2194-float-array/187077"}], "answers": [{"comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1523025046, "post_id": 49694475, "comment_id": 86402805, "body": "And I&#39;m not sure that <code>size_of::&lt;u32&gt;() &#47; size_of::&lt;u8&gt;()</code> is much better than <code>4</code>. You have to know the sizes of those types in order to know there won&#39;t be any rounding errors. It would be better to multiply by <code>size_of::&lt;u32&gt;() </code> and then divide by <code>size_of::&lt;u8&gt;()</code>, which you&#39;d have to do if you wrote this generically."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1523025238, "post_id": 49694475, "comment_id": 86402931, "body": "@PeterHall You also have to know the sizes of the types to know that <code>4</code> is the correct result, this just moves comments to code. If constant evaluation was further along, I&#39;d move the <code>let</code> to a <code>const</code> and add a <a href=\"https://doc.rust-lang.org/std/macro.compile_error.html\" rel=\"nofollow noreferrer\"><code>compile_error!</code></a> that asserts the value is <code>4</code>. I&#39;d strongly advocate for <i>not</i>  writing this generically, so I wasn&#39;t as concerned about that case ;-)"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1523025380, "post_id": 49694475, "comment_id": 86403016, "body": "I think you can write this generically, as long as you assume the output is &amp;[u8], in which case you can dispense with the division, and just multiply by the <code>size_of</code> the source type."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1523025631, "post_id": 49694475, "comment_id": 86403196, "body": "@PeterHall well, depends on how generic you mean and what you expect the behavior to be. For example, if you allow an input <code>Vec&lt;T&gt;</code>, you allow a <code>Vec&lt;&amp;[(String, BTreeMap&lt;char, f32&gt;, PhantomData)]&gt;</code> as well, which I wouldn&#39;t think would be a great idea."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1523025871, "post_id": 49694475, "comment_id": 86403360, "body": "@PeterHall if you want a more principled generic, something like the <a href=\"https://crates.io/crates/safe-transmute\" rel=\"nofollow noreferrer\">safe-transmute crate</a> might be more applicable."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1523025920, "post_id": 49694475, "comment_id": 86403397, "body": "What&#39;s wrong with that? You know.. if you wanted to turn a bunch of pointers to bytes... :P But you can obviously protect from that by using marker traits to opt-in useful types. It would look something like: <a href=\"https://play.rust-lang.org/?gist=736bf9be1c798d568f22471be7f677ff&amp;version=stable\" rel=\"nofollow noreferrer\">play.rust-lang.org/&hellip;</a>"}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 1, "creation_date": 1523025974, "post_id": 49694475, "comment_id": 86403447, "body": "I didn&#39;t know about that crate! I&#39;m sure there didn&#39;t used to be so many crates... ;)"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1523033498, "post_id": 49694475, "comment_id": 86408080, "body": "The issue with <code>Layout</code> is not something I&#39;d have suspected. In low-level code I&#39;m used to worrying about casting to a pointer with <i>greater</i> alignment, but casting to a pointer with <i>lower</i> alignment has always been safe. I wonder if it should be specified that allocators should handle this case graciously."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1583264566, "last_edit_date": 1583264566, "creation_date": 1523022970, "answer_id": 49694475, "question_id": 49690459, "link": "https://stackoverflow.com/questions/49690459/converting-a-vecu32-to-vecu8-in-place-and-with-minimal-overhead/49694475#49694475", "title": "Converting a Vec&lt;u32&gt; to Vec&lt;u8&gt; in-place and with minimal overhead", "body": "<ol>\n<li><p>Whenever writing an <code>unsafe</code> block, I <em>strongly</em> encourage people to include a comment on the block explaining <em>why you think the code is actually safe</em>. That type of information is useful for the people who read the code in the future.</p></li>\n<li><p>Instead of adding comments about the \"magic number\" 4, just use <code>mem::size_of::&lt;u32&gt;</code>. I'd even go so far as to use <code>size_of</code> for <code>u8</code> and perform the division for maximum clarity.</p></li>\n<li><p>You can return the newly-created Vec from the <code>unsafe</code> block.</p></li>\n<li><p>As mentioned in the comments, \"dumping\" a block of data like this makes the data format <em>platform dependent</em>; you will get different answers on little endian and big endian systems. This can lead to massive debugging headaches in the future. File formats either encode the platform endianness into the file (making the reader's job harder) or only write a specific endinanness to the file (making the writer's job harder).</p></li>\n<li><p>I'd probably move the whole <code>unsafe</code> block to a function and give it a name, just for organization purposes.</p></li>\n<li><p>You don't need to import <code>Vec</code>, it's in the prelude.</p></li>\n</ol>\n\n    \n\n<pre><code>use std::mem;\n\nfn main() {\n    let mut vec32 = vec![1u32, 2];\n\n    // I copy-pasted this code from StackOverflow without reading the answer \n    // surrounding it that told me to write a comment explaining why this code \n    // is actually safe for my own use case.\n    let vec8 = unsafe {\n        let ratio = mem::size_of::&lt;u32&gt;() / mem::size_of::&lt;u8&gt;();\n\n        let length = vec32.len() * ratio;\n        let capacity = vec32.capacity() * ratio;\n        let ptr = vec32.as_mut_ptr() as *mut u8;\n\n        // Don't run the destructor for vec32\n        mem::forget(vec32);\n\n        // Construct new Vec\n        Vec::from_raw_parts(ptr, length, capacity)\n    };\n\n    println!(\"{:?}\", vec8)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=57d8a8c93f81595c5976b0917b93098c&amp;version=stable\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>My biggest unknown worry about this code lies in the alignment of the memory associated with the <code>Vec</code>.</p>\n\n<p>Rust's underlying allocator <a href=\"https://doc.rust-lang.org/std/alloc/trait.Alloc.html#tymethod.alloc\" rel=\"nofollow noreferrer\">allocates</a> and <a href=\"https://doc.rust-lang.org/std/alloc/trait.Alloc.html#tymethod.dealloc\" rel=\"nofollow noreferrer\">deallocates</a> memory with <em>a specific <a href=\"https://doc.rust-lang.org/std/alloc/struct.Layout.html\" rel=\"nofollow noreferrer\"><code>Layout</code></a></em>. <code>Layout</code> contains such information as the <em>size</em> and <em>alignment</em> of the pointer. </p>\n\n<p>I'd assume that this code needs the <code>Layout</code> to match between paired calls to <code>alloc</code> and <code>dealloc</code>. If that's the case, <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/liballoc/raw_vec.rs#L680-L698\" rel=\"nofollow noreferrer\">dropping the <code>Vec&lt;u8&gt;</code> constructed from a <code>Vec&lt;u32&gt;</code> might tell the allocator the wrong alignment</a> since that information is <a href=\"https://github.com/rust-lang/rust/blob/1.25.0/src/liballoc/raw_vec.rs#L224-L236\" rel=\"nofollow noreferrer\">based on the element type</a>.</p>\n\n<p>Without better knowledge, the \"best\" thing to do would be to leave the <code>Vec&lt;u32&gt;</code> as-is and simply get a <code>&amp;[u8]</code> to it. The slice has no interaction with the allocator, avoiding this problem.</p>\n\n<p>Even without interacting with the allocator, you need to be careful about alignment!</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/29037033/155423\">How to slice a large Vec&lt;i32&gt; as &amp;[u8]?</a></li>\n<li><a href=\"https://stackoverflow.com/a/48309116/155423\">https://stackoverflow.com/a/48309116/155423</a></li>\n</ul>\n"}, {"comments": [{"owner": {"reputation": 7096, "user_id": 3990767, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/0a5741a212e3b0e6bd46a8a1e6d76a4a?s=128&d=identicon&r=PG", "display_name": "SOFe", "link": "https://stackoverflow.com/users/3990767/sofe"}, "edited": false, "score": 2, "creation_date": 1578755293, "post_id": 49701065, "comment_id": 105546159, "body": "Would the compiler&#39;s optimization (with <code>-O3</code>) make the whole for-loop a no-op?"}], "tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": false, "score": 3, "last_activity_date": 1523049336, "creation_date": 1523049336, "answer_id": 49701065, "question_id": 49690459, "link": "https://stackoverflow.com/questions/49690459/converting-a-vecu32-to-vecu8-in-place-and-with-minimal-overhead/49701065#49701065", "title": "Converting a Vec&lt;u32&gt; to Vec&lt;u8&gt; in-place and with minimal overhead", "body": "<p>If in-place convert is not so mandatory, something like this manages <a href=\"https://docs.rs/byteorder/1.2.2/byteorder\" rel=\"nofollow noreferrer\">bytes order</a> control and avoids the unsafe block:</p>\n\n<pre><code>extern crate byteorder;\n\nuse byteorder::{WriteBytesExt, BigEndian};\n\nfn main() {\n    let vec32: Vec&lt;u32&gt; = vec![0xaabbccdd, 2];\n    let mut vec8: Vec&lt;u8&gt; = vec![];\n\n    for elem in vec32 {\n        vec8.write_u32::&lt;BigEndian&gt;(elem).unwrap();\n    }\n\n    println!(\"{:?}\", vec8);\n}\n</code></pre>\n"}], "owner": {"reputation": 6454, "user_id": 248065, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/95fb14ef95ad722e78e25f065c9d8ec6?s=128&d=identicon&r=PG", "display_name": "Thom Wiggers", "link": "https://stackoverflow.com/users/248065/thom-wiggers"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2657, "favorite_count": 1, "accepted_answer_id": 49694475, "answer_count": 2, "score": 8, "last_activity_date": 1583264566, "creation_date": 1523009581, "last_edit_date": 1523023330, "question_id": 49690459, "link": "https://stackoverflow.com/questions/49690459/converting-a-vecu32-to-vecu8-in-place-and-with-minimal-overhead", "title": "Converting a Vec&lt;u32&gt; to Vec&lt;u8&gt; in-place and with minimal overhead", "body": "<p>I'm trying to convert a <code>Vec</code> of <code>u32</code>s to a <code>Vec</code> of <code>u8</code>s, preferably in-place and without too much overhead.</p>\n\n<p>My current solution relies on unsafe code to re-construct the <code>Vec</code>. Is there a better way to do this, and what are the risks associated with my solution?</p>\n\n<pre><code>use std::mem;\nuse std::vec::Vec;\n\nfn main() {\n    let mut vec32 = vec![1u32, 2];\n    let vec8;\n    unsafe {\n        let length = vec32.len() * 4; // size of u8 = 4 * size of u32\n        let capacity = vec32.capacity() * 4; // ^\n        let mutptr = vec32.as_mut_ptr() as *mut u8;\n        mem::forget(vec32); // don't run the destructor for vec32\n\n        // construct new vec\n        vec8 = Vec::from_raw_parts(mutptr, length, capacity);\n    }\n\n    println!(\"{:?}\", vec8)\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=16096c9762610f92e9ff232da9ef841c&amp;version=stable\" rel=\"noreferrer\">Rust Playground link</a></p>\n"}, {"tags": ["rust", "embedded", "stm32", "cortex-m"], "comments": [{"owner": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "edited": false, "score": 0, "creation_date": 1523005135, "post_id": 49688438, "comment_id": 86389474, "body": "Unrelated, but I would advise setting the trigger mode (falling edge) <i>before</i> enabling the interrupt. You may get a stray interrupt for the wrong trigger otherwise."}, {"owner": {"reputation": 11381, "user_id": 4774918, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/kQQAl.jpg?s=128&g=1", "display_name": "too honest for this site", "link": "https://stackoverflow.com/users/4774918/too-honest-for-this-site"}, "edited": false, "score": 0, "creation_date": 1523036978, "post_id": 49688438, "comment_id": 86409966, "body": "The STM32 reference manuals are clear enough. What specifically about  them is unclear?"}], "answers": [{"comments": [{"owner": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "reply_to_user": {"reputation": 33488, "user_id": 6110094, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/wozpD.png?s=128&g=1", "display_name": "0___________", "link": "https://stackoverflow.com/users/6110094/0"}, "edited": false, "score": 1, "creation_date": 1523008149, "post_id": 49689054, "comment_id": 86391465, "body": "@PeterJ_01 ; Language designers always make such claims for their own languages.  You would hardly promote an unreliable, slow and complicated language would you!?"}, {"owner": {"reputation": 33488, "user_id": 6110094, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/wozpD.png?s=128&g=1", "display_name": "0___________", "link": "https://stackoverflow.com/users/6110094/0"}, "edited": false, "score": 0, "creation_date": 1523009421, "post_id": 49689054, "comment_id": 86392331, "body": "you know that uC software development is different than the &quot;big computer&quot; one. I have seen so many attempts to make it &quot;simple, easy and fast&quot; - but they all misserably failed. And 40years old good C rules :).  BTW - I have started last year with C++ on uCs and it very promising (generated code is same good as C)."}, {"owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "edited": false, "score": 2, "creation_date": 1523016316, "post_id": 49689054, "comment_id": 86396758, "body": "Rust is certainly not simple, I&#39;ll give you that. RTFM is interesting in that it is guaranteed to be deadlock free, free of data races, uses hardware-assisted scheduling and is efficient and memory safe, so I&#39;m trying to wrap my head around it.   If I wanted results quickly, I&#39;d simply use plain C or Arduino."}], "tags": [], "owner": {"reputation": 76010, "user_id": 168986, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/MqorX.jpg?s=128&g=1", "display_name": "Clifford", "link": "https://stackoverflow.com/users/168986/clifford"}, "is_accepted": false, "score": 2, "last_activity_date": 1523010786, "last_edit_date": 1523010786, "creation_date": 1523005036, "answer_id": 49689054, "question_id": 49688438, "link": "https://stackoverflow.com/questions/49688438/how-to-trigger-interrupts-from-a-gpio/49689054#49689054", "title": "How to trigger interrupts from a GPIO", "body": "<p>I do not know Rust, but the hardware steps necessary are:</p>\n\n<ol>\n<li>Enable the APB2 clock</li>\n<li>Configure the GPIO</li>\n<li>Connect the EXTI0 line to the GPIO PA0 pin (via SYSCFG unit)</li>\n<li>Configure EXTI mode (interrupt) and trigger (falling-edge)</li>\n<li>Configure the NVIC (set EXTI0 priority, enable EXIT0 interrupt)</li>\n<li>Enable the EXTI0 interrupt</li>\n</ol>\n\n<p>I cannot see step 3 or 5 in the code.  It is necessary to enable the IRQ in the NVIC <em>and</em> enable the interrupt in the EXTI peripheral. </p>\n\n<p>In C using the standard peripheral library step 3 would look like:</p>\n\n<pre><code>SYSCFG_EXTILineConfig( EXTI_PortSourceGPIOA, EXTI_PinSource0 );\n</code></pre>\n\n<p>I have no idea what the Rust equivalent would be.</p>\n"}], "owner": {"reputation": 6196, "user_id": 58962, "user_type": "registered", "accept_rate": 65, "profile_image": "https://www.gravatar.com/avatar/8c882c9b948732cb30f3cc4d1fdc86c9?s=128&d=identicon&r=PG", "display_name": "Michael B&#246;ckling", "link": "https://stackoverflow.com/users/58962/michael-b%c3%b6ckling"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 634, "favorite_count": 0, "closed_date": 1523187093, "answer_count": 1, "score": 2, "last_activity_date": 1523272781, "creation_date": 1523002946, "last_edit_date": 1523272781, "question_id": 49688438, "link": "https://stackoverflow.com/questions/49688438/how-to-trigger-interrupts-from-a-gpio", "closed_reason": "Needs more focus", "title": "How to trigger interrupts from a GPIO", "body": "<p>I'm porting a toy app to the <a href=\"https://github.com/japaric/cortex-m-rtfm\" rel=\"nofollow noreferrer\">RTFM</a> framework, and have a hard time figuring out how to trigger an interrupt via GPIO.</p>\n\n<pre><code>fn init(p: init::Peripherals, _r: init::Resources) -&gt; init::LateResources {\n    let dp: stm32f103xx::Peripherals = p.device;\n    let mut rcc = dp.RCC.constrain();\n    let mut gpioa = dp.GPIOA.split(&amp;mut rcc.apb2);\n    let int = gpioa.pa0.into_floating_input(&amp;mut gpioa.crl);\n    dp.EXTI.imr.write(|w| w.mr0().set_bit()); // unmask the interrupt (EXTI)\n    dp.EXTI.ftsr.write(|w| w.tr0().set_bit()); // trigger interrupt on falling edge  \n\n    init::LateResources {\n        EXTI: dp.EXTI,\n        INT: int\n    }\n}\n\nfn idle(t: &amp;mut Threshold, mut r: idle::Resources) -&gt; ! {\n    loop { rtfm::wfi(); }\n}\n\nfn exti0(_t: &amp;mut Threshold, mut r: EXTI0::Resources) {\n    // never called\n}\n</code></pre>\n\n<p>This setups enables me to trigger an interrupt, but there is a SEGV when the handler is supposed to be called. I dumped the binary, and in the INTERRUPTS section the ext0 interrupt 8000058 points to the address 080024e7. I cannot find a corresponding function with addr2line in the binary, so it might be a linker error?</p>\n\n<p>I was under the impression that RTFM maps interrupts to task names, and I do have a task called \"EXTI0\".</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 12, "last_activity_date": 1522985988, "creation_date": 1522985988, "answer_id": 49684917, "question_id": 49684657, "link": "https://stackoverflow.com/questions/49684657/what-is-the-difference-between-str-and-static-str-in-a-static-or-const/49684917#49684917", "title": "What is the difference between `&amp;str` and `&amp;&#39;static str` in a static or const?", "body": "<p>Nothing, there is no difference. As of <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\" rel=\"noreferrer\">RFC 1623</a>, references in <code>static</code> and <code>const</code> items are automatically <code>'static</code>. This took effect in <a href=\"https://blog.rust-lang.org/2017/04/27/Rust-1.17.html\" rel=\"noreferrer\">Rust 1.17</a>.</p>\n"}], "owner": {"reputation": 5661, "user_id": 2541276, "user_type": "registered", "accept_rate": 55, "profile_image": "https://graph.facebook.com/100001587714573/picture?type=large", "display_name": "Rajkumar Natarajan", "link": "https://stackoverflow.com/users/2541276/rajkumar-natarajan"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1292, "favorite_count": 0, "accepted_answer_id": 49684917, "answer_count": 1, "score": 9, "last_activity_date": 1522985988, "creation_date": 1522983929, "last_edit_date": 1522985889, "question_id": 49684657, "link": "https://stackoverflow.com/questions/49684657/what-is-the-difference-between-str-and-static-str-in-a-static-or-const", "title": "What is the difference between `&amp;str` and `&amp;&#39;static str` in a static or const?", "body": "<p>I'm new to Rust programming and learning about lifetimes.</p>\n\n<pre><code>const CONST_MEEP: &amp;str = \"MEEP\";\nconst CONST_LIFETIME_MEEP: &amp;'static str = \"MEEP\";\nstatic STATIC_MEEP: &amp;'static str = \"MEEP\";\nstatic STATIC_LIFETIME_MEEP: &amp;str = \"MEEP\";\n\nfn main() {\n    println!(\"CONST_MEEP is {}\", CONST_MEEP);\n    println!(\"CONST_LIFETIME_MEEP is {}\", CONST_LIFETIME_MEEP);\n    println!(\"STATIC_MEEP is {}\", STATIC_MEEP);\n    println!(\"STATIC_LIFETIME_MEEP is {}\", STATIC_LIFETIME_MEEP);\n}\n</code></pre>\n\n<p>The output:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>CONST_MEEP is MEEP\nCONST_LIFETIME_MEEP is MEEP\nSTATIC_MEEP is MEEP\nSTATIC_LIFETIME_MEEP is MEEP\n</code></pre>\n\n<p>What is the difference between <code>CONST_MEEP</code> and <code>CONST_LIFETIME_MEEP</code>? What is the difference between <code>STATIC_MEEP</code> and <code>STATIC_LIFETIME_MEEP</code>?</p>\n"}, {"tags": ["stream", "iterator", "rust", "unsafe"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 3, "creation_date": 1522978910, "post_id": 49683888, "comment_id": 86379547, "body": "Whenever writing an <code>unsafe</code> block, I <i>strongly</i> encourage people to include a comment on the block explaining <i>why you think the code is actually safe</i>. That type of information is useful for the people who read the code in the future, and will be useful to any potential answerer. Please <a href=\"https://stackoverflow.com/posts/49683888/edit\">edit</a> your question to explain why <b>you</b> think this code is actually safe"}, {"owner": {"reputation": 71, "user_id": 5934166, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3e2e25eae4be20f70b95a92c8e6e556?s=128&d=identicon&r=PG&f=1", "display_name": "chamaken", "link": "https://stackoverflow.com/users/5934166/chamaken"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1522985648, "post_id": 49683888, "comment_id": 86381041, "body": "Thank you for your always prompt response. Talking about  <code>unsafe</code>, I have no thought, sorry. I recognize I just try to cheat lifetime checker. valgrind actually reports your <code>example()</code> code read invalid."}, {"owner": {"reputation": 25137, "user_id": 4498831, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/jDBV2.png?s=128&g=1", "display_name": "Boiethios", "link": "https://stackoverflow.com/users/4498831/boiethios"}, "edited": false, "score": 0, "creation_date": 1523004681, "post_id": 49683888, "comment_id": 86389197, "body": "There is <b>no way</b> to do what you want to do (and believe me, I tried). You must wait for generic associated types and an update of Rust iterators."}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 2, "last_activity_date": 1523021564, "last_edit_date": 1523021564, "creation_date": 1522979660, "answer_id": 49684062, "question_id": 49683888, "link": "https://stackoverflow.com/questions/49683888/handling-streaming-iterator-as-normal-iterator-by-using-phantomdata-and-unsafe/49684062#49684062", "title": "Handling streaming iterator as normal iterator by using PhantomData and unsafe", "body": "<p>This code is <strong>not safe</strong>. The user of the type may choose any lifetime, including <code>'static</code>:</p>\n\n<pre><code>fn constructor() -&gt; Foo&lt;'static&gt; {\n    Foo {\n        v: vec![42; 10],\n        pos: 0,\n        phantom: std::marker::PhantomData,\n    }\n}\n\nfn example() -&gt; &amp;'static u8 {\n    let mut f = constructor();\n    f.next().unwrap()\n}\n\nfn main() {\n    println!(\"example: {}\", example());\n}\n</code></pre>\n\n<p>Here, <code>example</code> returns a reference to a variable that is no longer in scope, accessing invalid memory and subverting the restrictions you must uphold.</p>\n\n<hr>\n\n<p>There's <a href=\"https://stackoverflow.com/a/49684475/155423\">an example of how you could write this code</a> with no <code>unsafe</code> whatsoever in another Q&amp;A.</p>\n"}], "owner": {"reputation": 71, "user_id": 5934166, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a3e2e25eae4be20f70b95a92c8e6e556?s=128&d=identicon&r=PG&f=1", "display_name": "chamaken", "link": "https://stackoverflow.com/users/5934166/chamaken"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 46, "favorite_count": 0, "answer_count": 1, "score": -1, "last_activity_date": 1523021564, "creation_date": 1522978029, "last_edit_date": 1522978801, "question_id": 49683888, "link": "https://stackoverflow.com/questions/49683888/handling-streaming-iterator-as-normal-iterator-by-using-phantomdata-and-unsafe", "title": "Handling streaming iterator as normal iterator by using PhantomData and unsafe", "body": "<p>I know the code below is hacky, but could it be called safe and idiomatic Rust? Is there better way for this?</p>\n\n<pre><code>// needs to do 'rustup default nightly' to run under valgrind\n// #![feature(alloc_system, global_allocator, allocator_api)]\n// extern crate alloc_system;\n// use alloc_system::System;\n// #[global_allocator]\n// static A: System = System;\n\nstruct Foo&lt;'a&gt; {\n    v: Vec&lt;u8&gt;,\n    pos: usize,\n    phantom: std::marker::PhantomData&lt;&amp;'a u8&gt;,\n}\n\nimpl&lt;'a&gt; Iterator for Foo&lt;'a&gt; {\n    type Item = &amp;'a mut u8;\n\n    fn next(&amp;mut self) -&gt; Option&lt;&amp;'a mut u8&gt; {\n        let r = self.v.get_mut(self.pos);\n        if r.is_some() {\n            self.pos += 1;\n            unsafe { Some(&amp;mut *(r.unwrap() as *mut u8)) }\n        } else {\n            None\n        }\n    }\n}\n\nimpl&lt;'a&gt; Foo&lt;'a&gt; {\n    fn reset(&amp;mut self) {\n        self.pos = 0;\n    }\n}\n\nfn main() {\n    let mut x = Foo {\n        v: (1..10).collect(),\n        pos: 0,\n        phantom: std::marker::PhantomData,\n    };\n    let vp = x.v.as_ptr();\n\n    {\n        for i in &amp;mut x {\n            println!(\"{}\", i);\n        }\n    }\n    {\n        x.reset();\n    }\n    {\n        for i in &amp;mut x {\n            *i *= *i;\n        }\n    }\n    {\n        x.reset();\n    }\n    {\n        for i in &amp;mut x {\n            println!(\"{}\", i);\n        }\n    }\n\n    assert!(vp == x.v.as_ptr());\n}\n</code></pre>\n\n<p>Write a little bit in the comment, Valgrind told me no leak and the result is as expected under Rust 1.26.0-nightly and 1.25.0.</p>\n\n<p>Related:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/30422177/how-do-i-write-an-iterator-that-returns-references-to-itself\">How do I write an iterator that returns references to itself?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/24574741/iterator-returning-items-by-reference-lifetime-issue\">Iterator returning items by reference, lifetime issue</a></li>\n</ul>\n"}, {"tags": ["rust", "rust-piston"], "comments": [{"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1522950070, "post_id": 49677355, "comment_id": 86368222, "body": "Your code sample is not complete. For example, what is <code>self</code> there?"}, {"owner": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "reply_to_user": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "edited": false, "score": 0, "creation_date": 1522950933, "post_id": 49677355, "comment_id": 86368692, "body": "I added the struct definition and its impl block."}], "answers": [{"comments": [{"owner": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "edited": false, "score": 0, "creation_date": 1522951899, "post_id": 49678619, "comment_id": 86369192, "body": "Thank you! I haven&#39;t realized I already had a reference type. I have to read those compiler errors more carefully."}, {"owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "reply_to_user": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "edited": false, "score": 3, "creation_date": 1522951980, "post_id": 49678619, "comment_id": 86369237, "body": "@Januson Those &quot;help&quot; lines in the error messages are usually very... helpful!"}], "tags": [], "owner": {"reputation": 36134, "user_id": 493729, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/bU0Kx.jpg?s=128&g=1", "display_name": "Peter Hall", "link": "https://stackoverflow.com/users/493729/peter-hall"}, "is_accepted": true, "score": 2, "last_activity_date": 1522951924, "last_edit_date": 1522951924, "creation_date": 1522950962, "answer_id": 49678619, "question_id": 49677355, "link": "https://stackoverflow.com/questions/49677355/piston-genericevent-not-implemented-for-event/49678619#49678619", "title": "Piston GenericEvent not implemented for Event", "body": "<p>The <code>event</code> variable has type <code>&amp;Event</code>, not <code>Event</code>, so you are actually trying to pass an <code>&amp;&amp;Event</code> to <code>window.draw_2d</code>. <code>Event</code> implements <code>GenericEvent</code> but <code>&amp;Event</code> does not, which is why you see that error.</p>\n\n<p>You just need to do:</p>\n\n<pre><code>self.window.draw_2d(event, |context, graphics| {\n  ...\n}\n</code></pre>\n\n<p>instead of:</p>\n\n<pre><code>self.window.draw_2d(&amp;event, |context, graphics| {\n  ...\n}\n</code></pre>\n\n<p>To be fair on the Rust compiler, it couldn't have done much more to point you in the right direction. When I compile your code, the full error message is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the trait bound `&amp;piston_window::Event: piston_window::GenericEvent` is not satisfied\n  --&gt; src/main.rs:34:21\n   |\n34 |         self.window.draw_2d(&amp;event, |context, graphics| {\n   |                     ^^^^^^^ the trait `piston_window::GenericEvent` is not implemented for `&amp;piston_window::Event`\n   |\n   = help: the following implementations were found:\n             &lt;piston_window::Event as piston_window::GenericEvent&gt;\n</code></pre>\n\n<p>That last \"help\" part is telling you that <code>piston_window::Event</code> <em>does</em> have the right implementation, while the preceding error is saying that <code>&amp;piston_window::Event</code> does not.</p>\n"}], "owner": {"reputation": 3668, "user_id": 2392960, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a549fcc9b00c4ce0ede36ede98548729?s=128&d=identicon&r=PG", "display_name": "Januson", "link": "https://stackoverflow.com/users/2392960/januson"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 182, "favorite_count": 0, "accepted_answer_id": 49678619, "answer_count": 1, "score": 1, "last_activity_date": 1522951924, "creation_date": 1522946052, "last_edit_date": 1522950864, "question_id": 49677355, "link": "https://stackoverflow.com/questions/49677355/piston-genericevent-not-implemented-for-event", "title": "Piston GenericEvent not implemented for Event", "body": "<p>I am trying to write a game in Rust using <strong>piston_window(0.77.0)</strong> library. Starting from their <a href=\"http://www.piston.rs/\" rel=\"nofollow noreferrer\">hello world</a> example I thought I would start by separating of rendering logic into a method using Event as parameter since according to <a href=\"http://docs.piston.rs/piston_window/piston_window/struct.PistonWindow.html#method.next\" rel=\"nofollow noreferrer\">documentation</a> it is returned by <code>window.next()</code>.</p>\n\n<pre><code>use piston_window::*;\n\npub struct UI&lt;'a&gt; {\n    window: &amp;'a mut PistonWindow,\n}\n\nimpl &lt;'a&gt; UI&lt;'a&gt; {\n    pub fn new(window: &amp;mut PistonWindow) -&gt; UI {\n        UI {\n            window,\n        }\n    }\n\n    fn render(&amp;self, event: &amp;Event) {\n        self.window.draw_2d(&amp;event, |context, graphics| {\n            clear([1.0; 4], graphics);\n            rectangle(\n                [1.0, 0.0, 0.0, 1.0],\n                [0.0, 0.0, 100.0, 100.0],\n                context.transform,\n                graphics);\n            });\n    }\n\n    pub fn run(&amp;mut self) {\n        use Loop::Render;\n        use Event::Loop;\n        while let Some(event) = self.window.next() {\n            match event {\n                Loop(Render(_)) =&gt; self.render(&amp;event),\n                _ =&gt; {}\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>However this ends with an error:</p>\n\n<blockquote>\n  <p>self.window.draw_2d(&amp;event, |context, graphics| {<br>\n  the trait <code>piston_window::GenericEvent</code> is not implemented for <code>&amp;piston_window::Event</code></p>\n</blockquote>\n\n<p>Code without extracted render method works as expected.</p>\n\n<pre><code> pub fn run(&amp;mut self) {\n     use Loop::Render;\n     use Event::Loop;\n     while let Some(event) = self.window.next() {\n         match event {\n             Loop(Render(_)) =&gt; {\n                 self.window.draw_2d(&amp;event, |context, graphics| {\n                     clear([1.0; 4], graphics);\n                     rectangle(\n                         [1.0, 0.0, 0.0, 1.0],\n                         [0.0, 0.0, 100.0, 100.0],\n                         context.transform,\n                         graphics);\n                 });\n\n             },\n             _ =&gt; {}\n         }\n     }\n }\n</code></pre>\n\n<p>How can I extract this? Is there something I am overlooking?</p>\n"}, {"tags": ["generics", "rust", "traits", "bounds"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 2, "creation_date": 1522934605, "post_id": 49673330, "comment_id": 86357573, "body": "Relevant: <a href=\"https://stackoverflow.com/a/49231175/1233251\">stackoverflow.com/a/49231175/1233251</a>"}], "answers": [{"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 4, "last_activity_date": 1522936151, "last_edit_date": 1522936151, "creation_date": 1522935763, "answer_id": 49673896, "question_id": 49673330, "link": "https://stackoverflow.com/questions/49673330/why-do-i-need-to-add-trait-bounds-on-impl-blocks-if-ive-already-added-them-to-a/49673896#49673896", "title": "Why do I need to add trait bounds on impl blocks if I&#39;ve already added them to another impl block?", "body": "<p>Each <code>impl</code> block is completely distinct from each other, including their trait bounds \u2014 the fact that one <code>impl</code> block has a constraint means nothing to the others.</p>\n\n<p>In this case, your <code>impl</code> block for the trait <code>Mul</code> doesn't really <em>need</em> the <code>Div</code> trait, as it could construct the <code>Foo</code> directly: </p>\n\n<pre><code>impl&lt;T&gt; Mul for Foo&lt;T&gt;\nwhere\n    T: Mul&lt;Output = T&gt;,\n{\n    type Output = Foo&lt;T&gt;;\n\n    fn mul(self, other: Foo&lt;T&gt;) -&gt; Foo&lt;T&gt; {\n        Foo { bar: self.bar * other.bar }\n    }\n}\n</code></pre>\n\n<p>It is only because you have chosen to call <code>Foo::new</code> (which has the <code>Div</code> and <code>Copy</code> requirements) that your original version of <code>Mul</code> will not compile. This is conceptually the same problem as this plain function which also doesn't need <code>Copy</code> or <code>Div</code>:</p>\n\n<pre><code>fn x&lt;T&gt;(a: T) -&gt; Foo&lt;T&gt; {\n    Foo::new(a)\n}\n</code></pre>\n\n<hr>\n\n<p>Note that I've said \"<code>impl</code> block\", not \"inherent <code>impl</code> block\" or \"trait <code>impl</code> block\". You can have multiple inherent <code>impl</code> blocks with different bounds:</p>\n\n<pre><code>impl&lt;T&gt; Vec&lt;T&gt; {\n    pub fn new() -&gt; Vec&lt;T&gt; { /* ... */ }\n}\n\nimpl&lt;T&gt; Vec&lt;T&gt;\nwhere\n    T: Clone,\n{\n    pub fn resize(&amp;mut self, new_len: usize, value: T) { /* ... */ }\n}\n</code></pre>\n\n<p>This allows a type to have functions that only apply when certain conditions are met.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/36142626/155423\">Is it better to specify trait bound on the impl block or on the method?</a></li>\n<li><a href=\"https://stackoverflow.com/q/49229332/155423\">Should trait bounds be duplicated in struct and impl?</a></li>\n<li><a href=\"https://stackoverflow.com/q/45473626/155423\">Why does Rust require generic type declarations after the &quot;impl&quot; keyword?</a></li>\n</ul>\n"}], "owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 118, "favorite_count": 0, "accepted_answer_id": 49673896, "answer_count": 1, "score": 1, "last_activity_date": 1522936151, "creation_date": 1522934062, "last_edit_date": 1522935241, "question_id": 49673330, "link": "https://stackoverflow.com/questions/49673330/why-do-i-need-to-add-trait-bounds-on-impl-blocks-if-ive-already-added-them-to-a", "title": "Why do I need to add trait bounds on impl blocks if I&#39;ve already added them to another impl block?", "body": "<p>I have the following code:</p>\n\n<pre><code>use std::ops::Div;\nuse std::ops::Mul;\n\n#[derive(Debug)]\nstruct Foo&lt;T&gt; {\n    bar: T,\n}\n\nimpl&lt;T&gt; Foo&lt;T&gt;\nwhere\n    T: Div&lt;Output = T&gt; + Copy,\n{\n    fn new(bar: T) -&gt; Foo&lt;T&gt; {\n        let baz = Foo::baz(bar);\n        Foo { bar: bar / baz }\n    }\n    fn baz(bar: T) -&gt; T {\n        unimplemented!();\n    }\n}\n\nimpl&lt;T&gt; Mul for Foo&lt;T&gt;\nwhere\n    T: Mul&lt;Output = T&gt;,\n{\n    type Output = Foo&lt;T&gt;;\n\n    fn mul(self, other: Foo&lt;T&gt;) -&gt; Foo&lt;T&gt; {\n        Foo::new(self.bar * other.bar)\n    }\n}\n</code></pre>\n\n<p>However, the compiler complains:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: cannot divide `T` by `T`\n  --&gt; src/main.rs:29:9\n   |\n29 |         Foo::new(self.bar * other.bar)\n   |         ^^^^^^^^ no implementation for `T / T`\n   |\n   = help: the trait `std::ops::Div` is not implemented for `T`\n   = help: consider adding a `where T: std::ops::Div` bound\nnote: required by `&lt;Foo&lt;T&gt;&gt;::new`\n  --&gt; src/main.rs:13:5\n   |\n13 |     fn new(bar: T) -&gt; Foo&lt;T&gt; {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n  --&gt; src/main.rs:29:9\n   |\n29 |         Foo::new(self.bar * other.bar)\n   |         ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n   |\n   = help: consider adding a `where T: std::marker::Copy` bound\nnote: required by `&lt;Foo&lt;T&gt;&gt;::new`\n  --&gt; src/main.rs:13:5\n   |\n13 |     fn new(bar: T) -&gt; Foo&lt;T&gt; {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre>\n\n<p>This can be fixed with this modification:</p>\n\n<pre><code>impl&lt;T&gt; Mul for Foo&lt;T&gt;\nwhere\n    T: Mul&lt;Output = T&gt; + Div&lt;Output = T&gt; + Copy,\n</code></pre>\n\n<p>Why do I need to add <code>Div&lt;Output = T&gt;</code> and <code>Copy</code> to <code>Mul for Foo&lt;T&gt;</code>? Shouldn't <code>Foo&lt;T&gt;</code> already satisfy the bounds because of:</p>\n\n<pre><code>impl&lt;T&gt; Foo&lt;T&gt;\nwhere\n    T: Div&lt;Output = T&gt; + Copy,\n</code></pre>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "is_accepted": false, "score": 10, "last_activity_date": 1522933401, "creation_date": 1522933401, "answer_id": 49673122, "question_id": 49673121, "link": "https://stackoverflow.com/questions/49673121/what-is-the-stabilization-process/49673122#49673122", "title": "What is the stabilization process?", "body": "<p>Stabilization is the way that new features are added to Rust. Unlike many languages, where when stuff is added, it goes in the next release, Rust has a multi-stage process so that we can try out features before they're slated to be included in stable Rust.</p>\n\n<p>Small features, especially new library APIs, can be added by just sending in a pull request. Larger features go through <a href=\"https://github.com/rust-lang/rfcs\" rel=\"noreferrer\">the RFC process</a>, so that there can be some consensus around the design before they're implemented. If an RFC is accepted, an implementation can be sent in via PR. Whenever a new feature is added, it goes behind a \"feature gate\", that is, a special attribute, <code>#![feature]</code>, that lets you opt into giving that feature a try.</p>\n\n<p>Every (okay sometimes not every but almost every) night, a nightly build of Rust is made. Nightly builds are used for testing, and so, you can opt into new, unstable features using the <code>#![feature]</code> attribute. Users then give these features a whirl, report bugs, and comment on how the API or feature is used in the real world.</p>\n\n<p>Every six weeks, a nightly is turned into a \"beta\" release. Betas are like release candidates, and so they don't allow you to use <code>#![feature]</code>, and so, don't let you use experimental features. After six weeks, a new nightly becomes beta, and the beta release becomes a new \"stable\" release. This is what most people mean when they talk about Rust, and what most Rust users use. Stable Rust also doesn't let you use <code>#![feature]</code>, as those features aren't stable.</p>\n\n<p>Anyway, after a time (that's at least one whole release cycle), if a feature is good, the team discusses if it should be made stable. If they decide yes, then the <code>#![feature]</code> requirement is removed, and the feature will \"ride the trains\" to an eventual stable release. If they decide no, it will be deprecated and eventually removed.</p>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 2, "last_activity_date": 1522948169, "creation_date": 1522948169, "answer_id": 49677897, "question_id": 49673121, "link": "https://stackoverflow.com/questions/49673121/what-is-the-stabilization-process/49677897#49677897", "title": "What is the stabilization process?", "body": "<p>Rust favors an agile approach to introducing features and APIs, in order to iterate on them based on feedback<sup>1</sup>.</p>\n\n<p>However, iterating over the design of features or APIs is at odds with Rust strong commitment to backward compatibility (aka stability). Therefore, the <em>Stabilization Process</em> was designed to resolve this apparent conundrum:</p>\n\n<ul>\n<li>any non-trivial feature or API addition is first unstable, and hidden behind a <em>feature gate</em>,</li>\n<li>to use such a feature, the user must opt-in using <code>#![feature]</code> in their crate,</li>\n<li>it is only possible to opt-in on the <em>nightly</em> release channel, and impossible on the <em>beta</em> or <em>stable</em> release channels.</li>\n</ul>\n\n<p>This way, enthusiasts can use nightly to experiment with the feature, and provide feedback to polish it, while any other user can use any feature available and be confident they will not accidentally use an unstable one.</p>\n\n<p>Once a feature is judged ready, the final step is to have the team in charge approve it; the feature gate is then removed and the feature becomes available on all channels (though it takes some time to propagate from nightly to stable, of course).</p>\n\n<p><sup>1</sup> <em>A famous example of specification failure was the \"export template\" functionality of C++98; it was only ever implemented in the EDG front-end and this sole feature took over a year. Since then, the C++ committee generally requires prototype implementations.</em></p>\n"}], "owner": {"reputation": 11441, "user_id": 24817, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/233c279c012ebac792aaa805f966cbc7?s=128&d=identicon&r=PG", "display_name": "Steve Klabnik", "link": "https://stackoverflow.com/users/24817/steve-klabnik"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 322, "favorite_count": 2, "answer_count": 2, "score": 9, "last_activity_date": 1522948169, "creation_date": 1522933401, "question_id": 49673121, "link": "https://stackoverflow.com/questions/49673121/what-is-the-stabilization-process", "title": "What is the stabilization process?", "body": "<p>What is the stabilization process? Reading the release notes I see a lot of different standard library APIs and even language features (e.g. underscore lifetimes). How does an API become stable?</p>\n"}, {"tags": ["macros", "rust"], "answers": [{"tags": [], "owner": {"reputation": 3489, "user_id": 1350184, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/EQnef.jpg?s=128&g=1", "display_name": "tversteeg", "link": "https://stackoverflow.com/users/1350184/tversteeg"}, "is_accepted": true, "score": 6, "last_activity_date": 1522918682, "creation_date": 1522918682, "answer_id": 49668184, "question_id": 49668183, "link": "https://stackoverflow.com/questions/49668183/view-rust-macro-output/49668184#49668184", "title": "View Rust macro output", "body": "<p>When using nightly Rust you can use the following command on a source file:</p>\n\n<pre><code>rustc --pretty expanded -Z unstable-options FILENAME.rs\n</code></pre>\n\n<p>This will print the following output:</p>\n\n<pre><code>macro_rules! five_times(( $ x : expr ) =&gt; ( 5 * $ x ) ;);\n\nfn main() { let a = 5 * (2 + 3); }\n</code></pre>\n"}], "owner": {"reputation": 3489, "user_id": 1350184, "user_type": "registered", "accept_rate": 88, "profile_image": "https://i.stack.imgur.com/EQnef.jpg?s=128&g=1", "display_name": "tversteeg", "link": "https://stackoverflow.com/users/1350184/tversteeg"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 859, "favorite_count": 0, "closed_date": 1522932519, "accepted_answer_id": 49668184, "answer_count": 1, "score": 1, "last_activity_date": 1522918682, "creation_date": 1522918682, "question_id": 49668183, "link": "https://stackoverflow.com/questions/49668183/view-rust-macro-output", "closed_reason": "Duplicate", "title": "View Rust macro output", "body": "<p>How can I see the code output for expanded Rust macros?</p>\n\n<p>For example I have this snippet:</p>\n\n<pre><code>macro_rules! five_times {\n    ($x:expr) =&gt; (5 * $x);\n}\n\nfn main() {\n    let a = five_times!(2 + 3);\n}\n</code></pre>\n\n<p>And I want to see something like this:</p>\n\n<pre><code>fn main() {\n    let a = 5 * (2 + 3);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 20746, "user_id": 1233251, "user_type": "registered", "accept_rate": 90, "profile_image": "https://i.stack.imgur.com/cI9GF.png?s=128&g=1", "display_name": "E_net4 says don&#39;t copy that", "link": "https://stackoverflow.com/users/1233251/e-net4-says-dont-copy-that"}, "edited": false, "score": 3, "creation_date": 1522939070, "post_id": 49663755, "comment_id": 86360997, "body": "Orthogonal to this issue: remember that struct names are conventionally in <code>PascalCase</code>: <code>foo</code> should preferably be <code>Foo</code>."}], "answers": [{"tags": [], "owner": {"reputation": 8877, "user_id": 5397009, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/7405bb106a62e8a3ea2d6d787b7261ee?s=128&d=identicon&r=PG&f=1", "display_name": "Jmb", "link": "https://stackoverflow.com/users/5397009/jmb"}, "is_accepted": false, "score": 2, "last_activity_date": 1522910081, "creation_date": 1522910081, "answer_id": 49665585, "question_id": 49663755, "link": "https://stackoverflow.com/questions/49663755/how-to-use-lifetimes-correctly-in-rust-structs/49665585#49665585", "title": "How to use lifetimes correctly in Rust structs", "body": "<p>That depends on how you intend to use <code>Foo</code>. It may be that setting all lifetimes to <code>'static</code> will work for you. Otherwise, you will need to add at least one lifetime parameter to <code>Foo</code> itself and use that. Depending on your use case, this may be enough:</p>\n\n<pre><code>pub struct Foo&lt;'a&gt; {\n    sockets:Set&lt;'a, 'a, 'a&gt;,\n}\n</code></pre>\n\n<p>or you might need to add two or three lifetime parameters:</p>\n\n<pre><code>pub struct Foo&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; {\n    sockets:Set&lt;'a, 'b, 'c&gt;,\n}\n</code></pre>\n\n<p>PS: As a side note, your <code>foo</code> struct should be capitalized: <code>Foo</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 11723, "user_id": 3356777, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/1c7bee1f2c7ba7f81ddb902b83626558?s=128&d=identicon&r=PG&f=1", "display_name": "attdona", "link": "https://stackoverflow.com/users/3356777/attdona"}, "is_accepted": true, "score": 2, "last_activity_date": 1522931049, "creation_date": 1522931049, "answer_id": 49672337, "question_id": 49663755, "link": "https://stackoverflow.com/questions/49663755/how-to-use-lifetimes-correctly-in-rust-structs/49672337#49672337", "title": "How to use lifetimes correctly in Rust structs", "body": "<p>You need to add lifetime annotations to struct:</p>\n\n<pre><code>pub struct Foo&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; {\n    sockets: Set&lt;'a, 'b, 'c&gt;,\n}\n</code></pre>\n\n<p>and also to impl, ensuring lifetimes annotation constraints:</p>\n\n<pre><code>impl&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; Foo&lt;'a, 'b, 'c&gt; {\n    ...\n}\n</code></pre>\n\n<p>For example, a possible implementation:</p>\n\n<pre><code>impl&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; Foo&lt;'a, 'b, 'c&gt; {\n    pub fn init(&amp;mut self, v: &amp;'a mut Vec&lt;Option&lt;Item&lt;'b, 'c&gt;&gt;&gt;) {\n        self.sockets = Set::new(ManagedSlice::Borrowed(v));\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 543, "user_id": 6861720, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/edfbcf83eddb9c18f9ed3e6c0619ddaf?s=128&d=identicon&r=PG&f=1", "display_name": "Dragonight", "link": "https://stackoverflow.com/users/6861720/dragonight"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 339, "favorite_count": 0, "accepted_answer_id": 49672337, "answer_count": 2, "score": 1, "last_activity_date": 1522936420, "creation_date": 1522899441, "last_edit_date": 1522936420, "question_id": 49663755, "link": "https://stackoverflow.com/questions/49663755/how-to-use-lifetimes-correctly-in-rust-structs", "title": "How to use lifetimes correctly in Rust structs", "body": "<p>I have the following struct in one of the crates that I\u2019m using.</p>\n\n<pre><code>pub struct Set&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; {\n    sockets: ManagedSlice&lt;'a, Option&lt;Item&lt;'b, 'c&gt;&gt;&gt;,\n}\n\nimpl&lt;'a, 'b: 'a, 'c: 'a + 'b&gt; Set&lt;'a, 'b, 'c&gt; {\n    pub fn new&lt;SocketsT&gt;(sockets: SocketsT) -&gt; Set&lt;'a, 'b, 'c&gt;\n    where\n        SocketsT: Into&lt;ManagedSlice&lt;'a, Option&lt;Item&lt;'b, 'c&gt;&gt;&gt;&gt;,\n    {\n        let sockets = sockets.into();\n        Set { sockets: sockets }\n    }\n}\n</code></pre>\n\n<p>I need to have struct <code>Set</code> as one of the fields in another struct:</p>\n\n<pre><code>pub struct foo {\n    sockets: Set,\n}\n\nimpl foo {\n    pub fn init(&amp;mut self) {\n        self.sockets = Set::new(vec![]);\n    }\n}\n</code></pre>\n\n<p>This results in the following error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>   |\n21 |     sockets:Set,\n   |             ^^^^^^^^^ expected 3 lifetime parameters\n</code></pre>\n\n<p>I read about advanced lifetimes, but could not figure out how to work this out. How to correctly set the lifetimes here?</p>\n"}]