[{"tags": ["rust", "wrapper", "invariance"], "comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464861704, "post_id": 37580570, "comment_id": 62662436, "body": "Note that this is <i>not</i> a variance problem. In Rust, trait implementation does not establish an &quot;is-a&quot; relationship, this is not like inheritance in other languages. Rust does not have subtyping, except in lifetimes of references (like <code>&amp;&#39;a T</code> is a subtype of <code>&amp;&#39;static T</code> for any <code>&#39;a</code>). You can find more <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html\" rel=\"nofollow noreferrer\">here</a>."}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464862300, "post_id": 37580570, "comment_id": 62662866, "body": "@VladimirMatveev Um, the document you are linking to (which I have read trying to figure this out) specifically states that <code>&amp;T</code> is variant over <code>T</code> and <code>Box&lt;T&gt;</code> is also variant over <code>T</code>. Yet, as my question shows, <code>&amp;Box&lt;T&gt;</code> is <i>not</i> variant over <code>T</code>. If you can explain why that is, please do share it as an answer (if that insight also gives some alternate way of dealing with the invariance, all the better)."}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464863084, "post_id": 37580570, "comment_id": 62663415, "body": "@VladimirMatveev You may be right though that &quot;is a&quot; should be replaced with something like &quot;satisfies the type constraint of&quot; and &quot;variant&quot; should be replaced with something else. But I&#39;m not sure what."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464869910, "post_id": 37580570, "comment_id": 62668010, "body": "Actually, your question does not show that <code>&amp;Box&lt;T&gt;</code> is not variant over <code>T</code>, because the only subtyping relationship in Rust is tied to lifetimes (as in <code>&amp;&#39;a T &lt;: &amp;&#39;b T</code> if <code>&#39;a</code> is larger than <code>&#39;b</code>), but your question contains only trait implementations, which, as I said before, <i>are not</i> related to subtyping and therefore variance in any way. Try passing, say, <code>&amp;Box&lt;&amp;&#39;static i32&gt;</code> to a function which expects <code>&amp;Box&lt;&amp;i32&gt;</code> and you will see the covariance in action: <a href=\"https://gist.github.com/20983300fcf6872a583db38cfe96d663\" rel=\"nofollow noreferrer\">gist.github.com/20983300fcf6872a583db38cfe96d663</a>"}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464871081, "post_id": 37580570, "comment_id": 62668870, "body": "As I said, the terminology I&#39;ve chosen to use in the question may be slightly incorrect, but the phenomenon I&#39;m asking about is still very much there (code in question gets type mismatches, code in the answer below type checks fine). If you have suggestions for what terminology I should use instead you are very welcome to suggest it. I guess it has more to do with trait object casting (or something like that) on the compiler level, but it sure feels like variance."}, {"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464871989, "post_id": 37580570, "comment_id": 62669583, "body": "Okay, I tried to explain it in a little more detail in a separate answer."}], "answers": [{"tags": [], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "is_accepted": false, "score": 3, "last_activity_date": 1464825010, "creation_date": 1464825010, "answer_id": 37580571, "question_id": 37580570, "link": "https://stackoverflow.com/questions/37580570/how-do-i-deal-with-wrapper-type-invariance-in-rust/37580571#37580571", "title": "How do I deal with wrapper type invariance in Rust?", "body": "<p>In the case of <code>Rc::downgrade</code> this is actually just a failure of the type inference in this particular case, and will work if it is done as a separate let:</p>\n\n<pre><code>fn foo(rc_trait: Weak&lt;MyTrait&gt;) {}\n\nfn main() {\n    let a = Rc::new(MyStruct {});\n    let b = Rc::downgrade(&amp;a);\n    foo(b);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Arc%3A%3ARc%3B%0Ause%20std%3A%3Arc%3A%3AWeak%3B%0A%0Atrait%20MyTrait%20%7B%7D%0A%0Astruct%20MyStruct%20%7B%0A%7D%0A%0Aimpl%20MyTrait%20for%20MyStruct%20%7B%7D%0A%0Afn%20foo(rc_trait%3A%20Weak%3CMyTrait%3E)%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Rc%3A%3Anew(MyStruct%20%7B%7D)%3B%0A%20%20%20%20let%20b%20%3D%20Rc%3A%3Adowngrade(%26a)%3B%0A%20%20%20%20foo(b)%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n\n<p>For <code>Box&lt;T&gt;</code> it is very likely you don't actually want a reference to the box as the argument, but a reference to the contents. In which case there is no invariance to deal with:</p>\n\n<pre><code>fn foo(rc_trait: &amp;MyTrait) {}\n\nfn main() {\n    let a = Box::new(MyStruct {});\n    foo(a.as_ref());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=trait%20MyTrait%20%7B%7D%0A%0Astruct%20MyStruct%20%7B%0A%7D%0A%0Aimpl%20MyTrait%20for%20MyStruct%20%7B%7D%0A%0Afn%20foo(rc_trait%3A%20%26MyTrait)%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Box%3A%3Anew(MyStruct%20%7B%7D)%3B%0A%20%20%20%20foo(a.as_ref())%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n\n<p>Similarly, for the case with <code>Rc&lt;T&gt;</code>, if you write a function that takes an <code>Rc&lt;T&gt;</code> you probably want a clone (i.e. a reference counted reference), and not a normal reference:</p>\n\n<pre><code>fn foo(rc_trait: Rc&lt;MyTrait&gt;) {}\n\nfn main() {\n    let a = Rc::new(MyStruct {});\n    foo(a.clone());\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Arc%3A%3ARc%3B%0Ause%20std%3A%3Arc%3A%3AWeak%3B%0A%0Atrait%20MyTrait%20%7B%7D%0A%0Astruct%20MyStruct%20%7B%0A%7D%0A%0Aimpl%20MyTrait%20for%20MyStruct%20%7B%7D%0A%0Afn%20foo(rc_trait%3A%20Rc%3CMyTrait%3E)%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Rc%3A%3Anew(MyStruct%20%7B%7D)%3B%0A%20%20%20%20foo(a.clone())%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a></p>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464872650, "post_id": 37592449, "comment_id": 62670139, "body": "Okay, I understand that I&#39;ve probably put more emphasis on the lack of subtyping for traits than it was necessary, but still I&#39;ve tried to explain why &quot;flat&quot; references and smart pointers can be coerced to trait objects and why &quot;nested&quot; pointers can not."}, {"owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "edited": false, "score": 0, "creation_date": 1464872844, "post_id": 37592449, "comment_id": 62670297, "body": "Thanks. This is great. While I was able to figure out code that worked on my own, now I understand a lot better why the particular variants work and not. :)"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 5, "last_activity_date": 1464872331, "last_edit_date": 1464872331, "creation_date": 1464871974, "answer_id": 37592449, "question_id": 37580570, "link": "https://stackoverflow.com/questions/37580570/how-do-i-deal-with-wrapper-type-invariance-in-rust/37592449#37592449", "title": "How do I deal with wrapper type invariance in Rust?", "body": "<p>What you see here is not related to variance and subtyping at all.</p>\n\n<p>First, the most informative read on subtyping in Rust is <a href=\"https://doc.rust-lang.org/nightly/nomicon/subtyping.html\" rel=\"nofollow\">this chapter</a> of Nomicon. You can find there that in Rust subtyping relationship (i.e. when you can pass a value of one type to a function or a variable which expects a variable of <em>different</em> type) is very limited. It can only be observed when you're working with lifetimes.</p>\n\n<p>For example, the following piece of code shows how exactly <code>&amp;Box&lt;T&gt;</code> is (co)variant:</p>\n\n<pre><code>fn test&lt;'a&gt;(x: &amp;'a Box&lt;&amp;'a i32&gt;) {}\n\nfn main() {\n    static X: i32 = 12;\n    let xr: &amp;'static i32 = &amp;X;\n    let xb: Box&lt;&amp;'static i32&gt; = Box::new(xr);  // &lt;---- start of box lifetime\n    let xbr: &amp;Box&lt;&amp;'static i32&gt; = &amp;xb;\n    test(xbr);  // Covariance in action: since 'static is longer than or the \n                // same as any 'a, &amp;Box&lt;&amp;'static i32&gt; can be passed to\n                // a function which expects &amp;'a Box&lt;&amp;'a i32&gt;\n                //\n                // Note that it is important that both \"inner\" and \"outer\"\n                // references in the function signature are defined with\n                // the same lifetime parameter, and thus in `test(xbr)` call\n                // 'a gets instantiated with the lifetime associated with\n                // the scope I've marked with &lt;----, but nevertheless we are\n                // able to pass &amp;'static i32 as &amp;'a i32 because the\n                // aforementioned scope is less than 'static, therefore any\n                // shared reference type with 'static lifetime is a subtype of\n                // a reference type with the lifetime of that scope\n}  // &lt;---- end of box lifetime\n</code></pre>\n\n<p>This program compiles, which means that both <code>&amp;</code> and <code>Box</code> are covariant over their respective type and lifetime parameters.</p>\n\n<p>Unlike most of \"conventional\" OOP languages which have classes/interfaces like C++ and Java, in Rust traits <em>do not introduce subtyping relationship</em>. Even though, say,</p>\n\n<pre><code>trait Show {\n    fn show(&amp;self) -&gt; String;\n}\n</code></pre>\n\n<p>highly resembles</p>\n\n<pre><code>interface Show {\n    String show();\n}\n</code></pre>\n\n<p>in some language like Java, they are quite different in semantics. In Rust bare trait, when used as a type, is <em>never</em> a supertype of any type which implements this trait:</p>\n\n<pre><code>impl Show for i32 { ... }\n\n// the above does not mean that i32 &lt;: Show\n</code></pre>\n\n<p><code>Show</code>, while being a trait, indeed <em>can</em> be used in type position, but it denotes a special <em>unsized type</em> which can only be used to form <a href=\"http://doc.rust-lang.org/book/trait-objects.html\" rel=\"nofollow\">trait objects</a>. You cannot have values of the bare trait type, therefore it does not even make sense to talk about subtyping and variance with bare trait types.</p>\n\n<p>Trait objects take form of <code>&amp;SomeTrait</code> or <code>&amp;mut SomeTrait</code> or <code>SmartPointer&lt;SomeTrait&gt;</code>, and they <em>can</em> be passed around and stored in variables and they are needed to abstract away the actual implementation of the trait. However, <code>&amp;T</code> where <code>T: SomeTrait</code> <em>is not</em> a subtype of <code>&amp;SomeTrait</code>, and these types do not participate in variance at all.</p>\n\n<p>Trait objects and regular pointers have incompatible internal structure: <code>&amp;T</code> is just a regular pointer to a concrete type <code>T</code>, while <code>&amp;SomeTrait</code> is a fat pointer which contains a pointer to the original value of a type which implements <code>SomeTrait</code> and also a second pointer to a vtable for the implementation of <code>SomeTrait</code> of the aforementioned type.</p>\n\n<p>The fact that passing <code>&amp;T</code> as <code>&amp;SomeTrait</code> or <code>Rc&lt;T&gt;</code> as <code>Rc&lt;SomeTrait&gt;</code> works happens because Rust does <em>automatic coercion</em> for references and smart pointers: it is able to construct a fat pointer <code>&amp;SomeTrait</code> for a regular reference <code>&amp;T</code> if it knows <code>T</code>; this is quite natural, I believe. For instance, your example with <code>Rc::downgrade()</code> works because <code>Rc::downgrade()</code> returns a value of type <code>Weak&lt;MyStruct&gt;</code> which gets coerced to <code>Weak&lt;MyTrait&gt;</code>.</p>\n\n<p>However, constructing <code>&amp;Box&lt;SomeTrait&gt;</code> out of <code>&amp;Box&lt;T&gt;</code> if <code>T: SomeTrait</code> is much more complex: for one, the compiler would need to allocate a <em>new</em> temporary value because <code>Box&lt;T&gt;</code> and <code>Box&lt;SomeTrait&gt;</code> has different memory representations. If you have, say, <code>Box&lt;Box&lt;T&gt;&gt;</code>, getting <code>Box&lt;Box&lt;SomeTrait&gt;&gt;</code> out of it is even more complex, because it would need <em>creating a new allocation on the heap</em> to store <code>Box&lt;SomeTrait&gt;</code>. Thus, there are no automatic coercions for nested references and smart pointers, and again, this is not connected with subtyping and variance at all.</p>\n"}], "owner": {"reputation": 4257, "user_id": 3347227, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/160c472b1c6c43b47cc98cc01d3ce317?s=128&d=identicon&r=PG", "display_name": "Erik Vesteraas", "link": "https://stackoverflow.com/users/3347227/erik-vesteraas"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 471, "favorite_count": 0, "accepted_answer_id": 37592449, "answer_count": 2, "score": 7, "last_activity_date": 1464872331, "creation_date": 1464825010, "last_edit_date": 1464825678, "question_id": 37580570, "link": "https://stackoverflow.com/questions/37580570/how-do-i-deal-with-wrapper-type-invariance-in-rust", "title": "How do I deal with wrapper type invariance in Rust?", "body": "<p>References to wrapper types like <code>&amp;Rc&lt;T&gt;</code> and <code>&amp;Box&lt;T&gt;</code> are invariant in <code>T</code> (<code>&amp;Rc&lt;T&gt;</code> is not a <code>&amp;Rc&lt;U&gt;</code> even if <code>T</code> is a <code>U</code>). A concrete example of the issue (<a href=\"https://play.rust-lang.org/?code=use%20std%3A%3Arc%3A%3ARc%3B%0Ause%20std%3A%3Arc%3A%3AWeak%3B%0A%0Atrait%20MyTrait%20%7B%7D%0A%0Astruct%20MyStruct%20%7B%0A%7D%0A%0Aimpl%20MyTrait%20for%20MyStruct%20%7B%7D%0A%0Afn%20foo(rc_trait%3A%20Weak%3CMyTrait%3E)%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Rc%3A%3Anew(MyStruct%20%7B%7D)%3B%0A%20%20%20%20foo(Rc%3A%3Adowngrade(%26a))%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\">Rust Playground</a>):</p>\n\n<pre><code>use std::rc::Rc;\nuse std::rc::Weak;\n\ntrait MyTrait {}\n\nstruct MyStruct {\n}\n\nimpl MyTrait for MyStruct {}\n\nfn foo(rc_trait: Weak&lt;MyTrait&gt;) {}\n\nfn main() {\n    let a = Rc::new(MyStruct {});\n    foo(Rc::downgrade(&amp;a));\n}\n</code></pre>\n\n<p>This code results in the following error:</p>\n\n<pre><code>&lt;anon&gt;:15:23: 15:25 error: mismatched types:\n expected `&amp;alloc::rc::Rc&lt;MyTrait&gt;`,\n    found `&amp;alloc::rc::Rc&lt;MyStruct&gt;`\n</code></pre>\n\n<p>Similar example (with similar error) with <code>Box&lt;T&gt;</code> (<a href=\"https://play.rust-lang.org/?code=trait%20MyTrait%20%7B%7D%0A%0Astruct%20MyStruct%20%7B%0A%7D%0A%0Aimpl%20MyTrait%20for%20MyStruct%20%7B%7D%0A%0Afn%20foo(rc_trait%3A%20%26Box%3CMyTrait%3E)%20%7B%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20a%20%3D%20Box%3A%3Anew(MyStruct%20%7B%7D)%3B%0A%20%20%20%20foo(%26a)%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\">Rust Playground</a>):</p>\n\n<pre><code>trait MyTrait {}\n\nstruct MyStruct {\n}\n\nimpl MyTrait for MyStruct {}\n\nfn foo(rc_trait: &amp;Box&lt;MyTrait&gt;) {}\n\nfn main() {\n    let a = Box::new(MyStruct {});\n    foo(&amp;a);\n}\n</code></pre>\n\n<p>In these cases I could of course just annotate <code>a</code> with the desired type, but in many cases that won't be possible because the original type is needed as well. So what do I do then?</p>\n"}, {"tags": ["vector", "rust"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 6, "last_activity_date": 1464880780, "last_edit_date": 1464880780, "creation_date": 1464821844, "answer_id": 37580099, "question_id": 37579949, "link": "https://stackoverflow.com/questions/37579949/get-the-last-element-of-a-vector-and-push-it-to-the-same-vector/37580099#37580099", "title": "Get the last element of a vector and push it to the same vector", "body": "<p>To solve the borrow problem you can call <a href=\"https://doc.rust-lang.org/stable/core/option/enum.Option.html#method.cloned\" rel=\"nofollow\"><code>Option::cloned</code></a>, that produces a <code>Option&lt;T&gt;</code> from a <code>Option&lt;&amp;T&gt;</code>. To do this, <code>Test</code> must implement <a href=\"https://doc.rust-lang.org/stable/core/clone/trait.Clone.html\" rel=\"nofollow\"><code>Clone</code></a>. You can implement <code>Clone</code> for <code>Test</code> using <code>derive</code>:</p>\n\n<pre><code>// To allow assert_eq, we also derive Debug and PartialEq\n#[derive(Debug, PartialEq, Clone)]\nenum Test {\n    Value1,\n    Value2,\n    Value3\n}\n\nfn main() {\n    let mut test_vec = Vec::new();\n    test_vec.push(Test::Value2);\n\n    if let Some(last) = test_vec.last().cloned() {\n        test_vec.push(last);\n    }\n\n    assert_eq!(vec![Test::Value2, Test::Value2], test_vec);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 7, "last_activity_date": 1464848356, "creation_date": 1464848356, "answer_id": 37584103, "question_id": 37579949, "link": "https://stackoverflow.com/questions/37579949/get-the-last-element-of-a-vector-and-push-it-to-the-same-vector/37584103#37584103", "title": "Get the last element of a vector and push it to the same vector", "body": "<p>When trying to figure out why the borrow checker complains it can be useful to identify the types involved.</p>\n\n<p>If you type out:</p>\n\n<pre><code>let _: () = test_vec.last().map(|v| v.clone());\n</code></pre>\n\n<p>you get an error complaining that <code>()</code> and <code>core::option::Option&lt;&amp;Test&gt;</code> are not the same type.</p>\n\n<p>What's going on? Very simply put, if you clone an <code>&amp;Test</code> you get an <code>&amp;Test</code>, thus calling <code>.map(|v| v.clone())</code> on a <code>Option&lt;&amp;Test&gt;</code> gives an <code>Option&lt;&amp;Test&gt;</code>. Obviously, it still borrows.</p>\n\n<p>The same problem occurs with your next attempt, if you type out:</p>\n\n<pre><code>let _: () = test_vec.last().unwrap().clone();\n</code></pre>\n\n<p>you get an error complaining that <code>()</code> and <code>&amp;Test</code> are not the same type.</p>\n\n<p>By calling <code>unwrap</code> on an <code>Option&lt;&amp;Test&gt;</code> you get an <code>&amp;Test</code> which is then cloned into an <code>&amp;Test</code>.</p>\n\n<hr>\n\n<p>So, the problem is a lack of <em>dereferencing</em>. You need to dereference earlier, to avoid borrowing <code>test_vec</code> in <code>Some(last)</code>:</p>\n\n<pre><code>if let Some(last) = test_vec.last().map(|v| (*v).clone()) {\n    test_vec.push(last);\n}\n</code></pre>\n\n<p>of course, this does not work because <code>Test</code> does not implement <code>clone</code>. Once that is fixed (by <code>#[derive(Clone)]</code>), it compiles.</p>\n\n<p>Since cloning from references is such a common need, there is a dedicated method on <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned\" rel=\"noreferrer\"><code>Option</code></a> (and <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned\" rel=\"noreferrer\"><code>Iterator</code></a>) called <code>cloned</code>:</p>\n\n<pre><code>if let Some(last) = test_vec.last().cloned() {\n    test_vec.push(last);\n}\n</code></pre>\n"}], "owner": {"reputation": 127, "user_id": 2851752, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/5153daaa53aab712461bda12b2609989?s=128&d=identicon&r=PG&f=1", "display_name": "Bram", "link": "https://stackoverflow.com/users/2851752/bram"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5167, "favorite_count": 0, "accepted_answer_id": 37584103, "answer_count": 2, "score": 6, "last_activity_date": 1464880780, "creation_date": 1464820765, "last_edit_date": 1464824823, "question_id": 37579949, "link": "https://stackoverflow.com/questions/37579949/get-the-last-element-of-a-vector-and-push-it-to-the-same-vector", "title": "Get the last element of a vector and push it to the same vector", "body": "<p>What I am trying to do:</p>\n\n<pre><code>enum Test {\n    Value1,\n    Value2,\n    Value3\n}\n\nfn main() {\n    let mut test_vec: Vec&lt;Test&gt; = Vec::new();\n    test_vec.push(Test::Value2);\n\n    if let Some(last) = test_vec.last() {\n        test_vec.push(*last);\n    }\n    //Wanted output: vector with [Test::Value2, Test::Value2]\n}\n</code></pre>\n\n<p>I understand that when I call <code>last()</code>, it will return <code>Option&lt;&amp;Test&gt;</code>\nSo it will borrow the <code>test_vec</code> till the end of the if-let block. </p>\n\n<p>I tried the following without success:</p>\n\n<pre><code>if let Some(last) = test_vec.last().map(|v| v.clone()) {\n    test_vec.push(*last);\n}\n\n//and\n\nlet last = test_vec.last().unwrap().clone();\ntest_vec.push(*last);\n</code></pre>\n"}, {"tags": ["macros", "rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464847586, "post_id": 37582306, "comment_id": 62653766, "body": "Second time I see <code>@inner</code> and <code>@parse</code> in as many days, I need to go ahunting."}, {"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1464874325, "post_id": 37582306, "comment_id": 62671443, "body": "I&#39;m just following the <a href=\"https://danielkeep.github.io/tlborm/book/pat-internal-rules.html\" rel=\"nofollow noreferrer\">convention</a>. :)"}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1464839359, "creation_date": 1464839359, "answer_id": 37582306, "question_id": 37576326, "link": "https://stackoverflow.com/questions/37576326/macro-to-transform-non-tuple-arguments-to-tuples/37582306#37582306", "title": "Macro to transform non-tuple arguments to tuples", "body": "<p>If each argument to the macro is a single token tree, then this will do:</p>\n\n<pre><code>macro_rules! tuplify {\n    (@inner ($($args:expr),*)) =&gt; (($($args,)*));\n    (@inner $arg:expr) =&gt; (($arg,));\n    ($($arg:tt),*) =&gt; (($(tuplify!(@inner $arg),)*));\n}\n</code></pre>\n\n<p>What if arguments could have more than one token tree? For example:</p>\n\n<pre><code>assert_eq!(tuplify!(1 + 6, (2, 3), 4), ((7,), (2, 3), (4,)));\n</code></pre>\n\n<p>Then we just need to accept a sequence of token trees, right?</p>\n\n<pre><code>macro_rules! tuplify {\n    (@inner ($($args:expr),*)) =&gt; (($($args,)*));\n    (@inner $arg:expr) =&gt; (($arg,));\n    ($($($arg_tt:tt)+),*) =&gt; (($(tuplify!(@inner $($arg)+),)*));\n}\n</code></pre>\n\n<p>Nah, that would be too easy:</p>\n\n<pre><code>&lt;anon&gt;:12:30: 12:31 error: local ambiguity: multiple parsing options: built-in NTs tt ('arg_tt') or 1 other option.\n&lt;anon&gt;:12     assert_eq!(tuplify!(1 + 6, (2, 3), 4), ((7,), (2, 3), (4,)));\n</code></pre>\n\n<p>It's ambiguous because <code>,</code> can also be parsed as a token tree.</p>\n\n<p>In order to tackle this, I think we need to write a \"<a href=\"https://danielkeep.github.io/tlborm/book/pat-incremental-tt-munchers.html\" rel=\"noreferrer\">TT muncher</a>\".</p>\n\n<pre><code>macro_rules! tuplify {\n    (@as_expr $e:expr) =&gt; { $e };\n\n    // No more tokens\n    (@parse { } -&gt; { $($current:tt)* } -&gt; { $($output:tt)* }) =&gt; {\n        tuplify!(@as_expr ( $($output)* ($($current)*,), ))\n    };\n\n    // Comma\n    (@parse { , $($ts:tt)* } -&gt; { $($current:tt)* } -&gt; { $($output:tt)* }) =&gt; {\n        tuplify!(@parse { $($ts)* } -&gt; { } -&gt; { $($output)* ($($current)*,), })\n    };\n\n    // Tuple followed by a comma, nothing in the current argument yet\n    (@parse { ($($tuple_item:expr),*) , $($ts:tt)* } -&gt; { } -&gt; { $($output:tt)* }) =&gt; {\n        tuplify!(@parse { $($ts)* } -&gt; { } -&gt; { $($output)* ($($tuple_item,)*), })\n    };\n\n    // Tuple followed by nothing else, nothing in the current argument yet\n    (@parse { ($($tuple_item:expr),*) } -&gt; { } -&gt; { $($output:tt)* }) =&gt; {\n        tuplify!(@parse { } -&gt; { } -&gt; { $($output)* ($($tuple_item,)*), })\n    };\n\n    // Base case\n    (@parse { $t:tt $($ts:tt)* } -&gt; { $($current:tt)* } -&gt; { $($output:tt)* }) =&gt; {\n        tuplify!(@parse { $($ts)* } -&gt; { $t $($current)* } -&gt; { $($output)* })\n    };\n\n    // Entry point\n    ($($tokens:tt)*) =&gt; (tuplify!(@parse { $($tokens)* } -&gt; { } -&gt; { }));\n}\n\nfn main() {\n    assert_eq!(tuplify!(1 + 6, (2, 3), 4), ((7,), (2, 3), (4,)));\n}\n</code></pre>\n"}], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 500, "favorite_count": 1, "accepted_answer_id": 37582306, "answer_count": 1, "score": 3, "last_activity_date": 1464839359, "creation_date": 1464806100, "last_edit_date": 1464806787, "question_id": 37576326, "link": "https://stackoverflow.com/questions/37576326/macro-to-transform-non-tuple-arguments-to-tuples", "title": "Macro to transform non-tuple arguments to tuples", "body": "<p>Is it possible to create a macro to transform non-tuple arguments to tuples? I would like something like this:</p>\n\n<pre><code>assert_eq!(tuplify!(1, (2, 3), 4), ((1,), (2, 3), (4,)));\n</code></pre>\n\n<p>I tried to create such macro but was unable to do so. The problem that I faced was that each argument can have one of two forms and I couldn't figure out how to specify it.</p>\n"}, {"tags": ["rust", "observer-pattern"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464794713, "post_id": 37572734, "comment_id": 62633008, "body": "How does the <code>Observer</code> unregister from the <code>Observable</code>? How is the lifetime of an <code>Observer</code> handled?"}, {"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464794773, "post_id": 37572734, "comment_id": 62633063, "body": "@MatthieuM. I would like to know it too because it is related to the question&#39;s answer. And excuse me, I don&#39;t understood your second question."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 2, "creation_date": 1464795030, "post_id": 37572734, "comment_id": 62633251, "body": "cross post on users.rust-lang.org: <a href=\"https://users.rust-lang.org/t/how-can-i-correctly-implement-observer-pattern-in-rust/6058\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/&hellip;</a>"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1464796378, "post_id": 37572734, "comment_id": 62634130, "body": "Take a look at <a href=\"http://stackoverflow.com/q/37504162/5189607\">stackoverflow.com/q/37504162/5189607</a>."}], "answers": [{"comments": [{"owner": {"reputation": 618, "user_id": 371553, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ae9a752a5fd9bf94a3f9e9dfc39fea0c?s=128&d=identicon&r=PG", "display_name": "Michael Younkin", "link": "https://stackoverflow.com/users/371553/michael-younkin"}, "edited": false, "score": 0, "creation_date": 1464945513, "post_id": 37573345, "comment_id": 62704386, "body": "This is a good solution. If you don&#39;t plan on changing (constructing or deleting) observers until all the observables are gone, then you could also use lifetimes to say that all observers must outlive observables. It would be fairly limiting though."}], "tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": true, "score": 23, "last_activity_date": 1572463571, "last_edit_date": 1572463571, "creation_date": 1464796068, "answer_id": 37573345, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust/37573345#37573345", "title": "How can I implement the observer pattern in Rust?", "body": "<p>The Observer pattern, depending on implementation choices, may pose an ownership challenge.</p>\n\n<p>In garbage collected languages it is typical to have the <code>Observable</code> referring to the <code>Observer</code> (to notify it) and the <code>Observer</code> referring to the <code>Observable</code> (to unregister itself)... this causes some challenges in terms of ownership (who outlives whom?) and there is this whole \"notification on un-registering\" thing.</p>\n\n<p>In Rust (and C++), I advise avoiding cycles.</p>\n\n<hr>\n\n<p><strong>Simple solution</strong></p>\n\n<p>The <code>Observable</code> and <code>Observer</code> have distinct lifetimes, none owning the other or being expected to outlive the other.</p>\n\n<pre><code>use std::rc::Weak;\n\nstruct Event;\n\ntrait Observable {\n    fn register(&amp;mut self, observer: Weak&lt;dyn Observer&gt;);\n}\n\ntrait Observer {\n    fn notify(&amp;self, event: &amp;Event);\n}\n</code></pre>\n\n<p>The key is to allocate the <code>Observer</code> into a <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noreferrer\"><code>Rc</code></a> and then hand over <a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\" rel=\"noreferrer\"><code>Weak</code></a> (weak references) to the <code>Observable</code>.</p>\n\n<p>If the <code>Observer</code> needs be modified on the <code>Event</code>, then either it needs internal mutability or it needs to be wrapped into a <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"noreferrer\"><code>RefCell</code></a> (passing <code>Weak&lt;RefCell&lt;dyn Observer&gt;&gt;</code> to the <code>Observable</code>).</p>\n\n<p>When notifying, the <code>Observable</code> will regularly realize that there are dead weak-references (the <code>Observer</code> has disappeared), it can remove those then, lazily.</p>\n\n<hr>\n\n<p>There are other solutions, such as using a Broker (quite similar to an event loop), moving from push mode to pull mode (i.e. (1) generate all events, (2) treat all of them), however these depart a bit from the traditional Observer Pattern and have different pluses/minuses so I will not attempt to treat them all here.</p>\n"}, {"comments": [{"owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "edited": false, "score": 0, "creation_date": 1468772557, "post_id": 38423210, "comment_id": 64253147, "body": "Kinda interesting :)"}, {"owner": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 3, "creation_date": 1496383987, "post_id": 38423210, "comment_id": 75648946, "body": "Wouldn&#39;t this &#39;static imply that only static functions can be used? In that case we cannot use a run time function, or can we? Example most welcome :) Say I have observer: Observer&lt;E&gt; where Observer&lt;E&gt; has a method do_something(&amp;self, event: &amp;E)"}, {"owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "reply_to_user": {"reputation": 2037, "user_id": 481812, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/9rtTd.png?s=128&g=1", "display_name": "Rbjz", "link": "https://stackoverflow.com/users/481812/rbjz"}, "edited": false, "score": 1, "creation_date": 1497487923, "post_id": 38423210, "comment_id": 76104044, "body": "@Rbjz &#39;stactic is restrict lifetime of F, mean F type must available in full runtime scope."}], "tags": [], "owner": {"reputation": 1187, "user_id": 1137004, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/b5ebaa8eb2711795cbf1c9cdda773328?s=128&d=identicon&r=PG", "display_name": "kiyomi", "link": "https://stackoverflow.com/users/1137004/kiyomi"}, "is_accepted": false, "score": 14, "last_activity_date": 1546886473, "last_edit_date": 1546886473, "creation_date": 1468771472, "answer_id": 38423210, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust/38423210#38423210", "title": "How can I implement the observer pattern in Rust?", "body": "<p>I used a callback function. It's simple and powerful and there are no lifetime issues or type erasure.</p>\n\n<p>I tried <code>Weak&lt;dyn Observer&gt;</code>, but</p>\n\n<ol>\n<li>It needs an <code>Rc</code></li>\n<li>You have to repeat code to create a different observer struct.</li>\n<li>It requires type erasure</li>\n</ol>\n\n\n\n<pre><code>pub struct Notifier&lt;E&gt; {\n    subscribers: Vec&lt;Box&lt;dyn Fn(&amp;E)&gt;&gt;,\n}\n\nimpl&lt;E&gt; Notifier&lt;E&gt; {\n    pub fn new() -&gt; Notifier&lt;E&gt; {\n        Notifier {\n            subscribers: Vec::new(),\n        }\n    }\n\n    pub fn register&lt;F&gt;(&amp;mut self, callback: F)\n    where\n        F: 'static + Fn(&amp;E),\n    {\n        self.subscribers.push(Box::new(callback));\n    }\n\n    pub fn notify(&amp;self, event: E) {\n        for callback in &amp;self.subscribers {\n            callback(&amp;event);\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "is_accepted": false, "score": 8, "last_activity_date": 1546887160, "last_edit_date": 1546887160, "creation_date": 1474834184, "answer_id": 39691337, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust/39691337#39691337", "title": "How can I implement the observer pattern in Rust?", "body": "<p>This is my implementation based on the answers to this question and much pain and suffering. I use a weak reference to store the observer and a <a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"nofollow noreferrer\"><code>RefCell</code></a> to be able to call a mutable <code>notify()</code>.</p>\n\n<p>I'm using <a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> because my listener could be called from any thread. If you were using a single thread, you could use <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"nofollow noreferrer\"><code>Rc</code></a>.</p>\n\n<p>Every time <code>dispatch()</code> is called, it will check if there are any weakly referenced listeners which have disappeared. If there are any it will clean up the listener list.</p>\n\n<pre><code>pub enum Event {} // You make Event hold anything you want to fire \n\npub trait Listener {\n    fn notify(&amp;mut self, event: &amp;Event);\n}\n\npub trait Dispatchable&lt;T&gt;\n    where T: Listener\n{\n    fn register_listener(&amp;mut self, listener: Arc&lt;RefCell&lt;T&gt;&gt;);\n}\n\npub struct Dispatcher&lt;T&gt;\n    where T: Listener\n{\n    /// A list of synchronous weak refs to listeners\n    listeners: Vec&lt;Weak&lt;RefCell&lt;T&gt;&gt;&gt;,\n}\n\nimpl&lt;T&gt; Dispatchable&lt;T&gt; for Dispatcher&lt;T&gt;\n    where T: Listener\n{\n    /// Registers a new listener\n    fn register_listener(&amp;mut self, listener: Arc&lt;RefCell&lt;T&gt;&gt;) {\n        self.listeners.push(Arc::downgrade(&amp;listener));\n    }\n}\n\nimpl&lt;T&gt; Dispatcher&lt;T&gt;\n    where T: Listener\n{\n    pub fn new() -&gt; Dispatcher&lt;T&gt; {\n        Dispatcher { listeners: Vec::new() }\n    }\n\n    pub fn num_listeners(&amp;self) -&gt; usize {\n        self.listeners.len()\n    }\n\n    pub fn dispatch(&amp;mut self, event: Event) {\n        let mut cleanup = false;\n        // Call the listeners\n        for l in self.listeners.iter() {\n            if let Some(mut listener_rc) = l.upgrade() {\n                let mut listener = listener_rc.borrow_mut();\n                listener.notify(&amp;event);\n            } else {\n                println!(\"Cannot get listener, cleanup necessary\");\n                cleanup = true;\n            }\n        }\n        // If there were invalid weak refs, clean up the list\n        if cleanup {\n            println!(\"Dispatcher is cleaning up weak refs\");\n            self.listeners.retain(|ref l| {\n                // Only retain valid weak refs\n                let got_ref = l.clone().upgrade();\n                match got_ref {\n                    None =&gt; false,\n                    _ =&gt; true,\n                }\n            });\n        }\n    }\n}\n</code></pre>\n\n<p>Here is a unit test code snippet that exercises it. </p>\n\n<p>The test is from a card game library where my <code>Event</code> enum has <code>FlopDealt</code> and <code>GameFinished</code> variants. The test creates and registers my listener, and ensures that it was called when <code>FlopDealt</code> is dispatched. The scoped section is so I can test the weak reference behaviour after the listener goes out of scope. I fire another event and count the number of listeners to ensure the list was cleaned out.</p>\n\n<pre><code>use std::time::Instant;\n\n#[derive(Debug)]\npub enum Event {\n    FlopDealt,\n    GameFinished { ended: Instant },\n}\n\nstruct MyListener {\n    pub flop_dealt: bool,\n}\n\nimpl Listener for MyListener {\n    fn notify(&amp;mut self, event: &amp;Event) {\n        println!(\"Notify called with {:?}\", event);\n        if let Event::FlopDealt = event {\n            println!(\"Flop dealt\");\n            self.flop_dealt = true;\n        }\n    }\n}\n\n#[test]\nfn events_register() {\n    let mut d: Dispatcher&lt;MyListener&gt; = Dispatcher::new();\n\n    {\n        let listener_rc = Arc::new(RefCell::new(MyListener { flop_dealt: false }));\n        d.register_listener(listener_rc.clone());\n        d.dispatch(Event::FlopDealt);\n\n        let flop_dealt = listener_rc.borrow().flop_dealt;\n        println!(\"Flop was {}dealt\", if flop_dealt { \"\" } else { \"not \" });\n        assert_eq!(flop_dealt, true);\n        assert_eq!(d.num_listeners(), 1);\n    }\n\n    // Listener should disappear\n    d.dispatch(Event::GameFinished {\n        ended: Instant::now(),\n    });\n    assert_eq!(d.num_listeners(), 0);\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 15416, "user_id": 2441637, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/Z8fpp.jpg?s=128&g=1", "display_name": "Hasan A Yousef", "link": "https://stackoverflow.com/users/2441637/hasan-a-yousef"}, "is_accepted": false, "score": -1, "last_activity_date": 1568726766, "creation_date": 1568726766, "answer_id": 57975279, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust/57975279#57975279", "title": "How can I implement the observer pattern in Rust?", "body": "<p>I wrote <a href=\"https://stackoverflow.com/a/57974937/2441637\">this</a> answer if you are still interested about it:</p>\n\n<p>I tried <a href=\"https://stackoverflow.com/a/57974937/2441637\">this</a> way, and it worked fine with me, it is as simple as:</p>\n\n<ul>\n<li>Define your object <code>struct</code></li>\n<li>Define your <code>Listeners</code>,</li>\n<li>Define your standard functions, let's call them <code>Extensions</code>,</li>\n<li>Define the add <code>Emitter</code> option to the <code>Extensions</code> by execution <code>Self::Fn&lt;Listener&gt;</code></li>\n</ul>\n\n<p>The same code I used in the <a href=\"https://stackoverflow.com/a/57974937/2441637\">playground</a> is below, I just solved it in the rust <a href=\"https://users.rust-lang.org/t/how-to-create-and-fire-event-listener/32617/7?u=hajsf\" rel=\"nofollow noreferrer\">forum</a>:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// 1. Define your object\n//#[derive(Debug)]\npub struct Counter {\n count: i32,\n}\n\n// 2. (Optional), if do not want to use `#[derive(Debug)]` \n//    you can define your own debug/release format\nimpl std::fmt::Debug for Counter {\n    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;'_&gt;) -&gt; std::fmt::Result {\n        write!(f, \"Counter `count` is: {}\", self.count)\n    }\n}\n\n// 3. Define your Listeners trait \ntrait EventListener {\n     fn on_squared() {\n        println!(\"Counter squared\")\n     }\n     fn on_increased(amount: i32) {\n        println!(\"Counter increased by {}\", amount)\n     }\n     fn on_decreased(self, amount: i32);\n}\n\n// 4. Implement your Listeners trait to your object\nimpl EventListener for Counter {\n    fn on_decreased(self, amount: i32) {\n        println!(\"Counter reduced from {} to {}\", &amp;self.count, &amp;self.count - amount)\n    }\n}\n\n// 5. (Recommended), Define your standard functions/Extensions/Emitters\n//    trait signatures\ntrait EventEmitter {\n    fn square(&amp;mut self);\n    fn increase(&amp;mut self, amount: i32);\n    fn decrease(&amp;mut self, amount: i32);\n    fn change_by(&amp;mut self, amount: i32);\n}\n\n// 6. Implement your standard functions/Extensions/Emitters trait to your object\nimpl EventEmitter for Counter {\n    fn square(&amp;mut self) { \n        self.count = self.count.pow(2);\n        Self::on_squared();      // This is Event Emitter, calling the Listner\n    }\n    fn increase(&amp;mut self, amount: i32) { \n        self.count = self.count + amount; \n        Self::on_increased(amount);   // This is Event Emitter, calling the Listner\n    }\n    fn decrease(&amp;mut self, amount: i32) {\n        let initial_value = self.count;\n        self.count = self.count - amount;\n        Self::on_decreased(Self {count: initial_value}, amount);  // This is Event Emitter, calling the Listner\n    }\n    fn change_by(&amp;mut self, amount: i32) {\n        let initial_value = self.count;\n        self.count = self.count + amount;\n        match amount {\n            x if x &gt; 0 =&gt; Self::on_increased(amount),   // This is Event Emitter, calling the Listner\n            x if x &lt; 0 =&gt; Self::on_decreased(Self {count: initial_value},  // This is Event Emitter, calling the Listneramount.abs()),\n            _   =&gt; println!(\"No changes\")\n        }\n    }\n}\n\n// 7. Build your main function\nfn main() {\n    let mut x = Counter { count: 5 };\n    println!(\"Counter started at: {:#?}\", x.count);\n    x.square();   // Call the extension, which will automatically trigger the listner\n    println!(\"{:?}\", x);\n    x.increase(3);\n    println!(\"{:?}\", x);\n    x.decrease(2);\n    println!(\"{:?}\", x);\n    x.change_by(-1);\n    println!(\"{:?}\", x);\n}\n</code></pre>\n\n<p>And got the below output:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>Counter started at: 5\nCounter squared\nCounter `count` is: 25\nCounter increased by 3\nCounter `count` is: 28\nCounter reduced from 28 to 26\nCounter `count` is: 26\nCounter reduced from 26 to 25\nCounter `count` is: 25\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 175, "user_id": 6249688, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/465ae66ea36ea277d33528789e9cab3d?s=128&d=identicon&r=PG&f=1", "display_name": "Blue Joy", "link": "https://stackoverflow.com/users/6249688/blue-joy"}, "is_accepted": false, "score": 0, "last_activity_date": 1583064593, "creation_date": 1583064593, "answer_id": 60474940, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust/60474940#60474940", "title": "How can I implement the observer pattern in Rust?", "body": "<p>rust design patterns <a href=\"https://github.com/lpxxn/rust-design-pattern\" rel=\"nofollow noreferrer\">https://github.com/lpxxn/rust-design-pattern</a></p>\n\n<pre><code>trait IObserver {\n    fn update(&amp;self);\n}\n\ntrait ISubject&lt;'a, T: IObserver&gt; {\n    fn attach(&amp;mut self, observer: &amp;'a T);\n    fn detach(&amp;mut self, observer: &amp;'a T);\n    fn notify_observers(&amp;self);\n}\n\nstruct Subject&lt;'a, T: IObserver&gt; {\n    observers: Vec&lt;&amp;'a T&gt;,\n}\nimpl&lt;'a, T: IObserver + PartialEq&gt; Subject&lt;'a, T&gt; {\n    fn new() -&gt; Subject&lt;'a, T&gt; {\n        Subject {\n            observers: Vec::new(),\n        }\n    }\n}\n\nimpl&lt;'a, T: IObserver + PartialEq&gt; ISubject&lt;'a, T&gt; for Subject&lt;'a, T&gt; {\n    fn attach(&amp;mut self, observer: &amp;'a T) {\n        self.observers.push(observer);\n    }\n    fn detach(&amp;mut self, observer: &amp;'a T) {\n        if let Some(idx) = self.observers.iter().position(|x| *x == observer) {\n            self.observers.remove(idx);\n        }\n    }\n    fn notify_observers(&amp;self) {\n        for item in self.observers.iter() {\n            item.update();\n        }\n    }\n}\n\n#[derive(PartialEq)]\nstruct ConcreteObserver {\n    id: i32,\n}\nimpl IObserver for ConcreteObserver {\n    fn update(&amp;self) {\n        println!(\"Observer id:{} received event!\", self.id);\n    }\n}\n\nfn main() {\n    let mut subject = Subject::new();\n    let observer_a = ConcreteObserver { id: 1 };\n    let observer_b = ConcreteObserver { id: 2 };\n\n    subject.attach(&amp;observer_a);\n    subject.attach(&amp;observer_b);\n    subject.notify_observers();\n\n    subject.detach(&amp;observer_b);\n    subject.notify_observers();\n}\n</code></pre>\n\n<p>output</p>\n\n<pre><code>Observer id:1 received event!\nObserver id:2 received event!\nObserver id:1 received event!\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 7184, "favorite_count": 9, "accepted_answer_id": 37573345, "answer_count": 5, "score": 26, "last_activity_date": 1583064593, "creation_date": 1464794338, "last_edit_date": 1546886045, "question_id": 37572734, "link": "https://stackoverflow.com/questions/37572734/how-can-i-implement-the-observer-pattern-in-rust", "title": "How can I implement the observer pattern in Rust?", "body": "<p>I have an observable collection and an observer. I want the observer to be a trait implementation of <code>trait Observer</code>. The observable object should be able to notify each observer when some event occurs. This should explain my intentions:</p>\n\n<pre><code>struct A {\n    observables: Vec&lt;Observable&gt;,\n}\n\nimpl A {\n    fn new() -&gt; A {\n        A {\n            observables: vec![],\n        }\n    }\n}\n\ntrait Observer {\n    fn event(&amp;mut self, _: &amp;String);\n}\n\nimpl Observer for A {\n    fn event(&amp;mut self, ev: &amp;String) {\n        println!(\"Got event from observable: {}\", ev);\n    }\n}\n\nstruct Observable {\n    observers: Vec&lt;dyn Observer&gt;, // How to contain references to observers? (this line is invalid)\n}\n\nimpl Observable {\n    fn new() -&gt; Observable {\n        Observable {\n            observers: Vec::new(),\n        }\n    }\n\n    fn add_observer(&amp;mut self, o: &amp;dyn Observer) {\n        // incorrect line too\n        self.observers.push(o);\n    }\n\n    fn remove_observer(&amp;mut self, o: &amp;dyn Observer) {\n        // incorrect line too\n        self.observers.remove(o);\n    }\n\n    fn notify_observers(&amp;self, ev: &amp;String) {\n        for o in &amp;mut self.observers {\n            o.event(ev);\n        }\n    }\n}\n</code></pre>\n\n<p>(<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7f7098ce3b8955d40fc1198b05aa8d3d\" rel=\"noreferrer\">Playground</a>)</p>\n\n<p>I get the error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0277]: the size for values of type `(dyn Observer + 'static)` cannot be known at compilation time\n  --&gt; src/lib.rs:24:5\n   |\n24 |     observers: Vec&lt;dyn Observer&gt;, // How to contain references to observers?\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n   |\n   = help: the trait `std::marker::Sized` is not implemented for `(dyn Observer + 'static)`\n   = note: to learn more, visit &lt;https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait&gt;\n   = note: required by `std::vec::Vec`\n</code></pre>\n\n<p>This is just a mock-up of what I want to do. I have code like this in Java, Python, and C++, but I don't know how to implement the observer pattern in Rust. I believe my problem is in storing a reference to observer objects inside observable objects.</p>\n"}, {"tags": ["tuples", "rust"], "answers": [{"tags": [], "owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "is_accepted": false, "score": 6, "last_activity_date": 1464772404, "creation_date": 1464772404, "answer_id": 37564285, "question_id": 37564138, "link": "https://stackoverflow.com/questions/37564138/tuple-splat-apply-in-rust/37564285#37564285", "title": "Tuple splat / apply in Rust", "body": "<p>Proving a negative is always quite difficult...</p>\n\n<p>As far as I know, there is indeed no tuple splat operator. However, the <code>Fn*</code> family of traits (<a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\">Fn</a>) takes a single argument, as a tuple.</p>\n\n<p>On a nightly compiler, activating some unstable features, you can thus use:</p>\n\n<pre><code>#![feature(fn_traits)]\n#![feature(unboxed_closures)]\n\nfn sum(x: i32, y: i32) -&gt; i32 {\n    x + y\n}\n\nfn prepare_args () -&gt; (i32, i32) {\n    (1, 2)\n}\n\nfn main() {\n    let func: &amp;Fn(i32, i32) -&gt; i32 = &amp;sum;\n    let result = func.call(prepare_args());\n    println!(\"{:?}\", result);\n}\n</code></pre>\n\n<p>Not too ideal, but then in the absence of support for variadics, you always need to know the number of elements of your tuple anyway so the value is low.</p>\n"}, {"tags": [], "owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "is_accepted": true, "score": 6, "last_activity_date": 1464808985, "last_edit_date": 1464808985, "creation_date": 1464772840, "answer_id": 37564439, "question_id": 37564138, "link": "https://stackoverflow.com/questions/37564138/tuple-splat-apply-in-rust/37564439#37564439", "title": "Tuple splat / apply in Rust", "body": "<p>I don't think there is a splat operator.</p>\n\n<p>The code you found from 2014 is from before Rust 1.0, so it is outdated. To make the <code>apply</code> function work in post 1.0 Rust, change it into the following:</p>\n\n<pre><code>fn sum(x: i32, y: i32) -&gt; i32 {\n    x + y\n}\n\nfn prepare_args() -&gt; (i32, i32) {\n    (1, 2)\n}\n\nfn apply&lt;A, B, C, F&gt;(f: F, t: (A, B)) -&gt; C\n    where F : Fn(A, B) -&gt; C\n{\n    let (a, b) = t;\n    f(a, b)\n}\n\nfn main() {\n    let x = apply(sum, prepare_args());\n    println!(\"{}\", x);\n}\n</code></pre>\n\n<p>This code compiles and runs correctly on <a href=\"https://play.rust-lang.org/?code=fn%20sum%28x%3A%20i32%2C%20y%3A%20i32%29%20-%3E%20i32%20%7B%0A%20%20%20%20x%20%2B%20y%0A%7D%0A%0Afn%20prepare_args%28%29%20-%3E%20%28i32%2C%20i32%29%20%7B%0A%20%20%20%20%281%2C%202%29%0A%7D%0A%0Afn%20apply%3CA%2C%20B%2C%20C%2C%20F%3E%28f%3A%20F%2C%20t%3A%20%28A%2C%20B%29%29%20-%3E%20C%0A%20%20%20%20where%20F%20%3A%20Fn%28A%2C%20B%29%20-%3E%20C%0A%7B%0A%20%20%20%20let%20%28a%2C%20b%29%20%3D%20t%3B%0A%20%20%20%20f%28a%2C%20b%29%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20x%20%3D%20apply%28sum%2C%20prepare_args%28%29%29%3B%0A%20%20%20%20println!%28%22%7B%7D%22%2C%20x%29%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">the Rust playground</a>.</p>\n\n<p>You could alternatively use <code>f(t.0, t.1)</code> as the body of <code>apply</code>, or destructure right there in the parameter list (<a href=\"https://play.rust-lang.org/?code=fn%20sum%28x%3A%20i32%2C%20y%3A%20i32%29%20-%3E%20i32%20%7B%0A%20%20%20%20x%20%2B%20y%0A%7D%0A%0Afn%20prepare_args%28%29%20-%3E%20%28i32%2C%20i32%29%20%7B%0A%20%20%20%20%281%2C%202%29%0A%7D%0A%0Afn%20apply%3CA%2C%20B%2C%20C%2C%20F%3E%28f%3A%20F%2C%20%28a%2C%20b%29%3A%20%28A%2C%20B%29%29%20-%3E%20C%0A%20%20%20%20where%20F%20%3A%20Fn%28A%2C%20B%29%20-%3E%20C%0A%7B%0A%20%20%20%20f%28a%2C%20b%29%0A%7D%0A%0Afn%20main%28%29%20%7B%0A%20%20%20%20let%20x%20%3D%20apply%28sum%2C%20prepare_args%28%29%29%3B%0A%20%20%20%20println!%28%22%7B%7D%22%2C%20x%29%3B%0A%7D%0A&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>fn apply&lt;A, B, C, F&gt;(f: F, (a, b): (A, B)) -&gt; C\n    where F : Fn(A, B) -&gt; C\n{\n    f(a, b)\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1464791457, "creation_date": 1464791457, "answer_id": 37571613, "question_id": 37564138, "link": "https://stackoverflow.com/questions/37564138/tuple-splat-apply-in-rust/37571613#37571613", "title": "Tuple splat / apply in Rust", "body": "<p>Here is a version of <code>apply</code> that works for tuples with sizes from 1 to 6 (can be increased) (<a href=\"https://play.rust-lang.org/?gist=d1284ceed96866d42d413aa2964bbac5&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>fn main() {\n    let add1 = |x| x + 1;\n    let sum2 = ::std::ops::Add::add;\n    let sum3 = |a, b, c| a + b + c;\n    assert_eq!(apply(add1, (1,)), 2);\n    assert_eq!(apply(sum2, (1, 2)), 3);\n    assert_eq!(apply(sum3, (1, 2, 3)), 6);\n}\n\n#[inline(always)]\npub fn apply&lt;Fun, In, Out&gt;(fun: Fun, params: In) -&gt; Out\n    where ApplyImpl: Apply&lt;Fun, In, Out&gt;\n{\n    ApplyImpl::apply(fun, params)\n}\n\npub trait Apply&lt;Fun, In, Out&gt; {\n    fn apply(fun: Fun, params: In) -&gt; Out;\n}\n\npub struct ApplyImpl;\n\nmacro_rules! impl_apply {\n    () =&gt; ();\n    ($A:ident, $($B:ident,)*) =&gt; (\n        impl_apply!{$($B,)*}\n\n        impl&lt;$A, $($B,)* Fun, Out&gt; Apply&lt;Fun, ($A, $($B),*), Out&gt; for ApplyImpl\n        where Fun: Fn($A, $($B),*) -&gt; Out\n        {\n            #[allow(non_snake_case)]\n            #[inline(always)]\n            fn apply(fun: Fun, params: ($A, $($B),*)) -&gt; Out {\n                // use type parameters as var names...\n                let ($A, $($B),*) = params;\n                fun($A, $($B),*)\n            }\n        }\n    )\n}\n\nimpl_apply!{A, B, C, D, E, F,}\n</code></pre>\n\n<hr>\n\n<p>I'm thinking in create a crate for it. If I do, I will put the link here.</p>\n"}], "owner": {"reputation": 9546, "user_id": 58866, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/6OsC0.jpg?s=128&g=1", "display_name": "Imran", "link": "https://stackoverflow.com/users/58866/imran"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1211, "favorite_count": 0, "accepted_answer_id": 37564439, "answer_count": 3, "score": 5, "last_activity_date": 1464808985, "creation_date": 1464771977, "last_edit_date": 1464772600, "question_id": 37564138, "link": "https://stackoverflow.com/questions/37564138/tuple-splat-apply-in-rust", "title": "Tuple splat / apply in Rust", "body": "<p>I found <a href=\"https://github.com/rust-lang/rust/issues/17274\" rel=\"nofollow\">this discussion</a> about tuple splatting, but it is from 2014.</p>\n\n<p>The example given is:</p>\n\n<pre><code>fn sum(x: i32, y: i32) -&gt; i32 {\n    x + y\n}\n\nfn prepare_args () -&gt; (i32, i32) {\n    (1, 2)\n}\n\nfn main() {\n    sum(prepare_args()); // Doesn't work\n}\n</code></pre>\n\n<p>And the proposed solution is to roll your own <code>apply</code> function:</p>\n\n<pre><code>fn apply&lt;A,B,C&gt;(f: |A,B|-&gt;C, t: (A,B)) -&gt; C {\n    let (a,b) = t;\n    f(a,b)\n}\n\nfn main() {\n    apply(sum, prepare_args());\n}\n</code></pre>\n\n<p>Is this currently the best way to go? If so, what is the correct syntax here? I get some errors including <code>expected type, found</code>|<code>at line 1 col 20</code> using the above.</p>\n\n<p>Is there still no tuple splat operator?</p>\n"}, {"tags": ["json", "rust", "serde"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1464769744, "post_id": 37561593, "comment_id": 62614193, "body": "please show what it currently serializes to."}, {"owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "reply_to_user": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1464769903, "post_id": 37561593, "comment_id": 62614307, "body": "@ker It doesn&#39;t searialize to anything. This isn&#39;t valid code. Because &quot;MyError&quot; and &quot;MyAge&quot; isn&#39;t compatible types."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 1, "creation_date": 1464771945, "post_id": 37561593, "comment_id": 62615641, "body": "ooooh... Have you tried using an enum instead? There&#39;s a million ways to solve your problem. The solutions have different amounts and types of code that you need to write yourself... Are you bound to that exact output format?"}], "answers": [{"comments": [{"owner": {"reputation": 2384, "user_id": 3553432, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/fb2106952e54afdb0d370799f988ba25?s=128&d=identicon&r=PG", "display_name": "nikoss", "link": "https://stackoverflow.com/users/3553432/nikoss"}, "edited": false, "score": 1, "creation_date": 1543538068, "post_id": 37565736, "comment_id": 93965726, "body": "again simple things made difficult by rust"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 2384, "user_id": 3553432, "user_type": "registered", "accept_rate": 74, "profile_image": "https://www.gravatar.com/avatar/fb2106952e54afdb0d370799f988ba25?s=128&d=identicon&r=PG", "display_name": "nikoss", "link": "https://stackoverflow.com/users/3553432/nikoss"}, "edited": false, "score": 0, "creation_date": 1543599617, "post_id": 37565736, "comment_id": 93990365, "body": "@nikoss, Serde was designed to be fast, and generic across multiple encoding formats. AFAIK, it&#39;s one of the fastest JSON libraries out there. (Last time I checked, only the memory-unsafe C++ rapidjson was faster). Some amount of static typing is a necessary trade-off, it allows us to decode directly into a structure, avoiding the heap allocation of temporaries. If you don&#39;t need the extra speed and the convenience of typed structures, you&#39;re welcome to keep things simple by using the dynamically-typed JSON libraries (or indeed the dynamically-typed part of Serde, via <code>serde_json::Value</code>)."}], "tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": true, "score": 13, "last_activity_date": 1605474060, "last_edit_date": 1605474060, "creation_date": 1464775973, "answer_id": 37565736, "question_id": 37561593, "link": "https://stackoverflow.com/questions/37561593/how-can-i-use-serde-with-a-json-array-with-different-objects-for-successes-and-e/37565736#37565736", "title": "How can I use Serde with a JSON array with different objects for successes and errors?", "body": "<p>Here's one way of doing that:</p>\n<pre><code>#[macro_use]\nextern crate serde_derive; // 1.0.117\nextern crate serde; // 1.0.117\nextern crate serde_json; // 1.0.59\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyError {\n    error: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyAge {\n    age: i32,\n    name: String,\n}\n\n#[derive(Debug)]\nenum AgeOrError {\n    Age(MyAge),\n    Error(MyError),\n}\n\nimpl serde::Serialize for AgeOrError {\n    fn serialize&lt;S: serde::Serializer&gt;(&amp;self, serializer: S) -&gt; Result&lt;S::Ok, S::Error&gt; {\n        match self {\n            &amp;AgeOrError::Age(ref my_age) =&gt; serializer.serialize_some(my_age),\n            &amp;AgeOrError::Error(ref my_error) =&gt; serializer.serialize_some(my_error),\n        }\n    }\n}\n\nenum AgeOrErrorField {\n    Age,\n    Name,\n    Error,\n}\n\nimpl&lt;'de&gt; serde::Deserialize&lt;'de&gt; for AgeOrErrorField {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;AgeOrErrorField, D::Error&gt;\n    where\n        D: serde::Deserializer&lt;'de&gt;,\n    {\n        struct AgeOrErrorFieldVisitor;\n\n        impl&lt;'de&gt; serde::de::Visitor&lt;'de&gt; for AgeOrErrorFieldVisitor {\n            type Value = AgeOrErrorField;\n\n            fn expecting(&amp;self, formatter: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n                write!(formatter, &quot;age or error&quot;)\n            }\n\n            fn visit_str&lt;E&gt;(self, value: &amp;str) -&gt; Result&lt;AgeOrErrorField, E&gt;\n            where\n                E: serde::de::Error,\n            {\n                Ok(match value {\n                    &quot;age&quot; =&gt; AgeOrErrorField::Age,\n                    &quot;name&quot; =&gt; AgeOrErrorField::Name,\n                    &quot;error&quot; =&gt; AgeOrErrorField::Error,\n                    _ =&gt; panic!(&quot;Unexpected field name: {}&quot;, value),\n                })\n            }\n        }\n\n        deserializer.deserialize_any(AgeOrErrorFieldVisitor)\n    }\n}\n\nimpl&lt;'de&gt; serde::Deserialize&lt;'de&gt; for AgeOrError {\n    fn deserialize&lt;D&gt;(deserializer: D) -&gt; Result&lt;AgeOrError, D::Error&gt;\n    where\n        D: serde::Deserializer&lt;'de&gt;,\n    {\n        deserializer.deserialize_map(AgeOrErrorVisitor)\n    }\n}\n\nstruct AgeOrErrorVisitor;\n\nimpl&lt;'de&gt; serde::de::Visitor&lt;'de&gt; for AgeOrErrorVisitor {\n    type Value = AgeOrError;\n\n    fn expecting(&amp;self, formatter: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {\n        write!(formatter, &quot;age or error&quot;)\n    }\n\n    fn visit_map&lt;A&gt;(self, mut map: A) -&gt; Result&lt;AgeOrError, A::Error&gt;\n    where\n        A: serde::de::MapAccess&lt;'de&gt;,\n    {\n        let mut age: Option&lt;i32&gt; = None;\n        let mut name: Option&lt;String&gt; = None;\n        let mut error: Option&lt;String&gt; = None;\n        loop {\n            match map.next_key()? {\n                Some(AgeOrErrorField::Age) =&gt; age = map.next_value()?,\n                Some(AgeOrErrorField::Name) =&gt; name = map.next_value()?,\n                Some(AgeOrErrorField::Error) =&gt; error = map.next_value()?,\n                None =&gt; break,\n            }\n        }\n        if let Some(error) = error {\n            Ok(AgeOrError::Error(MyError { error: error }))\n        } else {\n            Ok(AgeOrError::Age(MyAge {\n                age: age.expect(&quot;!age&quot;),\n                name: name.expect(&quot;!name&quot;),\n            }))\n        }\n    }\n}\n\nfn get_results(ages: &amp;[i32]) -&gt; Vec&lt;AgeOrError&gt; {\n    let mut results = Vec::with_capacity(ages.len());\n    for &amp;age in ages.iter() {\n        if age &lt; 100 &amp;&amp; age &gt; 0 {\n            results.push(AgeOrError::Age(MyAge {\n                age: age,\n                name: String::from(&quot;The dude&quot;),\n            }));\n        } else {\n            results.push(AgeOrError::Error(MyError {\n                error: format!(&quot;{} is invalid age&quot;, age),\n            }));\n        }\n    }\n    results\n}\n\nfn main() {\n    let v = get_results(&amp;[1, -6, 7]);\n    let serialized = serde_json::to_string(&amp;v).expect(&quot;Can't serialize&quot;);\n    println!(&quot;serialized: {}&quot;, serialized);\n    let deserialized: Vec&lt;AgeOrError&gt; =\n        serde_json::from_str(&amp;serialized).expect(&quot;Can't deserialize&quot;);\n    println!(&quot;deserialized: {:?}&quot;, deserialized);\n}\n</code></pre>\n<p>Note that in deserialization we can't reuse the automatically generated deserializers because:</p>\n<ol>\n<li>deserialization is kind of streaming the fields to us, we can't <em>peek</em> into the stringified JSON representation and guess what it is;<br></li>\n<li>we don't have access to the <code>serde::de::Visitor</code> implementations that Serde generates.</li>\n</ol>\n<p>Also I did a shortcut and <code>panic</code>ked on errors. In production code you'd want to return the proper Serde errors instead.</p>\n<hr />\n<p>Another solution would be to make a merged structure with all fields optional, like this:</p>\n<pre><code>#[macro_use]\nextern crate serde_derive; // 1.0.70\nextern crate serde; // 1.0.70\nextern crate serde_json; // 1.0.24\n\n#[derive(Debug)]\npub struct MyError {\n    error: String,\n}\n\n#[derive(Debug)]\npub struct MyAge {\n    age: i32,\n    name: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyAgeOrError {\n    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n    age: Option&lt;i32&gt;,\n    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n    name: Option&lt;String&gt;,\n    #[serde(skip_serializing_if = &quot;Option::is_none&quot;)]\n    error: Option&lt;String&gt;,\n}\n\nimpl MyAgeOrError {\n    fn from_age(age: MyAge) -&gt; MyAgeOrError {\n        MyAgeOrError {\n            age: Some(age.age),\n            name: Some(age.name),\n            error: None,\n        }\n    }\n    fn from_error(error: MyError) -&gt; MyAgeOrError {\n        MyAgeOrError {\n            age: None,\n            name: None,\n            error: Some(error.error),\n        }\n    }\n}\n\nfn get_results(ages: &amp;[i32]) -&gt; Vec&lt;MyAgeOrError&gt; {\n    let mut results = Vec::with_capacity(ages.len());\n    for &amp;age in ages.iter() {\n        if age &lt; 100 &amp;&amp; age &gt; 0 {\n            results.push(MyAgeOrError::from_age(MyAge {\n                age: age,\n                name: String::from(&quot;The dude&quot;),\n            }));\n        } else {\n            results.push(MyAgeOrError::from_error(MyError {\n                error: format!(&quot;{} is invalid age&quot;, age),\n            }));\n        }\n    }\n    results\n}\n\nfn main() {\n    let v = get_results(&amp;[1, -6, 7]);\n    let serialized = serde_json::to_string(&amp;v).expect(&quot;Can't serialize&quot;);\n    println!(&quot;serialized: {}&quot;, serialized);\n    let deserialized: Vec&lt;MyAgeOrError&gt; =\n        serde_json::from_str(&amp;serialized).expect(&quot;Can't deserialize&quot;);\n    println!(&quot;deserialized: {:?}&quot;, deserialized);\n}\n</code></pre>\n<p>I'd vouch for this one because it allows the Rust structure (e.g. <code>MyAgeOrError</code>) to match the layout of your JSON. That way the JSON layout becomes documented in the Rust code.</p>\n<p>P.S. Lately I tend to delay the decoding of optional or dynamically typed JSON parts with the help of <a href=\"https://docs.serde.rs/serde_json/value/struct.RawValue.html\" rel=\"nofollow noreferrer\">RawValue</a>. It's tricky to serialize them though, because <code>RawValue</code> is a borrow. For instance, and to help with serialization, one can <em>intern</em> a <code>RawValue</code>, promoting it to the <code>'static</code> lifetime:</p>\n<pre><code>use serde_json::value::{RawValue as RawJson};\n\nfn intern_raw_json(raw_json: Box&lt;RawJson&gt;) -&gt; &amp;'static RawJson {\n    use parking_lot::Mutex;\n    use std::mem::transmute;\n\n    static BUF: Mutex&lt;Vec&lt;Pin&lt;Box&lt;RawJson&gt;&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n    let buf = BUF.lock();\n    let raw_json: Pin&lt;Box&lt;RawJson&gt;&gt; = raw_json.into();\n    let pt: &amp;'static RawJson = {\n        let pt: &amp;RawJson = &amp;*raw_json;\n        transmute(pt)\n    };\n    buf.push(raw_json);\n    pt\n}\n</code></pre>\n<p>If performance is not an issue, then one can deserialize the dynamic parts into the <a href=\"https://docs.serde.rs/serde_json/enum.Value.html\" rel=\"nofollow noreferrer\">Value</a>.<br />\nSimilarly, if using <code>Value</code> is an option, then custom deserialization can be simplified by implementing <a href=\"https://serde.rs/container-attrs.html#try_from\" rel=\"nofollow noreferrer\"><code>TryFrom&lt;Value&gt;</code></a>.</p>\n"}, {"tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user3179290"}, "is_accepted": false, "score": 11, "last_activity_date": 1534872919, "last_edit_date": 1534872919, "creation_date": 1486166083, "answer_id": 42034863, "question_id": 37561593, "link": "https://stackoverflow.com/questions/37561593/how-can-i-use-serde-with-a-json-array-with-different-objects-for-successes-and-e/42034863#42034863", "title": "How can I use Serde with a JSON array with different objects for successes and errors?", "body": "<p>Serde supports <a href=\"https://serde.rs/enum-representations.html#internally-tagged\" rel=\"noreferrer\">internally tagged</a> and <a href=\"https://serde.rs/enum-representations.html#untagged\" rel=\"noreferrer\">untagged enums</a> as of version 0.9.6.</p>\n\n<p>The following code shows an example of how this could be done by using an enum with the attribute <code>#[serde(untagged)]</code>.</p>\n\n<pre><code>#[macro_use]\nextern crate serde_derive; // 1.0.70\nextern crate serde_json; // 1.0.24\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyError {\n    error: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyAge {\n    age: i32,\n    name: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\n#[serde(untagged)]\npub enum AgeOrError {\n    Age(MyAge),\n    Error(MyError),\n}\n\nfn get_results(ages: Vec&lt;i32&gt;) -&gt; Vec&lt;AgeOrError&gt; {\n    let mut results = Vec::with_capacity(ages.len());\n    for age in ages {\n        if age &lt; 100 &amp;&amp; age &gt; 0 {\n            results.push(AgeOrError::Age(MyAge {\n                age: age,\n                name: String::from(\"The dude\"),\n            }));\n        } else {\n            results.push(AgeOrError::Error(MyError {\n                error: format!(\"{} is invalid age\", age),\n            }));\n        }\n    }\n    results\n}\n\nfn main() {\n    let results = get_results(vec![1, -6, 7]);\n    let json = serde_json::to_string(&amp;results).unwrap();\n    println!(\"{}\", json);\n}\n</code></pre>\n\n<p>The above code outputs the following JSON:</p>\n\n<pre><code>[{\"age\":1,\"name\":\"The dude\"},{\"error\":\"-6 is invalid age\"},{\"age\":7,\"name\":\"The dude\"}]\n</code></pre>\n\n<p>More information on Serde's enum representation can be found in the <a href=\"https://serde.rs/enum-representations.html\" rel=\"noreferrer\">overview</a>.</p>\n"}], "owner": {"reputation": 861, "user_id": 3384741, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/b963cea8f41c91b8fb79eedccce04d80?s=128&d=identicon&r=PG&f=1", "display_name": "user3384741", "link": "https://stackoverflow.com/users/3384741/user3384741"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4917, "favorite_count": 3, "accepted_answer_id": 37565736, "answer_count": 2, "score": 9, "last_activity_date": 1605474060, "creation_date": 1464764513, "last_edit_date": 1534989963, "question_id": 37561593, "link": "https://stackoverflow.com/questions/37561593/how-can-i-use-serde-with-a-json-array-with-different-objects-for-successes-and-e", "title": "How can I use Serde with a JSON array with different objects for successes and errors?", "body": "<p>I want to use Serde to create an array with error messages as well as proper objects:</p>\n\n<pre><code>extern crate serde; // 1.0.70\n#[macro_use]\nextern crate serde_derive; // 1.0.70\nextern crate serde_json; // 1.0.24\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyError {\n    error: String,\n}\n\n#[derive(Serialize, Deserialize, Debug)]\npub struct MyAge {\n    age: i32,\n    name: String,\n}\n\nfn get_results(ages: Vec&lt;i32&gt;) -&gt; Vec&lt;MyAge&gt; {\n    let mut results = vec![];\n    for age in ages {\n        if age &lt; 100 &amp;&amp; age &gt; 0 {\n            results.push(MyAge {\n                age: age,\n                name: String::from(\"The dude\"),\n            });\n        } else {\n            results.push(MyError {\n                error: String::from(format!(\"{} is invalid age\", age)),\n            });\n        }\n    }\n    results\n}\n</code></pre>\n\n<p>When I pass in the Vec <code>[1, -6, 7]</code> I want to serialize to the JSON:</p>\n\n<pre><code>[{\"age\": 1, \"name\": \"The dude\"},{\"error\": \"-6 is invalid age\"},{\"age\": 7, \"name\": \"The dude\"}]\n</code></pre>\n\n<p>How do I do that? Knowing how to deserialize such an array would be nice as well.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 4324, "user_id": 1045510, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/abde71672c5b271c778d3ed312347866?s=128&d=identicon&r=PG", "display_name": "Kroltan", "link": "https://stackoverflow.com/users/1045510/kroltan"}, "edited": false, "score": 2, "creation_date": 1464747232, "post_id": 37558353, "comment_id": 62605180, "body": "Anything against <code>print!(&quot;{} or {} = {} \\r\\n&quot;, a, b, a | b);</code>?"}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1464749422, "post_id": 37558353, "comment_id": 62605705, "body": "The <code>println!</code> macro <a href=\"https://github.com/rust-lang/rust/blob/master/src/libstd/macros.rs#L118\" rel=\"nofollow noreferrer\">doesn&#39;t do any checks for the environment</a> when it adds the new line unfortunately. So there doesn&#39;t seem to be a flag you can set to make it all work as you expect. I&#39;d say manually calling <code>print!</code> as above is your best bet."}, {"owner": {"reputation": 5785, "user_id": 957512, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/CV8bs.png?s=128&g=1", "display_name": "Sebastian K", "link": "https://stackoverflow.com/users/957512/sebastian-k"}, "edited": false, "score": 0, "creation_date": 1464750509, "post_id": 37558353, "comment_id": 62605943, "body": "Yeah \\r\\n does the trick. Thanks, I should have thought of that. Please make it an answer and I&#39;ll accept it."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "edited": false, "score": 1, "creation_date": 1464751828, "post_id": 37558353, "comment_id": 62606287, "body": "@SimonWhitehead FYI, hit <code>y</code> on GitHub to change the url to a permalink that contains the git hash. <code>master</code> is likely to rot over time You can also insert a tag in place of <code>master</code> (my preferred route). Also, shift-clicking allows you to link to a range of lines."}, {"owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464753044, "post_id": 37558353, "comment_id": 62606600, "body": "Wow thanks @Shepmaster - I had often thought there must be a better way to link to lines but I never bothered to read the GH docs. I will remember this from now on... thanks!"}, {"owner": {"reputation": 4622, "user_id": 996886, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/lSuAl.png?s=128&g=1", "display_name": "melak47", "link": "https://stackoverflow.com/users/996886/melak47"}, "edited": false, "score": 1, "creation_date": 1464770870, "post_id": 37558353, "comment_id": 62614931, "body": "If I run <code>app &gt; file.txt</code> from powershell, the line endings get converted to windows-style automagically :)"}, {"owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "edited": false, "score": 0, "creation_date": 1464807085, "post_id": 37558353, "comment_id": 62640250, "body": "The conversion should probably be on a lower level than the <code>println!</code> macros, when writing files in text mode (like in C): <a href=\"https://en.wikipedia.org/wiki/Newline#In_programming_languages\" rel=\"nofollow noreferrer\">en.wikipedia.org/wiki/Newline#In_programming_languages</a>"}], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 4, "creation_date": 1464761381, "post_id": 37558917, "comment_id": 62609552, "body": "Do you know whether this is intentional or not? I could perfectly imagine a <code>cfg</code> attribute to switch the implementation of <code>println</code> but I seem to recall a discussion where having platform-specific behavior was seen as a source of portability issues..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464784218, "post_id": 37558917, "comment_id": 62624428, "body": "@MatthieuM. I am unaware of any discussion, sadly. Personally I prefer having a single behavior across platforms."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 9, "last_activity_date": 1464751687, "creation_date": 1464751687, "answer_id": 37558917, "question_id": 37558353, "link": "https://stackoverflow.com/questions/37558353/is-there-a-way-to-force-print-println-to-use-a-windows-new-line-cr-lf/37558917#37558917", "title": "Is there a way to force print!/println! to use a Windows new line (CR LF)", "body": "<p>If you check out <a href=\"https://github.com/rust-lang/rust/blob/1.9.0/src/libstd/macros.rs#L116-L121\">the implementation of <code>println!</code></a>, it's pretty straight-forward:</p>\n\n<pre><code>macro_rules! println {\n    ($fmt:expr) =&gt; (print!(concat!($fmt, \"\\n\")));\n    ($fmt:expr, $($arg:tt)*) =&gt; (print!(concat!($fmt, \"\\n\"), $($arg)*));\n}\n</code></pre>\n\n<p>You can copy-paste-modify this to replace <code>\\n</code> with <code>\\r\\n</code>:</p>\n\n<pre><code>macro_rules! wprintln {\n    ($fmt:expr) =&gt; (print!(concat!($fmt, \"\\r\\n\")));\n    ($fmt:expr, $($arg:tt)*) =&gt; (print!(concat!($fmt, \"\\r\\n\"), $($arg)*));\n}\n</code></pre>\n"}], "owner": {"reputation": 5785, "user_id": 957512, "user_type": "registered", "accept_rate": 74, "profile_image": "https://i.stack.imgur.com/CV8bs.png?s=128&g=1", "display_name": "Sebastian K", "link": "https://stackoverflow.com/users/957512/sebastian-k"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 531, "favorite_count": 0, "accepted_answer_id": 37558917, "answer_count": 1, "score": 6, "last_activity_date": 1464751687, "creation_date": 1464747096, "last_edit_date": 1464748371, "question_id": 37558353, "link": "https://stackoverflow.com/questions/37558353/is-there-a-way-to-force-print-println-to-use-a-windows-new-line-cr-lf", "title": "Is there a way to force print!/println! to use a Windows new line (CR LF)", "body": "<p>I am using Rust 1.9 on Windows 10. When playing with some code and comparing the result captured from standard output, I noticed that output uses a Linux line ending 0x0A (10, LF) rather than windows 0x0D 0x0A (13 10, CR LF). I tried following:</p>\n\n<pre><code>println!(\"{} or {}  = {}\", a, b, a | b);\n\nprint!(\"{} or {}  = {}\\n\", a, b, a | b);\n</code></pre>\n\n<p>Is there a way to force Windows line endings? </p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1464726642, "post_id": 37554853, "comment_id": 62598958, "body": "You could use the <a href=\"https://danielkeep.github.io/rust-custom-derive/doc/newtype_derive/index.html\" rel=\"nofollow noreferrer\">newtype_derive</a> crate but that only works with tuple structs i.e. <code>struct OtherBuilder(Builder)</code>."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 2, "last_activity_date": 1464748888, "creation_date": 1464748888, "answer_id": 37558544, "question_id": 37554853, "link": "https://stackoverflow.com/questions/37554853/is-there-a-better-way-to-use-from-and-into-for-structs-that-share-a-common-inner/37558544#37558544", "title": "Is there a better way to use From and Into for structs that share a common inner field", "body": "<p>Instead of defining wrapper structs, you could define extension traits for <code>Builder</code> &ndash; i.e. traits that are only implemented on <code>Builder</code>, which provide additional functions that you can invoke with method call syntax (<code>builder.func()</code> instead of <code>func(builder)</code>). Then, you can import only the traits that are relevant in the proper scope (be it module scope, function scope, etc.).</p>\n\n<p>One downside to this approach is that if you have multiple traits providing methods with the same name, then calling these methods with method call syntax would be ambiguous (if more than one thread is imported in the relevant scope), as the compiler wouldn't know which trait you're referring to. Sure, you can disambiguate the call by using normal function syntax (<code>MyBuilderExt::func(builder)</code>), but that's not pretty. In that case, perhaps the wrappers are a better approach.</p>\n"}, {"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": false, "score": 2, "last_activity_date": 1464748965, "creation_date": 1464748965, "answer_id": 37558553, "question_id": 37554853, "link": "https://stackoverflow.com/questions/37554853/is-there-a-better-way-to-use-from-and-into-for-structs-that-share-a-common-inner/37558553#37558553", "title": "Is there a better way to use From and Into for structs that share a common inner field", "body": "<p>You can reduce repetition in your code by using macros:</p>\n\n<pre><code>struct Builder;\n\ntrait ObjectBuilder: Into&lt;Builder&gt; + From&lt;Builder&gt; {\n  fn from_other&lt;T: ObjectBuilder&gt;(x: T) -&gt; Self {\n     let builder = x.into();\n     builder.into()\n  }\n}\n\nmacro_rules! builder {\n    ($name:ident) =&gt; {\n        struct $name {\n           inner: Builder\n        }\n\n        impl From&lt;Builder&gt; for $name {\n            fn from(x: Builder) -&gt; $name {\n                $name {\n                    inner: x\n                }\n            }\n        }\n\n        impl Into&lt;Builder&gt; for $name {\n            fn into(self) -&gt; Builder {\n                self.inner\n            }\n        }\n\n        impl ObjectBuilder for $name {}\n    }\n}\n\nbuilder!(OtherBuilder);\nbuilder!(OtherOtherBuilder);\n\nfn main() {\n    let x = Builder;\n    let y: OtherBuilder = x.into();\n    let z: OtherOtherBuilder = ObjectBuilder::from_other(y);\n    let y = OtherBuilder::from_other(z);\n}\n</code></pre>\n"}], "owner": {"reputation": 147, "user_id": 6139957, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/K4Wxj.jpg?s=128&g=1", "display_name": "J. Dunne", "link": "https://stackoverflow.com/users/6139957/j-dunne"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 85, "favorite_count": 0, "accepted_answer_id": 37558544, "answer_count": 2, "score": 0, "last_activity_date": 1464748965, "creation_date": 1464725657, "last_edit_date": 1464726270, "question_id": 37554853, "link": "https://stackoverflow.com/questions/37554853/is-there-a-better-way-to-use-from-and-into-for-structs-that-share-a-common-inner", "title": "Is there a better way to use From and Into for structs that share a common inner field", "body": "<p>I have a number of structs which wrap a <code>Builder</code> struct. These wrappers provide specialized behavior over this <code>Builder</code>. It should be easy to convert between these wrappers as they are essentially just the <code>Builder</code> with specialized methods. I have written some code to illustrate - it seems like a lot of boilerplate for something simple. Is there a better way?</p>\n\n<pre><code>struct Builder;\n\ntrait ObjectBuilder: Into&lt;Builder&gt; + From&lt;Builder&gt; {\n  fn from_other&lt;T: ObjectBuilder&gt;(x: T) -&gt; Self {\n     let builder = x.into();\n     builder.into()\n  }\n}\n\nstruct OtherBuilder {\n   inner: Builder\n}\n\nimpl From&lt;Builder&gt; for OtherBuilder {\n    fn from(x: Builder) -&gt; OtherBuilder {\n        OtherBuilder {\n            inner: x\n        }\n    }\n}\n\nimpl Into&lt;Builder&gt; for OtherBuilder {\n    fn into(self) -&gt; Builder {\n        self.inner\n    }\n}\n\nstruct OtherOtherBuilder {\n   inner: Builder\n}\n\nimpl From&lt;Builder&gt; for OtherOtherBuilder {\n    fn from(x: Builder) -&gt; OtherOtherBuilder {\n        OtherOtherBuilder {\n            inner: x\n        }\n    }\n}\n\nimpl Into&lt;Builder&gt; for OtherOtherBuilder {\n    fn into(self) -&gt; Builder {\n        self.inner\n    }\n}\n\nimpl ObjectBuilder for OtherBuilder {}\nimpl ObjectBuilder for OtherOtherBuilder {}\n\nfn main() {\n    let x = Builder;\n    let y: OtherBuilder = x.into();\n    let z: OtherOtherBuilder = ObjectBuilder::from_other(y);\n    let y = OtherBuilder::from_other(z);\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=0f3940205e0cc4f864e224bc423d8553&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground URL</a></p>\n\n<p><a href=\"https://gist.github.com/0f3940205e0cc4f864e224bc423d8553\" rel=\"nofollow\">Gist URL</a></p>\n"}, {"tags": ["recursion", "types", "rust"], "answers": [{"tags": [], "owner": {"reputation": 977, "user_id": 3697302, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8e9af27762850ca9fc9984eb8ff21259?s=128&d=identicon&r=PG", "display_name": "dikaiosune", "link": "https://stackoverflow.com/users/3697302/dikaiosune"}, "is_accepted": false, "score": 5, "last_activity_date": 1464725432, "last_edit_date": 1464725432, "creation_date": 1464724556, "answer_id": 37554564, "question_id": 37554325, "link": "https://stackoverflow.com/questions/37554325/recursive-function-if-statement-mismatched-types-in-rust/37554564#37554564", "title": "Recursive function if statement mismatched types in Rust", "body": "<p>The issue here is that Rust evaluates the <code>if/else if/else if</code> block <em>as</em> the return value because it lacks an <code>else</code> clause, and statements which don't evaluate to any value have the type <code>()</code>. Incidentally, the code you've presented does exhaustively cover all possibilities (the item at the current index of the slice is either equal to, less than, or greater than the target), but the compiler doesn't know that unless you give it an <code>else</code> clause at the end:</p>\n\n<pre><code>fn recursive_binary_search&lt;T: Ord + Eq&gt;(list: &amp;[T], target: T) -&gt; bool {\n    if list.len() &lt; 1 {\n        return false;\n    }\n    let guess = list.len() / 2;\n    if target == list[guess] {\n        return true;\n    } else if list[guess] &gt; target {\n        return recursive_binary_search(&amp;list[0..guess], target);\n    } else {\n        return recursive_binary_search(&amp;list[guess..list.len()], target);\n    }\n}\n</code></pre>\n\n<p>PS: This function doesn't require mutable references, so I'd recommend using regular references as in my code above.</p>\n\n<p>EDIT: For posterity, here's the same code w/o explicit returns:</p>\n\n<pre><code>fn recursive_binary_search&lt;T: Ord&gt;(list: &amp;[T], target: T) -&gt; bool {\n    if list.len() &lt; 1 {\n        return false;\n    }\n    let guess = list.len() / 2;\n    if target == list[guess] {\n        true\n    } else if list[guess] &gt; target {\n        recursive_binary_search(&amp;list[0..guess], target)\n    } else {\n        recursive_binary_search(&amp;list[guess..list.len()], target)\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 1238, "user_id": 759901, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/56175c4faa3db6d594ed7a0688b0c296?s=128&d=identicon&r=PG", "display_name": "leshow", "link": "https://stackoverflow.com/users/759901/leshow"}, "edited": false, "score": 1, "creation_date": 1464725814, "post_id": 37554833, "comment_id": 62598503, "body": "isn&#39;t the Eq trait unnecessary? Ord contains PartialOrd + Eq. and yes, of course this is just for learning purposes."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 1238, "user_id": 759901, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/56175c4faa3db6d594ed7a0688b0c296?s=128&d=identicon&r=PG", "display_name": "leshow", "link": "https://stackoverflow.com/users/759901/leshow"}, "edited": false, "score": 0, "creation_date": 1464726200, "post_id": 37554833, "comment_id": 62598712, "body": "@leshow yep; I copied that without thinking about it; removed in the last version that also fixes the infinite recursion bug."}, {"owner": {"reputation": 1238, "user_id": 759901, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/56175c4faa3db6d594ed7a0688b0c296?s=128&d=identicon&r=PG", "display_name": "leshow", "link": "https://stackoverflow.com/users/759901/leshow"}, "edited": false, "score": 0, "creation_date": 1464726603, "post_id": 37554833, "comment_id": 62598932, "body": "thanks for the tip with match, that&#39;s a nice rust-y way of writing it."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 5, "last_activity_date": 1464727418, "last_edit_date": 1495541757, "creation_date": 1464725571, "answer_id": 37554833, "question_id": 37554325, "link": "https://stackoverflow.com/questions/37554325/recursive-function-if-statement-mismatched-types-in-rust/37554833#37554833", "title": "Recursive function if statement mismatched types in Rust", "body": "<p><a href=\"https://stackoverflow.com/a/37554564/155423\">dikaiosune's answer</a> explains the problem: the resulting type of your <code>if</code> is <code>()</code>, which is being returned instead of a <code>bool</code>.</p>\n\n<p>Here's a few ways of writing the code a bit more idiomatically:</p>\n\n<p>I'd start by writing it with implicit returns:</p>\n\n<pre><code>fn recursive_binary_search&lt;T: Ord + Eq&gt;(list: &amp;[T], target: T) -&gt; bool {\n    if list.len() &lt; 1 {\n        return false;\n    }\n\n    let guess = list.len() / 2;\n\n    if target == list[guess] {\n        true\n    } else if list[guess] &gt; target {\n        recursive_binary_search(&amp;list[0..guess], target)\n    } else {\n        recursive_binary_search(&amp;list[guess..list.len()], target)\n    }\n}\n</code></pre>\n\n<p>Then I'd perform the compare just once, instead of potentially twice. Could save a bit of time if comparisons are expensive, but it also looks nice with the <code>match</code>:</p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn recursive_binary_search&lt;T: Ord + Eq&gt;(list: &amp;[T], target: T) -&gt; bool {\n    if list.is_empty() {\n        return false;\n    }\n\n    let guess = list.len() / 2;\n\n    match target.cmp(&amp;list[guess]) {\n        Ordering::Less    =&gt; recursive_binary_search(&amp;list[..guess], target),\n        Ordering::Greater =&gt; recursive_binary_search(&amp;list[guess..], target),\n        Ordering::Equal   =&gt; true,\n    }\n}\n</code></pre>\n\n<p>You can also drop the beginning and end parts of the ranges, and use <code>is_empty</code> for the guard clause.</p>\n\n<p>Then there's the problem of the stack overflow if you search for a value larger than the biggest value... you need to ignore the pivot when recurring:</p>\n\n<pre><code>use std::cmp::Ordering;\n\nfn recursive_binary_search&lt;T: Ord&gt;(list: &amp;[T], target: T) -&gt; bool {\n    if list.is_empty() {\n        return false;\n    }\n\n    let guess = list.len() / 2;\n\n    match target.cmp(&amp;list[guess]) {\n        Ordering::Less    =&gt; recursive_binary_search(&amp;list[..guess], target),\n        Ordering::Greater =&gt; recursive_binary_search(&amp;list[guess+1..], target),\n        Ordering::Equal   =&gt; true,\n    }\n}\n\nfn main() {\n    assert!(!recursive_binary_search(&amp;[1,2,3,4,5], 0));\n    assert!(recursive_binary_search(&amp;[1,2,3,4,5], 1));\n    assert!(recursive_binary_search(&amp;[1,2,3,4,5], 2));\n    assert!(recursive_binary_search(&amp;[1,2,3,4,5], 3));\n    assert!(recursive_binary_search(&amp;[1,2,3,4,5], 4));\n    assert!(recursive_binary_search(&amp;[1,2,3,4,5], 5));\n    assert!(!recursive_binary_search(&amp;[1,2,3,4,5], 6));\n}\n</code></pre>\n\n<p>If you <strong>aren't</strong> implementing this for learning purposes, use the built-in <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.binary_search\" rel=\"nofollow noreferrer\"><code>binary_search</code></a>.</p>\n"}], "owner": {"reputation": 1238, "user_id": 759901, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/56175c4faa3db6d594ed7a0688b0c296?s=128&d=identicon&r=PG", "display_name": "leshow", "link": "https://stackoverflow.com/users/759901/leshow"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 308, "favorite_count": 0, "accepted_answer_id": 37554833, "answer_count": 2, "score": 2, "last_activity_date": 1464727418, "creation_date": 1464723668, "question_id": 37554325, "link": "https://stackoverflow.com/questions/37554325/recursive-function-if-statement-mismatched-types-in-rust", "title": "Recursive function if statement mismatched types in Rust", "body": "<pre><code>fn recursive_binary_search&lt;T: Ord&gt;(list: &amp;mut [T], target: T) -&gt; bool {\n    if list.len() &lt; 1 {\n        return false;\n    }\n    let guess = list.len() / 2;\n    if target == list[guess] {\n        return true;\n    } else if list[guess] &gt; target {\n        return recursive_binary_search(&amp;mut list[0..guess], target);\n    } else if list[guess] &lt; target {\n        return recursive_binary_search(&amp;mut list[guess..list.len()], target);\n    }\n}\n</code></pre>\n\n<p>the compiler throws an error on <code>if target == list[guess]</code> saying</p>\n\n<pre><code>src/main.rs:33:5: 39:6 error: mismatched types [E0308]\nsrc/main.rs:33     if target == list[guess] {\n                   ^\nsrc/main.rs:33:5: 39:6 help: run `rustc --explain E0308` to see a detailed explanation\nsrc/main.rs:33:5: 39:6 note: expected type `bool`\nsrc/main.rs:33:5: 39:6 note:    found type `()`\nerror: aborting due to previous error\n</code></pre>\n\n<p>I can't figure out how to rewrite this function to satisfy the type checker. I assume it is because I have the return type set to bool and there is a return function call?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 1, "creation_date": 1464710327, "post_id": 37550208, "comment_id": 62589415, "body": "Did you see <a href=\"https://crates.io/crates/linked-hash-map\" rel=\"nofollow noreferrer\">linked-hash-map</a> crate? Maybe you can create a wrap with <code>V = ()</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464710339, "post_id": 37550208, "comment_id": 62589432, "body": "Essentially a duplicate of <a href=\"http://stackoverflow.com/q/30243100/155423\">stackoverflow.com/q/30243100/155423</a> as sets are just maps without a value."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1464769623, "post_id": 37550208, "comment_id": 62614112, "body": "If the only change you need is adding elements and the elements are copyable, you could simply use both a set and a vector, using the set for the duplicate checks and the vector to store the elements in-order."}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1464821967, "post_id": 37550208, "comment_id": 62647137, "body": "@CodesInChaos can you show what the code would look like"}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1464822870, "post_id": 37550208, "comment_id": 62647385, "body": "Which operation will be more used? Insert or remove?"}, {"owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "reply_to_user": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "edited": false, "score": 0, "creation_date": 1464823019, "post_id": 37550208, "comment_id": 62647428, "body": "About equal @malbarbo"}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 0, "creation_date": 1464850391, "post_id": 37550208, "comment_id": 62655163, "body": "@Tshepang The Rust equivalent of <a href=\"https://gist.github.com/anonymous/cf8c67145f7d508aae123d41de59fa12\" rel=\"nofollow noreferrer\">this C# code</a>. For Copy types this should have a direct equivalent in Rust. But since you clarified that you don&#39;t just need to add elements but also remove them, this approach won&#39;t work for you."}], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1464824824, "creation_date": 1464824824, "answer_id": 37580547, "question_id": 37550208, "link": "https://stackoverflow.com/questions/37550208/is-there-a-set-type-that-preserves-insertion-order/37580547#37580547", "title": "Is there a set type that preserves insertion order?", "body": "<p>The <a href=\"https://crates.io/crates/linked-hash-map\" rel=\"nofollow\"><code>linked-hash-map</code></a> crate provides a hash map that holds key-value insertion order. We can create a set wrapper for this hash map using <code>()</code> as values (<a href=\"https://doc.rust-lang.org/stable/src/std/up/src/libstd/collections/hash/set.rs.html#105-107\" rel=\"nofollow\"><code>std::collections::HashSet</code></a> is implemented this way):</p>\n\n<pre><code>extern crate linked_hash_map;\n\nuse linked_hash_map::*;\nuse std::collections::hash_map::RandomState;\nuse std::hash::{BuildHasher, Hash};\nuse std::borrow::Borrow;\n\nfn main() {\n    let mut s = LinkedHashSet::new();\n    s.insert(5);\n    s.insert(3);\n    s.insert(7);\n    s.insert(1);\n    assert_eq!(vec![5, 3, 7, 1], s.iter().cloned().collect::&lt;Vec&lt;_&gt;&gt;());\n    s.remove(&amp;7);\n    assert_eq!(vec![5, 3, 1], s.iter().cloned().collect::&lt;Vec&lt;_&gt;&gt;());\n    s.remove(&amp;5);\n    assert_eq!(vec![3, 1], s.iter().cloned().collect::&lt;Vec&lt;_&gt;&gt;());\n}\n\npub struct LinkedHashSet&lt;K, S = RandomState&gt;(LinkedHashMap&lt;K, (), S&gt;);\n\nimpl&lt;K: Hash + Eq&gt; LinkedHashSet&lt;K&gt; {\n    pub fn new() -&gt; Self {\n        LinkedHashSet(LinkedHashMap::new())\n    }\n}\n\nimpl&lt;K: Hash + Eq, S: BuildHasher&gt; LinkedHashSet&lt;K, S&gt; {\n    pub fn insert(&amp;mut self, k: K) -&gt; Option&lt;()&gt; {\n        self.0.insert(k, ())\n    }\n\n    pub fn contains&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; bool\n        where K: Borrow&lt;Q&gt;,\n              Q: Eq + Hash\n    {\n        self.0.contains_key(k)\n    }\n\n    pub fn remove&lt;Q: ?Sized&gt;(&amp;mut self, k: &amp;Q) -&gt; Option&lt;()&gt;\n        where K: Borrow&lt;Q&gt;,\n              Q: Eq + Hash\n    {\n        self.0.remove(k)\n    }\n\n    pub fn iter(&amp;self) -&gt; Keys&lt;K, ()&gt; {\n        self.0.keys()\n    }\n}\n</code></pre>\n\n<p>You can implement other methods. See <code>LinkedHashMap</code> <a href=\"http://contain-rs.github.io/linked-hash-map/linked_hash_map/\" rel=\"nofollow\">docs</a>.</p>\n"}, {"tags": [], "owner": {"reputation": 256, "user_id": 6201033, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1ca1bb4506704f2976a15f0bac7e76a0?s=128&d=identicon&r=PG", "display_name": "Alex Butler", "link": "https://stackoverflow.com/users/6201033/alex-butler"}, "is_accepted": true, "score": 8, "last_activity_date": 1508941127, "creation_date": 1508941127, "answer_id": 46934869, "question_id": 37550208, "link": "https://stackoverflow.com/questions/37550208/is-there-a-set-type-that-preserves-insertion-order/46934869#46934869", "title": "Is there a set type that preserves insertion order?", "body": "<p><a href=\"https://crates.io/crates/linked_hash_set\" rel=\"noreferrer\"><code>linked_hash_set</code></a> crate is now available. It's based on the \n<code>linked-hash-map</code> crate mirroring the std <code>HashSet</code> API as closely as possible.</p>\n\n<pre><code>extern crate linked_hash_set;\nuse linked_hash_set::LinkedHashSet;\n\nlet mut set = LinkedHashSet::new();\nset.insert(234);\nset.insert(123);\nset.insert(345);\nset.insert(123);\n\nassert_eq!(set.into_iter().collect::&lt;Vec&lt;_&gt;&gt;(), vec![234, 345, 123]);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 106, "user_id": 13007298, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/gXLfX.png?s=128&g=1", "display_name": "PsiACE", "link": "https://stackoverflow.com/users/13007298/psiace"}, "is_accepted": false, "score": 0, "last_activity_date": 1615112340, "creation_date": 1615112340, "answer_id": 66515398, "question_id": 37550208, "link": "https://stackoverflow.com/questions/37550208/is-there-a-set-type-that-preserves-insertion-order/66515398#66515398", "title": "Is there a set type that preserves insertion order?", "body": "<p>RiteLinked provides more up to date versions of LinkedHashMap &amp; LinkedHashSet in Rust. You can easily use it on std or no_std environment. You can use it instead of linked-hash-map and linked_hash_set.</p>\n<ul>\n<li><a href=\"https://github.com/ritedb/ritelinked\" rel=\"nofollow noreferrer\">https://github.com/ritedb/ritelinked</a></li>\n<li><a href=\"https://crates.io/crates/ritelinked\" rel=\"nofollow noreferrer\">https://crates.io/crates/ritelinked</a></li>\n</ul>\n"}], "owner": {"reputation": 10672, "user_id": 321731, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/88e60659e997d36af3ff348b3251e1a6?s=128&d=identicon&r=PG", "display_name": "tshepang", "link": "https://stackoverflow.com/users/321731/tshepang"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2899, "favorite_count": 0, "accepted_answer_id": 46934869, "answer_count": 3, "score": 5, "last_activity_date": 1615112340, "creation_date": 1464709557, "last_edit_date": 1525791600, "question_id": 37550208, "link": "https://stackoverflow.com/questions/37550208/is-there-a-set-type-that-preserves-insertion-order", "title": "Is there a set type that preserves insertion order?", "body": "<p>Is there a type that preserves insertion order (think <code>Vec</code>) but only tracks unique values (think <code>HashSet</code>)? I want to avoid using <code>Vec</code> because I would first need to check if the value exists in it before insertion.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464707365, "post_id": 37549162, "comment_id": 62587329, "body": "Why do you need to figure this out? I&#39;ve never needed this to build from source. On OS X it&#39;s just the normal <code>.&#47;configure &amp;&amp; make</code>."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464707578, "post_id": 37549406, "comment_id": 62587485, "body": "<i>you can simply use the last beta</i> \u2014 is there something active that a programmer needs to do here? The build infrastructure has always performed the download for me..."}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464708453, "post_id": 37549406, "comment_id": 62588132, "body": "no, that still works out of the box. I&#39;m assuming @dvc wants to do that downloading manually?"}, {"owner": {"reputation": 114, "user_id": 3445898, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c53e69b69acc1c9ca8e083923b78ac65?s=128&d=identicon&r=PG&f=1", "display_name": "dvc", "link": "https://stackoverflow.com/users/3445898/dvc"}, "edited": false, "score": 0, "creation_date": 1464710721, "post_id": 37549406, "comment_id": 62589735, "body": "I&#39;m trying to update - somewhat usuccessfully sofar - the package for nixos, a src based linux distribution"}, {"owner": {"reputation": 114, "user_id": 3445898, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c53e69b69acc1c9ca8e083923b78ac65?s=128&d=identicon&r=PG&f=1", "display_name": "dvc", "link": "https://stackoverflow.com/users/3445898/dvc"}, "edited": false, "score": 0, "creation_date": 1464711568, "post_id": 37549406, "comment_id": 62590283, "body": "If the beta version doesn&#39;t matter and rustc_key is the same for all beta versions, why am I getting <code>#[feature] may not be used on the beta release channel</code> when trying to compile master? or should this be a new question? =P"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464711741, "post_id": 37549406, "comment_id": 62590393, "body": "the key belongs to the last stable + the beta that turned into that stable. The new beta can&#39;t be used until there&#39;s a stable. So to compile 1.10, you need stable 1.9 or beta 1.9, not beta 1.10"}, {"owner": {"reputation": 114, "user_id": 3445898, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c53e69b69acc1c9ca8e083923b78ac65?s=128&d=identicon&r=PG&f=1", "display_name": "dvc", "link": "https://stackoverflow.com/users/3445898/dvc"}, "edited": false, "score": 0, "creation_date": 1464712461, "post_id": 37549406, "comment_id": 62590800, "body": "I&#39;m still confused. I&#39;m getting <code>configure: using rustc at: &#47;nix&#47;store&#47;f8rsfvsfxncmh5453cspby891yy3r71y-rustc-1.9.0 with version: rustc 1.9.0</code> and <code>#[feature] may not be used on the stable release channel</code>"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464720807, "post_id": 37549406, "comment_id": 62595686, "body": "how are you passing the bootstrap key? There are the <code>RUSTC_BOOTSTRAP_KEY</code> and &#180;CFG_BOOTSTRAP_KEY&#180; env vars. I&#39;m not sure which one (or if both) need to be set."}, {"owner": {"reputation": 114, "user_id": 3445898, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c53e69b69acc1c9ca8e083923b78ac65?s=128&d=identicon&r=PG&f=1", "display_name": "dvc", "link": "https://stackoverflow.com/users/3445898/dvc"}, "edited": false, "score": 0, "creation_date": 1464738932, "post_id": 37549406, "comment_id": 62603346, "body": "I finally managed to build master :). The env variables didn&#39;t take effect. I think they are overwritten automatically. I solved it by patching stage0.txt to look like the one in the beta branch. Do you think it&#39;s ok to submit a PR or shall I leave it up to the pro&#39;s to update stage0.txt when they&#39;re ready?"}, {"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464769662, "post_id": 37549406, "comment_id": 62614139, "body": "yea, leave it to them. their own setup might differ from yours."}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": true, "score": 1, "last_activity_date": 1464707427, "last_edit_date": 1464707427, "creation_date": 1464707357, "answer_id": 37549406, "question_id": 37549162, "link": "https://stackoverflow.com/questions/37549162/how-to-find-the-commit-of-rustc-used-to-bootstrap-rustc-master/37549406#37549406", "title": "How to find the commit of rustc used to bootstrap rustc master", "body": "<p>You actually do not need to figure out which rustc commit it is. Since <a href=\"https://github.com/rust-lang/rust/pull/32942\" rel=\"nofollow\">Rust is bootstrapped from the previous version</a>, you can simply use the last beta (or stable in the future, probably after the next release).</p>\n\n<p>Quoting Alex Crichton in the PR that changed this:</p>\n\n<blockquote>\n  <p>This commit removes all infrastructure from the repository for our so-called\n  snapshots to instead bootstrap the compiler from stable releases. </p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>And if I build rustc beta will the rustc_key be a different one?</p>\n</blockquote>\n\n<p>No, you can build anything up to and including (meaning the beta) the next rustc version with that key.</p>\n"}], "owner": {"reputation": 114, "user_id": 3445898, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c53e69b69acc1c9ca8e083923b78ac65?s=128&d=identicon&r=PG&f=1", "display_name": "dvc", "link": "https://stackoverflow.com/users/3445898/dvc"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 82, "favorite_count": 0, "accepted_answer_id": 37549406, "answer_count": 1, "score": 2, "last_activity_date": 1464707427, "creation_date": 1464706691, "last_edit_date": 1464707331, "question_id": 37549162, "link": "https://stackoverflow.com/questions/37549162/how-to-find-the-commit-of-rustc-used-to-bootstrap-rustc-master", "title": "How to find the commit of rustc used to bootstrap rustc master", "body": "<p>I'm trying to build Rust from source. From the stage0.txt I can see that the rustc used is <code>beta-2016-04-13</code> and the <code>rustc_key</code> is <code>c2743eb4</code>.</p>\n\n<p>How do I find out which commit beta-2016-04-13 represents?</p>\n\n<p>And if I build rustc beta will the rustc_key be a different one?</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 2, "creation_date": 1464701984, "post_id": 37547225, "comment_id": 62583308, "body": "Can you please try to produce a <a href=\"http://stackoverflow.com/help/mcve\">MCVE</a> which reproduces your issue? You can use the <a href=\"https://play.rust-lang.org/\" rel=\"nofollow noreferrer\">Playground</a> to share it afterward."}, {"owner": {"reputation": 839, "user_id": 5161151, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/ojog1.jpg?s=128&g=1", "display_name": "Folatt", "link": "https://stackoverflow.com/users/5161151/folatt"}, "edited": false, "score": 0, "creation_date": 1591638044, "post_id": 37547225, "comment_id": 110126131, "body": "Could you add &#39;string vector split&#39; to your tags? I wasn&#39;t able to find your question, until I asked myself and got flagged for it."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1464703603, "post_id": 37547426, "comment_id": 62584594, "body": "It&#39;s even nicer when in a function, as the function return type means you don&#39;t need the <code>let res: Vec&lt;String&gt; = </code> aspect."}, {"owner": {"reputation": 4438, "user_id": 5427663, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/a9f9c9fe9199349793db217d3a9e9596?s=128&d=identicon&r=PG&f=1", "display_name": "TheOperator", "link": "https://stackoverflow.com/users/5427663/theoperator"}, "edited": false, "score": 3, "creation_date": 1575823114, "post_id": 37547426, "comment_id": 104686498, "body": "You can even shorten this by replacing <code>.map(|s| s.to_string())</code> with <code>map(str::to_string)</code>."}, {"owner": {"reputation": 839, "user_id": 5161151, "user_type": "registered", "accept_rate": 77, "profile_image": "https://i.stack.imgur.com/ojog1.jpg?s=128&g=1", "display_name": "Folatt", "link": "https://stackoverflow.com/users/5161151/folatt"}, "edited": false, "score": 1, "creation_date": 1591638343, "post_id": 37547426, "comment_id": 110126273, "body": "I&#39;ve seen <code>map(ToString::to_string)</code> as a solution as well. I don&#39;t know if that&#39;s better than <code>map(str::to_string)</code>"}], "tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 30, "last_activity_date": 1464702018, "creation_date": 1464702018, "answer_id": 37547426, "question_id": 37547225, "link": "https://stackoverflow.com/questions/37547225/split-a-string-and-return-vecstring/37547426#37547426", "title": "Split a string and return Vec&lt;String&gt;", "body": "<p>You don't need to create an intermediate <code>Vec&lt;&amp;str&gt;</code>, just map <code>to_string()</code> and use <code>collect()</code> after that:</p>\n\n<pre><code>let res: Vec&lt;String&gt; = my_string.split(\"something\").map(|s| s.to_string()).collect();\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 2, "creation_date": 1464703639, "post_id": 37547691, "comment_id": 62584629, "body": "I would like to note that using <code>collect()</code> to create a collection out of an iterator is more idiomatic than using <code>from_iter()</code> directly, but of course this is not a hard rule. Also it looks like that with the introduction of specialization <code>to_string()</code> is also the idiomatic way to convert <code>&amp;str</code> to <code>String</code>, though I personally like <code>String::from</code> or <code>.into()</code> more."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "edited": false, "score": 0, "creation_date": 1464704136, "post_id": 37547691, "comment_id": 62585063, "body": "@VladimirMatveev Thanks for the comments. You are right, <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.FromIterator.html\" rel=\"nofollow noreferrer\"><code>FromIterator</code></a> docs says that <code>from_iter</code> is rarely called explicitly, and points to <code>collect</code>. But in some cases, like in a variable definition, the <code>from_iter</code> is more readable. When the type of <code>collect</code> can be inferred, like in a function return, <code>collect</code> is more readable."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1464702762, "last_edit_date": 1495539968, "creation_date": 1464702762, "answer_id": 37547691, "question_id": 37547225, "link": "https://stackoverflow.com/questions/37547225/split-a-string-and-return-vecstring/37547691#37547691", "title": "Split a string and return Vec&lt;String&gt;", "body": "<p>You can map each <code>&amp;str</code> to <code>String</code> an collect the result using <code>Vec::from_iter</code>:</p>\n\n<pre><code>use std::iter::FromIterator;\n\nlet res = Vec::from_iter(my_string.split(\"something\").map(String::from));\n</code></pre>\n\n<p>This question is the opposite of <a href=\"https://stackoverflow.com/q/33216514/5189607\">this one</a>.</p>\n\n<p>Note that <code>collect</code> is implemented in terms of <code>from_iter</code>.</p>\n"}], "owner": {"user_type": "does_not_exist", "display_name": "user6324692"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 8423, "favorite_count": 6, "accepted_answer_id": 37547426, "answer_count": 2, "score": 17, "last_activity_date": 1464703413, "creation_date": 1464701494, "last_edit_date": 1464703413, "question_id": 37547225, "link": "https://stackoverflow.com/questions/37547225/split-a-string-and-return-vecstring", "title": "Split a string and return Vec&lt;String&gt;", "body": "<p>I want to split a string and return <code>Vec&lt;String&gt;</code> from my function. It has to be <code>Vec&lt;String&gt;</code> and not <code>Vec&lt;&amp;str&gt;</code> because I can't return <code>Vec&lt;&amp;str&gt;</code>, can I? If I can, though, how can I do that?</p>\n\n<pre><code>let var1: Vec&lt;&amp;str&gt; = my_string.split(\"something\").collect();\nlet res = var1.iter().map(|x| x.to_string());\n// I want to return Vec&lt;String&gt;\n</code></pre>\n\n<p>I've tried different versions but gotten <code>error: mismatched types</code> and other kinds of similar errors. Is there an easier way?</p>\n"}, {"tags": ["rust", "type-inference"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1464691994, "post_id": 37542971, "comment_id": 62576186, "body": "It is based on <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\" rel=\"nofollow noreferrer\">Hindler-Milner</a>. The implementation is explained in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/README.md\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/blob/master/src/librustc/infer/&hellip;</a> but it is pretty outdated (still using pre-1.0 syntax)."}, {"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1464692174, "post_id": 37542971, "comment_id": 62576332, "body": "@kennytm: HM doesn&#39;t have a notion of &quot;statement&quot;, does it? How does that explain something like <code>vec!</code>?"}, {"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1464692362, "post_id": 37542971, "comment_id": 62576466, "body": "HM does have <code>let x = e\u2081 in e\u2082</code>."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464693813, "post_id": 37542971, "comment_id": 62577368, "body": "@KerrekSB: I always thought of it as basically a constraint-solver (with some <code>Deref</code> bonuses thrown in); I am afraid that attempting to pin-point it more is likely to become outdated in the future."}, {"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464694436, "post_id": 37542971, "comment_id": 62577773, "body": "@MatthieuM.: Yeah, I can see that it works in practice as long in a way that it tries to figure out the only type assignments that make sense, but I couldn&#39;t find a systematic treatment anywhere. Code like <code>Box::new(5)</code> is everywhere, but it&#39;s never stated anywhere why that works."}], "answers": [{"tags": [], "owner": {"reputation": 20407, "user_id": 1017941, "user_type": "registered", "accept_rate": 97, "profile_image": "https://i.stack.imgur.com/yocPw.jpg?s=128&g=1", "display_name": "Hauleth", "link": "https://stackoverflow.com/users/1017941/hauleth"}, "is_accepted": false, "score": 10, "last_activity_date": 1531567710, "last_edit_date": 1531567710, "creation_date": 1464796256, "answer_id": 37573432, "question_id": 37542971, "link": "https://stackoverflow.com/questions/37542971/how-does-rusts-type-inference-work-across-multiple-statements/37573432#37573432", "title": "How does Rust&#39;s type inference work across multiple statements?", "body": "<p>Rust uses <a href=\"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system\" rel=\"noreferrer\">Hindley-Milner</a> type system. It is a set of rules about establishing types of expressions based on their usage.</p>\n\n<p>Formal description and explanation for it can be found there:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/12532552/what-part-of-milner-hindley-do-you-not-understand\">&quot;What part of Hindley-Milner do you not understand?&quot;</a></p>\n"}], "owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1963, "favorite_count": 3, "answer_count": 1, "score": 18, "last_activity_date": 1531567710, "creation_date": 1464689926, "question_id": 37542971, "link": "https://stackoverflow.com/questions/37542971/how-does-rusts-type-inference-work-across-multiple-statements", "title": "How does Rust&#39;s type inference work across multiple statements?", "body": "<p>Rust performs type inference in fairly advanced situations. Could someone please explain (or point to) the rules that describe what can and cannot be inferred?</p>\n\n<p>The first one is simple: The type of a binding is the type of the bound expression:</p>\n\n<pre><code>let n = 10u32;\n\n// Same as:\n//   vvvvv\nlet n: u32 = 10u32;\n</code></pre>\n\n<p>This next one is more surprising to me: The generic parameter on the right is deduced from the binding type on the left:</p>\n\n<pre><code>let n: u32 = \"10\".parse().unwrap();\n\n// same as:            vvvvvvv\nlet n: u32 = \"10\".parse::&lt;u32&gt;().unwrap();\n</code></pre>\n\n<p>This also works for \"member functions\" of generic types:</p>\n\n<pre><code>let b = Box::new(10u32);\n\n// same as:\n//        vvvvv      vvvvvvv\nlet b: Box&lt;u32&gt; = Box::&lt;u32&gt;::new(10u32);\n</code></pre>\n\n<p>But the strangest of all is type inference across statements:</p>\n\n<pre><code>let v = Vec::new();   // no type!\nv.push(10u32);        // apparently v is Vec&lt;u32&gt;?!\n// v.push(10i32);     // type error\n</code></pre>\n\n<p>What are the rules for type inference and type deduction?</p>\n"}, {"tags": ["c++", "rust"], "answers": [{"tags": [], "owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "is_accepted": true, "score": 4, "last_activity_date": 1464654256, "last_edit_date": 1464654256, "creation_date": 1464639078, "answer_id": 37533060, "question_id": 37532963, "link": "https://stackoverflow.com/questions/37532963/function-that-captures-a-copy-of-the-loop-counter-in-rust/37533060#37533060", "title": "Function that captures a copy of the loop counter in Rust", "body": "<p>How about just:</p>\n\n<pre><code>v.push(Box::new(move || i));\n</code></pre>\n\n<p>A complete demo:</p>\n\n<pre><code>fn main() {\n    let mut v: Vec&lt;Box&lt;Fn() -&gt; i32&gt;&gt; = vec![];\n    for i in 1..6 {\n        v.push(Box::new(move || i));\n    }\n\n    for f in v {\n        println!(\"{}\", f());\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 1552, "user_id": 2757612, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/7730a80467959e6d02d531c891727ff2?s=128&d=identicon&r=PG&f=1", "display_name": "zabolekar", "link": "https://stackoverflow.com/users/2757612/zabolekar"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 115, "favorite_count": 0, "accepted_answer_id": 37533060, "answer_count": 1, "score": 3, "last_activity_date": 1464654256, "creation_date": 1464638624, "question_id": 37532963, "link": "https://stackoverflow.com/questions/37532963/function-that-captures-a-copy-of-the-loop-counter-in-rust", "title": "Function that captures a copy of the loop counter in Rust", "body": "<p>I have some C++ code that looks like this (simplified to the point of being useless, but I hope you get the idea). It fills a vector of functions in a loop and makes every function capture the loop counter by copy:</p>\n\n<pre><code>std::vector&lt;std::function&lt;int()&gt;&gt; v;\nfor(int i = 1; i &lt; N; i++) {\n   v.push_back([i]() {return i;});\n}\n\nfor(auto f: v) {\n   std::cout &lt;&lt; f() &lt;&lt; \"\\n\";\n}\n</code></pre>\n\n<p>I'm looking for the Rust equivalent of this. Currently, I have the following idea:</p>\n\n<pre><code>let mut v: Vec&lt;Box&lt;Fn() -&gt; i32&gt;&gt; = vec![];\nfor i in 1..6 {\n   v.push((|i| {Box::new(move || i)})(i));\n}\n\nfor f in v {\n   println!(\"{}\", f());\n}\n</code></pre>\n\n<p>It works correctly, but I'm not sure whether it is the preferred way. Is calling a helper function really needed to achieve this or is there a more idiomatic way?</p>\n"}, {"tags": ["rust", "libc"], "answers": [{"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 7, "last_activity_date": 1464654179, "last_edit_date": 1464654179, "creation_date": 1464639213, "answer_id": 37533082, "question_id": 37532575, "link": "https://stackoverflow.com/questions/37532575/file-argument-in-libcstat-in-rust/37533082#37533082", "title": "File-argument in libc::stat in Rust", "body": "<p>The first argument to <a href=\"http://linux.die.net/man/2/stat\" rel=\"nofollow\"><code>stat</code></a> is the file path as a C string. C strings are represented in Rust by <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html\" rel=\"nofollow\"><code>CStr</code></a> (borrowed) or <a href=\"https://doc.rust-lang.org/stable/std/ffi/struct.CString.html\" rel=\"nofollow\"><code>CString</code></a> (owned). Here is an example using <code>CString</code>:</p>\n\n<pre><code>extern crate libc;\n\nuse std::ffi::CString;\n\nfn main() {\n    unsafe {\n        let root = CString::new(\"/\").unwrap();\n        let mut stat: libc::stat = std::mem::zeroed();\n        if libc::stat(root.as_ptr(), &amp;mut stat) &gt;= 0 {\n            println!(\"{}\", stat.st_blksize);\n        }\n    }\n}\n</code></pre>\n\n<p>Take a look at the <a href=\"https://doc.rust-lang.org/book/ffi.html\" rel=\"nofollow\">FFI chapter</a> of the Rust Book for other information.</p>\n"}], "owner": {"reputation": 9105, "user_id": 119861, "user_type": "registered", "accept_rate": 73, "profile_image": "https://i.stack.imgur.com/O2tUa.png?s=128&g=1", "display_name": "hansaplast", "link": "https://stackoverflow.com/users/119861/hansaplast"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 491, "favorite_count": 0, "accepted_answer_id": 37533082, "answer_count": 1, "score": 4, "last_activity_date": 1464654179, "creation_date": 1464636773, "last_edit_date": 1464654150, "question_id": 37532575, "link": "https://stackoverflow.com/questions/37532575/file-argument-in-libcstat-in-rust", "title": "File-argument in libc::stat in Rust", "body": "<p>I'm struggling to call <code>libc::stat</code> in Rust. I have this:</p>\n\n<pre><code>extern crate libc;\nuse std::fs::File;\nuse std::os::unix::prelude::*;\nuse std::path::Path;\n\nfn main() {\n    let p = Path::new(\"/\");\n    let f = File::open(&amp;p).unwrap();\n    let fd = f.as_raw_fd() as i8;\n\n    unsafe {\n        let mut stat: libc::stat = std::mem::zeroed();\n        if libc::stat(fd, &amp;mut stat) &gt;= 0 {\n            println!(\"{}\", stat.st_blksize);\n        }\n    }\n}\n</code></pre>\n\n<p>but now I receive this error: <code>error: mismatched types: expected *const i8, found i8</code></p>\n\n<p>I couldn't find any documentation on how the first argument works. Judging from the type (<code>i8</code>) I thought it must be file descriptor.</p>\n\n<p>Background: I'm reading through \"Advanced Programming in the UNIX Environment\" and want to do some exercises in Rust instead of C.</p>\n"}, {"tags": ["rust", "newline", "println"], "answers": [{"comments": [{"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 21, "creation_date": 1464641500, "post_id": 37531989, "comment_id": 62557306, "body": "&quot;<i>Note that stdout is frequently line-buffered by default so it may be necessary to use <code>io::stdout().flush()</code> to ensure the output is emitted immediately.</i>&quot; - <a href=\"https://doc.rust-lang.org/std/macro.print!.html\" rel=\"nofollow noreferrer\">doc.rust-lang.org/std/macro.print!.html</a>"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1464681420, "post_id": 37531989, "comment_id": 62569351, "body": "@ArtemGr: In C++ (and C I think), when you attempt to read from <code>stdin</code>, the <code>stdout</code> buffer is immediately flushed. I would have expected (maybe wrongly) the same behavior from Rust, and the example presented on the <code>print!</code> page does not read from <code>stdin</code> so it&#39;s inconclusive in this regard... do you have more information?"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464688149, "post_id": 37531989, "comment_id": 62573655, "body": "@MatthieuM. I did a simple test on Windows and Linux with Rust nightly and there is <b>no stdout flush</b> happening in the answer&#39;s code, e.g. &quot;Enter the number : &quot; is printed only <b>after the program ends</b> and not before the <code>read_line</code> happens."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1464693661, "post_id": 37531989, "comment_id": 62577272, "body": "@ArtemGr: Ouch... that&#39;s quite confusing! It may be argued it&#39;s better in a way (explicit is better than implicit) but it makes it really necessary to flush then!"}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 1, "creation_date": 1464693871, "post_id": 37531989, "comment_id": 62577417, "body": "@MatthieuM. Yeah, I like it that the standard input and output are not affecting each other in Rust. Flushing the output on input sounds like a nasty side effect to me."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "reply_to_user": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 0, "creation_date": 1464694252, "post_id": 37531989, "comment_id": 62577643, "body": "@ArtemGr: It can pretty confusing and having to use <code>std::cin::tie(0)</code> to deactivate it is not easily discoverable; on the other hand I guess it makes sense for small interactive binaries, similarly to the case here, when waiting for an answer you better make sure the question was displayed :) I think it&#39;s one of those &quot;prototypes made easy&quot; decision that comes and bites you at scale."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464695181, "post_id": 37531989, "comment_id": 62578274, "body": "@MatthieuM. Perhaps adding a flush to <code>print!</code> is a good idea (<a href=\"https://github.com/rust-lang/rust/issues/23818\" rel=\"nofollow noreferrer\">github.com/rust-lang/rust/issues/23818</a>). It would also be neat to have a flushing escape (&quot;foo\\fbar\\f&quot;), but that&#39;s just me dreaming."}], "tags": [], "owner": {"reputation": 14140, "user_id": 1188035, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/da4b6c80f86359463b47f42cfe307356?s=128&d=identicon&r=PG", "display_name": "sjagr", "link": "https://stackoverflow.com/users/1188035/sjagr"}, "is_accepted": true, "score": 42, "last_activity_date": 1516387586, "last_edit_date": 1516387586, "creation_date": 1464633934, "answer_id": 37531989, "question_id": 37531903, "link": "https://stackoverflow.com/questions/37531903/how-do-i-print-output-without-a-trailing-newline-in-rust/37531989#37531989", "title": "How do I print output without a trailing newline in Rust?", "body": "<p>You can use the <a href=\"https://doc.rust-lang.org/std/macro.print.html\" rel=\"noreferrer\"><code>print!</code> macro</a> instead.</p>\n\n<pre><code>print!(\"Enter the number : \");\nio::stdin().read_line(&amp;mut num);\n</code></pre>\n\n<p>Beware:</p>\n\n<blockquote>\n  <p>Note that stdout is frequently line-buffered by default so it may be necessary to use <a href=\"https://doc.rust-lang.org/std/io/trait.Write.html#tymethod.flush\" rel=\"noreferrer\"><code>io::stdout().flush()</code></a> to ensure the output is emitted immediately.</p>\n</blockquote>\n"}, {"comments": [{"owner": {"reputation": 1199, "user_id": 9687794, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/2J5dP.jpg?s=128&g=1", "display_name": "Enrique Berm&#250;dez", "link": "https://stackoverflow.com/users/9687794/enrique-berm%c3%badez"}, "edited": false, "score": 1, "creation_date": 1583411834, "post_id": 41387232, "comment_id": 107112284, "body": "This is the right answer! Thanks a lot for your help!"}], "tags": [], "owner": {"reputation": 841, "user_id": 1411616, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3b9af6d61b0654b30eb0098084fbc7e4?s=128&d=identicon&r=PG", "display_name": "user1411616", "link": "https://stackoverflow.com/users/1411616/user1411616"}, "is_accepted": false, "score": 70, "last_activity_date": 1483045825, "creation_date": 1483045825, "answer_id": 41387232, "question_id": 37531903, "link": "https://stackoverflow.com/questions/37531903/how-do-i-print-output-without-a-trailing-newline-in-rust/41387232#41387232", "title": "How do I print output without a trailing newline in Rust?", "body": "<p>It's trickier than it would seem at first glance. Other answers mention the <code>print!</code> macro but it's not quite that simple. You'll likely need to flush stdout, as it may not be written to the screen immediately. <code>flush()</code> is a trait that is part of <code>std::io::Write</code> so that needs to be in scope for it to work (this is a pretty easy early mistake).</p>\n\n<pre><code>use std::io;\nuse std::io::Write; // &lt;--- bring flush() into scope\n\n\nfn main() {\n    println!(\"I'm picking a number between 1 and 100...\");\n\n    print!(\"Enter a number: \");\n    io::stdout().flush().unwrap();\n    let mut val = String::new();\n\n    io::stdin().read_line(&amp;mut val)\n        .expect(\"Error getting guess\");\n\n    println!(\"You entered {}\", val);\n}\n</code></pre>\n"}], "owner": {"reputation": 2165, "user_id": 5460216, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/v3Z3y.png?s=128&g=1", "display_name": "7_R3X", "link": "https://stackoverflow.com/users/5460216/7-r3x"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 17332, "favorite_count": 5, "accepted_answer_id": 37531989, "answer_count": 2, "score": 45, "last_activity_date": 1516388686, "creation_date": 1464633504, "last_edit_date": 1516388686, "question_id": 37531903, "link": "https://stackoverflow.com/questions/37531903/how-do-i-print-output-without-a-trailing-newline-in-rust", "title": "How do I print output without a trailing newline in Rust?", "body": "<p>The macro <code>println!</code> in Rust always leaves a newline character at the end of each output. For example</p>\n\n<pre><code>println!(\"Enter the number : \");\nio::stdin().read_line(&amp;mut num);\n</code></pre>\n\n<p>gives the output</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Enter the number : \n56\n</code></pre>\n\n<p>I don't want the user's input <code>56</code> to be on a new line. How do I do this?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 5758, "user_id": 487903, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/dd77541b61d10aa5f3304463a5f63427?s=128&d=identicon&r=PG", "display_name": "jbaiter", "link": "https://stackoverflow.com/users/487903/jbaiter"}, "edited": false, "score": 0, "creation_date": 1464614629, "post_id": 37526735, "comment_id": 62544953, "body": "Thank you! I had read about <code>env!</code> but somehow missed the &quot;at compile time&quot; part :-)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 13, "last_activity_date": 1573090109, "last_edit_date": 1573090109, "creation_date": 1464614405, "answer_id": 37526735, "question_id": 37526598, "link": "https://stackoverflow.com/questions/37526598/how-can-i-override-a-constant-via-a-compiler-option/37526735#37526735", "title": "How can I override a constant via a compiler option?", "body": "<p>No, you can't define constants (read: <code>const</code> bindings) with a compiler flag. But you can use the <a href=\"http://doc.rust-lang.org/std/macro.env!.html\" rel=\"noreferrer\"><code>env!</code> macro</a> for something similar. It reads some environment variable <em>at compile time</em>.</p>\n\n<pre><code>const MAX_DIMENSIONS_RAW: &amp;'static str = env!(\"MAX_DIMENSIONS\");\n</code></pre>\n\n<p>Sadly, this returns a string and not an integer. Furthermore we can't yet call arbitrary functions (like <code>parse</code>) at compile time to calculate a constant. You could use <a href=\"https://crates.io/crates/lazy_static\" rel=\"noreferrer\"><code>lazy_static</code></a> to achieve something similar:</p>\n\n<pre><code>lazy_static! {\n    static ref MAX_DIMENSIONS: usize = MAX_DIMENSIONS_RAW.parse().unwrap();\n}\n</code></pre>\n\n<p>Of course you should add proper error handling. If your user doesn't need to define the environment variable, you can use <a href=\"http://doc.rust-lang.org/std/macro.option_env!.html\" rel=\"noreferrer\"><code>option_env!</code></a>.</p>\n\n<p>With this approach, you can pass the setting at build time:</p>\n\n<pre><code>$ MAX_DIMENSIONS=1000 cargo build\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 15, "last_activity_date": 1573095332, "last_edit_date": 1573095332, "creation_date": 1464618531, "answer_id": 37528134, "question_id": 37526598, "link": "https://stackoverflow.com/questions/37526598/how-can-i-override-a-constant-via-a-compiler-option/37528134#37528134", "title": "How can I override a constant via a compiler option?", "body": "<p>Building on <a href=\"https://stackoverflow.com/a/37526735/155423\">Lukas Kalbertodt's answer</a>, you can get the environment variable as a constant number with some extra indirection, namely by using a <a href=\"http://doc.crates.io/build-script.html\" rel=\"noreferrer\">build script</a>.</p>\n\n<p><strong>build.rs</strong></p>\n\n<pre><code>use std::{env, fs::File, io::Write, path::Path};\n\nfn main() {\n    let out_dir = env::var(\"OUT_DIR\").expect(\"No out dir\");\n    let dest_path = Path::new(&amp;out_dir).join(\"constants.rs\");\n    let mut f = File::create(&amp;dest_path).expect(\"Could not create file\");\n\n    let max_dimensions = option_env!(\"MAX_DIMENSIONS\");\n    let max_dimensions = max_dimensions\n        .map_or(Ok(10_000), str::parse)\n        .expect(\"Could not parse MAX_DIMENSIONS\");\n\n    write!(&amp;mut f, \"const MAX_DIMENSIONS: usize = {};\", max_dimensions)\n        .expect(\"Could not write file\");\n    println!(\"cargo:rerun-if-env-changed=MAX_DIMENSIONS\");\n}\n</code></pre>\n\n<p><strong>main.rs</strong></p>\n\n<pre><code>include!(concat!(env!(\"OUT_DIR\"), \"/constants.rs\"));\n\nfn main() {\n    println!(\"The value is {} ({})\", MAX_DIMENSIONS, MAX_DIMENSIONS + 1);\n}\n</code></pre>\n\n<pre class=\"lang-none prettyprint-override\"><code>$ cargo run\nThe value is 10000 (10001)\n\n$ MAX_DIMENSIONS=17 cargo run\nThe value is 17 (18)\n\n$ MAX_DIMENSIONS=1 cargo run\nThe value is 1 (2)\n</code></pre>\n"}], "owner": {"reputation": 5758, "user_id": 487903, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/dd77541b61d10aa5f3304463a5f63427?s=128&d=identicon&r=PG", "display_name": "jbaiter", "link": "https://stackoverflow.com/users/487903/jbaiter"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1326, "favorite_count": 1, "accepted_answer_id": 37526735, "answer_count": 2, "score": 12, "last_activity_date": 1573095332, "creation_date": 1464613994, "last_edit_date": 1573090054, "question_id": 37526598, "link": "https://stackoverflow.com/questions/37526598/how-can-i-override-a-constant-via-a-compiler-option", "title": "How can I override a constant via a compiler option?", "body": "<p>Is it possible to define a constant in source code that can be overridden by a compiler flag? That is, something like setting a <code>#define</code> value in the C preprocessor with the <code>-D key=val</code> option to the compiler.</p>\n\n<p>I have read about conditional compilation via the <code>#[cfg(...)]</code> attribute, but that only seems to support booleans. I want to allow the user to set the value of a constant during compilation.</p>\n\n<p>Something like this:</p>\n\n<pre><code>#[from_cfg(\"max_dimensions\")]\nconst MAX_DIMENSIONS: usize = 100_000;\n</code></pre>\n"}, {"tags": ["java", "performance", "multidimensional-array", "rust"], "comments": [{"owner": {"reputation": 196, "user_id": 4296778, "user_type": "registered", "profile_image": "https://graph.facebook.com/755350436/picture?type=large", "display_name": "Mostafa Ali", "link": "https://stackoverflow.com/users/4296778/mostafa-ali"}, "edited": false, "score": 0, "creation_date": 1464602156, "post_id": 37522187, "comment_id": 62537296, "body": "1) Are you sure this runs in around 7 seconds ? On my machine this runs in under 2 seconds. 2) There is no chance of any overflow here .. you are assigning values to your 2D array x from 2D array y which is full of 0s and never gets updated to anything else .. as a result, 2D array x has only 0s too .. what exactly are you trying to do here ? I don&#39;t see overflows.."}, {"owner": {"reputation": 295, "user_id": 6057925, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1ea07abedba9c4fe8c636bebb801b21e?s=128&d=identicon&r=PG", "display_name": "Sidious Lord", "link": "https://stackoverflow.com/users/6057925/sidious-lord"}, "reply_to_user": {"reputation": 196, "user_id": 4296778, "user_type": "registered", "profile_image": "https://graph.facebook.com/755350436/picture?type=large", "display_name": "Mostafa Ali", "link": "https://stackoverflow.com/users/4296778/mostafa-ali"}, "edited": false, "score": 0, "creation_date": 1464602845, "post_id": 37522187, "comment_id": 62537723, "body": "@MostafaAli 1) What can I tell you, I have an old computer.  The 7 second time is for the Java program, the Rust program takes minutes to complete. 2) About the overflow.  The final answer is ~10^8 which is smaller than 2^31 - 1 = 2147483647.  Finally, you are wrong about the zeros.  The x and the y are not all zeros."}, {"owner": {"reputation": 196, "user_id": 4296778, "user_type": "registered", "profile_image": "https://graph.facebook.com/755350436/picture?type=large", "display_name": "Mostafa Ali", "link": "https://stackoverflow.com/users/4296778/mostafa-ali"}, "edited": false, "score": 0, "creation_date": 1464603292, "post_id": 37522187, "comment_id": 62538026, "body": "Sorry, I missed the bottom part of the code where you calculate the sum ...  ended up with some different logic."}], "answers": [{"comments": [{"owner": {"reputation": 1987, "user_id": 5278682, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/34509cba2b4d128dce294dcf5092d300?s=128&d=identicon&r=PG&f=1", "display_name": "Eli Friedman", "link": "https://stackoverflow.com/users/5278682/eli-friedman"}, "edited": false, "score": 1, "creation_date": 1464645053, "post_id": 37527812, "comment_id": 62558314, "body": "As it turns out, using explicit array indexing is actually faster in this case; see <a href=\"https://users.rust-lang.org/t/how-to-zip-two-slices-efficiently/2048/13\" rel=\"nofollow noreferrer\">users.rust-lang.org/t/how-to-zip-two-slices-efficiently/2048&zwnj;&#8203;/13</a> for discussion of why."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 2, "last_activity_date": 1464661101, "last_edit_date": 1495535339, "creation_date": 1464617537, "answer_id": 37527812, "question_id": 37522187, "link": "https://stackoverflow.com/questions/37522187/diagnosing-a-performance-issue/37527812#37527812", "title": "Diagnosing a performance issue", "body": "<p>To diagnose a performance issue in general, I:</p>\n\n<ol>\n<li>Get a baseline time or rate. Preferably create a testcase that only takes a few seconds, as profilers tend to slow down the system a bit. You will also want to iterate frequently.</li>\n<li>Compile in release mode with debugging symbols.</li>\n<li>Run the code in a profiler. I'm on OS X so my main choice is Instruments, but I also use valgrind.</li>\n<li>Find the hottest code path, think about why it's slow, try something, measure.</li>\n</ol>\n\n<p>The last step is the hard part.</p>\n\n<hr>\n\n<p>In your case, you have a separate implementation that you can use as your baseline. Comparing the two implementations, we can see that <strong>your data structures differ</strong>. In Java, you are building nested arrays, but in Rust you are using the ndarray crate. I know that crate has a good maintainer, but I personally don't know anything about the internals of it, or what use cases it best fits.</p>\n\n<p>So I rewrote it with using the standard-library <code>Vec</code>.</p>\n\n<p>The other thing I know is that direct array access isn't as fast as using an iterator. This is because array access needs to perform a bounds check, while iterators bake the bounds check into themselves. Many times this means using methods on <code>Iterator</code>.</p>\n\n<p>The other change is to perform bulk data transfer when you can. Instead of copying element-by-element, move whole slices around, using methods like <code>copy_from_slice</code>.</p>\n\n<p>With those changes the code looks like this (apologies for poor variable names, I'm sure you can come up with semantic names for them):</p>\n\n<pre><code>use std::mem;\n\nconst N: usize = 100;\nconst DEGREE: usize = 50;\n\nfn main() {\n    let numbers: Vec&lt;_&gt; = (1..N+1).map(|v| v*v).collect();\n\n    let min_sum = numbers[..DEGREE].iter().fold(0, |a, &amp;v| a + v as usize);\n    let max_sum = numbers[DEGREE..].iter().fold(0, |a, &amp;v| a + v as usize);\n\n    // different data types for x and y!\n    let mut x = vec![vec![0; max_sum+1]; DEGREE+1];\n    let mut y = vec![vec![0; max_sum+1]; DEGREE+1];\n    y[0][0] = 1;\n\n    for &amp;e in &amp;numbers {\n        let e2 = max_sum - e + 1;\n        let e3 = e + e2;\n\n        x[0][0] = 1;\n\n        for k in 0..DEGREE {\n            let current_x = &amp;mut x[k+1];\n            let prev_y = &amp;y[k];\n            let current_y = &amp;y[k+1];\n\n            // bulk copy\n            current_x[0..e].copy_from_slice(&amp;current_y[0..e]);\n\n            // more bulk copy\n            current_x[e..e3].copy_from_slice(&amp;prev_y[0..e2]);\n\n            // avoid array index\n            for (x, y) in current_x[e..e3].iter_mut().zip(&amp;current_y[e..e3]) {\n                *x += *y;\n            }\n        }\n\n        mem::swap(&amp;mut x, &amp;mut y);\n    }\n\n    let sum = y[DEGREE][min_sum..max_sum+1].iter().enumerate().filter(|&amp;(_, &amp;v)| v == 1).fold(0, |a, (i, _)| a + i + min_sum);\n\n    println!(\"{}\", sum);\n    println!(\"{}\", sum == 115039000);\n}\n</code></pre>\n\n<ul>\n<li>2.060s - Rust 1.9.0         </li>\n<li>2.225s - Java 1.7.0_45-b18</li>\n</ul>\n\n<p>On OS X 10.11.5 with a 2.3 GHz Intel Core i7.</p>\n\n<p>I'm not experienced enough with Java to know what kinds of optimizations it can do automatically. </p>\n\n<p>The biggest potential next step I see is to leverage SIMD instructions when performing the addition; it's pretty much exactly what SIMD is made for.</p>\n\n<hr>\n\n<p>As <a href=\"https://stackoverflow.com/questions/37522187/diagnosing-a-performance-issue/37527812?noredirect=1#comment62558314_37527812\">pointed out by Eli Friedman</a>, avoiding array indexing by zipping <a href=\"https://users.rust-lang.org/t/how-to-zip-two-slices-efficiently/2048/13\" rel=\"nofollow noreferrer\"><em>isn't</em> currently the most performant way</a> of doing this.</p>\n\n<p>With the changes below, the time is now <strong>1.267s</strong>.</p>\n\n<pre><code>let xx = &amp;mut current_x[e..e3];\nxx.copy_from_slice(&amp;prev_y[0..e2]);\n\nlet yy = &amp;current_y[e..e3];\nfor i in 0..(e3-e) {\n    xx[i] += yy[i];\n}\n</code></pre>\n\n<p>This generates assembly that appears to unroll the loop as well as using SIMD instructions:</p>\n\n<pre><code>+0x9b0    movdqu    -48(%rsi), %xmm0\n+0x9b5    movdqu    -48(%rcx), %xmm1\n+0x9ba    paddd     %xmm0, %xmm1\n+0x9be    movdqu    %xmm1, -48(%rsi)\n+0x9c3    movdqu    -32(%rsi), %xmm0\n+0x9c8    movdqu    -32(%rcx), %xmm1\n+0x9cd    paddd     %xmm0, %xmm1\n+0x9d1    movdqu    %xmm1, -32(%rsi)\n+0x9d6    movdqu    -16(%rsi), %xmm0\n+0x9db    movdqu    -16(%rcx), %xmm1\n+0x9e0    paddd     %xmm0, %xmm1\n+0x9e4    movdqu    %xmm1, -16(%rsi)\n+0x9e9    movdqu    (%rsi), %xmm0\n+0x9ed    movdqu    (%rcx), %xmm1\n+0x9f1    paddd     %xmm0, %xmm1\n+0x9f5    movdqu    %xmm1, (%rsi)\n+0x9f9    addq      $64, %rcx\n+0x9fd    addq      $64, %rsi\n+0xa01    addq      $-16, %rdx\n+0xa05    jne       \"slow::main+0x9b0\"\n</code></pre>\n"}], "owner": {"reputation": 295, "user_id": 6057925, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/1ea07abedba9c4fe8c636bebb801b21e?s=128&d=identicon&r=PG", "display_name": "Sidious Lord", "link": "https://stackoverflow.com/users/6057925/sidious-lord"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 144, "favorite_count": 0, "accepted_answer_id": 37527812, "answer_count": 1, "score": 3, "last_activity_date": 1464661101, "creation_date": 1464600531, "question_id": 37522187, "link": "https://stackoverflow.com/questions/37522187/diagnosing-a-performance-issue", "title": "Diagnosing a performance issue", "body": "<p>I'm not very experienced with Rust and I'm trying to diagnose a performance problem.  Below there is a pretty fast Java code (runs in 7 seconds) and what I think should the the equivalent Rust code.  However, the Rust code runs very slowly (yes, I compiled it with <code>--release</code> as well), and it also appears to overflow.  Changing <code>i32</code> to <code>i64</code> just pushes the overflow later, but it still happens.  I suspect there is some bug in what I wrote, but after staring at the problem for a long time, I decided to ask for help.</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public class Blah {\n\n    static final int N = 100;\n    static final int K = 50;\n\n    public static void main(String[] args) {\n        //initialize S\n        int[] S = new int[N];\n        for (int n = 1; n &lt;= N; n++) S[n-1] = n*n;\n\n        // compute maxsum and minsum\n        int maxsum = 0;\n        int minsum = 0;\n        for (int n = 0; n &lt; K; n++) {\n            minsum += S[n];\n            maxsum += S[N-n-1];\n        }\n\n        // initialize x and y\n        int[][] x = new int[K+1][maxsum+1];\n        int[][] y = new int[K+1][maxsum+1];\n        y[0][0] = 1;\n\n        // bottom-up DP over n\n        for (int n = 1; n &lt;= N; n++) {\n            x[0][0] = 1;\n            for (int k = 1; k &lt;= K; k++) {\n                int e = S[n-1];\n                for (int s = 0; s &lt; e; s++) x[k][s] = y[k][s];\n                for (int s = 0; s &lt;= maxsum-e; s++) {\n                    x[k][s+e] = y[k-1][s] + y[k][s+e];\n                }\n            }\n            int[][] t = x;\n            x = y;\n            y = t;\n        }\n\n        // sum of unique K-subset sums\n        int sum = 0;\n        for (int s = minsum; s &lt;= maxsum; s++) {\n            if (y[K][s] == 1) sum += s;\n        }\n        System.out.println(sum);\n    }\n\n}\n</code></pre>\n\n<pre class=\"lang-rs prettyprint-override\"><code>extern crate ndarray;\n\nuse ndarray::prelude::*;\nuse std::mem;\n\nfn main() {\n    let numbers: Vec&lt;i32&gt; = (1..101).map(|x| x * x).collect();\n\n    let deg: usize = 50;\n\n    let mut min_sum: usize = 0;\n    for i in 0..deg {\n        min_sum += numbers[i] as usize;\n    }\n\n    let mut max_sum: usize = 0;\n    for i in deg..numbers.len() {\n        max_sum += numbers[i] as usize;\n    }\n\n    // Make an array\n    let mut x = OwnedArray::from_elem((deg + 1, max_sum + 1), 0i32);\n    let mut y = OwnedArray::from_elem((deg + 1, max_sum + 1), 0i32);\n\n    y[(0, 0)] = 1;\n\n    for n in 1..numbers.len() + 1 {\n        x[(0, 0)] = 1;\n        println!(\"Completed step {} out of {}\", n, numbers.len());\n        for k in 1..deg + 1 {\n            let e = numbers[n - 1] as usize;\n            for s in 0..e {\n                x[(k, s)] = y[(k, s)];\n            }\n            for s in 0..max_sum - e + 1 {\n                x[(k, s + e)] = y[(k - 1, s)] + y[(k, s + e)];\n            }\n        }\n        mem::swap(&amp;mut x, &amp;mut y);\n    }\n\n    let mut ans = 0;\n\n    for s in min_sum..max_sum + 1 {\n        if y[(deg, s)] == 1 {\n            ans += s;\n        }\n    }\n\n    println!(\"{}\", ans);\n\n}\n</code></pre>\n"}, {"tags": ["hashmap", "rust", "dereference", "borrowing"], "comments": [{"owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "edited": false, "score": 0, "creation_date": 1464598335, "post_id": 37521043, "comment_id": 62535006, "body": "I think it&#39;s wrong (of whomever authored <code>HashMap::get</code>) to use the <code>Borrow</code> trait here. Basically the generic bound says: you can pass a reference to any type to <code>get</code>, if the key-type is borrowable as that type. It should actually be: you can pass any type to <code>get</code>, as long as that type is coercible to the key-type. But we can&#39;t fix this backwards compatibly :("}], "answers": [{"comments": [{"owner": {"reputation": 175, "user_id": 4497948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aeee848bb04d07d93fb31fe3124f08c5?s=128&d=identicon&r=PG", "display_name": "skanur", "link": "https://stackoverflow.com/users/4497948/skanur"}, "edited": false, "score": 0, "creation_date": 1464605152, "post_id": 37521390, "comment_id": 62539188, "body": "Thanks. That makes sense. However, wouldn&#39;t it mean that Dref has two implementations? One returning &amp;str and other &amp;String? The document doesn&#39;t say anything about &amp;String. Am I missing something here?"}, {"owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "reply_to_user": {"reputation": 175, "user_id": 4497948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aeee848bb04d07d93fb31fe3124f08c5?s=128&d=identicon&r=PG", "display_name": "skanur", "link": "https://stackoverflow.com/users/4497948/skanur"}, "edited": false, "score": 0, "creation_date": 1464606945, "post_id": 37521390, "comment_id": 62540227, "body": "<a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#deref\" rel=\"nofollow noreferrer\"><code>String</code> only implements <code>Deref&lt;Target=str&gt;</code></a>. This implementation makes it possible to coerce <code>&amp;String</code> into <code>&amp;str</code> where <code>$str</code> is expected. See <a href=\"https://doc.rust-lang.org/nightly/book/deref-coercions.html\" rel=\"nofollow noreferrer\"><code>Deref</code> coercion</a>."}], "tags": [], "owner": {"reputation": 41983, "user_id": 866732, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/f09f0253204000d6083ed1de21afc6fd?s=128&d=identicon&r=PG", "display_name": "WiSaGaN", "link": "https://stackoverflow.com/users/866732/wisagan"}, "is_accepted": true, "score": 21, "last_activity_date": 1464607538, "last_edit_date": 1464607538, "creation_date": 1464598141, "answer_id": 37521390, "question_id": 37521043, "link": "https://stackoverflow.com/questions/37521043/dereferencing-strings-and-hashmaps-in-rust/37521390#37521390", "title": "Dereferencing strings and HashMaps in Rust", "body": "<p>The error is caused by that generic function <a href=\"https://doc.rust-lang.org/nightly/std/collections/struct.HashMap.html#method.get\"><code>HashMap::get</code></a> over <code>String</code> is selected by the compiler during type inference. But you want <code>HashMap::get</code> over <code>str</code>.</p>\n\n<p>So just change</p>\n\n<pre><code>println!(\"{:?}\", roman2number.get(&amp;r0.to_string()));\n</code></pre>\n\n<p>to</p>\n\n<pre><code>println!(\"{:?}\", roman2number.get::&lt;str&gt;(&amp;r0.to_string()));\n</code></pre>\n\n<p>to make it explicit. This helps the compiler to select the right function.</p>\n\n<p>Check out <a href=\"https://play.rust-lang.org/?gist=a314cb9b865007033499d8ff5e88f102&amp;version=stable&amp;backtrace=0\">Playground here</a>.</p>\n\n<p>It looks to me that coercion <code>Deref&lt;Target&gt;</code> can only happen when we know the target type, so when compiler is trying to infer which <code>HashMap::get</code> to use, it sees <code>&amp;r0.to_string()</code> as type <code>&amp;String</code> but never <code>&amp;str</code>. And <code>&amp;'static str</code> does not implement <code>Borrow&lt;String&gt;</code>. This results a type error. When we specify <code>HashMap::get::&lt;str&gt;</code>, this function expects <code>&amp;str</code>, when coercion can be applied to <code>&amp;String</code> to get a matching <code>&amp;str</code>.</p>\n\n<p>You can check out <a href=\"https://doc.rust-lang.org/nightly/book/deref-coercions.html\"><code>Deref</code> coercion</a> and <a href=\"https://doc.rust-lang.org/nightly/std/string/struct.String.html#deref\"><code>String</code> Deref</a> for more details.</p>\n"}, {"comments": [{"owner": {"reputation": 175, "user_id": 4497948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aeee848bb04d07d93fb31fe3124f08c5?s=128&d=identicon&r=PG", "display_name": "skanur", "link": "https://stackoverflow.com/users/4497948/skanur"}, "edited": false, "score": 0, "creation_date": 1464607786, "post_id": 37521662, "comment_id": 62540701, "body": "Thank you. The explanation on Borrow makes sense!"}], "tags": [], "owner": {"reputation": 22583, "user_id": 1103681, "user_type": "registered", "accept_rate": 56, "profile_image": "https://i.stack.imgur.com/rMUo3.png?s=128&g=1", "display_name": "oli_obk", "link": "https://stackoverflow.com/users/1103681/oli-obk"}, "is_accepted": false, "score": 4, "last_activity_date": 1464598976, "creation_date": 1464598976, "answer_id": 37521662, "question_id": 37521043, "link": "https://stackoverflow.com/questions/37521043/dereferencing-strings-and-hashmaps-in-rust/37521662#37521662", "title": "Dereferencing strings and HashMaps in Rust", "body": "<p>The definition of the <code>get</code> method looks as follows</p>\n\n<pre><code>fn get&lt;Q: ?Sized&gt;(&amp;self, k: &amp;Q) -&gt; Option&lt;&amp;V&gt; where K: Borrow&lt;Q&gt;, Q: Hash + Eq\n</code></pre>\n\n<p>The first part is the type of object which you pass: <code>Q</code>. There are constraints on <code>Q</code>. The conditions on <code>Q</code> are that </p>\n\n<ol>\n<li>the key-type <code>K</code> needs to implement the <a href=\"https://doc.rust-lang.org/std/borrow/trait.Borrow.html\" rel=\"nofollow\"><code>Borrow</code></a> trait over <code>Q</code></li>\n<li><code>Q</code> needs to implement the <code>Hash</code> and <code>Eq</code> traits.</li>\n</ol>\n\n<p>Replacing this with your actual types means that the key-type <code>&amp;'static str</code> needs to implement <code>Borrow&lt;String&gt;</code>. By the definition of <code>Borrow</code>, this means that a <code>&amp;'static str</code> needs to be convertible to <code>&amp;String</code>. But all the docs/texts I've read state that everywhere you'd use <code>&amp;String</code> you should be using <code>&amp;str</code> instead. So it makes little sense to offer a <code>&amp;str</code> -> <code>&amp;String</code> conversion, even if it would make life a little easier sometimes.</p>\n\n<p>Since every <a href=\"https://doc.rust-lang.org/src/core/up/src/libcore/borrow.rs.html#97-99\" rel=\"nofollow\">reference type is borrowable as a shorter lived reference type</a>.), you can pass a <code>&amp;str</code> when a <code>&amp;'static str</code> is the key-type, because <code>&amp;'static str</code> implements <code>Borrow&lt;str&gt;</code></p>\n"}, {"comments": [{"owner": {"reputation": 1461, "user_id": 2925175, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bbd8ddca3a806becf1e563c576688342?s=128&d=identicon&r=PG&f=1", "display_name": "c0g", "link": "https://stackoverflow.com/users/2925175/c0g"}, "edited": false, "score": 2, "creation_date": 1473885620, "post_id": 37528304, "comment_id": 66316128, "body": "And just to add another, equivalent alternative: <code>println!(&quot;{:?}&quot;, roman2number.get(r0.as_str()));</code>, the new-ish <a href=\"https://doc.rust-lang.org/collections/string/struct.String.html#method.as_str\" rel=\"nofollow noreferrer\"><code>::as_str</code></a> method."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 7, "last_activity_date": 1464619123, "creation_date": 1464619123, "answer_id": 37528304, "question_id": 37521043, "link": "https://stackoverflow.com/questions/37521043/dereferencing-strings-and-hashmaps-in-rust/37528304#37528304", "title": "Dereferencing strings and HashMaps in Rust", "body": "<p>The other answers are correct, but I wanted to point out that you have an unneeded <code>to_string</code> (you've already <code>collect</code>ed into a <code>String</code>) and an alternate way of coercing to a <code>&amp;str</code>, using <code>as</code>:</p>\n\n<pre><code>let r0: String = roman_num.chars().take(1).collect();\nprintln!(\"{:?}\", roman2number.get(&amp;r0 as &amp;str));\n</code></pre>\n\n<p>In <em>this</em> case, I'd probably just rewrite the map to contain <code>char</code> as the key though:</p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut roman2number = HashMap::new();\n    roman2number.insert('X', 10);\n    roman2number.insert('I', 1);\n\n    let roman_num = \"XXI\";\n    for c in roman_num.chars() {\n        println!(\"{:?}\", roman2number.get(&amp;c));\n    }\n}\n</code></pre>\n\n<p>Note there's no need to have an explicit type for the map, it will be inferred.</p>\n"}], "owner": {"reputation": 175, "user_id": 4497948, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/aeee848bb04d07d93fb31fe3124f08c5?s=128&d=identicon&r=PG", "display_name": "skanur", "link": "https://stackoverflow.com/users/4497948/skanur"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5551, "favorite_count": 2, "accepted_answer_id": 37521390, "answer_count": 3, "score": 16, "last_activity_date": 1464619123, "creation_date": 1464597030, "last_edit_date": 1464618834, "question_id": 37521043, "link": "https://stackoverflow.com/questions/37521043/dereferencing-strings-and-hashmaps-in-rust", "title": "Dereferencing strings and HashMaps in Rust", "body": "<p>I'm trying to understand how HashMaps work in Rust and I have come up with this example. </p>\n\n<pre><code>use std::collections::HashMap;\n\nfn main() {\n    let mut roman2number: HashMap&lt;&amp;'static str, i32&gt; = HashMap::new();\n    roman2number.insert(\"X\", 10);\n    roman2number.insert(\"I\", 1);\n\n    let roman_num = \"XXI\".to_string();\n    let r0 = roman_num.chars().take(1).collect::&lt;String&gt;();\n    let r1: &amp;str = &amp;r0.to_string();\n    println!(\"{:?}\", roman2number.get(r1)); // This works\n\n    // println!(\"{:?}\", roman2number.get(&amp;r0.to_string())); // This doesn't\n}\n</code></pre>\n\n<p>When I try to compile the code with last line uncommented, I get the following error</p>\n\n<pre><code>error: the trait bound `&amp;str: std::borrow::Borrow&lt;std::string::String&gt;` is not satisfied [E0277]\nprintln!(\"{:?}\", roman2number.get(&amp;r0.to_string()));\n                                            ^~~\nnote: in this expansion of format_args!\nnote: in this expansion of print! (defined in &lt;std macros&gt;)\nnote: in this expansion of println! (defined in &lt;std macros&gt;)\nhelp: run `rustc --explain E0277` to see a detailed explanation\n</code></pre>\n\n<p>The Trait implementation section of the <a href=\"https://doc.rust-lang.org/stable/std/string/struct.String.html\" rel=\"noreferrer\">docs</a> gives the dereferencing as <code>fn deref(&amp;self) -&gt; &amp;str</code></p>\n\n<p>So what is happening here?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464576807, "post_id": 37516920, "comment_id": 62527330, "body": "Additionally, if you did want to compare iterators instead of slices, there&#39;s <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq\" rel=\"nofollow noreferrer\"><code>Iterator::eq</code></a> in the standard library and <a href=\"http://bluss.github.io/rust-itertools/doc/itertools/fn.assert_equal.html\" rel=\"nofollow noreferrer\"><code>assert_equal</code></a> in Itertools."}], "tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 3, "last_activity_date": 1464575981, "creation_date": 1464575981, "answer_id": 37516920, "question_id": 37516799, "link": "https://stackoverflow.com/questions/37516799/next-after-for-zip-preventing-iterator-from-being-moved/37516920#37516920", "title": ".next() after for ... .zip(): Preventing iterator from being moved", "body": "<p><a href=\"http://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.zip\" rel=\"nofollow\"><code>zip</code></a> takes its arguments by value, so that's why they're moved and you can't use them afterwards.</p>\n\n<p>However, there's a workaround: there's a <a href=\"http://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.by_ref\" rel=\"nofollow\"><code>by_ref</code></a> method that returns a mutable reference to the iterator, and the trick is that <code>&amp;mut I where I: Iterator</code> also implements <code>Iterator</code>. You can thus apply <code>.by_ref()</code> to both of your iterators before you pass them to <code>zip()</code>:</p>\n\n<pre><code>fn assert_list_eq&lt;I, T&gt;(mut expected: I, mut actual: I)\n    where I: Iterator&lt;Item=T&gt; + Clone,\n          T: PartialEq + Debug {\n    for (e, a) in expected.by_ref().zip(actual.by_ref()) {\n        assert_eq!(e, a);\n    }\n    // fail if there are any \"leftovers\"\n    assert_eq!(None, expected.next());\n    assert_eq!(None, actual.next());\n}\n</code></pre>\n\n<hr>\n\n<p>That said, the standard library already provides all the necessary tools to compare a fixed-size array with a <code>Vec</code>. It's a bit tricky though, because <code>PartialEq</code> is generic on its right-hand side argument and there are not enough implementations for it to work the \"obvious\" way. Here's one way to do it:</p>\n\n<pre><code>#[test]\nfn prime_factors_test() {\n    assert_eq!([2,3,5][..], prime_factors(30)[..]);\n}\n</code></pre>\n\n<p><code>[..]</code> forces the expressions to be converted to slices, using the <a href=\"http://doc.rust-lang.org/stable/std/ops/trait.Index.html\" rel=\"nofollow\"><code>Index&lt;RangeFull&gt;</code></a> trait (<code>..</code> is a shorthand for <code>RangeFull</code>).</p>\n\n<p>Another way to do it is to just swap the operands, then you don't need <code>[..]</code>.</p>\n\n<pre><code>#[test]\nfn prime_factors_test() {\n    assert_eq!(prime_factors(30), [2,3,5]);\n}\n</code></pre>\n\n<p>That's because the standard library provides <code>impl PartialEq&lt;[T; 3]&gt; for Vec&lt;T&gt;</code>, but not <code>impl PartialEq&lt;Vec&lt;T&gt;&gt; for [T; 3]</code>.</p>\n"}], "owner": {"reputation": 360, "user_id": 2761960, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/d254e9f1203f39e47692a6d95495de59?s=128&d=identicon&r=PG&f=1", "display_name": "brian_o", "link": "https://stackoverflow.com/users/2761960/brian-o"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 356, "favorite_count": 1, "accepted_answer_id": 37516920, "answer_count": 1, "score": 1, "last_activity_date": 1464575981, "creation_date": 1464574610, "question_id": 37516799, "link": "https://stackoverflow.com/questions/37516799/next-after-for-zip-preventing-iterator-from-being-moved", "title": ".next() after for ... .zip(): Preventing iterator from being moved", "body": "<p>I'm new to Rust and haven't quite gotten my head around all of it yet. I've been doing a lot of Rust reading and also playing with math problems. I wrote a function with this signature:</p>\n\n<pre><code>pub fn prime_factors(n: u64) -&gt; Vec&lt;u64&gt; {\n</code></pre>\n\n<p>So, given <code>n</code> of 30, it should return a vector with values 2, 3, and 5. I built a test that reads:</p>\n\n<pre><code>#[test]\nfn prime_factors_test() {\n    assert_list_eq([2,3,5].iter(), prime_factors(30).iter());\n}\n</code></pre>\n\n<p>One highlight is that I am comparing a static array to a vector (for learning purposes, this is currently desirable because I'd like to practice generics).</p>\n\n<p>My testing function is the one I'm actually having problems with. To test, the function must iterate through both collections, checking for equality with each index. I used <code>.zip()</code> to do this, but if the collections are uneven, the iterator will only exhaust through the index of the shorter one. So after <code>zip</code>, I want to check if either of the iterators has extra elements.</p>\n\n<p>The following does not compile:</p>\n\n<pre><code>fn assert_list_eq&lt;I, T&gt;(mut expected: I, mut actual: I)\n    where I: Iterator&lt;Item=T&gt; + Clone,\n          T: PartialEq + Debug {\n    for (e, a) in expected.zip(actual) {\n        assert_eq!(e, a);\n    }\n    // fail if there are any \"leftovers\"\n    assert_eq!(None, expected.next());\n    assert_eq!(None, actual.next());\n}\n</code></pre>\n\n<p>I think the loop (or maybe the setup for the loop) moves/consumes the iterators, and they can't be used after the loop. But I <em>want</em> to check on the status of those iterators post loop. I think I know what's <em>wrong</em>, I just don't know how to make it <em>right</em>. I'm almost certainly having a conceptual problem.</p>\n\n<p>As a workaround I did this, but I feel like I'm embracing an anti-pattern by using the <code>.clone()</code> just to make things work.</p>\n\n<pre><code>fn assert_list_eq&lt;I, T&gt;(expected: I, actual: I)\n    where I: Iterator&lt;Item=T&gt; + Clone,\n          T: PartialEq + Debug {\n    assert!(expected.clone().count() == actual.clone().count()); // desperation\n    for (e, a) in expected.zip(actual) {\n        assert_eq!(e, a);\n    }\n}\n</code></pre>\n\n<hr/>\n\n<p>BTW (acknowledging XY Problem): I'd be happy to learn of a builtin assertion to compare two ordered collections, but that's not really what I'm confused about.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464571210, "post_id": 37516448, "comment_id": 62526358, "body": "Note that the explicit type (<code>let mfe: MyFirstEnum</code>) is unnecessary. You&#39;ve already specified the type on the right-hand side of the assignment."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 2, "creation_date": 1464571285, "post_id": 37516448, "comment_id": 62526376, "body": "<i>if I changed the code to define the other variants within the enum, the code to output a particular variant would quickly become a mess</i> \u2014 Can you expand a bit more what you mean by this?"}], "answers": [{"comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 2, "creation_date": 1464590695, "post_id": 37516479, "comment_id": 62531229, "body": "<a href=\"https://github.com/rust-lang/rfcs/pull/1450\" rel=\"nofollow noreferrer\">This is a proposal</a> to make enum variants a type, but there is no decision yet, and certainly won&#39;t appear before 1.11."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1464636166, "post_id": 37516479, "comment_id": 62555268, "body": "@kennytm thank you for the link, I was too lazy to dig it up. This is one of the potential upcoming Rust features that I&#39;m super excited for."}, {"owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "edited": false, "score": 0, "creation_date": 1535873569, "post_id": 37516479, "comment_id": 91219745, "body": "Oh well. This decision may be an explanation, but it is still not very clear. It would be better to show the solution as an example of code, rather than in pieces. This decision was not clear to me the first time."}, {"owner": {"reputation": 4500, "user_id": 8858995, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/44d1981ec5dd8311a79e695d512716ef?s=128&d=identicon&r=PG&f=1", "display_name": "Ibraheem Ahmed", "link": "https://stackoverflow.com/users/8858995/ibraheem-ahmed"}, "edited": false, "score": 0, "creation_date": 1610047017, "post_id": 37516479, "comment_id": 116016103, "body": "If anyone wants to track the progress of enum variants as types, the <a href=\"https://github.com/rust-lang/rfcs/pull/2593\" rel=\"nofollow noreferrer\">new RFC is here</a>."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1535895456, "last_edit_date": 1535895456, "creation_date": 1464571105, "answer_id": 37516479, "question_id": 37516448, "link": "https://stackoverflow.com/questions/37516448/accessing-tuple-from-within-an-enum/37516479#37516479", "title": "Accessing tuple from within an enum", "body": "<p>This is a common misconception: enum variants are <strong>not</strong> their own types (at least in Rust 1.9). Therefore when you create a variable like this:</p>\n\n<pre><code>let value = MyFirstEnum::TupleType(3.14, 1, \"Hello\".to_string());\n</code></pre>\n\n<p>The fact that it's a specific variant is immediately \"lost\". You will need to pattern match to prevent accessing the enum as the wrong variant. You <em>may</em> prefer to use an <code>if let</code> statement instead of a match:</p>\n\n<pre><code>if let MyFirstEnum::TupleType(f, i, s) = value {\n     // Values available here\n     println!(\"f: {:?}\", f);\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 193, "user_id": 6838037, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/3d236cd91dd37052423f3e10dd0ed71a?s=128&d=identicon&r=PG", "display_name": "andy5995", "link": "https://stackoverflow.com/users/6838037/andy5995"}, "edited": false, "score": 0, "creation_date": 1597104354, "post_id": 52134862, "comment_id": 112019339, "body": "This example works, but I was confused that the 3 vars in the println!() weren&#39;t preceded by the enum. It should be noted that the reason it works is &quot;destructuring&quot; (covered in the Rust book)."}], "tags": [], "owner": {"reputation": 637, "user_id": 6999141, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/8056cd6d51c3c6f3dd6bd787259b4a1d?s=128&d=identicon&r=PG", "display_name": "Anatolii Kosorukov", "link": "https://stackoverflow.com/users/6999141/anatolii-kosorukov"}, "is_accepted": false, "score": 1, "last_activity_date": 1535903318, "last_edit_date": 1535903318, "creation_date": 1535873202, "answer_id": 52134862, "question_id": 37516448, "link": "https://stackoverflow.com/questions/37516448/accessing-tuple-from-within-an-enum/52134862#52134862", "title": "Accessing tuple from within an enum", "body": "<p>Example solution:</p>\n\n<pre><code>enum MyFirstEnum {\n    TupleType(f32, i8, String),\n   // StuctType { varone: i32, vartwo: f64 },\n  //  NewTypeTuple(i32),\n  //  SomeVarName,\n}\n\nfn main() {\n    let mfe: MyFirstEnum = MyFirstEnum::TupleType(3.14, 1, \"Hello\".to_string());\n    let MyFirstEnum::TupleType(value, id, text) = &amp;mfe;\n    println!(\"[{}; {}; {}]\", value, id, text);\n\n//or\n    match &amp;mfe {\n        MyFirstEnum::TupleType(value, id, text) =&gt; {\n            println!(\"[{}; {}; {}]\", value, id, text);\n        }\n       // _ =&gt; {}\n    }\n\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=3a1069965c9e3862f485156d554adda5&amp;version=stable&amp;mode=debug&amp;edition=2015\" rel=\"nofollow noreferrer\">Playground link</a></p>\n"}], "owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3679, "favorite_count": 0, "accepted_answer_id": 37516479, "answer_count": 2, "score": 5, "last_activity_date": 1535903318, "creation_date": 1464570811, "last_edit_date": 1464571158, "question_id": 37516448, "link": "https://stackoverflow.com/questions/37516448/accessing-tuple-from-within-an-enum", "title": "Accessing tuple from within an enum", "body": "<p>I have a Rust enum defined like this</p>\n\n<pre><code>enum MyFirstEnum {\n    TupleType(f32, i8, String),\n    StuctType {varone: i32, vartwo: f64},\n    NewTypeTuple(i32),\n    SomeVarName\n}\n</code></pre>\n\n<p>I have the following code:</p>\n\n<pre><code>let mfe: MyFirstEnum = MyFirstEnum::TupleType(3.14, 1, \"Hello\".to_string());\n</code></pre>\n\n<p>I'm following the Rust documentation and this looks fine. I don't need to define everything in the enum, but how would I go about accessing the mid element in the enum tuple?</p>\n\n<p><code>mfe.TupleType.1</code> and <code>mfe.1</code> don't work when I add them to a <code>println!</code></p>\n\n<p>I know Rust provides the facility to do pattern matching to obtain the value, but if I changed the code to define the other variants within the enum, the code to output a particular variant would quickly become a mess.</p>\n\n<p>Is there a simple way to output the variant of the tuple (or any other variant) in the enum?</p>\n"}, {"tags": ["performance", "optimization", "rust", "llvm-codegen"], "comments": [{"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 5, "creation_date": 1464561994, "post_id": 37514909, "comment_id": 62524765, "body": "The old question again: have you compiled with compiler optimizations (with the <code>--release</code> flag)? ;)"}, {"owner": {"reputation": 27269, "user_id": 2320035, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/83d5a6d76755c6a987dd59495698dcfe?s=128&d=identicon&r=PG", "display_name": "sascha", "link": "https://stackoverflow.com/users/2320035/sascha"}, "edited": false, "score": 3, "creation_date": 1464563956, "post_id": 37514909, "comment_id": 62525129, "body": "Without having any idea at all regarding rust: is your benchmarking sane? Cache-effects, variance, test-data synchronization..."}, {"owner": {"reputation": 715, "user_id": 4883127, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/428914dd1ba6786d9242170f4bbce2d9?s=128&d=identicon&r=PG&f=1", "display_name": "Bradley Hardy", "link": "https://stackoverflow.com/users/4883127/bradley-hardy"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1464593434, "post_id": 37514909, "comment_id": 62532580, "body": "@LukasKalbertodt Yes, I run my benchmarks with <code>cargo bench</code>, which automatically compiles with release."}, {"owner": {"reputation": 715, "user_id": 4883127, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/428914dd1ba6786d9242170f4bbce2d9?s=128&d=identicon&r=PG&f=1", "display_name": "Bradley Hardy", "link": "https://stackoverflow.com/users/4883127/bradley-hardy"}, "reply_to_user": {"reputation": 27269, "user_id": 2320035, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/83d5a6d76755c6a987dd59495698dcfe?s=128&d=identicon&r=PG", "display_name": "sascha", "link": "https://stackoverflow.com/users/2320035/sascha"}, "edited": false, "score": 0, "creation_date": 1464594029, "post_id": 37514909, "comment_id": 62532871, "body": "@sascha <code>cargo bench</code> gives me variance as <code>+&#47;- X</code>, and the <code>X</code> is nowhere near enough to compensate. My data is first created, then the benchmark starts and runs however many times <code>cargo bench</code> chooses over references to the same data. Both benchmarks are run under exactly the same conditions, with the only difference being that I comment out the <code>assert</code> lines to remove the bounds checking."}, {"owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1464595494, "post_id": 37514909, "comment_id": 62533609, "body": "It would be awesome if you could find a minimal example that still shows this strange performance property. That would increase the probability for someone answering. I&#39;m super interested in the problem, but don&#39;t have the time to dig into it now."}, {"owner": {"reputation": 715, "user_id": 4883127, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/428914dd1ba6786d9242170f4bbce2d9?s=128&d=identicon&r=PG&f=1", "display_name": "Bradley Hardy", "link": "https://stackoverflow.com/users/4883127/bradley-hardy"}, "reply_to_user": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "edited": false, "score": 0, "creation_date": 1464599695, "post_id": 37514909, "comment_id": 62535848, "body": "@LukasKalbertodt See my update. It&#39;s maybe not as minimal as you&#39;d like, but the code is down to ~200 lines from ~1000, and I&#39;ve scrapped the generics which make things harder to follow."}, {"owner": {"reputation": 1498, "user_id": 6844327, "user_type": "registered", "accept_rate": 100, "profile_image": "https://i.stack.imgur.com/9fWJl.jpg?s=128&g=1", "display_name": "HiDefender", "link": "https://stackoverflow.com/users/6844327/hidefender"}, "edited": false, "score": 1, "creation_date": 1475580893, "post_id": 37514909, "comment_id": 66990242, "body": "Perhaps the compiler can more aggressively optimize when you check bounds?"}, {"owner": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 5, "creation_date": 1476747734, "post_id": 37514909, "comment_id": 67467276, "body": "For stuff like that it&#39;s best to compile both standalone binaries in release mode and use <code>objdump -D</code> to identify the machine instructions used in the relevant tight loops."}, {"owner": {"reputation": 537, "user_id": 3369597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/LWx78.png?s=128&g=1", "display_name": "benaryorg", "link": "https://stackoverflow.com/users/3369597/benaryorg"}, "edited": false, "score": 0, "creation_date": 1478314043, "post_id": 37514909, "comment_id": 68116846, "body": "You have <code>unsafe fn get_unchecked()</code> vs. <code>fn get()</code> so my guess is that due to the inlining you get some weird behaviour there. You might want to try and make both functions unsafe as a whole and/or expose a safe interface in both places."}, {"owner": {"reputation": 537, "user_id": 3369597, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/LWx78.png?s=128&g=1", "display_name": "benaryorg", "link": "https://stackoverflow.com/users/3369597/benaryorg"}, "reply_to_user": {"reputation": 3376, "user_id": 134409, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/e1ec6b4e77bfbae1b992957792572630?s=128&d=identicon&r=PG", "display_name": "dpc.pw", "link": "https://stackoverflow.com/users/134409/dpc-pw"}, "edited": false, "score": 0, "creation_date": 1478314226, "post_id": 37514909, "comment_id": 68116865, "body": "As @dpc.pw mentioned, <code>objdump</code> is useful, but you might also want to try using <a href=\"https://play.rust-lang.org\" rel=\"nofollow noreferrer\">play.rust-lang.org</a> and generate the MIR, LLVM IR and Assembly (in that order) and see if you can spot something. Look at both the functions and give the inlining a closer look, because, well, you&#39;re inlining <code>unsafe</code>."}, {"owner": {"reputation": 13642, "user_id": 4013258, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d423395e1033fa23d80a5561ab170fa?s=128&d=identicon&r=PG&f=1", "display_name": "Surt", "link": "https://stackoverflow.com/users/4013258/surt"}, "edited": false, "score": 0, "creation_date": 1480626834, "post_id": 37514909, "comment_id": 69053172, "body": "It could be as stupid as the extra bounds checks make the loop align to the loop-buffer and that way run faster."}, {"owner": {"reputation": 27592, "user_id": 1031591, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/s3MiH.jpg?s=128&g=1", "display_name": "atlaste", "link": "https://stackoverflow.com/users/1031591/atlaste"}, "reply_to_user": {"reputation": 13642, "user_id": 4013258, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/1d423395e1033fa23d80a5561ab170fa?s=128&d=identicon&r=PG&f=1", "display_name": "Surt", "link": "https://stackoverflow.com/users/4013258/surt"}, "edited": false, "score": 0, "creation_date": 1485202121, "post_id": 37514909, "comment_id": 70817550, "body": "@Surt, How? More exact: bounds checks like this should be eliminated by LLVM. After all, the loop conditions in the matrix multiplications match the bound check conditions perfectly, so the elimination is trivial. The net result is that the code is <i>exactly</i> the same - except for the way <code>unsafe</code> is used (and compiled...). In other words, I would guess the speedup comes from the plumbing like pinning etc that is eliminated from the inner loop somehow."}], "answers": [{"tags": [], "owner": {"reputation": 27592, "user_id": 1031591, "user_type": "registered", "accept_rate": 71, "profile_image": "https://i.stack.imgur.com/s3MiH.jpg?s=128&g=1", "display_name": "atlaste", "link": "https://stackoverflow.com/users/1031591/atlaste"}, "is_accepted": false, "score": 2, "last_activity_date": 1484817410, "creation_date": 1484817410, "answer_id": 41737927, "question_id": 37514909, "link": "https://stackoverflow.com/questions/37514909/why-does-my-code-run-slower-when-i-remove-bounds-checks/41737927#41737927", "title": "Why does my code run slower when I remove bounds checks?", "body": "<p>It's not a complete answer because I haven't tested my claims, but this might explain it. Either ways, the only way to know for sure is to generate the LLVM IR and the assembler output. If you need a manual for LLVM IR, you can find it here: <a href=\"http://llvm.org/docs/LangRef.html\" rel=\"nofollow noreferrer\">http://llvm.org/docs/LangRef.html</a> .</p>\n\n<p>Anyways, enough about that. Let's say you have this code:</p>\n\n<pre><code>#[inline(always)]\npub unsafe fn get_unchecked(&amp;self, row: usize, col: usize) -&gt; &amp;T {\n    self.data.get_unchecked(self.row_col_index(row, col))\n}\n</code></pre>\n\n<p>The compiler here changes this into an indirect load, which will probably be optimized in a tight loop. It's interesting to note that each load has a possibility to go wrong: if your data isn't available, it'll trigger an out-of-bounds. </p>\n\n<p>In the case with the bounds check combined with the tight loop, LLVM does a little trick. Because the load is in a tight loop (a matrix multiplication) and because the result of the bounds check depends on the bounds of the loop, it will remove the bounds check from the loop and put it <em>around</em> the loop. In other words, the loop itself will remain exactly the same, but with an extra bounds check.</p>\n\n<p>In other words, the code is exactly the same, with some minor differences.</p>\n\n<p>So what changed? Two things:</p>\n\n<ol>\n<li><p>If we have the additional bounds check, there's no possibility anymore for an out-of-bounds load. This might trigger an optimization that wasn't possible before. Still, considering how these checks are usually implemented, this wouldn't be my guess.</p></li>\n<li><p>Another thing to consider is that the word 'unsafe' might trigger some behavior, like an additional condition, pin data or disable the GC, etc. I'm not sure about this exact behavior in Rust; the only way to find out these details is to look at the LLVM IR.</p></li>\n</ol>\n"}], "owner": {"reputation": 715, "user_id": 4883127, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/428914dd1ba6786d9242170f4bbce2d9?s=128&d=identicon&r=PG&f=1", "display_name": "Bradley Hardy", "link": "https://stackoverflow.com/users/4883127/bradley-hardy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1029, "favorite_count": 2, "answer_count": 1, "score": 26, "last_activity_date": 1564862904, "creation_date": 1464555423, "last_edit_date": 1564862904, "question_id": 37514909, "link": "https://stackoverflow.com/questions/37514909/why-does-my-code-run-slower-when-i-remove-bounds-checks", "title": "Why does my code run slower when I remove bounds checks?", "body": "<p>I'm writing a linear algebra library in Rust.</p>\n\n<p>I have a function to get a reference to a matrix cell at a given row and column. This function starts with a pair of assertions that the row and column are within bounds:</p>\n\n<pre><code>#[inline(always)]\npub fn get(&amp;self, row: usize, col: usize) -&gt; &amp;T {\n    assert!(col &lt; self.num_cols.as_nat());\n    assert!(row &lt; self.num_rows.as_nat());\n    unsafe {\n        self.get_unchecked(row, col)\n    }\n}\n</code></pre>\n\n<p>In tight loops, I thought it might be faster to skip the bounds check, so I provide a <code>get_unchecked</code> method:</p>\n\n<pre><code>#[inline(always)]\npub unsafe fn get_unchecked(&amp;self, row: usize, col: usize) -&gt; &amp;T {\n    self.data.get_unchecked(self.row_col_index(row, col))\n}\n</code></pre>\n\n<p>The bizarre thing is, when I use these methods to implement matrix multiplication (via row and column iterators), my benchmarks show that it actually goes about 33% faster when I <em>check</em> the bounds. Why is this happening?</p>\n\n<p>I've tried this on two different computers, one running Linux and the other OSX, and both show the effect.</p>\n\n<p>The full code is <a href=\"http://github.com/bch29/matrix\" rel=\"noreferrer\">on github</a>. The relevant file is <a href=\"https://github.com/bch29/matrix/blob/master/src/lib.rs\" rel=\"noreferrer\">lib.rs</a>. Functions of interest are:</p>\n\n<ul>\n<li><code>get</code> at line 68</li>\n<li><code>get_unchecked</code> at line 81</li>\n<li><code>next</code> at line 551</li>\n<li><code>mul</code> at line 796</li>\n<li><code>matrix_mul</code> (benchmark) at line 1038</li>\n</ul>\n\n<p>Note that I'm using type-level numbers to parameterise my matrices (with the option for dynamic sizes too via dummy tagged types), so the benchmark is multiplying two 100x100 matrices.</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>I've significantly simplified the code, removing stuff not directly used in the benchmark and removing generic parameters. I also wrote an implementation of multiplication without using iterators, and that version <strong>doesn't cause the same effect</strong>. See <a href=\"https://github.com/bch29/matrix/blob/minimal-performance/src/lib.rs\" rel=\"noreferrer\">here</a> for this version of the code. Cloning the <code>minimal-performance</code> branch and running <code>cargo bench</code> will benchmark the two different implementations of multiplication (note that the assertions are commented out to start with in that branch).</p>\n\n<p>Also of note is that if I change the <code>get*</code> functions to return copies of the data instead of references (<code>f64</code> instead of <code>&amp;f64</code>), the effect disappears (but the code is slightly slower all round).</p>\n"}, {"tags": ["openssl", "rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "edited": false, "score": 3, "creation_date": 1464584015, "post_id": 37516438, "comment_id": 62528796, "body": "I just submitted a <a href=\"https://github.com/kbknapp/cargo-graph/pull/29\" rel=\"nofollow noreferrer\">pull request</a> to cargo-graph to help visualize this kind of dependency issues."}, {"owner": {"reputation": 694, "user_id": 5179678, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/HDDwl.jpg?s=128&g=1", "display_name": "mgul", "link": "https://stackoverflow.com/users/5179678/mgul"}, "edited": false, "score": 0, "creation_date": 1465331899, "post_id": 37516438, "comment_id": 62854806, "body": "Thank you, I did this with all my dependencies to be &quot;aligned&quot; in the same version. It was a lot of dark work, hope they&#39;ll do something about it."}, {"owner": {"reputation": 670, "user_id": 386991, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/2dba4ca7b639638aaf4039f98dee69f5?s=128&d=identicon&r=PG", "display_name": "Machisuji", "link": "https://stackoverflow.com/users/386991/machisuji"}, "edited": false, "score": 0, "creation_date": 1480173499, "post_id": 37516438, "comment_id": 68858722, "body": "What do I do if I have a library that absolutely requires an up-to-date openssl? I&#39;m trying to use hyper and git2 at the same time and can&#39;t build it now due to hyper requiring an old version of openssl. The dependency for hyper is optional, though. Is there some way to force cargo to use the version required by git2 and treat hyper as if no openssl was present?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 670, "user_id": 386991, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/2dba4ca7b639638aaf4039f98dee69f5?s=128&d=identicon&r=PG", "display_name": "Machisuji", "link": "https://stackoverflow.com/users/386991/machisuji"}, "edited": false, "score": 0, "creation_date": 1480173655, "post_id": 37516438, "comment_id": 68858757, "body": "@Machisuji that would probably be better asked as a separate question. However, you can use Cargo <i>features</i> to disable the OpenSSL dependency of Hyper, if you don&#39;t need it."}, {"owner": {"reputation": 670, "user_id": 386991, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/2dba4ca7b639638aaf4039f98dee69f5?s=128&d=identicon&r=PG", "display_name": "Machisuji", "link": "https://stackoverflow.com/users/386991/machisuji"}, "edited": false, "score": 0, "creation_date": 1480204932, "post_id": 37516438, "comment_id": 68867561, "body": "Thanks! I created a separate question: <a href=\"http://stackoverflow.com/questions/40824435/using-both-git2-and-hyper-openssl-linked-more-than-once\" title=\"using both git2 and hyper openssl linked more than once\">stackoverflow.com/questions/40824435/&hellip;</a>"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 10, "last_activity_date": 1494384551, "last_edit_date": 1494384551, "creation_date": 1464570645, "answer_id": 37516438, "question_id": 37514797, "link": "https://stackoverflow.com/questions/37514797/error-native-library-openssl-is-being-linked-to-by-more-than-one-version-of-t/37516438#37516438", "title": "error: native library `openssl` is being linked to by more than one version of the same package", "body": "<p>The way that linking works, you can only have a single version of a native library linked, otherwise you end up with duplicate symbols. Cargo's  <a href=\"http://doc.crates.io/build-script.html#the-links-manifest-key\" rel=\"noreferrer\"><code>links</code> manifest key</a> helps prevent you from accidentally linking to the same set of symbols twice.</p>\n\n<p>To solve it, you need to read through your <code>Cargo.lock</code> (it's not a difficult file format to understand). Find the crates that have the offending library as a dependency and note which ones have conflicting versions.</p>\n\n<p>Then you have to manually resolve <em>your</em> dependencies so that <em>their</em> dependencies use the same version of the native library.</p>\n\n<hr>\n\n<p>In this case, the important aspects of the dependency chain are:</p>\n\n<pre><code>server (0.0.1) =&gt; cookie (0.2.4) =&gt; openssl (0.7.13)\n               =&gt; hyper (0.6.16) =&gt; cookie (0.1.21) =&gt; openssl (0.6.7)\n</code></pre>\n\n<p>To fix it, modify your <code>Cargo.toml</code> to use the same version of cookie as hyper. Then you will implicitly get the same version of openssl.</p>\n\n<p>To be honest, this is one of the roughest parts of Rust at the moment. At least <em>this</em> version of the \"multiple different versions of the same crate\" strangeness provides a straight-forward Cargo error.</p>\n"}], "owner": {"reputation": 694, "user_id": 5179678, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/HDDwl.jpg?s=128&g=1", "display_name": "mgul", "link": "https://stackoverflow.com/users/5179678/mgul"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1540, "favorite_count": 2, "accepted_answer_id": 37516438, "answer_count": 1, "score": 11, "last_activity_date": 1494384551, "creation_date": 1464554656, "last_edit_date": 1466521198, "question_id": 37514797, "link": "https://stackoverflow.com/questions/37514797/error-native-library-openssl-is-being-linked-to-by-more-than-one-version-of-t", "title": "error: native library `openssl` is being linked to by more than one version of the same package", "body": "<p>I'm facing this problem when I try to cargo build:</p>\n\n<blockquote>\n  <p>error: native library <code>openssl</code> is being linked to by more than one version of the same package, but it can only be linked once; try updating or pinning your dependencies to ensure that this package only shows up once</p>\n\n<pre><code>openssl-sys v0.6.7\n\nopenssl-sys v0.7.13\n</code></pre>\n</blockquote>\n\n<p>Cargo and Rust versions:</p>\n\n<pre><code>$ cargo --version\ncargo 0.11.0-nightly (3ff108a 2016-05-24)\n\n$ rustc --version\nrustc 1.11.0-nightly (7746a334d 2016-05-28)\n</code></pre>\n\n<p>Files:</p>\n\n<ul>\n<li><p><a href=\"http://pastebin.com/wCBUfdi3\" rel=\"noreferrer\"><code>Cargo.toml</code></a></p></li>\n<li><p><a href=\"http://pastebin.com/ahCEECiV\" rel=\"noreferrer\"><code>Cargo.lock</code></a></p></li>\n</ul>\n\n<p>can't get why this doesn't compile and how to solve this problem.\nThank you!</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464545555, "post_id": 37512165, "comment_id": 62519964, "body": "Just create a Rust application that behaves like any other kind of binary that IIS could execute. This has been possible for decades with technologies like CGI or FastCGI."}, {"owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "edited": false, "score": 1, "creation_date": 1464547805, "post_id": 37512165, "comment_id": 62520717, "body": "That&#39;s right, you do an app that implements either HTTP, FastCGI or SCGI (<a href=\"https://crates.io/crates/scgi\" rel=\"nofollow noreferrer\">crates.io/crates/scgi</a>) protocol, then you point the ISS to that app&#39;s HTTP (<a href=\"http://stackoverflow.com/questions/34684711/iis-reverse-proxy\">stackoverflow.com/questions/34684711/iis-reverse-proxy</a>; <a href=\"http://stackoverflow.com/questions/26947595/iis-reverse-proxy-to-node-js\" title=\"iis reverse proxy to node js\">stackoverflow.com/questions/26947595/&hellip;</a>), FastCGI or SCGI port."}, {"owner": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1464548426, "post_id": 37512165, "comment_id": 62520916, "body": "Ok! thank you very much, i will try it right away."}, {"owner": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1464639502, "post_id": 37512165, "comment_id": 62556531, "body": "Gonna ask you guys. What&#39;s better? To do this, or to self host a rust web service?  Is it mature enough for production? sorry if this is not the place to ask."}], "answers": [{"comments": [{"owner": {"reputation": 860, "user_id": 2013924, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/395a6aa699f13ec2543c98da550e5414?s=128&d=identicon&r=PG", "display_name": "davidpodhola", "link": "https://stackoverflow.com/users/2013924/davidpodhola"}, "reply_to_user": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1494350170, "post_id": 43707953, "comment_id": 74787006, "body": "Hi Juan, how it went for you? Also note SSL is supported in Azure so <a href=\"https://rust-nickel-azure-web-app.azurewebsites.net/\" rel=\"nofollow noreferrer\">rust-nickel-azure-web-app.azurewebsites.net</a> works as well."}, {"owner": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1494365939, "post_id": 43707953, "comment_id": 74795592, "body": "Hello David. Went well. Project didnt took off, but got some knowledge with me along the way. Can you share the rust test you deployed in azure?   have you compared it to C# using similar test ? Thanks for your answers!"}, {"owner": {"reputation": 860, "user_id": 2013924, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/395a6aa699f13ec2543c98da550e5414?s=128&d=identicon&r=PG", "display_name": "davidpodhola", "link": "https://stackoverflow.com/users/2013924/davidpodhola"}, "reply_to_user": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1495877269, "post_id": 43707953, "comment_id": 75441585, "body": "Hi Juan, sorry it took so long. In the meantime I <a href=\"https://github.com/hsharpsoftware/rust-realworld-example-app/issues/27#issuecomment-302796569\" rel=\"nofollow noreferrer\">change the sample to run on Hyper</a> and I am still getting the same results. Also did some basic tests to compare with C# and the results were the same, I think the Azure infrastructure is really cutting the throughput on Free."}, {"owner": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "edited": false, "score": 0, "creation_date": 1496614005, "post_id": 43707953, "comment_id": 75720365, "body": "I see!!  I had a win server box in my old laptop. But it just died right before I started testing. Will try on azure when I get some free time. Thanks a lot!"}, {"owner": {"reputation": 31095, "user_id": 32688, "user_type": "registered", "accept_rate": 66, "profile_image": "https://www.gravatar.com/avatar/3b3352822817df6ea7e2ccb8681ef117?s=128&d=identicon&r=PG", "display_name": "Frederick The Fool", "link": "https://stackoverflow.com/users/32688/frederick-the-fool"}, "edited": false, "score": 0, "creation_date": 1531356870, "post_id": 43707953, "comment_id": 89569357, "body": "Azure does throttle bandwidth for low-end subscriptions. This has been my experience as well."}], "tags": [], "owner": {"reputation": 860, "user_id": 2013924, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/395a6aa699f13ec2543c98da550e5414?s=128&d=identicon&r=PG", "display_name": "davidpodhola", "link": "https://stackoverflow.com/users/2013924/davidpodhola"}, "is_accepted": true, "score": 2, "last_activity_date": 1493565481, "creation_date": 1493565481, "answer_id": 43707953, "question_id": 37512165, "link": "https://stackoverflow.com/questions/37512165/host-rust-app-in-iis/43707953#43707953", "title": "Host Rust app in IIS", "body": "<p>Yes, it is possible to host a Rust application in IIS.</p>\n\n<p>I used the same <a href=\"https://blog.vbfox.net/2016/03/31/Suave-in-IIS-hello-world.html\" rel=\"nofollow noreferrer\">approach used to host Suave applications in IIS</a> and <a href=\"http://rust-nickel-azure-web-app.azurewebsites.net/\" rel=\"nofollow noreferrer\">it worked</a>.</p>\n\n<p>On IIS the key is to read the port where IIS expects your application to listen</p>\n\n<pre><code>let port = match env::var(\"HTTP_PLATFORM_PORT\") {\n    Ok(val) =&gt; val,\n    Err(e) =&gt; \"6767\".to_string(),\n};\n</code></pre>\n\n<p>I created <a href=\"https://crates.io/crates/iis\" rel=\"nofollow noreferrer\">a small crate <code>iis</code></a> to make it easier to use in <a href=\"https://github.com/hsharpsoftware/rust-realworld-example-app\" rel=\"nofollow noreferrer\">a real Rust application</a> like here for <a href=\"http://nickel.rs/\" rel=\"nofollow noreferrer\">Nickel</a></p>\n\n<pre><code>let port = iis::get_port();\nlet listen_on = format!(\"127.0.0.1:{}\", port);\nserver.listen(listen_on);\n</code></pre>\n\n<p>I believe this would be mature enough for production exactly the same way self hosted Rust app given <a href=\"https://www.iis.net/downloads/microsoft/httpplatformhandler\" rel=\"nofollow noreferrer\">HttpPlatformHandler</a> and IIS are mature and stable.</p>\n\n<p><em>I also did some very basic and unscientific performance tests on the <a href=\"https://azure.microsoft.com/en-us/pricing/details/app-service/plans/\" rel=\"nofollow noreferrer\">Free App Service plan in Azure</a> and got stable roughly 60 hits per second with avg. response time 100-200 ms.</em></p>\n"}], "owner": {"reputation": 368, "user_id": 6022629, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/u0Zuu.jpg?s=128&g=1", "display_name": "Juan Carlos", "link": "https://stackoverflow.com/users/6022629/juan-carlos"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 999, "favorite_count": 0, "accepted_answer_id": 43707953, "answer_count": 1, "score": 2, "last_activity_date": 1493565481, "creation_date": 1464538557, "last_edit_date": 1464545500, "question_id": 37512165, "link": "https://stackoverflow.com/questions/37512165/host-rust-app-in-iis", "title": "Host Rust app in IIS", "body": "<p>I found a very interesting post on self hosted Rust apps, they look good. </p>\n\n<p>I am interested on how to host it in a web server like IIS, or is it impossible at the moment?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464621151, "post_id": 37510569, "comment_id": 62548658, "body": "I would note that the usefulness of non-type generic parameters (among which integers) hinges on the ability to do computations on those values at compile-time; if only <code>A -1</code>, ... I suspect that compile-time function evaluation (maybe limited to start with) is therefore necessary to get them."}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464624493, "post_id": 37510569, "comment_id": 62550468, "body": "@MatthieuM. Even without any computations it would already be very useful to integers around at compile time, e.g., to uniformly implement common traits for fixed-sized arrays or to reduce duplication when creating structures which are wrappers around fixed-sized arrays (such as fixed-size vectors and matrices). But I agree that computations would be even greater."}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 0, "creation_date": 1464628294, "post_id": 37510569, "comment_id": 62552054, "body": "for fixed size vectors/matrices, I use the work around <code>SmallVec&lt;[T; N]&gt;</code>, by passing the array type directly it works (just not very elegant). I do wish a compiler trait was implemented on arrays to extract the <code>T</code> and <code>N</code> (I implement it myself with macros)... as for implementing integer parameters right now, I think that it may be premature, it&#39;s quite desirable to try and ensure that the design will be compatible with future usecases and therefore it might be better to wait until we have more experience with <code>const fn</code>."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 4, "last_activity_date": 1464529113, "creation_date": 1464529113, "answer_id": 37510569, "question_id": 37510400, "link": "https://stackoverflow.com/questions/37510400/can-associated-constants-be-used-to-initialize-the-length-of-fixed-size-arrays/37510569#37510569", "title": "Can associated constants be used to initialize the length of fixed size arrays?", "body": "<p>No, associated constants don't help <em>and aren't intended to</em>. Associated anything are <em>outputs</em> while use cases such as the one in the question want <em>inputs</em>. One could in principle construct something out of type parameters and a trait with associated constants (at least, as soon as you can use associated constants of type parameters &mdash; sadly that doesn't work yet). But that has terrible ergonomics, not much better than existing hacks like <a href=\"https://crates.io/crates/typenum\" rel=\"nofollow\">typenum</a>.</p>\n\n<p>Integer type parameters are highly desired since, as you noticed, they enable numerous things that aren't really feasible in current Rust. People <a href=\"https://internals.rust-lang.org/t/pre-rfc-integer-templating/2974\" rel=\"nofollow\">talk about this and plan for it</a> but it's not there yet.</p>\n"}, {"tags": [], "owner": {"reputation": 2731, "user_id": 1115659, "user_type": "registered", "accept_rate": 40, "profile_image": "https://www.gravatar.com/avatar/e07a4201601ad4298203b843ab64b9e4?s=128&d=identicon&r=PG", "display_name": "aldanor", "link": "https://stackoverflow.com/users/1115659/aldanor"}, "is_accepted": false, "score": 1, "last_activity_date": 1464529167, "creation_date": 1464529167, "answer_id": 37510583, "question_id": 37510400, "link": "https://stackoverflow.com/questions/37510400/can-associated-constants-be-used-to-initialize-the-length-of-fixed-size-arrays/37510583#37510583", "title": "Can associated constants be used to initialize the length of fixed size arrays?", "body": "<p>Integer type parameters are not supported as of now, however there's an RFC for that IIRC, and a long-standing discussion.</p>\n\n<p>You could use <a href=\"https://github.com/paholg/typenum\" rel=\"nofollow\"><code>typenum</code></a> crate in the meanwhile.</p>\n"}], "owner": {"reputation": 13772, "user_id": 944430, "user_type": "registered", "accept_rate": 89, "profile_image": "https://www.gravatar.com/avatar/4d2b181af01c96927ac05eb864d6b7b6?s=128&d=identicon&r=PG", "display_name": "Maik Klein", "link": "https://stackoverflow.com/users/944430/maik-klein"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 453, "favorite_count": 0, "accepted_answer_id": 37510569, "answer_count": 2, "score": 3, "last_activity_date": 1530539866, "creation_date": 1464528108, "last_edit_date": 1530539866, "question_id": 37510400, "link": "https://stackoverflow.com/questions/37510400/can-associated-constants-be-used-to-initialize-the-length-of-fixed-size-arrays", "title": "Can associated constants be used to initialize the length of fixed size arrays?", "body": "<p>In C++, you have the ability to pass integrals inside templates</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>std::array&lt;int, 3&gt; arr; //fixed size array of 3\n</code></pre>\n\n<p>I know that Rust has built in support for this, but what if I wanted to create something like linear algebra vector library?</p>\n\n<pre><code>struct Vec&lt;T, size: usize&gt; {\n    data: [T; size],\n}\n\ntype Vec3f = Vec&lt;f32, 3&gt;;\ntype Vec4f = Vec&lt;f32, 4&gt;;\n</code></pre>\n\n<p>This is currently what I do in D. I have heard that Rust now has <a href=\"https://doc.rust-lang.org/book/associated-constants.html\" rel=\"nofollow noreferrer\">Associated Constants</a>.</p>\n\n<p>I haven't used Rust in a long time but this doesn't seem to address this problem at all or have I missed something?</p>\n\n<p>As far as I can see, associated constants are only available in traits and that would mean I would still have to create <code>N</code> vector types by hand.</p>\n"}, {"tags": ["vector", "rust", "borrow-checker"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464527900, "post_id": 37509459, "comment_id": 62514478, "body": "Please provide a <a href=\"https://stackoverflow.com/help/minimal-reproducible-example\">minimal reproducible example</a> that allows anyone else to reproduce the problem you are having. Otherwise we have to make so many guesses to build the code we could produce the wrong thing."}, {"owner": {"reputation": 3008, "user_id": 3204951, "user_type": "registered", "accept_rate": 76, "profile_image": "https://www.gravatar.com/avatar/8aca84582c72a22e9cb5245571103d92?s=128&d=identicon&r=PG", "display_name": "Nate Mara", "link": "https://stackoverflow.com/users/3204951/nate-mara"}, "edited": false, "score": 0, "creation_date": 1464572577, "post_id": 37509459, "comment_id": 62526591, "body": "Firstly, you should probably not be making a Vec&lt;Box&lt;*&gt;&gt;, since a vector will allocate all of its elements on the heap, so box-ing them again will just slow down element creation."}], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464528765, "post_id": 37510502, "comment_id": 62514745, "body": "OP states that <code>Command</code> is a trait, not a struct. This is why I want an MCVE... However, your second half is probably the right solution. You should explain why it&#39;s invalid to pass <code>self</code> when iterating over <code>self.messages</code> - how <code>fire</code> might try to modify <code>messages</code>. Alternatively, OP could break up <code>self</code> and only pass a subset of fields to <code>fire</code>."}, {"owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464529877, "post_id": 37510502, "comment_id": 62515070, "body": "@Shepmaster Thanks to remind me that <code>Command</code> is a trait. I&#39;m getting used to see when a question does not provide a MCVE... If <code>fire</code> receives <code>&amp;Bot</code>, the case &quot;how <code>fire</code> might try to modify messages&quot; cannot happen and I think that the compiler is being rigid here."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 2, "last_activity_date": 1464531188, "last_edit_date": 1495541279, "creation_date": 1464528723, "answer_id": 37510502, "question_id": 37509459, "link": "https://stackoverflow.com/questions/37509459/how-to-make-a-vector-of-boxed-trait-objects-from-another-vector-of-them/37510502#37510502", "title": "How to make a vector of boxed trait objects from another vector of them?", "body": "<blockquote>\n  <p>What am I doing wrong here? I tried a lot but nothing helps. Initially I was doing the following:</p>\n\n<pre><code>for c in &amp;self.cmds {\n    if c.check(&amp;message) {\n        c.fire(&amp;message, self);\n    }\n}\n</code></pre>\n</blockquote>\n\n<p>If the <code>fire</code> function does not need access to other commands, an option is to temporarily replace <code>self.cmd</code> with an empty vector:  </p>\n\n<pre><code>trait Command {\n    fn check(&amp;self, message: &amp;str) -&gt; bool;\n    fn fire(&amp;mut self, bot: &amp;Bot);\n}\n\nstruct Bot {\n    cmds: Vec&lt;Box&lt;Command&gt;&gt;,\n}\n\nimpl Bot {\n    fn test(&amp;mut self, message: &amp;str) {\n        use std::mem;\n        // replace self.cmds with a empty vector and returns the\n        // replaced vector\n        let mut cmds = mem::replace(&amp;mut self.cmds, Vec::default());\n        for c in &amp;mut cmds {\n            if c.check(message) {\n                c.fire(self);\n            }\n        }\n        // put back cmds in self.cmds\n        mem::replace(&amp;mut self.cmds, cmds);\n    }\n}\n</code></pre>\n\n<p>There are <a href=\"https://stackoverflow.com/search?q=rust+mem%3A%3Areplace\">other answers</a> that use this approach.</p>\n\n<hr>\n\n<p>If <code>fire</code> does need access to some fields of <code>Bot</code>, you can pass only the needed fields instead of <code>self</code>:</p>\n\n<pre><code>c.fire(self.others)\n</code></pre>\n"}], "owner": {"reputation": 12555, "user_id": 1750757, "user_type": "registered", "accept_rate": 83, "profile_image": "https://i.stack.imgur.com/Zmc7D.jpg?s=128&g=1", "display_name": "Victor Polevoy", "link": "https://stackoverflow.com/users/1750757/victor-polevoy"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 517, "favorite_count": 0, "accepted_answer_id": 37510502, "answer_count": 1, "score": 0, "last_activity_date": 1464531188, "creation_date": 1464521924, "last_edit_date": 1495539850, "question_id": 37509459, "link": "https://stackoverflow.com/questions/37509459/how-to-make-a-vector-of-boxed-trait-objects-from-another-vector-of-them", "title": "How to make a vector of boxed trait objects from another vector of them?", "body": "<p>I am making a bot. When the bot receives a message it needs to check all the commands if they trigger on the message and if yes - perform an action.</p>\n\n<p>So I have a vector of commands (<code>Command</code> trait) in main struct:</p>\n\n<pre><code>struct Bot {\n    cmds: Vec&lt;Box&lt;Command&gt;&gt;,\n}\n</code></pre>\n\n<p>Everything is good until I try to make a list of triggered commands and to use them later in <code>(&amp;self mut)</code> method:</p>\n\n<pre><code>let mut triggered: Vec&lt;Box&lt;command::Command&gt;&gt;;\nfor c in &amp;self.cmds {\n    if c.check(&amp;message) {\n        triggered.push(c.clone());\n    }\n}\n</code></pre>\n\n<p>Error:</p>\n\n<pre><code>bot.rs:167:44: 167:56 error: mismatched types:\n expected `Box&lt;Command&gt;`,\n    found `&amp;Box&lt;Command&gt;`\n(expected box,\n    found &amp;-ptr) [E0308]\n</code></pre>\n\n<p>What am I doing wrong here? I tried a lot but nothing helps.\nInitially I was doing the following:</p>\n\n<pre><code>for c in &amp;self.cmds {\n    if c.check(&amp;message) {\n        c.fire(&amp;message, self);\n    }\n}\n</code></pre>\n\n<p>but it gave me:</p>\n\n<pre><code>bot.rs:172:46: 172:50 error: cannot borrow `*self` as mutable because `self.cmds` is also borrowed as immutable [E0502]\nbot.rs:172        \n\n                 c.fire(&amp;message, self);\n</code></pre>\n\n<p>So I <a href=\"https://stackoverflow.com/questions/23032464/cannot-borrow-self-as-mutable-because-self-history-is-also-borrowed-as\">stackoverflowed</a> it and came to solution above.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464536994, "post_id": 37508081, "comment_id": 62517307, "body": "This was <a href=\"https://users.rust-lang.org/t/how-do-i-work-with-the-borrow-checker-in-this-case/6005?u=shepmaster\" rel=\"nofollow noreferrer\">cross-posted to the Users Forum</a>."}], "answers": [{"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": false, "score": 3, "last_activity_date": 1464514467, "creation_date": 1464514467, "answer_id": 37508306, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek/37508306#37508306", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<p>Typical case of lexical borrowing: the compiler is not yet able to understand that this is code is safe. So for the time being (until the so called non-lexical borrowing is implemented), try to rewrite your code. Like this, for example: </p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n    where P: Fn(&amp;I::Item) -&gt; bool \n{\n    loop {\n        if let Some(val) = self.peek() {\n            if !predicate(val) {\n                break;\n            }\n        } else {\n            break;\n        }\n        self.next();\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1357, "user_id": 986816, "user_type": "registered", "accept_rate": 88, "profile_image": "https://www.gravatar.com/avatar/cc682a4311984f4247d03dc5926bf9f4?s=128&d=identicon&r=PG", "display_name": "MartinHaTh", "link": "https://stackoverflow.com/users/986816/martinhath"}, "is_accepted": false, "score": 1, "last_activity_date": 1464514571, "creation_date": 1464514571, "answer_id": 37508331, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek/37508331#37508331", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<p>You could rewrite the function into this: </p>\n\n<pre><code>impl&lt;I: Iterator&gt; AdvanceWhile&lt;I&gt; for Peekable&lt;I&gt; {\n    fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n        where P: Fn(&amp;I::Item) -&gt; bool \n    {\n        loop {\n            {\n                let peek = match self.peek() {\n                    Some(p) =&gt; p,\n                    None =&gt; break,\n                };\n                if !predicate(peek) {\n                    break;\n                }\n            }\n            self.next();\n        }\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 3, "last_activity_date": 1464589982, "last_edit_date": 1495540370, "creation_date": 1464519210, "answer_id": 37509009, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek/37509009#37509009", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<p>As <a href=\"https://stackoverflow.com/a/37508306/5189607\">Lukas Kalbertodt</a> already said, this is a limitation of the borrow checker. Here I would like to show a more readable version: </p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n    where P: Fn(&amp;I::Item) -&gt; bool \n{\n    while let Some(true) = self.peek().map(&amp;predicate) {\n        self.next();\n    }\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "is_accepted": false, "score": 0, "last_activity_date": 1464588377, "creation_date": 1464588377, "answer_id": 37518646, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek/37518646#37518646", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<p>Okay so this is not the best way of doing it but it might come in handy for more complicated cases...</p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n    where P: Fn(&amp;I::Item) -&gt; bool \n{\n    while {\n        if let Some(val) = self.peek() {\n            predicate(val)\n        } else {\n            false\n        }\n    }\n    {\n        self.next();\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=4653dc9793acca69c8a3bec8812f8b81&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow\">Playpen</a></p>\n"}, {"tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 1, "last_activity_date": 1513709273, "last_edit_date": 1513709273, "creation_date": 1513708342, "answer_id": 47893160, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek/47893160#47893160", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<p>The problem is that your original code could do this:</p>\n\n<pre><code>while let Some(val) = self.peek() {\n    if predicate(val) {\n        self.next();\n        println!(\"{:?}\", val);\n    } else {\n        break;\n    }\n}\n</code></pre>\n\n<p>Accessing <code>val</code> after you called <code>next()</code> would allow you to access memory that was no longer valid, causing memory unsafety.</p>\n\n<p>As others have pointed out, your code doesn't <em>actually</em> do this, but current Rust uses <em>lexical lifetimes</em>, an overly-conservative approximation of how long a reference needs to be valid for. Future Rust should help constrain the logic without introducing unsafety.</p>\n\n<hr>\n\n<p>If your value implements <code>Copy</code>, you can make use of that:</p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\nwhere\n    P: Fn(&amp;I::Item) -&gt; bool,\n    I::Item: Copy,\n{\n    while let Some(&amp;val) = self.peek() {\n        if predicate(&amp;val) {\n            self.next();\n        } else {\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>This causes the value to be copied from the reference returned by <code>peek</code>. Since nothing is borrowed, the fact that you are going to mutate the iterator does not cause a problem.</p>\n\n<p>If your type implements <code>Clone</code>, you could clone the value, again disassociating it:</p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\nwhere\n    P: Fn(&amp;I::Item) -&gt; bool,\n    I::Item: Clone,\n{\n    while let Some(val) = self.peek().cloned() {\n        if predicate(&amp;val) {\n            self.next();\n        } else {\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>If your type is neither <code>Copy</code> nor <code>Clone</code>, you need to introduce a temporary variable for the boolean result. This clearly informs the compiler that the borrow returned by <code>peek</code> isn't needed beyond the equality check statement:</p>\n\n<pre><code>fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\nwhere\n    P: Fn(&amp;I::Item) -&gt; bool,\n{\n    while self.peek().map_or(false, &amp;predicate) {\n        self.next();\n    }\n}\n</code></pre>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/q/38023871/155423\">Rust borrow of a HashMap lasts beyond the scope it&#39;s in?</a></li>\n</ul>\n"}], "owner": {"reputation": 25756, "user_id": 39648, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/0d9ffb2252f073517660f2d0bf71d0db?s=128&d=identicon&r=PG", "display_name": "Autodidact", "link": "https://stackoverflow.com/users/39648/autodidact"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 777, "favorite_count": 0, "accepted_answer_id": 37509009, "answer_count": 5, "score": 2, "last_activity_date": 1513709273, "creation_date": 1464512936, "last_edit_date": 1513707696, "question_id": 37508081, "link": "https://stackoverflow.com/questions/37508081/how-do-i-call-peekablenext-based-on-the-result-of-peekablepeek", "title": "How do I call Peekable::next based on the result of Peekable::peek?", "body": "<pre><code>use std::iter::Peekable;\n\npub trait AdvanceWhile&lt;I: Iterator&gt; {\n    fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n    where\n        P: Fn(&amp;I::Item) -&gt; bool;\n}\n\nimpl&lt;I: Iterator&gt; AdvanceWhile&lt;I&gt; for Peekable&lt;I&gt; {\n    fn advance_while&lt;P&gt;(&amp;mut self, predicate: P)\n    where\n        P: Fn(&amp;I::Item) -&gt; bool,\n    {\n        while let Some(val) = self.peek() {\n            if predicate(val) {\n                self.next();\n            } else {\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=22b20f6da45f344c0eeeda2a1ba88ec8&amp;version=nightly&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a></p>\n\n<p>Error:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0499]: cannot borrow `*self` as mutable more than once at a time\n  --&gt; src/main.rs:16:17\n   |\n14 |         while let Some(val) = self.peek() {\n   |                               ---- first mutable borrow occurs here\n15 |             if predicate(val) {\n16 |                 self.next();\n   |                 ^^^^ second mutable borrow occurs here\n...\n20 |         }\n   |         - first borrow ends here\n</code></pre>\n"}, {"tags": ["c", "rust"], "comments": [{"owner": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 10, "creation_date": 1464509636, "post_id": 37507592, "comment_id": 62509484, "body": "Also, you&#39;re benchmarking code that includes I/O, so it&#39;s basically meaningless."}, {"owner": {"reputation": 24966, "user_id": 2001031, "user_type": "registered", "accept_rate": 93, "profile_image": "https://www.gravatar.com/avatar/bd4f0d39f82be9c22f6f01c80d7ad800?s=128&d=identicon&r=PG", "display_name": "Neil Slater", "link": "https://stackoverflow.com/users/2001031/neil-slater"}, "reply_to_user": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 1, "creation_date": 1464509713, "post_id": 37507592, "comment_id": 62509506, "body": "@OliverCharlesworth: That could be part of the answer. My first suspicion would be that Rust has some optimised (or with less features) console output compared with C."}, {"owner": {"reputation": 51929, "user_id": 1084774, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/13403db744d8aa130bb317576cc1df30?s=128&d=identicon&r=PG", "display_name": "PSkocik", "link": "https://stackoverflow.com/users/1084774/pskocik"}, "edited": false, "score": 3, "creation_date": 1464510197, "post_id": 37507592, "comment_id": 62509616, "body": "Last time I checked, the POSIX mandated locking glibc stdio  was slower compared to classic stdio about 4 times. It might be the culprit."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "reply_to_user": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 0, "creation_date": 1464510343, "post_id": 37507592, "comment_id": 62509639, "body": "@OliverCharlesworth I can live with the downvotes, but if the question is closed I will not get an answer and I am curious and need an answer because Rust is a promise."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 0, "creation_date": 1464510467, "post_id": 37507592, "comment_id": 62509672, "body": "IO has nothing to do with this performance gain. Increase the constants 10 times or 1000 times, you get as much IO (about 200 characters) and the program runs for seconds or minutes. The difference in performance between C and Rust remains the same -- 3 times."}, {"owner": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 4, "creation_date": 1464510708, "post_id": 37507592, "comment_id": 62509723, "body": "Also worth noting that <code>i64</code> != <code>double</code>..."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "reply_to_user": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 0, "creation_date": 1464511479, "post_id": 37507592, "comment_id": 62509903, "body": "@OliverCharlesworth that&#39;s just another way to compare <code>a modulo 1e5</code>."}, {"owner": {"reputation": 251753, "user_id": 129570, "user_type": "registered", "accept_rate": 79, "profile_image": "https://www.gravatar.com/avatar/aa98a2c5baceef5ffcaf95fdde12b8fb?s=128&d=identicon&r=PG", "display_name": "Oliver Charlesworth", "link": "https://stackoverflow.com/users/129570/oliver-charlesworth"}, "edited": false, "score": 3, "creation_date": 1464511544, "post_id": 37507592, "comment_id": 62509922, "body": "@exebook - But you&#39;re using fundamentally different types.  Why would you expect the performance to be the same?"}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 0, "creation_date": 1464512033, "post_id": 37507592, "comment_id": 62510033, "body": "Benchmarks that measure useless code are useless. To get meaningful benchmark results, benchmark meaningful programs."}, {"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 1, "creation_date": 1464512180, "post_id": 37507592, "comment_id": 62510069, "body": "If you guys are so knowledgable why nobody answers the question."}, {"owner": {"reputation": 94553, "user_id": 775806, "user_type": "registered", "accept_rate": 96, "profile_image": "https://i.stack.imgur.com/XNd2C.png?s=128&g=1", "display_name": "n. &#39;pronouns&#39; m.", "link": "https://stackoverflow.com/users/775806/n-pronouns-m"}, "edited": false, "score": 2, "creation_date": 1464512287, "post_id": 37507592, "comment_id": 62510097, "body": "Because you don&#39;t have a valid question. You are asking &quot;Why Rust outperforms C&quot; without having shown that Rust does in fact outperform C, or anything close to that."}, {"owner": {"reputation": 51929, "user_id": 1084774, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/13403db744d8aa130bb317576cc1df30?s=128&d=identicon&r=PG", "display_name": "PSkocik", "link": "https://stackoverflow.com/users/1084774/pskocik"}, "edited": false, "score": 1, "creation_date": 1464514607, "post_id": 37507592, "comment_id": 62510612, "body": "The question does not deserve the downvotes: it does show research effort, it is a clear question, and it is useful. But it does deserve a close, because it&#39;s centered on what&#39;s basically a typo."}], "answers": [{"comments": [{"owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 0, "creation_date": 1464512743, "post_id": 37507991, "comment_id": 62510201, "body": "How to do it the other way around (use float in Rust)?"}, {"owner": {"reputation": 51929, "user_id": 1084774, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/13403db744d8aa130bb317576cc1df30?s=128&d=identicon&r=PG", "display_name": "PSkocik", "link": "https://stackoverflow.com/users/1084774/pskocik"}, "reply_to_user": {"reputation": 44802, "user_id": 2752075, "user_type": "registered", "accept_rate": 89, "profile_image": "https://i.stack.imgur.com/5oQlf.png?s=128&g=1", "display_name": "HolyBlackCat", "link": "https://stackoverflow.com/users/2752075/holyblackcat"}, "edited": false, "score": 1, "creation_date": 1464512790, "post_id": 37507991, "comment_id": 62510210, "body": "@HolyBlackCat Good point (though portability is probably not much of a concern in quick and dirty benchmarks)."}, {"owner": {"reputation": 426981, "user_id": 596781, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/a18405dd4b022837867d1f5453a05f41?s=128&d=identicon&r=PG", "display_name": "Kerrek SB", "link": "https://stackoverflow.com/users/596781/kerrek-sb"}, "reply_to_user": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "edited": false, "score": 0, "creation_date": 1464514087, "post_id": 37507991, "comment_id": 62510489, "body": "@exebook: Change the types. E.g. replace <code>i64</code> with <code>f64</code>, and change all the literals."}], "tags": [], "owner": {"reputation": 51929, "user_id": 1084774, "user_type": "registered", "accept_rate": 71, "profile_image": "https://www.gravatar.com/avatar/13403db744d8aa130bb317576cc1df30?s=128&d=identicon&r=PG", "display_name": "PSkocik", "link": "https://stackoverflow.com/users/1084774/pskocik"}, "is_accepted": false, "score": 4, "last_activity_date": 1464513058, "last_edit_date": 1464513058, "creation_date": 1464512245, "answer_id": 37507991, "question_id": 37507592, "link": "https://stackoverflow.com/questions/37507592/why-rust-outperforms-c-so-much/37507991#37507991", "title": "Why Rust outperforms C so much", "body": "<p>Substitute </p>\n\n<pre><code>int64_t a = 3000000, b;\n</code></pre>\n\n<p>for</p>\n\n<pre><code>double a = 3000000, b;\n</code></pre>\n\n<p>to make it equivalent (on a 64 bit arch.) with </p>\n\n<pre><code>   let mut a:i64 = 3000000;\n   //...\n   let mut b = (a / 100000) as i64;\n</code></pre>\n\n<p>and C wins (even with stdio).\nOn my PC, C is about 1.4\u20131.5 times faster (-O3, measured on a 100-iteration shell for-loop to discount startup overhead).</p>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 474, "favorite_count": 2, "closed_date": 1464527133, "answer_count": 1, "score": -7, "last_activity_date": 1464513058, "creation_date": 1464509073, "last_edit_date": 1464509793, "question_id": 37507592, "link": "https://stackoverflow.com/questions/37507592/why-rust-outperforms-c-so-much", "closed_reason": "Not suitable for this site", "title": "Why Rust outperforms C so much", "body": "<p>For many years I use this very simple program to get a rough estimate of the programming language performance. I have a dozen of versions in Ruby (600 ms), Python (1500 ms), JavaScript (45 ms), C (25 ms both GCC/Clang on my notebook) and other languages. Do not make serious conclusions based on such a simple benchmark, because it is far from any real life case. I call it \"classic\" simply because I use it for decades already. Maybe even saying \"a rough estimate\" is too much. This test is extremely simple, mostly because writing better test for a language you do not know is time consuming and I usually write it when I get my hands on the new language for the first time. Sometimes, though, I will run the test few years later when the compiler/interpreter gets an update. Anyway recently I ported this test to(for?) Rust and was really surprised because it outperformed previous record holder C about three times (7 ms!~@!). My question is for those who know something about Rust compilation, why is it so fast? I know it uses LLVM just as Clang so I expected about the same speed (Just as Nim performs about as C because it compiles to C, though not very efficiently and is still about two time slower than C when this simple benchmark is run).</p>\n\n<p><strong>Rust</strong></p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>// rustc --color always -C opt-level=3 -C prefer-dynamic classic.rs  -C link-args=-s -o classic.rust\n\nuse std::ptr;\n\n#[repr(C)]\nstruct timeval {\n    tv_sec: i64,\n    tv_usec: i64\n}\n\nextern {\n    fn gettimeofday(tv: &amp;mut timeval, tzp: *const ()) -&gt; i32;\n}\n\nfn time1000() -&gt; i64 {\n    let mut tv = timeval { tv_sec: 0, tv_usec: 0 };\n    unsafe {\n        gettimeofday(&amp;mut tv, ptr::null());\n    }\n    tv.tv_sec * 1000 + tv.tv_usec / 1000\n}\n\nfn classic() {\n    let mut a:i64 = 3000000;\n    loop {\n        a = a - 1;\n        if a == 0 { break; }\n        let mut b = (a / 100000) as i64;\n        b = b * 100000;\n        if a == b { print!(\"{} \", a); }\n    }\n}\n\nfn main() {\n    let mut t = time1000();\n    classic();\n    t = time1000() - t;\n    println!(\"{}\", t);\n}\n</code></pre>\n\n<p><strong>C</strong></p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#include \"stdio.h\"\n#include &lt;sys/time.h&gt;\n\nlong time1000() {\n    struct timeval val;\n    gettimeofday(&amp;val, 0);\n    return val.tv_sec * 1000 + val.tv_usec / 1000;\n}\n\nvoid classic() {\n    double a = 3000000, b;\n    while (1) {\n        a--;\n        if (a == 0) break;\n        b = a / 100000;\n        b = (int) b;\n        b *= 100000;\n        if (a == b) { printf(\"%i \", (int)a); }\n    }\n}\n\nint main() {\n    int T = time1000();\n    classic();\n    T = time1000() - T;\n    printf(\"%i\", (int)T);\n}\n</code></pre>\n"}, {"tags": ["c", "rust"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 1, "creation_date": 1464509094, "post_id": 37506703, "comment_id": 62509355, "body": "I think it&#39;s saying () isn&#39;t a C type, so it doesn&#39;t make sense to pass a pointer to one to C. You should declare <code>struct tz</code> too. Also, I&#39;m not sure it&#39;s correct to pass a reference, rather than a raw pointer."}], "answers": [{"tags": [], "owner": {"reputation": 51497, "user_id": 49246, "user_type": "registered", "accept_rate": 73, "profile_image": "https://www.gravatar.com/avatar/c421b43470bb8d3c099c5a847e588549?s=128&d=identicon&r=PG", "display_name": "starblue", "link": "https://stackoverflow.com/users/49246/starblue"}, "is_accepted": false, "score": 3, "last_activity_date": 1464510187, "creation_date": 1464510187, "answer_id": 37507729, "question_id": 37506703, "link": "https://stackoverflow.com/questions/37506703/how-do-i-fix-the-found-rust-tuple-type-in-foreign-module-consider-using-a-stru/37507729#37507729", "title": "How do I fix the &quot;found Rust tuple type in foreign module; consider using a struct instead&quot; warning", "body": "<p><code>()</code> is a tuple (the empty tuple).  The memory layout of tuples is not guaranteed to be compatible with C, so tuples shouldn't be used in a foreign function interface. Hence the warning.</p>\n\n<p>Instead of a tuple you should use a struct, <a href=\"https://doc.rust-lang.org/book/ffi.html#interoperability-with-foreign-code\" rel=\"nofollow\">as the representation of structs is guaranteed to be compatible with C</a>.</p>\n\n<p>So to get rid of the warning you could define some dummy struct and use it as the type for the tzp null pointer.</p>\n"}, {"tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 1, "last_activity_date": 1464523450, "creation_date": 1464523450, "answer_id": 37509683, "question_id": 37506703, "link": "https://stackoverflow.com/questions/37506703/how-do-i-fix-the-found-rust-tuple-type-in-foreign-module-consider-using-a-stru/37509683#37509683", "title": "How do I fix the &quot;found Rust tuple type in foreign module; consider using a struct instead&quot; warning", "body": "<p>A quick an dirty solution is to define a empty <code>tz</code> enum and declare <code>tzp:*const tz</code>. As you use <code>ptr::null()</code> for <code>tzp</code>, that is fine.</p>\n\n<pre><code>enum tz {}\n\nextern \"C\" {\n    fn gettimeofday(tv: &amp;mut timeval, tzp: *const tz) -&gt; i32;\n}\n</code></pre>\n\n<p>But you should be using <code>libc</code> crate instead of creating your own binding. The <code>libc</code> crate works on many platforms, and your bind does not. For example, you are assuming that <code>time_t</code> (type of <code>tv_sec</code>) is <code>i64</code>, but <a href=\"https://github.com/rust-lang/libc/search?q=time_t&amp;type=Code\" rel=\"nofollow\">it can be</a> <code>i32</code> in some platforms.</p>\n\n<pre><code>extern crate libc;\n\nuse std::ptr;\nuse libc::{timeval, gettimeofday};\n\nfn time1000() -&gt; i64 {\n    let mut tv = timeval { tv_sec: 0, tv_usec: 0 };\n    unsafe {\n        gettimeofday(&amp;mut tv, ptr::null_mut());\n    }\n    (tv.tv_sec as i64) * 1000 + (tv.tv_usec as i64) / 1000\n}\n</code></pre>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 148, "favorite_count": 0, "answer_count": 2, "score": 1, "last_activity_date": 1464570689, "creation_date": 1464501412, "last_edit_date": 1464570689, "question_id": 37506703, "link": "https://stackoverflow.com/questions/37506703/how-do-i-fix-the-found-rust-tuple-type-in-foreign-module-consider-using-a-stru", "title": "How do I fix the &quot;found Rust tuple type in foreign module; consider using a struct instead&quot; warning", "body": "<pre><code>use std::ptr;\n\n#[repr(C)]\nstruct timeval {\n    tv_sec: i64,\n    tv_usec: i64\n}\n\nextern {\n    fn gettimeofday(tv: &amp;mut timeval, tzp: *const ()) -&gt; i32;\n}\n\nfn time1000() -&gt; i64 {\n    let mut tv = timeval { tv_sec: 0, tv_usec: 0 };\n    unsafe {\n        gettimeofday(&amp;mut tv, ptr::null());\n    }\n    tv.tv_sec * 1000 + tv.tv_usec / 1000\n}\n</code></pre>\n\n<p>The code above works, but I get this warning:</p>\n\n<pre><code>test.rs:10:44: 10:53 warning: found Rust tuple type\n    in foreign module; consider using a struct instead`, #\n[warn(improper_ctypes)] on by default\ntest.rs:10     fn gettimeofday(tv: &amp;mut timeval, tzp: *const ()) -&gt; i32;\n                                                      ^~~~~~~~~\n</code></pre>\n\n<p>The message is verbose, but I am unable to understand what is wrong with this <code>*const()</code> thing and how to satisfy the compiler here.</p>\n"}, {"tags": ["rust"], "answers": [{"tags": [], "owner": {"reputation": 477, "user_id": 1923787, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/uZHUn.jpg?s=128&g=1", "display_name": "Navid Nabavi", "link": "https://stackoverflow.com/users/1923787/navid-nabavi"}, "is_accepted": false, "score": 2, "last_activity_date": 1464502966, "creation_date": 1464502966, "answer_id": 37506878, "question_id": 37506672, "link": "https://stackoverflow.com/questions/37506672/convert-float-to-integer-in-rust/37506878#37506878", "title": "Convert float to integer in Rust", "body": "<p>This is an example of round in Rust.\nYou have to write numeric constants right the type they are:\nfor example if d is f64 and you want to multiply it by 10 the right convention is to write:\nd * 10.0\ninstead of:\nd * 10</p>\n\n<p>and explicitly define the type of your variable to make the round function available in this cases.</p>\n\n<pre><code>let a = 2e50;\nlet mut b : f64 = a / 100000.0;\nb = b.round();\nprintln!(\"{}\", b);\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 51244, "user_id": 952747, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/86ebf3cf751f63acb38e763f7104a318?s=128&d=identicon&r=PG&f=1", "display_name": "masoud", "link": "https://stackoverflow.com/users/952747/masoud"}, "is_accepted": false, "score": 9, "last_activity_date": 1464504721, "last_edit_date": 1464504721, "creation_date": 1464504265, "answer_id": 37507040, "question_id": 37506672, "link": "https://stackoverflow.com/questions/37506672/convert-float-to-integer-in-rust/37507040#37507040", "title": "Convert float to integer in Rust", "body": "<p>To cast a float to an integer, you can use <a href=\"https://doc.rust-lang.org/nomicon/casts.html\" rel=\"noreferrer\"><code>as</code></a>. For example:</p>\n\n<pre><code>let b = (a / 100000.0) as i64;\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 71, "last_activity_date": 1464519954, "last_edit_date": 1464519954, "creation_date": 1464515967, "answer_id": 37508518, "question_id": 37506672, "link": "https://stackoverflow.com/questions/37506672/convert-float-to-integer-in-rust/37508518#37508518", "title": "Convert float to integer in Rust", "body": "<blockquote>\n  <p>Especially the line #2 that rounds the number.</p>\n</blockquote>\n\n<p>First of all: this is not true. To \"round\" a real number is to return the nearest integer. You just convert it to <code>int</code> which discards all the non-integer parts. </p>\n\n<hr>\n\n<p>But here is the Rust equivalent of your exact code (assuming <code>a</code> has the type <code>f64</code>):</p>\n\n<pre><code>let b = a / 100_000.0;    // underscore in number to increase readability\nlet b = b as i64;\nlet b = b * 100_000;\n</code></pre>\n\n<p>Which, of course, can be written in one line, too:</p>\n\n<pre><code>let b = ((a / 100_000.0) as i64) * 100_000;\n</code></pre>\n\n<p>If you wanted to round instead of just taking the integer part, you can use the <a href=\"http://doc.rust-lang.org/std/primitive.f64.html#method.round\" rel=\"noreferrer\"><code>round</code></a> method of <code>f64</code>:</p>\n\n<pre><code>let b = ((a / 100_000.0).round() as i64) * 100_000;\n</code></pre>\n\n<hr>\n\n<p>Note that there are also <a href=\"http://doc.rust-lang.org/std/primitive.f64.html#method.trunc\" rel=\"noreferrer\"><code>trunc</code></a>, <a href=\"http://doc.rust-lang.org/std/primitive.f64.html#method.ceil\" rel=\"noreferrer\"><code>ceil</code></a> and <a href=\"http://doc.rust-lang.org/std/primitive.f64.html#method.floor\" rel=\"noreferrer\"><code>floor</code></a>. You can use one of those methods to exactly control what happens instead of relying on the cast. <a href=\"https://doc.rust-lang.org/book/casting-between-types.html#numeric-casts\" rel=\"noreferrer\">From the Rust book</a> we can learn:</p>\n\n<blockquote>\n  <p>Casting from a float to an integer will round the float towards zero.</p>\n</blockquote>\n\n<p>This behavior is equivalent to <code>trunc</code>, but if the behavior does matter to you, you should use <code>trunc</code> to ...</p>\n\n<ol>\n<li>... express your intent in code</li>\n<li>... have valid semantics even if the Rust compiler changes the cast semantics</li>\n</ol>\n"}], "owner": {"reputation": 27031, "user_id": 1968972, "user_type": "registered", "accept_rate": 61, "profile_image": "https://www.gravatar.com/avatar/bfdd4ec8dff5c7635520fe98348524ec?s=128&d=identicon&r=PG", "display_name": "exebook", "link": "https://stackoverflow.com/users/1968972/exebook"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 35374, "favorite_count": 6, "accepted_answer_id": 37508518, "answer_count": 3, "score": 47, "last_activity_date": 1573540070, "creation_date": 1464501209, "question_id": 37506672, "link": "https://stackoverflow.com/questions/37506672/convert-float-to-integer-in-rust", "title": "Convert float to integer in Rust", "body": "<pre><code>double b = a / 100000;\nb = (int) b;\nb *= 100000;\n</code></pre>\n\n<p>How the above C code is converted to Rust? Especially the line #2 that rounds the number.</p>\n"}, {"tags": ["regex", "rust", "rust-cargo"], "comments": [{"owner": {"reputation": 10655, "user_id": 4529124, "user_type": "registered", "accept_rate": 85, "profile_image": "https://i.stack.imgur.com/4P3eZ.png?s=128&g=1", "display_name": "Chris Emerson", "link": "https://stackoverflow.com/users/4529124/chris-emerson"}, "edited": false, "score": 2, "creation_date": 1464508812, "post_id": 37506076, "comment_id": 62509306, "body": "I think you&#39;re saying that it&#39;s not Cargo that&#39;s the problem, but the combined size of the Regex crate and its dependencies. The only alternative I can think of would be to wrap a C/C++ regex engine such as pcre with the ffi (and don&#39;t count its size, assuming it&#39;s already installed)."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 0, "creation_date": 1464520874, "post_id": 37506076, "comment_id": 62512351, "body": "You can cause a single Cargo project to compile multiple binaries, which technically satisfies your criteria for keeping everything in the same directory. You can also eliminate the <code>src</code> directory itself by explicitly setting a path to your source in your <code>Cargo.toml</code>."}, {"owner": {"reputation": 10100, "user_id": 619216, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/c07104de771c3b6f6c30be8f592ef8f7?s=128&d=identicon&r=PG", "display_name": "BurntSushi5", "link": "https://stackoverflow.com/users/619216/burntsushi5"}, "edited": false, "score": 1, "creation_date": 1464520942, "post_id": 37506076, "comment_id": 62512369, "body": "You could use the regex crate without Cargo, but you&#39;d have to repeat all the work Cargo is doing for you. For example, the regex crate has several dependencies that you would also have to install."}, {"owner": {"reputation": 78771, "user_id": 831878, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/1d1a4823c46ad92f357b4bb7e74a64b0?s=128&d=identicon&r=PG", "display_name": "Ray Toal", "link": "https://stackoverflow.com/users/831878/ray-toal"}, "edited": false, "score": 0, "creation_date": 1464538974, "post_id": 37506076, "comment_id": 62517952, "body": "RIght, there&#39;s really no <i>problem</i> here. I understand Rust is more of an enterprise or system language that a scripting language and was just trying things out. I can even live with the size of the executable and the dependencies as that is what you get with any kind of build system producing fast, native executables, with a large ecosystem. i&#39;m certainly not faulting Rust here, but was wondering if I could build an executable with a -L and not be restricted to Cargo&#39;s opinionated source directory structure. I think multiple-binary cargo projects is the best option."}], "answers": [{"comments": [{"owner": {"reputation": 78771, "user_id": 831878, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/1d1a4823c46ad92f357b4bb7e74a64b0?s=128&d=identicon&r=PG", "display_name": "Ray Toal", "link": "https://stackoverflow.com/users/831878/ray-toal"}, "edited": false, "score": 0, "creation_date": 1464539366, "post_id": 37509318, "comment_id": 62518080, "body": "Ah, I was not aware of the multiple binary project!"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 1, "last_activity_date": 1464524204, "last_edit_date": 1464524204, "creation_date": 1464521121, "answer_id": 37509318, "question_id": 37506076, "link": "https://stackoverflow.com/questions/37506076/how-can-i-use-regexes-in-rust-without-cargo/37509318#37509318", "title": "How can I use regexes in Rust without Cargo?", "body": "<blockquote>\n  <p>Is there built-in support for regular expressions in Rust</p>\n</blockquote>\n\n<p>No, but the regex crate <a href=\"https://github.com/BurntSushi/rfcs/blob/regex-1.0/text/0000-regex-1.0.md\" rel=\"nofollow\">will (probably) be</a> the standard (out of <code>std</code>?) regex library for Rust.</p>\n\n<blockquote>\n  <p>or some way to keep my wordcount script in the same directory as my other scripts?</p>\n</blockquote>\n\n<p>A Cargo project can have <a href=\"http://doc.crates.io/manifest.html#the-project-layout\" rel=\"nofollow\">more than</a> one executable. Just put each main file in <code>src/bin</code>.</p>\n"}], "owner": {"reputation": 78771, "user_id": 831878, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/1d1a4823c46ad92f357b4bb7e74a64b0?s=128&d=identicon&r=PG", "display_name": "Ray Toal", "link": "https://stackoverflow.com/users/831878/ray-toal"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 660, "favorite_count": 0, "accepted_answer_id": 37509318, "answer_count": 1, "score": 6, "last_activity_date": 1466521214, "creation_date": 1464495104, "last_edit_date": 1466521214, "question_id": 37506076, "link": "https://stackoverflow.com/questions/37506076/how-can-i-use-regexes-in-rust-without-cargo", "title": "How can I use regexes in Rust without Cargo?", "body": "<p>I was writing a few small scripts in Rust. These can be run via a command like</p>\n\n<pre><code>$ rustc dosomething.rs &amp;&amp; ./dosomething\n</code></pre>\n\n<p>These work great. However, I ran into a case where I needed to use regexes. I began the script with <code>extern crate regex;</code> It <em>appears</em> that this means I need to run my script via Cargo. The only way I managed to run this tiny script using regexes was to force my script into its own directory, with the following structure:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 src\n \u00a0\u00a0 \u2514\u2500\u2500 main.rs\n</code></pre>\n\n<p>I loaded up <code>Cargo.toml</code> with</p>\n\n<pre><code>[package]\nname = \"wordcount\"\nversion = \"0.0.1\"\n\n[dependencies]\nregex = \"0.1\"\n</code></pre>\n\n<p>and dutifully ran <code>cargo build</code> and got my running executable.</p>\n\n<p>However, when computing the disk space used by the Cargo artifacts I found them to be made up of 17 files, 21 directories, and 23 megabytes used.</p>\n\n<p>Now this is perfectly fine when running large applications; I've seem small Java applications where Maven downloads so many jars that 23M is microscopic.</p>\n\n<p>I'm simply wondering whether there is not some other way to write scripts using regular expressions in Rust. (Yes, I do want regexes because of the ease of using <code>\\pL</code>.)</p>\n\n<p>Is there built-in support for regular expressions in Rust or some way to keep my wordcount script in the same directory as my other scripts? Is there some analog of the <code>-L</code> flag, perhaps?</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 559, "user_id": 2358968, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c924ddc496c7ec283fdbfb8f2c594539?s=128&d=identicon&r=PG", "display_name": "franleplant", "link": "https://stackoverflow.com/users/2358968/franleplant"}, "edited": false, "score": 0, "creation_date": 1464531586, "post_id": 37505368, "comment_id": 62515619, "body": "MIND BLOW. Excelente answer. I will need some time to completely process what you taught me but this is amazing. Thanks a lot!"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 4, "last_activity_date": 1464486467, "last_edit_date": 1495542242, "creation_date": 1464486009, "answer_id": 37505368, "question_id": 37504162, "link": "https://stackoverflow.com/questions/37504162/shared-circular-references-in-rust/37505368#37505368", "title": "Shared circular references in Rust", "body": "<blockquote>\n  <p>I need to be able to call methods of the thread pool from inside any thread</p>\n</blockquote>\n\n<p>This requires that the thread pool data be in a mutual-exclusion mechanism, like <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html\" rel=\"nofollow noreferrer\"><code>Mutex</code></a> or <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.RwLock.html\" rel=\"nofollow noreferrer\"><code>RwLock</code></a> (<code>RefCell</code> is not appropriate for multi-threaded situations, see <a href=\"http://doc.rust-lang.org/stable/book/choosing-your-guarantees.html\" rel=\"nofollow noreferrer\">the book</a>). Besides, each thread must keep a reference to the thread pool data, as the thread pool stores the threads, this creates a <a href=\"https://stackoverflow.com/questions/32300132/why-cant-i-store-a-value-and-a-reference-to-that-value-in-the-same-struct\">problem</a>. To solve this problem, we can put the thread pool data in an <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Arc.html\" rel=\"nofollow noreferrer\"><code>Arc</code></a> and store a <a href=\"https://doc.rust-lang.org/stable/std/sync/struct.Weak.html\" rel=\"nofollow noreferrer\"><code>Weak</code></a> reference to it in each thread. Note that we use weak references to avoid <a href=\"https://en.wikipedia.org/wiki/Reference_counting#Dealing_with_reference_cycles\" rel=\"nofollow noreferrer\">reference cycles</a>.</p>\n\n<blockquote>\n  <p>that effectively end up mutating 1 or more threads (the caller and the targets).</p>\n</blockquote>\n\n<p>This requires that the thread data be in a mutual-exclusion mechanism. To finalize the requirements, note that as the thread pool data is in a <code>Mutex</code>, we cannot return references to threads (that would require keeping the thread pool data locked), so we also put thread data in a <code>Arc</code>.</p>\n\n<p>Here is an example of implementation using <code>Mutex</code> (<a href=\"https://play.rust-lang.org/?gist=cef7c608b070c8265c7d1e8a533cefc5&amp;version=stable&amp;backtrace=0\" rel=\"nofollow noreferrer\">Playground</a>):</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::sync::{Arc, Weak, Mutex};\n\ntype Id = u32;\n\nstruct ThreadPool {\n    inner: Arc&lt;Mutex&lt;ThreadPoolInner&gt;&gt;,\n}\n\nstruct ThreadPoolInner {\n    pool: HashMap&lt;Id, Arc&lt;Mutex&lt;ThreadInner&gt;&gt;&gt;,\n    id_count: Id,\n}\n\nimpl ThreadPool {\n    fn new() -&gt; ThreadPool {\n        let inner = ThreadPoolInner {\n            pool: HashMap::new(),\n            id_count: 0,\n        };\n        ThreadPool { inner: Arc::new(Mutex::new(inner)) }\n    }\n\n    fn create(&amp;self) -&gt; Thread {\n        let mut inner = self.inner.lock().unwrap();\n        let thread = Thread {\n            inner: Arc::new(Mutex::new(ThreadInner {\n                id: inner.id_count,\n                pool: Arc::downgrade(&amp;self.inner),\n            })),\n        };\n        inner.id_count += 1;\n        let id = inner.id_count;\n        inner.pool.insert(id, thread.inner.clone());\n        thread\n    }\n\n    fn get(&amp;self, id: Id) -&gt; Option&lt;Thread&gt; {\n        let inner = self.inner.lock().unwrap();\n        inner.pool.get(&amp;id).map(|t| Thread { inner: t.clone() })\n    }\n\n    fn some_mut_method(&amp;self) {\n        let _inner = self.inner.lock().unwrap();\n        println!(\"something with pool\");\n    }\n}\n\nstruct Thread {\n    inner: Arc&lt;Mutex&lt;ThreadInner&gt;&gt;,\n}\n\nimpl Thread {\n    fn get_pool(&amp;self) -&gt; Option&lt;ThreadPool&gt; {\n        let inner = self.inner.lock().unwrap();\n        // pool is a weak reference, upgrate try to get an Arc from it\n        inner.pool.upgrade().map(|inner| ThreadPool { inner: inner })\n    }\n\n    fn some_mut_method(&amp;self) {\n        if let Some(pool) = self.get_pool() {\n            pool.some_mut_method();\n            let _t2 = pool.get(2).unwrap();\n            println!(\"something with t2\");\n        }\n    }\n}\n\n#[derive(Clone)]\nstruct ThreadInner {\n    id: Id,\n    pool: Weak&lt;Mutex&lt;ThreadPoolInner&gt;&gt;,\n}\n\nfn main() {\n    let pool = ThreadPool::new();\n    let t1 = pool.create();\n    let _t2 = pool.create();\n    t1.some_mut_method();\n}\n</code></pre>\n"}], "owner": {"reputation": 559, "user_id": 2358968, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/c924ddc496c7ec283fdbfb8f2c594539?s=128&d=identicon&r=PG", "display_name": "franleplant", "link": "https://stackoverflow.com/users/2358968/franleplant"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1081, "favorite_count": 0, "accepted_answer_id": 37505368, "answer_count": 1, "score": 2, "last_activity_date": 1464486467, "creation_date": 1464473375, "last_edit_date": 1464474096, "question_id": 37504162, "link": "https://stackoverflow.com/questions/37504162/shared-circular-references-in-rust", "title": "Shared circular references in Rust", "body": "<p>I'm trying to implement a very naive Thread Pool model. For now the responsibilities of the thread pool are:</p>\n\n<ul>\n<li><code>create</code> a new thread and return a reference to it</li>\n<li>Maintain a map of created threads</li>\n<li>Mutate threads according to different events triggered by threads</li>\n</ul>\n\n<p>My main problem is that the requirement above forces me to let the thread pool keep a <code>HashMap&lt;Id, Thread&gt;</code> of threads, but also provide a reference to threads when they are created.</p>\n\n<p>On top of that, I need to be able to call methods of the thread pool from inside any thread that effectively end up mutating 1 or more threads (the caller and the targets).</p>\n\n<p>Here is a non functional implementation:</p>\n\n<pre><code>use std::collections::HashMap;\nuse std::cell::RefCell;\n\ntype Id = u32;\ntype ThreadPoolRef = RefCell&lt;ThreadPool&gt;;\n\n#[derive(Debug)]\nstruct ThreadPool {\n    pool: HashMap&lt;Id, RefCell&lt;Thread&gt;&gt;,\n    id_count: Id\n}\n\nimpl ThreadPool {\n    fn new() -&gt; ThreadPool {\n        ThreadPool {\n            pool: HashMap::new(),\n            id_count: 1\n        }\n    }\n\n    fn create(&amp;mut self) -&gt; &amp;RefCell&lt;Thread&gt; {\n        let thread: RefCell&lt;Thread&gt; =\n            RefCell::new(\n                Thread::new(self.id_count, RefCell::new(self))\n            );\n        self.id_count = self.id_count + 1;\n        self.pool.insert(self.id_count, thread);\n        self.pool.get(&amp;self.id_count).unwrap()\n    }\n}\n\n#[derive(Debug, Clone)]\nstruct Thread {\n    id: Id,\n    pool: ThreadPoolRef\n}\n\nimpl Thread {\n    fn new(id: Id, pool: ThreadPoolRef) -&gt; Thread {\n        Thread {\n            id: id,\n            pool: pool\n        }\n    }\n}\n\nfn main() {\n    let thread_pool = ThreadPool::new();\n    let thread1 = thread_pool.create();\n    let thread2 = thread_pool.create();\n    // The final goal is to call thread1.method()\n    // that mutates thread1 and calls thread_pool.method2()\n    // which in turn will call thread2.method3() that will effectively\n    // mutate thread 2\n}\n</code></pre>\n\n<p><a href=\"https://play.rust-lang.org/?gist=a9e1c7d184cbd1c91b79934abfd54cfa&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Rust Play</a></p>\n\n<p>I tried several things, like the use of <code>RefCell</code> but I started to get a lot of lifetime parameters missing errors.</p>\n\n<p>This is a stripped-down version that I expect to be the most simple to explain.</p>\n"}, {"tags": ["rust", "ownership-semantics"], "answers": [{"comments": [{"owner": {"reputation": 11, "user_id": 4752169, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JbVcc.png?s=128&g=1", "display_name": "achampion", "link": "https://stackoverflow.com/users/4752169/achampion"}, "edited": false, "score": 0, "creation_date": 1464472161, "post_id": 37503314, "comment_id": 62503117, "body": "Right, I forgot to mention my solution is not wrapped in a function, it&#39;s just right where you construct the <code>Arg</code> and the <code>App</code>."}], "tags": [], "owner": {"reputation": 11, "user_id": 4752169, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JbVcc.png?s=128&g=1", "display_name": "achampion", "link": "https://stackoverflow.com/users/4752169/achampion"}, "is_accepted": false, "score": 0, "last_activity_date": 1464472247, "last_edit_date": 1495539925, "creation_date": 1464465982, "answer_id": 37503314, "question_id": 37502627, "link": "https://stackoverflow.com/questions/37502627/clone-string-to-specific-lifetime/37503314#37503314", "title": "Clone String to Specific Lifetime", "body": "<p><a href=\"https://stackoverflow.com/a/37500808/4752169\">This answer</a> explains what the problem is.</p>\n\n<p>A solution here would be to retrieve the user name (if any) so that you have it as a <code>String</code> you can then take a reference on.</p>\n\n<pre><code>let user_name = match env::var(\"USERNAME\") {\n    Ok(user_name) =&gt; Some( user_name ),\n    Err(_) =&gt; None,\n} ;\n// Now we can take a reference on the user name String (if any) that can live\n// long enough for the arg.\nlet arg = match user_name {\n    Some(ref name) =&gt; arg.default_value(name),\n    None =&gt; arg.required(true),\n} ;\n</code></pre>\n\n<p>Working example:</p>\n\n<pre><code>extern crate clap ;\n\nuse std::env;\nuse clap::* ;\n\nfn main() {\n    let arg = Arg::with_name(\"Username\")\n        .help(\"The user name\")\n        .short(\"u\")\n        .long(\"username\")\n        .takes_value(true);\n\n    let user_name = match env::var(\"USERNAME\") {\n        Ok(user_name) =&gt; Some(user_name),\n        Err(_) =&gt; None,\n    };\n\n    let arg = match user_name {\n        Some(ref name) =&gt; arg.default_value(name),\n        None =&gt; arg.required(true),\n    };\n\n    let app = App::new(\"Test\").arg(arg);\n\n    let matches = app.get_matches();\n\n    match matches.value_of(\"username\") {\n        Some(name) =&gt; println!(\"name: \\\"{}\\\"\", name),\n        None =&gt; println!(\"no name :(\"),\n    }\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 371, "user_id": 4770579, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-eEpUxZKiIQ0/AAAAAAAAAAI/AAAAAAAAAB0/NgasOrZddng/photo.jpg?sz=128", "display_name": "Jonathan Boudreau", "link": "https://stackoverflow.com/users/4770579/jonathan-boudreau"}, "edited": false, "score": 0, "creation_date": 1464467652, "post_id": 37503332, "comment_id": 62501954, "body": "My goal is to keep things organized in a way that all of the logic for the <code>Arg</code> creation stays in the <code>get_username_arg</code> function. Aside from the lifetimes I would prefer the signature stays the same."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": false, "score": 3, "last_activity_date": 1464471309, "last_edit_date": 1464471309, "creation_date": 1464466121, "answer_id": 37503332, "question_id": 37502627, "link": "https://stackoverflow.com/questions/37502627/clone-string-to-specific-lifetime/37503332#37503332", "title": "Clone String to Specific Lifetime", "body": "<p><a href=\"http://kbknapp.github.io/clap-rs/clap/struct.Arg.html#method.default_value\" rel=\"nofollow\"><code>Arg::default_value</code></a> takes a <code>&amp;str</code> as parameter, this means that the string is not stored in <code>Arg</code>, it is stored somewhere else. So the <code>&amp;str</code> value must outlive the <code>Arg</code> that keeps the reference. If you use a <code>&amp;str</code> obtained from a <code>String</code> value created in <code>get_username_arg</code> (that's the case for <code>username</code>), the <code>Arg</code> will outlive the <code>&amp;str</code> (will live outside the <code>get_username_arg</code> while the <code>&amp;str</code> lives only in the <code>Ok</code> block), so this generates a compiler error.</p>\n\n<p>One option is to pass the default username as a parameter:</p>\n\n<pre><code>extern crate clap;\nuse self::clap::Arg;\nuse std::env;\n\npub struct Params;\n\nimpl Params {\n    fn get_username_arg(default: Option&lt;&amp;str&gt;) -&gt; Arg {\n        let arg = Arg::with_name(\"Username\")\n            .short(\"u\")\n            .long(\"username\")\n            .takes_value(true);\n        if let Some(d) = default {\n            arg.default_value(d)\n        } else {\n            arg.required(true)\n        }\n    }\n}\n\nfn main() {\n    // type can be omitted\n    let username: Option&lt;String&gt; = env::var(\"USERNAME\").ok();\n    // username.as_ref() produces Option&lt;&amp;String&gt;\n    // map(String::as_str) produces Some(&amp;str) from Some(&amp;String)\n    // or None from None\n    let arg = Params::get_username_arg(username.as_ref().map(String::as_str));\n}\n</code></pre>\n\n<p>Note that <code>username</code> is declared before <code>arg</code>, so <code>username</code> outlives <code>arg</code>.</p>\n\n<hr>\n\n<blockquote>\n  <p>I'd like to add that its important to me that the signature stays the same aside from the lifetime parameters. I don't mind doing expensive operations such as cloning to make this work.</p>\n</blockquote>\n\n<p>You do not show the <code>Params</code> definition, but it seems that it is just a \"name space\" for some functions. If this is the case, you can change these functions to receive <code>&amp;self</code> as parameter (I know this is changing the signature, but the logic for creating args will stay in <code>Params</code>), and store <code>username</code> in <code>Params</code>:</p>\n\n<pre><code>extern crate clap;\nuse self::clap::Arg;\nuse std::env;\n\npub struct Params {\n    username: Option&lt;String&gt;,\n}\n\nimpl Params {\n    fn new() -&gt; Params {\n        Params {\n            username: env::var(\"USERNAME\").ok(),\n        }\n    }\n\n    fn get_username_arg(&amp;self) -&gt; Arg {\n        let arg = Arg::with_name(\"Username\")\n            .short(\"u\")\n            .long(\"username\")\n            .takes_value(true);\n        if let Some(d) = self.username.as_ref().map(String::as_str) {\n            arg.default_value(d)\n        } else {\n            arg.required(true)\n        }\n    }\n}\n\nfn main() {\n    let params = Params::new();\n    let arg = params.get_username_arg();\n}\n</code></pre>\n"}, {"comments": [{"owner": {"reputation": 371, "user_id": 4770579, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-eEpUxZKiIQ0/AAAAAAAAAAI/AAAAAAAAAB0/NgasOrZddng/photo.jpg?sz=128", "display_name": "Jonathan Boudreau", "link": "https://stackoverflow.com/users/4770579/jonathan-boudreau"}, "edited": false, "score": 0, "creation_date": 1464467204, "post_id": 37503392, "comment_id": 62501835, "body": "I am aware of that, which is why I&#39;m cloning the value. <code>clone</code> in this case has a signature of <code>&lt;&#39;s&gt;clone() -&gt; &amp;&#39;s str</code> if you remove elisions(and reify <code>Self</code>) according to my very limited understanding of Rust in general. So if I clone with <code>clone::&lt;&#39;r&gt;()</code> it should force the lifetime..."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 371, "user_id": 4770579, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-eEpUxZKiIQ0/AAAAAAAAAAI/AAAAAAAAAB0/NgasOrZddng/photo.jpg?sz=128", "display_name": "Jonathan Boudreau", "link": "https://stackoverflow.com/users/4770579/jonathan-boudreau"}, "edited": false, "score": 0, "creation_date": 1464469515, "post_id": 37503392, "comment_id": 62502431, "body": "@JonathanBoudreau added more."}, {"owner": {"reputation": 371, "user_id": 4770579, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-eEpUxZKiIQ0/AAAAAAAAAAI/AAAAAAAAAB0/NgasOrZddng/photo.jpg?sz=128", "display_name": "Jonathan Boudreau", "link": "https://stackoverflow.com/users/4770579/jonathan-boudreau"}, "edited": false, "score": 0, "creation_date": 1464475781, "post_id": 37503392, "comment_id": 62503911, "body": "<code>(&amp;*username).clone</code> has that signature I mean."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 6, "last_activity_date": 1464485599, "last_edit_date": 1495540900, "creation_date": 1464466638, "answer_id": 37503392, "question_id": 37502627, "link": "https://stackoverflow.com/questions/37502627/clone-string-to-specific-lifetime/37503392#37503392", "title": "Clone String to Specific Lifetime", "body": "<p><a href=\"https://stackoverflow.com/a/37503332/155423\">malbarbo has provided some good solutions</a>, but I'd like to discuss some aspects of the non-working code.</p>\n\n<p>Let's start at the function signature:</p>\n\n<pre><code>fn get_username_arg&lt;'r&gt;() -&gt; Arg&lt;'r, 'r&gt; {\n</code></pre>\n\n<p>This says \"for <em>any</em> lifetime that the <strong>caller</strong> of this function picks, I will return an <code>Arg</code> that contains references that will last that long\". That's a pretty difficult promise to uphold, as the caller could request something that meets the <code>'static</code> lifetime, a value that lasts <em>longer than the call to <code>main</code></em>! In fact, the only way that you could meet the obligation of \"any lifetime\" is to return something that is <code>'static</code>. </p>\n\n<p>This is a very good sign that there is going to be a problem. See also <a href=\"https://stackoverflow.com/q/32300132/155423\">Why can&#39;t I store a value and a reference to that value in the same struct?</a>, which shows this case as a constructor. Many people jump to attempting to return the <code>String</code> along with the <code>&amp;str</code>, so that answer might short-circuit that avenue as well. ^_^</p>\n\n<blockquote>\n  <p><code>username</code> doesn't live long enough, even though it shouldn't matter since I cloned the data.</p>\n</blockquote>\n\n<p><code>username</code> has a very specific lifetime and it's finite. If you look at a piece of code, it's generally straight-forward to find out the lifetime of an object: it's the scope of the block that the variable lives in without moving. In your example, <code>username</code> only lives during the block that's part of the match arm <code>Ok(username) =&gt; { // }</code>. As soon as that block exits, the value is destroyed.</p>\n\n<blockquote>\n  <p><code>clone</code> in this case has a signature of <code>&lt;'s&gt;clone() -&gt; &amp;'s str</code> if you remove elisions (and reify <code>Self</code>) according to my very limited understanding of Rust in general. </p>\n</blockquote>\n\n<p><code>env::var</code> returns a <code>Result&lt;String, VarError&gt;</code>, and you access the <code>Ok</code> variant, making <code>username</code> a <code>String</code>. The <a href=\"http://doc.rust-lang.org/std/string/struct.String.html#method.clone\" rel=\"nofollow noreferrer\"><code>String</code> implementation of <code>clone</code></a> takes a <code>&amp;String</code> and returns a <code>String</code>. I'm not sure where the <code>-&gt; &amp;'s str</code> would come from.</p>\n\n<blockquote>\n  <p>So if I clone with <code>clone::&lt;'r&gt;()</code> it should force the lifetime... </p>\n</blockquote>\n\n<p>This is a <em>very</em> common mistake. Check out <a href=\"https://stackoverflow.com/q/32359619/155423\">Do Rust lifetimes influence the semantics of the compiled program?</a> (and maybe <a href=\"https://stackoverflow.com/q/31609137/155423\">Why are explicit lifetimes needed in Rust?</a>) for some background information. You <strong>cannot</strong> change the lifetime of something other than by rewriting your code to make the referred-to value have a larger scope. The lifetime syntax reflects how long the variable lives, it <em>does not control it</em>. There's no (safe) way to \"force\" a lifetime.</p>\n\n<blockquote>\n  <p><code>(&amp;*username).clone</code> has that signature I mean</p>\n</blockquote>\n\n<p>If we dereference and re-reference a <code>String</code>, we end up with a <code>&amp;str</code>. That <code>&amp;str</code> will have a lifetime that corresponds to how long the <code>String</code> lives. This makes sense because the <code>&amp;str</code> is just pointing to the <code>String</code>. When the <code>String</code> is deallocated, the <code>&amp;str</code> would be pointing at memory that is no longer in a valid state.</p>\n"}], "owner": {"reputation": 371, "user_id": 4770579, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-eEpUxZKiIQ0/AAAAAAAAAAI/AAAAAAAAAB0/NgasOrZddng/photo.jpg?sz=128", "display_name": "Jonathan Boudreau", "link": "https://stackoverflow.com/users/4770579/jonathan-boudreau"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2035, "favorite_count": 0, "accepted_answer_id": 37503392, "answer_count": 3, "score": 4, "last_activity_date": 1464485599, "creation_date": 1464460933, "last_edit_date": 1464467827, "question_id": 37502627, "link": "https://stackoverflow.com/questions/37502627/clone-string-to-specific-lifetime", "title": "Clone String to Specific Lifetime", "body": "<p>I'm currently trying to write a little command line app in Rust and I've hit a wall with lifetimes.</p>\n\n<pre><code>extern crate clap;\nuse self::clap::{App, Arg};\nuse std::env;\n\nimpl&lt;'p&gt; Params&lt;'p&gt; {\n    fn get_username_arg&lt;'r&gt;() -&gt; Arg&lt;'r, 'r&gt; {\n        let mut arg = Arg::with_name(\"Username\")\n            .short(\"u\")\n            .long(\"username\")\n            .takes_value(true);\n        match env::var(\"USERNAME\") {\n            Ok(username) =&gt; {\n                // How do I pass `username` to default_value?\n                arg.default_value(username)\n            }\n            Err(e) =&gt; arg.required(true),\n        }\n    }\n    // More code below...\n}\n</code></pre>\n\n<p>The problem is that I'm trying to pass <code>username</code> to the default value method, which requires a <code>str</code> with a lifetime of <code>'r</code>. I tried cloning but I can't figure how to tell it what the lifetime of the clone is going to be. I tried something along the following lines:</p>\n\n<pre><code>let cln = (&amp;*username).clone::&lt;'r&gt;();\narg.default_value(username)\n</code></pre>\n\n<p>For some reason its now telling me that <code>username</code> doesn't live long enough, even though it shouldn't matter since I cloned the data.</p>\n\n<p>So my question is, how do I make this compile?</p>\n\n<p>EDIT: I'd like to add that its important to me that the signature stays the same aside from the lifetime parameters. I don't mind doing expensive operations such as cloning to make this work.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464449233, "post_id": 37500631, "comment_id": 62496338, "body": "No because I don&#39;t want to clone state information in this object. Think of User above - the name is a reference. In my case I have fields which can change inside my User so I don&#39;t want multiple copies floating around where the info gets stale. I could of course hold some kind of token / id to the user in the map and look it up when I need to but I&#39;d rather just have a straight reference."}], "answers": [{"tags": [], "owner": {"reputation": 46065, "user_id": 234590, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/463c0219a51a5d1fd08e1fa280811b57?s=128&d=identicon&r=PG", "display_name": "Francis Gagn&#233;", "link": "https://stackoverflow.com/users/234590/francis-gagn%c3%a9"}, "is_accepted": true, "score": 5, "last_activity_date": 1464449707, "last_edit_date": 1464449707, "creation_date": 1464449228, "answer_id": 37500808, "question_id": 37500631, "link": "https://stackoverflow.com/questions/37500631/how-do-i-hold-a-collection-of-one-struct-in-another-where-lifetimes-are-not-pred/37500808#37500808", "title": "How do I hold a collection of one struct in another where lifetimes are not predictable?", "body": "<p>In Rust, some types come in pairs: a <em>borrowed</em> and an <em>owned</em> counterpart. For strings, the borrowed version is <a href=\"http://doc.rust-lang.org/stable/std/primitive.str.html\" rel=\"nofollow\"><code>&amp;'a str</code></a> and the owned version is <a href=\"http://doc.rust-lang.org/stable/std/string/struct.String.html\" rel=\"nofollow\"><code>String</code></a>. Owned versions don't have a lifetime parameter, because they <strong>own</strong> all their data. That doesn't mean they don't contain pointers internally; <code>String</code> stores its data on the heap, and the actual <code>String</code> object only contains a pointer to that data.</p>\n\n<p>By using <code>String</code> instead of <code>&amp;'a str</code>, you can avoid issues with the order of construction, because you can <a href=\"http://doc.rust-lang.org/stable/book/ownership.html#move-semantics\" rel=\"nofollow\">move</a> owned data around freely (so long as it isn't borrowed elsewhere). For example, when you create a <code>User</code>, you first need to create a <code>String</code>, which you would then move into the new <code>User</code>, and finally you then move the <code>User</code> into the <code>ChatRoom</code>'s <code>HashMap</code>.</p>\n\n<pre><code>struct User {\n    name: String,\n}\n\nstruct ChatRoom {\n    name: String,\n    users: HashMap&lt;String, User&gt;,\n}\n</code></pre>\n\n<hr>\n\n<p>However, since you need shared references, then you need to wrap the <code>String</code> in a type that provides that functionality. If you are writing a single-threaded program, you may use <a href=\"http://doc.rust-lang.org/stable/std/rc/struct.Rc.html\" rel=\"nofollow\"><code>Rc</code></a> for this. If you need to access these references from multiple threads, then <code>Rc</code> won't work; you need <a href=\"http://doc.rust-lang.org/stable/std/sync/struct.Arc.html\" rel=\"nofollow\"><code>Arc</code></a> instead.</p>\n\n<pre><code>struct User {\n    name: Rc&lt;String&gt;,\n}\n\nstruct ChatRoom {\n    name: String,\n    users: HashMap&lt;String, User&gt;,\n}\n</code></pre>\n\n<p>In order to create a new <code>Rc&lt;String&gt;</code> that points to the same string, you simply call the <a href=\"http://doc.rust-lang.org/stable/std/clone/trait.Clone.html#tymethod.clone\" rel=\"nofollow\"><code>clone()</code></a> method on the first <code>Rc&lt;String&gt;</code>.</p>\n\n<hr>\n\n<p>Now, the <code>String</code> in an <code>Rc&lt;String&gt;</code> is immutable, because <code>Rc</code> doesn't provide any way to mutate its value (without consuming the <code>Rc</code>). If you need that capability, then you need to pair this with <a href=\"http://doc.rust-lang.org/stable/std/cell/struct.RefCell.html\" rel=\"nofollow\"><code>RefCell</code></a> (or either <a href=\"http://doc.rust-lang.org/stable/std/sync/struct.Mutex.html\" rel=\"nofollow\"><code>Mutex</code></a> or <a href=\"http://doc.rust-lang.org/stable/std/sync/struct.RwLock.html\" rel=\"nofollow\"><code>RwLock</code></a> in a multi-threaded program).</p>\n\n<pre><code>struct User {\n    name: Rc&lt;RefCell&lt;String&gt;&gt;,\n}\n\nstruct ChatRoom {\n    name: String,\n    users: HashMap&lt;String, User&gt;,\n}\n</code></pre>\n"}], "owner": {"reputation": 5029, "user_id": 273924, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/50c78d9d967c8a192aae64a618e521ab?s=128&d=identicon&r=PG", "display_name": "locka", "link": "https://stackoverflow.com/users/273924/locka"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 405, "favorite_count": 0, "accepted_answer_id": 37500808, "answer_count": 1, "score": 3, "last_activity_date": 1464449707, "creation_date": 1464448235, "last_edit_date": 1495540367, "question_id": 37500631, "link": "https://stackoverflow.com/questions/37500631/how-do-i-hold-a-collection-of-one-struct-in-another-where-lifetimes-are-not-pred", "title": "How do I hold a collection of one struct in another where lifetimes are not predictable?", "body": "<p>I want to manage a collection of objects in another object but I can't predict the lifetime of the elements in this collection.</p>\n\n<p>I found this example in <a href=\"https://stackoverflow.com/questions/26705277/syntax-of-rust-lifetime-specifier/26705327#26705327\">Syntax of Rust lifetime specifier</a> that demonstrates what I can't do:</p>\n\n<pre><code>struct User&lt;'a&gt; {\n    name: &amp;'a str,\n}\n\n// ... impls omitted\n\nstruct ChatRoom&lt;'a&gt; {\n    name: &amp;'a str,\n    users: HashMap&lt;&amp;'a str, User&lt;'a&gt;&gt;,\n}\n</code></pre>\n\n<p><code>ChatRoom</code> holds a map of <code>User</code>s. Each <code>User</code> is a copy although the name within <code>User</code> is a shared reference. The <code>User</code> and the <code>ChatRoom</code> have an explicit lifetime so when they are joined the compiler enforces that <code>User</code>s must live longer than the <code>ChatRoom</code> they're going into.</p>\n\n<p>But what if my <code>User</code> was created after the <code>ChatRoom</code>? I can't use lifetimes because the compiler will complain. What if I delete a <code>User</code> before the <code>ChatRoom</code>? I can't do that either.</p>\n\n<p>How can the <code>ChatRoom</code> hold <code>User</code>s who might be created after it or destroyed before it? I vaguely suspect that something could be done with boxes to implement this but Rust's box documentation is quite poor so I am not certain. </p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1464448792, "post_id": 37499032, "comment_id": 62496189, "body": "Blindly using <code>.exe</code> isn&#39;t <i>really</i> correct.  You&#39;re supposed to use the <code>PATHEXT</code> environment variable, which is a <code>;</code>-separated list of file extensions that are considered &quot;executable&quot;.  Sadly, you have to be careful because <code>CreateProcess</code> (which is what Rust&#39;s <code>Command</code> type is backed by, AFAIK) only supports native executable types, so it can&#39;t be used like it can on UNIX (<i>e.g.</i> to invoke shell scripts).  So, unless you&#39;re also intending to write your own code using <code>ShellExecute</code> (which Rust doesn&#39;t use I-don&#39;t-know-why), you should probably limit yourself to <code>.COM;.EXE</code>."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 0, "creation_date": 1464449322, "post_id": 37499032, "comment_id": 62496370, "body": "@DK. cross-platform work is hard! For whatever it&#39;s worth, the code here mimics what Python is doing, although I don&#39;t know how great the Windows support of Python is to start with. Maybe we should submit this back up to a crate (like quale?)."}, {"owner": {"reputation": 44438, "user_id": 42353, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/f05e802879a805c03a55645dfcc0d4ea?s=128&d=identicon&r=PG", "display_name": "DK.", "link": "https://stackoverflow.com/users/42353/dk"}, "edited": false, "score": 1, "creation_date": 1464449465, "post_id": 37499032, "comment_id": 62496418, "body": "Yeah, I realised after writing that (when I&#39;d run out of characters) that there&#39;s really no way to do this <i>properly</i> in Rust without writing actual Win32 code, because even if you correctly find <code>commandname.py</code> or something, you can&#39;t actually invoke it.  I suppose that&#39;s what you get when executing scripts is a shell feature instead of a kernel feature..."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 8, "last_activity_date": 1464441641, "last_edit_date": 1464441641, "creation_date": 1464438767, "answer_id": 37499032, "question_id": 37498864, "link": "https://stackoverflow.com/questions/37498864/finding-executable-in-path-with-rust/37499032#37499032", "title": "Finding executable in PATH with Rust", "body": "<p>I'd probably grab the environment variable and iterate through it, returning the first matching path:</p>\n\n<pre><code>use std::env;\nuse std::path::{Path, PathBuf};\n\nfn find_it&lt;P&gt;(exe_name: P) -&gt; Option&lt;PathBuf&gt;\n    where P: AsRef&lt;Path&gt;,\n{\n    env::var_os(\"PATH\").and_then(|paths| {\n        env::split_paths(&amp;paths).filter_map(|dir| {\n            let full_path = dir.join(&amp;exe_name);\n            if full_path.is_file() {\n                Some(full_path)\n            } else {\n                None\n            }\n        }).next()\n    })\n}\n\nfn main() {\n    println!(\"{:?}\", find_it(\"cat\"));\n    println!(\"{:?}\", find_it(\"dog\"));\n}\n</code></pre>\n\n<p>This is probably ugly on Windows as you'd have to append the <code>.exe</code> to the executable name. It should also potentially be extended to only return items that are executable, which is again platform-specific code.</p>\n\n<p>Reviewing the <a href=\"http://svn.python.org/projects/python/trunk/Lib/distutils/spawn.py\" rel=\"noreferrer\">Python implementation</a>, it appears they also support an absolute path being passed. That's up to you if the function should support that or not.</p>\n\n<p>A quick search on <a href=\"https://crates.io\" rel=\"noreferrer\">crates.io</a> returned one crate that may be useful: <a href=\"https://crates.io/crates/quale\" rel=\"noreferrer\">quale</a>, although it currently says </p>\n\n<blockquote>\n  <p>currently only works on Unix-like operating systems.</p>\n</blockquote>\n\n<p>It wouldn't surprise me to find out there are others.</p>\n\n<hr>\n\n<p>Here's some ugly code that adds <code>.exe</code> to the end if it's missing, but only on Windows.</p>\n\n<pre><code>#[cfg(not(target_os = \"windows\"))]\nfn enhance_exe_name(exe_name: &amp;Path) -&gt; Cow&lt;Path&gt; {\n    exe_name.into()\n}\n\n#[cfg(target_os = \"windows\")]\nfn enhance_exe_name(exe_name: &amp;Path) -&gt; Cow&lt;Path&gt; {\n    use std::ffi::OsStr;\n    use std::os::windows::ffi::OsStrExt;\n\n    let raw_input: Vec&lt;_&gt; = exe_name.as_os_str().encode_wide().collect();\n    let raw_extension: Vec&lt;_&gt; = OsStr::new(\".exe\").encode_wide().collect();\n\n    if raw_input.ends_with(&amp;raw_extension) {\n        exe_name.into()\n    } else {\n        let mut with_exe = exe_name.as_os_str().to_owned();\n        with_exe.push(\".exe\");\n        PathBuf::from(with_exe).into()\n    }\n}\n\n// At the top of the `find_it` function:\n// let exe_name = enhance_exe_name(exe_name.as_ref());\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 1756, "user_id": 8492116, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/22358b8a44a83a98115de7b8c6092529?s=128&d=identicon&r=PG&f=1", "display_name": "Aankhen", "link": "https://stackoverflow.com/users/8492116/aankhen"}, "is_accepted": false, "score": 3, "last_activity_date": 1553953135, "last_edit_date": 1553953135, "creation_date": 1553883716, "answer_id": 55423482, "question_id": 37498864, "link": "https://stackoverflow.com/questions/37498864/finding-executable-in-path-with-rust/55423482#55423482", "title": "Finding executable in PATH with Rust", "body": "<p>I found a crate that solves the problem: <a href=\"https://crates.io/crates/which\" rel=\"nofollow noreferrer\"><code>which</code></a>. It includes Windows support, even accounting for <code>PATHEXT</code>.</p>\n"}], "owner": {"reputation": 1869, "user_id": 1583006, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/98b87a518a5a9166ba85b3f6d69e5d50?s=128&d=identicon&r=PG", "display_name": "baldrs", "link": "https://stackoverflow.com/users/1583006/baldrs"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 2622, "favorite_count": 1, "accepted_answer_id": 37499032, "answer_count": 2, "score": 7, "last_activity_date": 1553953135, "creation_date": 1464437711, "last_edit_date": 1464438781, "question_id": 37498864, "link": "https://stackoverflow.com/questions/37498864/finding-executable-in-path-with-rust", "title": "Finding executable in PATH with Rust", "body": "<p>In Python I can:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from distutils import spawn\n\ncmd = spawn.find_executable(\"commandname\")\n</code></pre>\n\n<p>I tried something like the code below, but it it assumes you're on unix-like system with <code>/usr/bin/which</code> available(also it involves execution of external command which I want to avoid): </p>\n\n<pre><code>use std::process::Command;\n\nlet output = Command::new(\"which\")\n                      .arg(\"commandname\")\n                      .unwrap_or_else(|e| /* handle error here */)\n</code></pre>\n\n<p>What is the simplest way to do this in Rust?</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "edited": false, "score": 0, "creation_date": 1464379828, "post_id": 37491511, "comment_id": 62479490, "body": "Thank you, this was very helpful!"}, {"owner": {"reputation": 1693, "user_id": 5731861, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/iKaMT.png?s=128&g=1", "display_name": "Felipe Valdes", "link": "https://stackoverflow.com/users/5731861/felipe-valdes"}, "edited": false, "score": 1, "creation_date": 1558466128, "post_id": 37491511, "comment_id": 99108511, "body": "I had the problem while installing IntelliJ IDEA and it being confused on the matter, but this solved the intellij idea error."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 37, "last_activity_date": 1516590219, "last_edit_date": 1516590219, "creation_date": 1464379687, "answer_id": 37491511, "question_id": 37491436, "link": "https://stackoverflow.com/questions/37491436/failed-to-parse-manifest-no-targets-specified/37491511#37491511", "title": "failed to parse manifest - no targets specified", "body": "<p>As the error says:</p>\n\n<blockquote>\n  <p>either <code>src/lib.rs</code>, <code>src/main.rs</code>, a <code>[lib]</code> section, or <code>[[bin]]</code> section must be present</p>\n</blockquote>\n\n<p>So the direct answer is to <a href=\"https://doc.rust-lang.org/cargo/reference/manifest.html#configuring-a-target\" rel=\"noreferrer\">add a <code>[[bin]]</code> section</a>:</p>\n\n<pre><code>[[bin]]\nname = \"test\"\npath = \"src/test.rs\"\n</code></pre>\n\n<p>However, it's far more usual to just place the file in the expected location: <code>src/main.rs</code>. You could also place it in <code>src/bin/test.rs</code> if you plan on having multiple binaries.</p>\n\n<p>If it's actually for testing your code, then unit tests go in the same file as the code they are testing and integration tests go in <code>tests/foo.rs</code>.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464570858, "post_id": 37513291, "comment_id": 62526281, "body": "Can you expand a bit more to highlight what is different about this answer as opposed to the other answer? The other answer already says &quot;place the file in the expected location: <code>src&#47;main.rs</code>&quot;"}, {"owner": {"reputation": 3732, "user_id": 1016544, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/08b2ae4d9b56474f6cfbe79fae6688a2?s=128&d=identicon&r=PG", "display_name": "Wahib Ul Haq", "link": "https://stackoverflow.com/users/1016544/wahib-ul-haq"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1471962501, "post_id": 37513291, "comment_id": 65554678, "body": "@Shepmaster Thanks for asking. In my answer, I tried to explicitly highlight the &#39;renaming&#39; of file to <code>main.rs</code> if someone is using any other name but still has it in location: <code>srs</code>. Something which was not clearly mentioned in your answer that it has to be <code>main.rs</code> file and no other name. Also, felt imp to mention about library.   Can I request to take back the negative vote? :)"}], "tags": [], "owner": {"reputation": 3732, "user_id": 1016544, "user_type": "registered", "accept_rate": 27, "profile_image": "https://www.gravatar.com/avatar/08b2ae4d9b56474f6cfbe79fae6688a2?s=128&d=identicon&r=PG", "display_name": "Wahib Ul Haq", "link": "https://stackoverflow.com/users/1016544/wahib-ul-haq"}, "is_accepted": false, "score": 1, "last_activity_date": 1464545646, "creation_date": 1464545646, "answer_id": 37513291, "question_id": 37491436, "link": "https://stackoverflow.com/questions/37491436/failed-to-parse-manifest-no-targets-specified/37513291#37513291", "title": "failed to parse manifest - no targets specified", "body": "<p>In my case and probably in your case as well, the rs file was not named <code>main.rs</code> while Cargo assumes that <code>src/main.rs</code> is the crate root of a binary crate. So, the rule is that If project is an executable, name the main source file <code>src/main.rs</code>. If it is a library, name the main source file <code>src/lib.rs</code>.</p>\n\n<p>Additionally, Cargo will also treat any files located in <code>src/bin/*.rs</code> as executables like mentioned in the previous answer.</p>\n"}, {"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471864444, "post_id": 39073671, "comment_id": 65503592, "body": "Can you explain what new information this answer provides compared to the existing answer?"}, {"owner": {"reputation": 329, "user_id": 4168837, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-b438yjiD4qs/AAAAAAAAAAI/AAAAAAAAAA8/spnTKZFwcLw/photo.jpg?sz=128", "display_name": "Jesse Chen", "link": "https://stackoverflow.com/users/4168837/jesse-chen"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1471934844, "post_id": 39073671, "comment_id": 65535269, "body": "All right, I just found that your answer has explained both of two ways.@Shepmaster, Actually, I am new to rust, and I encountered the same problem, so I posted that answer when i solved it."}], "tags": [], "owner": {"reputation": 329, "user_id": 4168837, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-b438yjiD4qs/AAAAAAAAAAI/AAAAAAAAAA8/spnTKZFwcLw/photo.jpg?sz=128", "display_name": "Jesse Chen", "link": "https://stackoverflow.com/users/4168837/jesse-chen"}, "is_accepted": false, "score": 1, "last_activity_date": 1471851161, "creation_date": 1471851161, "answer_id": 39073671, "question_id": 37491436, "link": "https://stackoverflow.com/questions/37491436/failed-to-parse-manifest-no-targets-specified/39073671#39073671", "title": "failed to parse manifest - no targets specified", "body": "<p>As a summary:</p>\n\n<p>If you use <code>cargo new xxx --bin</code>, you will find the file in the <code>src</code> directory is named <code>main.rs</code>. And when you check the file <code>Cargo.toml</code>. It is the same as you written. So the first way is to change the file in src to <code>main.rs</code></p>\n\n<p>As the cargo report, we can use the <code>[[bin]]</code> to set the file.  @Shepmaster has solved it.</p>\n\n<p>Both two ways can work. </p>\n"}, {"comments": [{"owner": {"reputation": 689, "user_id": 3578294, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/zzNKk.jpg?s=128&g=1", "display_name": "Rodolfo", "link": "https://stackoverflow.com/users/3578294/rodolfo"}, "edited": false, "score": 1, "creation_date": 1562598998, "post_id": 52332738, "comment_id": 100416213, "body": "Thanks a lot, I&#39;d never think about that, solved the problem here."}], "tags": [], "owner": {"reputation": 8171, "user_id": 311655, "user_type": "registered", "accept_rate": 44, "profile_image": "https://www.gravatar.com/avatar/6bad9300ce17b6a89678ed9343647906?s=128&d=identicon&r=PG", "display_name": "DenisKolodin", "link": "https://stackoverflow.com/users/311655/deniskolodin"}, "is_accepted": false, "score": 3, "last_activity_date": 1536930637, "creation_date": 1536930637, "answer_id": 52332738, "question_id": 37491436, "link": "https://stackoverflow.com/questions/37491436/failed-to-parse-manifest-no-targets-specified/52332738#52332738", "title": "failed to parse manifest - no targets specified", "body": "<p><em>Alternative issue and solution:</em> You can also be faced with this error if you have copied <code>Cargo.toml</code> file to a <strong>parent folder</strong> of the crate.</p>\n"}], "owner": {"reputation": 7271, "user_id": 3704831, "user_type": "registered", "accept_rate": 78, "profile_image": "https://i.stack.imgur.com/OFHMz.jpg?s=128&g=1", "display_name": "wogsland", "link": "https://stackoverflow.com/users/3704831/wogsland"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 11971, "favorite_count": 3, "accepted_answer_id": 37491511, "answer_count": 4, "score": 29, "last_activity_date": 1536930637, "creation_date": 1464379349, "last_edit_date": 1464380712, "question_id": 37491436, "link": "https://stackoverflow.com/questions/37491436/failed-to-parse-manifest-no-targets-specified", "title": "failed to parse manifest - no targets specified", "body": "<p>I am new to Rust and attempting to build a test project with Cargo. My <code>Cargo.toml</code> looks like:</p>\n\n<pre><code>[package]\nname = \"rust-play\"\nversion = \"0.0.1\"\nauthors = [ \"Bradley Wogsland &lt;omitted&gt;\" ]\n</code></pre>\n\n<p>(but the actual TOML file doesn't omit my email). When I <code>cargo build</code> I am getting the following error:</p>\n\n<blockquote>\n  <p>error: failed to parse manifest at <code>/Users/wogsland/Projects/rust-play/Cargo.toml</code></p>\n  \n  <p>Caused by:\n    no targets specified in the manifest\n    either src/lib.rs, src/main.rs, a [lib] section, or [[bin]] section must be present</p>\n</blockquote>\n\n<p>My <code>main</code> function is in a <code>src/test.rs</code> file. Do I need to specify that in the TOML file? If so, how? I tried adding</p>\n\n<pre><code>target = \"src/test.rs\"\n</code></pre>\n\n<p>to no avail.</p>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 0, "creation_date": 1464369095, "post_id": 37489004, "comment_id": 62474304, "body": "Hopefully this question isn&#39;t too speculative.. i&#39;m seeking understanding, not trying to speculate."}, {"owner": {"reputation": 99643, "user_id": 445517, "user_type": "registered", "accept_rate": 43, "profile_image": "https://www.gravatar.com/avatar/57e2ba76e6290c4e9e19821a068bc8c1?s=128&d=identicon&r=PG", "display_name": "CodesInChaos", "link": "https://stackoverflow.com/users/445517/codesinchaos"}, "edited": false, "score": 5, "creation_date": 1464524482, "post_id": 37489004, "comment_id": 62513474, "body": "In my experience it&#39;s pretty rare to have indices into a vector where you don&#39;t know if they&#39;re valid. Panicking fits that common case, where an invalid index represents a bug. For the uncommon case you can simply validate the index before using it."}], "answers": [{"comments": [{"owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 1, "creation_date": 1464369652, "post_id": 37489119, "comment_id": 62474574, "body": "That&#39;s a good point about safety. Apologies for using the term incorrectly. With that said, is there a meaningful difference between <code>v.get</code> and <code>v.remove</code> regarding their behaviors?"}, {"owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "reply_to_user": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "edited": false, "score": 2, "creation_date": 1464369771, "post_id": 37489119, "comment_id": 62474640, "body": "<code>get</code> exists so that there is an option-returning way to index. (The main indexing facility is <code>v[i]</code>). There&#39;s no option-returning version of <code>remove</code>."}], "tags": [], "owner": {"reputation": 9443, "user_id": 3616050, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/yQfMD.png?s=128&g=1", "display_name": "bluss", "link": "https://stackoverflow.com/users/3616050/bluss"}, "is_accepted": false, "score": 12, "last_activity_date": 1464369494, "creation_date": 1464369494, "answer_id": 37489119, "question_id": 37489004, "link": "https://stackoverflow.com/questions/37489004/built-in-safe-way-to-move-out-of-vect/37489119#37489119", "title": "Built in *safe* way to move out of Vec&lt;T&gt;?", "body": "<p>If you say <em>safe</em> in a Rust context, we think of memory safety. <code>.remove(i)</code> is certainly safe in regular Rust terms, just to clarify. Calling <code>panic!()</code> is <em>safe</em>.</p>\n\n<p>The error behavior of <code>.remove(i)</code> and <code>.swap_remove(i)</code> is the same as for indexing a vector with <code>v[i]</code> syntax: If <code>i</code> is out of bounds, it's a programmer bug and the library functions panic. This is also called the <em>contract violation</em> clause in the error handling guidelines.</p>\n\n<p>So the thought behind the library is that you only use <code>v[i]</code> or <code>v.remove(i)</code> if you know that <code>i</code> is in bounds, and you can indeed check that it is using <code>i &lt; v.len()</code> or <code>v.get(i)</code> if you want.</p>\n\n<p>There's another function that allows you to move an element out of a vector without possibility to panic, and that is <code>v.pop()</code> which removes the last item in the vector, returning <code>Option&lt;T&gt;</code> for a <code>Vec&lt;T&gt;</code>.</p>\n"}, {"tags": [], "owner": {"reputation": 786, "user_id": 600743, "user_type": "registered", "accept_rate": 78, "profile_image": "https://www.gravatar.com/avatar/db4de988638e785cf3cd568f05214433?s=128&d=identicon&r=PG", "display_name": "GhotiPhud", "link": "https://stackoverflow.com/users/600743/ghotiphud"}, "is_accepted": false, "score": 2, "last_activity_date": 1464376195, "last_edit_date": 1464376195, "creation_date": 1464374510, "answer_id": 37490352, "question_id": 37489004, "link": "https://stackoverflow.com/questions/37489004/built-in-safe-way-to-move-out-of-vect/37490352#37490352", "title": "Built in *safe* way to move out of Vec&lt;T&gt;?", "body": "<p>There's also <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.drain\" rel=\"nofollow\"><code>vec::drain</code></a> which will give you an iterator over a range of values that were removed.  Now that I look at it though, this method would also panic on out-of-bounds access...</p>\n"}], "owner": {"reputation": 217, "user_id": 6189743, "user_type": "registered", "accept_rate": 75, "profile_image": "https://www.gravatar.com/avatar/99f741f9304c500014cb55f92edca4d9?s=128&d=identicon&r=PG&f=1", "display_name": "FizzBazer", "link": "https://stackoverflow.com/users/6189743/fizzbazer"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 5277, "favorite_count": 1, "answer_count": 2, "score": 17, "last_activity_date": 1464376195, "creation_date": 1464369059, "last_edit_date": 1464373440, "question_id": 37489004, "link": "https://stackoverflow.com/questions/37489004/built-in-safe-way-to-move-out-of-vect", "title": "Built in *safe* way to move out of Vec&lt;T&gt;?", "body": "<p>I've been looking over the documentation, and so far I haven't seen a built in function to safely move an item out of a <code>Vec</code>.</p>\n\n<p><code>Vec::get</code> exists, but that just borrows. <code>Vec::remove</code> exists, and while that does move out of the vector, it also panics if the index is out of range. So, I have two questions:</p>\n\n<ol>\n<li>What is the intended/good way to move an item from a vector?</li>\n<li><code>remove(&amp;mut self, index: usize) -&gt; T</code> panics if out of range. What might be the reason for panicking? Why isn't it implemented like <code>remove(&amp;mut self, index: usize) -&gt; Option&lt;T&gt;</code>?</li>\n</ol>\n"}, {"tags": ["arrays", "rust"], "comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464356393, "post_id": 37482395, "comment_id": 62466304, "body": "<i>it&#39;s for vectors, not arrays</i> \u2014 they are the same when it comes to iterating."}, {"owner": {"reputation": 2141, "user_id": 744184, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b3c344835e7d6c28d221702306647db6?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/744184/user"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464356696, "post_id": 37482395, "comment_id": 62466507, "body": "@Shepmaster is there (self).position_elem(&amp;&quot;Apple&quot;) for arrays? If not do you think you know how to make one? You can add it in the answers if you want."}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464357697, "post_id": 37482395, "comment_id": 62467195, "body": "There isn&#39;t <i>any</i> <code>position_elem</code> left in the standard library (I&#39;ve added a comment to the accepted answer on the linked question). The other answer is still valid, and I&#39;ve edited it to indicate it applies to any iterator."}], "answers": [{"comments": [{"owner": {"reputation": 1410, "user_id": 5827450, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-r3ocQbM_fgs/AAAAAAAAAAI/AAAAAAAAAAw/R48S5OAnokw/photo.jpg?sz=128", "display_name": "Charlie \u6728\u5320", "link": "https://stackoverflow.com/users/5827450/charlie-%e6%9c%a8%e5%8c%a0"}, "edited": false, "score": 1, "creation_date": 1592100634, "post_id": 37482592, "comment_id": 110302381, "body": "Rust is much verbose than Python and JavaScript.  ;)"}], "tags": [], "owner": {"reputation": 53952, "user_id": 2408867, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/994y9.jpg?s=128&g=1", "display_name": "Lukas Kalbertodt", "link": "https://stackoverflow.com/users/2408867/lukas-kalbertodt"}, "is_accepted": true, "score": 23, "last_activity_date": 1464349211, "creation_date": 1464349211, "answer_id": 37482592, "question_id": 37482395, "link": "https://stackoverflow.com/questions/37482395/is-there-an-equivalent-of-javascripts-indexof-for-rust-arrays/37482592#37482592", "title": "Is there an equivalent of JavaScript&#39;s indexOf for Rust arrays?", "body": "<p>You can use the method <a href=\"http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position\"><code>position</code></a> on any iterator. You can get an iterator over an array with the <a href=\"http://doc.rust-lang.org/std/primitive.slice.html#method.iter\"><code>iter()</code></a> method. Try it like this:    </p>\n\n<pre><code>let fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet res1 = fruits.iter().position(|&amp;s| s == \"Apple\");\nlet res2 = fruits.iter().position(|&amp;s| s == \"Peter\");\n\nprintln!(\"{:?}\", res1);    // outputs: Some(2)\nprintln!(\"{:?}\", res2);    // outputs: None\n</code></pre>\n"}], "owner": {"reputation": 2141, "user_id": 744184, "user_type": "registered", "accept_rate": 96, "profile_image": "https://www.gravatar.com/avatar/b3c344835e7d6c28d221702306647db6?s=128&d=identicon&r=PG", "display_name": "user", "link": "https://stackoverflow.com/users/744184/user"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 4248, "favorite_count": 0, "accepted_answer_id": 37482592, "answer_count": 1, "score": 9, "last_activity_date": 1464356370, "creation_date": 1464348716, "last_edit_date": 1495540441, "question_id": 37482395, "link": "https://stackoverflow.com/questions/37482395/is-there-an-equivalent-of-javascripts-indexof-for-rust-arrays", "title": "Is there an equivalent of JavaScript&#39;s indexOf for Rust arrays?", "body": "<pre><code>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar index = fruits.indexOf(\"Apple\");\n</code></pre>\n\n<pre class=\"lang-rust prettyprint-override\"><code>let fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nlet index = fruits.???\n</code></pre>\n\n<p>If there is no equivalent, maybe you can point me in the right direction? I found this <a href=\"https://stackoverflow.com/a/30558360\">example</a>, but it's for vectors, not arrays.</p>\n"}, {"tags": ["rust"], "answers": [{"comments": [{"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464306381, "post_id": 37472707, "comment_id": 62443976, "body": "Or, less idiomatically, take a reference of the literal: <code>if next_char == &amp;&#39;(&#39;</code>"}, {"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "reply_to_user": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 0, "creation_date": 1464306453, "post_id": 37472707, "comment_id": 62443989, "body": "Oh there&#39;s a blanked impl for &amp;T == &amp;T"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 1, "creation_date": 1464306472, "post_id": 37472707, "comment_id": 62443993, "body": "Sure. You just have to have the same amount of references on each side. Or do you mean taking a reference to a literal? It just implicitly makes a local variable, IIRC."}], "tags": [], "owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "is_accepted": true, "score": 11, "last_activity_date": 1464306053, "creation_date": 1464306053, "answer_id": 37472707, "question_id": 37472684, "link": "https://stackoverflow.com/questions/37472684/is-it-possible-to-compare-a-char-with-char-or-mut-char/37472707#37472707", "title": "Is it possible to compare a char with &amp;char or &amp;mut char?", "body": "<p>You just have to dereference to get the <code>char</code> value out of the reference:</p>\n\n<pre><code>if *next_char == '(' {\n    // ...\n}\n</code></pre>\n"}, {"tags": [], "owner": {"reputation": 11, "user_id": 4752169, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/JbVcc.png?s=128&g=1", "display_name": "achampion", "link": "https://stackoverflow.com/users/4752169/achampion"}, "is_accepted": false, "score": 1, "last_activity_date": 1464376235, "last_edit_date": 1464376235, "creation_date": 1464375876, "answer_id": 37490650, "question_id": 37472684, "link": "https://stackoverflow.com/questions/37472684/is-it-possible-to-compare-a-char-with-char-or-mut-char/37490650#37490650", "title": "Is it possible to compare a char with &amp;char or &amp;mut char?", "body": "<p>Or, maybe even more idiomatic, with pattern matching:</p>\n\n<pre><code>match *next_char {\n    '(' =&gt; // ...\n}\n</code></pre>\n\n<p>although if you branch on only one character the if-then is probably a better choice.</p>\n"}], "owner": {"reputation": 63, "user_id": 2019739, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ec7ac9030bedc5b0fac1f0c27161a758?s=128&d=identicon&r=PG", "display_name": "therealjoshrowe", "link": "https://stackoverflow.com/users/2019739/therealjoshrowe"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3115, "favorite_count": 1, "accepted_answer_id": 37472707, "answer_count": 2, "score": 6, "last_activity_date": 1464376235, "creation_date": 1464305917, "last_edit_date": 1464306323, "question_id": 37472684, "link": "https://stackoverflow.com/questions/37472684/is-it-possible-to-compare-a-char-with-char-or-mut-char", "title": "Is it possible to compare a char with &amp;char or &amp;mut char?", "body": "<p>I am writing a lexer in Rust, and I am quite new to how Rust does things in comparison to Java / C++.</p>\n\n<p>I have a function that goes something like:</p>\n\n<pre><code>fn lookup(next_char: &amp;mut char, f: &amp;File) {\n    //if or match\n    if next_char == '(' {\n        //do something\n    }\n}\n</code></pre>\n\n<p>This gives </p>\n\n<pre><code>error: the trait `core::cmp::PartialEq&lt;char&gt;` is not implemented for the type `&amp;mut char` [E0277]\n     if next_char == '(' {\n        ^~~~~~~~~~~~~~~~\n</code></pre>\n\n<p>If they are switched, then it gives a mismatched types error. I understand why it gives these two errors. I was wondering if there was some way to compare the two values. Perhaps I am not thinking in the Rust way or something, but I have not seen a good way to do this in the documentation or elsewhere online.</p>\n"}, {"tags": ["rust", "rust-cargo"], "answers": [{"comments": [{"owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1528879472, "post_id": 37472558, "comment_id": 88669549, "body": "Could I configure the location where these libraries are cached? I am using Docker to build my project which i suppose it not allowing caching and hence longer build times. can I make use of the <code>target-dir</code> as mentioned in the other answer?"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "reply_to_user": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1528898429, "post_id": 37472558, "comment_id": 88682032, "body": "@RajeevRanjan I&#39;ve updated the other answer with the environment variable you could choose to use in Docker. You don&#39;t need to however, as specified in <a href=\"https://stackoverflow.com/q/42130132/155423\">Can Cargo download and build dependencies without also building the application?</a>"}, {"owner": {"reputation": 2512, "user_id": 5808553, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/6be8254e63e22cc820bb14938d532814?s=128&d=identicon&r=PG&f=1", "display_name": "Rajeev Ranjan", "link": "https://stackoverflow.com/users/5808553/rajeev-ranjan"}, "edited": false, "score": 0, "creation_date": 1528899641, "post_id": 37472558, "comment_id": 88682909, "body": "Thanks @Shepmaster"}, {"owner": {"reputation": 18645, "user_id": 50385, "user_type": "registered", "accept_rate": 64, "profile_image": "https://www.gravatar.com/avatar/2faf0c72f6a7f65431e7df489878be24?s=128&d=identicon&r=PG", "display_name": "Joseph Garvin", "link": "https://stackoverflow.com/users/50385/joseph-garvin"}, "edited": false, "score": 0, "creation_date": 1596351151, "post_id": 37472558, "comment_id": 111780085, "body": "This is such a weird nonanswer. Of course you would want it to cache things and redundantly compile the world. It just needs to do it intelligently, artifacts have to be keyed all the relevant factors affecting the build. Target, compiler, features, etc. These are the same very often."}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": false, "score": 3, "last_activity_date": 1464304976, "creation_date": 1464304976, "answer_id": 37472558, "question_id": 37471391, "link": "https://stackoverflow.com/questions/37471391/can-i-prevent-cargo-from-rebuilding-libraries-with-every-new-project/37472558#37472558", "title": "Can I prevent cargo from rebuilding libraries with every new project?", "body": "<p>Even if there is a way to do it, you probably don't want to. Just because you happen to be using the same libraries doesn't mean that they were compiled the same. For example, <a href=\"http://doc.crates.io/manifest.html#the-features-section\" rel=\"nofollow\">Cargo supports the concept of features</a>, compilation time configuration that changes how the crate was compiled.</p>\n\n<p>Likewise, you may need to support multiple versions of Rust, such as nightly and stable. Or perhaps you need to cross-compile for a different architecture. Each of those will produce different code. </p>\n\n<p>Cargo <em>will</em> cache the build products of a single project, so I've found the overhead not really noticeable, and I compile a lot of projects from people asking questions on Stack Overflow! :-)</p>\n"}, {"tags": [], "owner": {"reputation": 9509, "user_id": 257568, "user_type": "registered", "accept_rate": 50, "profile_image": "https://www.gravatar.com/avatar/6c736aafc7e3bfcf9f924d09bde3aa99?s=128&d=identicon&r=PG", "display_name": "ArtemGr", "link": "https://stackoverflow.com/users/257568/artemgr"}, "is_accepted": false, "score": 7, "last_activity_date": 1561948789, "last_edit_date": 1561948789, "creation_date": 1464352560, "answer_id": 37483762, "question_id": 37471391, "link": "https://stackoverflow.com/questions/37471391/can-i-prevent-cargo-from-rebuilding-libraries-with-every-new-project/37483762#37483762", "title": "Can I prevent cargo from rebuilding libraries with every new project?", "body": "<p>Several Cargo projects might share the libraries by using the same target dir.</p>\n\n<h3>.cargo/config</h3>\n\n<p>Place a \".cargo\" folder in a project and create a \"config\" file there containing:</p>\n\n<pre><code>[build]\ntarget-dir = \"/path/to/your/shared/target/dir\"\n</code></pre>\n\n<p>On Unix this might look like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>mkdir ~/shared_rust_target\nmkdir .cargo\necho \"[build]\" &gt; .cargo/config\necho \"target-dir = \\\"$HOME/shared_rust_target\\\"\" &gt;&gt; .cargo/config\n</code></pre>\n\n<h3>CARGO_TARGET_DIR</h3>\n\n<p>Set the <code>CARGO_TARGET_DIR</code> <a href=\"https://doc.rust-lang.org/cargo/reference/environment-variables.html\" rel=\"nofollow noreferrer\">environment variable</a>.</p>\n\n<p>On Unix this might look like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>export CARGO_TARGET_DIR = \"$HOME/shared_rust_target\"\n</code></pre>\n\n<hr>\n\n<p>See <a href=\"https://github.com/rust-lang/cargo/pull/1657\" rel=\"nofollow noreferrer\">this commit</a> for some extra <code>target-dir</code> documentation.</p>\n\n<p>In particular, prior to Cargo 1.9 you shouldn't build several projects into the same target dir concurrently. (<a href=\"https://github.com/rust-lang/cargo/pull/2486\" rel=\"nofollow noreferrer\">Here's more</a> on how Cargo 1.9 supports concurrent builds).</p>\n\n<p><code>target-dir</code> is also mentioned in the <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\" rel=\"nofollow noreferrer\">Cargo docs</a>.</p>\n\n<p>Note that personally I'm only using the <code>target-dir</code> feature to redirect the builds into a different place, so I never tried to do the shared builds. But it should work, according to <a href=\"https://github.com/rust-lang/cargo/issues/482\" rel=\"nofollow noreferrer\">this issue</a>.</p>\n\n<hr>\n\n<p>P.S. It is now also possible to achieve crate reuse with <a href=\"https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html\" rel=\"nofollow noreferrer\">workspaces</a>.</p>\n"}], "owner": {"reputation": 673, "user_id": 5008381, "user_type": "registered", "accept_rate": 77, "profile_image": "https://www.gravatar.com/avatar/2395a2ebca93cd49b689c3d9245f491f?s=128&d=identicon&r=PG&f=1", "display_name": "vlad4378", "link": "https://stackoverflow.com/users/5008381/vlad4378"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 1633, "favorite_count": 1, "answer_count": 2, "score": 10, "last_activity_date": 1561948789, "creation_date": 1464298437, "last_edit_date": 1592644375, "question_id": 37471391, "link": "https://stackoverflow.com/questions/37471391/can-i-prevent-cargo-from-rebuilding-libraries-with-every-new-project", "title": "Can I prevent cargo from rebuilding libraries with every new project?", "body": "<p>Suppose I execute <code>cargo new one --bin</code> and <code>cargo new two --bin</code> then add the same dependency to each project's <code>Cargo.toml</code> and build them.</p>\n<p>Now there are two absolutely identical sets of libraries:</p>\n<blockquote>\n<p>/one/target/debug/deps/ *.rlib</p>\n<p>/two/target/debug/deps/ *.rlib</p>\n</blockquote>\n<p>They are same files and waste storage space, but really the problem is that I have to compile these libraries again for every project. It takes a very much time. There is the same problem with <code>cargo install</code>.</p>\n<p>Can I specify a place to store compiled libraries to avoid recompilation?</p>\n"}, {"tags": ["rust", "hyper"], "comments": [{"owner": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1464296883, "post_id": 37470983, "comment_id": 62440678, "body": "What version of hyper are you using?"}, {"owner": {"reputation": 13379, "user_id": 1033027, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b56ea1c43a4ecb1060ec8bcb8d2bce78?s=128&d=identicon&r=PG", "display_name": "Jules", "link": "https://stackoverflow.com/users/1033027/jules"}, "reply_to_user": {"reputation": 28990, "user_id": 1114966, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/af8712b05e5cfb862323a07c83749054?s=128&d=identicon&r=PG", "display_name": "squiguy", "link": "https://stackoverflow.com/users/1114966/squiguy"}, "edited": false, "score": 0, "creation_date": 1464296929, "post_id": 37470983, "comment_id": 62440703, "body": "@squiguy 0.9.6, the latest version available via crates.io."}], "answers": [{"comments": [{"owner": {"reputation": 13379, "user_id": 1033027, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b56ea1c43a4ecb1060ec8bcb8d2bce78?s=128&d=identicon&r=PG", "display_name": "Jules", "link": "https://stackoverflow.com/users/1033027/jules"}, "edited": false, "score": 0, "creation_date": 1464298938, "post_id": 37471311, "comment_id": 62441594, "body": "Using the implementation from the <code>0.9.6</code> branch works. Thanks!"}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 5, "last_activity_date": 1464298080, "creation_date": 1464298080, "answer_id": 37471311, "question_id": 37470983, "link": "https://stackoverflow.com/questions/37470983/why-are-multiple-imports-from-the-hyper-crate-failing/37471311#37471311", "title": "Why are multiple imports from the Hyper crate failing?", "body": "<p>You are using examples from the master branch that do not work with <code>0.9.6</code> version. You can take a look at examples on the branch <a href=\"https://github.com/hyperium/hyper/tree/v0.9.6\" rel=\"noreferrer\"><code>0.9.6</code></a> or make cargo use <code>hyper</code> direct from github, writing on <code>Cargo.toml</code>:</p>\n\n<pre><code>[dependencies]                                     \nhyper = {git = \"https://github.com/hyperium/hyper\"}\n</code></pre>\n"}], "owner": {"reputation": 13379, "user_id": 1033027, "user_type": "registered", "accept_rate": 91, "profile_image": "https://www.gravatar.com/avatar/b56ea1c43a4ecb1060ec8bcb8d2bce78?s=128&d=identicon&r=PG", "display_name": "Jules", "link": "https://stackoverflow.com/users/1033027/jules"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 745, "favorite_count": 0, "accepted_answer_id": 37471311, "answer_count": 1, "score": 4, "last_activity_date": 1464298080, "creation_date": 1464296654, "last_edit_date": 1464297527, "question_id": 37470983, "link": "https://stackoverflow.com/questions/37470983/why-are-multiple-imports-from-the-hyper-crate-failing", "title": "Why are multiple imports from the Hyper crate failing?", "body": "<p>I'm working on a very simple HTTP client in Rust, built on top of the <code>hyper</code> (<a href=\"https://github.com/hyperium/hyper\" rel=\"nofollow\">GitHub</a>, <a href=\"https://crates.io/crates/hyper\" rel=\"nofollow\">crates.io</a>) crate.</p>\n\n<p>When I try to replicate the <code>examples/client.rs</code> file in a new Cargo project using <code>cargo build</code> (as well as using <code>rustc src/main.rs</code>), I get multiple errors caused by failed imports from <code>hyper</code>.</p>\n\n<p>Here's the top of my <code>main.rs</code>:</p>\n\n<pre><code>extern crate hyper;\n\nuse hyper::client::{Client, Request, Response, DefaultTransport as HttpStream};\nuse hyper::header::Connection;\nuse hyper::{Decoder, Encoder, Next};\n</code></pre>\n\n<p>The rest of the file is, except for some comments, identical to the <code>examples/client.rs</code> file from the <code>hyper</code> repository.</p>\n\n<p>At compile time, I get the following errors:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:10:48: 10:78 error: unresolved import `hyper::client::DefaultTransport`. There is no `DefaultTransport` in `hyper::client` [E0432]\nsrc/main.rs:10 use hyper::client::{Client, Request, Response, DefaultTransport as HttpStream};\n                                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:10:48: 10:78 help: run `rustc --explain E0432` to see a detailed explanation\nsrc/main.rs:12:13: 12:20 error: unresolved import `hyper::Decoder`. There is no `Decoder` in `hyper` [E0432]\nsrc/main.rs:12 use hyper::{Decoder, Encoder, Next};\n                           ^~~~~~~\nsrc/main.rs:12:13: 12:20 help: run `rustc --explain E0432` to see a detailed explanation\nsrc/main.rs:12:22: 12:29 error: unresolved import `hyper::Encoder`. There is no `Encoder` in `hyper` [E0432]\nsrc/main.rs:12 use hyper::{Decoder, Encoder, Next};\n                                    ^~~~~~~\nsrc/main.rs:12:22: 12:29 help: run `rustc --explain E0432` to see a detailed explanation\nsrc/main.rs:12:31: 12:35 error: unresolved import `hyper::Next`. There is no `Next` in `hyper` [E0432]\nsrc/main.rs:12 use hyper::{Decoder, Encoder, Next};\n                                             ^~~~\nsrc/main.rs:12:31: 12:35 help: run `rustc --explain E0432` to see a detailed explanation\nsrc/main.rs:53:6: 53:40 error: trait `hyper::client::Handler` is not in scope [E0405]\nsrc/main.rs:53 impl hyper::client::Handler&lt;HttpStream&gt; for Dump {\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nsrc/main.rs:53:6: 53:40 help: run `rustc --explain E0405` to see a detailed explanation\nsrc/main.rs:53:6: 53:40 help: you can to import it into scope: `use hyper::server::Handler;`.\n</code></pre>\n\n<p>In case it may contribute to this issue, here are the contents of my <code>Cargo.toml</code>:</p>\n\n<pre><code>name = \"my_project\"\nversion = \"0.0.1\"\nauthors = [\"email@example.com\"]\n\n[dependencies]\ngetopts = \"0.2\"\nhyper = \"0.9.6\"\n\n[[bin]]\nname = \"my_project\"\n</code></pre>\n\n<p>Some of the imports are actually working, so assuming the example in the repository is up to date, I really can't tell what's wrong. The source files of the crate look like they expose the involved types, but I'm very new to Rust so I may be misreading the files.</p>\n"}, {"tags": ["pointers", "rust"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 7, "creation_date": 1464283097, "post_id": 37466805, "comment_id": 62433149, "body": "1.9 has been released just now and stabilized <code>as_ref</code> and <code>as_mut</code>"}, {"owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "edited": false, "score": 9, "creation_date": 1464283279, "post_id": 37466805, "comment_id": 62433249, "body": "@delnan I think that&#39;s a record. 30 minutes after I post my answer, it&#39;s out of date because the language itself updated... And I <i>definitely</i> checked the docs to see that it was unstable! ^_^"}, {"owner": {"reputation": 249985, "user_id": 147192, "user_type": "registered", "accept_rate": 80, "profile_image": "https://i.stack.imgur.com/E78Vj.png?s=128&g=1", "display_name": "Matthieu M.", "link": "https://stackoverflow.com/users/147192/matthieu-m"}, "edited": false, "score": 7, "creation_date": 1464333772, "post_id": 37466805, "comment_id": 62452072, "body": "It&#39;s also a record the other way around: Florian asked a question, and 30 min later the functionality is implemented and stable :D"}], "tags": [], "owner": {"reputation": 269539, "user_id": 155423, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/419218774d04a581476ea1887a0921e0?s=128&d=identicon&r=PG", "display_name": "Shepmaster", "link": "https://stackoverflow.com/users/155423/shepmaster"}, "is_accepted": true, "score": 16, "last_activity_date": 1464283311, "last_edit_date": 1464283311, "creation_date": 1464281403, "answer_id": 37466805, "question_id": 37466676, "link": "https://stackoverflow.com/questions/37466676/is-it-possible-to-match-against-a-null-pointer-in-rust/37466805#37466805", "title": "Is it possible to match against a NULL pointer in Rust?", "body": "<p>As of Rust 1.9, there's a <a href=\"http://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref\">function <code>as_ref</code></a> that converts a raw pointer to an <code>Option&lt;&amp;T&gt;</code>, and a mutable variant <a href=\"http://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut\"><code>as_mut</code></a>:</p>\n\n<p>Your code would look something like </p>\n\n<pre><code>fn do_stuff(ptr: *const i32) -&gt; Option&lt;i32&gt; {\n    let ptr = unsafe { ptr.as_ref() };\n    ptr.map(|x| do_transform(x, 42))\n}\n</code></pre>\n"}], "owner": {"reputation": 3822, "user_id": 91585, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/58b7ea3d38398e9e2882d23f57762cb6?s=128&d=identicon&r=PG", "display_name": "Florian Doyon", "link": "https://stackoverflow.com/users/91585/florian-doyon"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 3182, "favorite_count": 0, "accepted_answer_id": 37466805, "answer_count": 1, "score": 6, "last_activity_date": 1464283311, "creation_date": 1464280968, "last_edit_date": 1464281505, "question_id": 37466676, "link": "https://stackoverflow.com/questions/37466676/is-it-possible-to-match-against-a-null-pointer-in-rust", "title": "Is it possible to match against a NULL pointer in Rust?", "body": "<p>Calling <code>is_null()</code> feels a bit odd:</p>\n\n<pre><code>fn do_stuff(ptr: *const i32) -&gt; Option&lt;i32&gt; {\n    if ptr.is_null() {\n        None\n    } else {\n        Some(do_transform(*ptr, 42))\n    }\n}\n</code></pre>\n"}, {"tags": ["generics", "rust", "return-type"], "answers": [{"comments": [{"owner": {"user_type": "does_not_exist", "display_name": "user395760"}, "edited": false, "score": 0, "creation_date": 1464267668, "post_id": 37461486, "comment_id": 62422087, "body": "<code>ok().expect()</code> is bad, it throws away the information in the <code>Result::Err</code>. Use <code>.read_line().expect()</code>."}], "tags": [], "owner": {"reputation": 1470, "user_id": 2075745, "user_type": "registered", "accept_rate": 80, "profile_image": "https://www.gravatar.com/avatar/6f9a084d236381e1882c4e28edb5151f?s=128&d=identicon&r=PG", "display_name": "user25064", "link": "https://stackoverflow.com/users/2075745/user25064"}, "is_accepted": false, "score": 0, "last_activity_date": 1464267877, "last_edit_date": 1464267877, "creation_date": 1464267274, "answer_id": 37461486, "question_id": 37460828, "link": "https://stackoverflow.com/questions/37460828/how-do-i-return-a-user-specified-type-on-success-or-a-string-on-failure/37461486#37461486", "title": "How do I return a user-specified type on success or a String on failure?", "body": "<p>It seems to me that the thing to do for this particular function is return the <code>Result</code> from the <code>input.trim().parse()</code> line. The method can also be made generic as you say to return the result from anything that is <code>parse-able</code> <a href=\"http://doc.rust-lang.org/std/primitive.str.html#method.parse\" rel=\"nofollow\">see docs</a></p>\n\n<pre><code>fn read_input&lt;F&gt;(question: &amp;str) -&gt; Result&lt;F, F::Err&gt;\n    where F : FromStr \n    {\n    let mut input = String::new();\n    println!(\"{}\", question);\n    io::stdin()\n        .read_line(&amp;mut input)\n        .expect(\"failed to read input\");\n    input.trim().parse()\n}\n</code></pre>\n\n<p>See <a href=\"https://play.rust-lang.org/?gist=bd9ab60fa48a208b75575ad6c118a029&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">playground</a> and <a href=\"https://gist.github.com/bd9ab60fa48a208b75575ad6c118a029\" rel=\"nofollow\">gist</a></p>\n"}, {"comments": [{"owner": {"reputation": 23, "user_id": 5958593, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b3f339648ec3f23f4426594e4c3718da?s=128&d=identicon&r=PG&f=1", "display_name": "qolop", "link": "https://stackoverflow.com/users/5958593/qolop"}, "edited": false, "score": 0, "creation_date": 1464282390, "post_id": 37462308, "comment_id": 62432786, "body": "Thank you very much. This answered my question(s) perfectly."}], "tags": [], "owner": {"reputation": 9123, "user_id": 5189607, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/b9b485f6efee3ce1b78dea5fe45c96f6?s=128&d=identicon&r=PG", "display_name": "malbarbo", "link": "https://stackoverflow.com/users/5189607/malbarbo"}, "is_accepted": true, "score": 5, "last_activity_date": 1464280519, "last_edit_date": 1464280519, "creation_date": 1464269389, "answer_id": 37462308, "question_id": 37460828, "link": "https://stackoverflow.com/questions/37460828/how-do-i-return-a-user-specified-type-on-success-or-a-string-on-failure/37462308#37462308", "title": "How do I return a user-specified type on success or a String on failure?", "body": "<p>It seems that you are asking two distinct questions here.</p>\n\n<p><strong>1. How can the user specify the output type of a function?</strong></p>\n\n<p>Use a generic parameter. For example, the <a href=\"https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.collect\" rel=\"nofollow\"><code>Iterator::collect</code></a> requires a type parameter <code>B</code>, which is used as return type.</p>\n\n<p><strong>2. How can I return a value that can be of two distinct types?</strong></p>\n\n<p>You can create a <code>enum</code> that will serve as the \"union\" of the two types:</p>\n\n<pre><code>pub enum Union&lt;A, B&gt; {\n    ValueA(A),\n    ValueB(B)\n}\n</code></pre>\n\n<p>In this case, there is no intrinsic meaning for the <code>ValueA</code> or <code>ValueB</code> case.</p>\n\n<p>The <a href=\"https://doc.rust-lang.org/stable/std/result/enum.Result.html\" rel=\"nofollow\"><code>Result</code></a> enum  is similar to this, but it adds meaning to each case, that is, the <code>Ok</code> case indicates success and <code>Err</code> indicates an error.</p>\n\n<hr>\n\n<p>That said, I suggest that you use <code>Result</code> and that the error case returns the read input with the <code>parse</code> error:</p>\n\n<pre><code>use std::io;\nuse std::str::FromStr;\n\n// 1: T is a type parameter that is used as (part of) return type\n//\n// 2: Result allows you to return either the parsed T value or\n//    the read input value with the parse error \nfn read_input&lt;T: FromStr&gt;(question: &amp;str) -&gt; Result&lt;T, (String, T::Err)&gt; {\n    let mut input = String::new();\n    println!(\"{}\", question);\n    io::stdin()\n        .read_line(&amp;mut input)\n        .ok()\n        .expect(\"failed to read input\");\n    match input.trim().parse() {\n        Ok(p) =&gt; Ok(p),\n        Err(err) =&gt; Err((input, err))\n    }\n}\n</code></pre>\n\n<p>This will allow you to write a nice error message to the user:</p>\n\n<pre><code>fn main() {\n    // you can use any type that implements FromStr instead of u32\n    match read_input::&lt;u32&gt;(\"2 + 2?\") {\n        Ok(ans) =&gt; println!(\"answer: {}\", ans),\n        Err((input, err)) =&gt; println!(\"\\\"{}\\\" is an invalid answer: {}\", input, err)\n    }\n}\n</code></pre>\n"}], "owner": {"reputation": 23, "user_id": 5958593, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b3f339648ec3f23f4426594e4c3718da?s=128&d=identicon&r=PG&f=1", "display_name": "qolop", "link": "https://stackoverflow.com/users/5958593/qolop"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 108, "favorite_count": 0, "accepted_answer_id": 37462308, "answer_count": 2, "score": 1, "last_activity_date": 1464284194, "creation_date": 1464265597, "last_edit_date": 1464284194, "question_id": 37460828, "link": "https://stackoverflow.com/questions/37460828/how-do-i-return-a-user-specified-type-on-success-or-a-string-on-failure", "title": "How do I return a user-specified type on success or a String on failure?", "body": "<p>I have a program where user input is collected in a function and a value is returned. In the function, it tries to parse the <code>String</code> input to a <code>u32</code>. If it fails, rather than panic and end the program, I want it to return the <code>String</code>.</p>\n\n<p>Is it possible to allow any return type? I read the generics section in the Rust Book, but it didn't include anything about returning a generic type.</p>\n\n<p>Here's my code:</p>\n\n<pre><code>fn read_input(question: &amp;str) -&gt; u32 {\n    let mut input = String::new();\n    println!(\"{}\", question);\n    io::stdin()\n        .read_line(&amp;mut input)\n        .ok()\n        .expect(\"failed to read input\");\n    match input.trim().parse() {\n        Ok(number) =&gt; {\n            return number; // return a u32\n        }\n        Err(_) =&gt; {\n            return input; // return a String\n        }\n    }\n}\n</code></pre>\n"}, {"tags": ["performance", "generics", "rust", "idioms"], "comments": [{"owner": {"reputation": 20035, "user_id": 2971, "user_type": "registered", "accept_rate": 90, "profile_image": "https://www.gravatar.com/avatar/f3f6251940b41a2251e7a9f4b745a7f2?s=128&d=identicon&r=PG", "display_name": "Magnus Hoff", "link": "https://stackoverflow.com/users/2971/magnus-hoff"}, "edited": false, "score": 1, "creation_date": 1464252999, "post_id": 37455703, "comment_id": 62412156, "body": "It would be great if you could post a complete, minimal example that I could paste into a file locally to get up and running :)"}], "answers": [{"tags": [], "owner": {"reputation": 96489, "user_id": 788207, "user_type": "registered", "accept_rate": 84, "profile_image": "https://i.stack.imgur.com/KQmlY.jpg?s=128&g=1", "display_name": "Vladimir Matveev", "link": "https://stackoverflow.com/users/788207/vladimir-matveev"}, "is_accepted": true, "score": 8, "last_activity_date": 1464259102, "last_edit_date": 1464259102, "creation_date": 1464258062, "answer_id": 37458014, "question_id": 37455703, "link": "https://stackoverflow.com/questions/37455703/how-can-i-make-my-rust-function-more-generic-efficient/37458014#37458014", "title": "How can I make my Rust function more generic &amp; efficient?", "body": "<p>Unfortunately, there is no way to do what you want when keeping both the genericity and the absence of allocations. The reason is that you need someone to own your string data, but if <code>flat_map(str::split_whitespace)</code> is performed over an iterator of owned strings, then there is no one to keep these owned strings anymore because <code>str::split_whitespace</code> only borrows the string it is called on. However, if you \"push\" the ownership up the call chain, you won't be able to be fully generic and accept owned strings by value.</p>\n\n<p>Therefore, there are two solutions: to precollect the entire iterator to a <code>Vec&lt;String&gt;</code> (or to transform the items yielded by <code>split_whitespace()</code> to owned strings separately and collect them to a <code>Vec</code> again), or to accept an iterator of references.</p>\n\n<p>Here is the most generic version I could come up with of the first solution:</p>\n\n<pre><code>use std::str::FromStr;\nuse std::fmt::Debug;\n\nfn iter_to_min&lt;S, T, U&gt;(i: T) -&gt; U\n    where S: Into&lt;String&gt;,\n          T: IntoIterator&lt;Item=S&gt;,\n          U: Ord + FromStr,\n          U::Err: Debug\n{\n    i.into_iter()\n        .map(Into::into)\n        .collect::&lt;Vec&lt;_&gt;&gt;()\n        .iter()\n        .flat_map(|s| s.split_whitespace())\n        .map(str::parse::&lt;U&gt;)\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found\")\n}\n</code></pre>\n\n<p>(try it <a href=\"https://play.rust-lang.org/?gist=c06d36229426d9f213da21b09c96ec20&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">here</a>)</p>\n\n<p>It is basically the same as your first one but more generic. Also note that you don't need to trim the parts of the string after <code>split_whitespace()</code> - the latter will make sure that the parts of the string do not have spaces at their sides. <code>Into&lt;String&gt;</code> bound allows one to pass both <code>&amp;str</code> and <code>String</code> iterators, and in the latter case no extra copies will be done.</p>\n\n<p>Alternatively, you can split each line into owned strings separately:</p>\n\n<pre><code>fn iter_to_min&lt;S, T, U&gt;(i: T) -&gt; U\n    where S: AsRef&lt;str&gt;,\n          T: IntoIterator&lt;Item=S&gt;,\n          U: Ord + FromStr,\n          U::Err: Debug\n{\n    i.into_iter()\n        .flat_map(|s| s.as_ref().split_whitespace().map(String::from).collect::&lt;Vec&lt;_&gt;&gt;())\n        .map(|s| s.parse::&lt;U&gt;())\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found\")\n}\n</code></pre>\n\n<p>Here we only need to obtain a <code>&amp;str</code>s from iterator items, not <code>String</code>s, so I used <code>AsRef&lt;str&gt;</code>. However, each line must not only be converted to a sequence of <code>String</code>s; this sequence must be collected into a vector for exactly the same reason described above - otherwise there would be no one to keep the original values of type <code>S</code> from destruction.</p>\n\n<p>But it <em>is</em> possible to avoid the <code>.map(String::from).collect::&lt;Vec&lt;_&gt;&gt;()</code> if you are willing to lose some genericity, though. This is the second solution I've mentioned above. We can accept an iterator over references:</p>\n\n<pre><code>fn iter_to_min&lt;'a, S: ?Sized, T, U&gt;(i: T) -&gt; U\n    where S: AsRef&lt;str&gt; + 'a,\n          T: IntoIterator&lt;Item=&amp;'a S&gt;,\n          U: Ord + FromStr,\n          U::Err: Debug\n{\n    i.into_iter()\n        .map(AsRef::as_ref)\n        .flat_map(str::split_whitespace)\n        .map(|s| s.parse::&lt;U&gt;())\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found\")\n}\n</code></pre>\n\n<p>(try it <a href=\"https://play.rust-lang.org/?gist=f03d714988e34c97ab314c54376e9d56&amp;version=stable&amp;backtrace=0\" rel=\"noreferrer\">here</a>)</p>\n\n<p>Roughly speaking, now <code>S</code> values are owned by someone else, and their lifetime is bigger than the scope of <code>iter_to_min()</code>, so you need neither to transform each part to <code>String</code> nor to collect the entire split result to a <code>Vec&lt;String&gt;</code>. However, you won't be able to pass a <code>Vec&lt;String&gt;</code> to this function; you will be able to pass <code>vec.iter()</code>, however:</p>\n\n<pre><code>let v: Vec&lt;String&gt; = vec![\"0\".into(), \"1\".into()];\niter_to_min(v.iter())\n</code></pre>\n\n<p>In all these examples I've changed <code>Iterator</code> to <code>IntoIterator</code> - this is almost always what you want to use instead of just <code>Iterator</code>. It allows you, for example, to pass collections to such functions directly. Second, I've added <code>U::Err: Debug</code> condition, which is necessary for <code>Result::unwrap</code> to work. And finally, to fix the problem with \"String not coercing to &amp;str` you can always use explicit closures and method syntax which would do this coercion for you.</p>\n"}, {"tags": [], "owner": {"reputation": 11927, "user_id": 2301531, "user_type": "registered", "accept_rate": 62, "profile_image": "https://www.gravatar.com/avatar/0e05b25685a72ab6268dce396da1b76f?s=128&d=identicon&r=PG", "display_name": "A.B.", "link": "https://stackoverflow.com/users/2301531/a-b"}, "is_accepted": false, "score": 3, "last_activity_date": 1464264870, "creation_date": 1464264870, "answer_id": 37460567, "question_id": 37455703, "link": "https://stackoverflow.com/questions/37455703/how-can-i-make-my-rust-function-more-generic-efficient/37460567#37460567", "title": "How can I make my Rust function more generic &amp; efficient?", "body": "<p>A solution without extra allocations</p>\n\n<pre><code>use std::str::FromStr;\n\nfn iter_to_min&lt;T, U&gt;(i: T) -&gt; Option&lt;U&gt;\n    where T: Iterator&lt;Item = String&gt;,\n          U: Ord + FromStr\n{\n    i.filter_map(|string| {\n            string.split_whitespace()\n                .map(str::trim)\n                .map(str::parse::&lt;U&gt;)\n                .filter_map(Result::ok)\n                .min()\n        })\n        .min()\n}\n</code></pre>\n"}], "owner": {"reputation": 2340, "user_id": 2250791, "user_type": "registered", "accept_rate": 92, "profile_image": "https://www.gravatar.com/avatar/e72d4f734d39c777f543025d36d4de4e?s=128&d=identicon&r=PG", "display_name": "Camden Narzt", "link": "https://stackoverflow.com/users/2250791/camden-narzt"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 350, "favorite_count": 1, "accepted_answer_id": 37458014, "answer_count": 2, "score": 8, "last_activity_date": 1464279171, "creation_date": 1464251932, "last_edit_date": 1464279171, "question_id": 37455703, "link": "https://stackoverflow.com/questions/37455703/how-can-i-make-my-rust-function-more-generic-efficient", "title": "How can I make my Rust function more generic &amp; efficient?", "body": "<p>I have a function that works, but is more specialized than I'd like and has some inefficiencies, I'd like to fix that.</p>\n\n<p>The working but flawed function:</p>\n\n<pre><code>fn iter_to_min&lt;T&gt;(i:T) -&gt; i64 where T:Iterator&lt;Item=String&gt;{\n    i.collect::&lt;Vec&lt;String&gt;&gt;()\n        .iter()\n        .flat_map(|s|s.split_whitespace())\n        .map(str::trim)\n        .map(str::parse::&lt;i64&gt;)\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found.\")\n}\n</code></pre>\n\n<p>The reasons I dislike this implementation are:</p>\n\n<ul>\n<li><code>i64</code> is hard coded and I'd like to reuse this function for <code>u64</code> and possibly other return types</li>\n<li>it collects it's input just to iterate over it immediately which is inefficient (heap allocation for no reason)</li>\n<li>the closure passed to <code>flat_map</code> might not be optimized away by LLVM in all cases</li>\n</ul>\n\n<p>and the closest I could get to my ideal function:</p>\n\n<pre><code>use std::str::FromStr;\n\nfn iter_to_min&lt;T,U&gt;(i:T) -&gt; U where T:Iterator&lt;Item=String&gt;,U: Ord+FromStr{\n    i.flat_map(str::split_whitespace)\n        .map(str::trim)\n        .map(str::parse::&lt;U&gt;)\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found.\")\n}\n</code></pre>\n\n<p>The problems I am seeing are:</p>\n\n<ul>\n<li>the argument passed to <code>str::split_whitespace</code> is a <code>String</code> and won't coerce to a <code>str</code></li>\n<li>the argument passed to <code>str::split_whitespace</code> isn't known to live long enough</li>\n<li><code>Result::unwrap</code> doesn't complains that the trait <code>core::fmt::Debug</code> is not implemented for the type <code>&lt;U as core::str::FromStr&gt;::Err</code></li>\n</ul>\n\n<p>I think that with clever lifetime notation and Trait requirements at least two of those could be fixed, and who knows maybe there's a way to go three for three.</p>\n\n<p>Example code using some suggested fixes:</p>\n\n<pre><code>use std::io::BufRead;\nuse std::str::FromStr;\nuse std::fmt::Debug;\n\nfn iter_to_min&lt;T,U&gt;(i:T) -&gt; U where T:Iterator&lt;Item=String&gt;,U: Ord+FromStr, U::Err: Debug{\n    i.collect::&lt;Vec&lt;String&gt;&gt;()\n        .iter()\n        .flat_map(|s|s.split_whitespace())\n        .map(str::trim)\n        .map(str::parse::&lt;U&gt;)\n        .map(Result::unwrap)\n        .min()\n        .expect(\"No min found.\")\n}\n\nfn main() {\n    let a: Vec&lt;_&gt; = std::env::args().skip(1).collect();\n    let m:i64 = if a.is_empty() {\n        let s = std::io::stdin();\n        let m = iter_to_min(s.lock().lines().map(Result::unwrap));\n        m\n    }else{\n        iter_to_min(a.into_iter())\n    };\n    println!(\"{}\", m);\n}\n</code></pre>\n"}, {"tags": ["rust"], "comments": [{"owner": {"reputation": 466742, "user_id": 224671, "user_type": "registered", "accept_rate": 67, "profile_image": "https://www.gravatar.com/avatar/c90de868a7e95d75bdfd6a906dfedac7?s=128&d=identicon&r=PG", "display_name": "kennytm", "link": "https://stackoverflow.com/users/224671/kennytm"}, "edited": false, "score": 0, "creation_date": 1464241246, "post_id": 37452379, "comment_id": 62405671, "body": "<code>pub</code> is explicit in Rust. If you want to access the field externally, you need <code>pub</code>."}], "answers": [{"tags": [], "owner": {"reputation": 57021, "user_id": 1517578, "user_type": "registered", "accept_rate": 60, "profile_image": "https://i.stack.imgur.com/gd070.png?s=128&g=1", "display_name": "Simon Whitehead", "link": "https://stackoverflow.com/users/1517578/simon-whitehead"}, "is_accepted": true, "score": 3, "last_activity_date": 1464245194, "last_edit_date": 1464245194, "creation_date": 1464241285, "answer_id": 37452459, "question_id": 37452379, "link": "https://stackoverflow.com/questions/37452379/multifile-rust-project/37452459#37452459", "title": "Multifile Rust project", "body": "<p>Your assumption is correct. Your struct fields are private by default - the scope of which is limited to within the module that it is defined.</p>\n\n<p>So, within your <code>structs.rs</code> file/module, you would be able to use the <code>width</code> and <code>length</code> fields without troubles. However, if you want them to be accessible from outside of the <code>structs</code> module, you'll need to declare them as public (via <code>pub</code>). That, or declare methods on your type that can manipulate the fields themselves (encapsulate them).</p>\n\n<p>Here is an example showing all 3 scenarios (<a href=\"https://play.rust-lang.org/?gist=fab99bb52bec5a9cd007ac0f90cf38f3&amp;version=stable&amp;backtrace=0\" rel=\"nofollow\">Playground</a>):</p>\n\n<pre><code>mod working {\n    pub struct Object {\n        pub name: String\n    }\n}\n\nmod notworking {\n    pub struct Object {\n        name: String\n    }\n\n    impl Object {\n        pub fn something(&amp;self) {\n            println!(\"Name is: {}\", self.name); // &lt;--- perfectly fine to use a private \n                                                // field within the same module\n        }\n    }\n}\n\nstruct Object {\n    name: String\n}\n\nfn main() {\n    let same_module = Object{ name: \"Same module\".to_string() };\n    let working_module = working::Object{ name: \"Working module\".to_string() };\n    let notworking_module = notworking::Object{ name: \"Not working module\".to_string() };\n}\n</code></pre>\n\n<p>One where the private field is in the same module, one where the private field is in another module and one where a public field is in another module. Note that making the <code>name</code> field public in the <code>notworking</code> module will make the code compile.</p>\n"}], "owner": {"reputation": 1141, "user_id": 1058543, "user_type": "registered", "accept_rate": 58, "profile_image": "https://www.gravatar.com/avatar/f7cf7f17302b550d2dfda1c4f1eb1b29?s=128&d=identicon&r=PG", "display_name": "Nodoid", "link": "https://stackoverflow.com/users/1058543/nodoid"}, "delete_vote_count": 0, "reopen_vote_count": 0, "close_vote_count": 0, "is_answered": true, "view_count": 271, "favorite_count": 0, "closed_date": 1464280315, "accepted_answer_id": 37452459, "answer_count": 1, "score": 0, "last_activity_date": 1464262416, "creation_date": 1464240904, "last_edit_date": 1464262416, "question_id": 37452379, "link": "https://stackoverflow.com/questions/37452379/multifile-rust-project", "closed_reason": "Duplicate", "title": "Multifile Rust project", "body": "<p>My Rust project consists of two files: <code>main.rs</code> and <code>structs.rs</code> - the structs file just contains a pile of structures such as</p>\n\n<pre><code>pub struct Area {\n    width: f32,\n    length: f32\n}\n</code></pre>\n\n<p>In my <code>main.rs</code> file, I have the following:</p>\n\n<pre><code>mod structs;\nuse structs::*;\n</code></pre>\n\n<p>then my <code>fn main()</code> code (this creates a variable to store the structs and then uses a couple of <code>println!</code> lines to output the contents of the variable).</p>\n\n<p>When I run cargo run on the source, I'm getting a pile of throwback such as</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>src/main.rs:27:26: 27:62 error: field `width` of struct `structs::Area` is private [E0451]\nsrc/main.rs:27             window_area: Area {width: 0.9f32, length: 1.1f32},\n</code></pre>\n\n<p>Do I need to be defining every field within my struct as being pub or is there something I'm missing here?</p>\n\n<p>I don't really want to create a crate for such a simple POC, but this is driving me mad. I can get the code to work using the <code>include!()</code> macro.</p>\n"}]